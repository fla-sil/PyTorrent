{"info": {"author": "S.C. van de Leemput", "author_email": "silvandeleemput@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Software Development :: Libraries"], "description": "======\nMemCNN\n======\n\n.. image:: https://img.shields.io/circleci/build/github/silvandeleemput/memcnn/master.svg        \n        :alt: CircleCI - Status master branch\n        :target: https://circleci.com/gh/silvandeleemput/memcnn/tree/master\n\n.. image:: https://img.shields.io/docker/cloud/build/silvandeleemput/memcnn.svg\n        :alt: Docker - Status\n        :target: https://hub.docker.com/r/silvandeleemput/memcnn\n\n.. image:: https://readthedocs.org/projects/memcnn/badge/?version=latest        \n        :alt: Documentation - Status master branch\n        :target: https://memcnn.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/codacy/grade/95de32e0d7c54d038611da47e9f0948b/master.svg\n        :alt: Codacy - Branch grade\n        :target: https://app.codacy.com/project/silvandeleemput/memcnn/dashboardgit\n\n.. image:: https://img.shields.io/codecov/c/gh/silvandeleemput/memcnn/master.svg   \n        :alt: Codecov - Status master branch\n        :target: https://codecov.io/gh/silvandeleemput/memcnn\n\n.. image:: https://img.shields.io/pypi/v/memcnn.svg\n        :alt: PyPI - Latest release\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/conda/vn/silvandeleemput/memcnn?label=anaconda\n        :alt: Conda - Latest release\n        :target: https://anaconda.org/silvandeleemput/memcnn\n\n.. image:: https://img.shields.io/pypi/implementation/memcnn.svg        \n        :alt: PyPI - Implementation\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/pypi/pyversions/memcnn.svg        \n        :alt: PyPI - Python version\n        :target: https://pypi.python.org/pypi/memcnn\n\n.. image:: https://img.shields.io/github/license/silvandeleemput/memcnn.svg        \n        :alt: GitHub - Repository license\n        :target: https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt\n\n.. image:: http://joss.theoj.org/papers/10.21105/joss.01576/status.svg\n        :alt: JOSS - DOI\n        :target: https://doi.org/10.21105/joss.01576\n\nA `PyTorch <http://pytorch.org/>`__ framework for developing memory-efficient invertible neural networks.\n\n* Free software: `MIT license <https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt>`__ (please cite our work if you use it)\n* Documentation: https://memcnn.readthedocs.io.\n* Installation: https://memcnn.readthedocs.io/en/latest/installation.html\n\nFeatures\n--------\n\n* Enable memory savings during training by wrapping arbitrary invertible PyTorch functions with the `InvertibleModuleWrapper` class.\n* Simple toggling of memory saving by setting the `keep_input` property of the `InvertibleModuleWrapper`.\n* Turn arbitrary non-linear PyTorch functions into invertible versions using the `AdditiveCoupling` or the `AffineCoupling` classes.\n* Training and evaluation code for reproducing RevNet experiments using MemCNN.\n* CI tests for Python v2.7 and v3.7 and torch v0.4, v1.0, v1.1, and v1.4 with good code coverage.\n\nExamples\n--------\n\nCreating an AdditiveCoupling with memory savings\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import torch\n    import torch.nn as nn\n    import memcnn\n\n\n    # define a new torch Module with a sequence of operations: Relu o BatchNorm2d o Conv2d\n    class ExampleOperation(nn.Module):\n        def __init__(self, channels):\n            super(ExampleOperation, self).__init__()\n            self.seq = nn.Sequential(\n                                        nn.Conv2d(in_channels=channels, out_channels=channels,\n                                                  kernel_size=(3, 3), padding=1),\n                                        nn.BatchNorm2d(num_features=channels),\n                                        nn.ReLU(inplace=True)\n                                    )\n\n        def forward(self, x):\n            return self.seq(x)\n\n\n    # generate some random input data (batch_size, num_channels, y_elements, x_elements)\n    X = torch.rand(2, 10, 8, 8)\n\n    # application of the operation(s) the normal way\n    model_normal = ExampleOperation(channels=10)\n    model_normal.eval()\n\n    Y = model_normal(X)\n\n    # turn the ExampleOperation invertible using an additive coupling\n    invertible_module = memcnn.AdditiveCoupling(\n        Fm=ExampleOperation(channels=10 // 2),\n        Gm=ExampleOperation(channels=10 // 2)\n    )\n\n    # test that it is actually a valid invertible module (has a valid inverse method)\n    assert memcnn.is_invertible_module(invertible_module, test_input_shape=X.shape)\n\n    # wrap our invertible_module using the InvertibleModuleWrapper and benefit from memory savings during training\n    invertible_module_wrapper = memcnn.InvertibleModuleWrapper(fn=invertible_module, keep_input=True, keep_input_inverse=True)\n\n    # by default the module is set to training, the following sets this to evaluation\n    # note that this is required to pass input tensors to the model with requires_grad=False (inference only)\n    invertible_module_wrapper.eval()\n\n    # test that the wrapped module is also a valid invertible module\n    assert memcnn.is_invertible_module(invertible_module_wrapper, test_input_shape=X.shape)\n\n    # compute the forward pass using the wrapper\n    Y2 = invertible_module_wrapper.forward(X)\n\n    # the input (X) can be approximated (X2) by applying the inverse method of the wrapper on Y2\n    X2 = invertible_module_wrapper.inverse(Y2)\n\n    # test that the input and approximation are similar\n    assert torch.allclose(X, X2, atol=1e-06)\n\nRun PyTorch Experiments\n-----------------------\n\nAfter installing MemCNN run:\n\n.. code:: bash\n\n    python -m memcnn.train [MODEL] [DATASET] [--fresh] [--no-cuda]\n\n* Available values for ``DATASET`` are ``cifar10`` and ``cifar100``.\n* Available values for ``MODEL`` are ``resnet32``, ``resnet110``, ``resnet164``, ``revnet38``, ``revnet110``, ``revnet164``\n* Use the ``--fresh`` flag to remove earlier experiment results.\n* Use the ``--no-cuda`` flag to train on the CPU rather than the GPU through CUDA.\n\nDatasets are automatically downloaded if they are not available.\n\nWhen using Python 3.* replace the ``python`` directive with the appropriate Python 3 directive. For example when using the MemCNN docker image use ``python3.6``.\n\nWhen MemCNN was installed using `pip` or from sources you might need to setup a configuration file before running this command.\nRead the corresponding section about how to do this here: https://memcnn.readthedocs.io/en/latest/installation.html\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/memcnn/", "keywords": "memcnn invertible PyTorch", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "memcnn", "package_url": "https://pypi.org/project/memcnn/", "platform": "", "project_url": "https://pypi.org/project/memcnn/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/memcnn/"}, "release_url": "https://pypi.org/project/memcnn/1.3.2/", "requires_dist": ["Pillow (<7.0.0)", "numpy", "SimpleITK", "torch (>=0.4.0)", "torchvision", "tqdm", "pathlib2"], "requires_python": "", "summary": "A PyTorch framework for developing memory efficient deep invertible networks.", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circleci.com/gh/silvandeleemput/memcnn/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI - Status master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95a49cfc5e87f6c6a81be657fe47cb23268f2ffc/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f73696c76616e64656c65656d7075742f6d656d636e6e2f6d61737465722e737667\"></a>\n<a href=\"https://hub.docker.com/r/silvandeleemput/memcnn\" rel=\"nofollow\"><img alt=\"Docker - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eed0f7ecbd7dada84d973e5c5120a50b58e3aade/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f73696c76616e64656c65656d7075742f6d656d636e6e2e737667\"></a>\n<a href=\"https://memcnn.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation - Status master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80a741648f9557ee3d77486f6af303d1a4a5da06/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d656d636e6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://app.codacy.com/project/silvandeleemput/memcnn/dashboardgit\" rel=\"nofollow\"><img alt=\"Codacy - Branch grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42830b5638e77c9415b970cbc8ac1f49929b7d8f/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f67726164652f39356465333265306437633534643033383631316461343765396630393438622f6d61737465722e737667\"></a>\n<a href=\"https://codecov.io/gh/silvandeleemput/memcnn\" rel=\"nofollow\"><img alt=\"Codecov - Status master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aed84c4a3992ef1b00de88819782914c531242b7/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f73696c76616e64656c65656d7075742f6d656d636e6e2f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/memcnn\" rel=\"nofollow\"><img alt=\"PyPI - Latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/773d83b21eeb09f17bde43a8b749908f1bd758f0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d656d636e6e2e737667\"></a>\n<a href=\"https://anaconda.org/silvandeleemput/memcnn\" rel=\"nofollow\"><img alt=\"Conda - Latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/804b1bfc3a4aaf70e5764d0218490bb54da17bd5/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f73696c76616e64656c65656d7075742f6d656d636e6e3f6c6162656c3d616e61636f6e6461\"></a>\n<a href=\"https://pypi.python.org/pypi/memcnn\" rel=\"nofollow\"><img alt=\"PyPI - Implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b021b88fe125e29404e43df5d5800f781f8235c7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f6d656d636e6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/memcnn\" rel=\"nofollow\"><img alt=\"PyPI - Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e26920d0c74381904777c55859c2d726075683a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d656d636e6e2e737667\"></a>\n<a href=\"https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"GitHub - Repository license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32b196a82fdbf19a50ac6fe5fa90ab84e9a70f63/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f73696c76616e64656c65656d7075742f6d656d636e6e2e737667\"></a>\n<a href=\"https://doi.org/10.21105/joss.01576\" rel=\"nofollow\"><img alt=\"JOSS - DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22cb3924ad8a13bdfb0bc872939aba4e5e0e2fc1/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f31302e32313130352f6a6f73732e30313537362f7374617475732e737667\"></a>\n<p>A <a href=\"http://pytorch.org/\" rel=\"nofollow\">PyTorch</a> framework for developing memory-efficient invertible neural networks.</p>\n<ul>\n<li>Free software: <a href=\"https://github.com/silvandeleemput/memcnn/blob/master/LICENSE.txt\" rel=\"nofollow\">MIT license</a> (please cite our work if you use it)</li>\n<li>Documentation: <a href=\"https://memcnn.readthedocs.io\" rel=\"nofollow\">https://memcnn.readthedocs.io</a>.</li>\n<li>Installation: <a href=\"https://memcnn.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">https://memcnn.readthedocs.io/en/latest/installation.html</a></li>\n</ul>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Enable memory savings during training by wrapping arbitrary invertible PyTorch functions with the <cite>InvertibleModuleWrapper</cite> class.</li>\n<li>Simple toggling of memory saving by setting the <cite>keep_input</cite> property of the <cite>InvertibleModuleWrapper</cite>.</li>\n<li>Turn arbitrary non-linear PyTorch functions into invertible versions using the <cite>AdditiveCoupling</cite> or the <cite>AffineCoupling</cite> classes.</li>\n<li>Training and evaluation code for reproducing RevNet experiments using MemCNN.</li>\n<li>CI tests for Python v2.7 and v3.7 and torch v0.4, v1.0, v1.1, and v1.4 with good code coverage.</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<h2 id=\"creating-an-additivecoupling-with-memory-savings\"><span class=\"section-subtitle\">Creating an AdditiveCoupling with memory savings</span></h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span>\n<span class=\"kn\">import</span> <span class=\"nn\">memcnn</span>\n\n\n<span class=\"c1\"># define a new torch Module with a sequence of operations: Relu o BatchNorm2d o Conv2d</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExampleOperation</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ExampleOperation</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">(</span>\n                                    <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"n\">in_channels</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span> <span class=\"n\">out_channels</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">,</span>\n                                              <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n                                    <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"n\">num_features</span><span class=\"o\">=</span><span class=\"n\">channels</span><span class=\"p\">),</span>\n                                    <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                                <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># generate some random input data (batch_size, num_channels, y_elements, x_elements)</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># application of the operation(s) the normal way</span>\n<span class=\"n\">model_normal</span> <span class=\"o\">=</span> <span class=\"n\">ExampleOperation</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">model_normal</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">model_normal</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># turn the ExampleOperation invertible using an additive coupling</span>\n<span class=\"n\">invertible_module</span> <span class=\"o\">=</span> <span class=\"n\">memcnn</span><span class=\"o\">.</span><span class=\"n\">AdditiveCoupling</span><span class=\"p\">(</span>\n    <span class=\"n\">Fm</span><span class=\"o\">=</span><span class=\"n\">ExampleOperation</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">10</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n    <span class=\"n\">Gm</span><span class=\"o\">=</span><span class=\"n\">ExampleOperation</span><span class=\"p\">(</span><span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">10</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># test that it is actually a valid invertible module (has a valid inverse method)</span>\n<span class=\"k\">assert</span> <span class=\"n\">memcnn</span><span class=\"o\">.</span><span class=\"n\">is_invertible_module</span><span class=\"p\">(</span><span class=\"n\">invertible_module</span><span class=\"p\">,</span> <span class=\"n\">test_input_shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wrap our invertible_module using the InvertibleModuleWrapper and benefit from memory savings during training</span>\n<span class=\"n\">invertible_module_wrapper</span> <span class=\"o\">=</span> <span class=\"n\">memcnn</span><span class=\"o\">.</span><span class=\"n\">InvertibleModuleWrapper</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"n\">invertible_module</span><span class=\"p\">,</span> <span class=\"n\">keep_input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">keep_input_inverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># by default the module is set to training, the following sets this to evaluation</span>\n<span class=\"c1\"># note that this is required to pass input tensors to the model with requires_grad=False (inference only)</span>\n<span class=\"n\">invertible_module_wrapper</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># test that the wrapped module is also a valid invertible module</span>\n<span class=\"k\">assert</span> <span class=\"n\">memcnn</span><span class=\"o\">.</span><span class=\"n\">is_invertible_module</span><span class=\"p\">(</span><span class=\"n\">invertible_module_wrapper</span><span class=\"p\">,</span> <span class=\"n\">test_input_shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute the forward pass using the wrapper</span>\n<span class=\"n\">Y2</span> <span class=\"o\">=</span> <span class=\"n\">invertible_module_wrapper</span><span class=\"o\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the input (X) can be approximated (X2) by applying the inverse method of the wrapper on Y2</span>\n<span class=\"n\">X2</span> <span class=\"o\">=</span> <span class=\"n\">invertible_module_wrapper</span><span class=\"o\">.</span><span class=\"n\">inverse</span><span class=\"p\">(</span><span class=\"n\">Y2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># test that the input and approximation are similar</span>\n<span class=\"k\">assert</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">X2</span><span class=\"p\">,</span> <span class=\"n\">atol</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"run-pytorch-experiments\">\n<h2>Run PyTorch Experiments</h2>\n<p>After installing MemCNN run:</p>\n<pre>python -m memcnn.train <span class=\"o\">[</span>MODEL<span class=\"o\">]</span> <span class=\"o\">[</span>DATASET<span class=\"o\">]</span> <span class=\"o\">[</span>--fresh<span class=\"o\">]</span> <span class=\"o\">[</span>--no-cuda<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>Available values for <tt>DATASET</tt> are <tt>cifar10</tt> and <tt>cifar100</tt>.</li>\n<li>Available values for <tt>MODEL</tt> are <tt>resnet32</tt>, <tt>resnet110</tt>, <tt>resnet164</tt>, <tt>revnet38</tt>, <tt>revnet110</tt>, <tt>revnet164</tt></li>\n<li>Use the <tt><span class=\"pre\">--fresh</span></tt> flag to remove earlier experiment results.</li>\n<li>Use the <tt><span class=\"pre\">--no-cuda</span></tt> flag to train on the CPU rather than the GPU through CUDA.</li>\n</ul>\n<p>Datasets are automatically downloaded if they are not available.</p>\n<p>When using Python 3.* replace the <tt>python</tt> directive with the appropriate Python 3 directive. For example when using the MemCNN docker image use <tt>python3.6</tt>.</p>\n<p>When MemCNN was installed using <cite>pip</cite> or from sources you might need to setup a configuration file before running this command.\nRead the corresponding section about how to do this here: <a href=\"https://memcnn.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">https://memcnn.readthedocs.io/en/latest/installation.html</a></p>\n</div>\n\n          </div>"}, "last_serial": 6764630, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "e997a23f42301f35a22e21b17265e6f2", "sha256": "bcd9524786089c6937f465c147da542e85411e814e4a98c0190dd0d8c17d6b5d"}, "downloads": -1, "filename": "memcnn-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e997a23f42301f35a22e21b17265e6f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5712, "upload_time": "2019-06-06T08:50:37", "upload_time_iso_8601": "2019-06-06T08:50:37.707593Z", "url": "https://files.pythonhosted.org/packages/6c/88/0db1f9c1fd0a7f21384c829d6fc99a1b0967b548ab994564b3e7f001f1ec/memcnn-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a45b8e710c9e4e708622b69f3423d0c", "sha256": "61274cf6678b1dbb76b42c1158bfd0d9376e812fd7c6ef388d83fa27b5ce97b5"}, "downloads": -1, "filename": "memcnn-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5a45b8e710c9e4e708622b69f3423d0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11351, "upload_time": "2019-06-06T08:50:38", "upload_time_iso_8601": "2019-06-06T08:50:38.894172Z", "url": "https://files.pythonhosted.org/packages/ab/bb/4e01f3a42632ec0c981c1ff5eeb78ff6884dfabd2d66ee773447be75e280/memcnn-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b740f2f447a3d3a8eef96157f6869c6a", "sha256": "580db99b2940efd846ba9fdf50d5bee93c54036f553d371e28c06da89484f06b"}, "downloads": -1, "filename": "memcnn-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b740f2f447a3d3a8eef96157f6869c6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40591, "upload_time": "2019-07-09T12:45:56", "upload_time_iso_8601": "2019-07-09T12:45:56.533746Z", "url": "https://files.pythonhosted.org/packages/b4/e2/8d1bb9714bb620ea991a7fa773b039e80a1deeed616a1077228f9b4ca5ef/memcnn-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df6d47d3df9653e564a83ad5d03afdc5", "sha256": "0d93fd55223e964c7f874a03d8c89a3f287dbd68301f6a6bee95ae3f8b71f55c"}, "downloads": -1, "filename": "memcnn-0.3.0.tar.gz", "has_sig": false, "md5_digest": "df6d47d3df9653e564a83ad5d03afdc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37284, "upload_time": "2019-07-09T12:45:58", "upload_time_iso_8601": "2019-07-09T12:45:58.232609Z", "url": "https://files.pythonhosted.org/packages/4c/b5/8eedbf416ec9133d08d52ae62d2aa35c88fac713fa8d549450f8261d9ec2/memcnn-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0b2ae637e66ea48265c6717499cdedc6", "sha256": "e72499aa635df91b827ef951586c64aef0f736db3e9872707a37daf582f82e71"}, "downloads": -1, "filename": "memcnn-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b2ae637e66ea48265c6717499cdedc6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41759, "upload_time": "2019-07-09T20:31:48", "upload_time_iso_8601": "2019-07-09T20:31:48.246932Z", "url": "https://files.pythonhosted.org/packages/f9/19/ee9a508c4262ba2664f86c0aaf9472b0a341c89324791c4423d3e0aba0cf/memcnn-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27ec3665ef9d8a59232ed25e1b6b617f", "sha256": "52275ad4ffb739db3f158e1c64623d7b126444f69805ce0218caebb2545d4ef4"}, "downloads": -1, "filename": "memcnn-0.3.1.tar.gz", "has_sig": false, "md5_digest": "27ec3665ef9d8a59232ed25e1b6b617f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38823, "upload_time": "2019-07-09T20:31:49", "upload_time_iso_8601": "2019-07-09T20:31:49.559905Z", "url": "https://files.pythonhosted.org/packages/9d/b9/1d110fec039fe199dd57da33f4d370b844c61b5d14a3c0975d59845b650d/memcnn-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "1d07a74b2769d7f660da9ac806445768", "sha256": "75d761177f5b1eb5652ed1e8b2899369889a0ea403fd75eeca405d5c9d26af9d"}, "downloads": -1, "filename": "memcnn-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1d07a74b2769d7f660da9ac806445768", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42082, "upload_time": "2019-07-10T16:05:37", "upload_time_iso_8601": "2019-07-10T16:05:37.544829Z", "url": "https://files.pythonhosted.org/packages/af/b8/9b60a9b4e0068b1a93d8955d892fe8c412eb9b92905dee44523263c39e96/memcnn-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c9f628963cf527ccdc24fa4c558d6c8", "sha256": "35a4d3f3981d7cf1b2d4421335813222a61c1f28196d99a3882b58d489a2c267"}, "downloads": -1, "filename": "memcnn-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5c9f628963cf527ccdc24fa4c558d6c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39743, "upload_time": "2019-07-10T16:05:39", "upload_time_iso_8601": "2019-07-10T16:05:39.177526Z", "url": "https://files.pythonhosted.org/packages/ab/29/dc1c0c534554bd22cbf1649df3be3ce7a8ae407e5600c77a21ea48783c17/memcnn-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "d766ac91f7f1eea59ad20a13dfe9b312", "sha256": "f542c48e7f9054982d28b404878198003d85a98b1437a96b176ec7ba65fbde47"}, "downloads": -1, "filename": "memcnn-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d766ac91f7f1eea59ad20a13dfe9b312", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42080, "upload_time": "2019-07-10T22:12:37", "upload_time_iso_8601": "2019-07-10T22:12:37.935200Z", "url": "https://files.pythonhosted.org/packages/95/17/f5ce7d0f827604c20810411408a39018a29c58c82211371997f5b1d170b4/memcnn-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e356da28664d2f9604f54aaa7a4c64b", "sha256": "b362aa86e690077e3ae12f9898f1f6f4d26f377a4aef3c54cf690f0ff7f57443"}, "downloads": -1, "filename": "memcnn-0.3.3.tar.gz", "has_sig": false, "md5_digest": "2e356da28664d2f9604f54aaa7a4c64b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39897, "upload_time": "2019-07-10T22:12:39", "upload_time_iso_8601": "2019-07-10T22:12:39.780306Z", "url": "https://files.pythonhosted.org/packages/cf/df/e560aa511dc799b503d813d8f0e4670990efe12afe602fa30ed4bafe2a32/memcnn-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "252c5026798e2d3592863028adce69bd", "sha256": "0a6cd834f970412936fd315e970d9ea791ecd411242d4a31b9f5b13c5e3caede"}, "downloads": -1, "filename": "memcnn-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "252c5026798e2d3592863028adce69bd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42748, "upload_time": "2019-07-26T11:29:45", "upload_time_iso_8601": "2019-07-26T11:29:45.343557Z", "url": "https://files.pythonhosted.org/packages/73/49/fbb7ddeb92d01276f0d0c324be67b560038971a47db352f70b94095ffb2b/memcnn-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33e60893e7ae5f54c7d7559deb33f9dc", "sha256": "510ef21d3b5ca336238ad79605bfe22a3ec63074a290e80f398b8d8e7765dd32"}, "downloads": -1, "filename": "memcnn-0.3.4.tar.gz", "has_sig": false, "md5_digest": "33e60893e7ae5f54c7d7559deb33f9dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40501, "upload_time": "2019-07-26T11:29:47", "upload_time_iso_8601": "2019-07-26T11:29:47.274525Z", "url": "https://files.pythonhosted.org/packages/6c/78/914ad865a71d5383d165012149851f7f31dfcecbe19633ee0954bafc8c2e/memcnn-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "1ca33779e78f6572ebe149751273aba9", "sha256": "12753ac81acabb77a0b5b0758a4e139864baa2d208404d794e5c3aabb75a9f39"}, "downloads": -1, "filename": "memcnn-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ca33779e78f6572ebe149751273aba9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42784, "upload_time": "2019-07-28T13:37:32", "upload_time_iso_8601": "2019-07-28T13:37:32.340429Z", "url": "https://files.pythonhosted.org/packages/3e/b0/3fad227e3bb438e370bd6004f8551dd2ce2cb65d48ec4bb311195f48040d/memcnn-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3b148954893a6f29efbe949889976d8", "sha256": "6f8d5763bae7002d5bb121fac8baf2fc23a2572cf4890e34327e9421e0519df2"}, "downloads": -1, "filename": "memcnn-0.3.5.tar.gz", "has_sig": false, "md5_digest": "b3b148954893a6f29efbe949889976d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42333, "upload_time": "2019-07-28T13:37:34", "upload_time_iso_8601": "2019-07-28T13:37:34.075150Z", "url": "https://files.pythonhosted.org/packages/11/b4/49d9191b0aab618551728901f0af50babfb80e450cd3cc5b6a9642c03c68/memcnn-0.3.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4b5122d391c71ea2f977fde2f295a9c7", "sha256": "23d16f077964a59ac9198917a3a7975eadc5f256638fa1075680aa8c1ae8008d"}, "downloads": -1, "filename": "memcnn-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b5122d391c71ea2f977fde2f295a9c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42784, "upload_time": "2019-07-28T18:52:33", "upload_time_iso_8601": "2019-07-28T18:52:33.116918Z", "url": "https://files.pythonhosted.org/packages/60/e9/6111141773bce355061744c0f7b40528a7778ec0e9f395285390b6cb132b/memcnn-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23ae96bc73478b3ee9aa03b82bc3cd06", "sha256": "1c2f45b531307b6142339568e8a493f0e309ff76eb6136cd9b6987c47fa9b887"}, "downloads": -1, "filename": "memcnn-1.0.0.tar.gz", "has_sig": false, "md5_digest": "23ae96bc73478b3ee9aa03b82bc3cd06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40804, "upload_time": "2019-07-28T18:52:34", "upload_time_iso_8601": "2019-07-28T18:52:34.817252Z", "url": "https://files.pythonhosted.org/packages/1a/30/975e162ffba896b8de8c37d20232a0c6cc0fdd82db42f3a7575f7e50f352/memcnn-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8a22ff9e95e8afdd80f0f070fbaf970a", "sha256": "e21f766e2bc3221562b1cd51c846786326c74269519f5c655783ffddfe8cc17e"}, "downloads": -1, "filename": "memcnn-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a22ff9e95e8afdd80f0f070fbaf970a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 42966, "upload_time": "2019-12-08T21:03:59", "upload_time_iso_8601": "2019-12-08T21:03:59.894214Z", "url": "https://files.pythonhosted.org/packages/e9/e1/85130dd4599614be5c33bb254e67b4be35d1f5cab4d4501d7c8dec4fd6c9/memcnn-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c023a728bce42d09db24a347ade4b1e5", "sha256": "f84451a22a90b1e9108fb16ad761c467670145f4402033954dfd657c80a8e1d3"}, "downloads": -1, "filename": "memcnn-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c023a728bce42d09db24a347ade4b1e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43477, "upload_time": "2019-12-08T21:04:01", "upload_time_iso_8601": "2019-12-08T21:04:01.596618Z", "url": "https://files.pythonhosted.org/packages/67/05/af5e4b1d2d575e264348986a4c5d752387684c548182a48d6670c8476b69/memcnn-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1048410142a54b4276cee70b62300e30", "sha256": "c2b041d2ddbed4dc7f9857800ea34f3d63bc2243dd10bfcda1c58de4f070ddde"}, "downloads": -1, "filename": "memcnn-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1048410142a54b4276cee70b62300e30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47421, "upload_time": "2019-12-15T22:11:28", "upload_time_iso_8601": "2019-12-15T22:11:28.836495Z", "url": "https://files.pythonhosted.org/packages/ac/77/ec0129ba450198a053636ac42bf3977e903d34a550adf45a2229e33158b9/memcnn-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf426d087c15f8a686b00c6f3cae5d0", "sha256": "865c4e16410b41fa393ec33132c378becf5c4744e70b9f84e11e2885c9cd9f4b"}, "downloads": -1, "filename": "memcnn-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7bf426d087c15f8a686b00c6f3cae5d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43315, "upload_time": "2019-12-15T22:11:30", "upload_time_iso_8601": "2019-12-15T22:11:30.271750Z", "url": "https://files.pythonhosted.org/packages/2a/c0/eed239308138d728f6b9bf8fa1f89efd94be855ad87e91e8a2e28a895e58/memcnn-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "57c9dc81d2cb29ecd05f4eee234b12c6", "sha256": "8caf110f188adeccf7ff0690e8cb7297bcecc097308d32f82998386d210b7663"}, "downloads": -1, "filename": "memcnn-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "57c9dc81d2cb29ecd05f4eee234b12c6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47820, "upload_time": "2020-01-11T20:31:44", "upload_time_iso_8601": "2020-01-11T20:31:44.229334Z", "url": "https://files.pythonhosted.org/packages/3d/19/a002b7c56732520ec303925cd05d9eb07e0f5f8f109599b6c68ef7d46336/memcnn-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30ce55e5178b2174d3a1298474bb2631", "sha256": "5613e9db011fe88b96d2a6f3beaeb6f8ec7e3db23b4b6db09923978c7ac8f82d"}, "downloads": -1, "filename": "memcnn-1.1.1.tar.gz", "has_sig": false, "md5_digest": "30ce55e5178b2174d3a1298474bb2631", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46972, "upload_time": "2020-01-11T20:31:46", "upload_time_iso_8601": "2020-01-11T20:31:46.075094Z", "url": "https://files.pythonhosted.org/packages/bf/aa/4016245cdd8d0bfb1001b5a77e1a2acaedb9cd289222a7f8afd669b8e0cb/memcnn-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3792304f384a9feada99649642794d9c", "sha256": "cf5da779d058e94e1d2edcff3505b3546d5d73e6edeb4752442fe874357b8f52"}, "downloads": -1, "filename": "memcnn-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3792304f384a9feada99649642794d9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45904, "upload_time": "2020-01-19T15:36:55", "upload_time_iso_8601": "2020-01-19T15:36:55.414786Z", "url": "https://files.pythonhosted.org/packages/4c/d7/31f3dd2b3fb74ae3c34f910fab3a245a9591490079f663d51674a79fc1ff/memcnn-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcef2fa15dec4d46ccd1a1e5926cc2a3", "sha256": "0bce04150503f25c10487cc3b25b60522000aaccdc67b6bcff4e514a4bb3b0cc"}, "downloads": -1, "filename": "memcnn-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bcef2fa15dec4d46ccd1a1e5926cc2a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46536, "upload_time": "2020-01-19T15:36:56", "upload_time_iso_8601": "2020-01-19T15:36:56.781702Z", "url": "https://files.pythonhosted.org/packages/9c/5b/464da94c3c7d512ce87df652123ded2676bfd2b59736e75833444e3df59f/memcnn-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "8a88de3bbba865036af99a7c5d7223ce", "sha256": "c2ad3e7cf014543a78e772c5113fd85b74791be9a09fe37322c305e98d615be1"}, "downloads": -1, "filename": "memcnn-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8a88de3bbba865036af99a7c5d7223ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45952, "upload_time": "2020-02-23T23:21:56", "upload_time_iso_8601": "2020-02-23T23:21:56.358596Z", "url": "https://files.pythonhosted.org/packages/30/02/a73110451d18a9f25d88245c1391542c6029c5e657398afa5c06ae7db0fd/memcnn-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdab3c4de5ea3acfdfa7b2cea745dc42", "sha256": "6688602a7bb28261e0584750571e590c2f225c9f74b0a5df406e6c39ca87c039"}, "downloads": -1, "filename": "memcnn-1.2.1.tar.gz", "has_sig": false, "md5_digest": "fdab3c4de5ea3acfdfa7b2cea745dc42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43760, "upload_time": "2020-02-23T23:21:57", "upload_time_iso_8601": "2020-02-23T23:21:57.627384Z", "url": "https://files.pythonhosted.org/packages/ba/b6/ee3629acc26350a7dcb40feec56d3b38e8c1f29c97961cdbacae86936155/memcnn-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "837ab7fd59aebfe303eec28f93f5de46", "sha256": "ea4d3a5b9261acf089a92d93477a8db1a21399409fd1b8c687c68eb47117a850"}, "downloads": -1, "filename": "memcnn-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "837ab7fd59aebfe303eec28f93f5de46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43982, "upload_time": "2020-03-01T23:28:07", "upload_time_iso_8601": "2020-03-01T23:28:07.930915Z", "url": "https://files.pythonhosted.org/packages/ca/2c/4dac53ffb2ebb312034db783294eeb1d2942831cd4347257535e1feee527/memcnn-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b6264e1b2fdedd7c87ae30f15085c27", "sha256": "2edfae32b87c66057f495812db219af33e831ec8b987b8d96d02d72f3eeb4452"}, "downloads": -1, "filename": "memcnn-1.3.0.tar.gz", "has_sig": false, "md5_digest": "5b6264e1b2fdedd7c87ae30f15085c27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41844, "upload_time": "2020-03-01T23:28:09", "upload_time_iso_8601": "2020-03-01T23:28:09.469017Z", "url": "https://files.pythonhosted.org/packages/36/a5/900801ebccf3baf809ba10df66500b3fe237aa84787ce5ce77d04a0dfe47/memcnn-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "667e95d5d3074dfc8eb36d267478f7d0", "sha256": "3ee97a57a43a7c68ccc5670ef55a7781d3ff467dc19a6f9bbbf346944fdb6bde"}, "downloads": -1, "filename": "memcnn-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "667e95d5d3074dfc8eb36d267478f7d0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43983, "upload_time": "2020-03-02T14:22:20", "upload_time_iso_8601": "2020-03-02T14:22:20.353705Z", "url": "https://files.pythonhosted.org/packages/a0/34/d7f8b0fb4547142462867486000b41b8b7b2f7b7f489e00f35f296f66959/memcnn-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "504a4a41a48e465f9a609a7943db200d", "sha256": "716fccada513fab302aa8609f32eafd2fa2e9d9cd77c07965df45f397bae4f19"}, "downloads": -1, "filename": "memcnn-1.3.1.tar.gz", "has_sig": false, "md5_digest": "504a4a41a48e465f9a609a7943db200d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40977, "upload_time": "2020-03-02T14:22:22", "upload_time_iso_8601": "2020-03-02T14:22:22.100970Z", "url": "https://files.pythonhosted.org/packages/a6/aa/549349a3992e7854a8351a8ad23e794ff399a0b0d2e9184e356280824d7e/memcnn-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "f6e132cce0b2c06411176a21a200bfaf", "sha256": "9d4e94601c2b6bcd6b23eecb902314e340e27461b816ee306f12d607828bfe70"}, "downloads": -1, "filename": "memcnn-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6e132cce0b2c06411176a21a200bfaf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46897, "upload_time": "2020-03-06T20:55:22", "upload_time_iso_8601": "2020-03-06T20:55:22.591245Z", "url": "https://files.pythonhosted.org/packages/b3/c5/4eac0e243770d9e63a51ee0177da894ebee39e3f1db1ddfde2d329fbd8ea/memcnn-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41362642667bf85054418e6f6d60bd05", "sha256": "86f6a4bbe454caaaa92d6925ea81243a28b8385661e803f5d58a425fcd562033"}, "downloads": -1, "filename": "memcnn-1.3.2.tar.gz", "has_sig": false, "md5_digest": "41362642667bf85054418e6f6d60bd05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45056, "upload_time": "2020-03-06T20:55:24", "upload_time_iso_8601": "2020-03-06T20:55:24.173167Z", "url": "https://files.pythonhosted.org/packages/e3/48/7194c34835a6f83def38b1135f9de304e0d2c45e034d8ad4e72b601b711d/memcnn-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6e132cce0b2c06411176a21a200bfaf", "sha256": "9d4e94601c2b6bcd6b23eecb902314e340e27461b816ee306f12d607828bfe70"}, "downloads": -1, "filename": "memcnn-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6e132cce0b2c06411176a21a200bfaf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46897, "upload_time": "2020-03-06T20:55:22", "upload_time_iso_8601": "2020-03-06T20:55:22.591245Z", "url": "https://files.pythonhosted.org/packages/b3/c5/4eac0e243770d9e63a51ee0177da894ebee39e3f1db1ddfde2d329fbd8ea/memcnn-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41362642667bf85054418e6f6d60bd05", "sha256": "86f6a4bbe454caaaa92d6925ea81243a28b8385661e803f5d58a425fcd562033"}, "downloads": -1, "filename": "memcnn-1.3.2.tar.gz", "has_sig": false, "md5_digest": "41362642667bf85054418e6f6d60bd05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45056, "upload_time": "2020-03-06T20:55:24", "upload_time_iso_8601": "2020-03-06T20:55:24.173167Z", "url": "https://files.pythonhosted.org/packages/e3/48/7194c34835a6f83def38b1135f9de304e0d2c45e034d8ad4e72b601b711d/memcnn-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:22 2020"}