{"info": {"author": "Pietro Spadaccino", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# pklcache\n\nThe name stands for pickle cache, and it is a quick and *dirty* way of caching function results on disk using `pickle`.\n\nThis can be helpful for example in some machine learning tasks, where you have to preprocess the data with many time-consuming steps, and you want to not recompute things every time you run your program. \n\n### Example\n```\nfrom pklcache import cache\n\n@cache(\"foo_cache.pkl\")\ndef foo(args):\n    # time consuming operations here...\n    return result\n```\nIf you run the program\n```\nresult = foo()  #foo executed\n```\nAnd if you run it again\n```\nresult = foo()  #foo not executed, load result from disk\n```\n\nThe first time `foo` is called its result is saved on disk on `foo_cache.pkl`. If then the function is called another time or the program is run again, `foo` is not executed, instead its return value is loaded from disk and returned.\n\n\n### Args\n\n`@cache(fpath, enabled=True)`\n- `fpath`: is the cache file path\n- `enabled`: if `False` the store/load is disabled and the function is executed like if it wasn't decorated. Useful during development and debugging.  \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MrSpadala/pklcache", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pklcache", "package_url": "https://pypi.org/project/pklcache/", "platform": "", "project_url": "https://pypi.org/project/pklcache/", "project_urls": {"Homepage": "https://github.com/MrSpadala/pklcache"}, "release_url": "https://pypi.org/project/pklcache/0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Quick and dirty caching function results on disk using pickle", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pklcache</h1>\n<p>The name stands for pickle cache, and it is a quick and <em>dirty</em> way of caching function results on disk using <code>pickle</code>.</p>\n<p>This can be helpful for example in some machine learning tasks, where you have to preprocess the data with many time-consuming steps, and you want to not recompute things every time you run your program.</p>\n<h3>Example</h3>\n<pre><code>from pklcache import cache\n\n@cache(\"foo_cache.pkl\")\ndef foo(args):\n    # time consuming operations here...\n    return result\n</code></pre>\n<p>If you run the program</p>\n<pre><code>result = foo()  #foo executed\n</code></pre>\n<p>And if you run it again</p>\n<pre><code>result = foo()  #foo not executed, load result from disk\n</code></pre>\n<p>The first time <code>foo</code> is called its result is saved on disk on <code>foo_cache.pkl</code>. If then the function is called another time or the program is run again, <code>foo</code> is not executed, instead its return value is loaded from disk and returned.</p>\n<h3>Args</h3>\n<p><code>@cache(fpath, enabled=True)</code></p>\n<ul>\n<li><code>fpath</code>: is the cache file path</li>\n<li><code>enabled</code>: if <code>False</code> the store/load is disabled and the function is executed like if it wasn't decorated. Useful during development and debugging.</li>\n</ul>\n\n          </div>"}, "last_serial": 6627215, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "96a82811bd5855a5079a3a5ebd5f285f", "sha256": "a96064035c1472436f422efd0770e1ad0b7216aa5814347fb9ea948490bcaf8c"}, "downloads": -1, "filename": "pklcache-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "96a82811bd5855a5079a3a5ebd5f285f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3239, "upload_time": "2020-02-13T23:58:26", "upload_time_iso_8601": "2020-02-13T23:58:26.502706Z", "url": "https://files.pythonhosted.org/packages/f7/6a/ef40adb20cea6633a37684557c1cfa14f5c6095f18ab6c0cd7048117dcfd/pklcache-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c23c7287adbd22214ca5a4e11b06a6", "sha256": "6f8d7d41d2f3fbed8dbbab300fc4e6fae89795b96f86bdaa49e234dad8ec725d"}, "downloads": -1, "filename": "pklcache-0.1.tar.gz", "has_sig": false, "md5_digest": "04c23c7287adbd22214ca5a4e11b06a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2413, "upload_time": "2020-02-13T23:58:28", "upload_time_iso_8601": "2020-02-13T23:58:28.770959Z", "url": "https://files.pythonhosted.org/packages/a3/87/e1ac30221a0c6af7c9c88d4bace48edad8885dd08f551c2b65266763ae55/pklcache-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96a82811bd5855a5079a3a5ebd5f285f", "sha256": "a96064035c1472436f422efd0770e1ad0b7216aa5814347fb9ea948490bcaf8c"}, "downloads": -1, "filename": "pklcache-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "96a82811bd5855a5079a3a5ebd5f285f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 3239, "upload_time": "2020-02-13T23:58:26", "upload_time_iso_8601": "2020-02-13T23:58:26.502706Z", "url": "https://files.pythonhosted.org/packages/f7/6a/ef40adb20cea6633a37684557c1cfa14f5c6095f18ab6c0cd7048117dcfd/pklcache-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c23c7287adbd22214ca5a4e11b06a6", "sha256": "6f8d7d41d2f3fbed8dbbab300fc4e6fae89795b96f86bdaa49e234dad8ec725d"}, "downloads": -1, "filename": "pklcache-0.1.tar.gz", "has_sig": false, "md5_digest": "04c23c7287adbd22214ca5a4e11b06a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2413, "upload_time": "2020-02-13T23:58:28", "upload_time_iso_8601": "2020-02-13T23:58:28.770959Z", "url": "https://files.pythonhosted.org/packages/a3/87/e1ac30221a0c6af7c9c88d4bace48edad8885dd08f551c2b65266763ae55/pklcache-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:47 2020"}