{"info": {"author": "Janne Kuuskeri (wuher)", "author_email": "janne.kuuskeri@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Simple REST framework for Django\n\n[Devil][13] aims to be simple to use REST framework for Django. Devil is\ninfluenced by [piston][1].\n\n## Key Characteristics\n\n  - `Resource` is the key concept, everything builds around it.\n  - Builtin content negotiation (parsers / formatters).\n  - Gets out of your way\n    - You can use additional features but you don't need to.\n    - Everything is optional and works with default values.\n    - Simple to get started.\n  - Flexible access control based on Django's users, groups and\n    permissions.\n    - Ability to assign CRUD operations per resource for\n      each user (or group)\n    - devil will auto-generate necessary permissions into the DB\n    - You can use Django's admin interface to assign permissions to users and groups\n    - After this devil automatically picks up `request.user` and performs authorization\n  - Intentionally doesn't give you CRUD for free as piston does\n    - We can add this option later if it's concidered useful, but:\n    - This rarely works for legacy systems anyway\n    - For anything bigger, it's usually a good idea to decouple\n      model and representation\n  - Ability to define representation using Django's forms\n    - Automatic validation of incoming/outgoing data\n    - Automatic documentation generation (_Not implemented yet_)\n\n\n## Table of Contents\n\n  - [Installation](#installation)\n  - [Quick Example](#quick-example)\n  - [Step by Step Instructions](#step-by-step-instructions)\n  - [URL Dispatching](#url-dispatching)\n  - [Method Dispatching](#method-dispatching)\n  - [Content Type Negotiation](#content-type-negotiation)\n  - [Dealing with Data](#dealing-with-data)\n  - [HTTP Responses](#http-responses)\n  - [Defining Representations](#defining-representations)\n  - [Using Object Factories](#using-object-factories)\n  - [Auto-generated Documentation](#auto-generated-documentation)\n  - [Configuration](#configuration)\n  - [License](#license)\n\n\n## Installation\n\n    pip install devil\n\nSource code can be found at [GitGub][7]\n\n\n## Quick Example\n\nresources.py:\n\n```python\nfrom devil.resource import Resource\n\nclass MyTestResource(Resource):\n    def get(self, request):\n        return {'jedi': 'luke'}\n```\n\nurls.py:\n\n```python\nfrom django.conf.urls.defaults import patterns, url\nfrom devil.resource import Resource\nimport resources\n\nmytestresource = resources.MyTestResource()\nurlpatterns = patterns('',\n    url(r'^test', mytestresource),\n)\n```\n\ncurl:\n\n    curl http://localhost:8000/test?format=json\n\n    > GET /contact/?format=json HTTP/1.1\n    > User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4\n    > Host: localhost:8000\n    > Accept: */*\n    >\n    < HTTP/1.0 200 OK\n    < Date: Tue, 14 Feb 2012 09:35:02 GMT\n    < Server: WSGIServer/0.1 Python/2.7.1\n    < Content-Type: application/json; charset=utf-8\n    <\n        {\n            \"jedi\": \"luke\"\n        }\n\nAnoher simple example is available [here][13]\n\n\n## Step by Step Instructions\n\n    $ pip install devil\n    $ django-admin.py startproject phone_book\n    $ cd phone_book\n    $ python manage.py startapp contacts\n\ncontacts/resources.py:\n\n```python\nfrom devil.resource import Resource\n\nclass Contact(Resource):\n    def get(self, request, *args, **kw):\n        return {'name': 'Luke Skywalker'}\n```\n\nurls.py:\n\n```python\nfrom django.conf.urls.defaults import patterns, url\nfrom contacts import resources\n\ncontacts_resource = resources.Contact()\n\nurlpatterns = patterns('',\n    url(r'contact', contacts_resource),\n)\n```\n\nstart the server and in the console say (or you can use a browser):\n\n    $ python manage.py runserver\n    $ curl http://localhost:8000/contact?format=json\n\nor if you want to be more HTTP friendly:\n\n    $ curl http://localhost:8000/contact -H 'Accept: application/json'\n\n\nA more complete example can be found under [examples/userdb][14]. See the README\nfor instructions on running the example and how to examine the code.\n\n\n## URL Dispatching\n\nThe relationship between URLs and RESTful resources is _one to many_. That is,\none resource may have several URLs mapped to it. Conversely, one URL is always\nmapped into a single resource. Devil uses Django's built in [URL\ndispatching][8] to define these mappings. If you are familiar with Django's\nterms and concepts the resources in Devil become the _views_ of Django.\n\nSay you define your resources in a module called `resources`. Then in your\n`urls.py` file you would instantiate and map your resources to URLs, like so:\n\n```python\nuser_resource = resources.UserResource()\n\nurlpatterns = patterns('',\n    url(r'/user', user_resource),\n)\n```\n\nAnd to define aliases, you can just add new mappings to the same resource:\n\n```python\nurlpatterns = patterns('',\n    url(r'/user', user_resource),\n    url(r'/jedi', user_resource),\n    url(r'/sith', user_resource),\n)\n```\n\nYou can use Django's built-in regexp features like named parameters:\n\n```python\nurlpatterns = patterns('',\n    url(r'/user(?P<id>\\d{1,7})?', user_resource),\n)\n```\n\nIn this case, the `id` property would be available in the resource method:\n\n```python\nclass UserResource(Resource):\n    def get(self, request, id, *args, **kw):\n        print id\n```\n\nor\n\n```python\nclass UserResource(Resource):\n    def get(self, request, *args, **kw):\n        print kw['id']\n```\n\n\n## Method Dispatching\n\nDevil maps the HTTP request methods into functions of the resource directly.\nSo, if Devil receives an HTTP POST request, it will try and find an instance\nmethod called `post` in the resource and invoke it. If the resource doesn't\ndefine `post` method, Devil will automatically return `405 Mehod Not Allowed`\nto the client. The signature for the method for `PUT` and `POST` requests is:\n\n```python\ndef post(self, data, request):\n```\n\nand for others methods:\n\n```python\ndef get(self, request):\n```\n\nso, PUTs and POSTs will have additional `data` attribute that contains the\n(possibly parsed) content body of the request. Also, bear in mind that\nfunction parameters may also include named parameters from url mappings.\n\n\n## Content Type Negotiation\n\nDevil uses the terms `parser` and `formatter` for data decoding and encoding\nrespectively. They are collectively referred to as data `mappers`. Devil uses\ndata mappers to parse all data that comes in with `PUT` and `POST` requests\n(e.g. JSON, XML or plaintext). Similarly, devil uses data mappers to\nautomatically format all outgoing data when it is present. The mapper to be used\nfor a given request can be defined in one of the following places (note that\nthis list is not sorted by precedence):\n\n  - In the URL:\n    - either with `?format=json`\n    - or with `.json` suffix\n  - HTTP [Accept][2] header. The Accept header supports the full format,\n    as in: `Accept: audio/*; q=0.2, audio/basic`\n  - HTTP [Content-Type][3] header (meaningful only for `PUT` and `POST`)\n  - A resource may define its own mapper which will take precedence over\n    anything else\n     - define `mapper` in your derived `Resource` class (see [examples][4])\n  - A resource may define a default mapper that will be used if the client\n    specifies no content type\n     - define `default_mapper` in your derived `Resource`\n       class (see [examples][4])\n  - Application may define one system wide default mapper by registering a\n    mapper with content type `*/*`\n\nIf the client specifies a content type that is not supported, devil responds\nwith `406 Not Acceptable`. Out of the box, devil supports `plain/text`,\n`application/json` and `text/xml`. You can register more mappers for your\napplication of course. It should be noted that the built-in XML mapper has\nsome restrictions (see the [docstring][5]).\n\nFollowing picture formally defines how a correct formatter is chosen for\nencoding the outgoing data:\n\n![Selecting a formatter](https://github.com/wuher/devil/raw/master/doc/select-formatter.pdf \"Selecting a formatter\")\n\nLikewise, the next picture defines how a correct parser is chosen for the\nincoming (via `PUT` or `POST`) data:\n\n![Selecting a parser](https://github.com/wuher/devil/raw/master/doc/select-parser.pdf \"Selecting a parser\")\n\nSee the [docstrings][6] in the `DataMapper` class and the [example\nresources][4] in tests for instructions on how to implement your own mappers.\n\n\n## Dealing with Data\n\nOnce the appropriate data mapper has been chosen, devil can perform\ndecoding for the incoming data and encoding for the outgoing data. For\nexample, if a json mapper is chosen your `post` and `get` functions would look\nsomething like this (in terms of data passing):\n\n    $ curl http://localhost:8000/contact -X POST -d '{\"name\": \"Darth Maul\", \"age\": 24}' -H 'Content-Type: application/json'\n\n```python\ndef post(self, data, request):\n    # data is available as a python dict in the data parameter\n    print data['name']       # Darth Maul\n    print type(data['age'])  # <type 'int'>\n```\n\n    $ curl http://localhost:8000/contact/1 -X GET -H 'Accept: application/json'\n\n```python\n    def get(self, request):\n        # you can return a python dictionary\n        return {\n            'name': 'Yoda',\n            'age': '876',\n        }\n```\n\nDevil's built-in json and xml mappers will convert to and from python\ndictionaries and lists. However, the built-in text (`text/plain`) mapper will\nonly convert between strings and unicode objects.\n\n\n## HTTP Responses\n\nA resource (that is, any of its post/get/put/delete methods) may return following\nvalues:\n\n  - dictionary\n  - list\n  - string\n  - `None`\n  - Devil's `http.Response`\n  - Django's `HttpResponse`\n\nIf the resource returns Django's `HttpResponse`, devil doesn't touch the\nreturn value at all but just passes it on to the client. If the return type is\nany of the other five, devil tries to encode the data using the appropriate\nmapper. Furthermore, devil's `Response` object provides a way for the resource\nto include HTTP response code and headers along with the data. Devil will\nautomatically use response code `200 OK` in cases where the response code\nisn't explicitly defined by the resource. Also, devil will automatically add\n`Content-Type` HTTP header based on the used data mapper.\n\nError situations may be handled using exceptions defined in `devil.errors`\npackage. So whenever there's an error situation and you want to return a certain\nresponse code, you can raise a `HttpStatusCodeError` and devil will\ncatch it and turn it into appropriate HTTP response object.\n\n```python\nfrom devil import errors\ndef post(self, data, request):\n    if data['age'] > 50:\n        # too old\n        raise errors.BadRequest(\"you're too old\")\n```\n\nIn the example, the client would receive `400 BAD REQUEST` with the string\n`\"you're too old\"` in the body whenever the age is above 50.\n\n\n## Defining Representations\n\nDevil uses Django's [form fields][15] to define representations. By defining\nrepresentation for your resource, you gain three advantages: automatic data\nvalidation, possibility to use object factories to automatically create python\nobjects from your data and the possibility to have [auto-generated documentation\n](#auto-generated-documentation) for your resources. The easiest way to define a\nrepresentation for your resource is to subclass from [Devil's Representation\nclass][17] and use fields defined in [Django][15] and [Devil][18] to define all\nthe properties.\n\nFollowing example shows a simple representation using Django's form fields:\n\n```python\nfrom django import forms\nfrom devil import Representation\n\nclass UserRepresentation(Representation):\n    username = forms.CharField(max_length=30)\n    joined = forms.DateField(input_formats='%Y-%m-%d')\n```\n\nDevil provides couple of handy fields for defining more complex representations,\nmainly `NestedField` and `ListField`. These can be used for speficying composite\nand collection fields respectively:\n\n```python\nfrom devil.fields import ListField, NestedField, EnumField\n\nclass EmailAddress(NestedField):\n    email = forms.EmailField()\n    type = forms.CharField(required=False)\n\nclass UserRepresentation(Representation):\n    username = forms.CharField(max_length=30)\n    joindate = forms.DateField(input_formats=('%Y-%m-%d',))\n    emailAddresses = EmailAddress()\n    accountType = EnumField('root', 'novice', 'intermediate')\n    tags = ListField(forms.CharField(max_length=20), required=False)\n```\n\nThe `EmailField` defined here will be reusable in any representation that embeds\nemail addresses. The `UserRepresentation` on the other hand, is a complete\nrepresentation that can be used in a resource to perform automatic data\nvalidation. To see how to put `UserRepresentation` into use, see\n[configuration](#representation).\n\n\n## Using object factories\n\nAfter a [data mapper](#dealing-with-data) has converted the data into python\ndictionary, an object factory may further convert the dictionary into python\nobject. Against common convention for implementing factories, Devil's\n[factory][16] also provides `serialize()` function which is the counter\noperation of `create()`.\n\nFactory uses [representation](#defining-representations) object as a\nspecification when performing object creation and serialization. Normally a\n_field_ speficied in the representation knows how to marshal/unmarshal itself\nbut if not, a subclassed factory may provide `create_foo()` and\n`serialize_foo()` functions to provide custom creation/serialization of a field\n(`foo` in our example). Following example demonstrates the definition of\n`UserFactory`.\n\n```python\nfrom devil import Factory\n\nclass User(object):\n    pass\n\nclass UserFactory(Factory):\n\n    klass = User\n    spec = UserRepresentation()\n\n```\n\nAn example of manually using `UserFactory`:\n\n```python\ntestdata = {\n    'username': 'jedi',\n    'joindate': '2012-01-18',\n    'emailAddress': {\n        'email': 'jedi@rebillion.net',\n        'type': 'work',\n    },\n    'accountType': 'root',\n    'tags': ['jedi', 'active', 'rebel'],\n}\n\nfactory = UserFactory()\nuser = factory.create(testdata)\nprint user.username  # 'jedi'\nprint user.joindate  # datetime.date(2012, 1, 18)\nprint user.emailAddress.email  # 'jedi@rebillion.net'\n\n```\n\nTo see how to instruct Devil to automatically convert incoming data into python\nobjects using factories, see [configuration](#factory).\n\nFactories also support name mangling of properties. For example:\n\n    emailAddress -> email_address\n    email_address -> emailAddress\n\nThis is achieved by providing ``alias`` property for a field. For Example:\n\n```python\n\nclass UserRepresentation(Representation):\n    emailAddress = EmailField(alias='email_address')\n```\n\nThis definition wouldn't have any affect on data when in serialized format. That\nis, in JSON or in dictionary the property name is still `emailAddress`. However,\nwhen the field is present in python object (i.e. after object has been created\nwith `factory.create()` or when it is given to `factory.serialize()`) the name\nof the property is `email_address`.\n\n\n## Auto-generated Documentation\n\n**NOTE** This is still a work in progress but there is a very bare (but working)\nimplementation in the [doc branch][16].\n\nBasically, by subclassing your resources from `DocumentedResource` instead of\n`Resource` you add support for auto- generated documenatation. When client\nprovides `_doc` in the query string of the request, a documentation is generated\ninstead of the actual method being executed. The documentation includes:\n\n  - docstring of the implementing resource-class\n  - all supported methods and their docstrings\n  - representations (if defined) and their constraints\n\n\n## Configuration\n\nResources in Devil can be configured by overriding any of the following class\nproperties defined in the `devil.Resource` class:\n\n```python\nclass Resource(object):\n    access_controller = None\n    allow_anonymous = True\n    authentication = None\n    representation = None\n    post_representation = None\n    factory = None\n    post_factory = None\n    default_mapper = None\n    mapper = None\n```\n\nIt is usually a good idea to derive `devil.Resource` and use the derived class\nas a base class for your project's resources. That way, you only need to define\nthese configurations once. The values shown above are the default values that are\nused if not overridden.\n\n\n### representation\n\nWhen defined, this representation will be used for validating both, incoming and\noutgoing data. For example: `representation = UserRepresentation()`. More\ninformation on representations is available [here](#defining-representations)\n\n\n### post_representation\n\nWhen defined, this representation will be used for validating client-data inside\na POST request. If not defined `representation` will be used for POST requests\ntoo. `post_representation` will never be used for validating outgoing data (i.e.\ndata returned to the client).\n\n\n### factory\n\nWhen defined, Devil uses this factory to automatically convert incoming data\ninto python objects and outgoing objects into serialized format. An example\ndefinition looks like this: `factory = UserFactory()`. More information on\nfactories is available [here ](#using-object-factories).\n\n\n### post_factory\n\nWhen defined, this factory will be used for creating a python object from data\ninside a POST request. If not defined, `factory` will be used for POST requests\ntoo. `post_factory` will never be used for serializing outgoing data.\n\n\n### authentication\n\nDefines the authentication handler. When provided, it should be an object that\nhas a function called `authentication`. This function takes only one\nparemeter: the request object. The function should raise\n`devil.errors.Unauthorized` if the request cannot be authorized otherwise it\nmust populate the `request.user` property.\n\nInstead of implementing your own authentication you are free to use devil's\nHTTP basic authentication or one of Django's authentication middlewares. To\nuse Devil's authentication, you can simply add this to your resource class:\n\n```python\nfrom devil.auth import HttpBasic\n\nclass MyResource(Resource):\n    authentication = HttpBasic()\n```\n\n\n### allow_anonymous\n\nIf the resource allows anonymous access, set this to `True` (default). Note,\nthat this is different from `authentication` as you can turn authentication on\nbut still allow anonymous access (for example with limited access).\n\n\n### access_controller\n\nIf `access_controller` is set, devil uses it to authorize requests. The value\nof `access_controller` must be an object that has a method called\n`check_perm`. This method takes two parameters: the request object and the\nresource that is being queried. If the request is permitted, the function\nshould return nothing. However, if the request is not permitted, the function\nshould raise `devil.errors.Forbidden`.\n\nWhile you are free to implement your own access controller, devil comes with\nan access controller based on Django's _users_, _groups_ and _permissions_. To\nmake use of it, you would say this in your resource code:\n\n\n```python\nfrom devil.resource import Resource\nfrom devil.perm.acl import PermissionController\n\nclass MyResource(Resource):\n    access_controller = PermissionController()\n```\n\nAfter this, all requests to `MyResource` will be authorized based on the user\nwho sent the request and the method that was used. So, each resource has four\npossible permissions associated with it: `post`, `get`, `put` and `delete`.\nDevil will automatically check that the user (or the user's group) making the\nrequest has appropriate permission to access the resource.\n\nDevil can automatically add all necessary permissions into the database but\nyou (or the site administrator) will need to assign these permissions for\nusers (or groups). To have devil populate all possible permissions into the\ndatabase you need to tell devil what are the resources you want to protect and\nthen use `syncdb` to insert them. For all this, you would first add two things\ninto your Django `settings.py` file:\n\n\n  1. `ACL_RESOURCES` to define your protected resources\n  2. `devil.perm` among `INSTALLED_APPS`\n\n\nFor example:\n\n```python\nACL_RESOURCES = (\n    'myproject.myapp.urls.acl_resources',\n    )\n\nINSTALLED_APPS = (\n    'devil.perm',\n    )\n```\n\nNow, you also need to have your protected resources as a list in the `urls.py`\nfile. For example:\n\n```python\nmyresource = MyResource()\n\nacl_resources = (\n    myresource,\n    )\n\nurlpatterns = (\n    url(r'^test', myresource),\n    )\n```\n\nAfter this, you can run `python manage.py syncdb` and have devil to insert all\nnecessary permissions into the database. To be exact, devil inserts them into\nDjango's `auth_permission` table. The format for the permission name is\n`prefix_resourcename_method`. The `prefix` is \"resource\", the `resourcename`\nis whatever your resource class\u00b4 `name()` function returns and `method` is the\nrequest method (i.e. \"post\", \"get\", \"put\" or \"delete\"). If you haven't\noverridden the `name()` function in your resource class, it returns the name\nof the class with CamelCase converted to slashes. So, in our example running\nthe `syncdb` would generate following four permissions into the database:\n\n\n  - \"`resource_my/resource_post`\"\n  - \"`resource_my/resource_get`\"\n  - \"`resource_my/resource_put`\"\n  - \"`resource_my/resource_delete`\"\n\n\nNow, you are ready to assign these permissions to your users or groups by\nusing the Django [admin interface][9].\n\n**Few notes:**\n\n  - Devil's access controller depends on the `request.user` property.\n    This means that the request must have been authenticated before it\n    lands to the access controller. The easiest way to handle\n    authentication is to use devil's HTTP basic authentication or one of\n    Django's authentication middlewares.\n  - `request.user` may not be Django's `AnonymourUser`\n  - If the user making the request is a [super user][10], permission is\n    always granted.\n  - The user needs to be [active][11] in order to get access to any resource\n    that is protected by devin's access controller.\n  - Devil's access controller uses Django's [get_all_permissions][12] function\n    to figure out whether the user has the permission.\n\n\n## License\n\n\n(The MIT License)\n\nCopyright (c) 2012 Janne Kuuskeri\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n[1]:https://bitbucket.org/jespern/django-piston/wiki/Home\n[2]:http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n[3]:http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\n[4]:https://github.com/wuher/devil/blob/master/test/deviltest/simple/resources.py\n[5]:https://github.com/wuher/devil/blob/master/devil/mappers/xmlmapper.py\n[6]:https://github.com/wuher/devil/blob/master/devil/datamapper.py\n[7]:https://github.com/wuher/devil\n[8]:https://docs.djangoproject.com/en/dev/topics/http/urls/\n[9]:https://docs.djangoproject.com/en/dev/ref/contrib/admin/\n[10]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_superuser\n[11]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_active\n[12]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_all_permissions\n[13]:http://wuher.github.com/devil/\n[14]:https://github.com/wuher/devil/tree/master/example/userdb\n[15]:https://docs.djangoproject.com/en/dev/ref/forms/fields/\n[16]:https://github.com/wuher/devil/tree/doc\n[17]:https://github.com/wuher/devil/blob/doc/devil/fields/representation.py\n[18]:https://github.com/wuher/devil/blob/master/devil/fields/factory.py", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wuher/devil/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "devil", "package_url": "https://pypi.org/project/devil/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/devil/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wuher/devil/"}, "release_url": "https://pypi.org/project/devil/0.9/", "requires_dist": null, "requires_python": null, "summary": "Simple REST framework for Django", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Simple REST framework for Django<br><br>[Devil][13] aims to be simple to use REST framework for Django. Devil is<br>influenced by [piston][1].<br><br>## Key Characteristics<br><br>  - `Resource` is the key concept, everything builds around it.<br>  - Builtin content negotiation (parsers / formatters).<br>  - Gets out of your way<br>    - You can use additional features but you don't need to.<br>    - Everything is optional and works with default values.<br>    - Simple to get started.<br>  - Flexible access control based on Django's users, groups and<br>    permissions.<br>    - Ability to assign CRUD operations per resource for<br>      each user (or group)<br>    - devil will auto-generate necessary permissions into the DB<br>    - You can use Django's admin interface to assign permissions to users and groups<br>    - After this devil automatically picks up `request.user` and performs authorization<br>  - Intentionally doesn't give you CRUD for free as piston does<br>    - We can add this option later if it's concidered useful, but:<br>    - This rarely works for legacy systems anyway<br>    - For anything bigger, it's usually a good idea to decouple<br>      model and representation<br>  - Ability to define representation using Django's forms<br>    - Automatic validation of incoming/outgoing data<br>    - Automatic documentation generation (_Not implemented yet_)<br><br><br>## Table of Contents<br><br>  - [Installation](#installation)<br>  - [Quick Example](#quick-example)<br>  - [Step by Step Instructions](#step-by-step-instructions)<br>  - [URL Dispatching](#url-dispatching)<br>  - [Method Dispatching](#method-dispatching)<br>  - [Content Type Negotiation](#content-type-negotiation)<br>  - [Dealing with Data](#dealing-with-data)<br>  - [HTTP Responses](#http-responses)<br>  - [Defining Representations](#defining-representations)<br>  - [Using Object Factories](#using-object-factories)<br>  - [Auto-generated Documentation](#auto-generated-documentation)<br>  - [Configuration](#configuration)<br>  - [License](#license)<br><br><br>## Installation<br><br>    pip install devil<br><br>Source code can be found at [GitGub][7]<br><br><br>## Quick Example<br><br>resources.py:<br><br>```python<br>from devil.resource import Resource<br><br>class MyTestResource(Resource):<br>    def get(self, request):<br>        return {'jedi': 'luke'}<br>```<br><br>urls.py:<br><br>```python<br>from django.conf.urls.defaults import patterns, url<br>from devil.resource import Resource<br>import resources<br><br>mytestresource = resources.MyTestResource()<br>urlpatterns = patterns('',<br>    url(r'^test', mytestresource),<br>)<br>```<br><br>curl:<br><br>    curl http://localhost:8000/test?format=json<br><br>    &gt; GET /contact/?format=json HTTP/1.1<br>    &gt; User-Agent: curl/7.21.4 (universal-apple-darwin11.0) libcurl/7.21.4<br>    &gt; Host: localhost:8000<br>    &gt; Accept: */*<br>    &gt;<br>    &lt; HTTP/1.0 200 OK<br>    &lt; Date: Tue, 14 Feb 2012 09:35:02 GMT<br>    &lt; Server: WSGIServer/0.1 Python/2.7.1<br>    &lt; Content-Type: application/json; charset=utf-8<br>    &lt;<br>        {<br>            \"jedi\": \"luke\"<br>        }<br><br>Anoher simple example is available [here][13]<br><br><br>## Step by Step Instructions<br><br>    $ pip install devil<br>    $ django-admin.py startproject phone_book<br>    $ cd phone_book<br>    $ python manage.py startapp contacts<br><br>contacts/resources.py:<br><br>```python<br>from devil.resource import Resource<br><br>class Contact(Resource):<br>    def get(self, request, *args, **kw):<br>        return {'name': 'Luke Skywalker'}<br>```<br><br>urls.py:<br><br>```python<br>from django.conf.urls.defaults import patterns, url<br>from contacts import resources<br><br>contacts_resource = resources.Contact()<br><br>urlpatterns = patterns('',<br>    url(r'contact', contacts_resource),<br>)<br>```<br><br>start the server and in the console say (or you can use a browser):<br><br>    $ python manage.py runserver<br>    $ curl http://localhost:8000/contact?format=json<br><br>or if you want to be more HTTP friendly:<br><br>    $ curl http://localhost:8000/contact -H 'Accept: application/json'<br><br><br>A more complete example can be found under [examples/userdb][14]. See the README<br>for instructions on running the example and how to examine the code.<br><br><br>## URL Dispatching<br><br>The relationship between URLs and RESTful resources is _one to many_. That is,<br>one resource may have several URLs mapped to it. Conversely, one URL is always<br>mapped into a single resource. Devil uses Django's built in [URL<br>dispatching][8] to define these mappings. If you are familiar with Django's<br>terms and concepts the resources in Devil become the _views_ of Django.<br><br>Say you define your resources in a module called `resources`. Then in your<br>`urls.py` file you would instantiate and map your resources to URLs, like so:<br><br>```python<br>user_resource = resources.UserResource()<br><br>urlpatterns = patterns('',<br>    url(r'/user', user_resource),<br>)<br>```<br><br>And to define aliases, you can just add new mappings to the same resource:<br><br>```python<br>urlpatterns = patterns('',<br>    url(r'/user', user_resource),<br>    url(r'/jedi', user_resource),<br>    url(r'/sith', user_resource),<br>)<br>```<br><br>You can use Django's built-in regexp features like named parameters:<br><br>```python<br>urlpatterns = patterns('',<br>    url(r'/user(?P&lt;id&gt;\\d{1,7})?', user_resource),<br>)<br>```<br><br>In this case, the `id` property would be available in the resource method:<br><br>```python<br>class UserResource(Resource):<br>    def get(self, request, id, *args, **kw):<br>        print id<br>```<br><br>or<br><br>```python<br>class UserResource(Resource):<br>    def get(self, request, *args, **kw):<br>        print kw['id']<br>```<br><br><br>## Method Dispatching<br><br>Devil maps the HTTP request methods into functions of the resource directly.<br>So, if Devil receives an HTTP POST request, it will try and find an instance<br>method called `post` in the resource and invoke it. If the resource doesn't<br>define `post` method, Devil will automatically return `405 Mehod Not Allowed`<br>to the client. The signature for the method for `PUT` and `POST` requests is:<br><br>```python<br>def post(self, data, request):<br>```<br><br>and for others methods:<br><br>```python<br>def get(self, request):<br>```<br><br>so, PUTs and POSTs will have additional `data` attribute that contains the<br>(possibly parsed) content body of the request. Also, bear in mind that<br>function parameters may also include named parameters from url mappings.<br><br><br>## Content Type Negotiation<br><br>Devil uses the terms `parser` and `formatter` for data decoding and encoding<br>respectively. They are collectively referred to as data `mappers`. Devil uses<br>data mappers to parse all data that comes in with `PUT` and `POST` requests<br>(e.g. JSON, XML or plaintext). Similarly, devil uses data mappers to<br>automatically format all outgoing data when it is present. The mapper to be used<br>for a given request can be defined in one of the following places (note that<br>this list is not sorted by precedence):<br><br>  - In the URL:<br>    - either with `?format=json`<br>    - or with `.json` suffix<br>  - HTTP [Accept][2] header. The Accept header supports the full format,<br>    as in: `Accept: audio/*; q=0.2, audio/basic`<br>  - HTTP [Content-Type][3] header (meaningful only for `PUT` and `POST`)<br>  - A resource may define its own mapper which will take precedence over<br>    anything else<br>     - define `mapper` in your derived `Resource` class (see [examples][4])<br>  - A resource may define a default mapper that will be used if the client<br>    specifies no content type<br>     - define `default_mapper` in your derived `Resource`<br>       class (see [examples][4])<br>  - Application may define one system wide default mapper by registering a<br>    mapper with content type `*/*`<br><br>If the client specifies a content type that is not supported, devil responds<br>with `406 Not Acceptable`. Out of the box, devil supports `plain/text`,<br>`application/json` and `text/xml`. You can register more mappers for your<br>application of course. It should be noted that the built-in XML mapper has<br>some restrictions (see the [docstring][5]).<br><br>Following picture formally defines how a correct formatter is chosen for<br>encoding the outgoing data:<br><br>![Selecting a formatter](https://github.com/wuher/devil/raw/master/doc/select-formatter.pdf \"Selecting a formatter\")<br><br>Likewise, the next picture defines how a correct parser is chosen for the<br>incoming (via `PUT` or `POST`) data:<br><br>![Selecting a parser](https://github.com/wuher/devil/raw/master/doc/select-parser.pdf \"Selecting a parser\")<br><br>See the [docstrings][6] in the `DataMapper` class and the [example<br>resources][4] in tests for instructions on how to implement your own mappers.<br><br><br>## Dealing with Data<br><br>Once the appropriate data mapper has been chosen, devil can perform<br>decoding for the incoming data and encoding for the outgoing data. For<br>example, if a json mapper is chosen your `post` and `get` functions would look<br>something like this (in terms of data passing):<br><br>    $ curl http://localhost:8000/contact -X POST -d '{\"name\": \"Darth Maul\", \"age\": 24}' -H 'Content-Type: application/json'<br><br>```python<br>def post(self, data, request):<br>    # data is available as a python dict in the data parameter<br>    print data['name']       # Darth Maul<br>    print type(data['age'])  # &lt;type 'int'&gt;<br>```<br><br>    $ curl http://localhost:8000/contact/1 -X GET -H 'Accept: application/json'<br><br>```python<br>    def get(self, request):<br>        # you can return a python dictionary<br>        return {<br>            'name': 'Yoda',<br>            'age': '876',<br>        }<br>```<br><br>Devil's built-in json and xml mappers will convert to and from python<br>dictionaries and lists. However, the built-in text (`text/plain`) mapper will<br>only convert between strings and unicode objects.<br><br><br>## HTTP Responses<br><br>A resource (that is, any of its post/get/put/delete methods) may return following<br>values:<br><br>  - dictionary<br>  - list<br>  - string<br>  - `None`<br>  - Devil's `http.Response`<br>  - Django's `HttpResponse`<br><br>If the resource returns Django's `HttpResponse`, devil doesn't touch the<br>return value at all but just passes it on to the client. If the return type is<br>any of the other five, devil tries to encode the data using the appropriate<br>mapper. Furthermore, devil's `Response` object provides a way for the resource<br>to include HTTP response code and headers along with the data. Devil will<br>automatically use response code `200 OK` in cases where the response code<br>isn't explicitly defined by the resource. Also, devil will automatically add<br>`Content-Type` HTTP header based on the used data mapper.<br><br>Error situations may be handled using exceptions defined in `devil.errors`<br>package. So whenever there's an error situation and you want to return a certain<br>response code, you can raise a `HttpStatusCodeError` and devil will<br>catch it and turn it into appropriate HTTP response object.<br><br>```python<br>from devil import errors<br>def post(self, data, request):<br>    if data['age'] &gt; 50:<br>        # too old<br>        raise errors.BadRequest(\"you're too old\")<br>```<br><br>In the example, the client would receive `400 BAD REQUEST` with the string<br>`\"you're too old\"` in the body whenever the age is above 50.<br><br><br>## Defining Representations<br><br>Devil uses Django's [form fields][15] to define representations. By defining<br>representation for your resource, you gain three advantages: automatic data<br>validation, possibility to use object factories to automatically create python<br>objects from your data and the possibility to have [auto-generated documentation<br>](#auto-generated-documentation) for your resources. The easiest way to define a<br>representation for your resource is to subclass from [Devil's Representation<br>class][17] and use fields defined in [Django][15] and [Devil][18] to define all<br>the properties.<br><br>Following example shows a simple representation using Django's form fields:<br><br>```python<br>from django import forms<br>from devil import Representation<br><br>class UserRepresentation(Representation):<br>    username = forms.CharField(max_length=30)<br>    joined = forms.DateField(input_formats='%Y-%m-%d')<br>```<br><br>Devil provides couple of handy fields for defining more complex representations,<br>mainly `NestedField` and `ListField`. These can be used for speficying composite<br>and collection fields respectively:<br><br>```python<br>from devil.fields import ListField, NestedField, EnumField<br><br>class EmailAddress(NestedField):<br>    email = forms.EmailField()<br>    type = forms.CharField(required=False)<br><br>class UserRepresentation(Representation):<br>    username = forms.CharField(max_length=30)<br>    joindate = forms.DateField(input_formats=('%Y-%m-%d',))<br>    emailAddresses = EmailAddress()<br>    accountType = EnumField('root', 'novice', 'intermediate')<br>    tags = ListField(forms.CharField(max_length=20), required=False)<br>```<br><br>The `EmailField` defined here will be reusable in any representation that embeds<br>email addresses. The `UserRepresentation` on the other hand, is a complete<br>representation that can be used in a resource to perform automatic data<br>validation. To see how to put `UserRepresentation` into use, see<br>[configuration](#representation).<br><br><br>## Using object factories<br><br>After a [data mapper](#dealing-with-data) has converted the data into python<br>dictionary, an object factory may further convert the dictionary into python<br>object. Against common convention for implementing factories, Devil's<br>[factory][16] also provides `serialize()` function which is the counter<br>operation of `create()`.<br><br>Factory uses [representation](#defining-representations) object as a<br>specification when performing object creation and serialization. Normally a<br>_field_ speficied in the representation knows how to marshal/unmarshal itself<br>but if not, a subclassed factory may provide `create_foo()` and<br>`serialize_foo()` functions to provide custom creation/serialization of a field<br>(`foo` in our example). Following example demonstrates the definition of<br>`UserFactory`.<br><br>```python<br>from devil import Factory<br><br>class User(object):<br>    pass<br><br>class UserFactory(Factory):<br><br>    klass = User<br>    spec = UserRepresentation()<br><br>```<br><br>An example of manually using `UserFactory`:<br><br>```python<br>testdata = {<br>    'username': 'jedi',<br>    'joindate': '2012-01-18',<br>    'emailAddress': {<br>        'email': 'jedi@rebillion.net',<br>        'type': 'work',<br>    },<br>    'accountType': 'root',<br>    'tags': ['jedi', 'active', 'rebel'],<br>}<br><br>factory = UserFactory()<br>user = factory.create(testdata)<br>print user.username  # 'jedi'<br>print user.joindate  # datetime.date(2012, 1, 18)<br>print user.emailAddress.email  # 'jedi@rebillion.net'<br><br>```<br><br>To see how to instruct Devil to automatically convert incoming data into python<br>objects using factories, see [configuration](#factory).<br><br>Factories also support name mangling of properties. For example:<br><br>    emailAddress -&gt; email_address<br>    email_address -&gt; emailAddress<br><br>This is achieved by providing ``alias`` property for a field. For Example:<br><br>```python<br><br>class UserRepresentation(Representation):<br>    emailAddress = EmailField(alias='email_address')<br>```<br><br>This definition wouldn't have any affect on data when in serialized format. That<br>is, in JSON or in dictionary the property name is still `emailAddress`. However,<br>when the field is present in python object (i.e. after object has been created<br>with `factory.create()` or when it is given to `factory.serialize()`) the name<br>of the property is `email_address`.<br><br><br>## Auto-generated Documentation<br><br>**NOTE** This is still a work in progress but there is a very bare (but working)<br>implementation in the [doc branch][16].<br><br>Basically, by subclassing your resources from `DocumentedResource` instead of<br>`Resource` you add support for auto- generated documenatation. When client<br>provides `_doc` in the query string of the request, a documentation is generated<br>instead of the actual method being executed. The documentation includes:<br><br>  - docstring of the implementing resource-class<br>  - all supported methods and their docstrings<br>  - representations (if defined) and their constraints<br><br><br>## Configuration<br><br>Resources in Devil can be configured by overriding any of the following class<br>properties defined in the `devil.Resource` class:<br><br>```python<br>class Resource(object):<br>    access_controller = None<br>    allow_anonymous = True<br>    authentication = None<br>    representation = None<br>    post_representation = None<br>    factory = None<br>    post_factory = None<br>    default_mapper = None<br>    mapper = None<br>```<br><br>It is usually a good idea to derive `devil.Resource` and use the derived class<br>as a base class for your project's resources. That way, you only need to define<br>these configurations once. The values shown above are the default values that are<br>used if not overridden.<br><br><br>### representation<br><br>When defined, this representation will be used for validating both, incoming and<br>outgoing data. For example: `representation = UserRepresentation()`. More<br>information on representations is available [here](#defining-representations)<br><br><br>### post_representation<br><br>When defined, this representation will be used for validating client-data inside<br>a POST request. If not defined `representation` will be used for POST requests<br>too. `post_representation` will never be used for validating outgoing data (i.e.<br>data returned to the client).<br><br><br>### factory<br><br>When defined, Devil uses this factory to automatically convert incoming data<br>into python objects and outgoing objects into serialized format. An example<br>definition looks like this: `factory = UserFactory()`. More information on<br>factories is available [here ](#using-object-factories).<br><br><br>### post_factory<br><br>When defined, this factory will be used for creating a python object from data<br>inside a POST request. If not defined, `factory` will be used for POST requests<br>too. `post_factory` will never be used for serializing outgoing data.<br><br><br>### authentication<br><br>Defines the authentication handler. When provided, it should be an object that<br>has a function called `authentication`. This function takes only one<br>paremeter: the request object. The function should raise<br>`devil.errors.Unauthorized` if the request cannot be authorized otherwise it<br>must populate the `request.user` property.<br><br>Instead of implementing your own authentication you are free to use devil's<br>HTTP basic authentication or one of Django's authentication middlewares. To<br>use Devil's authentication, you can simply add this to your resource class:<br><br>```python<br>from devil.auth import HttpBasic<br><br>class MyResource(Resource):<br>    authentication = HttpBasic()<br>```<br><br><br>### allow_anonymous<br><br>If the resource allows anonymous access, set this to `True` (default). Note,<br>that this is different from `authentication` as you can turn authentication on<br>but still allow anonymous access (for example with limited access).<br><br><br>### access_controller<br><br>If `access_controller` is set, devil uses it to authorize requests. The value<br>of `access_controller` must be an object that has a method called<br>`check_perm`. This method takes two parameters: the request object and the<br>resource that is being queried. If the request is permitted, the function<br>should return nothing. However, if the request is not permitted, the function<br>should raise `devil.errors.Forbidden`.<br><br>While you are free to implement your own access controller, devil comes with<br>an access controller based on Django's _users_, _groups_ and _permissions_. To<br>make use of it, you would say this in your resource code:<br><br><br>```python<br>from devil.resource import Resource<br>from devil.perm.acl import PermissionController<br><br>class MyResource(Resource):<br>    access_controller = PermissionController()<br>```<br><br>After this, all requests to `MyResource` will be authorized based on the user<br>who sent the request and the method that was used. So, each resource has four<br>possible permissions associated with it: `post`, `get`, `put` and `delete`.<br>Devil will automatically check that the user (or the user's group) making the<br>request has appropriate permission to access the resource.<br><br>Devil can automatically add all necessary permissions into the database but<br>you (or the site administrator) will need to assign these permissions for<br>users (or groups). To have devil populate all possible permissions into the<br>database you need to tell devil what are the resources you want to protect and<br>then use `syncdb` to insert them. For all this, you would first add two things<br>into your Django `settings.py` file:<br><br><br>  1. `ACL_RESOURCES` to define your protected resources<br>  2. `devil.perm` among `INSTALLED_APPS`<br><br><br>For example:<br><br>```python<br>ACL_RESOURCES = (<br>    'myproject.myapp.urls.acl_resources',<br>    )<br><br>INSTALLED_APPS = (<br>    'devil.perm',<br>    )<br>```<br><br>Now, you also need to have your protected resources as a list in the `urls.py`<br>file. For example:<br><br>```python<br>myresource = MyResource()<br><br>acl_resources = (<br>    myresource,<br>    )<br><br>urlpatterns = (<br>    url(r'^test', myresource),<br>    )<br>```<br><br>After this, you can run `python manage.py syncdb` and have devil to insert all<br>necessary permissions into the database. To be exact, devil inserts them into<br>Django's `auth_permission` table. The format for the permission name is<br>`prefix_resourcename_method`. The `prefix` is \"resource\", the `resourcename`<br>is whatever your resource class\u00b4 `name()` function returns and `method` is the<br>request method (i.e. \"post\", \"get\", \"put\" or \"delete\"). If you haven't<br>overridden the `name()` function in your resource class, it returns the name<br>of the class with CamelCase converted to slashes. So, in our example running<br>the `syncdb` would generate following four permissions into the database:<br><br><br>  - \"`resource_my/resource_post`\"<br>  - \"`resource_my/resource_get`\"<br>  - \"`resource_my/resource_put`\"<br>  - \"`resource_my/resource_delete`\"<br><br><br>Now, you are ready to assign these permissions to your users or groups by<br>using the Django [admin interface][9].<br><br>**Few notes:**<br><br>  - Devil's access controller depends on the `request.user` property.<br>    This means that the request must have been authenticated before it<br>    lands to the access controller. The easiest way to handle<br>    authentication is to use devil's HTTP basic authentication or one of<br>    Django's authentication middlewares.<br>  - `request.user` may not be Django's `AnonymourUser`<br>  - If the user making the request is a [super user][10], permission is<br>    always granted.<br>  - The user needs to be [active][11] in order to get access to any resource<br>    that is protected by devin's access controller.<br>  - Devil's access controller uses Django's [get_all_permissions][12] function<br>    to figure out whether the user has the permission.<br><br><br>## License<br><br><br>(The MIT License)<br><br>Copyright (c) 2012 Janne Kuuskeri<br><br>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>'Software'), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:<br><br>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.<br><br>THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.<br><br><br>[1]:https://bitbucket.org/jespern/django-piston/wiki/Home<br>[2]:http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1<br>[3]:http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17<br>[4]:https://github.com/wuher/devil/blob/master/test/deviltest/simple/resources.py<br>[5]:https://github.com/wuher/devil/blob/master/devil/mappers/xmlmapper.py<br>[6]:https://github.com/wuher/devil/blob/master/devil/datamapper.py<br>[7]:https://github.com/wuher/devil<br>[8]:https://docs.djangoproject.com/en/dev/topics/http/urls/<br>[9]:https://docs.djangoproject.com/en/dev/ref/contrib/admin/<br>[10]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_superuser<br>[11]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_active<br>[12]:https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.get_all_permissions<br>[13]:http://wuher.github.com/devil/<br>[14]:https://github.com/wuher/devil/tree/master/example/userdb<br>[15]:https://docs.djangoproject.com/en/dev/ref/forms/fields/<br>[16]:https://github.com/wuher/devil/tree/doc<br>[17]:https://github.com/wuher/devil/blob/doc/devil/fields/representation.py<br>[18]:https://github.com/wuher/devil/blob/master/devil/fields/factory.py\n          </div>"}, "last_serial": 788923, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ae7b66bdfab62805b7f8170beb2752a6", "sha256": "0e408e0303b4bca31561287bfef58affaa03055056739813195df82695153c3f"}, "downloads": -1, "filename": "devil-0.1.tar.gz", "has_sig": false, "md5_digest": "ae7b66bdfab62805b7f8170beb2752a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10581, "upload_time": "2012-02-12T22:39:22", "upload_time_iso_8601": "2012-02-12T22:39:22.824694Z", "url": "https://files.pythonhosted.org/packages/81/31/17ddb940c7b2ae3c94f1ff87adf19cc68929ab09345ff1b278c66f2611a5/devil-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "baee51d167584537b7decadb51c1e41d", "sha256": "82ae9e8932e45064d08034bb405a81c99766128d42ecb60c69561b060cea1a50"}, "downloads": -1, "filename": "devil-0.2.tar.gz", "has_sig": false, "md5_digest": "baee51d167584537b7decadb51c1e41d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16345, "upload_time": "2012-02-13T11:32:43", "upload_time_iso_8601": "2012-02-13T11:32:43.459505Z", "url": "https://files.pythonhosted.org/packages/54/88/b4ad92d2331831d4fdb1e86f2a96545a9f1b42933a4e1fce122b1b5fb81e/devil-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0c7d4e4ae82eab218df1154f5bb12313", "sha256": "1249a4318a5a31648ba081e5bcbdba0684941864fbb007e2eb6b0012be786d5f"}, "downloads": -1, "filename": "devil-0.3.tar.gz", "has_sig": false, "md5_digest": "0c7d4e4ae82eab218df1154f5bb12313", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16387, "upload_time": "2012-02-13T22:11:47", "upload_time_iso_8601": "2012-02-13T22:11:47.100924Z", "url": "https://files.pythonhosted.org/packages/b1/58/a608e34f4db2b8b1151b6dc46e72e48b1e5706d017d96ef117f95a3e4d38/devil-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "55207d3fc4777187d4eda9079e3b84fe", "sha256": "6bef2f0bb22a6063b6af20491708086accad4ea9c708f04ad3f0f0c42a7a4ad8"}, "downloads": -1, "filename": "devil-0.4.tar.gz", "has_sig": false, "md5_digest": "55207d3fc4777187d4eda9079e3b84fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18496, "upload_time": "2012-02-22T00:03:31", "upload_time_iso_8601": "2012-02-22T00:03:31.501708Z", "url": "https://files.pythonhosted.org/packages/3b/e5/97b87e00d683ac25920bb6b15ddc26694b4122c65f47ebfd06c5ae53ffc2/devil-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "d6856b4b46a6cc068fa0bfa588f4a2de", "sha256": "11ff1edaa518a1b53f2a3b3acd266261e9ced77345ff48e6a04f989a3d2c2ede"}, "downloads": -1, "filename": "devil-0.5.tar.gz", "has_sig": false, "md5_digest": "d6856b4b46a6cc068fa0bfa588f4a2de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22208, "upload_time": "2012-03-15T14:14:14", "upload_time_iso_8601": "2012-03-15T14:14:14.784341Z", "url": "https://files.pythonhosted.org/packages/62/d1/f4985ef1bfcf5bbca0587037da57d466b6bfab732a13205c5928ba28599a/devil-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3f7b9c2e0a609a4a592285e866392f0a", "sha256": "cafb42aa2e6740551b9867867cfb5f36b5d29019f102c57f5b5f7f17cd405ba6"}, "downloads": -1, "filename": "devil-0.6.tar.gz", "has_sig": false, "md5_digest": "3f7b9c2e0a609a4a592285e866392f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27082, "upload_time": "2012-04-18T12:18:06", "upload_time_iso_8601": "2012-04-18T12:18:06.776974Z", "url": "https://files.pythonhosted.org/packages/96/c8/079e1117d15b86b19929c51bf306e36204938c90f047d86f436eee8e4a50/devil-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "e6a4e2b90a196d197ba971e935b46058", "sha256": "e5b4a5677f4f62df78b2195ee5a1bbedb360fadf7733b38d303cc388b9e705c2"}, "downloads": -1, "filename": "devil-0.7.tar.gz", "has_sig": false, "md5_digest": "e6a4e2b90a196d197ba971e935b46058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24946, "upload_time": "2012-10-02T16:49:21", "upload_time_iso_8601": "2012-10-02T16:49:21.919228Z", "url": "https://files.pythonhosted.org/packages/62/4c/8dbc85ff51b61bc733f552f4b74c29b4aec4f33f3ef036e61b8fc1d88619/devil-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "fc48dff7c4505ab1c48f60ceb3423bd2", "sha256": "3caa5a508b1d208f2dcfda07c2b7cee66f70b45ef6bbf103c83cbeac2cd99cda"}, "downloads": -1, "filename": "devil-0.8.tar.gz", "has_sig": false, "md5_digest": "fc48dff7c4505ab1c48f60ceb3423bd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33376, "upload_time": "2013-01-15T13:37:19", "upload_time_iso_8601": "2013-01-15T13:37:19.931649Z", "url": "https://files.pythonhosted.org/packages/39/3a/e23a289bdc6f259e652a7e739bd1481a96abb45ca6f87f9187a970dd14d4/devil-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "0bdf5169ded2c8fa1ce59474905fe0a0", "sha256": "87e6abcd850f3bb7cf68b5c76d0fc69f0180bf38c939f86f4b067aab6b4343eb"}, "downloads": -1, "filename": "devil-0.9.tar.gz", "has_sig": false, "md5_digest": "0bdf5169ded2c8fa1ce59474905fe0a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38145, "upload_time": "2013-01-15T14:12:30", "upload_time_iso_8601": "2013-01-15T14:12:30.275391Z", "url": "https://files.pythonhosted.org/packages/c5/5f/0ee7b1a2bf11b91d1b3970e2e4bd732e00a373549feb387a46b3d46a657b/devil-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0bdf5169ded2c8fa1ce59474905fe0a0", "sha256": "87e6abcd850f3bb7cf68b5c76d0fc69f0180bf38c939f86f4b067aab6b4343eb"}, "downloads": -1, "filename": "devil-0.9.tar.gz", "has_sig": false, "md5_digest": "0bdf5169ded2c8fa1ce59474905fe0a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38145, "upload_time": "2013-01-15T14:12:30", "upload_time_iso_8601": "2013-01-15T14:12:30.275391Z", "url": "https://files.pythonhosted.org/packages/c5/5f/0ee7b1a2bf11b91d1b3970e2e4bd732e00a373549feb387a46b3d46a657b/devil-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:53 2020"}