{"info": {"author": "David Lorenzo", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# PyBuses-Entities\n\nData classes to be used as part of a project that work with a public transport system, with Stops and Buses.\n\nWhile focused on Buses, PyBuses-Entities can be used with almost any public transport system that works \non a similar manner.\n\nThe project relies on two basic classes:\n\n- **Stop**: a physical place where Buses stop to pick and leave passengers\n- **Bus**: a moving vehicle that has a certain route of Stops and stop at them\n\nThis project is mainly developed for the [Python-VigoBusAPI](https://github.com/David-Lor/Python_VigoBusAPI) and [VigoBus-TelegramBot](https://github.com/David-Lor/VigoBus-TelegramBot), \ntwo projects that work together (being the first an intermediate API, and the second one a Telegram bot backend \nthat consume data from that API). \nIn this public transport system, buses stop at Stops, and for each Stop we can fetch a List of Buses \nwith their remaining time until arrival.\n\nThe interesting part about these classes is that they can generate a JSON output, which can be served through our API, \nand then converted back to a class instance in our client.\n\n## Requirements\n\n- Python >= 3.6\n- pydantic\n\n## Installation\n\n```bash\npip install pybuses-entities\n```\n\n## Changelog\n\n- **0.0.2**:\n    - add options to remove empty lists & empty dicts on get_dict() method of entities (True by default)\n    - add \"source\" field to AdvancedStop and BusesResult\n    - add new sorting methods for Stops: sort by stopid, sort by distance\n    - add/improve docstrings\n- **0.0.1** - initial release\n\n## Object definition\n\nStop and Bus objects inherit from pydantic. When creating a new instance of a class, its parameters \nmust be passed as kwargs. \nExtra kwargs parameters passed are ignored, so these classes work well with JSON as input and output data.\n\nBoth Stop and Bus classes have two superior class levels that inherit from their base classes, providing \nmore advanced attributes.\n\nCustom classes can be created in a similar manner to suit the needs of each particular project \nand public transport system, inheriting from these base classes.\n\n### Stop\n\n#### Attributes\n\n- **stopid**: unique identifier of this Stop (required, int)\n- **name**: canonical, human-readable name for this Stop, usually its location (required, str)\n- **lat**, **lon**: location of this Stop as latitude & longitude coordinates (optional, float)\n\n##### AdvancedStop\n\n- **created**: when this Stop definition was created or registered for the first time (optional, datetime/str/int/float)\n- **updated**: when this Stop definition was updated for the last time (optional, datetime/str/int/float) <sup>1</sup>\n- **original_name**: when the Stop name was fetched from an external data source and changed by us, \n  we can keep its original name on this attribute (optional, str) <sup>1</sup>\n- **tags**: extra tags for this Stop (optional, list of str)\n- **extra_names**: optional additional names for this Stop, e.g. translation of the original names or \n  alternative names that users commonly use (optional, list of str)\n- **distance**: distance from this Stop to a certain point. Useful, for example, when giving a list of \n  which Stops exist near a certain location (optional, float)\n- **source**: name of the data source this data was fetched from (optional, str)\n\n<sup>1</sup> timestamps can be: datetime object, str representation, or int/float epoch timestamp\n\n#### Examples\n\nClassic object declaration:\n```python\nfrom pybusent import Stop\n\nstop_1 = Stop(stopid=1, name=\"The Red Keep\")\nstop_6960 = Stop(stopid=6960, name=\"Praza do Rei\", lat=42.235056274709, lon=-8.72675751435639)\n```\n\nJSON/kwargs declaration (AdvancedStop example):\n```python\nfrom pybusent import AdvancedStop\n\nstop_data = {\n    \"stopid\": 6660,\n    \"name\": \"Porta do Sol\",\n    \"lat\":42.2379152928961,\n    \"lon\":-8.72484658707515,\n    \"created\": 1529137067,\n    \"updated\": 1560673067,\n    \"original_name\": \"Porta Do Sol, s/n\",  # 1\n    \"tags\": [\"center\", \"centre\" \"zentrum\", \"center\", \"casco viejo\", \"old town\"],  # 2\n    \"extra_names\": [\"puerta del sol\", \"sun gate\"],  # 3\n    \"distance\": 25.38\n}\n\nstop = AdvancedStop(**stop_data)\n```\n\n<sup>1</sup> the original_name could be the name given by the original data source that provided the Stop information, \nand we changed to a better-looking format\n\n<sup>2</sup> since this Stop is located at the town centre, we used tags like \"center\", \"centre\"; \nit is also near the old town, so used tags like \"old town\"\n\n<sup>3</sup> what the heck is \"sun gate\" supposed to mean? a literal translation from spanish \"puerta del sol\", \ndon't do this useless translations in production ?)\n\n### Bus\n\n#### Attributes\n\n- **busid**: unique identifier for this bus (optional, str) - if not provided, a busid is autogenerated \nas the MD5 sum of the line and route\n- **line**: bus line (required, str)\n- **route**: bus route (required, str)\n- **time**: remaining time for the bus to arrive to a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup>\n\n##### AdvancedBus\n\n- **arrival**: when the bus will arrive to a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup> <sup>2</sup>\n- **departure**: when the bus will departure from a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup> <sup>2</sup>\n- **stops**: a list of Stops this bus will stop at (optional, list of Stop objects)\n\n<sup>1</sup> bus remaining/arrival/departure times can be specified as relative times \n(how time from now is left until it arrives/departures), or absolute times (datetime object or int/float epoch timestamp).\nRelative times can be set as int, float or timedelta, depending on the way to represent this time.\n\n<sup>2</sup> when the transport system differentiates between arrivals and departures (e.g. many train networks), \nthe AdvancedBus `arrival` & `departure` times are used INSTEAD of `time`\n\n#### Examples\n\nClassic object declaration:\n```python\nfrom datetime import datetime\nfrom pybusent import Bus\n\n# Bus 15C (Mohawk Avenue - Bunker Hill Street) will arrive in 5 minutes\nbus = Bus(line=\"15C\", route=\"Mohawk Avenue - Bunker Hill Street\", time=5)\n\n# Bus 21 (Algonquin) will arrive in 1 minute and 30 seconds\nbus = Bus(line=21, route=\"Algonquin\", time=timedelta(minutes=1, seconds=30))\nprint(type(bus.line))  # Line is casted to string although declared as int\n\n# Bus 5B (Dukes - Bohan) will arrive at 14h52\n# Creating a datetime object can be a bit more tricky since it requires the date\n# Get today date and replace time with the arrival time\ndt = datetime.now().replace(hour=14, minute=52, second=0, microsecond=0)\nbus = Bus(line=\"5B\", route=\"Dukes - Bohan\", time=dt)\n\n# It can be easier if your data source provides an epoch timestamp\nepoch = 1529137067\ndt = datetime.fromtimestamp(epoch)\nbus = Bus(line=\"5B\", route=\"Dukes - Bohan\", time=dt)\n```\n\nJSON/kwargs declaration (AdvancedBus example):\n```python\nfrom pybusent import AdvancedBus\n\nbus_data = {\n    \"line\": 5,\n    \"route\": \"Middle Park - East Holland\",\n    \"arrival\": 5,\n    \"departure\": 7\n}\nbus = AdvancedBus(**bus_data)\n```\n\nStatic bus declaration with its Stops route (AdvancedBus example):\n```python\nfrom pybusent import AdvancedBus\n\n# Define the route of the buses Line 5, Route 'Middle Park - East Holland'\nbus = AdvancedBus(\n    line=\"5\",\n    route=\"Middle Park - East Holland\",\n    stops=[\n        Stop(stopid=1231, name=\"Middle Park East\"),\n        Stop(stopid=1232, name=\"Middle Park West\"),\n        Stop(stopid=1233, name=\"Lancaster Avenue\"),\n        Stop(stopid=1234, name=\"East Holland South\"),\n        Stop(stopid=1235, name=\"East Holland North\")\n    ]\n)\n```\n\n### BusesResult\n\nThis class is used when we want to return a more contextualized List of Buses. BusesResult do not inherit from Bus. \nThe following fields can be useful to give context to the Buses result:\n\n#### Attributes\n\n- **buses**: the List of Buses returned\n- **more_buses_available**: boolean that can be set if the data source reported that more buses were available, \n  but we only fetched the first N results - e.g. because the data source is split into pages (optional, bool)\n- **stop**: when the data source returns Stop info alongside its realtime Buses list, we can return it (optional, Stop)\n- **source**: name of the data source this data was fetched from (optional, str)\n\n#### Examples\n\n```python\nfrom pybusent import BusesResult\n\nresult = BusesResult(\n    buses=[\n        Bus(line=\"5\", route=\"Middle Park - East Holland\", time=3),\n        Bus(line=\"15C\", route=\"Dukes - Bohan\", time=9),\n        Bus(line=\"5\", route=\"Middle Park - East Holland\", time=48),\n    ],\n    stop=Stop(\n        stopid=12812,\n        name=\"Middle Park (Entrance)\"\n    ),\n    more_buses_available=True\n)\n```\n\n### Custom classes\n\nStop, AdvancedStop, Bus and AdvancedBus can be inherited to create custom classes, with new attributes \nor changing the base attributes.\n\nAttributes that involve certain logic could have trouble if not designed specifically to support different datatypes \nor being optional when designed to be required.\n\nFor example, you can skip the Line or Route on a Bus and the Stop ID will still be auto-generated because this scenario \nwas contemplated. \nIf not, instantiating a Bus without Line/Route would not be possible, since both methods would be required in order \nto generate the Stop ID.\n\n#### Examples\n\n_\"My bus network has no Line numbers, only the Route - I will create a custom Bus class without the Line \n(more like, the Line is not required)\"_\n```python\nfrom pybusent import Bus\n\nclass MyBus(Bus):\n    line: Optional[str]\n```\n\n_\"On my bus network, buses have a flag to know if they have special sits for reduced mobility passengers \n(False by default)\"_\n```python\nfrom pybusent import Bus\n\nclass MyBus(Bus):\n    reduced_mobility: bool = False\n```\n\n_\"On my bus network, the Stop IDs have letters on it, so it must be a string\"_\n```python\nfrom pybusent import Bus\n\nclass MyStop(AdvancedStop):\n    stopid: str\n```\n\n### Exceptions\n\nA set of exceptions based on Stops and Buses is defined. They include no logic.\n\n- **PyBusesException**: base exception for all the custom exceptions (inherit BaseException)\n    - **StopException**: base exception for all the Stop related exceptions\n        - **StopNotFound**: raised when a Stop is not found on a certain data source, but that data source cannot \n          confirm that the stop not exists physically. E.g. if we keep a local storage of Stops and a Stop is not found \n          on it, it could be that it was not saved there, but it might physically exist.\n        - **StopNotExist**: raised when we are sure a Stop not physically exists. E.g. if we ask a remote API for \n          a Stop and the API replies that it does not exist.\n    - **BusException**: base exception for all the Bus related exceptions", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/David-Lor/PyBuses", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pybuses-entities", "package_url": "https://pypi.org/project/pybuses-entities/", "platform": "", "project_url": "https://pypi.org/project/pybuses-entities/", "project_urls": {"Homepage": "https://github.com/David-Lor/PyBuses"}, "release_url": "https://pypi.org/project/pybuses-entities/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Data classes to work with Stops and Buses/vehicles on a public transportation network", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyBuses-Entities</h1>\n<p>Data classes to be used as part of a project that work with a public transport system, with Stops and Buses.</p>\n<p>While focused on Buses, PyBuses-Entities can be used with almost any public transport system that works\non a similar manner.</p>\n<p>The project relies on two basic classes:</p>\n<ul>\n<li><strong>Stop</strong>: a physical place where Buses stop to pick and leave passengers</li>\n<li><strong>Bus</strong>: a moving vehicle that has a certain route of Stops and stop at them</li>\n</ul>\n<p>This project is mainly developed for the <a href=\"https://github.com/David-Lor/Python_VigoBusAPI\" rel=\"nofollow\">Python-VigoBusAPI</a> and <a href=\"https://github.com/David-Lor/VigoBus-TelegramBot\" rel=\"nofollow\">VigoBus-TelegramBot</a>,\ntwo projects that work together (being the first an intermediate API, and the second one a Telegram bot backend\nthat consume data from that API).\nIn this public transport system, buses stop at Stops, and for each Stop we can fetch a List of Buses\nwith their remaining time until arrival.</p>\n<p>The interesting part about these classes is that they can generate a JSON output, which can be served through our API,\nand then converted back to a class instance in our client.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>pydantic</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install pybuses-entities\n</pre>\n<h2>Changelog</h2>\n<ul>\n<li><strong>0.0.2</strong>:\n<ul>\n<li>add options to remove empty lists &amp; empty dicts on get_dict() method of entities (True by default)</li>\n<li>add \"source\" field to AdvancedStop and BusesResult</li>\n<li>add new sorting methods for Stops: sort by stopid, sort by distance</li>\n<li>add/improve docstrings</li>\n</ul>\n</li>\n<li><strong>0.0.1</strong> - initial release</li>\n</ul>\n<h2>Object definition</h2>\n<p>Stop and Bus objects inherit from pydantic. When creating a new instance of a class, its parameters\nmust be passed as kwargs.\nExtra kwargs parameters passed are ignored, so these classes work well with JSON as input and output data.</p>\n<p>Both Stop and Bus classes have two superior class levels that inherit from their base classes, providing\nmore advanced attributes.</p>\n<p>Custom classes can be created in a similar manner to suit the needs of each particular project\nand public transport system, inheriting from these base classes.</p>\n<h3>Stop</h3>\n<h4>Attributes</h4>\n<ul>\n<li><strong>stopid</strong>: unique identifier of this Stop (required, int)</li>\n<li><strong>name</strong>: canonical, human-readable name for this Stop, usually its location (required, str)</li>\n<li><strong>lat</strong>, <strong>lon</strong>: location of this Stop as latitude &amp; longitude coordinates (optional, float)</li>\n</ul>\n<h5>AdvancedStop</h5>\n<ul>\n<li><strong>created</strong>: when this Stop definition was created or registered for the first time (optional, datetime/str/int/float)</li>\n<li><strong>updated</strong>: when this Stop definition was updated for the last time (optional, datetime/str/int/float) <sup>1</sup></li>\n<li><strong>original_name</strong>: when the Stop name was fetched from an external data source and changed by us,\nwe can keep its original name on this attribute (optional, str) <sup>1</sup></li>\n<li><strong>tags</strong>: extra tags for this Stop (optional, list of str)</li>\n<li><strong>extra_names</strong>: optional additional names for this Stop, e.g. translation of the original names or\nalternative names that users commonly use (optional, list of str)</li>\n<li><strong>distance</strong>: distance from this Stop to a certain point. Useful, for example, when giving a list of\nwhich Stops exist near a certain location (optional, float)</li>\n<li><strong>source</strong>: name of the data source this data was fetched from (optional, str)</li>\n</ul>\n<p><sup>1</sup> timestamps can be: datetime object, str representation, or int/float epoch timestamp</p>\n<h4>Examples</h4>\n<p>Classic object declaration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">Stop</span>\n\n<span class=\"n\">stop_1</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"The Red Keep\"</span><span class=\"p\">)</span>\n<span class=\"n\">stop_6960</span> <span class=\"o\">=</span> <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">6960</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Praza do Rei\"</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">42.235056274709</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"o\">=-</span><span class=\"mf\">8.72675751435639</span><span class=\"p\">)</span>\n</pre>\n<p>JSON/kwargs declaration (AdvancedStop example):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">AdvancedStop</span>\n\n<span class=\"n\">stop_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"stopid\"</span><span class=\"p\">:</span> <span class=\"mi\">6660</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Porta do Sol\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span><span class=\"mf\">42.2379152928961</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"lon\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mf\">8.72484658707515</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"created\"</span><span class=\"p\">:</span> <span class=\"mi\">1529137067</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"updated\"</span><span class=\"p\">:</span> <span class=\"mi\">1560673067</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"original_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Porta Do Sol, s/n\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 1</span>\n    <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"center\"</span><span class=\"p\">,</span> <span class=\"s2\">\"centre\"</span> <span class=\"s2\">\"zentrum\"</span><span class=\"p\">,</span> <span class=\"s2\">\"center\"</span><span class=\"p\">,</span> <span class=\"s2\">\"casco viejo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"old town\"</span><span class=\"p\">],</span>  <span class=\"c1\"># 2</span>\n    <span class=\"s2\">\"extra_names\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"puerta del sol\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sun gate\"</span><span class=\"p\">],</span>  <span class=\"c1\"># 3</span>\n    <span class=\"s2\">\"distance\"</span><span class=\"p\">:</span> <span class=\"mf\">25.38</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">AdvancedStop</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">stop_data</span><span class=\"p\">)</span>\n</pre>\n<p><sup>1</sup> the original_name could be the name given by the original data source that provided the Stop information,\nand we changed to a better-looking format</p>\n<p><sup>2</sup> since this Stop is located at the town centre, we used tags like \"center\", \"centre\";\nit is also near the old town, so used tags like \"old town\"</p>\n<p><sup>3</sup> what the heck is \"sun gate\" supposed to mean? a literal translation from spanish \"puerta del sol\",\ndon't do this useless translations in production ?)</p>\n<h3>Bus</h3>\n<h4>Attributes</h4>\n<ul>\n<li><strong>busid</strong>: unique identifier for this bus (optional, str) - if not provided, a busid is autogenerated\nas the MD5 sum of the line and route</li>\n<li><strong>line</strong>: bus line (required, str)</li>\n<li><strong>route</strong>: bus route (required, str)</li>\n<li><strong>time</strong>: remaining time for the bus to arrive to a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup></li>\n</ul>\n<h5>AdvancedBus</h5>\n<ul>\n<li><strong>arrival</strong>: when the bus will arrive to a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup> <sup>2</sup></li>\n<li><strong>departure</strong>: when the bus will departure from a certain Stop (optional, int/float/datetime/timedelta) <sup>1</sup> <sup>2</sup></li>\n<li><strong>stops</strong>: a list of Stops this bus will stop at (optional, list of Stop objects)</li>\n</ul>\n<p><sup>1</sup> bus remaining/arrival/departure times can be specified as relative times\n(how time from now is left until it arrives/departures), or absolute times (datetime object or int/float epoch timestamp).\nRelative times can be set as int, float or timedelta, depending on the way to represent this time.</p>\n<p><sup>2</sup> when the transport system differentiates between arrivals and departures (e.g. many train networks),\nthe AdvancedBus <code>arrival</code> &amp; <code>departure</code> times are used INSTEAD of <code>time</code></p>\n<h4>Examples</h4>\n<p>Classic object declaration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">Bus</span>\n\n<span class=\"c1\"># Bus 15C (Mohawk Avenue - Bunker Hill Street) will arrive in 5 minutes</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"15C\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Mohawk Avenue - Bunker Hill Street\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Bus 21 (Algonquin) will arrive in 1 minute and 30 seconds</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Algonquin\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">))</span>  <span class=\"c1\"># Line is casted to string although declared as int</span>\n\n<span class=\"c1\"># Bus 5B (Dukes - Bohan) will arrive at 14h52</span>\n<span class=\"c1\"># Creating a datetime object can be a bit more tricky since it requires the date</span>\n<span class=\"c1\"># Get today date and replace time with the arrival time</span>\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">microsecond</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"5B\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Dukes - Bohan\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># It can be easier if your data source provides an epoch timestamp</span>\n<span class=\"n\">epoch</span> <span class=\"o\">=</span> <span class=\"mi\">1529137067</span>\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"n\">epoch</span><span class=\"p\">)</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"5B\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Dukes - Bohan\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"p\">)</span>\n</pre>\n<p>JSON/kwargs declaration (AdvancedBus example):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">AdvancedBus</span>\n\n<span class=\"n\">bus_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"line\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Middle Park - East Holland\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"arrival\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"departure\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span>\n<span class=\"p\">}</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">AdvancedBus</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">bus_data</span><span class=\"p\">)</span>\n</pre>\n<p>Static bus declaration with its Stops route (AdvancedBus example):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">AdvancedBus</span>\n\n<span class=\"c1\"># Define the route of the buses Line 5, Route 'Middle Park - East Holland'</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">AdvancedBus</span><span class=\"p\">(</span>\n    <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span>\n    <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park - East Holland\"</span><span class=\"p\">,</span>\n    <span class=\"n\">stops</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1231</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park East\"</span><span class=\"p\">),</span>\n        <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1232</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park West\"</span><span class=\"p\">),</span>\n        <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1233</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Lancaster Avenue\"</span><span class=\"p\">),</span>\n        <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"East Holland South\"</span><span class=\"p\">),</span>\n        <span class=\"n\">Stop</span><span class=\"p\">(</span><span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">1235</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"East Holland North\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>BusesResult</h3>\n<p>This class is used when we want to return a more contextualized List of Buses. BusesResult do not inherit from Bus.\nThe following fields can be useful to give context to the Buses result:</p>\n<h4>Attributes</h4>\n<ul>\n<li><strong>buses</strong>: the List of Buses returned</li>\n<li><strong>more_buses_available</strong>: boolean that can be set if the data source reported that more buses were available,\nbut we only fetched the first N results - e.g. because the data source is split into pages (optional, bool)</li>\n<li><strong>stop</strong>: when the data source returns Stop info alongside its realtime Buses list, we can return it (optional, Stop)</li>\n<li><strong>source</strong>: name of the data source this data was fetched from (optional, str)</li>\n</ul>\n<h4>Examples</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">BusesResult</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">BusesResult</span><span class=\"p\">(</span>\n    <span class=\"n\">buses</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park - East Holland\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"15C\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Dukes - Bohan\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">),</span>\n        <span class=\"n\">Bus</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park - East Holland\"</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">48</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">Stop</span><span class=\"p\">(</span>\n        <span class=\"n\">stopid</span><span class=\"o\">=</span><span class=\"mi\">12812</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Middle Park (Entrance)\"</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">more_buses_available</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Custom classes</h3>\n<p>Stop, AdvancedStop, Bus and AdvancedBus can be inherited to create custom classes, with new attributes\nor changing the base attributes.</p>\n<p>Attributes that involve certain logic could have trouble if not designed specifically to support different datatypes\nor being optional when designed to be required.</p>\n<p>For example, you can skip the Line or Route on a Bus and the Stop ID will still be auto-generated because this scenario\nwas contemplated.\nIf not, instantiating a Bus without Line/Route would not be possible, since both methods would be required in order\nto generate the Stop ID.</p>\n<h4>Examples</h4>\n<p><em>\"My bus network has no Line numbers, only the Route - I will create a custom Bus class without the Line\n(more like, the Line is not required)\"</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">Bus</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBus</span><span class=\"p\">(</span><span class=\"n\">Bus</span><span class=\"p\">):</span>\n    <span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n</pre>\n<p><em>\"On my bus network, buses have a flag to know if they have special sits for reduced mobility passengers\n(False by default)\"</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">Bus</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBus</span><span class=\"p\">(</span><span class=\"n\">Bus</span><span class=\"p\">):</span>\n    <span class=\"n\">reduced_mobility</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p><em>\"On my bus network, the Stop IDs have letters on it, so it must be a string\"</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pybusent</span> <span class=\"kn\">import</span> <span class=\"n\">Bus</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyStop</span><span class=\"p\">(</span><span class=\"n\">AdvancedStop</span><span class=\"p\">):</span>\n    <span class=\"n\">stopid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<h3>Exceptions</h3>\n<p>A set of exceptions based on Stops and Buses is defined. They include no logic.</p>\n<ul>\n<li><strong>PyBusesException</strong>: base exception for all the custom exceptions (inherit BaseException)\n<ul>\n<li><strong>StopException</strong>: base exception for all the Stop related exceptions\n<ul>\n<li><strong>StopNotFound</strong>: raised when a Stop is not found on a certain data source, but that data source cannot\nconfirm that the stop not exists physically. E.g. if we keep a local storage of Stops and a Stop is not found\non it, it could be that it was not saved there, but it might physically exist.</li>\n<li><strong>StopNotExist</strong>: raised when we are sure a Stop not physically exists. E.g. if we ask a remote API for\na Stop and the API replies that it does not exist.</li>\n</ul>\n</li>\n<li><strong>BusException</strong>: base exception for all the Bus related exceptions</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5420641, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a109cd133cdbcad4756e080c5430c1fc", "sha256": "0c265487e9ca4350334d388aef89a8be364e9e886b6138d15d5f7639e4d07a44"}, "downloads": -1, "filename": "pybuses-entities-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a109cd133cdbcad4756e080c5430c1fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8591, "upload_time": "2019-06-17T15:06:36", "upload_time_iso_8601": "2019-06-17T15:06:36.292807Z", "url": "https://files.pythonhosted.org/packages/8f/11/cf84a4998ee0f7e079342cc987d462d0c7b05317eef7a87808e1b8630f23/pybuses-entities-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c0849b8fce59456b87e826d989ad2ee1", "sha256": "ed6a443db7a090d2a0a3c334d129f570d9dfe5d82b358613a3de11ff2b13c1f4"}, "downloads": -1, "filename": "pybuses-entities-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c0849b8fce59456b87e826d989ad2ee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8973, "upload_time": "2019-06-19T14:51:25", "upload_time_iso_8601": "2019-06-19T14:51:25.914218Z", "url": "https://files.pythonhosted.org/packages/83/16/44b47df3bd6db26ba3c21c23004ee75f4cd4e1b616d86e9c165205ec7e47/pybuses-entities-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0849b8fce59456b87e826d989ad2ee1", "sha256": "ed6a443db7a090d2a0a3c334d129f570d9dfe5d82b358613a3de11ff2b13c1f4"}, "downloads": -1, "filename": "pybuses-entities-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c0849b8fce59456b87e826d989ad2ee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8973, "upload_time": "2019-06-19T14:51:25", "upload_time_iso_8601": "2019-06-19T14:51:25.914218Z", "url": "https://files.pythonhosted.org/packages/83/16/44b47df3bd6db26ba3c21c23004ee75f4cd4e1b616d86e9c165205ec7e47/pybuses-entities-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:54 2020"}