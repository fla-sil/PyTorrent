{"info": {"author": "Satoru Logic", "author_email": "satorulogic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "plain_obj\n##########\n\n.. image:: https://travis-ci.org/suzaku/plain_obj.svg?branch=master\n    :target: https://travis-ci.org/suzaku/plain_obj\n.. image:: https://img.shields.io/pypi/v/plain_obj.svg\n    :target: https://pypi.python.org/pypi/plain_obj\n\nA faster alternative to namedtuple.\n\nBasic Usage\n***********\n\nCreation\n========\n\n.. code-block:: python\n\n    import plain_obj\n    Config = plain_obj.new_type('Config', 'is_debug, skips_dist, run_tests')\n    config = Config(True, False, True)\n    if config.is_debug:\n        print(\"This is a verbose debugging message.\")\n\nMake a dict\n===========\n\n.. code-block:: python\n    \n    config.as_dict()\n\nUnpacking\n=========\n\n.. code-block:: python\n    \n    is_debug, _, run_tests = config\n\n\n.. image:: https://app.codesponsor.io/embed/MY7qFCdB7bDgiBqdjtV9ASYi/suzaku/plain_obj.svg\n    :width: 888px\n    :height: 68px\n    :alt: Sponsor\n    :target: https://app.codesponsor.io/link/MY7qFCdB7bDgiBqdjtV9ASYi/suzaku/plain_obj\n\n\nWhen to use ``plain_obj`` instead of ``namedtuple``?\n************************************************************\n\n**When faster creation time matters to you.**\n\nComparing ``plain_obj`` with ``namedtuple`` in *Python 2.7*:\n\n.. code-block:: python\n\n    In [3]: %timeit collections.namedtuple('Point', ['x', 'y', 'z'])\n    1000 loops, best of 3: 338 \u00b5s per loop\n\n    In [4]: %timeit plain_obj.new_type('Point', ['x', 'y', 'z'])\n    10000 loops, best of 3: 97.8 \u00b5s per loop\n\n    In [5]: Point = collections.namedtuple('Point', ['x', 'y', 'z'])\n\n    In [6]: NewPoint = plain_obj.new_type('Point', ['x', 'y', 'z'])\n\n    In [7]: %timeit Point(1, 2, 3)\n    The slowest run took 7.99 times longer than the fastest. This could mean that an intermediate result is being cached.\n    1000000 loops, best of 3: 507 ns per loop\n\n    In [8]: %timeit NewPoint(1, 2, 3)\n    The slowest run took 6.70 times longer than the fastest. This could mean that an intermediate result is being cached.\n    1000000 loops, best of 3: 462 ns per loop\n\n    In [9]: p = Point(1, 2, 3)\n\n    In [10]: new_p = NewPoint(1, 2, 3)\n\n    In [11]: %timeit p.x, p.y, p.z\n    The slowest run took 9.92 times longer than the fastest. This could mean that an intermediate result is being cached.\n    1000000 loops, best of 3: 408 ns per loop\n\n    In [12]: %timeit new_p.x, new_p.y, new_p.z\n    The slowest run took 11.70 times longer than the fastest. This could mean that an intermediate result is being cached.\n    10000000 loops, best of 3: 163 ns per loop\n\nComparing ``plain_obj`` with ``namedtuple`` in *Python 3.6*:\n\n.. code-block:: python\n\n    In [3]: %timeit collections.namedtuple('Point', ['x', 'y', 'z'])\n    382 \u00b5s \u00b1 3.82 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n    In [4]: %timeit plain_obj.new_type('Point', ['x', 'y', 'z'])\n    53.5 \u00b5s \u00b1 1.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n    In [5]: Point = collections.namedtuple('Point', ['x', 'y', 'z'])\n\n    In [6]: NewPoint = plain_obj.new_type('Point', ['x', 'y', 'z'])\n\n    In [7]: %timeit Point(1, 2, 3)\n    521 ns \u00b1 2.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n    In [8]: %timeit NewPoint(1, 2, 3)\n    438 ns \u00b1 5.53 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n    In [9]: p = Point(1, 2, 3)\n\n    In [10]: new_p = NewPoint(1, 2, 3)\n\n    In [11]: %timeit p.x, p.y, p.z\n    282 ns \u00b1 2.52 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n\n    In [12]: %timeit new_p.x, new_p.y, new_p.z\n    148 ns \u00b1 1.7 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\nAs you can see, it's faster in all cases including *type creation*, *object instantiation* and *attribute access*.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/suzaku/plain_obj", "keywords": "tuple", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "plain_obj", "package_url": "https://pypi.org/project/plain_obj/", "platform": "", "project_url": "https://pypi.org/project/plain_obj/", "project_urls": {"Homepage": "https://github.com/suzaku/plain_obj"}, "release_url": "https://pypi.org/project/plain_obj/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A faster alternative to namedtuple.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/suzaku/plain_obj\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/suzaku/plain_obj.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10be29dd66f9979f02d5b8a177a3b908ae1f8f7a/68747470733a2f2f7472617669732d63692e6f72672f73757a616b752f706c61696e5f6f626a2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/plain_obj\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/plain_obj.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3451fa1832447a29925f0a91548260ec12ccfa6c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706c61696e5f6f626a2e737667\"></a>\n<p>A faster alternative to namedtuple.</p>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<div id=\"creation\">\n<h3>Creation</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">plain_obj</span>\n<span class=\"n\">Config</span> <span class=\"o\">=</span> <span class=\"n\">plain_obj</span><span class=\"o\">.</span><span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"s1\">'Config'</span><span class=\"p\">,</span> <span class=\"s1\">'is_debug, skips_dist, run_tests'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">is_debug</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is a verbose debugging message.\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"make-a-dict\">\n<h3>Make a dict</h3>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"unpacking\">\n<h3>Unpacking</h3>\n<pre><span class=\"n\">is_debug</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">run_tests</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n</pre>\n<a href=\"https://app.codesponsor.io/link/MY7qFCdB7bDgiBqdjtV9ASYi/suzaku/plain_obj\" rel=\"nofollow\"><img alt=\"Sponsor\" height=\"68px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42a37283cb53078e4862d4bbff7f3cd1f5576906/68747470733a2f2f6170702e636f646573706f6e736f722e696f2f656d6265642f4d5937714643644237624467694271646a745639415359692f73757a616b752f706c61696e5f6f626a2e737667\" width=\"888px\"></a>\n</div>\n</div>\n<div id=\"when-to-use-plain-obj-instead-of-namedtuple\">\n<h2>When to use <tt>plain_obj</tt> instead of <tt>namedtuple</tt>?</h2>\n<p><strong>When faster creation time matters to you.</strong></p>\n<p>Comparing <tt>plain_obj</tt> with <tt>namedtuple</tt> in <em>Python 2.7</em>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n<span class=\"mi\">1000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">338</span> <span class=\"n\">\u00b5s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">plain_obj</span><span class=\"o\">.</span><span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n<span class=\"mi\">10000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">97.8</span> <span class=\"n\">\u00b5s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">Point</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">NewPoint</span> <span class=\"o\">=</span> <span class=\"n\">plain_obj</span><span class=\"o\">.</span><span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">The</span> <span class=\"n\">slowest</span> <span class=\"n\">run</span> <span class=\"n\">took</span> <span class=\"mf\">7.99</span> <span class=\"n\">times</span> <span class=\"n\">longer</span> <span class=\"n\">than</span> <span class=\"n\">the</span> <span class=\"n\">fastest</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"n\">could</span> <span class=\"n\">mean</span> <span class=\"n\">that</span> <span class=\"n\">an</span> <span class=\"n\">intermediate</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">being</span> <span class=\"n\">cached</span><span class=\"o\">.</span>\n<span class=\"mi\">1000000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">507</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">NewPoint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">The</span> <span class=\"n\">slowest</span> <span class=\"n\">run</span> <span class=\"n\">took</span> <span class=\"mf\">6.70</span> <span class=\"n\">times</span> <span class=\"n\">longer</span> <span class=\"n\">than</span> <span class=\"n\">the</span> <span class=\"n\">fastest</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"n\">could</span> <span class=\"n\">mean</span> <span class=\"n\">that</span> <span class=\"n\">an</span> <span class=\"n\">intermediate</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">being</span> <span class=\"n\">cached</span><span class=\"o\">.</span>\n<span class=\"mi\">1000000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">462</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">new_p</span> <span class=\"o\">=</span> <span class=\"n\">NewPoint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">z</span>\n<span class=\"n\">The</span> <span class=\"n\">slowest</span> <span class=\"n\">run</span> <span class=\"n\">took</span> <span class=\"mf\">9.92</span> <span class=\"n\">times</span> <span class=\"n\">longer</span> <span class=\"n\">than</span> <span class=\"n\">the</span> <span class=\"n\">fastest</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"n\">could</span> <span class=\"n\">mean</span> <span class=\"n\">that</span> <span class=\"n\">an</span> <span class=\"n\">intermediate</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">being</span> <span class=\"n\">cached</span><span class=\"o\">.</span>\n<span class=\"mi\">1000000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">408</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">z</span>\n<span class=\"n\">The</span> <span class=\"n\">slowest</span> <span class=\"n\">run</span> <span class=\"n\">took</span> <span class=\"mf\">11.70</span> <span class=\"n\">times</span> <span class=\"n\">longer</span> <span class=\"n\">than</span> <span class=\"n\">the</span> <span class=\"n\">fastest</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"n\">could</span> <span class=\"n\">mean</span> <span class=\"n\">that</span> <span class=\"n\">an</span> <span class=\"n\">intermediate</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">being</span> <span class=\"n\">cached</span><span class=\"o\">.</span>\n<span class=\"mi\">10000000</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">163</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</pre>\n<p>Comparing <tt>plain_obj</tt> with <tt>namedtuple</tt> in <em>Python 3.6</em>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n<span class=\"mi\">382</span> <span class=\"n\">\u00b5s</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">3.82</span> <span class=\"n\">\u00b5s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">plain_obj</span><span class=\"o\">.</span><span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n<span class=\"mf\">53.5</span> <span class=\"n\">\u00b5s</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">1.2</span> <span class=\"n\">\u00b5s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">10000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">Point</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">NewPoint</span> <span class=\"o\">=</span> <span class=\"n\">plain_obj</span><span class=\"o\">.</span><span class=\"n\">new_type</span><span class=\"p\">(</span><span class=\"s1\">'Point'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">521</span> <span class=\"n\">ns</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">2.5</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">NewPoint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">438</span> <span class=\"n\">ns</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">5.53</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"n\">new_p</span> <span class=\"o\">=</span> <span class=\"n\">NewPoint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">z</span>\n<span class=\"mi\">282</span> <span class=\"n\">ns</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">2.52</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">new_p</span><span class=\"o\">.</span><span class=\"n\">z</span>\n<span class=\"mi\">148</span> <span class=\"n\">ns</span> <span class=\"err\">\u00b1</span> <span class=\"mf\">1.7</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">10000000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, it\u2019s faster in all cases including <em>type creation</em>, <em>object instantiation</em> and <em>attribute access</em>.</p>\n</div>\n\n          </div>"}, "last_serial": 3144995, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2234f590589423f64daec1dbdaef863e", "sha256": "6b127d384afbd24f657c504fcba5310620cea133ba86d4128ca97899b4e430c9"}, "downloads": -1, "filename": "plain_obj-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2234f590589423f64daec1dbdaef863e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1710, "upload_time": "2017-09-03T04:24:29", "upload_time_iso_8601": "2017-09-03T04:24:29.345172Z", "url": "https://files.pythonhosted.org/packages/5e/b6/5a432e5be10136c5425e43df46d8401d396eb12c75dd6a8a43b2a41fbe6c/plain_obj-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5b466f9ca66ae27ffe15594fd3383a41", "sha256": "9c591dc0315e42f9160a63d6b82b23287bc469ea21f98d729e0c8471cacd761e"}, "downloads": -1, "filename": "plain_obj-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5b466f9ca66ae27ffe15594fd3383a41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2725, "upload_time": "2017-09-03T05:16:40", "upload_time_iso_8601": "2017-09-03T05:16:40.964860Z", "url": "https://files.pythonhosted.org/packages/f8/e7/10af534d297642a1e967b73b6c82a5fd83561680e6795dcff2568385c4e5/plain_obj-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "37992efa6799d1366cd4b8431f64d67e", "sha256": "321ecd8362795bdb82a3b67ad4bf375eae55041124d42953fac4c9efc22354ee"}, "downloads": -1, "filename": "plain_obj-0.1.2.tar.gz", "has_sig": false, "md5_digest": "37992efa6799d1366cd4b8431f64d67e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2799, "upload_time": "2017-09-03T08:52:42", "upload_time_iso_8601": "2017-09-03T08:52:42.537213Z", "url": "https://files.pythonhosted.org/packages/7a/ba/2d9ae6243fd7caa94e6c3c70f3ad830d33323d4c3d340c56a5125bb23ca0/plain_obj-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37992efa6799d1366cd4b8431f64d67e", "sha256": "321ecd8362795bdb82a3b67ad4bf375eae55041124d42953fac4c9efc22354ee"}, "downloads": -1, "filename": "plain_obj-0.1.2.tar.gz", "has_sig": false, "md5_digest": "37992efa6799d1366cd4b8431f64d67e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2799, "upload_time": "2017-09-03T08:52:42", "upload_time_iso_8601": "2017-09-03T08:52:42.537213Z", "url": "https://files.pythonhosted.org/packages/7a/ba/2d9ae6243fd7caa94e6c3c70f3ad830d33323d4c3d340c56a5125bb23ca0/plain_obj-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:45 2020"}