{"info": {"author": "Ian Beaver, Next IT Corp", "author_email": "ibeaver@nextit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries", "Topic :: Text Processing", "Topic :: Text Processing :: Linguistic", "Topic :: Utilities"], "description": "PyContractions\n==============\n\nA Python library for expanding and creating common English `contractions <https://en.wikipedia.org/wiki/Contraction_(grammar)>`_ in text.  This is very useful for dimensionality reduction by normalizing the text before generating word or character vectors.  It performs contraction by simple replacement rules of the commonly used English contractions.\n\nExpansion, on the other hand, is not as simple as it requires contextual knowledge in order to choose the correct replacement words.  Consider the following rules::\n\n    I'd -> I would\n    I'd -> I had\n\n\nHow to automatically decide which rule to use for each match in the following text?\n\n    *I'd like to know how I'd done that!*\n\nThis library takes a three-pass approach.  First, the simple contractions with only a single rule are replaced.  On the second pass if any contractions are present with multiple rules we proceed to replace all combinations of rules to produce all possible texts.  Each text is then passed through a grammar checker and the `Word Mover's Distance <http://proceedings.mlr.press/v37/kusnerb15.pdf>`_ (WMD) is calculated between it and the original text.  The hypotheses are then sorted by least number of grammatical errors and shortest distance from the original text and the top hypothesis is returned as the expanded form.\n\nThe grammatical error count eliminates the worst choices, but there are many cases that contain no or the same number of grammatical errors.  In these cases the WMD works as the tie-breaker.  WMD is the minimum weighted cumulative cost required to move all words from the original text to each hypothesis.  This leverages the underlying `Word2Vec <https://arxiv.org/pdf/1301.3781.pdf>`_, `GloVe <http://www.aclweb.org/anthology/D14-1162>`_, or `FastText <https://research.fb.com/wp-content/uploads/2017/06/tacl.pdf>`_, or any semantic vector model chosen.  As the difference between each hypothesis is only the replacement of a contraction with it's expansion, the \"closest\" hypothesis to the original text will be that with the minimum Euclidean distance between the contraction and expansion word pair in the embedding space.\n\nUsing the `Google News pre-trained model <https://code.google.com/archive/p/word2vec/>`_ yields good results but there are still some cases that can cause problems.  Consider the following rules::\n\n    ain't -> am not\n    ain't -> are not\n    ain't -> is not\n    ain't -> has not\n    ain't -> have not\n\nAnd the following sentence:\n\n    *We ain't all the same*\n\nThe output hypotheses using the Google model will look like this (Hypothesis, WMD, # Grammar Errors)::\n\n    [('We have not all the same', 0.6680542214210519, 0),\n     ('We are not all the same', 0.7372250927409768, 0),\n     ('We has not all the same', 0.7223834627019157, 1),\n     ('We am not all the same', 0.8113022453418426, 1),\n     ('We is not all the same', 0.6954222661000212, 2)]\n\nNotice that the grammar checker eliminates the worst offenders, but two remain with no grammar errors.  Among other reasons, the past-tense *have* is more commonly embedded between \"we\" and \"not\" than the present-tense *are* in the Google News dataset, therefore it yields a lower travel cost to hypothesis 1 than hypothesis 2.  Trying the FastText 1 million word vector 300 dimensional model we see::\n\n    [('We have not all the same', 0.45723494251012825, 0),\n     ('We are not all the same', 0.46916066501924986, 0),\n     ('We has not all the same', 0.49631577238129004, 1),\n     ('We am not all the same', 0.5491228638094231, 1),\n     ('We is not all the same', 0.4898885599267869, 2)]\n\nWhile the first result is still incorrect, the second and third have swapped position by distance.  This model is much closer to providing the correct expansion.  Like anything using models, your mileage will vary based on the embedding model you use and how well it matches your data.  In general, however, the approach works well enough for many pre-processing tasks.\n\nFor performance, an optimized version works under the assumption that every instance of a particular contraction should be expanded the same.  This is generally the case in short texts like Tweets or IRC chats.  For longer texts such as comments or webpages the slower but more accurate approach will yield better results.\n\n\n\nExample usage\n-------------\n\n.. code:: python\n\n    >>> from pycontractions import Contractions\n\n    # Load your favorite semantic vector model in gensim keyedvectors format from disk\n    >>> cont = Contractions('GoogleNews-vectors-negative300.bin')\n\n    # or specify any model from the gensim.downloader api\n    >>> cont = Contractions(api_key=\"glove-twitter-100\")\n\n    # or train or load your own keyedvectors model and pass it in\n    >>> cont = Contractions(kv_model=mykvmodel)\n\n    # optional, prevents loading on first expand_texts call\n    >>> cont.load_models() \n\nThe faster less precise version is the default:\n\n.. code:: python\n\n    >>> list(cont.expand_texts([\"I'd like to know how I'd done that!\",\n                                \"We're going to the zoo and I don't think I'll be home for dinner.\",\n                                \"Theyre going to the zoo and she'll be home for dinner.\"]))\n     [u'I had like to know how I had done that!',\n      u'we are going to the zoo and I do not think I will be home for dinner.',\n      u'they are going to the zoo and she will be home for dinner.']    \n\nNotice the error in the first text is correct below when using ``precise=True``:\n\n.. code:: python\n\n    >>> list(cont.expand_texts([\"I'd like to know how I'd done that!\",\n                                \"We're going to the zoo and I don't think I'll be home for dinner.\",\n                                \"Theyre going to the zoo and she'll be home for dinner.\"], precise=True))\n     [u'I would like to know how I had done that!',\n      u'we are going to the zoo and I do not think I will be home for dinner.',\n      u'they are going to the zoo and she will be home for dinner.']\n\n\n\nTo insert contractions use the ``contract_texts`` method:\n\n.. code:: python\n\n    >>> list(cont.contract_texts([\"I would like to know how I had done that!\",\n                                  \"We are not driving to the zoo, it will take too long.\",\n                                  \"I have already tried that and i could not figure it out\"]))\n     [u\"I'd like to know how I'd done that!\",\n      u\"We aren't driving to the zoo, it'll take too long.\",\n      u\"I've already tried that and i couldn't figure it out\"]\n\n\n\nPerformance differences using the ``precise`` version on an Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz:\n\n.. code:: python\n\n    >>> cont = Contractions(api_key=\"glove-twitter-25\")\n    >>> cont.load_models()\n\n    >>> text = \"Theyre going to the zoo and she'll be home for dinner.\"\n    >>> %timeit list(cont.expand_texts([text]))\n    10 loops, best of 3: 21.4 ms per loop\n    >>> %timeit list(cont.expand_texts([text], precise=True))\n    10 loops, best of 3: 25.1 ms per loop\n\n    # A 349 word movie review    \n    >>> len(text.split())\n    349\n    >>> %timeit list(cont.expand_texts([text]))\n    1 loop, best of 3: 1.17 s per loop\n    >>> %timeit list(cont.expand_texts([text], precise=True))\n    1 loop, best of 3: 2.88 s per loop\n\n    # Contraction is fast, same 349 word movie review\n    >>> %timeit list(cont.contract_texts([text]))\n    100 loops, best of 3: 4.77 ms per loop\n\n\n\nInstallation\n------------\n\nTo install via pip::\n\n    $ pip install pycontractions\n\n\nPrerequisites\n-------------\n\n- `language-check <https://github.com/myint/language-check>`_\n- `gensim <http://radimrehurek.com/gensim/>`_\n\nlanguage-check depends on the Java `LanguageTool <https://www.languagetool.org>`_ package, \ntherefore this package depends on it (and Java 6.0+).  The language-check installer *should* take care of \ndownloading it for you, but it may take several minutes depending on internet connection.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ian-beaver/pycontractions", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pycontractions", "package_url": "https://pypi.org/project/pycontractions/", "platform": "", "project_url": "https://pypi.org/project/pycontractions/", "project_urls": {"Homepage": "https://github.com/ian-beaver/pycontractions"}, "release_url": "https://pypi.org/project/pycontractions/2.0.1/", "requires_dist": ["gensim (>=2.0)", "language-check (>=1.0)", "pyemd (>=0.4.4)"], "requires_python": "", "summary": "Intelligently expand and create contractions in text leveraging grammar checking and Word Mover's Distance.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python library for expanding and creating common English <a href=\"https://en.wikipedia.org/wiki/Contraction_(grammar)\" rel=\"nofollow\">contractions</a> in text.  This is very useful for dimensionality reduction by normalizing the text before generating word or character vectors.  It performs contraction by simple replacement rules of the commonly used English contractions.</p>\n<p>Expansion, on the other hand, is not as simple as it requires contextual knowledge in order to choose the correct replacement words.  Consider the following rules:</p>\n<pre>I'd -&gt; I would\nI'd -&gt; I had\n</pre>\n<p>How to automatically decide which rule to use for each match in the following text?</p>\n<blockquote>\n<em>I\u2019d like to know how I\u2019d done that!</em></blockquote>\n<p>This library takes a three-pass approach.  First, the simple contractions with only a single rule are replaced.  On the second pass if any contractions are present with multiple rules we proceed to replace all combinations of rules to produce all possible texts.  Each text is then passed through a grammar checker and the <a href=\"http://proceedings.mlr.press/v37/kusnerb15.pdf\" rel=\"nofollow\">Word Mover\u2019s Distance</a> (WMD) is calculated between it and the original text.  The hypotheses are then sorted by least number of grammatical errors and shortest distance from the original text and the top hypothesis is returned as the expanded form.</p>\n<p>The grammatical error count eliminates the worst choices, but there are many cases that contain no or the same number of grammatical errors.  In these cases the WMD works as the tie-breaker.  WMD is the minimum weighted cumulative cost required to move all words from the original text to each hypothesis.  This leverages the underlying <a href=\"https://arxiv.org/pdf/1301.3781.pdf\" rel=\"nofollow\">Word2Vec</a>, <a href=\"http://www.aclweb.org/anthology/D14-1162\" rel=\"nofollow\">GloVe</a>, or <a href=\"https://research.fb.com/wp-content/uploads/2017/06/tacl.pdf\" rel=\"nofollow\">FastText</a>, or any semantic vector model chosen.  As the difference between each hypothesis is only the replacement of a contraction with it\u2019s expansion, the \u201cclosest\u201d hypothesis to the original text will be that with the minimum Euclidean distance between the contraction and expansion word pair in the embedding space.</p>\n<p>Using the <a href=\"https://code.google.com/archive/p/word2vec/\" rel=\"nofollow\">Google News pre-trained model</a> yields good results but there are still some cases that can cause problems.  Consider the following rules:</p>\n<pre>ain't -&gt; am not\nain't -&gt; are not\nain't -&gt; is not\nain't -&gt; has not\nain't -&gt; have not\n</pre>\n<p>And the following sentence:</p>\n<blockquote>\n<em>We ain\u2019t all the same</em></blockquote>\n<p>The output hypotheses using the Google model will look like this (Hypothesis, WMD, # Grammar Errors):</p>\n<pre>[('We have not all the same', 0.6680542214210519, 0),\n ('We are not all the same', 0.7372250927409768, 0),\n ('We has not all the same', 0.7223834627019157, 1),\n ('We am not all the same', 0.8113022453418426, 1),\n ('We is not all the same', 0.6954222661000212, 2)]\n</pre>\n<p>Notice that the grammar checker eliminates the worst offenders, but two remain with no grammar errors.  Among other reasons, the past-tense <em>have</em> is more commonly embedded between \u201cwe\u201d and \u201cnot\u201d than the present-tense <em>are</em> in the Google News dataset, therefore it yields a lower travel cost to hypothesis 1 than hypothesis 2.  Trying the FastText 1 million word vector 300 dimensional model we see:</p>\n<pre>[('We have not all the same', 0.45723494251012825, 0),\n ('We are not all the same', 0.46916066501924986, 0),\n ('We has not all the same', 0.49631577238129004, 1),\n ('We am not all the same', 0.5491228638094231, 1),\n ('We is not all the same', 0.4898885599267869, 2)]\n</pre>\n<p>While the first result is still incorrect, the second and third have swapped position by distance.  This model is much closer to providing the correct expansion.  Like anything using models, your mileage will vary based on the embedding model you use and how well it matches your data.  In general, however, the approach works well enough for many pre-processing tasks.</p>\n<p>For performance, an optimized version works under the assumption that every instance of a particular contraction should be expanded the same.  This is generally the case in short texts like Tweets or IRC chats.  For longer texts such as comments or webpages the slower but more accurate approach will yield better results.</p>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycontractions</span> <span class=\"kn\">import</span> <span class=\"n\">Contractions</span>\n\n<span class=\"c1\"># Load your favorite semantic vector model in gensim keyedvectors format from disk</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span> <span class=\"o\">=</span> <span class=\"n\">Contractions</span><span class=\"p\">(</span><span class=\"s1\">'GoogleNews-vectors-negative300.bin'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or specify any model from the gensim.downloader api</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span> <span class=\"o\">=</span> <span class=\"n\">Contractions</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"glove-twitter-100\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or train or load your own keyedvectors model and pass it in</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span> <span class=\"o\">=</span> <span class=\"n\">Contractions</span><span class=\"p\">(</span><span class=\"n\">kv_model</span><span class=\"o\">=</span><span class=\"n\">mykvmodel</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># optional, prevents loading on first expand_texts call</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">load_models</span><span class=\"p\">()</span>\n</pre>\n<p>The faster less precise version is the default:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"s2\">\"I'd like to know how I'd done that!\"</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"We're going to the zoo and I don't think I'll be home for dinner.\"</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"Theyre going to the zoo and she'll be home for dinner.\"</span><span class=\"p\">]))</span>\n <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'I had like to know how I had done that!'</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s1\">'we are going to the zoo and I do not think I will be home for dinner.'</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s1\">'they are going to the zoo and she will be home for dinner.'</span><span class=\"p\">]</span>\n</pre>\n<p>Notice the error in the first text is correct below when using <tt>precise=True</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"s2\">\"I'd like to know how I'd done that!\"</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"We're going to the zoo and I don't think I'll be home for dinner.\"</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"Theyre going to the zoo and she'll be home for dinner.\"</span><span class=\"p\">],</span> <span class=\"n\">precise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'I would like to know how I had done that!'</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s1\">'we are going to the zoo and I do not think I will be home for dinner.'</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s1\">'they are going to the zoo and she will be home for dinner.'</span><span class=\"p\">]</span>\n</pre>\n<p>To insert contractions use the <tt>contract_texts</tt> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">contract_texts</span><span class=\"p\">([</span><span class=\"s2\">\"I would like to know how I had done that!\"</span><span class=\"p\">,</span>\n                              <span class=\"s2\">\"We are not driving to the zoo, it will take too long.\"</span><span class=\"p\">,</span>\n                              <span class=\"s2\">\"I have already tried that and i could not figure it out\"</span><span class=\"p\">]))</span>\n <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"I'd like to know how I'd done that!\"</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s2\">\"We aren't driving to the zoo, it'll take too long.\"</span><span class=\"p\">,</span>\n  <span class=\"sa\">u</span><span class=\"s2\">\"I've already tried that and i couldn't figure it out\"</span><span class=\"p\">]</span>\n</pre>\n<p>Performance differences using the <tt>precise</tt> version on an Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span> <span class=\"o\">=</span> <span class=\"n\">Contractions</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"glove-twitter-25\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">load_models</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Theyre going to the zoo and she'll be home for dinner.\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"n\">text</span><span class=\"p\">]))</span>\n<span class=\"mi\">10</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">21.4</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"n\">text</span><span class=\"p\">],</span> <span class=\"n\">precise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"mi\">10</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">25.1</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"c1\"># A 349 word movie review</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n<span class=\"mi\">349</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"n\">text</span><span class=\"p\">]))</span>\n<span class=\"mi\">1</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">1.17</span> <span class=\"n\">s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">expand_texts</span><span class=\"p\">([</span><span class=\"n\">text</span><span class=\"p\">],</span> <span class=\"n\">precise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"mi\">1</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">2.88</span> <span class=\"n\">s</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n\n<span class=\"c1\"># Contraction is fast, same 349 word movie review</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"o\">.</span><span class=\"n\">contract_texts</span><span class=\"p\">([</span><span class=\"n\">text</span><span class=\"p\">]))</span>\n<span class=\"mi\">100</span> <span class=\"n\">loops</span><span class=\"p\">,</span> <span class=\"n\">best</span> <span class=\"n\">of</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mf\">4.77</span> <span class=\"n\">ms</span> <span class=\"n\">per</span> <span class=\"n\">loop</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install via pip:</p>\n<pre>$ pip install pycontractions\n</pre>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<ul>\n<li><a href=\"https://github.com/myint/language-check\" rel=\"nofollow\">language-check</a></li>\n<li><a href=\"http://radimrehurek.com/gensim/\" rel=\"nofollow\">gensim</a></li>\n</ul>\n<p>language-check depends on the Java <a href=\"https://www.languagetool.org\" rel=\"nofollow\">LanguageTool</a> package,\ntherefore this package depends on it (and Java 6.0+).  The language-check installer <em>should</em> take care of\ndownloading it for you, but it may take several minutes depending on internet connection.</p>\n</div>\n\n          </div>"}, "last_serial": 5794371, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e4398b4b90c3649b0c5af659f7030934", "sha256": "c3ad14112b2671b74ac150e026927fb4649f26963a7ad7c7f568493c4f383e74"}, "downloads": -1, "filename": "pycontractions-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e4398b4b90c3649b0c5af659f7030934", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8695, "upload_time": "2017-07-20T23:11:17", "upload_time_iso_8601": "2017-07-20T23:11:17.733477Z", "url": "https://files.pythonhosted.org/packages/82/4d/63fa3f2a7e2a37667456f5b899544fee4bbb525b11c345899e079673c899/pycontractions-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0b3c92ccea8fcd35d29db353cb67f7c7", "sha256": "cc4b3096a18153731963d68f03439668c55ca8bc701f16fa433e7d6c0455b577"}, "downloads": -1, "filename": "pycontractions-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0b3c92ccea8fcd35d29db353cb67f7c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8721, "upload_time": "2017-08-22T17:32:36", "upload_time_iso_8601": "2017-08-22T17:32:36.831712Z", "url": "https://files.pythonhosted.org/packages/cc/4c/dcf983b504ee880d5e74bd86f3bf24bd23271067b59a6c41f10f005f87e1/pycontractions-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "60d6c0457bd5a364ba288332c68476f1", "sha256": "cc55bdc539999d98f77feebc5c1a7ac029b6fbf836d8dd9c04c7c3c49941f337"}, "downloads": -1, "filename": "pycontractions-1.0.2.tar.gz", "has_sig": false, "md5_digest": "60d6c0457bd5a364ba288332c68476f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7836, "upload_time": "2018-09-07T23:51:51", "upload_time_iso_8601": "2018-09-07T23:51:51.417600Z", "url": "https://files.pythonhosted.org/packages/45/64/e85726802d9c38ab0e83d25d38e5702ba098deacb0ceec0fc7c21c3a42ce/pycontractions-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "b275240686341cacc9e79e60a2bbbfdf", "sha256": "a860fd8b33f0d3c18842adb255343759907f4b0c562c76bafc847caa6719a873"}, "downloads": -1, "filename": "pycontractions-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b275240686341cacc9e79e60a2bbbfdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8841, "upload_time": "2018-09-11T21:45:39", "upload_time_iso_8601": "2018-09-11T21:45:39.512168Z", "url": "https://files.pythonhosted.org/packages/e2/ca/61b0fa2eb9f9fcc13f4a68c517b00ab000f859782492dd7a62032583ecb2/pycontractions-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "cd46f0485dabb93c7c80d4c97bdf9a40", "sha256": "9b22fa71dd91d536c29923c331e866aafb907eef5386e4e838819c58e2fe1ebb"}, "downloads": -1, "filename": "pycontractions-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd46f0485dabb93c7c80d4c97bdf9a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9582, "upload_time": "2019-09-06T23:26:18", "upload_time_iso_8601": "2019-09-06T23:26:18.216103Z", "url": "https://files.pythonhosted.org/packages/a6/f5/d3ec9491c530cbc03af32ca2c6b69b0e89660daeb2856b485d90f9d82e5e/pycontractions-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a45b428a34bdf65ceeba4c182d251af2", "sha256": "43de2a756e3a910ef55797a7a01927f1c0c02249fa2cc087a73895e9614f2554"}, "downloads": -1, "filename": "pycontractions-2.0.1.tar.gz", "has_sig": false, "md5_digest": "a45b428a34bdf65ceeba4c182d251af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11591, "upload_time": "2019-09-06T23:26:19", "upload_time_iso_8601": "2019-09-06T23:26:19.980503Z", "url": "https://files.pythonhosted.org/packages/cb/5d/becb28bdc8820e74ce35a4581eb8a668208b96152ffce63f25927e154fc1/pycontractions-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd46f0485dabb93c7c80d4c97bdf9a40", "sha256": "9b22fa71dd91d536c29923c331e866aafb907eef5386e4e838819c58e2fe1ebb"}, "downloads": -1, "filename": "pycontractions-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd46f0485dabb93c7c80d4c97bdf9a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9582, "upload_time": "2019-09-06T23:26:18", "upload_time_iso_8601": "2019-09-06T23:26:18.216103Z", "url": "https://files.pythonhosted.org/packages/a6/f5/d3ec9491c530cbc03af32ca2c6b69b0e89660daeb2856b485d90f9d82e5e/pycontractions-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a45b428a34bdf65ceeba4c182d251af2", "sha256": "43de2a756e3a910ef55797a7a01927f1c0c02249fa2cc087a73895e9614f2554"}, "downloads": -1, "filename": "pycontractions-2.0.1.tar.gz", "has_sig": false, "md5_digest": "a45b428a34bdf65ceeba4c182d251af2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11591, "upload_time": "2019-09-06T23:26:19", "upload_time_iso_8601": "2019-09-06T23:26:19.980503Z", "url": "https://files.pythonhosted.org/packages/cb/5d/becb28bdc8820e74ce35a4581eb8a668208b96152ffce63f25927e154fc1/pycontractions-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:05 2020"}