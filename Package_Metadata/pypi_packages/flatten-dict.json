{"info": {"author": "Ian Lin", "author_email": "you@example.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "flatten-dict\n============\n.. image:: https://img.shields.io/travis/ianlini/flatten-dict/master.svg\n   :target: https://travis-ci.org/ianlini/flatten-dict\n.. image:: https://img.shields.io/pypi/v/flatten-dict.svg\n   :target: https://pypi.org/project/flatten-dict/\n.. image:: https://img.shields.io/pypi/l/flatten-dict.svg\n   :target: https://github.com/ianlini/flatten-dict/blob/master/LICENSE\n.. image:: https://img.shields.io/github/stars/ianlini/flatten-dict.svg?style=social\n   :target: https://github.com/ianlini/flatten-dict\n\nA flexible utility for flattening and unflattening dict-like objects in Python.\n\n\nIntroduction\n------------\nThis package provides a function ``flatten()`` for flattening dict-like objects in Python 2.7 and 3.5~3.8.\nIt also provides some key joining methods (reducer), and you can choose the reducer you want or even implement your own reducer.\nYou can also invert the resulting flat dict using ``unflatten()``.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n   pip install flatten-dict\n\nDocumentation\n-------------\n\nFlatten\n```````\n\n.. code-block:: python\n\n   def flatten(d, reducer='tuple', inverse=False, enumerate_types=(), keep_empty_types=()):\n       \"\"\"Flatten `Mapping` object.\n\n       Parameters\n       ----------\n       d : dict-like object\n           The dict that will be flattened.\n       reducer : {'tuple', 'path', 'underscore', 'dot', Callable}\n           The key joining method. If a `Callable` is given, the `Callable` will be\n           used to reduce.\n           'tuple': The resulting key will be tuple of the original keys.\n           'path': Use `os.path.join` to join keys.\n           'underscore': Use underscores to join keys.\n           'dot': Use dots to join keys.\n       inverse : bool\n           Whether you want invert the resulting key and value.\n       enumerate_types : Sequence[type]\n           Flatten these types using `enumerate`.\n           For example, if we set `enumerate_types` to ``(list,)``,\n           `list` indices become keys: ``{'a': ['b', 'c']}`` -> ``{('a', 0): 'b', ('a', 1): 'c'}``.\n       keep_empty_types : Sequence[type]\n           By default, ``flatten({1: 2, 3: {}})`` will give you ``{(1,): 2}``, that is, the key ``3``\n           will disappear.\n           This is also applied for the types in `enumerate_types`, that is,\n           ``flatten({1: 2, 3: []}, enumerate_types=(list,))`` will give you ``{(1,): 2}``.\n           If you want to keep those empty values, you can specify the types in `keep_empty_types`:\n\n           >>> flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\n           {(1,): 2, (3,): {}}\n\n       Returns\n       -------\n       flat_dict : dict\n       \"\"\"\n\nExamples\n::::::::\n\n>>> from flatten_dict import flatten\n>>> from pprint import pprint\n>>> normal_dict = {\n...     'a': '0',\n...     'b': {\n...         'a': '1.0',\n...         'b': '1.1',\n...     },\n...     'c': {\n...         'a': '2.0',\n...         'b': {\n...             'a': '2.1.0',\n...             'b': '2.1.1',\n...         },\n...     },\n... }\n>>> pprint(flatten(normal_dict))\n{('a',): '0',\n ('b', 'a'): '1.0',\n ('b', 'b'): '1.1',\n ('c', 'a'): '2.0',\n ('c', 'b', 'a'): '2.1.0',\n ('c', 'b', 'b'): '2.1.1'}\n>>> pprint(flatten(normal_dict, reducer='path'))\n{'a': '0',\n 'b/a': '1.0',\n 'b/b': '1.1',\n 'c/a': '2.0',\n 'c/b/a': '2.1.0',\n 'c/b/b': '2.1.1'}\n>>> pprint(flatten(normal_dict, reducer='path', inverse=True))\n{'0': 'a',\n '1.0': 'b/a',\n '1.1': 'b/b',\n '2.0': 'c/a',\n '2.1.0': 'c/b/a',\n '2.1.1': 'c/b/b'}\n\nThe `reducer` parameter supports ``'tuple'``, ``'path'``, ``'underscore'``, ``'dot'`` and `Callable`. We can customize the reducer using a function:\n\n>>> def underscore_reducer(k1, k2):\n...     if k1 is None:\n...         return k2\n...     else:\n...         return k1 + \"_\" + k2\n...\n>>> pprint(flatten(normal_dict, reducer=underscore_reducer))\n{'a': '0',\n 'b_a': '1.0',\n 'b_b': '1.1',\n 'c_a': '2.0',\n 'c_b_a': '2.1.0',\n 'c_b_b': '2.1.1'}\n\nThere is also a factory function `make_reducer()` to help you create customized reducer. The function currently only supports customized delimiter:\n\n>>> from flatten_dict.reducer import make_reducer\n>>> pprint(flatten(normal_dict, reducer=make_reducer(delimiter='_')))\n{'a': '0',\n 'b_a': '1.0',\n 'b_b': '1.1',\n 'c_a': '2.0',\n 'c_b_a': '2.1.0',\n 'c_b_b': '2.1.1'}\n\nIf we have some iterable (e.g., `list`) in the `dict`, we will normally get this:\n\n>>> flatten({'a': [1, 2, 3], 'b': 'c'})\n{('a',): [1, 2, 3], ('b',): 'c'}\n\nIf we want to use its indices as keys, then we can use the parameter `enumerate_types`:\n\n>>> flatten({'a': [1, 2, 3], 'b': 'c'}, enumerate_types=(list,))\n{('a', 0): 1, ('a', 1): 2, ('a', 2): 3, ('b',): 'c'}\n\nWe can even flatten a `list` directly:\n\n>>> flatten([1, 2, 3], enumerate_types=(list,))\n{(0,): 1, (1,): 2, (2,): 3}\n\nIf there is an empty dict in the values, by default, it will disappear after flattened:\n\n>>> flatten({1: 2, 3: {}})\n{(1,): 2}\n\nWe can keep the empty dict in the result using ``keep_empty_types=(dict,)``:\n\n>>> flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\n{(1,): 2, (3,): {}}\n\nUnflatten\n`````````\n\n.. code-block:: python\n\n   def unflatten(d, splitter='tuple', inverse=False):\n       \"\"\"Unflatten dict-like object.\n\n       Parameters\n       ----------\n       d : dict-like object\n           The dict that will be unflattened.\n       splitter : {'tuple', 'path', 'underscore', 'dot', Callable}\n           The key splitting method. If a Callable is given, the Callable will be\n           used to split `d`.\n           'tuple': Use each element in the tuple key as the key of the unflattened dict.\n           'path': Use `pathlib.Path.parts` to split keys.\n           'underscore': Use underscores to split keys.\n           'dot': Use underscores to split keys.\n       inverse : bool\n           Whether you want to invert the key and value before flattening.\n\n       Returns\n       -------\n       unflattened_dict : dict\n       \"\"\"\n\nExamples\n::::::::\n\n>>> from pprint import pprint\n>>> from flatten_dict import unflatten\n>>> flat_dict = {\n...     ('a',): '0',\n...     ('b', 'a'): '1.0',\n...     ('b', 'b'): '1.1',\n...     ('c', 'a'): '2.0',\n...     ('c', 'b', 'a'): '2.1.0',\n...     ('c', 'b', 'b'): '2.1.1',\n... }\n>>> pprint(unflatten(flat_dict))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n>>> flat_dict = {\n...     'a': '0',\n...     'b/a': '1.0',\n...     'b/b': '1.1',\n...     'c/a': '2.0',\n...     'c/b/a': '2.1.0',\n...     'c/b/b': '2.1.1',\n... }\n>>> pprint(unflatten(flat_dict, splitter='path'))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n>>> flat_dict = {\n...     '0': 'a',\n...     '1.0': 'b/a',\n...     '1.1': 'b/b',\n...     '2.0': 'c/a',\n...     '2.1.0': 'c/b/a',\n...     '2.1.1': 'c/b/b',\n... }\n>>> pprint(unflatten(flat_dict, splitter='path', inverse=True))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n\nThe `splitter` parameter supports ``'tuple'``, ``'path'``, ``'underscore'``, ``'dot'`` and `Callable`. We can customize the reducer using a function:\n\n>>> def underscore_splitter(flat_key):\n...     return flat_key.split(\"_\")\n...\n>>> flat_dict = {\n...     'a': '0',\n...     'b_a': '1.0',\n...     'b_b': '1.1',\n...     'c_a': '2.0',\n...     'c_b_a': '2.1.0',\n...     'c_b_b': '2.1.1',\n... }\n>>> pprint(unflatten(flat_dict, splitter=underscore_splitter))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n\nThere is also a factory function `make_splitter()` to help you create customized splitter. The function currently only supports customized delimiter:\n\n>>> from flatten_dict.splitter import make_splitter\n>>> pprint(unflatten(flat_dict, splitter=make_splitter(delimiter='_')))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ianlini/flatten-dict", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flatten-dict", "package_url": "https://pypi.org/project/flatten-dict/", "platform": "", "project_url": "https://pypi.org/project/flatten-dict/", "project_urls": {"Homepage": "https://github.com/ianlini/flatten-dict", "Repository": "https://github.com/ianlini/flatten-dict"}, "release_url": "https://pypi.org/project/flatten-dict/0.3.0/", "requires_dist": ["pathlib2 (>=2.3,<3.0)", "six (>=1.12,<2.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A flexible utility for flattening and unflattening dict-like objects in Python.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/ianlini/flatten-dict\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/ianlini/flatten-dict/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94cfd2a3089bdac49cec6fdf0a049a148ecc4799/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f69616e6c696e692f666c617474656e2d646963742f6d61737465722e737667\"></a>\n<a href=\"https://pypi.org/project/flatten-dict/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/flatten-dict.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e133108e5c80dfc784a5c6c099aa4f00e4b2054/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c617474656e2d646963742e737667\"></a>\n<a href=\"https://github.com/ianlini/flatten-dict/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/flatten-dict.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f8e0faba30223cdc5951583a714c6e34f9e0e97/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f666c617474656e2d646963742e737667\"></a>\n<a href=\"https://github.com/ianlini/flatten-dict\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/stars/ianlini/flatten-dict.svg?style=social\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b5e259ff5399fb3e0a6d54f779d80f771e7feaa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f69616e6c696e692f666c617474656e2d646963742e7376673f7374796c653d736f6369616c\"></a>\n<p>A flexible utility for flattening and unflattening dict-like objects in Python.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package provides a function <tt>flatten()</tt> for flattening dict-like objects in Python 2.7 and 3.5~3.8.\nIt also provides some key joining methods (reducer), and you can choose the reducer you want or even implement your own reducer.\nYou can also invert the resulting flat dict using <tt>unflatten()</tt>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install flatten-dict\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"flatten\">\n<h3>Flatten</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">flatten</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">reducer</span><span class=\"o\">=</span><span class=\"s1\">'tuple'</span><span class=\"p\">,</span> <span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">enumerate_types</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"n\">keep_empty_types</span><span class=\"o\">=</span><span class=\"p\">()):</span>\n    <span class=\"sd\">\"\"\"Flatten `Mapping` object.\n\n    Parameters\n    ----------\n    d : dict-like object\n        The dict that will be flattened.\n    reducer : {'tuple', 'path', 'underscore', 'dot', Callable}\n        The key joining method. If a `Callable` is given, the `Callable` will be\n        used to reduce.\n        'tuple': The resulting key will be tuple of the original keys.\n        'path': Use `os.path.join` to join keys.\n        'underscore': Use underscores to join keys.\n        'dot': Use dots to join keys.\n    inverse : bool\n        Whether you want invert the resulting key and value.\n    enumerate_types : Sequence[type]\n        Flatten these types using `enumerate`.\n        For example, if we set `enumerate_types` to ``(list,)``,\n        `list` indices become keys: ``{'a': ['b', 'c']}`` -&gt; ``{('a', 0): 'b', ('a', 1): 'c'}``.\n    keep_empty_types : Sequence[type]\n        By default, ``flatten({1: 2, 3: {}})`` will give you ``{(1,): 2}``, that is, the key ``3``\n        will disappear.\n        This is also applied for the types in `enumerate_types`, that is,\n        ``flatten({1: 2, 3: []}, enumerate_types=(list,))`` will give you ``{(1,): 2}``.\n        If you want to keep those empty values, you can specify the types in `keep_empty_types`:\n\n        &gt;&gt;&gt; flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\n        {(1,): 2, (3,): {}}\n\n    Returns\n    -------\n    flat_dict : dict\n    \"\"\"</span>\n</pre>\n<div id=\"examples\">\n<h4>Examples</h4>\n<pre>&gt;&gt;&gt; from flatten_dict import flatten\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; normal_dict = {\n...     'a': '0',\n...     'b': {\n...         'a': '1.0',\n...         'b': '1.1',\n...     },\n...     'c': {\n...         'a': '2.0',\n...         'b': {\n...             'a': '2.1.0',\n...             'b': '2.1.1',\n...         },\n...     },\n... }\n&gt;&gt;&gt; pprint(flatten(normal_dict))\n{('a',): '0',\n ('b', 'a'): '1.0',\n ('b', 'b'): '1.1',\n ('c', 'a'): '2.0',\n ('c', 'b', 'a'): '2.1.0',\n ('c', 'b', 'b'): '2.1.1'}\n&gt;&gt;&gt; pprint(flatten(normal_dict, reducer='path'))\n{'a': '0',\n 'b/a': '1.0',\n 'b/b': '1.1',\n 'c/a': '2.0',\n 'c/b/a': '2.1.0',\n 'c/b/b': '2.1.1'}\n&gt;&gt;&gt; pprint(flatten(normal_dict, reducer='path', inverse=True))\n{'0': 'a',\n '1.0': 'b/a',\n '1.1': 'b/b',\n '2.0': 'c/a',\n '2.1.0': 'c/b/a',\n '2.1.1': 'c/b/b'}\n</pre>\n<p>The <cite>reducer</cite> parameter supports <tt>'tuple'</tt>, <tt>'path'</tt>, <tt>'underscore'</tt>, <tt>'dot'</tt> and <cite>Callable</cite>. We can customize the reducer using a function:</p>\n<pre>&gt;&gt;&gt; def underscore_reducer(k1, k2):\n...     if k1 is None:\n...         return k2\n...     else:\n...         return k1 + \"_\" + k2\n...\n&gt;&gt;&gt; pprint(flatten(normal_dict, reducer=underscore_reducer))\n{'a': '0',\n 'b_a': '1.0',\n 'b_b': '1.1',\n 'c_a': '2.0',\n 'c_b_a': '2.1.0',\n 'c_b_b': '2.1.1'}\n</pre>\n<p>There is also a factory function <cite>make_reducer()</cite> to help you create customized reducer. The function currently only supports customized delimiter:</p>\n<pre>&gt;&gt;&gt; from flatten_dict.reducer import make_reducer\n&gt;&gt;&gt; pprint(flatten(normal_dict, reducer=make_reducer(delimiter='_')))\n{'a': '0',\n 'b_a': '1.0',\n 'b_b': '1.1',\n 'c_a': '2.0',\n 'c_b_a': '2.1.0',\n 'c_b_b': '2.1.1'}\n</pre>\n<p>If we have some iterable (e.g., <cite>list</cite>) in the <cite>dict</cite>, we will normally get this:</p>\n<pre>&gt;&gt;&gt; flatten({'a': [1, 2, 3], 'b': 'c'})\n{('a',): [1, 2, 3], ('b',): 'c'}\n</pre>\n<p>If we want to use its indices as keys, then we can use the parameter <cite>enumerate_types</cite>:</p>\n<pre>&gt;&gt;&gt; flatten({'a': [1, 2, 3], 'b': 'c'}, enumerate_types=(list,))\n{('a', 0): 1, ('a', 1): 2, ('a', 2): 3, ('b',): 'c'}\n</pre>\n<p>We can even flatten a <cite>list</cite> directly:</p>\n<pre>&gt;&gt;&gt; flatten([1, 2, 3], enumerate_types=(list,))\n{(0,): 1, (1,): 2, (2,): 3}\n</pre>\n<p>If there is an empty dict in the values, by default, it will disappear after flattened:</p>\n<pre>&gt;&gt;&gt; flatten({1: 2, 3: {}})\n{(1,): 2}\n</pre>\n<p>We can keep the empty dict in the result using <tt><span class=\"pre\">keep_empty_types=(dict,)</span></tt>:</p>\n<pre>&gt;&gt;&gt; flatten({1: 2, 3: {}}, keep_empty_types=(dict,))\n{(1,): 2, (3,): {}}\n</pre>\n</div>\n</div>\n<div id=\"unflatten\">\n<h3>Unflatten</h3>\n<pre><span class=\"k\">def</span> <span class=\"nf\">unflatten</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">splitter</span><span class=\"o\">=</span><span class=\"s1\">'tuple'</span><span class=\"p\">,</span> <span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unflatten dict-like object.\n\n    Parameters\n    ----------\n    d : dict-like object\n        The dict that will be unflattened.\n    splitter : {'tuple', 'path', 'underscore', 'dot', Callable}\n        The key splitting method. If a Callable is given, the Callable will be\n        used to split `d`.\n        'tuple': Use each element in the tuple key as the key of the unflattened dict.\n        'path': Use `pathlib.Path.parts` to split keys.\n        'underscore': Use underscores to split keys.\n        'dot': Use underscores to split keys.\n    inverse : bool\n        Whether you want to invert the key and value before flattening.\n\n    Returns\n    -------\n    unflattened_dict : dict\n    \"\"\"</span>\n</pre>\n<div id=\"id1\">\n<h4>Examples</h4>\n<pre>&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; from flatten_dict import unflatten\n&gt;&gt;&gt; flat_dict = {\n...     ('a',): '0',\n...     ('b', 'a'): '1.0',\n...     ('b', 'b'): '1.1',\n...     ('c', 'a'): '2.0',\n...     ('c', 'b', 'a'): '2.1.0',\n...     ('c', 'b', 'b'): '2.1.1',\n... }\n&gt;&gt;&gt; pprint(unflatten(flat_dict))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n&gt;&gt;&gt; flat_dict = {\n...     'a': '0',\n...     'b/a': '1.0',\n...     'b/b': '1.1',\n...     'c/a': '2.0',\n...     'c/b/a': '2.1.0',\n...     'c/b/b': '2.1.1',\n... }\n&gt;&gt;&gt; pprint(unflatten(flat_dict, splitter='path'))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n&gt;&gt;&gt; flat_dict = {\n...     '0': 'a',\n...     '1.0': 'b/a',\n...     '1.1': 'b/b',\n...     '2.0': 'c/a',\n...     '2.1.0': 'c/b/a',\n...     '2.1.1': 'c/b/b',\n... }\n&gt;&gt;&gt; pprint(unflatten(flat_dict, splitter='path', inverse=True))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n</pre>\n<p>The <cite>splitter</cite> parameter supports <tt>'tuple'</tt>, <tt>'path'</tt>, <tt>'underscore'</tt>, <tt>'dot'</tt> and <cite>Callable</cite>. We can customize the reducer using a function:</p>\n<pre>&gt;&gt;&gt; def underscore_splitter(flat_key):\n...     return flat_key.split(\"_\")\n...\n&gt;&gt;&gt; flat_dict = {\n...     'a': '0',\n...     'b_a': '1.0',\n...     'b_b': '1.1',\n...     'c_a': '2.0',\n...     'c_b_a': '2.1.0',\n...     'c_b_b': '2.1.1',\n... }\n&gt;&gt;&gt; pprint(unflatten(flat_dict, splitter=underscore_splitter))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n</pre>\n<p>There is also a factory function <cite>make_splitter()</cite> to help you create customized splitter. The function currently only supports customized delimiter:</p>\n<pre>&gt;&gt;&gt; from flatten_dict.splitter import make_splitter\n&gt;&gt;&gt; pprint(unflatten(flat_dict, splitter=make_splitter(delimiter='_')))\n{'a': '0',\n 'b': {'a': '1.0', 'b': '1.1'},\n 'c': {'a': '2.0', 'b': {'a': '2.1.0', 'b': '2.1.1'}}}\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7052417, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3317be28adf42bcde486d307e1fc00ac", "sha256": "72201d09e27bfa6b95b6216ab0024ae6f9c3e6c81346920f43eb9f3811a68113"}, "downloads": -1, "filename": "flatten_dict-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3317be28adf42bcde486d307e1fc00ac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3985, "upload_time": "2016-12-15T09:34:41", "upload_time_iso_8601": "2016-12-15T09:34:41.521559Z", "url": "https://files.pythonhosted.org/packages/96/50/981a4011b34dbe60736859686416e2feabbfe82cfad58b839b9f2ffb8f55/flatten_dict-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c91bc50bc263d72ad559feecc61f0a1", "sha256": "a02e3e643169933756c925339e2e93d781bd09fa0347e5b980fc759319fb9364"}, "downloads": -1, "filename": "flatten-dict-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5c91bc50bc263d72ad559feecc61f0a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2267, "upload_time": "2016-12-15T09:34:43", "upload_time_iso_8601": "2016-12-15T09:34:43.578588Z", "url": "https://files.pythonhosted.org/packages/e6/aa/4a5762c82d98cbe7019973ca5c203a521c8533fb364597b9e78b47b031c9/flatten-dict-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "54f5fa5efc4ee02dfcee56111f8fc30a", "sha256": "96cf46d95a74b8075ec7ce2458c2c5cf49278ebf65eb46df9ccf1a86ccb63bcd"}, "downloads": -1, "filename": "flatten_dict-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54f5fa5efc4ee02dfcee56111f8fc30a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5819, "upload_time": "2016-12-16T09:28:57", "upload_time_iso_8601": "2016-12-16T09:28:57.043811Z", "url": "https://files.pythonhosted.org/packages/4b/08/900dde81affc3aad076232ec2f061c7027ed63f333b96d88a34a531a7a5b/flatten_dict-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ded5fac1c6e29aae06be5a92e785c05c", "sha256": "fe417b12c7003a64b66395ea758271202e6796a4d034f9431cdeb2e6fcfc2896"}, "downloads": -1, "filename": "flatten-dict-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ded5fac1c6e29aae06be5a92e785c05c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3393, "upload_time": "2016-12-16T09:28:59", "upload_time_iso_8601": "2016-12-16T09:28:59.751402Z", "url": "https://files.pythonhosted.org/packages/23/fc/31505c42ebb7cb0af467e4e821019f61631e10ae6a882f6e71c65f12879c/flatten-dict-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "83f983412c415e366d6fada37f8bb54b", "sha256": "62e14d3526a2756af5b1845d683d08a6556dec5664dbf5ed6fb20566d697dfe8"}, "downloads": -1, "filename": "flatten_dict-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83f983412c415e366d6fada37f8bb54b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4744, "upload_time": "2018-05-25T16:03:50", "upload_time_iso_8601": "2018-05-25T16:03:50.344303Z", "url": "https://files.pythonhosted.org/packages/7a/f3/7311f421e9d9906aa8b2c43d3d3869abf1269ee3b7a98864051d42014da5/flatten_dict-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b846833ec05bbea2357f0bb39c0b4311", "sha256": "35fa7164b1947cf5d6450dd825e7ba87ccd202251dc2429dce831a81b742e720"}, "downloads": -1, "filename": "flatten-dict-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b846833ec05bbea2357f0bb39c0b4311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4028, "upload_time": "2018-05-25T16:03:52", "upload_time_iso_8601": "2018-05-25T16:03:52.170572Z", "url": "https://files.pythonhosted.org/packages/9a/5a/bc3a3331e31f1fb95f247a1204f0ba2741db1737afeea0e4e01c8f871aff/flatten-dict-0.0.3.tar.gz", "yanked": false}], "0.0.3.post1": [{"comment_text": "", "digests": {"md5": "ed42dacca488d7df6a8668c6b426c145", "sha256": "2ee6b3fa263e6404cf2dc3827d9ad11c863268b4f02f80bb6edfc2241cd95ab9"}, "downloads": -1, "filename": "flatten_dict-0.0.3.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed42dacca488d7df6a8668c6b426c145", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5174, "upload_time": "2018-06-04T15:54:51", "upload_time_iso_8601": "2018-06-04T15:54:51.963904Z", "url": "https://files.pythonhosted.org/packages/7f/c2/a3427d69137de28e3c83bcf0244925542dae7402e26c574d48b304d1f460/flatten_dict-0.0.3.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8a5066e3376b742a4ee3587f251fafa", "sha256": "e3696310519c6d16209288c1c04d8249447b8ea4de83d3f08d6b9bbdc3981f71"}, "downloads": -1, "filename": "flatten-dict-0.0.3.post1.tar.gz", "has_sig": false, "md5_digest": "e8a5066e3376b742a4ee3587f251fafa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4617, "upload_time": "2018-06-04T15:54:53", "upload_time_iso_8601": "2018-06-04T15:54:53.599665Z", "url": "https://files.pythonhosted.org/packages/08/68/eaeb54b9d707701d289698b30753cd1e08aec43ac384beefa91dccdcfe34/flatten-dict-0.0.3.post1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "bff747a48658765415350071c675188b", "sha256": "f4f4901e93c253842afb400ddc5e0089058d69b5d6eb6fc4e65277ee4cd4e67a"}, "downloads": -1, "filename": "flatten_dict-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bff747a48658765415350071c675188b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6759, "upload_time": "2019-05-30T15:20:05", "upload_time_iso_8601": "2019-05-30T15:20:05.648570Z", "url": "https://files.pythonhosted.org/packages/bf/b8/23fbe4b4b85702fd9f4b55f342f3b59dfe26a554a4350fa79f527d0fd7c6/flatten_dict-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f02556376fe04fb5c74f9166ded6e7c1", "sha256": "82944200b8c257d36778691045c53a3cf6925a069a1e8e0890b5e5f6da0e50de"}, "downloads": -1, "filename": "flatten-dict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f02556376fe04fb5c74f9166ded6e7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5290, "upload_time": "2019-05-30T15:20:07", "upload_time_iso_8601": "2019-05-30T15:20:07.898780Z", "url": "https://files.pythonhosted.org/packages/e9/36/1795be8d8133be7a0da14c7cd7adfa6b8a8b8b584fc99e22a142d78fdb6b/flatten-dict-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2e7763d96fb0a518c5032dcbad225e30", "sha256": "96c1ed23f05128478e30435bb54cc0a0d7d2bc638235d9ef6ca4ca221d924b3f"}, "downloads": -1, "filename": "flatten_dict-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e7763d96fb0a518c5032dcbad225e30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7523, "upload_time": "2019-09-29T08:05:48", "upload_time_iso_8601": "2019-09-29T08:05:48.380193Z", "url": "https://files.pythonhosted.org/packages/86/e5/f0e60863e6175ff631261183df6e1ee29509dafe860ae878b52879820dcd/flatten_dict-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "901bc2576e7b43790f5e6b8b9d9ae0f6", "sha256": "077b1540233dd67094881feb58dc353db9f1fedf5faeb51e334fe0cea4fb2b89"}, "downloads": -1, "filename": "flatten-dict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "901bc2576e7b43790f5e6b8b9d9ae0f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7990, "upload_time": "2019-09-29T08:05:46", "upload_time_iso_8601": "2019-09-29T08:05:46.444697Z", "url": "https://files.pythonhosted.org/packages/ed/e3/ef83c1a44ed70cc0d3b8b7e98b20b7628162999c20e8a928fea473f4e51a/flatten-dict-0.2.0.tar.gz", "yanked": false}], "0.2.0.dev0": [{"comment_text": "", "digests": {"md5": "f21b0024ff22d2b81082790f26bec5ba", "sha256": "c9d92e43524f0b19d2086008a7b98ebdf1855eb0524158f413490ce555cacef4"}, "downloads": -1, "filename": "flatten_dict-0.2.0.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f21b0024ff22d2b81082790f26bec5ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6937, "upload_time": "2019-09-29T04:05:20", "upload_time_iso_8601": "2019-09-29T04:05:20.040459Z", "url": "https://files.pythonhosted.org/packages/be/4f/c67a8c022a4db64a66eab162593ef7522bf65ca49e0e6416ef17b62d5d8b/flatten_dict-0.2.0.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7346aeb857837b8cedda6371cf8cf813", "sha256": "0b11b5bac8ba0bc82a890013bbde91e5cc75682a61adba836a08091dfcfdbcac"}, "downloads": -1, "filename": "flatten-dict-0.2.0.dev0.tar.gz", "has_sig": false, "md5_digest": "7346aeb857837b8cedda6371cf8cf813", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7025, "upload_time": "2019-09-29T04:05:17", "upload_time_iso_8601": "2019-09-29T04:05:17.497099Z", "url": "https://files.pythonhosted.org/packages/38/a5/341d4231da572c7f94aac793cc74f5bbdae1bae06b7c3aab147f8001b311/flatten-dict-0.2.0.dev0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3279f98216db13c60d0f5f64d284c73d", "sha256": "96038f9a0a09dca205112ae890e1f2159cfdf2af173397b2aa93d1bb9d055890"}, "downloads": -1, "filename": "flatten_dict-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3279f98216db13c60d0f5f64d284c73d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8201, "upload_time": "2020-04-19T10:05:23", "upload_time_iso_8601": "2020-04-19T10:05:23.435192Z", "url": "https://files.pythonhosted.org/packages/9f/30/02e342a45b85c17cdf8238c7e9b612998fc59c7314e13fcd00fbb806dafb/flatten_dict-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f45439a3a9c813d0f744c468d74aac4", "sha256": "0ccc43f15c7c84c5ef387ad19254f6769a32d170313a1bcbf4ce582089313d7e"}, "downloads": -1, "filename": "flatten-dict-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7f45439a3a9c813d0f744c468d74aac4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8891, "upload_time": "2020-04-19T10:05:25", "upload_time_iso_8601": "2020-04-19T10:05:25.221584Z", "url": "https://files.pythonhosted.org/packages/7b/1c/52ee230b2008fd552e1b130d2696e98559ce9e2087fb49394bf71d23df3b/flatten-dict-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3279f98216db13c60d0f5f64d284c73d", "sha256": "96038f9a0a09dca205112ae890e1f2159cfdf2af173397b2aa93d1bb9d055890"}, "downloads": -1, "filename": "flatten_dict-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3279f98216db13c60d0f5f64d284c73d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8201, "upload_time": "2020-04-19T10:05:23", "upload_time_iso_8601": "2020-04-19T10:05:23.435192Z", "url": "https://files.pythonhosted.org/packages/9f/30/02e342a45b85c17cdf8238c7e9b612998fc59c7314e13fcd00fbb806dafb/flatten_dict-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f45439a3a9c813d0f744c468d74aac4", "sha256": "0ccc43f15c7c84c5ef387ad19254f6769a32d170313a1bcbf4ce582089313d7e"}, "downloads": -1, "filename": "flatten-dict-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7f45439a3a9c813d0f744c468d74aac4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8891, "upload_time": "2020-04-19T10:05:25", "upload_time_iso_8601": "2020-04-19T10:05:25.221584Z", "url": "https://files.pythonhosted.org/packages/7b/1c/52ee230b2008fd552e1b130d2696e98559ce9e2087fb49394bf71d23df3b/flatten-dict-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:03 2020"}