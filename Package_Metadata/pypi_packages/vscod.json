{"info": {"author": "Divo Kaplan", "author_email": "divokaplan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: System :: Archiving :: Mirroring", "Topic :: Text Editors", "Topic :: Utilities"], "description": "# VSCOD\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/vscod.svg)](https://pypi.python.org/pypi/vscod/)\n[![PyPI version fury.io](https://badge.fury.io/py/vscod.svg)](https://pypi.python.org/pypi/vscod/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n**_VSCOD_** is short for **V**isual **S**tudio **C**ode **O**ffline **D**ownloader. This tool will allow you to download batches of extensions as well as VSCode binaries so you can later on use them to install your favorite editor and it's extensions.\nThis tool could help greatly if you're a frustrated admin that needs to update a local artifact repository, if you don't have access to the official repositories from your station and need to pass things by hand or just if you're an automation freak and for some reason want to mess up with the Visual Studio Marketplace.\n\nI tried to find a tool that does that and when I failed I tried to at least find a convenient API to use but to my surprise the Marketplace doesn't have one at the time of writing these lines (and if you find one, feel free to send a PR!), and so I ended up writing **VSCOD**!\n\n## Installation\n\nUse the Python package manager [pip](https://pip.pypa.io/en/stable/) to install `vscod`.\n\n```bash\npip install vscod\n```\n\n## Usage\n\n### Shell\n\n```bash\n# Display the help\nvscod --help\n# Download the insider binaries for Linux (64bit deb), Windows (32bit) and Mac to the 'downloads' dir.\nvscod download editor --output 'downloads' --build insider linux-deb-x64 win32-archive darwin\n# Download the official Python extension and the Vim keymap to the 'extensions' dir.\nvscod download extensions --output 'extensions' ms-python.python vscodevim.vim\n# Download the requested config data (see below) to the current directory (the default path if none is specified btw).\nvscod download config --output '.' /path/to/config.json\n# List all the supported platform and build strings.\nvscod list-opts\n```\n\n### Python\n\n```python\nfrom vscod import extensions_downloader, vscode_downloader\nfrom vscod.vscode_downloader import BUILDS, PLATFORMS, LATEST_VERSION\nimport asyncio\nimport aiohttp\n\nasync def vscod_demo():\n    async with aiohttp.ClientSession() as session:  # It's all asynchronous!\n        # Download the latest version of the official Python extension to the path.\n        await extensions_downloader.download_extension_by_id(session, 'ms-python.python', 'latest', '/path/to/save')\n        # Find what the latest version of the Vim keymap is.\n        vim_version = await extensions_downloader.get_extension_version(session, 'vscodevim.vim')\n        # Download the latest stable Linux deb version to the path.\n        await vscode_downloader.download_vscode(session, PLATFORMS.LINUX64_DEB, '/path/to/save', build=BUILDS.STABLE, version=LATEST_VERSION)\n\nasyncio.run(vscod_demo())\n```\n\n### Config\n\nYou can also supply a JSON configuration that looks something like this:\n\n```json\n{\n    \"vscode\": [\n        {\n            \"platform\": \"linux-deb-x64\"\n        },\n        {\n            \"platform\": \"win32-x64-user\",\n            \"version\": \"latest\",\n            \"build\": \"stable\"\n        }\n    ],\n    \"extensions\": {\n        \"gitlens\": \"eamodio.gitlens\",\n        \"languages\": {\n            \"go\": \"ms-vscode.go\",\n            \"python\": {\n                \"python\": \"ms-python.python\",\n                \"auto_docstring\": \"njpwerner.autodocstring\"\n            }\n        }\n    }\n}\n```\n\nThe top level `\"vscode\"` and `\"extensions\"` signals that these are the editor and extensions download settings respectively (duh).\nThe parsing process then goes as follows:\n\n* For extensions:\n    1. Go through the loaded dictionary's items recursively:\n        * If the value is a string, we got to the extension ID.\n        * If the value is a dict, delve deeper.\n    1. Build a directory hierarchy using the keys as directories.\n    1. Download each extension ID to it's designated location.\n* For VSCode binaries:\n    1. Go through the loaded list of specification dicts. If the value of the top level `\"vscode\"` key is a dict, treat it like a list with a single dict.\n    1. For each of them download the binary according to the specification given in the dict into a designated directory.\n\nSo it will generate the following hierarchy:\n\n```text\n|-- root_path\n    |-- gitlens\n    |   |-- eamodio.gitlens-9.9.3.vsix\n    |-- languages\n    |   |-- go\n    |   |   |-- ms-vscode.go-0.11.4.vsix\n    |   |-- python\n    |       |-- auto_docstring\n    |       |   |-- njpwerner.autodocstring-0.3.0.vsix\n    |       |-- python\n    |           |-- ms-python.python-2019.8.30787.vsix\n    |-- linux-deb-x64\n    |   |-- code_1.37.1-1565886362_amd64.deb\n    |-- win32-x64-user\n        |-- VSCodeUserSetup-x64-1.37.1.exe\n```\n\n## License\n\n[MIT](LICENSE.txt)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DivoK/vscod", "keywords": "vscode offline cli downloader tool", "license": "", "maintainer": "", "maintainer_email": "", "name": "vscod", "package_url": "https://pypi.org/project/vscod/", "platform": "", "project_url": "https://pypi.org/project/vscod/", "project_urls": {"Homepage": "https://github.com/DivoK/vscod"}, "release_url": "https://pypi.org/project/vscod/0.1.0/", "requires_dist": ["loguru", "aiohttp", "aiofiles", "cchardet", "aiodns", "click"], "requires_python": ">=3.7", "summary": "Download VSCode binaries and extensions offline.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>VSCOD</h1>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/vscod/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65c218303a6aafcf8ff43e629b13605bf17be1af/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7673636f642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/vscod/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9553207682dae26a006568c2b80ed651a38c0b0a/68747470733a2f2f62616467652e667572792e696f2f70792f7673636f642e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p><strong><em>VSCOD</em></strong> is short for <strong>V</strong>isual <strong>S</strong>tudio <strong>C</strong>ode <strong>O</strong>ffline <strong>D</strong>ownloader. This tool will allow you to download batches of extensions as well as VSCode binaries so you can later on use them to install your favorite editor and it's extensions.\nThis tool could help greatly if you're a frustrated admin that needs to update a local artifact repository, if you don't have access to the official repositories from your station and need to pass things by hand or just if you're an automation freak and for some reason want to mess up with the Visual Studio Marketplace.</p>\n<p>I tried to find a tool that does that and when I failed I tried to at least find a convenient API to use but to my surprise the Marketplace doesn't have one at the time of writing these lines (and if you find one, feel free to send a PR!), and so I ended up writing <strong>VSCOD</strong>!</p>\n<h2>Installation</h2>\n<p>Use the Python package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install <code>vscod</code>.</p>\n<pre>pip install vscod\n</pre>\n<h2>Usage</h2>\n<h3>Shell</h3>\n<pre><span class=\"c1\"># Display the help</span>\nvscod --help\n<span class=\"c1\"># Download the insider binaries for Linux (64bit deb), Windows (32bit) and Mac to the 'downloads' dir.</span>\nvscod download editor --output <span class=\"s1\">'downloads'</span> --build insider linux-deb-x64 win32-archive darwin\n<span class=\"c1\"># Download the official Python extension and the Vim keymap to the 'extensions' dir.</span>\nvscod download extensions --output <span class=\"s1\">'extensions'</span> ms-python.python vscodevim.vim\n<span class=\"c1\"># Download the requested config data (see below) to the current directory (the default path if none is specified btw).</span>\nvscod download config --output <span class=\"s1\">'.'</span> /path/to/config.json\n<span class=\"c1\"># List all the supported platform and build strings.</span>\nvscod list-opts\n</pre>\n<h3>Python</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vscod</span> <span class=\"kn\">import</span> <span class=\"n\">extensions_downloader</span><span class=\"p\">,</span> <span class=\"n\">vscode_downloader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vscod.vscode_downloader</span> <span class=\"kn\">import</span> <span class=\"n\">BUILDS</span><span class=\"p\">,</span> <span class=\"n\">PLATFORMS</span><span class=\"p\">,</span> <span class=\"n\">LATEST_VERSION</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">vscod_demo</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>  <span class=\"c1\"># It's all asynchronous!</span>\n        <span class=\"c1\"># Download the latest version of the official Python extension to the path.</span>\n        <span class=\"k\">await</span> <span class=\"n\">extensions_downloader</span><span class=\"o\">.</span><span class=\"n\">download_extension_by_id</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"s1\">'ms-python.python'</span><span class=\"p\">,</span> <span class=\"s1\">'latest'</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/save'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Find what the latest version of the Vim keymap is.</span>\n        <span class=\"n\">vim_version</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">extensions_downloader</span><span class=\"o\">.</span><span class=\"n\">get_extension_version</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"s1\">'vscodevim.vim'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Download the latest stable Linux deb version to the path.</span>\n        <span class=\"k\">await</span> <span class=\"n\">vscode_downloader</span><span class=\"o\">.</span><span class=\"n\">download_vscode</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">PLATFORMS</span><span class=\"o\">.</span><span class=\"n\">LINUX64_DEB</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/save'</span><span class=\"p\">,</span> <span class=\"n\">build</span><span class=\"o\">=</span><span class=\"n\">BUILDS</span><span class=\"o\">.</span><span class=\"n\">STABLE</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">LATEST_VERSION</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">vscod_demo</span><span class=\"p\">())</span>\n</pre>\n<h3>Config</h3>\n<p>You can also supply a JSON configuration that looks something like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"vscode\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"platform\"</span><span class=\"p\">:</span> <span class=\"s2\">\"linux-deb-x64\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"platform\"</span><span class=\"p\">:</span> <span class=\"s2\">\"win32-x64-user\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"latest\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"build\"</span><span class=\"p\">:</span> <span class=\"s2\">\"stable\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"extensions\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"gitlens\"</span><span class=\"p\">:</span> <span class=\"s2\">\"eamodio.gitlens\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"languages\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"go\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ms-vscode.go\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"python\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"python\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ms-python.python\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"auto_docstring\"</span><span class=\"p\">:</span> <span class=\"s2\">\"njpwerner.autodocstring\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The top level <code>\"vscode\"</code> and <code>\"extensions\"</code> signals that these are the editor and extensions download settings respectively (duh).\nThe parsing process then goes as follows:</p>\n<ul>\n<li>For extensions:\n<ol>\n<li>Go through the loaded dictionary's items recursively:\n<ul>\n<li>If the value is a string, we got to the extension ID.</li>\n<li>If the value is a dict, delve deeper.</li>\n</ul>\n</li>\n<li>Build a directory hierarchy using the keys as directories.</li>\n<li>Download each extension ID to it's designated location.</li>\n</ol>\n</li>\n<li>For VSCode binaries:\n<ol>\n<li>Go through the loaded list of specification dicts. If the value of the top level <code>\"vscode\"</code> key is a dict, treat it like a list with a single dict.</li>\n<li>For each of them download the binary according to the specification given in the dict into a designated directory.</li>\n</ol>\n</li>\n</ul>\n<p>So it will generate the following hierarchy:</p>\n<pre>|-- root_path\n    |-- gitlens\n    |   |-- eamodio.gitlens-9.9.3.vsix\n    |-- languages\n    |   |-- go\n    |   |   |-- ms-vscode.go-0.11.4.vsix\n    |   |-- python\n    |       |-- auto_docstring\n    |       |   |-- njpwerner.autodocstring-0.3.0.vsix\n    |       |-- python\n    |           |-- ms-python.python-2019.8.30787.vsix\n    |-- linux-deb-x64\n    |   |-- code_1.37.1-1565886362_amd64.deb\n    |-- win32-x64-user\n        |-- VSCodeUserSetup-x64-1.37.1.exe\n</pre>\n<h2>License</h2>\n<p><a href=\"LICENSE.txt\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 5712435, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "58361fd06512a380c3ac2d7722d7db38", "sha256": "f7915aa7b211c28400ab9c9bcb9181671a1c076e187353a13f109e5ed78fb041"}, "downloads": -1, "filename": "vscod-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "58361fd06512a380c3ac2d7722d7db38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12263, "upload_time": "2019-08-22T00:11:34", "upload_time_iso_8601": "2019-08-22T00:11:34.606239Z", "url": "https://files.pythonhosted.org/packages/66/6c/9775f2b2201a69bc2990a2957ef2bede912f2a4b222628d7fc69c9189849/vscod-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83c7503df1626f567104dd608715ab22", "sha256": "bc9818caa2a399e3eb3fb14ca3be18d3d3aedbcf19082c3a1e4c8329a1fd9bb0"}, "downloads": -1, "filename": "vscod-0.1.0.tar.gz", "has_sig": false, "md5_digest": "83c7503df1626f567104dd608715ab22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11594, "upload_time": "2019-08-22T00:11:36", "upload_time_iso_8601": "2019-08-22T00:11:36.423832Z", "url": "https://files.pythonhosted.org/packages/ce/82/6155a12882c352d98b3cec25d256feebb311e2ff3d8e76719abc26e492b0/vscod-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58361fd06512a380c3ac2d7722d7db38", "sha256": "f7915aa7b211c28400ab9c9bcb9181671a1c076e187353a13f109e5ed78fb041"}, "downloads": -1, "filename": "vscod-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "58361fd06512a380c3ac2d7722d7db38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12263, "upload_time": "2019-08-22T00:11:34", "upload_time_iso_8601": "2019-08-22T00:11:34.606239Z", "url": "https://files.pythonhosted.org/packages/66/6c/9775f2b2201a69bc2990a2957ef2bede912f2a4b222628d7fc69c9189849/vscod-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83c7503df1626f567104dd608715ab22", "sha256": "bc9818caa2a399e3eb3fb14ca3be18d3d3aedbcf19082c3a1e4c8329a1fd9bb0"}, "downloads": -1, "filename": "vscod-0.1.0.tar.gz", "has_sig": false, "md5_digest": "83c7503df1626f567104dd608715ab22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11594, "upload_time": "2019-08-22T00:11:36", "upload_time_iso_8601": "2019-08-22T00:11:36.423832Z", "url": "https://files.pythonhosted.org/packages/ce/82/6155a12882c352d98b3cec25d256feebb311e2ff3d8e76719abc26e492b0/vscod-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:59 2020"}