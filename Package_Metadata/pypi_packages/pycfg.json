{"info": {"author": "Rahul Gopinath", "author_email": "rahul@gopinath.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Compilers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\nThis package generates a control flow graph of the passed python file based on the AST generated (rather than the bytecode). It supports only a few python statements at this point. Notably absent are exceptions and generators. Essentially, only those constructs found in example.py are supported.\n\n        Compatibility\n        -------------\n        It was tested on Python 3.6\n        \n        \n        To run\n        ------\n        \n          python pycfg/pycfg.py <program to be analyzed> -d\n          or\n          python pycfg/pycfg.py <program to be analyzed> -d -y <branch coverage file>\n\n          Inspect Makefile for a better idea\n       ", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/vrthra/pycfg", "keywords": "control-flow-graph abstract-syntax-tree", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pycfg", "package_url": "https://pypi.org/project/pycfg/", "platform": "", "project_url": "https://pypi.org/project/pycfg/", "project_urls": {"Homepage": "http://github.com/vrthra/pycfg"}, "release_url": "https://pypi.org/project/pycfg/0.1/", "requires_dist": null, "requires_python": "", "summary": "The python3 ast based control flow graph", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>This package generates a control flow graph of the passed python file based on the AST generated (rather than the bytecode). It supports only a few python statements at this point. Notably absent are exceptions and generators. Essentially, only those constructs found in example.py are supported.<br><br>        Compatibility<br>        -------------<br>        It was tested on Python 3.6<br>        <br>        <br>        To run<br>        ------<br>        <br>          python pycfg/pycfg.py &lt;program to be analyzed&gt; -d<br>          or<br>          python pycfg/pycfg.py &lt;program to be analyzed&gt; -d -y &lt;branch coverage file&gt;<br><br>          Inspect Makefile for a better idea<br>       \n          </div>"}, "last_serial": 3420261, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "beac33cdc3cac51e08a0fa56a50930f2", "sha256": "26833dd006dea03040088d7f0da6a3a80350cf4c788c14d50d15d06d2026480f"}, "downloads": -1, "filename": "pycfg-0.1.tar.gz", "has_sig": false, "md5_digest": "beac33cdc3cac51e08a0fa56a50930f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6640, "upload_time": "2017-12-15T16:12:40", "upload_time_iso_8601": "2017-12-15T16:12:40.830227Z", "url": "https://files.pythonhosted.org/packages/1b/56/e837ca7330163dd5834c0223adf8057513105081b0f7966bed305edac114/pycfg-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "beac33cdc3cac51e08a0fa56a50930f2", "sha256": "26833dd006dea03040088d7f0da6a3a80350cf4c788c14d50d15d06d2026480f"}, "downloads": -1, "filename": "pycfg-0.1.tar.gz", "has_sig": false, "md5_digest": "beac33cdc3cac51e08a0fa56a50930f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6640, "upload_time": "2017-12-15T16:12:40", "upload_time_iso_8601": "2017-12-15T16:12:40.830227Z", "url": "https://files.pythonhosted.org/packages/1b/56/e837ca7330163dd5834c0223adf8057513105081b0f7966bed305edac114/pycfg-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:37 2020"}