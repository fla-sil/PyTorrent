{"info": {"author": "Jonas Grimfelt", "author_email": "grimen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "\n# `totalrecall` [![PyPI version](https://badge.fury.io/py/totalrecall.svg)](https://badge.fury.io/py/totalrecall) [![Build Status](https://travis-ci.com/grimen/python-totalrecall.svg?branch=master)](https://travis-ci.com/grimen/python-totalrecall) [![Coverage Status](https://codecov.io/gh/grimen/python-totalrecall/branch/master/graph/badge.svg)](https://codecov.io/gh/grimen/python-totalrecall)\n\n*A runtime step profiler - for Python.*\n\n## Introduction\n\nAggregating runtime statistics and/or finding bottlenecks in code is one of the most common challenges as a software engineer. This is a library to aid that. In comparison to most existing libraries this one is focused on **step profiling**; aggregation of runtime information in steps marked by keys/tags/labels and optional meta data, which is used to create a summary of all steps in form of a transaction. As a bonus it also supports decorating code **contexts** and **functions**.\n\nThis is an **MVP** that most likely will be extended with more profiling features.\n\n\n## Install\n\nInstall using **pip**:\n\n```sh\n$ pip install totalrecall\n```\n\n\n## Use\n\nVery basic **[example](https://github.com/grimen/python-totalrecall/tree/master/examples/basic.py)**:\n\n```python\nimport totalrecall\n\nfrom time import sleep\n\n# ---------------------------------------------------\n#   EXAMPLE: runtime step profiler\n# ------------------------------------------------\n\nprofiler = totalrecall.timer('profile something - using timer', begin = False)\n\nprofiler.begin('task 1')\n\nsleep(0.1)\n\nprofiler.begin('task 2')\n\nsleep(0.2)\n\nprofiler.begin('task 3')\n\nsleep(0.3)\n\nprofiler.end()\n\nprint('[profiler.time / basic]: TIME: {0}'.format(profiler.time))\nprint('[profiler.time / basic]: STEPS: {0}'.format(profiler.steps))\n\n# ---------------------------------------------------\n#   EXAMPLE: runtime step profiler (detailed)\n# ------------------------------------------------\n\nprofiler = totalrecall.timer('profile something - using timer',\n    begin = False,\n    enabled = True,\n    verbose = True,\n    colors = True,\n)\n\nprofiler.begin('task 1')\n\nsleep(0.1)\n\nprofiler.begin('task 2')\n\nsleep(0.2)\n\nprofiler.begin('task 3')\n\nsleep(0.3)\n\nprofiler.end()\n\nprint('[profiler.time / detailed]: TIME: {0}'.format(profiler.time))\nprint('[profiler.time / detailed]: STEPS: {0}'.format(profiler.steps))\n\n\n# ---------------------------------------------------\n#   EXAMPLE: runtime context profiler\n# ------------------------------------------------\n\nprofiler = totalrecall.context('profile something 2 - using context')\n\nwith profiler:\n    sleep(1)\n\nprint('[profiler.context / basic]: TIME: {0}'.format(profiler.time))\nprint('[profiler.context / basic]: STEPS: {0}'.format(profiler.steps))\n\n\n# ---------------------------------------------------\n#   EXAMPLE: runtime function profiler\n# ------------------------------------------------\n\nprofiler = totalrecall.function('profile something 2 - using context')\n\n@profiler\ndef foo():\n    sleep(1)\n\nprint('[profiler.function / basic]: TIME: {0}'.format(profiler.time))\nprint('[profiler.function / basic]: STEPS: {0}'.format(profiler.steps))\n\n```\n\n\n## Test\n\nClone down source code:\n\n```sh\n$ make install\n```\n\nRun **colorful tests**, with only native environment (dependency sandboxing up to you):\n\n```sh\n$ make test\n```\n\nRun **less colorful tests**, with **multi-environment** (using **tox**):\n\n```sh\n$ make test-tox\n```\n\n\n## About\n\nThis project was mainly initiated - in lack of solid existing alternatives - to be used at our work at **[Markable.ai](https://markable.ai)** to have common code conventions between various programming environments where **Python** (research, CV, AI) is heavily used.\n\n\n## Credits\n\nThanks to **[op-bk](https://github.com/op-bk)** for creative help with naming this library.\n\n\n## License\n\nReleased under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/grimen/python-totalrecall", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grimen/python-totalrecall", "keywords": "profiler,step-profiler,step-runtime-profiler,runtime-profiler,runtime,step,timer,context,function,mixin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "totalrecall", "package_url": "https://pypi.org/project/totalrecall/", "platform": "", "project_url": "https://pypi.org/project/totalrecall/", "project_urls": {"Download": "https://github.com/grimen/python-totalrecall", "Homepage": "https://github.com/grimen/python-totalrecall", "bugs": "https://github.com/grimen/python-totalrecall/issues", "repository": "https://github.com/grimen/python-totalrecall"}, "release_url": "https://pypi.org/project/totalrecall/0.1.1/", "requires_dist": ["six (>=1.11.0)", "rootpath (>=0.1.0)", "mybad (>=0.1.0)", "mybase (>=0.1.0)", "inspecta (>=0.1.0)", "attributedict (>=0.2.0)", "uuid (>=1.3)", "colour-runner (>=0.0.5)", "deepdiff (>=3.3.0)", "tox (>=3.0.0)", "coverage (>=4.5.2)", "codecov (>=2.0.15)"], "requires_python": "", "summary": "A runtime step profiler - for Python.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>totalrecall</code> <a href=\"https://badge.fury.io/py/totalrecall\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6302dcd8df4b52ccedc07d9f5d0f8d55d4d57c2c/68747470733a2f2f62616467652e667572792e696f2f70792f746f74616c726563616c6c2e737667\"></a> <a href=\"https://travis-ci.com/grimen/python-totalrecall\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd4612dcf8ef23f3d7031b02ddacb9e6cc28eefd/68747470733a2f2f7472617669732d63692e636f6d2f6772696d656e2f707974686f6e2d746f74616c726563616c6c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/grimen/python-totalrecall\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fbcbf4cb7f4897a05e086ef57210cdf894d828f/68747470733a2f2f636f6465636f762e696f2f67682f6772696d656e2f707974686f6e2d746f74616c726563616c6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></h1>\n<p><em>A runtime step profiler - for Python.</em></p>\n<h2>Introduction</h2>\n<p>Aggregating runtime statistics and/or finding bottlenecks in code is one of the most common challenges as a software engineer. This is a library to aid that. In comparison to most existing libraries this one is focused on <strong>step profiling</strong>; aggregation of runtime information in steps marked by keys/tags/labels and optional meta data, which is used to create a summary of all steps in form of a transaction. As a bonus it also supports decorating code <strong>contexts</strong> and <strong>functions</strong>.</p>\n<p>This is an <strong>MVP</strong> that most likely will be extended with more profiling features.</p>\n<h2>Install</h2>\n<p>Install using <strong>pip</strong>:</p>\n<pre>$ pip install totalrecall\n</pre>\n<h2>Use</h2>\n<p>Very basic <strong><a href=\"https://github.com/grimen/python-totalrecall/tree/master/examples/basic.py\" rel=\"nofollow\">example</a></strong>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">totalrecall</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"c1\"># ---------------------------------------------------</span>\n<span class=\"c1\">#   EXAMPLE: runtime step profiler</span>\n<span class=\"c1\"># ------------------------------------------------</span>\n\n<span class=\"n\">profiler</span> <span class=\"o\">=</span> <span class=\"n\">totalrecall</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"s1\">'profile something - using timer'</span><span class=\"p\">,</span> <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.time / basic]: TIME: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.time / basic]: STEPS: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># ---------------------------------------------------</span>\n<span class=\"c1\">#   EXAMPLE: runtime step profiler (detailed)</span>\n<span class=\"c1\"># ------------------------------------------------</span>\n\n<span class=\"n\">profiler</span> <span class=\"o\">=</span> <span class=\"n\">totalrecall</span><span class=\"o\">.</span><span class=\"n\">timer</span><span class=\"p\">(</span><span class=\"s1\">'profile something - using timer'</span><span class=\"p\">,</span>\n    <span class=\"n\">begin</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"s1\">'task 3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n\n<span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.time / detailed]: TIME: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.time / detailed]: STEPS: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># ---------------------------------------------------</span>\n<span class=\"c1\">#   EXAMPLE: runtime context profiler</span>\n<span class=\"c1\"># ------------------------------------------------</span>\n\n<span class=\"n\">profiler</span> <span class=\"o\">=</span> <span class=\"n\">totalrecall</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s1\">'profile something 2 - using context'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">profiler</span><span class=\"p\">:</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.context / basic]: TIME: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.context / basic]: STEPS: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># ---------------------------------------------------</span>\n<span class=\"c1\">#   EXAMPLE: runtime function profiler</span>\n<span class=\"c1\"># ------------------------------------------------</span>\n\n<span class=\"n\">profiler</span> <span class=\"o\">=</span> <span class=\"n\">totalrecall</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"s1\">'profile something 2 - using context'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@profiler</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.function / basic]: TIME: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[profiler.function / basic]: STEPS: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"o\">.</span><span class=\"n\">steps</span><span class=\"p\">))</span>\n</pre>\n<h2>Test</h2>\n<p>Clone down source code:</p>\n<pre>$ make install\n</pre>\n<p>Run <strong>colorful tests</strong>, with only native environment (dependency sandboxing up to you):</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>Run <strong>less colorful tests</strong>, with <strong>multi-environment</strong> (using <strong>tox</strong>):</p>\n<pre>$ make test-tox\n</pre>\n<h2>About</h2>\n<p>This project was mainly initiated - in lack of solid existing alternatives - to be used at our work at <strong><a href=\"https://markable.ai\" rel=\"nofollow\">Markable.ai</a></strong> to have common code conventions between various programming environments where <strong>Python</strong> (research, CV, AI) is heavily used.</p>\n<h2>Credits</h2>\n<p>Thanks to <strong><a href=\"https://github.com/op-bk\" rel=\"nofollow\">op-bk</a></strong> for creative help with naming this library.</p>\n<h2>License</h2>\n<p>Released under the MIT license.</p>\n\n          </div>"}, "last_serial": 4921075, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f98dba28cd83dffadf9acd2648aaef34", "sha256": "7985ff4f2a0f8670c4f12f993ee9046efde1b5638800573c0a6fba91152909e6"}, "downloads": -1, "filename": "totalrecall-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f98dba28cd83dffadf9acd2648aaef34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9020, "upload_time": "2019-01-28T11:32:20", "upload_time_iso_8601": "2019-01-28T11:32:20.100743Z", "url": "https://files.pythonhosted.org/packages/cf/f3/874632c48457fde5f1d287c826879a7f8d97c12435641ecf320e9c016def/totalrecall-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "355544b442a9f37d63f1f0f045ea4ddb", "sha256": "05e24110cc957db5fbd5b0099bd20f46028aba7d8816264acb83e1cc4281d297"}, "downloads": -1, "filename": "totalrecall-0.1.0.tar.gz", "has_sig": false, "md5_digest": "355544b442a9f37d63f1f0f045ea4ddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12858, "upload_time": "2019-01-28T11:32:21", "upload_time_iso_8601": "2019-01-28T11:32:21.978901Z", "url": "https://files.pythonhosted.org/packages/38/d1/a99e418be17c4af405ec63984773dc64a20903f330a00a644654fec4193a/totalrecall-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c03ad4b537133b0c6b23cb510b87f5fe", "sha256": "b9022c42a6cc3694633694d214a0a19f84883c5f9e9496f7c01c96cd45dd6544"}, "downloads": -1, "filename": "totalrecall-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c03ad4b537133b0c6b23cb510b87f5fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9085, "upload_time": "2019-03-10T11:24:46", "upload_time_iso_8601": "2019-03-10T11:24:46.673082Z", "url": "https://files.pythonhosted.org/packages/6c/4e/d46a32373c60abce757882e86ac6bf6b74b0b452ded6ca251dc73e3c9bbb/totalrecall-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c249230adb8ae77cf98d1f79b97c486c", "sha256": "fe83724bf56474973d8d8623d24125be0669e64c996e8deb2b8faaa3838924b7"}, "downloads": -1, "filename": "totalrecall-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c249230adb8ae77cf98d1f79b97c486c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13211, "upload_time": "2019-03-10T11:24:48", "upload_time_iso_8601": "2019-03-10T11:24:48.142071Z", "url": "https://files.pythonhosted.org/packages/e6/1b/cdb0f397920a54d2e50a7cf0ca761b08a40bf0034484809ab17c5255082a/totalrecall-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c03ad4b537133b0c6b23cb510b87f5fe", "sha256": "b9022c42a6cc3694633694d214a0a19f84883c5f9e9496f7c01c96cd45dd6544"}, "downloads": -1, "filename": "totalrecall-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c03ad4b537133b0c6b23cb510b87f5fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9085, "upload_time": "2019-03-10T11:24:46", "upload_time_iso_8601": "2019-03-10T11:24:46.673082Z", "url": "https://files.pythonhosted.org/packages/6c/4e/d46a32373c60abce757882e86ac6bf6b74b0b452ded6ca251dc73e3c9bbb/totalrecall-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c249230adb8ae77cf98d1f79b97c486c", "sha256": "fe83724bf56474973d8d8623d24125be0669e64c996e8deb2b8faaa3838924b7"}, "downloads": -1, "filename": "totalrecall-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c249230adb8ae77cf98d1f79b97c486c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13211, "upload_time": "2019-03-10T11:24:48", "upload_time_iso_8601": "2019-03-10T11:24:48.142071Z", "url": "https://files.pythonhosted.org/packages/e6/1b/cdb0f397920a54d2e50a7cf0ca761b08a40bf0034484809ab17c5255082a/totalrecall-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:33 2020"}