{"info": {"author": "Brendon McBain", "author_email": "brendon.mcbain9@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Polar Codes in Python\n\nA library written in Python3 for Polar Codes, a capacity-achieving channel coding technique used in 5G. The library includes functions for construction, encoding, decoding, and simulation of polar codes. In addition, it supports puncturing and shortening.\n\nIt provides:\n - non-systemic encoder and Successive Cancellation Decoder (SCD) for polar codes.\n - mothercode construction of polar codes using Bhattacharyya Bounds or Gaussian Approximation\n - support for puncturing and shortening.\n - Bit-Reversal Shortening (BRS), Wang-Liu Shortening (WLS), and Bioglio-Gabry-Land (BGL) shortening constructions.\n - an AWGN channel with BPSK modulation.\n \nDocumentation:\n - [Main reference (pdf)](https://github.com/mcba1n/polar-codes/blob/master/Main_Reference.pdf)\n - [Quick reference (website)](https://mcba1n.github.io/polar-codes-docs/)\n \n A YouTube video with an introduction to polar codes, shortening, and the library:\n [![IMAGE ALT TEXT](http://img.youtube.com/vi/v47rn77RAxM/0.jpg)](http://www.youtube.com/watch?v=v47rn77RAxM \"A Library for Polar Codes in Python\")\n \n## Getting Started\n\n1. Install the package with\n    `pip install py-polar-codes` (https://pypi.org/project/py-polar-codes/1.1.0/).\n2. Install matplotlib from https://matplotlib.org/users/installing.html.\n3. Install numpy from https://docs.scipy.org/doc/numpy/user/install.html.\n4. Run test.py using a Python3 compiler. If the program runs successfully, the library is ready to use. Make sure the compiler has writing access to directory \"root/data\", where simulation data will be saved by default.\n5. Run main.py to start the GUI.\n\n## Examples\n### Mothercode Encoding & Decoding\nAn example of encoding and decoding over an AWGN channel for a (256,100) mothercode, using Bhattacharyya Bounds and SCD.\n\n```python\n   import numpy as np\n   from polarcodes import *\n\n    # initialise polar code\n    myPC = PolarCode(256, 100)\n    myPC.construction_type = 'bb'\n    \n    # mothercode construction\n    design_SNR  = 5.0\n    Construct(myPC, design_SNR)\n    print(myPC, \"\\n\\n\")\n    \n    # set message\n    my_message = np.random.randint(2, size=myPC.K)\n    myPC.set_message(my_message)\n    print(\"The message is:\", my_message)\n    \n    # encode message\n    Encode(myPC)\n    print(\"The coded message is:\", myPC.x)\n    \n    # transmit the codeword\n    AWGN(myPC, design_SNR)\n    print(\"The log-likelihoods are:\", myPC.likelihoods)\n    \n    # decode the received codeword\n    Decode(myPC)\n    print(\"The decoded message is:\", myPC.message_received)\n```\n\n### Shortened Code Construction\nAn example of constructing a shortened polar code with Bit-Reversal Shortening (BRS) algorithm.\n\n```python\n   import numpy as np\n   from polarcodes import *\n\n    # initialise shortened polar code\n    shorten_params = ('shorten', 'brs', None, None, False)\n    myPC = PolarCode(200, 100, shorten_params)\n    \n    # construction\n    design_SNR  = 5.0\n    Shorten(myPC, design_SNR)\n    print(myPC, \"\\n\\n\")\n```\n\n### Simulation & Plotting\nA script to simulate a defined polar code, save the data to a *JSON* file in directory \"/data\", and then display the result in a *matplotlib* figure.\n\n```python\n    # simulate polar code \n    myPC.simulate(save_to='data/pc_sim', Eb_No_vec=np.arange(1,5), design_SNR=5.0, manual_const_flag=True)\n    \n    # plot the frame error rate\n    myPC.plot(['pc_sim'], 'data/')\n```\n\nThe simulation will save your Polar Code object in a JSON file, for example:\n```JSON\n{\n    \"N\": 64,\n    \"n\": 6,\n    \"K\": 32,\n    \"frozen\": [\n        22, 38, 49, 26, 42, 3, 28, 50, 5,44,9, 52, 6, 17, 10, 33, 56, 18, 12, 34, 20, 36, 1, 24, 40, 48, 2, 4, 8, 16, 32, 0\n    ],\n    \"construction_type\": \"bb\",\n    \"punct_flag\": false,\n    \"punct_type\": \"\",\n    \"punct_set\": [],\n    \"source_set\": [],\n    \"punct_algorithm\": \"\",\n    \"update_frozen_flag\": [],\n    \"BER\": [\n        0.09709375,\n        0.03740625,\n        0.00815625,\n        0.0010184612211221122\n    ],\n    \"FER\": [\n        0.313,\n        0.126,\n        0.03,\n        0.004125412541254125\n    ],\n    \"SNR\": [\n        1,\n        2,\n        3,\n        4\n    ]\n}\n```\n\n*This is a final year project created by Brendon McBain under the supervision of Dr Harish Vangala at Monash University.*", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mcba1n/polar-codes", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-polar-codes", "package_url": "https://pypi.org/project/py-polar-codes/", "platform": "", "project_url": "https://pypi.org/project/py-polar-codes/", "project_urls": {"Homepage": "https://github.com/mcba1n/polar-codes"}, "release_url": "https://pypi.org/project/py-polar-codes/1.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package for polar codes in Python.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Polar Codes in Python</h1>\n<p>A library written in Python3 for Polar Codes, a capacity-achieving channel coding technique used in 5G. The library includes functions for construction, encoding, decoding, and simulation of polar codes. In addition, it supports puncturing and shortening.</p>\n<p>It provides:</p>\n<ul>\n<li>non-systemic encoder and Successive Cancellation Decoder (SCD) for polar codes.</li>\n<li>mothercode construction of polar codes using Bhattacharyya Bounds or Gaussian Approximation</li>\n<li>support for puncturing and shortening.</li>\n<li>Bit-Reversal Shortening (BRS), Wang-Liu Shortening (WLS), and Bioglio-Gabry-Land (BGL) shortening constructions.</li>\n<li>an AWGN channel with BPSK modulation.</li>\n</ul>\n<p>Documentation:</p>\n<ul>\n<li><a href=\"https://github.com/mcba1n/polar-codes/blob/master/Main_Reference.pdf\" rel=\"nofollow\">Main reference (pdf)</a></li>\n<li><a href=\"https://mcba1n.github.io/polar-codes-docs/\" rel=\"nofollow\">Quick reference (website)</a></li>\n</ul>\n<p>A YouTube video with an introduction to polar codes, shortening, and the library:\n<a href=\"http://www.youtube.com/watch?v=v47rn77RAxM\" rel=\"nofollow\" title=\"A Library for Polar Codes in Python\"><img alt=\"IMAGE ALT TEXT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb9decdd9758be745a8e73640032ffc67b2fbc74/687474703a2f2f696d672e796f75747562652e636f6d2f76692f763437726e37375241784d2f302e6a7067\"></a></p>\n<h2>Getting Started</h2>\n<ol>\n<li>Install the package with\n<code>pip install py-polar-codes</code> (<a href=\"https://pypi.org/project/py-polar-codes/1.1.0/\" rel=\"nofollow\">https://pypi.org/project/py-polar-codes/1.1.0/</a>).</li>\n<li>Install matplotlib from <a href=\"https://matplotlib.org/users/installing.html\" rel=\"nofollow\">https://matplotlib.org/users/installing.html</a>.</li>\n<li>Install numpy from <a href=\"https://docs.scipy.org/doc/numpy/user/install.html\" rel=\"nofollow\">https://docs.scipy.org/doc/numpy/user/install.html</a>.</li>\n<li>Run test.py using a Python3 compiler. If the program runs successfully, the library is ready to use. Make sure the compiler has writing access to directory \"root/data\", where simulation data will be saved by default.</li>\n<li>Run main.py to start the GUI.</li>\n</ol>\n<h2>Examples</h2>\n<h3>Mothercode Encoding &amp; Decoding</h3>\n<p>An example of encoding and decoding over an AWGN channel for a (256,100) mothercode, using Bhattacharyya Bounds and SCD.</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n   <span class=\"kn\">from</span> <span class=\"nn\">polarcodes</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n    <span class=\"c1\"># initialise polar code</span>\n    <span class=\"n\">myPC</span> <span class=\"o\">=</span> <span class=\"n\">PolarCode</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">construction_type</span> <span class=\"o\">=</span> <span class=\"s1\">'bb'</span>\n    \n    <span class=\"c1\"># mothercode construction</span>\n    <span class=\"n\">design_SNR</span>  <span class=\"o\">=</span> <span class=\"mf\">5.0</span>\n    <span class=\"n\">Construct</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">,</span> <span class=\"n\">design_SNR</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># set message</span>\n    <span class=\"n\">my_message</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">K</span><span class=\"p\">)</span>\n    <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">set_message</span><span class=\"p\">(</span><span class=\"n\">my_message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The message is:\"</span><span class=\"p\">,</span> <span class=\"n\">my_message</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># encode message</span>\n    <span class=\"n\">Encode</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The coded message is:\"</span><span class=\"p\">,</span> <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># transmit the codeword</span>\n    <span class=\"n\">AWGN</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">,</span> <span class=\"n\">design_SNR</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The log-likelihoods are:\"</span><span class=\"p\">,</span> <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">likelihoods</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># decode the received codeword</span>\n    <span class=\"n\">Decode</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The decoded message is:\"</span><span class=\"p\">,</span> <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">message_received</span><span class=\"p\">)</span>\n</pre>\n<h3>Shortened Code Construction</h3>\n<p>An example of constructing a shortened polar code with Bit-Reversal Shortening (BRS) algorithm.</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n   <span class=\"kn\">from</span> <span class=\"nn\">polarcodes</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n    <span class=\"c1\"># initialise shortened polar code</span>\n    <span class=\"n\">shorten_params</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'shorten'</span><span class=\"p\">,</span> <span class=\"s1\">'brs'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">myPC</span> <span class=\"o\">=</span> <span class=\"n\">PolarCode</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">shorten_params</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># construction</span>\n    <span class=\"n\">design_SNR</span>  <span class=\"o\">=</span> <span class=\"mf\">5.0</span>\n    <span class=\"n\">Shorten</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">,</span> <span class=\"n\">design_SNR</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">myPC</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Simulation &amp; Plotting</h3>\n<p>A script to simulate a defined polar code, save the data to a <em>JSON</em> file in directory \"/data\", and then display the result in a <em>matplotlib</em> figure.</p>\n<pre>    <span class=\"c1\"># simulate polar code </span>\n    <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">save_to</span><span class=\"o\">=</span><span class=\"s1\">'data/pc_sim'</span><span class=\"p\">,</span> <span class=\"n\">Eb_No_vec</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">design_SNR</span><span class=\"o\">=</span><span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"n\">manual_const_flag</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># plot the frame error rate</span>\n    <span class=\"n\">myPC</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span><span class=\"s1\">'pc_sim'</span><span class=\"p\">],</span> <span class=\"s1\">'data/'</span><span class=\"p\">)</span>\n</pre>\n<p>The simulation will save your Polar Code object in a JSON file, for example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"N\"</span><span class=\"p\">:</span> <span class=\"mi\">64</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"n\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"K\"</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"frozen\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">44</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"construction_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bb\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"punct_flag\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"punct_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"punct_set\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"nt\">\"source_set\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"nt\">\"punct_algorithm\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"update_frozen_flag\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"nt\">\"BER\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mf\">0.09709375</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.03740625</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.00815625</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.0010184612211221122</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"FER\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mf\">0.313</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.126</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.03</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.004125412541254125</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"SNR\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"mi\">4</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>This is a final year project created by Brendon McBain under the supervision of Dr Harish Vangala at Monash University.</em></p>\n\n          </div>"}, "last_serial": 6257538, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "23830ab55650079462295aa3a612b311", "sha256": "5fdf74872f5b6a7db521df7e197d593c0127a1d04341d4a61350c27bfed2cef9"}, "downloads": -1, "filename": "py-polar-codes-1.1.0.tar.gz", "has_sig": false, "md5_digest": "23830ab55650079462295aa3a612b311", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19266, "upload_time": "2019-12-07T05:27:18", "upload_time_iso_8601": "2019-12-07T05:27:18.753628Z", "url": "https://files.pythonhosted.org/packages/8d/37/0dc6e3f921acf969c8a55b651ac56a3837a8e062afdd3e8d6b693addda91/py-polar-codes-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "2390faf8d9f167231f833a790c78b66d", "sha256": "2a0c7b6f2e6e02b6d4f9fdd42d57d1617aa1375d3690d37ee1f54782ca7f4b90"}, "downloads": -1, "filename": "py-polar-codes-1.1.1.tar.gz", "has_sig": false, "md5_digest": "2390faf8d9f167231f833a790c78b66d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19206, "upload_time": "2019-12-07T06:11:05", "upload_time_iso_8601": "2019-12-07T06:11:05.586052Z", "url": "https://files.pythonhosted.org/packages/f1/d7/899fbf9566b54092f26010f8e2009995ad892d38a1cf73f8005ef1d821bc/py-polar-codes-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "197800fd2769b7acaed898bcda7c6aab", "sha256": "ee80749a2e442019f71eface12bbb5e4d4316948feb8ad732da509dc71ab6b95"}, "downloads": -1, "filename": "py-polar-codes-1.1.2.tar.gz", "has_sig": false, "md5_digest": "197800fd2769b7acaed898bcda7c6aab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19079, "upload_time": "2019-12-07T06:39:22", "upload_time_iso_8601": "2019-12-07T06:39:22.228877Z", "url": "https://files.pythonhosted.org/packages/10/fa/a06474e63dd0c3c28cc16b7af53c56793c3598583e957b80da25df1891da/py-polar-codes-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "197800fd2769b7acaed898bcda7c6aab", "sha256": "ee80749a2e442019f71eface12bbb5e4d4316948feb8ad732da509dc71ab6b95"}, "downloads": -1, "filename": "py-polar-codes-1.1.2.tar.gz", "has_sig": false, "md5_digest": "197800fd2769b7acaed898bcda7c6aab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19079, "upload_time": "2019-12-07T06:39:22", "upload_time_iso_8601": "2019-12-07T06:39:22.228877Z", "url": "https://files.pythonhosted.org/packages/10/fa/a06474e63dd0c3c28cc16b7af53c56793c3598583e957b80da25df1891da/py-polar-codes-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:19 2020"}