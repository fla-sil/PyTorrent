{"info": {"author": "Alex Sokolov", "author_email": "volokos.alex@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# SmartEnv - OS Environment Wrapper Library\n\nA flexible, easy-to-use library for managing environment variables in your Python script.\n\n## Why yet another one?\n\nThis library comes with a few major points to use it:\n\n* It is easy and intuitive (see examples)\n* It's compatible with Python 2 (can be useful in old large systems)\n* Continuous support of the library\n\n## Getting started\n\nThis library is pretty easy to use:\n\n```python\nfrom smart_env import ENV\n\nprint(ENV.HOME)  # Equals print(os.environ['HOME'])\n\n# assuming you set env variable MYVAR to \"True\"\n\nENV.enable_automatic_type_cast()\n\nmy_var = ENV.MY_VAR  # Equals boolean True\n\nENV.NEW_VAR = 100  # Sets a new environment variable\n```\n\n## How to use\n\nIn a few words, the logic is next:\n1. You can store a lot of serialized values in Environment variables and then deserialize them on fly using ENV class.\n2. Each environment variable can be accessed as an attribute of ENV class:\n    ```python\n    ENV.<variable_name>\n    ```\n3. The internal decoding mechanism is based on **json** and **ast** packages. That means, \nyou can parse even some JSON-incompatible values (for example, with single quotes used for defining strings).\n\n### Installing\n\nSimply run\n\n```\npip install smart-env\n```\n\n## Running the tests\n\nThis library contains tests written using *unittest* module, so just run in the project directory\n\n```\npython -m unittest\n```\n\nAlso it's possible to run tests using Tox:\n\n```bash\ntox -e <env>\n```\n\nTests coverage is one of the important goals of this project.\nFor now coverage is next:\n- For Python 2.7: 98%\n- For Python 3.x: 97%\n\nSupported environments:\n\n- py27\n- py35\n- py36\n- py37\n- py38\n- coverage (using Python 3)\n- coverage (using Python 2.7)\n- pep8 (style checking)\n\n## Restrictions\n\n1. Old versions of Python in both generations (e.g. 2.6, 3.4, etc) will never be supported. \nHowever, you always can implement such support in your forks.\n\n2. Parsing set() objects is not working in Python 2. See [this](https://bugs.python.org/issue10091) for details.\n\n\n## Authors\n\n* **Alex Sokolov** - *Author* - [Albartash](https://github.com/AlBartash)\n\n## Contacts\n\n* Telegram channel with updates: [@bart_tools](http://t.me/bart_tools)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bart-tools/smart-env", "keywords": "env environ smartenv", "license": "", "maintainer": "", "maintainer_email": "", "name": "smart-env", "package_url": "https://pypi.org/project/smart-env/", "platform": "", "project_url": "https://pypi.org/project/smart-env/", "project_urls": {"Homepage": "https://github.com/bart-tools/smart-env", "Project": "https://github.com/bart-tools", "Source": "https://github.com/bart-tools/smart-env/"}, "release_url": "https://pypi.org/project/smart-env/1.0.2/", "requires_dist": ["six (>=1.14.0)"], "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "summary": "Smart Environment Wrapper Library", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SmartEnv - OS Environment Wrapper Library</h1>\n<p>A flexible, easy-to-use library for managing environment variables in your Python script.</p>\n<h2>Why yet another one?</h2>\n<p>This library comes with a few major points to use it:</p>\n<ul>\n<li>It is easy and intuitive (see examples)</li>\n<li>It's compatible with Python 2 (can be useful in old large systems)</li>\n<li>Continuous support of the library</li>\n</ul>\n<h2>Getting started</h2>\n<p>This library is pretty easy to use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smart_env</span> <span class=\"kn\">import</span> <span class=\"n\">ENV</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ENV</span><span class=\"o\">.</span><span class=\"n\">HOME</span><span class=\"p\">)</span>  <span class=\"c1\"># Equals print(os.environ['HOME'])</span>\n\n<span class=\"c1\"># assuming you set env variable MYVAR to \"True\"</span>\n\n<span class=\"n\">ENV</span><span class=\"o\">.</span><span class=\"n\">enable_automatic_type_cast</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_var</span> <span class=\"o\">=</span> <span class=\"n\">ENV</span><span class=\"o\">.</span><span class=\"n\">MY_VAR</span>  <span class=\"c1\"># Equals boolean True</span>\n\n<span class=\"n\">ENV</span><span class=\"o\">.</span><span class=\"n\">NEW_VAR</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>  <span class=\"c1\"># Sets a new environment variable</span>\n</pre>\n<h2>How to use</h2>\n<p>In a few words, the logic is next:</p>\n<ol>\n<li>You can store a lot of serialized values in Environment variables and then deserialize them on fly using ENV class.</li>\n<li>Each environment variable can be accessed as an attribute of ENV class:\n<pre><span class=\"n\">ENV</span><span class=\"o\">.&lt;</span><span class=\"n\">variable_name</span><span class=\"o\">&gt;</span>\n</pre>\n</li>\n<li>The internal decoding mechanism is based on <strong>json</strong> and <strong>ast</strong> packages. That means,\nyou can parse even some JSON-incompatible values (for example, with single quotes used for defining strings).</li>\n</ol>\n<h3>Installing</h3>\n<p>Simply run</p>\n<pre><code>pip install smart-env\n</code></pre>\n<h2>Running the tests</h2>\n<p>This library contains tests written using <em>unittest</em> module, so just run in the project directory</p>\n<pre><code>python -m unittest\n</code></pre>\n<p>Also it's possible to run tests using Tox:</p>\n<pre>tox -e &lt;env&gt;\n</pre>\n<p>Tests coverage is one of the important goals of this project.\nFor now coverage is next:</p>\n<ul>\n<li>For Python 2.7: 98%</li>\n<li>For Python 3.x: 97%</li>\n</ul>\n<p>Supported environments:</p>\n<ul>\n<li>py27</li>\n<li>py35</li>\n<li>py36</li>\n<li>py37</li>\n<li>py38</li>\n<li>coverage (using Python 3)</li>\n<li>coverage (using Python 2.7)</li>\n<li>pep8 (style checking)</li>\n</ul>\n<h2>Restrictions</h2>\n<ol>\n<li>\n<p>Old versions of Python in both generations (e.g. 2.6, 3.4, etc) will never be supported.\nHowever, you always can implement such support in your forks.</p>\n</li>\n<li>\n<p>Parsing set() objects is not working in Python 2. See <a href=\"https://bugs.python.org/issue10091\" rel=\"nofollow\">this</a> for details.</p>\n</li>\n</ol>\n<h2>Authors</h2>\n<ul>\n<li><strong>Alex Sokolov</strong> - <em>Author</em> - <a href=\"https://github.com/AlBartash\" rel=\"nofollow\">Albartash</a></li>\n</ul>\n<h2>Contacts</h2>\n<ul>\n<li>Telegram channel with updates: <a href=\"http://t.me/bart_tools\" rel=\"nofollow\">@bart_tools</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details.</p>\n\n          </div>"}, "last_serial": 6816152, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "66743fab8434b674f65e123ac3a47ce4", "sha256": "1a9db26c9842916793c303fecc1989a0221cce07f84e4602ae1c65f5c9859871"}, "downloads": -1, "filename": "smart_env-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "66743fab8434b674f65e123ac3a47ce4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 7826, "upload_time": "2020-02-21T08:36:31", "upload_time_iso_8601": "2020-02-21T08:36:31.798002Z", "url": "https://files.pythonhosted.org/packages/23/5a/2d62e8636ede8d001fe4c0134dd13782448d000ae854062d20a51475ac18/smart_env-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9e8209383c6ae4255c7d85817dc0b03", "sha256": "3808b411fdd20c1bb1ae2b18ee2101dcbea33f12cf3e32761001067679f91f9a"}, "downloads": -1, "filename": "smart_env-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a9e8209383c6ae4255c7d85817dc0b03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 7010, "upload_time": "2020-02-19T01:26:24", "upload_time_iso_8601": "2020-02-19T01:26:24.506652Z", "url": "https://files.pythonhosted.org/packages/32/96/53b9ce85bddad80c0e1203ace14ec4bb7bd0ec4a163d97afe71e284e8643/smart_env-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "411a1ad766a901ea24fdc1925615b8ca", "sha256": "00be1389cfee269bac54691eaaaae04fccc7478d315f8f3128af02182d355a43"}, "downloads": -1, "filename": "smart_env-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "411a1ad766a901ea24fdc1925615b8ca", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 8882, "upload_time": "2020-02-27T17:50:30", "upload_time_iso_8601": "2020-02-27T17:50:30.589295Z", "url": "https://files.pythonhosted.org/packages/32/04/c02e43df0bfb07510de9b1943f2459327e66ce89c74f4947727111e53f1c/smart_env-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a897b4eb504d9220e50a3e19cee94f66", "sha256": "c0420e09b71f09f8df6ee0e4a51b0d446672c3e819b0a8d70989a96b3077c93e"}, "downloads": -1, "filename": "smart_env-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a897b4eb504d9220e50a3e19cee94f66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10939, "upload_time": "2020-03-15T16:19:57", "upload_time_iso_8601": "2020-03-15T16:19:57.866673Z", "url": "https://files.pythonhosted.org/packages/6d/5a/25fb325187f497b758355027e6ce316715a7e5ccc4c43d316fbb6cdf44c7/smart_env-1.0.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a897b4eb504d9220e50a3e19cee94f66", "sha256": "c0420e09b71f09f8df6ee0e4a51b0d446672c3e819b0a8d70989a96b3077c93e"}, "downloads": -1, "filename": "smart_env-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a897b4eb504d9220e50a3e19cee94f66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10939, "upload_time": "2020-03-15T16:19:57", "upload_time_iso_8601": "2020-03-15T16:19:57.866673Z", "url": "https://files.pythonhosted.org/packages/6d/5a/25fb325187f497b758355027e6ce316715a7e5ccc4c43d316fbb6cdf44c7/smart_env-1.0.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:04 2020"}