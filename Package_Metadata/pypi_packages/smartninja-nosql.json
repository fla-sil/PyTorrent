{"info": {"author": "Matej Ramuta", "author_email": "matej.ramuta@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SmartNinja NoSQL\n\n## About\n\nSmartNinja NoSQL is a simple ODM tool which helps you **switch** between these NoSQL database systems: **TinyDB**, **Datastore**, **Firestore**, **MongoDB** and **Cosmos DB** (via MongoDB API).\n\nTinyDB is used for localhost development. The advantage is that it saves you time configuring a Firestore, Datastore, MonogDB or Cosmos emulator on localhost.\n\nWhen you deploy your web app to Google App Engine, Heroku or Azure App Service, the ODM figures out the new environment (through env variables) and switches the database accordingly.\n\nBear in mind that this is a simple ODM meant to be used at the [SmartNinja courses](https://www.smartninja.org) for learning purposes. So not all\nfeatures of these NoSQL databases are covered, only the basic ones.\n\n## Installation\n\nAdd this dependency in your `requirements.txt`:\n\n\tsmartninja-nosql\n\nMake sure to install it locally using this command:\n\n\tpip install -r requirements.txt\n\n## Other dependencies\n\nSmartNinja NoSQL has two mandatory dependencies: `tinydb` and `tinydb_serialization`. These two help SmartNinja NoSQL use a TinyDB database for localhost development.\n\n#### Datastore\n\nGoogle Cloud Datastore dependency in `requirements.txt`:\n\n    google-cloud-datastore\n\n#### Firestore\n\nGoogle Cloud Firestore dependency in `requirements.txt`:\n\n    google-cloud-firestore\n\n#### MongoDB & Cosmos DB\n\nTo use MongoDB on Heroku or Cosmos DB on Azure App Service, you'll need to add the following library in your `requirements.txt` file:\n\n    pymongo\n\n### Heroku\n\nIf you'll use MongoDB on Heroku, make sure to choose the **mLab MongoDB** add-on.\n\n### Environment variables\n\nThe environment variables should already be automatically created, but still make sure they (still) have the correct names.\n\nHeroku:\n\n- **MONGODB_URI** (shows up when you add the mLab MongoDB add-on)\n- **DYNO** (standard Heroku env var, not visible on the dashboard)\n\nAzure:\n\n- **APPSETTING_WEBSITE_SITE_NAME** (env vars that start with \"APPSETTING_\" are Azure's standard env vars. Not visible on the dashboard)\n- **APPSETTING_MONGOURL** (shows up when you enable Cosmos DB with the Mongo API)\n\nGoogle Cloud:\n\n- **GAE_APPLICATION** (standard GAE env var)\n\n#### Important: Datastore environment variable\n\nIf you'd like to use Datastore on GAE, you must add this piece of code into your `app.yaml` file:\n\n\tenv_variables:\n\t  GAE_DATABASE: \"datastore\"\n\nIf you'd like to use Firestore instead, enter \"firestore\" or don't have this env. variable at all (Firestore is default).\n\n## Usage\n\n### Creating classes\n\nThis is the simplest way to create classes that use SmartNinja NoSQL:\n\n```python3\nfrom smartninja_nosql.odm import Model\n\n\nclass User(Model):\n    pass\n\n```\n\nWhen you initialize a new object, you can add as many attributes as you want (no need to define them in the User model):\n\n```python3\nuser = User(first_name=\"Matt\", last_name=\"Ramuta\", age=31, human=True)\n\n```\n\nBut usually you'd want to specify at least some mandatory fields in a class:\n\n```python3\nclass User(Model):\n    def __init__(self, first_name, last_name, age, human=True, **kwargs):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.human = human\n        self.created = datetime.datetime.now()\n\n        super().__init__(**kwargs)\n\n```\n\nAs you can see, `first_name`, `last_name` and `age` are mandatory fields, while `human` is optional and has a default value of `True`.\n\nThe `created` field is automatically assigned a value of `datetime.datetime.now()`.\n\n**Important**: The `super().__init__(**kwargs)` line must be the last one in the `__init__` method! Also `**kwargs` must be added as a function parameter.\n\n### Custom class methods\n\nYour classes will inherit the following methods from the Model class:\n\n- `create()`\n- `edit()`\n- `get_collection()`\n- `delete()`\n- `get()`\n- `fetch()`\n- `fetch_one()`\n\nBut you can of course create your own custom methods. Example:\n\n```python3\nclass User(Model):\n    def __init__(self, first_name, last_name, age, human=True, **kwargs):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.human = human\n        self.created = datetime.datetime.now()\n\n        super().__init__(**kwargs)\n    \n    def get_full_name(self):\n        return \"{0} {1}\".format(self.first_name, self.last_name)\n\n```\n\n### Creating new objects\n\n```python3\nuser = User(first_name=\"Matt\", last_name=\"Ramuta\", age=31)\nuser.create()\n\nprint(user.id)\n\n```\n\nAs you can see, creating an object needs two things: initializing an object and saving it into a database with the `create()` method. If you don't call this method, the object will not be saved into a database.\n\nThe `create()` method returns back the **object ID**, which is **automatically** created by the database. The ID is also stored in the object itself.\n\n### Get one object from the database\n\nYou can get an object out of the database if you know its `id`:\n\n```python3\n# Add new object to the database:\nuser = User(first_name=\"Matt\", last_name=\"Ramuta\", age=31)\nuser_id = user.create()\n\n# Get the User object from the database\nnew_obj = User.get(obj_id=user_id)\n\n```\n\nYou can also find an object based on some other field using the `fetch_one()` method:\n\n```python3\n\n# search on one field\none_user = User.fetch_one(query=[\"first_name\", \"==\", \"Matt\"])\n\n# search on many fields\nquery_age = [\"age\", \">\", 30]\nquery_human = [\"human\", \"==\", True]\n\none_user = User.fetch_one(query_age=query_age, query_human=query_human)\n```\n\n### Edit an object\n\nYou need to pass the object id and the fields you want to edit:\n\n```python3\nUser.edit(obj_id=user_id, first_name=\"John\", age=25)\n\n```\n\n### Delete an object\n\nCall the `delete()` method and pass the object id:\n\n```python3\nUser.delete(obj_id=user_id)\n\n```\n\n### Query the database and fetch objects that match the query\n\nYou can specify **one query**:\n\n```python3\nquery = [\"first_name\", \"==\", \"Matt\"]\nusers = User.fetch(query=query)\n\nprint(users[0].first_name)\nprint(users[0].id)\n\n```\n\nWhat you'll get is a list of objects that match the query.\n\nYou can also have **multiple queries**:\n\n```python3\nquery_age = [\"age\", \">\", 30]\nquery_human = [\"human\", \"==\", True]\n\nusers = User.fetch(query_age=query_age, query_human=query_human)\n\n```\n\nBut be aware, that some databases (like Firestore) might require that you create an index for these composite queries.\n\n**Important:**\n\n- This query structure must be followed (as shown in examples): `[\"field\", \"operator\", value]`. So the **field name** and \nthe **operator** must be written in quotes.\n- The \"not equal\" queries (\"!=\") are not allowed, because Firestore does not support them (although TinyDB and Cosmos \nDB do).\n\n## Enable a TinyDB test database (for localhost testing)\n\nCreate an environment variable named `TESTING`:\n\n\timport os\n\tos.environ[\"TESTING\"] = \"1\"\n\nThis will create a test TinyDB database: `test_db.json`.\n\n## How the right database is determined\n\nSmartNinja NoSQL automatically determines which database to use. If the environment has the `GAE_APPLICATION` variable, then \nthe selected database is **Firestore** (unless you added the `GAE_DATABASE: \"datastore\"` environment variable in `app.yaml`). \n\nIf SmartNinja NoSQL finds a `APPSETTING_WEBSITE_SITE_NAME` it assumes the environment is **Azure**, so the selected database is **Cosmos DB**. But if **none** of these two environment variables is found, the \nselected database is **TinyDB**.\n\n## TODO\n\n- Tests\n- Continuous integration\n- \"order\" support\n- automatic composite index generator for Cloud Datastore (index.yaml)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smartninja/smartninja-nosql", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "smartninja-nosql", "package_url": "https://pypi.org/project/smartninja-nosql/", "platform": "", "project_url": "https://pypi.org/project/smartninja-nosql/", "project_urls": {"Homepage": "https://github.com/smartninja/smartninja-nosql"}, "release_url": "https://pypi.org/project/smartninja-nosql/0.6/", "requires_dist": null, "requires_python": "", "summary": "SmartNinja NoSQL - a simple ODM for NoSQL databases: TinyDB, Firestore, Datastore, MongoDB and Cosmos DB.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SmartNinja NoSQL</h1>\n<h2>About</h2>\n<p>SmartNinja NoSQL is a simple ODM tool which helps you <strong>switch</strong> between these NoSQL database systems: <strong>TinyDB</strong>, <strong>Datastore</strong>, <strong>Firestore</strong>, <strong>MongoDB</strong> and <strong>Cosmos DB</strong> (via MongoDB API).</p>\n<p>TinyDB is used for localhost development. The advantage is that it saves you time configuring a Firestore, Datastore, MonogDB or Cosmos emulator on localhost.</p>\n<p>When you deploy your web app to Google App Engine, Heroku or Azure App Service, the ODM figures out the new environment (through env variables) and switches the database accordingly.</p>\n<p>Bear in mind that this is a simple ODM meant to be used at the <a href=\"https://www.smartninja.org\" rel=\"nofollow\">SmartNinja courses</a> for learning purposes. So not all\nfeatures of these NoSQL databases are covered, only the basic ones.</p>\n<h2>Installation</h2>\n<p>Add this dependency in your <code>requirements.txt</code>:</p>\n<pre><code>smartninja-nosql\n</code></pre>\n<p>Make sure to install it locally using this command:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<h2>Other dependencies</h2>\n<p>SmartNinja NoSQL has two mandatory dependencies: <code>tinydb</code> and <code>tinydb_serialization</code>. These two help SmartNinja NoSQL use a TinyDB database for localhost development.</p>\n<h4>Datastore</h4>\n<p>Google Cloud Datastore dependency in <code>requirements.txt</code>:</p>\n<pre><code>google-cloud-datastore\n</code></pre>\n<h4>Firestore</h4>\n<p>Google Cloud Firestore dependency in <code>requirements.txt</code>:</p>\n<pre><code>google-cloud-firestore\n</code></pre>\n<h4>MongoDB &amp; Cosmos DB</h4>\n<p>To use MongoDB on Heroku or Cosmos DB on Azure App Service, you'll need to add the following library in your <code>requirements.txt</code> file:</p>\n<pre><code>pymongo\n</code></pre>\n<h3>Heroku</h3>\n<p>If you'll use MongoDB on Heroku, make sure to choose the <strong>mLab MongoDB</strong> add-on.</p>\n<h3>Environment variables</h3>\n<p>The environment variables should already be automatically created, but still make sure they (still) have the correct names.</p>\n<p>Heroku:</p>\n<ul>\n<li><strong>MONGODB_URI</strong> (shows up when you add the mLab MongoDB add-on)</li>\n<li><strong>DYNO</strong> (standard Heroku env var, not visible on the dashboard)</li>\n</ul>\n<p>Azure:</p>\n<ul>\n<li><strong>APPSETTING_WEBSITE_SITE_NAME</strong> (env vars that start with \"APPSETTING_\" are Azure's standard env vars. Not visible on the dashboard)</li>\n<li><strong>APPSETTING_MONGOURL</strong> (shows up when you enable Cosmos DB with the Mongo API)</li>\n</ul>\n<p>Google Cloud:</p>\n<ul>\n<li><strong>GAE_APPLICATION</strong> (standard GAE env var)</li>\n</ul>\n<h4>Important: Datastore environment variable</h4>\n<p>If you'd like to use Datastore on GAE, you must add this piece of code into your <code>app.yaml</code> file:</p>\n<pre><code>env_variables:\n  GAE_DATABASE: \"datastore\"\n</code></pre>\n<p>If you'd like to use Firestore instead, enter \"firestore\" or don't have this env. variable at all (Firestore is default).</p>\n<h2>Usage</h2>\n<h3>Creating classes</h3>\n<p>This is the simplest way to create classes that use SmartNinja NoSQL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smartninja_nosql.odm</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>When you initialize a new object, you can add as many attributes as you want (no need to define them in the User model):</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Matt\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Ramuta\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"n\">human</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>But usually you'd want to specify at least some mandatory fields in a class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">human</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">human</span> <span class=\"o\">=</span> <span class=\"n\">human</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, <code>first_name</code>, <code>last_name</code> and <code>age</code> are mandatory fields, while <code>human</code> is optional and has a default value of <code>True</code>.</p>\n<p>The <code>created</code> field is automatically assigned a value of <code>datetime.datetime.now()</code>.</p>\n<p><strong>Important</strong>: The <code>super().__init__(**kwargs)</code> line must be the last one in the <code>__init__</code> method! Also <code>**kwargs</code> must be added as a function parameter.</p>\n<h3>Custom class methods</h3>\n<p>Your classes will inherit the following methods from the Model class:</p>\n<ul>\n<li><code>create()</code></li>\n<li><code>edit()</code></li>\n<li><code>get_collection()</code></li>\n<li><code>delete()</code></li>\n<li><code>get()</code></li>\n<li><code>fetch()</code></li>\n<li><code>fetch_one()</code></li>\n</ul>\n<p>But you can of course create your own custom methods. Example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">human</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">human</span> <span class=\"o\">=</span> <span class=\"n\">human</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">get_full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">{0}</span><span class=\"s2\"> </span><span class=\"si\">{1}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">)</span>\n</pre>\n<h3>Creating new objects</h3>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Matt\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Ramuta\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, creating an object needs two things: initializing an object and saving it into a database with the <code>create()</code> method. If you don't call this method, the object will not be saved into a database.</p>\n<p>The <code>create()</code> method returns back the <strong>object ID</strong>, which is <strong>automatically</strong> created by the database. The ID is also stored in the object itself.</p>\n<h3>Get one object from the database</h3>\n<p>You can get an object out of the database if you know its <code>id</code>:</p>\n<pre><span class=\"c1\"># Add new object to the database:</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"Matt\"</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">\"Ramuta\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the User object from the database</span>\n<span class=\"n\">new_obj</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">obj_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<p>You can also find an object based on some other field using the <code>fetch_one()</code> method:</p>\n<pre><span class=\"c1\"># search on one field</span>\n<span class=\"n\">one_user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">fetch_one</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"==\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Matt\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># search on many fields</span>\n<span class=\"n\">query_age</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"n\">query_human</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"s2\">\"==\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n\n<span class=\"n\">one_user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">fetch_one</span><span class=\"p\">(</span><span class=\"n\">query_age</span><span class=\"o\">=</span><span class=\"n\">query_age</span><span class=\"p\">,</span> <span class=\"n\">query_human</span><span class=\"o\">=</span><span class=\"n\">query_human</span><span class=\"p\">)</span>\n</pre>\n<h3>Edit an object</h3>\n<p>You need to pass the object id and the fields you want to edit:</p>\n<pre><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"n\">obj_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre>\n<h3>Delete an object</h3>\n<p>Call the <code>delete()</code> method and pass the object id:</p>\n<pre><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">obj_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<h3>Query the database and fetch objects that match the query</h3>\n<p>You can specify <strong>one query</strong>:</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"first_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"==\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Matt\"</span><span class=\"p\">]</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<p>What you'll get is a list of objects that match the query.</p>\n<p>You can also have <strong>multiple queries</strong>:</p>\n<pre><span class=\"n\">query_age</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"n\">query_human</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"human\"</span><span class=\"p\">,</span> <span class=\"s2\">\"==\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">query_age</span><span class=\"o\">=</span><span class=\"n\">query_age</span><span class=\"p\">,</span> <span class=\"n\">query_human</span><span class=\"o\">=</span><span class=\"n\">query_human</span><span class=\"p\">)</span>\n</pre>\n<p>But be aware, that some databases (like Firestore) might require that you create an index for these composite queries.</p>\n<p><strong>Important:</strong></p>\n<ul>\n<li>This query structure must be followed (as shown in examples): <code>[\"field\", \"operator\", value]</code>. So the <strong>field name</strong> and\nthe <strong>operator</strong> must be written in quotes.</li>\n<li>The \"not equal\" queries (\"!=\") are not allowed, because Firestore does not support them (although TinyDB and Cosmos\nDB do).</li>\n</ul>\n<h2>Enable a TinyDB test database (for localhost testing)</h2>\n<p>Create an environment variable named <code>TESTING</code>:</p>\n<pre><code>import os\nos.environ[\"TESTING\"] = \"1\"\n</code></pre>\n<p>This will create a test TinyDB database: <code>test_db.json</code>.</p>\n<h2>How the right database is determined</h2>\n<p>SmartNinja NoSQL automatically determines which database to use. If the environment has the <code>GAE_APPLICATION</code> variable, then\nthe selected database is <strong>Firestore</strong> (unless you added the <code>GAE_DATABASE: \"datastore\"</code> environment variable in <code>app.yaml</code>).</p>\n<p>If SmartNinja NoSQL finds a <code>APPSETTING_WEBSITE_SITE_NAME</code> it assumes the environment is <strong>Azure</strong>, so the selected database is <strong>Cosmos DB</strong>. But if <strong>none</strong> of these two environment variables is found, the\nselected database is <strong>TinyDB</strong>.</p>\n<h2>TODO</h2>\n<ul>\n<li>Tests</li>\n<li>Continuous integration</li>\n<li>\"order\" support</li>\n<li>automatic composite index generator for Cloud Datastore (index.yaml)</li>\n</ul>\n\n          </div>"}, "last_serial": 4772330, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "f588c8e7f3a30f369e594239abc5ad78", "sha256": "49b85958d83890d7db779af8f9be951df86d4420a6e4f1d83127a01442e43b4f"}, "downloads": -1, "filename": "smartninja-nosql-0.6.tar.gz", "has_sig": false, "md5_digest": "f588c8e7f3a30f369e594239abc5ad78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8689, "upload_time": "2019-02-02T14:35:03", "upload_time_iso_8601": "2019-02-02T14:35:03.513773Z", "url": "https://files.pythonhosted.org/packages/5e/f4/2f6a1451920c569d3837e62bd36567fe5345feac1c3ca3071244d9b272e4/smartninja-nosql-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f588c8e7f3a30f369e594239abc5ad78", "sha256": "49b85958d83890d7db779af8f9be951df86d4420a6e4f1d83127a01442e43b4f"}, "downloads": -1, "filename": "smartninja-nosql-0.6.tar.gz", "has_sig": false, "md5_digest": "f588c8e7f3a30f369e594239abc5ad78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8689, "upload_time": "2019-02-02T14:35:03", "upload_time_iso_8601": "2019-02-02T14:35:03.513773Z", "url": "https://files.pythonhosted.org/packages/5e/f4/2f6a1451920c569d3837e62bd36567fe5345feac1c3ca3071244d9b272e4/smartninja-nosql-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:02 2020"}