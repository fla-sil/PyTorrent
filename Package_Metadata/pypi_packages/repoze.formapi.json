{"info": {"author": "Malthe Borch", "author_email": "repoze-dev@lists.repoze.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "The ``repoze.formapi`` provides a form library which integrates with\nHTML forms instead of abstracting them away.\n\nIt provides a small framework to take you through the entire process\nof rendering a form, provide default values, validate and execute form\nactions.\n\nForm fields are defined using Python base types which map out nested\ndata structures with end points that are either integers, strings,\nfloats or tuples of these. It's up to the application to bridge these\nwith more complex objects.\n\n\nIntroduction\n============\n\nThis library helps you parse, validate and deserialize form input as\nwell as execute form actions.\n\nThe starting point is to define the data structure that describes your\ndata. For instance, an action string and a list of numbers (typical\nfor a form that allows a user to select some items and apply an\naction):\n\n>>> fields = {\n...     'action': unicode,\n...     'items': [int]\n... }\n\nLet's apply the following input sequence:\n\n>>> params = [\n...      ('action', 'submit'),\n...      ('items', 1),\n...      ('items', 2),\n...      ('security-token', '...')\n... ]\n\nNote that ``'security-token'`` is an example of a parameter that is\nprovided, but not defined in the fields. That's not an error.\n\nNow, to parse the parameters above into the data structure defined by\nour fields definition, we use the ``parse`` function (note that in the\nrest of this text, we assume that symbols have been imported).\n\n>>> from repoze.formapi import parse\n>>> data, errors = parse(params, fields)\n\nIn the logic that handles this call, you'll typically want to test if\nthe ``errors`` value is true (meaning there was an error) or false\n(meaning there was no error).\n\n>>> bool(errors)\nFalse\n\nLet's take a look at the data:\n\n>>> data\n{'action': u'submit', 'items': [1, 2]}\n\n\nTypes\n=====\n\nIn the previous example, we used Python's built-in data types: ``int``\nand ``unicode``.\n\nHowever, you can use any callable as the data type. Note that if the\ncallable raises a ``KeyError``, then it's simply ignored.\n\nLet's try an example:\n\n>>> data, errors = parse((('foo', 'bar'), ('baz', 'boo'), ('baz', 'qux')), {\n...     'foo': str.upper,\n...     'baz': {'boo': 'yes'}.__getitem__,\n... })\n\nWhat can we expect in ``data``?\n\nThe ``'foo'`` parameter will be uppercased, the first ``'baz'``\nresolves to ``'yes'``, while the other raises a ``KeyError`` and is\nignored.\n\n>>> data\n{'foo': 'BAR', 'baz': 'yes'}\n\nIt's useful to remember that if you want a parameter to be ignored,\nsimply raise a ``KeyError``.\n\n\nForms\n=====\n\nThe library provides an abstraction for handling forms.\n\nTo create a form you subclass the ``Form`` class and define the form\nfield definitions in the ``fields`` attribute.\n\n>>> class TapeForm(Form):\n...     \"\"\"Casette tape form.\"\"\"\n...\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'playtime': float\n...     }\n\nIf there are no start or *default* values, the form can be\ninstantiated with no arguments:\n\n>>> form = TapeForm()\n\nThe form data is available from the ``data`` attribute. Since we\ndidn't pass in a request, there's no data available.\n\n>>> form.data['artist'] is None\nTrue\n\nThat's not very interesting. Let's pass an input parameter.\n\n>>> params = (('title', u'Motorcity Detroit USA Live'),)\n>>> form = TapeForm(params=params)\n\nThis will set the ``'title'`` field.\n\nThe input is a valid unicode string and there are no validation\nerrors.\n\n>>> form.validate()\nTrue\n\nLet's confirm that the data is available.\n\n>>> form.data['title']\nu'Motorcity Detroit USA Live'\n\nThe library also support passing in a ``request`` argument, if this is\nan object that has a ``params`` attribute.\n\n>>> request = Request(params=params)\n\nThe ``Request`` class from `WebOb <http://pypi.python.org/pypi/WebOb>`_\n(a popular package that provides an object-oriented interface to the\nHTTP protocol) is compatible.\n\n>>> form = TapeForm(request=request)\n\nWe'll often want to initialize the form with default values. To this\neffect we pass in a dictionary object.\n\n>>> data = {\n...    'artist': u'Bachman-Turner Overdrive',\n...    'title': u'Four Wheel Drive',\n...    'asin': 'B000001FL8',\n...    'year': 1975,\n...    'playtime': 33.53\n... }\n>>> form = TapeForm(data)\n\nThe values are available in the form data object.\n\n>>> form.data['title']\nu'Four Wheel Drive'\n\nHowever, if we pass in the request from the former example, we'll see\nthat values from the request are used before the passed dictionary\nobject is queried.\n\n>>> form = TapeForm(data, request=request)\n>>> form.data['title']\nu'Motorcity Detroit USA Live'\n\nThe provided ``data`` dictionary is unchanged at this point:\n\n>>> data['title']\nu'Four Wheel Drive'\n\nWe need to invoke the ``save`` method to commit the changes to the\nprovided dictionary.\n\n>>> form.data.save()\n>>> data['title']\nu'Motorcity Detroit USA Live'\n\n\nAdditional validation\n---------------------\n\nIt is possible to create validation methods for more complex\nneeds. These extra validators can be hooked up using the `validator`\ndecorator.\n\n>>> class CDForm(Form):\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'genre': str,\n...         'playtime': float}\n...\n...     @validator\n...     def check_genre(self):\n...         if self.data['genre'] != 'rock':\n...             yield 'Genre is invalid'\n\nA validator can look at all the data that is available. This makes it\neasy to create validators that need to check multiple fields.\n\n>>> form = CDForm()\n>>> form.validate()\nFalse\n\nThe errors attribute contains our error message.\n\n>>> form.errors[0]\n'Genre is invalid'\n\nErrors can also be assigned to a specific field. To do this a\nvalidator can register itself for a specific field.\n\n>>> class CDForm(Form):\n...\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'genre': str,\n...         'playtime': float}\n...\n...     @validator('genre')\n...     def check_genre(self):\n...         if self.data['genre'] != 'rock':\n...             yield 'Genre is invalid'\n\nWhen this form is validated it will have the error available for the\nspecific field.\n\n>>> form = CDForm()\n>>> form.validate()\nFalse\n>>> 'genre' in form.errors\nTrue\n>>> form.errors['genre'][0]\n'Genre is invalid'\n\nForm context\n------------\n\nWe can set the context of a form to some object.\n\n>>> class Tape:\n...    title = u'Motorcity Detroit USA Live'\n...    asin = 'B000001FL8'\n...    year = 1975\n\n>>> tape = Tape()\n\nThe form data will draw defaults from the context.\n\n>>> form = TapeForm(context=tape)\n>>> form.data['title']\nu'Motorcity Detroit USA Live'\n\nRequest parameters take priority over the context. In the following\nexample, we submit the form with trivial input.\n\n>>> request = Request(params=(('asin', u''), ('year', u'')))\n>>> form = TapeForm(context=tape, request=request)\n\nThis form input is valid; although ``year`` is an integer field, the\ntrivial input is valid and will be assigned a value of ``None``.\n\n>>> form.validate()\nTrue\n\nThe ``asin`` input is coerced to a string (from unicode).\n\n>>> form.data['asin']\n''\n\nThe ``year`` input is trivial. It's not a required field, so the value\nis ``None`` (treated as a non-input).\n\n>>> form.data['year'] is None\nTrue\n\nRequired fields\n---------------\n\nWe use the ``required`` method to mark fields required.\n\nLet's continue the example from above. If we make the fields required,\nthe input no longer validates.\n\n>>> TapeForm.fields['year'] = required(int, u\"Required field\" )\n>>> TapeForm.fields['asin'] = required(str)\n\nThe form input is no longer valid.\n\n>>> form = TapeForm(context=tape, request=request)\n>>> form.validate()\nFalse\n>>> form.data['year'] is None\nTrue\n\nThe error message is available as well:\n\n>>> form.errors['year'][0]\n'Required field'\n\nNow let's try a valid input:\n\n>>> request = Request(params=(('asin', u'B000001FL8'), ('year', u'1978')))\n>>> form = TapeForm(context=tape, request=request)\n\nWe can expect both required fields to be\nconverted and correctly typed.\n\n>>> form.validate()\nTrue\n\n>>> form.data['asin']\n'B000001FL8'\n\n>>> form.data['year']\n1978\n\nForm submission\n---------------\n\nIf a form prefix has not been set, the request is applied by\ndefault. However, most applications will want to set a form prefix and\nrequire explicit form submission.\n\nA form submits a \"default action\" if the prefix is submitted as a\nparameter.\n\n>>> request = Request(params=(\n...    ('tape_form', ''),\n...    ('title', u'Motorcity Detroit USA Live')))\n>>> form = TapeForm(request=request, prefix='tape_form')\n>>> form.data['title']\nu'Motorcity Detroit USA Live'\n\nAs expected, if we submit a form with a different prefix, the request\nis not applied.\n\n>>> form = TapeForm(request=request, prefix='other_form')\n>>> form.data['title'] is None\nTrue\n\nWe can also define form actions on the form class itself.\n\n>>> class TapeAddForm(TapeForm):\n...     \"\"\"An add-form for a casette tape.\"\"\"\n...\n...     @action\n...     def handle_add(self, data):\n...         print \"add\"\n...\n...     @action(\"add_and_edit\")\n...     def handle_add_and_edit(self, data):\n...         print \"add_and_edit\"\n\nThe first action is a \"default action\"; if we submit the request we\nset up before, this action will be read to be submitted.\n\n>>> form = TapeAddForm(request=request, prefix='tape_form')\n>>> form.actions\n[<Action name=\"\" submitted=\"True\">,\n <Action name=\"add_and_edit\" submitted=\"False\">]\n\nThe submitted action is available in the ``action`` parameter.\n\n>>> form.action\n<Action name=\"\" submitted=\"True\">\n\nTo call the form handler of the submitted action, we invoke the form's\ncall method.\n\n>>> form()\nadd\n\nTo call the named form action, there must be a parameter in the\nrequest which is a concatenation of the prefix and the form action\nname. Accepted separation characters are '.' (dot), '_' (underscore)\nand '-' (dash).\n\n>>> request = Request(params=(\n...    ('tape_form-add_and_edit', ''),\n...    ('title', u'Motorcity Detroit USA Live'),))\n>>> form = TapeAddForm(request=request, prefix='tape_form')\n>>> form.actions\n[<Action name=\"\" submitted=\"False\">,\n <Action name=\"add_and_edit\" submitted=\"True\">]\n>>> form()\nadd_and_edit\n\nData proxies\n------------\n\nWe can bind a context object to a data object by using a proxy\nobject. This technique can be used to create edit or add-forms.\n\nTo illustrate this, let's define a content object. We'll hardcode\ndefault values for simplicity.\n\n>>> class Tape(object):\n...    artist = u'Bachman-Turner Overdrive'\n...    title = u'Four Wheel Drive'\n...    asin = 'B000001FL8'\n...    year = 1975\n...    playtime = 33.53\n\nWe can now create a data proxy for an instance of this class.\n\n>>> tape = Tape()\n>>> proxy = Proxy(tape)\n\nWith no further intervention, this data object acts as a proxy to read\nand write attributes on the content object.\n\n>>> proxy.title\nu'Four Wheel Drive'\n>>> proxy.title = u'Motorcity Detroit USA Live'\n>>> tape.title\nu'Motorcity Detroit USA Live'\n\nIf we want to have more control over this process, we can subclass and\ndefine descriptors.\n\nThe following example defines custom behavior for the ``title``\nattribute; the value is uppercased.\n\n>>> class TapeProxy(Proxy):\n...     def get_title(self):\n...         return self.title\n...\n...     def set_title(self, value):\n...         self.title = value.upper()\n...\n...     title = property(get_title, set_title)\n>>> proxy = TapeProxy(tape)\n\nIf we read and write to the ``title`` attribute of this proxy object,\nthe custom getter and setter functions are used.\n\n>>> proxy.title = u'Motorcity Detroit USA Live'\n\nAs would be expected from a proxy, changes are actually made to the\nunderlying content object.\n\n>>> tape.title\nu'MOTORCITY DETROIT USA LIVE'\n\nSaving form data\n----------------\n\nWhen instantiating a form, you can pass in a proxy object instead of\n``data``. This binds the data object to the proxy, but it also allows\nus to save the form data on the proxied object.\n\n>>> form = TapeForm(proxy, request=request)\n>>> form.data['title'] = u'Four Wheel Drive'\n\nAssignment behaves logically.\n\n>>> form.data['title']\nu'Four Wheel Drive'\n\nHowever, if we invoke the ``save`` action, changes take effect on the\nproxied object.\n\n>>> form.data.save()\n>>> tape.title\nu'FOUR WHEEL DRIVE'\n\nChangelog\n=========\n\n0.6.1 (2012-12-10)\n------------------\n\n- Added support for the field definition callable to raise a\n  ``KeyError`` exception such that the input is ignored.\n\n0.6 (2012-12-10)\n----------------\n\n- The ``marshalling`` module has been renamed to ``parser``.\n\n- Fixed issue where an integer would cause an error even when not\n  required.\n\n0.5.4 (2012-12-04)\n------------------\n\n- Added ``keys`` method to marshaller such that the object can be used\n  as a mapping.\n\n0.5.3 (2012-11-23)\n------------------\n\n- Fixed an issue where a fields definition with a single entry would\n  get incorrectly marshalled when the corresponding data had multiple\n  entries.\n\n0.5.2 (2012-11-19)\n------------------\n\n- Fixed an issue with `required` where the marshaller would not\n  correctly convert a value to the provided value type.\n\n\n0.5.1 (2012-11-16)\n------------------\n\n- Type-checking has been removed from the marshalling code::\n\n    if not error and not isinstance(value, data_type):\n        error = True\n\n  This change was required to support \"schema types\" such as::\n\n    import re\n\n    match_email = re.compile(\n        r\"^(\\w&.%#$&'\\*+-/=?^_`{}|~]+!)*[\\w&.%#$&'\"\n        r\"\\*+-/=?^_`{}|~]+@(([0-9a-z]([0-9a-z-]*[0-9a-z])\"\n        r\"?\\.)+[a-z]{2,6}|([0-9]{1,3}\\.){3}[0-9]{1,3})$\",\n        re.IGNORECASE).match\n\n    class email(unicode):\n        def __new__(cls, string):\n          if match_email(string):\n              return string\n\n          raise ValueError(u\"Not a valid e-mail address.\")\n\n\n0.5.0 (2010-05-28)\n------------------\n\n- Fixed ``Errors`` class to use the more obtuse ``__getattr__``\n  override; this fixes an issue where an attribute lookup of\n  ``__class__`` would fail. [malthe]\n\n- Added ``required`` decorator for field types; when we wrap a type\n  with this decorator, inputs that do not validate (even the trivial\n  input of the empty string) are given the input value as-is. Compare\n  this to an optional field (the default setting) where the empty\n  string will be interpreted as a non-input (unless it's a string type\n  or another type which will accept the empty string). [malthe]\n\n- Add __contains__/has_key support to the Error class. [wichert]\n\n0.4.2 (2009-09-14)\n------------------\n\n- Added ``any`` builtin fallback. [malthe]\n\n0.4.1 (2009-07-31)\n------------------\n\n- Added defaultdict emulation class. [malthe]\n\n0.4 (2009-07-29)\n----------------\n\n- The selected action, if any, is available in the ``action``\n  attribute of a form instance. [malthe]\n\n- Even if form input does not validate, the input is available as-is\n  in the ``data`` dictionary. [malthe, rnix]\n\n- Request parameters can now be provided directly as the ``params``\n  keyword argument. [malthe]\n\n- Added ``get`` method to errors dictionary. [malthe]\n\n- Errors can now be compared with each other to see if they are the\n  same. This makes it easier to test without doctest.\n\n- Made the truth test for the errors object check just for messages in\n  itself or it's sub errors. This avoids having the errors object\n  saying it is true after accessing a key for which no error exists\n  (thus creating a new errors object). [jvloothuis]\n\n- Changed the base class of errors from unicode to object. This makes\n  it behave like one would expect when printing etc. [jvloothuis]\n\n0.3.2 (2009-03-09)\n------------------\n\n- Shedding unused dependency on 'zope.interface' [jvloothuis]\n\n0.3.1 (2008-10-27)\n------------------\n\n- Make it possible to set `prefix` as class attribute. [malthe]\n\n- Fixed issue where action parameters would not get set. [malthe]\n\n0.3 (2008-10-27)\n----------------\n\n- Marshalled data is no longer applied when no parameters are\n  available from the request. [malthe]\n\n- Made the `errors`-object subclass unicode instead of defaultdict and\n  implemented custom string representation function which concatenates\n  error messages. [malthe]\n\n0.2 (2008-10-19)\n----------------\n\n- Created/improved the abilities for custom validation. [jvloothuis]\n\n- Added form action support. [malthe]\n\n- Reworked marshalling code to handle dynamic dictionary\n  keys. [malthe]\n\n- Implemented form data object which facilities the form processing\n  flow from applying the request to committing changes to a context\n  object. [malthe]\n\n- Integrated the converter into the ``form`` module. [seletz]\n\n- Added ``ValidationErrors`` object, which evaluates to True if validation\n  errors occured. [seletz]\n\n- Added ``unicode`` converter. [seletz]\n\n- Added ``converter`` module to support converting and validating request\n  parameters sent by a form. [seletz]\n\n- Added logic to allow registering and acquiring template API\n  components from templates. [malthe]\n\n- Changed the Skin Template View to be a class, and added a minimal\n  interface ISkinTemplate to access the template path [seletz]\n\n- Fixed a bug where we did not tear down the tests correctly [seletz]\n\n- Fixed bug where the INewRequest event handler would call\n  templates when checking for their existence [seletz]\n\n0.1 (2008-09-25)\n----------------\n\n- Initial release [malthe]\n\n- Added support to dynamically register templates if they\n  are added to a registered template directory [seletz]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "forms html validation marshalling", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "repoze.formapi", "package_url": "https://pypi.org/project/repoze.formapi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repoze.formapi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/repoze.formapi/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "Minimalistic form library.", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <tt>repoze.formapi</tt> provides a form library which integrates with\nHTML forms instead of abstracting them away.</p>\n<p>It provides a small framework to take you through the entire process\nof rendering a form, provide default values, validate and execute form\nactions.</p>\n<p>Form fields are defined using Python base types which map out nested\ndata structures with end points that are either integers, strings,\nfloats or tuples of these. It\u2019s up to the application to bridge these\nwith more complex objects.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This library helps you parse, validate and deserialize form input as\nwell as execute form actions.</p>\n<p>The starting point is to define the data structure that describes your\ndata. For instance, an action string and a list of numbers (typical\nfor a form that allows a user to select some items and apply an\naction):</p>\n<pre>&gt;&gt;&gt; fields = {\n...     'action': unicode,\n...     'items': [int]\n... }\n</pre>\n<p>Let\u2019s apply the following input sequence:</p>\n<pre>&gt;&gt;&gt; params = [\n...      ('action', 'submit'),\n...      ('items', 1),\n...      ('items', 2),\n...      ('security-token', '...')\n... ]\n</pre>\n<p>Note that <tt><span class=\"pre\">'security-token'</span></tt> is an example of a parameter that is\nprovided, but not defined in the fields. That\u2019s not an error.</p>\n<p>Now, to parse the parameters above into the data structure defined by\nour fields definition, we use the <tt>parse</tt> function (note that in the\nrest of this text, we assume that symbols have been imported).</p>\n<pre>&gt;&gt;&gt; from repoze.formapi import parse\n&gt;&gt;&gt; data, errors = parse(params, fields)\n</pre>\n<p>In the logic that handles this call, you\u2019ll typically want to test if\nthe <tt>errors</tt> value is true (meaning there was an error) or false\n(meaning there was no error).</p>\n<pre>&gt;&gt;&gt; bool(errors)\nFalse\n</pre>\n<p>Let\u2019s take a look at the data:</p>\n<pre>&gt;&gt;&gt; data\n{'action': u'submit', 'items': [1, 2]}\n</pre>\n</div>\n<div id=\"types\">\n<h2>Types</h2>\n<p>In the previous example, we used Python\u2019s built-in data types: <tt>int</tt>\nand <tt>unicode</tt>.</p>\n<p>However, you can use any callable as the data type. Note that if the\ncallable raises a <tt>KeyError</tt>, then it\u2019s simply ignored.</p>\n<p>Let\u2019s try an example:</p>\n<pre>&gt;&gt;&gt; data, errors = parse((('foo', 'bar'), ('baz', 'boo'), ('baz', 'qux')), {\n...     'foo': str.upper,\n...     'baz': {'boo': 'yes'}.__getitem__,\n... })\n</pre>\n<p>What can we expect in <tt>data</tt>?</p>\n<p>The <tt>'foo'</tt> parameter will be uppercased, the first <tt>'baz'</tt>\nresolves to <tt>'yes'</tt>, while the other raises a <tt>KeyError</tt> and is\nignored.</p>\n<pre>&gt;&gt;&gt; data\n{'foo': 'BAR', 'baz': 'yes'}\n</pre>\n<p>It\u2019s useful to remember that if you want a parameter to be ignored,\nsimply raise a <tt>KeyError</tt>.</p>\n</div>\n<div id=\"forms\">\n<h2>Forms</h2>\n<p>The library provides an abstraction for handling forms.</p>\n<p>To create a form you subclass the <tt>Form</tt> class and define the form\nfield definitions in the <tt>fields</tt> attribute.</p>\n<pre>&gt;&gt;&gt; class TapeForm(Form):\n...     \"\"\"Casette tape form.\"\"\"\n...\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'playtime': float\n...     }\n</pre>\n<p>If there are no start or <em>default</em> values, the form can be\ninstantiated with no arguments:</p>\n<pre>&gt;&gt;&gt; form = TapeForm()\n</pre>\n<p>The form data is available from the <tt>data</tt> attribute. Since we\ndidn\u2019t pass in a request, there\u2019s no data available.</p>\n<pre>&gt;&gt;&gt; form.data['artist'] is None\nTrue\n</pre>\n<p>That\u2019s not very interesting. Let\u2019s pass an input parameter.</p>\n<pre>&gt;&gt;&gt; params = (('title', u'Motorcity Detroit USA Live'),)\n&gt;&gt;&gt; form = TapeForm(params=params)\n</pre>\n<p>This will set the <tt>'title'</tt> field.</p>\n<p>The input is a valid unicode string and there are no validation\nerrors.</p>\n<pre>&gt;&gt;&gt; form.validate()\nTrue\n</pre>\n<p>Let\u2019s confirm that the data is available.</p>\n<pre>&gt;&gt;&gt; form.data['title']\nu'Motorcity Detroit USA Live'\n</pre>\n<p>The library also support passing in a <tt>request</tt> argument, if this is\nan object that has a <tt>params</tt> attribute.</p>\n<pre>&gt;&gt;&gt; request = Request(params=params)\n</pre>\n<p>The <tt>Request</tt> class from <a href=\"http://pypi.python.org/pypi/WebOb\" rel=\"nofollow\">WebOb</a>\n(a popular package that provides an object-oriented interface to the\nHTTP protocol) is compatible.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(request=request)\n</pre>\n<p>We\u2019ll often want to initialize the form with default values. To this\neffect we pass in a dictionary object.</p>\n<pre>&gt;&gt;&gt; data = {\n...    'artist': u'Bachman-Turner Overdrive',\n...    'title': u'Four Wheel Drive',\n...    'asin': 'B000001FL8',\n...    'year': 1975,\n...    'playtime': 33.53\n... }\n&gt;&gt;&gt; form = TapeForm(data)\n</pre>\n<p>The values are available in the form data object.</p>\n<pre>&gt;&gt;&gt; form.data['title']\nu'Four Wheel Drive'\n</pre>\n<p>However, if we pass in the request from the former example, we\u2019ll see\nthat values from the request are used before the passed dictionary\nobject is queried.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(data, request=request)\n&gt;&gt;&gt; form.data['title']\nu'Motorcity Detroit USA Live'\n</pre>\n<p>The provided <tt>data</tt> dictionary is unchanged at this point:</p>\n<pre>&gt;&gt;&gt; data['title']\nu'Four Wheel Drive'\n</pre>\n<p>We need to invoke the <tt>save</tt> method to commit the changes to the\nprovided dictionary.</p>\n<pre>&gt;&gt;&gt; form.data.save()\n&gt;&gt;&gt; data['title']\nu'Motorcity Detroit USA Live'\n</pre>\n<div id=\"additional-validation\">\n<h3>Additional validation</h3>\n<p>It is possible to create validation methods for more complex\nneeds. These extra validators can be hooked up using the <cite>validator</cite>\ndecorator.</p>\n<pre>&gt;&gt;&gt; class CDForm(Form):\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'genre': str,\n...         'playtime': float}\n...\n...     @validator\n...     def check_genre(self):\n...         if self.data['genre'] != 'rock':\n...             yield 'Genre is invalid'\n</pre>\n<p>A validator can look at all the data that is available. This makes it\neasy to create validators that need to check multiple fields.</p>\n<pre>&gt;&gt;&gt; form = CDForm()\n&gt;&gt;&gt; form.validate()\nFalse\n</pre>\n<p>The errors attribute contains our error message.</p>\n<pre>&gt;&gt;&gt; form.errors[0]\n'Genre is invalid'\n</pre>\n<p>Errors can also be assigned to a specific field. To do this a\nvalidator can register itself for a specific field.</p>\n<pre>&gt;&gt;&gt; class CDForm(Form):\n...\n...     fields = {\n...         'artist': unicode,\n...         'title': unicode,\n...         'asin': str,\n...         'year': int,\n...         'genre': str,\n...         'playtime': float}\n...\n...     @validator('genre')\n...     def check_genre(self):\n...         if self.data['genre'] != 'rock':\n...             yield 'Genre is invalid'\n</pre>\n<p>When this form is validated it will have the error available for the\nspecific field.</p>\n<pre>&gt;&gt;&gt; form = CDForm()\n&gt;&gt;&gt; form.validate()\nFalse\n&gt;&gt;&gt; 'genre' in form.errors\nTrue\n&gt;&gt;&gt; form.errors['genre'][0]\n'Genre is invalid'\n</pre>\n</div>\n<div id=\"form-context\">\n<h3>Form context</h3>\n<p>We can set the context of a form to some object.</p>\n<pre>&gt;&gt;&gt; class Tape:\n...    title = u'Motorcity Detroit USA Live'\n...    asin = 'B000001FL8'\n...    year = 1975\n</pre>\n<pre>&gt;&gt;&gt; tape = Tape()\n</pre>\n<p>The form data will draw defaults from the context.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(context=tape)\n&gt;&gt;&gt; form.data['title']\nu'Motorcity Detroit USA Live'\n</pre>\n<p>Request parameters take priority over the context. In the following\nexample, we submit the form with trivial input.</p>\n<pre>&gt;&gt;&gt; request = Request(params=(('asin', u''), ('year', u'')))\n&gt;&gt;&gt; form = TapeForm(context=tape, request=request)\n</pre>\n<p>This form input is valid; although <tt>year</tt> is an integer field, the\ntrivial input is valid and will be assigned a value of <tt>None</tt>.</p>\n<pre>&gt;&gt;&gt; form.validate()\nTrue\n</pre>\n<p>The <tt>asin</tt> input is coerced to a string (from unicode).</p>\n<pre>&gt;&gt;&gt; form.data['asin']\n''\n</pre>\n<p>The <tt>year</tt> input is trivial. It\u2019s not a required field, so the value\nis <tt>None</tt> (treated as a non-input).</p>\n<pre>&gt;&gt;&gt; form.data['year'] is None\nTrue\n</pre>\n</div>\n<div id=\"required-fields\">\n<h3>Required fields</h3>\n<p>We use the <tt>required</tt> method to mark fields required.</p>\n<p>Let\u2019s continue the example from above. If we make the fields required,\nthe input no longer validates.</p>\n<pre>&gt;&gt;&gt; TapeForm.fields['year'] = required(int, u\"Required field\" )\n&gt;&gt;&gt; TapeForm.fields['asin'] = required(str)\n</pre>\n<p>The form input is no longer valid.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(context=tape, request=request)\n&gt;&gt;&gt; form.validate()\nFalse\n&gt;&gt;&gt; form.data['year'] is None\nTrue\n</pre>\n<p>The error message is available as well:</p>\n<pre>&gt;&gt;&gt; form.errors['year'][0]\n'Required field'\n</pre>\n<p>Now let\u2019s try a valid input:</p>\n<pre>&gt;&gt;&gt; request = Request(params=(('asin', u'B000001FL8'), ('year', u'1978')))\n&gt;&gt;&gt; form = TapeForm(context=tape, request=request)\n</pre>\n<p>We can expect both required fields to be\nconverted and correctly typed.</p>\n<pre>&gt;&gt;&gt; form.validate()\nTrue\n</pre>\n<pre>&gt;&gt;&gt; form.data['asin']\n'B000001FL8'\n</pre>\n<pre>&gt;&gt;&gt; form.data['year']\n1978\n</pre>\n</div>\n<div id=\"form-submission\">\n<h3>Form submission</h3>\n<p>If a form prefix has not been set, the request is applied by\ndefault. However, most applications will want to set a form prefix and\nrequire explicit form submission.</p>\n<p>A form submits a \u201cdefault action\u201d if the prefix is submitted as a\nparameter.</p>\n<pre>&gt;&gt;&gt; request = Request(params=(\n...    ('tape_form', ''),\n...    ('title', u'Motorcity Detroit USA Live')))\n&gt;&gt;&gt; form = TapeForm(request=request, prefix='tape_form')\n&gt;&gt;&gt; form.data['title']\nu'Motorcity Detroit USA Live'\n</pre>\n<p>As expected, if we submit a form with a different prefix, the request\nis not applied.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(request=request, prefix='other_form')\n&gt;&gt;&gt; form.data['title'] is None\nTrue\n</pre>\n<p>We can also define form actions on the form class itself.</p>\n<pre>&gt;&gt;&gt; class TapeAddForm(TapeForm):\n...     \"\"\"An add-form for a casette tape.\"\"\"\n...\n...     @action\n...     def handle_add(self, data):\n...         print \"add\"\n...\n...     @action(\"add_and_edit\")\n...     def handle_add_and_edit(self, data):\n...         print \"add_and_edit\"\n</pre>\n<p>The first action is a \u201cdefault action\u201d; if we submit the request we\nset up before, this action will be read to be submitted.</p>\n<pre>&gt;&gt;&gt; form = TapeAddForm(request=request, prefix='tape_form')\n&gt;&gt;&gt; form.actions\n[&lt;Action name=\"\" submitted=\"True\"&gt;,\n &lt;Action name=\"add_and_edit\" submitted=\"False\"&gt;]\n</pre>\n<p>The submitted action is available in the <tt>action</tt> parameter.</p>\n<pre>&gt;&gt;&gt; form.action\n&lt;Action name=\"\" submitted=\"True\"&gt;\n</pre>\n<p>To call the form handler of the submitted action, we invoke the form\u2019s\ncall method.</p>\n<pre>&gt;&gt;&gt; form()\nadd\n</pre>\n<p>To call the named form action, there must be a parameter in the\nrequest which is a concatenation of the prefix and the form action\nname. Accepted separation characters are \u2018.\u2019 (dot), \u2018_\u2019 (underscore)\nand \u2018-\u2018 (dash).</p>\n<pre>&gt;&gt;&gt; request = Request(params=(\n...    ('tape_form-add_and_edit', ''),\n...    ('title', u'Motorcity Detroit USA Live'),))\n&gt;&gt;&gt; form = TapeAddForm(request=request, prefix='tape_form')\n&gt;&gt;&gt; form.actions\n[&lt;Action name=\"\" submitted=\"False\"&gt;,\n &lt;Action name=\"add_and_edit\" submitted=\"True\"&gt;]\n&gt;&gt;&gt; form()\nadd_and_edit\n</pre>\n</div>\n<div id=\"data-proxies\">\n<h3>Data proxies</h3>\n<p>We can bind a context object to a data object by using a proxy\nobject. This technique can be used to create edit or add-forms.</p>\n<p>To illustrate this, let\u2019s define a content object. We\u2019ll hardcode\ndefault values for simplicity.</p>\n<pre>&gt;&gt;&gt; class Tape(object):\n...    artist = u'Bachman-Turner Overdrive'\n...    title = u'Four Wheel Drive'\n...    asin = 'B000001FL8'\n...    year = 1975\n...    playtime = 33.53\n</pre>\n<p>We can now create a data proxy for an instance of this class.</p>\n<pre>&gt;&gt;&gt; tape = Tape()\n&gt;&gt;&gt; proxy = Proxy(tape)\n</pre>\n<p>With no further intervention, this data object acts as a proxy to read\nand write attributes on the content object.</p>\n<pre>&gt;&gt;&gt; proxy.title\nu'Four Wheel Drive'\n&gt;&gt;&gt; proxy.title = u'Motorcity Detroit USA Live'\n&gt;&gt;&gt; tape.title\nu'Motorcity Detroit USA Live'\n</pre>\n<p>If we want to have more control over this process, we can subclass and\ndefine descriptors.</p>\n<p>The following example defines custom behavior for the <tt>title</tt>\nattribute; the value is uppercased.</p>\n<pre>&gt;&gt;&gt; class TapeProxy(Proxy):\n...     def get_title(self):\n...         return self.title\n...\n...     def set_title(self, value):\n...         self.title = value.upper()\n...\n...     title = property(get_title, set_title)\n&gt;&gt;&gt; proxy = TapeProxy(tape)\n</pre>\n<p>If we read and write to the <tt>title</tt> attribute of this proxy object,\nthe custom getter and setter functions are used.</p>\n<pre>&gt;&gt;&gt; proxy.title = u'Motorcity Detroit USA Live'\n</pre>\n<p>As would be expected from a proxy, changes are actually made to the\nunderlying content object.</p>\n<pre>&gt;&gt;&gt; tape.title\nu'MOTORCITY DETROIT USA LIVE'\n</pre>\n</div>\n<div id=\"saving-form-data\">\n<h3>Saving form data</h3>\n<p>When instantiating a form, you can pass in a proxy object instead of\n<tt>data</tt>. This binds the data object to the proxy, but it also allows\nus to save the form data on the proxied object.</p>\n<pre>&gt;&gt;&gt; form = TapeForm(proxy, request=request)\n&gt;&gt;&gt; form.data['title'] = u'Four Wheel Drive'\n</pre>\n<p>Assignment behaves logically.</p>\n<pre>&gt;&gt;&gt; form.data['title']\nu'Four Wheel Drive'\n</pre>\n<p>However, if we invoke the <tt>save</tt> action, changes take effect on the\nproxied object.</p>\n<pre>&gt;&gt;&gt; form.data.save()\n&gt;&gt;&gt; tape.title\nu'FOUR WHEEL DRIVE'\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.6.1 (2012-12-10)</h3>\n<ul>\n<li>Added support for the field definition callable to raise a\n<tt>KeyError</tt> exception such that the input is ignored.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.6 (2012-12-10)</h3>\n<ul>\n<li>The <tt>marshalling</tt> module has been renamed to <tt>parser</tt>.</li>\n<li>Fixed issue where an integer would cause an error even when not\nrequired.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.5.4 (2012-12-04)</h3>\n<ul>\n<li>Added <tt>keys</tt> method to marshaller such that the object can be used\nas a mapping.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.5.3 (2012-11-23)</h3>\n<ul>\n<li>Fixed an issue where a fields definition with a single entry would\nget incorrectly marshalled when the corresponding data had multiple\nentries.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.5.2 (2012-11-19)</h3>\n<ul>\n<li>Fixed an issue with <cite>required</cite> where the marshaller would not\ncorrectly convert a value to the provided value type.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.5.1 (2012-11-16)</h3>\n<ul>\n<li><p>Type-checking has been removed from the marshalling code:</p>\n<pre>if not error and not isinstance(value, data_type):\n    error = True\n</pre>\n<p>This change was required to support \u201cschema types\u201d such as:</p>\n<pre>import re\n\nmatch_email = re.compile(\n    r\"^(\\w&amp;.%#$&amp;'\\*+-/=?^_`{}|~]+!)*[\\w&amp;.%#$&amp;'\"\n    r\"\\*+-/=?^_`{}|~]+@(([0-9a-z]([0-9a-z-]*[0-9a-z])\"\n    r\"?\\.)+[a-z]{2,6}|([0-9]{1,3}\\.){3}[0-9]{1,3})$\",\n    re.IGNORECASE).match\n\nclass email(unicode):\n    def __new__(cls, string):\n      if match_email(string):\n          return string\n\n      raise ValueError(u\"Not a valid e-mail address.\")\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.5.0 (2010-05-28)</h3>\n<ul>\n<li>Fixed <tt>Errors</tt> class to use the more obtuse <tt>__getattr__</tt>\noverride; this fixes an issue where an attribute lookup of\n<tt>__class__</tt> would fail. [malthe]</li>\n<li>Added <tt>required</tt> decorator for field types; when we wrap a type\nwith this decorator, inputs that do not validate (even the trivial\ninput of the empty string) are given the input value as-is. Compare\nthis to an optional field (the default setting) where the empty\nstring will be interpreted as a non-input (unless it\u2019s a string type\nor another type which will accept the empty string). [malthe]</li>\n<li>Add __contains__/has_key support to the Error class. [wichert]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.4.2 (2009-09-14)</h3>\n<ul>\n<li>Added <tt>any</tt> builtin fallback. [malthe]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.4.1 (2009-07-31)</h3>\n<ul>\n<li>Added defaultdict emulation class. [malthe]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.4 (2009-07-29)</h3>\n<ul>\n<li>The selected action, if any, is available in the <tt>action</tt>\nattribute of a form instance. [malthe]</li>\n<li>Even if form input does not validate, the input is available as-is\nin the <tt>data</tt> dictionary. [malthe, rnix]</li>\n<li>Request parameters can now be provided directly as the <tt>params</tt>\nkeyword argument. [malthe]</li>\n<li>Added <tt>get</tt> method to errors dictionary. [malthe]</li>\n<li>Errors can now be compared with each other to see if they are the\nsame. This makes it easier to test without doctest.</li>\n<li>Made the truth test for the errors object check just for messages in\nitself or it\u2019s sub errors. This avoids having the errors object\nsaying it is true after accessing a key for which no error exists\n(thus creating a new errors object). [jvloothuis]</li>\n<li>Changed the base class of errors from unicode to object. This makes\nit behave like one would expect when printing etc. [jvloothuis]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.3.2 (2009-03-09)</h3>\n<ul>\n<li>Shedding unused dependency on \u2018zope.interface\u2019 [jvloothuis]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.3.1 (2008-10-27)</h3>\n<ul>\n<li>Make it possible to set <cite>prefix</cite> as class attribute. [malthe]</li>\n<li>Fixed issue where action parameters would not get set. [malthe]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.3 (2008-10-27)</h3>\n<ul>\n<li>Marshalled data is no longer applied when no parameters are\navailable from the request. [malthe]</li>\n<li>Made the <cite>errors</cite>-object subclass unicode instead of defaultdict and\nimplemented custom string representation function which concatenates\nerror messages. [malthe]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.2 (2008-10-19)</h3>\n<ul>\n<li>Created/improved the abilities for custom validation. [jvloothuis]</li>\n<li>Added form action support. [malthe]</li>\n<li>Reworked marshalling code to handle dynamic dictionary\nkeys. [malthe]</li>\n<li>Implemented form data object which facilities the form processing\nflow from applying the request to committing changes to a context\nobject. [malthe]</li>\n<li>Integrated the converter into the <tt>form</tt> module. [seletz]</li>\n<li>Added <tt>ValidationErrors</tt> object, which evaluates to True if validation\nerrors occured. [seletz]</li>\n<li>Added <tt>unicode</tt> converter. [seletz]</li>\n<li>Added <tt>converter</tt> module to support converting and validating request\nparameters sent by a form. [seletz]</li>\n<li>Added logic to allow registering and acquiring template API\ncomponents from templates. [malthe]</li>\n<li>Changed the Skin Template View to be a class, and added a minimal\ninterface ISkinTemplate to access the template path [seletz]</li>\n<li>Fixed a bug where we did not tear down the tests correctly [seletz]</li>\n<li>Fixed bug where the INewRequest event handler would call\ntemplates when checking for their existence [seletz]</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.1 (2008-09-25)</h3>\n<ul>\n<li>Initial release [malthe]</li>\n<li>Added support to dynamically register templates if they\nare added to a registered template directory [seletz]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 798817, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "3c8db3ec8aef5febacaca5e68e06f0ed", "sha256": "9dfa4d42435b306aac739140cc8742c4ad9f5c1e15ca1281dfb597a2b76ebc72"}, "downloads": -1, "filename": "repoze.formapi-0.2.tar.gz", "has_sig": false, "md5_digest": "3c8db3ec8aef5febacaca5e68e06f0ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14529, "upload_time": "2008-10-19T16:32:36", "upload_time_iso_8601": "2008-10-19T16:32:36Z", "url": "https://files.pythonhosted.org/packages/86/b1/df70fda270af8585a6b968d83688c06667d01677bcd0178780291316f0ef/repoze.formapi-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "ef6610491a186ebc9261b1b1479c8106", "sha256": "d4ee2109cb8b45f4f27df788578585c42717267844bd51710ad5869994cb41ee"}, "downloads": -1, "filename": "repoze.formapi-0.3.tar.gz", "has_sig": false, "md5_digest": "ef6610491a186ebc9261b1b1479c8106", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16570, "upload_time": "2008-10-29T09:11:19", "upload_time_iso_8601": "2008-10-29T09:11:19Z", "url": "https://files.pythonhosted.org/packages/88/34/ec994135b1a8e73aee794e8d10c911e414a564efe1c76359970151ee7b04/repoze.formapi-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2ecb82bef5d06b1e14fa926da1f438b9", "sha256": "93a6103e1389276d35bdd678bf836c24ceafceac2e10cace838bf72f32bc028f"}, "downloads": -1, "filename": "repoze.formapi-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2ecb82bef5d06b1e14fa926da1f438b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16638, "upload_time": "2008-12-05T15:20:52", "upload_time_iso_8601": "2008-12-05T15:20:52Z", "url": "https://files.pythonhosted.org/packages/b7/f8/ce30d14861ef2897f9d3ed8f5ca92536b743970da9215ff5039fc806839c/repoze.formapi-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "79693e6a2fdd698d3eae0a03813b7209", "sha256": "4ebcec37faeb7a234c247e0d707183e39d0587372b62c677a4185d8c21e19e2c"}, "downloads": -1, "filename": "repoze.formapi-0.3.2.tar.gz", "has_sig": false, "md5_digest": "79693e6a2fdd698d3eae0a03813b7209", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16647, "upload_time": "2009-03-09T08:00:37", "upload_time_iso_8601": "2009-03-09T08:00:37.152601Z", "url": "https://files.pythonhosted.org/packages/03/f1/eb796be317c126b4390b6daa940793e0bbe7846e55627390213f0e6c04c8/repoze.formapi-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "054597fb588ef1c600e231486c7b0c6a", "sha256": "2c5d7c291ba7849094ca32a318b278cb640d28a9bf73cfae70a489e8c8509f69"}, "downloads": -1, "filename": "repoze.formapi-0.4.tar.gz", "has_sig": false, "md5_digest": "054597fb588ef1c600e231486c7b0c6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28235, "upload_time": "2009-07-29T10:04:54", "upload_time_iso_8601": "2009-07-29T10:04:54.232311Z", "url": "https://files.pythonhosted.org/packages/1b/e1/9b0afa16349114296514d35eafb8a486ce798f777b1ccb59a983d7daf3a7/repoze.formapi-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "054bb20779434b265319093a06f19a70", "sha256": "75dbb7be75f598af698405b149d343206c71f3779da864790fa72772aac853ae"}, "downloads": -1, "filename": "repoze.formapi-0.4.1.tar.gz", "has_sig": false, "md5_digest": "054bb20779434b265319093a06f19a70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28583, "upload_time": "2009-07-31T13:59:14", "upload_time_iso_8601": "2009-07-31T13:59:14.744700Z", "url": "https://files.pythonhosted.org/packages/19/2e/7a58d1925bb9f48d9a9e12bdace3a7aa6cf10a5df8755eaf90e56cc94a50/repoze.formapi-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "4ecb22a44f6ea593a6ad756f9e428cec", "sha256": "f8df8bf0638057c776264e6c432dc0f4e8541408c29bb05130d6945c7dfd3bda"}, "downloads": -1, "filename": "repoze.formapi-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4ecb22a44f6ea593a6ad756f9e428cec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28659, "upload_time": "2009-09-14T14:08:07", "upload_time_iso_8601": "2009-09-14T14:08:07.039519Z", "url": "https://files.pythonhosted.org/packages/8d/64/3ed3e4c3ec67d4e4916f8acf72bfabdee2769fa131470b509482db45068f/repoze.formapi-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "64066d4becf8dfe3b2df207bfea2f398", "sha256": "9c9e3aa1e1173432f2fc709482e346064eba89c69fea8241db20327a964ee055"}, "downloads": -1, "filename": "repoze.formapi-0.5.0.tar.gz", "has_sig": false, "md5_digest": "64066d4becf8dfe3b2df207bfea2f398", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30439, "upload_time": "2010-05-28T05:49:16", "upload_time_iso_8601": "2010-05-28T05:49:16.527230Z", "url": "https://files.pythonhosted.org/packages/85/9a/42d1de6793f2eba6545ba0a797784aee24cf4861bd2c25b5a832673b6281/repoze.formapi-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "26118951a29d0b3f802d591f45804b1c", "sha256": "c2db6b51b8506f9300dd0035dbcb1de93ad508cdec2c91643653614d332900b2"}, "downloads": -1, "filename": "repoze.formapi-0.5.1.tar.gz", "has_sig": false, "md5_digest": "26118951a29d0b3f802d591f45804b1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34444, "upload_time": "2012-11-16T14:28:37", "upload_time_iso_8601": "2012-11-16T14:28:37.167361Z", "url": "https://files.pythonhosted.org/packages/9d/4d/228661ed39ec361036e01d9de747410c5e14ec82b7cabc117d3b514eb455/repoze.formapi-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "15028e812c13e5efb233bbea84c9fd03", "sha256": "3324486e6d7a85c4cd9b60d7deae1b49bfd3473a78e66f737a011ff031cacca7"}, "downloads": -1, "filename": "repoze.formapi-0.5.2.tar.gz", "has_sig": false, "md5_digest": "15028e812c13e5efb233bbea84c9fd03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34540, "upload_time": "2012-11-19T10:52:15", "upload_time_iso_8601": "2012-11-19T10:52:15.933729Z", "url": "https://files.pythonhosted.org/packages/d7/b2/748401961fb1941d14c8c9c97854a42d2f8b87e85e547cfa00a29a3d957d/repoze.formapi-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "5680bab5aff1c941724dcd1f92848602", "sha256": "f914ba9c26f56d116f263bab09bb7f6f727337df42d96d4d8c58f1ff956c05fd"}, "downloads": -1, "filename": "repoze.formapi-0.5.3.tar.gz", "has_sig": false, "md5_digest": "5680bab5aff1c941724dcd1f92848602", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35293, "upload_time": "2012-11-23T13:59:02", "upload_time_iso_8601": "2012-11-23T13:59:02.356033Z", "url": "https://files.pythonhosted.org/packages/f8/a9/411c635631a158a8dfb26fc3c1730332febbb8e60d9b11ebfd5a37ee48a0/repoze.formapi-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "f606b80ebf15b8b3df3cc5a50b1ccbfd", "sha256": "a98bae35dbb3233499bbc6b1455c13b3fa899ca426d9297bfa4af9fc145eb731"}, "downloads": -1, "filename": "repoze.formapi-0.5.4.tar.gz", "has_sig": false, "md5_digest": "f606b80ebf15b8b3df3cc5a50b1ccbfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35572, "upload_time": "2012-12-04T14:17:08", "upload_time_iso_8601": "2012-12-04T14:17:08.957686Z", "url": "https://files.pythonhosted.org/packages/c1/c2/e8889565eb7a15ff908385ae6169a5443c1bf3a6dc5ebca3cb0a2da6a649/repoze.formapi-0.5.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "aaf64513f676b9d97f073df11a920c01", "sha256": "25bdc1847570aa586b175b1fd324e09a3b145f1a1e5b37572c6a0d2646d67c4c"}, "downloads": -1, "filename": "repoze.formapi-0.6.tar.gz", "has_sig": false, "md5_digest": "aaf64513f676b9d97f073df11a920c01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36281, "upload_time": "2012-12-10T10:38:35", "upload_time_iso_8601": "2012-12-10T10:38:35.570498Z", "url": "https://files.pythonhosted.org/packages/1f/94/28d4c30240420bdf48660a06a9eec7c27258eb754cf1454f533a8bbb3f64/repoze.formapi-0.6.tar.gz", "yanked": false}], "0.6-dev": [], "0.6.1": [{"comment_text": "", "digests": {"md5": "d3ebbf7448c8244882e0f2cf6db88fe0", "sha256": "c58230977ffc879640f6c2ae61d942b66356d92dbf9c07ace6e2a7e24f8a2cc7"}, "downloads": -1, "filename": "repoze.formapi-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d3ebbf7448c8244882e0f2cf6db88fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37266, "upload_time": "2012-12-10T14:28:13", "upload_time_iso_8601": "2012-12-10T14:28:13.326948Z", "url": "https://files.pythonhosted.org/packages/c7/4c/afe685c01925b5b60cf016373238403a69d310af89e90f34296f907fb37e/repoze.formapi-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d3ebbf7448c8244882e0f2cf6db88fe0", "sha256": "c58230977ffc879640f6c2ae61d942b66356d92dbf9c07ace6e2a7e24f8a2cc7"}, "downloads": -1, "filename": "repoze.formapi-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d3ebbf7448c8244882e0f2cf6db88fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37266, "upload_time": "2012-12-10T14:28:13", "upload_time_iso_8601": "2012-12-10T14:28:13.326948Z", "url": "https://files.pythonhosted.org/packages/c7/4c/afe685c01925b5b60cf016373238403a69d310af89e90f34296f907fb37e/repoze.formapi-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:26 2020"}