{"info": {"author": "Paul Joseph Davis", "author_email": "davisp@neb.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Import as usual\n---------------\n\n    >>> import nebseq\n\nReverse complements\n-------------------\n\nThe only note here is that `revcomp` does not check the input\nsequence to see if it looks like DNA or RNA. \n\n    >>> nebseq.revcomp('ACGT')\n    'ACGT'\n    >>> nebseq.revcomp('TTACC')\n    'GGTAA'\n\nAnd if we give it garbage it just gives us garbage back.\n    \n    >>> nebseq.revcomp('ZQ')\n    'QZ'\n\nTranslation\n-----------\n\nThe translation function should allow for full support of sequence\ntranslation. This includes things like trimming the first couple\nbases and using alternate translation tables. There is also\nsupport for the more esoteric post translational modifications\nthat can be found in some Genbank files as well as translating\npartial peptides (for things like fuzzy coordinates).\n\nBasic translation:\n\n    >>> nebseq.translate('TTGGCCAAGGAACGA', table=11)\n    'MAKER'\n\nShowing the effects of a partial peptide translation. By default\nthe first codon should be a start codon according to the selected\ntranslation table, if not then its converted to an 'X'\n\n    >>> nebseq.translate('GCCAAG')\n    'XK'\n    >>> nebseq.translate('GCCAAG', partial=True)\n    'AK'\n\nOr we can remove the first couple of bases for fuzzy coordinates.\n\n    >>> nebseq.translate('TTGCCAAG', start=2, partial=True)\n    'AK'\n\nModifications are specified as an (index, amino_acid) two-tuple. Notice\nthat modification indexes are specified as one-based indexes into the\namino acid sequence.\n\n    >>> nebseq.translate('ATGAAGGAA', modifications=[(2, 'U')])\n    'MUE'\n\nExtraction\n----------\n\nSequence extraction is for when you want to slice out part of a larger\nsequence. This is useful if you use the `nebgb` module and its\ndefinition of locations parsed from strings like `join(1..5,9..100)`.\n\n    >>> location = {'type': 'span', 'from': 4, 'to': 10}\n    >>> nebseq.extract('ACCGTACCATAGTT', location)\n    ('GTACCAT', (False, False))\n    >>> location = {\n    ...     \"type\": \"complement\",\n    ...     \"segment\": {\n    ...         \"type\": \"join\",\n    ...         \"segments\": [\n    ...             {\"type\": \"span\", \"from\": 3, \"to\": 8},\n    ...             {\"type\": \"span\", \"from\": 10, \"to\": 14}\n    ...         ]\n    ...     }\n    ... }\n    >>> nebseq.extract('ACCGTATTTCGGGGACAT', location)\n    ('CCCCGAATACG', (False, False))", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/davisp/nebseq", "keywords": "bioinformatics sequence reverse-complement translation", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "nebseq", "package_url": "https://pypi.org/project/nebseq/", "platform": "any", "project_url": "https://pypi.org/project/nebseq/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/davisp/nebseq"}, "release_url": "https://pypi.org/project/nebseq/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Basic Biological Sequence Manipulations", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"import-as-usual\">\n<h2>Import as usual</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; import nebseq\n</pre>\n</blockquote>\n</div>\n<div id=\"reverse-complements\">\n<h2>Reverse complements</h2>\n<p>The only note here is that <cite>revcomp</cite> does not check the input\nsequence to see if it looks like DNA or RNA.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.revcomp('ACGT')\n'ACGT'\n&gt;&gt;&gt; nebseq.revcomp('TTACC')\n'GGTAA'\n</pre>\n</blockquote>\n<p>And if we give it garbage it just gives us garbage back.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.revcomp('ZQ')\n'QZ'\n</pre>\n</blockquote>\n</div>\n<div id=\"translation\">\n<h2>Translation</h2>\n<p>The translation function should allow for full support of sequence\ntranslation. This includes things like trimming the first couple\nbases and using alternate translation tables. There is also\nsupport for the more esoteric post translational modifications\nthat can be found in some Genbank files as well as translating\npartial peptides (for things like fuzzy coordinates).</p>\n<p>Basic translation:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.translate('TTGGCCAAGGAACGA', table=11)\n'MAKER'\n</pre>\n</blockquote>\n<p>Showing the effects of a partial peptide translation. By default\nthe first codon should be a start codon according to the selected\ntranslation table, if not then its converted to an \u2018X\u2019</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.translate('GCCAAG')\n'XK'\n&gt;&gt;&gt; nebseq.translate('GCCAAG', partial=True)\n'AK'\n</pre>\n</blockquote>\n<p>Or we can remove the first couple of bases for fuzzy coordinates.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.translate('TTGCCAAG', start=2, partial=True)\n'AK'\n</pre>\n</blockquote>\n<p>Modifications are specified as an (index, amino_acid) two-tuple. Notice\nthat modification indexes are specified as one-based indexes into the\namino acid sequence.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; nebseq.translate('ATGAAGGAA', modifications=[(2, 'U')])\n'MUE'\n</pre>\n</blockquote>\n</div>\n<div id=\"extraction\">\n<h2>Extraction</h2>\n<p>Sequence extraction is for when you want to slice out part of a larger\nsequence. This is useful if you use the <cite>nebgb</cite> module and its\ndefinition of locations parsed from strings like <cite>join(1..5,9..100)</cite>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; location = {'type': 'span', 'from': 4, 'to': 10}\n&gt;&gt;&gt; nebseq.extract('ACCGTACCATAGTT', location)\n('GTACCAT', (False, False))\n&gt;&gt;&gt; location = {\n...     \"type\": \"complement\",\n...     \"segment\": {\n...         \"type\": \"join\",\n...         \"segments\": [\n...             {\"type\": \"span\", \"from\": 3, \"to\": 8},\n...             {\"type\": \"span\", \"from\": 10, \"to\": 14}\n...         ]\n...     }\n... }\n&gt;&gt;&gt; nebseq.extract('ACCGTATTTCGGGGACAT', location)\n('CCCCGAATACG', (False, False))\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 795221, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4fc143ac6e2d8607ca2b55a4e0d322f0", "sha256": "2bf22bf3c861224e694935fecdffeab0067bef0a75ebc441cf534d84bbc20f14"}, "downloads": -1, "filename": "nebseq-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4fc143ac6e2d8607ca2b55a4e0d322f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7149, "upload_time": "2009-07-05T04:59:03", "upload_time_iso_8601": "2009-07-05T04:59:03.262339Z", "url": "https://files.pythonhosted.org/packages/63/05/165b8338107b0416f1bd643d7ae9aba1085604cafb44e48c6330197ef698/nebseq-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "455abb62956b5695c948ac5f2e626890", "sha256": "eb1305ab4e6ebbee4ab9e60c1bbc6378c9e2867e9152ee5cab1b38ff43ed6b62"}, "downloads": -1, "filename": "nebseq-0.0.2.tar.gz", "has_sig": false, "md5_digest": "455abb62956b5695c948ac5f2e626890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10428, "upload_time": "2009-08-14T19:08:11", "upload_time_iso_8601": "2009-08-14T19:08:11.467756Z", "url": "https://files.pythonhosted.org/packages/7f/fe/2fff040bd2a09a36ffbc3e2bc0c9d464c7a1afe44483d240f2f5afe57e3d/nebseq-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "455abb62956b5695c948ac5f2e626890", "sha256": "eb1305ab4e6ebbee4ab9e60c1bbc6378c9e2867e9152ee5cab1b38ff43ed6b62"}, "downloads": -1, "filename": "nebseq-0.0.2.tar.gz", "has_sig": false, "md5_digest": "455abb62956b5695c948ac5f2e626890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10428, "upload_time": "2009-08-14T19:08:11", "upload_time_iso_8601": "2009-08-14T19:08:11.467756Z", "url": "https://files.pythonhosted.org/packages/7f/fe/2fff040bd2a09a36ffbc3e2bc0c9d464c7a1afe44483d240f2f5afe57e3d/nebseq-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:38 2020"}