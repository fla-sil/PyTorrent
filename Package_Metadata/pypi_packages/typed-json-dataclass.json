{"info": {"author": "Aaron", "author_email": "AaronBatilo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# typed_json_dataclass\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4344420de20b4262a4912d81cb28d175)](https://www.codacy.com/app/abatilo/typed-json-dataclass?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=abatilo/typed-json-dataclass&amp;utm_campaign=Badge_Grade)\n[![Actions Status](https://wdp9fww0r9.execute-api.us-west-2.amazonaws.com/production/badge/abatilo/typed-json-dataclass?style=flat)](https://wdp9fww0r9.execute-api.us-west-2.amazonaws.com/production/badge/abatilo/typed-json-dataclass?branch=master)\n[![codecov](https://codecov.io/gh/abatilo/typed-json-dataclass/branch/master/graph/badge.svg)](https://codecov.io/gh/abatilo/typed-json-dataclass)\n[![PyPI status](https://img.shields.io/pypi/status/typed_json_dataclass.svg)](https://pypi.python.org/pypi/typed_json_dataclass/)\n[![PyPI version](https://badge.fury.io/py/typed-json-dataclass.svg)](https://badge.fury.io/py/typed-json-dataclass)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/typed-json-dataclass.svg)](https://pypi.python.org/pypi/typed-json-dataclass/)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/typed-json-dataclass.svg)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\n`typed_json_dataclass` is a library that augments the Python3.7\n[dataclass](https://docs.python.org/3/library/dataclasses.html) feature in two\nmajor ways:\n1. Add a way to recursively grab class dictionary definitions, thus making your\n   dataclass JSON serializable\n2. Add a light amount of type validation to your dataclasses, so that you can\n   validate that the JSON you're being given matches the data types that you're\n   expecting.\n\nBy expressing your data as dataclasses, and by having your incoming data\nvalidated as it is received, you can easily implement the [Data Transfer Object\n(DTO)](https://martinfowler.com/eaaCatalog/dataTransferObject.html) pattern in\nyour Python code.\n\nThis library can be thought of as a combination of\n[attrs](https://github.com/python-attrs/attrs),\n[cattrs](https://github.com/Tinche/cattrs), and\n[marshamllow](https://github.com/marshmallow-code/marshmallow)\n\n## Getting Started\n\nInstall the library from PyPI:\n```\npip install typed_json_dataclass\n```\n\nUse the dataclass decorator just like normal, but add the `TypedJsonMixin` from\nthis library, to your class definition. This will add 4 new methods to all of your dataclasses:\n1. from_dict()\n```python\n@classmethod\ndef from_dict(cls, raw_dict, *, mapping_mode=MappingMode.NoMap):\n    \"\"\"Given a python dict, create an instance of the implementing class.\n\n    :raw_dict: A dictionary that represents the DTO to create\n    :mapping_mode: Format for properties\n    :returns: Returns an instance of the DTO, instantiated via the dict\n    \"\"\"\n```\n2. from_json()\n```python\n@classmethod\ndef from_json(cls, raw_json, *, mapping_mode=MappingMode.NoMap):\n    \"\"\"Given a raw json string, create an instance of the implementing class.\n\n    :raw_json: A json string that represents the DTO to create\n    :mapping_mode: Format for properties\n    :returns: Returns an instance of the DTO, instantiated via the json\n    \"\"\"\n```\n3. to_dict()\n```python\ndef to_dict(self, *, keep_none=False, mapping_mode=MappingMode.NoMap, warn_on_initvar=True):\n    \"\"\"Express the DTO as a dictionary.\n\n    :keep_none: Filter keys that are None\n    :mapping_mode: Format for properties\n    :warn_on_initvar: Emit a warning if the instance contains non-default\n                      init-only variables.\n    :returns: Returns the instantiated DTO as a dictionary\n    \"\"\"\n```\n4. to_json()\n```python\ndef to_json(self, *, keep_none=False, mapping_mode=MappingMode.NoMap, warn_on_initvar=True):\n    \"\"\"Express the DTO as a json string.\n\n    :keep_none: Filter keys that are None\n    :mapping_mode: Format for properties\n    :warn_on_initvar: Emit a warning if the instance contains non-default\n                      init-only variables.\n    :returns: Returns the instantiated DTO as a json string\n    \"\"\"\n```\n\n## Examples\n\n### Converting your dataclass to a JSON serializable format\n```python\nfrom typing import List\nfrom dataclasses import dataclass\nfrom typed_json_dataclass import TypedJsonMixin\n\n@dataclass\nclass Person(TypedJsonMixin):\n    name: str\n    age: int\n\n@dataclass\nclass Family(TypedJsonMixin):\n    people: List[Person]\n\nbob = Person(name='Bob', age=24)\nalice = Person(name='Alice', age=32)\nfamily = Family(people=[bob, alice])\n\nprint(family.to_json())\n# => {\"people\": [{\"name\": \"Bob\", \"age\": 24}, {\"name\": \"Alice\", \"age\": 32}]}\n```\n\n\nIf your data doesn't match the type definitions, you'll get a helpful error:\n```python\nfrom dataclasses import dataclass\nfrom typed_json_dataclass import TypedJsonMixin\n\n@dataclass\nclass Person(TypedJsonMixin):\n    name: str\n    age: int\n\nrequest_data = '{\"name\":\"Bob\",\"age\":\"24\"}'\n\nbob = Person.from_json(request_data)\n# => TypeError: Person.age is expected to be <class 'int'>, but value 24 with type <class 'str'> was found instead\n```\n\nAnd you can parse data from a Python `dict` as well. Just use the `.from_dict()` function instead:\n```python\nfrom dataclasses import dataclass\nfrom typed_json_dataclass import TypedJsonMixin\n\n@dataclass\nclass Person(TypedJsonMixin):\n    name: str\n    age: int\n\nrequest_data_as_dict = {\n    'name': 'Alice',\n    'age': '32'\n}\n\nalice = Person.from_dict(request_data_as_dict)\n# => TypeError: Person.age is expected to be <class 'int'>, but value 32 with type <class 'str'> was found instead\n```\n\n### Setting a mapping_mode for auto mapping\n```python\nfrom dataclasses import dataclass\nfrom typed_json_dataclass import TypedJsonMixin, MappingMode\n\n@dataclass\nclass Person(TypedJsonMixin):\n    person_name: str\n    person_age: int\n\nrequest_data_as_dict = {\n    'personName': 'Alice',\n    'personAge': 32\n}\n\nalice = Person.from_dict(request_data_as_dict, mapping_mode=MappingMode.SnakeCase)\n# => Person(person_name='Alice', person_age=32)\n```\n\nThis mapping mode is useful for when you get requests that have the JSON in a\ncamel case format, but you want your objects to be snake case and stay PEP8\ncompliant.\n\n## Limitations and Caveats\n\n### Dataclasses with init-only variables\n\nSupport for dataclasses with [init-only variables](https://docs.python.org/3/library/dataclasses.html#init-only-variables)\nis limited. Although `to_dict` and `to_json` will convert the dataclass, the\nresulting dict or JSON string will not contain the init-only variables, since\ntheir values are not available after initialization. This also means that such\ndataclasses cannot later be instantiated from a dict or JSON string, since the\ninit-only variables are a required parameter in the dataclass' `__init__`\nmethod. `TypedJsonMixin` detects the usage of dataclasses with init-only\nvariables, emits a warning when it is converted to a dict or JSON string, and\nrefuses to instantiate a dataclass with init-only variables.\n\nA first workaround consists of providing a default value to the init-only\nvariables:\n\n```python\n@dataclass\nclass Person(TypedJsonMixin):\n    person_name: InitVar[str] = ''\n    person_first_name: str = ''\n    person_last_name: str = ''\n\n    def __post_init__(self, person_name):\n        if person_name:\n            # Instantiated directly\n            self.person_first_name, self.person_last_name = person_name.split()\n        # Call TypedJsonMixin __post_init__ method\n        super().__post_init__()\n```\n**Note**: Instantiations without arguments, such as `Person()`, are now\npossible, although the created instance would then be invalid.\n\nThe second workaround is to remove init-only variables from the dataclass, and\nperform the `__post_init__` instantiation using a class method instead:\n\n```python\n@dataclass\nclass Person(TypedJsonMixin):\n    person_first_name: str\n    person_last_name: str\n\n    @classmethod\n    def create(cls, person_name):\n        first_name, last_name = person_name.split()\n        cls(first_name, last_name)\n```\n\nFinally, if the dataclass is not meant to ever be instantiated from a dict or\nJSON string, and only the `to_dict` or `to_json` methods are called, the\nwarnings can be suppressed by passing `warn_on_initvar=False` as a keyword\nargument in the method call.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/abatilo/typed_json_dataclass", "keywords": "dataclasses,dataclass,json,mypy,pyre,marshmallow,attrs,cattrs", "license": "MIT", "maintainer": "Aaron", "maintainer_email": "AaronBatilo@gmail.com", "name": "typed-json-dataclass", "package_url": "https://pypi.org/project/typed-json-dataclass/", "platform": "", "project_url": "https://pypi.org/project/typed-json-dataclass/", "project_urls": {"Homepage": "http://github.com/abatilo/typed_json_dataclass", "Repository": "http://github.com/abatilo/typed_json_dataclass"}, "release_url": "https://pypi.org/project/typed-json-dataclass/1.2.1/", "requires_dist": ["flake8-tuple (>=0.4.0,<0.5.0)"], "requires_python": ">=3.7,<4.0", "summary": "Make your dataclasses automatically validate their types", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>typed_json_dataclass</h1>\n<p><a href=\"https://www.codacy.com/app/abatilo/typed-json-dataclass?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=abatilo/typed-json-dataclass&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1618604206b3a32bc84127b9b07173e46e6c4986/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3433343434323064653230623432363261343931326438316362323864313735\"></a>\n<a href=\"https://wdp9fww0r9.execute-api.us-west-2.amazonaws.com/production/badge/abatilo/typed-json-dataclass?branch=master\" rel=\"nofollow\"><img alt=\"Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/836085cf78d6a8148765e2d0afd7320fe0fa5521/68747470733a2f2f776470396677773072392e657865637574652d6170692e75732d776573742d322e616d617a6f6e6177732e636f6d2f70726f64756374696f6e2f62616467652f61626174696c6f2f74797065642d6a736f6e2d64617461636c6173733f7374796c653d666c6174\"></a>\n<a href=\"https://codecov.io/gh/abatilo/typed-json-dataclass\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb0acee37815a0246b809c22d5a2ae628d7ed70b/68747470733a2f2f636f6465636f762e696f2f67682f61626174696c6f2f74797065642d6a736f6e2d64617461636c6173732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/typed_json_dataclass/\" rel=\"nofollow\"><img alt=\"PyPI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e99fb70eb9bbec746a20624bfa866b745b89bef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f74797065645f6a736f6e5f64617461636c6173732e737667\"></a>\n<a href=\"https://badge.fury.io/py/typed-json-dataclass\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d6dcaf9c11d12ed272285ab0f4225043e116644/68747470733a2f2f62616467652e667572792e696f2f70792f74797065642d6a736f6e2d64617461636c6173732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/typed-json-dataclass/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83f8d8c12c704cfdc1df394ad35787be6c0f45de/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74797065642d6a736f6e2d64617461636c6173732e737667\"></a>\n<img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe07121f2e9de9f2ead52ddbc4ed6e042be4df01/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f74797065642d6a736f6e2d64617461636c6173732e737667\">\n<a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/273c229cce783df6c95a151db83b1f00cf93b97c/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e737667\"></a></p>\n<p><code>typed_json_dataclass</code> is a library that augments the Python3.7\n<a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">dataclass</a> feature in two\nmajor ways:</p>\n<ol>\n<li>Add a way to recursively grab class dictionary definitions, thus making your\ndataclass JSON serializable</li>\n<li>Add a light amount of type validation to your dataclasses, so that you can\nvalidate that the JSON you're being given matches the data types that you're\nexpecting.</li>\n</ol>\n<p>By expressing your data as dataclasses, and by having your incoming data\nvalidated as it is received, you can easily implement the <a href=\"https://martinfowler.com/eaaCatalog/dataTransferObject.html\" rel=\"nofollow\">Data Transfer Object\n(DTO)</a> pattern in\nyour Python code.</p>\n<p>This library can be thought of as a combination of\n<a href=\"https://github.com/python-attrs/attrs\" rel=\"nofollow\">attrs</a>,\n<a href=\"https://github.com/Tinche/cattrs\" rel=\"nofollow\">cattrs</a>, and\n<a href=\"https://github.com/marshmallow-code/marshmallow\" rel=\"nofollow\">marshamllow</a></p>\n<h2>Getting Started</h2>\n<p>Install the library from PyPI:</p>\n<pre><code>pip install typed_json_dataclass\n</code></pre>\n<p>Use the dataclass decorator just like normal, but add the <code>TypedJsonMixin</code> from\nthis library, to your class definition. This will add 4 new methods to all of your dataclasses:</p>\n<ol>\n<li>from_dict()</li>\n</ol>\n<pre><span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_dict</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">raw_dict</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">mapping_mode</span><span class=\"o\">=</span><span class=\"n\">MappingMode</span><span class=\"o\">.</span><span class=\"n\">NoMap</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Given a python dict, create an instance of the implementing class.</span>\n\n<span class=\"sd\">    :raw_dict: A dictionary that represents the DTO to create</span>\n<span class=\"sd\">    :mapping_mode: Format for properties</span>\n<span class=\"sd\">    :returns: Returns an instance of the DTO, instantiated via the dict</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<ol>\n<li>from_json()</li>\n</ol>\n<pre><span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">raw_json</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">mapping_mode</span><span class=\"o\">=</span><span class=\"n\">MappingMode</span><span class=\"o\">.</span><span class=\"n\">NoMap</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Given a raw json string, create an instance of the implementing class.</span>\n\n<span class=\"sd\">    :raw_json: A json string that represents the DTO to create</span>\n<span class=\"sd\">    :mapping_mode: Format for properties</span>\n<span class=\"sd\">    :returns: Returns an instance of the DTO, instantiated via the json</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<ol>\n<li>to_dict()</li>\n</ol>\n<pre><span class=\"k\">def</span> <span class=\"nf\">to_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">keep_none</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">mapping_mode</span><span class=\"o\">=</span><span class=\"n\">MappingMode</span><span class=\"o\">.</span><span class=\"n\">NoMap</span><span class=\"p\">,</span> <span class=\"n\">warn_on_initvar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Express the DTO as a dictionary.</span>\n\n<span class=\"sd\">    :keep_none: Filter keys that are None</span>\n<span class=\"sd\">    :mapping_mode: Format for properties</span>\n<span class=\"sd\">    :warn_on_initvar: Emit a warning if the instance contains non-default</span>\n<span class=\"sd\">                      init-only variables.</span>\n<span class=\"sd\">    :returns: Returns the instantiated DTO as a dictionary</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<ol>\n<li>to_json()</li>\n</ol>\n<pre><span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">keep_none</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">mapping_mode</span><span class=\"o\">=</span><span class=\"n\">MappingMode</span><span class=\"o\">.</span><span class=\"n\">NoMap</span><span class=\"p\">,</span> <span class=\"n\">warn_on_initvar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Express the DTO as a json string.</span>\n\n<span class=\"sd\">    :keep_none: Filter keys that are None</span>\n<span class=\"sd\">    :mapping_mode: Format for properties</span>\n<span class=\"sd\">    :warn_on_initvar: Emit a warning if the instance contains non-default</span>\n<span class=\"sd\">                      init-only variables.</span>\n<span class=\"sd\">    :returns: Returns the instantiated DTO as a json string</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h2>Examples</h2>\n<h3>Converting your dataclass to a JSON serializable format</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typed_json_dataclass</span> <span class=\"kn\">import</span> <span class=\"n\">TypedJsonMixin</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Family</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">people</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Person</span><span class=\"p\">]</span>\n\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Bob'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">Family</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">alice</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">())</span>\n<span class=\"c1\"># =&gt; {\"people\": [{\"name\": \"Bob\", \"age\": 24}, {\"name\": \"Alice\", \"age\": 32}]}</span>\n</pre>\n<p>If your data doesn't match the type definitions, you'll get a helpful error:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typed_json_dataclass</span> <span class=\"kn\">import</span> <span class=\"n\">TypedJsonMixin</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">request_data</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"name\":\"Bob\",\"age\":\"24\"}'</span>\n\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">request_data</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; TypeError: Person.age is expected to be &lt;class 'int'&gt;, but value 24 with type &lt;class 'str'&gt; was found instead</span>\n</pre>\n<p>And you can parse data from a Python <code>dict</code> as well. Just use the <code>.from_dict()</code> function instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typed_json_dataclass</span> <span class=\"kn\">import</span> <span class=\"n\">TypedJsonMixin</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">request_data_as_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"s1\">'32'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">request_data_as_dict</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; TypeError: Person.age is expected to be &lt;class 'int'&gt;, but value 32 with type &lt;class 'str'&gt; was found instead</span>\n</pre>\n<h3>Setting a mapping_mode for auto mapping</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typed_json_dataclass</span> <span class=\"kn\">import</span> <span class=\"n\">TypedJsonMixin</span><span class=\"p\">,</span> <span class=\"n\">MappingMode</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">person_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">person_age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">request_data_as_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'personName'</span><span class=\"p\">:</span> <span class=\"s1\">'Alice'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'personAge'</span><span class=\"p\">:</span> <span class=\"mi\">32</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">request_data_as_dict</span><span class=\"p\">,</span> <span class=\"n\">mapping_mode</span><span class=\"o\">=</span><span class=\"n\">MappingMode</span><span class=\"o\">.</span><span class=\"n\">SnakeCase</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; Person(person_name='Alice', person_age=32)</span>\n</pre>\n<p>This mapping mode is useful for when you get requests that have the JSON in a\ncamel case format, but you want your objects to be snake case and stay PEP8\ncompliant.</p>\n<h2>Limitations and Caveats</h2>\n<h3>Dataclasses with init-only variables</h3>\n<p>Support for dataclasses with <a href=\"https://docs.python.org/3/library/dataclasses.html#init-only-variables\" rel=\"nofollow\">init-only variables</a>\nis limited. Although <code>to_dict</code> and <code>to_json</code> will convert the dataclass, the\nresulting dict or JSON string will not contain the init-only variables, since\ntheir values are not available after initialization. This also means that such\ndataclasses cannot later be instantiated from a dict or JSON string, since the\ninit-only variables are a required parameter in the dataclass' <code>__init__</code>\nmethod. <code>TypedJsonMixin</code> detects the usage of dataclasses with init-only\nvariables, emits a warning when it is converted to a dict or JSON string, and\nrefuses to instantiate a dataclass with init-only variables.</p>\n<p>A first workaround consists of providing a default value to the init-only\nvariables:</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">person_name</span><span class=\"p\">:</span> <span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"n\">person_first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"n\">person_last_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">person_name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">person_name</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Instantiated directly</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">person_first_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">person_last_name</span> <span class=\"o\">=</span> <span class=\"n\">person_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Call TypedJsonMixin __post_init__ method</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">__post_init__</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Note</strong>: Instantiations without arguments, such as <code>Person()</code>, are now\npossible, although the created instance would then be invalid.</p>\n<p>The second workaround is to remove init-only variables from the dataclass, and\nperform the <code>__post_init__</code> instantiation using a class method instead:</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">TypedJsonMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">person_first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">person_last_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">person_name</span><span class=\"p\">):</span>\n        <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">person_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, if the dataclass is not meant to ever be instantiated from a dict or\nJSON string, and only the <code>to_dict</code> or <code>to_json</code> methods are called, the\nwarnings can be suppressed by passing <code>warn_on_initvar=False</code> as a keyword\nargument in the method call.</p>\n\n          </div>"}, "last_serial": 5531533, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "160fc9a1a0b085aeff4b16388b1db07f", "sha256": "9eeb46fe79f3c3fd45d6eb52f557762b3e4c4fd752480aedf0d41b76edf52d91"}, "downloads": -1, "filename": "typed_json_dataclass-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "160fc9a1a0b085aeff4b16388b1db07f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 3820, "upload_time": "2018-12-30T01:39:04", "upload_time_iso_8601": "2018-12-30T01:39:04.304186Z", "url": "https://files.pythonhosted.org/packages/26/c4/0dc581b779c25f63f92878ff9a218dc0d778f3da1979331ed8c3bab63050/typed_json_dataclass-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "688e13a0309aa8d8213bb6a55b847169", "sha256": "8314b28066a1effe4a56a9e304681274cc09397ee8bd16a2fc99ea572a518fcf"}, "downloads": -1, "filename": "typed_json_dataclass-0.0.1.tar.gz", "has_sig": false, "md5_digest": "688e13a0309aa8d8213bb6a55b847169", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 3547, "upload_time": "2018-12-30T01:39:06", "upload_time_iso_8601": "2018-12-30T01:39:06.250110Z", "url": "https://files.pythonhosted.org/packages/7a/81/077e54b32ec109577e01e55154d06bcf67ca67fe63767079f833701d5221/typed_json_dataclass-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "916ee1810b213162730cd8d07af23508", "sha256": "9880861d673908e1f4ad47fcc48a824e059eb2cb755c40ac6478fd748db9e0f2"}, "downloads": -1, "filename": "typed_json_dataclass-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "916ee1810b213162730cd8d07af23508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 6361, "upload_time": "2018-12-30T02:33:07", "upload_time_iso_8601": "2018-12-30T02:33:07.834334Z", "url": "https://files.pythonhosted.org/packages/34/35/d495495d0e07fc9a1b1297e964998fb5fd1d7f097013a14d9bbf852b9b38/typed_json_dataclass-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e89940d00a570385d0eeda493ce1b04", "sha256": "0f75c8f4170583c8451569a7cebdfcf263854e8b8678a186394dd33231c8afea"}, "downloads": -1, "filename": "typed_json_dataclass-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8e89940d00a570385d0eeda493ce1b04", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 5415, "upload_time": "2018-12-30T02:33:09", "upload_time_iso_8601": "2018-12-30T02:33:09.055650Z", "url": "https://files.pythonhosted.org/packages/24/3a/d109c2336bd1efa8288e817fb23ba7a50e08cb23bd1c78af9c185e3860f7/typed_json_dataclass-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "fb4dca4214dca4d13d268b3eb35be3c9", "sha256": "9e88096e5294b0df24673c9645868f509d83aabc065c17d87a3cf978753643d0"}, "downloads": -1, "filename": "typed_json_dataclass-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fb4dca4214dca4d13d268b3eb35be3c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 6752, "upload_time": "2018-12-30T03:59:02", "upload_time_iso_8601": "2018-12-30T03:59:02.535639Z", "url": "https://files.pythonhosted.org/packages/10/a8/0df8f4f552352c16f4d1deb409264ed5781bf6e24cf97a49516f1f5f492b/typed_json_dataclass-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "187357e826d7beaa3dbf69f41b4e89fe", "sha256": "a0c6d79e6c179e1c7fb8ef4b29d4d8806dee5d4344514901f9d15839819fcfcc"}, "downloads": -1, "filename": "typed_json_dataclass-0.1.0.tar.gz", "has_sig": false, "md5_digest": "187357e826d7beaa3dbf69f41b4e89fe", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 5875, "upload_time": "2018-12-30T03:59:03", "upload_time_iso_8601": "2018-12-30T03:59:03.926171Z", "url": "https://files.pythonhosted.org/packages/3c/f3/c272709798017293f6a7938fd27f2ec8d1f5e6484f63702fae29e88a28c9/typed_json_dataclass-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fd1c8db337afead4b98b49b73268a1df", "sha256": "577b44c3d680e468f533ecdd4f6474951c1af7a2fbb30985efa429e84e588ac3"}, "downloads": -1, "filename": "typed_json_dataclass-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fd1c8db337afead4b98b49b73268a1df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 6774, "upload_time": "2018-12-30T04:07:35", "upload_time_iso_8601": "2018-12-30T04:07:35.950179Z", "url": "https://files.pythonhosted.org/packages/9c/b2/8d683d276b7f490406c9e6f04c0e91081f75e316d274c5b5b1b2ec383ff4/typed_json_dataclass-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abe5504076c57c0b7522a82fbd757b2a", "sha256": "7f68361f97b9a8b2c39798e82afb62904414f02e89c09c3b472894c8c8a130a3"}, "downloads": -1, "filename": "typed_json_dataclass-0.1.1.tar.gz", "has_sig": false, "md5_digest": "abe5504076c57c0b7522a82fbd757b2a", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 5896, "upload_time": "2018-12-30T04:07:37", "upload_time_iso_8601": "2018-12-30T04:07:37.125195Z", "url": "https://files.pythonhosted.org/packages/8b/72/39ab790aab92173ddedd429303ad4be56cc938799f934a8dfbfa4b13add2/typed_json_dataclass-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a1c8afef1e5870984e32af4137a9f026", "sha256": "832329b563c107894c71364eccddfe6a7e948bf0019fdd75387cc56d2141da89"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a1c8afef1e5870984e32af4137a9f026", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 7785, "upload_time": "2019-01-26T18:56:21", "upload_time_iso_8601": "2019-01-26T18:56:21.700552Z", "url": "https://files.pythonhosted.org/packages/81/06/3b57d5368f9de9d587707d5fe3d6c0ad71751adefbdce01a0d69075768b6/typed_json_dataclass-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8b3d7f0c0d6c19ad1abb2c574a7cc53", "sha256": "5dd0c22360dfb55e90fc94922b9efab9e7ea0252be1acc3d2f78e7689f2b1f90"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d8b3d7f0c0d6c19ad1abb2c574a7cc53", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 7298, "upload_time": "2019-01-26T18:56:23", "upload_time_iso_8601": "2019-01-26T18:56:23.145373Z", "url": "https://files.pythonhosted.org/packages/dc/68/99605f26b8227b7ea6d4451f35cbffad4caf8d625d0e75609f66e9046bcd/typed_json_dataclass-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ed76a6d6c75c452b1f39005396595ad0", "sha256": "1061ad4148277bd2b999f03d4ad8cac4c96b4cc5106d1a66a2cc405afcd9b020"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed76a6d6c75c452b1f39005396595ad0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 7829, "upload_time": "2019-05-30T03:17:10", "upload_time_iso_8601": "2019-05-30T03:17:10.481723Z", "url": "https://files.pythonhosted.org/packages/d6/74/beba4d64bf2e484608cfe52cb04929c96ec75fadd4c5ef15c5fdc44a03d7/typed_json_dataclass-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0137de4bf48b1b06073c7484de12f33", "sha256": "15ae49797dc36fc02fac3d3fb665ce68cf3f28458a97982bcdb2b3414fe046ac"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d0137de4bf48b1b06073c7484de12f33", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 7355, "upload_time": "2019-05-30T03:17:11", "upload_time_iso_8601": "2019-05-30T03:17:11.883511Z", "url": "https://files.pythonhosted.org/packages/88/ff/3728a3b063cd53b785ae6928be28a77615d42906d19d7ce11aab040e47c1/typed_json_dataclass-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "21b09993c954956fa773477e90d206e9", "sha256": "c941157d235a9ed8e970e89e9a14e34b7b8b3ac4b810515483840d1fd8509bc0"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "21b09993c954956fa773477e90d206e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.7.*", "size": 8000, "upload_time": "2019-06-03T02:13:22", "upload_time_iso_8601": "2019-06-03T02:13:22.695337Z", "url": "https://files.pythonhosted.org/packages/af/0e/18660b9e40667535fd41834696756d45dea9f85aee6aa1ed2d8076cc3de0/typed_json_dataclass-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d32c3ee551561b4b8709616b3daf8e81", "sha256": "7488d3e37408d01904f149c09b041e53d9d535ad7fa2eafa36417d3e8dead711"}, "downloads": -1, "filename": "typed_json_dataclass-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d32c3ee551561b4b8709616b3daf8e81", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.7.*", "size": 7536, "upload_time": "2019-06-03T02:13:23", "upload_time_iso_8601": "2019-06-03T02:13:23.941783Z", "url": "https://files.pythonhosted.org/packages/1d/ca/65e877be8c1b8227f7e21e95605a4aaa4d078f7c8820c99dde4a88ebad80/typed_json_dataclass-0.2.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "af798c78989986e0df17f069824ee3c0", "sha256": "fd79e489ff208cd670eface7f7114c7cf0149db9800fdfb2b435349f261b247d"}, "downloads": -1, "filename": "typed_json_dataclass-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "af798c78989986e0df17f069824ee3c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0,<3.8.0", "size": 7848, "upload_time": "2019-06-08T23:37:15", "upload_time_iso_8601": "2019-06-08T23:37:15.701100Z", "url": "https://files.pythonhosted.org/packages/00/46/fc58c1241d01d7174387906d93f9a451598e7cdb3ffd0109c32c37d5c84a/typed_json_dataclass-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5270fb3e0f3d5be891c651eb911b52a9", "sha256": "b7ab4dcf2d7a02aadfb035dbbbdfc56f643ed8770396fb4a5f935a20f6d7c4cd"}, "downloads": -1, "filename": "typed-json-dataclass-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5270fb3e0f3d5be891c651eb911b52a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0,<3.8.0", "size": 8131, "upload_time": "2019-06-08T23:37:14", "upload_time_iso_8601": "2019-06-08T23:37:14.098459Z", "url": "https://files.pythonhosted.org/packages/59/5c/416a7a9e38eb7f2089032935cf2502ac86af666615aa29c72a6780b39c52/typed-json-dataclass-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6d4c53d1c41cc3520df09e2e3a09fde1", "sha256": "5065a493ccb844c0675bc490313ab15f483243862ffb44a26b893f17143ebca8"}, "downloads": -1, "filename": "typed_json_dataclass-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d4c53d1c41cc3520df09e2e3a09fde1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0,<3.8.0", "size": 9226, "upload_time": "2019-07-07T13:06:49", "upload_time_iso_8601": "2019-07-07T13:06:49.510869Z", "url": "https://files.pythonhosted.org/packages/ae/17/7da226e803417823585fe2611e020004ea71317de6662844e35308309cb0/typed_json_dataclass-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dab4dfd0ee81e77c81df7e3b647f626", "sha256": "69964cf52c325056c09f3c9d1f037ca45c34b6ab1b7531d40ded169bfeb7a439"}, "downloads": -1, "filename": "typed-json-dataclass-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7dab4dfd0ee81e77c81df7e3b647f626", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0,<3.8.0", "size": 11551, "upload_time": "2019-07-07T13:06:47", "upload_time_iso_8601": "2019-07-07T13:06:47.923327Z", "url": "https://files.pythonhosted.org/packages/9a/a7/a3eef047a60ea35f3952c7b48b82b2af7c19b6df313c7b02c74dab079d02/typed-json-dataclass-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "aa0cc7414880a8e4410e5bb469f1672b", "sha256": "e5d0f0e5ff1b85962920dc718ae0c02d8d4f6d66d4b8eddeef0b83a7cd09f201"}, "downloads": -1, "filename": "typed_json_dataclass-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa0cc7414880a8e4410e5bb469f1672b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0,<3.8.0", "size": 8881, "upload_time": "2019-07-07T16:42:33", "upload_time_iso_8601": "2019-07-07T16:42:33.069859Z", "url": "https://files.pythonhosted.org/packages/89/1c/a8ba53734ccf5243e18287e05be13378d7d651b9597dcac8935cdcd7d24d/typed_json_dataclass-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c35ea0c0080e6855185686d5e0027d2", "sha256": "fb688d2f16fd417ad5bfc5bf7924d66499ddb60399c728c7e5b7f3863c5f32bf"}, "downloads": -1, "filename": "typed-json-dataclass-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0c35ea0c0080e6855185686d5e0027d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0,<3.8.0", "size": 10823, "upload_time": "2019-07-07T16:42:31", "upload_time_iso_8601": "2019-07-07T16:42:31.674118Z", "url": "https://files.pythonhosted.org/packages/da/97/098acc48fdfa04568955495532bab1c31c08d38cc2c5949f8c6ce79497ea/typed-json-dataclass-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5282947fc4e1a221b80048ceafaa168c", "sha256": "28fb50b7c4ead7c3a20eb8a448984d5b072bdaa20c4db2fa56a93fc62e395bfd"}, "downloads": -1, "filename": "typed_json_dataclass-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5282947fc4e1a221b80048ceafaa168c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8876, "upload_time": "2019-07-14T16:56:33", "upload_time_iso_8601": "2019-07-14T16:56:33.687170Z", "url": "https://files.pythonhosted.org/packages/f6/f0/b84b17224f114bca74cf0286f5e624a90f342b6b7ca6deb1a539bc6a9f6d/typed_json_dataclass-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d36abb4249114d68a45f3b02577c997b", "sha256": "fe95767a967766d1c5124392a5fccac7a52a9359c97332ad7e63ed0586de3a85"}, "downloads": -1, "filename": "typed-json-dataclass-1.2.1.tar.gz", "has_sig": false, "md5_digest": "d36abb4249114d68a45f3b02577c997b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10824, "upload_time": "2019-07-14T16:56:31", "upload_time_iso_8601": "2019-07-14T16:56:31.700486Z", "url": "https://files.pythonhosted.org/packages/57/6a/ce7c66af3c6a3459622768d948157d4952ef6233430cfee511dc36d2c7da/typed-json-dataclass-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5282947fc4e1a221b80048ceafaa168c", "sha256": "28fb50b7c4ead7c3a20eb8a448984d5b072bdaa20c4db2fa56a93fc62e395bfd"}, "downloads": -1, "filename": "typed_json_dataclass-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5282947fc4e1a221b80048ceafaa168c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8876, "upload_time": "2019-07-14T16:56:33", "upload_time_iso_8601": "2019-07-14T16:56:33.687170Z", "url": "https://files.pythonhosted.org/packages/f6/f0/b84b17224f114bca74cf0286f5e624a90f342b6b7ca6deb1a539bc6a9f6d/typed_json_dataclass-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d36abb4249114d68a45f3b02577c997b", "sha256": "fe95767a967766d1c5124392a5fccac7a52a9359c97332ad7e63ed0586de3a85"}, "downloads": -1, "filename": "typed-json-dataclass-1.2.1.tar.gz", "has_sig": false, "md5_digest": "d36abb4249114d68a45f3b02577c997b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10824, "upload_time": "2019-07-14T16:56:31", "upload_time_iso_8601": "2019-07-14T16:56:31.700486Z", "url": "https://files.pythonhosted.org/packages/57/6a/ce7c66af3c6a3459622768d948157d4952ef6233430cfee511dc36d2c7da/typed-json-dataclass-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:52 2020"}