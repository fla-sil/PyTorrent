{"info": {"author": "Krister Hedfors", "author_email": "krister.hedfors+sqldict@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Welcome, please read through this brief documentation.\n\n    All the sqldict examples below will use an sqlalchemy engine e.\n    Certain database engines will need certain back-end modules\n    which in most cases are available as packages in your *nix\n    distribution or as .exe installers, see INSTALLATION* below.\n\n    Lets create the engine object:\n\n    >>> from sqlalchemy import *\n    >>> dburi = 'mysql://user:pass@localhost/sqldict'\n    >>> e = create_engine(dburi)\n\n    Create database tables, t1 and t2, to hold dicts d1 and d2:\n\n    >>> d1 = sqldict(e, \"t1\", create=1)\n    >>> d2 = sqldict(e, \"t2\", create=1, keytype=String(50), valtype=Integer)\n\n    An sqldict() support all or most common dict operations depending on\n    which sqldict extensions are chosen.\n\n    This is a selection of some useful sqldict instantiation args:\n\n        echo          - print all executed sql queries to stdout (bool)\n        create        - create database table (bool)\n        sort          - 0=no sort, 1=keys, 2=values\n        serialize     - transparent pickling for non-String type values\n                          assigned to String-type columns (bool)\n        getrow        - get entire row instead of just val (bool)\n        keycol        - name of key column\n        valcol        - name of val column\n        keytype       - sqlalchemy column type for key\n        valtype       - sqlalchemy column type for val\n\n    Actions taken such as setting/getting items result in logically\n    corresponding SQL statements. Some examples are:\n\n        __getitem__() - SELECT keycol FROM tablename WHERE valcol=%(val)s\n        iter*()       - iterate over result-set from a select statement\n        keys|values() - returns list(iter*())\n        __del__()     - DELETE FROM..\n        __setitem__() - UPDATE.., INSERT..\n\n\n\n    >>> contents = {\"asd\":123}\n    >>> d1.update(contents)\n    >>> d2.update(contents)\n    >>> assert d1[\"asd\"] == \"123\"\n    >>> assert d2[\"asd\"] == 123\n    >>> d1.drop()\n    >>> d2.drop()\n\n    >>> assert e.execute(\"create table asd (i integer, s varchar(50))\")\n    >>> assert e.execute(\"insert into asd values (42, 'gubbe')\")\n    >>> assert e.execute(\"insert into asd values (99, 'hatt')\")\n    >>> d3 = sqldict(e, \"asd\", keycol=\"s\", valcol=\"i\")\n    >>> d4 = sqldict(e, \"asd\", keycol=\"i\", valcol=\"s\")\n    >>> #d5 = sqldict(e, \"asd\", keycol=\"s\", valgetter=lambda r:r)\n    >>> assert d3[\"gubbe\"] == 42\n    >>> assert d4[42] == \"gubbe\"\n    >>> assert e.execute(\"drop table asd\")\n    >>>\n    >>> #assert d5[\"gubbe\"][\"i\"] == 42\n\n    broken (at least mysql) when combining keytype and serialize,\n    it tries to serialize 42.\n    FIXME: d[int] = Integer or d[Integer]\n    >>> from sqlalchemy import *\n    >>> d = sqldict(e, \"laarge\", create=1, serialize=1, keytype=Integer)\n    >>> d[42] = \"galning\"\n\n    INSTALLATION INSTRUCTIONS\n\n    I use debian, so I do the following:\n    $ sudo apt-get install python-setuptools python-mysqldb\n    $ easy_install sqlalchemy\n    $ easy_install sqldict", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "sqldict", "package_url": "https://pypi.org/project/sqldict/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqldict/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/sqldict/0.5.2/", "requires_dist": null, "requires_python": null, "summary": "sqldict - You have a dict of unlimited capacity providing transparent object serialization, its up to you now.", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Welcome, please read through this brief documentation.<br><br>    All the sqldict examples below will use an sqlalchemy engine e.<br>    Certain database engines will need certain back-end modules<br>    which in most cases are available as packages in your *nix<br>    distribution or as .exe installers, see INSTALLATION* below.<br><br>    Lets create the engine object:<br><br>    &gt;&gt;&gt; from sqlalchemy import *<br>    &gt;&gt;&gt; dburi = 'mysql://user:pass@localhost/sqldict'<br>    &gt;&gt;&gt; e = create_engine(dburi)<br><br>    Create database tables, t1 and t2, to hold dicts d1 and d2:<br><br>    &gt;&gt;&gt; d1 = sqldict(e, \"t1\", create=1)<br>    &gt;&gt;&gt; d2 = sqldict(e, \"t2\", create=1, keytype=String(50), valtype=Integer)<br><br>    An sqldict() support all or most common dict operations depending on<br>    which sqldict extensions are chosen.<br><br>    This is a selection of some useful sqldict instantiation args:<br><br>        echo          - print all executed sql queries to stdout (bool)<br>        create        - create database table (bool)<br>        sort          - 0=no sort, 1=keys, 2=values<br>        serialize     - transparent pickling for non-String type values<br>                          assigned to String-type columns (bool)<br>        getrow        - get entire row instead of just val (bool)<br>        keycol        - name of key column<br>        valcol        - name of val column<br>        keytype       - sqlalchemy column type for key<br>        valtype       - sqlalchemy column type for val<br><br>    Actions taken such as setting/getting items result in logically<br>    corresponding SQL statements. Some examples are:<br><br>        __getitem__() - SELECT keycol FROM tablename WHERE valcol=%(val)s<br>        iter*()       - iterate over result-set from a select statement<br>        keys|values() - returns list(iter*())<br>        __del__()     - DELETE FROM..<br>        __setitem__() - UPDATE.., INSERT..<br><br><br><br>    &gt;&gt;&gt; contents = {\"asd\":123}<br>    &gt;&gt;&gt; d1.update(contents)<br>    &gt;&gt;&gt; d2.update(contents)<br>    &gt;&gt;&gt; assert d1[\"asd\"] == \"123\"<br>    &gt;&gt;&gt; assert d2[\"asd\"] == 123<br>    &gt;&gt;&gt; d1.drop()<br>    &gt;&gt;&gt; d2.drop()<br><br>    &gt;&gt;&gt; assert e.execute(\"create table asd (i integer, s varchar(50))\")<br>    &gt;&gt;&gt; assert e.execute(\"insert into asd values (42, 'gubbe')\")<br>    &gt;&gt;&gt; assert e.execute(\"insert into asd values (99, 'hatt')\")<br>    &gt;&gt;&gt; d3 = sqldict(e, \"asd\", keycol=\"s\", valcol=\"i\")<br>    &gt;&gt;&gt; d4 = sqldict(e, \"asd\", keycol=\"i\", valcol=\"s\")<br>    &gt;&gt;&gt; #d5 = sqldict(e, \"asd\", keycol=\"s\", valgetter=lambda r:r)<br>    &gt;&gt;&gt; assert d3[\"gubbe\"] == 42<br>    &gt;&gt;&gt; assert d4[42] == \"gubbe\"<br>    &gt;&gt;&gt; assert e.execute(\"drop table asd\")<br>    &gt;&gt;&gt;<br>    &gt;&gt;&gt; #assert d5[\"gubbe\"][\"i\"] == 42<br><br>    broken (at least mysql) when combining keytype and serialize,<br>    it tries to serialize 42.<br>    FIXME: d[int] = Integer or d[Integer]<br>    &gt;&gt;&gt; from sqlalchemy import *<br>    &gt;&gt;&gt; d = sqldict(e, \"laarge\", create=1, serialize=1, keytype=Integer)<br>    &gt;&gt;&gt; d[42] = \"galning\"<br><br>    INSTALLATION INSTRUCTIONS<br><br>    I use debian, so I do the following:<br>    $ sudo apt-get install python-setuptools python-mysqldb<br>    $ easy_install sqlalchemy<br>    $ easy_install sqldict\n          </div>"}, "last_serial": 800012, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "446ccc625313c996aa6d00588925d08f", "sha256": "61bab6ca10543db176dbf635266d82b051d5c3eab8d8435a17f7b4ebb2339e0d"}, "downloads": -1, "filename": "sqldict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "446ccc625313c996aa6d00588925d08f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2779, "upload_time": "2010-04-13T00:22:50", "upload_time_iso_8601": "2010-04-13T00:22:50.915595Z", "url": "https://files.pythonhosted.org/packages/a3/67/d29d14e12f2bcf7795e0faf16b7c4c8d385d18971d1d1d5cd975409d5081/sqldict-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d4fea5b502883dca11a7b151a1082c25", "sha256": "413c995f87917708e19a07e630b2138e8ce2b511118616c48f7c5a8e5778c4cb"}, "downloads": -1, "filename": "sqldict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d4fea5b502883dca11a7b151a1082c25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2947, "upload_time": "2010-04-13T02:51:36", "upload_time_iso_8601": "2010-04-13T02:51:36.922939Z", "url": "https://files.pythonhosted.org/packages/e7/e9/1b41ccecc0587acfd93c6d2df5d58ab7f0b12f08f00aa5dc05c5599a0f0f/sqldict-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9990a9c7680f3b25114fcd6e4e87c46d", "sha256": "a957a758987cd3fbf04c7d5e0ae78539caf6d3bd3428f91fdef051972554ac32"}, "downloads": -1, "filename": "sqldict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9990a9c7680f3b25114fcd6e4e87c46d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3801, "upload_time": "2010-04-13T15:15:11", "upload_time_iso_8601": "2010-04-13T15:15:11.943871Z", "url": "https://files.pythonhosted.org/packages/25/7c/551319bdfa47685e74643d0903b70fe95b12d8ea2bafd41b43b493915d7c/sqldict-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5af34b9a8ed0314f001c7a597d1d9fb5", "sha256": "c9520ebff9619709acd714662cee86d7043fa2df9c7894740d81c742c53914dc"}, "downloads": -1, "filename": "sqldict-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5af34b9a8ed0314f001c7a597d1d9fb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4244, "upload_time": "2010-04-13T16:23:25", "upload_time_iso_8601": "2010-04-13T16:23:25.623312Z", "url": "https://files.pythonhosted.org/packages/71/84/68ae8d17a28abc47d004f8bca61335164ce3575e583b02ff4cc365be7b8f/sqldict-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "6945660901bb6f394312b901f6dde2dc", "sha256": "f53c6f7be86e74d801bbe22c072058fb53238b8b6cb7526fb3afeb53843ba8d6"}, "downloads": -1, "filename": "sqldict-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6945660901bb6f394312b901f6dde2dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4265, "upload_time": "2010-04-13T18:36:10", "upload_time_iso_8601": "2010-04-13T18:36:10.740996Z", "url": "https://files.pythonhosted.org/packages/d2/cd/bf7513e681c8b775a069bfdd9277861708be850845251b6439fd9770048f/sqldict-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4eac9fc750b0e00b8022fe9179b0dd5f", "sha256": "cd8dae0f8a80e8d8ae5a2452e9271bf826996a26ac162a89210ed6c8bb0f9ae1"}, "downloads": -1, "filename": "sqldict-0.4.0.tar.gz", "has_sig": false, "md5_digest": "4eac9fc750b0e00b8022fe9179b0dd5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6725, "upload_time": "2010-04-15T02:09:13", "upload_time_iso_8601": "2010-04-15T02:09:13.536897Z", "url": "https://files.pythonhosted.org/packages/71/ba/7e87ed76d4b282c670efd43fac16c78f479a3d70d6032d2feb90fccf7b18/sqldict-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "585c32f4693a30919603f10d87f7eaaa", "sha256": "21401c11db4a3d76c86b3ff6ec98638f420b2e2adf9ac3e986d20380eeb8cc50"}, "downloads": -1, "filename": "sqldict-0.4.1.tar.gz", "has_sig": false, "md5_digest": "585c32f4693a30919603f10d87f7eaaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6998, "upload_time": "2010-04-15T03:36:44", "upload_time_iso_8601": "2010-04-15T03:36:44.782504Z", "url": "https://files.pythonhosted.org/packages/5d/7d/df3501090b4baef84e7a53fcd100f61b56a8a853943cc1b72a64a4bc60c6/sqldict-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "1bf40875c22f6b797b93ab1f826ed57a", "sha256": "ab729c345ac4e40852c5b4727e670cdf262a499ea36ddc8b3dcee8368177bf72"}, "downloads": -1, "filename": "sqldict-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1bf40875c22f6b797b93ab1f826ed57a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8599, "upload_time": "2010-04-19T02:31:27", "upload_time_iso_8601": "2010-04-19T02:31:27.360016Z", "url": "https://files.pythonhosted.org/packages/10/6d/48ef758c012e8e9fc7b26181161f2cfeced3eb4402506a4057004d32645e/sqldict-0.5.0.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c1d16ea13b394ea6affe194755b3ac29", "sha256": "28f198855180f93cd8fca23c94aae04a4db06d4df352b09b4047f83e73ac03fa"}, "downloads": -1, "filename": "sqldict-0.5.2.tar.gz", "has_sig": false, "md5_digest": "c1d16ea13b394ea6affe194755b3ac29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10205, "upload_time": "2010-04-20T02:02:58", "upload_time_iso_8601": "2010-04-20T02:02:58.695685Z", "url": "https://files.pythonhosted.org/packages/88/ea/27e37ff9fd08522c9a25f100d8a5981f5d2b00fb9599101364441aafdf85/sqldict-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1d16ea13b394ea6affe194755b3ac29", "sha256": "28f198855180f93cd8fca23c94aae04a4db06d4df352b09b4047f83e73ac03fa"}, "downloads": -1, "filename": "sqldict-0.5.2.tar.gz", "has_sig": false, "md5_digest": "c1d16ea13b394ea6affe194755b3ac29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10205, "upload_time": "2010-04-20T02:02:58", "upload_time_iso_8601": "2010-04-20T02:02:58.695685Z", "url": "https://files.pythonhosted.org/packages/88/ea/27e37ff9fd08522c9a25f100d8a5981f5d2b00fb9599101364441aafdf85/sqldict-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:46 2020"}