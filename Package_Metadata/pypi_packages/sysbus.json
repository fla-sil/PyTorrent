{"info": {"author": "Rene Devichi", "author_email": "rene.github@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Home Automation"], "description": "# sysbus.py\n\n[![Build Status](https://travis-ci.org/rene-d/sysbus.svg?branch=master)](https://travis-ci.org/rene-d/sysbus)\n[![pyi](https://img.shields.io/pypi/v/sysbus.svg)](https://pypi.python.org/pypi/sysbus)\n[![pyi](https://img.shields.io/pypi/pyversions/sysbus.svg)](https://pypi.python.org/pypi/sysbus)\n\n[\ud83c\uddeb\ud83c\uddf7 Original version in French \ud83c\uddeb\ud83c\uddf7](README.md)\n\n**WARNING**: I am not the author of this translation. It may contain errors or typos (especially with spaces...).\n\n**WARNING**: Some information may be out of date and irrelevant since Livebox software has been updated by Orange.\n\n`sysbus.py` is a Python 3 script that allows you to programmatically control a Livebox and explore control possibilities and other hidden information. It is an \"experimental\" tool.\n\nThere is - unfortunately - no crunchy hidden information to discover, or so I have not found anything. The Livebox is closed well enough.\n\n## Installation\n\nThe script is written in [Python 3](https://www.python.org/downloads/). It also requires [requests](http://docs.python-requests.org/) which greatly simplifies HTTP requests. It may use [Graphviz](http://www.graphviz.org) and one of its Python interface modules [graphviz](https://pypi.python.org/pypi/graphviz) to draw graphs.\n\nIt will also install the Graphviz engine. On OSX we can use [brew](http://brew.sh). On Linux, `sudo apt-get install graphviz` or equivalent depending on the distribution.\n\nThis should work also with Windows. Refer to the sites of the various software for installation procedures.\n\n### pip\n\nThis installs the latest stable, released version.\n\n    $ pip3 install sysbus\n\n### Manually (from the sources)\n\n    $ pip3 install -r requirements.txt\n    $ pip3 install .\n\n### Without installation (run from the sources)\n\n    $ pip3 install requests\n    $ cd src/sysbus\n    $ ./sysbus.py -h\n\n_In this case, replace `sysbus` by `./sysbus.py` in the following commands._\n\n**Nota**\n\nThe Python module [manuf.py](http://github.com/coolbho3k/manuf) displays the [OUI](https://fr.wikipedia.org/wiki/Organizationally_Unique_Identifier) from [MAC](https://fr.wikipedia.org/wiki/Adresse_MAC) addresses. The database `manuf` can be updated with `sysbus --update-oui`.\n\n## Configuration\n\nMost requests require authentication. This is the user `admin` and the admin password (by default the first 8 characters of the Wi-Fi key).\n\nThe script stores the password (as well as the address of the Livebox and its version if you do not use the default values) in the `~ / .sysbusrc` file.\n\nThe version of the livebox defaults to `lb4` (Livebox 4) but can be replaced (` lb3` for example) after the `-lversion` argument.\n\nTo configure, type the following command (assuming that the password is SECRET):\n\n    $ sysbus -config -password SECRET [-url http://192.168.1.1/] [-lversion lb4]\n\nFrom now on, the script will use this login information each time. One can test by asking the time of the equipment:\n\n    $ sysbus\n    Livebox time: Sun, 14 Feb 2016 22:08:32 GMT + 0100\n\n## Use\n\nA certain number of requests are integrated in the script (like the request time, or Wi-Fi keys, devices present, etc.) with more or less formatting of the result.\n\nThe script is also able to send almost any request, provided that it is fully specified on the command line.\n\n    $ sysbus Time:getTime\n    Livebox time: Sun, 14 Feb 2016 22:13:30 GMT + 0100\n\nThe `-h` or` --help` option displays all the possible syntax.\n\n## The sysbus interface\n\nBy browsing the sources made available by Orange [here](http://opensource.orange.com/), we can establish that the Liveboxes since version 2 use a middleware developed by [SoftAtHome](http://www.softathome.com) and a home datamodel engine named \"pcb\".\n\nUnfortunately I have not found any Internet references to this proprietary technology, or it is embedded among all the [meanings(https://fr.wikipedia.org/wiki/PCB) of the acronym, including _Printed Circuit Board_ . Orange and his friend SoftAtHome therefore offer a treasure hunt and puzzles.\n\nThis internal datamodel communicates with the outside via an HTTP interface and JSON named \"sysbus\".\n\nThis interface is used by the administration interface [http: //livebox.home] or the apps [iOS](https://itunes.apple.com/en/app/ma-livebox/id445573616?mt=8) and [Android](https://play.google.com/store/apps/details?id=com.orange.mylivebox.fr&hl=en).\n\nThe principle is to send POST requests with a list of parameters in a JSON object, the return will be a JSON object containing the result of the request.\n\nIt is reasonable to think that this is also the way that Orange administers Liveboxes (activation of shared Wi-Fi, updates) and perhaps network and / or hardware diagnostics.\n\n### Example with curl\n\nAPI used by Livebox 4 (firmware SG40_sip-en-2.14.8.1_7.21.3.1), which works with Livebox 3 (with firmware SG30_sip-en-5.17.3.1 at least):\n\n```bash\ncurl -s -X POST -H \"Content-Type: application/x-sah-ws-1-call+json\" -d '{\"service\":\"NMC\",\"method\":\"getWANStatus\",\"parameters\":{}}' http://192.168.1.1/ws\n```\n\nAPI used on old Livebox and the mobile apps:\n\n```bash\ncurl -s -X POST -H \"Content-Type: application/json\" -d '{\"parameters\":{}}' http://192.168.1.1/sysbus/NMC:getWANStatus | jq .\n```\n\nResult:\n\n```json\n{\n    \"result\": {\n        \"status\": true,\n        \"data\": {\n            \"LinkType\": \"ethernet\",\n            \"LinkState\": \"up\",\n            \"MACAddress\": \"3C:81:D8:xx:yy:zz\",\n            \"Protocol\": \"dhcp\",\n            \"ConnectionState\": \"Bound\",\n            \"LastConnectionError\": \"None\",\n            \"IPAddress\": \"aa.bb.cc.dd\",\n            \"RemoteGateway\": \"aa.bb.cc.dd\",\n            \"DNSServers\": \"80.10.246.136,81.253.149.6\",\n            \"IPv6Address\": \"2a01:cb00:xyzt:abcd:1:2:3:4\",\n            \"IPv6DelegatedPrefix\": \"2a01:cb00:xyzt:abcd::/56\"\n        }\n    }\n}\n```\n\n[jq](https://stedolan.github.io/jq/) is a tool that allows, among other things, to\nreformat the JSON.\n\nNote: This request does not require authentication, unlike the time request.\n\n### Examples with the script\n\n    # query similar to the curl example above\n    $ sysbus sysbus.NMC:getWANStatus\n\n    # passing parameters\n    $ sysbus sysbus.NMC.Wifi:set Enable=True Status=True\n\n### Where to find the requests?\n\nThe script has a `-scan` option that more or less lists the method calls that are used by the administration web interface. It uses for that the agglomeration of javascript scripts of the Livebox. On the other hand, it will be necessary to search to know the possible parameters.\n\nModern browser debuggers are also able to view sent queries and their results.\n\nAnother way is to use [wireshark](https://www.wireshark.org) or [tcpflow](https://github.com/simsong/tcpflow) and perform the actions that you wish to script, either via web interface, either via the mobile app if you know how to capture the Wi-Fi smartphone or tablet.\n\nFinally, the last source of information is the datamodel.\n\n## The datamodel\n\nThe sysbus interface has an interesting feature: that of being able to discover the datamodel.\n\nFor this, the HTTP request to make is a GET on the name of the object. The returned JSON describes the model.\n\n`sysbus` is able to make the return readable by detecting functions, parameters and object instances. Decoding, based solely on observation, may be incomplete.\n\n    # queries the datamodel of the NMC.Wifi object\n    $ sysbus NMC.Wifi -model\n\n    =========================================== level 0\n    OBJECT NAME: 'NMC.Wifi'  (name: Wifi)\n    function: startPairing (opt clientPIN)\n    function: stopPairing ()\n    function: startAutoChannelSelection ()\n    function: getStats (out RxBytes, out TxBytes)\n    function: get ()\n    function: set (opt parameters)\n    parameter:  Enable               : bool       = 'True'\n    parameter:  Status               : bool       = 'True'\n    parameter:  ConfigurationMode    : bool       = 'True'\n\nLaunched without an object name, the program displays the datamodel, with access restrictions. However, sub-objects can be accessible, such as NeMo.Intf.data, while neither NeMo nor NeMo.Intf are accessible. There are also the objects NeMo.MIB. * Name * (NeMo.MIB.alias for example), but forbidden access.\n\nThe `-modeluml` option will create class diagrams with [plantuml](http://plantuml.com) (see example below).\n\nThe datamodel includes some elements of different TR of the Broadband Forum (see [TR-181](https://www.broadband-forum.org/cwmp/tr-181-2-10-0.html) for example). For example, the Device.Hosts object is very similar to the one found in the Livebox, plus extensions specific to Orange (X_ORANGE-COM_xxx).\n\nIn addition, the presence of a user 'cwmpd' (see the UserManagement object) with the unknown password tends to prove that the Livebox communicates using _CWMP_ (or [TR-069](https://en.wikipedia.org/wiki/TR-069)) with its management gateway on the Orange side.\n\n![Hosts class diagram](http://rene-d.github.io/sysbus/docs/Hosts.png)\n\n### New Livebox 4\n\nThe LB4's web interface is much more advanced. The datamodel is essentially the same, with more objects.\n\nThere is also a description of methods via Json queries:\n\n    curl -s http://livebox.home/sdkut/apis/pcb/Time/getTime.json | jq .\n\n\n## The NeMo.Intf graph\n\nThe interfaces and pseudo-interfaces are internally organized into graphs via _upper_ and _lower_ connections.\n\nThe `-graph` option in` sysbus` uses Graphviz to display the entire graph of the interfaces.\n\n    $ sysbus -graph\n\n![functional graph](http://rene-d.github.io/sysbus/docs/nemo_intf.png)\n\nIn grayed out, the blocks that are inaccessible (they are discovered only thanks to the links _upper_ and _lower_). And in ellipse, blocks disabled.\n\nThe graph is displayed in SVG, which is used to zoom without loss. It can only be modified in the source of the script (change 'svg' to 'png' for example).\n\nEach interface manages one or more MIBs. The list can be retrieved with the command:\n\n    $ sysbus -MIBs show\n\nThe MIBs (_Management Information Base_) are apparently close to SNMP MIBs, but they are not - or they are proprietary MIBs and can not be accessed in SNMP. This is the MIB named `base` which is exploited to build the graph.\n\n    $ sysbus NeMo.Intf.wl1:getMIBs mibs=base traverse=this\n    {'status': {'base': {'wl1': {'Enable': True,\n                                 'Flags': 'wlanvap penable netdev enabled '\n                                          'wlanvap-bound wlansta netdev-bound '\n                                          'inbridge netdev-up up',\n                                 'LLIntf': {'wifi1_ath': {'Name': 'wifi1_ath'}},\n                                 'Name': 'wl1',\n                                 'Status': True,\n                                 'ULIntf': {'bridge': {'Name': 'bridge'}}}}}}\n\nThe interpretation of the result of this query is:\n\n- the `wl1` object has the` base` MIB\n- the properties of the base MIB are: `Name`` LLIntf` `ULIntf`` Status` `Enable`` Flags`\n- this MIB describes the graph,`wl1` being connected by a _upper_ link to the` bridge` interface and a _lower_ link to `wifi1_ath`\n- the interface is activated (`Status`)\n\nThe command is also able to establish a cross-tab between MIBs and interface to find the use. See this [result](docs/MIBs.md) where X = used, 0 = referenced but empty.\n\n    $ sysbus -MIBs table [html]\n\n### Remarks\n\n- The graph is perhaps incomplete since we only know the connections accessible blocks: we can not know the connections between two inaccessible blocks.\n- By the way, the two blocks starting with `data` and` lan` seem separate, both being at the top of two separate graphs (at least if shared Wi-Fi is not enabled). Yet the flow of data necessarily passes from one graph to another. `data` is connected to` eth1` which the external connection, to the fiber box, `lan` is connected to Wi-Fi and` eth0` which represents the switch 4 ports of the local network.\n- It remains undoubtedly to discover other information disseminated in these MIBs.\n\n## The network topology\n\nThe Livebox is more or less able to display the [network topology](http://livebox.home/supportMapper.html) from its admin page. This information is stored in the datamodel, and it has more details than the web interface wants to display.\n\nIn particular, peripherals connected in Wi-Fi 2.4GHz (interface wl0) and those connected in 5GHz (interface wl1).\n\n`sysbus` must be started with the` -topo` option to get this graph. Depending on the number of devices, the graph is very big. Adding `simple` the program only displays the device names.\n\nWe also see USB ports and UPnP.\n\n    $ sysbus -topo simple\n\n![network topology](http://rene-d.github.io/sysbus/docs/devices.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://rene-d.github.io/sysbus", "keywords": "livebox sysbus", "license": "", "maintainer": "", "maintainer_email": "", "name": "sysbus", "package_url": "https://pypi.org/project/sysbus/", "platform": "", "project_url": "https://pypi.org/project/sysbus/", "project_urls": {"Bug Reports": "https://github.com/rene-d/sysbus/issues", "Homepage": "https://rene-d.github.io/sysbus", "Source": "https://github.com/rene-d/sysbus"}, "release_url": "https://pypi.org/project/sysbus/1.0.6/", "requires_dist": ["requests", "graphviz", "qrcode", "python-dateutil"], "requires_python": ">=3.5", "summary": "Control by script your Livebox 2,3,4", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sysbus.py</h1>\n<p><a href=\"https://travis-ci.org/rene-d/sysbus\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d01dea6211fd334d8a80a13127442cb75add834/68747470733a2f2f7472617669732d63692e6f72672f72656e652d642f7379736275732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/sysbus\" rel=\"nofollow\"><img alt=\"pyi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef6c81fdcca4926ed06586371a018c08764102c4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7379736275732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/sysbus\" rel=\"nofollow\"><img alt=\"pyi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f533c27091d222f40c187160bb1aba8eb8ee07c9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7379736275732e737667\"></a></p>\n<p><a href=\"README.md\" rel=\"nofollow\">\ud83c\uddeb\ud83c\uddf7 Original version in French \ud83c\uddeb\ud83c\uddf7</a></p>\n<p><strong>WARNING</strong>: I am not the author of this translation. It may contain errors or typos (especially with spaces...).</p>\n<p><strong>WARNING</strong>: Some information may be out of date and irrelevant since Livebox software has been updated by Orange.</p>\n<p><code>sysbus.py</code> is a Python 3 script that allows you to programmatically control a Livebox and explore control possibilities and other hidden information. It is an \"experimental\" tool.</p>\n<p>There is - unfortunately - no crunchy hidden information to discover, or so I have not found anything. The Livebox is closed well enough.</p>\n<h2>Installation</h2>\n<p>The script is written in <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3</a>. It also requires <a href=\"http://docs.python-requests.org/\" rel=\"nofollow\">requests</a> which greatly simplifies HTTP requests. It may use <a href=\"http://www.graphviz.org\" rel=\"nofollow\">Graphviz</a> and one of its Python interface modules <a href=\"https://pypi.python.org/pypi/graphviz\" rel=\"nofollow\">graphviz</a> to draw graphs.</p>\n<p>It will also install the Graphviz engine. On OSX we can use <a href=\"http://brew.sh\" rel=\"nofollow\">brew</a>. On Linux, <code>sudo apt-get install graphviz</code> or equivalent depending on the distribution.</p>\n<p>This should work also with Windows. Refer to the sites of the various software for installation procedures.</p>\n<h3>pip</h3>\n<p>This installs the latest stable, released version.</p>\n<pre><code>$ pip3 install sysbus\n</code></pre>\n<h3>Manually (from the sources)</h3>\n<pre><code>$ pip3 install -r requirements.txt\n$ pip3 install .\n</code></pre>\n<h3>Without installation (run from the sources)</h3>\n<pre><code>$ pip3 install requests\n$ cd src/sysbus\n$ ./sysbus.py -h\n</code></pre>\n<p><em>In this case, replace <code>sysbus</code> by <code>./sysbus.py</code> in the following commands.</em></p>\n<p><strong>Nota</strong></p>\n<p>The Python module <a href=\"http://github.com/coolbho3k/manuf\" rel=\"nofollow\">manuf.py</a> displays the <a href=\"https://fr.wikipedia.org/wiki/Organizationally_Unique_Identifier\" rel=\"nofollow\">OUI</a> from <a href=\"https://fr.wikipedia.org/wiki/Adresse_MAC\" rel=\"nofollow\">MAC</a> addresses. The database <code>manuf</code> can be updated with <code>sysbus --update-oui</code>.</p>\n<h2>Configuration</h2>\n<p>Most requests require authentication. This is the user <code>admin</code> and the admin password (by default the first 8 characters of the Wi-Fi key).</p>\n<p>The script stores the password (as well as the address of the Livebox and its version if you do not use the default values) in the <code>~ / .sysbusrc</code> file.</p>\n<p>The version of the livebox defaults to <code>lb4</code> (Livebox 4) but can be replaced (<code>lb3</code> for example) after the <code>-lversion</code> argument.</p>\n<p>To configure, type the following command (assuming that the password is SECRET):</p>\n<pre><code>$ sysbus -config -password SECRET [-url http://192.168.1.1/] [-lversion lb4]\n</code></pre>\n<p>From now on, the script will use this login information each time. One can test by asking the time of the equipment:</p>\n<pre><code>$ sysbus\nLivebox time: Sun, 14 Feb 2016 22:08:32 GMT + 0100\n</code></pre>\n<h2>Use</h2>\n<p>A certain number of requests are integrated in the script (like the request time, or Wi-Fi keys, devices present, etc.) with more or less formatting of the result.</p>\n<p>The script is also able to send almost any request, provided that it is fully specified on the command line.</p>\n<pre><code>$ sysbus Time:getTime\nLivebox time: Sun, 14 Feb 2016 22:13:30 GMT + 0100\n</code></pre>\n<p>The <code>-h</code> or<code>--help</code> option displays all the possible syntax.</p>\n<h2>The sysbus interface</h2>\n<p>By browsing the sources made available by Orange <a href=\"http://opensource.orange.com/\" rel=\"nofollow\">here</a>, we can establish that the Liveboxes since version 2 use a middleware developed by <a href=\"http://www.softathome.com\" rel=\"nofollow\">SoftAtHome</a> and a home datamodel engine named \"pcb\".</p>\n<p>Unfortunately I have not found any Internet references to this proprietary technology, or it is embedded among all the [meanings(https://fr.wikipedia.org/wiki/PCB) of the acronym, including <em>Printed Circuit Board</em> . Orange and his friend SoftAtHome therefore offer a treasure hunt and puzzles.</p>\n<p>This internal datamodel communicates with the outside via an HTTP interface and JSON named \"sysbus\".</p>\n<p>This interface is used by the administration interface [http: //livebox.home] or the apps <a href=\"https://itunes.apple.com/en/app/ma-livebox/id445573616?mt=8\" rel=\"nofollow\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.orange.mylivebox.fr&amp;hl=en\" rel=\"nofollow\">Android</a>.</p>\n<p>The principle is to send POST requests with a list of parameters in a JSON object, the return will be a JSON object containing the result of the request.</p>\n<p>It is reasonable to think that this is also the way that Orange administers Liveboxes (activation of shared Wi-Fi, updates) and perhaps network and / or hardware diagnostics.</p>\n<h3>Example with curl</h3>\n<p>API used by Livebox 4 (firmware SG40_sip-en-2.14.8.1_7.21.3.1), which works with Livebox 3 (with firmware SG30_sip-en-5.17.3.1 at least):</p>\n<pre>curl -s -X POST -H <span class=\"s2\">\"Content-Type: application/x-sah-ws-1-call+json\"</span> -d <span class=\"s1\">'{\"service\":\"NMC\",\"method\":\"getWANStatus\",\"parameters\":{}}'</span> http://192.168.1.1/ws\n</pre>\n<p>API used on old Livebox and the mobile apps:</p>\n<pre>curl -s -X POST -H <span class=\"s2\">\"Content-Type: application/json\"</span> -d <span class=\"s1\">'{\"parameters\":{}}'</span> http://192.168.1.1/sysbus/NMC:getWANStatus <span class=\"p\">|</span> jq .\n</pre>\n<p>Result:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"result\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"status\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"LinkType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ethernet\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"LinkState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"up\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"MACAddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3C:81:D8:xx:yy:zz\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Protocol\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dhcp\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"ConnectionState\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bound\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"LastConnectionError\"</span><span class=\"p\">:</span> <span class=\"s2\">\"None\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"IPAddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aa.bb.cc.dd\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"RemoteGateway\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aa.bb.cc.dd\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"DNSServers\"</span><span class=\"p\">:</span> <span class=\"s2\">\"80.10.246.136,81.253.149.6\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"IPv6Address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2a01:cb00:xyzt:abcd:1:2:3:4\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"IPv6DelegatedPrefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2a01:cb00:xyzt:abcd::/56\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a> is a tool that allows, among other things, to\nreformat the JSON.</p>\n<p>Note: This request does not require authentication, unlike the time request.</p>\n<h3>Examples with the script</h3>\n<pre><code># query similar to the curl example above\n$ sysbus sysbus.NMC:getWANStatus\n\n# passing parameters\n$ sysbus sysbus.NMC.Wifi:set Enable=True Status=True\n</code></pre>\n<h3>Where to find the requests?</h3>\n<p>The script has a <code>-scan</code> option that more or less lists the method calls that are used by the administration web interface. It uses for that the agglomeration of javascript scripts of the Livebox. On the other hand, it will be necessary to search to know the possible parameters.</p>\n<p>Modern browser debuggers are also able to view sent queries and their results.</p>\n<p>Another way is to use <a href=\"https://www.wireshark.org\" rel=\"nofollow\">wireshark</a> or <a href=\"https://github.com/simsong/tcpflow\" rel=\"nofollow\">tcpflow</a> and perform the actions that you wish to script, either via web interface, either via the mobile app if you know how to capture the Wi-Fi smartphone or tablet.</p>\n<p>Finally, the last source of information is the datamodel.</p>\n<h2>The datamodel</h2>\n<p>The sysbus interface has an interesting feature: that of being able to discover the datamodel.</p>\n<p>For this, the HTTP request to make is a GET on the name of the object. The returned JSON describes the model.</p>\n<p><code>sysbus</code> is able to make the return readable by detecting functions, parameters and object instances. Decoding, based solely on observation, may be incomplete.</p>\n<pre><code># queries the datamodel of the NMC.Wifi object\n$ sysbus NMC.Wifi -model\n\n=========================================== level 0\nOBJECT NAME: 'NMC.Wifi'  (name: Wifi)\nfunction: startPairing (opt clientPIN)\nfunction: stopPairing ()\nfunction: startAutoChannelSelection ()\nfunction: getStats (out RxBytes, out TxBytes)\nfunction: get ()\nfunction: set (opt parameters)\nparameter:  Enable               : bool       = 'True'\nparameter:  Status               : bool       = 'True'\nparameter:  ConfigurationMode    : bool       = 'True'\n</code></pre>\n<p>Launched without an object name, the program displays the datamodel, with access restrictions. However, sub-objects can be accessible, such as NeMo.Intf.data, while neither NeMo nor NeMo.Intf are accessible. There are also the objects NeMo.MIB. * Name * (NeMo.MIB.alias for example), but forbidden access.</p>\n<p>The <code>-modeluml</code> option will create class diagrams with <a href=\"http://plantuml.com\" rel=\"nofollow\">plantuml</a> (see example below).</p>\n<p>The datamodel includes some elements of different TR of the Broadband Forum (see <a href=\"https://www.broadband-forum.org/cwmp/tr-181-2-10-0.html\" rel=\"nofollow\">TR-181</a> for example). For example, the Device.Hosts object is very similar to the one found in the Livebox, plus extensions specific to Orange (X_ORANGE-COM_xxx).</p>\n<p>In addition, the presence of a user 'cwmpd' (see the UserManagement object) with the unknown password tends to prove that the Livebox communicates using <em>CWMP</em> (or <a href=\"https://en.wikipedia.org/wiki/TR-069\" rel=\"nofollow\">TR-069</a>) with its management gateway on the Orange side.</p>\n<p><img alt=\"Hosts class diagram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a3f669fea7bcbf00af1b7cdbec1140bdb029eca/687474703a2f2f72656e652d642e6769746875622e696f2f7379736275732f646f63732f486f7374732e706e67\"></p>\n<h3>New Livebox 4</h3>\n<p>The LB4's web interface is much more advanced. The datamodel is essentially the same, with more objects.</p>\n<p>There is also a description of methods via Json queries:</p>\n<pre><code>curl -s http://livebox.home/sdkut/apis/pcb/Time/getTime.json | jq .\n</code></pre>\n<h2>The NeMo.Intf graph</h2>\n<p>The interfaces and pseudo-interfaces are internally organized into graphs via <em>upper</em> and <em>lower</em> connections.</p>\n<p>The <code>-graph</code> option in<code>sysbus</code> uses Graphviz to display the entire graph of the interfaces.</p>\n<pre><code>$ sysbus -graph\n</code></pre>\n<p><img alt=\"functional graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1f8e866ae35752134c7ef125481d15c78838198/687474703a2f2f72656e652d642e6769746875622e696f2f7379736275732f646f63732f6e656d6f5f696e74662e706e67\"></p>\n<p>In grayed out, the blocks that are inaccessible (they are discovered only thanks to the links <em>upper</em> and <em>lower</em>). And in ellipse, blocks disabled.</p>\n<p>The graph is displayed in SVG, which is used to zoom without loss. It can only be modified in the source of the script (change 'svg' to 'png' for example).</p>\n<p>Each interface manages one or more MIBs. The list can be retrieved with the command:</p>\n<pre><code>$ sysbus -MIBs show\n</code></pre>\n<p>The MIBs (<em>Management Information Base</em>) are apparently close to SNMP MIBs, but they are not - or they are proprietary MIBs and can not be accessed in SNMP. This is the MIB named <code>base</code> which is exploited to build the graph.</p>\n<pre><code>$ sysbus NeMo.Intf.wl1:getMIBs mibs=base traverse=this\n{'status': {'base': {'wl1': {'Enable': True,\n                             'Flags': 'wlanvap penable netdev enabled '\n                                      'wlanvap-bound wlansta netdev-bound '\n                                      'inbridge netdev-up up',\n                             'LLIntf': {'wifi1_ath': {'Name': 'wifi1_ath'}},\n                             'Name': 'wl1',\n                             'Status': True,\n                             'ULIntf': {'bridge': {'Name': 'bridge'}}}}}}\n</code></pre>\n<p>The interpretation of the result of this query is:</p>\n<ul>\n<li>the <code>wl1</code> object has the<code>base</code> MIB</li>\n<li>the properties of the base MIB are: <code>Name`` LLIntf</code> <code>ULIntf`` Status</code> <code>Enable`` Flags</code></li>\n<li>this MIB describes the graph,<code>wl1</code> being connected by a <em>upper</em> link to the<code>bridge</code> interface and a <em>lower</em> link to <code>wifi1_ath</code></li>\n<li>the interface is activated (<code>Status</code>)</li>\n</ul>\n<p>The command is also able to establish a cross-tab between MIBs and interface to find the use. See this <a href=\"docs/MIBs.md\" rel=\"nofollow\">result</a> where X = used, 0 = referenced but empty.</p>\n<pre><code>$ sysbus -MIBs table [html]\n</code></pre>\n<h3>Remarks</h3>\n<ul>\n<li>The graph is perhaps incomplete since we only know the connections accessible blocks: we can not know the connections between two inaccessible blocks.</li>\n<li>By the way, the two blocks starting with <code>data</code> and<code>lan</code> seem separate, both being at the top of two separate graphs (at least if shared Wi-Fi is not enabled). Yet the flow of data necessarily passes from one graph to another. <code>data</code> is connected to<code>eth1</code> which the external connection, to the fiber box, <code>lan</code> is connected to Wi-Fi and<code>eth0</code> which represents the switch 4 ports of the local network.</li>\n<li>It remains undoubtedly to discover other information disseminated in these MIBs.</li>\n</ul>\n<h2>The network topology</h2>\n<p>The Livebox is more or less able to display the <a href=\"http://livebox.home/supportMapper.html\" rel=\"nofollow\">network topology</a> from its admin page. This information is stored in the datamodel, and it has more details than the web interface wants to display.</p>\n<p>In particular, peripherals connected in Wi-Fi 2.4GHz (interface wl0) and those connected in 5GHz (interface wl1).</p>\n<p><code>sysbus</code> must be started with the<code>-topo</code> option to get this graph. Depending on the number of devices, the graph is very big. Adding <code>simple</code> the program only displays the device names.</p>\n<p>We also see USB ports and UPnP.</p>\n<pre><code>$ sysbus -topo simple\n</code></pre>\n<p><img alt=\"network topology\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d05277e7fbdf91f17165e973bb8bc5613726be1/687474703a2f2f72656e652d642e6769746875622e696f2f7379736275732f646f63732f646576696365732e706e67\"></p>\n\n          </div>"}, "last_serial": 6636351, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6de26e9856cbfa2a4ffe5a29978f49bd", "sha256": "4f24a5382232c6c449ff101a23588c458d2b697c903a24de1ff70c586e3fe361"}, "downloads": -1, "filename": "sysbus-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6de26e9856cbfa2a4ffe5a29978f49bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5, <4", "size": 560243, "upload_time": "2019-12-25T18:08:32", "upload_time_iso_8601": "2019-12-25T18:08:32.785312Z", "url": "https://files.pythonhosted.org/packages/31/81/45141988ea3c7068a6f437b3ff37cf33a2685cc6afb7b5d88d279641932d/sysbus-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5d045ee5acb35a04451fe6e2976cc27", "sha256": "8d03e712875f60b5c2f187d92247d5bc8b2796364f54246ba48a1de3409ef500"}, "downloads": -1, "filename": "sysbus-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f5d045ee5acb35a04451fe6e2976cc27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 565188, "upload_time": "2019-12-25T18:08:35", "upload_time_iso_8601": "2019-12-25T18:08:35.694809Z", "url": "https://files.pythonhosted.org/packages/9f/ff/15f9d83ae3fc099ffc7b7db56216aaa40bdd28174b44508d253009b09a41/sysbus-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "49cdb26844e59b4140e54093cc873b7b", "sha256": "ff109e9e67e86bce542de68dc40e9b632162230d54890f9c8f0c91ca96fdea94"}, "downloads": -1, "filename": "sysbus-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "49cdb26844e59b4140e54093cc873b7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 560785, "upload_time": "2019-12-26T07:52:31", "upload_time_iso_8601": "2019-12-26T07:52:31.992859Z", "url": "https://files.pythonhosted.org/packages/08/d4/c8fd5d7d89fd16741344ca8e949ab18d579d56005b5b016598794ad4f549/sysbus-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9f9a08313b76a245768c8770bbc41ad", "sha256": "18162b8b5d7c67a6ba2133a053a0c2f8b945e0d9c9accc9cf18d5953e7f532ab"}, "downloads": -1, "filename": "sysbus-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f9f9a08313b76a245768c8770bbc41ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566118, "upload_time": "2019-12-26T07:52:33", "upload_time_iso_8601": "2019-12-26T07:52:33.791397Z", "url": "https://files.pythonhosted.org/packages/43/59/beab529033a08389b9402cc44548708080eb95072ca4c63c11c3318aa124/sysbus-0.0.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "82b7aba7657c38a063065a137ed92b18", "sha256": "0f98086b37678acaebbe95645b6d323341a7476ae616a10b9364d3cd04f36d09"}, "downloads": -1, "filename": "sysbus-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82b7aba7657c38a063065a137ed92b18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 560786, "upload_time": "2019-12-26T08:03:07", "upload_time_iso_8601": "2019-12-26T08:03:07.428693Z", "url": "https://files.pythonhosted.org/packages/08/38/862744cc572ccd39c23128f0cd812199ff68e892a0c1141a31b234b4c171/sysbus-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "478a5742647ccb1968570afbe05103f5", "sha256": "19b4ee4a9eaa730279c8f9da6d9110a6eaa51af1b3efa83475409d955a581198"}, "downloads": -1, "filename": "sysbus-1.0.0.tar.gz", "has_sig": false, "md5_digest": "478a5742647ccb1968570afbe05103f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566003, "upload_time": "2019-12-26T08:03:09", "upload_time_iso_8601": "2019-12-26T08:03:09.113349Z", "url": "https://files.pythonhosted.org/packages/d1/58/6830ef17f11c81d44097add13021cb4beb775c03e9c209d721f0069a10fb/sysbus-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f76e1ecfcc51e76fb4d8b8139ea4f7a5", "sha256": "a5a7e0498a8b068c6c0b16e298cb0651ccffcf7264a6bbb6d8ef59a0d89eda29"}, "downloads": -1, "filename": "sysbus-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f76e1ecfcc51e76fb4d8b8139ea4f7a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 560803, "upload_time": "2020-01-04T14:34:44", "upload_time_iso_8601": "2020-01-04T14:34:44.160963Z", "url": "https://files.pythonhosted.org/packages/32/de/5e8c10ea50d60c82946d2e2db81dd6593d1fbd20cbd74056d5df90ad0d00/sysbus-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a4f370878dff85ec6ae1aa5c4e8987f", "sha256": "ae076b4ce3916de23371aa006843787965fe476230570454848c0b5dc86537e6"}, "downloads": -1, "filename": "sysbus-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6a4f370878dff85ec6ae1aa5c4e8987f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566032, "upload_time": "2020-01-04T14:34:45", "upload_time_iso_8601": "2020-01-04T14:34:45.797550Z", "url": "https://files.pythonhosted.org/packages/fd/c8/5e4aa7f1ac3b1906f7050139805d72e81413a53302b637010417db091395/sysbus-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ac1c94ce6e56cc53e8d127845d6ae117", "sha256": "c67496f9018a6adda23ea27f65ce3deaf9fd5c8aa15e5f9cffc929396c861c7a"}, "downloads": -1, "filename": "sysbus-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ac1c94ce6e56cc53e8d127845d6ae117", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 560823, "upload_time": "2020-01-04T14:40:35", "upload_time_iso_8601": "2020-01-04T14:40:35.905158Z", "url": "https://files.pythonhosted.org/packages/84/f9/78a7203d520d516d1906e746c35afcfaa2456de8cc7a164ac618a7f36734/sysbus-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d5b36db37f200b71ce585075a995c17", "sha256": "ce34a4418ff687d0c9b0254cf1e3b9a97b32c3b23e8bea6390b9fd979f8c3e36"}, "downloads": -1, "filename": "sysbus-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1d5b36db37f200b71ce585075a995c17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566153, "upload_time": "2020-01-04T14:40:37", "upload_time_iso_8601": "2020-01-04T14:40:37.790954Z", "url": "https://files.pythonhosted.org/packages/5d/72/78ae5cf907e20a47a07950075b485f2b5e6e4b05fd95c4cea306b208054b/sysbus-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "885fccd66594d28dd5ad52e5c31757df", "sha256": "4ba812d6db6e64380f67743731b5359e0b41a88009218af05fa0382e21cee70d"}, "downloads": -1, "filename": "sysbus-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "885fccd66594d28dd5ad52e5c31757df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 561015, "upload_time": "2020-01-25T23:02:57", "upload_time_iso_8601": "2020-01-25T23:02:57.608973Z", "url": "https://files.pythonhosted.org/packages/46/34/4420ab8668532edc4969e3cb645fb6553636a4347a524f170c3bcf793bd2/sysbus-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "165f0a4ccb37f690333e78650b4c3119", "sha256": "fac82ef4eadc0957ce227614aa58bc2c943e26d09c62bf83ed5db985b2f5503e"}, "downloads": -1, "filename": "sysbus-1.0.4.tar.gz", "has_sig": false, "md5_digest": "165f0a4ccb37f690333e78650b4c3119", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566340, "upload_time": "2020-01-25T23:02:59", "upload_time_iso_8601": "2020-01-25T23:02:59.109783Z", "url": "https://files.pythonhosted.org/packages/55/b5/f6d421fde42fe7da27dd1322a340631e393526de6b4795a6f9e5907a1838/sysbus-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "a7ec5b62fb3330e3c3e7a2c59d76d2af", "sha256": "9f8de6b4195540f152c314d8594ef62c6332214857a40ad6eebae58c7ba4c058"}, "downloads": -1, "filename": "sysbus-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a7ec5b62fb3330e3c3e7a2c59d76d2af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 561008, "upload_time": "2020-01-27T18:29:37", "upload_time_iso_8601": "2020-01-27T18:29:37.992911Z", "url": "https://files.pythonhosted.org/packages/94/07/89685c2a74cd8ce57c9f10dd65120729ab62b2887323eaff30bb205224a0/sysbus-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e47b43fef3faf2e316a321eba46d7f8", "sha256": "db4c90a61ce9bf0b07a6156d6f5ad93856e12ecc3acb1a41a090e3245692a7dc"}, "downloads": -1, "filename": "sysbus-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5e47b43fef3faf2e316a321eba46d7f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566333, "upload_time": "2020-01-27T18:29:39", "upload_time_iso_8601": "2020-01-27T18:29:39.807785Z", "url": "https://files.pythonhosted.org/packages/9d/7c/b4e52d2b8796fcbe7796b8c8d86fcce1480cb4765ad8d654fafccb0b6985/sysbus-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "0d301b31b64b596de65cde54e13661c1", "sha256": "103a8b0e0eefa9fbb7d705c3c76e6c1f5dc2b3f8d8cbf77e7e0b6c3ff9e9ec09"}, "downloads": -1, "filename": "sysbus-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0d301b31b64b596de65cde54e13661c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 561028, "upload_time": "2020-02-15T13:16:13", "upload_time_iso_8601": "2020-02-15T13:16:13.443394Z", "url": "https://files.pythonhosted.org/packages/e6/79/1db82b4487112af1d809146d63b9a0e5fdc7df5bf06ca98102a1c98bcff8/sysbus-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75e518e95367237c87b899bfc2f3a78b", "sha256": "d8a0be6300b72b3628faf039a6a3763dd2ef7cfa467ec6b7d436ca91c0e7cc55"}, "downloads": -1, "filename": "sysbus-1.0.6.tar.gz", "has_sig": false, "md5_digest": "75e518e95367237c87b899bfc2f3a78b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566352, "upload_time": "2020-02-15T13:16:15", "upload_time_iso_8601": "2020-02-15T13:16:15.149382Z", "url": "https://files.pythonhosted.org/packages/b3/2f/24bfe877e953b0694ae81e75cf00fb9745911b6bbfe3eea106dc48002cca/sysbus-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d301b31b64b596de65cde54e13661c1", "sha256": "103a8b0e0eefa9fbb7d705c3c76e6c1f5dc2b3f8d8cbf77e7e0b6c3ff9e9ec09"}, "downloads": -1, "filename": "sysbus-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0d301b31b64b596de65cde54e13661c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 561028, "upload_time": "2020-02-15T13:16:13", "upload_time_iso_8601": "2020-02-15T13:16:13.443394Z", "url": "https://files.pythonhosted.org/packages/e6/79/1db82b4487112af1d809146d63b9a0e5fdc7df5bf06ca98102a1c98bcff8/sysbus-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75e518e95367237c87b899bfc2f3a78b", "sha256": "d8a0be6300b72b3628faf039a6a3763dd2ef7cfa467ec6b7d436ca91c0e7cc55"}, "downloads": -1, "filename": "sysbus-1.0.6.tar.gz", "has_sig": false, "md5_digest": "75e518e95367237c87b899bfc2f3a78b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 566352, "upload_time": "2020-02-15T13:16:15", "upload_time_iso_8601": "2020-02-15T13:16:15.149382Z", "url": "https://files.pythonhosted.org/packages/b3/2f/24bfe877e953b0694ae81e75cf00fb9745911b6bbfe3eea106dc48002cca/sysbus-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:55 2020"}