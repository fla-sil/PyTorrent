{"info": {"author": "Jeremy Carbaugh", "author_email": "jeremy@isl.co", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Cereal\n\n[![CircleCI](https://circleci.com/gh/istrategylabs/cereal.svg?style=svg)](https://circleci.com/gh/istrategylabs/cereal)\n\nSerialize objects, dicts, and [Django models](https://djangoproject.com)  to JSON with ease.\n\nI occasionally need to make very small APIs, maybe just an endpoint or two to provide a bit of data to a client. It always seems like overkill to use Django REST framework when a simple View will do. Unfortunately, the DRF serializer is really good and hand coding an object-to-JSON map can be fragile and gross. Cereal was created to be that trusty serializer when that's all you need.\n\n\n\n## Installation\n\nCereal is available on [PyPI](https://pypi.org/project/pycereal):\n\n```shell\npip install pycereal\n```\n\nor\n\n```shell\npipenv install pycereal\n```\n\n\n\n## Serializers\n\n### Fields\n\nIf you've ever used Django's [ModelForms](https://docs.djangoproject.com/en/2.0/topics/forms/modelforms/), Cereal should seem fairly familiar to you. A Serializer defines a set of attributes (Fields) that will be\u2026 serialized\u2026 into JSON.\n\n```python\nimport cereal\n\nclass ArticleSerializer(cereal.Serializer):\n    title = cereal.Field()\n\ndata = {\n    'id': 1,\n    'title': 'An Important Headline',\n}\n\nArticleSerializer().serialize(data)\n```\n\nThis will result in the JSON object:\n\n```json\n{\n    \"title\": \"An Important Headline\"\n}\n```\n\n### Customizing fields\n\nSometimes there's a need to transform a value before it is converted to JSON. Cereal provides an opportunity to hook into serialization by adding methods named with the `serialize_<field>` format. The method will receive the data structure that is being serialized as the sole argument.\n\n```python\nimport cereal\n\nclass ArticleSerializer(cereal.Serializer):\n    title = cereal.Field()\n\n    def serialize_title(self, obj):\n        return obj['title'].upper()\n\ndata = {\n    'id': 1,\n    'title': 'An Important Headline',\n}\n\nArticleSerializer().serialize(data)\n```\n\nWhich will generate:\n\n```shell\n{\n    \"title\": \"AN IMPORTANT HEADLINE\"\n}\n```\n\nThe field methods can also be used to create completely new values.\n\n```python\nimport cereal\n\nclass AuthorSerializer(cereal.Serializer):\n    full_name = cereal.Field()\n\n    def serialize_full_name(self, obj):\n        return f\"{obj['first_name']} {obj['last_name']}\"\n\ndata = {\n    'first_name': 'Corey',\n    'last_name': 'Spaceman',\n}\n\nAuthorSerializer().serialize(data)\n```\n\nThe generated JSON:\n\n```json\n{\n    \"full_name\": \"Corey Spaceman\"\n}\n```\n\nThe JSON only includes the custom *full_name* Field, which is computed using the *serialize_full_name* method, and not the *first_name* or *last_name* attributes. Of course, you can include all of the attributes too by defining them as Fields as well.\n\n### Serializing objects\n\nThe examples so far have involved serializing a dict to JSON, but the *json* module already does this, so what's the point? Cereal handles objects the exact same way as it does dicts.\n\n```python\nimport cereal\n\nclass Article:\n    def __init__(self, _id, title):\n        self.id = _id\n        self.title = title\n\nclass ArticleSerializer(cereal.Serializer):\n    title = cereal.Field()\n\nobj = Article(1, 'An Important Headline')\nArticleSerializer().serialize(obj)\n```\n\nThe resulting JSON shouldn't be much of a surprise.\n\n```json\n{\n    \"title\": \"An Important Headline\"\n}\n```\n\n### Nested attributes\n\nThe world is an imperfect place and not all of your data will be in a simple, flat structure. SerializerField can be used to attach another serializer to handle a nested data structure.\n\n```python\nimport cereal\n\nclass UserSerializer(cereal.Serializer):\n    name = cereal.Field()\n\nclass ArticleSerializer(cereal.Serializer):\n    title = cereal.Field()\n    author = cereal.SerializerField(UserSerializer)\n\ndata = {\n    'id': 1,\n    'title': 'An Important Headline',\n    'author': {\n        'id': 2,\n        'name': 'Corey',\n    }\n}\n\nArticleSerializer().serialize(data)\n```\n\n```json\n{\n    \"title\": \"An Important Headline\",\n    \"author\": {\n        \"name\": \"Corey\"\n    }\n}\n```\n\n### Dates and datetimes\n\nIf you've spent much time with the *json* module, you're probably quite familiar with date serialization errors. JSON does not have native support for dates, so they have to be transformed into string values, but *json* doesn't do this automatically. Cereal has built-in support for dates and datetimes, generating ISO 8601-formatted strings that will be used as the value.\n\n```python\nimport datetime\nimport cereal\n\nclass EventSerializer(cereal.Serializer):\n    timestamp = cereal.Field()\n\ndata = {\n    'timestamp': datetime.datetime(2018, 3, 8, 11, 57, 23, 129307)\n}\n\nEventSerializer().serialize(data)\n```\n\n```json\n{\n    \"timestamp\": \"2018-03-08T11:57:23.129307\"\n}\n```\n\n### Custom type handlers\n\nAs with dates, other data types outside of what is natively supported by JSON need to be converted to one of the native types during serialization. Cereal allows you to define handlers for additional data types to convert to a valid JSON format. The handler is a callable that receives the value and returns a value corresponding to a native JSON type.\n\n```python\nimport uuid\nimport cereal\n\ndef uuid_handler(u):\n    return u.hex\n\nclass UUIDSerializer(cereal.Serializer):\n    id = cereal.Field()\n\nser = UUIDSerializer()\nser.add_handler(uuid.UUID, uuid_handler)\nser.serialize({'id': uuid.uuid4()})\n```\n\nYou guessed it, the JSON:\n\n```json\n{\n    \"id\": \"45ebb187dbc240cabb07b775f63efd6f\"\n}\n```\n\n### Single value vs. list of values\n\nWhen serializing an attribute, the content can either be a single value or an array of values. The corresponding JSON will likewise be either a single value or an array of values. All of the values of the array will be transformed the same way an individual value would be, either through the default Field behavior, using the custom serialization method, the default SerializerField behavior, or a custom type handler. To be safe, just make sure all items in the array are of the same type and that type would serialize correctly as a single value.\n\n\n\n## Special Fields\n\n### Constants\n\nThe ConstantField allows you to insert a new, constant value into the JSON.\n\n```python\nimport cereal\n\nclass HumanSerializer(cereal.Serializer):\n    name = cereal.Field()\n    wants_tacos = cereal.ConstantField(True)\n\ndata = {\n    'name': 'Corey Spaceman',\n}\n\nHumanSerializer().serialize(data)\n```\n\n```json\n{\n    \"name\": \"Corey Spaceman\",\n    \"wants_tacos\": true\n}\n```\n\n### Iterators\n\nThe IteratorField allows you to define a generator, use a list, or pass any type of iterable that will be used to generate values. Each serialized object will pull a new value from the iterator. If the iterator is exhausted, *None* will be used.\n\n```python\nfrom itertools import count\nimport cereal\n\nclass ThingSerializer(cereal.Serializer):\n    id = cereal.Field()\n    offset = cereal.IteratorField(count())\n\nser = ThingSerializer()\nser.serialize({'id': 1})\nser.serialize({'id': 2})\n```\n\n```json\n{\n    \"id\": 1,\n    \"offset\": 0\n}\n{\n    \"id\": 2,\n    \"offset\": 1\n}\n```\n\n\n\n## Django Model Serialization\n\nWhile Cereal is usable in any Python project, I really made it to be used with Django projects. So, given my previous mention of being inspired by Django ModelForms, Cereal allows you to define a model that automatically defines the fields that will be serialized.\n\n```python\nimport cereal\nfrom django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=128)\n\nclass PostSerializer(cereal.Serializer):\n    exclude = ('id',)\n\n    class Meta:\n        model = Post\n\npost = Post.objects.create(title='Breaking News')\nPostSerializer().serialize(post)\n```\n\n```json\n{\n    \"title\": \"Breaking News\"\n}\n```\n\nIn this example, we're inheriting the fields of the Post model, but excluding the *id*.\n\nBeyond incorporating the fields from the model, the Serializer functions the same as any other non-model Serializer. You can define additional Fields and custom field serializer methods that modify both model fields and any others.\n\n## Deserialization\n\nYou may be wondering \"What about deserialization?\" Well, I had no need for it, so I didn't build it. Contributions are welcome, though!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/istrategylabs/cereal", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pycereal", "package_url": "https://pypi.org/project/pycereal/", "platform": "any", "project_url": "https://pypi.org/project/pycereal/", "project_urls": {"Homepage": "https://github.com/istrategylabs/cereal"}, "release_url": "https://pypi.org/project/pycereal/1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple object and Django model JSON serializer", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cereal</h1>\n<p><a href=\"https://circleci.com/gh/istrategylabs/cereal\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad97b0473ea5092567a6f4e3b1bf9e0c85a0e45b/68747470733a2f2f636972636c6563692e636f6d2f67682f6973747261746567796c6162732f63657265616c2e7376673f7374796c653d737667\"></a></p>\n<p>Serialize objects, dicts, and <a href=\"https://djangoproject.com\" rel=\"nofollow\">Django models</a>  to JSON with ease.</p>\n<p>I occasionally need to make very small APIs, maybe just an endpoint or two to provide a bit of data to a client. It always seems like overkill to use Django REST framework when a simple View will do. Unfortunately, the DRF serializer is really good and hand coding an object-to-JSON map can be fragile and gross. Cereal was created to be that trusty serializer when that's all you need.</p>\n<h2>Installation</h2>\n<p>Cereal is available on <a href=\"https://pypi.org/project/pycereal\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install pycereal\n</pre>\n<p>or</p>\n<pre>pipenv install pycereal\n</pre>\n<h2>Serializers</h2>\n<h3>Fields</h3>\n<p>If you've ever used Django's <a href=\"https://docs.djangoproject.com/en/2.0/topics/forms/modelforms/\" rel=\"nofollow\">ModelForms</a>, Cereal should seem fairly familiar to you. A Serializer defines a set of attributes (Fields) that will be\u2026 serialized\u2026 into JSON.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'An Important Headline'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ArticleSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>This will result in the JSON object:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"An Important Headline\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Customizing fields</h3>\n<p>Sometimes there's a need to transform a value before it is converted to JSON. Cereal provides an opportunity to hook into serialization by adding methods named with the <code>serialize_&lt;field&gt;</code> format. The method will receive the data structure that is being serialized as the sole argument.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'An Important Headline'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ArticleSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Which will generate:</p>\n<pre><span class=\"o\">{</span>\n    <span class=\"s2\">\"title\"</span>: <span class=\"s2\">\"AN IMPORTANT HEADLINE\"</span>\n<span class=\"o\">}</span>\n</pre>\n<p>The field methods can also be used to create completely new values.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize_full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'first_name'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'last_name'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Corey'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Spaceman'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">AuthorSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>The generated JSON:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"full_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Corey Spaceman\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The JSON only includes the custom <em>full_name</em> Field, which is computed using the <em>serialize_full_name</em> method, and not the <em>first_name</em> or <em>last_name</em> attributes. Of course, you can include all of the attributes too by defining them as Fields as well.</p>\n<h3>Serializing objects</h3>\n<p>The examples so far have involved serializing a dict to JSON, but the <em>json</em> module already does this, so what's the point? Cereal handles objects the exact same way as it does dicts.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_id</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'An Important Headline'</span><span class=\"p\">)</span>\n<span class=\"n\">ArticleSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre>\n<p>The resulting JSON shouldn't be much of a surprise.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"An Important Headline\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Nested attributes</h3>\n<p>The world is an imperfect place and not all of your data will be in a simple, flat structure. SerializerField can be used to attach another serializer to handle a nested data structure.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">SerializerField</span><span class=\"p\">(</span><span class=\"n\">UserSerializer</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'An Important Headline'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Corey'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">ArticleSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"An Important Headline\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"author\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Corey\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Dates and datetimes</h3>\n<p>If you've spent much time with the <em>json</em> module, you're probably quite familiar with date serialization errors. JSON does not have native support for dates, so they have to be transformed into string values, but <em>json</em> doesn't do this automatically. Cereal has built-in support for dates and datetimes, generating ISO 8601-formatted strings that will be used as the value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EventSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'timestamp'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">129307</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">EventSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2018-03-08T11:57:23.129307\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Custom type handlers</h3>\n<p>As with dates, other data types outside of what is natively supported by JSON need to be converted to one of the native types during serialization. Cereal allows you to define handlers for additional data types to convert to a valid JSON format. The handler is a callable that receives the value and returns a value corresponding to a native JSON type.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">uuid_handler</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">hex</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UUIDSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n\n<span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">UUIDSerializer</span><span class=\"p\">()</span>\n<span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">add_handler</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">,</span> <span class=\"n\">uuid_handler</span><span class=\"p\">)</span>\n<span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()})</span>\n</pre>\n<p>You guessed it, the JSON:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"45ebb187dbc240cabb07b775f63efd6f\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Single value vs. list of values</h3>\n<p>When serializing an attribute, the content can either be a single value or an array of values. The corresponding JSON will likewise be either a single value or an array of values. All of the values of the array will be transformed the same way an individual value would be, either through the default Field behavior, using the custom serialization method, the default SerializerField behavior, or a custom type handler. To be safe, just make sure all items in the array are of the same type and that type would serialize correctly as a single value.</p>\n<h2>Special Fields</h2>\n<h3>Constants</h3>\n<p>The ConstantField allows you to insert a new, constant value into the JSON.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HumanSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">wants_tacos</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">ConstantField</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Corey Spaceman'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">HumanSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Corey Spaceman\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"wants_tacos\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Iterators</h3>\n<p>The IteratorField allows you to define a generator, use a list, or pass any type of iterable that will be used to generate values. Each serialized object will pull a new value from the iterator. If the iterator is exhausted, <em>None</em> will be used.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ThingSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">IteratorField</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">())</span>\n\n<span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">ThingSerializer</span><span class=\"p\">()</span>\n<span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">({</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Django Model Serialization</h2>\n<p>While Cereal is usable in any Python project, I really made it to be used with Django projects. So, given my previous mention of being inspired by Django ModelForms, Cereal allows you to define a model that automatically defines the fields that will be serialized.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cereal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PostSerializer</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n\n<span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Breaking News'</span><span class=\"p\">)</span>\n<span class=\"n\">PostSerializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Breaking News\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this example, we're inheriting the fields of the Post model, but excluding the <em>id</em>.</p>\n<p>Beyond incorporating the fields from the model, the Serializer functions the same as any other non-model Serializer. You can define additional Fields and custom field serializer methods that modify both model fields and any others.</p>\n<h2>Deserialization</h2>\n<p>You may be wondering \"What about deserialization?\" Well, I had no need for it, so I didn't build it. Contributions are welcome, though!</p>\n\n          </div>"}, "last_serial": 6250686, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "9d924d949faa7bff79ec32e742797a8f", "sha256": "4306239b3dfe2bdc99f996fa5fb361ccf56068425f757a0cc28db9d070dd3c3a"}, "downloads": -1, "filename": "pycereal-1.0.tar.gz", "has_sig": false, "md5_digest": "9d924d949faa7bff79ec32e742797a8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7187, "upload_time": "2018-08-30T18:14:39", "upload_time_iso_8601": "2018-08-30T18:14:39.568380Z", "url": "https://files.pythonhosted.org/packages/32/3f/5b33a51321bbdc8c40c52d1d192a01980b1690607f0a4b525c726580ab1c/pycereal-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d924d949faa7bff79ec32e742797a8f", "sha256": "4306239b3dfe2bdc99f996fa5fb361ccf56068425f757a0cc28db9d070dd3c3a"}, "downloads": -1, "filename": "pycereal-1.0.tar.gz", "has_sig": false, "md5_digest": "9d924d949faa7bff79ec32e742797a8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7187, "upload_time": "2018-08-30T18:14:39", "upload_time_iso_8601": "2018-08-30T18:14:39.568380Z", "url": "https://files.pythonhosted.org/packages/32/3f/5b33a51321bbdc8c40c52d1d192a01980b1690607f0a4b525c726580ab1c/pycereal-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:37 2020"}