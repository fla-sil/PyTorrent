{"info": {"author": "Nasim Rahaman", "author_email": "nasim.rahaman@iwr.uni-heidelberg.de", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "=======\nInferno\n=======\n\n\n\n.. image:: https://img.shields.io/pypi/v/inferno.svg\n        :target: https://pypi.python.org/pypi/pytorch-inferno\n\n.. image:: https://img.shields.io/travis/nasimrahaman/inferno.svg\n        :target: https://travis-ci.org/nasimrahaman/inferno\n\n.. image:: https://readthedocs.org/projects/inferno-pytorch/badge/?version=latest\n        :target: http://inferno-pytorch.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/nasimrahaman/inferno/shield.svg\n     :target: https://pyup.io/repos/github/nasimrahaman/inferno/\n     :alt: Updates\n\n\n\n.. image:: http://svgshare.com/i/2j7.svg\n\n\n\n\n\nInferno is a little library providing utilities and convenience functions/classes around \n`PyTorch <https://github.com/pytorch/pytorch>`_. \nIt's a work-in-progress, but the first release is underway! \n\n\n\n* Free software: Apache Software License 2.0\n* Documentation: https://pytorch-inferno.readthedocs.io (Work in progress).\n\n\nFeatures\n--------\n\nCurrent features include: \n  *   a basic \n      `Trainer class <https://github.com/nasimrahaman/inferno/tree/master/docs#preparing-the-trainer>`_ \n      to encapsulate the training boilerplate (iteration/epoch loops, validation and checkpoint creation),\n  *   a `graph API <https://github.com/nasimrahaman/inferno/blob/master/inferno/extensions/containers/graph.py>`_ for building models with complex architectures, powered by `networkx <https://github.com/networkx/networkx>`_. \n  *   `easy data-parallelism <https://github.com/nasimrahaman/inferno/tree/master/docs#using-gpus>`_ over multiple GPUs, \n  *   `a submodule <https://github.com/nasimrahaman/inferno/blob/master/inferno/extensions/initializers>`_ for `torch.nn.Module`-level parameter initialization,\n  *   `a submodule <https://github.com/nasimrahaman/inferno/blob/master/inferno/io/transform>`_ for data preprocessing / transforms,\n  *   `support <https://github.com/nasimrahaman/inferno/tree/master/docs#using-tensorboard>`_ for `Tensorboard <https://www.tensorflow.org/get_started/summaries_and_tensorboard>`_ (best with atleast `tensorflow-cpu <https://github.com/tensorflow/tensorflow>`_ installed)\n  *   `a callback API <https://github.com/nasimrahaman/inferno/tree/master/docs#setting-up-callbacks>`_ to enable flexible interaction with the trainer,\n  *   `various utility layers <https://github.com/nasimrahaman/inferno/tree/master/inferno/extensions/layers>`_ with more underway,\n  *   `a submodule <https://github.com/nasimrahaman/inferno/blob/master/inferno/io/volumetric>`_ for volumetric datasets, and more!\n\n\n\n\n\n.. code:: python\n\n  import torch.nn as nn\n  from inferno.io.box.cifar10 import get_cifar10_loaders\n  from inferno.trainers.basic import Trainer\n  from inferno.trainers.callbacks.logging.tensorboard import TensorboardLogger\n  from inferno.extensions.layers.convolutional import ConvELU2D\n  from inferno.extensions.layers.reshape import Flatten\n\n  # Fill these in:\n  LOG_DIRECTORY = '...'\n  SAVE_DIRECTORY = '...'\n  DATASET_DIRECTORY = '...'\n  DOWNLOAD_CIFAR = True\n  USE_CUDA = True\n\n  # Build torch model\n  model = nn.Sequential(\n      ConvELU2D(in_channels=3, out_channels=256, kernel_size=3),\n      nn.MaxPool2d(kernel_size=2, stride=2),\n      ConvELU2D(in_channels=256, out_channels=256, kernel_size=3),\n      nn.MaxPool2d(kernel_size=2, stride=2),\n      ConvELU2D(in_channels=256, out_channels=256, kernel_size=3),\n      nn.MaxPool2d(kernel_size=2, stride=2),\n      Flatten(),\n      nn.Linear(in_features=(256 * 4 * 4), out_features=10),\n      nn.Softmax()\n  )\n\n  # Load loaders\n  train_loader, validate_loader = get_cifar10_loaders(DATASET_DIRECTORY,\n                                                      download=DOWNLOAD_CIFAR)\n\n  # Build trainer\n  trainer = Trainer(model) \\\n    .build_criterion('CrossEntropyLoss') \\\n    .build_metric('CategoricalError') \\\n    .build_optimizer('Adam') \\\n    .validate_every((2, 'epochs')) \\\n    .save_every((5, 'epochs')) \\\n    .save_to_directory(SAVE_DIRECTORY) \\\n    .set_max_num_epochs(10) \\\n    .build_logger(TensorboardLogger(log_scalars_every=(1, 'iteration'),\n                                    log_images_every='never'), \n                  log_directory=LOG_DIRECTORY)\n\n  # Bind loaders\n  trainer \\\n      .bind_loader('train', train_loader) \\\n      .bind_loader('validate', validate_loader)\n\n  if USE_CUDA:\n    trainer.cuda()\n\n  # Go!\n  trainer.fit()\n\n\n\n\nTo visualize the training progress, navigate to `LOG_DIRECTORY` and fire up tensorboard with \n\n.. code:: bash\n\n  $ tensorboard --logdir=${PWD} --port=6007\n\n\nand navigate to `localhost:6007` with your browser.\n\n\n\nFuture Features: \n------------------------\nPlanned features include: \n  *   a class to encapsulate Hogwild! training over multiple GPUs, \n  *   minimal shape inference with a dry-run,\n  *   proper packaging and documentation,\n  *   cutting-edge fresh-off-the-press implementations of what the future has in store. :)\n\n\n\nCredits\n---------\nAll contributors are listed here_. \n\n.. _here: https://pytorch-inferno.readthedocs.io/en/latest/authors.html\n\nThis packag was partially generated with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template + lots of work by Thorsten. \n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n\n=======\nHistory\n=======\n\n0.1.0 (2017-08-24)\n------------------\n\n* First early release on PyPI\n\n0.1.1 (2017-08-24)\n------------------\n\n* Version Increment\n    \n0.1.2 (2017-08-24)\n------------------\n\n* Version Increment\n\n\n0.1.3 (2017-08-24)\n------------------\n\n* Updated Documentation\n\n0.1.4 (2017-08-24)\n------------------\n\n* travis auto-deployment on pypi\n\n\n0.1.5 (2017-08-24)\n------------------\n\n* travis changes to run unittest\n\n\n0.1.6 (2017-08-24)\n------------------\n\n* travis missing packages for unittesting\n* fixed inconsistent version numbers\n\n0.1.7 (2017-08-25)\n------------------\n\n* setup.py critical bugix in install procedure", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nasimrahaman/inferno", "keywords": "inferno pytorch torch deep learning cnn deep-pyromania", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "inferno-pytorch", "package_url": "https://pypi.org/project/inferno-pytorch/", "platform": "", "project_url": "https://pypi.org/project/inferno-pytorch/", "project_urls": {"Homepage": "https://github.com/nasimrahaman/inferno"}, "release_url": "https://pypi.org/project/inferno-pytorch/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "Inferno is a little library providing utilities and convenience functions/classes around PyTorch.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            =======<br>Inferno<br>=======<br><br><br><br>.. image:: https://img.shields.io/pypi/v/inferno.svg<br>        :target: https://pypi.python.org/pypi/pytorch-inferno<br><br>.. image:: https://img.shields.io/travis/nasimrahaman/inferno.svg<br>        :target: https://travis-ci.org/nasimrahaman/inferno<br><br>.. image:: https://readthedocs.org/projects/inferno-pytorch/badge/?version=latest<br>        :target: http://inferno-pytorch.readthedocs.io/en/latest/?badge=latest<br>        :alt: Documentation Status<br><br>.. image:: https://pyup.io/repos/github/nasimrahaman/inferno/shield.svg<br>     :target: https://pyup.io/repos/github/nasimrahaman/inferno/<br>     :alt: Updates<br><br><br><br>.. image:: http://svgshare.com/i/2j7.svg<br><br><br><br><br><br>Inferno is a little library providing utilities and convenience functions/classes around <br>`PyTorch &lt;https://github.com/pytorch/pytorch&gt;`_. <br>It's a work-in-progress, but the first release is underway! <br><br><br><br>* Free software: Apache Software License 2.0<br>* Documentation: https://pytorch-inferno.readthedocs.io (Work in progress).<br><br><br>Features<br>--------<br><br>Current features include: <br>  *   a basic <br>      `Trainer class &lt;https://github.com/nasimrahaman/inferno/tree/master/docs#preparing-the-trainer&gt;`_ <br>      to encapsulate the training boilerplate (iteration/epoch loops, validation and checkpoint creation),<br>  *   a `graph API &lt;https://github.com/nasimrahaman/inferno/blob/master/inferno/extensions/containers/graph.py&gt;`_ for building models with complex architectures, powered by `networkx &lt;https://github.com/networkx/networkx&gt;`_. <br>  *   `easy data-parallelism &lt;https://github.com/nasimrahaman/inferno/tree/master/docs#using-gpus&gt;`_ over multiple GPUs, <br>  *   `a submodule &lt;https://github.com/nasimrahaman/inferno/blob/master/inferno/extensions/initializers&gt;`_ for `torch.nn.Module`-level parameter initialization,<br>  *   `a submodule &lt;https://github.com/nasimrahaman/inferno/blob/master/inferno/io/transform&gt;`_ for data preprocessing / transforms,<br>  *   `support &lt;https://github.com/nasimrahaman/inferno/tree/master/docs#using-tensorboard&gt;`_ for `Tensorboard &lt;https://www.tensorflow.org/get_started/summaries_and_tensorboard&gt;`_ (best with atleast `tensorflow-cpu &lt;https://github.com/tensorflow/tensorflow&gt;`_ installed)<br>  *   `a callback API &lt;https://github.com/nasimrahaman/inferno/tree/master/docs#setting-up-callbacks&gt;`_ to enable flexible interaction with the trainer,<br>  *   `various utility layers &lt;https://github.com/nasimrahaman/inferno/tree/master/inferno/extensions/layers&gt;`_ with more underway,<br>  *   `a submodule &lt;https://github.com/nasimrahaman/inferno/blob/master/inferno/io/volumetric&gt;`_ for volumetric datasets, and more!<br><br><br><br><br><br>.. code:: python<br><br>  import torch.nn as nn<br>  from inferno.io.box.cifar10 import get_cifar10_loaders<br>  from inferno.trainers.basic import Trainer<br>  from inferno.trainers.callbacks.logging.tensorboard import TensorboardLogger<br>  from inferno.extensions.layers.convolutional import ConvELU2D<br>  from inferno.extensions.layers.reshape import Flatten<br><br>  # Fill these in:<br>  LOG_DIRECTORY = '...'<br>  SAVE_DIRECTORY = '...'<br>  DATASET_DIRECTORY = '...'<br>  DOWNLOAD_CIFAR = True<br>  USE_CUDA = True<br><br>  # Build torch model<br>  model = nn.Sequential(<br>      ConvELU2D(in_channels=3, out_channels=256, kernel_size=3),<br>      nn.MaxPool2d(kernel_size=2, stride=2),<br>      ConvELU2D(in_channels=256, out_channels=256, kernel_size=3),<br>      nn.MaxPool2d(kernel_size=2, stride=2),<br>      ConvELU2D(in_channels=256, out_channels=256, kernel_size=3),<br>      nn.MaxPool2d(kernel_size=2, stride=2),<br>      Flatten(),<br>      nn.Linear(in_features=(256 * 4 * 4), out_features=10),<br>      nn.Softmax()<br>  )<br><br>  # Load loaders<br>  train_loader, validate_loader = get_cifar10_loaders(DATASET_DIRECTORY,<br>                                                      download=DOWNLOAD_CIFAR)<br><br>  # Build trainer<br>  trainer = Trainer(model) \\<br>    .build_criterion('CrossEntropyLoss') \\<br>    .build_metric('CategoricalError') \\<br>    .build_optimizer('Adam') \\<br>    .validate_every((2, 'epochs')) \\<br>    .save_every((5, 'epochs')) \\<br>    .save_to_directory(SAVE_DIRECTORY) \\<br>    .set_max_num_epochs(10) \\<br>    .build_logger(TensorboardLogger(log_scalars_every=(1, 'iteration'),<br>                                    log_images_every='never'), <br>                  log_directory=LOG_DIRECTORY)<br><br>  # Bind loaders<br>  trainer \\<br>      .bind_loader('train', train_loader) \\<br>      .bind_loader('validate', validate_loader)<br><br>  if USE_CUDA:<br>    trainer.cuda()<br><br>  # Go!<br>  trainer.fit()<br><br><br><br><br>To visualize the training progress, navigate to `LOG_DIRECTORY` and fire up tensorboard with <br><br>.. code:: bash<br><br>  $ tensorboard --logdir=${PWD} --port=6007<br><br><br>and navigate to `localhost:6007` with your browser.<br><br><br><br>Future Features: <br>------------------------<br>Planned features include: <br>  *   a class to encapsulate Hogwild! training over multiple GPUs, <br>  *   minimal shape inference with a dry-run,<br>  *   proper packaging and documentation,<br>  *   cutting-edge fresh-off-the-press implementations of what the future has in store. :)<br><br><br><br>Credits<br>---------<br>All contributors are listed here_. <br><br>.. _here: https://pytorch-inferno.readthedocs.io/en/latest/authors.html<br><br>This packag was partially generated with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template + lots of work by Thorsten. <br><br>.. _Cookiecutter: https://github.com/audreyr/cookiecutter<br>.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage<br><br><br><br>=======<br>History<br>=======<br><br>0.1.0 (2017-08-24)<br>------------------<br><br>* First early release on PyPI<br><br>0.1.1 (2017-08-24)<br>------------------<br><br>* Version Increment<br>    <br>0.1.2 (2017-08-24)<br>------------------<br><br>* Version Increment<br><br><br>0.1.3 (2017-08-24)<br>------------------<br><br>* Updated Documentation<br><br>0.1.4 (2017-08-24)<br>------------------<br><br>* travis auto-deployment on pypi<br><br><br>0.1.5 (2017-08-24)<br>------------------<br><br>* travis changes to run unittest<br><br><br>0.1.6 (2017-08-24)<br>------------------<br><br>* travis missing packages for unittesting<br>* fixed inconsistent version numbers<br><br>0.1.7 (2017-08-25)<br>------------------<br><br>* setup.py critical bugix in install procedure\n          </div>"}, "last_serial": 3128807, "releases": {"0.1.7": [{"comment_text": "", "digests": {"md5": "be790148948125ccfe686fecfebacb9d", "sha256": "4ff7667e90be50b19d3c215c6f40666d9d527299d8f3d1cc739d99434894cc31"}, "downloads": -1, "filename": "inferno-pytorch-0.1.7.tar.gz", "has_sig": false, "md5_digest": "be790148948125ccfe686fecfebacb9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88288, "upload_time": "2017-08-28T11:20:30", "upload_time_iso_8601": "2017-08-28T11:20:30.176470Z", "url": "https://files.pythonhosted.org/packages/5b/09/487465b22d0a2e3d1362708da1d207ec4f53727d39007aa97af8f638d92b/inferno-pytorch-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be790148948125ccfe686fecfebacb9d", "sha256": "4ff7667e90be50b19d3c215c6f40666d9d527299d8f3d1cc739d99434894cc31"}, "downloads": -1, "filename": "inferno-pytorch-0.1.7.tar.gz", "has_sig": false, "md5_digest": "be790148948125ccfe686fecfebacb9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88288, "upload_time": "2017-08-28T11:20:30", "upload_time_iso_8601": "2017-08-28T11:20:30.176470Z", "url": "https://files.pythonhosted.org/packages/5b/09/487465b22d0a2e3d1362708da1d207ec4f53727d39007aa97af8f638d92b/inferno-pytorch-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:12 2020"}