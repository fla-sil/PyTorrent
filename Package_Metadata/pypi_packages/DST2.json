{"info": {"author": "Kienka Cromwell Kio", "author_email": "kienka.kio@sustainalytics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n### The New DST QA Library (DST2)\nDST2 is the new QA library that addresses issues like ease of use,dynamic reporting and error management.\nThe new library has only one function called \"perform_qa\" that does most of the check for the deliverables(similar pandas dataframes).\nFunctionalities\n* Dynamic Error Management\n* Flexible Reporting\n* Search Operations\n* Shorter Notebook Codes\n* More..\n\n### Installation and Importation\nInstallation of DST2 package can be made via pip as shown below.\n\n\n```python\n#pip install DST2\n```\n\n\n```python\n#For iimporting the QA library\nimport DST2.QA as q\nimport pandas as pd\n```\n\nThe package is built on top of pandas thus making it easier to compare dataframes\n\n\n```python\ndfOld = pd.read_excel('dataset/august.xlsx',sheet_name='Results') #change file names to something more intuitive like old.xlsx\ndfNew = pd.read_excel('dataset/october_1.xlsx',sheet_name='Results')#change file names to something more intuitive like new.xlsx\n```\n\n#### Starting a QA process\nWhen initiating a new QA process, you will hae to provide the following\n* Name of the Excel report\n* The previous and new deliverable via pandas\n* The index column (a column name or a list of columns)\n\n\n```python\n#Initiate a QA process\nqa = q.QA_Report(\"Report 1\",dfOld,dfNew,'Company ID')\n```\n\n\n```python\n#Create Reports\nqa.create_report()\n```\n\n\n```python\n#Let's create another report specifying parameters\n```\n\n\n```python\n#Start a Report\nqa2 = q.QA_Report(\"Report 2\",dfOld,dfNew,'Company ID')\n```\n\n#### Perform QA \nThis is the core of the QA process where you decide to:\n* Perform column or score comparisons\n* Set deltas\n* Search columns for QA\n* Perform QA on all columns\n\n\n```python\n#Perform QA on Columns comparisons\nspec_cols = ['Highest Controversy Level-Answer Category','Does the company meet your screening criteria?'] #fields in both files\nqa2.perform_qa(columns=spec_cols)\n```\n\n\n```python\n#Perform QA on Score changes with default delta = 5\ncols = ['Total ESG Score','Percentile']\nqa2.perform_qa(columns=cols,type='score', delta=5) #default is 5 anyways\n```\n\n\n```python\n#Create Reports\nqa2.create_report()\n```\n\n#### Recap!\nWe have used 3 parameters with the perform_qa function which are\n\n* choosing an index that identifies each row uniquely - 'Company ID' \n* columns -- To specify the columns to perform QA on\n* type -- To specify if it is a column or score comparison and by default it performs a column comparison\n* delta -- By default it is set to 5 and it is used when we perform a score comparison to define a threshold.\n\n\n```python\n#Start a Report\nqa3 = q.QA_Report(\"Report 3\",dfOld,dfNew,'Company ID')\n```\n\n### More on parameters\nWe have used 3 more parameters with the perform_qa function which are\n* all_cols -- To perform QA on all columns and it is set to False by default\n* keywords -- To search for some keywords in field names eligible for QA\n* takeout_keywords -- To search for some keywords in field names NOT eligible for QA\n* In this last example we have added the type score because we are performing score changes\n\n\n```python\nqa3.perform_qa(all_cols=True,takeout_keywords=['score','percentile'])\n```\n\n\n```python\nqa3.perform_qa(keywords=['score','percentile'],takeout_keywords='overall',type='score', delta=10)\n```\n\n\n```python\nqa3.create_report()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kienka/DST2", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DST2", "package_url": "https://pypi.org/project/DST2/", "platform": "", "project_url": "https://pypi.org/project/DST2/", "project_urls": {"Homepage": "https://github.com/Kienka/DST2"}, "release_url": "https://pypi.org/project/DST2/0.0.2/", "requires_dist": ["pandas"], "requires_python": "", "summary": "Perform QA between 2 dataframes", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>The New DST QA Library (DST2)</h3>\n<p>DST2 is the new QA library that addresses issues like ease of use,dynamic reporting and error management.\nThe new library has only one function called \"perform_qa\" that does most of the check for the deliverables(similar pandas dataframes).\nFunctionalities</p>\n<ul>\n<li>Dynamic Error Management</li>\n<li>Flexible Reporting</li>\n<li>Search Operations</li>\n<li>Shorter Notebook Codes</li>\n<li>More..</li>\n</ul>\n<h3>Installation and Importation</h3>\n<p>Installation of DST2 package can be made via pip as shown below.</p>\n<pre><span class=\"c1\">#pip install DST2</span>\n</pre>\n<pre><span class=\"c1\">#For iimporting the QA library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">DST2.QA</span> <span class=\"k\">as</span> <span class=\"nn\">q</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n</pre>\n<p>The package is built on top of pandas thus making it easier to compare dataframes</p>\n<pre><span class=\"n\">dfOld</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_excel</span><span class=\"p\">(</span><span class=\"s1\">'dataset/august.xlsx'</span><span class=\"p\">,</span><span class=\"n\">sheet_name</span><span class=\"o\">=</span><span class=\"s1\">'Results'</span><span class=\"p\">)</span> <span class=\"c1\">#change file names to something more intuitive like old.xlsx</span>\n<span class=\"n\">dfNew</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_excel</span><span class=\"p\">(</span><span class=\"s1\">'dataset/october_1.xlsx'</span><span class=\"p\">,</span><span class=\"n\">sheet_name</span><span class=\"o\">=</span><span class=\"s1\">'Results'</span><span class=\"p\">)</span><span class=\"c1\">#change file names to something more intuitive like new.xlsx</span>\n</pre>\n<h4>Starting a QA process</h4>\n<p>When initiating a new QA process, you will hae to provide the following</p>\n<ul>\n<li>Name of the Excel report</li>\n<li>The previous and new deliverable via pandas</li>\n<li>The index column (a column name or a list of columns)</li>\n</ul>\n<pre><span class=\"c1\">#Initiate a QA process</span>\n<span class=\"n\">qa</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">QA_Report</span><span class=\"p\">(</span><span class=\"s2\">\"Report 1\"</span><span class=\"p\">,</span><span class=\"n\">dfOld</span><span class=\"p\">,</span><span class=\"n\">dfNew</span><span class=\"p\">,</span><span class=\"s1\">'Company ID'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\">#Create Reports</span>\n<span class=\"n\">qa</span><span class=\"o\">.</span><span class=\"n\">create_report</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\">#Let's create another report specifying parameters</span>\n</pre>\n<pre><span class=\"c1\">#Start a Report</span>\n<span class=\"n\">qa2</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">QA_Report</span><span class=\"p\">(</span><span class=\"s2\">\"Report 2\"</span><span class=\"p\">,</span><span class=\"n\">dfOld</span><span class=\"p\">,</span><span class=\"n\">dfNew</span><span class=\"p\">,</span><span class=\"s1\">'Company ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Perform QA</h4>\n<p>This is the core of the QA process where you decide to:</p>\n<ul>\n<li>Perform column or score comparisons</li>\n<li>Set deltas</li>\n<li>Search columns for QA</li>\n<li>Perform QA on all columns</li>\n</ul>\n<pre><span class=\"c1\">#Perform QA on Columns comparisons</span>\n<span class=\"n\">spec_cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Highest Controversy Level-Answer Category'</span><span class=\"p\">,</span><span class=\"s1\">'Does the company meet your screening criteria?'</span><span class=\"p\">]</span> <span class=\"c1\">#fields in both files</span>\n<span class=\"n\">qa2</span><span class=\"o\">.</span><span class=\"n\">perform_qa</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">spec_cols</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\">#Perform QA on Score changes with default delta = 5</span>\n<span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Total ESG Score'</span><span class=\"p\">,</span><span class=\"s1\">'Percentile'</span><span class=\"p\">]</span>\n<span class=\"n\">qa2</span><span class=\"o\">.</span><span class=\"n\">perform_qa</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">cols</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'score'</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\">#default is 5 anyways</span>\n</pre>\n<pre><span class=\"c1\">#Create Reports</span>\n<span class=\"n\">qa2</span><span class=\"o\">.</span><span class=\"n\">create_report</span><span class=\"p\">()</span>\n</pre>\n<h4>Recap!</h4>\n<p>We have used 3 parameters with the perform_qa function which are</p>\n<ul>\n<li>choosing an index that identifies each row uniquely - 'Company ID'</li>\n<li>columns -- To specify the columns to perform QA on</li>\n<li>type -- To specify if it is a column or score comparison and by default it performs a column comparison</li>\n<li>delta -- By default it is set to 5 and it is used when we perform a score comparison to define a threshold.</li>\n</ul>\n<pre><span class=\"c1\">#Start a Report</span>\n<span class=\"n\">qa3</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">QA_Report</span><span class=\"p\">(</span><span class=\"s2\">\"Report 3\"</span><span class=\"p\">,</span><span class=\"n\">dfOld</span><span class=\"p\">,</span><span class=\"n\">dfNew</span><span class=\"p\">,</span><span class=\"s1\">'Company ID'</span><span class=\"p\">)</span>\n</pre>\n<h3>More on parameters</h3>\n<p>We have used 3 more parameters with the perform_qa function which are</p>\n<ul>\n<li>all_cols -- To perform QA on all columns and it is set to False by default</li>\n<li>keywords -- To search for some keywords in field names eligible for QA</li>\n<li>takeout_keywords -- To search for some keywords in field names NOT eligible for QA</li>\n<li>In this last example we have added the type score because we are performing score changes</li>\n</ul>\n<pre><span class=\"n\">qa3</span><span class=\"o\">.</span><span class=\"n\">perform_qa</span><span class=\"p\">(</span><span class=\"n\">all_cols</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">takeout_keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'score'</span><span class=\"p\">,</span><span class=\"s1\">'percentile'</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"n\">qa3</span><span class=\"o\">.</span><span class=\"n\">perform_qa</span><span class=\"p\">(</span><span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'score'</span><span class=\"p\">,</span><span class=\"s1\">'percentile'</span><span class=\"p\">],</span><span class=\"n\">takeout_keywords</span><span class=\"o\">=</span><span class=\"s1\">'overall'</span><span class=\"p\">,</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'score'</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">qa3</span><span class=\"o\">.</span><span class=\"n\">create_report</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7003901, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1e7cc7dfc8d08ef2468f283cf23c9918", "sha256": "8ac4c18514d9808b1b1c13f6ba78e391717144b1e4d618dbc57ea521689e484e"}, "downloads": -1, "filename": "DST2-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e7cc7dfc8d08ef2468f283cf23c9918", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19444, "upload_time": "2020-02-12T07:59:35", "upload_time_iso_8601": "2020-02-12T07:59:35.149986Z", "url": "https://files.pythonhosted.org/packages/21/7a/1a2cb36f26d96aba095141588c87566958f0eaf7c3ffe7d582f8010778e6/DST2-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "968711ce1f2ab6a01b677c327086526b", "sha256": "962371820062509cf14df616f001d20804015f147aae45d657138ef371fcab4c"}, "downloads": -1, "filename": "DST2-0.0.1.tar.gz", "has_sig": false, "md5_digest": "968711ce1f2ab6a01b677c327086526b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14574, "upload_time": "2020-02-12T07:59:37", "upload_time_iso_8601": "2020-02-12T07:59:37.346783Z", "url": "https://files.pythonhosted.org/packages/47/07/a66dd1fcf7729042ee69f767895a579f902e47444365f47293f5c13d2bed/DST2-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bc3497995bd1ae96c778cbc6b284c03d", "sha256": "3c244e6368d4fbe08aab1eaae140eace3e25c924b5f363e27d6ef3f588a8d420"}, "downloads": -1, "filename": "DST2-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc3497995bd1ae96c778cbc6b284c03d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20701, "upload_time": "2020-04-12T10:30:13", "upload_time_iso_8601": "2020-04-12T10:30:13.211263Z", "url": "https://files.pythonhosted.org/packages/98/45/94e8774009880b18b14cfe92063e0ddacc62a503a6cea09af76a891ce658/DST2-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a3bb355a7c62e0c23d09afebbff17c4", "sha256": "2fcbab1d05f2cabe0b3393e01f6e6b5183f131bf4f8b69abe92d26a11adb15be"}, "downloads": -1, "filename": "DST2-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2a3bb355a7c62e0c23d09afebbff17c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15942, "upload_time": "2020-04-12T10:30:15", "upload_time_iso_8601": "2020-04-12T10:30:15.537313Z", "url": "https://files.pythonhosted.org/packages/b5/87/a21bc200e31cc914be325ad764967af08b8b211420276e79fab47af1216c/DST2-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc3497995bd1ae96c778cbc6b284c03d", "sha256": "3c244e6368d4fbe08aab1eaae140eace3e25c924b5f363e27d6ef3f588a8d420"}, "downloads": -1, "filename": "DST2-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bc3497995bd1ae96c778cbc6b284c03d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20701, "upload_time": "2020-04-12T10:30:13", "upload_time_iso_8601": "2020-04-12T10:30:13.211263Z", "url": "https://files.pythonhosted.org/packages/98/45/94e8774009880b18b14cfe92063e0ddacc62a503a6cea09af76a891ce658/DST2-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a3bb355a7c62e0c23d09afebbff17c4", "sha256": "2fcbab1d05f2cabe0b3393e01f6e6b5183f131bf4f8b69abe92d26a11adb15be"}, "downloads": -1, "filename": "DST2-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2a3bb355a7c62e0c23d09afebbff17c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15942, "upload_time": "2020-04-12T10:30:15", "upload_time_iso_8601": "2020-04-12T10:30:15.537313Z", "url": "https://files.pythonhosted.org/packages/b5/87/a21bc200e31cc914be325ad764967af08b8b211420276e79fab47af1216c/DST2-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:18 2020"}