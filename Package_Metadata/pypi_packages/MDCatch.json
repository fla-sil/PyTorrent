{"info": {"author": "Grigory Sharov", "author_email": "gsharov@mrc-lmb.cam.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3"], "description": "# MDCatch\n## Still in development, but you are welcome to try!\nA simple PyQt5 app to fetch metadata from EPU or SerialEM.\nIt parses the first found EPU xml and SerialEM mdoc file associated with a data collection session. In case of SerialEM you need to enable saving mdoc file for each movie.\n\n### Prerequisites / installation:\n  - Python 3 and PyQt5. If you don't have PyQt5 module in your system python3 then create a virtual environment:\n    ```\n    python3 -m venv venv\n    source venv/bin/activate\n    pip install PyQt5\n    ```\n  - Relion 3.1 or Scipion 3.0 sourced in your `PATH` (at the moment Scipion 3 is not ready!)\n  - Preprocessing templates: `Schedules` folder for Relion, `template.json` for Scipion\n  - Edit `config.py` to adjust it to your settings\n \n### Running\n Simply `python3 run.py`. User only needs to provide: \n  - path to EPU session folder or path to folder with SerialEM movies/mdoc files\n  - particle size (A)\n  - username\n\n### Working principle\nThe idea is to launch the app on a separate OTF machine as soon as EPU/SerialEM starts data collection and the first movie is acquired.\n\n  1. check if username exists in the NIS database (`ypmatch username passwd`)\n  2. find and parse the first xml/mdoc file, getting all acquisition metadata\n  3. create a Relion/Scipion project folder `username_microscope_date_time` inside PROJECT_PATH (or inside Scipion default projects folder)\n  4. create symlinks for movies, gain reference, defects file, MTF in the project folder\n  5. modify existing Relion Schedules/Scipion templates then launch Relion/Scipion on-the-fly processing\n\n### Screenshots\n\n![Screenshot_20200103_182047](https://user-images.githubusercontent.com/6952870/71741099-e2c6d200-2e55-11ea-9c98-66a14dc8cb2e.png)\n![Screenshot_20200103_182116](https://user-images.githubusercontent.com/6952870/71741103-e5292c00-2e55-11ea-95c3-4cf51de7382c.png)\n\n### TODO\n  - beam tilt is parsed but not used since we parse only a single xml/mdoc for the whole session\n  - SerialEM conversions: gain ref dm4->mrc, defects SerialEM->Relion\n  - K3 EPU 2.6.1 gain file is a rubbish tif, to be fixed by TFS\n  - use GAIN_DICT from config", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/azazellochg/MDCatch", "keywords": "cryo-em python qt5 epu serialem", "license": "", "maintainer": "", "maintainer_email": "", "name": "MDCatch", "package_url": "https://pypi.org/project/MDCatch/", "platform": "", "project_url": "https://pypi.org/project/MDCatch/", "project_urls": {"Bug Reports": "https://github.com/azazellochg/MDCatch/issues", "Homepage": "https://github.com/azazellochg/MDCatch", "Source": "https://github.com/azazellochg/MDCatch"}, "release_url": "https://pypi.org/project/MDCatch/0.9.3/", "requires_dist": null, "requires_python": "", "summary": "Fetch metadata from EPU / SerialEM and launch on-the-fly pre-processing", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># MDCatch\n## Still in development, but you are welcome to try!\nA simple PyQt5 app to fetch metadata from EPU or SerialEM.\nIt parses the first found EPU xml and SerialEM mdoc file associated with a data collection session. In case of SerialEM you need to enable saving mdoc file for each movie.</p>\n<dl>\n<dt>### Prerequisites / installation:</dt>\n<dd><ul>\n<li>Python 3 and PyQt5. If you don\u2019t have PyQt5 module in your system python3 then create a virtual environment:\n<tt>`\npython3 <span class=\"pre\">-m</span> venv venv\nsource venv/bin/activate\npip install PyQt5\n`</tt></li>\n<li>Relion 3.1 or Scipion 3.0 sourced in your <cite>PATH</cite> (at the moment Scipion 3 is not ready!)</li>\n<li>Preprocessing templates: <cite>Schedules</cite> folder for Relion, <cite>template.json</cite> for Scipion</li>\n<li>Edit <cite>config.py</cite> to adjust it to your settings</li>\n</ul>\n</dd>\n<dt>### Running</dt>\n<dd><dl>\n<dt>Simply <cite>python3 run.py</cite>. User only needs to provide:</dt>\n<dd><ul>\n<li>path to EPU session folder or path to folder with SerialEM movies/mdoc files</li>\n<li>particle size (A)</li>\n<li>username</li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n<p>### Working principle\nThe idea is to launch the app on a separate OTF machine as soon as EPU/SerialEM starts data collection and the first movie is acquired.</p>\n<blockquote>\n<ol>\n<li>check if username exists in the NIS database (<cite>ypmatch username passwd</cite>)</li>\n<li>find and parse the first xml/mdoc file, getting all acquisition metadata</li>\n<li>create a Relion/Scipion project folder <cite>username_microscope_date_time</cite> inside PROJECT_PATH (or inside Scipion default projects folder)</li>\n<li>create symlinks for movies, gain reference, defects file, MTF in the project folder</li>\n<li>modify existing Relion Schedules/Scipion templates then launch Relion/Scipion on-the-fly processing</li>\n</ol>\n</blockquote>\n<p>### Screenshots</p>\n<p>![Screenshot_20200103_182047](<a href=\"https://user-images.githubusercontent.com/6952870/71741099-e2c6d200-2e55-11ea-9c98-66a14dc8cb2e.png\" rel=\"nofollow\">https://user-images.githubusercontent.com/6952870/71741099-e2c6d200-2e55-11ea-9c98-66a14dc8cb2e.png</a>)\n![Screenshot_20200103_182116](<a href=\"https://user-images.githubusercontent.com/6952870/71741103-e5292c00-2e55-11ea-95c3-4cf51de7382c.png\" rel=\"nofollow\">https://user-images.githubusercontent.com/6952870/71741103-e5292c00-2e55-11ea-95c3-4cf51de7382c.png</a>)</p>\n<dl>\n<dt>### TODO</dt>\n<dd><ul>\n<li>beam tilt is parsed but not used since we parse only a single xml/mdoc for the whole session</li>\n<li>SerialEM conversions: gain ref dm4-&gt;mrc, defects SerialEM-&gt;Relion</li>\n<li>K3 EPU 2.6.1 gain file is a rubbish tif, to be fixed by TFS</li>\n<li>use GAIN_DICT from config</li>\n</ul>\n</dd>\n</dl>\n\n          </div>"}, "last_serial": 6988459, "releases": {"0.9.3": [{"comment_text": "", "digests": {"md5": "bd06c1a028f4ebeb656fe4ae90cae9f6", "sha256": "d920081862e02982a45d6926a2f85aaa121118ce0c581c430bb985c11512fc45"}, "downloads": -1, "filename": "MDCatch-0.9.3.tar.gz", "has_sig": false, "md5_digest": "bd06c1a028f4ebeb656fe4ae90cae9f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41985, "upload_time": "2020-04-09T18:41:45", "upload_time_iso_8601": "2020-04-09T18:41:45.786999Z", "url": "https://files.pythonhosted.org/packages/50/5d/71b09bfb08feb57eb73023994813b7af3b3a29f58facb4681af4047ca290/MDCatch-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd06c1a028f4ebeb656fe4ae90cae9f6", "sha256": "d920081862e02982a45d6926a2f85aaa121118ce0c581c430bb985c11512fc45"}, "downloads": -1, "filename": "MDCatch-0.9.3.tar.gz", "has_sig": false, "md5_digest": "bd06c1a028f4ebeb656fe4ae90cae9f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41985, "upload_time": "2020-04-09T18:41:45", "upload_time_iso_8601": "2020-04-09T18:41:45.786999Z", "url": "https://files.pythonhosted.org/packages/50/5d/71b09bfb08feb57eb73023994813b7af3b3a29f58facb4681af4047ca290/MDCatch-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:51 2020"}