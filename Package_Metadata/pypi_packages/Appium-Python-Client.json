{"info": {"author": "Isaac Murchie", "author_email": "isaac@saucelabs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Appium Python Client\n====================\n\n[![PyPI version](https://badge.fury.io/py/Appium-Python-Client.svg)](https://badge.fury.io/py/Appium-Python-Client)\n[![Downloads](https://pepy.tech/badge/appium-python-client)](https://pepy.tech/project/appium-python-client)\n\n[![Build Status](https://travis-ci.org/appium/python-client.svg?branch=master)](https://travis-ci.org/appium/python-client)\n[![Build Status](https://dev.azure.com/ki4070ma/python-client/_apis/build/status/appium.python-client?branchName=master)](https://dev.azure.com/ki4070ma/python-client/_build/latest?definitionId=2&branchName=master)\n\nAn extension library for adding [Selenium 3.0 draft](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html) and [Mobile JSON Wire Protocol Specification draft](https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md)\nfunctionality to the Python language bindings, for use with the mobile testing\nframework [Appium](https://appium.io).\n\n# Getting the Appium Python client\n\nThere are three ways to install and use the Appium Python client.\n\n1. Install from [PyPi](https://pypi.org), as\n['Appium-Python-Client'](https://pypi.org/project/Appium-Python-Client/).\n\n    ```shell\n    pip install Appium-Python-Client\n    ```\n\n    You can see the history from [here](https://pypi.org/project/Appium-Python-Client/#history)\n\n2. Install from source, via [PyPi](https://pypi.org). From ['Appium-Python-Client'](https://pypi.org/project/Appium-Python-Client/),\ndownload and unarchive the source tarball (Appium-Python-Client-X.X.tar.gz).\n\n    ```shell\n    tar -xvf Appium-Python-Client-X.X.tar.gz\n    cd Appium-Python-Client-X.X\n    python setup.py install\n    ```\n\n3. Install from source via [GitHub](https://github.com/appium/python-client).\n\n    ```shell\n    git clone git@github.com:appium/python-client.git\n    cd python-client\n    python setup.py install\n    ```\n\n# Development\n\n- Style Guide: https://www.python.org/dev/peps/pep-0008/\n    - `autopep8` helps to format code automatically\n        ```\n        $ python -m autopep8 -r --global-config .config-pep8 -i .\n        ```\n    - `isort` helps to order imports automatically\n        ```\n        $ python -m isort -rc .\n        ```\n        - When you use newly 3rd party modules, add it to [.isort.cfg](.isort.cfg) to keep import order correct\n- Docstring style: Google Style\n    - Refer [link](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)\n- You can customise `CHANGELOG.rst` with commit messages following [.gitchangelog.rc](.gitchangelog.rc)\n    - It generates readable changelog\n- Setup\n    - `pip install --user pipenv`\n    - `python -m pipenv lock --clear`\n       - If you experience the below error, then refer [pypa/pipenv#187](https://github.com/pypa/pipenv/issues/187) to solve it.\n          ```\n          Locking Failed! unknown locale: UTF-8\n          ```\n    - `python -m pipenv install --dev --system`\n    - `pre-commit install`\n\n## Run tests\n\nYou can run all of tests running on CI via `tox` in your local.\n\n```\n$ tox\n```\n\nYou also can run particular tests like below.\n\n### Unit\n\n```\n$ pytest test/unit\n```\n\nRun with `pytest-xdist`\n\n```\n$ pytest -n 2 test/unit\n```\n\n### Functional\n\n```\n$ pytest test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n```\n\n### In parallel for iOS\n1. Create simulators named 'iPhone 8 - 8100' and 'iPhone 8 - 8101'\n2. Install test libraries via pip\n    ```\n    $ pip install pytest pytest-xdist\n    ```\n3. Run tests\n    ```\n    $ pytest -n 2 test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n    ```\n\n# Release\n\nFollow below steps.\n\n```bash\n$ pip install twine\n$ pip install git+git://github.com/vaab/gitchangelog.git # Getting via GitHub repository is necessary for Python 3.7\n# Type the new version number and 'yes' if you can publish it\n# You can test the command with DRY_RUN\n$ DRY_RUN=1 ./release.sh\n$ ./release.sh # release\n```\n\n# Usage\n\nThe Appium Python Client is fully compliant with the Selenium 3.0 specification\ndraft, with some helpers to make mobile testing in Python easier. The majority of\nthe usage remains as it has been for Selenium 2 (WebDriver), and as the [official\nSelenium Python bindings](https://pypi.org/project/selenium/) begins to\nimplement the new specification that implementation will be used underneath, so\ntest code can be written that is utilizable with both bindings.\n\nTo use the new functionality now, and to use the superset of functions, instead of\nincluding the Selenium `webdriver` module in your test code, use that from\nAppium instead.\n\n```python\nfrom appium import webdriver\n```\n\nFrom there much of your test code will work with no change.\n\nAs a base for the following code examples, the following sets up the [UnitTest](https://docs.python.org/2/library/unittest.html)\nenvironment:\n\n```python\n# Android environment\nimport unittest\nfrom appium import webdriver\n\ndesired_caps = {}\ndesired_caps['platformName'] = 'Android'\ndesired_caps['platformVersion'] = '8.1'\ndesired_caps['automationName'] = 'uiautomator2'\ndesired_caps['deviceName'] = 'Android Emulator'\ndesired_caps['app'] = PATH('../../../apps/selendroid-test-app.apk')\n\nself.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)\n```\n\n```python\n# iOS environment\nimport unittest\nfrom appium import webdriver\n\ndesired_caps = {}\ndesired_caps['platformName'] = 'iOS'\ndesired_caps['platformVersion'] = '11.4'\ndesired_caps['automationName'] = 'xcuitest'\ndesired_caps['deviceName'] = 'iPhone Simulator'\ndesired_caps['app'] = PATH('../../apps/UICatalog.app.zip')\n\nself.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)\n```\n\n## Changed or added functionality\n\nThe methods that do change are...\n\n### Direct Connect URLs\n\nIf your Selenium/Appium server decorates the new session capabilities response with the following keys:\n\n- `directConnectProtocol`\n- `directConnectHost`\n- `directConnectPort`\n- `directConnectPath`\n\nThen python client will switch its endpoint to the one specified by the values of those keys.\n\n```python\nimport unittest\nfrom appium import webdriver\n\ndesired_caps = {}\ndesired_caps['platformName'] = 'iOS'\ndesired_caps['platformVersion'] = '11.4'\ndesired_caps['automationName'] = 'xcuitest'\ndesired_caps['deviceName'] = 'iPhone Simulator'\ndesired_caps['app'] = PATH('../../apps/UICatalog.app.zip')\n\nself.driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps, direct_connection=True)\n```\n\n\n### Switching between 'Native' and 'Webview'\n\nFor mobile testing the Selenium methods for switching between windows was previously\ncommandeered for switching between native applications and webview contexts. Methods\nexplicitly for this have been added to the Selenium 3 specification, so moving\nforward these 'context' methods are to be used.\n\nTo get the current context, rather than calling `driver.current_window_handle` you\nuse\n\n```python\ncurrent = driver.current_context\n```\n\nThe available contexts are not retrieved using `driver.window_handles` but with\n\n```python\ndriver.contexts\n```\n\nFinally, to switch to a new context, rather than `driver.switch_to.window(name)`,\nuse the comparable context method\n\n```python\ncontext_name = \"WEBVIEW_1\"\ndriver.switch_to.context(context_name)\n```\n\n\n### Finding elements by iOS UIAutomation search\n\nThis allows elements in iOS applications to be found using recursive element\nsearch using the UIAutomation library. This method is supported on iOS devices\nthat still support UIAutomation, that is, versions which predate XCUITEST.\n\nAdds the methods `driver.find_element_by_ios_uiautomation`\nand `driver.find_elements_by_ios_uiautomation`.\n\n```python\nel = self.driver.find_element_by_ios_uiautomation('.elements()[0]')\nself.assertEqual('UICatalog', el.get_attribute('name'))\n```\n\n```python\nels = self.driver.find_elements_by_ios_uiautomation('.elements()')\nself.assertIsInstance(els, list)\n```\n\n\n### Finding elements by Android UIAutomator search\n\nThis allows elements in an Android application to be found using recursive element\nsearch using the UIAutomator library. Adds the methods `driver.find_element_by_android_uiautomator`\nand `driver.find_elements_by_android_uiautomator`.\n\n```python\nel = self.driver.find_element_by_android_uiautomator('new UiSelector().description(\"Animation\")')\nself.assertIsNotNone(el)\n```\n\n```python\nels = self.driver.find_elements_by_android_uiautomator('new UiSelector().clickable(true)')\nself.assertIsInstance(els, list)\n```\n\n### Finding elements by Android viewtag search\n\nThis method allows finding elements using [View#tags](https://developer.android.com/reference/android/view/View#tags).\nThis method works with [Espresso Driver](https://github.com/appium/appium-espresso-driver).\n\nAdds the methods `driver.find_element_by_android_viewtag` and `driver.find_elements_by_android_viewtag`.\n\n```python\nel = self.driver.find_element_by_android_viewtag('a tag name')\nself.assertIsNotNone(el)\n```\n\n```python\nels = self.driver.find_elements_by_android_viewtag('a tag name')\nself.assertIsInstance(els, list)\n```\n\n### Finding elements by iOS predicates\n\nThis method allows finding elements using iOS predicates. The methods take a\nstring in the format of a predicate, including element type and the value of\nfields.\n\nAdds the methods\n`driver.find_element_by_ios_predicate` and `find_elements_by_ios_predicate`.\n\n```python\nel = self.driver.find_element_by_ios_predicate('wdName == \"Buttons\"')\nself.assertIsNotNone(el)\n```\n\n```python\nels = self.driver.find_elements_by_ios_predicate('wdValue == \"SearchBar\" AND isWDDivisible == 1')\nself.assertIsInstance(els, list)\n```\n\n\n### Finding elements by iOS class chain\n\n**This method is only for [XCUITest driver](https://github.com/appium/appium-xcuitest-driver)**\n\nThis method allows finding elements using iOS class chain. The methods take\na string in the format of a class chain, including element type.\n\nAdds the methods\n`driver.find_element_by_ios_class_chain` and `find_elements_by_ios_class_chain`.\n\n```python\nel = self.driver.find_element_by_ios_class_chain('XCUIElementTypeWindow/XCUIElementTypeButton[3]')\nself.assertIsNotNone(el)\n```\n\n```python\nels = self.driver.find_elements_by_ios_class_chain('XCUIElementTypeWindow/XCUIElementTypeButton')\nself.assertIsInstance(els, list)\n```\n\n### Finding elements by Accessibility ID\n\nAllows for elements to be found using the \"Accessibility ID\". The methods take a\nstring representing the accessibility id or label attached to a given element, e.g., for iOS the accessibility identifier and for Android the content-description. Adds the methods\n`driver.find_element_by_accessibility_id` and `find_elements_by_accessibility_id`.\n\n```python\nel = self.driver.find_element_by_accessibility_id('Animation')\nself.assertIsNotNone(el)\n```\n\n```python\nels = self.driver.find_elements_by_accessibility_id('Animation')\nself.assertIsInstance(els, list)\n```\n\n\n### Touch actions\n\nIn order to accommodate mobile touch actions, and touch actions involving\nmultiple pointers, the Selenium 3.0 draft specifies [\"touch gestures\"](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#touch-gestures) and [\"multi actions\"](https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1), which build upon the touch actions.\n\nmove_to: note that use keyword arguments if no element\n\nThe API is built around `TouchAction` objects, which are chains of one or more actions to be performed in a sequence. The actions are:\n\n#### `perform`\n\nThe `perform` method sends the chain to the server in order to be enacted. It also empties the action chain, so the object can be reused. It will be at the end of all single action chains, but is unused when writing multi-action chains.\n\n#### `tap`\n\nThe `tap` method stands alone, being unable to be chained with other methods. If you need a `tap`-like action that starts a longer chain, use `press`.\n\nIt can take either an element with an optional x-y offset, or absolute x-y coordinates for the tap, and an optional count.\n\n```python\nel = self.driver.find_element_by_accessibility_id('Animation')\naction = TouchAction(self.driver)\naction.tap(el).perform()\nel = self.driver.find_element_by_accessibility_id('Bouncing Balls')\nself.assertIsNotNone(el)\n```\n\n#### `press`\n\n#### `long_press`\n\n#### `release`\n\n#### `move_to`\n\n#### `wait`\n\n#### `cancel`\n\n\n### Multi-touch actions\n\nIn addition to chains of actions performed within a single gesture, it is also possible to perform multiple chains at the same time, to simulate multi-finger actions. This is done through building a `MultiAction` object that comprises a number of individual `TouchAction` objects, one for each \"finger\".\n\nGiven two lists next to each other, we can scroll them independently but simultaneously:\n\n```python\nels = self.driver.find_elements_by_class_name('listView')\na1 = TouchAction()\na1.press(els[0]) \\\n    .move_to(x=10, y=0).move_to(x=10, y=-75).move_to(x=10, y=-600).release()\n\na2 = TouchAction()\na2.press(els[1]) \\\n    .move_to(x=10, y=10).move_to(x=10, y=-300).move_to(x=10, y=-600).release()\n\nma = MultiAction(self.driver, els[0])\nma.add(a1, a2)\nma.perform();\n```\n\n### Appium-Specific touch actions\n\nThere are a small number of operations that mobile testers need to do quite a bit that can be relatively complicated to build using the Touch and Multi-touch Action API.  For these we provide some convenience methods in the Appium client.\n\n#### `driver.tap`\n\nThis method, on the WebDriver object, allows for tapping with multiple fingers, simply by passing in an array of x-y coordinates to tap.\n\n```python\nel = self.driver.find_element_by_name('Touch Paint')\naction.tap(el).perform()\n\n# set up array of two coordinates\npositions = []\npositions.append((100, 200))\npositions.append((100, 400))\n\nself.driver.tap(positions)\n```\n\n#### `driver.swipe`\n\nSwipe from one point to another point.\n\n\n### Application management methods\n\nThere are times when you want, in your tests, to manage the running application,\nsuch as installing or removing an application, etc.\n\n\n#### Backgrounding an application\n\nThe method `driver.background_app` sends the running application to the background\nfor the specified amount of time, in seconds. After that time, the application is\nbrought back to the foreground.\n\n```python\ndriver.background_app(1)\nsleep(2)\nel = driver.find_element_by_name('Animation')\nassertIsNotNone(el)\n```\n\n\n#### Checking if an application is installed\n\nTo check if an application is currently installed on the device, use the `device.is_app_installed`\nmethod. This method takes the bundle id of the application and return `True` or\n`False`.\n\n```python\nassertFalse(self.driver.is_app_installed('sdfsdf'))\nassertTrue(self.driver.is_app_installed('com.example.android.apis'))\n```\n\n\n#### Installing an application\n\nTo install an uninstalled application on the device, use `device.install_app`,\nsending in the path to the application file or archive.\n\n```python\nassertFalse(driver.is_app_installed('io.selendroid.testapp'))\ndriver.install_app('/Users/isaac/code/python-client/test/apps/selendroid-test-app.apk')\nassertTrue(driver.is_app_installed('io.selendroid.testapp'))\n```\n\n\n#### Removing an application\n\nIf you need to remove an application from the device, use `device.remove_app`,\npassing in the application id.\n\n```python\nassertTrue(driver.is_app_installed('com.example.android.apis'))\ndriver.remove_app('com.example.android.apis')\nassertFalse(driver.is_app_installed('com.example.android.apis'))\n```\n\n\n#### Closing and Launching an application\n\nTo launch the application specified in the desired capabilities, call `driver.launch_app`.\nClosing that application is initiated by `driver.close_app`\n\n```python\nel = driver.find_element_by_name('Animation')\nassertIsNotNone(el)\ndriver.close_app();\n\ntry:\n    driver.find_element_by_name('Animation')\nexcept Exception as e:\n    pass # should not exist\n\ndriver.launch_app()\nel = driver.find_element_by_name('Animation')\nassertIsNotNone(el)\n```\n\n#### Resetting an application\n\nTo reset the running application, use `driver.reset`.\n\n```python\nel = driver.find_element_by_name('App')\nel.click()\n\ndriver.reset()\nsleep(5)\n\nel = driver.find_element_by_name('App')\nassertIsNotNone(el)\n```\n\n\n### Other methods\n\n\n#### Start an arbitrary activity\n\nThe `driver.start_activity` method opens arbitrary activities on a device.\nIf the activity is not part of the application under test, it will also\nlaunch the activity's application.\n\n```python\ndriver.start_activity('com.foo.app', '.MyActivity')\n```\n\nYou can also pass additional arguments to start an activity with intent as below,\n\n```python\ndriver.start_activity('com.foo.app', '.MainActivity', app_wait_package='your package name')\n```\n\nand the list of additional arguments that can be passed are,\n\n```python\n             'app_wait_package'\n             'app_wait_activity' \n             'intent_action' \n             'intent_category' \n             'intent_flags' \n             'optional_intent_arguments' \n             'dont_stop_app_on_reset'\n```\n\n#### Retrieving application strings\n\nThe property method `driver.app_strings` returns the application strings from\nthe application on the device.\n\n```python\nstrings = driver.app_strings\n```\n\n\n#### Sending a key event to an Android device\n\nThe `driver.keyevent` method sends a keycode to the device. The keycodes can be\nfound in `AndroidKey` class.\nAndroid only.\n\n```python\nfrom appium.webdriver.extensions.android.nativekey import AndroidKey\n# sending 'Home' key event\ndriver.press_keycode(AndroidKey.HOME)\n```\n\n\n#### Hiding the keyboard in iOS\n\nTo hide the keyboard from view in iOS, use `driver.hide_keyboard`. If a key name\nis sent, the keyboard key with that name will be pressed. If no arguments are\npassed in, the keyboard will be hidden by tapping on the screen outside the text\nfield, thus removing focus from it.\n\n```python\n# get focus on text field, so keyboard comes up\nel = driver.find_element_by_class_name('android.widget.TextView')\nel.set_value('Testing')\n\nel = driver.find_element_by_class_name('keyboard')\nassertTrue(el.is_displayed())\n\ndriver.hide_keyboard('Done')\n\nassertFalse(el.is_displayed())\n```\n\n```python\n# get focus on text field, so keyboard comes up\nel = driver.find_element_by_class_name('android.widget.TextView')\nel.set_value('Testing')\n\nel = driver.find_element_by__name('keyboard')\nassertTrue(el.is_displayed())\n\ndriver.hide_keyboard()\n\nassertFalse(el.is_displayed())\n```\n\n\n#### Retrieving the current running package and activity\n\nThe property method `driver.current_package` returns the name of the current\npackage running on the device.\n\n```python\npackage = driver.current_package\nassertEquals('com.example.android.apis', package)\n```\n\nThe property method `driver.current_activity` returns the name of the current\nactivity running on the device.\n\n```python\nactivity = driver.current_activity\nassertEquals('.ApiDemos', activity)\n```\n\n\n#### Set a value directly on an element\n\nSometimes one needs to directly set the value of an element on the device. To do\nthis, the method `driver.set_value` or `element.set_value` is invoked.\n\n```python\nel = driver.find_element_by_class_name('android.widget.EditText')\ndriver.set_value(el, 'Testing')\n\ntext = el.get_attribute('text')\nassertEqual('Testing', text)\n\nel.set_value('More testing')\ntext = el.get_attribute('text')\nassertEqual('More testing', text)\n```\n\n\n#### Retrieve a file from the device\n\nTo retrieve the contents of a file from the device, use `driver.pull_file`, which\nreturns the contents of the specified file encoded in [Base64](https://docs.python.org/2/library/base64.html).\n\n```python\n# pulling the strings file for our application\ndata = driver.pull_file('data/local/tmp/strings.json')\nstrings = json.loads(data.decode('base64', 'strict'))\nassertEqual('You can\\'t wipe my data, you are a monkey!', strings[u'monkey_wipe_data'])\n```\n\n\n#### Place a file on the device\n\nTo put a file onto the device at a particular place, use the `driver.push_file`\nmethod, which takes the path and the data, encoded as [Base64](https://docs.python.org/2/library/base64.html), to be written to the file.\n\n```python\npath = 'data/local/tmp/test_push_file.txt'\ndata = 'This is the contents of the file to push to the device.'\ndriver.push_file(path, data.encode('base64'))\ndata_ret = driver.pull_file('data/local/tmp/test_push_file.txt').decode('base64')\nself.assertEqual(data, data_ret)\n```\n\n\n#### End test coverage\n\nThere is functionality in the Android emulator to instrument certain activities.\nFor information on this, see the [Appium docs](https://github.com/appium/appium/blob/master/docs/en/android_coverage.md). To end this coverage\nand retrieve the data, use `driver.end_test_coverage`, passing in the `intent`\nthat is being instrumentalized, and the path to the `coverage.ec` file on the\ndevice.\n\n```python\ncoverage_ec_file = driver.end_test_coverage(intent='android.intent.action.MAIN', path='')\n```\n\n\n#### Lock the device\n\nTo lock the device for a certain amount of time, on iOS, use `driver.lock`. The\nargument is the number of seconds to wait before unlocking.\n\n\n#### Shake the device\n\nTo shake the device, use `driver.shake`.\n\n\n#### Appium Settings\n\nSettings are a new concept introduced by appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.\n\nSettings are a way to specify the behavior of the appium server.\n\nSettings are:\n\nMutable, they can be changed during a session\nOnly relevant during the session they are applied. They are reset for each new session.\nControl the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.\n\nSee [the docs](https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/settings.md) for more information.\n\nTo get settings:\n```python\nsettings = driver.get_settings()\n```\n\nTo set settings:\n```python\ndriver.update_settings({\"some setting\": \"the value\"})\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://appium.io/", "keywords": "appium,selenium,selenium 3,python client,mobile automation", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "Appium-Python-Client", "package_url": "https://pypi.org/project/Appium-Python-Client/", "platform": "", "project_url": "https://pypi.org/project/Appium-Python-Client/", "project_urls": {"Homepage": "http://appium.io/"}, "release_url": "https://pypi.org/project/Appium-Python-Client/0.52/", "requires_dist": null, "requires_python": "", "summary": "Python client for Appium", "version": "0.52", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Appium Python Client</h1>\n<p><a href=\"https://badge.fury.io/py/Appium-Python-Client\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1dccb69f4374a930a6ce883b9b98d81f6749ad01/68747470733a2f2f62616467652e667572792e696f2f70792f41707069756d2d507974686f6e2d436c69656e742e737667\"></a>\n<a href=\"https://pepy.tech/project/appium-python-client\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fe4f712d89a4a98dcfa33b3a52f49fbd0e61e5b/68747470733a2f2f706570792e746563682f62616467652f61707069756d2d707974686f6e2d636c69656e74\"></a></p>\n<p><a href=\"https://travis-ci.org/appium/python-client\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d949558d499343693413b0bf5b5a78bc90befa5/68747470733a2f2f7472617669732d63692e6f72672f61707069756d2f707974686f6e2d636c69656e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://dev.azure.com/ki4070ma/python-client/_build/latest?definitionId=2&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aed68c84e28ed33e59e1771261d97a22f5ec0266/68747470733a2f2f6465762e617a7572652e636f6d2f6b69343037306d612f707974686f6e2d636c69656e742f5f617069732f6275696c642f7374617475732f61707069756d2e707974686f6e2d636c69656e743f6272616e63684e616d653d6d6173746572\"></a></p>\n<p>An extension library for adding <a href=\"https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html\" rel=\"nofollow\">Selenium 3.0 draft</a> and <a href=\"https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md\" rel=\"nofollow\">Mobile JSON Wire Protocol Specification draft</a>\nfunctionality to the Python language bindings, for use with the mobile testing\nframework <a href=\"https://appium.io\" rel=\"nofollow\">Appium</a>.</p>\n<h1>Getting the Appium Python client</h1>\n<p>There are three ways to install and use the Appium Python client.</p>\n<ol>\n<li>\n<p>Install from <a href=\"https://pypi.org\" rel=\"nofollow\">PyPi</a>, as\n<a href=\"https://pypi.org/project/Appium-Python-Client/\" rel=\"nofollow\">'Appium-Python-Client'</a>.</p>\n<pre>pip install Appium-Python-Client\n</pre>\n<p>You can see the history from <a href=\"https://pypi.org/project/Appium-Python-Client/#history\" rel=\"nofollow\">here</a></p>\n</li>\n<li>\n<p>Install from source, via <a href=\"https://pypi.org\" rel=\"nofollow\">PyPi</a>. From <a href=\"https://pypi.org/project/Appium-Python-Client/\" rel=\"nofollow\">'Appium-Python-Client'</a>,\ndownload and unarchive the source tarball (Appium-Python-Client-X.X.tar.gz).</p>\n<pre>tar -xvf Appium-Python-Client-X.X.tar.gz\n<span class=\"nb\">cd</span> Appium-Python-Client-X.X\npython setup.py install\n</pre>\n</li>\n<li>\n<p>Install from source via <a href=\"https://github.com/appium/python-client\" rel=\"nofollow\">GitHub</a>.</p>\n<pre>git clone git@github.com:appium/python-client.git\n<span class=\"nb\">cd</span> python-client\npython setup.py install\n</pre>\n</li>\n</ol>\n<h1>Development</h1>\n<ul>\n<li>Style Guide: <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">https://www.python.org/dev/peps/pep-0008/</a>\n<ul>\n<li><code>autopep8</code> helps to format code automatically\n<pre><code>$ python -m autopep8 -r --global-config .config-pep8 -i .\n</code></pre>\n</li>\n<li><code>isort</code> helps to order imports automatically\n<pre><code>$ python -m isort -rc .\n</code></pre>\n<ul>\n<li>When you use newly 3rd party modules, add it to <a href=\".isort.cfg\" rel=\"nofollow\">.isort.cfg</a> to keep import order correct</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docstring style: Google Style\n<ul>\n<li>Refer <a href=\"https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html\" rel=\"nofollow\">link</a></li>\n</ul>\n</li>\n<li>You can customise <code>CHANGELOG.rst</code> with commit messages following <a href=\".gitchangelog.rc\" rel=\"nofollow\">.gitchangelog.rc</a>\n<ul>\n<li>It generates readable changelog</li>\n</ul>\n</li>\n<li>Setup\n<ul>\n<li><code>pip install --user pipenv</code></li>\n<li><code>python -m pipenv lock --clear</code>\n<ul>\n<li>If you experience the below error, then refer <a href=\"https://github.com/pypa/pipenv/issues/187\" rel=\"nofollow\">pypa/pipenv#187</a> to solve it.\n<pre><code>Locking Failed! unknown locale: UTF-8\n</code></pre>\n</li>\n</ul>\n</li>\n<li><code>python -m pipenv install --dev --system</code></li>\n<li><code>pre-commit install</code></li>\n</ul>\n</li>\n</ul>\n<h2>Run tests</h2>\n<p>You can run all of tests running on CI via <code>tox</code> in your local.</p>\n<pre><code>$ tox\n</code></pre>\n<p>You also can run particular tests like below.</p>\n<h3>Unit</h3>\n<pre><code>$ pytest test/unit\n</code></pre>\n<p>Run with <code>pytest-xdist</code></p>\n<pre><code>$ pytest -n 2 test/unit\n</code></pre>\n<h3>Functional</h3>\n<pre><code>$ pytest test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n</code></pre>\n<h3>In parallel for iOS</h3>\n<ol>\n<li>Create simulators named 'iPhone 8 - 8100' and 'iPhone 8 - 8101'</li>\n<li>Install test libraries via pip\n<pre><code>$ pip install pytest pytest-xdist\n</code></pre>\n</li>\n<li>Run tests\n<pre><code>$ pytest -n 2 test/functional/ios/search_context/find_by_ios_class_chain_tests.py\n</code></pre>\n</li>\n</ol>\n<h1>Release</h1>\n<p>Follow below steps.</p>\n<pre>$ pip install twine\n$ pip install git+git://github.com/vaab/gitchangelog.git <span class=\"c1\"># Getting via GitHub repository is necessary for Python 3.7</span>\n<span class=\"c1\"># Type the new version number and 'yes' if you can publish it</span>\n<span class=\"c1\"># You can test the command with DRY_RUN</span>\n$ <span class=\"nv\">DRY_RUN</span><span class=\"o\">=</span><span class=\"m\">1</span> ./release.sh\n$ ./release.sh <span class=\"c1\"># release</span>\n</pre>\n<h1>Usage</h1>\n<p>The Appium Python Client is fully compliant with the Selenium 3.0 specification\ndraft, with some helpers to make mobile testing in Python easier. The majority of\nthe usage remains as it has been for Selenium 2 (WebDriver), and as the <a href=\"https://pypi.org/project/selenium/\" rel=\"nofollow\">official\nSelenium Python bindings</a> begins to\nimplement the new specification that implementation will be used underneath, so\ntest code can be written that is utilizable with both bindings.</p>\n<p>To use the new functionality now, and to use the superset of functions, instead of\nincluding the Selenium <code>webdriver</code> module in your test code, use that from\nAppium instead.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">appium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n</pre>\n<p>From there much of your test code will work with no change.</p>\n<p>As a base for the following code examples, the following sets up the <a href=\"https://docs.python.org/2/library/unittest.html\" rel=\"nofollow\">UnitTest</a>\nenvironment:</p>\n<pre><span class=\"c1\"># Android environment</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">appium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n\n<span class=\"n\">desired_caps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Android'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformVersion'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'8.1'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'automationName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'uiautomator2'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'deviceName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Android Emulator'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'app'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s1\">'../../../apps/selendroid-test-app.apk'</span><span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Remote</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:4723/wd/hub'</span><span class=\"p\">,</span> <span class=\"n\">desired_caps</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># iOS environment</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">appium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n\n<span class=\"n\">desired_caps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'iOS'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformVersion'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'11.4'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'automationName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'xcuitest'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'deviceName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'iPhone Simulator'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'app'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s1\">'../../apps/UICatalog.app.zip'</span><span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Remote</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:4723/wd/hub'</span><span class=\"p\">,</span> <span class=\"n\">desired_caps</span><span class=\"p\">)</span>\n</pre>\n<h2>Changed or added functionality</h2>\n<p>The methods that do change are...</p>\n<h3>Direct Connect URLs</h3>\n<p>If your Selenium/Appium server decorates the new session capabilities response with the following keys:</p>\n<ul>\n<li><code>directConnectProtocol</code></li>\n<li><code>directConnectHost</code></li>\n<li><code>directConnectPort</code></li>\n<li><code>directConnectPath</code></li>\n</ul>\n<p>Then python client will switch its endpoint to the one specified by the values of those keys.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">appium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n\n<span class=\"n\">desired_caps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'iOS'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'platformVersion'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'11.4'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'automationName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'xcuitest'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'deviceName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'iPhone Simulator'</span>\n<span class=\"n\">desired_caps</span><span class=\"p\">[</span><span class=\"s1\">'app'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">PATH</span><span class=\"p\">(</span><span class=\"s1\">'../../apps/UICatalog.app.zip'</span><span class=\"p\">)</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Remote</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:4723/wd/hub'</span><span class=\"p\">,</span> <span class=\"n\">desired_caps</span><span class=\"p\">,</span> <span class=\"n\">direct_connection</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Switching between 'Native' and 'Webview'</h3>\n<p>For mobile testing the Selenium methods for switching between windows was previously\ncommandeered for switching between native applications and webview contexts. Methods\nexplicitly for this have been added to the Selenium 3 specification, so moving\nforward these 'context' methods are to be used.</p>\n<p>To get the current context, rather than calling <code>driver.current_window_handle</code> you\nuse</p>\n<pre><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">current_context</span>\n</pre>\n<p>The available contexts are not retrieved using <code>driver.window_handles</code> but with</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">contexts</span>\n</pre>\n<p>Finally, to switch to a new context, rather than <code>driver.switch_to.window(name)</code>,\nuse the comparable context method</p>\n<pre><span class=\"n\">context_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"WEBVIEW_1\"</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">switch_to</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">context_name</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by iOS UIAutomation search</h3>\n<p>This allows elements in iOS applications to be found using recursive element\nsearch using the UIAutomation library. This method is supported on iOS devices\nthat still support UIAutomation, that is, versions which predate XCUITEST.</p>\n<p>Adds the methods <code>driver.find_element_by_ios_uiautomation</code>\nand <code>driver.find_elements_by_ios_uiautomation</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_ios_uiautomation</span><span class=\"p\">(</span><span class=\"s1\">'.elements()[0]'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s1\">'UICatalog'</span><span class=\"p\">,</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_ios_uiautomation</span><span class=\"p\">(</span><span class=\"s1\">'.elements()'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by Android UIAutomator search</h3>\n<p>This allows elements in an Android application to be found using recursive element\nsearch using the UIAutomator library. Adds the methods <code>driver.find_element_by_android_uiautomator</code>\nand <code>driver.find_elements_by_android_uiautomator</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_android_uiautomator</span><span class=\"p\">(</span><span class=\"s1\">'new UiSelector().description(\"Animation\")'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_android_uiautomator</span><span class=\"p\">(</span><span class=\"s1\">'new UiSelector().clickable(true)'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by Android viewtag search</h3>\n<p>This method allows finding elements using <a href=\"https://developer.android.com/reference/android/view/View#tags\" rel=\"nofollow\">View#tags</a>.\nThis method works with <a href=\"https://github.com/appium/appium-espresso-driver\" rel=\"nofollow\">Espresso Driver</a>.</p>\n<p>Adds the methods <code>driver.find_element_by_android_viewtag</code> and <code>driver.find_elements_by_android_viewtag</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_android_viewtag</span><span class=\"p\">(</span><span class=\"s1\">'a tag name'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_android_viewtag</span><span class=\"p\">(</span><span class=\"s1\">'a tag name'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by iOS predicates</h3>\n<p>This method allows finding elements using iOS predicates. The methods take a\nstring in the format of a predicate, including element type and the value of\nfields.</p>\n<p>Adds the methods\n<code>driver.find_element_by_ios_predicate</code> and <code>find_elements_by_ios_predicate</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_ios_predicate</span><span class=\"p\">(</span><span class=\"s1\">'wdName == \"Buttons\"'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_ios_predicate</span><span class=\"p\">(</span><span class=\"s1\">'wdValue == \"SearchBar\" AND isWDDivisible == 1'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by iOS class chain</h3>\n<p><strong>This method is only for <a href=\"https://github.com/appium/appium-xcuitest-driver\" rel=\"nofollow\">XCUITest driver</a></strong></p>\n<p>This method allows finding elements using iOS class chain. The methods take\na string in the format of a class chain, including element type.</p>\n<p>Adds the methods\n<code>driver.find_element_by_ios_class_chain</code> and <code>find_elements_by_ios_class_chain</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_ios_class_chain</span><span class=\"p\">(</span><span class=\"s1\">'XCUIElementTypeWindow/XCUIElementTypeButton[3]'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_ios_class_chain</span><span class=\"p\">(</span><span class=\"s1\">'XCUIElementTypeWindow/XCUIElementTypeButton'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Finding elements by Accessibility ID</h3>\n<p>Allows for elements to be found using the \"Accessibility ID\". The methods take a\nstring representing the accessibility id or label attached to a given element, e.g., for iOS the accessibility identifier and for Android the content-description. Adds the methods\n<code>driver.find_element_by_accessibility_id</code> and <code>find_elements_by_accessibility_id</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_accessibility_id</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_accessibility_id</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n</pre>\n<h3>Touch actions</h3>\n<p>In order to accommodate mobile touch actions, and touch actions involving\nmultiple pointers, the Selenium 3.0 draft specifies <a href=\"https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#touch-gestures\" rel=\"nofollow\">\"touch gestures\"</a> and <a href=\"https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html#multiactions-1\" rel=\"nofollow\">\"multi actions\"</a>, which build upon the touch actions.</p>\n<p>move_to: note that use keyword arguments if no element</p>\n<p>The API is built around <code>TouchAction</code> objects, which are chains of one or more actions to be performed in a sequence. The actions are:</p>\n<h4><code>perform</code></h4>\n<p>The <code>perform</code> method sends the chain to the server in order to be enacted. It also empties the action chain, so the object can be reused. It will be at the end of all single action chains, but is unused when writing multi-action chains.</p>\n<h4><code>tap</code></h4>\n<p>The <code>tap</code> method stands alone, being unable to be chained with other methods. If you need a <code>tap</code>-like action that starts a longer chain, use <code>press</code>.</p>\n<p>It can take either an element with an optional x-y offset, or absolute x-y coordinates for the tap, and an optional count.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_accessibility_id</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">TouchAction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"p\">)</span>\n<span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">tap</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">perform</span><span class=\"p\">()</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_accessibility_id</span><span class=\"p\">(</span><span class=\"s1\">'Bouncing Balls'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<h4><code>press</code></h4>\n<h4><code>long_press</code></h4>\n<h4><code>release</code></h4>\n<h4><code>move_to</code></h4>\n<h4><code>wait</code></h4>\n<h4><code>cancel</code></h4>\n<h3>Multi-touch actions</h3>\n<p>In addition to chains of actions performed within a single gesture, it is also possible to perform multiple chains at the same time, to simulate multi-finger actions. This is done through building a <code>MultiAction</code> object that comprises a number of individual <code>TouchAction</code> objects, one for each \"finger\".</p>\n<p>Given two lists next to each other, we can scroll them independently but simultaneously:</p>\n<pre><span class=\"n\">els</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_class_name</span><span class=\"p\">(</span><span class=\"s1\">'listView'</span><span class=\"p\">)</span>\n<span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"n\">TouchAction</span><span class=\"p\">()</span>\n<span class=\"n\">a1</span><span class=\"o\">.</span><span class=\"n\">press</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=-</span><span class=\"mi\">75</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=-</span><span class=\"mi\">600</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"n\">TouchAction</span><span class=\"p\">()</span>\n<span class=\"n\">a2</span><span class=\"o\">.</span><span class=\"n\">press</span><span class=\"p\">(</span><span class=\"n\">els</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=-</span><span class=\"mi\">300</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move_to</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=-</span><span class=\"mi\">600</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"n\">ma</span> <span class=\"o\">=</span> <span class=\"n\">MultiAction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"n\">els</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">ma</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">a1</span><span class=\"p\">,</span> <span class=\"n\">a2</span><span class=\"p\">)</span>\n<span class=\"n\">ma</span><span class=\"o\">.</span><span class=\"n\">perform</span><span class=\"p\">();</span>\n</pre>\n<h3>Appium-Specific touch actions</h3>\n<p>There are a small number of operations that mobile testers need to do quite a bit that can be relatively complicated to build using the Touch and Multi-touch Action API.  For these we provide some convenience methods in the Appium client.</p>\n<h4><code>driver.tap</code></h4>\n<p>This method, on the WebDriver object, allows for tapping with multiple fingers, simply by passing in an array of x-y coordinates to tap.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'Touch Paint'</span><span class=\"p\">)</span>\n<span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">tap</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">perform</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># set up array of two coordinates</span>\n<span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">positions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span>\n<span class=\"n\">positions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">))</span>\n\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">tap</span><span class=\"p\">(</span><span class=\"n\">positions</span><span class=\"p\">)</span>\n</pre>\n<h4><code>driver.swipe</code></h4>\n<p>Swipe from one point to another point.</p>\n<h3>Application management methods</h3>\n<p>There are times when you want, in your tests, to manage the running application,\nsuch as installing or removing an application, etc.</p>\n<h4>Backgrounding an application</h4>\n<p>The method <code>driver.background_app</code> sends the running application to the background\nfor the specified amount of time, in seconds. After that time, the application is\nbrought back to the foreground.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">background_app</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<h4>Checking if an application is installed</h4>\n<p>To check if an application is currently installed on the device, use the <code>device.is_app_installed</code>\nmethod. This method takes the bundle id of the application and return <code>True</code> or\n<code>False</code>.</p>\n<pre><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'sdfsdf'</span><span class=\"p\">))</span>\n<span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'com.example.android.apis'</span><span class=\"p\">))</span>\n</pre>\n<h4>Installing an application</h4>\n<p>To install an uninstalled application on the device, use <code>device.install_app</code>,\nsending in the path to the application file or archive.</p>\n<pre><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'io.selendroid.testapp'</span><span class=\"p\">))</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">install_app</span><span class=\"p\">(</span><span class=\"s1\">'/Users/isaac/code/python-client/test/apps/selendroid-test-app.apk'</span><span class=\"p\">)</span>\n<span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'io.selendroid.testapp'</span><span class=\"p\">))</span>\n</pre>\n<h4>Removing an application</h4>\n<p>If you need to remove an application from the device, use <code>device.remove_app</code>,\npassing in the application id.</p>\n<pre><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'com.example.android.apis'</span><span class=\"p\">))</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">remove_app</span><span class=\"p\">(</span><span class=\"s1\">'com.example.android.apis'</span><span class=\"p\">)</span>\n<span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">is_app_installed</span><span class=\"p\">(</span><span class=\"s1\">'com.example.android.apis'</span><span class=\"p\">))</span>\n</pre>\n<h4>Closing and Launching an application</h4>\n<p>To launch the application specified in the desired capabilities, call <code>driver.launch_app</code>.\nClosing that application is initiated by <code>driver.close_app</code></p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">close_app</span><span class=\"p\">();</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span> <span class=\"c1\"># should not exist</span>\n\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">launch_app</span><span class=\"p\">()</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'Animation'</span><span class=\"p\">)</span>\n<span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<h4>Resetting an application</h4>\n<p>To reset the running application, use <code>driver.reset</code>.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">)</span>\n<span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_name</span><span class=\"p\">(</span><span class=\"s1\">'App'</span><span class=\"p\">)</span>\n<span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span>\n</pre>\n<h3>Other methods</h3>\n<h4>Start an arbitrary activity</h4>\n<p>The <code>driver.start_activity</code> method opens arbitrary activities on a device.\nIf the activity is not part of the application under test, it will also\nlaunch the activity's application.</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">start_activity</span><span class=\"p\">(</span><span class=\"s1\">'com.foo.app'</span><span class=\"p\">,</span> <span class=\"s1\">'.MyActivity'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass additional arguments to start an activity with intent as below,</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">start_activity</span><span class=\"p\">(</span><span class=\"s1\">'com.foo.app'</span><span class=\"p\">,</span> <span class=\"s1\">'.MainActivity'</span><span class=\"p\">,</span> <span class=\"n\">app_wait_package</span><span class=\"o\">=</span><span class=\"s1\">'your package name'</span><span class=\"p\">)</span>\n</pre>\n<p>and the list of additional arguments that can be passed are,</p>\n<pre>             <span class=\"s1\">'app_wait_package'</span>\n             <span class=\"s1\">'app_wait_activity'</span> \n             <span class=\"s1\">'intent_action'</span> \n             <span class=\"s1\">'intent_category'</span> \n             <span class=\"s1\">'intent_flags'</span> \n             <span class=\"s1\">'optional_intent_arguments'</span> \n             <span class=\"s1\">'dont_stop_app_on_reset'</span>\n</pre>\n<h4>Retrieving application strings</h4>\n<p>The property method <code>driver.app_strings</code> returns the application strings from\nthe application on the device.</p>\n<pre><span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">app_strings</span>\n</pre>\n<h4>Sending a key event to an Android device</h4>\n<p>The <code>driver.keyevent</code> method sends a keycode to the device. The keycodes can be\nfound in <code>AndroidKey</code> class.\nAndroid only.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">appium.webdriver.extensions.android.nativekey</span> <span class=\"kn\">import</span> <span class=\"n\">AndroidKey</span>\n<span class=\"c1\"># sending 'Home' key event</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">press_keycode</span><span class=\"p\">(</span><span class=\"n\">AndroidKey</span><span class=\"o\">.</span><span class=\"n\">HOME</span><span class=\"p\">)</span>\n</pre>\n<h4>Hiding the keyboard in iOS</h4>\n<p>To hide the keyboard from view in iOS, use <code>driver.hide_keyboard</code>. If a key name\nis sent, the keyboard key with that name will be pressed. If no arguments are\npassed in, the keyboard will be hidden by tapping on the screen outside the text\nfield, thus removing focus from it.</p>\n<pre><span class=\"c1\"># get focus on text field, so keyboard comes up</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_class_name</span><span class=\"p\">(</span><span class=\"s1\">'android.widget.TextView'</span><span class=\"p\">)</span>\n<span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">set_value</span><span class=\"p\">(</span><span class=\"s1\">'Testing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_class_name</span><span class=\"p\">(</span><span class=\"s1\">'keyboard'</span><span class=\"p\">)</span>\n<span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">hide_keyboard</span><span class=\"p\">(</span><span class=\"s1\">'Done'</span><span class=\"p\">)</span>\n\n<span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n</pre>\n<pre><span class=\"c1\"># get focus on text field, so keyboard comes up</span>\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_class_name</span><span class=\"p\">(</span><span class=\"s1\">'android.widget.TextView'</span><span class=\"p\">)</span>\n<span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">set_value</span><span class=\"p\">(</span><span class=\"s1\">'Testing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by__name</span><span class=\"p\">(</span><span class=\"s1\">'keyboard'</span><span class=\"p\">)</span>\n<span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">hide_keyboard</span><span class=\"p\">()</span>\n\n<span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n</pre>\n<h4>Retrieving the current running package and activity</h4>\n<p>The property method <code>driver.current_package</code> returns the name of the current\npackage running on the device.</p>\n<pre><span class=\"n\">package</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">current_package</span>\n<span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"s1\">'com.example.android.apis'</span><span class=\"p\">,</span> <span class=\"n\">package</span><span class=\"p\">)</span>\n</pre>\n<p>The property method <code>driver.current_activity</code> returns the name of the current\nactivity running on the device.</p>\n<pre><span class=\"n\">activity</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">current_activity</span>\n<span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"s1\">'.ApiDemos'</span><span class=\"p\">,</span> <span class=\"n\">activity</span><span class=\"p\">)</span>\n</pre>\n<h4>Set a value directly on an element</h4>\n<p>Sometimes one needs to directly set the value of an element on the device. To do\nthis, the method <code>driver.set_value</code> or <code>element.set_value</code> is invoked.</p>\n<pre><span class=\"n\">el</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_class_name</span><span class=\"p\">(</span><span class=\"s1\">'android.widget.EditText'</span><span class=\"p\">)</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">set_value</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">,</span> <span class=\"s1\">'Testing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s1\">'Testing'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">set_value</span><span class=\"p\">(</span><span class=\"s1\">'More testing'</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">el</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">)</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s1\">'More testing'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<h4>Retrieve a file from the device</h4>\n<p>To retrieve the contents of a file from the device, use <code>driver.pull_file</code>, which\nreturns the contents of the specified file encoded in <a href=\"https://docs.python.org/2/library/base64.html\" rel=\"nofollow\">Base64</a>.</p>\n<pre><span class=\"c1\"># pulling the strings file for our application</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">pull_file</span><span class=\"p\">(</span><span class=\"s1\">'data/local/tmp/strings.json'</span><span class=\"p\">)</span>\n<span class=\"n\">strings</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'base64'</span><span class=\"p\">,</span> <span class=\"s1\">'strict'</span><span class=\"p\">))</span>\n<span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"s1\">'You can</span><span class=\"se\">\\'</span><span class=\"s1\">t wipe my data, you are a monkey!'</span><span class=\"p\">,</span> <span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'monkey_wipe_data'</span><span class=\"p\">])</span>\n</pre>\n<h4>Place a file on the device</h4>\n<p>To put a file onto the device at a particular place, use the <code>driver.push_file</code>\nmethod, which takes the path and the data, encoded as <a href=\"https://docs.python.org/2/library/base64.html\" rel=\"nofollow\">Base64</a>, to be written to the file.</p>\n<pre><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'data/local/tmp/test_push_file.txt'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'This is the contents of the file to push to the device.'</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">push_file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'base64'</span><span class=\"p\">))</span>\n<span class=\"n\">data_ret</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">pull_file</span><span class=\"p\">(</span><span class=\"s1\">'data/local/tmp/test_push_file.txt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'base64'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">data_ret</span><span class=\"p\">)</span>\n</pre>\n<h4>End test coverage</h4>\n<p>There is functionality in the Android emulator to instrument certain activities.\nFor information on this, see the <a href=\"https://github.com/appium/appium/blob/master/docs/en/android_coverage.md\" rel=\"nofollow\">Appium docs</a>. To end this coverage\nand retrieve the data, use <code>driver.end_test_coverage</code>, passing in the <code>intent</code>\nthat is being instrumentalized, and the path to the <code>coverage.ec</code> file on the\ndevice.</p>\n<pre><span class=\"n\">coverage_ec_file</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">end_test_coverage</span><span class=\"p\">(</span><span class=\"n\">intent</span><span class=\"o\">=</span><span class=\"s1\">'android.intent.action.MAIN'</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n<h4>Lock the device</h4>\n<p>To lock the device for a certain amount of time, on iOS, use <code>driver.lock</code>. The\nargument is the number of seconds to wait before unlocking.</p>\n<h4>Shake the device</h4>\n<p>To shake the device, use <code>driver.shake</code>.</p>\n<h4>Appium Settings</h4>\n<p>Settings are a new concept introduced by appium. They are currently not a part of the Mobile JSON Wire Protocol, or the Webdriver spec.</p>\n<p>Settings are a way to specify the behavior of the appium server.</p>\n<p>Settings are:</p>\n<p>Mutable, they can be changed during a session\nOnly relevant during the session they are applied. They are reset for each new session.\nControl the way the appium server behaves during test automation. They do not apply to controlling the app or device under test.</p>\n<p>See <a href=\"https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/settings.md\" rel=\"nofollow\">the docs</a> for more information.</p>\n<p>To get settings:</p>\n<pre><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get_settings</span><span class=\"p\">()</span>\n</pre>\n<p>To set settings:</p>\n<pre><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">update_settings</span><span class=\"p\">({</span><span class=\"s2\">\"some setting\"</span><span class=\"p\">:</span> <span class=\"s2\">\"the value\"</span><span class=\"p\">})</span>\n</pre>\n\n          </div>"}, "last_serial": 7083026, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "146e2500a9428b5d44fff083067e7d11", "sha256": "2a113cb4c78e076699e1e72b9d02696273c483efbef24535ffe7ad86c00ea171"}, "downloads": -1, "filename": "Appium-Python-Client-0.1.macosx-10.9-intel.exe", "has_sig": false, "md5_digest": "146e2500a9428b5d44fff083067e7d11", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 78154, "upload_time": "2014-04-17T17:28:24", "upload_time_iso_8601": "2014-04-17T17:28:24.754516Z", "url": "https://files.pythonhosted.org/packages/51/9a/f43b1c868e6ee5578034ee64d94905870eb03162b0070f5f9abf15256076/Appium-Python-Client-0.1.macosx-10.9-intel.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "57011ab7ffca294d9e569108df06b28a", "sha256": "9a0e91e0e010413bb6ef5800d5ba9f73d3afa091899b0296437e0bcae1906c90"}, "downloads": -1, "filename": "Appium_Python_Client-0.1-py2.7.egg", "has_sig": false, "md5_digest": "57011ab7ffca294d9e569108df06b28a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 29935, "upload_time": "2014-04-17T17:27:56", "upload_time_iso_8601": "2014-04-17T17:27:56.462923Z", "url": "https://files.pythonhosted.org/packages/06/da/34ff2fbaa27dfa516a2624d14df58c7066bdf5c91f8cf3b8c690c5b662b1/Appium_Python_Client-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "091a86a45c8971288a899efd34ecbdf7", "sha256": "18b2d449ca7b566b6415f581a7ec301408175acbaea9773c8350bbe5c91e155e"}, "downloads": -1, "filename": "Appium-Python-Client-0.1.tar.gz", "has_sig": false, "md5_digest": "091a86a45c8971288a899efd34ecbdf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8111, "upload_time": "2014-04-17T17:26:32", "upload_time_iso_8601": "2014-04-17T17:26:32.007612Z", "url": "https://files.pythonhosted.org/packages/76/d4/06ce57a32a31998d8a6b975ee59590ca8190932aa912a8054427e7485296/Appium-Python-Client-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "f4ac5b28c8ebd3b2304ca8909cf9b838", "sha256": "1b1390d0aae9b3643e9e36835437c442f96e9017d04a312deeda0d431efc31b3"}, "downloads": -1, "filename": "Appium-Python-Client-0.10.tar.gz", "has_sig": false, "md5_digest": "f4ac5b28c8ebd3b2304ca8909cf9b838", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12149, "upload_time": "2014-09-24T22:23:50", "upload_time_iso_8601": "2014-09-24T22:23:50.280440Z", "url": "https://files.pythonhosted.org/packages/52/66/04549da362817bd5d777946dc5d2bee9b2da3c6844ed8209a9128fdadf38/Appium-Python-Client-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "effa5bd69afc680b408b9b7fd2414e31", "sha256": "b995e3cd19dbbb08bbc85cc1089eae8e646aa040792288e06131bcbe0ef37c6c"}, "downloads": -1, "filename": "Appium-Python-Client-0.11.tar.gz", "has_sig": false, "md5_digest": "effa5bd69afc680b408b9b7fd2414e31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12237, "upload_time": "2014-11-14T16:44:14", "upload_time_iso_8601": "2014-11-14T16:44:14.493293Z", "url": "https://files.pythonhosted.org/packages/25/4e/80e727318ba0675cf0a9eea4aff569bdd7a7cb2c37d1d24d5bbdafd52c93/Appium-Python-Client-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "578780ca58416040299951a39ae4dfcc", "sha256": "1e39746198c9f276d2418aaeedd79b76b7c2d12e82b59535c423f38be5f0a914"}, "downloads": -1, "filename": "Appium-Python-Client-0.12.tar.gz", "has_sig": false, "md5_digest": "578780ca58416040299951a39ae4dfcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13017, "upload_time": "2015-01-13T22:43:52", "upload_time_iso_8601": "2015-01-13T22:43:52.651915Z", "url": "https://files.pythonhosted.org/packages/f0/d3/b7202ac380092203f99192035758f46a122dcc8488435f0147c24d344237/Appium-Python-Client-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "202f020f190e71a9a48726ab4dba7af6", "sha256": "70addc4d0ac3121497f26d65883ce08d77e0325467a60c1501099a9fa751df6d"}, "downloads": -1, "filename": "Appium-Python-Client-0.13.tar.gz", "has_sig": false, "md5_digest": "202f020f190e71a9a48726ab4dba7af6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13042, "upload_time": "2015-01-23T00:46:14", "upload_time_iso_8601": "2015-01-23T00:46:14.438625Z", "url": "https://files.pythonhosted.org/packages/a8/b3/b5172b9617869eaca0b5789ab98507bdc384982314f7d71bc8e4bdc4ad4b/Appium-Python-Client-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "ef5ddde405c46890c25ef41010dd11b2", "sha256": "91375414bd209f2a0b0cdc064c0ccd8310531f7bf57b7e0acd64edbbfe7e5d2d"}, "downloads": -1, "filename": "Appium-Python-Client-0.14.tar.gz", "has_sig": false, "md5_digest": "ef5ddde405c46890c25ef41010dd11b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13049, "upload_time": "2015-03-06T22:01:12", "upload_time_iso_8601": "2015-03-06T22:01:12.318874Z", "url": "https://files.pythonhosted.org/packages/d8/85/aaf0d91819b574a672d9e36ea7a741658054d279222196c94faee81d1ece/Appium-Python-Client-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "f05800834d312de015c3a5ecc3682827", "sha256": "f7b230abdfbbcb4ce11e7e68e9a3292966867dc16ce813b9517a9d99ea4974a3"}, "downloads": -1, "filename": "Appium-Python-Client-0.15.tar.gz", "has_sig": false, "md5_digest": "f05800834d312de015c3a5ecc3682827", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13206, "upload_time": "2015-06-04T16:20:53", "upload_time_iso_8601": "2015-06-04T16:20:53.539052Z", "url": "https://files.pythonhosted.org/packages/d0/d7/8915f99de20ab6e36932cb052bfe8348864b9342ea050a1cac14b7e71c6c/Appium-Python-Client-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "563138942024e6cdf537cc86f796f436", "sha256": "4c5292466d78111e0b37b95847a16485e3aa326c6b2ef534af1433fef8b4bda0"}, "downloads": -1, "filename": "Appium-Python-Client-0.16.tar.gz", "has_sig": false, "md5_digest": "563138942024e6cdf537cc86f796f436", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13195, "upload_time": "2015-06-04T20:30:11", "upload_time_iso_8601": "2015-06-04T20:30:11.298702Z", "url": "https://files.pythonhosted.org/packages/a6/29/90139ca4d992609c28ae1e3b1680c50fe9babf3100e1a562370a4373bf7e/Appium-Python-Client-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "0844f1c62962cb5ffb306baa1bd15ed0", "sha256": "31bcfca053a8d7b291e0c946a864695b70f7a9515baf564aef29f6267c1ef5d8"}, "downloads": -1, "filename": "Appium-Python-Client-0.17.tar.gz", "has_sig": false, "md5_digest": "0844f1c62962cb5ffb306baa1bd15ed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13417, "upload_time": "2015-07-13T15:58:51", "upload_time_iso_8601": "2015-07-13T15:58:51.103579Z", "url": "https://files.pythonhosted.org/packages/bb/72/a7f2c7c60d2d613a306aec9388234f91d4199e2a36ee5b85ba348bbe6adc/Appium-Python-Client-0.17.tar.gz", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "fd329faf3237f2e29dc61d4a9c2ab50b", "sha256": "ee6828cd1d31073925c7f5c24349e08562ef70040e5e615499975acdb1554d47"}, "downloads": -1, "filename": "Appium-Python-Client-0.18.tar.gz", "has_sig": false, "md5_digest": "fd329faf3237f2e29dc61d4a9c2ab50b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12030, "upload_time": "2015-10-09T14:22:37", "upload_time_iso_8601": "2015-10-09T14:22:37.034175Z", "url": "https://files.pythonhosted.org/packages/68/26/7705fb858855e4983fd3e0ac700fcbbe71ea6f200b2ef84891646ce3c9a6/Appium-Python-Client-0.18.tar.gz", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "be2c57bebf51d1d0bebf4bb9bc260830", "sha256": "556b5478ae6fdb52f29a458d659ed3633f3ad814b1513d6389dc4468820d2c8d"}, "downloads": -1, "filename": "Appium-Python-Client-0.19.tar.gz", "has_sig": false, "md5_digest": "be2c57bebf51d1d0bebf4bb9bc260830", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12032, "upload_time": "2015-10-09T15:37:40", "upload_time_iso_8601": "2015-10-09T15:37:40.489798Z", "url": "https://files.pythonhosted.org/packages/ea/5c/02f4c540c341a001645b2c39597ce4873435c7aabbbc21d4a6936d738c6a/Appium-Python-Client-0.19.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "998f9916281e6ce47f21a832b525479c", "sha256": "2ab1323cbbac1cac31cdb490c037f348535fd281fc63ed676c828aa38c4df695"}, "downloads": -1, "filename": "Appium-Python-Client-0.2.macosx-10.9-intel.exe", "has_sig": false, "md5_digest": "998f9916281e6ce47f21a832b525479c", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 78572, "upload_time": "2014-04-17T22:16:15", "upload_time_iso_8601": "2014-04-17T22:16:15.243944Z", "url": "https://files.pythonhosted.org/packages/b5/e6/c3f9a78576170318957915751a1b35dcaa5822019eff3c8cd1d9dc317b2e/Appium-Python-Client-0.2.macosx-10.9-intel.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eac0b06645f0bca20866de8ff8b270b", "sha256": "bd0524449764b30a7229ff0b7f9927487f99cf0d38c71446dea74dfde1288b60"}, "downloads": -1, "filename": "Appium_Python_Client-0.2-py2.7.egg", "has_sig": false, "md5_digest": "7eac0b06645f0bca20866de8ff8b270b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 30569, "upload_time": "2014-04-17T22:16:05", "upload_time_iso_8601": "2014-04-17T22:16:05.724906Z", "url": "https://files.pythonhosted.org/packages/1e/52/019d3a6ae65fd1f53044f8c2db0439a46f57720e0e0971d11a57dd6500c4/Appium_Python_Client-0.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "01fcef2d124e2d63ab9d00eb8a8d275f", "sha256": "309f3f237daa56ff6035110056a1aa4afba879a2e55867833a229cca9093e9bd"}, "downloads": -1, "filename": "Appium-Python-Client-0.2.tar.gz", "has_sig": false, "md5_digest": "01fcef2d124e2d63ab9d00eb8a8d275f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8801, "upload_time": "2014-04-17T22:16:27", "upload_time_iso_8601": "2014-04-17T22:16:27.921439Z", "url": "https://files.pythonhosted.org/packages/2f/e4/17016c65a043a52fdbaf9dcbae0c938ecd3b3c0f155381cac39bce2a6694/Appium-Python-Client-0.2.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "8dd8deb0567496a7226047e8da3a05e0", "sha256": "4f945f80f2840df6088e6a150b85f4fb203d31828acbe9e646aa4c5be6d3817d"}, "downloads": -1, "filename": "Appium-Python-Client-0.20.tar.gz", "has_sig": false, "md5_digest": "8dd8deb0567496a7226047e8da3a05e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12031, "upload_time": "2015-10-12T17:15:48", "upload_time_iso_8601": "2015-10-12T17:15:48.962877Z", "url": "https://files.pythonhosted.org/packages/97/c0/993b81dde13d3cdd11017b38d085b5d37ab9188905de9744bb1850b967be/Appium-Python-Client-0.20.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "c5b829d9bbd8ceb683d7b933857d4b5f", "sha256": "fe27f8b5e07fbacd4170bfa2d9f3b6de2f3c76ab7970d0c4de02d22b1d0d8fda"}, "downloads": -1, "filename": "Appium-Python-Client-0.21.tar.gz", "has_sig": false, "md5_digest": "c5b829d9bbd8ceb683d7b933857d4b5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12104, "upload_time": "2016-01-20T18:46:02", "upload_time_iso_8601": "2016-01-20T18:46:02.191940Z", "url": "https://files.pythonhosted.org/packages/8c/8a/968f20274b74bea7dca34f432b944c0cbe86c54cf696da91ce5ca2b39c79/Appium-Python-Client-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "83062c1bccc0730317c0c0a7f8525265", "sha256": "7d229b20a841ffcb421cb48145ba54ab90dd3fbfd3abee6bf599829d75d75ebf"}, "downloads": -1, "filename": "Appium-Python-Client-0.22.tar.gz", "has_sig": false, "md5_digest": "83062c1bccc0730317c0c0a7f8525265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12059, "upload_time": "2016-03-16T17:27:08", "upload_time_iso_8601": "2016-03-16T17:27:08.502268Z", "url": "https://files.pythonhosted.org/packages/38/da/33f9723e64543db897dff67dbe0c6596f145fa69111fe249b926f2c9c57e/Appium-Python-Client-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "cc721ed3606eddca274005dda50716cf", "sha256": "60f96d98458cfbaf10db908f6623a1efbd190bf0645b43b0ee55fdd98909df45"}, "downloads": -1, "filename": "Appium-Python-Client-0.23.tar.gz", "has_sig": false, "md5_digest": "cc721ed3606eddca274005dda50716cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12146, "upload_time": "2016-11-10T20:58:07", "upload_time_iso_8601": "2016-11-10T20:58:07.038920Z", "url": "https://files.pythonhosted.org/packages/8e/69/a7aa27657f04958a8fbdbf3ae09f867e3cc527d6dcbb40ef827a3f8d0bd8/Appium-Python-Client-0.23.tar.gz", "yanked": false}], "0.24": [{"comment_text": "", "digests": {"md5": "81a5922efdbb309f6eeb6d19162f70de", "sha256": "e4d86d7b324eb7b0f58337077b75043f68b01bc4b578ff42b425ce3f28f76716"}, "downloads": -1, "filename": "Appium-Python-Client-0.24.tar.gz", "has_sig": false, "md5_digest": "81a5922efdbb309f6eeb6d19162f70de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12274, "upload_time": "2016-12-20T17:20:23", "upload_time_iso_8601": "2016-12-20T17:20:23.229245Z", "url": "https://files.pythonhosted.org/packages/c6/aa/51ceffc104a462c689241cb3fe83c9bb7a7e24f9238bd3a892b28bd50737/Appium-Python-Client-0.24.tar.gz", "yanked": false}], "0.25": [{"comment_text": "", "digests": {"md5": "1258f14add2dff9181592e167d2ec800", "sha256": "efc8bdaba64a33ff8e58d27b6a6fbdb71abe46f318647597a86b6b29a4e60350"}, "downloads": -1, "filename": "Appium-Python-Client-0.25.tar.gz", "has_sig": false, "md5_digest": "1258f14add2dff9181592e167d2ec800", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18084, "upload_time": "2017-11-16T17:27:42", "upload_time_iso_8601": "2017-11-16T17:27:42.777587Z", "url": "https://files.pythonhosted.org/packages/47/a5/8c06bacd4752ee0bc6e906fa029dff6ec41575625b32c7df1a42145cea87/Appium-Python-Client-0.25.tar.gz", "yanked": false}], "0.26": [{"comment_text": "", "digests": {"md5": "4ab2c2763ba524f29671920c8562e99d", "sha256": "235bcb824f187df80e5b1af79064894a51d88b6711c051f9f953ee0aa29bce8e"}, "downloads": -1, "filename": "Appium-Python-Client-0.26.tar.gz", "has_sig": false, "md5_digest": "4ab2c2763ba524f29671920c8562e99d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18444, "upload_time": "2018-01-09T18:58:27", "upload_time_iso_8601": "2018-01-09T18:58:27.443623Z", "url": "https://files.pythonhosted.org/packages/92/7e/b308cc3d94065a7491582d50343920f10ad441cab5f79ef9602f022d479f/Appium-Python-Client-0.26.tar.gz", "yanked": false}], "0.27": [{"comment_text": "", "digests": {"md5": "5b46459c930b70242f4250d552922886", "sha256": "25b87075d1e0b33c1eda2f40681f454abd3920b883d1e57cef72e475817f6bc5"}, "downloads": -1, "filename": "Appium-Python-Client-0.27.tar.gz", "has_sig": false, "md5_digest": "5b46459c930b70242f4250d552922886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24967, "upload_time": "2018-07-10T14:58:03", "upload_time_iso_8601": "2018-07-10T14:58:03.182053Z", "url": "https://files.pythonhosted.org/packages/51/a6/beabf895cd0f87a9f2bfcb641e250a55ee289056a256fa34bf38c65c47b9/Appium-Python-Client-0.27.tar.gz", "yanked": false}], "0.28": [{"comment_text": "", "digests": {"md5": "cf5c6473213a0292bf3f4f29b2556835", "sha256": "0d8f925a0cdb10346046ba200270b7dd6afc26eebebe34241769d92057f4ffec"}, "downloads": -1, "filename": "Appium-Python-Client-0.28.tar.gz", "has_sig": false, "md5_digest": "cf5c6473213a0292bf3f4f29b2556835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24984, "upload_time": "2018-07-13T14:57:21", "upload_time_iso_8601": "2018-07-13T14:57:21.486064Z", "url": "https://files.pythonhosted.org/packages/65/f4/b31229c97ecd03015f2e2abd79ee998f0b91977062d559270abda9f1f3fe/Appium-Python-Client-0.28.tar.gz", "yanked": false}], "0.29": [{"comment_text": "", "digests": {"md5": "a945bac11e9d878ef24d5e87941f7ddd", "sha256": "233f0fadeb15006a0d22a7f9a24849c0b89e8d6ef892ec7e0d95cdc423df3f58"}, "downloads": -1, "filename": "Appium-Python-Client-0.29.tar.gz", "has_sig": false, "md5_digest": "a945bac11e9d878ef24d5e87941f7ddd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27215, "upload_time": "2018-10-30T01:29:04", "upload_time_iso_8601": "2018-10-30T01:29:04.190173Z", "url": "https://files.pythonhosted.org/packages/8e/cd/1286067f75905822a054a88d2e56fb283891e7b5bbb120f582c4889ff981/Appium-Python-Client-0.29.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b9e60f1b18301ff13ee82dc24765b505", "sha256": "0a55aadd6a9773cc06b9050c55c75c9402c975107f48a63984a0cc3c4965d53d"}, "downloads": -1, "filename": "Appium-Python-Client-0.3.macosx-10.9-intel.exe", "has_sig": false, "md5_digest": "b9e60f1b18301ff13ee82dc24765b505", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 78979, "upload_time": "2014-04-24T17:09:17", "upload_time_iso_8601": "2014-04-24T17:09:17.129645Z", "url": "https://files.pythonhosted.org/packages/84/f5/fc80c9b2a0bfdd0814852c9a61da52fae26cfde032c607203705acd10211/Appium-Python-Client-0.3.macosx-10.9-intel.exe", "yanked": false}, {"comment_text": "built for Darwin-13.1.0", "digests": {"md5": "1a4fee90d4cc23c51623bdba2de0d3ba", "sha256": "d42db0991121f9b1deefae9d4319522c4717535538d2e928541af59326af00f9"}, "downloads": -1, "filename": "Appium-Python-Client-0.3.macosx-10.9-intel.tar.gz", "has_sig": false, "md5_digest": "1a4fee90d4cc23c51623bdba2de0d3ba", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 15695, "upload_time": "2014-04-24T17:09:14", "upload_time_iso_8601": "2014-04-24T17:09:14.927102Z", "url": "https://files.pythonhosted.org/packages/ff/da/40b2d4ad03e17bc932b1285d52798333ff9d3debd0e5c539b8b22d8c97b3/Appium-Python-Client-0.3.macosx-10.9-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "40b436473b41eca4bfe85918a5f7fa27", "sha256": "b396dcdb1b72269fae7dcd5dcdfa007bd33bc7883cc2998c0b32547d68cb49e7"}, "downloads": -1, "filename": "Appium-Python-Client-0.3.tar.gz", "has_sig": false, "md5_digest": "40b436473b41eca4bfe85918a5f7fa27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10209, "upload_time": "2014-04-24T17:09:12", "upload_time_iso_8601": "2014-04-24T17:09:12.221782Z", "url": "https://files.pythonhosted.org/packages/0c/9d/67eee9c02f4344557f8f16d9f07963266a6783227747292a788c8ca19e85/Appium-Python-Client-0.3.tar.gz", "yanked": false}], "0.30": [{"comment_text": "", "digests": {"md5": "82f537ce64d04b80d8527a906e50ab8f", "sha256": "177e15e36aa0a247220c42d2006547c9e5f396e82d1a8cda3ad9d9b7a0baf377"}, "downloads": -1, "filename": "Appium-Python-Client-0.30.tar.gz", "has_sig": false, "md5_digest": "82f537ce64d04b80d8527a906e50ab8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27345, "upload_time": "2018-10-31T14:28:15", "upload_time_iso_8601": "2018-10-31T14:28:15.007080Z", "url": "https://files.pythonhosted.org/packages/da/20/db88d202157f317c772df32ee66f7a50e20c1822b242826d40590160dec0/Appium-Python-Client-0.30.tar.gz", "yanked": false}], "0.31": [{"comment_text": "", "digests": {"md5": "57574c9e044d28afb4806029dfa1b91e", "sha256": "54e57d5894070b62cf36b0c3805cce643980fee6561c9af97b5042d64e4d188f"}, "downloads": -1, "filename": "Appium-Python-Client-0.31.tar.gz", "has_sig": false, "md5_digest": "57574c9e044d28afb4806029dfa1b91e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26909, "upload_time": "2018-11-21T15:00:53", "upload_time_iso_8601": "2018-11-21T15:00:53.003800Z", "url": "https://files.pythonhosted.org/packages/40/2f/1a7cc0b95fb1863443500138ac5c587462b679da2647f93ffa1aeb7c43e4/Appium-Python-Client-0.31.tar.gz", "yanked": false}], "0.32": [{"comment_text": "", "digests": {"md5": "7b538ac136e474703be27b7df34db9d1", "sha256": "68352828ccdabd5ccec9fc117cf311f2628a8479a78340ddddea508639e62410"}, "downloads": -1, "filename": "Appium-Python-Client-0.32.tar.gz", "has_sig": false, "md5_digest": "7b538ac136e474703be27b7df34db9d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35891, "upload_time": "2018-12-18T05:13:48", "upload_time_iso_8601": "2018-12-18T05:13:48.314164Z", "url": "https://files.pythonhosted.org/packages/d7/96/21fe7892d937b27e7b89c65693cb3ce715d56cb614503cc09838784643c8/Appium-Python-Client-0.32.tar.gz", "yanked": false}], "0.33": [{"comment_text": "", "digests": {"md5": "0318b51ba988be16d8904b4f267fc13a", "sha256": "42c663408d597994702f895e1ebaae9ef41eea9b48d3484784c04aa70f5d0472"}, "downloads": -1, "filename": "Appium-Python-Client-0.33.tar.gz", "has_sig": false, "md5_digest": "0318b51ba988be16d8904b4f267fc13a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36013, "upload_time": "2018-12-18T06:51:05", "upload_time_iso_8601": "2018-12-18T06:51:05.435243Z", "url": "https://files.pythonhosted.org/packages/be/66/3f7995230ea10334cc078d43eb64d35d8e82815961d24f15e43085039ba3/Appium-Python-Client-0.33.tar.gz", "yanked": false}], "0.34": [{"comment_text": "", "digests": {"md5": "18ffcad9fbb9f8f9a87c52e98bca7a16", "sha256": "dcfaecb5c136b0f8e55bd5b4efe30c878676b39bcbfddea447fbc892b7d4e163"}, "downloads": -1, "filename": "Appium-Python-Client-0.34.tar.gz", "has_sig": false, "md5_digest": "18ffcad9fbb9f8f9a87c52e98bca7a16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36680, "upload_time": "2018-12-18T09:55:20", "upload_time_iso_8601": "2018-12-18T09:55:20.755805Z", "url": "https://files.pythonhosted.org/packages/7b/d1/aa52dfd262f343f56788fb9efc183de534a55bd71991986fc2dd6611ed81/Appium-Python-Client-0.34.tar.gz", "yanked": false}], "0.35": [{"comment_text": "", "digests": {"md5": "af10773e4f682436df5607fc30d1727f", "sha256": "d955643a8e7ba9b8f583768740d6ba51baf8931048c7debf0a3b61e2f8cad056"}, "downloads": -1, "filename": "Appium-Python-Client-0.35.tar.gz", "has_sig": false, "md5_digest": "af10773e4f682436df5607fc30d1727f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37029, "upload_time": "2019-01-17T00:39:50", "upload_time_iso_8601": "2019-01-17T00:39:50.245573Z", "url": "https://files.pythonhosted.org/packages/6d/d5/e002b9d1ce39286a7a324c7a42633d7da9cca51cfaed54a9c064ab496d5c/Appium-Python-Client-0.35.tar.gz", "yanked": false}], "0.36": [{"comment_text": "", "digests": {"md5": "27d18cb172182c321898569ff1f0688a", "sha256": "86fca12910ce033eecc0b618f658be43eb96328c65701af6264d01dde0fe08ec"}, "downloads": -1, "filename": "Appium-Python-Client-0.36.tar.gz", "has_sig": false, "md5_digest": "27d18cb172182c321898569ff1f0688a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37044, "upload_time": "2019-01-18T09:32:31", "upload_time_iso_8601": "2019-01-18T09:32:31.636853Z", "url": "https://files.pythonhosted.org/packages/28/6c/4a290b7cfca19bc5242aba955f0186e8b2f322a5f5437b87b49d11da8ed1/Appium-Python-Client-0.36.tar.gz", "yanked": false}], "0.37": [{"comment_text": "", "digests": {"md5": "d16f4372b388e20c46b1c7489f6c7490", "sha256": "f9d3f39ced289c0578fd9eb02eef62da8737d338227a5017248babfa583726ad"}, "downloads": -1, "filename": "Appium-Python-Client-0.37.tar.gz", "has_sig": false, "md5_digest": "d16f4372b388e20c46b1c7489f6c7490", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39891, "upload_time": "2019-02-11T10:08:43", "upload_time_iso_8601": "2019-02-11T10:08:43.804323Z", "url": "https://files.pythonhosted.org/packages/f2/4b/2be0cb634066a8a79987ede88159189f695a205814b1325992d0119b41f7/Appium-Python-Client-0.37.tar.gz", "yanked": false}], "0.38": [{"comment_text": "", "digests": {"md5": "abeeeeee04fb82af80aff303a6cd6056", "sha256": "17d3b7dd75f716b9beb4ea1b2181e0ade3261678be3434821c086d94f19a4505"}, "downloads": -1, "filename": "Appium-Python-Client-0.38.tar.gz", "has_sig": false, "md5_digest": "abeeeeee04fb82af80aff303a6cd6056", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39839, "upload_time": "2019-02-11T14:49:20", "upload_time_iso_8601": "2019-02-11T14:49:20.929568Z", "url": "https://files.pythonhosted.org/packages/f7/48/4faf12631adec69ffcf13c2c549913f5b6c8adedb8c4250dbab0cfea50bc/Appium-Python-Client-0.38.tar.gz", "yanked": false}], "0.39": [{"comment_text": "", "digests": {"md5": "afc5be2058578476161946b55e5667a3", "sha256": "ea7d94545e236b6bc2baf72b7a5729b22e76ba91d16ecb052875c945cbbaa6b2"}, "downloads": -1, "filename": "Appium-Python-Client-0.39.tar.gz", "has_sig": false, "md5_digest": "afc5be2058578476161946b55e5667a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41665, "upload_time": "2019-02-27T01:23:28", "upload_time_iso_8601": "2019-02-27T01:23:28.704613Z", "url": "https://files.pythonhosted.org/packages/d8/5f/53a171cd6ccb08fa8a4c87739dccb4c9890b09bb44978d5c0b276e9ad67d/Appium-Python-Client-0.39.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "5d4ece8b6900cf4f5df090570b5cf03d", "sha256": "d13c5be04410b274382f81b94a8966e045b87bf38844fe15185650330d94b3d6"}, "downloads": -1, "filename": "Appium-Python-Client-0.4.tar.gz", "has_sig": false, "md5_digest": "5d4ece8b6900cf4f5df090570b5cf03d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10230, "upload_time": "2014-05-03T01:00:55", "upload_time_iso_8601": "2014-05-03T01:00:55.439227Z", "url": "https://files.pythonhosted.org/packages/19/cb/8c4d2e1598e99eb63d688e6622e055740a29ab71e7fb257ce6f274de1f88/Appium-Python-Client-0.4.tar.gz", "yanked": false}], "0.40": [{"comment_text": "", "digests": {"md5": "7a6b5503deea668e5dd8f852a2ff52a8", "sha256": "f7242f4ec685af72975e8207c504f7c22e76f8d9de163dd44d94a0bfd15531dc"}, "downloads": -1, "filename": "Appium-Python-Client-0.40.tar.gz", "has_sig": false, "md5_digest": "7a6b5503deea668e5dd8f852a2ff52a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41743, "upload_time": "2019-03-14T07:41:04", "upload_time_iso_8601": "2019-03-14T07:41:04.156443Z", "url": "https://files.pythonhosted.org/packages/26/f1/f932791ec73be6e13539fb201f6923305b8e67b2b47078fd2efc3ad4f865/Appium-Python-Client-0.40.tar.gz", "yanked": false}], "0.41": [{"comment_text": "", "digests": {"md5": "5cfe4dc6780dd514a06e4b55e45c3a6a", "sha256": "92d693500309735625c5e2303d4c5d73a81d242f04c98efbca31a603eb5c0977"}, "downloads": -1, "filename": "Appium-Python-Client-0.41.tar.gz", "has_sig": false, "md5_digest": "5cfe4dc6780dd514a06e4b55e45c3a6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42079, "upload_time": "2019-04-25T01:54:04", "upload_time_iso_8601": "2019-04-25T01:54:04.028637Z", "url": "https://files.pythonhosted.org/packages/ac/fc/18ac1ea32a042506ca1411f2026d14acc08875b56c528f228426de4cbaf0/Appium-Python-Client-0.41.tar.gz", "yanked": false}], "0.42": [{"comment_text": "", "digests": {"md5": "316f14f25c15c6ba4f9e8289b9185de6", "sha256": "aa1fa9f8ca4ae5cc86670599e29c600b57a43bf53cf658a39aab510120c4894b"}, "downloads": -1, "filename": "Appium-Python-Client-0.42.tar.gz", "has_sig": false, "md5_digest": "316f14f25c15c6ba4f9e8289b9185de6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43771, "upload_time": "2019-05-10T01:53:53", "upload_time_iso_8601": "2019-05-10T01:53:53.309171Z", "url": "https://files.pythonhosted.org/packages/e1/b5/7173141966ca25d6de9caba02dbd07f6ef0583e419f42ae7aed6a8879e0c/Appium-Python-Client-0.42.tar.gz", "yanked": false}], "0.43": [{"comment_text": "", "digests": {"md5": "6df51bfa26e82d71f77d963e5d33d599", "sha256": "75fa90a4dcdf0132e9c2569bb985f07d9e8ab339eda645d4f1a3a898408fc34f"}, "downloads": -1, "filename": "Appium-Python-Client-0.43.tar.gz", "has_sig": false, "md5_digest": "6df51bfa26e82d71f77d963e5d33d599", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43781, "upload_time": "2019-05-18T08:00:16", "upload_time_iso_8601": "2019-05-18T08:00:16.683761Z", "url": "https://files.pythonhosted.org/packages/80/24/8789341310ed100bbb9214268d4a7c545e06bfb34bc4e464444d2826be10/Appium-Python-Client-0.43.tar.gz", "yanked": false}], "0.44": [{"comment_text": "", "digests": {"md5": "847dc3b24c5efcd130dd75cde38048a9", "sha256": "67ab8f97b6fe743e6c93e892d57cc3fa1cf902d32b1ba0b3c616a359b9134933"}, "downloads": -1, "filename": "Appium-Python-Client-0.44.tar.gz", "has_sig": false, "md5_digest": "847dc3b24c5efcd130dd75cde38048a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44299, "upload_time": "2019-05-24T11:19:11", "upload_time_iso_8601": "2019-05-24T11:19:11.034207Z", "url": "https://files.pythonhosted.org/packages/e6/56/dc176410778a2fd31ad66360101c8dac087070d55bb5cf9b88ef22ad2af4/Appium-Python-Client-0.44.tar.gz", "yanked": false}], "0.45": [{"comment_text": "", "digests": {"md5": "4ef66659b0de37dfad79c7cf14ad9826", "sha256": "85083dcab42b827a15af1394846270300fe44e9f793f8ab05d0cef6d805a2aa3"}, "downloads": -1, "filename": "Appium-Python-Client-0.45.tar.gz", "has_sig": false, "md5_digest": "4ef66659b0de37dfad79c7cf14ad9826", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46006, "upload_time": "2019-06-26T22:45:15", "upload_time_iso_8601": "2019-06-26T22:45:15.139595Z", "url": "https://files.pythonhosted.org/packages/df/27/de5470df9420344018f1ef6881701e8782e5936864c48be06e0d6e2a365b/Appium-Python-Client-0.45.tar.gz", "yanked": false}], "0.46": [{"comment_text": "", "digests": {"md5": "7b81a2ac601d71a9065a63a53cf807b7", "sha256": "8decd5a03159d6642ceb4040cb585c2ff874954d2ad830daab04defb9143c70e"}, "downloads": -1, "filename": "Appium-Python-Client-0.46.tar.gz", "has_sig": false, "md5_digest": "7b81a2ac601d71a9065a63a53cf807b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46033, "upload_time": "2019-06-27T13:28:08", "upload_time_iso_8601": "2019-06-27T13:28:08.134876Z", "url": "https://files.pythonhosted.org/packages/bb/98/b55d1bf7b218f41fc0cc9c251936716996a1c8eb40c3d4fa343cfffba6c5/Appium-Python-Client-0.46.tar.gz", "yanked": false}], "0.47": [{"comment_text": "", "digests": {"md5": "c3631a2889dd4932d4e041de8898417d", "sha256": "89f07a2c78253ac7464532972a88b8a659480c506d44ca3c85a1c2601e95c5c1"}, "downloads": -1, "filename": "Appium-Python-Client-0.47.tar.gz", "has_sig": false, "md5_digest": "c3631a2889dd4932d4e041de8898417d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46432, "upload_time": "2019-08-22T12:38:49", "upload_time_iso_8601": "2019-08-22T12:38:49.567825Z", "url": "https://files.pythonhosted.org/packages/7e/9c/db0075d41f367151670cca14320357798c8a7e8864135d2fb743db263d16/Appium-Python-Client-0.47.tar.gz", "yanked": false}], "0.48": [{"comment_text": "", "digests": {"md5": "9fc91722518ac31882ee8b8fdb94e951", "sha256": "8e2034a9d2beef4e7e958ef323052ba72308f8b556aa07939a1551e403b09089"}, "downloads": -1, "filename": "Appium-Python-Client-0.48.tar.gz", "has_sig": false, "md5_digest": "9fc91722518ac31882ee8b8fdb94e951", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54909, "upload_time": "2019-10-23T01:22:46", "upload_time_iso_8601": "2019-10-23T01:22:46.458625Z", "url": "https://files.pythonhosted.org/packages/9b/f2/a02eade6a1cd3c463b5493453cc4c7fecf6eada448844af1c416bcf0f971/Appium-Python-Client-0.48.tar.gz", "yanked": false}], "0.49": [{"comment_text": "", "digests": {"md5": "00fe9d829e569b6038d6c9ddf916984a", "sha256": "97b479edd875a8942d5a47334bd621e9fda81fe5fd9886adfa28eab1caecf916"}, "downloads": -1, "filename": "Appium-Python-Client-0.49.tar.gz", "has_sig": false, "md5_digest": "00fe9d829e569b6038d6c9ddf916984a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56322, "upload_time": "2019-12-24T00:54:40", "upload_time_iso_8601": "2019-12-24T00:54:40.670725Z", "url": "https://files.pythonhosted.org/packages/ce/9d/2cf2934bc219d6dfd749fb1d4cbe2f01dcd32eaedd7c6f2bbed0ad2297a8/Appium-Python-Client-0.49.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ec06b088f75c293b93d6cc6468fce690", "sha256": "2bc8fe4dd76673dd340aec1a9f6fbfd50e189bafe88553ebe8047f9993f9a1fe"}, "downloads": -1, "filename": "Appium-Python-Client-0.5.tar.gz", "has_sig": false, "md5_digest": "ec06b088f75c293b93d6cc6468fce690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10176, "upload_time": "2014-05-09T17:57:05", "upload_time_iso_8601": "2014-05-09T17:57:05.007788Z", "url": "https://files.pythonhosted.org/packages/ce/64/255c9285d26d5c8ed70021311b9efa70eeca95cce7a03438b6d047ce43ab/Appium-Python-Client-0.5.tar.gz", "yanked": false}], "0.50": [{"comment_text": "", "digests": {"md5": "010c7671699325220cde9fd9ce2dbd42", "sha256": "88f03df5fe6273107acc674929b2d384536d6dcf05a8c24aa0f6748fffdc08df"}, "downloads": -1, "filename": "Appium-Python-Client-0.50.tar.gz", "has_sig": false, "md5_digest": "010c7671699325220cde9fd9ce2dbd42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56491, "upload_time": "2020-02-10T13:34:53", "upload_time_iso_8601": "2020-02-10T13:34:53.431748Z", "url": "https://files.pythonhosted.org/packages/53/63/4640438ee3d5e9e9cf1afafcd137a411d5be82b7c0ffeeece098e12d4e82/Appium-Python-Client-0.50.tar.gz", "yanked": false}], "0.51": [{"comment_text": "", "digests": {"md5": "7e0f35165db2481336007d107869e0cd", "sha256": "ee5689ca5d1971dd81c4d056d634058d1205b4702e546795b595edb3fd0f6a7f"}, "downloads": -1, "filename": "Appium-Python-Client-0.51.tar.gz", "has_sig": false, "md5_digest": "7e0f35165db2481336007d107869e0cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56695, "upload_time": "2020-04-12T03:16:19", "upload_time_iso_8601": "2020-04-12T03:16:19.284632Z", "url": "https://files.pythonhosted.org/packages/f2/02/930b04d430cd404856e6eaaf80b01b4c3066375fcb21ac811f1f30f6666d/Appium-Python-Client-0.51.tar.gz", "yanked": false}], "0.52": [{"comment_text": "", "digests": {"md5": "0cacaf065157b3ade7204b9de13eaf55", "sha256": "2481d454343f8e89a7ba073b70e2a6b9126c17b27be1aae5676fe0f8b5c92ada"}, "downloads": -1, "filename": "Appium-Python-Client-0.52.tar.gz", "has_sig": false, "md5_digest": "0cacaf065157b3ade7204b9de13eaf55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56719, "upload_time": "2020-04-23T09:21:25", "upload_time_iso_8601": "2020-04-23T09:21:25.603947Z", "url": "https://files.pythonhosted.org/packages/6c/92/9be7026178eb023668c46454704cbe5b0ee8ef51c4872a2aaa47c0c06345/Appium-Python-Client-0.52.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "200e0b4edf14f4623bdbdab9312aaf12", "sha256": "d778224c7cd2b4c3190142157a2bd5de0d95d24fc5bb6b1ca00813670a6360ad"}, "downloads": -1, "filename": "Appium-Python-Client-0.6.tar.gz", "has_sig": false, "md5_digest": "200e0b4edf14f4623bdbdab9312aaf12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10283, "upload_time": "2014-05-31T04:44:10", "upload_time_iso_8601": "2014-05-31T04:44:10.738930Z", "url": "https://files.pythonhosted.org/packages/69/fd/84a89e39d7066e44a49b5964d011ded27475ccb46cb43d5f71d5e38e54ca/Appium-Python-Client-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "2fbbe5fcca9ea3e5a43173b95e333a5a", "sha256": "bab04e3eefb9526a824f21c0d4053ad42c00348204fce8ab1e6e0912f6c0e841"}, "downloads": -1, "filename": "Appium-Python-Client-0.7.tar.gz", "has_sig": false, "md5_digest": "2fbbe5fcca9ea3e5a43173b95e333a5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10451, "upload_time": "2014-06-06T14:01:24", "upload_time_iso_8601": "2014-06-06T14:01:24.069867Z", "url": "https://files.pythonhosted.org/packages/54/26/62cb76ff46abf115d04afadb1b2c35091e3ba9ae73d72db0b048aa3d99bf/Appium-Python-Client-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "cc8bacc3753a556e63cfa034fb5f4006", "sha256": "af4a1d9dbdf45cac982ebc5835dfe923623df4af67eb022d4dcffdb75b99c69d"}, "downloads": -1, "filename": "Appium-Python-Client-0.8.tar.gz", "has_sig": false, "md5_digest": "cc8bacc3753a556e63cfa034fb5f4006", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10626, "upload_time": "2014-06-30T22:47:37", "upload_time_iso_8601": "2014-06-30T22:47:37.474715Z", "url": "https://files.pythonhosted.org/packages/5a/ea/79edf45585361c5160fab81256d566190fb9cbbc9bf9bb0a73e22a762af3/Appium-Python-Client-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "354b54651647ae8d0debc2c39700a95f", "sha256": "2cac7e14f620877fcfe6795a2d2847fd0911d7abbcda2ed0915b46c56bb77717"}, "downloads": -1, "filename": "Appium-Python-Client-0.9.tar.gz", "has_sig": false, "md5_digest": "354b54651647ae8d0debc2c39700a95f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11595, "upload_time": "2014-07-07T23:34:27", "upload_time_iso_8601": "2014-07-07T23:34:27.646197Z", "url": "https://files.pythonhosted.org/packages/83/72/8f737511b8e47217ee14e6e765746655a72f3fc26baab266275cfe321b14/Appium-Python-Client-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0cacaf065157b3ade7204b9de13eaf55", "sha256": "2481d454343f8e89a7ba073b70e2a6b9126c17b27be1aae5676fe0f8b5c92ada"}, "downloads": -1, "filename": "Appium-Python-Client-0.52.tar.gz", "has_sig": false, "md5_digest": "0cacaf065157b3ade7204b9de13eaf55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56719, "upload_time": "2020-04-23T09:21:25", "upload_time_iso_8601": "2020-04-23T09:21:25.603947Z", "url": "https://files.pythonhosted.org/packages/6c/92/9be7026178eb023668c46454704cbe5b0ee8ef51c4872a2aaa47c0c06345/Appium-Python-Client-0.52.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:38 2020"}