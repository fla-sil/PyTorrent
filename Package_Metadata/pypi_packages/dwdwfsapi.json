{"info": {"author": "stephan192", "author_email": "stephan192@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# dwdwfsapi\nPython client to retrieve data provided by DWD via their geoserver WFS API\n\nThe DWD (Deutscher Wetterdienst) publishes various weather information for Germany.\nThe data is published via their [Geoserver](https://maps.dwd.de). For a more information have a look [here](https://www.dwd.de/DE/leistungen/geowebservice/geowebservice.html) and [here](https://maps.dwd.de/geoserver/wfs?SERVICE=WFS&VERSION=2.0.0&REQUEST=GetCapabilities).\n\n## Install\n```\npip install dwdwfsapi\n```\n\n## Usage\nThe WFS API currently consists only of one module for retrieving the current weather warnings.\n\n### Weather warnings module\n\n#### Quickstart example\nPython code\n```\nfrom dwdwfsapi import DwdWeatherWarningsAPI\ndwd = DwdWeatherWarningsAPI('813073088')\n\nif dwd.data_valid:\n    print(f\"Warncell id: {dwd.warncell_id}\")\n    print(f\"Warncell name: {dwd.warncell_name}\")\n    print(f\"Number of current warnings: {len(dwd.current_warnings)}\")\n    print(f\"Current warning level: {dwd.current_warning_level}\")\n    print(f\"Number of expected warnings: {len(dwd.expected_warnings)}\")\n    print(f\"Expected warning level: {dwd.expected_warning_level}\")\n    print(f\"Last update: {dwd.last_update}\")\n    print('-----------')\n    for warning in dwd.current_warnings:\n        print(warning)\n        print('-----------')\n    for warning in dwd.expected_warnings:\n        print(warning)\n        print('-----------')\n```\n\nResult (formatted for better readability)\n```\nWarncell id: 813073088\nWarncell name: Stadt Stralsund\nNumber of current warnings: 0\nCurrent warning level: 0\nNumber of expected warnings: 1\nExpected warning level: 1\nLast update: 2020-04-18 17:57:29.274000+00:00\n-----------\n{\n    'start_time': datetime.datetime(2020, 4, 18, 23, 0, tzinfo=datetime.timezone.utc),\n    'end_time': datetime.datetime(2020, 4, 19, 5, 0, tzinfo=datetime.timezone.utc),\n    'event': 'FROST',\n    'event_code': 22, 'headline': 'Amtliche WARNUNG vor FROST',\n    'description': 'Es tritt leichter Frost um 0 \u00c2\u00b0C auf. In Bodenn\u00c3\u00a4he wird leichter Frost bis -4 \u00c2\u00b0C erwartet.',\n    'instruction': None, 'level': 1,\n    'parameters':\n    {\n        'Lufttemperatur': '~0 [\u00c2\u00b0C]',\n        'Bodentemperatur': '>-4 [\u00c2\u00b0C]'\n    },\n    'color': '#ffff00'\n}\n-----------\n```\n\n#### Detailed description\n**Methods:**\n- **`__init__(identifier)`**  \n  Create a new weather warnings API class instance  \n\n  The `identifier` can either be a so called `warncell id` (int) or a `warncell name` (str). It is heavily advised to use `warncell id` because `warncell name` is not unique in some cases.  \n  A list auf valid warncell ids and names can be found [here](https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_warncellids_csv.html).  \n  Some of the warncells are outdated but still listed. If init fails search the list for a similar sounding warncell.  \n  Method `update()` is automatically called at the end of a successfull init.  \n\n- **`update()`**  \n  Update data by querying DWD server and parsing result  \n\n  Function should be called regularly, e.g. every 15minutes, to update the data stored in the class attributes.\n\n**Attributes (read only):**\n- **`data_valid : bool`**  \n  A flag wether or not the other attributes contain valid values\n\n- **`warncell_id : int`**  \n  The id of the selected warncell\n\n- **`warncell_name : str`**  \n  The name of the selected warncell  \n\n  If the name is not unique `\" (not unique used ID)!\"` will be added to the name\n\n- **`last_update : datetime`**  \n  The UTC timestamp of the last update\n\n- **`current_warning_level : int`**  \n  Highest currently active warning level  \n\n  Range: 0 (=no warning) to 4 (=extreme weather)\n\n- **`current_warnings : list of dicts`**  \n  Dictionary containing all currently active warnings  \n\n  See section warning dictionary for more details\n\n- **`expected_warning_level : int`**  \n  Highest expected warning level  \n\n  Range: 0 (=no warning) to 4 (=extreme weather)\n\n- **`expected_warnings : list of dicts`**  \n  Dictionary containung all expected warnings\n\n  See section warning dictionary for more details\n    expected_warnings : dict\n\n**Warning dictionary**\n- **`start_time : datetime`**  \n  UTC timestamp when the warning starts\n\n- **`end_time : datetime`**  \n  UTC timestamp when the warning ends\n\n- **`event: str`**  \n  String representation of the warning event\n\n- **`event_code: int`**  \n  Integer representation of the warning event\n\n- **`headline : str`**  \n  The official warning headline\n\n- **`description : str`**  \n  A details warning description\n\n- **`instruction : str`**  \n  Instructions and safety notices\n\n- **`level : int`**  \n  Warning level  \n\n  Range: 0 (=no warning) to 4 (=extreme weather)\n\n- **`parameters : dict`**  \n  Dictionary containing warning specific parameters  \n\n  For more details have a look [here](https://www.dwd.de/DE/leistungen/gds/help/warnungen/cap_dwd_profile_en_pdf.pdf)\n\n- **`color : str`**  \n  Warning color formatted #rrggbb\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stephan192/dwdwfsapi", "keywords": "dwd ows wfs deutscher wetterdienst", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dwdwfsapi", "package_url": "https://pypi.org/project/dwdwfsapi/", "platform": "", "project_url": "https://pypi.org/project/dwdwfsapi/", "project_urls": {"Homepage": "https://github.com/stephan192/dwdwfsapi"}, "release_url": "https://pypi.org/project/dwdwfsapi/1.0.2/", "requires_dist": ["requests (<3,>=2.23.0)", "ciso8601 (<3,>=2.1.3)", "urllib3 (<2,>=1.25.8)"], "requires_python": ">=3.6", "summary": "Python client to retrieve data provided by DWD via their geoserver WFS API", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dwdwfsapi</h1>\n<p>Python client to retrieve data provided by DWD via their geoserver WFS API</p>\n<p>The DWD (Deutscher Wetterdienst) publishes various weather information for Germany.\nThe data is published via their <a href=\"https://maps.dwd.de\" rel=\"nofollow\">Geoserver</a>. For a more information have a look <a href=\"https://www.dwd.de/DE/leistungen/geowebservice/geowebservice.html\" rel=\"nofollow\">here</a> and <a href=\"https://maps.dwd.de/geoserver/wfs?SERVICE=WFS&amp;VERSION=2.0.0&amp;REQUEST=GetCapabilities\" rel=\"nofollow\">here</a>.</p>\n<h2>Install</h2>\n<pre><code>pip install dwdwfsapi\n</code></pre>\n<h2>Usage</h2>\n<p>The WFS API currently consists only of one module for retrieving the current weather warnings.</p>\n<h3>Weather warnings module</h3>\n<h4>Quickstart example</h4>\n<p>Python code</p>\n<pre><code>from dwdwfsapi import DwdWeatherWarningsAPI\ndwd = DwdWeatherWarningsAPI('813073088')\n\nif dwd.data_valid:\n    print(f\"Warncell id: {dwd.warncell_id}\")\n    print(f\"Warncell name: {dwd.warncell_name}\")\n    print(f\"Number of current warnings: {len(dwd.current_warnings)}\")\n    print(f\"Current warning level: {dwd.current_warning_level}\")\n    print(f\"Number of expected warnings: {len(dwd.expected_warnings)}\")\n    print(f\"Expected warning level: {dwd.expected_warning_level}\")\n    print(f\"Last update: {dwd.last_update}\")\n    print('-----------')\n    for warning in dwd.current_warnings:\n        print(warning)\n        print('-----------')\n    for warning in dwd.expected_warnings:\n        print(warning)\n        print('-----------')\n</code></pre>\n<p>Result (formatted for better readability)</p>\n<pre><code>Warncell id: 813073088\nWarncell name: Stadt Stralsund\nNumber of current warnings: 0\nCurrent warning level: 0\nNumber of expected warnings: 1\nExpected warning level: 1\nLast update: 2020-04-18 17:57:29.274000+00:00\n-----------\n{\n    'start_time': datetime.datetime(2020, 4, 18, 23, 0, tzinfo=datetime.timezone.utc),\n    'end_time': datetime.datetime(2020, 4, 19, 5, 0, tzinfo=datetime.timezone.utc),\n    'event': 'FROST',\n    'event_code': 22, 'headline': 'Amtliche WARNUNG vor FROST',\n    'description': 'Es tritt leichter Frost um 0 \u00c2\u00b0C auf. In Bodenn\u00c3\u00a4he wird leichter Frost bis -4 \u00c2\u00b0C erwartet.',\n    'instruction': None, 'level': 1,\n    'parameters':\n    {\n        'Lufttemperatur': '~0 [\u00c2\u00b0C]',\n        'Bodentemperatur': '&gt;-4 [\u00c2\u00b0C]'\n    },\n    'color': '#ffff00'\n}\n-----------\n</code></pre>\n<h4>Detailed description</h4>\n<p><strong>Methods:</strong></p>\n<ul>\n<li>\n<p><strong><code>__init__(identifier)</code></strong><br>\nCreate a new weather warnings API class instance</p>\n<p>The <code>identifier</code> can either be a so called <code>warncell id</code> (int) or a <code>warncell name</code> (str). It is heavily advised to use <code>warncell id</code> because <code>warncell name</code> is not unique in some cases.<br>\nA list auf valid warncell ids and names can be found <a href=\"https://www.dwd.de/DE/leistungen/opendata/help/warnungen/cap_warncellids_csv.html\" rel=\"nofollow\">here</a>.<br>\nSome of the warncells are outdated but still listed. If init fails search the list for a similar sounding warncell.<br>\nMethod <code>update()</code> is automatically called at the end of a successfull init.</p>\n</li>\n<li>\n<p><strong><code>update()</code></strong><br>\nUpdate data by querying DWD server and parsing result</p>\n<p>Function should be called regularly, e.g. every 15minutes, to update the data stored in the class attributes.</p>\n</li>\n</ul>\n<p><strong>Attributes (read only):</strong></p>\n<ul>\n<li>\n<p><strong><code>data_valid : bool</code></strong><br>\nA flag wether or not the other attributes contain valid values</p>\n</li>\n<li>\n<p><strong><code>warncell_id : int</code></strong><br>\nThe id of the selected warncell</p>\n</li>\n<li>\n<p><strong><code>warncell_name : str</code></strong><br>\nThe name of the selected warncell</p>\n<p>If the name is not unique <code>\" (not unique used ID)!\"</code> will be added to the name</p>\n</li>\n<li>\n<p><strong><code>last_update : datetime</code></strong><br>\nThe UTC timestamp of the last update</p>\n</li>\n<li>\n<p><strong><code>current_warning_level : int</code></strong><br>\nHighest currently active warning level</p>\n<p>Range: 0 (=no warning) to 4 (=extreme weather)</p>\n</li>\n<li>\n<p><strong><code>current_warnings : list of dicts</code></strong><br>\nDictionary containing all currently active warnings</p>\n<p>See section warning dictionary for more details</p>\n</li>\n<li>\n<p><strong><code>expected_warning_level : int</code></strong><br>\nHighest expected warning level</p>\n<p>Range: 0 (=no warning) to 4 (=extreme weather)</p>\n</li>\n<li>\n<p><strong><code>expected_warnings : list of dicts</code></strong><br>\nDictionary containung all expected warnings</p>\n<p>See section warning dictionary for more details\nexpected_warnings : dict</p>\n</li>\n</ul>\n<p><strong>Warning dictionary</strong></p>\n<ul>\n<li>\n<p><strong><code>start_time : datetime</code></strong><br>\nUTC timestamp when the warning starts</p>\n</li>\n<li>\n<p><strong><code>end_time : datetime</code></strong><br>\nUTC timestamp when the warning ends</p>\n</li>\n<li>\n<p><strong><code>event: str</code></strong><br>\nString representation of the warning event</p>\n</li>\n<li>\n<p><strong><code>event_code: int</code></strong><br>\nInteger representation of the warning event</p>\n</li>\n<li>\n<p><strong><code>headline : str</code></strong><br>\nThe official warning headline</p>\n</li>\n<li>\n<p><strong><code>description : str</code></strong><br>\nA details warning description</p>\n</li>\n<li>\n<p><strong><code>instruction : str</code></strong><br>\nInstructions and safety notices</p>\n</li>\n<li>\n<p><strong><code>level : int</code></strong><br>\nWarning level</p>\n<p>Range: 0 (=no warning) to 4 (=extreme weather)</p>\n</li>\n<li>\n<p><strong><code>parameters : dict</code></strong><br>\nDictionary containing warning specific parameters</p>\n<p>For more details have a look <a href=\"https://www.dwd.de/DE/leistungen/gds/help/warnungen/cap_dwd_profile_en_pdf.pdf\" rel=\"nofollow\">here</a></p>\n</li>\n<li>\n<p><strong><code>color : str</code></strong><br>\nWarning color formatted #rrggbb</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7100989, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d1dae97f63e25df415a5cf68bc1133b3", "sha256": "6d7183558ab5a6f6acf4979479ce3a589684defbfbb35f5c1b699f2ac030ee63"}, "downloads": -1, "filename": "dwdwfsapi-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1dae97f63e25df415a5cf68bc1133b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7940, "upload_time": "2020-04-19T13:20:27", "upload_time_iso_8601": "2020-04-19T13:20:27.715882Z", "url": "https://files.pythonhosted.org/packages/09/3e/ac01f52842132021556107d6d712765d81daf621c39f6259fd219162d47f/dwdwfsapi-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1b06951033339830a1a9ab27b646e7a", "sha256": "6c0583bbcce792c8e5d1fc64991ecd192187c7c6c3edc7cc93ef9620a7a5520f"}, "downloads": -1, "filename": "dwdwfsapi-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c1b06951033339830a1a9ab27b646e7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9045, "upload_time": "2020-04-19T13:20:29", "upload_time_iso_8601": "2020-04-19T13:20:29.520073Z", "url": "https://files.pythonhosted.org/packages/06/ad/c8961a9cc781afa673079658ee32b650096246b7aa5faf1d4681ab7324e5/dwdwfsapi-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "915ad281c5e3780780f3f89fc42601b0", "sha256": "93eae502db8031bed8cb53db37a98ba5de74257666c868eb0755a5e718099ead"}, "downloads": -1, "filename": "dwdwfsapi-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "915ad281c5e3780780f3f89fc42601b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7982, "upload_time": "2020-04-20T18:26:43", "upload_time_iso_8601": "2020-04-20T18:26:43.799048Z", "url": "https://files.pythonhosted.org/packages/b2/8c/fbf5fc85935156856670f2279a49560ae91d36f57c5d6cd00aa9300d8f5d/dwdwfsapi-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c92d80d7e72a46c304c5a4c9984a870", "sha256": "96242380dae1476d4edc6f55d0b1732bf06dc47432ebdf93763b28696f7c7a27"}, "downloads": -1, "filename": "dwdwfsapi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5c92d80d7e72a46c304c5a4c9984a870", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9172, "upload_time": "2020-04-20T18:26:45", "upload_time_iso_8601": "2020-04-20T18:26:45.510174Z", "url": "https://files.pythonhosted.org/packages/be/45/12a622cf27faad1757fd8d91f71e9735620e8538b825a8586871b91afccf/dwdwfsapi-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "69f5ae82dee54b71109f154d790b3da0", "sha256": "94dc87e12d5ef44a3a8f54451444bc6a4f1cc68c482f88395699c8d35afb735b"}, "downloads": -1, "filename": "dwdwfsapi-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "69f5ae82dee54b71109f154d790b3da0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8038, "upload_time": "2020-04-25T19:42:09", "upload_time_iso_8601": "2020-04-25T19:42:09.000726Z", "url": "https://files.pythonhosted.org/packages/f7/c1/142137748f277be69b7eca94e4f90adfc508a0886f33ded33cabc824129b/dwdwfsapi-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33675041f977dd714868fef08d1a04c4", "sha256": "5c5b3e2d57a69c999fee1960c7107d9f8c65dea042cdf18db2eeb9b71a6f2361"}, "downloads": -1, "filename": "dwdwfsapi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "33675041f977dd714868fef08d1a04c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9366, "upload_time": "2020-04-25T19:42:10", "upload_time_iso_8601": "2020-04-25T19:42:10.978201Z", "url": "https://files.pythonhosted.org/packages/3b/e5/2189aeddce152f75de11b4ad25527385d10287ae56b56314ca6ca7e360e1/dwdwfsapi-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "69f5ae82dee54b71109f154d790b3da0", "sha256": "94dc87e12d5ef44a3a8f54451444bc6a4f1cc68c482f88395699c8d35afb735b"}, "downloads": -1, "filename": "dwdwfsapi-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "69f5ae82dee54b71109f154d790b3da0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8038, "upload_time": "2020-04-25T19:42:09", "upload_time_iso_8601": "2020-04-25T19:42:09.000726Z", "url": "https://files.pythonhosted.org/packages/f7/c1/142137748f277be69b7eca94e4f90adfc508a0886f33ded33cabc824129b/dwdwfsapi-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33675041f977dd714868fef08d1a04c4", "sha256": "5c5b3e2d57a69c999fee1960c7107d9f8c65dea042cdf18db2eeb9b71a6f2361"}, "downloads": -1, "filename": "dwdwfsapi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "33675041f977dd714868fef08d1a04c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9366, "upload_time": "2020-04-25T19:42:10", "upload_time_iso_8601": "2020-04-25T19:42:10.978201Z", "url": "https://files.pythonhosted.org/packages/3b/e5/2189aeddce152f75de11b4ad25527385d10287ae56b56314ca6ca7e360e1/dwdwfsapi-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:51 2020"}