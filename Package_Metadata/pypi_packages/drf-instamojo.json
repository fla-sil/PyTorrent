{"info": {"author": "101Loop", "author_email": "pypidev@civilmachines.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "# Instamojo | Django REST Framework\n\n**A package for Instamojo integration in Django REST Framework**<br>\n\n`Instamojo | Django REST Framework` is a Django packaged app that provides necessary `views` based in Django REST \nFramework. It enables easy integration of Instamojo Payment Gateway with Web/Mobile Application with a RESTful API \nbased server.\n\nContributors: **WE'RE LOOKING FOR SOMEONE WHO CAN CONTRIBUTE IN DOCS**\n- **[Civil Machines Technologies Private Limited](https://github.com/civilmahines)**: For providing me platform and\nfunds for research work. This project is hosted currently with `CMT` only. \n- **[Himanshu Shankar](https://github.com/iamhssingh)**: Himanshu Shankar has initiated this project and worked on this\nproject to collect useful functions and classes that are being used in various projects.\n\n#### Installation\n\n- Download and Install via `pip`\n```\npip install drf_instamojo\n```\nor<br>\nDownload and Install via `easy_install`\n```\neasy_install drf_instamojo\n```\n- Add, if wanted, `drfaddons` in `INSTALLED_APPS` (This is although not required!)\n```\nINSTALLED_APPS = [\n    ...\n    'drf_instamojo',\n    ...\n]\n```\n- Also add other dependencies in `INSTALLED_APPS`<br>\n```\nINSTALLED_APPS = [\n    ...\n    'drfaddons',\n    ...\n]\n```\n- Include urls of `drf_instamojo` in `urls.py`\n```\nurlpatterns = [\n    ...\n    path('api/instamojo/', include('drf_instamojo.urls')),\n    ...\n]\n\n# or\n\nurlpatterns = [\n    ...\n    url(r'^api/instamojo/', include('drf_instamojo.urls')),\n    ...\n]\n```\n- Run migrate command:\n```\npython manage.py migrate\n```\n\n### MODELS\nThe application has three models:\n\n- `InstamojoConfiguration`: You need to define your Instamojo configurations in this model. Only one object can have\n`is_active` set to `True` which will be used with Instamojo API.\n- `PaymentRequest`: This will contain all the Instamojo Payment Request that one will create with Instamojo.\n- `Payment`: This will contain all the responses received from Instamojo API against payment.\n\n### VIEWS\nThe application has following views:\n\n- `ListAddPaymentRequestView`: All payment request should be made on this view. Requires a logged in user.\nIt'll provide user with required data, including `longurl` that will be used to make payment.\n- `ListAddPaymentView`: All response data should be posted on this view. Doesn't requires a logged in user.\n\n### URLS\n- `request/`: All payment request to be made via this URL.\n- `payment/`: All payment reponses to be posted on this URL.\n\n### Quickstart Guide\n\n- Complete `Installation Steps` (mentioned above)\n- Create a configuration via `Django Admin` in `Instamojo Configuration`\n- Set `is_active` to `True`\n- Note: Use sandbox mode credential at first\n\n### How to integrate with apps\n\n- Use `serializers` to integrate with custom apps.\n\n#### Creating Payment Request\n##### Example\n- Create a view: `PaymentView`\n- Use `PaymentRequestSerializer` to create a payment request.\n- Check example code in `serializers.py`:\n```\n# Initialize serializer with proper data\nprs = PaymentRequestSerializer(data={'amount': 120.00, 'purpose': 'Test', 'send_sms': False,\n                                     'redirect_url': 'http://127.0.0.1/api/test/'})\n\n# Check if data is valid\nprs.is_valid(raise_exception=True)\n\ninstance = prs.save(created_by=user)\n```\n- Save `instance` as foreign key in app pointing to bill for which the payment request is made.\n- Return `longurl` to client for making payment\n\n##### Problem with created_by requirement in .save() of serializer\n- If app doesn't require user to login, use following logic: \n    - Inside payment view, take following data from user:\n        - Name of the customer\n        - Mobile Number of the customer `mobile: 9987987345`\n        - Email of the customer `email: test@abc.com`\n    - Use following code to create a logic around getting an existing or creating a new user:\n```\nfrom django.contrib.auth import get_user_model\n\nuser_model = get_user_model()\ntry:\n    user = user_model.objects.get(email=email)\nexcept user_model.DoesNotExist:\n    try:\n        user = user_model.objects.get(mobile=mobile)\n    except user_model.DoesNotExist:\n        # Now you're dead sure that user does not exists.\n        user = user_model.objects.create(name=name, mobile=mobile, email=email, password=\"RANDOM_PASSWORD\")\n\n```\n- Otherwise, simply use `user = request.user` as user while calling `.save()` on serializer.\n- *Bonus Pointer*: Check out **[Django REST Framework - User](https://github.com/101loop/drf-user/)**\n\n#### Payment Completion\n- Use `payment_done` signal\n- Create `signals` python directory with `__init__.py, handlers.py` in app\n- In `handlers.py`, create a function for handling `payment_done` signal\n```\nfrom django.dispatch import receiver\n\nfrom drf_instamojo.models import PaymentRequest\nfrom drf_instamojo.signals import payment_done\n\n\n@receiver(signal=payment_done, sender=PaymentRequest)\ndef payment_done_handler(instance: PaymentRequest, sender, *args, **kwargs):\n    ...\n    # Payment completed\n    # bill.paid()\n    # item.dispatch()\n    ...\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/101Loop/drf-instamojo", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "drf-instamojo", "package_url": "https://pypi.org/project/drf-instamojo/", "platform": "", "project_url": "https://pypi.org/project/drf-instamojo/", "project_urls": {"Homepage": "https://github.com/101Loop/drf-instamojo"}, "release_url": "https://pypi.org/project/drf-instamojo/0.0.1/", "requires_dist": ["Django (>=1.11)", "djangorestframework (>=3.8.0)", "drfaddons (>=0.1.0)", "instamojo-wrapper (==1.1)"], "requires_python": ">=3.4", "summary": "Instamojo Integration based on Django REST Framework", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Instamojo | Django REST Framework</h1>\n<p><strong>A package for Instamojo integration in Django REST Framework</strong><br></p>\n<p><code>Instamojo | Django REST Framework</code> is a Django packaged app that provides necessary <code>views</code> based in Django REST\nFramework. It enables easy integration of Instamojo Payment Gateway with Web/Mobile Application with a RESTful API\nbased server.</p>\n<p>Contributors: <strong>WE'RE LOOKING FOR SOMEONE WHO CAN CONTRIBUTE IN DOCS</strong></p>\n<ul>\n<li><strong><a href=\"https://github.com/civilmahines\" rel=\"nofollow\">Civil Machines Technologies Private Limited</a></strong>: For providing me platform and\nfunds for research work. This project is hosted currently with <code>CMT</code> only.</li>\n<li><strong><a href=\"https://github.com/iamhssingh\" rel=\"nofollow\">Himanshu Shankar</a></strong>: Himanshu Shankar has initiated this project and worked on this\nproject to collect useful functions and classes that are being used in various projects.</li>\n</ul>\n<h4>Installation</h4>\n<ul>\n<li>Download and Install via <code>pip</code></li>\n</ul>\n<pre><code>pip install drf_instamojo\n</code></pre>\n<p>or<br>\nDownload and Install via <code>easy_install</code></p>\n<pre><code>easy_install drf_instamojo\n</code></pre>\n<ul>\n<li>Add, if wanted, <code>drfaddons</code> in <code>INSTALLED_APPS</code> (This is although not required!)</li>\n</ul>\n<pre><code>INSTALLED_APPS = [\n    ...\n    'drf_instamojo',\n    ...\n]\n</code></pre>\n<ul>\n<li>Also add other dependencies in <code>INSTALLED_APPS</code><br></li>\n</ul>\n<pre><code>INSTALLED_APPS = [\n    ...\n    'drfaddons',\n    ...\n]\n</code></pre>\n<ul>\n<li>Include urls of <code>drf_instamojo</code> in <code>urls.py</code></li>\n</ul>\n<pre><code>urlpatterns = [\n    ...\n    path('api/instamojo/', include('drf_instamojo.urls')),\n    ...\n]\n\n# or\n\nurlpatterns = [\n    ...\n    url(r'^api/instamojo/', include('drf_instamojo.urls')),\n    ...\n]\n</code></pre>\n<ul>\n<li>Run migrate command:</li>\n</ul>\n<pre><code>python manage.py migrate\n</code></pre>\n<h3>MODELS</h3>\n<p>The application has three models:</p>\n<ul>\n<li><code>InstamojoConfiguration</code>: You need to define your Instamojo configurations in this model. Only one object can have\n<code>is_active</code> set to <code>True</code> which will be used with Instamojo API.</li>\n<li><code>PaymentRequest</code>: This will contain all the Instamojo Payment Request that one will create with Instamojo.</li>\n<li><code>Payment</code>: This will contain all the responses received from Instamojo API against payment.</li>\n</ul>\n<h3>VIEWS</h3>\n<p>The application has following views:</p>\n<ul>\n<li><code>ListAddPaymentRequestView</code>: All payment request should be made on this view. Requires a logged in user.\nIt'll provide user with required data, including <code>longurl</code> that will be used to make payment.</li>\n<li><code>ListAddPaymentView</code>: All response data should be posted on this view. Doesn't requires a logged in user.</li>\n</ul>\n<h3>URLS</h3>\n<ul>\n<li><code>request/</code>: All payment request to be made via this URL.</li>\n<li><code>payment/</code>: All payment reponses to be posted on this URL.</li>\n</ul>\n<h3>Quickstart Guide</h3>\n<ul>\n<li>Complete <code>Installation Steps</code> (mentioned above)</li>\n<li>Create a configuration via <code>Django Admin</code> in <code>Instamojo Configuration</code></li>\n<li>Set <code>is_active</code> to <code>True</code></li>\n<li>Note: Use sandbox mode credential at first</li>\n</ul>\n<h3>How to integrate with apps</h3>\n<ul>\n<li>Use <code>serializers</code> to integrate with custom apps.</li>\n</ul>\n<h4>Creating Payment Request</h4>\n<h5>Example</h5>\n<ul>\n<li>Create a view: <code>PaymentView</code></li>\n<li>Use <code>PaymentRequestSerializer</code> to create a payment request.</li>\n<li>Check example code in <code>serializers.py</code>:</li>\n</ul>\n<pre><code># Initialize serializer with proper data\nprs = PaymentRequestSerializer(data={'amount': 120.00, 'purpose': 'Test', 'send_sms': False,\n                                     'redirect_url': 'http://127.0.0.1/api/test/'})\n\n# Check if data is valid\nprs.is_valid(raise_exception=True)\n\ninstance = prs.save(created_by=user)\n</code></pre>\n<ul>\n<li>Save <code>instance</code> as foreign key in app pointing to bill for which the payment request is made.</li>\n<li>Return <code>longurl</code> to client for making payment</li>\n</ul>\n<h5>Problem with created_by requirement in .save() of serializer</h5>\n<ul>\n<li>If app doesn't require user to login, use following logic:\n<ul>\n<li>Inside payment view, take following data from user:\n<ul>\n<li>Name of the customer</li>\n<li>Mobile Number of the customer <code>mobile: 9987987345</code></li>\n<li>Email of the customer <code>email: test@abc.com</code></li>\n</ul>\n</li>\n<li>Use following code to create a logic around getting an existing or creating a new user:</li>\n</ul>\n</li>\n</ul>\n<pre><code>from django.contrib.auth import get_user_model\n\nuser_model = get_user_model()\ntry:\n    user = user_model.objects.get(email=email)\nexcept user_model.DoesNotExist:\n    try:\n        user = user_model.objects.get(mobile=mobile)\n    except user_model.DoesNotExist:\n        # Now you're dead sure that user does not exists.\n        user = user_model.objects.create(name=name, mobile=mobile, email=email, password=\"RANDOM_PASSWORD\")\n\n</code></pre>\n<ul>\n<li>Otherwise, simply use <code>user = request.user</code> as user while calling <code>.save()</code> on serializer.</li>\n<li><em>Bonus Pointer</em>: Check out <strong><a href=\"https://github.com/101loop/drf-user/\" rel=\"nofollow\">Django REST Framework - User</a></strong></li>\n</ul>\n<h4>Payment Completion</h4>\n<ul>\n<li>Use <code>payment_done</code> signal</li>\n<li>Create <code>signals</code> python directory with <code>__init__.py, handlers.py</code> in app</li>\n<li>In <code>handlers.py</code>, create a function for handling <code>payment_done</code> signal</li>\n</ul>\n<pre><code>from django.dispatch import receiver\n\nfrom drf_instamojo.models import PaymentRequest\nfrom drf_instamojo.signals import payment_done\n\n\n@receiver(signal=payment_done, sender=PaymentRequest)\ndef payment_done_handler(instance: PaymentRequest, sender, *args, **kwargs):\n    ...\n    # Payment completed\n    # bill.paid()\n    # item.dispatch()\n    ...\n</code></pre>\n\n          </div>"}, "last_serial": 4602556, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e0452395e6bf0e28efdbb407eb6a11f3", "sha256": "f246f4ea50cddbc060b7c3433496dd01d49d145cb7142868f15bf6d8ab462249"}, "downloads": -1, "filename": "drf_instamojo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0452395e6bf0e28efdbb407eb6a11f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27436, "upload_time": "2018-12-15T13:14:40", "upload_time_iso_8601": "2018-12-15T13:14:40.616760Z", "url": "https://files.pythonhosted.org/packages/ea/53/604812dd8e031c9b5810bfe8c839d88459d4a296a89e543ac2257ac121da/drf_instamojo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2382a8af8d64c64fdc62a0cdbea2a25c", "sha256": "9a50f683e69a98527ab09c650c3dd10c9a92e2e134d96d5573fc530577df5681"}, "downloads": -1, "filename": "drf_instamojo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2382a8af8d64c64fdc62a0cdbea2a25c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 13519, "upload_time": "2018-12-15T13:14:43", "upload_time_iso_8601": "2018-12-15T13:14:43.154174Z", "url": "https://files.pythonhosted.org/packages/bb/5b/ccd54e15a95367026880e368fa41d642e9b27d0a94ebe330e09e51702995/drf_instamojo-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0452395e6bf0e28efdbb407eb6a11f3", "sha256": "f246f4ea50cddbc060b7c3433496dd01d49d145cb7142868f15bf6d8ab462249"}, "downloads": -1, "filename": "drf_instamojo-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0452395e6bf0e28efdbb407eb6a11f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27436, "upload_time": "2018-12-15T13:14:40", "upload_time_iso_8601": "2018-12-15T13:14:40.616760Z", "url": "https://files.pythonhosted.org/packages/ea/53/604812dd8e031c9b5810bfe8c839d88459d4a296a89e543ac2257ac121da/drf_instamojo-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2382a8af8d64c64fdc62a0cdbea2a25c", "sha256": "9a50f683e69a98527ab09c650c3dd10c9a92e2e134d96d5573fc530577df5681"}, "downloads": -1, "filename": "drf_instamojo-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2382a8af8d64c64fdc62a0cdbea2a25c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 13519, "upload_time": "2018-12-15T13:14:43", "upload_time_iso_8601": "2018-12-15T13:14:43.154174Z", "url": "https://files.pythonhosted.org/packages/bb/5b/ccd54e15a95367026880e368fa41d642e9b27d0a94ebe330e09e51702995/drf_instamojo-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:44 2020"}