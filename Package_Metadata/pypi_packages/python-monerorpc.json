{"info": {"author": "Norman Moeschter-Schenck", "author_email": "<norman.moeschter@gmail.com>", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# python-monerorpc\n\n**DISCLAIMER**: The repository that should be worked on is located at the [**monero-ecosystem**](https://github.com/monero-ecosystem/python-monerorpc).\n\n**python-monerorpc** is an improved version of python-jsonrpc for Monero (`monerod rpc`, `monero-wallet-rpc`).\n\n**python-monerorpc** was originally forked from [**python-bitcoinrpc**](https://github.com/jgarzik/python-bitcoinrpc).\n\nIt includes the following generic improvements:\n\n- HTTP connections persist for the life of the `AuthServiceProxy` object using `requests.Session`\n- sends protocol 'jsonrpc', per JSON-RPC 2.0\n- sends proper, incrementing 'id'\n- uses standard Python json lib\n- can optionally log all RPC calls and results\n- JSON-2.0 batch support (mimicking batch)\n  - JSON-2.0 batch doesn't seem to work with monero.\n  - The batch functionality is mimicked and just requests the given methods one after another.\n  - The result is a list of dictionaries.\n\nIt also includes some more specific details:\n\n- sends Digest HTTP authentication headers\n- parses all JSON numbers that look like floats as Decimal,\n  and serializes Decimal values to JSON-RPC connections.\n\n## What does it do?\n\n**python-monerorpc** communicates with monero over RPC.\n\nThat includes:\n\n- `monerod rpc` as well as\n- `monero-wallet-rpc`.\n\n**python-monerorpc** takes over the actual HTTP request containing all the necessary headers.\n\n## Compared to similar projects:\n\n- [**monero-python**](https://github.com/monero-ecosystem/monero-python)\n  - **monero-python**\n  - The module implements a json RPC backend (`monerod rpc`, `monero-wallet-rpc`).\n  - It implements implementations around this backend (accounts, wallets, transactions, etc. )\n  - It offers helpful utilities like a monero wallet address validator.\n- A practical difference:\n\n  - Should a RPC method change or a new one should be added, **monero-python** would have to adapt its backend and the implementations around it, while with **python-monerorpc** you just have to modify the property or use a new method like:\n\n  ```python\n      rpc_connection.getbalance()  # -> rpc_connection.get_balance()\n      rpc_connection.new_method()\n  ```\n## Errors\n\nThe `JSONRPCException` is thrown in the event of an error.\n\nOne exception to that rule is when receiving a `JSONDecodeError` when converting the response to JSON.\nIn this case a `ValueError` including the HTTP response is raised.\n\nThis error was not handled before and directly raised a `JSONDecodeError`. Since `JSONDecodeError` inherits from `ValueError` nothing really changes. You should handle `ValueError` in addition to just `JSONRPCException` when working with `python-monerorpc`.\n\n**_TODO_**:\nAn improved error handling.\n* Provide detailed information.\n* Separate into several causes like connection error, conversion error, etc.\n\n## Installation:\n\n### From PyPI\n\nTo install `python-monerorpc` from PyPI using `pip` you just need to:\n\n> \\$ pip install python-monerorpc\n\n### From Source\n\n> \\$ python setup.py install --user\n\n**Note**: This will only install `monerorpc`. If you also want to install `jsonrpc` to preserve\nbackwards compatibility, you have to replace `monerorpc` with `jsonrpc` in `setup.py` and run it again.\n\n## Examples:\n\nExample usage `monerod` (get info):\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n\n    # initialisation, rpc_user and rpc_password are set as flags in the cli command\n    rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18081/json_rpc'.format(rpc_user, rpc_password))\n\n    info = rpc_connection.get_info()\n    print(info)\n\n    # rpc_user and rpc_password can also be left out (testing, develop, not recommended)\n    rpc_connection = AuthServiceProxy(service_url='http://127.0.0.1:18081/json_rpc')\n```\n\nExample usage `monerod` (special characters in RPC password).\n\nThis is also the recommended way to use passwords containing special characters like `some_password#-+`.\n\nWhen both ways are used (username/password in the URL and passed as arguments), the arguments' values will be predominant.\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n\n    # When leaving rpc_user and rpc_password in the URL,\n    # you can still pass those values as separate paramaters.\n    rpc_connection = AuthServiceProxy(service_url='http://127.0.0.1:18081/json_rpc', username=rpc_user, password=rpc_password)\n\n    # Or use both ways.\n    rpc_connection = AuthServiceProxy(service_url='http://{0}@127.0.0.1:18081/json_rpc'.format(rpc_user), password=rpc_password)\n```\n\nExample usage `monerod` (get network type):\n\n```python\n  from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n  rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18081/json_rpc'.format(rpc_user, rpc_password))\n\n  result = None\n  network_type = None\n  try:\n      result = rpc_connection.get_info()\n  except (requests.HTTPError,\n          requests.ConnectionError,\n          JSONRPCException) as e:\n      logger.error('RPC Error on getting address' + str(e))\n      logger.exception(e)\n  # Check network type\n  network_type = result.get('nettype')\n  if not network_type:\n      raise ValueError('Error with: {0}'.format(result))\n  print(network_type)\n```\n\nExample usage `monerod` (on get block hash):\n\n```python\n  from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n  rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18081/json_rpc'.format(rpc_user, rpc_password))\n\n  params = [2]\n  hash = rpc.on_get_block_hash(params)\n  print(hash)\n```\n\nExample usage `monero-wallet-rpc` (get balance):\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n\n    # initialisation, rpc_user and rpc_password are set as flags in the cli command\n    rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18083/json_rpc'.format(rpc_user, rpc_password))\n\n    balance = rpc_connection.get_balance()\n    print(balance)\n```\n\nExample usage `monero-wallet-rpc` (make transfer):\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n\n    # initialisation, rpc_user and rpc_password are set as flags in the cli command\n    rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18083/json_rpc'.format(rpc_user, rpc_password))\n\n    destinations = {\"destinations\": [{\"address\": \"some_address\", \"amount\": 1}], \"mixin\": 10}\n    result = rpc_connection.transfer(destinations)\n    print(result)\n```\n\nExample usage `monero-wallet-rpc` (batch):\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n    import pprint\n\n    # initialisation, rpc_user and rpc_password are set as flags in the cli command\n    rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18083/json_rpc'.format(rpc_user, rpc_password))\n\n    # some example batch\n    params={\"account_index\":0,\"address_indices\":[0,1]}\n    result = rpc.batch_([ [\"get_balance\"], [\"get_balance\", params] ])\n    pprint.pprint(result)\n\n    # make transfer and get balance in a batch\n    destinations = {\"destinations\": [{\"address\": \"some_address\", \"amount\": 1}], \"mixin\": 10}\n    result = rpc.batch_([ [\"transfer\", destinations], [\"get_balance\"] ])\n    pprint.pprint(result)\n```\n\n## Logging:\n\nLogging all RPC calls to stderr:\n\n```python\n    from monerorpc.authproxy import AuthServiceProxy, JSONRPCException\n    import logging\n\n    logging.basicConfig()\n    logging.getLogger(\"MoneroRPC\").setLevel(logging.DEBUG)\n\n    rpc_connection = AuthServiceProxy(service_url='http://{0}:{1}@127.0.0.1:18081/json_rpc'.format(rpc_user, rpc_password))\n\n    print(rpc_connection.get_info())\n```\n\nProduces output on stderr like:\n\n```bash\n    DEBUG:MoneroRPC:-1-> get_info []\n    DEBUG:MoneroRPC:<-1- {u'result': {u'incoming_connections_count': 0, ...etc }\n```\n\n## Errors:\n\nPossible errors and error codes:\n\n- `no code`\n  - Returns the `error` contained in the RPC response.\n- `-341`\n  - `could not establish a connection, original error: {}`\n  - including the original exception message\n- `-342`\n  - `missing HTTP response from server`\n- `-343`\n  - `missing JSON-RPC result`\n- `-344`\n  - `received HTTP status code {}`\n  - including HTTP status code other than `200`\n\n## Testing:\n\nInstall the test requirements:\n\n```bash\n    python -m venv venv\n    # virtualenv -q venv\n    . venv/bin/activate\n    pip install -r requirements.txt\n```\n\nRun unit tests using `pytest`:\n\n```bash\n    # virtualenv activated (see above)\n    pytest tests.py\n```\n\nRun unit tests on all supported python versions:\n\n```bash\n    tox -q\n```\n\nRun unit tests on a subset of the supported python versions:\n\n```bash\n    tox -q -e py27,py34\n```\n\n**Note:** The chosen python versions have to be installed on your system.\n\n## Authors\n\n- **Norman Moeschter-Schenck** - _Initial work_ - [normoes](https://github.com/normoes)\n\nSee also the list of [contributors](https://github.com/monero-ecosystem/python-monerorpc/blob/master/contributors.md) who participated in this project.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/monero-ecosystem/python-monerorpc/archive/v0.5.13.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/monero-ecosystem/python-monerorpc", "keywords": "", "license": "", "maintainer": "Norman Moeschter-Schenck", "maintainer_email": "<norman.moeschter@gmail.com>", "name": "python-monerorpc", "package_url": "https://pypi.org/project/python-monerorpc/", "platform": "", "project_url": "https://pypi.org/project/python-monerorpc/", "project_urls": {"Download": "https://github.com/monero-ecosystem/python-monerorpc/archive/v0.5.13.tar.gz", "Homepage": "https://www.github.com/monero-ecosystem/python-monerorpc"}, "release_url": "https://pypi.org/project/python-monerorpc/0.5.13/", "requires_dist": null, "requires_python": "", "summary": "Enhanced version of python-jsonrpc for Monero (monerod, monero-wallet-rpc).", "version": "0.5.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-monerorpc</h1>\n<p><strong>DISCLAIMER</strong>: The repository that should be worked on is located at the <a href=\"https://github.com/monero-ecosystem/python-monerorpc\" rel=\"nofollow\"><strong>monero-ecosystem</strong></a>.</p>\n<p><strong>python-monerorpc</strong> is an improved version of python-jsonrpc for Monero (<code>monerod rpc</code>, <code>monero-wallet-rpc</code>).</p>\n<p><strong>python-monerorpc</strong> was originally forked from <a href=\"https://github.com/jgarzik/python-bitcoinrpc\" rel=\"nofollow\"><strong>python-bitcoinrpc</strong></a>.</p>\n<p>It includes the following generic improvements:</p>\n<ul>\n<li>HTTP connections persist for the life of the <code>AuthServiceProxy</code> object using <code>requests.Session</code></li>\n<li>sends protocol 'jsonrpc', per JSON-RPC 2.0</li>\n<li>sends proper, incrementing 'id'</li>\n<li>uses standard Python json lib</li>\n<li>can optionally log all RPC calls and results</li>\n<li>JSON-2.0 batch support (mimicking batch)\n<ul>\n<li>JSON-2.0 batch doesn't seem to work with monero.</li>\n<li>The batch functionality is mimicked and just requests the given methods one after another.</li>\n<li>The result is a list of dictionaries.</li>\n</ul>\n</li>\n</ul>\n<p>It also includes some more specific details:</p>\n<ul>\n<li>sends Digest HTTP authentication headers</li>\n<li>parses all JSON numbers that look like floats as Decimal,\nand serializes Decimal values to JSON-RPC connections.</li>\n</ul>\n<h2>What does it do?</h2>\n<p><strong>python-monerorpc</strong> communicates with monero over RPC.</p>\n<p>That includes:</p>\n<ul>\n<li><code>monerod rpc</code> as well as</li>\n<li><code>monero-wallet-rpc</code>.</li>\n</ul>\n<p><strong>python-monerorpc</strong> takes over the actual HTTP request containing all the necessary headers.</p>\n<h2>Compared to similar projects:</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/monero-ecosystem/monero-python\" rel=\"nofollow\"><strong>monero-python</strong></a></p>\n<ul>\n<li><strong>monero-python</strong></li>\n<li>The module implements a json RPC backend (<code>monerod rpc</code>, <code>monero-wallet-rpc</code>).</li>\n<li>It implements implementations around this backend (accounts, wallets, transactions, etc. )</li>\n<li>It offers helpful utilities like a monero wallet address validator.</li>\n</ul>\n</li>\n<li>\n<p>A practical difference:</p>\n<ul>\n<li>Should a RPC method change or a new one should be added, <strong>monero-python</strong> would have to adapt its backend and the implementations around it, while with <strong>python-monerorpc</strong> you just have to modify the property or use a new method like:</li>\n</ul>\n<pre>    <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">getbalance</span><span class=\"p\">()</span>  <span class=\"c1\"># -&gt; rpc_connection.get_balance()</span>\n    <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">new_method</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<h2>Errors</h2>\n<p>The <code>JSONRPCException</code> is thrown in the event of an error.</p>\n<p>One exception to that rule is when receiving a <code>JSONDecodeError</code> when converting the response to JSON.\nIn this case a <code>ValueError</code> including the HTTP response is raised.</p>\n<p>This error was not handled before and directly raised a <code>JSONDecodeError</code>. Since <code>JSONDecodeError</code> inherits from <code>ValueError</code> nothing really changes. You should handle <code>ValueError</code> in addition to just <code>JSONRPCException</code> when working with <code>python-monerorpc</code>.</p>\n<p><strong><em>TODO</em></strong>:\nAn improved error handling.</p>\n<ul>\n<li>Provide detailed information.</li>\n<li>Separate into several causes like connection error, conversion error, etc.</li>\n</ul>\n<h2>Installation:</h2>\n<h3>From PyPI</h3>\n<p>To install <code>python-monerorpc</code> from PyPI using <code>pip</code> you just need to:</p>\n<blockquote>\n<p>$ pip install python-monerorpc</p>\n</blockquote>\n<h3>From Source</h3>\n<blockquote>\n<p>$ python setup.py install --user</p>\n</blockquote>\n<p><strong>Note</strong>: This will only install <code>monerorpc</code>. If you also want to install <code>jsonrpc</code> to preserve\nbackwards compatibility, you have to replace <code>monerorpc</code> with <code>jsonrpc</code> in <code>setup.py</code> and run it again.</p>\n<h2>Examples:</h2>\n<p>Example usage <code>monerod</code> (get info):</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n\n    <span class=\"c1\"># initialisation, rpc_user and rpc_password are set as flags in the cli command</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18081/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n    <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># rpc_user and rpc_password can also be left out (testing, develop, not recommended)</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:18081/json_rpc'</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monerod</code> (special characters in RPC password).</p>\n<p>This is also the recommended way to use passwords containing special characters like <code>some_password#-+</code>.</p>\n<p>When both ways are used (username/password in the URL and passed as arguments), the arguments' values will be predominant.</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n\n    <span class=\"c1\"># When leaving rpc_user and rpc_password in the URL,</span>\n    <span class=\"c1\"># you can still pass those values as separate paramaters.</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:18081/json_rpc'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">rpc_password</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Or use both ways.</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">@127.0.0.1:18081/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">),</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">rpc_password</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monerod</code> (get network type):</p>\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n  <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18081/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n  <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n  <span class=\"n\">network_type</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n      <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n  <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">HTTPError</span><span class=\"p\">,</span>\n          <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">ConnectionError</span><span class=\"p\">,</span>\n          <span class=\"n\">JSONRPCException</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'RPC Error on getting address'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n  <span class=\"c1\"># Check network type</span>\n  <span class=\"n\">network_type</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'nettype'</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">network_type</span><span class=\"p\">:</span>\n      <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Error with: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">network_type</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monerod</code> (on get block hash):</p>\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n  <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18081/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n  <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n  <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">on_get_block_hash</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monero-wallet-rpc</code> (get balance):</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n\n    <span class=\"c1\"># initialisation, rpc_user and rpc_password are set as flags in the cli command</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18083/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n    <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">balance</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monero-wallet-rpc</code> (make transfer):</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n\n    <span class=\"c1\"># initialisation, rpc_user and rpc_password are set as flags in the cli command</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18083/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n    <span class=\"n\">destinations</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"destinations\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some_address\"</span><span class=\"p\">,</span> <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}],</span> <span class=\"s2\">\"mixin\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>Example usage <code>monero-wallet-rpc</code> (batch):</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n\n    <span class=\"c1\"># initialisation, rpc_user and rpc_password are set as flags in the cli command</span>\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18083/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># some example batch</span>\n    <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"account_index\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">\"address_indices\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]}</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">batch_</span><span class=\"p\">([</span> <span class=\"p\">[</span><span class=\"s2\">\"get_balance\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"get_balance\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">]</span> <span class=\"p\">])</span>\n    <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># make transfer and get balance in a batch</span>\n    <span class=\"n\">destinations</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"destinations\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"some_address\"</span><span class=\"p\">,</span> <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}],</span> <span class=\"s2\">\"mixin\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">batch_</span><span class=\"p\">([</span> <span class=\"p\">[</span><span class=\"s2\">\"transfer\"</span><span class=\"p\">,</span> <span class=\"n\">destinations</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"get_balance\"</span><span class=\"p\">]</span> <span class=\"p\">])</span>\n    <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h2>Logging:</h2>\n<p>Logging all RPC calls to stderr:</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">monerorpc.authproxy</span> <span class=\"kn\">import</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">,</span> <span class=\"n\">JSONRPCException</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">()</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">\"MoneroRPC\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rpc_connection</span> <span class=\"o\">=</span> <span class=\"n\">AuthServiceProxy</span><span class=\"p\">(</span><span class=\"n\">service_url</span><span class=\"o\">=</span><span class=\"s1\">'http://</span><span class=\"si\">{0}</span><span class=\"s1\">:</span><span class=\"si\">{1}</span><span class=\"s1\">@127.0.0.1:18081/json_rpc'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rpc_user</span><span class=\"p\">,</span> <span class=\"n\">rpc_password</span><span class=\"p\">))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rpc_connection</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">())</span>\n</pre>\n<p>Produces output on stderr like:</p>\n<pre>    DEBUG:MoneroRPC:-1-&gt; get_info <span class=\"o\">[]</span>\n    DEBUG:MoneroRPC:&lt;-1- <span class=\"o\">{</span>u<span class=\"s1\">'result'</span>: <span class=\"o\">{</span>u<span class=\"s1\">'incoming_connections_count'</span>: <span class=\"m\">0</span>, ...etc <span class=\"o\">}</span>\n</pre>\n<h2>Errors:</h2>\n<p>Possible errors and error codes:</p>\n<ul>\n<li><code>no code</code>\n<ul>\n<li>Returns the <code>error</code> contained in the RPC response.</li>\n</ul>\n</li>\n<li><code>-341</code>\n<ul>\n<li><code>could not establish a connection, original error: {}</code></li>\n<li>including the original exception message</li>\n</ul>\n</li>\n<li><code>-342</code>\n<ul>\n<li><code>missing HTTP response from server</code></li>\n</ul>\n</li>\n<li><code>-343</code>\n<ul>\n<li><code>missing JSON-RPC result</code></li>\n</ul>\n</li>\n<li><code>-344</code>\n<ul>\n<li><code>received HTTP status code {}</code></li>\n<li>including HTTP status code other than <code>200</code></li>\n</ul>\n</li>\n</ul>\n<h2>Testing:</h2>\n<p>Install the test requirements:</p>\n<pre>    python -m venv venv\n    <span class=\"c1\"># virtualenv -q venv</span>\n    . venv/bin/activate\n    pip install -r requirements.txt\n</pre>\n<p>Run unit tests using <code>pytest</code>:</p>\n<pre>    <span class=\"c1\"># virtualenv activated (see above)</span>\n    pytest tests.py\n</pre>\n<p>Run unit tests on all supported python versions:</p>\n<pre>    tox -q\n</pre>\n<p>Run unit tests on a subset of the supported python versions:</p>\n<pre>    tox -q -e py27,py34\n</pre>\n<p><strong>Note:</strong> The chosen python versions have to be installed on your system.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Norman Moeschter-Schenck</strong> - <em>Initial work</em> - <a href=\"https://github.com/normoes\" rel=\"nofollow\">normoes</a></li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/monero-ecosystem/python-monerorpc/blob/master/contributors.md\" rel=\"nofollow\">contributors</a> who participated in this project.</p>\n\n          </div>"}, "last_serial": 6742042, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "2edfd8a0ba52c707c466381b232e4b10", "sha256": "065a84499c826050f7da1d59ee11489f23edd7bfe9a6b0e96b9ee1c978476bf0"}, "downloads": -1, "filename": "python_monerorpc-0.3-py2.7.egg", "has_sig": false, "md5_digest": "2edfd8a0ba52c707c466381b232e4b10", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 9371, "upload_time": "2018-10-06T19:03:49", "upload_time_iso_8601": "2018-10-06T19:03:49.276068Z", "url": "https://files.pythonhosted.org/packages/41/79/7be44a63da0cbaee683f758e23572940c34487969200bfd46a02ee9acb87/python_monerorpc-0.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "04cfb54fbf2f9cee8014372c5b99c830", "sha256": "a223e7ca5a4bfbcd765c385d37284424c8cb25d36423442e2fa42d2d84a1d78f"}, "downloads": -1, "filename": "python_monerorpc-0.3-py3.6.egg", "has_sig": false, "md5_digest": "04cfb54fbf2f9cee8014372c5b99c830", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 9341, "upload_time": "2018-10-06T19:03:51", "upload_time_iso_8601": "2018-10-06T19:03:51.068359Z", "url": "https://files.pythonhosted.org/packages/fd/2f/73a0f7fccb459a34e39b29040e567bcf198131246b2b164bc59a4fd20287/python_monerorpc-0.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "48d39ccbb11e14051c22f6a3c060f8ae", "sha256": "33cbc3d981ea7aecef758e131b4c3157e098a7ebe6f119a690049c590008d513"}, "downloads": -1, "filename": "python-monerorpc-0.3.tar.gz", "has_sig": false, "md5_digest": "48d39ccbb11e14051c22f6a3c060f8ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5192, "upload_time": "2018-10-06T19:03:52", "upload_time_iso_8601": "2018-10-06T19:03:52.264697Z", "url": "https://files.pythonhosted.org/packages/ee/8c/6b2e67bea51202893ec68aa38110255abfef891b44fc986f91e1ef6ad062/python-monerorpc-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "efebd4aebb4eb15a9a44b810ad25851f", "sha256": "182b736bf39147c0ed36ee46da2f96d4a46ab61012824b36894e4bb358b441b3"}, "downloads": -1, "filename": "python-monerorpc-0.3.1.tar.gz", "has_sig": false, "md5_digest": "efebd4aebb4eb15a9a44b810ad25851f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5257, "upload_time": "2018-10-07T10:35:48", "upload_time_iso_8601": "2018-10-07T10:35:48.071309Z", "url": "https://files.pythonhosted.org/packages/e2/ba/0f1fbacae6ec3d7e39a85637e0e582f482a039598dd2decd39f289789fa2/python-monerorpc-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "cbdfa816d8b1bf18513caaf258eeb2c6", "sha256": "bd93307f98fa00e26740976013fc4554b39f0012656fd64c250ea6359efa0fe6"}, "downloads": -1, "filename": "python_monerorpc-0.3.2-py2.7.egg", "has_sig": false, "md5_digest": "cbdfa816d8b1bf18513caaf258eeb2c6", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 9416, "upload_time": "2018-10-08T08:43:01", "upload_time_iso_8601": "2018-10-08T08:43:01.112625Z", "url": "https://files.pythonhosted.org/packages/48/7c/9d9690757ca61677239ed697201d36666fc1b937d24f1369a2776fed026b/python_monerorpc-0.3.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a537309875d38c34380028859ea85f0e", "sha256": "b18ac706c386d806c0dcbc5b6a9506cb5969692ad62d9d7403a115a7f22ab673"}, "downloads": -1, "filename": "python-monerorpc-0.3.2.tar.gz", "has_sig": false, "md5_digest": "a537309875d38c34380028859ea85f0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5230, "upload_time": "2018-10-07T15:44:14", "upload_time_iso_8601": "2018-10-07T15:44:14.427800Z", "url": "https://files.pythonhosted.org/packages/aa/11/1739b4dbf427e5a631d1ab95e2a5d2d0c88ae6fdca27bea362d8dd332f1b/python-monerorpc-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a5c41e323778a72b250c7e42730b5faa", "sha256": "f1b9246d39ea26a29b950360d9f13d4bd6cf74fa1cbde9fdf48c97d8ea9cbf42"}, "downloads": -1, "filename": "python-monerorpc-0.4.tar.gz", "has_sig": false, "md5_digest": "a5c41e323778a72b250c7e42730b5faa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5564, "upload_time": "2018-10-08T08:45:50", "upload_time_iso_8601": "2018-10-08T08:45:50.324824Z", "url": "https://files.pythonhosted.org/packages/66/85/47fd29b9cb2bc1bc7de0a6ff23b3baf48f7ee8cb1087369ea3ae60b26160/python-monerorpc-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "db1c23309471f4cd52cf175744dede2c", "sha256": "bda46bd9fbbee58a46d22692edb5e334a8fa70f7b8350a2de9f2bc54230415d8"}, "downloads": -1, "filename": "python-monerorpc-0.5.tar.gz", "has_sig": false, "md5_digest": "db1c23309471f4cd52cf175744dede2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5562, "upload_time": "2018-10-10T07:15:11", "upload_time_iso_8601": "2018-10-10T07:15:11.664735Z", "url": "https://files.pythonhosted.org/packages/30/97/3d903ff4cbdb914bd2b7d21f340b63efc524733af2fcc09b302517d2bd17/python-monerorpc-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "09ae131550fecf09b4cc0f2089a5228f", "sha256": "a0cdc81820bb45e539931846ef35aa4e50f1170562465a0500d2db208f84e0c1"}, "downloads": -1, "filename": "python-monerorpc-0.5.1.tar.gz", "has_sig": false, "md5_digest": "09ae131550fecf09b4cc0f2089a5228f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5847, "upload_time": "2018-10-15T08:59:29", "upload_time_iso_8601": "2018-10-15T08:59:29.948527Z", "url": "https://files.pythonhosted.org/packages/7e/e0/34dbb1d19d2d6b45100949c39adf4cc142afbf9b0cd25a6462b12dc0ece2/python-monerorpc-0.5.1.tar.gz", "yanked": false}], "0.5.10": [{"comment_text": "", "digests": {"md5": "8a1db233213c6d4ece60627ea4046c07", "sha256": "f3330652c95a318e10800d45e6d954b91d10c4615f0277f71b42d42e698f92c7"}, "downloads": -1, "filename": "python-monerorpc-0.5.10.tar.gz", "has_sig": false, "md5_digest": "8a1db233213c6d4ece60627ea4046c07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8284, "upload_time": "2020-02-04T09:33:47", "upload_time_iso_8601": "2020-02-04T09:33:47.044595Z", "url": "https://files.pythonhosted.org/packages/ee/97/c112cb4f553e705c32e0e701db3b59e93829b4d7cb4f7470a46929198c78/python-monerorpc-0.5.10.tar.gz", "yanked": false}], "0.5.11": [{"comment_text": "", "digests": {"md5": "2736d7e6890564157c028ef731f54349", "sha256": "51dcbe17ca86d45bbf821a976132a6f69de53ee7b094748e27dc3af91b21b3ca"}, "downloads": -1, "filename": "python-monerorpc-0.5.11.tar.gz", "has_sig": false, "md5_digest": "2736d7e6890564157c028ef731f54349", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2020-02-19T08:30:04", "upload_time_iso_8601": "2020-02-19T08:30:04.037137Z", "url": "https://files.pythonhosted.org/packages/f5/ae/f5245d893c75965b87abad8809aea71520468f0a175f4ed7a9543c277ada/python-monerorpc-0.5.11.tar.gz", "yanked": false}], "0.5.12": [{"comment_text": "", "digests": {"md5": "41b96e3c20d9725c230afb0cc4afe603", "sha256": "88b39a318b622ef73ad1973a1c67401729f2f9d698b142f3c5af4898c2bfcaab"}, "downloads": -1, "filename": "python-monerorpc-0.5.12.tar.gz", "has_sig": false, "md5_digest": "41b96e3c20d9725c230afb0cc4afe603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8349, "upload_time": "2020-03-03T09:16:56", "upload_time_iso_8601": "2020-03-03T09:16:56.211580Z", "url": "https://files.pythonhosted.org/packages/44/62/72ab4dc58ae55a09a2ef3afae3279ff99d28e89166f4a1c66f855baf0ab5/python-monerorpc-0.5.12.tar.gz", "yanked": false}], "0.5.13": [{"comment_text": "", "digests": {"md5": "d89c4debcd91438a0026851548ee480d", "sha256": "678a80c8f59aea59179f92bc8ac9f0a2d9033b1eef72dceb526869ed2747b9dd"}, "downloads": -1, "filename": "python-monerorpc-0.5.13.tar.gz", "has_sig": false, "md5_digest": "d89c4debcd91438a0026851548ee480d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2020-03-03T16:53:43", "upload_time_iso_8601": "2020-03-03T16:53:43.688092Z", "url": "https://files.pythonhosted.org/packages/e6/86/d3e2cab761e228ca6a2dc390759d2cffc2b0f3eda65a825b96b96a07afcb/python-monerorpc-0.5.13.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "2d5861005b8ae6b996cd3a508497c2b7", "sha256": "070ede6920b66d07a2d1b430c516e9f7addf35ab9427871f5d384d2e7035f773"}, "downloads": -1, "filename": "python-monerorpc-0.5.2.tar.gz", "has_sig": false, "md5_digest": "2d5861005b8ae6b996cd3a508497c2b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5916, "upload_time": "2018-10-25T09:05:32", "upload_time_iso_8601": "2018-10-25T09:05:32.188281Z", "url": "https://files.pythonhosted.org/packages/23/80/7709d4beb291a2ce2e21490dd849398711fe7003c5b096592bf0b0e68ac2/python-monerorpc-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "cbc98cdf6de8df03187f1fcfd8b34085", "sha256": "ee734607d226fe8afd9c1595b99406f55237825ada903af7d800eed1e5058407"}, "downloads": -1, "filename": "python-monerorpc-0.5.3.tar.gz", "has_sig": false, "md5_digest": "cbc98cdf6de8df03187f1fcfd8b34085", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5909, "upload_time": "2018-11-06T05:19:41", "upload_time_iso_8601": "2018-11-06T05:19:41.880028Z", "url": "https://files.pythonhosted.org/packages/05/72/455c23e25ba00a5518bae1cda2bdade0437b1865e31e4009e4fb805d7670/python-monerorpc-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "f27300fce223386df6e278a1b32a1664", "sha256": "232c1faf8811be9536448a901e9b435422bc5570051d0f985206456cf36c2038"}, "downloads": -1, "filename": "python-monerorpc-0.5.4.tar.gz", "has_sig": false, "md5_digest": "f27300fce223386df6e278a1b32a1664", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6068, "upload_time": "2018-12-07T13:25:32", "upload_time_iso_8601": "2018-12-07T13:25:32.228264Z", "url": "https://files.pythonhosted.org/packages/d2/9f/eda40bcb689379dc8972fe952dae896992a3d28433fbf35375afdd970186/python-monerorpc-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "cf2104205a18af292e930268c4f5d00f", "sha256": "daed98ff80103d86da45001f9ad81ba2cfcdb6687fde5249f1dfcfd9da0b64b4"}, "downloads": -1, "filename": "python-monerorpc-0.5.5.tar.gz", "has_sig": false, "md5_digest": "cf2104205a18af292e930268c4f5d00f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6479, "upload_time": "2019-01-14T07:09:24", "upload_time_iso_8601": "2019-01-14T07:09:24.108039Z", "url": "https://files.pythonhosted.org/packages/5d/c7/eb380e2e3037bb7256086e4d015ea3d66cee98e328f8019b947acd6fd179/python-monerorpc-0.5.5.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "565053d384c698b3ace342d289a7db47", "sha256": "dfebe24d9d351abb98624a107f61416a84c7078745c4157ba2527f635c5944e3"}, "downloads": -1, "filename": "python-monerorpc-0.5.8.tar.gz", "has_sig": false, "md5_digest": "565053d384c698b3ace342d289a7db47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6934, "upload_time": "2019-12-11T19:40:38", "upload_time_iso_8601": "2019-12-11T19:40:38.657331Z", "url": "https://files.pythonhosted.org/packages/0d/9d/459133fcc857322d24d42a22c8d173210abd464b5de30ca1c261b0cbaae6/python-monerorpc-0.5.8.tar.gz", "yanked": false}], "0.5.9": [{"comment_text": "", "digests": {"md5": "bb239f16f2d3a95f982d70efdb9b74ac", "sha256": "307286b2b01110a50e00ce63dac39db080c2724ac8e963b78772e3eacebff74e"}, "downloads": -1, "filename": "python-monerorpc-0.5.9.tar.gz", "has_sig": false, "md5_digest": "bb239f16f2d3a95f982d70efdb9b74ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8296, "upload_time": "2020-01-16T08:24:45", "upload_time_iso_8601": "2020-01-16T08:24:45.474894Z", "url": "https://files.pythonhosted.org/packages/eb/e4/8e1a3b07c7238a50827fbe3710a639b6d7375f03bace103c0cdf0f68162a/python-monerorpc-0.5.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d89c4debcd91438a0026851548ee480d", "sha256": "678a80c8f59aea59179f92bc8ac9f0a2d9033b1eef72dceb526869ed2747b9dd"}, "downloads": -1, "filename": "python-monerorpc-0.5.13.tar.gz", "has_sig": false, "md5_digest": "d89c4debcd91438a0026851548ee480d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8347, "upload_time": "2020-03-03T16:53:43", "upload_time_iso_8601": "2020-03-03T16:53:43.688092Z", "url": "https://files.pythonhosted.org/packages/e6/86/d3e2cab761e228ca6a2dc390759d2cffc2b0f3eda65a825b96b96a07afcb/python-monerorpc-0.5.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:31 2020"}