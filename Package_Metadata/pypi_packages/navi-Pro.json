{"info": {"author": "Casey Reid", "author_email": "itprofguru@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Navi Pro - The Tenable.io Swiss Army Knife\nA command-line tool which leverages the Tenable.io API to reduce the time it takes to get information that is common \nin Cyber Exposure or Vulnerability Management. \n\n    *** This is not Supported by Tenable ***\n\n### Important Note\nNavi Pro will download the entire data-set(90 days) locally after API keys are \nentered and the update command is used! To download Vuln and Asset data you have to be an Administrator in Tenable.io.\n\nAll Vulns and All Assets are downloaded into a SQLLITE database named navi.db in the current directory.\n \n Most of the API calls nessessary to make navi work require access to\n your all of the available data.  Tenable.io has a 5000 record limit so Navi Pro utilizes the Export API.\n \n The data will not be updated until you run the update command.  Keep this in mind when adding elements to Tenable.io like Tags.\n \n    navi update\n    \n Alternatively you can select which export you want to update:\n \n    navi update -assets\n    \n    navi update -vulns\n \n Furthermore, you can limit how much data is downloaded by using the --days command\n \n    navi update -assets --days 2\n \n# Download and Configure navi in a Docker Container\n\n    docker pull silentninja/navi:latest\n  \n    docker run -it -p 8000:8000 silentninja/navi:latest /bin/bash \n\n    navi keys\n    \n    navi update\n  \n## Detach from Container\n    CTR+Q+P - CTR+Q+P\n\n## Attach to Contianer\n    docker attach <container id>\n  \n    <press enter>\n\n## Configure For Reporting\nNavi has a few reporting capabilities where a CSV is the output.  To extract this data from the container you will need to launch the container with port 8000 exposed and use the 'http' command to extract the reports.\n\n    docker run -it -p 8000:8000 silentninja/navi:latest /bin/bash\n\n### Extract Data\nTo extract data from the container you need to run an http server.  Use the below built in command.\n\n    navi http\n\n * Navigate to the website: http://0.0.0.0:8000\n * Simply download the item you want by clicking on it.\n \n# Download and Configure Navi using Python3 Setup file\n## Prepare your Machine\n * Install [Python3](https://realpython.com/installing-python/)\n * Install [Setuptools](https://pypi.org/project/setuptools/2.0/)\n * Install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n \n## Clone the Repo\nCreate a new Directory\n\n    mkdir tenable\n\nChange into your new directory\n\n    cd tenable\n    \nClone the repo\n\n    git clone https://github.com/packetchaos/Navi.git\n\nInstall Navi\n    \n    cd Navi\n    python3 setup.py install\n    \n## Usage\nBefore you begin you need the Keys! The program will continue to error out without valid API keys\n\n    navi keys\n\nEach command has two parts: the Command and the Option/Request. Double-Dash(--) commands expect a text value. Single-Dash commands do not have an expected input.  \n\nThere are thirteen core commands: \n * api - query api endpoints\n * ip - find details on Specific IPs\n * find - Find information: credential failures, containers, etc\n * report - Report on Information: Latest scan information, Container vulns\n * display - List details: users, logs, etc\n * group - Create Target groups based off of Plugin ID, Plugin Name or Plugin Output\n * export - Export Agent or Asset data into a CSV\n * delete - Delete an object by it's ID\n * mail - Mail a report \n * tag - Create a Category/Value Pair\n * lumin - Bulk adjust ACRs based on a tag\n * add - Manually Add an asset to Tenable.io or a list of assets via CSV\n * delete - Delete a scan by Scan ID\n * agroup - Create an Access Group by Tag or Agent Group\n \n There are thirteen single use commands: \n * scan - Create and launch a scan\n * start - Start a scan by Scan-ID\n * pause - Pause a scan by Scan-ID\n * resume - Resume a scan by Scan-ID\n * stop - Stop a scan by Scan-ID\n * spider - Create a WebApp scan for every URL in a CSV\n * update - Update local Export Vuln and Asset data.\n * status - Get the latest status by Scan ID\n * mac - Get the manufacture by Mac Address\n * keys - Add or update your keys\n * http - Run an http server to extract files from the container\n * listen - Run a netcat listener to receive a single file\n * smtp - Enter or update your SMTP information\n \n \n\n### Explore the Tenable.io API - 'api'\n  Enter in a API endpoint and get a pretty print json ouput.  Try some of the below endpoints:\n   * /scans\n   * /scanners\n   * /users\n\n### Examples\n\n    navi api /scans\n\n    navi api /scanners\n  \n### IP address queries - 'ip'\n  * --plugin TEXT --> Find Details on a particular plugin ID\n  * -n -->            Netstat Established and Listening and Open Ports\n  * -p -->            Patch Information\n  * -t -->            Trace Route\n  * -o -->            Process Information\n  * -c -->            Connection Information\n  * -s -->            Services Running\n  * -r -->            Local Firewall Rules\n  * -d -->            Scan Detail: 19506 plugin output\n  * -patches -->      Missing Patches\n  * -software -->     Find software installed on Unix of windows hosts\n  * -outbound -->     Display outbound connections found by NNM\n  * -exploit -->      Display exploitable vulnerabilities\n  * -critical -->     Display critical vulnerabilities\n  * -details -->      Details on an Asset: IP, UUID, Vulns, etc\n\n### Examples\n\n    navi ip 192.168.1.1 --plugin 19506\n\n    navi ip 192.168.1.1 -details -software\n\n### Find information - 'find'\n  * --plugin TEXT --> Find Assets where this plugin fired\n  * -docker -->       Find Running Docker Containers\n  * -webapp -->       Find Web Servers running\n  * -creds  -->       Find Credential failures\n  * --time TEXT -->   Find Assets where the scan duration is over X mins\n  * -ghost -->        Find Assets found by a Connector and not scanned by Nessus(AWS ONLY)\n  * --port TEXT --->  Find assets with an the open port provided\n\n### Examples\n\n\n    navi find --plugin 19506\n    \n    navi find -docker\n\n    navi find --time 10\n\n### Reports - Information - 'report'\n  * -latest -->          Report the Last Scan Details\n  * --container TEXT --> Report Vulns of CVSS 7 or above by Container ID.\n  * --docker TEXT -->    Report Vulns of CVSS 7 or above by Docker ID\n  * --comply TEXT -->    Check to see if your container complies with your Policy\n  * --details TEXT -->   Report Scan Details including Vulnerability Counts by Scan ID\n  * --summary TEXT -->   Report Scan Summary by Scan ID\n  * --network TEXT -->   Report Assets of a given Network\n\n### Examples\n    navi report -latest\n\n    navi report --container 48b5124b2768\n\n    navi report --docker 48b5124b2768\n\n    navi report --comply 48b5124b2768\n\n    navi report --summary 13\n\n### Display - Common Information - 'display'\n  * -scanners -->   List all of the Scanners\n  * -users -->      List all of the Users\n  * -exclusions --> List all Exclusions\n  * -containers --> List all containers and their Vulnerability  Scores\n  * -logs -->       List The actor and the action in the log file\n  * -running -->    List the running Scans\n  * -scans -->      List all Scans\n  * -nnm -->        Nessus Network Monitor assets and their vulnerability scores\n  * -assets -->     Assets found in the last 30 days\n  * -policies -->   Scan Policies\n  * -connectors --> Displays information about the Connectors\n  * -agroup -->     Displays information about Access Groups\n  * -status -->     Displays Tenable.io License and Site information\n  * -agents -->     Displays information on Agents\n  * -webapp -->     Displays information on Web app Scans\n  * -tgroup -->     Displays information about Target Groups\n  * -licensed -->   Displays All of your Licensed assets\n  * -tags -->       Displays Tag Categories, Values and Value UUID\n  * -categories --> Displays Tag Categories and the Category UUID\n  * -cloud -->      Displays Cloud assets found in the last 30 days\n  * -networks -->   Displays Network IDs\n  \n### Examples\n    navi display -scanners\n\n    navi display -running\n\n    navi display -nnm\n\n### Add assets manually or via a CSV file - 'add'\nTo add an asset you need an IP address; Everything else is optional.\nIf you are going to use a CSV file you need to structure it in this order: IP, Mac, Hostname, FQDN.\nThis is the order the information is parsed so getting it incorrect will cause errors.\n\n   * --ip TEXT        IP address(s) of new asset\n   * --mac TEXT       Mac Address of new asset\n   * --netbios TEXT   NetBios of new asset\n   * --fqdn TEXT      FQDN of new asset\n   * --hostname TEXT  Hostname of new asset\n   * --list - TEXT    Import all assets in the CSV file\n   * --source - TEXT  Add the Source \n   \n### Tag assets by Plugin Name, or Plugin ID - 'tag'\n   * --c -->      Create a Tag with this Category - Required\n   * --v -->      Create a Tag with this Value - Required\n   * --d -->      Create a description for your Tag - Optional (TEXT\"\n   * --plugin --> Define a Tag by a plugin ID - Optional (TEXT)\n   * --name -->   Define a tag by text found in a plugin Name - Optional (TEXT)\n   * --group -->  Define a tag by a Agent Group Name - Optional (TEXT)\n   * --output TEXT  Create a Tag based on the text in the output. Requires --plugin\n\n   \n### Examples\n    navi tag --c \"My Category\" --v \"My Value\" --d \"My description\" --plugin 93561\n    navi tag --c \"Application Vulns\" --v \"Java vulns\" --name java\n    navi tag --c \"Agent Group\" --v \"Linux Agents\" --group \"Linux\"\n\n\n### Create Access Groups by Tags or Agent Groups - 'agroup'\n   * --name TEXT   Create an Access group with the following Name\n   * -tag          Create a Access Group by a Tag\n   * --c TEXT      Category name to use\n   * --v TEXT      Tag Value to use; requires --c and Category Name\n   * --group TEXT  Create a Tag based on a Agent Group\n   \n### Examples\n\n    navi agroup --name \"My New Group\" -tag --c \"OS\" --v \"Linux\"\n    \n    navi agroup --name \"My Other Group\" --group \"Linux\n    \n### Bulk Adjust ACRs based on a Tag - 'lumin'\n   * --acr -->  The new ACR value (1-10)\n   * --c -->    The Tag Category to use\n   * --v -->    The Tag value to use\n   * --note --> Justification for ACR change\n   \n### Note - ACR Exceptions?\n    Tag your assets with \"NO:UPDATE\" if you don't want to be affected by bulk ACR changes\n    Category = NO\n    Value = UPDATE\n   \n### Examples\n    navi lumin --acr 10 --c \"Applications\" --v \"Core Business\" --note \"Main application\"\n\n### Export Asset, Agent, Consec, or Webapp Data - 'export'\n\n   * -assets -->   Export Assets data into CSV: IP, Hostname, FQDN, UUID, exposure, etc\n   * -agents -->   Export Asset data into CSV: IP, Last Connect, Last scanned, Status\n   * -webapp -->   Export Web applications into a CSV: FQDN, Critical, High, Medium, Low\n   * -consec -->   Export Container Security summary info into a CSV.\n   * -licensed --> Export a List of all Licensed Assets into a CSV.\n   * -lumin -->    Export all Asset data including ACR and AES into a CSV. This will take some time\n   * --network --> Export all Assets of a given network\n   * -bytag     Export all assets by tag; Include ACR and AES into a CSV\n   * --c TEXT   Export bytag with the following Category name\n   * --v TEXT   Export bytag with the Tag Value; requires --c and Category Name\n   * --ec TEXT  Exclude tag from export with Tag Category; requires --ev\n   * --ev TEXT  Exclude tag from export with Tag Value; requires --ec\n   \n### Examples\n\n    navi export -assets\n    \n    navi export -agents -assets -webapp -consec -licensed\n    \n    navi export --network 00000000-0000-0000-0000-000000000000\n\nExport into a CSV, but include the ACR and AES of each asset.  This takes a bit of time.\n    \n    navi export -lumin\n    \nExport into a CSV via a Tag\n    \n    navi export -bytag --c \"OS\" --v \"Linux\"\n\nExport into a CSV via a Tag; but exclude a specific Tag.\n\n    navi export -bytag --c \"OS\" --v \"Linux\" --ec \"OS\" --ev \"AWS\"\n\n### Delete an Object by an ID\n* scan -      Delete a scan by ID\n* agroup -    Delete an Access group\n* tgroup -    Delete a Target Group\n* policy -    Delete a Policy\n* asset -     Delete an asset\n* container - Delete a container by container ID\n* tag -       Delete a Tag value by Value UUID\n* category -  Delete a Tag category by the Category UUID\n\n### Examples\n\n\n    navi delete 1234 -scan\n\n    navi delete 4567 -agroup\n\n    navi delete 8910 -tgroup\n\n    navi delete 12345 -asset\n\n    navi delete 6789 -policy\n\n### Mail a Report\n* latest - Mail a report of the latest scan: Same output as \"report -latest\"\n* consec - Mail a report of the ConSec Summary: Same output as \"list -containers\"\n* webapp - Mail a report of the WebApp Summary\n\n\n## Use Cases\n\n### What was last scanned?\n    navi report -latest\n\n### What scans are running right now?\n    navi display -running\n\n### Find a Scan id by Scan Name\n    navi display -scan | grep -b2 <ScanName>\n\n### Create a Scan\n    navi.py scan 192.168.128.1\n    \n    navi.py scan 192.168.128.0/24\n    \n  * Choose your scan type: Basic or Discovery\n  * Pick your scanner by ID: scanners will be displayed\n  * Scan will immediately kick off\n\n### Control your scans\n    navi pause 13\n\n    navi resume 13\n\n    navi stop 13\n\n    navi start 13\n\n### Find Available scanners\n    navi display -scanners\n\n### Create 100s of Webapp Scans from a CSV File\nTo Receive a file for Navi Pro to use you must push the file to the container.  Netcat is installed on the container to do this, or you can use the 'listen' command to accomplish this.\n  \n    navi spider <your_csv_file.csv>\n    \n    \n* Choose your Scan type : Webapp Overview or Webapp Scan\n* Choose your scanner: A list will be displayed\n* Scans will be created but not started.\n* An output of the Webapp URL and Scan ID will be displayed on completion\n\n### Getting Data into the Container\n\nFrom the container - Prepare your container to receive a file\n\n    navi listen\n\n    or\n\n    nc -l -p 8000 > yourfilename.csv\n\nFrom the computer with the file - Send the file\n\n    nc containerhostIP 8000 < yourfilename.csv", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/packetchaos/Navi", "keywords": "tenable tenable_io navi tio,lumin,navi pro,tio cli,tenable io cli", "license": "GNUv3", "maintainer": "", "maintainer_email": "", "name": "navi-Pro", "package_url": "https://pypi.org/project/navi-Pro/", "platform": "", "project_url": "https://pypi.org/project/navi-Pro/", "project_urls": {"Homepage": "https://github.com/packetchaos/Navi"}, "release_url": "https://pypi.org/project/navi-Pro/5.1.0/", "requires_dist": null, "requires_python": ">=3.0", "summary": "A command-line interface to Tenable.io", "version": "5.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Navi Pro - The Tenable.io Swiss Army Knife</h1>\n<p>A command-line tool which leverages the Tenable.io API to reduce the time it takes to get information that is common\nin Cyber Exposure or Vulnerability Management.</p>\n<pre><code>*** This is not Supported by Tenable ***\n</code></pre>\n<h3>Important Note</h3>\n<p>Navi Pro will download the entire data-set(90 days) locally after API keys are\nentered and the update command is used! To download Vuln and Asset data you have to be an Administrator in Tenable.io.</p>\n<p>All Vulns and All Assets are downloaded into a SQLLITE database named navi.db in the current directory.</p>\n<p>Most of the API calls nessessary to make navi work require access to\nyour all of the available data.  Tenable.io has a 5000 record limit so Navi Pro utilizes the Export API.</p>\n<p>The data will not be updated until you run the update command.  Keep this in mind when adding elements to Tenable.io like Tags.</p>\n<pre><code>navi update\n</code></pre>\n<p>Alternatively you can select which export you want to update:</p>\n<pre><code>navi update -assets\n\nnavi update -vulns\n</code></pre>\n<p>Furthermore, you can limit how much data is downloaded by using the --days command</p>\n<pre><code>navi update -assets --days 2\n</code></pre>\n<h1>Download and Configure navi in a Docker Container</h1>\n<pre><code>docker pull silentninja/navi:latest\n\ndocker run -it -p 8000:8000 silentninja/navi:latest /bin/bash \n\nnavi keys\n\nnavi update\n</code></pre>\n<h2>Detach from Container</h2>\n<pre><code>CTR+Q+P - CTR+Q+P\n</code></pre>\n<h2>Attach to Contianer</h2>\n<pre><code>docker attach &lt;container id&gt;\n\n&lt;press enter&gt;\n</code></pre>\n<h2>Configure For Reporting</h2>\n<p>Navi has a few reporting capabilities where a CSV is the output.  To extract this data from the container you will need to launch the container with port 8000 exposed and use the 'http' command to extract the reports.</p>\n<pre><code>docker run -it -p 8000:8000 silentninja/navi:latest /bin/bash\n</code></pre>\n<h3>Extract Data</h3>\n<p>To extract data from the container you need to run an http server.  Use the below built in command.</p>\n<pre><code>navi http\n</code></pre>\n<ul>\n<li>Navigate to the website: <a href=\"http://0.0.0.0:8000\" rel=\"nofollow\">http://0.0.0.0:8000</a></li>\n<li>Simply download the item you want by clicking on it.</li>\n</ul>\n<h1>Download and Configure Navi using Python3 Setup file</h1>\n<h2>Prepare your Machine</h2>\n<ul>\n<li>Install <a href=\"https://realpython.com/installing-python/\" rel=\"nofollow\">Python3</a></li>\n<li>Install <a href=\"https://pypi.org/project/setuptools/2.0/\" rel=\"nofollow\">Setuptools</a></li>\n<li>Install <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\" rel=\"nofollow\">Git</a></li>\n</ul>\n<h2>Clone the Repo</h2>\n<p>Create a new Directory</p>\n<pre><code>mkdir tenable\n</code></pre>\n<p>Change into your new directory</p>\n<pre><code>cd tenable\n</code></pre>\n<p>Clone the repo</p>\n<pre><code>git clone https://github.com/packetchaos/Navi.git\n</code></pre>\n<p>Install Navi</p>\n<pre><code>cd Navi\npython3 setup.py install\n</code></pre>\n<h2>Usage</h2>\n<p>Before you begin you need the Keys! The program will continue to error out without valid API keys</p>\n<pre><code>navi keys\n</code></pre>\n<p>Each command has two parts: the Command and the Option/Request. Double-Dash(--) commands expect a text value. Single-Dash commands do not have an expected input.</p>\n<p>There are thirteen core commands:</p>\n<ul>\n<li>api - query api endpoints</li>\n<li>ip - find details on Specific IPs</li>\n<li>find - Find information: credential failures, containers, etc</li>\n<li>report - Report on Information: Latest scan information, Container vulns</li>\n<li>display - List details: users, logs, etc</li>\n<li>group - Create Target groups based off of Plugin ID, Plugin Name or Plugin Output</li>\n<li>export - Export Agent or Asset data into a CSV</li>\n<li>delete - Delete an object by it's ID</li>\n<li>mail - Mail a report</li>\n<li>tag - Create a Category/Value Pair</li>\n<li>lumin - Bulk adjust ACRs based on a tag</li>\n<li>add - Manually Add an asset to Tenable.io or a list of assets via CSV</li>\n<li>delete - Delete a scan by Scan ID</li>\n<li>agroup - Create an Access Group by Tag or Agent Group</li>\n</ul>\n<p>There are thirteen single use commands:</p>\n<ul>\n<li>scan - Create and launch a scan</li>\n<li>start - Start a scan by Scan-ID</li>\n<li>pause - Pause a scan by Scan-ID</li>\n<li>resume - Resume a scan by Scan-ID</li>\n<li>stop - Stop a scan by Scan-ID</li>\n<li>spider - Create a WebApp scan for every URL in a CSV</li>\n<li>update - Update local Export Vuln and Asset data.</li>\n<li>status - Get the latest status by Scan ID</li>\n<li>mac - Get the manufacture by Mac Address</li>\n<li>keys - Add or update your keys</li>\n<li>http - Run an http server to extract files from the container</li>\n<li>listen - Run a netcat listener to receive a single file</li>\n<li>smtp - Enter or update your SMTP information</li>\n</ul>\n<h3>Explore the Tenable.io API - 'api'</h3>\n<p>Enter in a API endpoint and get a pretty print json ouput.  Try some of the below endpoints:</p>\n<ul>\n<li>/scans</li>\n<li>/scanners</li>\n<li>/users</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi api /scans\n\nnavi api /scanners\n</code></pre>\n<h3>IP address queries - 'ip'</h3>\n<ul>\n<li>--plugin TEXT --&gt; Find Details on a particular plugin ID</li>\n<li>-n --&gt;            Netstat Established and Listening and Open Ports</li>\n<li>-p --&gt;            Patch Information</li>\n<li>-t --&gt;            Trace Route</li>\n<li>-o --&gt;            Process Information</li>\n<li>-c --&gt;            Connection Information</li>\n<li>-s --&gt;            Services Running</li>\n<li>-r --&gt;            Local Firewall Rules</li>\n<li>-d --&gt;            Scan Detail: 19506 plugin output</li>\n<li>-patches --&gt;      Missing Patches</li>\n<li>-software --&gt;     Find software installed on Unix of windows hosts</li>\n<li>-outbound --&gt;     Display outbound connections found by NNM</li>\n<li>-exploit --&gt;      Display exploitable vulnerabilities</li>\n<li>-critical --&gt;     Display critical vulnerabilities</li>\n<li>-details --&gt;      Details on an Asset: IP, UUID, Vulns, etc</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi ip 192.168.1.1 --plugin 19506\n\nnavi ip 192.168.1.1 -details -software\n</code></pre>\n<h3>Find information - 'find'</h3>\n<ul>\n<li>--plugin TEXT --&gt; Find Assets where this plugin fired</li>\n<li>-docker --&gt;       Find Running Docker Containers</li>\n<li>-webapp --&gt;       Find Web Servers running</li>\n<li>-creds  --&gt;       Find Credential failures</li>\n<li>--time TEXT --&gt;   Find Assets where the scan duration is over X mins</li>\n<li>-ghost --&gt;        Find Assets found by a Connector and not scanned by Nessus(AWS ONLY)</li>\n<li>--port TEXT ---&gt;  Find assets with an the open port provided</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi find --plugin 19506\n\nnavi find -docker\n\nnavi find --time 10\n</code></pre>\n<h3>Reports - Information - 'report'</h3>\n<ul>\n<li>-latest --&gt;          Report the Last Scan Details</li>\n<li>--container TEXT --&gt; Report Vulns of CVSS 7 or above by Container ID.</li>\n<li>--docker TEXT --&gt;    Report Vulns of CVSS 7 or above by Docker ID</li>\n<li>--comply TEXT --&gt;    Check to see if your container complies with your Policy</li>\n<li>--details TEXT --&gt;   Report Scan Details including Vulnerability Counts by Scan ID</li>\n<li>--summary TEXT --&gt;   Report Scan Summary by Scan ID</li>\n<li>--network TEXT --&gt;   Report Assets of a given Network</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi report -latest\n\nnavi report --container 48b5124b2768\n\nnavi report --docker 48b5124b2768\n\nnavi report --comply 48b5124b2768\n\nnavi report --summary 13\n</code></pre>\n<h3>Display - Common Information - 'display'</h3>\n<ul>\n<li>-scanners --&gt;   List all of the Scanners</li>\n<li>-users --&gt;      List all of the Users</li>\n<li>-exclusions --&gt; List all Exclusions</li>\n<li>-containers --&gt; List all containers and their Vulnerability  Scores</li>\n<li>-logs --&gt;       List The actor and the action in the log file</li>\n<li>-running --&gt;    List the running Scans</li>\n<li>-scans --&gt;      List all Scans</li>\n<li>-nnm --&gt;        Nessus Network Monitor assets and their vulnerability scores</li>\n<li>-assets --&gt;     Assets found in the last 30 days</li>\n<li>-policies --&gt;   Scan Policies</li>\n<li>-connectors --&gt; Displays information about the Connectors</li>\n<li>-agroup --&gt;     Displays information about Access Groups</li>\n<li>-status --&gt;     Displays Tenable.io License and Site information</li>\n<li>-agents --&gt;     Displays information on Agents</li>\n<li>-webapp --&gt;     Displays information on Web app Scans</li>\n<li>-tgroup --&gt;     Displays information about Target Groups</li>\n<li>-licensed --&gt;   Displays All of your Licensed assets</li>\n<li>-tags --&gt;       Displays Tag Categories, Values and Value UUID</li>\n<li>-categories --&gt; Displays Tag Categories and the Category UUID</li>\n<li>-cloud --&gt;      Displays Cloud assets found in the last 30 days</li>\n<li>-networks --&gt;   Displays Network IDs</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi display -scanners\n\nnavi display -running\n\nnavi display -nnm\n</code></pre>\n<h3>Add assets manually or via a CSV file - 'add'</h3>\n<p>To add an asset you need an IP address; Everything else is optional.\nIf you are going to use a CSV file you need to structure it in this order: IP, Mac, Hostname, FQDN.\nThis is the order the information is parsed so getting it incorrect will cause errors.</p>\n<ul>\n<li>--ip TEXT        IP address(s) of new asset</li>\n<li>--mac TEXT       Mac Address of new asset</li>\n<li>--netbios TEXT   NetBios of new asset</li>\n<li>--fqdn TEXT      FQDN of new asset</li>\n<li>--hostname TEXT  Hostname of new asset</li>\n<li>--list - TEXT    Import all assets in the CSV file</li>\n<li>--source - TEXT  Add the Source</li>\n</ul>\n<h3>Tag assets by Plugin Name, or Plugin ID - 'tag'</h3>\n<ul>\n<li>--c --&gt;      Create a Tag with this Category - Required</li>\n<li>--v --&gt;      Create a Tag with this Value - Required</li>\n<li>--d --&gt;      Create a description for your Tag - Optional (TEXT\"</li>\n<li>--plugin --&gt; Define a Tag by a plugin ID - Optional (TEXT)</li>\n<li>--name --&gt;   Define a tag by text found in a plugin Name - Optional (TEXT)</li>\n<li>--group --&gt;  Define a tag by a Agent Group Name - Optional (TEXT)</li>\n<li>--output TEXT  Create a Tag based on the text in the output. Requires --plugin</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi tag --c \"My Category\" --v \"My Value\" --d \"My description\" --plugin 93561\nnavi tag --c \"Application Vulns\" --v \"Java vulns\" --name java\nnavi tag --c \"Agent Group\" --v \"Linux Agents\" --group \"Linux\"\n</code></pre>\n<h3>Create Access Groups by Tags or Agent Groups - 'agroup'</h3>\n<ul>\n<li>--name TEXT   Create an Access group with the following Name</li>\n<li>-tag          Create a Access Group by a Tag</li>\n<li>--c TEXT      Category name to use</li>\n<li>--v TEXT      Tag Value to use; requires --c and Category Name</li>\n<li>--group TEXT  Create a Tag based on a Agent Group</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi agroup --name \"My New Group\" -tag --c \"OS\" --v \"Linux\"\n\nnavi agroup --name \"My Other Group\" --group \"Linux\n</code></pre>\n<h3>Bulk Adjust ACRs based on a Tag - 'lumin'</h3>\n<ul>\n<li>--acr --&gt;  The new ACR value (1-10)</li>\n<li>--c --&gt;    The Tag Category to use</li>\n<li>--v --&gt;    The Tag value to use</li>\n<li>--note --&gt; Justification for ACR change</li>\n</ul>\n<h3>Note - ACR Exceptions?</h3>\n<pre><code>Tag your assets with \"NO:UPDATE\" if you don't want to be affected by bulk ACR changes\nCategory = NO\nValue = UPDATE\n</code></pre>\n<h3>Examples</h3>\n<pre><code>navi lumin --acr 10 --c \"Applications\" --v \"Core Business\" --note \"Main application\"\n</code></pre>\n<h3>Export Asset, Agent, Consec, or Webapp Data - 'export'</h3>\n<ul>\n<li>-assets --&gt;   Export Assets data into CSV: IP, Hostname, FQDN, UUID, exposure, etc</li>\n<li>-agents --&gt;   Export Asset data into CSV: IP, Last Connect, Last scanned, Status</li>\n<li>-webapp --&gt;   Export Web applications into a CSV: FQDN, Critical, High, Medium, Low</li>\n<li>-consec --&gt;   Export Container Security summary info into a CSV.</li>\n<li>-licensed --&gt; Export a List of all Licensed Assets into a CSV.</li>\n<li>-lumin --&gt;    Export all Asset data including ACR and AES into a CSV. This will take some time</li>\n<li>--network --&gt; Export all Assets of a given network</li>\n<li>-bytag     Export all assets by tag; Include ACR and AES into a CSV</li>\n<li>--c TEXT   Export bytag with the following Category name</li>\n<li>--v TEXT   Export bytag with the Tag Value; requires --c and Category Name</li>\n<li>--ec TEXT  Exclude tag from export with Tag Category; requires --ev</li>\n<li>--ev TEXT  Exclude tag from export with Tag Value; requires --ec</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi export -assets\n\nnavi export -agents -assets -webapp -consec -licensed\n\nnavi export --network 00000000-0000-0000-0000-000000000000\n</code></pre>\n<p>Export into a CSV, but include the ACR and AES of each asset.  This takes a bit of time.</p>\n<pre><code>navi export -lumin\n</code></pre>\n<p>Export into a CSV via a Tag</p>\n<pre><code>navi export -bytag --c \"OS\" --v \"Linux\"\n</code></pre>\n<p>Export into a CSV via a Tag; but exclude a specific Tag.</p>\n<pre><code>navi export -bytag --c \"OS\" --v \"Linux\" --ec \"OS\" --ev \"AWS\"\n</code></pre>\n<h3>Delete an Object by an ID</h3>\n<ul>\n<li>scan -      Delete a scan by ID</li>\n<li>agroup -    Delete an Access group</li>\n<li>tgroup -    Delete a Target Group</li>\n<li>policy -    Delete a Policy</li>\n<li>asset -     Delete an asset</li>\n<li>container - Delete a container by container ID</li>\n<li>tag -       Delete a Tag value by Value UUID</li>\n<li>category -  Delete a Tag category by the Category UUID</li>\n</ul>\n<h3>Examples</h3>\n<pre><code>navi delete 1234 -scan\n\nnavi delete 4567 -agroup\n\nnavi delete 8910 -tgroup\n\nnavi delete 12345 -asset\n\nnavi delete 6789 -policy\n</code></pre>\n<h3>Mail a Report</h3>\n<ul>\n<li>latest - Mail a report of the latest scan: Same output as \"report -latest\"</li>\n<li>consec - Mail a report of the ConSec Summary: Same output as \"list -containers\"</li>\n<li>webapp - Mail a report of the WebApp Summary</li>\n</ul>\n<h2>Use Cases</h2>\n<h3>What was last scanned?</h3>\n<pre><code>navi report -latest\n</code></pre>\n<h3>What scans are running right now?</h3>\n<pre><code>navi display -running\n</code></pre>\n<h3>Find a Scan id by Scan Name</h3>\n<pre><code>navi display -scan | grep -b2 &lt;ScanName&gt;\n</code></pre>\n<h3>Create a Scan</h3>\n<pre><code>navi.py scan 192.168.128.1\n\nnavi.py scan 192.168.128.0/24\n</code></pre>\n<ul>\n<li>Choose your scan type: Basic or Discovery</li>\n<li>Pick your scanner by ID: scanners will be displayed</li>\n<li>Scan will immediately kick off</li>\n</ul>\n<h3>Control your scans</h3>\n<pre><code>navi pause 13\n\nnavi resume 13\n\nnavi stop 13\n\nnavi start 13\n</code></pre>\n<h3>Find Available scanners</h3>\n<pre><code>navi display -scanners\n</code></pre>\n<h3>Create 100s of Webapp Scans from a CSV File</h3>\n<p>To Receive a file for Navi Pro to use you must push the file to the container.  Netcat is installed on the container to do this, or you can use the 'listen' command to accomplish this.</p>\n<pre><code>navi spider &lt;your_csv_file.csv&gt;\n</code></pre>\n<ul>\n<li>Choose your Scan type : Webapp Overview or Webapp Scan</li>\n<li>Choose your scanner: A list will be displayed</li>\n<li>Scans will be created but not started.</li>\n<li>An output of the Webapp URL and Scan ID will be displayed on completion</li>\n</ul>\n<h3>Getting Data into the Container</h3>\n<p>From the container - Prepare your container to receive a file</p>\n<pre><code>navi listen\n\nor\n\nnc -l -p 8000 &gt; yourfilename.csv\n</code></pre>\n<p>From the computer with the file - Send the file</p>\n<pre><code>nc containerhostIP 8000 &lt; yourfilename.csv\n</code></pre>\n\n          </div>"}, "last_serial": 6853098, "releases": {"5.0.1": [{"comment_text": "", "digests": {"md5": "5da6ffc6d26ff9e1303cdf91764607ba", "sha256": "876f810b65c1dd26d829df7650bf72af6276e43df6305d43cfea9829a4401e6c"}, "downloads": -1, "filename": "Navi Pro-5.0.1.tar.gz", "has_sig": false, "md5_digest": "5da6ffc6d26ff9e1303cdf91764607ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 31832, "upload_time": "2019-12-07T20:49:59", "upload_time_iso_8601": "2019-12-07T20:49:59.610829Z", "url": "https://files.pythonhosted.org/packages/99/72/fa01abe703be8f2bb0ae21a466712080282a9c350ba1adf70ce9c660d6bd/Navi%20Pro-5.0.1.tar.gz", "yanked": false}], "5.0.2": [{"comment_text": "", "digests": {"md5": "47f438ebf71442998259008502d544b7", "sha256": "e83e23d4a6a1e1de376dc90246dde8c7262560443066f6512722bb92f29c9af8"}, "downloads": -1, "filename": "Navi Pro-5.0.2.tar.gz", "has_sig": false, "md5_digest": "47f438ebf71442998259008502d544b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 31896, "upload_time": "2019-12-08T04:07:30", "upload_time_iso_8601": "2019-12-08T04:07:30.856321Z", "url": "https://files.pythonhosted.org/packages/9e/a0/74a21b379498c0e331b80cbef22824dfa32e074665361e8d26fa71e36333/Navi%20Pro-5.0.2.tar.gz", "yanked": false}], "5.0.3": [{"comment_text": "", "digests": {"md5": "5faef0a6d78aa06cc97175f9a6300d46", "sha256": "966ea7cfcdb5f13f0aa8a8d2c039443f15ae3dbf350e994d7ff40fbc4ef38161"}, "downloads": -1, "filename": "Navi Pro-5.0.3.tar.gz", "has_sig": false, "md5_digest": "5faef0a6d78aa06cc97175f9a6300d46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 31923, "upload_time": "2019-12-09T04:47:00", "upload_time_iso_8601": "2019-12-09T04:47:00.202298Z", "url": "https://files.pythonhosted.org/packages/77/0d/15e837a5a5ef4f1d5fdf82859069d8e772b9b7c4e82b4d553e071ac4d8d2/Navi%20Pro-5.0.3.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "bb96ab3d847881dcb7997b841d9f108c", "sha256": "0d5a0fc290537373a9edef28de188cdca6dde8630ea4091388a87b3806c564d3"}, "downloads": -1, "filename": "navi Pro-5.1.0.tar.gz", "has_sig": false, "md5_digest": "bb96ab3d847881dcb7997b841d9f108c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 36628, "upload_time": "2020-03-20T22:18:46", "upload_time_iso_8601": "2020-03-20T22:18:46.492593Z", "url": "https://files.pythonhosted.org/packages/b2/52/4ae3fb3c8c040dd2ca540eab39ed434c52d5ec66c7bc30a7f2b5ccd8875b/navi%20Pro-5.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb96ab3d847881dcb7997b841d9f108c", "sha256": "0d5a0fc290537373a9edef28de188cdca6dde8630ea4091388a87b3806c564d3"}, "downloads": -1, "filename": "navi Pro-5.1.0.tar.gz", "has_sig": false, "md5_digest": "bb96ab3d847881dcb7997b841d9f108c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 36628, "upload_time": "2020-03-20T22:18:46", "upload_time_iso_8601": "2020-03-20T22:18:46.492593Z", "url": "https://files.pythonhosted.org/packages/b2/52/4ae3fb3c8c040dd2ca540eab39ed434c52d5ec66c7bc30a7f2b5ccd8875b/navi%20Pro-5.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:10 2020"}