{"info": {"author": "Bart Thate", "author_email": "bthate@dds.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Utilities"], "description": "\nOBJ.SERVER.RSS is a package part of the OBJ namespace. You can use it to fetch rss feeds and to display them in a channel.\n\nOBJ is a pure python package that provides an object class that can save/load objects in JSON format to disk.\nFiles are saved with a timestamp in their filename, so searching in a time related manner becomes possible.\n\nOBJ has a \"no-clause MIT license\" that should be the most liberal license you can get at the year 2018.\n\n| pypi: https://pypi.org/project/obj | source: http://bitbucket.org/bthate/obj | email: bthate@dds.nl\n\nmodules\n=======\n\nOBJ contains the following modules:\n\n::\n\n base\t\t- the base module containing the Object class providing load/save to JSON functionality.\n bots\t\t- bots package.\n bus\t\t- send text to a list of registered handlers.\n cli\t\t- the command line interface bot giving access to the bot from the shell.\n cmds\t\t- commands subpackage containing the above listed commands.\n db\t\t- database functionality that can search through objects stored on disk.\n event\t\t- the Event class generated on bots when data is read from the socket.\n handler\t- the event handler of the bot.\n loader\t\t- Loader class to load modules from ob space into the program.\n shell\t\t- shell related startup, cli arguments parsing and logging.\n thr\t\t- thread module to launch, kill threads.\n users\t\t- provides user management code.\n\nusage\n=====\n\nThe basic class is Object that inherits from object and add load/save methods to a standard object:\n\n >>> from obj.base import Object\n >>> o = Object()\n >>> p = o.save()\n >>> oo = Object()\n >>> oo.load(p)   \n >>> o == oo\n >>> True\n\nNext class is Obj, a dict combined with Object provides a usable \"dotted access\" dict:\n\n >>> from obj.base import Obj\n >>> o = Obj()\n >>> o.test = \"test1\"\n >>> p = o.save()\n >>> oo = Obj()\n >>> oo.load(p)\n >>> oo.test == \"test1\"\n >>> True\n\nshell\n=====\n\nYou can get a OBJ shell working by running python3 -m obj.bots.shell.\n\nOBJ shell has the following commands::\n\n cfg\t\t- show config files.\n cmds\t\t- show list of commands.\n deleted\t- show deleted objects.\n ed\t\t- edit saved objects.\n exit\t\t- stop the CLI.\n find\t\t- find objects in the datastore.\n fleet\t\t- show list of registered handlers.\n kill\t\t- stop a thread.\n last\t\t- show last record of a object.\n load\t\t- load a module.\n log\t\t- log some text.\n ls\t\t- list subdirectories in the workdir.\n meet\t\t- add a user\n perm\t\t- change permissions of a user.\n ps\t\t- show running threads.\n reboot\t\t- reboot the CLI.\n rm\t\t- set the deleted flag on an object.\n rmperm\t\t- remove permissions.\n test\t\t- echo test response.\n todo\t\t- store a todo item.\n unload\t\t- unload a module.\n uptime \t- show uptime.\n user\t\t- user lookup.\n version\t- show OBJ version.\n\nprogramming\n===========\n\nProgramming your own commands for the CLI is easy, your can load modules with the -m option.\nA command is a function with one argument, the event that was generated on the bot::\n\n def mycommand(event):\n\n     <<< your code here >>>\n\nYou can use event.reply() to send response back to the user.\n\n  \n    ", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/bthate/obj.server.rss", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "obj.server.rss", "package_url": "https://pypi.org/project/obj.server.rss/", "platform": "", "project_url": "https://pypi.org/project/obj.server.rss/", "project_urls": {"Homepage": "https://bitbucket.org/bthate/obj.server.rss"}, "release_url": "https://pypi.org/project/obj.server.rss/10/", "requires_dist": null, "requires_python": "", "summary": "RSS fetcher you can use to display RSS feeds in channels.", "version": "10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>OBJ.SERVER.RSS is a package part of the OBJ namespace. You can use it to fetch rss feeds and to display them in a channel.</p>\n<p>OBJ is a pure python package that provides an object class that can save/load objects in JSON format to disk.\nFiles are saved with a timestamp in their filename, so searching in a time related manner becomes possible.</p>\n<p>OBJ has a \u201cno-clause MIT license\u201d that should be the most liberal license you can get at the year 2018.</p>\n<div>\n<div>pypi: <a href=\"https://pypi.org/project/obj\" rel=\"nofollow\">https://pypi.org/project/obj</a> | source: <a href=\"http://bitbucket.org/bthate/obj\" rel=\"nofollow\">http://bitbucket.org/bthate/obj</a> | email: <a href=\"mailto:bthate%40dds.nl\">bthate<span>@</span>dds<span>.</span>nl</a></div>\n</div>\n<div id=\"modules\">\n<h2>modules</h2>\n<p>OBJ contains the following modules:</p>\n<pre>base           - the base module containing the Object class providing load/save to JSON functionality.\nbots           - bots package.\nbus            - send text to a list of registered handlers.\ncli            - the command line interface bot giving access to the bot from the shell.\ncmds           - commands subpackage containing the above listed commands.\ndb             - database functionality that can search through objects stored on disk.\nevent          - the Event class generated on bots when data is read from the socket.\nhandler        - the event handler of the bot.\nloader         - Loader class to load modules from ob space into the program.\nshell          - shell related startup, cli arguments parsing and logging.\nthr            - thread module to launch, kill threads.\nusers          - provides user management code.\n</pre>\n</div>\n<div id=\"usage\">\n<h2>usage</h2>\n<p>The basic class is Object that inherits from object and add load/save methods to a standard object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from obj.base import Object\n&gt;&gt;&gt; o = Object()\n&gt;&gt;&gt; p = o.save()\n&gt;&gt;&gt; oo = Object()\n&gt;&gt;&gt; oo.load(p)\n&gt;&gt;&gt; o == oo\n&gt;&gt;&gt; True\n</pre>\n</blockquote>\n<p>Next class is Obj, a dict combined with Object provides a usable \u201cdotted access\u201d dict:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from obj.base import Obj\n&gt;&gt;&gt; o = Obj()\n&gt;&gt;&gt; o.test = \"test1\"\n&gt;&gt;&gt; p = o.save()\n&gt;&gt;&gt; oo = Obj()\n&gt;&gt;&gt; oo.load(p)\n&gt;&gt;&gt; oo.test == \"test1\"\n&gt;&gt;&gt; True\n</pre>\n</blockquote>\n</div>\n<div id=\"shell\">\n<h2>shell</h2>\n<p>You can get a OBJ shell working by running python3 -m obj.bots.shell.</p>\n<p>OBJ shell has the following commands:</p>\n<pre>cfg            - show config files.\ncmds           - show list of commands.\ndeleted        - show deleted objects.\ned             - edit saved objects.\nexit           - stop the CLI.\nfind           - find objects in the datastore.\nfleet          - show list of registered handlers.\nkill           - stop a thread.\nlast           - show last record of a object.\nload           - load a module.\nlog            - log some text.\nls             - list subdirectories in the workdir.\nmeet           - add a user\nperm           - change permissions of a user.\nps             - show running threads.\nreboot         - reboot the CLI.\nrm             - set the deleted flag on an object.\nrmperm         - remove permissions.\ntest           - echo test response.\ntodo           - store a todo item.\nunload         - unload a module.\nuptime         - show uptime.\nuser           - user lookup.\nversion        - show OBJ version.\n</pre>\n</div>\n<div id=\"programming\">\n<h2>programming</h2>\n<p>Programming your own commands for the CLI is easy, your can load modules with the -m option.\nA command is a function with one argument, the event that was generated on the bot:</p>\n<pre>def mycommand(event):\n\n    &lt;&lt;&lt; your code here &gt;&gt;&gt;\n</pre>\n<p>You can use event.reply() to send response back to the user.</p>\n</div>\n\n          </div>"}, "last_serial": 4629569, "releases": {"1": [{"comment_text": "", "digests": {"md5": "ded76a55ea314758eb3cd20661beeb1f", "sha256": "52532b177a8a7126726045829bb4bd00c74e16bf32eba40c9c1bcf1f502acf76"}, "downloads": -1, "filename": "obj.server.rss-1.tar.gz", "has_sig": false, "md5_digest": "ded76a55ea314758eb3cd20661beeb1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5999, "upload_time": "2018-09-29T17:50:44", "upload_time_iso_8601": "2018-09-29T17:50:44.870647Z", "url": "https://files.pythonhosted.org/packages/8f/c3/4ec9839ec79b9fb49de902fa29100557560edc4acf08f3f6fc1bb315a9ae/obj.server.rss-1.tar.gz", "yanked": false}], "10": [{"comment_text": "", "digests": {"md5": "ba2f19c83b7f50a0865c82c84fa7f996", "sha256": "1d65de0e123dbb8e8f143e6db275a658f30c318e510d9a97224d8a7d34830c6f"}, "downloads": -1, "filename": "obj.server.rss-10.tar.gz", "has_sig": false, "md5_digest": "ba2f19c83b7f50a0865c82c84fa7f996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5574, "upload_time": "2018-12-23T14:17:28", "upload_time_iso_8601": "2018-12-23T14:17:28.682333Z", "url": "https://files.pythonhosted.org/packages/a0/db/d4f4396a88216c2894d9a5576774d8e1efc6397895b52179a54c34c2b4eb/obj.server.rss-10.tar.gz", "yanked": false}], "2": [{"comment_text": "", "digests": {"md5": "03890098d0cddd531fe77ff1cb7cf84c", "sha256": "2347b6aa90275df9067ca3832c0b98b0db2bbb22b513e74e610fc5871599f320"}, "downloads": -1, "filename": "obj.server.rss-2.tar.gz", "has_sig": false, "md5_digest": "03890098d0cddd531fe77ff1cb7cf84c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5567, "upload_time": "2018-10-11T17:21:57", "upload_time_iso_8601": "2018-10-11T17:21:57.979526Z", "url": "https://files.pythonhosted.org/packages/e5/f6/eb6f7d5459bc48df672b8e31a01da69cab514c29ba8e1f4e6ed619428e6c/obj.server.rss-2.tar.gz", "yanked": false}], "3": [{"comment_text": "", "digests": {"md5": "cb156b339dd764c75b4dfbffe23c65cf", "sha256": "b4cb3b9478da4aeed198e7dd2d3241086670edf1c7759dc35089ff646e026c1c"}, "downloads": -1, "filename": "obj.server.rss-3.tar.gz", "has_sig": false, "md5_digest": "cb156b339dd764c75b4dfbffe23c65cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5568, "upload_time": "2018-10-12T11:45:41", "upload_time_iso_8601": "2018-10-12T11:45:41.068093Z", "url": "https://files.pythonhosted.org/packages/3a/da/7ec9b35e5a4a6f0a16a7241f7f6aa996c7473eb04610b3b77333fd94f67d/obj.server.rss-3.tar.gz", "yanked": false}], "5": [{"comment_text": "", "digests": {"md5": "81178204d3e053b0673b967337ed08c0", "sha256": "9d8e1ff517065b2bcb22f53469e35e81d1902f42276ac4f3189182ae42a70b75"}, "downloads": -1, "filename": "obj.server.rss-5.tar.gz", "has_sig": false, "md5_digest": "81178204d3e053b0673b967337ed08c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5567, "upload_time": "2018-10-20T15:12:49", "upload_time_iso_8601": "2018-10-20T15:12:49.089185Z", "url": "https://files.pythonhosted.org/packages/cb/da/f98f9bca055ec52b1bf324d9e86e74fe424e8d7d0aba2afeb87517e68c68/obj.server.rss-5.tar.gz", "yanked": false}], "6": [{"comment_text": "", "digests": {"md5": "eb92f33a767594159e61c3d9c8d5d681", "sha256": "54aa3b52a7b149ad53e19dcf59c26e4c7074762d89a11706d3bbd73bd178f191"}, "downloads": -1, "filename": "obj.server.rss-6.tar.gz", "has_sig": false, "md5_digest": "eb92f33a767594159e61c3d9c8d5d681", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5520, "upload_time": "2018-10-23T13:15:56", "upload_time_iso_8601": "2018-10-23T13:15:56.153741Z", "url": "https://files.pythonhosted.org/packages/64/8e/f9a1f17f2276aeb76aea580564a5821d4a5057309ab87ce1dd43441ae85c/obj.server.rss-6.tar.gz", "yanked": false}], "7": [{"comment_text": "", "digests": {"md5": "69ea537a04a2e7631d627d19b2cb1c01", "sha256": "d1a2ff338a3584a411f36f9b9d7b05030917501cc1ecfa12ace7ce00f7086dc8"}, "downloads": -1, "filename": "obj.server.rss-7.tar.gz", "has_sig": false, "md5_digest": "69ea537a04a2e7631d627d19b2cb1c01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5623, "upload_time": "2018-11-03T14:30:50", "upload_time_iso_8601": "2018-11-03T14:30:50.575184Z", "url": "https://files.pythonhosted.org/packages/ca/ad/4d8850841bb02b3e42f5c9211f14eda1292d04d98043ca9940021d6775e8/obj.server.rss-7.tar.gz", "yanked": false}], "8": [{"comment_text": "", "digests": {"md5": "e1f948014d721c9aa72a5006fcb5dcf0", "sha256": "789078963f79bea4e6ce65ea0f0e03736917126f639557ecf0cc23f8534d00d3"}, "downloads": -1, "filename": "obj.server.rss-8.tar.gz", "has_sig": false, "md5_digest": "e1f948014d721c9aa72a5006fcb5dcf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5631, "upload_time": "2018-11-24T13:48:48", "upload_time_iso_8601": "2018-11-24T13:48:48.459964Z", "url": "https://files.pythonhosted.org/packages/bc/d1/dc8c193af7ce29a230b9f9fd88b548aa8c023245f75bf1e1057bee71e907/obj.server.rss-8.tar.gz", "yanked": false}], "9": [{"comment_text": "", "digests": {"md5": "1ea12c53881054f56bce3c0ed50fcefc", "sha256": "2c50c4ffbe74669565cabf54a1910d33c8f84c5009323b2bcc1b7fafda534ce3"}, "downloads": -1, "filename": "obj.server.rss-9.tar.gz", "has_sig": false, "md5_digest": "1ea12c53881054f56bce3c0ed50fcefc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5583, "upload_time": "2018-12-22T18:02:49", "upload_time_iso_8601": "2018-12-22T18:02:49.478557Z", "url": "https://files.pythonhosted.org/packages/05/85/c594e2ed8aa99b8c5fbb773ab5d77571286ab53ffac20ba795032f47a42e/obj.server.rss-9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba2f19c83b7f50a0865c82c84fa7f996", "sha256": "1d65de0e123dbb8e8f143e6db275a658f30c318e510d9a97224d8a7d34830c6f"}, "downloads": -1, "filename": "obj.server.rss-10.tar.gz", "has_sig": false, "md5_digest": "ba2f19c83b7f50a0865c82c84fa7f996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5574, "upload_time": "2018-12-23T14:17:28", "upload_time_iso_8601": "2018-12-23T14:17:28.682333Z", "url": "https://files.pythonhosted.org/packages/a0/db/d4f4396a88216c2894d9a5576774d8e1efc6397895b52179a54c34c2b4eb/obj.server.rss-10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:47 2020"}