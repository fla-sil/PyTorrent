{"info": {"author": "Zulko", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "IceBreaker\n----------\n\n..\n    .. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/icebreaker.svg?branch=master\n        :target: https://travis-ci.org/Edinburgh-Genome-Foundry/icebreaker\n\n    .. image:: https://coveralls.io/repos/github/Edinburgh-Genome-Foundry/icebreaker/badge.svg?branch=master\n        :target: https://coveralls.io/github/Edinburgh-Genome-Foundry/icebreaker?branch=master\n\n\nIcebreaker provides a Python interface for the `JBEI ICE sample manager <https://github.com/JBEI/ice>`_.\n\nSee the full API documentation `here <https://edinburgh-genome-foundry.github.io/icebreaker/>`_\n\nInstallation\n-------------\n\nIcebreaker is written for Python 3+. You can install icebreaker via PIP:\n\n.. code::\n\n    sudo pip install icebreaker\n\nAlternatively, you can unzip the sources in a folder and type\n\n.. code::\n\n    sudo python setup.py install\n\nExample of use\n---------------\n\nIn this example we assume that we are a lab who wants to find primers from its\ndatabase to sequence a given construct. We will (1) pull all our primers from\nICE, (2) find which primers are adapted to our sequence, using the\n`Primavera package <https://edinburgh-genome-foundry.github.io/Primavera/>`_, and\n(3) we will ask ICE for the location of the selected primers.\n\nConnexion to an ICE instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can connecct to your ICE instance using either an API token (see below\nfor how to create a token), or an email/password authentication.\n\n.. code:: python\n\n    import icebreaker\n\n    # CONNECT TO ICE\n    configuration = dict(\n        root=\"https://my.ice.instance.org\",\n        token=\"WMnlYlWHz+BC+7eFV=...\",\n        client = \"icebot\"\n    )\n    ice = icebreaker.IceClient(configuration)\n\nOr:\n\n.. code:: python\n\n    # CONNECT TO ICE\n    configuration = dict(\n        root=\"https://my.ice.instance.org\",\n        email=\"michael.swann@genomefoundry.org\",\n        password = \"ic3ic3baby\"\n    )\n    ice = icebreaker.IceClient(configuration)\n\nThe configuration can also be written in a yaml file so you can write\n``IceClient('config.yml')`` where ``config.yml`` reads as follows:\n\n.. code:: yaml\n\n    root: https://my.ice.instance.org\n    email: michael.swann@genomefoundry.org\n    password: ic3ic3baby\n\nExtracting all records from a folder\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNext we pull all primers in the database:\n\n.. code:: python\n\n    # FIND THE ID OF THE FOLDER WITH ALL PRIMERS\n    primers_folder = ice.get_folder_id(\"PRIMERS\", collection=\"SHARED\")\n\n    # GET INFOS ON ALL ENTRIES IN THE FOLDER (PRIMER NAME, ID, CREATOR...)\n    primers_entries = ice.get_folder_entries(primers_folder)\n\n    # GET A BIOPYTHON RECORD FOR EACH PRIMER\n    primers_records = {primer[\"id\"]: ice.get_record(primer[\"id\"])\n                       for primer in primers_entries}\n\n\nPrimer selection with Primavera\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNext provide this information to Primavera and select some primers (see the\n`Primavera docs <https://edinburgh-genome-foundry.github.io/Primavera/>`_):\n\n.. code:: python\n\n    from primavera import PrimerSelector, Primer, load_record\n\n    available_primers = [\n        Primer(sequence=primers_records[entry['id']].seq.tostring(),\n            name=entry['name'],\n            metadata=dict(ice_id=entry['id']))\n        for entry in primers_entries\n    ]\n    constructs = [load_record(\"RTM3_39.gb\", linear=False)]\n    selector = PrimerSelector(read_range=(150, 1000), tm_range=(55, 70),\n                            size_range=(16, 25), coverage_resolution=10,\n                            primer_reuse_bonus=200)\n    selected_primers = selector.select_primers(constructs, available_primers)\n\n\nFinding available samples\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFinally we look for available samples for each primer:\n\n.. code:: python\n\n    selected_primers = set(sum(selected_primers, []))\n    for primer in selected_primers:\n        ice_id = primer.metadata.get(\"ice_id\", None)\n        if ice_id is not None:\n            samples = ice.get_samples(ice_id)\n            if len(samples) > 0:\n                location = icebreaker.sample_location_string(samples[0])\n                print(\"Primer %s is in %s.\" % (primer.name, location))\n\nResult:\n\n.. code:: bash\n\n    Primer PRV_EMMA_IN00042 is in PRIMER_PLATE_1/E06.\n    Primer PRV_EMMA_IN00043 is in PRIMER_PLATE_1/F06.\n    Primer PRV_EMMA_IN00028 is in PRIMER_PLATE_1/G04.\n    Primer PRV_EMMA_IN00060 is in PRIMER_PLATE_1/G08.\n    Primer PRV_EMMA_IN00064 is in PRIMER_PLATE_1/C09.\n    Primer PRV_EMMA_IN00038 is in PRIMER_PLATE_1/A06.\n    Primer PRV_EMMA_IN00068 is in PRIMER_PLATE_1/G09.\n\nGetting an ICE token\n--------------------\n\nThere are several ways to get ICE tokens. We suggest you create one throug\nthe web interface as follows (see screenshot for indications):\n\n0. Create an account with administrator rights\n1. Go to the administrator panel\n2. Click on \"API keys\"\n3. Click on \"create new\". Note everything down !\n\n.. image:: https://github.com/Edinburgh-Genome-Foundry/icebreaker/raw/master/docs/_static/api_key_screenshot.png\n   :alt: screenshot\n   :align: center\n\nLicense = MIT\n--------------\n\nIcebreaker is an open-source software originally written at the Edinburgh\nGenome Foundry by `Zulko <https://github.com/Zulko>`_ and `released on\nGithub <https://github.com/Edinburgh-Genome-Foundry/icebreaker>`_ under\nthe MIT licence (Copyright Edinburg Genome Foundry). Everyone is welcome to\ncontribute !\n\n\nMore biology software\n-----------------------\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/Edinburgh-Genome-Foundry.github.io/master/static/imgs/logos/egf-codon-horizontal.png\n :target: https://edinburgh-genome-foundry.github.io/\n\nIcebreaker is part of the `EGF Codons <https://edinburgh-genome-foundry.github.io/>`_ synthetic biology software suite for DNA design, manufacturing and validation.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "synthetic biology sample manager", "license": "see LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "icebreaker", "package_url": "https://pypi.org/project/icebreaker/", "platform": "", "project_url": "https://pypi.org/project/icebreaker/", "project_urls": null, "release_url": "https://pypi.org/project/icebreaker/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Python API for the JBEI ICE sample manager.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"icebreaker\">\n<h2>IceBreaker</h2>\n<p>Icebreaker provides a Python interface for the <a href=\"https://github.com/JBEI/ice\" rel=\"nofollow\">JBEI ICE sample manager</a>.</p>\n<p>See the full API documentation <a href=\"https://edinburgh-genome-foundry.github.io/icebreaker/\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Icebreaker is written for Python 3+. You can install icebreaker via PIP:</p>\n<pre>sudo pip install icebreaker\n</pre>\n<p>Alternatively, you can unzip the sources in a folder and type</p>\n<pre>sudo python setup.py install\n</pre>\n</div>\n<div id=\"example-of-use\">\n<h2>Example of use</h2>\n<p>In this example we assume that we are a lab who wants to find primers from its\ndatabase to sequence a given construct. We will (1) pull all our primers from\nICE, (2) find which primers are adapted to our sequence, using the\n<a href=\"https://edinburgh-genome-foundry.github.io/Primavera/\" rel=\"nofollow\">Primavera package</a>, and\n(3) we will ask ICE for the location of the selected primers.</p>\n<div id=\"connexion-to-an-ice-instance\">\n<h3>Connexion to an ICE instance</h3>\n<p>You can connecct to your ICE instance using either an API token (see below\nfor how to create a token), or an email/password authentication.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">icebreaker</span>\n\n<span class=\"c1\"># CONNECT TO ICE</span>\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">root</span><span class=\"o\">=</span><span class=\"s2\">\"https://my.ice.instance.org\"</span><span class=\"p\">,</span>\n    <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"WMnlYlWHz+BC+7eFV=...\"</span><span class=\"p\">,</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"s2\">\"icebot\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">ice</span> <span class=\"o\">=</span> <span class=\"n\">icebreaker</span><span class=\"o\">.</span><span class=\"n\">IceClient</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">)</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"c1\"># CONNECT TO ICE</span>\n<span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">root</span><span class=\"o\">=</span><span class=\"s2\">\"https://my.ice.instance.org\"</span><span class=\"p\">,</span>\n    <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">\"michael.swann@genomefoundry.org\"</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"ic3ic3baby\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">ice</span> <span class=\"o\">=</span> <span class=\"n\">icebreaker</span><span class=\"o\">.</span><span class=\"n\">IceClient</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"p\">)</span>\n</pre>\n<p>The configuration can also be written in a yaml file so you can write\n<tt><span class=\"pre\">IceClient('config.yml')</span></tt> where <tt>config.yml</tt> reads as follows:</p>\n<pre><span class=\"nt\">root</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">https://my.ice.instance.org</span>\n<span class=\"nt\">email</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">michael.swann@genomefoundry.org</span>\n<span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ic3ic3baby</span>\n</pre>\n</div>\n<div id=\"extracting-all-records-from-a-folder\">\n<h3>Extracting all records from a folder</h3>\n<p>Next we pull all primers in the database:</p>\n<pre><span class=\"c1\"># FIND THE ID OF THE FOLDER WITH ALL PRIMERS</span>\n<span class=\"n\">primers_folder</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"o\">.</span><span class=\"n\">get_folder_id</span><span class=\"p\">(</span><span class=\"s2\">\"PRIMERS\"</span><span class=\"p\">,</span> <span class=\"n\">collection</span><span class=\"o\">=</span><span class=\"s2\">\"SHARED\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># GET INFOS ON ALL ENTRIES IN THE FOLDER (PRIMER NAME, ID, CREATOR...)</span>\n<span class=\"n\">primers_entries</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"o\">.</span><span class=\"n\">get_folder_entries</span><span class=\"p\">(</span><span class=\"n\">primers_folder</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># GET A BIOPYTHON RECORD FOR EACH PRIMER</span>\n<span class=\"n\">primers_records</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">primer</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]:</span> <span class=\"n\">ice</span><span class=\"o\">.</span><span class=\"n\">get_record</span><span class=\"p\">(</span><span class=\"n\">primer</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">])</span>\n                   <span class=\"k\">for</span> <span class=\"n\">primer</span> <span class=\"ow\">in</span> <span class=\"n\">primers_entries</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"primer-selection-with-primavera\">\n<h3>Primer selection with Primavera</h3>\n<p>Next provide this information to Primavera and select some primers (see the\n<a href=\"https://edinburgh-genome-foundry.github.io/Primavera/\" rel=\"nofollow\">Primavera docs</a>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">primavera</span> <span class=\"kn\">import</span> <span class=\"n\">PrimerSelector</span><span class=\"p\">,</span> <span class=\"n\">Primer</span><span class=\"p\">,</span> <span class=\"n\">load_record</span>\n\n<span class=\"n\">available_primers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Primer</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"o\">=</span><span class=\"n\">primers_records</span><span class=\"p\">[</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">tostring</span><span class=\"p\">(),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">ice_id</span><span class=\"o\">=</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">]))</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">primers_entries</span>\n<span class=\"p\">]</span>\n<span class=\"n\">constructs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">load_record</span><span class=\"p\">(</span><span class=\"s2\">\"RTM3_39.gb\"</span><span class=\"p\">,</span> <span class=\"n\">linear</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)]</span>\n<span class=\"n\">selector</span> <span class=\"o\">=</span> <span class=\"n\">PrimerSelector</span><span class=\"p\">(</span><span class=\"n\">read_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">tm_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">),</span>\n                        <span class=\"n\">size_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"n\">coverage_resolution</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                        <span class=\"n\">primer_reuse_bonus</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">selected_primers</span> <span class=\"o\">=</span> <span class=\"n\">selector</span><span class=\"o\">.</span><span class=\"n\">select_primers</span><span class=\"p\">(</span><span class=\"n\">constructs</span><span class=\"p\">,</span> <span class=\"n\">available_primers</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"finding-available-samples\">\n<h3>Finding available samples</h3>\n<p>Finally we look for available samples for each primer:</p>\n<pre><span class=\"n\">selected_primers</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">selected_primers</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n<span class=\"k\">for</span> <span class=\"n\">primer</span> <span class=\"ow\">in</span> <span class=\"n\">selected_primers</span><span class=\"p\">:</span>\n    <span class=\"n\">ice_id</span> <span class=\"o\">=</span> <span class=\"n\">primer</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"ice_id\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ice_id</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">ice</span><span class=\"o\">.</span><span class=\"n\">get_samples</span><span class=\"p\">(</span><span class=\"n\">ice_id</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">icebreaker</span><span class=\"o\">.</span><span class=\"n\">sample_location_string</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Primer </span><span class=\"si\">%s</span><span class=\"s2\"> is in </span><span class=\"si\">%s</span><span class=\"s2\">.\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">primer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"p\">))</span>\n</pre>\n<p>Result:</p>\n<pre>Primer PRV_EMMA_IN00042 is in PRIMER_PLATE_1/E06.\nPrimer PRV_EMMA_IN00043 is in PRIMER_PLATE_1/F06.\nPrimer PRV_EMMA_IN00028 is in PRIMER_PLATE_1/G04.\nPrimer PRV_EMMA_IN00060 is in PRIMER_PLATE_1/G08.\nPrimer PRV_EMMA_IN00064 is in PRIMER_PLATE_1/C09.\nPrimer PRV_EMMA_IN00038 is in PRIMER_PLATE_1/A06.\nPrimer PRV_EMMA_IN00068 is in PRIMER_PLATE_1/G09.\n</pre>\n</div>\n</div>\n<div id=\"getting-an-ice-token\">\n<h2>Getting an ICE token</h2>\n<p>There are several ways to get ICE tokens. We suggest you create one throug\nthe web interface as follows (see screenshot for indications):</p>\n<ol>\n<li>Create an account with administrator rights</li>\n<li>Go to the administrator panel</li>\n<li>Click on \u201cAPI keys\u201d</li>\n<li>Click on \u201ccreate new\u201d. Note everything down !</li>\n</ol>\n<img alt=\"screenshot\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82a480feda65452b4bec8f3645d931b4a5793e8a/68747470733a2f2f6769746875622e636f6d2f4564696e62757267682d47656e6f6d652d466f756e6472792f696365627265616b65722f7261772f6d61737465722f646f63732f5f7374617469632f6170695f6b65795f73637265656e73686f742e706e67\">\n</div>\n<div id=\"license-mit\">\n<h2>License = MIT</h2>\n<p>Icebreaker is an open-source software originally written at the Edinburgh\nGenome Foundry by <a href=\"https://github.com/Zulko\" rel=\"nofollow\">Zulko</a> and <a href=\"https://github.com/Edinburgh-Genome-Foundry/icebreaker\" rel=\"nofollow\">released on\nGithub</a> under\nthe MIT licence (Copyright Edinburg Genome Foundry). Everyone is welcome to\ncontribute !</p>\n</div>\n<div id=\"more-biology-software\">\n<h2>More biology software</h2>\n<a href=\"https://edinburgh-genome-foundry.github.io/\" rel=\"nofollow\"><img alt=\"https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/Edinburgh-Genome-Foundry.github.io/master/static/imgs/logos/egf-codon-horizontal.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a74793b24e95adb6771b02753b469178ffd6600/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4564696e62757267682d47656e6f6d652d466f756e6472792f4564696e62757267682d47656e6f6d652d466f756e6472792e6769746875622e696f2f6d61737465722f7374617469632f696d67732f6c6f676f732f6567662d636f646f6e2d686f72697a6f6e74616c2e706e67\"></a>\n<p>Icebreaker is part of the <a href=\"https://edinburgh-genome-foundry.github.io/\" rel=\"nofollow\">EGF Codons</a> synthetic biology software suite for DNA design, manufacturing and validation.</p>\n</div>\n\n          </div>"}, "last_serial": 6156550, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "e85a7c32bd09c037bb4be30e4ed5d1dc", "sha256": "5fee8286e826c21114dcfbcec30b3f98fa738bca58f090ae452eefa9b3e8b6ec"}, "downloads": -1, "filename": "icebreaker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e85a7c32bd09c037bb4be30e4ed5d1dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18168, "upload_time": "2018-10-03T21:36:11", "upload_time_iso_8601": "2018-10-03T21:36:11.034276Z", "url": "https://files.pythonhosted.org/packages/25/08/7314036da8dc8df7f497756bb515bac4b635d37dcb66e71396cbc6240663/icebreaker-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "97978cf19f341bae1cd656e7cc305c45", "sha256": "1a6deede6041e4bf1a712c75f469f70e2dca0bb5fcae0a2eee81a517245314c0"}, "downloads": -1, "filename": "icebreaker-0.2.1.tar.gz", "has_sig": false, "md5_digest": "97978cf19f341bae1cd656e7cc305c45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20661, "upload_time": "2019-11-18T15:46:52", "upload_time_iso_8601": "2019-11-18T15:46:52.391239Z", "url": "https://files.pythonhosted.org/packages/32/9a/0e1fe32881049a13130658e5c2356a0f934fa47a22cb12cea38f457c064c/icebreaker-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97978cf19f341bae1cd656e7cc305c45", "sha256": "1a6deede6041e4bf1a712c75f469f70e2dca0bb5fcae0a2eee81a517245314c0"}, "downloads": -1, "filename": "icebreaker-0.2.1.tar.gz", "has_sig": false, "md5_digest": "97978cf19f341bae1cd656e7cc305c45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20661, "upload_time": "2019-11-18T15:46:52", "upload_time_iso_8601": "2019-11-18T15:46:52.391239Z", "url": "https://files.pythonhosted.org/packages/32/9a/0e1fe32881049a13130658e5c2356a0f934fa47a22cb12cea38f457c064c/icebreaker-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:07 2020"}