{"info": {"author": "Manoj Kumar S", "author_email": "kumarmanoj1158@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# contractpy\n\ncontractpy is a tiny library for validating the data against a contract.\n\n# Basic usage\n\nYou could simply create a contract object and validate your data if it conforms to the contract.\n~~~~{.python}\nfrom pycontract import Contract, Types\n\nmy_contract = {\n    'name': Types.STRING,\n    'id': Types.INTEGER\n}\ncontract = Contract(my_contract)\n\nassert contract.verify({'name': 'Captain America': 'id': 12345}) is True\n~~~~\nYes, it is as simple as this.\n\nAlso, it works for the complicated data like nested dict object (Values in a dict object can be another dict object or list of dict objects). In such cases, it will recursively iterate over the inner dicts and validate them against the contract. Please check out the below example,\n\n~~~~{.python}\nmy_contract = {\n    'name': Types.STRING,\n    'id': Types.INTEGER,\n    'orders': [\n        {\n            'orderId': Types:INTEGER,\n            'price': Types:FLOAT,\n        }\n    ],\n    comments: [Types.String]\n}\n\ndata = {\n    'name': 'Hazel Grace',\n    'id: 57331,\n    'orders': [\n        {\n            'orderId': 1,\n            'price': 420.45\n        },\n        {\n            'orderId': 2,\n            'price': 750.38\n        }\n    ],\n    comments: [\"I really liked the product!\", \"I am completely satisfied.\"]\n}\n\nassert Contract(my_contract).verify(data) is True\n~~~~\n\nIf you want to specify a list for any field, use the square bracets ( [ ] ) as specified in the field `data`. In such cases, it will validate all the values against the contract that are present in the list.\n\nYou could also do the contract testing for the REST APIs using this library. This API contract testing would be more useful in the microservices architecture.\nFor Example,\n\n~~~~{.python}\ndef test_users_api_conforms_the_contract():\n    user_api_contract = {\n        'page': Types.INTEGER,\n        'per_page': Types.INTEGER,\n        'total': Types.INTEGER,\n        'total_pages': Types.INTEGER,\n        'data': [\n            {\n                'id': Types.INTEGER,\n                'name': Types.STRING,\n                'year': Types.INTEGER,\n                'color': Types.STRING,\n                'pantone_value': Types.STRING\n            }\n        ],\n        'ad': {\n            'company': Types.STRING,\n            'url': Types.STRING,\n            'text': Types.STRING\n        }\n    }\n\n    response = requests.get('https://reqres.in/api/user?page=1')\n\n    assert response.status_code == 200\n    assert Contract(user_api_contract).verify(response.json()) is True\n~~~~\n\nNote: Here, the test api is powered by [reqres.in](https://reqres.in/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/KumarManoj-S/contractpy/archive/0.1.9.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KumarManoj-S/contractpy", "keywords": "contract,contract testing,template,validate", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "contractpy", "package_url": "https://pypi.org/project/contractpy/", "platform": "", "project_url": "https://pypi.org/project/contractpy/", "project_urls": {"Download": "https://github.com/KumarManoj-S/contractpy/archive/0.1.9.tar.gz", "Homepage": "https://github.com/KumarManoj-S/contractpy"}, "release_url": "https://pypi.org/project/contractpy/0.1.9/", "requires_dist": null, "requires_python": "", "summary": "A tiny library for validating our data if it adheres the contract.", "version": "0.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>contractpy</h1>\n<p>contractpy is a tiny library for validating the data against a contract.</p>\n<h1>Basic usage</h1>\n<p>You could simply create a contract object and validate your data if it conforms to the contract.</p>\n<pre>from pycontract import Contract, Types\n\nmy_contract = {\n    'name': Types.STRING,\n    'id': Types.INTEGER\n}\ncontract = Contract(my_contract)\n\nassert contract.verify({'name': 'Captain America': 'id': 12345}) is True\n</pre>\n<p>Yes, it is as simple as this.</p>\n<p>Also, it works for the complicated data like nested dict object (Values in a dict object can be another dict object or list of dict objects). In such cases, it will recursively iterate over the inner dicts and validate them against the contract. Please check out the below example,</p>\n<pre>my_contract = {\n    'name': Types.STRING,\n    'id': Types.INTEGER,\n    'orders': [\n        {\n            'orderId': Types:INTEGER,\n            'price': Types:FLOAT,\n        }\n    ],\n    comments: [Types.String]\n}\n\ndata = {\n    'name': 'Hazel Grace',\n    'id: 57331,\n    'orders': [\n        {\n            'orderId': 1,\n            'price': 420.45\n        },\n        {\n            'orderId': 2,\n            'price': 750.38\n        }\n    ],\n    comments: [\"I really liked the product!\", \"I am completely satisfied.\"]\n}\n\nassert Contract(my_contract).verify(data) is True\n</pre>\n<p>If you want to specify a list for any field, use the square bracets ( [ ] ) as specified in the field <code>data</code>. In such cases, it will validate all the values against the contract that are present in the list.</p>\n<p>You could also do the contract testing for the REST APIs using this library. This API contract testing would be more useful in the microservices architecture.\nFor Example,</p>\n<pre>def test_users_api_conforms_the_contract():\n    user_api_contract = {\n        'page': Types.INTEGER,\n        'per_page': Types.INTEGER,\n        'total': Types.INTEGER,\n        'total_pages': Types.INTEGER,\n        'data': [\n            {\n                'id': Types.INTEGER,\n                'name': Types.STRING,\n                'year': Types.INTEGER,\n                'color': Types.STRING,\n                'pantone_value': Types.STRING\n            }\n        ],\n        'ad': {\n            'company': Types.STRING,\n            'url': Types.STRING,\n            'text': Types.STRING\n        }\n    }\n\n    response = requests.get('https://reqres.in/api/user?page=1')\n\n    assert response.status_code == 200\n    assert Contract(user_api_contract).verify(response.json()) is True\n</pre>\n<p>Note: Here, the test api is powered by <a href=\"https://reqres.in/\" rel=\"nofollow\">reqres.in</a></p>\n\n          </div>"}, "last_serial": 6859258, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "930abd9c2829dd7b6f346a87c990d12b", "sha256": "503a013a96d1a413872cec557e96fe7fb68ad4e2edd50e7f21a10d314e6b8779"}, "downloads": -1, "filename": "contractpy-0.1.tar.gz", "has_sig": false, "md5_digest": "930abd9c2829dd7b6f346a87c990d12b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 977, "upload_time": "2020-03-22T06:21:11", "upload_time_iso_8601": "2020-03-22T06:21:11.159869Z", "url": "https://files.pythonhosted.org/packages/ab/df/1bc7a671b33fe2e3c239f349c8e87906c92fe8d29b3a24cff08eb9419648/contractpy-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "82d5ea5ded6ab758d5965630695e7d80", "sha256": "8f29eea3a8bd44e2fbe70605e1ab8d2d8c26c407684bc228ece72424192e3725"}, "downloads": -1, "filename": "contractpy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "82d5ea5ded6ab758d5965630695e7d80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3977, "upload_time": "2020-03-22T07:08:07", "upload_time_iso_8601": "2020-03-22T07:08:07.016112Z", "url": "https://files.pythonhosted.org/packages/51/9a/6ea9f90345643ac598841a7c63468bd04fc062e427ae0b27afdb316d5999/contractpy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e651a5189ef80e9ef2087a9dc873ed6a", "sha256": "095550823b4719cfedbdac5eae4d34780ab745482bd92c874e848ae4d9419443"}, "downloads": -1, "filename": "contractpy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e651a5189ef80e9ef2087a9dc873ed6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4272, "upload_time": "2020-03-22T07:22:02", "upload_time_iso_8601": "2020-03-22T07:22:02.372635Z", "url": "https://files.pythonhosted.org/packages/1b/a9/8128a24b3b9346f72f2fe5b45a5460fc3769b3a02db851b74e809ca9c109/contractpy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bfc7367bf23d163573f061e089c85a54", "sha256": "04aa6316f4966ecc61c9a0eda86cf39409c448ce5d44a78ad0bf128141a2b4c1"}, "downloads": -1, "filename": "contractpy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bfc7367bf23d163573f061e089c85a54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2020-03-22T07:45:53", "upload_time_iso_8601": "2020-03-22T07:45:53.409741Z", "url": "https://files.pythonhosted.org/packages/dd/9a/31a722b08ac4c721060a3c533895f1f76801a37b6f4d1fdb411a30e1fe3a/contractpy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "77dba36054a85256720bb3cdd68ccdb6", "sha256": "3df294f646739fadf94aae4259ab1565fb948323d52a253593602171860599a2"}, "downloads": -1, "filename": "contractpy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "77dba36054a85256720bb3cdd68ccdb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4694, "upload_time": "2020-03-22T07:53:12", "upload_time_iso_8601": "2020-03-22T07:53:12.245569Z", "url": "https://files.pythonhosted.org/packages/57/ee/8710f1f6cf781fa01313d6bd761d44b6942dc518ae1046a127e0858e09f9/contractpy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "bfccd8ce28a0646fe71964d3bf66da5d", "sha256": "73e704fc78995428765857b1ad9e810489f02b34931680ed7a5556ffb25b2b6b"}, "downloads": -1, "filename": "contractpy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "bfccd8ce28a0646fe71964d3bf66da5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4802, "upload_time": "2020-03-22T08:27:41", "upload_time_iso_8601": "2020-03-22T08:27:41.798712Z", "url": "https://files.pythonhosted.org/packages/85/de/dc5eea7d97fad784f869cf82fb55ce4a473f41a6ea4da0d8d0ba8a48b3a5/contractpy-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "234e99cb001346e80d7f0a63ddf20ee0", "sha256": "7601a029157ca00c930d98981053a0f0184c23dc5509d69a359a734179fe8631"}, "downloads": -1, "filename": "contractpy-0.1.6.tar.gz", "has_sig": false, "md5_digest": "234e99cb001346e80d7f0a63ddf20ee0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4807, "upload_time": "2020-03-22T08:37:49", "upload_time_iso_8601": "2020-03-22T08:37:49.496560Z", "url": "https://files.pythonhosted.org/packages/4c/09/a24107514f25bc2957de46cb5b44cdb1d1c50d4f60a82d482570c4e88085/contractpy-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "f244177612bde953f32d8d141d0f0db3", "sha256": "58949bd3f0a2f9dfc763ac3f282706ed5443022a040ba712cacff075eb46111c"}, "downloads": -1, "filename": "contractpy-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f244177612bde953f32d8d141d0f0db3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5430, "upload_time": "2020-03-22T09:05:10", "upload_time_iso_8601": "2020-03-22T09:05:10.932314Z", "url": "https://files.pythonhosted.org/packages/70/6d/3d24ebc327a7511dbe7dd13dc3f582b867f1f8b9f936fa386e5b31e4cacc/contractpy-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "0c2fbcacfac6b7df22e2001fbe2ce8d7", "sha256": "f6335eeab4ce89fbbb4cabaa4ce1195bd9753547000899b724073ed7bb7be2b5"}, "downloads": -1, "filename": "contractpy-0.1.8.tar.gz", "has_sig": false, "md5_digest": "0c2fbcacfac6b7df22e2001fbe2ce8d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5425, "upload_time": "2020-03-22T09:18:25", "upload_time_iso_8601": "2020-03-22T09:18:25.033162Z", "url": "https://files.pythonhosted.org/packages/76/cd/5a8cdd39eac38e19fe3d70d7088beb38b4f12467bf684c220b37cb55cd77/contractpy-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "bb79213f03cc9ba7e752d9ebdf405fa4", "sha256": "3ab783846fa8405b6b3be7ded08a779e908a0bf720d0f7a278663720aedecab0"}, "downloads": -1, "filename": "contractpy-0.1.9.tar.gz", "has_sig": false, "md5_digest": "bb79213f03cc9ba7e752d9ebdf405fa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5423, "upload_time": "2020-03-22T10:36:15", "upload_time_iso_8601": "2020-03-22T10:36:15.374841Z", "url": "https://files.pythonhosted.org/packages/e5/96/df6880b1cd5edf20af7ba9b2651ae0399037b8c556bea59b9a6b6101f652/contractpy-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb79213f03cc9ba7e752d9ebdf405fa4", "sha256": "3ab783846fa8405b6b3be7ded08a779e908a0bf720d0f7a278663720aedecab0"}, "downloads": -1, "filename": "contractpy-0.1.9.tar.gz", "has_sig": false, "md5_digest": "bb79213f03cc9ba7e752d9ebdf405fa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5423, "upload_time": "2020-03-22T10:36:15", "upload_time_iso_8601": "2020-03-22T10:36:15.374841Z", "url": "https://files.pythonhosted.org/packages/e5/96/df6880b1cd5edf20af7ba9b2651ae0399037b8c556bea59b9a6b6101f652/contractpy-0.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:30 2020"}