{"info": {"author": "pseudosky", "author_email": "grepthesky@gmail.com", "bugtrack_url": null, "classifiers": ["Topic :: Software Development :: Libraries", "Topic :: Text Editors :: Text Processing", "Topic :: Text Processing", "Topic :: Utilities"], "description": "# MorPhit\n\nUsage\n------------\n\n```python\n    >>> from morphit import Parser\n    >>> Parser([], '[1,2,3]')\n    [1, 2, 3]\n```\n\n`pip install morphit`\n\n`sudo -H pip install morphit`\n\n\nmorphit is a no nonsense parser that takes a template for data and converts\nwhatever you feed it into whatever you want it to be.\n\nDo you have \"My data is fucked\"?\nIf you find yourself saying any of the following, you may to be entitled to financial compensation.\n\n-   WTF half of these are strings instead of **insert type here**\n-   How do I even convert from **insert type A** to **insert type B**\n-   I have so much bad data I'm going to have to manually fix\n-   I have hundreds of if conditions to fix weird data\n-   How the hell am I supposed to fix the type of all these nested objects\n-   You're telling me this float is supposed to be a date?...\n-   You're telling me that I cant put a datetime object anywhere?\n-   I don't know how any of these strings became numbers but...\n\n\nFeatures\n------------\n\n-   Processor chaining\n\n```python\n>>> Processor.flow([\"<parser|lambda|func|obj>\",...])\n\n>>> p = Processor(dict)\n>>> p.then(lambda d: d['date'])\n     .then(Processor.types['Date'])\n>>> res = p('{\"date\": \"2018-01-31T06:17:45.547\"}')\n\ndatetime(2018, 1, 31, 6, 17, 45, 547000)\n```\n\n-   datetime serialization\n\n```python\n>>> from datetime import date\n>>> Parser(str, datetime(2018, 1, 31, 6, 17, 45, 547000))\n\"2018-01-31T06:17:45.547\"\n```\n\n-   deep serialization of dicts\n-   supports custom serializers using methods/lambda functions\n-   templated parsers\n-   nested templated parsers\n\nSupported Conversions\n------------\n\n-   any -> list\n-   any -> object\n-   any -> tuple\n-   any -> type\n-   any -> str\n-   dict -> str[json]\n-   dict -> dict\n-   dict -> list\n-   dict -> tuple\n-   datetime -> str\n-   datetime -> str[json]\n-   datetime -> int\n-   datetime -> float\n-   datetime.time -> str\n-   datetime.date -> str\n-   float -> str\n-   float -> float\n-   float -> list\n-   float -> tuple\n-   float -> type\n-   float -> datetime\n-   int -> str\n-   int -> int\n-   int -> list\n-   int -> tuple\n-   int -> datetime\n-   int -> type\n-   list -> str[json]\n-   list -> list\n-   list -> tuple\n-   tuple -> str[json[list]]\n-   tuple -> list\n-   tuple -> tuple\n-   none -> str\n-   none -> bool\n-   none -> list\n-   none -> tuple\n-   str -> bool\n-   str -> datetime\n-   str -> dict\n-   str -> list\n-   str -> tuple\n-   str[int] -> float\n-   str[int] -> int\n-   str[float] -> float\n-   str[float] -> int\n-   str -> type\n-   str[iso8601] -> datetime\n-   str[iso8601] -> float\n-   str[unicode] -> any string conversions\n-   str[python] -> any string conversions\n\n**iso8601** a date string formatted to the iso8601 spec\n**json** a json encoded equivilent of the data\n**unicode** strings that get messed up with u' ex: \"[u'this',u'that']\"\n**python** strings that are weirdly single quoted ex: \"['photo', 2, 'pic', 'pics']\"\n\nInstallation\n------------\n\n`pip3 install morphit`\n\n`sudo -H pip3 install morphit`\n\nDeploy\n------------\n\n```sh\npython3 setup.py build       #Build:\npython setup.py coverage         #Test\npython3 setup.py install     #Install:\n```\n\nDeploy\n------------\n\n* Run tests as outlined above\n* Make sure you bump the version\n* Check venv is active\n\n\n```sh\necho \"__version__=1.x.y\" > ./morphit/version.py # where x and y are the next version\npython3 setup.py coverage && python3 setup.py sdist bdist_wheel\ntwine upload dist/*\n```\n\nDevelopment\n------------\n```sh\nvirtualenv --python=python3 venv\nsource ./venv/bin/activate\npython setup.py easy_install\npip install -r requirements-dev.txt\n```\n\nRoadmap\n------------\n\n- Custom exceptions for bad casting (int/list/tuple -> dict)\n- Add strict parameter that enables enforcement of keys and list/tuple length\n- Add default parameter that remplaces None or non existing values with a specified default\n- Add fallback parameter that accepts a value or a lambda function to replace the value\n\n\nCHANGELOG\n------------\n## 1.2.0\nAdded custom aggregators for processors to allow result merging without needing to update the chained partial object.\n- FIX: Coverage was broken due to the import of version in setup.py\n- FEATURE: Custom aggregators for Processor class\n\n## 1.1.0\nBreaking changes: removed `Template` class, types are now attached to `Processor`\n\n- FIX: 100% test coverage, all dead code eliminated\n- FIX: primitive to iterable casting\n- FEATURE: Removed & Replaced `Template` with `Processor` callable class\n- FEATURE: Added processor chaining `then` `flow`\n- FEATURE: Added lambda Processor original data & result parameters\n\n\nBUGS\n-----------\n\n\n\nContributing\n------------\n\nRead CONTRIBUTING\\_.\n\nMake a PR and I'll give it a look\n\nOdds are good / the goods are odd\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PseudoSky/morphit", "keywords": "serialize data schema transform parse parser parsing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "morphit", "package_url": "https://pypi.org/project/morphit/", "platform": "", "project_url": "https://pypi.org/project/morphit/", "project_urls": {"Homepage": "https://github.com/PseudoSky/morphit"}, "release_url": "https://pypi.org/project/morphit/1.2.0/", "requires_dist": ["multipledispatch (>=0.4.9)", "iso8601 (>=0.1.12)"], "requires_python": "", "summary": "makes shitty data more fit (a smarter serializer)", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MorPhit</h1>\n<h2>Usage</h2>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">morphit</span> <span class=\"kn\">import</span> <span class=\"n\">Parser</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Parser</span><span class=\"p\">([],</span> <span class=\"s1\">'[1,2,3]'</span><span class=\"p\">)</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p><code>pip install morphit</code></p>\n<p><code>sudo -H pip install morphit</code></p>\n<p>morphit is a no nonsense parser that takes a template for data and converts\nwhatever you feed it into whatever you want it to be.</p>\n<p>Do you have \"My data is fucked\"?\nIf you find yourself saying any of the following, you may to be entitled to financial compensation.</p>\n<ul>\n<li>WTF half of these are strings instead of <strong>insert type here</strong></li>\n<li>How do I even convert from <strong>insert type A</strong> to <strong>insert type B</strong></li>\n<li>I have so much bad data I'm going to have to manually fix</li>\n<li>I have hundreds of if conditions to fix weird data</li>\n<li>How the hell am I supposed to fix the type of all these nested objects</li>\n<li>You're telling me this float is supposed to be a date?...</li>\n<li>You're telling me that I cant put a datetime object anywhere?</li>\n<li>I don't know how any of these strings became numbers but...</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Processor chaining</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Processor</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"p\">([</span><span class=\"s2\">\"&lt;parser|lambda|func|obj&gt;\"</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Processor</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'date'</span><span class=\"p\">])</span>\n     <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"n\">Processor</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s1\">'Date'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s1\">'{\"date\": \"2018-01-31T06:17:45.547\"}'</span><span class=\"p\">)</span>\n\n<span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">547000</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>datetime serialization</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">547000</span><span class=\"p\">))</span>\n<span class=\"s2\">\"2018-01-31T06:17:45.547\"</span>\n</pre>\n<ul>\n<li>deep serialization of dicts</li>\n<li>supports custom serializers using methods/lambda functions</li>\n<li>templated parsers</li>\n<li>nested templated parsers</li>\n</ul>\n<h2>Supported Conversions</h2>\n<ul>\n<li>any -&gt; list</li>\n<li>any -&gt; object</li>\n<li>any -&gt; tuple</li>\n<li>any -&gt; type</li>\n<li>any -&gt; str</li>\n<li>dict -&gt; str[json]</li>\n<li>dict -&gt; dict</li>\n<li>dict -&gt; list</li>\n<li>dict -&gt; tuple</li>\n<li>datetime -&gt; str</li>\n<li>datetime -&gt; str[json]</li>\n<li>datetime -&gt; int</li>\n<li>datetime -&gt; float</li>\n<li>datetime.time -&gt; str</li>\n<li>datetime.date -&gt; str</li>\n<li>float -&gt; str</li>\n<li>float -&gt; float</li>\n<li>float -&gt; list</li>\n<li>float -&gt; tuple</li>\n<li>float -&gt; type</li>\n<li>float -&gt; datetime</li>\n<li>int -&gt; str</li>\n<li>int -&gt; int</li>\n<li>int -&gt; list</li>\n<li>int -&gt; tuple</li>\n<li>int -&gt; datetime</li>\n<li>int -&gt; type</li>\n<li>list -&gt; str[json]</li>\n<li>list -&gt; list</li>\n<li>list -&gt; tuple</li>\n<li>tuple -&gt; str[json[list]]</li>\n<li>tuple -&gt; list</li>\n<li>tuple -&gt; tuple</li>\n<li>none -&gt; str</li>\n<li>none -&gt; bool</li>\n<li>none -&gt; list</li>\n<li>none -&gt; tuple</li>\n<li>str -&gt; bool</li>\n<li>str -&gt; datetime</li>\n<li>str -&gt; dict</li>\n<li>str -&gt; list</li>\n<li>str -&gt; tuple</li>\n<li>str[int] -&gt; float</li>\n<li>str[int] -&gt; int</li>\n<li>str[float] -&gt; float</li>\n<li>str[float] -&gt; int</li>\n<li>str -&gt; type</li>\n<li>str[iso8601] -&gt; datetime</li>\n<li>str[iso8601] -&gt; float</li>\n<li>str[unicode] -&gt; any string conversions</li>\n<li>str[python] -&gt; any string conversions</li>\n</ul>\n<p><strong>iso8601</strong> a date string formatted to the iso8601 spec\n<strong>json</strong> a json encoded equivilent of the data\n<strong>unicode</strong> strings that get messed up with u' ex: \"[u'this',u'that']\"\n<strong>python</strong> strings that are weirdly single quoted ex: \"['photo', 2, 'pic', 'pics']\"</p>\n<h2>Installation</h2>\n<p><code>pip3 install morphit</code></p>\n<p><code>sudo -H pip3 install morphit</code></p>\n<h2>Deploy</h2>\n<pre>python3 setup.py build       <span class=\"c1\">#Build:</span>\npython setup.py coverage         <span class=\"c1\">#Test</span>\npython3 setup.py install     <span class=\"c1\">#Install:</span>\n</pre>\n<h2>Deploy</h2>\n<ul>\n<li>Run tests as outlined above</li>\n<li>Make sure you bump the version</li>\n<li>Check venv is active</li>\n</ul>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"__version__=1.x.y\"</span> &gt; ./morphit/version.py <span class=\"c1\"># where x and y are the next version</span>\npython3 setup.py coverage <span class=\"o\">&amp;&amp;</span> python3 setup.py sdist bdist_wheel\ntwine upload dist/*\n</pre>\n<h2>Development</h2>\n<pre>virtualenv --python<span class=\"o\">=</span>python3 venv\n<span class=\"nb\">source</span> ./venv/bin/activate\npython setup.py easy_install\npip install -r requirements-dev.txt\n</pre>\n<h2>Roadmap</h2>\n<ul>\n<li>Custom exceptions for bad casting (int/list/tuple -&gt; dict)</li>\n<li>Add strict parameter that enables enforcement of keys and list/tuple length</li>\n<li>Add default parameter that remplaces None or non existing values with a specified default</li>\n<li>Add fallback parameter that accepts a value or a lambda function to replace the value</li>\n</ul>\n<h2>CHANGELOG</h2>\n<h2>1.2.0</h2>\n<p>Added custom aggregators for processors to allow result merging without needing to update the chained partial object.</p>\n<ul>\n<li>FIX: Coverage was broken due to the import of version in setup.py</li>\n<li>FEATURE: Custom aggregators for Processor class</li>\n</ul>\n<h2>1.1.0</h2>\n<p>Breaking changes: removed <code>Template</code> class, types are now attached to <code>Processor</code></p>\n<ul>\n<li>FIX: 100% test coverage, all dead code eliminated</li>\n<li>FIX: primitive to iterable casting</li>\n<li>FEATURE: Removed &amp; Replaced <code>Template</code> with <code>Processor</code> callable class</li>\n<li>FEATURE: Added processor chaining <code>then</code> <code>flow</code></li>\n<li>FEATURE: Added lambda Processor original data &amp; result parameters</li>\n</ul>\n<h2>BUGS</h2>\n<h2>Contributing</h2>\n<p>Read CONTRIBUTING_.</p>\n<p>Make a PR and I'll give it a look</p>\n<p>Odds are good / the goods are odd</p>\n\n          </div>"}, "last_serial": 6392400, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "387506c23c51fc499933df306cf92dc4", "sha256": "02d72df50045fba9eff32ff7eb5d6f8b73f880d92d04f14b386db02b1c6e689e"}, "downloads": -1, "filename": "morphit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "387506c23c51fc499933df306cf92dc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4569, "upload_time": "2018-09-28T08:31:34", "upload_time_iso_8601": "2018-09-28T08:31:34.352583Z", "url": "https://files.pythonhosted.org/packages/a7/36/e0326826195a690f2dc5942592d7633475e8f32e11b869b60421d8ea09b9/morphit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46cdab4e9de445f99d1ff754760a3ebd", "sha256": "a658ba84338588bf117d6d234d1097b8e930b7dc2fd723f65673533b19e86541"}, "downloads": -1, "filename": "morphit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "46cdab4e9de445f99d1ff754760a3ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4985, "upload_time": "2018-09-28T08:31:35", "upload_time_iso_8601": "2018-09-28T08:31:35.559447Z", "url": "https://files.pythonhosted.org/packages/14/81/f2a5b413dc6864d0914a5c11d03ccfd266c6543020192d452cf55f64589e/morphit-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "dab315cd066a653ae510023ae9a488a7", "sha256": "2923096d6d41eec56163c6f88803d39ce8ae3f6a5310a1d4c1937e69ccdb638e"}, "downloads": -1, "filename": "morphit-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dab315cd066a653ae510023ae9a488a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4755, "upload_time": "2018-11-11T21:26:11", "upload_time_iso_8601": "2018-11-11T21:26:11.147437Z", "url": "https://files.pythonhosted.org/packages/55/66/7caa19f8bd476c5392073b8ca5dec8d5df97ad26c054b639f029050017c5/morphit-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a0ed8f26f04d5d1fadce2053733a098", "sha256": "924b393d5da09a589123082a6e7433e7cee6d34fd5cef01cbbae1b7a2de858b7"}, "downloads": -1, "filename": "morphit-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3a0ed8f26f04d5d1fadce2053733a098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5168, "upload_time": "2018-11-11T21:26:12", "upload_time_iso_8601": "2018-11-11T21:26:12.815147Z", "url": "https://files.pythonhosted.org/packages/c4/f7/4b1895239f84368393c85ba4a91c0b3e0a7b436dca4d930dd47b832df007/morphit-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "cf7eec2c4bd498f53ad25eb75c63897d", "sha256": "a8ffe63d9842b6327bf53380927ff9c33ad412967830ae51178f784f3213873b"}, "downloads": -1, "filename": "morphit-1.0.3-py3.7.egg", "has_sig": false, "md5_digest": "cf7eec2c4bd498f53ad25eb75c63897d", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 8222, "upload_time": "2019-12-05T18:52:29", "upload_time_iso_8601": "2019-12-05T18:52:29.143372Z", "url": "https://files.pythonhosted.org/packages/e4/29/b66ca4ce159933fc7c1bcd3dfce3bb6cd92925bf0d70e861bf4f14f4f184/morphit-1.0.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "705b1c1969faa2f7c2726d90e8280ae7", "sha256": "b7bf565445473d89d3e09e396dd8073508c517314e000d7cbdf899925e6178a5"}, "downloads": -1, "filename": "morphit-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "705b1c1969faa2f7c2726d90e8280ae7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4854, "upload_time": "2019-12-05T18:52:25", "upload_time_iso_8601": "2019-12-05T18:52:25.162864Z", "url": "https://files.pythonhosted.org/packages/5e/aa/0d97a6b3dea3f4e839b267d7cb2477a37f982587e55a608427ac11e8d793/morphit-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6a5c2650470fedbd3a4f8a32ba55f9b", "sha256": "d2ff4e66da85c98d8e861dc6f18787521ece9186cb135ce6d213d22f99714db3"}, "downloads": -1, "filename": "morphit-1.0.3.tar.gz", "has_sig": false, "md5_digest": "d6a5c2650470fedbd3a4f8a32ba55f9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5284, "upload_time": "2019-12-05T18:52:30", "upload_time_iso_8601": "2019-12-05T18:52:30.324848Z", "url": "https://files.pythonhosted.org/packages/25/fa/52e1621ad459d17518f1aadb581e3b82aca23decf563d675235d535cc07e/morphit-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "73d09f7a748e380b82dc730dd8ed0b89", "sha256": "267335eeb195bb2395e7bfc6730d183a4d4a5b4f2177deff412e4981f290dfcb"}, "downloads": -1, "filename": "morphit-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "73d09f7a748e380b82dc730dd8ed0b89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5213, "upload_time": "2019-12-07T07:06:30", "upload_time_iso_8601": "2019-12-07T07:06:30.209225Z", "url": "https://files.pythonhosted.org/packages/28/b5/abd49a2161dd3154ca1a38142a1b1ac61a4060f4f45c6219fe43d7885b0b/morphit-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "068fb0ff99c00664eecbd857e036c717", "sha256": "057a3e78704d7b9098a224cd28463b6a2bb5f72de5dcf41461b9036e2cff4f56"}, "downloads": -1, "filename": "morphit-1.0.4.tar.gz", "has_sig": false, "md5_digest": "068fb0ff99c00664eecbd857e036c717", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5607, "upload_time": "2019-12-07T07:06:34", "upload_time_iso_8601": "2019-12-07T07:06:34.381543Z", "url": "https://files.pythonhosted.org/packages/75/c7/370c37ed0c00b85fb6036a2d2f316c4416e24fc0ae0a8a0413f3a23d6dd9/morphit-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4a6f1d7f36c0b2a277dea2a793d901db", "sha256": "9e33bd053b76d2c801dbbdb56a1a7784e32baf58e4dfac09062cd8a620a0bee6"}, "downloads": -1, "filename": "morphit-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a6f1d7f36c0b2a277dea2a793d901db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5966, "upload_time": "2019-12-30T02:29:11", "upload_time_iso_8601": "2019-12-30T02:29:11.554893Z", "url": "https://files.pythonhosted.org/packages/48/61/f3e41e84d21204e885640612774d0f7fa5a11d1eb76fbea5758aa069a514/morphit-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "371cb7b6644cf52cc9164ae05b4c3a6e", "sha256": "327e3e8e0405e31b379cf1b2840b026efa313dc0605a6dc902a8b9c4a8118d66"}, "downloads": -1, "filename": "morphit-1.1.0.tar.gz", "has_sig": false, "md5_digest": "371cb7b6644cf52cc9164ae05b4c3a6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6220, "upload_time": "2019-12-30T02:29:14", "upload_time_iso_8601": "2019-12-30T02:29:14.640292Z", "url": "https://files.pythonhosted.org/packages/1b/6e/df2682bbd2f8135fcaad8c8f7f6dc8853bd57823ad4d9049ce1e67f13a4a/morphit-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "8c712a786b41c2feb9272b6a7ed532c2", "sha256": "03d55395d399442f804b9748807190cafedc096c614f141f5f97105f8adb8278"}, "downloads": -1, "filename": "morphit-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c712a786b41c2feb9272b6a7ed532c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7191, "upload_time": "2020-01-03T19:27:20", "upload_time_iso_8601": "2020-01-03T19:27:20.642432Z", "url": "https://files.pythonhosted.org/packages/17/4d/149bd61ab95b5acca4cf7aa5d793ac2b362a51ae5318476411eb9698da49/morphit-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "032529c9a51e34dfa99aa387147d7408", "sha256": "27bcf2822e9c7fc445ce1a9afe2947f108eb881e9f03874035293317b37064e1"}, "downloads": -1, "filename": "morphit-1.2.0.tar.gz", "has_sig": false, "md5_digest": "032529c9a51e34dfa99aa387147d7408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6672, "upload_time": "2020-01-03T19:27:22", "upload_time_iso_8601": "2020-01-03T19:27:22.071257Z", "url": "https://files.pythonhosted.org/packages/18/31/8e05a57e70cd35c743be1b88210eff99cb15c9875ac3d9fdf492cba0a583/morphit-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c712a786b41c2feb9272b6a7ed532c2", "sha256": "03d55395d399442f804b9748807190cafedc096c614f141f5f97105f8adb8278"}, "downloads": -1, "filename": "morphit-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c712a786b41c2feb9272b6a7ed532c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7191, "upload_time": "2020-01-03T19:27:20", "upload_time_iso_8601": "2020-01-03T19:27:20.642432Z", "url": "https://files.pythonhosted.org/packages/17/4d/149bd61ab95b5acca4cf7aa5d793ac2b362a51ae5318476411eb9698da49/morphit-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "032529c9a51e34dfa99aa387147d7408", "sha256": "27bcf2822e9c7fc445ce1a9afe2947f108eb881e9f03874035293317b37064e1"}, "downloads": -1, "filename": "morphit-1.2.0.tar.gz", "has_sig": false, "md5_digest": "032529c9a51e34dfa99aa387147d7408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6672, "upload_time": "2020-01-03T19:27:22", "upload_time_iso_8601": "2020-01-03T19:27:22.071257Z", "url": "https://files.pythonhosted.org/packages/18/31/8e05a57e70cd35c743be1b88210eff99cb15c9875ac3d9fdf492cba0a583/morphit-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:45 2020"}