{"info": {"author": "Michal Krenek (Mikos)", "author_email": "m.krenek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "SimpleSpectral\n==============\n\nHeavily simplified scipy.signal.spectral module which only depends on NumPy and supports pyFFTW\n\nRequirements\n------------\n\n- `Python 3 <https://www.python.org>`_\n- `NumPy <http://www.numpy.org>`_\n- Optional: `pyFFTW <https://github.com/pyFFTW/pyFFTW>`_ (for fastest FFT calculations with FFTW library)\n- Optional: `SciPy <https://www.scipy.org>`_ (for faster FFT calculations with scipy.fftpack library)\n\nSimpleSpectral preferably uses pyfftw for FFT calculations, then scipy.fftpack\nand numpy.fft as a last resort.\n\nYou should always install SciPy or pyFFTW, because numpy.fft has horrible\nmemory usage and is also much slower.\n\nDifferences\n-----------\n\nYou can use scipy.signal `tutorial <https://scipy.github.io/devdocs/tutorial/signal.html#spectral-analysis>`_\nand `reference guide <https://scipy.github.io/devdocs/signal.html#spectral-analysis>`_ in most cases,\nbut there are some important differences:\n\n- input data is assumed to be complex and two-sided spectrum is always returned (``return_onesided``\n  argument is not implemented)\n- length of FFT is always same as length of segment (``nfft`` argument is not implemented)\n- functions work always over last axis of array (``axis`` argument is not implemented)\n- if you want to have best FFT performance with pyFFTW, you should create arrays with\n  ``empty``, ``zeros`` or ``ones`` functions from SimpleSpectral instead of generic versions\n  from NumPy (arrays will be byte aligned for your CPU)\n\nImplemented functions:\n**********************\n\n- empty\n- zeros\n- ones\n- fft\n- get_window\n- get_detrend\n- extend_boundaries\n- welch\n- periodogram\n- spectrogram\n- stft\n\nSupported windows:\n******************\n\n- boxcar\n- hann\n- hamming\n- bartlett\n- blackman\n- kaiser\n- tukey\n\nSupported boundary extensions:\n******************************\n\n- even\n- odd\n- constant\n- zeros\n\nSupported detrending functions:\n*******************************\n\n- constant\n\nCredits\n-------\n\nBased on code from excellent `SciPy <https://www.scipy.org>`_ project.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xmikos/simplespectral", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SimpleSpectral", "package_url": "https://pypi.org/project/SimpleSpectral/", "platform": "", "project_url": "https://pypi.org/project/SimpleSpectral/", "project_urls": {"Homepage": "https://github.com/xmikos/simplespectral"}, "release_url": "https://pypi.org/project/SimpleSpectral/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Heavily simplified scipy.signal.spectral module which only depends on NumPy and supports pyFFTW", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Heavily simplified scipy.signal.spectral module which only depends on NumPy and supports pyFFTW</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python 3</a></li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">NumPy</a></li>\n<li>Optional: <a href=\"https://github.com/pyFFTW/pyFFTW\" rel=\"nofollow\">pyFFTW</a> (for fastest FFT calculations with FFTW library)</li>\n<li>Optional: <a href=\"https://www.scipy.org\" rel=\"nofollow\">SciPy</a> (for faster FFT calculations with scipy.fftpack library)</li>\n</ul>\n<p>SimpleSpectral preferably uses pyfftw for FFT calculations, then scipy.fftpack\nand numpy.fft as a last resort.</p>\n<p>You should always install SciPy or pyFFTW, because numpy.fft has horrible\nmemory usage and is also much slower.</p>\n</div>\n<div id=\"differences\">\n<h2>Differences</h2>\n<p>You can use scipy.signal <a href=\"https://scipy.github.io/devdocs/tutorial/signal.html#spectral-analysis\" rel=\"nofollow\">tutorial</a>\nand <a href=\"https://scipy.github.io/devdocs/signal.html#spectral-analysis\" rel=\"nofollow\">reference guide</a> in most cases,\nbut there are some important differences:</p>\n<ul>\n<li>input data is assumed to be complex and two-sided spectrum is always returned (<tt>return_onesided</tt>\nargument is not implemented)</li>\n<li>length of FFT is always same as length of segment (<tt>nfft</tt> argument is not implemented)</li>\n<li>functions work always over last axis of array (<tt>axis</tt> argument is not implemented)</li>\n<li>if you want to have best FFT performance with pyFFTW, you should create arrays with\n<tt>empty</tt>, <tt>zeros</tt> or <tt>ones</tt> functions from SimpleSpectral instead of generic versions\nfrom NumPy (arrays will be byte aligned for your CPU)</li>\n</ul>\n<div id=\"implemented-functions\">\n<h3>Implemented functions:</h3>\n<ul>\n<li>empty</li>\n<li>zeros</li>\n<li>ones</li>\n<li>fft</li>\n<li>get_window</li>\n<li>get_detrend</li>\n<li>extend_boundaries</li>\n<li>welch</li>\n<li>periodogram</li>\n<li>spectrogram</li>\n<li>stft</li>\n</ul>\n</div>\n<div id=\"supported-windows\">\n<h3>Supported windows:</h3>\n<ul>\n<li>boxcar</li>\n<li>hann</li>\n<li>hamming</li>\n<li>bartlett</li>\n<li>blackman</li>\n<li>kaiser</li>\n<li>tukey</li>\n</ul>\n</div>\n<div id=\"supported-boundary-extensions\">\n<h3>Supported boundary extensions:</h3>\n<ul>\n<li>even</li>\n<li>odd</li>\n<li>constant</li>\n<li>zeros</li>\n</ul>\n</div>\n<div id=\"supported-detrending-functions\">\n<h3>Supported detrending functions:</h3>\n<ul>\n<li>constant</li>\n</ul>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Based on code from excellent <a href=\"https://www.scipy.org\" rel=\"nofollow\">SciPy</a> project.</p>\n</div>\n\n          </div>"}, "last_serial": 2712484, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "28f191e200ea9f8bb7d15511f5000160", "sha256": "869326949870faed82bf21890603569e5c834a8599be5d55c38cb3b41bef0362"}, "downloads": -1, "filename": "SimpleSpectral-1.0.0.tar.gz", "has_sig": false, "md5_digest": "28f191e200ea9f8bb7d15511f5000160", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6116, "upload_time": "2017-03-17T13:02:12", "upload_time_iso_8601": "2017-03-17T13:02:12.985576Z", "url": "https://files.pythonhosted.org/packages/8d/ef/cf739f7ba571e336189a4a704b844ae08eaf3641a4eb0d24b2c04db3eea5/SimpleSpectral-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28f191e200ea9f8bb7d15511f5000160", "sha256": "869326949870faed82bf21890603569e5c834a8599be5d55c38cb3b41bef0362"}, "downloads": -1, "filename": "SimpleSpectral-1.0.0.tar.gz", "has_sig": false, "md5_digest": "28f191e200ea9f8bb7d15511f5000160", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6116, "upload_time": "2017-03-17T13:02:12", "upload_time_iso_8601": "2017-03-17T13:02:12.985576Z", "url": "https://files.pythonhosted.org/packages/8d/ef/cf739f7ba571e336189a4a704b844ae08eaf3641a4eb0d24b2c04db3eea5/SimpleSpectral-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:07 2020"}