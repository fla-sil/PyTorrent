{"info": {"author": "David Bothe", "author_email": "davbothe@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pagan\n=====\n\nWelcome to the Python avatar generator for absolute nerds.\n\n**Current version: 0.4.3**\n\nView changes [here](CHANGELOG.md).\n\nRemember those good old days when your own imagination was a big part of the\ncomputer gaming experience? All the limitations of the hardware forced you to\nfill the void left by poorly pixelated images by yourself. Well, pagan tries to\ngive back some of those nostalgic feelings by providing **identicons** in an\noldschool look that are inspired from retro roleplaying adventure games.\n\nEach string input will be hashed and a unique avatar image is generated. The purpose\nof pagan is to use it for generating a user image in any web application. It is\nis meant to replace default user images when creating new accounts or to enhance\ncomment sections, e.g. visualizing the author's IP address or username.\n\n**The software is currently under development and features the following functions:**\n\n* Process a given string to generate identicons with unique colors and gear.\n* The hash function can be chosen from the ones included in Python's hashlib.\n* Create the avatar image based on a given resolution.\n* Pagan will map all virtual 16x16 pixels to the real image size.\n* Expand pagan by adding new weapons or gear.\n* Enjoy the nostalgia!\n\n###Example avatars hashed with SHA512:\n\nInput  | Avatar\n------------- | -------------\npagan  | ![pagan](/images/pagan.png)\npython | ![python](/images/python.png)\navatar | ![avatar](/images/avatar.png)\ngithub | ![github](/images/github.png)\nretro | ![retro](/images/retro.png)\npiece of cake | ![piece of cake](/images/piece%20of%20cake.png)\nhash me if you can | ![hash me if you can](/images/hash%20me%20if%20you%20can.png)\n\n###Installation:\n\nClone this repository:\n```\n>> git clone https://github.com/daboth/pagan.git\n```\nand install manually:\n```\n>> python setup.py install\n```\nor install with pip:\n```\n>> pip install pagan\n```\n\n###Python usage example:\n```python\n# Import the pagan module.\nimport pagan\n\n# Acquire an arbitrary string.\ninpt = 'pagan'\n\n# Use pagan to generate the avatar object based on that input.\n# Optional: You can choose which hash function should be used.\n# The functions are available as constants.\n# Default: MD5.\nimg = pagan.Avatar(inpt, pagan.SHA512)\n\n# Open the avatar image in an\n# external image viewer.\nimg.show()\n\n# Set an output path and a file name.\n# You don't need to specify a file ending.\n# Choose a path depending on your OS.\noutpath = 'output/'\nfilename = inpt\n\n# Saves the avatar image as a .png file\n# by omitting the path and name. The\n# file endings will be generated automatically.\nimg.save(outpath, filename)\n\n# You can change the avatar input and\n# hash function anytime.\nimg.change('new input', pagan.SHA256)\n```\n\n###Command Line Interface\n\nWith the pagan command line interface you can generate avatars without writing python scripts.\n```\n>> pagan [-h] [--show] [--output OUTPUT] [--hash HASH] input [input ...]\n```\n\nSimply typing:\n```\n>> pagan hello\n```\nwill generate an avatar from the string 'hello' and save it in your current working directory. For more information,\nuse the help parameter.\n```\n>> pagan -h\n```\n\n###Webserver\n\nPagan can be run in a simple demo webserver application. To access the pagan demo, you need to run the script\nfrom the webserver directory. Beware: This is a demo application and it will fill your temp directory with pagan generated\nimage files. Do not run in production.\n```\n>> cd /tools/webserver/\n>> python webserver.py\n```\nThe webserver will serve on your localhost at port 8080. Open this adress in your browser window:\n```\nhttp://127.0.0.1:8080/\n```\n\n###Supported Hashes\n\nHash     | Constant\n-------- | --------\nmd5 | pagan.MD5\nsha1 | pagan.SHA1\nsha224 | pagan.SHA224\nsha256 | pagan.SHA256\nsha384 | pagan.SHA384\nsha512 | pagan.SHA512\n\n###Testing\n\nTo run the pagan tests, you need to install additional python modules. You can choose between pytest and tox. Configure\nthe tox.ini to test different python versions.\n\n####Using py.test\n\n```\n>> pip install pytest\n>> pytest\n```\n\n####Using tox\n\n```\n>> pip install tox\n>> tox\n```", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/daboth/pagan/tarball/0.4.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daboth/pagan", "keywords": "avatar,identicon,generator", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "pagan", "package_url": "https://pypi.org/project/pagan/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pagan/", "project_urls": {"Download": "https://github.com/daboth/pagan/tarball/0.4.3", "Homepage": "https://github.com/daboth/pagan"}, "release_url": "https://pypi.org/project/pagan/0.4.3/", "requires_dist": null, "requires_python": null, "summary": "python avatar generator for absolute nerds", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            pagan<br>=====<br><br>Welcome to the Python avatar generator for absolute nerds.<br><br>**Current version: 0.4.3**<br><br>View changes [here](CHANGELOG.md).<br><br>Remember those good old days when your own imagination was a big part of the<br>computer gaming experience? All the limitations of the hardware forced you to<br>fill the void left by poorly pixelated images by yourself. Well, pagan tries to<br>give back some of those nostalgic feelings by providing **identicons** in an<br>oldschool look that are inspired from retro roleplaying adventure games.<br><br>Each string input will be hashed and a unique avatar image is generated. The purpose<br>of pagan is to use it for generating a user image in any web application. It is<br>is meant to replace default user images when creating new accounts or to enhance<br>comment sections, e.g. visualizing the author's IP address or username.<br><br>**The software is currently under development and features the following functions:**<br><br>* Process a given string to generate identicons with unique colors and gear.<br>* The hash function can be chosen from the ones included in Python's hashlib.<br>* Create the avatar image based on a given resolution.<br>* Pagan will map all virtual 16x16 pixels to the real image size.<br>* Expand pagan by adding new weapons or gear.<br>* Enjoy the nostalgia!<br><br>###Example avatars hashed with SHA512:<br><br>Input  | Avatar<br>------------- | -------------<br>pagan  | ![pagan](/images/pagan.png)<br>python | ![python](/images/python.png)<br>avatar | ![avatar](/images/avatar.png)<br>github | ![github](/images/github.png)<br>retro | ![retro](/images/retro.png)<br>piece of cake | ![piece of cake](/images/piece%20of%20cake.png)<br>hash me if you can | ![hash me if you can](/images/hash%20me%20if%20you%20can.png)<br><br>###Installation:<br><br>Clone this repository:<br>```<br>&gt;&gt; git clone https://github.com/daboth/pagan.git<br>```<br>and install manually:<br>```<br>&gt;&gt; python setup.py install<br>```<br>or install with pip:<br>```<br>&gt;&gt; pip install pagan<br>```<br><br>###Python usage example:<br>```python<br># Import the pagan module.<br>import pagan<br><br># Acquire an arbitrary string.<br>inpt = 'pagan'<br><br># Use pagan to generate the avatar object based on that input.<br># Optional: You can choose which hash function should be used.<br># The functions are available as constants.<br># Default: MD5.<br>img = pagan.Avatar(inpt, pagan.SHA512)<br><br># Open the avatar image in an<br># external image viewer.<br>img.show()<br><br># Set an output path and a file name.<br># You don't need to specify a file ending.<br># Choose a path depending on your OS.<br>outpath = 'output/'<br>filename = inpt<br><br># Saves the avatar image as a .png file<br># by omitting the path and name. The<br># file endings will be generated automatically.<br>img.save(outpath, filename)<br><br># You can change the avatar input and<br># hash function anytime.<br>img.change('new input', pagan.SHA256)<br>```<br><br>###Command Line Interface<br><br>With the pagan command line interface you can generate avatars without writing python scripts.<br>```<br>&gt;&gt; pagan [-h] [--show] [--output OUTPUT] [--hash HASH] input [input ...]<br>```<br><br>Simply typing:<br>```<br>&gt;&gt; pagan hello<br>```<br>will generate an avatar from the string 'hello' and save it in your current working directory. For more information,<br>use the help parameter.<br>```<br>&gt;&gt; pagan -h<br>```<br><br>###Webserver<br><br>Pagan can be run in a simple demo webserver application. To access the pagan demo, you need to run the script<br>from the webserver directory. Beware: This is a demo application and it will fill your temp directory with pagan generated<br>image files. Do not run in production.<br>```<br>&gt;&gt; cd /tools/webserver/<br>&gt;&gt; python webserver.py<br>```<br>The webserver will serve on your localhost at port 8080. Open this adress in your browser window:<br>```<br>http://127.0.0.1:8080/<br>```<br><br>###Supported Hashes<br><br>Hash     | Constant<br>-------- | --------<br>md5 | pagan.MD5<br>sha1 | pagan.SHA1<br>sha224 | pagan.SHA224<br>sha256 | pagan.SHA256<br>sha384 | pagan.SHA384<br>sha512 | pagan.SHA512<br><br>###Testing<br><br>To run the pagan tests, you need to install additional python modules. You can choose between pytest and tox. Configure<br>the tox.ini to test different python versions.<br><br>####Using py.test<br><br>```<br>&gt;&gt; pip install pytest<br>&gt;&gt; pytest<br>```<br><br>####Using tox<br><br>```<br>&gt;&gt; pip install tox<br>&gt;&gt; tox<br>```\n          </div>"}, "last_serial": 2410574, "releases": {"0.0.1": [], "0.3.2": [{"comment_text": "", "digests": {"md5": "46e16a6c9cafd90fd0ef6031aa0672fb", "sha256": "9794180a48cd7ab6d62aeb445af57db80d520d938c724356094292281b46cce0"}, "downloads": -1, "filename": "pagan-0.3.2.tar.gz", "has_sig": false, "md5_digest": "46e16a6c9cafd90fd0ef6031aa0672fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19069, "upload_time": "2016-10-04T13:44:40", "upload_time_iso_8601": "2016-10-04T13:44:40.715036Z", "url": "https://files.pythonhosted.org/packages/9c/23/435a9cfae29a0f7b365bbb0c298bd061658353b692cc65d73a6951055f6c/pagan-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "c73d2370745c44f6be8ec08bd0b9e09f", "sha256": "8415b6821c52f2c9ec7bb9c1cf7c803177c3e6c0961b5cd1758df168256eaa9d"}, "downloads": -1, "filename": "pagan-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c73d2370745c44f6be8ec08bd0b9e09f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19289, "upload_time": "2016-10-04T15:32:05", "upload_time_iso_8601": "2016-10-04T15:32:05.969324Z", "url": "https://files.pythonhosted.org/packages/f3/b7/c05b5ebdbf67ee336e710c8f5105fbd86043f02fbb79499560b5f8e77b5c/pagan-0.3.3.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "06eb6a661330cf0c8fcb47c67d12a84b", "sha256": "9b8a5afcc31297a93b13bdc307751b8163cf2dea1abb1b423a15c184592f0c82"}, "downloads": -1, "filename": "pagan-0.4.3.tar.gz", "has_sig": false, "md5_digest": "06eb6a661330cf0c8fcb47c67d12a84b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21791, "upload_time": "2016-10-19T13:52:09", "upload_time_iso_8601": "2016-10-19T13:52:09.158505Z", "url": "https://files.pythonhosted.org/packages/29/fd/3ab414cf529ee2e0d926d66f8eb37727c8a4face4fdb0b3f486b8bf6d94a/pagan-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06eb6a661330cf0c8fcb47c67d12a84b", "sha256": "9b8a5afcc31297a93b13bdc307751b8163cf2dea1abb1b423a15c184592f0c82"}, "downloads": -1, "filename": "pagan-0.4.3.tar.gz", "has_sig": false, "md5_digest": "06eb6a661330cf0c8fcb47c67d12a84b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21791, "upload_time": "2016-10-19T13:52:09", "upload_time_iso_8601": "2016-10-19T13:52:09.158505Z", "url": "https://files.pythonhosted.org/packages/29/fd/3ab414cf529ee2e0d926d66f8eb37727c8a4face4fdb0b3f486b8bf6d94a/pagan-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:54 2020"}