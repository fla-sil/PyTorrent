{"info": {"author": "Ra Systems", "author_email": "ramez@rasystems.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": ".. image:: https://img.shields.io/pypi/v/django-slick-reporting.svg\n    :target: https://pypi.org/project/django-slick-reproting\n\n.. image:: https://img.shields.io/pypi/pyversions/django-slick-reporting.svg\n    :target: https://pypi.org/project/django-slick-reporting\n\n.. image:: https://img.shields.io/readthedocs/django-slick-reporting\n    :target: https://django-slick-reporting.readthedocs.io/\n\n.. image:: https://api.travis-ci.org/ra-systems/django-slick-reporting.svg?branch=master\n    :target: https://travis-ci.org/ra-systems/django-slick-reporting\n\n.. image:: https://img.shields.io/codecov/c/github/ra-systems/django-slick-reporting\n    :target: https://codecov.io/gh/ra-systems/django-slick-reporting\n\n\n\n\nDjango Slick Reporting\n======================\n\nA one stop reports engine with batteries included.\n\nWhat it does:\n-------------\n\nGiven a model that contains some data *(ex: an OrderLine Model)*; Slick Reporting allows you to compute any kind of stats\n(Sum, AVG, etc.. ) over any field using simple and intuitive analogy.\nIt also allow you to use those computation units in a time series and cross tab.\n\nFeatures\n--------\n\n- Create Simple, Grouped, Time series and Crosstab reports.. effortlessly in a handful of code lines.\n- Create your Custom Calculation easily, which will be integrated with the above reports kinds\n- Optimized for speed.\n- Batteries included! Charts.js , DataTable.net & a Bootstrap form.\n\nInstallation\n------------\n\nUse the package manager `pip <https://pip.pypa.io/en/stable/>`_ to install django-slick-reporting.\n\n.. code-block:: console\n\n        pip install django-slick-reporting\n\n\nUsage\n-----\n\n**From high Level**,\n\nYou can use ``SampleReportView`` which is a subclass of ``django.views.generic.FormView`` like this\n\n.. code-block:: python\n\n    # in views.py\n    from slick_reporting.views import SampleReportView\n    from .models import MySalesItems\n\n    class TotalProductSales(SampleReportView):\n\n        # The model where you have the data\n        report_model = MySalesItems\n\n        # the main date to use if date filter is needed\n        date_field = 'date_placed' # or 'order__date_placed'\n        # date_field support traversing,\n        # date_field = 'order__date_placed'\n\n        # A foreign key to group calculation on\n        group_by = 'product'\n\n        # The columns you want to display\n        columns = ['title', '__total_quantity__', '__total__']\n\n    # in your urls.py\n    path('url-to-report', TotalProductSales.as_view())\n\nThis will return a page, with a table looking like\n\n+-----------+----------------+-------------+\n| Product   | Total Quantity | Total Value |\n+-----------+----------------+-------------+\n| Product 1 | 8              | 120         |\n+-----------+----------------+-------------+\n| Product 2 | 13             | 240         |\n+-----------+----------------+-------------+\n\nYou can also do a monthly time series :\n\n\n.. code-block:: python\n\n    # in views.py\n    from slick_reporting.views import SampleReportView\n    from .models import MySalesItems\n\n    class MonthlyProductSales(SampleReportView):\n        report_model = MySalesItems\n        date_field = 'date_placed'\n        group_by = 'product'\n        columns = ['name', 'sku']\n\n        # Analogy for time series\n        time_series_pattern = 'monthly'\n        time_series_columns = ['__total_quantity__']\n\n\nhook it into your ``urls.py`` , and it would return a page with a table looking something like this:\n\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product Name | SKU                  | Total Quantity  | Total Quantity | Total Quantity in ... | Total Quantity in December 20 |\n|              |                      | in Jan 20       | in Feb 20      |                       |                               |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 1    | <from product model> | 10              | 15             | ...                   | 14                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 2    | <from product model> | 11              | 12             | ...                   | 12                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n| Product 3    | <from product model> | 17              | 12             | ...                   | 17                            |\n+--------------+----------------------+-----------------+----------------+-----------------------+-------------------------------+\n\n*This example code assumes your \"MySalesItems\" model contains the fields `product` as foreign key,  `quantity` as number and `date_placed` as a date field. It also assumes your `Product` model has an SKU field.. Change those to better suit your structure.*\n--\n\n**On a low level**\n\nYou can interact with the `ReportGenerator` using same syntax as used with the `SampleReportView` .\n\n.. code-block:: python\n\n    from slick_reporting.generator import ReportGenerator\n    from . models import MySalesModel\n\n    report = ReportGenerator(report_model=MySalesModel,\n                            group_by='product',\n                            columns=['title', '__total__']\n    )\n    report.get_report_data() #-> [{'title':'Product 1', '__total__: 56}, {'title':'Product 2', '__total__: 43}, ]\n\n\nThis is just a scratch, for more please visit the documentation \n\nBatteries Included\n------------------\n\nSlick Reporting comes with\n\n* A Bootstrap Filter Form\n* Charting support `Charts.js <https://www.chartjs.org/>`_\n* Powerful tables `datatables.net <https://datatables.net/>`_\n\nA Preview:\n\n.. image:: https://i.ibb.co/SvxTM23/Selection-294.png\n    :target: https://i.ibb.co/SvxTM23/Selection-294.png\n    :alt: Shipped in View Page\n\n\nDocumentation\n-------------\n\nAvailable on `Read The Docs <https://django-slick-reporting.readthedocs.io/en/latest/>`_\n\n\n\nRunning tests\n-----------------\nCreate a virtual environment (maybe with `virtual slick_reports_test`), activate it; Then ,\n \n.. code-block:: console\n    \n    $ git clone git+git@github.com:ra-systems/django-slick-reporting.git\n    $ cd tests\n    $ python -m pip install -e ..\n\n    $ python runtests.py\n    #     Or for Coverage report\n    $ coverage run --include=../* runtests.py [-k]\n    $ coverage html\n\n\nContributing\n------------\nThis project is young and can use your support.\nPlease consider star the project to keep an eye on it, and your PR, review are most welcome and needed.\n\nFor the guideline, `Django's guidelines <https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/>`_ should do the job.\n\n\nAuthors\n--------\n\n* **Ramez Ashraf** - *Initial work* - `RamezIssac <https://github.com/RamezIssac>`_", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ra-systems/django-slick-reporting", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-slick-reporting", "package_url": "https://pypi.org/project/django-slick-reporting/", "platform": "", "project_url": "https://pypi.org/project/django-slick-reporting/", "project_urls": {"Documentation": "https://django-slick-reporting.readthedocs.io/en/latest/", "Homepage": "https://github.com/ra-systems/django-slick-reporting", "Source": "https://github.com/ra-systems/django-slick-reporting", "Travis CI": "https://travis-ci.org/ra-systems/django-slick-reporting/"}, "release_url": "https://pypi.org/project/django-slick-reporting/0.2.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A one-stop report adn analytics generation and computation with batteries included", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/django-slick-reproting\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-slick-reporting.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd9d85d5cceec8e1934c9a6ca3574ac319e7cc60/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d736c69636b2d7265706f7274696e672e737667\"></a>\n<a href=\"https://pypi.org/project/django-slick-reporting\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/django-slick-reporting.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1abb538ae89ed8f7155c02bd4e7dc5045c5ea9e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d736c69636b2d7265706f7274696e672e737667\"></a>\n<a href=\"https://django-slick-reporting.readthedocs.io/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/readthedocs/django-slick-reporting\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/477095e8db922f00b523940367b2f00e0404c672/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f646a616e676f2d736c69636b2d7265706f7274696e67\"></a>\n<a href=\"https://travis-ci.org/ra-systems/django-slick-reporting\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/ra-systems/django-slick-reporting.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d2fe8a720d62f9c017c4b70b6514a73c12e135f/68747470733a2f2f6170692e7472617669732d63692e6f72672f72612d73797374656d732f646a616e676f2d736c69636b2d7265706f7274696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ra-systems/django-slick-reporting\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/ra-systems/django-slick-reporting\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8758903b010b93376313a4389e082d6093caa6eb/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f72612d73797374656d732f646a616e676f2d736c69636b2d7265706f7274696e67\"></a>\n<div id=\"django-slick-reporting\">\n<h2>Django Slick Reporting</h2>\n<p>A one stop reports engine with batteries included.</p>\n<div id=\"what-it-does\">\n<h3>What it does:</h3>\n<p>Given a model that contains some data <em>(ex: an OrderLine Model)</em>; Slick Reporting allows you to compute any kind of stats\n(Sum, AVG, etc.. ) over any field using simple and intuitive analogy.\nIt also allow you to use those computation units in a time series and cross tab.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Create Simple, Grouped, Time series and Crosstab reports.. effortlessly in a handful of code lines.</li>\n<li>Create your Custom Calculation easily, which will be integrated with the above reports kinds</li>\n<li>Optimized for speed.</li>\n<li>Batteries included! Charts.js , DataTable.net &amp; a Bootstrap form.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install django-slick-reporting.</p>\n<pre><span class=\"go\">pip install django-slick-reporting</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><strong>From high Level</strong>,</p>\n<p>You can use <tt>SampleReportView</tt> which is a subclass of <tt>django.views.generic.FormView</tt> like this</p>\n<pre><span class=\"c1\"># in views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slick_reporting.views</span> <span class=\"kn\">import</span> <span class=\"n\">SampleReportView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">MySalesItems</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TotalProductSales</span><span class=\"p\">(</span><span class=\"n\">SampleReportView</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># The model where you have the data</span>\n    <span class=\"n\">report_model</span> <span class=\"o\">=</span> <span class=\"n\">MySalesItems</span>\n\n    <span class=\"c1\"># the main date to use if date filter is needed</span>\n    <span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s1\">'date_placed'</span> <span class=\"c1\"># or 'order__date_placed'</span>\n    <span class=\"c1\"># date_field support traversing,</span>\n    <span class=\"c1\"># date_field = 'order__date_placed'</span>\n\n    <span class=\"c1\"># A foreign key to group calculation on</span>\n    <span class=\"n\">group_by</span> <span class=\"o\">=</span> <span class=\"s1\">'product'</span>\n\n    <span class=\"c1\"># The columns you want to display</span>\n    <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'__total_quantity__'</span><span class=\"p\">,</span> <span class=\"s1\">'__total__'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># in your urls.py</span>\n<span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'url-to-report'</span><span class=\"p\">,</span> <span class=\"n\">TotalProductSales</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">())</span>\n</pre>\n<p>This will return a page, with a table looking like</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Product</td>\n<td>Total Quantity</td>\n<td>Total Value</td>\n</tr>\n<tr><td>Product 1</td>\n<td>8</td>\n<td>120</td>\n</tr>\n<tr><td>Product 2</td>\n<td>13</td>\n<td>240</td>\n</tr>\n</tbody>\n</table>\n<p>You can also do a monthly time series :</p>\n<pre><span class=\"c1\"># in views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">slick_reporting.views</span> <span class=\"kn\">import</span> <span class=\"n\">SampleReportView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">MySalesItems</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonthlyProductSales</span><span class=\"p\">(</span><span class=\"n\">SampleReportView</span><span class=\"p\">):</span>\n    <span class=\"n\">report_model</span> <span class=\"o\">=</span> <span class=\"n\">MySalesItems</span>\n    <span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s1\">'date_placed'</span>\n    <span class=\"n\">group_by</span> <span class=\"o\">=</span> <span class=\"s1\">'product'</span>\n    <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'sku'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Analogy for time series</span>\n    <span class=\"n\">time_series_pattern</span> <span class=\"o\">=</span> <span class=\"s1\">'monthly'</span>\n    <span class=\"n\">time_series_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'__total_quantity__'</span><span class=\"p\">]</span>\n</pre>\n<p>hook it into your <tt>urls.py</tt> , and it would return a page with a table looking something like this:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Product Name</td>\n<td>SKU</td>\n<td>Total Quantity\nin Jan 20</td>\n<td>Total Quantity\nin Feb 20</td>\n<td>Total Quantity in \u2026</td>\n<td>Total Quantity in December 20</td>\n</tr>\n<tr><td>Product 1</td>\n<td>&lt;from product model&gt;</td>\n<td>10</td>\n<td>15</td>\n<td>\u2026</td>\n<td>14</td>\n</tr>\n<tr><td>Product 2</td>\n<td>&lt;from product model&gt;</td>\n<td>11</td>\n<td>12</td>\n<td>\u2026</td>\n<td>12</td>\n</tr>\n<tr><td>Product 3</td>\n<td>&lt;from product model&gt;</td>\n<td>17</td>\n<td>12</td>\n<td>\u2026</td>\n<td>17</td>\n</tr>\n</tbody>\n</table>\n<p><em>This example code assumes your \u201cMySalesItems\u201d model contains the fields `product` as foreign key,  `quantity` as number and `date_placed` as a date field. It also assumes your `Product` model has an SKU field.. Change those to better suit your structure.</em>\n\u2013</p>\n<p><strong>On a low level</strong></p>\n<p>You can interact with the <cite>ReportGenerator</cite> using same syntax as used with the <cite>SampleReportView</cite> .</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">slick_reporting.generator</span> <span class=\"kn\">import</span> <span class=\"n\">ReportGenerator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"n\">models</span> <span class=\"kn\">import</span> <span class=\"nn\">MySalesModel</span>\n\n<span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">ReportGenerator</span><span class=\"p\">(</span><span class=\"n\">report_model</span><span class=\"o\">=</span><span class=\"n\">MySalesModel</span><span class=\"p\">,</span>\n                        <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"s1\">'product'</span><span class=\"p\">,</span>\n                        <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'__total__'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">get_report_data</span><span class=\"p\">()</span> <span class=\"c1\">#-&gt; [{'title':'Product 1', '__total__: 56}, {'title':'Product 2', '__total__: 43}, ]</span>\n</pre>\n<p>This is just a scratch, for more please visit the documentation</p>\n</div>\n<div id=\"batteries-included\">\n<h3>Batteries Included</h3>\n<p>Slick Reporting comes with</p>\n<ul>\n<li>A Bootstrap Filter Form</li>\n<li>Charting support <a href=\"https://www.chartjs.org/\" rel=\"nofollow\">Charts.js</a></li>\n<li>Powerful tables <a href=\"https://datatables.net/\" rel=\"nofollow\">datatables.net</a></li>\n</ul>\n<p>A Preview:</p>\n<a href=\"https://i.ibb.co/SvxTM23/Selection-294.png\" rel=\"nofollow\"><img alt=\"Shipped in View Page\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97b717e05493544e2fbb1c2f40df2f9e648c36c9/68747470733a2f2f692e6962622e636f2f537678544d32332f53656c656374696f6e2d3239342e706e67\"></a>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>Available on <a href=\"https://django-slick-reporting.readthedocs.io/en/latest/\" rel=\"nofollow\">Read The Docs</a></p>\n</div>\n<div id=\"running-tests\">\n<h3>Running tests</h3>\n<p>Create a virtual environment (maybe with <cite>virtual slick_reports_test</cite>), activate it; Then ,</p>\n<pre><span class=\"gp\">$</span> git clone git+git@github.com:ra-systems/django-slick-reporting.git\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> tests\n<span class=\"gp\">$</span> python -m pip install -e ..\n<span class=\"go\">\n</span><span class=\"gp\">$</span> python runtests.py\n<span class=\"gp\">#</span>     Or <span class=\"k\">for</span> Coverage report\n<span class=\"gp\">$</span> coverage run --include<span class=\"o\">=</span>../* runtests.py <span class=\"o\">[</span>-k<span class=\"o\">]</span>\n<span class=\"gp\">$</span> coverage html\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>This project is young and can use your support.\nPlease consider star the project to keep an eye on it, and your PR, review are most welcome and needed.</p>\n<p>For the guideline, <a href=\"https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/\" rel=\"nofollow\">Django\u2019s guidelines</a> should do the job.</p>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<ul>\n<li><strong>Ramez Ashraf</strong> - <em>Initial work</em> - <a href=\"https://github.com/RamezIssac\" rel=\"nofollow\">RamezIssac</a></li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7103542, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c69da9860cd705c655813e7a14a693a8", "sha256": "e34b7b3c791d71d5fb6d2656d7c079ea4bf4c3fbec16221f09a9bc305de0fa82"}, "downloads": -1, "filename": "django-slick-reporting-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c69da9860cd705c655813e7a14a693a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28820, "upload_time": "2020-04-23T17:15:01", "upload_time_iso_8601": "2020-04-23T17:15:01.899634Z", "url": "https://files.pythonhosted.org/packages/98/ae/86440657140deb8248a24e8726e5ef38c0850fb62940747dc36e1d0a9c3c/django-slick-reporting-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0db3c05ac9d70de5883ccb5c060d8ff1", "sha256": "5c4f13f5dcdfc364f9d9951e9dd0d4494207b574a8c838b437aa50357a092a7c"}, "downloads": -1, "filename": "django-slick-reporting-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0db3c05ac9d70de5883ccb5c060d8ff1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19838, "upload_time": "2020-04-24T07:57:01", "upload_time_iso_8601": "2020-04-24T07:57:01.122311Z", "url": "https://files.pythonhosted.org/packages/d8/83/d2a001f785e40af75b6be2b77f46bfa285c88f626a040bc633d924ef89c2/django-slick-reporting-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "13379e12aa314f4b646c5f0071e48c22", "sha256": "a9e169f17ecfaafcdef91de208db66555efa5f4826a06d090fe08529a93d66fa"}, "downloads": -1, "filename": "django-slick-reporting-0.1.2.tar.gz", "has_sig": false, "md5_digest": "13379e12aa314f4b646c5f0071e48c22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19832, "upload_time": "2020-04-24T08:03:25", "upload_time_iso_8601": "2020-04-24T08:03:25.382375Z", "url": "https://files.pythonhosted.org/packages/d2/01/e7f445dac096d61a6c9eab1a4ebc5b1166e3339dcf1feefa10073edf294c/django-slick-reporting-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fd21e6a19038f89aa8f3c3f920b24440", "sha256": "5180b9b44a4bf15a2dd82af381e02f9bf016e835a3af741392c9d391349a0b88"}, "downloads": -1, "filename": "django-slick-reporting-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fd21e6a19038f89aa8f3c3f920b24440", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19725, "upload_time": "2020-04-24T08:10:52", "upload_time_iso_8601": "2020-04-24T08:10:52.489666Z", "url": "https://files.pythonhosted.org/packages/32/41/59e4395a5b95881ec048c5494d739d9a4f0d4047ed733f6dc8056fec4d13/django-slick-reporting-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "14f757c469561acfc5ab2f99858332e2", "sha256": "56d50d5cd9fac7f2d2592e09aacb2ff03b1c761f3ffc7cd13ddf4d09801b7a3a"}, "downloads": -1, "filename": "django-slick-reporting-0.1.4.tar.gz", "has_sig": false, "md5_digest": "14f757c469561acfc5ab2f99858332e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22263, "upload_time": "2020-04-25T18:37:34", "upload_time_iso_8601": "2020-04-25T18:37:34.557472Z", "url": "https://files.pythonhosted.org/packages/6a/4c/0323c4283c055fab2323839d830389f2fd7fb4d699b39ed3670e08703b07/django-slick-reporting-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "5fc307f561cbe1a0379c25b61120d91b", "sha256": "05981cf8dd2a0b007a5d96123f21e50673f58e677ec1ccf90ccf101ee680a77b"}, "downloads": -1, "filename": "django-slick-reporting-0.1.5.tar.gz", "has_sig": false, "md5_digest": "5fc307f561cbe1a0379c25b61120d91b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22362, "upload_time": "2020-04-25T19:09:11", "upload_time_iso_8601": "2020-04-25T19:09:11.330577Z", "url": "https://files.pythonhosted.org/packages/ea/a5/7b1b879654b38dcd7dad9f6f2bc5e2af1d3938b9dd842b0235406b9a71b5/django-slick-reporting-0.1.5.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "72b9b1b78cfb30a18d8d91511ab330e6", "sha256": "1a93642518664824a3f3cb451575a590a136c544852b1ea5f573af3ed9aecbf0"}, "downloads": -1, "filename": "django-slick-reporting-0.2.1.tar.gz", "has_sig": false, "md5_digest": "72b9b1b78cfb30a18d8d91511ab330e6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23056, "upload_time": "2020-04-25T23:40:00", "upload_time_iso_8601": "2020-04-25T23:40:00.040156Z", "url": "https://files.pythonhosted.org/packages/1c/28/a2e7ccf0af8419f4dfce4360ab86dcbecd13d170cad07c30992fca23c783/django-slick-reporting-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "5d365777f0fe8f21173b9aeb1d4fb672", "sha256": "fb7658192dcc300b4b0e641a03ea2de392a01e875d255dce6d7678c2fae1e86c"}, "downloads": -1, "filename": "django-slick-reporting-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5d365777f0fe8f21173b9aeb1d4fb672", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23073, "upload_time": "2020-04-26T08:13:44", "upload_time_iso_8601": "2020-04-26T08:13:44.797605Z", "url": "https://files.pythonhosted.org/packages/be/35/65ae277991b998862f1bfd4db1be0e3eeecdfee597991c48e622fc9de623/django-slick-reporting-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d365777f0fe8f21173b9aeb1d4fb672", "sha256": "fb7658192dcc300b4b0e641a03ea2de392a01e875d255dce6d7678c2fae1e86c"}, "downloads": -1, "filename": "django-slick-reporting-0.2.2.tar.gz", "has_sig": false, "md5_digest": "5d365777f0fe8f21173b9aeb1d4fb672", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23073, "upload_time": "2020-04-26T08:13:44", "upload_time_iso_8601": "2020-04-26T08:13:44.797605Z", "url": "https://files.pythonhosted.org/packages/be/35/65ae277991b998862f1bfd4db1be0e3eeecdfee597991c48e622fc9de623/django-slick-reporting-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:13 2020"}