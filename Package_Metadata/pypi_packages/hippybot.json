{"info": {"author": "Wes Mason", "author_email": "wes[at]1stvamp[dot]org", "bugtrack_url": null, "classifiers": [], "description": "Introduction\n============\n\nHippyBot is a Hipchat.com chatroom bot written in Python. It is technically just a Jabber/XMPP bot, but it has customised features for connecting to and working on Hipchat.\n\nHippyBot includes a simple plugin API for adding commands.\n\nInstallation\n============\n\nThere a few ways you can install Hippybot:\n\nDownload and install with ``setup.py``::\n\n    python setup.py install\n\nInstall from PyPi::\n\n    pip install hippybot\n    # or using setuptools\n    easy_install hippybot\n\nConfiguration\n=============\n\nThere is an example configuration file distributed with HippyBot called ``hippybot.conf.example``, copy this and edit it. You will need to add an account to your Hipchat group for the bot to connect as. While logged in as the account go to the `XMPP <https://boxedice.hipchat.com/account/xmpp>`_ settings page to get the details you'll need to edit the config file.\n\nUsage\n=====\n\nRun HippyBot from a terminal like so::\n\n    hippybot -c path/to/your/config/file.conf\n\nTo run as a background daemon use ``-d`` or ``-daemon``::\n\n    hippybot -c path/to/your/config/file.conf -d\n\nOptionally you can provide a path to a PID file to use with ``-p`` or ``--pid``.\n**Note**: at present you will have to provide your own control script, e.g. for use with ``init.d`` or ``upstart``.\n\nYou should see the bot join any channels listed in the config file. You can then target the bot with commands using the at-sign notation, e.g.::\n\n    @botname rot13 hello world\n\nIf you have the ``rot13`` example plugin set to load (via the plugins section of the config file) then the bot will reply to you using at-sign notation with a ROT13'd (each character offset by 13) version of the text \"hello world\".\n\nThe bot has 2 inbuilt commands:\n\n * ``load_plugins``: this will reload any updated plugins (note it will also reset the internal state of any loaded plugins, e.g. the counter in the *mexican wave* plugin). Note it **does not** reload the bot's configuration file and so will not load new plugins.\n * ``reload``: this will reload the bot itself, reloading the configuration file, reconnecting to HipChat and reloading any plugins, in the process. Note: it does not end the main process, you would have to do that yourself from the terminal (for example if HippyBot were updated).\n\nPlugins\n=======\n\nThere are 3 plugins currently distributed with HippyBot:\n\n * ``rot13``: this is mostly included as an example, it ROT13s, any text spoken directly to the bot, back at the speaker.\n * ``mexican_wave``: this is a fun plugin that completes a mexican wave if 2 people in a row say ``\\o/`` in a channel, e.g.::\n\n    John Smith: \\o/\n    Joe Bloggs: \\o/\n    Hippy Bot:  \\o/\n\n * ``udefine``: look up a term on `Urban Dictionary <http://urbandictionary.com/>`_, the first 3 definitions will be posted back to the channel. **Warning**: many terms are NSFW.\n\nTo instruct the bot to load a plugin include the plugin's module path in the load field of the plugins section of the config file, e.g. to load the ``mexican_wave`` plugin which is located in the file ``mexican_wave.py`` in ``hippybot/plugins/``, you would write it as::\n\n    [plugins]\n    load = hippybot.plugins.mexican_wave\n\nTo load a plugin named ``my_custom_plugin`` that you have installed into your python path under ``myhippybotplugins`` in a filename (or module) named ``my_custom_plugin.py`` you would append (on a new line, notice the indentation)::\n\n    [plugins]\n    load = hippybot.plugins.mexican_wave\n           myhippybotplugins.my_custom_plugin\n\nTo search for plugins in paths outside of hippybot, you can use the `load_path` option::\n\n    [plugins]\n    \n    load_path = /absolute/path/plugins\n    \thippybot/plugins\n    \tplugins\n    \tanother/relative/path\n\n\nPlugin API\n==========\n\nHippyBot includes a very simple plugin API. To add commands to HippyBot you just need an importable Python package (e.g. a directory in the ``PYTHON_PATH`` that includes a file named ``__init__.py``), and place your plugin in it's own Python file (the ROT13 plugin lives in ``rot13.py``).\n\nYou then can include a function that matches the same name as the file and is the same command you want to register, and use either the ``botcmd`` or ``directcmd`` decorators::\n\n   # hello_world.py\n   from hippybot.decorators import directcmd\n\n   @directcmd\n   def hello_world(bot, mess, args):\n       return u'Hello world!'\n\nThis registers the command ``hello world`` as a direct command, that means the text \"Hello world!\" will be directly spoken back to the user using at-sign notation. The ``botcmd`` decorator on the other hand will respond in the channel without targetting the original speaker.\nBy default these function based plugins only support direct commands (spoken to the bot using at-sign notation), however you can create more complex plugins with greater control using class based plugins.\n\nTo create class based plugins create the Python module as normal, with any descriptive name you want, and include a class named ``Plugin`` in the module, for example the hello world plugin can be written like::\n\n    # hello_world.py\n    from hippybot.decorators import botcmd, directcmd\n\n    class Plugin(object):\n        global_commands = ['hello_world']\n        command_aliases = {'hi!': 'hello'}\n        \n        @botcmd\n        def hello_world(self, mess, args):\n            return u'Hello world!'\n        \n        @directcmd\n        def hello(self, mess, args):\n            return u'Well hello there..'\n\nThis uses 2 special properties:\n\n * ``global_commands``: a list of command *method names* that can be triggered without targetting the bot using at-sign notation (just say the command in the channel without mentioning the bot).\n * ``command_aliases``: dict of command aliases and the methods they map to, this is a way of triggering a command from a string that can't be used as a Python method name (e.g. using special symbols such as the \"\\o/\" trigger used in the *mexican wave* plugin).\n * ``all_msg_handlers``: a list of handler *method names* that will be passed all incoming XMPP message objects regardless of type as. This can be used for low-level hanbdling of Jabber messages without using the higher level message handling of jabberbot or hippybot.\n\nHipChat API\n-----------\n\nHippyBot includes a very simple object orientated wrapper for the `HipChat API <https://www.hipchat.com/docs/api>`_. To make use of the API you need to `create an API key <https://www.hipchat.com/groups/api>`_ and enter that into the config file under the section ``hipchat``, as an option called ``api_auth_token``, e.g.::\n\n    [hipchat]\n    api_auth_token = xxxxxxxxxxxxxxxxxxxxxxxx\n\nIf you are using self-hosted Hipchat service, set up something like this::\n\n    [hipchat]\n    api_server = api.example.com\n    api_auth_token = xxxxxxxxxxxxxxxxxxxxxxxx\n\nThen you can access the wrapper via the ``api`` attribute on the bot instance, e.g. from within a command method on a plugin class::\n\n    # hello_world.py\n    from hippybot.decorators import botcmd\n\n    class Plugin(object):\n        global_commands = ['hello']\n\n        @botcmd\n        def hello(self, mess, args):\n            channel = unicode(mess.getFrom()).split('/')[0]\n            # Say hello world as a room notification\n            # Params to the API wrapper are sent as dicts\n            self.bot.api.rooms.message({\n                'room_id': channel,\n                'from': self.bot._config['connection']['nickname'],\n                'message': 'Hello world!'\n            })", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/1stvamp/hippybot", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "hippybot", "package_url": "https://pypi.org/project/hippybot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hippybot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/1stvamp/hippybot"}, "release_url": "https://pypi.org/project/hippybot/1.2.7/", "requires_dist": null, "requires_python": null, "summary": "Python Hipchat bot", "version": "1.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>HippyBot is a Hipchat.com chatroom bot written in Python. It is technically just a Jabber/XMPP bot, but it has customised features for connecting to and working on Hipchat.</p>\n<p>HippyBot includes a simple plugin API for adding commands.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>There a few ways you can install Hippybot:</p>\n<p>Download and install with <tt>setup.py</tt>:</p>\n<pre>python setup.py install\n</pre>\n<p>Install from PyPi:</p>\n<pre>pip install hippybot\n# or using setuptools\neasy_install hippybot\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>There is an example configuration file distributed with HippyBot called <tt>hippybot.conf.example</tt>, copy this and edit it. You will need to add an account to your Hipchat group for the bot to connect as. While logged in as the account go to the <a href=\"https://boxedice.hipchat.com/account/xmpp\" rel=\"nofollow\">XMPP</a> settings page to get the details you\u2019ll need to edit the config file.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Run HippyBot from a terminal like so:</p>\n<pre>hippybot -c path/to/your/config/file.conf\n</pre>\n<p>To run as a background daemon use <tt><span class=\"pre\">-d</span></tt> or <tt><span class=\"pre\">-daemon</span></tt>:</p>\n<pre>hippybot -c path/to/your/config/file.conf -d\n</pre>\n<p>Optionally you can provide a path to a PID file to use with <tt><span class=\"pre\">-p</span></tt> or <tt><span class=\"pre\">--pid</span></tt>.\n<strong>Note</strong>: at present you will have to provide your own control script, e.g. for use with <tt>init.d</tt> or <tt>upstart</tt>.</p>\n<p>You should see the bot join any channels listed in the config file. You can then target the bot with commands using the at-sign notation, e.g.:</p>\n<pre>@botname rot13 hello world\n</pre>\n<p>If you have the <tt>rot13</tt> example plugin set to load (via the plugins section of the config file) then the bot will reply to you using at-sign notation with a ROT13\u2019d (each character offset by 13) version of the text \u201chello world\u201d.</p>\n<p>The bot has 2 inbuilt commands:</p>\n<blockquote>\n<ul>\n<li><tt>load_plugins</tt>: this will reload any updated plugins (note it will also reset the internal state of any loaded plugins, e.g. the counter in the <em>mexican wave</em> plugin). Note it <strong>does not</strong> reload the bot\u2019s configuration file and so will not load new plugins.</li>\n<li><tt>reload</tt>: this will reload the bot itself, reloading the configuration file, reconnecting to HipChat and reloading any plugins, in the process. Note: it does not end the main process, you would have to do that yourself from the terminal (for example if HippyBot were updated).</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"plugins\">\n<h2>Plugins</h2>\n<p>There are 3 plugins currently distributed with HippyBot:</p>\n<blockquote>\n<ul>\n<li><p><tt>rot13</tt>: this is mostly included as an example, it ROT13s, any text spoken directly to the bot, back at the speaker.</p>\n</li>\n<li><p><tt>mexican_wave</tt>: this is a fun plugin that completes a mexican wave if 2 people in a row say <tt>\\o/</tt> in a channel, e.g.:</p>\n<pre>John Smith: \\o/\nJoe Bloggs: \\o/\nHippy Bot:  \\o/\n</pre>\n</li>\n<li><p><tt>udefine</tt>: look up a term on <a href=\"http://urbandictionary.com/\" rel=\"nofollow\">Urban Dictionary</a>, the first 3 definitions will be posted back to the channel. <strong>Warning</strong>: many terms are NSFW.</p>\n</li>\n</ul>\n</blockquote>\n<p>To instruct the bot to load a plugin include the plugin\u2019s module path in the load field of the plugins section of the config file, e.g. to load the <tt>mexican_wave</tt> plugin which is located in the file <tt>mexican_wave.py</tt> in <tt>hippybot/plugins/</tt>, you would write it as:</p>\n<pre>[plugins]\nload = hippybot.plugins.mexican_wave\n</pre>\n<p>To load a plugin named <tt>my_custom_plugin</tt> that you have installed into your python path under <tt>myhippybotplugins</tt> in a filename (or module) named <tt>my_custom_plugin.py</tt> you would append (on a new line, notice the indentation):</p>\n<pre>[plugins]\nload = hippybot.plugins.mexican_wave\n       myhippybotplugins.my_custom_plugin\n</pre>\n<p>To search for plugins in paths outside of hippybot, you can use the <cite>load_path</cite> option:</p>\n<pre>[plugins]\n\nload_path = /absolute/path/plugins\n    hippybot/plugins\n    plugins\n    another/relative/path\n</pre>\n</div>\n<div id=\"plugin-api\">\n<h2>Plugin API</h2>\n<p>HippyBot includes a very simple plugin API. To add commands to HippyBot you just need an importable Python package (e.g. a directory in the <tt>PYTHON_PATH</tt> that includes a file named <tt>__init__.py</tt>), and place your plugin in it\u2019s own Python file (the ROT13 plugin lives in <tt>rot13.py</tt>).</p>\n<p>You then can include a function that matches the same name as the file and is the same command you want to register, and use either the <tt>botcmd</tt> or <tt>directcmd</tt> decorators:</p>\n<pre># hello_world.py\nfrom hippybot.decorators import directcmd\n\n@directcmd\ndef hello_world(bot, mess, args):\n    return u'Hello world!'\n</pre>\n<p>This registers the command <tt>hello world</tt> as a direct command, that means the text \u201cHello world!\u201d will be directly spoken back to the user using at-sign notation. The <tt>botcmd</tt> decorator on the other hand will respond in the channel without targetting the original speaker.\nBy default these function based plugins only support direct commands (spoken to the bot using at-sign notation), however you can create more complex plugins with greater control using class based plugins.</p>\n<p>To create class based plugins create the Python module as normal, with any descriptive name you want, and include a class named <tt>Plugin</tt> in the module, for example the hello world plugin can be written like:</p>\n<pre># hello_world.py\nfrom hippybot.decorators import botcmd, directcmd\n\nclass Plugin(object):\n    global_commands = ['hello_world']\n    command_aliases = {'hi!': 'hello'}\n\n    @botcmd\n    def hello_world(self, mess, args):\n        return u'Hello world!'\n\n    @directcmd\n    def hello(self, mess, args):\n        return u'Well hello there..'\n</pre>\n<p>This uses 2 special properties:</p>\n<blockquote>\n<ul>\n<li><tt>global_commands</tt>: a list of command <em>method names</em> that can be triggered without targetting the bot using at-sign notation (just say the command in the channel without mentioning the bot).</li>\n<li><tt>command_aliases</tt>: dict of command aliases and the methods they map to, this is a way of triggering a command from a string that can\u2019t be used as a Python method name (e.g. using special symbols such as the \u201co/\u201d trigger used in the <em>mexican wave</em> plugin).</li>\n<li><tt>all_msg_handlers</tt>: a list of handler <em>method names</em> that will be passed all incoming XMPP message objects regardless of type as. This can be used for low-level hanbdling of Jabber messages without using the higher level message handling of jabberbot or hippybot.</li>\n</ul>\n</blockquote>\n<div id=\"hipchat-api\">\n<h3>HipChat API</h3>\n<p>HippyBot includes a very simple object orientated wrapper for the <a href=\"https://www.hipchat.com/docs/api\" rel=\"nofollow\">HipChat API</a>. To make use of the API you need to <a href=\"https://www.hipchat.com/groups/api\" rel=\"nofollow\">create an API key</a> and enter that into the config file under the section <tt>hipchat</tt>, as an option called <tt>api_auth_token</tt>, e.g.:</p>\n<pre>[hipchat]\napi_auth_token = xxxxxxxxxxxxxxxxxxxxxxxx\n</pre>\n<p>If you are using self-hosted Hipchat service, set up something like this:</p>\n<pre>[hipchat]\napi_server = api.example.com\napi_auth_token = xxxxxxxxxxxxxxxxxxxxxxxx\n</pre>\n<p>Then you can access the wrapper via the <tt>api</tt> attribute on the bot instance, e.g. from within a command method on a plugin class:</p>\n<pre># hello_world.py\nfrom hippybot.decorators import botcmd\n\nclass Plugin(object):\n    global_commands = ['hello']\n\n    @botcmd\n    def hello(self, mess, args):\n        channel = unicode(mess.getFrom()).split('/')[0]\n        # Say hello world as a room notification\n        # Params to the API wrapper are sent as dicts\n        self.bot.api.rooms.message({\n            'room_id': channel,\n            'from': self.bot._config['connection']['nickname'],\n            'message': 'Hello world!'\n        })\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1593574, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6de1d263ceb693fe0d05a8d9b3331391", "sha256": "425d6a40e354cec8931e36146d32cc27ab1fabc7226876aa4f40a5f97b36bbd3"}, "downloads": -1, "filename": "hippybot-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6de1d263ceb693fe0d05a8d9b3331391", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4590, "upload_time": "2011-09-11T23:28:47", "upload_time_iso_8601": "2011-09-11T23:28:47.170424Z", "url": "https://files.pythonhosted.org/packages/be/9b/efed569496f9305cddbb17b25eb0ad4a673f5f58131021127c8354b79284/hippybot-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4965ee80a46575c8c6a3db95a806bc13", "sha256": "8a77f057895f42a1c75035bdd3b7daeaaa93d12f803a4a7884a87e606e011afe"}, "downloads": -1, "filename": "hippybot-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4965ee80a46575c8c6a3db95a806bc13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5794, "upload_time": "2011-09-26T03:29:48", "upload_time_iso_8601": "2011-09-26T03:29:48.305264Z", "url": "https://files.pythonhosted.org/packages/a0/19/a203e7df38d5c4e65f09ceb7afa2c3764aa56fca44dbb0a860d33e5711d1/hippybot-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "bffb4b901a7040ca96e1c851a4f715d3", "sha256": "0e147f5388025c688758dee15ca34bc36da5b43b87a146e1f480a3580c9cb087"}, "downloads": -1, "filename": "hippybot-1.1.1.tar.gz", "has_sig": false, "md5_digest": "bffb4b901a7040ca96e1c851a4f715d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5840, "upload_time": "2011-09-26T15:52:09", "upload_time_iso_8601": "2011-09-26T15:52:09.935676Z", "url": "https://files.pythonhosted.org/packages/ce/f0/46bffa7b11e553e2bba15f4beeab9f8448ac01f067ceb74726981d1bb434/hippybot-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d42c8f99cce2e380325cf140780580cc", "sha256": "099b75f46919574ab17e669596f054a2f63845664c16d7d7d7a6584ade8f234b"}, "downloads": -1, "filename": "hippybot-1.1.2.tar.gz", "has_sig": false, "md5_digest": "d42c8f99cce2e380325cf140780580cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5845, "upload_time": "2011-09-29T20:57:03", "upload_time_iso_8601": "2011-09-29T20:57:03.400703Z", "url": "https://files.pythonhosted.org/packages/f3/1f/90939bc5c59476e11f1ad6138cdb5cf82f9bb16ce72d3a6417487627dd48/hippybot-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "cdb80a14260363e6d7b63de3b60cd746", "sha256": "e003d642281ace31fac20ad3538b3caae0c6b09853a2a302c5af5f4e079b1782"}, "downloads": -1, "filename": "hippybot-1.1.3.tar.gz", "has_sig": false, "md5_digest": "cdb80a14260363e6d7b63de3b60cd746", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5867, "upload_time": "2011-09-29T21:14:28", "upload_time_iso_8601": "2011-09-29T21:14:28.162109Z", "url": "https://files.pythonhosted.org/packages/d8/82/2056f8dca7f4831ebb80b53c6245198d17ee24da5a7e75435805d467e993/hippybot-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "2a6dcf19e1fc710df42a864c92c55007", "sha256": "d101dfec3d27962e7637179c5ae79c28ff5a0adb4d6371f1f9984594208f0dd3"}, "downloads": -1, "filename": "hippybot-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2a6dcf19e1fc710df42a864c92c55007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9755, "upload_time": "2011-10-08T01:52:03", "upload_time_iso_8601": "2011-10-08T01:52:03.376412Z", "url": "https://files.pythonhosted.org/packages/20/e1/aceb06a779e24ad02d8d4dc28081ae2d44c4d4dcacecec75663f7aa2225e/hippybot-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "cd9627ab5784d02c71a860bb7a5432da", "sha256": "3f6b736bb94be0b9c0ab19868b10bac172267772d6bd59bc0a51c6ccb42dd8a1"}, "downloads": -1, "filename": "hippybot-1.2.0.tar.gz", "has_sig": false, "md5_digest": "cd9627ab5784d02c71a860bb7a5432da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44216, "upload_time": "2011-10-20T22:57:38", "upload_time_iso_8601": "2011-10-20T22:57:38.055807Z", "url": "https://files.pythonhosted.org/packages/96/30/d3dba0c949f31abb155447e88965e0699f46baaadf1dc56ebd47ace1f218/hippybot-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "42c8b10a998c3951abbf41525273fff9", "sha256": "83bcc1e2cbc69bb91663b9a9f6b17792f80dfadff353b9753cad5c12a3af7c94"}, "downloads": -1, "filename": "hippybot-1.2.1.tar.gz", "has_sig": false, "md5_digest": "42c8b10a998c3951abbf41525273fff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44246, "upload_time": "2011-10-26T22:02:09", "upload_time_iso_8601": "2011-10-26T22:02:09.214167Z", "url": "https://files.pythonhosted.org/packages/65/1f/956dced3376196bbfd2f82cfdf03b1f49c56e8f99aa82016be4d93a034c6/hippybot-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "3d5a76e6cbe4f6c17d363504a70e50aa", "sha256": "10d548be22e09103cecee8994b6a89a72f8c8a3fb758d702cc16cd7106e608f6"}, "downloads": -1, "filename": "hippybot-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3d5a76e6cbe4f6c17d363504a70e50aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12892, "upload_time": "2012-02-13T14:20:08", "upload_time_iso_8601": "2012-02-13T14:20:08.700849Z", "url": "https://files.pythonhosted.org/packages/ee/07/78c59c6f937cdbe062049e75ba2170d7228db43b3483491c335a81390502/hippybot-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "30c3e0ce516b68af8649c2a192cab8a7", "sha256": "48802a63274467a0bfcaad1b8adc6d20618e21ee0a3d1582aad1e6398cfa6dbd"}, "downloads": -1, "filename": "hippybot-1.2.3.tar.gz", "has_sig": false, "md5_digest": "30c3e0ce516b68af8649c2a192cab8a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12966, "upload_time": "2012-04-24T11:28:51", "upload_time_iso_8601": "2012-04-24T11:28:51.069727Z", "url": "https://files.pythonhosted.org/packages/0c/43/634516913cc0229da3af9b5a1779bd5d3a1845f214877443565ffcc47543/hippybot-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "d9841199c82dc894c536efe4fe19d8ac", "sha256": "f51c039e0eccc28f2fc9caf4cfe8277e09cda04a2f4cedfe48fcd692cd011c10"}, "downloads": -1, "filename": "hippybot-1.2.4.tar.gz", "has_sig": false, "md5_digest": "d9841199c82dc894c536efe4fe19d8ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13082, "upload_time": "2012-07-13T03:00:11", "upload_time_iso_8601": "2012-07-13T03:00:11.287549Z", "url": "https://files.pythonhosted.org/packages/f8/8a/0c09d388867985f8eb5a9b0f2c0f20cde8ad066a07f0bb28655c4f48aa62/hippybot-1.2.4.tar.gz", "yanked": false}], "1.2.5": [], "1.2.6": [{"comment_text": "", "digests": {"md5": "6b386c9238e90823c7cc9c09a5a60503", "sha256": "6c663616cf82a621151ac0819899fb8df5c86a8e7099f8a8254db9a1acbfdd88"}, "downloads": -1, "filename": "hippybot-1.2.6.tar.gz", "has_sig": false, "md5_digest": "6b386c9238e90823c7cc9c09a5a60503", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15563, "upload_time": "2015-04-21T14:31:04", "upload_time_iso_8601": "2015-04-21T14:31:04.855692Z", "url": "https://files.pythonhosted.org/packages/14/db/18aca69ccb616e2dfc1a084095b1d2cf958ef5a8155bec24e5569ba27ebc/hippybot-1.2.6.tar.gz", "yanked": false}], "1.2.7": [{"comment_text": "", "digests": {"md5": "8d5d5bdeff75773e2b1a27e2a9bd0db9", "sha256": "12b52e63f295f3153591ba90e018d3f9430cca69400ce88eb714d7d64bf54989"}, "downloads": -1, "filename": "hippybot-1.2.7.tar.gz", "has_sig": false, "md5_digest": "8d5d5bdeff75773e2b1a27e2a9bd0db9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16556, "upload_time": "2015-06-15T23:55:56", "upload_time_iso_8601": "2015-06-15T23:55:56.975969Z", "url": "https://files.pythonhosted.org/packages/cc/48/032a8ee5b858a2b8b887cdb08e0929f3330000128038ba1daab1c55502d0/hippybot-1.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d5d5bdeff75773e2b1a27e2a9bd0db9", "sha256": "12b52e63f295f3153591ba90e018d3f9430cca69400ce88eb714d7d64bf54989"}, "downloads": -1, "filename": "hippybot-1.2.7.tar.gz", "has_sig": false, "md5_digest": "8d5d5bdeff75773e2b1a27e2a9bd0db9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16556, "upload_time": "2015-06-15T23:55:56", "upload_time_iso_8601": "2015-06-15T23:55:56.975969Z", "url": "https://files.pythonhosted.org/packages/cc/48/032a8ee5b858a2b8b887cdb08e0929f3330000128038ba1daab1c55502d0/hippybot-1.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:08 2020"}