{"info": {"author": "James Kermode", "author_email": "james.kermode@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "f90wrap: Fortran to Python interface generator with derived type support\n========================================================================\n\n|Build Status|\n\nf90wrap is a tool to automatically generate Python extension modules\nwhich interface to Fortran code that makes use of derived types. It\nbuilds on the capabilities of the popular\n`f2py <https://sysbio.ioc.ee/projects/f2py2e/>`__ utility by generating\na simpler Fortran 90 interface to the original Fortran code which is\nthen suitable for wrapping with f2py, together with a higher-level\nPythonic wrapper that makes the existance of an additional layer\ntransparent to the final user.\n\nCopyright (C) James Kermode 2011-2020. Released under the GNU Lesser\nGeneral Public License, version 3. Parts originally based on f90doc -\nautomatic documentation generator for Fortran 90. Copyright (C) 2004 Ian\nRutt.\n\nIf you would like to license the source code under different terms,\nplease contact James Kermode james.kermode@gmail.com Dependencies \u2014\u2014\u2014\u2014\n\n1. `Python <http://www.python.org>`__ 3.6+ (Python 2.7 no longer\n   supported)\n2. Recent version of `numpy <http://www.numpy.org>`__ which includes\n   ``f2py``\n3. Fortran compiler - tested with ``gfortran`` 4.6+ and recent ``ifort``\n   12+\n\nInstallation\n------------\n\nFor the latest stable release, install with either ``pip``:\n\n::\n\n   pip install f90wrap\n\nFor the development version, installation is as follows:\n\n::\n\n   pip install git+https://github.com/jameskermode/f90wrap\n\nNote that if your Fortran 90 compiler has a non-standard name\n(e.g.\u00a0gfortran-9) then you need to set the ``F90`` environment variable\nprior to installing f90wrap to ensure it uses the correct one, e.g.\n\n::\n\n   F90=gfortran-9 pip install f90wrap\n\nExamples and Testing\n--------------------\n\nTo test the installation, run ``make test`` from the ``examples/``\ndirectory. You may find the code in the various examples useful.\n\nCiting f90wrap\n--------------\n\nIf you find ``f90wrap`` useful in academic work, please cite the\nfollowing (open access) publication:\n\n   J. R. Kermode, f90wrap: an automated tool for constructing deep\n   Python interfaces to modern Fortran codes. J. Phys. Condens. Matter\n   (2020)\n   `doi:10.1088/1361-648X/ab82d2 <https://dx.doi.org/10.1088/1361-648X/ab82d2>`__\n\nBibTeX entry:\n\n.. code:: bibtex\n\n\n   @ARTICLE{Kermode2020-f90wrap,\n     title    = \"f90wrap: an automated tool for constructing deep Python\n                 interfaces to modern Fortran codes\",\n     author   = \"Kermode, James R\",\n     journal  = \"J. Phys. Condens. Matter\",\n     month    =  mar,\n     year     =  2020,\n     keywords = \"Fortran; Interfacing; Interoperability; Python; Wrapping codes;\n                 f2py\",\n     language = \"en\",\n     issn     = \"0953-8984, 1361-648X\",\n     pmid     = \"32209737\",\n     doi      = \"10.1088/1361-648X/ab82d2\"\n   }\n\nCase studies\n------------\n\nf90wrap has been used to wrap the following large-scale scientific\napplications:\n\n-  `QUIP <http://libatoms.github.io/QUIP/>`__ - molecular dynamics code\n-  `CASTEP <http://www.castep.org>`__ - electronic structure code\n\nSee this `Jupyter\nnotebook <https://github.com/jameskermode/f90wrap/blob/master/docs/tutorials/f90wrap-demo-feb-2020.ipynb>`__\nfrom a recent seminar for more details.\n\nUsage\n-----\n\nTo use ``f90wrap`` to wrap a set of Fortran 90 source files and produce\nwrappers suitable for input to f2py use:\n\n::\n\n   f90wrap -m MODULE F90_FILES\n\nwhere ``MODULE`` is the name of the Python module you want to produce\n(e.g. the name of the Fortran code you are wrapping) and ``F90_FILES``\nis a list of Fortran 90 source files containing the modules, types and\nsubroutines you would like to expose via Python.\n\nThis will produce two types of output: Fortran 90 wrapper files suitable\nfor input to ``f2py`` to produce a low-level Python extension module,\nand a high-level Python module desinged to be used together with the\nf2py-generated module to give a more Pythonic interface.\n\nOne Fortran 90 wrapper file is written for each source file, named\n``f90wrap_F90_FILE.f90``, plus possibly an extra file named\n``f90wrap_toplevel.f90`` if there are any subroutines or functions\ndefined outside of modules in ``F90_FILES``.\n\nTo use f2py to compile these wrappers into an extension module, use:\n\n::\n\n   f2py -c -m _MODULE OBJ_FILES f90wrap_*.f90 *.o\n\nwhere ``_MODULE`` is the name of the low-level extension module.\n\nOptionally, you can replace ``f2py`` with ``f2py-f90wrap``, which is a\nslightly modified version of ``f2py`` included in this distribution that\nintroduces the following features:\n\n1. Allow the Fortran ``present()`` intrinsic function to work correctly\n   with optional arguments. If an argument to an f2py wrapped function\n   is optional and is not given, replace it with ``NULL``.\n2. Allow Fortran routines to raise a RuntimeError exception with a\n   message by calling an external function ``f90wrap_abort``\\ (). This\n   is implemented using a ``setjmp()/longjmp()`` trap.\n3. Allow Fortran routines to be interrupted with ``Ctrl+C`` by\n   installing a custom interrupt handler before the call into Fortran is\n   made. After the Fortran routine returns, the previous interrupt\n   handler is restored.\n\nNotes\n-----\n\n-  Unlike standard ``f2py``, ``f90wrap`` converts all ``intent(out)``\n   arrays to ``intent(in, out)``. This was a deliberate design decision\n   to allow allocatable and automatic arrays of unknown output size to\n   be used. It is hard in general to work out what size array needs to\n   be allocated, so relying on the the user to pre-allocate from Python\n   is the safest solution.\n-  Scalar arguments without ``intent`` are treated as ``intent(in)`` by\n   ``f2py``. To have ``inout`` scalars, you need to call ``f90wrap``\n   with the ``--default-to-inout`` flag and declare the python variables\n   as 1-length numpy arrays (``numpy.zeros(1)`` for example).\n-  Pointer arguments are not supported.\n-  Arrays of derived types are currently not fully supported: a\n   workaround is provided for 1D-fixed-length arrays,\n   i.e.\u00a0\\ ``type(a), dimension(b) :: c``. In this case, the super-type\n   ``Type_a_Xb_Array`` will be created, and the array of types can be\n   accessed through ``c.items``. Note that dimension b can not be ``:``,\n   but can be a parameter.\n\nHow f90wrap works\n-----------------\n\nThere are five steps in the process of wrapping a Fortran 90 routine to\nallow it to be called from Python.\n\n1. The Fortran source files are scanned, building up an abstract symbol\n   tree (AST) which describes all the modules, types, subroutines and\n   functions found.\n2. The AST is transformed to remove nodes which should not be wrapped\n   (e.g.\u00a0private symbols in modules, routines with arguments of a\n   derived type not defined in the project, etc.)\n3. The ``f90wrap.f90wrapgen.F90WrapperGenerator`` class is used to write\n   a simplified Fortran 90 prototype for each routine, with derived type\n   arguments replaced by integer arrays containing a representation of a\n   pointer to the derived type, in the manner described in\n   (Pletzer2008)[https://doi.org/10.1109/MCSE.2008.94]. This allows\n   opaque references to the true Fortran derived type data structures to\n   be passed back and forth between Python and Fortran.\n4. f2py is used to combine the F90 wrappers and the original compiled\n   functions into a Python extension module (optionally, f2py can be\n   replaced by f2py-f90wrap, a slightly modified version which adds\n   support for exception handling and interruption during exceution of\n   Fortran code).\n5. The ``f90wrap.pywrapgen.PythonWrapperGenerator`` class is used to\n   write a thin object-oriented layer on top of the f2py generated\n   wrapper functions which handles conversion between Python object\n   instances and Fortran derived-type variables, converting arguments\n   back and forth automatically.\n\nAdvanced Features\n-----------------\n\nAdditional command line arguments can be passed to f90wrap to customize\nhow the wrappers are generated. See the ``examples/`` directory to see\nhow some of the options are used:\n\n::\n\n     -h, --help            show this help message and exit\n     -v, --verbose         set verbosity level [default: None]\n     -V, --version         show program's version number and exit\n     -p PREFIX, --prefix PREFIX\n                           Prefix to prepend to arguments and subroutines.\n     -c [CALLBACK [CALLBACK ...]], --callback [CALLBACK [CALLBACK ...]]\n                           Names of permitted callback routines.\n     -C [CONSTRUCTORS [CONSTRUCTORS ...]], --constructors [CONSTRUCTORS [CONSTRUCTORS ...]]\n                           Names of constructor routines.\n     -D [DESTRUCTORS [DESTRUCTORS ...]], --destructors [DESTRUCTORS [DESTRUCTORS ...]]\n                           Names of destructor routines.\n     -k KIND_MAP, --kind-map KIND_MAP\n                           File containting Python dictionary in f2py_f2cmap\n                           format\n     -s STRING_LENGTHS, --string-lengths STRING_LENGTHS\n                           \"File containing Python dictionary mapping string\n                           length names to values\n     -S DEFAULT_STRING_LENGTH, --default-string-length DEFAULT_STRING_LENGTH\n                           Default length of character strings\n     -i INIT_LINES, --init-lines INIT_LINES\n                           File containing Python dictionary mapping type names\n                           to necessary initialisation code\n     -I INIT_FILE, --init-file INIT_FILE\n                           Python source file containing code to be added to\n                           autogenerated __init__.py\n     -A ARGUMENT_NAME_MAP, --argument-name-map ARGUMENT_NAME_MAP\n                           File containing Python dictionary to rename Fortran\n                           arguments\n     --short-names SHORT_NAMES\n                           File containing Python dictionary mapping full type\n                           names to abbreviations\n     --py-mod-names PY_MOD_NAMES\n                           File containing Python dictionary mapping Fortran\n                           module names to Python ones\n     --class-names CLASS_NAMES\n                           File containing Python dictionary mapping Fortran type\n                           names to Python classes\n     --joint-modules JOINT_MODULES\n                           File containing Python dictionary mapping modules\n                           defining times to list of additional modules defining\n                           methods\n     -m MOD_NAME, --mod-name MOD_NAME\n                           Name of output extension module (without .so\n                           extension).\n     -M, --move-methods    Convert routines with derived type instance as first\n                           agument into class methods\n     --shorten-routine-names\n                           Remove type name prefix from routine names, e.g.\n                           cell_symmetrise() -> symmetrise()\n     -P, --package         Generate a Python package instead of a single module\n     -a ABORT_FUNC, --abort-func ABORT_FUNC\n                           Name of Fortran subroutine to invoke if a fatal error\n                           occurs\n     --only [ONLY [ONLY ...]]\n                           Subroutines to include in wrapper\n     --skip [SKIP [SKIP ...]]\n                           Subroutines to exclude modules and subroutines from\n                           wrapper\n     --skip-types [SKIP_TYPES [SKIP_TYPES ...]]\n                           Subroutines to exclude types from wrapper\n     --force-public [FORCE_PUBLIC [FORCE_PUBLIC ...]]\n                           Names which are forced to be make public\n     --default-to-inout    Sets all arguments without intent to intent(inout)\n     --conf-file CONF_FILE\n                           Use Python configuration script to set options\n     --documentation-plugin DOCUMENTATION_PLUGIN\n                           Use Python script for expanding the documentation of\n                           functions and subroutines. All lines of the given tree\n                           object are passed to it with a reference to its\n                           documentation\n     --py-max-line-length PY_MAX_LINE_LENGTH\n                           Maximum length of lines in python files written.\n                           Default: 80\n     --f90-max-line-length F90_MAX_LINE_LENGTH\n                           Maximum length of lines in fortan files written.\n                           Default: 120\n        \n\nAuthor\n------\n\nJames Kermode `jameskermode <https://github.com/jameskermode>`__\n\nContributors\n------------\n\n-  Tamas Stenczel `stenczelt <https://github.com/stenczelt>`__\n-  Steven Murray `steven-murray <https://github.com/steven-murray>`__\n-  Greg Corbett `gregcorbett <https://github.com/gregcorbett>`__\n-  Bob Fischer `citibob <https://github.com/citibob>`__\n-  David Verelst `davidovitch <https://github.com/davidovitch>`__\n-  James Orr `jamesorr <https://github.com/jamesorr>`__\n-  `yvesch <https://github.com/yvesch>`__\n-  `Matthias Cuntz <https://github.com/mcuntz>`__\n-  Balthasar Reuter `reuterbal <https://github.com/reuterbal>`__\n\n.. |Build Status| image:: https://travis-ci.org/jameskermode/f90wrap.svg?branch=master\n   :target: https://travis-ci.org/jameskermode/f90wrap", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/jameskermode/f90wrap/archive/v0.2.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jameskermode/f90wrap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "f90wrap", "package_url": "https://pypi.org/project/f90wrap/", "platform": "", "project_url": "https://pypi.org/project/f90wrap/", "project_urls": {"Download": "https://github.com/jameskermode/f90wrap/archive/v0.2.3.tar.gz", "Homepage": "https://github.com/jameskermode/f90wrap"}, "release_url": "https://pypi.org/project/f90wrap/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Fortran to Python interface generator with derived type support", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/jameskermode/f90wrap\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3807ec407875f24830a2b4bf2029b39ced94ba98/68747470733a2f2f7472617669732d63692e6f72672f6a616d65736b65726d6f64652f663930777261702e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>f90wrap is a tool to automatically generate Python extension modules\nwhich interface to Fortran code that makes use of derived types. It\nbuilds on the capabilities of the popular\n<a href=\"https://sysbio.ioc.ee/projects/f2py2e/\" rel=\"nofollow\">f2py</a> utility by generating\na simpler Fortran 90 interface to the original Fortran code which is\nthen suitable for wrapping with f2py, together with a higher-level\nPythonic wrapper that makes the existance of an additional layer\ntransparent to the final user.</p>\n<p>Copyright (C) James Kermode 2011-2020. Released under the GNU Lesser\nGeneral Public License, version 3. Parts originally based on f90doc -\nautomatic documentation generator for Fortran 90. Copyright (C) 2004 Ian\nRutt.</p>\n<p>If you would like to license the source code under different terms,\nplease contact James Kermode <a href=\"mailto:james.kermode%40gmail.com\">james<span>.</span>kermode<span>@</span>gmail<span>.</span>com</a> Dependencies \u2014\u2014\u2014\u2014</p>\n<ol>\n<li><a href=\"http://www.python.org\" rel=\"nofollow\">Python</a> 3.6+ (Python 2.7 no longer\nsupported)</li>\n<li>Recent version of <a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a> which includes\n<tt>f2py</tt></li>\n<li>Fortran compiler - tested with <tt>gfortran</tt> 4.6+ and recent <tt>ifort</tt>\n12+</li>\n</ol>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For the latest stable release, install with either <tt>pip</tt>:</p>\n<pre>pip install f90wrap\n</pre>\n<p>For the development version, installation is as follows:</p>\n<pre>pip install git+https://github.com/jameskermode/f90wrap\n</pre>\n<p>Note that if your Fortran 90 compiler has a non-standard name\n(e.g.\u00a0gfortran-9) then you need to set the <tt>F90</tt> environment variable\nprior to installing f90wrap to ensure it uses the correct one, e.g.</p>\n<pre>F90=gfortran-9 pip install f90wrap\n</pre>\n</div>\n<div id=\"examples-and-testing\">\n<h2>Examples and Testing</h2>\n<p>To test the installation, run <tt>make test</tt> from the <tt>examples/</tt>\ndirectory. You may find the code in the various examples useful.</p>\n</div>\n<div id=\"citing-f90wrap\">\n<h2>Citing f90wrap</h2>\n<p>If you find <tt>f90wrap</tt> useful in academic work, please cite the\nfollowing (open access) publication:</p>\n<blockquote>\nJ. R. Kermode, f90wrap: an automated tool for constructing deep\nPython interfaces to modern Fortran codes. J. Phys. Condens. Matter\n(2020)\n<a href=\"https://dx.doi.org/10.1088/1361-648X/ab82d2\" rel=\"nofollow\">doi:10.1088/1361-648X/ab82d2</a></blockquote>\n<p>BibTeX entry:</p>\n<pre><span class=\"nc\">@ARTICLE</span><span class=\"p\">{</span><span class=\"nl\">Kermode2020-f90wrap</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span>    <span class=\"p\">=</span> <span class=\"s\">\"f90wrap: an automated tool for constructing deep Python\n              interfaces to modern Fortran codes\"</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span>   <span class=\"p\">=</span> <span class=\"s\">\"Kermode, James R\"</span><span class=\"p\">,</span>\n  <span class=\"na\">journal</span>  <span class=\"p\">=</span> <span class=\"s\">\"J. Phys. Condens. Matter\"</span><span class=\"p\">,</span>\n  <span class=\"na\">month</span>    <span class=\"p\">=</span>  <span class=\"nv\">mar</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span>     <span class=\"p\">=</span>  <span class=\"m\">2020</span><span class=\"p\">,</span>\n  <span class=\"na\">keywords</span> <span class=\"p\">=</span> <span class=\"s\">\"Fortran; Interfacing; Interoperability; Python; Wrapping codes;\n              f2py\"</span><span class=\"p\">,</span>\n  <span class=\"na\">language</span> <span class=\"p\">=</span> <span class=\"s\">\"en\"</span><span class=\"p\">,</span>\n  <span class=\"na\">issn</span>     <span class=\"p\">=</span> <span class=\"s\">\"0953-8984, 1361-648X\"</span><span class=\"p\">,</span>\n  <span class=\"na\">pmid</span>     <span class=\"p\">=</span> <span class=\"s\">\"32209737\"</span><span class=\"p\">,</span>\n  <span class=\"na\">doi</span>      <span class=\"p\">=</span> <span class=\"s\">\"10.1088/1361-648X/ab82d2\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"case-studies\">\n<h2>Case studies</h2>\n<p>f90wrap has been used to wrap the following large-scale scientific\napplications:</p>\n<ul>\n<li><a href=\"http://libatoms.github.io/QUIP/\" rel=\"nofollow\">QUIP</a> - molecular dynamics code</li>\n<li><a href=\"http://www.castep.org\" rel=\"nofollow\">CASTEP</a> - electronic structure code</li>\n</ul>\n<p>See this <a href=\"https://github.com/jameskermode/f90wrap/blob/master/docs/tutorials/f90wrap-demo-feb-2020.ipynb\" rel=\"nofollow\">Jupyter\nnotebook</a>\nfrom a recent seminar for more details.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use <tt>f90wrap</tt> to wrap a set of Fortran 90 source files and produce\nwrappers suitable for input to f2py use:</p>\n<pre>f90wrap -m MODULE F90_FILES\n</pre>\n<p>where <tt>MODULE</tt> is the name of the Python module you want to produce\n(e.g. the name of the Fortran code you are wrapping) and <tt>F90_FILES</tt>\nis a list of Fortran 90 source files containing the modules, types and\nsubroutines you would like to expose via Python.</p>\n<p>This will produce two types of output: Fortran 90 wrapper files suitable\nfor input to <tt>f2py</tt> to produce a low-level Python extension module,\nand a high-level Python module desinged to be used together with the\nf2py-generated module to give a more Pythonic interface.</p>\n<p>One Fortran 90 wrapper file is written for each source file, named\n<tt>f90wrap_F90_FILE.f90</tt>, plus possibly an extra file named\n<tt>f90wrap_toplevel.f90</tt> if there are any subroutines or functions\ndefined outside of modules in <tt>F90_FILES</tt>.</p>\n<p>To use f2py to compile these wrappers into an extension module, use:</p>\n<pre>f2py -c -m _MODULE OBJ_FILES f90wrap_*.f90 *.o\n</pre>\n<p>where <tt>_MODULE</tt> is the name of the low-level extension module.</p>\n<p>Optionally, you can replace <tt>f2py</tt> with <tt><span class=\"pre\">f2py-f90wrap</span></tt>, which is a\nslightly modified version of <tt>f2py</tt> included in this distribution that\nintroduces the following features:</p>\n<ol>\n<li>Allow the Fortran <tt>present()</tt> intrinsic function to work correctly\nwith optional arguments. If an argument to an f2py wrapped function\nis optional and is not given, replace it with <tt>NULL</tt>.</li>\n<li>Allow Fortran routines to raise a RuntimeError exception with a\nmessage by calling an external function <tt>f90wrap_abort</tt>(). This\nis implemented using a <tt><span class=\"pre\">setjmp()/longjmp()</span></tt> trap.</li>\n<li>Allow Fortran routines to be interrupted with <tt>Ctrl+C</tt> by\ninstalling a custom interrupt handler before the call into Fortran is\nmade. After the Fortran routine returns, the previous interrupt\nhandler is restored.</li>\n</ol>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li>Unlike standard <tt>f2py</tt>, <tt>f90wrap</tt> converts all <tt>intent(out)</tt>\narrays to <tt>intent(in, out)</tt>. This was a deliberate design decision\nto allow allocatable and automatic arrays of unknown output size to\nbe used. It is hard in general to work out what size array needs to\nbe allocated, so relying on the the user to pre-allocate from Python\nis the safest solution.</li>\n<li>Scalar arguments without <tt>intent</tt> are treated as <tt>intent(in)</tt> by\n<tt>f2py</tt>. To have <tt>inout</tt> scalars, you need to call <tt>f90wrap</tt>\nwith the <tt><span class=\"pre\">--default-to-inout</span></tt> flag and declare the python variables\nas 1-length numpy arrays (<tt>numpy.zeros(1)</tt> for example).</li>\n<li>Pointer arguments are not supported.</li>\n<li>Arrays of derived types are currently not fully supported: a\nworkaround is provided for 1D-fixed-length arrays,\ni.e.\u00a0<tt>type(a), dimension(b) :: c</tt>. In this case, the super-type\n<tt>Type_a_Xb_Array</tt> will be created, and the array of types can be\naccessed through <tt>c.items</tt>. Note that dimension b can not be <tt>:</tt>,\nbut can be a parameter.</li>\n</ul>\n</div>\n<div id=\"how-f90wrap-works\">\n<h2>How f90wrap works</h2>\n<p>There are five steps in the process of wrapping a Fortran 90 routine to\nallow it to be called from Python.</p>\n<ol>\n<li>The Fortran source files are scanned, building up an abstract symbol\ntree (AST) which describes all the modules, types, subroutines and\nfunctions found.</li>\n<li>The AST is transformed to remove nodes which should not be wrapped\n(e.g.\u00a0private symbols in modules, routines with arguments of a\nderived type not defined in the project, etc.)</li>\n<li>The <tt>f90wrap.f90wrapgen.F90WrapperGenerator</tt> class is used to write\na simplified Fortran 90 prototype for each routine, with derived type\narguments replaced by integer arrays containing a representation of a\npointer to the derived type, in the manner described in\n(Pletzer2008)[<a href=\"https://doi.org/10.1109/MCSE.2008.94\" rel=\"nofollow\">https://doi.org/10.1109/MCSE.2008.94</a>]. This allows\nopaque references to the true Fortran derived type data structures to\nbe passed back and forth between Python and Fortran.</li>\n<li>f2py is used to combine the F90 wrappers and the original compiled\nfunctions into a Python extension module (optionally, f2py can be\nreplaced by f2py-f90wrap, a slightly modified version which adds\nsupport for exception handling and interruption during exceution of\nFortran code).</li>\n<li>The <tt>f90wrap.pywrapgen.PythonWrapperGenerator</tt> class is used to\nwrite a thin object-oriented layer on top of the f2py generated\nwrapper functions which handles conversion between Python object\ninstances and Fortran derived-type variables, converting arguments\nback and forth automatically.</li>\n</ol>\n</div>\n<div id=\"advanced-features\">\n<h2>Advanced Features</h2>\n<p>Additional command line arguments can be passed to f90wrap to customize\nhow the wrappers are generated. See the <tt>examples/</tt> directory to see\nhow some of the options are used:</p>\n<pre>-h, --help            show this help message and exit\n-v, --verbose         set verbosity level [default: None]\n-V, --version         show program's version number and exit\n-p PREFIX, --prefix PREFIX\n                      Prefix to prepend to arguments and subroutines.\n-c [CALLBACK [CALLBACK ...]], --callback [CALLBACK [CALLBACK ...]]\n                      Names of permitted callback routines.\n-C [CONSTRUCTORS [CONSTRUCTORS ...]], --constructors [CONSTRUCTORS [CONSTRUCTORS ...]]\n                      Names of constructor routines.\n-D [DESTRUCTORS [DESTRUCTORS ...]], --destructors [DESTRUCTORS [DESTRUCTORS ...]]\n                      Names of destructor routines.\n-k KIND_MAP, --kind-map KIND_MAP\n                      File containting Python dictionary in f2py_f2cmap\n                      format\n-s STRING_LENGTHS, --string-lengths STRING_LENGTHS\n                      \"File containing Python dictionary mapping string\n                      length names to values\n-S DEFAULT_STRING_LENGTH, --default-string-length DEFAULT_STRING_LENGTH\n                      Default length of character strings\n-i INIT_LINES, --init-lines INIT_LINES\n                      File containing Python dictionary mapping type names\n                      to necessary initialisation code\n-I INIT_FILE, --init-file INIT_FILE\n                      Python source file containing code to be added to\n                      autogenerated __init__.py\n-A ARGUMENT_NAME_MAP, --argument-name-map ARGUMENT_NAME_MAP\n                      File containing Python dictionary to rename Fortran\n                      arguments\n--short-names SHORT_NAMES\n                      File containing Python dictionary mapping full type\n                      names to abbreviations\n--py-mod-names PY_MOD_NAMES\n                      File containing Python dictionary mapping Fortran\n                      module names to Python ones\n--class-names CLASS_NAMES\n                      File containing Python dictionary mapping Fortran type\n                      names to Python classes\n--joint-modules JOINT_MODULES\n                      File containing Python dictionary mapping modules\n                      defining times to list of additional modules defining\n                      methods\n-m MOD_NAME, --mod-name MOD_NAME\n                      Name of output extension module (without .so\n                      extension).\n-M, --move-methods    Convert routines with derived type instance as first\n                      agument into class methods\n--shorten-routine-names\n                      Remove type name prefix from routine names, e.g.\n                      cell_symmetrise() -&gt; symmetrise()\n-P, --package         Generate a Python package instead of a single module\n-a ABORT_FUNC, --abort-func ABORT_FUNC\n                      Name of Fortran subroutine to invoke if a fatal error\n                      occurs\n--only [ONLY [ONLY ...]]\n                      Subroutines to include in wrapper\n--skip [SKIP [SKIP ...]]\n                      Subroutines to exclude modules and subroutines from\n                      wrapper\n--skip-types [SKIP_TYPES [SKIP_TYPES ...]]\n                      Subroutines to exclude types from wrapper\n--force-public [FORCE_PUBLIC [FORCE_PUBLIC ...]]\n                      Names which are forced to be make public\n--default-to-inout    Sets all arguments without intent to intent(inout)\n--conf-file CONF_FILE\n                      Use Python configuration script to set options\n--documentation-plugin DOCUMENTATION_PLUGIN\n                      Use Python script for expanding the documentation of\n                      functions and subroutines. All lines of the given tree\n                      object are passed to it with a reference to its\n                      documentation\n--py-max-line-length PY_MAX_LINE_LENGTH\n                      Maximum length of lines in python files written.\n                      Default: 80\n--f90-max-line-length F90_MAX_LINE_LENGTH\n                      Maximum length of lines in fortan files written.\n                      Default: 120\n</pre>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>James Kermode <a href=\"https://github.com/jameskermode\" rel=\"nofollow\">jameskermode</a></p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Tamas Stenczel <a href=\"https://github.com/stenczelt\" rel=\"nofollow\">stenczelt</a></li>\n<li>Steven Murray <a href=\"https://github.com/steven-murray\" rel=\"nofollow\">steven-murray</a></li>\n<li>Greg Corbett <a href=\"https://github.com/gregcorbett\" rel=\"nofollow\">gregcorbett</a></li>\n<li>Bob Fischer <a href=\"https://github.com/citibob\" rel=\"nofollow\">citibob</a></li>\n<li>David Verelst <a href=\"https://github.com/davidovitch\" rel=\"nofollow\">davidovitch</a></li>\n<li>James Orr <a href=\"https://github.com/jamesorr\" rel=\"nofollow\">jamesorr</a></li>\n<li><a href=\"https://github.com/yvesch\" rel=\"nofollow\">yvesch</a></li>\n<li><a href=\"https://github.com/mcuntz\" rel=\"nofollow\">Matthias Cuntz</a></li>\n<li>Balthasar Reuter <a href=\"https://github.com/reuterbal\" rel=\"nofollow\">reuterbal</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7170418, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "34384c83d57d3ee13d3ed19d85b15935", "sha256": "afa19c27e952f167cdd20497f97864ffaa0ac1033733b2f46d86951a618364b1"}, "downloads": -1, "filename": "f90wrap-0.1.4.tar.gz", "has_sig": false, "md5_digest": "34384c83d57d3ee13d3ed19d85b15935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66217, "upload_time": "2016-08-09T08:47:31", "upload_time_iso_8601": "2016-08-09T08:47:31.232055Z", "url": "https://files.pythonhosted.org/packages/05/80/80e4f6d3829a583d1bf9fad4735c9c4f7d9e96d0c51737413aeb6b7c07b7/f90wrap-0.1.4.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4c508a29cc4867d9cb9cd9c60df8ef06", "sha256": "13975ab3b4f4718dea5fc5385d8375fcc9969436905e8f1d0049eace7b9f6113"}, "downloads": -1, "filename": "f90wrap-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4c508a29cc4867d9cb9cd9c60df8ef06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71204, "upload_time": "2019-08-02T08:53:20", "upload_time_iso_8601": "2019-08-02T08:53:20.198942Z", "url": "https://files.pythonhosted.org/packages/dc/7c/8ba6fd3277470d134007bf174eca95500a534933a499e46327fe41bdf5b3/f90wrap-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6778b2d8800efa85367343d675e5cd03", "sha256": "f644f160b81483c582b140d5302715995b9bfcb678e7e9df96283a37fce6d230"}, "downloads": -1, "filename": "f90wrap-0.2.2-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "6778b2d8800efa85367343d675e5cd03", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 97809, "upload_time": "2020-01-10T15:39:22", "upload_time_iso_8601": "2020-01-10T15:39:22.849353Z", "url": "https://files.pythonhosted.org/packages/fc/76/f3126e3f9e2f75b8cbda8396587509245857d2e0ff9ed9146fec7e901a93/f90wrap-0.2.2-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1a1a1b2ae7a948300ff00eea1937d1f", "sha256": "6acd576d4f957d274f503e02a515addca5780c390d46d3a0ef971948269075dc"}, "downloads": -1, "filename": "f90wrap-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b1a1a1b2ae7a948300ff00eea1937d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72333, "upload_time": "2020-01-10T15:43:16", "upload_time_iso_8601": "2020-01-10T15:43:16.421148Z", "url": "https://files.pythonhosted.org/packages/61/d8/02fe582693f91d505d49e3e0c4fac3e2035427f1d696d47265a736b0ff49/f90wrap-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "7db1c91fcd65929ab455299f923d2184", "sha256": "5577ea92934c5aad378df21fb0805b5fb433d6f2b8b9c1bf1a9ec1e3bf842cff"}, "downloads": -1, "filename": "f90wrap-0.2.3.tar.gz", "has_sig": false, "md5_digest": "7db1c91fcd65929ab455299f923d2184", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74180, "upload_time": "2020-05-05T08:52:31", "upload_time_iso_8601": "2020-05-05T08:52:31.535119Z", "url": "https://files.pythonhosted.org/packages/9d/70/857ab1c1a544bbfc63a253ca3ed7722c101762dfc2a3e2ed843ff42219a2/f90wrap-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7db1c91fcd65929ab455299f923d2184", "sha256": "5577ea92934c5aad378df21fb0805b5fb433d6f2b8b9c1bf1a9ec1e3bf842cff"}, "downloads": -1, "filename": "f90wrap-0.2.3.tar.gz", "has_sig": false, "md5_digest": "7db1c91fcd65929ab455299f923d2184", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74180, "upload_time": "2020-05-05T08:52:31", "upload_time_iso_8601": "2020-05-05T08:52:31.535119Z", "url": "https://files.pythonhosted.org/packages/9d/70/857ab1c1a544bbfc63a253ca3ed7722c101762dfc2a3e2ed843ff42219a2/f90wrap-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:16 2020"}