{"info": {"author": "Neuraxio Inc.", "author_email": "guillaume.chevalier@neuraxio.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Healthcare Industry", "Intended Audience :: Information Technology", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Adaptive Technologies", "Topic :: Office/Business", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Artificial Life", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development", "Topic :: Software Development :: Assemblers", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Pre-processors", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: System", "Topic :: Text Processing", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: Linguistic", "Topic :: Utilities", "Typing :: Typed"], "description": "# Neuraxle-TensorFlow\n\nTensorFlow steps, savers, and utilities for [Neuraxle](https://github.com/Neuraxio/Neuraxle).\n\nNeuraxle is a Machine Learning (ML) library for building neat pipelines, providing the right abstractions to both ease research, development, and deployment of your ML applications.\n\n## Usage example\n\n[See also a complete example](https://github.com/guillaume-chevalier/seq2seq-signal-prediction)\n\n### Tensorflow 1\n\nCreate a tensorflow 1 model step by giving it a graph, an optimizer, and a loss function. \n\n```python\ndef create_graph(step: TensorflowV1ModelStep):\n    tf.placeholder('float', name='data_inputs')\n    tf.placeholder('float', name='expected_outputs')\n\n    tf.Variable(np.random.rand(), name='weight')\n    tf.Variable(np.random.rand(), name='bias')\n\n    return tf.add(tf.multiply(step['data_inputs'], step['weight']), step['bias'])\n\n\"\"\"\n# Note: you can also return a tuple containing two elements : tensor for training (fit), tensor for inference (transform)\ndef create_graph(step: TensorflowV1ModelStep)\n    # ...\n    decoder_outputs_training = create_training_decoder(step, encoder_state, decoder_cell)\n    decoder_outputs_inference = create_inference_decoder(step, encoder_state, decoder_cell)\n\n    return decoder_outputs_training, decoder_outputs_inference\n\"\"\"\n\n\ndef create_loss(step: TensorflowV1ModelStep):\n    return tf.reduce_sum(tf.pow(step['output'] - step['expected_outputs'], 2)) / (2 * N_SAMPLES)\n\ndef create_optimizer(step: TensorflowV1ModelStep):\n    return tf.train.GradientDescentOptimizer(step.hyperparams['learning_rate'])\n\nmodel_step = TensorflowV1ModelStep(\n    create_grah=create_graph,\n    create_loss=create_loss,\n    create_optimizer=create_optimizer,\n    has_expected_outputs=True\n).set_hyperparams(HyperparameterSamples({\n    'learning_rate': 0.01\n})).set_hyperparams_space(HyperparameterSpace({\n    'learning_rate': LogUniform(0.0001, 0.01)\n}))\n```\n\n### Tensorflow 2\n\nCreate a tensorflow 2 model step by giving it a model, an optimizer, and a loss function. \n\n```python\ndef create_model(step: Tensorflow2ModelStep):\n    return LinearModel()\n\ndef create_optimizer(step: Tensorflow2ModelStep):\n    return tf.keras.optimizers.Adam(0.1)\n\ndef create_loss(step: Tensorflow2ModelStep, expected_outputs, predicted_outputs):\n    return tf.reduce_mean(tf.abs(predicted_outputs - expected_outputs))\n\nmodel_step = Tensorflow2ModelStep(\n    create_model=create_model,\n    create_optimizer=create_optimizer,\n    create_loss=create_loss,\n    tf_model_checkpoint_folder=os.path.join(tmpdir, 'tf_checkpoints')\n)\n```\n\n### Deep Learning Pipeline\n\n```python\nbatch_size = 100\nepochs = 3\nvalidation_size = 0.15\nmax_plotted_validation_predictions = 10\n\nseq2seq_pipeline_hyperparams = HyperparameterSamples({\n    'hidden_dim': 100,\n    'layers_stacked_count': 2,\n    'lambda_loss_amount': 0.0003,\n    'learning_rate': 0.006,\n    'window_size_future': sequence_length,\n    'output_dim': output_dim,\n    'input_dim': input_dim\n})\nfeature_0_metric = metric_3d_to_2d_wrapper(mean_squared_error)\nmetrics = {'mse': feature_0_metric}\n\nsignal_prediction_pipeline = Pipeline([\n    ForEachDataInput(MeanStdNormalizer()),\n    ToNumpy(),\n    Tensorflow2ModelStep(\n        create_model=create_model,\n        create_loss=create_loss,\n        create_optimizer=create_optimizer,\n        expected_outputs_dtype=tf.dtypes.float32,\n        data_inputs_dtype=tf.dtypes.float32,\n        print_loss=True\n    ).set_hyperparams(seq2seq_pipeline_hyperparams)\n]).set_name('SignalPrediction')\n\npipeline = Pipeline([EpochRepeater(\n    ValidationSplitWrapper(\n        MetricsWrapper(Pipeline([\n            TrainOnlyWrapper(DataShuffler()),\n            MiniBatchSequentialPipeline([\n                MetricsWrapper(\n                    signal_prediction_pipeline,\n                    metrics=metrics,\n                    name='batch_metrics'\n                )\n            ], batch_size=batch_size)\n        ]), metrics=metrics,\n            name='epoch_metrics',\n            print_metrics=True\n        ),\n        test_size=validation_size,\n        scoring_function=feature_0_metric\n    ), epochs=epochs)])\n\npipeline, outputs = pipeline.fit_transform(data_inputs, expected_outputs)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Neuraxio/Neuraxle-Tensorflow/tarball/0.1.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Neuraxio/Neuraxle-Tensorflow", "keywords": "pipeline pipelines data science machine learning deep learning", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "neuraxle-tensorflow", "package_url": "https://pypi.org/project/neuraxle-tensorflow/", "platform": "", "project_url": "https://pypi.org/project/neuraxle-tensorflow/", "project_urls": {"Download": "https://github.com/Neuraxio/Neuraxle-Tensorflow/tarball/0.1.1", "Homepage": "https://github.com/Neuraxio/Neuraxle-Tensorflow"}, "release_url": "https://pypi.org/project/neuraxle-tensorflow/0.1.1/", "requires_dist": ["neuraxle (>=0.3.1)"], "requires_python": "", "summary": "TensorFlow steps, savers, and utilities for Neuraxle. Neuraxle is a Machine Learning (ML) library for building neat pipelines, providing the right abstractions to both ease research, development, and deployment of your ML applications.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Neuraxle-TensorFlow</h1>\n<p>TensorFlow steps, savers, and utilities for <a href=\"https://github.com/Neuraxio/Neuraxle\" rel=\"nofollow\">Neuraxle</a>.</p>\n<p>Neuraxle is a Machine Learning (ML) library for building neat pipelines, providing the right abstractions to both ease research, development, and deployment of your ML applications.</p>\n<h2>Usage example</h2>\n<p><a href=\"https://github.com/guillaume-chevalier/seq2seq-signal-prediction\" rel=\"nofollow\">See also a complete example</a></p>\n<h3>Tensorflow 1</h3>\n<p>Create a tensorflow 1 model step by giving it a graph, an optimizer, and a loss function.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">create_graph</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">TensorflowV1ModelStep</span><span class=\"p\">):</span>\n    <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">placeholder</span><span class=\"p\">(</span><span class=\"s1\">'float'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'data_inputs'</span><span class=\"p\">)</span>\n    <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">placeholder</span><span class=\"p\">(</span><span class=\"s1\">'float'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'expected_outputs'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'weight'</span><span class=\"p\">)</span>\n    <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'bias'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">[</span><span class=\"s1\">'data_inputs'</span><span class=\"p\">],</span> <span class=\"n\">step</span><span class=\"p\">[</span><span class=\"s1\">'weight'</span><span class=\"p\">]),</span> <span class=\"n\">step</span><span class=\"p\">[</span><span class=\"s1\">'bias'</span><span class=\"p\">])</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\"># Note: you can also return a tuple containing two elements : tensor for training (fit), tensor for inference (transform)</span>\n<span class=\"sd\">def create_graph(step: TensorflowV1ModelStep)</span>\n<span class=\"sd\">    # ...</span>\n<span class=\"sd\">    decoder_outputs_training = create_training_decoder(step, encoder_state, decoder_cell)</span>\n<span class=\"sd\">    decoder_outputs_inference = create_inference_decoder(step, encoder_state, decoder_cell)</span>\n\n<span class=\"sd\">    return decoder_outputs_training, decoder_outputs_inference</span>\n<span class=\"sd\">\"\"\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_loss</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">TensorflowV1ModelStep</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">reduce_sum</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">[</span><span class=\"s1\">'output'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">step</span><span class=\"p\">[</span><span class=\"s1\">'expected_outputs'</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">N_SAMPLES</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_optimizer</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">TensorflowV1ModelStep</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">GradientDescentOptimizer</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"o\">.</span><span class=\"n\">hyperparams</span><span class=\"p\">[</span><span class=\"s1\">'learning_rate'</span><span class=\"p\">])</span>\n\n<span class=\"n\">model_step</span> <span class=\"o\">=</span> <span class=\"n\">TensorflowV1ModelStep</span><span class=\"p\">(</span>\n    <span class=\"n\">create_grah</span><span class=\"o\">=</span><span class=\"n\">create_graph</span><span class=\"p\">,</span>\n    <span class=\"n\">create_loss</span><span class=\"o\">=</span><span class=\"n\">create_loss</span><span class=\"p\">,</span>\n    <span class=\"n\">create_optimizer</span><span class=\"o\">=</span><span class=\"n\">create_optimizer</span><span class=\"p\">,</span>\n    <span class=\"n\">has_expected_outputs</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_hyperparams</span><span class=\"p\">(</span><span class=\"n\">HyperparameterSamples</span><span class=\"p\">({</span>\n    <span class=\"s1\">'learning_rate'</span><span class=\"p\">:</span> <span class=\"mf\">0.01</span>\n<span class=\"p\">}))</span><span class=\"o\">.</span><span class=\"n\">set_hyperparams_space</span><span class=\"p\">(</span><span class=\"n\">HyperparameterSpace</span><span class=\"p\">({</span>\n    <span class=\"s1\">'learning_rate'</span><span class=\"p\">:</span> <span class=\"n\">LogUniform</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">,</span> <span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"p\">}))</span>\n</pre>\n<h3>Tensorflow 2</h3>\n<p>Create a tensorflow 2 model step by giving it a model, an optimizer, and a loss function.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">create_model</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">Tensorflow2ModelStep</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">LinearModel</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_optimizer</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">Tensorflow2ModelStep</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_loss</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"n\">Tensorflow2ModelStep</span><span class=\"p\">,</span> <span class=\"n\">expected_outputs</span><span class=\"p\">,</span> <span class=\"n\">predicted_outputs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">reduce_mean</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">predicted_outputs</span> <span class=\"o\">-</span> <span class=\"n\">expected_outputs</span><span class=\"p\">))</span>\n\n<span class=\"n\">model_step</span> <span class=\"o\">=</span> <span class=\"n\">Tensorflow2ModelStep</span><span class=\"p\">(</span>\n    <span class=\"n\">create_model</span><span class=\"o\">=</span><span class=\"n\">create_model</span><span class=\"p\">,</span>\n    <span class=\"n\">create_optimizer</span><span class=\"o\">=</span><span class=\"n\">create_optimizer</span><span class=\"p\">,</span>\n    <span class=\"n\">create_loss</span><span class=\"o\">=</span><span class=\"n\">create_loss</span><span class=\"p\">,</span>\n    <span class=\"n\">tf_model_checkpoint_folder</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s1\">'tf_checkpoints'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Deep Learning Pipeline</h3>\n<pre><span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">epochs</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">validation_size</span> <span class=\"o\">=</span> <span class=\"mf\">0.15</span>\n<span class=\"n\">max_plotted_validation_predictions</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"n\">seq2seq_pipeline_hyperparams</span> <span class=\"o\">=</span> <span class=\"n\">HyperparameterSamples</span><span class=\"p\">({</span>\n    <span class=\"s1\">'hidden_dim'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"s1\">'layers_stacked_count'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'lambda_loss_amount'</span><span class=\"p\">:</span> <span class=\"mf\">0.0003</span><span class=\"p\">,</span>\n    <span class=\"s1\">'learning_rate'</span><span class=\"p\">:</span> <span class=\"mf\">0.006</span><span class=\"p\">,</span>\n    <span class=\"s1\">'window_size_future'</span><span class=\"p\">:</span> <span class=\"n\">sequence_length</span><span class=\"p\">,</span>\n    <span class=\"s1\">'output_dim'</span><span class=\"p\">:</span> <span class=\"n\">output_dim</span><span class=\"p\">,</span>\n    <span class=\"s1\">'input_dim'</span><span class=\"p\">:</span> <span class=\"n\">input_dim</span>\n<span class=\"p\">})</span>\n<span class=\"n\">feature_0_metric</span> <span class=\"o\">=</span> <span class=\"n\">metric_3d_to_2d_wrapper</span><span class=\"p\">(</span><span class=\"n\">mean_squared_error</span><span class=\"p\">)</span>\n<span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'mse'</span><span class=\"p\">:</span> <span class=\"n\">feature_0_metric</span><span class=\"p\">}</span>\n\n<span class=\"n\">signal_prediction_pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">([</span>\n    <span class=\"n\">ForEachDataInput</span><span class=\"p\">(</span><span class=\"n\">MeanStdNormalizer</span><span class=\"p\">()),</span>\n    <span class=\"n\">ToNumpy</span><span class=\"p\">(),</span>\n    <span class=\"n\">Tensorflow2ModelStep</span><span class=\"p\">(</span>\n        <span class=\"n\">create_model</span><span class=\"o\">=</span><span class=\"n\">create_model</span><span class=\"p\">,</span>\n        <span class=\"n\">create_loss</span><span class=\"o\">=</span><span class=\"n\">create_loss</span><span class=\"p\">,</span>\n        <span class=\"n\">create_optimizer</span><span class=\"o\">=</span><span class=\"n\">create_optimizer</span><span class=\"p\">,</span>\n        <span class=\"n\">expected_outputs_dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">dtypes</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span>\n        <span class=\"n\">data_inputs_dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">dtypes</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span>\n        <span class=\"n\">print_loss</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_hyperparams</span><span class=\"p\">(</span><span class=\"n\">seq2seq_pipeline_hyperparams</span><span class=\"p\">)</span>\n<span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">set_name</span><span class=\"p\">(</span><span class=\"s1\">'SignalPrediction'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">([</span><span class=\"n\">EpochRepeater</span><span class=\"p\">(</span>\n    <span class=\"n\">ValidationSplitWrapper</span><span class=\"p\">(</span>\n        <span class=\"n\">MetricsWrapper</span><span class=\"p\">(</span><span class=\"n\">Pipeline</span><span class=\"p\">([</span>\n            <span class=\"n\">TrainOnlyWrapper</span><span class=\"p\">(</span><span class=\"n\">DataShuffler</span><span class=\"p\">()),</span>\n            <span class=\"n\">MiniBatchSequentialPipeline</span><span class=\"p\">([</span>\n                <span class=\"n\">MetricsWrapper</span><span class=\"p\">(</span>\n                    <span class=\"n\">signal_prediction_pipeline</span><span class=\"p\">,</span>\n                    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"n\">metrics</span><span class=\"p\">,</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'batch_metrics'</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">],</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span><span class=\"p\">)</span>\n        <span class=\"p\">]),</span> <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"n\">metrics</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'epoch_metrics'</span><span class=\"p\">,</span>\n            <span class=\"n\">print_metrics</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"n\">validation_size</span><span class=\"p\">,</span>\n        <span class=\"n\">scoring_function</span><span class=\"o\">=</span><span class=\"n\">feature_0_metric</span>\n    <span class=\"p\">),</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">epochs</span><span class=\"p\">)])</span>\n\n<span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">data_inputs</span><span class=\"p\">,</span> <span class=\"n\">expected_outputs</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6643937, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8fdda04dbbff154ac894b77a2a3edec9", "sha256": "e639d75b892e377ebe8e36f747430aab68d86fb830ecc33bd741c020ee1b438e"}, "downloads": -1, "filename": "neuraxle_tensorflow-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8fdda04dbbff154ac894b77a2a3edec9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13778, "upload_time": "2020-01-16T06:37:59", "upload_time_iso_8601": "2020-01-16T06:37:59.399860Z", "url": "https://files.pythonhosted.org/packages/b2/85/bd2a4f84c17bb4769ea67d7aca9adda25659fe4b98eee37d49ba83987e51/neuraxle_tensorflow-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "753c95c481d8137946e39036b34c8377", "sha256": "8a87757481de9a9a5ed2e20dd4a5625119bf2438a882b83b3fea9cd6e6dfe0f3"}, "downloads": -1, "filename": "neuraxle_tensorflow-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "753c95c481d8137946e39036b34c8377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13005, "upload_time": "2020-02-17T04:14:06", "upload_time_iso_8601": "2020-02-17T04:14:06.020099Z", "url": "https://files.pythonhosted.org/packages/ea/0b/d3650c4bbb3f81c25cb4da330b08917bbbf1cb00d572b5e1bed0676a1b63/neuraxle_tensorflow-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9334f44bc1320bfac04d322d83d33652", "sha256": "7baa55f6baa3af8e73802e8988cfcbc65d0ca62f07e2ac16c73c305323f5cee5"}, "downloads": -1, "filename": "neuraxle_tensorflow-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9334f44bc1320bfac04d322d83d33652", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8535, "upload_time": "2020-02-17T04:14:07", "upload_time_iso_8601": "2020-02-17T04:14:07.525211Z", "url": "https://files.pythonhosted.org/packages/41/f4/2df17aadcae90feac23c9ccf278d6a3940d801726c0d2440bbf164efda29/neuraxle_tensorflow-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "753c95c481d8137946e39036b34c8377", "sha256": "8a87757481de9a9a5ed2e20dd4a5625119bf2438a882b83b3fea9cd6e6dfe0f3"}, "downloads": -1, "filename": "neuraxle_tensorflow-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "753c95c481d8137946e39036b34c8377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13005, "upload_time": "2020-02-17T04:14:06", "upload_time_iso_8601": "2020-02-17T04:14:06.020099Z", "url": "https://files.pythonhosted.org/packages/ea/0b/d3650c4bbb3f81c25cb4da330b08917bbbf1cb00d572b5e1bed0676a1b63/neuraxle_tensorflow-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9334f44bc1320bfac04d322d83d33652", "sha256": "7baa55f6baa3af8e73802e8988cfcbc65d0ca62f07e2ac16c73c305323f5cee5"}, "downloads": -1, "filename": "neuraxle_tensorflow-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9334f44bc1320bfac04d322d83d33652", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8535, "upload_time": "2020-02-17T04:14:07", "upload_time_iso_8601": "2020-02-17T04:14:07.525211Z", "url": "https://files.pythonhosted.org/packages/41/f4/2df17aadcae90feac23c9ccf278d6a3940d801726c0d2440bbf164efda29/neuraxle_tensorflow-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:47 2020"}