{"info": {"author": "Brian Muller", "author_email": "bamuller@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Python Distributed Hash Table\n[![Build Status](https://secure.travis-ci.org/bmuller/kademlia.png?branch=master)](https://travis-ci.org/bmuller/kademlia)\n[![Docs Status](https://readthedocs.org/projects/kademlia/badge/?version=latest)](http://kademlia.readthedocs.org)\n[![Coverage Status](https://coveralls.io/repos/github/bmuller/twistar/badge.svg?branch=master)](https://coveralls.io/github/bmuller/twistar?branch=master)\n\n**Documentation can be found at [kademlia.readthedocs.org](http://kademlia.readthedocs.org/).**\n\nThis library is an asynchronous Python implementation of the [Kademlia distributed hash table](http://en.wikipedia.org/wiki/Kademlia).  It uses the [asyncio library](https://docs.python.org/3/library/asyncio.html) in Python 3 to provide asynchronous communication.  The nodes communicate using [RPC over UDP](https://github.com/bmuller/rpcudp) to communiate, meaning that it is capable of working behind a [NAT](http://en.wikipedia.org/wiki/Network_address_translation).\n\n\n**This library is a fork of the kademlia Python library. It is intended to be roughly equivalent, but due to this library having security fixes, it is not compatible with the original nor other reference kademlia implementations. Specifically the use of sha1 and pickle have been replaced by better choices**\n\n\n## Installation\n\n```\npip install secure-kademlia\n```\n\n## Usage\n*This assumes you have a working familiarity with [asyncio](https://docs.python.org/3/library/asyncio.html).*\n\nAssuming you want to connect to an existing network:\n\n```python\nimport asyncio\nfrom kademlia.network import Server\n\nasync def run():\n    # Create a node and start listening on port 5678\n    node = Server()\n    await node.listen(5678)\n\n    # Bootstrap the node by connecting to other known nodes, in this case\n    # replace 123.123.123.123 with the IP of another node and optionally\n    # give as many ip/port combos as you can for other nodes.\n    await node.bootstrap([(\"123.123.123.123\", 5678)])\n\n    # set a value for the key \"my-key\" on the network\n    await node.set(\"my-key\", \"my awesome value\")\n\n    # get the value associated with \"my-key\" from the network\n    result = await node.get(\"my-key\")\n    print(result)\n\nasyncio.run(run())\n```\n\n## Initializing a Network\nIf you're starting a new network from scratch, just omit the `node.bootstrap` call in the example above.  Then, bootstrap other nodes by connecting to the first node you started.\n\nSee the examples folder for a first node example that other nodes can bootstrap connect to and some code that gets and sets a key/value.\n\n## Logging\nThis library uses the standard [Python logging library](https://docs.python.org/3/library/logging.html).  To see debut output printed to STDOUT, for instance, use:\n\n```python\nimport logging\n\nlog = logging.getLogger('kademlia')\nlog.setLevel(logging.DEBUG)\nlog.addHandler(logging.StreamHandler())\n```\n\n## Running Tests\nTo run tests:\n\n```\npip install -r dev-requirements.txt\npytest\n```\n\n## Reporting Issues\nPlease report all issues [on github](https://github.com/bmuller/kademlia/issues).\n\n## Fidelity to Original Paper\nThe current implementation should be an accurate implementation of all aspects of the paper save one - in Section 2.3 there is the requirement that the original publisher of a key/value republish it every 24 hours.  This library does not do this (though you can easily do this manually).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/beardog108/kademlia", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "secure-kademlia", "package_url": "https://pypi.org/project/secure-kademlia/", "platform": "", "project_url": "https://pypi.org/project/secure-kademlia/", "project_urls": {"Homepage": "https://github.com/beardog108/kademlia"}, "release_url": "https://pypi.org/project/secure-kademlia/0.0.0/", "requires_dist": ["rpcudp (>=4.0.1)", "umsgpack"], "requires_python": "~=3.6", "summary": "Kademlia is a distributed hash table for decentralized peer-to-peer computer networks.", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Distributed Hash Table</h1>\n<p><a href=\"https://travis-ci.org/bmuller/kademlia\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cc923cb3d80167b0a61d144742993923ce784ae/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f626d756c6c65722f6b6164656d6c69612e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://kademlia.readthedocs.org\" rel=\"nofollow\"><img alt=\"Docs Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e86df40d41e9daa11e5048fe45ac8e91a62ed362/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6b6164656d6c69612f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/github/bmuller/twistar?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef67bf2f82fc427f37ec6e985efcdfeb7e4144e2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f626d756c6c65722f747769737461722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>Documentation can be found at <a href=\"http://kademlia.readthedocs.org/\" rel=\"nofollow\">kademlia.readthedocs.org</a>.</strong></p>\n<p>This library is an asynchronous Python implementation of the <a href=\"http://en.wikipedia.org/wiki/Kademlia\" rel=\"nofollow\">Kademlia distributed hash table</a>.  It uses the <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio library</a> in Python 3 to provide asynchronous communication.  The nodes communicate using <a href=\"https://github.com/bmuller/rpcudp\" rel=\"nofollow\">RPC over UDP</a> to communiate, meaning that it is capable of working behind a <a href=\"http://en.wikipedia.org/wiki/Network_address_translation\" rel=\"nofollow\">NAT</a>.</p>\n<p><strong>This library is a fork of the kademlia Python library. It is intended to be roughly equivalent, but due to this library having security fixes, it is not compatible with the original nor other reference kademlia implementations. Specifically the use of sha1 and pickle have been replaced by better choices</strong></p>\n<h2>Installation</h2>\n<pre><code>pip install secure-kademlia\n</code></pre>\n<h2>Usage</h2>\n<p><em>This assumes you have a working familiarity with <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a>.</em></p>\n<p>Assuming you want to connect to an existing network:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">kademlia.network</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Create a node and start listening on port 5678</span>\n    <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">5678</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Bootstrap the node by connecting to other known nodes, in this case</span>\n    <span class=\"c1\"># replace 123.123.123.123 with the IP of another node and optionally</span>\n    <span class=\"c1\"># give as many ip/port combos as you can for other nodes.</span>\n    <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">bootstrap</span><span class=\"p\">([(</span><span class=\"s2\">\"123.123.123.123\"</span><span class=\"p\">,</span> <span class=\"mi\">5678</span><span class=\"p\">)])</span>\n\n    <span class=\"c1\"># set a value for the key \"my-key\" on the network</span>\n    <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"my-key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my awesome value\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get the value associated with \"my-key\" from the network</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"my-key\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h2>Initializing a Network</h2>\n<p>If you're starting a new network from scratch, just omit the <code>node.bootstrap</code> call in the example above.  Then, bootstrap other nodes by connecting to the first node you started.</p>\n<p>See the examples folder for a first node example that other nodes can bootstrap connect to and some code that gets and sets a key/value.</p>\n<h2>Logging</h2>\n<p>This library uses the standard <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">Python logging library</a>.  To see debut output printed to STDOUT, for instance, use:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'kademlia'</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">())</span>\n</pre>\n<h2>Running Tests</h2>\n<p>To run tests:</p>\n<pre><code>pip install -r dev-requirements.txt\npytest\n</code></pre>\n<h2>Reporting Issues</h2>\n<p>Please report all issues <a href=\"https://github.com/bmuller/kademlia/issues\" rel=\"nofollow\">on github</a>.</p>\n<h2>Fidelity to Original Paper</h2>\n<p>The current implementation should be an accurate implementation of all aspects of the paper save one - in Section 2.3 there is the requirement that the original publisher of a key/value republish it every 24 hours.  This library does not do this (though you can easily do this manually).</p>\n\n          </div>"}, "last_serial": 7161552, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "6a74051e4f517bf3090911f292c8d525", "sha256": "8cd4bf3926fddac0452b2f2ae711763c86770f0cdb8a02b14fcd93edd015926f"}, "downloads": -1, "filename": "secure_kademlia-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6a74051e4f517bf3090911f292c8d525", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 20075, "upload_time": "2020-05-04T05:43:15", "upload_time_iso_8601": "2020-05-04T05:43:15.239438Z", "url": "https://files.pythonhosted.org/packages/2c/cd/6204b5f497c83000e1d41a4ec64444d34b953c659d75a6b66356efb8d37a/secure_kademlia-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "507e81507e6c55dbcb8066695644e2d8", "sha256": "e4b8be32e3b48e8fff730b09af0b946ab6a4202d89635b6e33a92566b4b08747"}, "downloads": -1, "filename": "secure-kademlia-0.0.0.tar.gz", "has_sig": false, "md5_digest": "507e81507e6c55dbcb8066695644e2d8", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 16700, "upload_time": "2020-05-04T05:43:18", "upload_time_iso_8601": "2020-05-04T05:43:18.749712Z", "url": "https://files.pythonhosted.org/packages/f0/c9/c7f14320a9fd9a490b29bcc3c18d83858b3b083f2efb9455cc3a33ae58d2/secure-kademlia-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a74051e4f517bf3090911f292c8d525", "sha256": "8cd4bf3926fddac0452b2f2ae711763c86770f0cdb8a02b14fcd93edd015926f"}, "downloads": -1, "filename": "secure_kademlia-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6a74051e4f517bf3090911f292c8d525", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 20075, "upload_time": "2020-05-04T05:43:15", "upload_time_iso_8601": "2020-05-04T05:43:15.239438Z", "url": "https://files.pythonhosted.org/packages/2c/cd/6204b5f497c83000e1d41a4ec64444d34b953c659d75a6b66356efb8d37a/secure_kademlia-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "507e81507e6c55dbcb8066695644e2d8", "sha256": "e4b8be32e3b48e8fff730b09af0b946ab6a4202d89635b6e33a92566b4b08747"}, "downloads": -1, "filename": "secure-kademlia-0.0.0.tar.gz", "has_sig": false, "md5_digest": "507e81507e6c55dbcb8066695644e2d8", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 16700, "upload_time": "2020-05-04T05:43:18", "upload_time_iso_8601": "2020-05-04T05:43:18.749712Z", "url": "https://files.pythonhosted.org/packages/f0/c9/c7f14320a9fd9a490b29bcc3c18d83858b3b083f2efb9455cc3a33ae58d2/secure-kademlia-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:55 2020"}