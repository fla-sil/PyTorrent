{"info": {"author": "Sergey Glazyrin", "author_email": "sergey.glazyrin.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "**************************************\nAscetic Command Runner\n**************************************\n\n.. image:: https://api.travis-ci.org/sergeyglazyrindev/asceticcmdrunner.svg\n   :target: https://travis-ci.org/sergeyglazyrindev/asceticcmdrunner\n   :alt: Travis CI status\n\n.. image:: https://coveralls.io/repos/github/sergeyglazyrindev/asceticcmdrunner/badge.svg?branch=master\n   :target: https://coveralls.io/github/sergeyglazyrindev/asceticcmdrunner?branch=master\n   :alt: Coveralls status\n           \nNot all of our projects are using either django or another *God* framework.\nSo, once we start our hobby project, would be great to put into the game some commands.\nFor example, maybe we need for our hobby project simple command test which loads custom TestRunner, etc\nIn this case this package maybe handy for you!\n\n**************************************\nInstallation\n**************************************\n\nSimply run in your bash:\n\n.. code-block:: bash\n                \n    pip install acmdrunner\n\n**************************************\nUsage\n**************************************\n\nIn your **django like manage.py** command loader, you need to trigger following:\n\n.. code-block:: python\n                \n    import os\n    from acmdrunner import Loader\n\n    ...\n    make all your preparations, initialize project settings, etc\n    ...\n\n    Loader.load_from_directory(os.path.dirname(__file__))\n    Loader.load_from_package('rit.app')\n\nLoader will search recursively in passed folder for folders with name management.\nAnd try to load from folders found file acr_commands.py\n\nAn example of the file acr_commands.py:\n\n.. code-block:: python\n                \n    from acmdrunner.dispatcher import CommandDispatcher\n    command_dispatcher = CommandDispatcher()\n\n\n    def execute(*args):\n        pass\n\n    command_dispatcher.register_command('test', execute)\n\n**register_command** registers specific command and handler for this command.\nYour commands should implement execute method. Better to inherit from BaseCommand.\nBut as it is ascetic, you can simply pass class with execute method implemented.\nThat's all!\n\nTo run command, please trigger following call:\n\n.. code-block:: python\n                \n    from your_package_place import command_dispatcher\n    command_dispatcher.execute_command(command_name, *args, **kwargs)\n\n\n**************************************\nReal usage example\n**************************************\n\nIf you want to load all commands from specific namespace, you can implement following:\n\n.. code-block:: python\n\n    packages_to_traverse = ('rit.app', 'rit.core')\n    for package in packages_to_traverse:\n        Loader.load_from_package(package[0])\n    Loader.load_from_directory(os.path.dirname(os.getcwd()))\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/sergeyglazyrindev/asceticcmdrunner/tarball/1.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sergeyglazyrindev/asceticcmdrunner", "keywords": "command,dispatch", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "acmdrunner", "package_url": "https://pypi.org/project/acmdrunner/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/acmdrunner/", "project_urls": {"Download": "https://github.com/sergeyglazyrindev/asceticcmdrunner/tarball/1.2", "Homepage": "https://github.com/sergeyglazyrindev/asceticcmdrunner"}, "release_url": "https://pypi.org/project/acmdrunner/1.2/", "requires_dist": null, "requires_python": null, "summary": "Ascetic command runner. The most ease way to power your python app with custom management commands", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ascetic-command-runner\">\n<h2>Ascetic Command Runner</h2>\n<a href=\"https://travis-ci.org/sergeyglazyrindev/asceticcmdrunner\" rel=\"nofollow\"><img alt=\"Travis CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a9064e0ba65c39622cff723456823ce5eb95208/68747470733a2f2f6170692e7472617669732d63692e6f72672f736572676579676c617a7972696e6465762f61736365746963636d6472756e6e65722e737667\"></a>\n<a href=\"https://coveralls.io/github/sergeyglazyrindev/asceticcmdrunner?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01d9efe03ef46cd08ca863e6804dc7ccd893466c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f736572676579676c617a7972696e6465762f61736365746963636d6472756e6e65722f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Not all of our projects are using either django or another <em>God</em> framework.\nSo, once we start our hobby project, would be great to put into the game some commands.\nFor example, maybe we need for our hobby project simple command test which loads custom TestRunner, etc\nIn this case this package maybe handy for you!</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Simply run in your bash:</p>\n<pre>pip install acmdrunner\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>In your <strong>django like manage.py</strong> command loader, you need to trigger following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acmdrunner</span> <span class=\"kn\">import</span> <span class=\"n\">Loader</span>\n\n<span class=\"o\">...</span>\n<span class=\"n\">make</span> <span class=\"nb\">all</span> <span class=\"n\">your</span> <span class=\"n\">preparations</span><span class=\"p\">,</span> <span class=\"n\">initialize</span> <span class=\"n\">project</span> <span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">etc</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">Loader</span><span class=\"o\">.</span><span class=\"n\">load_from_directory</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">Loader</span><span class=\"o\">.</span><span class=\"n\">load_from_package</span><span class=\"p\">(</span><span class=\"s1\">'rit.app'</span><span class=\"p\">)</span>\n</pre>\n<p>Loader will search recursively in passed folder for folders with name management.\nAnd try to load from folders found file acr_commands.py</p>\n<p>An example of the file acr_commands.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">acmdrunner.dispatcher</span> <span class=\"kn\">import</span> <span class=\"n\">CommandDispatcher</span>\n<span class=\"n\">command_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">CommandDispatcher</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">command_dispatcher</span><span class=\"o\">.</span><span class=\"n\">register_command</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">execute</span><span class=\"p\">)</span>\n</pre>\n<p><strong>register_command</strong> registers specific command and handler for this command.\nYour commands should implement execute method. Better to inherit from BaseCommand.\nBut as it is ascetic, you can simply pass class with execute method implemented.\nThat\u2019s all!</p>\n<p>To run command, please trigger following call:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">your_package_place</span> <span class=\"kn\">import</span> <span class=\"n\">command_dispatcher</span>\n<span class=\"n\">command_dispatcher</span><span class=\"o\">.</span><span class=\"n\">execute_command</span><span class=\"p\">(</span><span class=\"n\">command_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"real-usage-example\">\n<h2>Real usage example</h2>\n<p>If you want to load all commands from specific namespace, you can implement following:</p>\n<pre><span class=\"n\">packages_to_traverse</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'rit.app'</span><span class=\"p\">,</span> <span class=\"s1\">'rit.core'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">package</span> <span class=\"ow\">in</span> <span class=\"n\">packages_to_traverse</span><span class=\"p\">:</span>\n    <span class=\"n\">Loader</span><span class=\"o\">.</span><span class=\"n\">load_from_package</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">Loader</span><span class=\"o\">.</span><span class=\"n\">load_from_directory</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2115724, "releases": {"0.8": [{"comment_text": "", "digests": {"md5": "bcdcc9aed1a2a36289ab971eecd5d234", "sha256": "b379177e18f17e03794e777acdcb47982200a68eac13f1d0d7f36758f1cb1343"}, "downloads": -1, "filename": "acmdrunner-0.8.tar.gz", "has_sig": false, "md5_digest": "bcdcc9aed1a2a36289ab971eecd5d234", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3729, "upload_time": "2016-05-07T20:51:47", "upload_time_iso_8601": "2016-05-07T20:51:47.323891Z", "url": "https://files.pythonhosted.org/packages/2c/e0/5417f338939d16cade669d749fa42229bdd4f955b487068cca3a759b7633/acmdrunner-0.8.tar.gz", "yanked": false}], "1": [{"comment_text": "", "digests": {"md5": "ba7bae6498cd5cf40ac1530147b17cde", "sha256": "6469c3d3d7b26216d0e565fc7ffdda6aa062e0cac9087041894a85b1d2589e61"}, "downloads": -1, "filename": "acmdrunner-1.tar.gz", "has_sig": false, "md5_digest": "ba7bae6498cd5cf40ac1530147b17cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3689, "upload_time": "2016-05-09T14:50:42", "upload_time_iso_8601": "2016-05-09T14:50:42.541380Z", "url": "https://files.pythonhosted.org/packages/97/26/df3492ed291831aa749d987d0e58e2500fa6c5cafd2bb4bfba23d34a60bc/acmdrunner-1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "4519fea8e947217aa6dfeb33ecf51472", "sha256": "d350f82148545003ff0b18c3909538ea1e2877099cf6667b8b772d6dcdad2b1f"}, "downloads": -1, "filename": "acmdrunner-1.1.tar.gz", "has_sig": false, "md5_digest": "4519fea8e947217aa6dfeb33ecf51472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3695, "upload_time": "2016-05-09T14:53:26", "upload_time_iso_8601": "2016-05-09T14:53:26.592515Z", "url": "https://files.pythonhosted.org/packages/ce/0f/536963ffb044bff26f5db8738ea27fc13b9dd9d5c7b5106bcf6380e46a64/acmdrunner-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "789e2fb5cdb7bb91248aefe8d8a0513e", "sha256": "b45c8ce8ebcdbebedc3301a18090fbcff40fede18ef2554d75403f87aa5b6a8d"}, "downloads": -1, "filename": "acmdrunner-1.2.tar.gz", "has_sig": false, "md5_digest": "789e2fb5cdb7bb91248aefe8d8a0513e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3653, "upload_time": "2016-05-14T17:37:41", "upload_time_iso_8601": "2016-05-14T17:37:41.711085Z", "url": "https://files.pythonhosted.org/packages/1c/eb/ddd8a48d542a88710e9191b82a70443b59bd8f5cb71e105f70f8d960f67c/acmdrunner-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "789e2fb5cdb7bb91248aefe8d8a0513e", "sha256": "b45c8ce8ebcdbebedc3301a18090fbcff40fede18ef2554d75403f87aa5b6a8d"}, "downloads": -1, "filename": "acmdrunner-1.2.tar.gz", "has_sig": false, "md5_digest": "789e2fb5cdb7bb91248aefe8d8a0513e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3653, "upload_time": "2016-05-14T17:37:41", "upload_time_iso_8601": "2016-05-14T17:37:41.711085Z", "url": "https://files.pythonhosted.org/packages/1c/eb/ddd8a48d542a88710e9191b82a70443b59bd8f5cb71e105f70f8d960f67c/acmdrunner-1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:35 2020"}