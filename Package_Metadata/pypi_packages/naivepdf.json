{"info": {"author": "naivefeeling", "author_email": "625424539@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# NaivePDF \n*yet another pdf texts and tables extractor*\n\nThis project is inspired by [pdfminer](https://github.com/euske/pdfminer), \nand the pdf parts use, rewrite or redesign a lots of it's codes.\n\nThe main purpose of this project is to provide a tool \nthat can naively extract text lines and **bordered tables** from pdf files, \nand write them into a html file. \nIn most cases it works well.\n\nOn the other hand, it's pdf parts can be an alternative of pdfminer\nthat you can use it to extract texts, lines and shapes more simply.\n\n\n# How to Install\n* Python3.6+ required\n\n```cmd\npip install naivepdf\n```\n\n# Example of Use\n\nvery simple to use\n\n```python\n# encoding: utf-8\n\nfrom naivepdf.pdfdocument import PDFDocument\nfrom naivepdf.reconstructor import PageReconstructor\nfrom naivepdf.utils.html import html\n\n\ndef main():\n    with open('examples/1206061047.pdf', 'rb') as fp:\n        data = []\n        doc = PDFDocument(fp)\n        for i, page in enumerate(doc.pages):\n            # as an alternative of pdfminer, just:\n            # data.append(page.data)\n            reconstructor = PageReconstructor(page)\n            data.extend(reconstructor.reconstruct())\n\n    # as an alternative of pdfminer, just:\n    # return data\n    with open('examples/1206061047.html', 'w', encoding='utf-8') as fp:\n        html(fp, data)\n\n\nif __name__ == '__main__':\n    main()\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/naivefeeling/naivepdf.git", "keywords": "pdf,pdfparser,pdfextract", "license": "", "maintainer": "", "maintainer_email": "", "name": "naivepdf", "package_url": "https://pypi.org/project/naivepdf/", "platform": "", "project_url": "https://pypi.org/project/naivepdf/", "project_urls": {"Homepage": "https://github.com/naivefeeling/naivepdf.git"}, "release_url": "https://pypi.org/project/naivepdf/0.3/", "requires_dist": null, "requires_python": "", "summary": "yet another pdf texts and tables extractor", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NaivePDF</h1>\n<p><em>yet another pdf texts and tables extractor</em></p>\n<p>This project is inspired by <a href=\"https://github.com/euske/pdfminer\" rel=\"nofollow\">pdfminer</a>,\nand the pdf parts use, rewrite or redesign a lots of it's codes.</p>\n<p>The main purpose of this project is to provide a tool\nthat can naively extract text lines and <strong>bordered tables</strong> from pdf files,\nand write them into a html file.\nIn most cases it works well.</p>\n<p>On the other hand, it's pdf parts can be an alternative of pdfminer\nthat you can use it to extract texts, lines and shapes more simply.</p>\n<h1>How to Install</h1>\n<ul>\n<li>Python3.6+ required</li>\n</ul>\n<pre>pip install naivepdf\n</pre>\n<h1>Example of Use</h1>\n<p>very simple to use</p>\n<pre><span class=\"c1\"># encoding: utf-8</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">naivepdf.pdfdocument</span> <span class=\"kn\">import</span> <span class=\"n\">PDFDocument</span>\n<span class=\"kn\">from</span> <span class=\"nn\">naivepdf.reconstructor</span> <span class=\"kn\">import</span> <span class=\"n\">PageReconstructor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">naivepdf.utils.html</span> <span class=\"kn\">import</span> <span class=\"n\">html</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'examples/1206061047.pdf'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">PDFDocument</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">pages</span><span class=\"p\">):</span>\n            <span class=\"c1\"># as an alternative of pdfminer, just:</span>\n            <span class=\"c1\"># data.append(page.data)</span>\n            <span class=\"n\">reconstructor</span> <span class=\"o\">=</span> <span class=\"n\">PageReconstructor</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">)</span>\n            <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">reconstructor</span><span class=\"o\">.</span><span class=\"n\">reconstruct</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># as an alternative of pdfminer, just:</span>\n    <span class=\"c1\"># return data</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'examples/1206061047.html'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"n\">html</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6181928, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "e36c6b108ace080e92aae0893c0c7c11", "sha256": "d4dde81361ceb2fd028c5ad750d29b15fe7ba604c7c502ab519825cced2f8b01"}, "downloads": -1, "filename": "naivepdf-0.2.tar.gz", "has_sig": false, "md5_digest": "e36c6b108ace080e92aae0893c0c7c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3004046, "upload_time": "2019-10-01T04:38:33", "upload_time_iso_8601": "2019-10-01T04:38:33.277942Z", "url": "https://files.pythonhosted.org/packages/93/d8/99b92f026d8ff133931a21833be86bae0e8790c44354ec29fdbe82c47930/naivepdf-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "efd02a3503477fbc4c817afa2655d1b1", "sha256": "4a7cf79e57faa91df8ee5708c2c20e13595f55e4a27989756b6f05f2bb304193"}, "downloads": -1, "filename": "naivepdf-0.3.tar.gz", "has_sig": false, "md5_digest": "efd02a3503477fbc4c817afa2655d1b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3004137, "upload_time": "2019-11-22T15:25:12", "upload_time_iso_8601": "2019-11-22T15:25:12.569324Z", "url": "https://files.pythonhosted.org/packages/2d/26/57975d41b55a58a48c36ac563f28e154ad03187b55b5afaf8360c9297aed/naivepdf-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "efd02a3503477fbc4c817afa2655d1b1", "sha256": "4a7cf79e57faa91df8ee5708c2c20e13595f55e4a27989756b6f05f2bb304193"}, "downloads": -1, "filename": "naivepdf-0.3.tar.gz", "has_sig": false, "md5_digest": "efd02a3503477fbc4c817afa2655d1b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3004137, "upload_time": "2019-11-22T15:25:12", "upload_time_iso_8601": "2019-11-22T15:25:12.569324Z", "url": "https://files.pythonhosted.org/packages/2d/26/57975d41b55a58a48c36ac563f28e154ad03187b55b5afaf8360c9297aed/naivepdf-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:50 2020"}