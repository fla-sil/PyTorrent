{"info": {"author": "Russell Keith-Magee", "author_email": "russell@keith-magee.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Office/Business :: Financial :: Accounting"], "description": "PyXero\n======\n\n[![Build Status](https://travis-ci.org/freakboy3742/pyxero.svg?branch=master)](https://travis-ci.org/freakboy3742/pyxero)\n\nPyXero is a Python API for accessing the REST API provided by the [Xero](https://developer.xero.com)\naccounting tool. It allows access to both Public, Private and Partner applications.\n\n## Quickstart:\n\nInstall this library using the python package manager:\n\n```\npip install pyxero\n```\n\nYou'll need to follow the [Xero Developer documentation](https://developer.xero.com/documentation/) to register your application. Do that as follows:\n\n### Deployment\n\nTo deploy this library to pypi increment the version number in `xero/__init__.py` and refer to the following https://packaging.python.org/tutorials/packaging-projects/ using `python3 -m twine upload dist/*` instead of `python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*`\n\n### Public Applications\n\nPublic applications use a 3-step OAuth process.\n\nWhen you [register your public application with Xero](https://developer.xero.com/documentation/auth-and-limits/public-applications/), you'll be given a\n**Consumer Key** and a **Consumer secret**. These are both strings.\n\nTo access the Xero API you must first create some credentials:\n\n```python\n>>> from xero.auth import PublicCredentials\n>>> credentials = PublicCredentials(<consumer_key>, <consumer_secret>)\n>>> print credentials.url\n'http://my.xero.com/.....'\n```\n\nYou now direct the user to visit the URL described by `credentials.url`. They\nwill be asked to log into their Xero account, and then shown a request to\nauthenticate your request to access the user's account. When the allow access,\nthey will be directed to a page that gives them a 6-digit verification number.\nPut this verifier number into a string, and call `verify()` on the credentials\nobject::\n\n```python\n>>> credentials.verify(<verifier string>)\n```\n\nThis will verify your credentials, and retrieve an access token. You can\nthen use your credentials to instantiate an instance of the Xero API::\n\n```python\n>>> from xero import Xero\n>>> xero = Xero(credentials)\n```\n\n### Public Applications with verification by callback\n\nPublic applications can also be validated using a callback URI. If this\napproach is used, the user won't be given a verification number. Instead,\nwhen they authorize the OAuth request, their browser will be redirected to\na pre-configured callback URI, which will deliver the validation token\ndirectly to your application.\n\nTo use a callback, you must provide a domain as part of your Xero application\nregistration; then, you provide a URL under that domain as the third argument\nwhen creating the credentials::\n\n```python\n>>> credentials = PublicCredentials(<consumer_key>, <consumer_secret>, <callback_uri>)\n>>> print credentials.url\n'http://my.xero.com/.....'\n```\n\nWhen the user authorizes access to their Xero account, the `callback_url`\nwill be called with three GET arguments:\n\n* `oauth_token`: The oauth_token that this request belongs to\n* `oauth_verifier`: The verifier string\n* `org`: An identifier for the organization that is allowing access.\n\nThe verifier can then be used to verify the credentials, as with the manual\nprocess.\n\n### Reconstructing Public credentials\n\nPublic Applications use a 3-step OAuth process, and if you're doing this in a\nweb application, you will usually lose the credentials object over the\nverification step. This means you need to be able to restore the credentials\nobject when verification has been provided.\n\nThe `state` attribute of a credentials object contains all the details needed\nto reconstruct an instance of the credentials::\n\n```python\n>>> saved_state = credentials.state\n>>> print saved_state\n{'consumer_key': '...', 'consumer_secret': '...', ...}\n\n>>> new_credentials = PublicCredentials(**saved_state)\n```\n\n### Private Applications\n\nIf using a Private application, you will need to install `PyCrypto`, a pure\nPython cryptographic module. You'll also need to generate an signed RSA\ncertificate, and submit that certificate as part of registering your\napplication with Xero. See the [Xero Developer documentation](https://developer.xero.com/) for more\ndetails.\n\nWhen you [register your private application with Xero](https://developer.xero.com/documentation/auth-and-limits/private-applications/), you'll be given a\n**Consumer Key**. You'll also be given a **Consumer secret** - this can be\nignored.\n\nUsing the Private credentials is much simpler than the Public credentials,\nbecause there's no verification step -- verification is managed using RSA\nsigned API requests::\n\n```python\n>>> from xero import Xero\n>>> from xero.auth import PrivateCredentials\n>>> with open(<path to rsa key file>) as keyfile:\n...     rsa_key = keyfile.read()\n>>> credentials = PrivateCredentials(<consumer_key>, rsa_key)\n>>> xero = Xero(credentials)\n```\n\n[Follow these steps](https://developer.xero.com/documentation/api-guides/create-publicprivate-key/) to generate a public/private key pair to sign your requests.  You'll upload your public key when you create your Xero Private app at https://app.xero.com.  You'll use the private key (aka RSA key) to generate your oAuth signature.\n\nThe RSA key is a multi-line string that will look something like::\n\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXgIBAAKBgQDWJbmxJjQLGM76sZkk2EhsdpV0Gxtrhzh/wiNBGffa5JHV/Ex4\n    ....\n    mtXGQjKqsOpuCw7HwgnRQUWKYbaJ3a+yTCFjVwa9keQhDQ==\n    -----END RSA PRIVATE KEY-----\n\nYou can get this string by either reading the contents of your private key\nfile into a variable, or storing the key value as a constant. If you choose to\nstore the key value as a constant, remember two things:\n\n* **DO NOT UNDER ANY CIRCUMSTANCES** check this file into a public\n  repository. It is your identity, and anyone with access to this file\n  could masquerade as you.\n\n* Make sure there is no leading space before\n  the ``-----BEGIN PRIVATE KEY-----`` portion of the string.\n\n\n### Partner Applications\n\nPartner Application authentication works similarly to the 3-step OAuth used by\nPublic Applications, but with RSA signed requests. Partner OAuth tokens still\nhave a 30 minute expiry, but can be swapped for a new token at any time.\n\nWhen you [register your partner application with Xero](https://developer.xero.com/documentation/auth-and-limits/partner-applications/), you'll have a **Consumer Key**, **Consumer Secret** and **RSA Key**. All three elements are required.\n\n\n```python\n>>> from xero import Xero\n>>> from xero.auth import PartnerCredentials\n>>> credentials = PartnerCredentials(<consumer_key>, <consumer_secret>,\n...                                  <rsa_key>)\n>>> xero = Xero(credentials)\n```\n\nWhen using the API over an extended period, you will need to exchange tokens\nwhen they expire.\n\n```python\n>>> if credentials.expired():\n...     credentials.refresh()\n```\n\n**Important**: ``credentials.state`` changes after a token swap. Be sure to persist\nthe new state.\n\n\n## Using the Xero API\n\n*This API is a work in progress. At present, there is no wrapper layer\nto help create real objects, it just returns dictionaries in the exact\nformat provided by the Xero API. This will change into a more useful API\nbefore 1.0*\n\nThe Xero API object exposes a simple API for retrieving and updating objects.\nFor example, to deal with contacts::\n\n```python\n# Retrieve all contact objects\n>>> xero.contacts.all()\n[{...contact info...}, {...contact info...}, {...contact info...}, ...]\n\n# Retrieve a specific contact object\n>>> xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')\n{...contact info...}\n\n# Retrieve all contacts updated since 1 Jan 2013\n>>> xero.contacts.filter(since=datetime(2013, 1, 1))\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name is 'John Smith'\n>>> xero.contacts.filter(Name='John Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name starts with 'John'\n>>> xero.contacts.filter(Name__startswith='John')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name ends with 'Smith'\n>>> xero.contacts.filter(Name__endswith='Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name starts with 'John' and ends with 'Smith'\n>>> xero.contacts.filter(Name__startswith='John', Name__endswith='Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name contains 'mit'\n>>> xero.contacts.filter(Name__contains='mit')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Create a new object\n>>> xero.contacts.put({...contact info...})\n\n# Create multiple new objects\n>>> xero.contacts.put([{...contact info...}, {...contact info...}, {...contact info...}])\n\n# Save an update to an existing object\n>>> c = xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')\n>>> c['Name'] = 'John Smith'\n>>> xero.contacts.save(c)\n\n# Save multiple objects\n>>> xero.contacts.save([c1, c2])\n```\n\nComplex filters can be constructed in the Django-way, for example retrieving invoices for a contact:\n\n```python\n>>> xero.invoices.filter(Contact_ContactID='83ad77d8-48a7-4f77-9146-e6933b7fb63b')\n```\n\nFilters which aren't supported by this API can also be constructed using 'raw' mode like this:\n```python\n>>> xero.invoices.filter(raw='AmountDue > 0')\n```\n\nBe careful when dealing with large amounts of data, the Xero API will take an\nincreasingly long time to respond, or an error will be returned. If a query might\nreturn more than 100 results, you should make use of the ``page`` parameter::\n\n```python\n# Grab 100 invoices created after 01-01-2013\n>>> xero.invoices.filter(since=datetime(2013, 1, 1), page=1)\n```\n\nYou can also order the results to be returned::\n\n```python\n# Grab contacts ordered by EmailAddress\n>>> xero.contacts.filter(order='EmailAddress DESC')\n```\n\nFor invoices (and other objects that can be retrieved as PDFs), accessing the PDF is done\nvia setting the Accept header:\n\n```python\n# Fetch a PDF\ninvoice = xero.invoices.get('af722e93-b64f-482d-9955-1b027bfec896', \\\n    headers={'Accept': 'application/pdf'})\n# Stream the PDF to the user (Django specific example)\nresponse = HttpResponse(invoice, content_type='application/pdf')\nresponse['Content-Disposition'] = 'attachment; filename=\"invoice.pdf\"'\nreturn response\n```\n\nDownload and uploading attachments is supported using the Xero GUID of the relevant object::\n\n```python\n# List attachments on a contact\n>>> xero.contacts.get_attachments(c['ContactID'])\n[{...attachment info...}, {...attachment info...}]\n\n# Attach a PDF to a contact\n>>> f = open('form.pdf', 'rb')\n>>> xero.contacts.put_attachment(c['ContactID'], 'form.pdf', f, 'application/pdf')\n>>> f.close()\n\n>>> xero.contacts.put_attachment_data(c['ContactID'], 'form.pdf', data, 'application/pdf')\n\n# Download an attachment\n>>> f = open('form.pdf', 'wb')\n>>> xero.contacts.get_attachment(c['ContactID'], 'form.pdf', f)\n>>> f.close()\n\n>>> data = xero.contacts.get_attachment_data(c['ContactID'], 'form.pdf')\n```\n\nThis same API pattern exists for the following API objects:\n\n* Accounts\n* Attachments\n* BankTransactions\n* BankTransfers\n* BrandingThemes\n* ContactGroups\n* Contacts\n* CreditNotes\n* Currencies\n* Employees\n* ExpenseClaims\n* Invoices\n* Items\n* Journals\n* ManualJournals\n* Organisation\n* Overpayments\n* Payments\n* Prepayments\n* Purchase Orders\n* Receipts\n* RepeatingInvoices\n* Reports\n* TaxRates\n* TrackingCategories\n* Users\n\n\n## Payroll\n\nIn order to access the payroll methods from Xero, you can do it like this:\n\n```\nxero.payrollAPI.payruns.all()\n```\n\nWithin the payrollAPI you have access to:\n\n* employees\n* leaveapplications\n* payitems\n* payrollcalendars\n* payruns\n* payslip\n* timesheets\n\n\n## Under the hood\n\nUsing a wrapper around Xero API is a really nice feature, but it's also interesting to understand what is exactly\nhappening under the hood.\n\n### Filter operator\n\n``filter`` operator wraps the \"where\" keyword in Xero API.\n\n```python\n# Retrieves all contacts whose name is \"John\"\n>>> xero.contacts.filter(name=\"John\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=name%3D%3D%22John%22\nNon encoded:  <XERO_API_URL>/Contacts?where=name==\"John\"\n```\n\nSeveral parameters are separated with encoded '&&' characters:\n\n```python\n# Retrieves all contacts whose first name is \"John\" and last name is \"Doe\"\n>>> xero.contacts.filter(firstname=\"John\", lastname=\"Doe\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=lastname%3D%3D%22Doe%22%26%26firstname%3D%3D%22John%22\nNon encoded:  <XERO_API_URL>/Contacts?where=lastname==\"Doe\"&&firstname==\"John\"\n\n```\n\nUnderscores are automatically converted as \"dots\":\n```python\n# Retrieves all contacts whose name is \"John\"\n>>> xero.contacts.filter(first_name=\"John\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=first.name%3D%3D%22John%22%\nNon encoded:  <XERO_API_URL>/Contacts?where=first.name==\"John\"\n```\n\n## Contributing\n\nIf you're going to run the PyXero test suite, in addition to the dependencies\nfor PyXero, you need to add the following dependency to your environment:\n\n    mock >= 1.0\n\nMock isn't included in the formal dependencies because they aren't required\nfor normal operation of PyXero. It's only required for testing purposes.\n\nOnce you've installed these dependencies, you can run the test suite by\nrunning the following from the root directory of the project:\n\n    $ python setup.py test\n\nIf you find any problems with PyXero, you can log them on [Github Issues](https://github.com/freakboy3742/pyxero/issues).\nWhen reporting problems, it's extremely helpful if you can provide\nreproduction instructions -- the sequence of calls and/or test data that\ncan be used to reproduce the issue.\n\nNew features or bug fixes can be submitted via a pull request. If you want\nyour pull request to be merged quickly, make sure you either include\nregression test(s) for the behavior you are adding/fixing, or provide a\ngood explanation of why a regression test isn't possible.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/freakboy3742/pyxero", "keywords": "", "license": "New BSD", "maintainer": "", "maintainer_email": "", "name": "intellihr-pyxero", "package_url": "https://pypi.org/project/intellihr-pyxero/", "platform": "", "project_url": "https://pypi.org/project/intellihr-pyxero/", "project_urls": {"Homepage": "http://github.com/freakboy3742/pyxero"}, "release_url": "https://pypi.org/project/intellihr-pyxero/0.0.2/", "requires_dist": ["six (>=1.8.0)", "requests (>=1.1.0)", "requests-oauthlib (>=0.3.0)", "python-dateutil (>=2.1)", "PyJWT (>=1.6.4)", "cryptography (>=1.3.1)"], "requires_python": "", "summary": "Python API for accessing the REST API of the Xero accounting tool.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            PyXero<br>======<br><br>[![Build Status](https://travis-ci.org/freakboy3742/pyxero.svg?branch=master)](https://travis-ci.org/freakboy3742/pyxero)<br><br>PyXero is a Python API for accessing the REST API provided by the [Xero](https://developer.xero.com)<br>accounting tool. It allows access to both Public, Private and Partner applications.<br><br>## Quickstart:<br><br>Install this library using the python package manager:<br><br>```<br>pip install pyxero<br>```<br><br>You'll need to follow the [Xero Developer documentation](https://developer.xero.com/documentation/) to register your application. Do that as follows:<br><br>### Deployment<br><br>To deploy this library to pypi increment the version number in `xero/__init__.py` and refer to the following https://packaging.python.org/tutorials/packaging-projects/ using `python3 -m twine upload dist/*` instead of `python3 -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*`<br><br>### Public Applications<br><br>Public applications use a 3-step OAuth process.<br><br>When you [register your public application with Xero](https://developer.xero.com/documentation/auth-and-limits/public-applications/), you'll be given a<br>**Consumer Key** and a **Consumer secret**. These are both strings.<br><br>To access the Xero API you must first create some credentials:<br><br>```python<br>&gt;&gt;&gt; from xero.auth import PublicCredentials<br>&gt;&gt;&gt; credentials = PublicCredentials(&lt;consumer_key&gt;, &lt;consumer_secret&gt;)<br>&gt;&gt;&gt; print credentials.url<br>'http://my.xero.com/.....'<br>```<br><br>You now direct the user to visit the URL described by `credentials.url`. They<br>will be asked to log into their Xero account, and then shown a request to<br>authenticate your request to access the user's account. When the allow access,<br>they will be directed to a page that gives them a 6-digit verification number.<br>Put this verifier number into a string, and call `verify()` on the credentials<br>object::<br><br>```python<br>&gt;&gt;&gt; credentials.verify(&lt;verifier string&gt;)<br>```<br><br>This will verify your credentials, and retrieve an access token. You can<br>then use your credentials to instantiate an instance of the Xero API::<br><br>```python<br>&gt;&gt;&gt; from xero import Xero<br>&gt;&gt;&gt; xero = Xero(credentials)<br>```<br><br>### Public Applications with verification by callback<br><br>Public applications can also be validated using a callback URI. If this<br>approach is used, the user won't be given a verification number. Instead,<br>when they authorize the OAuth request, their browser will be redirected to<br>a pre-configured callback URI, which will deliver the validation token<br>directly to your application.<br><br>To use a callback, you must provide a domain as part of your Xero application<br>registration; then, you provide a URL under that domain as the third argument<br>when creating the credentials::<br><br>```python<br>&gt;&gt;&gt; credentials = PublicCredentials(&lt;consumer_key&gt;, &lt;consumer_secret&gt;, &lt;callback_uri&gt;)<br>&gt;&gt;&gt; print credentials.url<br>'http://my.xero.com/.....'<br>```<br><br>When the user authorizes access to their Xero account, the `callback_url`<br>will be called with three GET arguments:<br><br>* `oauth_token`: The oauth_token that this request belongs to<br>* `oauth_verifier`: The verifier string<br>* `org`: An identifier for the organization that is allowing access.<br><br>The verifier can then be used to verify the credentials, as with the manual<br>process.<br><br>### Reconstructing Public credentials<br><br>Public Applications use a 3-step OAuth process, and if you're doing this in a<br>web application, you will usually lose the credentials object over the<br>verification step. This means you need to be able to restore the credentials<br>object when verification has been provided.<br><br>The `state` attribute of a credentials object contains all the details needed<br>to reconstruct an instance of the credentials::<br><br>```python<br>&gt;&gt;&gt; saved_state = credentials.state<br>&gt;&gt;&gt; print saved_state<br>{'consumer_key': '...', 'consumer_secret': '...', ...}<br><br>&gt;&gt;&gt; new_credentials = PublicCredentials(**saved_state)<br>```<br><br>### Private Applications<br><br>If using a Private application, you will need to install `PyCrypto`, a pure<br>Python cryptographic module. You'll also need to generate an signed RSA<br>certificate, and submit that certificate as part of registering your<br>application with Xero. See the [Xero Developer documentation](https://developer.xero.com/) for more<br>details.<br><br>When you [register your private application with Xero](https://developer.xero.com/documentation/auth-and-limits/private-applications/), you'll be given a<br>**Consumer Key**. You'll also be given a **Consumer secret** - this can be<br>ignored.<br><br>Using the Private credentials is much simpler than the Public credentials,<br>because there's no verification step -- verification is managed using RSA<br>signed API requests::<br><br>```python<br>&gt;&gt;&gt; from xero import Xero<br>&gt;&gt;&gt; from xero.auth import PrivateCredentials<br>&gt;&gt;&gt; with open(&lt;path to rsa key file&gt;) as keyfile:<br>...     rsa_key = keyfile.read()<br>&gt;&gt;&gt; credentials = PrivateCredentials(&lt;consumer_key&gt;, rsa_key)<br>&gt;&gt;&gt; xero = Xero(credentials)<br>```<br><br>[Follow these steps](https://developer.xero.com/documentation/api-guides/create-publicprivate-key/) to generate a public/private key pair to sign your requests.  You'll upload your public key when you create your Xero Private app at https://app.xero.com.  You'll use the private key (aka RSA key) to generate your oAuth signature.<br><br>The RSA key is a multi-line string that will look something like::<br><br>    -----BEGIN RSA PRIVATE KEY-----<br>    MIICXgIBAAKBgQDWJbmxJjQLGM76sZkk2EhsdpV0Gxtrhzh/wiNBGffa5JHV/Ex4<br>    ....<br>    mtXGQjKqsOpuCw7HwgnRQUWKYbaJ3a+yTCFjVwa9keQhDQ==<br>    -----END RSA PRIVATE KEY-----<br><br>You can get this string by either reading the contents of your private key<br>file into a variable, or storing the key value as a constant. If you choose to<br>store the key value as a constant, remember two things:<br><br>* **DO NOT UNDER ANY CIRCUMSTANCES** check this file into a public<br>  repository. It is your identity, and anyone with access to this file<br>  could masquerade as you.<br><br>* Make sure there is no leading space before<br>  the ``-----BEGIN PRIVATE KEY-----`` portion of the string.<br><br><br>### Partner Applications<br><br>Partner Application authentication works similarly to the 3-step OAuth used by<br>Public Applications, but with RSA signed requests. Partner OAuth tokens still<br>have a 30 minute expiry, but can be swapped for a new token at any time.<br><br>When you [register your partner application with Xero](https://developer.xero.com/documentation/auth-and-limits/partner-applications/), you'll have a **Consumer Key**, **Consumer Secret** and **RSA Key**. All three elements are required.<br><br><br>```python<br>&gt;&gt;&gt; from xero import Xero<br>&gt;&gt;&gt; from xero.auth import PartnerCredentials<br>&gt;&gt;&gt; credentials = PartnerCredentials(&lt;consumer_key&gt;, &lt;consumer_secret&gt;,<br>...                                  &lt;rsa_key&gt;)<br>&gt;&gt;&gt; xero = Xero(credentials)<br>```<br><br>When using the API over an extended period, you will need to exchange tokens<br>when they expire.<br><br>```python<br>&gt;&gt;&gt; if credentials.expired():<br>...     credentials.refresh()<br>```<br><br>**Important**: ``credentials.state`` changes after a token swap. Be sure to persist<br>the new state.<br><br><br>## Using the Xero API<br><br>*This API is a work in progress. At present, there is no wrapper layer<br>to help create real objects, it just returns dictionaries in the exact<br>format provided by the Xero API. This will change into a more useful API<br>before 1.0*<br><br>The Xero API object exposes a simple API for retrieving and updating objects.<br>For example, to deal with contacts::<br><br>```python<br># Retrieve all contact objects<br>&gt;&gt;&gt; xero.contacts.all()<br>[{...contact info...}, {...contact info...}, {...contact info...}, ...]<br><br># Retrieve a specific contact object<br>&gt;&gt;&gt; xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')<br>{...contact info...}<br><br># Retrieve all contacts updated since 1 Jan 2013<br>&gt;&gt;&gt; xero.contacts.filter(since=datetime(2013, 1, 1))<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Retrieve all contacts whose name is 'John Smith'<br>&gt;&gt;&gt; xero.contacts.filter(Name='John Smith')<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Retrieve all contacts whose name starts with 'John'<br>&gt;&gt;&gt; xero.contacts.filter(Name__startswith='John')<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Retrieve all contacts whose name ends with 'Smith'<br>&gt;&gt;&gt; xero.contacts.filter(Name__endswith='Smith')<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Retrieve all contacts whose name starts with 'John' and ends with 'Smith'<br>&gt;&gt;&gt; xero.contacts.filter(Name__startswith='John', Name__endswith='Smith')<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Retrieve all contacts whose name contains 'mit'<br>&gt;&gt;&gt; xero.contacts.filter(Name__contains='mit')<br>[{...contact info...}, {...contact info...}, {...contact info...}]<br><br># Create a new object<br>&gt;&gt;&gt; xero.contacts.put({...contact info...})<br><br># Create multiple new objects<br>&gt;&gt;&gt; xero.contacts.put([{...contact info...}, {...contact info...}, {...contact info...}])<br><br># Save an update to an existing object<br>&gt;&gt;&gt; c = xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')<br>&gt;&gt;&gt; c['Name'] = 'John Smith'<br>&gt;&gt;&gt; xero.contacts.save(c)<br><br># Save multiple objects<br>&gt;&gt;&gt; xero.contacts.save([c1, c2])<br>```<br><br>Complex filters can be constructed in the Django-way, for example retrieving invoices for a contact:<br><br>```python<br>&gt;&gt;&gt; xero.invoices.filter(Contact_ContactID='83ad77d8-48a7-4f77-9146-e6933b7fb63b')<br>```<br><br>Filters which aren't supported by this API can also be constructed using 'raw' mode like this:<br>```python<br>&gt;&gt;&gt; xero.invoices.filter(raw='AmountDue &gt; 0')<br>```<br><br>Be careful when dealing with large amounts of data, the Xero API will take an<br>increasingly long time to respond, or an error will be returned. If a query might<br>return more than 100 results, you should make use of the ``page`` parameter::<br><br>```python<br># Grab 100 invoices created after 01-01-2013<br>&gt;&gt;&gt; xero.invoices.filter(since=datetime(2013, 1, 1), page=1)<br>```<br><br>You can also order the results to be returned::<br><br>```python<br># Grab contacts ordered by EmailAddress<br>&gt;&gt;&gt; xero.contacts.filter(order='EmailAddress DESC')<br>```<br><br>For invoices (and other objects that can be retrieved as PDFs), accessing the PDF is done<br>via setting the Accept header:<br><br>```python<br># Fetch a PDF<br>invoice = xero.invoices.get('af722e93-b64f-482d-9955-1b027bfec896', \\<br>    headers={'Accept': 'application/pdf'})<br># Stream the PDF to the user (Django specific example)<br>response = HttpResponse(invoice, content_type='application/pdf')<br>response['Content-Disposition'] = 'attachment; filename=\"invoice.pdf\"'<br>return response<br>```<br><br>Download and uploading attachments is supported using the Xero GUID of the relevant object::<br><br>```python<br># List attachments on a contact<br>&gt;&gt;&gt; xero.contacts.get_attachments(c['ContactID'])<br>[{...attachment info...}, {...attachment info...}]<br><br># Attach a PDF to a contact<br>&gt;&gt;&gt; f = open('form.pdf', 'rb')<br>&gt;&gt;&gt; xero.contacts.put_attachment(c['ContactID'], 'form.pdf', f, 'application/pdf')<br>&gt;&gt;&gt; f.close()<br><br>&gt;&gt;&gt; xero.contacts.put_attachment_data(c['ContactID'], 'form.pdf', data, 'application/pdf')<br><br># Download an attachment<br>&gt;&gt;&gt; f = open('form.pdf', 'wb')<br>&gt;&gt;&gt; xero.contacts.get_attachment(c['ContactID'], 'form.pdf', f)<br>&gt;&gt;&gt; f.close()<br><br>&gt;&gt;&gt; data = xero.contacts.get_attachment_data(c['ContactID'], 'form.pdf')<br>```<br><br>This same API pattern exists for the following API objects:<br><br>* Accounts<br>* Attachments<br>* BankTransactions<br>* BankTransfers<br>* BrandingThemes<br>* ContactGroups<br>* Contacts<br>* CreditNotes<br>* Currencies<br>* Employees<br>* ExpenseClaims<br>* Invoices<br>* Items<br>* Journals<br>* ManualJournals<br>* Organisation<br>* Overpayments<br>* Payments<br>* Prepayments<br>* Purchase Orders<br>* Receipts<br>* RepeatingInvoices<br>* Reports<br>* TaxRates<br>* TrackingCategories<br>* Users<br><br><br>## Payroll<br><br>In order to access the payroll methods from Xero, you can do it like this:<br><br>```<br>xero.payrollAPI.payruns.all()<br>```<br><br>Within the payrollAPI you have access to:<br><br>* employees<br>* leaveapplications<br>* payitems<br>* payrollcalendars<br>* payruns<br>* payslip<br>* timesheets<br><br><br>## Under the hood<br><br>Using a wrapper around Xero API is a really nice feature, but it's also interesting to understand what is exactly<br>happening under the hood.<br><br>### Filter operator<br><br>``filter`` operator wraps the \"where\" keyword in Xero API.<br><br>```python<br># Retrieves all contacts whose name is \"John\"<br>&gt;&gt;&gt; xero.contacts.filter(name=\"John\")<br><br># Triggers this GET request:<br>Html encoded: &lt;XERO_API_URL&gt;/Contacts?where=name%3D%3D%22John%22<br>Non encoded:  &lt;XERO_API_URL&gt;/Contacts?where=name==\"John\"<br>```<br><br>Several parameters are separated with encoded '&amp;&amp;' characters:<br><br>```python<br># Retrieves all contacts whose first name is \"John\" and last name is \"Doe\"<br>&gt;&gt;&gt; xero.contacts.filter(firstname=\"John\", lastname=\"Doe\")<br><br># Triggers this GET request:<br>Html encoded: &lt;XERO_API_URL&gt;/Contacts?where=lastname%3D%3D%22Doe%22%26%26firstname%3D%3D%22John%22<br>Non encoded:  &lt;XERO_API_URL&gt;/Contacts?where=lastname==\"Doe\"&amp;&amp;firstname==\"John\"<br><br>```<br><br>Underscores are automatically converted as \"dots\":<br>```python<br># Retrieves all contacts whose name is \"John\"<br>&gt;&gt;&gt; xero.contacts.filter(first_name=\"John\")<br><br># Triggers this GET request:<br>Html encoded: &lt;XERO_API_URL&gt;/Contacts?where=first.name%3D%3D%22John%22%<br>Non encoded:  &lt;XERO_API_URL&gt;/Contacts?where=first.name==\"John\"<br>```<br><br>## Contributing<br><br>If you're going to run the PyXero test suite, in addition to the dependencies<br>for PyXero, you need to add the following dependency to your environment:<br><br>    mock &gt;= 1.0<br><br>Mock isn't included in the formal dependencies because they aren't required<br>for normal operation of PyXero. It's only required for testing purposes.<br><br>Once you've installed these dependencies, you can run the test suite by<br>running the following from the root directory of the project:<br><br>    $ python setup.py test<br><br>If you find any problems with PyXero, you can log them on [Github Issues](https://github.com/freakboy3742/pyxero/issues).<br>When reporting problems, it's extremely helpful if you can provide<br>reproduction instructions -- the sequence of calls and/or test data that<br>can be used to reproduce the issue.<br><br>New features or bug fixes can be submitted via a pull request. If you want<br>your pull request to be merged quickly, make sure you either include<br>regression test(s) for the behavior you are adding/fixing, or provide a<br>good explanation of why a regression test isn't possible.<br><br><br><br>\n          </div>"}, "last_serial": 5158524, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d5d56756905075c9c582c6ac442ee8cd", "sha256": "69464969930408ac3e51c7d79e5fa28a97b9ce7dad375df5b50cf83043700e9a"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5d56756905075c9c582c6ac442ee8cd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22000, "upload_time": "2019-04-18T05:01:44", "upload_time_iso_8601": "2019-04-18T05:01:44.902410Z", "url": "https://files.pythonhosted.org/packages/2f/f2/a88b46c1448f5d65da84c088822abbccf9e1021e189131728aefdf0cba12/intellihr_pyxero-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a9f2f986dd386061a592c8d25ad59f9", "sha256": "956894d4780826121849da7940277984f9347fa4cf28f78a6d854f4ff12dd0b2"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7a9f2f986dd386061a592c8d25ad59f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35942, "upload_time": "2019-04-18T05:02:11", "upload_time_iso_8601": "2019-04-18T05:02:11.703228Z", "url": "https://files.pythonhosted.org/packages/a5/a5/2c04eab0311329d3925208868b2dca74adacd6f5ec48c220cfaf390ec937/intellihr_pyxero-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "7aed397f946efd614deed08dcaf0e233", "sha256": "ab8316e26e31bb5f67c8fa79edad8f647999aa6d896d721c5418c3f36cea9575"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7aed397f946efd614deed08dcaf0e233", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22211, "upload_time": "2019-04-18T06:48:07", "upload_time_iso_8601": "2019-04-18T06:48:07.148432Z", "url": "https://files.pythonhosted.org/packages/c3/73/b82e26d3ec94c2b049d3be174d9a6bc462dee74545bbf7228f13e93b83d8/intellihr_pyxero-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f08da9d7b216a56248554d6eddd5ee6", "sha256": "55b872afec5fcd38d3325d91d606da48302bc69d4d7f3b572587b59edf353d7b"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4f08da9d7b216a56248554d6eddd5ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30708, "upload_time": "2019-04-18T06:48:08", "upload_time_iso_8601": "2019-04-18T06:48:08.895308Z", "url": "https://files.pythonhosted.org/packages/2d/12/39effc1ce3f2b146335add425a6193fc2172ad9e3e61c42fd13abd5a572f/intellihr_pyxero-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7aed397f946efd614deed08dcaf0e233", "sha256": "ab8316e26e31bb5f67c8fa79edad8f647999aa6d896d721c5418c3f36cea9575"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7aed397f946efd614deed08dcaf0e233", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22211, "upload_time": "2019-04-18T06:48:07", "upload_time_iso_8601": "2019-04-18T06:48:07.148432Z", "url": "https://files.pythonhosted.org/packages/c3/73/b82e26d3ec94c2b049d3be174d9a6bc462dee74545bbf7228f13e93b83d8/intellihr_pyxero-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f08da9d7b216a56248554d6eddd5ee6", "sha256": "55b872afec5fcd38d3325d91d606da48302bc69d4d7f3b572587b59edf353d7b"}, "downloads": -1, "filename": "intellihr_pyxero-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4f08da9d7b216a56248554d6eddd5ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30708, "upload_time": "2019-04-18T06:48:08", "upload_time_iso_8601": "2019-04-18T06:48:08.895308Z", "url": "https://files.pythonhosted.org/packages/2d/12/39effc1ce3f2b146335add425a6193fc2172ad9e3e61c42fd13abd5a572f/intellihr_pyxero-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:32 2020"}