{"info": {"author": "Walter Doekes", "author_email": "wjdoekes+pstore@osso.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: Django", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Security", "Topic :: System :: Archiving", "Topic :: System :: Systems Administration"], "description": "pstore :: Python Protected Password Store\n=========================================\n\n.. _`back to top`:\n\nQuick jump: _`Summary` \\| `Usage examples`_ \\|\n`Installation`_ \\| `FAQ`_\n\nDo you want to store and share passwords? With pstore you store the\nencrypted passwords on a remote server. All encryption is done locally\nby the command line interface, so the server never sees your unencrypted\npasswords.\n\nSummary \n--------\n\n(`back to top`_)\n\npstore allows you to store and retrieve passwords and other sensitive\ndata in a safe manner. The permission system allows you to share these\nsecrets with others on the same pstore server.\n\nFor passwords and other secret items, you encrypt them on the client\nside automatically with the pstore client. This way the pstore server\nnever has any knowledge of the secret content, and your data is secure\n(\\*) even when the server is breached.\n\nEncryption is done using GPG. One of the admins installs your public key\non the pstore server. After that you're ready to go.\n\n(\\*) Security of course depends on everyone using strong secret keys and\neveryone keeping them private.\n\nUsage examples \n---------------\n\n(`back to top`_)\n\nYou have set your ``.pstorerc``:\n\n::\n\n    $ cat ~/.pstorerc \n    --store-url=https://my.pstore.server/\n\nList all machines that contain example in the name:\n\n::\n\n    $ pstore example\n      Machine                   User access\n    ------------------------------------------------------------------------\n    + new.example.com           joe, walter\n    + walter.example.com        walter\n\nList machine password for ``walter.example.com``:\n\n::\n\n    $ pstore walter.example.com\n    ip-address = 1.2.3.4\n    password = wAlTeR!\n\nAdd a new machine password, also accessible for joe:\n\n::\n\n    $ pstore -c walter2.example.com +joe\n    Type new machine password: \n    Type new machine password again: \n\n    $ pstore example\n      Machine                   User access\n    ------------------------------------------------------------------------\n    + new.example.com           joe, walter\n    + walter.example.com        walter\n    + walter2.example.com       joe, walter\n\n    $ pstore walter2.example.com\n    password = abc\n\nAdd a public (unencrypted) and shared (encrypted) property to the new\nmachine:\n\n::\n\n    $ printf walter2 | pstore walter2.example.com -ps ssh-username\n    $ cat ssl-cert.key | pstore walter2.example.com -pe ssl-cert.key\n    $ pstore walter2.example.com\n    ssh-username = walter2\n    ssl-cert.key = (1533 byte encrypted)\n    password = abc\n\nSee the ``contrib`` directory for bash completion scripts and a *dirty\nhack* to supply the password to the *ssh* client automatically.\n\nInstallation \n-------------\n\n(`back to top`_)\n\nInstalling the pstore client is a matter of running\n``pip install ./pstore-<version>.tar.gz``. This will install the\nnecessary requirements and install the pstore binary in your path.\n\nInstalling the pstore server is a little bit more work:\n\n1. Install ``pstore``, the client (see above).\n2. Refer to the Django project for detailed django installation\n   procedures. But it should basically be something like this:\n\n   -  Make a virtualenv (optional).\n   -  Install the requirements from requirements.txt (optional, the\n      django-pstore installation does this too).\n   -  Install ``django-pstore``.\n   -  Copy ``pstore/settings.py.template`` to ``pstore/settings.py`` and\n      configure as needed. Those comfortable with Django, can choose to\n      integrate it into a different project. Don't forget to set the\n      ``DATABASES`` and ``SECRET_KEY`` variables.\n   -  Make known where your settings are, by exporting the\n      ``DJANGO_SETTINGS_PATH`` and/or ``DJANGO_SETTINGS_MODULE``\n      environment variables with the right values.\n\n3. Run ``django-admin.py syncdb``. It will create the necessary tables\n   and an admin account for you.\n4. Check and alter ``pstore/wsgi.py`` as needed.\n5. You can now run the development server to test:\n   ``django-admin.py runserver``. When you're done testing you should\n   set it up on a proper webserver (nginx+uwsgi, apache+mod\\_wsgi or\n   whatever floats your boat). *Don't forget to tell the wsgi server\n   your virtualenv path if you're using that.*\n\nSet up users and keys:\n\n1. If you used the supplied ``pstore/settings.py`` you'll surf to\n   ``localhost:8000`` (or where the site is running). Supply your admin\n   credentials.\n2. Go to ``Auth -> Users``. Add users as appropriate.\n3. Go to ``Pstore -> Public keys``. Add a single public key for every\n   user that should be using the system. A GPG public key can be\n   extracted from your keyring using\n   ``gpg --export --armor my@email.addr``. The ``key`` value should look\n   something like this. The ``description`` is for human consumption\n   only.\n\n   ::\n\n       -----BEGIN PGP PUBLIC KEY BLOCK-----\n       Version: GnuPG v1.4.11 (GNU/Linux)\n       |\n       mI0EULkssgEEAKeoPrMO5CHxoO8/KTXLA1FP2IQr4n3Og+DvsziIZ6vdcDmhtcsx\n       ...\n       AK968N1Yrw+ytDuus3s7xPXYAw==\n       =TEm/\n       -----END PGP PUBLIC KEY BLOCK-----\n\n   If you have good reasons, you can go old style and use the SSH public\n   key here, like this:\n\n   ::\n\n       ssh-rsa AAAAq2qMaC2...fBPcPsqMcwqsMHnBCzA= myname@myserver\n\n   Using GPG is preferred however.\n\nSet up the client:\n\n1. You'll install the pstore client package on all machines that you'll\n   want to connect from.\n2. Set up ``~/.pstorerc``. You can put anything in there that you see in\n   ``pstore --help``, but generally you'll want one or more\n   ``--store-url=`` items in there. And possibly a ``--user=``.\n3. Type ``pstore -c my.first.machine`` to create a password for\n   *my.first.machine*.\n\nYou're ready to go. Call the pstore client with ``--help`` and\n``--help --verbose`` for more help and tips.\n\nFAQ \n----\n\n(`back to top`_)\n\nHow do I install a downloaded tgz?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    sudo pip install ./pstore-<version>.tar.gz\n    sudo pip install ./django-pstore-<version>.tar.gz\n\nFor the client you'll only need the first package.\n\nconfigure: error: no acceptable C compiler found in $PATH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. or various other compile related errors when running ``pip install``.\n\nMake sure you have a C compiler (gcc) and python development headers.\n\n::\n\n    sudo apt-get install build-essential\n    sudo apt-get install python-dev\n\nOr you could install the dependencies manually.\n\n::\n\n    # for the client and server\n    sudo apt-get install python-gpgme python-pyasn1 python-crypto\n    # for the server\n    sudo apt-get install python-django python-mysqldb\n\nfatal error: gpgme.h: No such file or directory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npygpgme requires the libgpgme development headers.\n\n::\n\n    sudo apt-get install libgpgme11-dev\n\nCouldn't find index page for 'pstore' (maybe misspelled?)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMake sure you install the ``pstore`` package before installing\n``django-pstore``. This shouldn't be necessary anymore, as we've\nuploaded that package to PyPI.\n\nHow do I uninstall?\n~~~~~~~~~~~~~~~~~~~\n\nUninstalling the client package is done using *pip*:\n\n::\n\n    sudo pip uninstall pstore\n\nYou may need to ``rm /usr/local/bin/pstore`` manually.\n\nFor the server, you'll probably need to do more than just uninstalling\n``django-pstore``. After all, you put the app in a Django project and\nyou created a database for it.\n\nNote that dependencies like Django, pyasn1, pycrypto, pygpgme, aren't\nuninstalled automatically.\n\nImportError: No module named pstorelib.bytes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen running ``./bin/pstore`` when developing, you'll need to tell it\nwhere the packages are:\n\n::\n\n    export PYTHONPATH=`pwd`\n\nNOTICE: re-using cached password\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make the application usable, decryption passphrase information has to\nbe cached. Preferably, this is done using some kind of password agent\nlike *gpg-agent*. If such an agent is unavailable, we cache the password\nin cleartext in memory for the duration of the pstore command.\n\nThe NOTICE is there to remind you that it is not as safe as it could be.\n\nHow do I make password caching agents forget my password?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYour graphical desktop environment generally starts a password caching\ndaemon. That could be *seahorse-agent* or *gpg-agent* or something else.\n\nI couldn't find a way to reliably clear the *seahorse-agent* password\ncache. I only found reliable ways to kill it by accident (on Ubuntu\n10.04).\n\nThe *gpg-agent* (gnupg-agent package) seemed more stable. (Log out and\nin after install.) Making it forget your cached passphrase is a matter\nof sending it a ``SIGHUP``.\n\n::\n\n    pkill -HUP gpg-agent\n\n*(If you're now wondering, like me, who then caches your decrypted\nprivate ssh key: it's the ssh-agent, even though it's the gnome-keyring\nwho asked for the password. Clearing the ssh-agent cache is a matter of\ndoing ``ssh-add -D``.)*\n\ncrypto error: encrypt message too long\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou're probably trying to set a larger property on an object where an\nsshrsa user has permissions. Either convert all users to use GPG or\nupload the large property as public (unencrypted!) property.\n\nIssues with large file support\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen running the integration test, you could see something like this:\n\n::\n\n    * Large file support (adding large public file):\n    backend error: could not connect to http://127.0.0.1:8000\n\n      FAIL: could not write large unencrypted file\n      > NOTICE: not encrypting the value\n\nThis is likely caused by apparmor(1) on the mysqld. We need read/write\npermissions in /tmp.\n\nFurther, you may need to increase the ``max_allowed_packet`` to\nsomething higher than ``16MB`` if you want to store larger files.\n\n(`back to top`_)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ossobv/pstore#jump", "keywords": "password encrypted sharing cli", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "django-pstore", "package_url": "https://pypi.org/project/django-pstore/", "platform": "", "project_url": "https://pypi.org/project/django-pstore/", "project_urls": {"Homepage": "https://github.com/ossobv/pstore#jump"}, "release_url": "https://pypi.org/project/django-pstore/1.3.4/", "requires_dist": null, "requires_python": "", "summary": "Python Protected Password Store server application", "version": "1.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p id=\"back-to-top\">Quick jump: <span class=\"target\" id=\"summary\">Summary</span> | <a href=\"#usage-examples\" rel=\"nofollow\">Usage examples</a> |\n<a href=\"#installation\" rel=\"nofollow\">Installation</a> | <a href=\"#faq\" rel=\"nofollow\">FAQ</a></p>\n<p>Do you want to store and share passwords? With pstore you store the\nencrypted passwords on a remote server. All encryption is done locally\nby the command line interface, so the server never sees your unencrypted\npasswords.</p>\n<div id=\"id1\">\n<h2>Summary</h2>\n<p>(<a href=\"#back-to-top\" rel=\"nofollow\">back to top</a>)</p>\n<p>pstore allows you to store and retrieve passwords and other sensitive\ndata in a safe manner. The permission system allows you to share these\nsecrets with others on the same pstore server.</p>\n<p>For passwords and other secret items, you encrypt them on the client\nside automatically with the pstore client. This way the pstore server\nnever has any knowledge of the secret content, and your data is secure\n(*) even when the server is breached.</p>\n<p>Encryption is done using GPG. One of the admins installs your public key\non the pstore server. After that you\u2019re ready to go.</p>\n<p>(*) Security of course depends on everyone using strong secret keys and\neveryone keeping them private.</p>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>(<a href=\"#back-to-top\" rel=\"nofollow\">back to top</a>)</p>\n<p>You have set your <tt>.pstorerc</tt>:</p>\n<pre>$ cat ~/.pstorerc\n--store-url=https://my.pstore.server/\n</pre>\n<p>List all machines that contain example in the name:</p>\n<pre>$ pstore example\n  Machine                   User access\n------------------------------------------------------------------------\n+ new.example.com           joe, walter\n+ walter.example.com        walter\n</pre>\n<p>List machine password for <tt>walter.example.com</tt>:</p>\n<pre>$ pstore walter.example.com\nip-address = 1.2.3.4\npassword = wAlTeR!\n</pre>\n<p>Add a new machine password, also accessible for joe:</p>\n<pre>$ pstore -c walter2.example.com +joe\nType new machine password:\nType new machine password again:\n\n$ pstore example\n  Machine                   User access\n------------------------------------------------------------------------\n+ new.example.com           joe, walter\n+ walter.example.com        walter\n+ walter2.example.com       joe, walter\n\n$ pstore walter2.example.com\npassword = abc\n</pre>\n<p>Add a public (unencrypted) and shared (encrypted) property to the new\nmachine:</p>\n<pre>$ printf walter2 | pstore walter2.example.com -ps ssh-username\n$ cat ssl-cert.key | pstore walter2.example.com -pe ssl-cert.key\n$ pstore walter2.example.com\nssh-username = walter2\nssl-cert.key = (1533 byte encrypted)\npassword = abc\n</pre>\n<p>See the <tt>contrib</tt> directory for bash completion scripts and a <em>dirty\nhack</em> to supply the password to the <em>ssh</em> client automatically.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>(<a href=\"#back-to-top\" rel=\"nofollow\">back to top</a>)</p>\n<p>Installing the pstore client is a matter of running\n<tt>pip install <span class=\"pre\">./pstore-&lt;version&gt;.tar.gz</span></tt>. This will install the\nnecessary requirements and install the pstore binary in your path.</p>\n<p>Installing the pstore server is a little bit more work:</p>\n<ol>\n<li>Install <tt>pstore</tt>, the client (see above).</li>\n<li>Refer to the Django project for detailed django installation\nprocedures. But it should basically be something like this:<ul>\n<li>Make a virtualenv (optional).</li>\n<li>Install the requirements from requirements.txt (optional, the\ndjango-pstore installation does this too).</li>\n<li>Install <tt><span class=\"pre\">django-pstore</span></tt>.</li>\n<li>Copy <tt>pstore/settings.py.template</tt> to <tt>pstore/settings.py</tt> and\nconfigure as needed. Those comfortable with Django, can choose to\nintegrate it into a different project. Don\u2019t forget to set the\n<tt>DATABASES</tt> and <tt>SECRET_KEY</tt> variables.</li>\n<li>Make known where your settings are, by exporting the\n<tt>DJANGO_SETTINGS_PATH</tt> and/or <tt>DJANGO_SETTINGS_MODULE</tt>\nenvironment variables with the right values.</li>\n</ul>\n</li>\n<li>Run <tt><span class=\"pre\">django-admin.py</span> syncdb</tt>. It will create the necessary tables\nand an admin account for you.</li>\n<li>Check and alter <tt>pstore/wsgi.py</tt> as needed.</li>\n<li>You can now run the development server to test:\n<tt><span class=\"pre\">django-admin.py</span> runserver</tt>. When you\u2019re done testing you should\nset it up on a proper webserver (nginx+uwsgi, apache+mod_wsgi or\nwhatever floats your boat). <em>Don\u2019t forget to tell the wsgi server\nyour virtualenv path if you\u2019re using that.</em></li>\n</ol>\n<p>Set up users and keys:</p>\n<ol>\n<li><p>If you used the supplied <tt>pstore/settings.py</tt> you\u2019ll surf to\n<tt>localhost:8000</tt> (or where the site is running). Supply your admin\ncredentials.</p>\n</li>\n<li><p>Go to <tt>Auth <span class=\"pre\">-&gt;</span> Users</tt>. Add users as appropriate.</p>\n</li>\n<li><p>Go to <tt>Pstore <span class=\"pre\">-&gt;</span> Public keys</tt>. Add a single public key for every\nuser that should be using the system. A GPG public key can be\nextracted from your keyring using\n<tt>gpg <span class=\"pre\">--export</span> <span class=\"pre\">--armor</span> my@email.addr</tt>. The <tt>key</tt> value should look\nsomething like this. The <tt>description</tt> is for human consumption\nonly.</p>\n<pre>-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n|\nmI0EULkssgEEAKeoPrMO5CHxoO8/KTXLA1FP2IQr4n3Og+DvsziIZ6vdcDmhtcsx\n...\nAK968N1Yrw+ytDuus3s7xPXYAw==\n=TEm/\n-----END PGP PUBLIC KEY BLOCK-----\n</pre>\n<p>If you have good reasons, you can go old style and use the SSH public\nkey here, like this:</p>\n<pre>ssh-rsa AAAAq2qMaC2...fBPcPsqMcwqsMHnBCzA= myname@myserver\n</pre>\n<p>Using GPG is preferred however.</p>\n</li>\n</ol>\n<p>Set up the client:</p>\n<ol>\n<li>You\u2019ll install the pstore client package on all machines that you\u2019ll\nwant to connect from.</li>\n<li>Set up <tt><span class=\"pre\">~/.pstorerc</span></tt>. You can put anything in there that you see in\n<tt>pstore <span class=\"pre\">--help</span></tt>, but generally you\u2019ll want one or more\n<tt><span class=\"pre\">--store-url=</span></tt> items in there. And possibly a <tt><span class=\"pre\">--user=</span></tt>.</li>\n<li>Type <tt>pstore <span class=\"pre\">-c</span> my.first.machine</tt> to create a password for\n<em>my.first.machine</em>.</li>\n</ol>\n<p>You\u2019re ready to go. Call the pstore client with <tt><span class=\"pre\">--help</span></tt> and\n<tt><span class=\"pre\">--help</span> <span class=\"pre\">--verbose</span></tt> for more help and tips.</p>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<p>(<a href=\"#back-to-top\" rel=\"nofollow\">back to top</a>)</p>\n<div id=\"how-do-i-install-a-downloaded-tgz\">\n<h3>How do I install a downloaded tgz?</h3>\n<pre>sudo pip install ./pstore-&lt;version&gt;.tar.gz\nsudo pip install ./django-pstore-&lt;version&gt;.tar.gz\n</pre>\n<p>For the client you\u2019ll only need the first package.</p>\n</div>\n<div id=\"configure-error-no-acceptable-c-compiler-found-in-path\">\n<h3>configure: error: no acceptable C compiler found in $PATH</h3>\n<p>Make sure you have a C compiler (gcc) and python development headers.</p>\n<pre>sudo apt-get install build-essential\nsudo apt-get install python-dev\n</pre>\n<p>Or you could install the dependencies manually.</p>\n<pre># for the client and server\nsudo apt-get install python-gpgme python-pyasn1 python-crypto\n# for the server\nsudo apt-get install python-django python-mysqldb\n</pre>\n</div>\n<div id=\"fatal-error-gpgme-h-no-such-file-or-directory\">\n<h3>fatal error: gpgme.h: No such file or directory</h3>\n<p>pygpgme requires the libgpgme development headers.</p>\n<pre>sudo apt-get install libgpgme11-dev\n</pre>\n</div>\n<div id=\"couldn-t-find-index-page-for-pstore-maybe-misspelled\">\n<h3>Couldn\u2019t find index page for \u2018pstore\u2019 (maybe misspelled?)</h3>\n<p>Make sure you install the <tt>pstore</tt> package before installing\n<tt><span class=\"pre\">django-pstore</span></tt>. This shouldn\u2019t be necessary anymore, as we\u2019ve\nuploaded that package to PyPI.</p>\n</div>\n<div id=\"how-do-i-uninstall\">\n<h3>How do I uninstall?</h3>\n<p>Uninstalling the client package is done using <em>pip</em>:</p>\n<pre>sudo pip uninstall pstore\n</pre>\n<p>You may need to <tt>rm /usr/local/bin/pstore</tt> manually.</p>\n<p>For the server, you\u2019ll probably need to do more than just uninstalling\n<tt><span class=\"pre\">django-pstore</span></tt>. After all, you put the app in a Django project and\nyou created a database for it.</p>\n<p>Note that dependencies like Django, pyasn1, pycrypto, pygpgme, aren\u2019t\nuninstalled automatically.</p>\n</div>\n<div id=\"importerror-no-module-named-pstorelib-bytes\">\n<h3>ImportError: No module named pstorelib.bytes</h3>\n<p>When running <tt>./bin/pstore</tt> when developing, you\u2019ll need to tell it\nwhere the packages are:</p>\n<pre>export PYTHONPATH=`pwd`\n</pre>\n</div>\n<div id=\"notice-re-using-cached-password\">\n<h3>NOTICE: re-using cached password</h3>\n<p>To make the application usable, decryption passphrase information has to\nbe cached. Preferably, this is done using some kind of password agent\nlike <em>gpg-agent</em>. If such an agent is unavailable, we cache the password\nin cleartext in memory for the duration of the pstore command.</p>\n<p>The NOTICE is there to remind you that it is not as safe as it could be.</p>\n</div>\n<div id=\"how-do-i-make-password-caching-agents-forget-my-password\">\n<h3>How do I make password caching agents forget my password?</h3>\n<p>Your graphical desktop environment generally starts a password caching\ndaemon. That could be <em>seahorse-agent</em> or <em>gpg-agent</em> or something else.</p>\n<p>I couldn\u2019t find a way to reliably clear the <em>seahorse-agent</em> password\ncache. I only found reliable ways to kill it by accident (on Ubuntu\n10.04).</p>\n<p>The <em>gpg-agent</em> (gnupg-agent package) seemed more stable. (Log out and\nin after install.) Making it forget your cached passphrase is a matter\nof sending it a <tt>SIGHUP</tt>.</p>\n<pre>pkill -HUP gpg-agent\n</pre>\n<p><em>(If you\u2019re now wondering, like me, who then caches your decrypted\nprivate ssh key: it\u2019s the ssh-agent, even though it\u2019s the gnome-keyring\nwho asked for the password. Clearing the ssh-agent cache is a matter of\ndoing ``ssh-add -D``.)</em></p>\n</div>\n<div id=\"crypto-error-encrypt-message-too-long\">\n<h3>crypto error: encrypt message too long</h3>\n<p>You\u2019re probably trying to set a larger property on an object where an\nsshrsa user has permissions. Either convert all users to use GPG or\nupload the large property as public (unencrypted!) property.</p>\n</div>\n<div id=\"issues-with-large-file-support\">\n<h3>Issues with large file support</h3>\n<p>When running the integration test, you could see something like this:</p>\n<pre>* Large file support (adding large public file):\nbackend error: could not connect to http://127.0.0.1:8000\n\n  FAIL: could not write large unencrypted file\n  &gt; NOTICE: not encrypting the value\n</pre>\n<p>This is likely caused by apparmor(1) on the mysqld. We need read/write\npermissions in /tmp.</p>\n<p>Further, you may need to increase the <tt>max_allowed_packet</tt> to\nsomething higher than <tt>16MB</tt> if you want to store larger files.</p>\n<p>(<a href=\"#back-to-top\" rel=\"nofollow\">back to top</a>)</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6472551, "releases": {"0.94rc3": [{"comment_text": "", "digests": {"md5": "27320d5bb253dd09e8c7ee258c16896f", "sha256": "aa8371a5058626a94dc0d922f321d92642fdae689135b4f99058c8d0c8a9de88"}, "downloads": -1, "filename": "django-pstore-0.94rc3.tar.gz", "has_sig": false, "md5_digest": "27320d5bb253dd09e8c7ee258c16896f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34091, "upload_time": "2013-03-11T14:14:10", "upload_time_iso_8601": "2013-03-11T14:14:10.999858Z", "url": "https://files.pythonhosted.org/packages/cc/44/b915a87433c86d21e693390995af613e73dc80dc567a71f5ae86df66226a/django-pstore-0.94rc3.tar.gz", "yanked": false}], "0.95rc4": [{"comment_text": "", "digests": {"md5": "8d3c71040dfcfea3427a3eed7cc4ceb7", "sha256": "00e6163c8d885edab146f411ed0ddf48279482767862231ede24640d5eb9ba66"}, "downloads": -1, "filename": "django-pstore-0.95rc4.tar.gz", "has_sig": false, "md5_digest": "8d3c71040dfcfea3427a3eed7cc4ceb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34617, "upload_time": "2013-04-15T14:59:19", "upload_time_iso_8601": "2013-04-15T14:59:19.386209Z", "url": "https://files.pythonhosted.org/packages/82/0a/ebd6c4730ad5c06f1181e93c03c5f3573e7349e0697947bfae3cb953e8d7/django-pstore-0.95rc4.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "d0d732313b0cc27eabb3a614b869a721", "sha256": "d437352eb03b79cafa67a20a8e4bbbd612f03d7dd985c061ff01f2eaaff24dc2"}, "downloads": -1, "filename": "django-pstore-1.0.tar.gz", "has_sig": false, "md5_digest": "d0d732313b0cc27eabb3a614b869a721", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35772, "upload_time": "2013-07-31T13:35:30", "upload_time_iso_8601": "2013-07-31T13:35:30.125130Z", "url": "https://files.pythonhosted.org/packages/44/85/e6025121ef1ac3a8a78c19dce53408a5ad4912e9f0ec708898e16b6edea6/django-pstore-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ed2d18014273f7c86336f7c57fa77eb2", "sha256": "b5f6a8ea5c9fd76a3a17a29527e53404d6929f8368dfbcb7dba8e2e5b6bf502e"}, "downloads": -1, "filename": "django-pstore-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ed2d18014273f7c86336f7c57fa77eb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35882, "upload_time": "2013-08-02T09:54:08", "upload_time_iso_8601": "2013-08-02T09:54:08.579886Z", "url": "https://files.pythonhosted.org/packages/c8/a3/35a9a0cb5812005f70da85093546b314c53cdafedf8dc7e773b199a92187/django-pstore-1.0.1.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "9325383a290a16b24451e5c2ed6a73b3", "sha256": "0eadbb2abf288df3f8f1194f9ee59ad9a3f1731d0fd90f72a9cd4a331852dfb0"}, "downloads": -1, "filename": "django-pstore-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9325383a290a16b24451e5c2ed6a73b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37045, "upload_time": "2013-10-10T08:07:13", "upload_time_iso_8601": "2013-10-10T08:07:13.193282Z", "url": "https://files.pythonhosted.org/packages/17/26/06dfba87d770d12bc8ac8588adf41cf292e8de38b5df4415cc1a82c1e669/django-pstore-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "94e81e22d78cd45de0f32b215b6ac9e0", "sha256": "1d1f3f68b2c3d01ffabe42c86a48f919fd087b659d976bddf4e87401e4e22a63"}, "downloads": -1, "filename": "django-pstore-1.1.0.tar.gz", "has_sig": false, "md5_digest": "94e81e22d78cd45de0f32b215b6ac9e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39203, "upload_time": "2015-05-21T10:21:24", "upload_time_iso_8601": "2015-05-21T10:21:24.870117Z", "url": "https://files.pythonhosted.org/packages/b2/15/e0acb377dd03f0f215d10a86e9e9711ef2060c5314692c08b0a855070a04/django-pstore-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "3707e4004bff18ebdc090283890d2fe2", "sha256": "fe3c7576114417424c311fef8df3edc26e57173a6cc188bc4552717ce96d136b"}, "downloads": -1, "filename": "django-pstore-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3707e4004bff18ebdc090283890d2fe2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39271, "upload_time": "2015-08-21T07:48:23", "upload_time_iso_8601": "2015-08-21T07:48:23.554993Z", "url": "https://files.pythonhosted.org/packages/93/b6/2d4157bf940d4ad058e1f93c7ee89d0a721b33b03fc275c193584d311186/django-pstore-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3343f6302bfe3b0814020eb82653c7a4", "sha256": "d36bbe3c383fcaeb341a20d939b5c8d0a1a66c9a34ebe18fdd0277b14f0a12a2"}, "downloads": -1, "filename": "django-pstore-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3343f6302bfe3b0814020eb82653c7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39292, "upload_time": "2015-10-14T11:22:00", "upload_time_iso_8601": "2015-10-14T11:22:00.171769Z", "url": "https://files.pythonhosted.org/packages/d4/3f/cdb76086071ecfe2dcd80d4cb51ad497a54cb0da0644f656497616372a30/django-pstore-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "60456f6ebe38b2e8791bbcb492292a92", "sha256": "94c67a870b49a6b0e9b5358120ab02e4cffef8488627b1bd63db05754a5bb54d"}, "downloads": -1, "filename": "django-pstore-1.1.3.tar.gz", "has_sig": false, "md5_digest": "60456f6ebe38b2e8791bbcb492292a92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40217, "upload_time": "2016-06-02T13:42:14", "upload_time_iso_8601": "2016-06-02T13:42:14.827584Z", "url": "https://files.pythonhosted.org/packages/0b/e3/66a4977b4c739df898a1c1c5d4a0da4c128e02945e098c83da8883e13bb9/django-pstore-1.1.3.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "9682b51b0d03c6a786d25315c6383beb", "sha256": "96ac55fe2a25cf98cda56bd862af0c9d9aeee7ff0f022c4b1788055f51310c1c"}, "downloads": -1, "filename": "django-pstore-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9682b51b0d03c6a786d25315c6383beb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42888, "upload_time": "2017-08-25T14:02:26", "upload_time_iso_8601": "2017-08-25T14:02:26.303789Z", "url": "https://files.pythonhosted.org/packages/b7/76/dcc596d96a84b596e5da19538f891793308b46b6f47a9116f9571ba71845/django-pstore-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "085817dff7b012c9501c0137632b197d", "sha256": "7b5dca6e3384c4b5106e48431648b4c15c65c139ad1a44cac995de9e7a3ef0cd"}, "downloads": -1, "filename": "django-pstore-1.2.1.tar.gz", "has_sig": false, "md5_digest": "085817dff7b012c9501c0137632b197d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40186, "upload_time": "2017-11-21T21:55:44", "upload_time_iso_8601": "2017-11-21T21:55:44.657187Z", "url": "https://files.pythonhosted.org/packages/9b/6e/02ff28eb4d9a4573714e48ac31b21a3b1cf64ae8faa64f562ba68cc094d7/django-pstore-1.2.1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "87ef3875d0851aea80f6c95ff31ab1f5", "sha256": "4664159fe8fe0ab11d8529c88ceba638cff73e72f6c32e0e0596828ab4fc0b42"}, "downloads": -1, "filename": "django-pstore-1.3.tar.gz", "has_sig": false, "md5_digest": "87ef3875d0851aea80f6c95ff31ab1f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40285, "upload_time": "2018-02-22T15:28:41", "upload_time_iso_8601": "2018-02-22T15:28:41.517033Z", "url": "https://files.pythonhosted.org/packages/0f/05/e97af7a7cf491aaf401ba41a55f51b94e1b51ad754d9d0b1251a0986941e/django-pstore-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "b687a5d5fcc3088413a211ce105d1265", "sha256": "b80830f81106ff5ae44fa3cdabc42b2f1d6e03b8df90a4dc01ec8cf9a63bec76"}, "downloads": -1, "filename": "django-pstore-1.3.1.tar.gz", "has_sig": false, "md5_digest": "b687a5d5fcc3088413a211ce105d1265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40434, "upload_time": "2018-03-01T15:14:23", "upload_time_iso_8601": "2018-03-01T15:14:23.166185Z", "url": "https://files.pythonhosted.org/packages/fd/ac/b54c3ebbb5027ad281b8cb2f3c31deef67c789749ea6e694ab97edaba5d4/django-pstore-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "7fd26abd59f1b16664e72f62d10425c2", "sha256": "ba0fa3ddbec935a68507fa64aec87dd7fd528efc91262d6a5ef794649e6b720b"}, "downloads": -1, "filename": "django-pstore-1.3.2.tar.gz", "has_sig": false, "md5_digest": "7fd26abd59f1b16664e72f62d10425c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44178, "upload_time": "2018-03-09T12:29:46", "upload_time_iso_8601": "2018-03-09T12:29:46.057822Z", "url": "https://files.pythonhosted.org/packages/cf/8e/94b2da83fefd01f1bd3813b151439de461531a8f8c03e1122c7cb4a0038f/django-pstore-1.3.2.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "d9a3ee6cb73ab846cc0ee1f8b0bd8991", "sha256": "05b0f888ac8ecd66a46688cafebadcbfcd67e9e085120499552293f3e16627e9"}, "downloads": -1, "filename": "django-pstore-1.3.4.tar.gz", "has_sig": false, "md5_digest": "d9a3ee6cb73ab846cc0ee1f8b0bd8991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40487, "upload_time": "2018-10-08T15:21:53", "upload_time_iso_8601": "2018-10-08T15:21:53.291855Z", "url": "https://files.pythonhosted.org/packages/99/db/bcfcbe6097a3ee84599ff23b9e3a8a0aff7195ad4cb1030b1c00b56a1ead/django-pstore-1.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d9a3ee6cb73ab846cc0ee1f8b0bd8991", "sha256": "05b0f888ac8ecd66a46688cafebadcbfcd67e9e085120499552293f3e16627e9"}, "downloads": -1, "filename": "django-pstore-1.3.4.tar.gz", "has_sig": false, "md5_digest": "d9a3ee6cb73ab846cc0ee1f8b0bd8991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40487, "upload_time": "2018-10-08T15:21:53", "upload_time_iso_8601": "2018-10-08T15:21:53.291855Z", "url": "https://files.pythonhosted.org/packages/99/db/bcfcbe6097a3ee84599ff23b9e3a8a0aff7195ad4cb1030b1c00b56a1ead/django-pstore-1.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:39 2020"}