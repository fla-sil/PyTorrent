{"info": {"author": "Blair Bonnett", "author_email": "blair.bonnett@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "===========\npython-rofi\n===========\n\nA Python module to make simple GUIs using Rofi.\n\n\nWhat is Rofi?\n=============\n\nRofi_ is a popup window switcher with minimal dependencies. Its basic operation\nis to display a list of options and let the user pick one. The following\nscreenshot is shamelessly hotlinked from the Rofi website (which you should\nprobably visit if you want actual details about Rofi!) and shows it being used\nby the teiler_ screenshot application.\n\n.. image:: https://davedavenport.github.io/rofi/images/rofi/dmenu-replacement.png\n   :alt: A screenshot of the teiler application using Rofi.\n\n.. _Rofi: https://davedavenport.github.io/rofi/\n\n.. _teiler: https://carnager.github.io/teiler/\n\n\nWhat is this module?\n====================\n\nIt simplifies making simple GUIs using Rofi. It provides a class with a number\nof methods for various GUI actions (show messages, pick one of these options,\nenter some text / a number). These are translated to the appropriate Rofi\ncommand line options, and then the standard subprocess_ module is used to run\nRofi. Any output is then processed and returned to you to do whatever you like\nwith.\n\n.. _subprocess: https://docs.python.org/3/library/subprocess.html\n\n\nExamples\n--------\n\nData entry\n~~~~~~~~~~\n\nThe simplest example is to create a Rofi instance and prompt the user to enter\na piece of text::\n\n    from rofi import Rofi\n    r = Rofi()\n    name = r.text_entry('What is your name? ')\n\nThere are also entry methods for integers, floating-point numbers, and decimal\nnumbers::\n\n    age = r.integer_entry('How old are you? ')\n    height = r.float_entry('How tall are you? ')\n    price = r.decimal_entry('How much are you willing to spend? ')\n\nAll of these return the corresponding Python type. Dates and times can also be\nrequested::\n\n    dob = r.date_entry('What is your date of birth? ')\n    start = r.time_entry('When do you start work? ')\n    reminder = r.datetime_entry('When do you want to be alerted? ')\n\nAgain, these return the corresponding Python type. By default, they expect the\nuser to enter something in the appropriate format for the current locale. You\ncan override this by providing a list of format specifiers to any of these\nfunctions. The available specifiers are detailed in the Python documentation\nfor the datetime_ module. For example::\n\n    start = r.time_entry('When do you start work? ', formats=['%H:%M'])\n\nAll of these entry methods are specialisations of the ``generic_entry()``\nmethod. You can use this to create your own entry types. All you need to do is\ncreate a validator function which takes the text entered by the user, and\nreturns either the Python object or an error message. For example, to enforce a\nminimum length on an entered piece of text::\n\n    validator = lambda s: (s, None) if len(s) > 6 else (None, \"Too short!\")\n    r.generic_entry('Enter a 7-character or longer string: ', validator)\n\nNote that all of these methods return ``None`` if the dialog is cancelled.\n\n.. _datetime: https://docs.python.org/3/library/datetime.html\n\nErrors\n~~~~~~\n\nTo show an error message to the user::\n\n    r.error('I cannot let you do that.')\n    r.exit_with_error('I cannot let you do that.')\n\nThe latter shows the error message and then exits.\n\nSelections\n~~~~~~~~~~\n\nTo give the user a list of things to select from, and return the index of the\noption they chose::\n\n    options = ['Red', 'Green', 'Blue', 'White', 'Silver', 'Black', 'Other']\n    index, key = r.select('What colour car do you drive?', options)\n\nThe returned ``key`` value tells you what key the user pressed. For Enter, the\nvalue is 0, while -1 indicates they cancelled the dialog. You can also specify\ncustom key bindings::\n\n    index, key = r.select('What colour car do you drive?', options, key5=('Alt+n', \"I don't drive\"))\n\nIn this case, the returned ``key`` will be 5 if they press Alt+n.\n\nStatus\n~~~~~~\n\nTo display a status message to the user::\n\n    r.status(\"I'm working on that...\")\n\nThis is the only non-blocking method (all the others wait for the user to\nfinish before returning control to your script). To close the status message::\n\n    r.close()\n\nCalling a display or entry method will also close any status message currently\ndisplayed.\n\nMessages\n~~~~~~~~\n\nAny of the entry methods and the select method have an optional argument\n``message``. This is a string which is displayed below the prompt. The string\ncan contain Pango_ markup::\n\n    r.text_entry('What are your goals for this year? ', message='Be <b>bold</b>!')\n\nIf you need to escape a string to avoid it being mistaken for markup, use the\n``Rofi.escape()`` class method::\n\n    msg = Rofi.escape('Format: <firstname> <lastname>')\n    r.text_entry('Enter your name: ', message=msg)\n\n.. _Pango:  https://developer.gnome.org/pango/stable/PangoMarkupFormat.html\n\nCustomisation\n~~~~~~~~~~~~~\n\nThere are a number of options available to customise the display. These can be\nset in the initialiser to apply to every dialog displayed, or you can pass them\nto any of the display methods to change just that dialog. See the Rofi\ndocumentation for full details of these parameters.\n\n* ``lines``: The maximum number of lines to show before scrolling.\n\n* ``fixed_lines``: Keep a fixed number of lines visible.\n\n* ``width``: If positive but not more than 100, this is the percentage of the\n  screen's width the window takes up. If greater than 100, it is the width in\n  pixels. If negative, it estimates the width required for the corresponding\n  number of characters, i.e., -30 would set the width so approximately 30\n  characters per row would show.\n\n* ``fullscreen``: If True, use the full height and width of the screen.\n\n* ``location``:  The position of the window on the screen.\n\n\nRequirements\n============\n\nYou need to have the ``rofi`` executable available on the system path (i.e.,\ninstall Rofi!). Everything else that python-rofi needs is provided by the\nPython standard libraries.\n\n\nWhat Python versions are supported?\n===================================\n\nIt *should* work with any version of Python from 2.7 onwards. It may work with\nolder versions, though no specific support for them will be added. It is\ndeveloped on Python 2.7 and Python 3.6 -- the latest versions of the Python 2\nand 3 branches respectively.\n\n\nWhat license does it use?\n=========================\n\nThe MIT license, the same as Rofi itself.\n\n\nBug reports\n===========\n\nThe project is developed on GitHub_. Please file any bug reports or feature\nrequests on the Issues_ page there.\n\n.. _GitHub: https://github.com/bcbnz/python-rofi\n.. _Issues: https://github.com/bcbnz/python-rofi/issues", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alejandrogallo/python-rofi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "papis-python-rofi", "package_url": "https://pypi.org/project/papis-python-rofi/", "platform": "", "project_url": "https://pypi.org/project/papis-python-rofi/", "project_urls": {"Homepage": "https://github.com/alejandrogallo/python-rofi"}, "release_url": "https://pypi.org/project/papis-python-rofi/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Create simple GUIs using the Rofi application (fork for papis)", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python module to make simple GUIs using Rofi.</p>\n<div id=\"what-is-rofi\">\n<h2>What is Rofi?</h2>\n<p><a href=\"https://davedavenport.github.io/rofi/\" rel=\"nofollow\">Rofi</a> is a popup window switcher with minimal dependencies. Its basic operation\nis to display a list of options and let the user pick one. The following\nscreenshot is shamelessly hotlinked from the Rofi website (which you should\nprobably visit if you want actual details about Rofi!) and shows it being used\nby the <a href=\"https://carnager.github.io/teiler/\" rel=\"nofollow\">teiler</a> screenshot application.</p>\n<img alt=\"A screenshot of the teiler application using Rofi.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37636105a87db2c8874efc490aeb4cf044aafc97/68747470733a2f2f64617665646176656e706f72742e6769746875622e696f2f726f66692f696d616765732f726f66692f646d656e752d7265706c6163656d656e742e706e67\">\n</div>\n<div id=\"what-is-this-module\">\n<h2>What is this module?</h2>\n<p>It simplifies making simple GUIs using Rofi. It provides a class with a number\nof methods for various GUI actions (show messages, pick one of these options,\nenter some text / a number). These are translated to the appropriate Rofi\ncommand line options, and then the standard <a href=\"https://docs.python.org/3/library/subprocess.html\" rel=\"nofollow\">subprocess</a> module is used to run\nRofi. Any output is then processed and returned to you to do whatever you like\nwith.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"data-entry\">\n<h4>Data entry</h4>\n<p>The simplest example is to create a Rofi instance and prompt the user to enter\na piece of text:</p>\n<pre>from rofi import Rofi\nr = Rofi()\nname = r.text_entry('What is your name? ')\n</pre>\n<p>There are also entry methods for integers, floating-point numbers, and decimal\nnumbers:</p>\n<pre>age = r.integer_entry('How old are you? ')\nheight = r.float_entry('How tall are you? ')\nprice = r.decimal_entry('How much are you willing to spend? ')\n</pre>\n<p>All of these return the corresponding Python type. Dates and times can also be\nrequested:</p>\n<pre>dob = r.date_entry('What is your date of birth? ')\nstart = r.time_entry('When do you start work? ')\nreminder = r.datetime_entry('When do you want to be alerted? ')\n</pre>\n<p>Again, these return the corresponding Python type. By default, they expect the\nuser to enter something in the appropriate format for the current locale. You\ncan override this by providing a list of format specifiers to any of these\nfunctions. The available specifiers are detailed in the Python documentation\nfor the <a href=\"https://docs.python.org/3/library/datetime.html\" rel=\"nofollow\">datetime</a> module. For example:</p>\n<pre>start = r.time_entry('When do you start work? ', formats=['%H:%M'])\n</pre>\n<p>All of these entry methods are specialisations of the <tt>generic_entry()</tt>\nmethod. You can use this to create your own entry types. All you need to do is\ncreate a validator function which takes the text entered by the user, and\nreturns either the Python object or an error message. For example, to enforce a\nminimum length on an entered piece of text:</p>\n<pre>validator = lambda s: (s, None) if len(s) &gt; 6 else (None, \"Too short!\")\nr.generic_entry('Enter a 7-character or longer string: ', validator)\n</pre>\n<p>Note that all of these methods return <tt>None</tt> if the dialog is cancelled.</p>\n</div>\n<div id=\"errors\">\n<h4>Errors</h4>\n<p>To show an error message to the user:</p>\n<pre>r.error('I cannot let you do that.')\nr.exit_with_error('I cannot let you do that.')\n</pre>\n<p>The latter shows the error message and then exits.</p>\n</div>\n<div id=\"selections\">\n<h4>Selections</h4>\n<p>To give the user a list of things to select from, and return the index of the\noption they chose:</p>\n<pre>options = ['Red', 'Green', 'Blue', 'White', 'Silver', 'Black', 'Other']\nindex, key = r.select('What colour car do you drive?', options)\n</pre>\n<p>The returned <tt>key</tt> value tells you what key the user pressed. For Enter, the\nvalue is 0, while -1 indicates they cancelled the dialog. You can also specify\ncustom key bindings:</p>\n<pre>index, key = r.select('What colour car do you drive?', options, key5=('Alt+n', \"I don't drive\"))\n</pre>\n<p>In this case, the returned <tt>key</tt> will be 5 if they press Alt+n.</p>\n</div>\n<div id=\"status\">\n<h4>Status</h4>\n<p>To display a status message to the user:</p>\n<pre>r.status(\"I'm working on that...\")\n</pre>\n<p>This is the only non-blocking method (all the others wait for the user to\nfinish before returning control to your script). To close the status message:</p>\n<pre>r.close()\n</pre>\n<p>Calling a display or entry method will also close any status message currently\ndisplayed.</p>\n</div>\n<div id=\"messages\">\n<h4>Messages</h4>\n<p>Any of the entry methods and the select method have an optional argument\n<tt>message</tt>. This is a string which is displayed below the prompt. The string\ncan contain <a href=\"https://developer.gnome.org/pango/stable/PangoMarkupFormat.html\" rel=\"nofollow\">Pango</a> markup:</p>\n<pre>r.text_entry('What are your goals for this year? ', message='Be &lt;b&gt;bold&lt;/b&gt;!')\n</pre>\n<p>If you need to escape a string to avoid it being mistaken for markup, use the\n<tt>Rofi.escape()</tt> class method:</p>\n<pre>msg = Rofi.escape('Format: &lt;firstname&gt; &lt;lastname&gt;')\nr.text_entry('Enter your name: ', message=msg)\n</pre>\n</div>\n<div id=\"customisation\">\n<h4>Customisation</h4>\n<p>There are a number of options available to customise the display. These can be\nset in the initialiser to apply to every dialog displayed, or you can pass them\nto any of the display methods to change just that dialog. See the Rofi\ndocumentation for full details of these parameters.</p>\n<ul>\n<li><tt>lines</tt>: The maximum number of lines to show before scrolling.</li>\n<li><tt>fixed_lines</tt>: Keep a fixed number of lines visible.</li>\n<li><tt>width</tt>: If positive but not more than 100, this is the percentage of the\nscreen\u2019s width the window takes up. If greater than 100, it is the width in\npixels. If negative, it estimates the width required for the corresponding\nnumber of characters, i.e., -30 would set the width so approximately 30\ncharacters per row would show.</li>\n<li><tt>fullscreen</tt>: If True, use the full height and width of the screen.</li>\n<li><tt>location</tt>:  The position of the window on the screen.</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>You need to have the <tt>rofi</tt> executable available on the system path (i.e.,\ninstall Rofi!). Everything else that python-rofi needs is provided by the\nPython standard libraries.</p>\n</div>\n<div id=\"what-python-versions-are-supported\">\n<h2>What Python versions are supported?</h2>\n<p>It <em>should</em> work with any version of Python from 2.7 onwards. It may work with\nolder versions, though no specific support for them will be added. It is\ndeveloped on Python 2.7 and Python 3.6 \u2013 the latest versions of the Python 2\nand 3 branches respectively.</p>\n</div>\n<div id=\"what-license-does-it-use\">\n<h2>What license does it use?</h2>\n<p>The MIT license, the same as Rofi itself.</p>\n</div>\n<div id=\"bug-reports\">\n<h2>Bug reports</h2>\n<p>The project is developed on <a href=\"https://github.com/bcbnz/python-rofi\" rel=\"nofollow\">GitHub</a>. Please file any bug reports or feature\nrequests on the <a href=\"https://github.com/bcbnz/python-rofi/issues\" rel=\"nofollow\">Issues</a> page there.</p>\n</div>\n\n          </div>"}, "last_serial": 3567014, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "2417df2b78bbe37f71b28af1d1e9202e", "sha256": "64640bd2ea31aba46970ee62a2baf2f2fbd2e4a324a635d4f3bd871b0c00ffc7"}, "downloads": -1, "filename": "papis-python-rofi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2417df2b78bbe37f71b28af1d1e9202e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12308, "upload_time": "2017-08-24T00:08:21", "upload_time_iso_8601": "2017-08-24T00:08:21.094072Z", "url": "https://files.pythonhosted.org/packages/07/97/89dddd9e00786a107ed35252adbb0cb28fff59f2377068dfefccfb23f57f/papis-python-rofi-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f2270fb992c1e275095e3399dc951d80", "sha256": "3bd01a9db97b620c4249e89e37c2fe669ba405ac179ea3bffa43246c05af668e"}, "downloads": -1, "filename": "papis-python-rofi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f2270fb992c1e275095e3399dc951d80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13936, "upload_time": "2018-02-09T12:07:20", "upload_time_iso_8601": "2018-02-09T12:07:20.796745Z", "url": "https://files.pythonhosted.org/packages/02/e6/62e8cd2f4cc2e14a313e0490b1252f908b2ef8a841a6e0f76a83bf89806f/papis-python-rofi-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2270fb992c1e275095e3399dc951d80", "sha256": "3bd01a9db97b620c4249e89e37c2fe669ba405ac179ea3bffa43246c05af668e"}, "downloads": -1, "filename": "papis-python-rofi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f2270fb992c1e275095e3399dc951d80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13936, "upload_time": "2018-02-09T12:07:20", "upload_time_iso_8601": "2018-02-09T12:07:20.796745Z", "url": "https://files.pythonhosted.org/packages/02/e6/62e8cd2f4cc2e14a313e0490b1252f908b2ef8a841a6e0f76a83bf89806f/papis-python-rofi-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:44 2020"}