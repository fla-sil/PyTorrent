{"info": {"author": "Matthew Davenport", "author_email": "mdavenport@rockefeller.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only"], "description": "# ProcessedPiRecorder\nA multiprocessed wrapper of PiCamera for simplified deployment of high framerate computer vision on raspberry pi. \n\n## Installation\n\n      pip install ProcessedPiRecorder\n\n## Requires\n\nLibrary | Version\n--------|--------\ntifffile | 2019.7.26    \npicamera | 1.13         \nopencv-contrib-python | 3.4.4.19     \nnumpy | 1.17.0  \nimageio | 2.6.1\n\nI'm sure it would work with other versions, but these are the ones used during dev.\n\n## Basic Usage\nYou have to initialize the recorder and then tell it when to start recording. \n\n### Initialize:\n\n      from ProcessedPiRecorder import ProcessedPiRecorder as ppr\n\n      myRecorder = ppr(tif_path=None, x_resolution=0, y_resolution=0, scale_factor=1, framerate=0, \n                       rec_length=0, display_proc='camera_reader', stereo=False,\n                       timestamp=False, report_Hz=False, monitor_qs= False, Hz_buffer=10,\n                       callback=None, blocking=True,  tif_compression=6, \n                       latency_log=None, aquisition_log=None,  cb_log=None)\nArg | Description\n----|------------\ntif_path | file to the output big tif file\n(x_resolution, y_resolution) | pixel dimensions acquired by the sensor(s), is autmatically rounded to nearest multiple of 16, or nearest multiple of 32 for StereoPi x_resolution. \nscale_factor | sets the resize parameter at resolultion*scale_factor, neede for StereoPi\nframerate | desired framerate in Hz\nrec_length | number of seconds to record\nstereo | if True, sets up for the stereopi hflip=True, stereo_mode='side-by-side', stereo_decimate=False\ndisplay_proc | specifies which process should be used to display. Either 'camera_reader' or 'file_writer'. \ntimestamp | if True, all frames are timestapmed at aquisition\nreport_Hz | if True, all frames have the current frame rate stamped at aquisition\nmonitor_qs | if True, all frames have all queue lengths stamped at aquisition\ncallback | if True, execute a callback function\nblocking | if True, block the main thread after spawning processes\ntif_compression | specifies the degress of image compression used by tifffile\nHz_buffer | number of frames to average over when displaying framerate (report_Hz=True)\nlatency_log | if specified, write the latency log to path\nacquisition_log | if specified, writes the acquisition log to path\ncb_log | if specified, writes the callback log to path\n\n\n### Start recording\n\n      myRecorder.recordVid()\n\n## Queues and Callbacks\n\nProcessedPiRecorder works by separating the acquisition, computer vision, and file encoding tasks across multiple python processes using the standard python multiprocessing library. These processes pass frames using multiprocessing.Queue objects which are managed by QueueHandler objects so you don't muck them up. \n\n### Queue Structure\n\n![image](https://docs.google.com/drawings/d/e/2PACX-1vTXOWzwBbJXiHAlQ2O2yern1L8TyWnSlfooWjhQqmJVHwOtCrFQGigZHY8wW8yBQOjxfdXcpGitcOYS/pub?w=916&h=727)\n\n### Callback structure\nComputer vision can be easily added by means of a callback function. Frames are recieved from and placed into the queues using a ppr.QueueHandler object which also provides a buffer of frames for applications that require a series of frames. \n\n       import ProcessedPiRecorder as ppr\n\n       callback_fucntion(queue1, queue2, cb_queue, cb_logger):\n            #inits    \n            handler = ppr.QueueHandler(queue1, queue2, 2)\n\n            #infinite loop\n            while True:\n                  #get frame\n                  frame = handler.get()\n\n                        #make sure the handler has a new frame and the buffer has filled\n                        if not handler.empty and handler.full_buffer:\n\n                              #Do something\n                              do_something_to(frame)\n\n                              #Save the frame\n                              handler.put()\n\n\nArg | Description\n----|------------\nqueue1 | recieves frames. Let a QueueHandler deal with it  \nqueue2 | sends frames to be saved. Let a QueueHandler deal with it\ncb_queue | multiprocessing.Queue object attached to the ppr object (myRecorder.cb_queue), enables comunication between the callback and the main_process\n\n## StereoPi support\n\nThe StereoPi is cool, but using standard PiCamera you can't save a highframerate video to file without dropping frames, ProcessedPiRecorder fixes that. Be aware that the scale_factor parameter must be used to down sample the frames. I use the following parameters as a starting point for high framerate acquisition (~28Hz) on stereopi: \n\n      x_resolution=1280, y_resolution=480, scale_factor=0.3, framerate=25\n\n## Contributors\nThis code was written and is maintained by [Matt Davenport](https://github.com/mattisabrat) (mdavenport@rockefeller.edu).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattisabrat/ProcessedPiRecorder", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "ProcessedPiRecorder", "package_url": "https://pypi.org/project/ProcessedPiRecorder/", "platform": "", "project_url": "https://pypi.org/project/ProcessedPiRecorder/", "project_urls": {"Homepage": "https://github.com/mattisabrat/ProcessedPiRecorder"}, "release_url": "https://pypi.org/project/ProcessedPiRecorder/0.3.1/", "requires_dist": ["picamera (==1.13)", "opencv-contrib-python (==3.4.4.19)", "tifffile (==2019.7.26)", "numpy (==1.17.0)", "imageio (==2.6.1)"], "requires_python": "", "summary": "Multiprocessed picamera class for simpler and faster computer vision", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ProcessedPiRecorder</h1>\n<p>A multiprocessed wrapper of PiCamera for simplified deployment of high framerate computer vision on raspberry pi.</p>\n<h2>Installation</h2>\n<pre><code>  pip install ProcessedPiRecorder\n</code></pre>\n<h2>Requires</h2>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tifffile</td>\n<td>2019.7.26</td>\n</tr>\n<tr>\n<td>picamera</td>\n<td>1.13</td>\n</tr>\n<tr>\n<td>opencv-contrib-python</td>\n<td>3.4.4.19</td>\n</tr>\n<tr>\n<td>numpy</td>\n<td>1.17.0</td>\n</tr>\n<tr>\n<td>imageio</td>\n<td>2.6.1</td>\n</tr></tbody></table>\n<p>I'm sure it would work with other versions, but these are the ones used during dev.</p>\n<h2>Basic Usage</h2>\n<p>You have to initialize the recorder and then tell it when to start recording.</p>\n<h3>Initialize:</h3>\n<pre><code>  from ProcessedPiRecorder import ProcessedPiRecorder as ppr\n\n  myRecorder = ppr(tif_path=None, x_resolution=0, y_resolution=0, scale_factor=1, framerate=0, \n                   rec_length=0, display_proc='camera_reader', stereo=False,\n                   timestamp=False, report_Hz=False, monitor_qs= False, Hz_buffer=10,\n                   callback=None, blocking=True,  tif_compression=6, \n                   latency_log=None, aquisition_log=None,  cb_log=None)\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Arg</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tif_path</td>\n<td>file to the output big tif file</td>\n</tr>\n<tr>\n<td>(x_resolution, y_resolution)</td>\n<td>pixel dimensions acquired by the sensor(s), is autmatically rounded to nearest multiple of 16, or nearest multiple of 32 for StereoPi x_resolution.</td>\n</tr>\n<tr>\n<td>scale_factor</td>\n<td>sets the resize parameter at resolultion*scale_factor, neede for StereoPi</td>\n</tr>\n<tr>\n<td>framerate</td>\n<td>desired framerate in Hz</td>\n</tr>\n<tr>\n<td>rec_length</td>\n<td>number of seconds to record</td>\n</tr>\n<tr>\n<td>stereo</td>\n<td>if True, sets up for the stereopi hflip=True, stereo_mode='side-by-side', stereo_decimate=False</td>\n</tr>\n<tr>\n<td>display_proc</td>\n<td>specifies which process should be used to display. Either 'camera_reader' or 'file_writer'.</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>if True, all frames are timestapmed at aquisition</td>\n</tr>\n<tr>\n<td>report_Hz</td>\n<td>if True, all frames have the current frame rate stamped at aquisition</td>\n</tr>\n<tr>\n<td>monitor_qs</td>\n<td>if True, all frames have all queue lengths stamped at aquisition</td>\n</tr>\n<tr>\n<td>callback</td>\n<td>if True, execute a callback function</td>\n</tr>\n<tr>\n<td>blocking</td>\n<td>if True, block the main thread after spawning processes</td>\n</tr>\n<tr>\n<td>tif_compression</td>\n<td>specifies the degress of image compression used by tifffile</td>\n</tr>\n<tr>\n<td>Hz_buffer</td>\n<td>number of frames to average over when displaying framerate (report_Hz=True)</td>\n</tr>\n<tr>\n<td>latency_log</td>\n<td>if specified, write the latency log to path</td>\n</tr>\n<tr>\n<td>acquisition_log</td>\n<td>if specified, writes the acquisition log to path</td>\n</tr>\n<tr>\n<td>cb_log</td>\n<td>if specified, writes the callback log to path</td>\n</tr></tbody></table>\n<h3>Start recording</h3>\n<pre><code>  myRecorder.recordVid()\n</code></pre>\n<h2>Queues and Callbacks</h2>\n<p>ProcessedPiRecorder works by separating the acquisition, computer vision, and file encoding tasks across multiple python processes using the standard python multiprocessing library. These processes pass frames using multiprocessing.Queue objects which are managed by QueueHandler objects so you don't muck them up.</p>\n<h3>Queue Structure</h3>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0817a4e2544180769fbdd4190be5996f3e76d2db/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f652f32504143582d317654584f577a7742624a586948416c51324f327965726e314c385479576e536c666f6f576a6851716d4a5648774f74437246514769675a4859387757387942514f6a786664586370476974634f59532f7075623f773d39313626683d373237\"></p>\n<h3>Callback structure</h3>\n<p>Computer vision can be easily added by means of a callback function. Frames are recieved from and placed into the queues using a ppr.QueueHandler object which also provides a buffer of frames for applications that require a series of frames.</p>\n<pre><code>   import ProcessedPiRecorder as ppr\n\n   callback_fucntion(queue1, queue2, cb_queue, cb_logger):\n        #inits    \n        handler = ppr.QueueHandler(queue1, queue2, 2)\n\n        #infinite loop\n        while True:\n              #get frame\n              frame = handler.get()\n\n                    #make sure the handler has a new frame and the buffer has filled\n                    if not handler.empty and handler.full_buffer:\n\n                          #Do something\n                          do_something_to(frame)\n\n                          #Save the frame\n                          handler.put()\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Arg</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>queue1</td>\n<td>recieves frames. Let a QueueHandler deal with it</td>\n</tr>\n<tr>\n<td>queue2</td>\n<td>sends frames to be saved. Let a QueueHandler deal with it</td>\n</tr>\n<tr>\n<td>cb_queue</td>\n<td>multiprocessing.Queue object attached to the ppr object (myRecorder.cb_queue), enables comunication between the callback and the main_process</td>\n</tr></tbody></table>\n<h2>StereoPi support</h2>\n<p>The StereoPi is cool, but using standard PiCamera you can't save a highframerate video to file without dropping frames, ProcessedPiRecorder fixes that. Be aware that the scale_factor parameter must be used to down sample the frames. I use the following parameters as a starting point for high framerate acquisition (~28Hz) on stereopi:</p>\n<pre><code>  x_resolution=1280, y_resolution=480, scale_factor=0.3, framerate=25\n</code></pre>\n<h2>Contributors</h2>\n<p>This code was written and is maintained by <a href=\"https://github.com/mattisabrat\" rel=\"nofollow\">Matt Davenport</a> (<a href=\"mailto:mdavenport@rockefeller.edu\">mdavenport@rockefeller.edu</a>).</p>\n\n          </div>"}, "last_serial": 6720528, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "027e4844bcaa366d341223d2ab67684a", "sha256": "57de4264570aa7d474df574a6c556ecdf2a89032ec894cd84b3bc033c75ba3d4"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "027e4844bcaa366d341223d2ab67684a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 16102, "upload_time": "2019-09-10T15:32:26", "upload_time_iso_8601": "2019-09-10T15:32:26.702781Z", "url": "https://files.pythonhosted.org/packages/c8/bd/8d603621c463b5e1ae2fc715329dcc93f9bafe9f46a223c8fc09e0ab8a91/ProcessedPiRecorder-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3565839843187ae72db87289e2accb9d", "sha256": "40d921427fba983fd74700da6b9aa3dcb5ab459084fe281880e21591ba5d0f4f"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3565839843187ae72db87289e2accb9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 3152, "upload_time": "2019-09-10T15:32:29", "upload_time_iso_8601": "2019-09-10T15:32:29.084709Z", "url": "https://files.pythonhosted.org/packages/88/ac/fcc3c8ee3d0f28e4e2e16d8dd1c1ccec44788524c1abd1e200d8c988929a/ProcessedPiRecorder-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e4d191ef3ebb7d2d430db1079a17925d", "sha256": "f950eaa3f1d3fdc142be77310c9c5a5b4b986e5f5ce8551eaf62e1b99ad4aca4"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e4d191ef3ebb7d2d430db1079a17925d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16122, "upload_time": "2019-09-10T19:31:44", "upload_time_iso_8601": "2019-09-10T19:31:44.972113Z", "url": "https://files.pythonhosted.org/packages/59/db/e3c868477be86187a3f08ead17b6dfa0514ce0e81a12c0c9b9be001ad52f/ProcessedPiRecorder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b9d9d6a331f1a13f306372e4a76493a", "sha256": "68cfe04850f641679ada469341bd9dbfac3bc897d6272e0f3fde14f1e606c407"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3b9d9d6a331f1a13f306372e4a76493a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3164, "upload_time": "2019-09-10T19:33:56", "upload_time_iso_8601": "2019-09-10T19:33:56.295308Z", "url": "https://files.pythonhosted.org/packages/66/1d/af51fd761b6c077aa3106d2c606dcecebd0c841aa00c50744457114244f8/ProcessedPiRecorder-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6df6ec74aaa1bee5227aff6d7927f446", "sha256": "4ef57ae83a5ee80aa7951ad5ce33a7d3a5704d3a9ea879a28ec5fbe5b1809eea"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6df6ec74aaa1bee5227aff6d7927f446", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16114, "upload_time": "2019-09-10T19:44:28", "upload_time_iso_8601": "2019-09-10T19:44:28.806047Z", "url": "https://files.pythonhosted.org/packages/b2/fa/4cdb40a5eb991ba9841f72b0d6e02a31a7bde19bdd36146f749685e952a8/ProcessedPiRecorder-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47e64d29a9b59005a82e5d5ff757d7aa", "sha256": "05e8ff157198a1c12162ef53f02f2c30371523f84f48ed5331cc090ab2a33f9a"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.0.3.tar.gz", "has_sig": false, "md5_digest": "47e64d29a9b59005a82e5d5ff757d7aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3151, "upload_time": "2019-09-10T19:44:30", "upload_time_iso_8601": "2019-09-10T19:44:30.426793Z", "url": "https://files.pythonhosted.org/packages/d7/32/3aa69fd94639fd0188f6d5b1f97a4a47d2591610f91a11d906c3eedafc8b/ProcessedPiRecorder-0.0.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a6fca35392ecf8e6a14997cadf72d46b", "sha256": "850ef9f6c45b1c5a8d30218b95e2801566bd97d797cbcfec6fd2aebbb6a608f2"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a6fca35392ecf8e6a14997cadf72d46b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5226, "upload_time": "2020-01-07T19:56:00", "upload_time_iso_8601": "2020-01-07T19:56:00.595077Z", "url": "https://files.pythonhosted.org/packages/bf/c1/c17e6b5af594afa700298a941ec5fc0b6b42179cec99e47a3b292b806f45/ProcessedPiRecorder-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "04c6e3304aebc595ad17829b9bc5d3fe", "sha256": "4944f3a1ed196cf84048e65578b150092b6eadd3642e8872b7bd8ed6436c3785"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.2.1.tar.gz", "has_sig": false, "md5_digest": "04c6e3304aebc595ad17829b9bc5d3fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6180, "upload_time": "2020-01-08T22:21:20", "upload_time_iso_8601": "2020-01-08T22:21:20.605434Z", "url": "https://files.pythonhosted.org/packages/a3/2c/17fea1eecb73db2ee8718879cde82843f06ff07202d3d68fa41398035890/ProcessedPiRecorder-0.2.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e8aa2abd12ee6aecaef9d95da14dd8b4", "sha256": "83253f483e1b693a24afec200c66b1b0547b8898abc37a0ee13d4de835dc3a8d"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e8aa2abd12ee6aecaef9d95da14dd8b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20395, "upload_time": "2020-02-28T21:20:13", "upload_time_iso_8601": "2020-02-28T21:20:13.548452Z", "url": "https://files.pythonhosted.org/packages/03/59/d60bde0c05fb07d9e7edc8728f7c84cba97cc99ca37949e31a8824b8672d/ProcessedPiRecorder-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1886e47e91c2a5db5bfc7fee640fd627", "sha256": "9548fafd516797da1a820f8d02c959e874d144c36cf51129c6cc0d950c0debbb"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.3.1.tar.gz", "has_sig": false, "md5_digest": "1886e47e91c2a5db5bfc7fee640fd627", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6786, "upload_time": "2020-02-28T21:20:14", "upload_time_iso_8601": "2020-02-28T21:20:14.771116Z", "url": "https://files.pythonhosted.org/packages/13/ad/eb5401acc7aebf2caffda3681142566658b4be2b049ebb7f5daaaf154f1f/ProcessedPiRecorder-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8aa2abd12ee6aecaef9d95da14dd8b4", "sha256": "83253f483e1b693a24afec200c66b1b0547b8898abc37a0ee13d4de835dc3a8d"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e8aa2abd12ee6aecaef9d95da14dd8b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20395, "upload_time": "2020-02-28T21:20:13", "upload_time_iso_8601": "2020-02-28T21:20:13.548452Z", "url": "https://files.pythonhosted.org/packages/03/59/d60bde0c05fb07d9e7edc8728f7c84cba97cc99ca37949e31a8824b8672d/ProcessedPiRecorder-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1886e47e91c2a5db5bfc7fee640fd627", "sha256": "9548fafd516797da1a820f8d02c959e874d144c36cf51129c6cc0d950c0debbb"}, "downloads": -1, "filename": "ProcessedPiRecorder-0.3.1.tar.gz", "has_sig": false, "md5_digest": "1886e47e91c2a5db5bfc7fee640fd627", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6786, "upload_time": "2020-02-28T21:20:14", "upload_time_iso_8601": "2020-02-28T21:20:14.771116Z", "url": "https://files.pythonhosted.org/packages/13/ad/eb5401acc7aebf2caffda3681142566658b4be2b049ebb7f5daaaf154f1f/ProcessedPiRecorder-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:56 2020"}