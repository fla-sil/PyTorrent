{"info": {"author": "Ali Askar", "author_email": "aliaskar1024@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Noodle Logging - The tiny JSON logger for Python 3.x\n\nNoodle Logging is a tiny package aimed at making logging from python applications into JSON easier.\n\n\n#### Dependencies\n1. [structlog](https://github.com/hynek/structlog)\n2. [python-json-logger](https://github.com/madzak/python-json-logger)\n3. [six](https://github.com/benjaminp/six)\n\n\n#### Installation\n\n```pip3 install noodle-logging```\n\n#### Usage Examples\n\n##### 1. Basic logging\n\n```python\nfrom noodle_logging.logger import log\n\ndef test():\n    log.info(\"event\", some_parameter=12, some_other_parameter=\"hello\")\n\nif __name__ == \"__main__\":\n    test()\n```\n\n###### Output\n```json\n{\"message\": \"event\", \"some_parameter\": 12, \"some_other_parameter\": \"hello\", \"logger\": \"__main__\", \"level\": \"info\", \"timestamp\": \"2019-05-28T11:59:14.975823Z\"}\n```\n\n##### 2. High level Profiling - Using decorators\n```python\nimport time\n\nfrom noodle_logging.decorators import profile\n\n@profile\ndef some_method(*args, **kwargs):\n    time.sleep(1)\n    print(some_method.__name__, \"method in execution with args \", args,\n          \" and kwargs \", kwargs)\n    time.sleep(1)\n\nif __name__ == \"__main__\":\n    some_method(1, 2, 3, a=2, b=3)\n```\n\n###### Output\n```\n{\"message\": \"Function Profiler\", \"fn_name\": \"some_method\", \"fn_id\": \"2df1335aa93f41438412da6b517a6781\", \"timestamp_start\": 1559044955.3319192, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:02:35.332396Z\"}\n>>> some_method method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3}\n{\"message\": \"Function Profiler\", \"fn_name\": \"some_method\", \"fn_id\": \"2df1335aa93f41438412da6b517a6781\", \"timestamp_start\": 1559044955.3319192, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3}\", \"timestamp_end\": 1559044957.340735, \"exec_time\": 2.0088157653808594, \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:02:37.340991Z\"}\n```\n\n##### 3. Catching (and Logging) an exception - Using decorators\n```python\nfrom noodle_logging.decorators import log_exceptions\n\n@log_exceptions\ndef some_other_method(*args, **kwargs):\n    print(some_other_method.__name__, \"method in execution with args \",\n          args, \" and kwargs \", kwargs)\n    print(1 / 0)\n    # Below line will not be executed.\n    print(\"Execution completed\", some_other_method.__name__)\n\nif __name__ == \"__main__\":\n    some_other_method(1, 2, 3, a=2, b=3, c=4)\n```\n\n###### Output\n```\nsome_other_method method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3, 'c': 4}\n{\"message\": \"Exception Found.\", \"exception\": \"Traceback (most recent call last):\\n  File \\\"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\\\", line 48, in wrapper\\n    return func(*args, **kwargs)\\n  File \\\"run.py\\\", line 29, in some_other_method\\n    print(1/0)\\nZeroDivisionError: division by zero\", \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"error\", \"timestamp\": \"2019-05-28T12:06:10.188581Z\"}\nTraceback (most recent call last):\n  File \"run.py\", line 49, in <module>\n    some_other_method(1, 2, 3, a=2, b=3, c=4)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 48, in wrapper\n    return func(*args, **kwargs)\n  File \"run.py\", line 29, in some_other_method\n    print(1/0)\nZeroDivisionError: division by zero\n```\n\n##### 4. Profiling + Catching (and Logging) exceptions - Using decorators\n```python\nfrom noodle_logging.decorators import profile, log_exceptions\n\n@profile\n@log_exceptions\ndef noodling_around(*args, **kwargs):\n    print(noodling_around.__name__, \"method in execution with args \",\n          args, \" and kwargs \", kwargs)\n    print(1 / 0)\n    # This line will not be executed.\n    print(\"Execution completed\", noodling_around.__name__)\n\nif __name__ == \"__main__\":\n    noodling_around(1, 2, 3, a=2, b=3, c=4)\n\n```\n\n###### Output\n```\n{\"message\": \"Function Profiler\", \"fn_name\": \"noodling_around\", \"fn_id\": \"9a3e74924b77440c9a5f1fe4c05522e6\", \"timestamp_start\": 1559045360.7205062, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:09:20.720621Z\"}\nnoodling_around method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3, 'c': 4}\n{\"message\": \"Exception Found.\", \"exception\": \"Traceback (most recent call last):\\n  File \\\"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\\\", line 48, in wrapper\\n    return func(*args, **kwargs)\\n  File \\\"run.py\\\", line 41, in noodling_around\\n    print(1 / 0)\\nZeroDivisionError: division by zero\", \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"error\", \"timestamp\": \"2019-05-28T12:09:20.721559Z\"}\nTraceback (most recent call last):\n  File \"run.py\", line 50, in <module>\n    noodling_around(1, 2, 3, a=2, b=3, c=4)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 26, in wrapper\n    result = func(*args, **kwargs)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 48, in wrapper\n    return func(*args, **kwargs)\n  File \"run.py\", line 41, in noodling_around\n    print(1 / 0)\nZeroDivisionError: division by zero\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/beingaskar/noodle_logging", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "noodle-logging", "package_url": "https://pypi.org/project/noodle-logging/", "platform": "", "project_url": "https://pypi.org/project/noodle-logging/", "project_urls": {"Homepage": "https://github.com/beingaskar/noodle_logging"}, "release_url": "https://pypi.org/project/noodle-logging/0.2/", "requires_dist": ["six (==1.12.0)", "structlog (==19.1.0)", "python-json-logger (==0.1.11)"], "requires_python": "", "summary": "Logging in JSON the easy way!", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Noodle Logging - The tiny JSON logger for Python 3.x</h1>\n<p>Noodle Logging is a tiny package aimed at making logging from python applications into JSON easier.</p>\n<h4>Dependencies</h4>\n<ol>\n<li><a href=\"https://github.com/hynek/structlog\" rel=\"nofollow\">structlog</a></li>\n<li><a href=\"https://github.com/madzak/python-json-logger\" rel=\"nofollow\">python-json-logger</a></li>\n<li><a href=\"https://github.com/benjaminp/six\" rel=\"nofollow\">six</a></li>\n</ol>\n<h4>Installation</h4>\n<p><code>pip3 install noodle-logging</code></p>\n<h4>Usage Examples</h4>\n<h5>1. Basic logging</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">noodle_logging.logger</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"event\"</span><span class=\"p\">,</span> <span class=\"n\">some_parameter</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">some_other_parameter</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">test</span><span class=\"p\">()</span>\n</pre>\n<h6>Output</h6>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"event\"</span><span class=\"p\">,</span> <span class=\"nt\">\"some_parameter\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"nt\">\"some_other_parameter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"nt\">\"logger\"</span><span class=\"p\">:</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">,</span> <span class=\"nt\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"info\"</span><span class=\"p\">,</span> <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-05-28T11:59:14.975823Z\"</span><span class=\"p\">}</span>\n</pre>\n<h5>2. High level Profiling - Using decorators</h5>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">noodle_logging.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">profile</span>\n\n<span class=\"nd\">@profile</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">some_method</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s2\">\"method in execution with args \"</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span>\n          <span class=\"s2\">\" and kwargs \"</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">some_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h6>Output</h6>\n<pre><code>{\"message\": \"Function Profiler\", \"fn_name\": \"some_method\", \"fn_id\": \"2df1335aa93f41438412da6b517a6781\", \"timestamp_start\": 1559044955.3319192, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:02:35.332396Z\"}\n&gt;&gt;&gt; some_method method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3}\n{\"message\": \"Function Profiler\", \"fn_name\": \"some_method\", \"fn_id\": \"2df1335aa93f41438412da6b517a6781\", \"timestamp_start\": 1559044955.3319192, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3}\", \"timestamp_end\": 1559044957.340735, \"exec_time\": 2.0088157653808594, \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:02:37.340991Z\"}\n</code></pre>\n<h5>3. Catching (and Logging) an exception - Using decorators</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">noodle_logging.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">log_exceptions</span>\n\n<span class=\"nd\">@log_exceptions</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_other_method</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">some_other_method</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s2\">\"method in execution with args \"</span><span class=\"p\">,</span>\n          <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">\" and kwargs \"</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Below line will not be executed.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Execution completed\"</span><span class=\"p\">,</span> <span class=\"n\">some_other_method</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">some_other_method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<h6>Output</h6>\n<pre><code>some_other_method method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3, 'c': 4}\n{\"message\": \"Exception Found.\", \"exception\": \"Traceback (most recent call last):\\n  File \\\"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\\\", line 48, in wrapper\\n    return func(*args, **kwargs)\\n  File \\\"run.py\\\", line 29, in some_other_method\\n    print(1/0)\\nZeroDivisionError: division by zero\", \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"error\", \"timestamp\": \"2019-05-28T12:06:10.188581Z\"}\nTraceback (most recent call last):\n  File \"run.py\", line 49, in &lt;module&gt;\n    some_other_method(1, 2, 3, a=2, b=3, c=4)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 48, in wrapper\n    return func(*args, **kwargs)\n  File \"run.py\", line 29, in some_other_method\n    print(1/0)\nZeroDivisionError: division by zero\n</code></pre>\n<h5>4. Profiling + Catching (and Logging) exceptions - Using decorators</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">noodle_logging.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">profile</span><span class=\"p\">,</span> <span class=\"n\">log_exceptions</span>\n\n<span class=\"nd\">@profile</span>\n<span class=\"nd\">@log_exceptions</span>\n<span class=\"k\">def</span> <span class=\"nf\">noodling_around</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">noodling_around</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"s2\">\"method in execution with args \"</span><span class=\"p\">,</span>\n          <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s2\">\" and kwargs \"</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"c1\"># This line will not be executed.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Execution completed\"</span><span class=\"p\">,</span> <span class=\"n\">noodling_around</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">noodling_around</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<h6>Output</h6>\n<pre><code>{\"message\": \"Function Profiler\", \"fn_name\": \"noodling_around\", \"fn_id\": \"9a3e74924b77440c9a5f1fe4c05522e6\", \"timestamp_start\": 1559045360.7205062, \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"info\", \"timestamp\": \"2019-05-28T12:09:20.720621Z\"}\nnoodling_around method in execution with args  (1, 2, 3)  and kwargs  {'a': 2, 'b': 3, 'c': 4}\n{\"message\": \"Exception Found.\", \"exception\": \"Traceback (most recent call last):\\n  File \\\"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\\\", line 48, in wrapper\\n    return func(*args, **kwargs)\\n  File \\\"run.py\\\", line 41, in noodling_around\\n    print(1 / 0)\\nZeroDivisionError: division by zero\", \"fn_args\": \"1,2,3\", \"fn_kwargs\": \"{\\\"a\\\": 2, \\\"b\\\": 3, \\\"c\\\": 4}\", \"logger\": \"noodle_logging.decorators\", \"level\": \"error\", \"timestamp\": \"2019-05-28T12:09:20.721559Z\"}\nTraceback (most recent call last):\n  File \"run.py\", line 50, in &lt;module&gt;\n    noodling_around(1, 2, 3, a=2, b=3, c=4)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 26, in wrapper\n    result = func(*args, **kwargs)\n  File \"/Users/askar.ali/Desktop/noodle-logging-original/noodle_logging/decorators.py\", line 48, in wrapper\n    return func(*args, **kwargs)\n  File \"run.py\", line 41, in noodling_around\n    print(1 / 0)\nZeroDivisionError: division by zero\n</code></pre>\n\n          </div>"}, "last_serial": 5326499, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cb8fbc2b631036b88212482ff568a69c", "sha256": "41a85498b2f247218d8b7b55d3a94c4a17f1e220ef95e49d6fbe507800c9effe"}, "downloads": -1, "filename": "noodle_logging-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cb8fbc2b631036b88212482ff568a69c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3875, "upload_time": "2019-05-28T11:24:00", "upload_time_iso_8601": "2019-05-28T11:24:00.007437Z", "url": "https://files.pythonhosted.org/packages/02/85/e5776ccf1755ba94c2a44ebb6ae0a507311aafb787994efd0c3bfd7c0c68/noodle_logging-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "250a53fb4818fdb46edad75e6baceca1", "sha256": "81ffdb46eb89e383369d21152dab83829fd7032af815c4f2b3a069a8dc1cca9a"}, "downloads": -1, "filename": "noodle-logging-0.1.tar.gz", "has_sig": false, "md5_digest": "250a53fb4818fdb46edad75e6baceca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2200, "upload_time": "2019-05-28T11:24:02", "upload_time_iso_8601": "2019-05-28T11:24:02.379942Z", "url": "https://files.pythonhosted.org/packages/ba/60/681015932063b6653e86f0fe9f8ef5f19a7e0bac62ca003b0752debdbe09/noodle-logging-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "810071d475803614347f4e85a316b0f0", "sha256": "9e73255c00ae84354819ac8c11d9e410e21b4c082a33f18f3656a5c379aff86f"}, "downloads": -1, "filename": "noodle_logging-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "810071d475803614347f4e85a316b0f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5175, "upload_time": "2019-05-28T12:17:45", "upload_time_iso_8601": "2019-05-28T12:17:45.722876Z", "url": "https://files.pythonhosted.org/packages/57/97/0d9d1b4913ef2793d7aecbd3a527e0fb42249d50a0d3e7c7ca7c783745c9/noodle_logging-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4c88f583c25682c851f3383d0b34926", "sha256": "b744cd46a4218a927057ac6edd027ac6ff79438087ea32a3cd9b32d66a038548"}, "downloads": -1, "filename": "noodle-logging-0.2.tar.gz", "has_sig": false, "md5_digest": "f4c88f583c25682c851f3383d0b34926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3765, "upload_time": "2019-05-28T12:17:47", "upload_time_iso_8601": "2019-05-28T12:17:47.346165Z", "url": "https://files.pythonhosted.org/packages/e4/6f/8105e88778b869c0cb41b532f1fc2e54cc41c74ff1bd642d63270d7d536a/noodle-logging-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "810071d475803614347f4e85a316b0f0", "sha256": "9e73255c00ae84354819ac8c11d9e410e21b4c082a33f18f3656a5c379aff86f"}, "downloads": -1, "filename": "noodle_logging-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "810071d475803614347f4e85a316b0f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5175, "upload_time": "2019-05-28T12:17:45", "upload_time_iso_8601": "2019-05-28T12:17:45.722876Z", "url": "https://files.pythonhosted.org/packages/57/97/0d9d1b4913ef2793d7aecbd3a527e0fb42249d50a0d3e7c7ca7c783745c9/noodle_logging-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4c88f583c25682c851f3383d0b34926", "sha256": "b744cd46a4218a927057ac6edd027ac6ff79438087ea32a3cd9b32d66a038548"}, "downloads": -1, "filename": "noodle-logging-0.2.tar.gz", "has_sig": false, "md5_digest": "f4c88f583c25682c851f3383d0b34926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3765, "upload_time": "2019-05-28T12:17:47", "upload_time_iso_8601": "2019-05-28T12:17:47.346165Z", "url": "https://files.pythonhosted.org/packages/e4/6f/8105e88778b869c0cb41b532f1fc2e54cc41c74ff1bd642d63270d7d536a/noodle-logging-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:51 2020"}