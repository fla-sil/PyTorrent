{"info": {"author": "Argonne National Laboratory", "author_email": "messner@anl.gov", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: C++", "Programming Language :: Python :: 3"], "description": "# NEML: the Nuclear Engineering material Model Library\n\n[![Documentation Status](https://readthedocs.org/projects/neml/badge/?version=stable)](https://neml.readthedocs.io/en/stable/) [![Build Status](https://travis-ci.org/Argonne-National-Laboratory/neml.svg?branch=master)](https://travis-ci.org/Argonne-National-Laboratory/neml)\n\n[![Documentation Status](https://readthedocs.org/projects/neml/badge/?version=dev)](https://neml.readthedocs.io/en/dev/) [![Build Status](https://travis-ci.org/Argonne-National-Laboratory/neml.svg?branch=dev)](https://travis-ci.org/Argonne-National-Laboratory/neml)\n\nNEML (the Nuclear Engineering Material model Library) is a tool for creating\nand running structural material models.\nWhile it was originally developed to model high temperature nuclear reactors,\nthe tool is general enough to apply to most types of structural materials.\n\nThe focus of NEML is on modularity and extensibility.\nThe library is structured so that adding a new feature to an existing material\nmodel should be as simple as possible and require as little code as possible.\n\nNEML material models are modular -- they are built up from smaller pieces into\na complete model.\nFor example, a model might piece together a temperature-dependent elasticity\nmodel, a yield surface, a flow rule, and several hardening rules.\nEach of these submodels is independent of the other objects\nso that, for example, switching from conventional J2 plasticity\nto a J2 theory requires only a one line change in an input file,\nif the model is already implemented, or a relatively small amount of coding\nto add the new yield surface if it has not been implemented.\nAll of these objects are interchangeable.\nFor example, the damage, viscoplastic, and rate-independent plasticity\nmodels all use the same yield (flow) surfaces, hardening rules, elasticity\nmodels, and so on.\n\nAs part of this philosophy, the library only requires new components\nprovide a few partial derivatives and NEML uses this information to assemble\nthe Jacobian needed to do a fully implement, backward Euler integration of the\nordinary differential equations comprising the model form and to provide \nthe algorithmic tangent needed to integrate the model into an implicit\nfinite element framework.\n\nDocumentation and tutorials are available [here](https://neml.readthedocs.io).\n\n## License\n\nThe library is provided under an MIT license found in the\n[LICENSE](LICENSE) file.\n\nThe NEML distribution contains a copy of\nthe [pybind11](https://github.com/pybind/pybind11) header library, which\nhas its own license contained in the pybind11 subdirectory.\n\nThe NEML distribution contains a copy of\nthe [rapidxml](http://rapidxml.sourceforge.net) header library, which\nhas its own license contained in the rapidxml subdirectory.\n\n## Python package\n\nThe python package version of the software available on PiPy requires:\n\n1. A working C++ compiler.\n2. The [Boost](https://www.boost.org/) C++ header libraries.\n3. Linkable version of [BLAS](http://www.netlib.org/blas/) and [LAPACK](http://www.netlib.org/lapack/).\n\nThis version does not support multithreading or linking with external C/C++/Fortran codes.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Argonne-National-Laboratory/neml", "keywords": "materials structures modeling", "license": "", "maintainer": "", "maintainer_email": "", "name": "neml", "package_url": "https://pypi.org/project/neml/", "platform": "", "project_url": "https://pypi.org/project/neml/", "project_urls": {"Homepage": "https://github.com/Argonne-National-Laboratory/neml"}, "release_url": "https://pypi.org/project/neml/1.2.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Nuclear Engineering Material model Library", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NEML: the Nuclear Engineering material Model Library</h1>\n<p><a href=\"https://neml.readthedocs.io/en/stable/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/989875089a2639c2e408eb5920353f1fa35ff7dd/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e656d6c2f62616467652f3f76657273696f6e3d737461626c65\"></a> <a href=\"https://travis-ci.org/Argonne-National-Laboratory/neml\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7379dd2001cdafd74dc9af32d32200c5169cbb79/68747470733a2f2f7472617669732d63692e6f72672f4172676f6e6e652d4e6174696f6e616c2d4c61626f7261746f72792f6e656d6c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://neml.readthedocs.io/en/dev/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d4d8f67739058aa4e482d332634a63ddf15ca61/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e656d6c2f62616467652f3f76657273696f6e3d646576\"></a> <a href=\"https://travis-ci.org/Argonne-National-Laboratory/neml\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f11d0b09e23cf1870d164e446595186c40363ff9/68747470733a2f2f7472617669732d63692e6f72672f4172676f6e6e652d4e6174696f6e616c2d4c61626f7261746f72792f6e656d6c2e7376673f6272616e63683d646576\"></a></p>\n<p>NEML (the Nuclear Engineering Material model Library) is a tool for creating\nand running structural material models.\nWhile it was originally developed to model high temperature nuclear reactors,\nthe tool is general enough to apply to most types of structural materials.</p>\n<p>The focus of NEML is on modularity and extensibility.\nThe library is structured so that adding a new feature to an existing material\nmodel should be as simple as possible and require as little code as possible.</p>\n<p>NEML material models are modular -- they are built up from smaller pieces into\na complete model.\nFor example, a model might piece together a temperature-dependent elasticity\nmodel, a yield surface, a flow rule, and several hardening rules.\nEach of these submodels is independent of the other objects\nso that, for example, switching from conventional J2 plasticity\nto a J2 theory requires only a one line change in an input file,\nif the model is already implemented, or a relatively small amount of coding\nto add the new yield surface if it has not been implemented.\nAll of these objects are interchangeable.\nFor example, the damage, viscoplastic, and rate-independent plasticity\nmodels all use the same yield (flow) surfaces, hardening rules, elasticity\nmodels, and so on.</p>\n<p>As part of this philosophy, the library only requires new components\nprovide a few partial derivatives and NEML uses this information to assemble\nthe Jacobian needed to do a fully implement, backward Euler integration of the\nordinary differential equations comprising the model form and to provide\nthe algorithmic tangent needed to integrate the model into an implicit\nfinite element framework.</p>\n<p>Documentation and tutorials are available <a href=\"https://neml.readthedocs.io\" rel=\"nofollow\">here</a>.</p>\n<h2>License</h2>\n<p>The library is provided under an MIT license found in the\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file.</p>\n<p>The NEML distribution contains a copy of\nthe <a href=\"https://github.com/pybind/pybind11\" rel=\"nofollow\">pybind11</a> header library, which\nhas its own license contained in the pybind11 subdirectory.</p>\n<p>The NEML distribution contains a copy of\nthe <a href=\"http://rapidxml.sourceforge.net\" rel=\"nofollow\">rapidxml</a> header library, which\nhas its own license contained in the rapidxml subdirectory.</p>\n<h2>Python package</h2>\n<p>The python package version of the software available on PiPy requires:</p>\n<ol>\n<li>A working C++ compiler.</li>\n<li>The <a href=\"https://www.boost.org/\" rel=\"nofollow\">Boost</a> C++ header libraries.</li>\n<li>Linkable version of <a href=\"http://www.netlib.org/blas/\" rel=\"nofollow\">BLAS</a> and <a href=\"http://www.netlib.org/lapack/\" rel=\"nofollow\">LAPACK</a>.</li>\n</ol>\n<p>This version does not support multithreading or linking with external C/C++/Fortran codes.</p>\n\n          </div>"}, "last_serial": 6972505, "releases": {"1.2.2": [{"comment_text": "", "digests": {"md5": "3c3248cc62c6596634e0ee28c264b64d", "sha256": "6d69e20bd27570f42498a3c79a85b6c9de06f5de96ff3174f9dfd779e79524b9"}, "downloads": -1, "filename": "neml-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3c3248cc62c6596634e0ee28c264b64d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 939616, "upload_time": "2020-04-07T19:50:49", "upload_time_iso_8601": "2020-04-07T19:50:49.583576Z", "url": "https://files.pythonhosted.org/packages/f8/ff/6637794736d56b91f63f2d83b97e078454d7f2c7ca3dd0968b2082bc1a33/neml-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c3248cc62c6596634e0ee28c264b64d", "sha256": "6d69e20bd27570f42498a3c79a85b6c9de06f5de96ff3174f9dfd779e79524b9"}, "downloads": -1, "filename": "neml-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3c3248cc62c6596634e0ee28c264b64d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 939616, "upload_time": "2020-04-07T19:50:49", "upload_time_iso_8601": "2020-04-07T19:50:49.583576Z", "url": "https://files.pythonhosted.org/packages/f8/ff/6637794736d56b91f63f2d83b97e078454d7f2c7ca3dd0968b2082bc1a33/neml-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:32 2020"}