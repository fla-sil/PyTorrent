{"info": {"author": "David Keeney", "author_email": "dkeeney@rdbhost.com", "bugtrack_url": null, "classifiers": [], "description": "yieldfrom.Requests: Requests for asyncio\n========================================\n\nRequests is an Apache2 Licensed HTTP library, written in Python, for human\nbeings.\n\nyieldfrom.Requests is the same library, ported to run under Python's asyncio.\n\nWhere in regular Requests you would write:\n\n.. code-block:: pycon\n\n    >>> r = requests.get('https://api.github.com', auth=('user', 'pass'))\n    >>> r.status_code\n    204\n    >>> r.headers['content-type']\n    'application/json'\n    >>> r.text\n    ...\n\n\nin yieldfrom.Requests you write:\n\n.. code-block:: pycon\n\n    >>> r = yield from requests.get('https://api.github.com', auth=('user', 'pass'))\n    >>> r.status_code\n    204\n    >>> r.headers['content-type']\n    'application/json'\n    >>> yield from r.text\n    ...\n\nThe *get* method and the *text* property involve I/O latency, hence are called as coroutines.\nThe headers and status_code attributes are still plain attributes.\n\n\nThe feature set is the same as the original, though a few methods work slightly differently.\n\nThe .stream() method does not stream, but preloads all data, and simulates a stream, so existing\ndependencies can work with minimal conversion.\n\n\n\n.. :changelog:\n\nRelease History\n---------------\n\n0.1.1 (2014-10-1)\n++++++++++++++++++\n\nPorted to Asyncio", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rdbhost/yieldfromrequests", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "yieldfrom.requests", "package_url": "https://pypi.org/project/yieldfrom.requests/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/yieldfrom.requests/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/rdbhost/yieldfromrequests"}, "release_url": "https://pypi.org/project/yieldfrom.requests/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "asyncio port of Requests: \"Python HTTP for Humans\".", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Requests is an Apache2 Licensed HTTP library, written in Python, for human\nbeings.</p>\n<p>yieldfrom.Requests is the same library, ported to run under Python\u2019s asyncio.</p>\n<p>Where in regular Requests you would write:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.github.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"go\">204\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'content-type'</span><span class=\"p\">]</span>\n<span class=\"go\">'application/json'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"gp\">...</span>\n</pre>\n<p>in yieldfrom.Requests you write:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.github.com'</span><span class=\"p\">,</span> <span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"go\">204\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'content-type'</span><span class=\"p\">]</span>\n<span class=\"go\">'application/json'\n</span><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">yield from</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span>\n<span class=\"gp\">...</span>\n</pre>\n<p>The <em>get</em> method and the <em>text</em> property involve I/O latency, hence are called as coroutines.\nThe headers and status_code attributes are still plain attributes.</p>\n<p>The feature set is the same as the original, though a few methods work slightly differently.</p>\n<p>The .stream() method does not stream, but preloads all data, and simulates a stream, so existing\ndependencies can work with minimal conversion.</p>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.1 (2014-10-1)</span></h2>\n<p>Ported to Asyncio</p>\n</div>\n\n          </div>"}, "last_serial": 1910702, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "55f2a725de7248fa52eb733d6cb3fe28", "sha256": "f623098c29ada54296b992921251ddb65a48c7ff1df57c389e53f08fc56c8ffc"}, "downloads": -1, "filename": "yieldfrom.requests-0.1.1.zip", "has_sig": false, "md5_digest": "55f2a725de7248fa52eb733d6cb3fe28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62082, "upload_time": "2014-10-19T16:56:28", "upload_time_iso_8601": "2014-10-19T16:56:28.502623Z", "url": "https://files.pythonhosted.org/packages/c1/9e/2ae1735fe8e4d881136dd86a705def17ac5122b2fe5c5b687848b1b54ffd/yieldfrom.requests-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9f4995ffe0846f246f1c7952ea9c0b32", "sha256": "a1565d43bc6e1cd861f24f6bcd0d2bb6874c25815a73ff65003a15676781a531"}, "downloads": -1, "filename": "yieldfrom.requests-0.1.2.zip", "has_sig": false, "md5_digest": "9f4995ffe0846f246f1c7952ea9c0b32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224459, "upload_time": "2014-11-23T21:01:53", "upload_time_iso_8601": "2014-11-23T21:01:53.092330Z", "url": "https://files.pythonhosted.org/packages/d7/12/e70c2130e08419fb981e789886079e7c57696ddbd16f00faa553b1d28f10/yieldfrom.requests-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b399175d795fadac6767896d862426fa", "sha256": "efbf01d93a22634a2a138def357ac9659c9bc57bb4cfce8896b02ae825b20b1d"}, "downloads": -1, "filename": "yieldfrom.requests-0.1.3.zip", "has_sig": false, "md5_digest": "b399175d795fadac6767896d862426fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224479, "upload_time": "2016-01-18T23:04:58", "upload_time_iso_8601": "2016-01-18T23:04:58.306169Z", "url": "https://files.pythonhosted.org/packages/37/38/94cd721a8069f929066119f704391e743823cfd85423147d7cea15b6426f/yieldfrom.requests-0.1.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b399175d795fadac6767896d862426fa", "sha256": "efbf01d93a22634a2a138def357ac9659c9bc57bb4cfce8896b02ae825b20b1d"}, "downloads": -1, "filename": "yieldfrom.requests-0.1.3.zip", "has_sig": false, "md5_digest": "b399175d795fadac6767896d862426fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224479, "upload_time": "2016-01-18T23:04:58", "upload_time_iso_8601": "2016-01-18T23:04:58.306169Z", "url": "https://files.pythonhosted.org/packages/37/38/94cd721a8069f929066119f704391e743823cfd85423147d7cea15b6426f/yieldfrom.requests-0.1.3.zip", "yanked": false}], "timestamp": "Fri May  8 03:22:15 2020"}