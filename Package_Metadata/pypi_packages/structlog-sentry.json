{"info": {"author": "Pavel Ded\u00edk", "author_email": "pavel.dedik@kiwi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# structlog-sentry\n\n[![Build Status](https://travis-ci.org/kiwicom/structlog-sentry.svg?branch=master)](https://travis-ci.org/kiwicom/structlog-sentry)\n\n| What          | Where                                         |\n| ------------- | --------------------------------------------- |\n| Documentation | <https://github.com/kiwicom/structlog-sentry> |\n| Maintainer    | [@paveldedik](https://github.com/paveldedik)  |\n\nBased on <https://gist.github.com/hynek/a1f3f92d57071ebc5b91>\n\n## Installation\n\nInstall the package with [pip](https://pip.pypa.io/):\n\n```\npip install structlog-sentry\n```\n\n## Usage\n\nThis module is intended to be used with `structlog` like this:\n\n```python\nimport sentry_sdk\nimport structlog\nfrom structlog_sentry import SentryProcessor\n\n\nsentry_sdk.init()  # pass dsn in argument or via SENTRY_DSN env variable\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.add_logger_name,  # optional, but before SentryProcessor()\n        structlog.stdlib.add_log_level,  # required before SentryProcessor()\n        SentryProcessor(level=logging.ERROR),\n    ],\n    logger_factory=...,\n    wrapper_class=...,\n)\n\n\nlog = structlog.get_logger()\n```\n\nDo not forget to add the `structlog.stdlib.add_log_level` and optionally the\n`structlog.stdlib.add_logger_name` processors before `SentryProcessor`. The\n`SentryProcessor` class takes the following arguments:\n\n- `level` - events of this or higher levels will be reported to Sentry,\n  default is `WARNING`\n- `active` - default is `True`, setting to `False` disables the processor\n\nNow exceptions are automatically captured by Sentry with `log.error()`:\n\n```python\ntry:\n    1/0\nexcept ZeroDivisionError:\n    log.error()\n\ntry:\n    resp = requests.get(f\"https://api.example.com/users/{user_id}/\")\n    resp.raise_for_status()\nexcept RequestException:\n    log.error(\"request error\", user_id=user_id)\n```\n\nThis will automatically collect `sys.exc_info()` along with the message, if you want\nto turn this behavior off, just pass `exc_info=False`.\n\nWhen you want to use structlog's built-in\n[`format_exc_info`](http://www.structlog.org/en/stable/api.html#structlog.processors.format_exc_info)\nprocessor, make that the `SentryProcessor` comes *before* `format_exc_info`!\nOtherwise, the `SentryProcessor` won't have an `exc_info` to work with, because\nit's removed from the event by `format_exc_info`.\n\nLogging calls with no `sys.exc_info()` are also automatically captured by Sentry:\n\n```python\nlog.info(\"info message\", scope=\"accounts\")\nlog.warning(\"warning message\", scope=\"invoices\")\nlog.error(\"error message\", scope=\"products\")\n```\n\nIf you do not want to forward logs into Sentry, just pass the `sentry_skip=True`\noptional argument to logger methods, like this:\n\n```python\nlog.error(sentry_skip=True)\n```\n\n### Sentry Tags\n\nYou can set some or all of key/value pairs of structlog `event_dict` as sentry `tags`:\n\n```python\nstructlog.configure(\n    processors=[\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        SentryProcessor(level=logging.ERROR, tag_keys=[\"city\", \"timezone\"]),\n    ],...\n)\n\nlog.error(\"error message\", city=\"Tehran\", timezone=\"UTC+3:30\", movie_title=\"Some title\")\n```\n\nthis will report the error and the sentry event will have **city** and **timezone** tags.\nIf you want to have all event data as tags, create the `SentryProcessor` with `tag_keys=\"__all__\"`.\n\n```python\nstructlog.configure(\n    processors=[\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        SentryProcessor(level=logging.ERROR, tag_keys=\"__all__\"),\n    ],...\n)\n```\n\n### Skip Extra\n\nBy default `SentryProcessor` will send `event_dict` key/value pairs as extra info to the sentry.\nSometimes you may want to skip this, specially when sending the `event_dict` as sentry tags:\n\n```python\nstructlog.configure(\n    processors=[\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        SentryProcessor(level=logging.ERROR, as_extra=False, tag_keys=\"__all__\"),\n    ],...\n)\n```\n\n### Logging as JSON\n\nIf you want to configure `structlog` to format the output as **JSON**\n(maybe for [elk-stack](https://www.elastic.co/elk-stack)) you have to use `SentryJsonProcessor` to prevent\nduplication of an event reported to sentry.\n\n```python\nfrom structlog_sentry import SentryJsonProcessor\n\nstructlog.configure(\n    processors=[\n        structlog.stdlib.add_logger_name,  # required before SentryJsonProcessor()\n        structlog.stdlib.add_log_level,\n        SentryJsonProcessor(level=logging.ERROR, tag_keys=\"__all__\"),\n        structlog.processors.JSONRenderer()\n    ],...\n)\n```\n\nThis processor tells sentry to *ignore* the logger and captures the events manually.\n\n## Testing\n\nTo run all tests:\n\n```\ntox\n```\n\nNote that tox doesn't know when you change the `requirements.txt`\nand won't automatically install new dependencies for test runs.\nRun `pip install tox-battery` to install a plugin which fixes this silliness.\n\n## Contributing\n\nCreate a merge request and assign it to @paveldedik for review.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kiwicom/structlog-sentry", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "structlog-sentry", "package_url": "https://pypi.org/project/structlog-sentry/", "platform": "", "project_url": "https://pypi.org/project/structlog-sentry/", "project_urls": {"Homepage": "https://github.com/kiwicom/structlog-sentry"}, "release_url": "https://pypi.org/project/structlog-sentry/1.2.2/", "requires_dist": ["sentry-sdk"], "requires_python": ">=3.5", "summary": "", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>structlog-sentry</h1>\n<p><a href=\"https://travis-ci.org/kiwicom/structlog-sentry\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9b8679c4c3f526036bebf83770152331246dcea/68747470733a2f2f7472617669732d63692e6f72672f6b697769636f6d2f7374727563746c6f672d73656e7472792e7376673f6272616e63683d6d6173746572\"></a></p>\n<table>\n<thead>\n<tr>\n<th>What</th>\n<th>Where</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Documentation</td>\n<td><a href=\"https://github.com/kiwicom/structlog-sentry\" rel=\"nofollow\">https://github.com/kiwicom/structlog-sentry</a></td>\n</tr>\n<tr>\n<td>Maintainer</td>\n<td><a href=\"https://github.com/paveldedik\" rel=\"nofollow\">@paveldedik</a></td>\n</tr></tbody></table>\n<p>Based on <a href=\"https://gist.github.com/hynek/a1f3f92d57071ebc5b91\" rel=\"nofollow\">https://gist.github.com/hynek/a1f3f92d57071ebc5b91</a></p>\n<h2>Installation</h2>\n<p>Install the package with <a href=\"https://pip.pypa.io/\" rel=\"nofollow\">pip</a>:</p>\n<pre><code>pip install structlog-sentry\n</code></pre>\n<h2>Usage</h2>\n<p>This module is intended to be used with <code>structlog</code> like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sentry_sdk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">structlog</span>\n<span class=\"kn\">from</span> <span class=\"nn\">structlog_sentry</span> <span class=\"kn\">import</span> <span class=\"n\">SentryProcessor</span>\n\n\n<span class=\"n\">sentry_sdk</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>  <span class=\"c1\"># pass dsn in argument or via SENTRY_DSN env variable</span>\n\n<span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_logger_name</span><span class=\"p\">,</span>  <span class=\"c1\"># optional, but before SentryProcessor()</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_log_level</span><span class=\"p\">,</span>  <span class=\"c1\"># required before SentryProcessor()</span>\n        <span class=\"n\">SentryProcessor</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">logger_factory</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n    <span class=\"n\">wrapper_class</span><span class=\"o\">=...</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">()</span>\n</pre>\n<p>Do not forget to add the <code>structlog.stdlib.add_log_level</code> and optionally the\n<code>structlog.stdlib.add_logger_name</code> processors before <code>SentryProcessor</code>. The\n<code>SentryProcessor</code> class takes the following arguments:</p>\n<ul>\n<li><code>level</code> - events of this or higher levels will be reported to Sentry,\ndefault is <code>WARNING</code></li>\n<li><code>active</code> - default is <code>True</code>, setting to <code>False</code> disables the processor</li>\n</ul>\n<p>Now exceptions are automatically captured by Sentry with <code>log.error()</code>:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span>\n<span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"https://api.example.com/users/</span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s2\">/\"</span><span class=\"p\">)</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">RequestException</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"request error\"</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<p>This will automatically collect <code>sys.exc_info()</code> along with the message, if you want\nto turn this behavior off, just pass <code>exc_info=False</code>.</p>\n<p>When you want to use structlog's built-in\n<a href=\"http://www.structlog.org/en/stable/api.html#structlog.processors.format_exc_info\" rel=\"nofollow\"><code>format_exc_info</code></a>\nprocessor, make that the <code>SentryProcessor</code> comes <em>before</em> <code>format_exc_info</code>!\nOtherwise, the <code>SentryProcessor</code> won't have an <code>exc_info</code> to work with, because\nit's removed from the event by <code>format_exc_info</code>.</p>\n<p>Logging calls with no <code>sys.exc_info()</code> are also automatically captured by Sentry:</p>\n<pre><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"info message\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"accounts\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s2\">\"warning message\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"invoices\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"error message\"</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"products\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you do not want to forward logs into Sentry, just pass the <code>sentry_skip=True</code>\noptional argument to logger methods, like this:</p>\n<pre><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">sentry_skip</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Sentry Tags</h3>\n<p>You can set some or all of key/value pairs of structlog <code>event_dict</code> as sentry <code>tags</code>:</p>\n<pre><span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_logger_name</span><span class=\"p\">,</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_log_level</span><span class=\"p\">,</span>\n        <span class=\"n\">SentryProcessor</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"n\">tag_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"city\"</span><span class=\"p\">,</span> <span class=\"s2\">\"timezone\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span><span class=\"o\">...</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"error message\"</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s2\">\"Tehran\"</span><span class=\"p\">,</span> <span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s2\">\"UTC+3:30\"</span><span class=\"p\">,</span> <span class=\"n\">movie_title</span><span class=\"o\">=</span><span class=\"s2\">\"Some title\"</span><span class=\"p\">)</span>\n</pre>\n<p>this will report the error and the sentry event will have <strong>city</strong> and <strong>timezone</strong> tags.\nIf you want to have all event data as tags, create the <code>SentryProcessor</code> with <code>tag_keys=\"__all__\"</code>.</p>\n<pre><span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_logger_name</span><span class=\"p\">,</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_log_level</span><span class=\"p\">,</span>\n        <span class=\"n\">SentryProcessor</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"n\">tag_keys</span><span class=\"o\">=</span><span class=\"s2\">\"__all__\"</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span><span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Skip Extra</h3>\n<p>By default <code>SentryProcessor</code> will send <code>event_dict</code> key/value pairs as extra info to the sentry.\nSometimes you may want to skip this, specially when sending the <code>event_dict</code> as sentry tags:</p>\n<pre><span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_logger_name</span><span class=\"p\">,</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_log_level</span><span class=\"p\">,</span>\n        <span class=\"n\">SentryProcessor</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"n\">as_extra</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">tag_keys</span><span class=\"o\">=</span><span class=\"s2\">\"__all__\"</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span><span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Logging as JSON</h3>\n<p>If you want to configure <code>structlog</code> to format the output as <strong>JSON</strong>\n(maybe for <a href=\"https://www.elastic.co/elk-stack\" rel=\"nofollow\">elk-stack</a>) you have to use <code>SentryJsonProcessor</code> to prevent\nduplication of an event reported to sentry.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">structlog_sentry</span> <span class=\"kn\">import</span> <span class=\"n\">SentryJsonProcessor</span>\n\n<span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span>\n    <span class=\"n\">processors</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_logger_name</span><span class=\"p\">,</span>  <span class=\"c1\"># required before SentryJsonProcessor()</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">add_log_level</span><span class=\"p\">,</span>\n        <span class=\"n\">SentryJsonProcessor</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span> <span class=\"n\">tag_keys</span><span class=\"o\">=</span><span class=\"s2\">\"__all__\"</span><span class=\"p\">),</span>\n        <span class=\"n\">structlog</span><span class=\"o\">.</span><span class=\"n\">processors</span><span class=\"o\">.</span><span class=\"n\">JSONRenderer</span><span class=\"p\">()</span>\n    <span class=\"p\">],</span><span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This processor tells sentry to <em>ignore</em> the logger and captures the events manually.</p>\n<h2>Testing</h2>\n<p>To run all tests:</p>\n<pre><code>tox\n</code></pre>\n<p>Note that tox doesn't know when you change the <code>requirements.txt</code>\nand won't automatically install new dependencies for test runs.\nRun <code>pip install tox-battery</code> to install a plugin which fixes this silliness.</p>\n<h2>Contributing</h2>\n<p>Create a merge request and assign it to @paveldedik for review.</p>\n\n          </div>"}, "last_serial": 6761923, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b93d67571a6eaf7dedfeabb1288683d3", "sha256": "afad0d2474597ac17d138f93d104992bc28f54be7a3084c3305a40f3169ebe5c"}, "downloads": -1, "filename": "structlog_sentry-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b93d67571a6eaf7dedfeabb1288683d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4718, "upload_time": "2019-04-30T13:39:42", "upload_time_iso_8601": "2019-04-30T13:39:42.529262Z", "url": "https://files.pythonhosted.org/packages/08/7c/735dc23feaf9af306338dfb56139cae17213284ad1ae84f48dd632cbbcfb/structlog_sentry-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1005bee23ad6a72b1ff2729e1d1835bc", "sha256": "20667e086d2a66b9cd54c750d6945c5c7b7fe9d3eef53b2a25e9b74d02dcc0a9"}, "downloads": -1, "filename": "structlog-sentry-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1005bee23ad6a72b1ff2729e1d1835bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3533, "upload_time": "2019-04-30T13:39:53", "upload_time_iso_8601": "2019-04-30T13:39:53.463365Z", "url": "https://files.pythonhosted.org/packages/cc/ef/af944c6511a912d9cf847270c48ed8c48eca758a9d9460a1f26ab0acdff0/structlog-sentry-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "351535bc48057894a7f5d63e28313230", "sha256": "0e45b7f3ca1597da42e7c8f685e55be7cdd8e6411ee8a5f71881b2ade1a7e9c5"}, "downloads": -1, "filename": "structlog-sentry-1.1.0.tar.gz", "has_sig": false, "md5_digest": "351535bc48057894a7f5d63e28313230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5420, "upload_time": "2019-07-25T06:33:38", "upload_time_iso_8601": "2019-07-25T06:33:38.999247Z", "url": "https://files.pythonhosted.org/packages/ee/9c/75d7ea408ce1456610f96fc72fb691271d54bd33197bbf09a9300c3b120d/structlog-sentry-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "d5d6a65f6a977aa9a43e6b14c5e40ad0", "sha256": "2dc807b8b9d75551fa202120a757e003806c3218f8cf218c754f80379c1bc65c"}, "downloads": -1, "filename": "structlog-sentry-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d5d6a65f6a977aa9a43e6b14c5e40ad0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5700, "upload_time": "2019-10-23T07:08:29", "upload_time_iso_8601": "2019-10-23T07:08:29.262021Z", "url": "https://files.pythonhosted.org/packages/3b/d5/55141c1fce7ff19e0f538a6fe5555cdd921b115c2b66f3622dea344646e6/structlog-sentry-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "9d601e2956e148014e77f539fad893ba", "sha256": "4cd6bd0f8933eefac470503e12b1b7e304fb653d0186d754d99870d9cf64db1c"}, "downloads": -1, "filename": "structlog-sentry-1.2.1.tar.gz", "has_sig": false, "md5_digest": "9d601e2956e148014e77f539fad893ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5959, "upload_time": "2019-11-12T17:25:32", "upload_time_iso_8601": "2019-11-12T17:25:32.537046Z", "url": "https://files.pythonhosted.org/packages/17/f5/22d6b80999e05c993326f59fa88e5fa26eeb623e0e0fb04c53d6e6618e6a/structlog-sentry-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "89c298bd383005918e47463f8986cb84", "sha256": "5afe21bf7bfa27284345198415ac6c88941d4aef345a523ae990c94a4f6890aa"}, "downloads": -1, "filename": "structlog_sentry-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "89c298bd383005918e47463f8986cb84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7621, "upload_time": "2020-03-06T13:22:56", "upload_time_iso_8601": "2020-03-06T13:22:56.493691Z", "url": "https://files.pythonhosted.org/packages/e6/6e/b9a2151d6762be4c6a289341827730dac0c441b83a65f7de9e88dab18641/structlog_sentry-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c64c75c33e78133051bc341b057e9a7", "sha256": "a990acddbc0a089c8e04ef290c36050147ce99b8f234bb8b9d198a4a7651a6b0"}, "downloads": -1, "filename": "structlog-sentry-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3c64c75c33e78133051bc341b057e9a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6472, "upload_time": "2020-03-06T13:23:01", "upload_time_iso_8601": "2020-03-06T13:23:01.646783Z", "url": "https://files.pythonhosted.org/packages/5f/d2/9b429fb5ef82a8ea9d24438dcea02aca0354507ea65d45563023e0b65b7b/structlog-sentry-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89c298bd383005918e47463f8986cb84", "sha256": "5afe21bf7bfa27284345198415ac6c88941d4aef345a523ae990c94a4f6890aa"}, "downloads": -1, "filename": "structlog_sentry-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "89c298bd383005918e47463f8986cb84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7621, "upload_time": "2020-03-06T13:22:56", "upload_time_iso_8601": "2020-03-06T13:22:56.493691Z", "url": "https://files.pythonhosted.org/packages/e6/6e/b9a2151d6762be4c6a289341827730dac0c441b83a65f7de9e88dab18641/structlog_sentry-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c64c75c33e78133051bc341b057e9a7", "sha256": "a990acddbc0a089c8e04ef290c36050147ce99b8f234bb8b9d198a4a7651a6b0"}, "downloads": -1, "filename": "structlog-sentry-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3c64c75c33e78133051bc341b057e9a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6472, "upload_time": "2020-03-06T13:23:01", "upload_time_iso_8601": "2020-03-06T13:23:01.646783Z", "url": "https://files.pythonhosted.org/packages/5f/d2/9b429fb5ef82a8ea9d24438dcea02aca0354507ea65d45563023e0b65b7b/structlog-sentry-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:04 2020"}