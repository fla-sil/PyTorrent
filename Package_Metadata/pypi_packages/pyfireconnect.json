{"info": {"author": "Quintus Labs", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5"], "description": "# PyFireConnect\n\nA python connector library for firebase [Firebase REST API](https://firebase.google.com). You can use this in a plain vanilla Python application or django application.\n\n\n**Key Highlights of Features**\n\n_Compatible with Python 2.7 - 3.7_\n\n_Authentication_\n\n_Database_\n\n_Storage_\n\n_Social Signup_\n\n## Installation\n\n```python\npip install pyfireconnect\n```\n\n## Getting Started\n\n### Python Version\n\npyfireconnect was written for python 3 and tested with 2.7\n\n### Add pyfireconnect to your application\n\nFor use with only user based authentication we can create the following configuration:\n\n```python\nimport pyfireconnect\n\nconfig = {\n  \"apiKey\": \"apiKey\",\n  \"authDomain\": \"projectId.firebaseapp.com\",\n  \"databaseURL\": \"https://databaseName.firebaseio.com\",\n  \"storageBucket\": \"projectId.appspot.com\"\n}\n\nfirebase = pyfireconnect.initialize(config)\n```\n\nWe can optionally add a [service account credential](https://firebase.google.com/docs/server/setup#prerequisites) to our\nconfiguration that will allow our server to authenticate with Firebase as an admin and disregard any security rules.\n\n```python\nimport pyfireconnect\n\nconfig = {\n  \"apiKey\": \"apiKey\",\n  \"authDomain\": \"projectId.firebaseapp.com\",\n  \"databaseURL\": \"https://databaseName.firebaseio.com\",\n  \"storageBucket\": \"projectId.appspot.com\",\n  \"serviceAccount\": \"path/to/serviceAccountCredentials.json\"\n}\n\nfirebase = pyfireconnect.initialize(config)\n```\n\nAdding a service account will authenticate as an admin by default for all database queries, check out the\n[Authentication documentation](#authentication) for how to authenticate users.\n\n### Use Services\n\nA pyfireconnect app can use multiple Firebase services.\n\n```firebase.auth()``` - [Authentication](#authentication)\n\n```firebase.database()``` - [Database](#database)\n\n```firebase.storage()``` - [Storage](#storage)\n\nCheck out the documentation for each service for further details.\n\n## Authentication\n\nThe ```sign_in_with_email_and_password()``` method will return user data including a token you can use to adhere to security rules.\n\nEach of the following methods accepts a user token: ```get()```, ```push()```, ```set()```, ```update()```, ```remove()``` and ```stream()```.\n\n```python\n# Get a reference to the auth service\nauth = firebase.auth()\n\n# Log the user in\nuser = auth.sign_in_with_email_and_password(email, password)\n\n\n#social sign up\nfb_access_token = \"EAANUSasYcQEBAJNudphsPoizjpohueZA3nX7ZCFdpWlDmgJ19zDdu3dJQQ4sZBXDMA6KTqY58MBAK6kBeegZBnoVtRmHmAmkc26pAarUr6ycAYlZArUH2m5RbgEst2ms6mc5JVrSJGJsGyQOgdzRPeJkdIdEoekPG0DnJBdndsMce4ycD6OrEixZCcwPVKOiZBEKy0wTOJQ3wZDZD\"\n\nrequest_uri = 'http://localhost'\n\nsocial_user = auth.social_signup(fb_access_token, \"facebook.com\", request_uri)\n\n\n\n# Get a reference to the database service\ndb = firebase.database()\n\n# data to save\ndata = {\n    \"name\": \"Mortimer 'Morty' Smith\"\n}\n\n# Pass the user's idToken to the push method\nresults = db.child(\"users\").push(data, user['idToken'])\n```\n\n### Token expiry\n\nA user's idToken expires after 1 hour, so be sure to use the user's refreshToken to avoid stale tokens.\n```\nuser = auth.sign_in_with_email_and_password(email, password)\n# before the 1 hour expiry:\nuser = auth.refresh(user['refreshToken'])\n# now we have a fresh token\nuser['idToken']\n```\n\n### Custom tokens\n\nYou can also create users using [custom tokens](https://firebase.google.com/docs/auth/server/create-custom-tokens), for example:\n```\ntoken = auth.create_custom_token(\"your_custom_id\")\n```\nYou can also pass in additional claims.\n```\ntoken_with_additional_claims = auth.create_custom_token(\"your_custom_id\", {\"premium_account\": True})\n```\nYou can then send these tokens to the client to sign in, or sign in as the user on the server.\n```\nuser = auth.sign_in_with_custom_token(token)\n```\n\n### Manage Users\n\n#### Creating users\n\n```python\nauth.create_user_with_email_and_password(email, password)\n```\nNote: Make sure you have the Email/password provider enabled in your Firebase dashboard under Auth -> Sign In Method.\n\n#### Verifying emails\n\n```python\nauth.send_email_verification(user['idToken'])\n```\n\n#### Sending password reset emails\n\n```python\nauth.send_password_reset_email(\"email\")\n```\n\n#### Get account information\n```python\nauth.get_account_info(user['idToken'])\n```\n\n#### Refreshing tokens\n```python\nuser = auth.refresh(user['refreshToken'])\n```\n\n## Database\n\nYou can build paths to your data by using the ```child()``` method.\n\n```python\ndb = firebase.database()\ndb.child(\"users\").child(\"Morty\")\n```\n\n### Save Data\n\n#### push\n\nTo save data with a unique, auto-generated, timestamp-based key, use the ```push()``` method.\n\n```python\ndata = {\"name\": \"Mortimer 'Morty' Smith\"}\ndb.child(\"users\").push(data)\n```\n\n#### set\n\nTo create your own keys use the ```set()``` method. The key in the example below is \"Morty\".\n\n```python\ndata = {\"name\": \"Mortimer 'Morty' Smith\"}\ndb.child(\"users\").child(\"Morty\").set(data)\n```\n\n#### update\n\nTo update data for an existing entry use the ```update()``` method.\n\n```python\ndb.child(\"users\").child(\"Morty\").update({\"name\": \"Mortiest Morty\"})\n```\n\n#### remove\n\nTo delete data for an existing entry use the ```remove()``` method.\n\n```python\ndb.child(\"users\").child(\"Morty\").remove()\n```\n\n#### multi-location updates\n\nYou can also perform [multi-location updates](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html) with the ```update()``` method.\n\n```python\ndata = {\n    \"users/Morty/\": {\n        \"name\": \"Mortimer 'Morty' Smith\"\n    },\n    \"users/Rick/\": {\n        \"name\": \"Rick Sanchez\"\n    }\n}\n\ndb.update(data)\n```\n\nTo perform multi-location writes to new locations we can use the ```generate_key()``` method.\n\n```python\ndata = {\n    \"users/\"+ref.generate_key(): {\n        \"name\": \"Mortimer 'Morty' Smith\"\n    },\n    \"users/\"+ref.generate_key(): {\n        \"name\": \"Rick Sanchez\"\n    }\n}\n\ndb.update(data)\n```\n\n### Retrieve Data\n\n#### val\nQueries return a PyreResponse object. Calling ```val()``` on these objects returns the query data.\n\n```\nusers = db.child(\"users\").get()\nprint(users.val()) # {\"Morty\": {\"name\": \"Mortimer 'Morty' Smith\"}, \"Rick\": {\"name\": \"Rick Sanchez\"}}\n```\n\n#### key\nCalling ```key()``` returns the key for the query data.\n\n```\nuser = db.child(\"users\").get()\nprint(user.key()) # users\n```\n\n#### each\nReturns a list of objects on each of which you can call ```val()``` and ```key()```.\n\n```\nall_users = db.child(\"users\").get()\nfor user in all_users.each():\n    print(user.key()) # Morty\n    print(user.val()) # {name\": \"Mortimer 'Morty' Smith\"}\n```\n\n#### get\n\nTo return data from a path simply call the ```get()``` method.\n\n```python\nall_users = db.child(\"users\").get()\n```\n\n#### shallow\n\nTo return just the keys at a particular path use the ```shallow()``` method.\n\n```python\nall_user_ids = db.child(\"users\").shallow().get()\n```\n\nNote: ```shallow()``` can not be used in conjunction with any complex queries.\n\n#### streaming\n\nYou can listen to live changes to your data with the ```stream()``` method.\n\n```python\ndef stream_handler(message):\n    print(message[\"event\"]) # put\n    print(message[\"path\"]) # /-K7yGTTEp7O549EzTYtI\n    print(message[\"data\"]) # {'title': 'pyfireconnect', \"body\": \"etc...\"}\n\nmy_stream = db.child(\"posts\").stream(stream_handler)\n```\n\nYou should at least handle `put` and `patch` events. Refer to [\"Streaming from the REST API\"][streaming] for details.\n\n[streaming]: https://firebase.google.com/docs/reference/rest/database/#section-streaming\n\nYou can also add a ```stream_id``` to help you identify a stream if you have multiple running:\n\n```\nmy_stream = db.child(\"posts\").stream(stream_handler, stream_id=\"new_posts\")\n```\n\n#### close the stream\n\n```python\nmy_stream.close()\n```\n\n### Complex Queries\n\nQueries can be built by chaining multiple query parameters together.\n\n```python\nusers_by_name = db.child(\"users\").order_by_child(\"name\").limit_to_first(3).get()\n```\nThis query will return the first three users ordered by name.\n\n#### order_by_child\n\nWe begin any complex query with ```order_by_child()```.\n\n```python\nusers_by_name = db.child(\"users\").order_by_child(\"name\").get()\n```\nThis query will return users ordered by name.\n\n#### equal_to\n\nReturn data with a specific value.\n\n```python\nusers_by_score = db.child(\"users\").order_by_child(\"score\").equal_to(10).get()\n```\nThis query will return users with a score of 10.\n\n#### start_at and end_at\n\nSpecify a range in your data.\n\n```python\nusers_by_score = db.child(\"users\").order_by_child(\"score\").start_at(3).end_at(10).get()\n```\nThis query returns users ordered by score and with a score between 3 and 10.\n\n#### limit_to_first and limit_to_last\n\nLimits data returned.\n\n```python\nusers_by_score = db.child(\"users\").order_by_child(\"score\").limit_to_first(5).get()\n```\nThis query returns the first five users ordered by score.\n\n#### order_by_key\n\nWhen using ```order_by_key()``` to sort your data, data is returned in ascending order by key.\n\n```python\nusers_by_key = db.child(\"users\").order_by_key().get()\n```\n\n#### order_by_value\n\nWhen using ```order_by_value()```, children are ordered by their value.\n\n```python\nusers_by_value = db.child(\"users\").order_by_value().get()\n```\n\n\n## Storage\n\nThe storage service allows you to upload images to Firebase.\n\n### child\n\nJust like with the Database service, you can build paths to your data with the Storage service.\n\n```python\nstorage.child(\"images/example.jpg\")\n```\n\n### put\n\nThe put method takes the path to the local file and an optional user token.\n\n```python\nstorage = firebase.storage()\n# as admin\nstorage.child(\"images/example.jpg\").put(\"example2.jpg\")\n# as user\nstorage.child(\"images/example.jpg\").put(\"example2.jpg\", user['idToken'])\n```\n\n### download\n\nThe download method takes the path to the saved database file and the name you want the downloaded file to have.\n\n```\nstorage.child(\"images/example.jpg\").download(\"downloaded.jpg\")\n```\n\n### get_url\n\nThe get_url method takes the path to the saved database file and returns the storage url.\n\n```\nstorage.child(\"images/example.jpg\").get_url()\n# https://firebasestorage.googleapis.com/v0/b/storage-url.appspot.com/o/images%2Fexample.jpg?alt=media\n```\n\n### Helper Methods\n\n#### generate_key\n\n```db.generate_key()``` is an implementation of Firebase's [key generation algorithm](https://www.firebase.com/blog/2015-02-11-firebase-unique-identifiers.html).\n\nSee multi-location updates for a potential use case.\n\n#### sort\n\nSometimes we might want to sort our data multiple times. For example, we might want to retrieve all articles written between a\ncertain date then sort those articles based on the number of likes.\n\nCurrently the REST API only allows us to sort our data once, so the ```sort()``` method bridges this gap.\n\n```python\narticles = db.child(\"articles\").order_by_child(\"date\").start_at(startDate).end_at(endDate).get()\narticles_by_likes = db.sort(articles, \"likes\")\n```\n\n### Common Errors\n\n#### Index not defined\n\nIndexing is [not enabled](https://www.firebase.com/docs/security/guide/indexing-data.html) for the database reference.\n\nThis project is forked from https://github.com/thisbejim/pyrebase", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quintuslabs/pyfireconnect", "keywords": "Firebase,Python 3", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyfireconnect", "package_url": "https://pypi.org/project/pyfireconnect/", "platform": "", "project_url": "https://pypi.org/project/pyfireconnect/", "project_urls": {"Homepage": "https://github.com/quintuslabs/pyfireconnect"}, "release_url": "https://pypi.org/project/pyfireconnect/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple python wrapper for the Firebase API compatible with Python 3.7, supports social signup", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyFireConnect</h1>\n<p>A python connector library for firebase <a href=\"https://firebase.google.com\" rel=\"nofollow\">Firebase REST API</a>. You can use this in a plain vanilla Python application or django application.</p>\n<p><strong>Key Highlights of Features</strong></p>\n<p><em>Compatible with Python 2.7 - 3.7</em></p>\n<p><em>Authentication</em></p>\n<p><em>Database</em></p>\n<p><em>Storage</em></p>\n<p><em>Social Signup</em></p>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pyfireconnect</span>\n</pre>\n<h2>Getting Started</h2>\n<h3>Python Version</h3>\n<p>pyfireconnect was written for python 3 and tested with 2.7</p>\n<h3>Add pyfireconnect to your application</h3>\n<p>For use with only user based authentication we can create the following configuration:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyfireconnect</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"apiKey\"</span><span class=\"p\">:</span> <span class=\"s2\">\"apiKey\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"authDomain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"projectId.firebaseapp.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"databaseURL\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://databaseName.firebaseio.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"storageBucket\"</span><span class=\"p\">:</span> <span class=\"s2\">\"projectId.appspot.com\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">pyfireconnect</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<p>We can optionally add a <a href=\"https://firebase.google.com/docs/server/setup#prerequisites\" rel=\"nofollow\">service account credential</a> to our\nconfiguration that will allow our server to authenticate with Firebase as an admin and disregard any security rules.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyfireconnect</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"apiKey\"</span><span class=\"p\">:</span> <span class=\"s2\">\"apiKey\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"authDomain\"</span><span class=\"p\">:</span> <span class=\"s2\">\"projectId.firebaseapp.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"databaseURL\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://databaseName.firebaseio.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"storageBucket\"</span><span class=\"p\">:</span> <span class=\"s2\">\"projectId.appspot.com\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"serviceAccount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"path/to/serviceAccountCredentials.json\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">firebase</span> <span class=\"o\">=</span> <span class=\"n\">pyfireconnect</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<p>Adding a service account will authenticate as an admin by default for all database queries, check out the\n<a href=\"#authentication\" rel=\"nofollow\">Authentication documentation</a> for how to authenticate users.</p>\n<h3>Use Services</h3>\n<p>A pyfireconnect app can use multiple Firebase services.</p>\n<p><code>firebase.auth()</code> - <a href=\"#authentication\" rel=\"nofollow\">Authentication</a></p>\n<p><code>firebase.database()</code> - <a href=\"#database\" rel=\"nofollow\">Database</a></p>\n<p><code>firebase.storage()</code> - <a href=\"#storage\" rel=\"nofollow\">Storage</a></p>\n<p>Check out the documentation for each service for further details.</p>\n<h2>Authentication</h2>\n<p>The <code>sign_in_with_email_and_password()</code> method will return user data including a token you can use to adhere to security rules.</p>\n<p>Each of the following methods accepts a user token: <code>get()</code>, <code>push()</code>, <code>set()</code>, <code>update()</code>, <code>remove()</code> and <code>stream()</code>.</p>\n<pre><span class=\"c1\"># Get a reference to the auth service</span>\n<span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">auth</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Log the user in</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">sign_in_with_email_and_password</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">#social sign up</span>\n<span class=\"n\">fb_access_token</span> <span class=\"o\">=</span> <span class=\"s2\">\"EAANUSasYcQEBAJNudphsPoizjpohueZA3nX7ZCFdpWlDmgJ19zDdu3dJQQ4sZBXDMA6KTqY58MBAK6kBeegZBnoVtRmHmAmkc26pAarUr6ycAYlZArUH2m5RbgEst2ms6mc5JVrSJGJsGyQOgdzRPeJkdIdEoekPG0DnJBdndsMce4ycD6OrEixZCcwPVKOiZBEKy0wTOJQ3wZDZD\"</span>\n\n<span class=\"n\">request_uri</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost'</span>\n\n<span class=\"n\">social_user</span> <span class=\"o\">=</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">social_signup</span><span class=\"p\">(</span><span class=\"n\">fb_access_token</span><span class=\"p\">,</span> <span class=\"s2\">\"facebook.com\"</span><span class=\"p\">,</span> <span class=\"n\">request_uri</span><span class=\"p\">)</span>\n\n\n\n<span class=\"c1\"># Get a reference to the database service</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># data to save</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortimer 'Morty' Smith\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Pass the user's idToken to the push method</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'idToken'</span><span class=\"p\">])</span>\n</pre>\n<h3>Token expiry</h3>\n<p>A user's idToken expires after 1 hour, so be sure to use the user's refreshToken to avoid stale tokens.</p>\n<pre><code>user = auth.sign_in_with_email_and_password(email, password)\n# before the 1 hour expiry:\nuser = auth.refresh(user['refreshToken'])\n# now we have a fresh token\nuser['idToken']\n</code></pre>\n<h3>Custom tokens</h3>\n<p>You can also create users using <a href=\"https://firebase.google.com/docs/auth/server/create-custom-tokens\" rel=\"nofollow\">custom tokens</a>, for example:</p>\n<pre><code>token = auth.create_custom_token(\"your_custom_id\")\n</code></pre>\n<p>You can also pass in additional claims.</p>\n<pre><code>token_with_additional_claims = auth.create_custom_token(\"your_custom_id\", {\"premium_account\": True})\n</code></pre>\n<p>You can then send these tokens to the client to sign in, or sign in as the user on the server.</p>\n<pre><code>user = auth.sign_in_with_custom_token(token)\n</code></pre>\n<h3>Manage Users</h3>\n<h4>Creating users</h4>\n<pre><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">create_user_with_email_and_password</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n</pre>\n<p>Note: Make sure you have the Email/password provider enabled in your Firebase dashboard under Auth -&gt; Sign In Method.</p>\n<h4>Verifying emails</h4>\n<pre><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">send_email_verification</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'idToken'</span><span class=\"p\">])</span>\n</pre>\n<h4>Sending password reset emails</h4>\n<pre><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">send_password_reset_email</span><span class=\"p\">(</span><span class=\"s2\">\"email\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Get account information</h4>\n<pre><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">get_account_info</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'idToken'</span><span class=\"p\">])</span>\n</pre>\n<h4>Refreshing tokens</h4>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'refreshToken'</span><span class=\"p\">])</span>\n</pre>\n<h2>Database</h2>\n<p>You can build paths to your data by using the <code>child()</code> method.</p>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">()</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"Morty\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Save Data</h3>\n<h4>push</h4>\n<p>To save data with a unique, auto-generated, timestamp-based key, use the <code>push()</code> method.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortimer 'Morty' Smith\"</span><span class=\"p\">}</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>set</h4>\n<p>To create your own keys use the <code>set()</code> method. The key in the example below is \"Morty\".</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortimer 'Morty' Smith\"</span><span class=\"p\">}</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"Morty\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>update</h4>\n<p>To update data for an existing entry use the <code>update()</code> method.</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"Morty\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortiest Morty\"</span><span class=\"p\">})</span>\n</pre>\n<h4>remove</h4>\n<p>To delete data for an existing entry use the <code>remove()</code> method.</p>\n<pre><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"Morty\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n</pre>\n<h4>multi-location updates</h4>\n<p>You can also perform <a href=\"https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html\" rel=\"nofollow\">multi-location updates</a> with the <code>update()</code> method.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"users/Morty/\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortimer 'Morty' Smith\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"users/Rick/\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Rick Sanchez\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>To perform multi-location writes to new locations we can use the <code>generate_key()</code> method.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"users/\"</span><span class=\"o\">+</span><span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">generate_key</span><span class=\"p\">():</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Mortimer 'Morty' Smith\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"users/\"</span><span class=\"o\">+</span><span class=\"n\">ref</span><span class=\"o\">.</span><span class=\"n\">generate_key</span><span class=\"p\">():</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Rick Sanchez\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h3>Retrieve Data</h3>\n<h4>val</h4>\n<p>Queries return a PyreResponse object. Calling <code>val()</code> on these objects returns the query data.</p>\n<pre><code>users = db.child(\"users\").get()\nprint(users.val()) # {\"Morty\": {\"name\": \"Mortimer 'Morty' Smith\"}, \"Rick\": {\"name\": \"Rick Sanchez\"}}\n</code></pre>\n<h4>key</h4>\n<p>Calling <code>key()</code> returns the key for the query data.</p>\n<pre><code>user = db.child(\"users\").get()\nprint(user.key()) # users\n</code></pre>\n<h4>each</h4>\n<p>Returns a list of objects on each of which you can call <code>val()</code> and <code>key()</code>.</p>\n<pre><code>all_users = db.child(\"users\").get()\nfor user in all_users.each():\n    print(user.key()) # Morty\n    print(user.val()) # {name\": \"Mortimer 'Morty' Smith\"}\n</code></pre>\n<h4>get</h4>\n<p>To return data from a path simply call the <code>get()</code> method.</p>\n<pre><span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h4>shallow</h4>\n<p>To return just the keys at a particular path use the <code>shallow()</code> method.</p>\n<pre><span class=\"n\">all_user_ids</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shallow</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>Note: <code>shallow()</code> can not be used in conjunction with any complex queries.</p>\n<h4>streaming</h4>\n<p>You can listen to live changes to your data with the <code>stream()</code> method.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">stream_handler</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s2\">\"event\"</span><span class=\"p\">])</span> <span class=\"c1\"># put</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s2\">\"path\"</span><span class=\"p\">])</span> <span class=\"c1\"># /-K7yGTTEp7O549EzTYtI</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s2\">\"data\"</span><span class=\"p\">])</span> <span class=\"c1\"># {'title': 'pyfireconnect', \"body\": \"etc...\"}</span>\n\n<span class=\"n\">my_stream</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"posts\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"p\">(</span><span class=\"n\">stream_handler</span><span class=\"p\">)</span>\n</pre>\n<p>You should at least handle <code>put</code> and <code>patch</code> events. Refer to <a href=\"https://firebase.google.com/docs/reference/rest/database/#section-streaming\" rel=\"nofollow\">\"Streaming from the REST API\"</a> for details.</p>\n<p>You can also add a <code>stream_id</code> to help you identify a stream if you have multiple running:</p>\n<pre><code>my_stream = db.child(\"posts\").stream(stream_handler, stream_id=\"new_posts\")\n</code></pre>\n<h4>close the stream</h4>\n<pre><span class=\"n\">my_stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h3>Complex Queries</h3>\n<p>Queries can be built by chaining multiple query parameters together.</p>\n<pre><span class=\"n\">users_by_name</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit_to_first</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This query will return the first three users ordered by name.</p>\n<h4>order_by_child</h4>\n<p>We begin any complex query with <code>order_by_child()</code>.</p>\n<pre><span class=\"n\">users_by_name</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This query will return users ordered by name.</p>\n<h4>equal_to</h4>\n<p>Return data with a specific value.</p>\n<pre><span class=\"n\">users_by_score</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"score\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equal_to</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This query will return users with a score of 10.</p>\n<h4>start_at and end_at</h4>\n<p>Specify a range in your data.</p>\n<pre><span class=\"n\">users_by_score</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"score\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start_at</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">end_at</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This query returns users ordered by score and with a score between 3 and 10.</p>\n<h4>limit_to_first and limit_to_last</h4>\n<p>Limits data returned.</p>\n<pre><span class=\"n\">users_by_score</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"score\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit_to_first</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This query returns the first five users ordered by score.</p>\n<h4>order_by_key</h4>\n<p>When using <code>order_by_key()</code> to sort your data, data is returned in ascending order by key.</p>\n<pre><span class=\"n\">users_by_key</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_key</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h4>order_by_value</h4>\n<p>When using <code>order_by_value()</code>, children are ordered by their value.</p>\n<pre><span class=\"n\">users_by_value</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_value</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<h2>Storage</h2>\n<p>The storage service allows you to upload images to Firebase.</p>\n<h3>child</h3>\n<p>Just like with the Database service, you can build paths to your data with the Storage service.</p>\n<pre><span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"images/example.jpg\"</span><span class=\"p\">)</span>\n</pre>\n<h3>put</h3>\n<p>The put method takes the path to the local file and an optional user token.</p>\n<pre><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">firebase</span><span class=\"o\">.</span><span class=\"n\">storage</span><span class=\"p\">()</span>\n<span class=\"c1\"># as admin</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"images/example.jpg\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"example2.jpg\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># as user</span>\n<span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"images/example.jpg\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"example2.jpg\"</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'idToken'</span><span class=\"p\">])</span>\n</pre>\n<h3>download</h3>\n<p>The download method takes the path to the saved database file and the name you want the downloaded file to have.</p>\n<pre><code>storage.child(\"images/example.jpg\").download(\"downloaded.jpg\")\n</code></pre>\n<h3>get_url</h3>\n<p>The get_url method takes the path to the saved database file and returns the storage url.</p>\n<pre><code>storage.child(\"images/example.jpg\").get_url()\n# https://firebasestorage.googleapis.com/v0/b/storage-url.appspot.com/o/images%2Fexample.jpg?alt=media\n</code></pre>\n<h3>Helper Methods</h3>\n<h4>generate_key</h4>\n<p><code>db.generate_key()</code> is an implementation of Firebase's <a href=\"https://www.firebase.com/blog/2015-02-11-firebase-unique-identifiers.html\" rel=\"nofollow\">key generation algorithm</a>.</p>\n<p>See multi-location updates for a potential use case.</p>\n<h4>sort</h4>\n<p>Sometimes we might want to sort our data multiple times. For example, we might want to retrieve all articles written between a\ncertain date then sort those articles based on the number of likes.</p>\n<p>Currently the REST API only allows us to sort our data once, so the <code>sort()</code> method bridges this gap.</p>\n<pre><span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"s2\">\"articles\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by_child</span><span class=\"p\">(</span><span class=\"s2\">\"date\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start_at</span><span class=\"p\">(</span><span class=\"n\">startDate</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">end_at</span><span class=\"p\">(</span><span class=\"n\">endDate</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"n\">articles_by_likes</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">,</span> <span class=\"s2\">\"likes\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Common Errors</h3>\n<h4>Index not defined</h4>\n<p>Indexing is <a href=\"https://www.firebase.com/docs/security/guide/indexing-data.html\" rel=\"nofollow\">not enabled</a> for the database reference.</p>\n<p>This project is forked from <a href=\"https://github.com/thisbejim/pyrebase\" rel=\"nofollow\">https://github.com/thisbejim/pyrebase</a></p>\n\n          </div>"}, "last_serial": 5999616, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "94cd7d3cfc6e72f425411d02b02de615", "sha256": "11ce06eefdf529e5e04329e15b25e25d0827b76f7f319de96f7ee1ce06fedf59"}, "downloads": -1, "filename": "pyfireconnect-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "94cd7d3cfc6e72f425411d02b02de615", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12193, "upload_time": "2019-09-23T04:12:22", "upload_time_iso_8601": "2019-09-23T04:12:22.466319Z", "url": "https://files.pythonhosted.org/packages/0e/d0/90bb3f5e97d1888ead408190d26f0525b619c077cf3af8030394d0159cb7/pyfireconnect-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c41b52b952aaec701da2b2bb990061d7", "sha256": "fe6a49c030ee6dc8e48dd3ae4f64e50b2b25f42dbbfc3ce4d28909ab55a47eb2"}, "downloads": -1, "filename": "pyfireconnect-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c41b52b952aaec701da2b2bb990061d7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12644, "upload_time": "2019-09-27T15:23:33", "upload_time_iso_8601": "2019-09-27T15:23:33.570305Z", "url": "https://files.pythonhosted.org/packages/32/6c/760f5bb3b1eda159553eaba2b163d8ae1f2db22a8f24d4ec5fde118eb127/pyfireconnect-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bee9f86d2e1823802f0580293ff9bf25", "sha256": "68b2f5c47760ed6d4a75700d021b63ebf44bc33c3c6f3b61b6e505f7e3585904"}, "downloads": -1, "filename": "pyfireconnect-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bee9f86d2e1823802f0580293ff9bf25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16795, "upload_time": "2019-10-19T11:24:41", "upload_time_iso_8601": "2019-10-19T11:24:41.769829Z", "url": "https://files.pythonhosted.org/packages/35/b3/4532a1ad7de2fed22a18fc19d180e72aedefc000ee54790cbe5f46546401/pyfireconnect-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bee9f86d2e1823802f0580293ff9bf25", "sha256": "68b2f5c47760ed6d4a75700d021b63ebf44bc33c3c6f3b61b6e505f7e3585904"}, "downloads": -1, "filename": "pyfireconnect-1.0.3.tar.gz", "has_sig": false, "md5_digest": "bee9f86d2e1823802f0580293ff9bf25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16795, "upload_time": "2019-10-19T11:24:41", "upload_time_iso_8601": "2019-10-19T11:24:41.769829Z", "url": "https://files.pythonhosted.org/packages/35/b3/4532a1ad7de2fed22a18fc19d180e72aedefc000ee54790cbe5f46546401/pyfireconnect-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:46 2020"}