{"info": {"author": "Vitaly Protsko", "author_email": "me@protsko.expert", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\ndjango-confenv\n==============\n\n**django-confenv** purpose - make django settings.py (or any other Python\nproject config) persistent, while real setup is done from file(s)\nwith simple \"env=value\" format or OS environment variables. Also, this\ntechnics is known as `Twelve-factor methodology`_ or 12factor_ method.\n\nNOTE, that, despite name, you can use django-confenv in *ANY* Python\nproject, without activating any django-related stuff.\n\n**django-confenv** is heavily reconstructed version of django-environ_\nby `Daniele Faraglia`_ and `other authors`_ . Differences from that code are:\n\n  - higher speed (sometimes much higher)\n  - smaller code\n  - smaller footprint\n  - django-related stuff moved to module\n  - more functionality in .env file(s) search/selection\n  - some improvements/speedups in 'api'\n  - separated basic tests for base and django functionality\n\n**django-confenv** is (C) 2019,2020 Vitaly Protsko <me@protsko.expert>\nReleased under GPLv3_ . If you need this code under other license, please,\ncontact the author.\n\n\nQuick usage\n-----------\n\nGet Env\n\n.. code-block:: python\n\n    # base functionality class\n    from confenv import Env\n\nfor Django projects\n\n.. code-block:: python\n\n    # Env with django species\n    from confenv.django import Env\n\nNext, \"configure\" Env itself\n\n.. code-block:: python\n\n    # Set exception to be raised in case of error\n    # For Django it is set to ImproperlyConfigured\n    #Env.exception = Exception\n\n    # Get default configuration file name from named\n    #   environemt variable\n    # Default: CONFENV_PROFILE\n    Env.defconf_key = 'BIGPROJECT_CONFNAME'\n\n    # Set env file name to be read, instead of name,\n    #   defined in env var named in Env.defconf_key\n    # filename + '.env' will also be checked, if\n    #   file with plain filename not found\n    # File will be searched in directory where calling\n    #   Env class instantiation program resides if\n    #   Env.filepath is None\n    # Default: '.env'\n    Env.filename = 'default.conf'\n\n    # Search for file Env.filename or file '.env' in this\n    #   path, if set.\n    # If name in Env.filename is absolute, filepath will\n    #   not be prepended (will be ignored).\n    # If this file path is not absolute the directory where\n    #   calling Env class instantiation program resides will\n    #   be prepended.\n    # Default: None\n    Env.filepath = '..'\n\n    # Set dict to operate on\n    # Default: os.environ\n    #Env.data = dict()\n\n\nCollect all changeable values in file, parseable also by shell:\n\n.. code-block:: sh\n\n    #\n    # default.conf\n    #\n\n    # put settings in environment variables\n    DEBUG=1\n\n    # you can use simple variable substitution. Remember, that\n    #   this interpreter is not a shell. This works only if you\n    #   start value from '$<varname>'. In that case variable\n    #   will be substituted by value of the variable, found in\n    #   previous asignments or in Env.data dictionary. Resolving\n    #   recursion depth is not limited.\n    CACHEDIR=$HOME/.cache\n\n\nYou can define\n  type and default value for parameters you use in you project by\n  defining a \"scheme\" directly as parameters, or as a dictionary.\n  For example, to define variable DEBUG as boolean parameter with\n  default 'False' value, you can use either form:\n\n.. code-block:: python\n\n    # directly in parameters\n    env = Env(DEBUG=(bool, False), CACHEDIR=(str, ))\n\n    # or as a prepared list of kwargs:\n    kwl = {\n      'DEBUG': (bool, False),\n      'CACHEDIR': (str, ),\n    }\n\n    env = Env(**kwl)\n\n\nFull list of supported types you can find later in this file.\n\n.. code-block:: python\n\n    # now use it in your program\n\n    # WARNING:\n    #   If you dont pass the default value to converter\n    #   or miss it in Env class's parameters (\"schema\"),\n    #   Env will require the variable to exist in OS\n    #   environment (precisely, in Env.data dict),\n    #   otherwise Env.exception will be thrown.\n\n    # this will assign True to variable debug, if\n    #   environment variable DEBUG value in\n    #   ('true', 'on', 'ok', 'y', 'yes', 'yea', '1')\n    #   Other value or variable absence will assign\n    #   False value.\n    DEBUG = env('DEBUG')\n\n    # you can directly point Env to conversion you\n    #   need to be done with value of env var by\n    #   calling corresponding method directly\n    SERVER = env.url('SERVER', 'http://www.example.com')\n\n    # this will assign instance of ParseResult from\n    #   urllib.parse with pre-parsed URL, for the default\n    #   value in example above it will be\n    #   ParseResult(scheme='http', netloc='www.example.com', path='', params='', query='', fragment='')\n    #\n    #   NB: all other conversions return expected type,\n    #     not an instance of side class\n\n    # use substituted var, but back it with default value\n    CACHE = env('CACHEDIR', default='/var/cache')\n\n    # complex json is also not a problem\n    PARAMS = env.json('PARAMETERS', \"{'par1':'val1', 'par2': {'def': 1, 'set': 2}, 'par3': [1, 2]}\")\n\n    # this will assign default dictionary to\n    #   variable PARAMS if PARAMETERS is absent in\n    #   env file or in OS environment variables\n\n\nSupported types\n---------------\n\nHere is all supported data types collected in example\n.env file and code to use it in your programs.\n\n.. code-block:: sh\n\n    #\n    # myappconf.env\n    #\n\n    # NB: Quotes for us are optional, value counted\n    #   from character after the equal sign, except\n    #   when surrounded by quotes, in which case\n    #   they are stripped.\n    #   There is limitation: variable assignments\n    #   must be written in one line. Continuations\n    #   are not supported.\n\n    # bool variable, accepting values\n    #   true on ok y yes yea 1\n    #   as True, any other value as False.\n    #   You can use \"export\" keyword before variable\n    #   name and maintain one place of configuration\n    #   for application and accompanying shell scripts\n    export DEBUG=no\n\n    #   lines with \"unset\" keyword are silently ignored\n    unset APP_DEBUG\n\n    # str variable\n    #   Any sequence of characters. This is effectively\n    #   the same, as unicode type, look below for\n    #   declaration example(s)\n    SERVERNAME=\"Our service server\"\n\n    # bytes variable\n    #   Sequence of any characters, that can be\n    #   decoded by .encode('utf8') method. Or you can\n    #   pass encoding directly to convertor method\n    #   with parameter: env.bytes('VAR', encoding='utf16')\n    WELCOMEMSG=\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!\n\n    # integer variable\n    PORT=1234\n\n    # float variable\n    MAXAVGLOAD=5.5\n\n    # list variable\n    LISTENIP=127.0.0.1,192.168.1.1,10.0.0.1\n\n    # tuple variable\n    #   value type in this case will be str\n    ENDPOINTS=(start,read,calculate,write,stop)\n\n    # dict variable #1\n    #   In this case all values are strings and\n    #   here is no need to declare \"schema\" for\n    #   this variant.\n    USERACL=root=admin,jdoe=operator,john=user\n\n    # dict variable #2\n    #   This dictionary variant needs declaration\n    #   to properly convert values, it can be done\n    #   in Env class instantiation parameters.\n    COEFFICIENT=a=10.11;b=5;result=unknown\n\n    # json variable\n    #   This type can be used for complex setup\n    #   of something (like menu) or for any other\n    #   kind of structured (initialization?) data.\n    MENUEXTRA={\"ExtraItem1\": {\"display\": \"&Cook Coffee\", \"handler\": \"cooker\", \"allow\": \"ALL\"}}\n\n    # url variable\n    #   This can be used for pointing to any kind\n    #   of resources, allowed schemes are as in\n    #   urllib.\n    EXTLOGO=http://image.bigproject.com/biglogo.jpg\n\n\nThere is additional convertors for django applications.\n  They pesent only in Env, imported from confenv.django\n  module.\n\n.. code-block:: sh\n\n    #\n    # djangosite.env\n    #\n\n    # Applications list\n    #   We can add applications to django's standard\n    #   list in this way.\n    APPADD=django.contrib.humanize\n    APPADD=$APPADD,django.contrib.syndication\n    APPADD=$APPADD,bs3base,testapp,myapp\n\n    # Database URL\n    #   This variable value can be parsed as database\n    #   configuration for django project. Env will\n    #   automatically select appropriate django driver\n    #   for database type pointed by url scheme.\n    #   Recognized schemes are:\n    #     postgres, postgresql, pgsql, postgis, mysql,\n    #     mysql2, mysql-connector, mysqlgis, mssql, oracle,\n    #     pyodbc, redshift, spatialite, sqlite, ldap\n    MAINDB_URL=pgsql://dbuser:dbpass@db.example.com:5432/bigproject?AUTOCOMMIT=True\n\n    # Cache URL\n    #   You can point django to cache resource(-s) as url\n    #   Recognized schemes are:\n    #     dbcache, dummycache, filecache, locmemcache,\n    #     memcache, pymemcache, rediscache, redis\n    CACHE_URL=locmemcache://\n    MEMCACHE_URL=memcache://localhost:12345\n\n    # E-Mail URL\n    #   Django's e-mail submitting parameters\n    #   Recognized schemes are:\n    #     smtp, smtps, smtp+tls, smtp+ssl, consolemail,\n    #     filemail, memorymail, dummymail\n    MAINMAIL=smtp+tls://senduser:accesspw@mta.example.com:587\n\n    # Search URL\n    #   This otional feature uses drivers from django-haystack\n    #   to find that needle.\n    #   Recognized schemes are:\n    #     elasticsearch, elasticsearch2, solr, whoosh,\n    #     xapian, simple\n    SEARCHENGINE=solr://search.example.com:8983/solr/bigproject?q=*.*\n\n\nYou can use all power of Env without any types declarations.\n  Env instance has methods for direct variable conversion.\n  But, I'm shure, you want stricter value type definitions,\n  that gives more chances in bug hunting.\n  Also, you always can use direct call to instance to get\n  plain value backed by default.\n\nNB: Here is nuance with naming variable type in declarations\n  and in call to convertors. Types from this list:\n\n    str, bool, int, float, list, tuple, dict\n\n  you can point directly, as they are build-in and this\n  identifiers are known for interpreter. Types\n\n    url, json, unicode, bytes\n\n  you can use only by quoting their names, as shown below.\n  Althrough, you can quote names of all types, including ones from\n  first list, if you do not remember well which ones are built-in.\n  ;-)\n\n.. code-block:: python\n\n    from confenv import Env\n    Env.filename = 'myappconf'\n\n    kwl = {\n      # if you dont give default value, you can get an exception\n      #   from Env in case if variable not present in Env.data\n      'DEBUG': (bool, False),\n\n      # you can completely omit declaration of variables\n      #   with str value type - it is default\n      #'SERVERNAME': (str, ),\n      #   or, which is equivalent, you can declare it as\n      'SERVERNAME': ('unicode', ),\n\n      # we'll comment out this declaration to demonstrate direct\n      #   convertor calls later\n      #'WELCOMEMSG': ('bytes', 'Welcome !'),\n\n      'PORT': (int, ),\n      'MAXAVGLOAD': (float, ),\n\n      # quoted type name also works\n      'LISTENIP': ('list', ),\n\n      # items for this tuple are of type str\n      'ENDPOINTS': (tuple, ),\n\n      # default type of values str\n      'USERACL': (dict, {'ALL': 'deny'} ),\n\n      # default value type is str\n      'COEFFICIENT': ({'value': str, 'cast': {'a': float, 'b': int} }, {'result': 'NaN'}),\n\n      'MENUEXTRA': ('json', ),\n      'EXTLOGO': ('url', ),\n    }\n\n    env = Env(**kwl)\n\n    # store values from environment in program configuration items\n    #\n\n    flagDebug = env('DEBUG')\n    # assigned value bool False\n\n    textServer = env('SERVERNAME', 'Default service')\n    # assigned value str 'Our service server'\n\n    # in-line conversion\n    textWelcome = env.bytes('WELCOMEMSG', 'Welcome !')\n    # assigned value str '\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!'\n\n    paramPort = env('PORT', default=4321)\n    # assigned value int 1234\n\n    paramLoad = env('MAXAVGLOAD', default=10.0)\n    # assigned value float 5.5\n\n    paramListen = env('LISTENIP', default=[ '0.0.0.0' ])\n    # assigned value [ '127.0.0.1', '192.168.1.1', '10.0.0.1' ]\n\n    progServices = env('ENDPOINTS', default=('start', 'stop'))\n    # assigned value tuple('start', 'read', 'calculate', 'write', 'stop')\n\n    paramACL = env('USERACL')\n    # assigned value {'root': 'admin', 'jdoe': 'operator', 'john': 'user'}\n\n    paramMUL = env('COEFFICIENT')\n    # assigned value { 'a': 10.11, 'b': 5, 'result': 'unknown' }\n\n    menuExtra = env('MENUEXTRA')\n    # assigned value { 'ExtraItem1': { 'display': '&Cook Coffee', 'handler': 'cooker', 'allow': 'ALL' } }\n\n    urlLogo = env('EXTLOGO')\n    # assigned value ParseResult(scheme='http', netloc='image.bigproject.com', path='/biglogo.jpg', params='', query='', fragment='')\n\n\nFor django project settings.py Env can generate complete configuration\ndictionaries for database, cache, e-mail and search functions to include\nit into standard django config structures.\n\n.. code-block:: python\n\n    # settings.py\n    #\n    # This file can be \"static\", all changeable information\n    # resides in ../myappconf.env and ../djangosite.env\n\n    # get django-specific Env\n    from confenv.django import Env\n\n    # set path to .env's to directory, where manage.py reside\n    Env.filepath = '..'\n\n    # expecting, that you place example .env files 'myappconf'\n    # and 'djangosite' in appropriate dir\n    Env.filename = 'myappconf'\n\n    # django Env's version have place to hold variable names\n    # to read database, cache, e-mail and search URLs default\n    # values from\n    # They are class members with this default values:\n    #Env.defenv_db = 'DATABASE_URL'\n    #Env.defenv_cache = 'CACHE_URL'\n    #Env.defenv_email = 'EMAIL_URL'\n    #Env.defenv_search = 'SEARCH_URL'\n\n    # search for database config here by default\n    Env.defenv_db = 'MAINDB_URL'\n\n    env = Env()\n\n    # load additional configuration\n    env.readfile(filename='djangosite')\n\n    DEBUG = env.bool('DEBUG', True)\n\n    # use \"untyped\" variable as list to extend\n    #   django's default\n    INSTALLED_APPS = [\n      # ... standard django's list ...\n    ] + env.list('APPADD', [])\n\n    # ...\n\n    # databases config\n    DATABASES = {\n      # config will be read from MAINDB_URL\n      'default': env.db_url(),\n    }\n\n    CACHES = {\n      # this cache config will be read from CACHE_URL\n      'default': env.cache_url(),\n\n      # second cache config\n      'quick': env.cache('MEMCACHE_URL'),\n    }\n\n    # This will require MAINMAIL key to be existent\n    #   in Env.data dict\n    EMAIL_CONFIG = env.email_url('MAINMAIL')\n    vars().update(EMAIL_CONFIG)\n\n    # django's search extension\n    HAYSTACK_CONNECTIONS = {\n      'default': env.search_url('SEARCHENGINE', 'simple://'),\n    }\n\n\nInstallation\n------------\n\nThis package can be installed from standard Python packages\nsource pypi.org\n\n.. code-block:: sh\n\n    pip install django-confenv\n\n\nCredits\n-------\n\nThis code is (c) Vitaly Protsko <me@protsko.expert>, under GPLv3_ .\n\nThis work is based on django-environ_ (c) `Daniele Faraglia`_\nwhich includes work from `other authors`_ .\n\n.. _GPLv3: https://www.gnu.org/licenses/gpl-3.0.html\n.. _12factor: http://www.12factor.net/\n.. _`Twelve-factor methodology`: http://www.12factor.net/\n.. _django-environ: https://github.com/joke2k/django-environ\n.. _`Daniele Faraglia`: https://daniele.faraglia.info\n.. _`other authors`: https://github.com/joke2k/django-environ/blob/develop/AUTHORS.rst\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gihhub.com/aTanW/django-confenv", "keywords": "django,env,environment,configuration,12factor,quick,easy,config,env var,django database,django cache,django email,django search", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "django-confenv", "package_url": "https://pypi.org/project/django-confenv/", "platform": "", "project_url": "https://pypi.org/project/django-confenv/", "project_urls": {"Homepage": "https://gihhub.com/aTanW/django-confenv"}, "release_url": "https://pypi.org/project/django-confenv/0.9.7/", "requires_dist": null, "requires_python": "", "summary": "Optimized app config (+Django) from environment vars and/or files", "version": "0.9.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>django-confenv</strong> purpose - make django settings.py (or any other Python\nproject config) persistent, while real setup is done from file(s)\nwith simple \u201cenv=value\u201d format or OS environment variables. Also, this\ntechnics is known as <a href=\"http://www.12factor.net/\" rel=\"nofollow\">Twelve-factor methodology</a> or <a href=\"http://www.12factor.net/\" rel=\"nofollow\">12factor</a> method.</p>\n<p>NOTE, that, despite name, you can use django-confenv in <em>ANY</em> Python\nproject, without activating any django-related stuff.</p>\n<p><strong>django-confenv</strong> is heavily reconstructed version of <a href=\"https://github.com/joke2k/django-environ\" rel=\"nofollow\">django-environ</a>\nby <a href=\"https://daniele.faraglia.info\" rel=\"nofollow\">Daniele Faraglia</a> and <a href=\"https://github.com/joke2k/django-environ/blob/develop/AUTHORS.rst\" rel=\"nofollow\">other authors</a> . Differences from that code are:</p>\n<blockquote>\n<ul>\n<li>higher speed (sometimes much higher)</li>\n<li>smaller code</li>\n<li>smaller footprint</li>\n<li>django-related stuff moved to module</li>\n<li>more functionality in .env file(s) search/selection</li>\n<li>some improvements/speedups in \u2018api\u2019</li>\n<li>separated basic tests for base and django functionality</li>\n</ul>\n</blockquote>\n<p><strong>django-confenv</strong> is (C) 2019,2020 Vitaly Protsko &lt;<a href=\"mailto:me%40protsko.expert\">me<span>@</span>protsko<span>.</span>expert</a>&gt;\nReleased under <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\" rel=\"nofollow\">GPLv3</a> . If you need this code under other license, please,\ncontact the author.</p>\n<div id=\"quick-usage\">\n<h2>Quick usage</h2>\n<p>Get Env</p>\n<pre><span class=\"c1\"># base functionality class</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confenv</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n</pre>\n<p>for Django projects</p>\n<pre><span class=\"c1\"># Env with django species</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confenv.django</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n</pre>\n<p>Next, \u201cconfigure\u201d Env itself</p>\n<pre><span class=\"c1\"># Set exception to be raised in case of error</span>\n<span class=\"c1\"># For Django it is set to ImproperlyConfigured</span>\n<span class=\"c1\">#Env.exception = Exception</span>\n\n<span class=\"c1\"># Get default configuration file name from named</span>\n<span class=\"c1\">#   environemt variable</span>\n<span class=\"c1\"># Default: CONFENV_PROFILE</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">defconf_key</span> <span class=\"o\">=</span> <span class=\"s1\">'BIGPROJECT_CONFNAME'</span>\n\n<span class=\"c1\"># Set env file name to be read, instead of name,</span>\n<span class=\"c1\">#   defined in env var named in Env.defconf_key</span>\n<span class=\"c1\"># filename + '.env' will also be checked, if</span>\n<span class=\"c1\">#   file with plain filename not found</span>\n<span class=\"c1\"># File will be searched in directory where calling</span>\n<span class=\"c1\">#   Env class instantiation program resides if</span>\n<span class=\"c1\">#   Env.filepath is None</span>\n<span class=\"c1\"># Default: '.env'</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'default.conf'</span>\n\n<span class=\"c1\"># Search for file Env.filename or file '.env' in this</span>\n<span class=\"c1\">#   path, if set.</span>\n<span class=\"c1\"># If name in Env.filename is absolute, filepath will</span>\n<span class=\"c1\">#   not be prepended (will be ignored).</span>\n<span class=\"c1\"># If this file path is not absolute the directory where</span>\n<span class=\"c1\">#   calling Env class instantiation program resides will</span>\n<span class=\"c1\">#   be prepended.</span>\n<span class=\"c1\"># Default: None</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'..'</span>\n\n<span class=\"c1\"># Set dict to operate on</span>\n<span class=\"c1\"># Default: os.environ</span>\n<span class=\"c1\">#Env.data = dict()</span>\n</pre>\n<p>Collect all changeable values in file, parseable also by shell:</p>\n<pre><span class=\"c1\">#\n# default.conf\n#\n</span>\n<span class=\"c1\"># put settings in environment variables\n</span><span class=\"nv\">DEBUG</span><span class=\"o\">=</span><span class=\"m\">1</span>\n\n<span class=\"c1\"># you can use simple variable substitution. Remember, that\n#   this interpreter is not a shell. This works only if you\n#   start value from '$&lt;varname&gt;'. In that case variable\n#   will be substituted by value of the variable, found in\n#   previous asignments or in Env.data dictionary. Resolving\n#   recursion depth is not limited.\n</span><span class=\"nv\">CACHEDIR</span><span class=\"o\">=</span><span class=\"nv\">$HOME</span>/.cache\n</pre>\n<dl>\n<dt>You can define</dt>\n<dd>type and default value for parameters you use in you project by\ndefining a \u201cscheme\u201d directly as parameters, or as a dictionary.\nFor example, to define variable DEBUG as boolean parameter with\ndefault \u2018False\u2019 value, you can use either form:</dd>\n</dl>\n<pre><span class=\"c1\"># directly in parameters</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span> <span class=\"n\">CACHEDIR</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n\n<span class=\"c1\"># or as a prepared list of kwargs:</span>\n<span class=\"n\">kwl</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'DEBUG'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"s1\">'CACHEDIR'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwl</span><span class=\"p\">)</span>\n</pre>\n<p>Full list of supported types you can find later in this file.</p>\n<pre><span class=\"c1\"># now use it in your program</span>\n\n<span class=\"c1\"># WARNING:</span>\n<span class=\"c1\">#   If you dont pass the default value to converter</span>\n<span class=\"c1\">#   or miss it in Env class's parameters (\"schema\"),</span>\n<span class=\"c1\">#   Env will require the variable to exist in OS</span>\n<span class=\"c1\">#   environment (precisely, in Env.data dict),</span>\n<span class=\"c1\">#   otherwise Env.exception will be thrown.</span>\n\n<span class=\"c1\"># this will assign True to variable debug, if</span>\n<span class=\"c1\">#   environment variable DEBUG value in</span>\n<span class=\"c1\">#   ('true', 'on', 'ok', 'y', 'yes', 'yea', '1')</span>\n<span class=\"c1\">#   Other value or variable absence will assign</span>\n<span class=\"c1\">#   False value.</span>\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># you can directly point Env to conversion you</span>\n<span class=\"c1\">#   need to be done with value of env var by</span>\n<span class=\"c1\">#   calling corresponding method directly</span>\n<span class=\"n\">SERVER</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s1\">'SERVER'</span><span class=\"p\">,</span> <span class=\"s1\">'http://www.example.com'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this will assign instance of ParseResult from</span>\n<span class=\"c1\">#   urllib.parse with pre-parsed URL, for the default</span>\n<span class=\"c1\">#   value in example above it will be</span>\n<span class=\"c1\">#   ParseResult(scheme='http', netloc='www.example.com', path='', params='', query='', fragment='')</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#   NB: all other conversions return expected type,</span>\n<span class=\"c1\">#     not an instance of side class</span>\n\n<span class=\"c1\"># use substituted var, but back it with default value</span>\n<span class=\"n\">CACHE</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'CACHEDIR'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'/var/cache'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># complex json is also not a problem</span>\n<span class=\"n\">PARAMS</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"s1\">'PARAMETERS'</span><span class=\"p\">,</span> <span class=\"s2\">\"{'par1':'val1', 'par2': {'def': 1, 'set': 2}, 'par3': [1, 2]}\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this will assign default dictionary to</span>\n<span class=\"c1\">#   variable PARAMS if PARAMETERS is absent in</span>\n<span class=\"c1\">#   env file or in OS environment variables</span>\n</pre>\n</div>\n<div id=\"supported-types\">\n<h2>Supported types</h2>\n<p>Here is all supported data types collected in example\n.env file and code to use it in your programs.</p>\n<pre><span class=\"c1\">#\n# myappconf.env\n#\n</span>\n<span class=\"c1\"># NB: Quotes for us are optional, value counted\n#   from character after the equal sign, except\n#   when surrounded by quotes, in which case\n#   they are stripped.\n#   There is limitation: variable assignments\n#   must be written in one line. Continuations\n#   are not supported.\n</span>\n<span class=\"c1\"># bool variable, accepting values\n#   true on ok y yes yea 1\n#   as True, any other value as False.\n#   You can use \"export\" keyword before variable\n#   name and maintain one place of configuration\n#   for application and accompanying shell scripts\n</span><span class=\"nb\">export</span> <span class=\"nv\">DEBUG</span><span class=\"o\">=</span>no\n\n<span class=\"c1\">#   lines with \"unset\" keyword are silently ignored\n</span><span class=\"nb\">unset</span> APP_DEBUG\n\n<span class=\"c1\"># str variable\n#   Any sequence of characters. This is effectively\n#   the same, as unicode type, look below for\n#   declaration example(s)\n</span><span class=\"nv\">SERVERNAME</span><span class=\"o\">=</span><span class=\"s2\">\"Our service server\"</span>\n\n<span class=\"c1\"># bytes variable\n#   Sequence of any characters, that can be\n#   decoded by .encode('utf8') method. Or you can\n#   pass encoding directly to convertor method\n#   with parameter: env.bytes('VAR', encoding='utf16')\n</span><span class=\"nv\">WELCOMEMSG</span><span class=\"o\">=</span>\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!\n\n<span class=\"c1\"># integer variable\n</span><span class=\"nv\">PORT</span><span class=\"o\">=</span><span class=\"m\">1234</span>\n\n<span class=\"c1\"># float variable\n</span><span class=\"nv\">MAXAVGLOAD</span><span class=\"o\">=</span><span class=\"m\">5</span>.5\n\n<span class=\"c1\"># list variable\n</span><span class=\"nv\">LISTENIP</span><span class=\"o\">=</span><span class=\"m\">127</span>.0.0.1,192.168.1.1,10.0.0.1\n\n<span class=\"c1\"># tuple variable\n#   value type in this case will be str\n</span><span class=\"nv\">ENDPOINTS</span><span class=\"o\">=(</span>start,read,calculate,write,stop<span class=\"o\">)</span>\n\n<span class=\"c1\"># dict variable #1\n#   In this case all values are strings and\n#   here is no need to declare \"schema\" for\n#   this variant.\n</span><span class=\"nv\">USERACL</span><span class=\"o\">=</span><span class=\"nv\">root</span><span class=\"o\">=</span>admin,jdoe<span class=\"o\">=</span>operator,john<span class=\"o\">=</span>user\n\n<span class=\"c1\"># dict variable #2\n#   This dictionary variant needs declaration\n#   to properly convert values, it can be done\n#   in Env class instantiation parameters.\n</span><span class=\"nv\">COEFFICIENT</span><span class=\"o\">=</span><span class=\"nv\">a</span><span class=\"o\">=</span><span class=\"m\">10</span>.11<span class=\"p\">;</span><span class=\"nv\">b</span><span class=\"o\">=</span><span class=\"m\">5</span><span class=\"p\">;</span><span class=\"nv\">result</span><span class=\"o\">=</span>unknown\n\n<span class=\"c1\"># json variable\n#   This type can be used for complex setup\n#   of something (like menu) or for any other\n#   kind of structured (initialization?) data.\n</span><span class=\"nv\">MENUEXTRA</span><span class=\"o\">={</span><span class=\"s2\">\"ExtraItem1\"</span>: <span class=\"o\">{</span><span class=\"s2\">\"display\"</span>: <span class=\"s2\">\"&amp;Cook Coffee\"</span>, <span class=\"s2\">\"handler\"</span>: <span class=\"s2\">\"cooker\"</span>, <span class=\"s2\">\"allow\"</span>: <span class=\"s2\">\"ALL\"</span><span class=\"o\">}}</span>\n\n<span class=\"c1\"># url variable\n#   This can be used for pointing to any kind\n#   of resources, allowed schemes are as in\n#   urllib.\n</span><span class=\"nv\">EXTLOGO</span><span class=\"o\">=</span>http://image.bigproject.com/biglogo.jpg\n</pre>\n<dl>\n<dt>There is additional convertors for django applications.</dt>\n<dd>They pesent only in Env, imported from confenv.django\nmodule.</dd>\n</dl>\n<pre><span class=\"c1\">#\n# djangosite.env\n#\n</span>\n<span class=\"c1\"># Applications list\n#   We can add applications to django's standard\n#   list in this way.\n</span><span class=\"nv\">APPADD</span><span class=\"o\">=</span>django.contrib.humanize\n<span class=\"nv\">APPADD</span><span class=\"o\">=</span><span class=\"nv\">$APPADD</span>,django.contrib.syndication\n<span class=\"nv\">APPADD</span><span class=\"o\">=</span><span class=\"nv\">$APPADD</span>,bs3base,testapp,myapp\n\n<span class=\"c1\"># Database URL\n#   This variable value can be parsed as database\n#   configuration for django project. Env will\n#   automatically select appropriate django driver\n#   for database type pointed by url scheme.\n#   Recognized schemes are:\n#     postgres, postgresql, pgsql, postgis, mysql,\n#     mysql2, mysql-connector, mysqlgis, mssql, oracle,\n#     pyodbc, redshift, spatialite, sqlite, ldap\n</span><span class=\"nv\">MAINDB_URL</span><span class=\"o\">=</span>pgsql://dbuser:dbpass@db.example.com:5432/bigproject?AUTOCOMMIT<span class=\"o\">=</span>True\n\n<span class=\"c1\"># Cache URL\n#   You can point django to cache resource(-s) as url\n#   Recognized schemes are:\n#     dbcache, dummycache, filecache, locmemcache,\n#     memcache, pymemcache, rediscache, redis\n</span><span class=\"nv\">CACHE_URL</span><span class=\"o\">=</span>locmemcache://\n<span class=\"nv\">MEMCACHE_URL</span><span class=\"o\">=</span>memcache://localhost:12345\n\n<span class=\"c1\"># E-Mail URL\n#   Django's e-mail submitting parameters\n#   Recognized schemes are:\n#     smtp, smtps, smtp+tls, smtp+ssl, consolemail,\n#     filemail, memorymail, dummymail\n</span><span class=\"nv\">MAINMAIL</span><span class=\"o\">=</span>smtp+tls://senduser:accesspw@mta.example.com:587\n\n<span class=\"c1\"># Search URL\n#   This otional feature uses drivers from django-haystack\n#   to find that needle.\n#   Recognized schemes are:\n#     elasticsearch, elasticsearch2, solr, whoosh,\n#     xapian, simple\n</span><span class=\"nv\">SEARCHENGINE</span><span class=\"o\">=</span>solr://search.example.com:8983/solr/bigproject?q<span class=\"o\">=</span>*.*\n</pre>\n<dl>\n<dt>You can use all power of Env without any types declarations.</dt>\n<dd>Env instance has methods for direct variable conversion.\nBut, I\u2019m shure, you want stricter value type definitions,\nthat gives more chances in bug hunting.\nAlso, you always can use direct call to instance to get\nplain value backed by default.</dd>\n<dt>NB: Here is nuance with naming variable type in declarations</dt>\n<dd><p>and in call to convertors. Types from this list:</p>\n<blockquote>\nstr, bool, int, float, list, tuple, dict</blockquote>\n<p>you can point directly, as they are build-in and this\nidentifiers are known for interpreter. Types</p>\n<blockquote>\nurl, json, unicode, bytes</blockquote>\n<p>you can use only by quoting their names, as shown below.\nAlthrough, you can quote names of all types, including ones from\nfirst list, if you do not remember well which ones are built-in.\n;-)</p>\n</dd>\n</dl>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">confenv</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'myappconf'</span>\n\n<span class=\"n\">kwl</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># if you dont give default value, you can get an exception</span>\n  <span class=\"c1\">#   from Env in case if variable not present in Env.data</span>\n  <span class=\"s1\">'DEBUG'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n\n  <span class=\"c1\"># you can completely omit declaration of variables</span>\n  <span class=\"c1\">#   with str value type - it is default</span>\n  <span class=\"c1\">#'SERVERNAME': (str, ),</span>\n  <span class=\"c1\">#   or, which is equivalent, you can declare it as</span>\n  <span class=\"s1\">'SERVERNAME'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'unicode'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n\n  <span class=\"c1\"># we'll comment out this declaration to demonstrate direct</span>\n  <span class=\"c1\">#   convertor calls later</span>\n  <span class=\"c1\">#'WELCOMEMSG': ('bytes', 'Welcome !'),</span>\n\n  <span class=\"s1\">'PORT'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n  <span class=\"s1\">'MAXAVGLOAD'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n\n  <span class=\"c1\"># quoted type name also works</span>\n  <span class=\"s1\">'LISTENIP'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'list'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n\n  <span class=\"c1\"># items for this tuple are of type str</span>\n  <span class=\"s1\">'ENDPOINTS'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n\n  <span class=\"c1\"># default type of values str</span>\n  <span class=\"s1\">'USERACL'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ALL'</span><span class=\"p\">:</span> <span class=\"s1\">'deny'</span><span class=\"p\">}</span> <span class=\"p\">),</span>\n\n  <span class=\"c1\"># default value type is str</span>\n  <span class=\"s1\">'COEFFICIENT'</span><span class=\"p\">:</span> <span class=\"p\">({</span><span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s1\">'cast'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">}</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"s1\">'NaN'</span><span class=\"p\">}),</span>\n\n  <span class=\"s1\">'MENUEXTRA'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n  <span class=\"s1\">'EXTLOGO'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'url'</span><span class=\"p\">,</span> <span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># store values from environment in program configuration items</span>\n<span class=\"c1\">#</span>\n\n<span class=\"n\">flagDebug</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value bool False</span>\n\n<span class=\"n\">textServer</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'SERVERNAME'</span><span class=\"p\">,</span> <span class=\"s1\">'Default service'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value str 'Our service server'</span>\n\n<span class=\"c1\"># in-line conversion</span>\n<span class=\"n\">textWelcome</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">bytes</span><span class=\"p\">(</span><span class=\"s1\">'WELCOMEMSG'</span><span class=\"p\">,</span> <span class=\"s1\">'Welcome !'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value str '\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!'</span>\n\n<span class=\"n\">paramPort</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'PORT'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">4321</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value int 1234</span>\n\n<span class=\"n\">paramLoad</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'MAXAVGLOAD'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value float 5.5</span>\n\n<span class=\"n\">paramListen</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'LISTENIP'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">[</span> <span class=\"s1\">'0.0.0.0'</span> <span class=\"p\">])</span>\n<span class=\"c1\"># assigned value [ '127.0.0.1', '192.168.1.1', '10.0.0.1' ]</span>\n\n<span class=\"n\">progServices</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'ENDPOINTS'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'stop'</span><span class=\"p\">))</span>\n<span class=\"c1\"># assigned value tuple('start', 'read', 'calculate', 'write', 'stop')</span>\n\n<span class=\"n\">paramACL</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'USERACL'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value {'root': 'admin', 'jdoe': 'operator', 'john': 'user'}</span>\n\n<span class=\"n\">paramMUL</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'COEFFICIENT'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value { 'a': 10.11, 'b': 5, 'result': 'unknown' }</span>\n\n<span class=\"n\">menuExtra</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'MENUEXTRA'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value { 'ExtraItem1': { 'display': '&amp;Cook Coffee', 'handler': 'cooker', 'allow': 'ALL' } }</span>\n\n<span class=\"n\">urlLogo</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'EXTLOGO'</span><span class=\"p\">)</span>\n<span class=\"c1\"># assigned value ParseResult(scheme='http', netloc='image.bigproject.com', path='/biglogo.jpg', params='', query='', fragment='')</span>\n</pre>\n<p>For django project settings.py Env can generate complete configuration\ndictionaries for database, cache, e-mail and search functions to include\nit into standard django config structures.</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># This file can be \"static\", all changeable information</span>\n<span class=\"c1\"># resides in ../myappconf.env and ../djangosite.env</span>\n\n<span class=\"c1\"># get django-specific Env</span>\n<span class=\"kn\">from</span> <span class=\"nn\">confenv.django</span> <span class=\"kn\">import</span> <span class=\"n\">Env</span>\n\n<span class=\"c1\"># set path to .env's to directory, where manage.py reside</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s1\">'..'</span>\n\n<span class=\"c1\"># expecting, that you place example .env files 'myappconf'</span>\n<span class=\"c1\"># and 'djangosite' in appropriate dir</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'myappconf'</span>\n\n<span class=\"c1\"># django Env's version have place to hold variable names</span>\n<span class=\"c1\"># to read database, cache, e-mail and search URLs default</span>\n<span class=\"c1\"># values from</span>\n<span class=\"c1\"># They are class members with this default values:</span>\n<span class=\"c1\">#Env.defenv_db = 'DATABASE_URL'</span>\n<span class=\"c1\">#Env.defenv_cache = 'CACHE_URL'</span>\n<span class=\"c1\">#Env.defenv_email = 'EMAIL_URL'</span>\n<span class=\"c1\">#Env.defenv_search = 'SEARCH_URL'</span>\n\n<span class=\"c1\"># search for database config here by default</span>\n<span class=\"n\">Env</span><span class=\"o\">.</span><span class=\"n\">defenv_db</span> <span class=\"o\">=</span> <span class=\"s1\">'MAINDB_URL'</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Env</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># load additional configuration</span>\n<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">readfile</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'djangosite'</span><span class=\"p\">)</span>\n\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># use \"untyped\" variable as list to extend</span>\n<span class=\"c1\">#   django's default</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"c1\"># ... standard django's list ...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"s1\">'APPADD'</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># databases config</span>\n<span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># config will be read from MAINDB_URL</span>\n  <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">db_url</span><span class=\"p\">(),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\"># this cache config will be read from CACHE_URL</span>\n  <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">cache_url</span><span class=\"p\">(),</span>\n\n  <span class=\"c1\"># second cache config</span>\n  <span class=\"s1\">'quick'</span><span class=\"p\">:</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">(</span><span class=\"s1\">'MEMCACHE_URL'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># This will require MAINMAIL key to be existent</span>\n<span class=\"c1\">#   in Env.data dict</span>\n<span class=\"n\">EMAIL_CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">email_url</span><span class=\"p\">(</span><span class=\"s1\">'MAINMAIL'</span><span class=\"p\">)</span>\n<span class=\"nb\">vars</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">EMAIL_CONFIG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># django's search extension</span>\n<span class=\"n\">HAYSTACK_CONNECTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">search_url</span><span class=\"p\">(</span><span class=\"s1\">'SEARCHENGINE'</span><span class=\"p\">,</span> <span class=\"s1\">'simple://'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package can be installed from standard Python packages\nsource pypi.org</p>\n<pre>pip install django-confenv\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>This code is (c) Vitaly Protsko &lt;<a href=\"mailto:me%40protsko.expert\">me<span>@</span>protsko<span>.</span>expert</a>&gt;, under <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\" rel=\"nofollow\">GPLv3</a> .</p>\n<p>This work is based on <a href=\"https://github.com/joke2k/django-environ\" rel=\"nofollow\">django-environ</a> (c) <a href=\"https://daniele.faraglia.info\" rel=\"nofollow\">Daniele Faraglia</a>\nwhich includes work from <a href=\"https://github.com/joke2k/django-environ/blob/develop/AUTHORS.rst\" rel=\"nofollow\">other authors</a> .</p>\n</div>\n\n          </div>"}, "last_serial": 7053062, "releases": {"0.9.5": [{"comment_text": "", "digests": {"md5": "12f6198375fdb084771a9f6399f3e6ad", "sha256": "d5c00f8d7ec0fdfb637dd6b100c04fb5d1294aa8d6a3603b9dd4e2ee0e01a4c5"}, "downloads": -1, "filename": "django_confenv-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "12f6198375fdb084771a9f6399f3e6ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21332, "upload_time": "2020-01-16T22:15:25", "upload_time_iso_8601": "2020-01-16T22:15:25.194626Z", "url": "https://files.pythonhosted.org/packages/79/72/3c5aee536eb0f60b7e1057f5ba97f8005d28b539d3c2d1213e45fcaf6807/django_confenv-0.9.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22128dd6a10633846621e34e155b4d57", "sha256": "a340c3607c8fa0a1ea856e9e78e18a1aceebc7de51f34532acfa34c10d39a666"}, "downloads": -1, "filename": "django-confenv-0.9.5.tar.gz", "has_sig": false, "md5_digest": "22128dd6a10633846621e34e155b4d57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17058, "upload_time": "2020-01-16T22:15:27", "upload_time_iso_8601": "2020-01-16T22:15:27.313505Z", "url": "https://files.pythonhosted.org/packages/51/ab/2274f71fdf4dddff2c31cb5418062f40515771c0a7cc015e5d6deca44997/django-confenv-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "7af2a21bf1311062b785bf19c311d267", "sha256": "8471ca59cda087028d99a00feddcb32dc82ddbc01980d7091c91bc102783dda0"}, "downloads": -1, "filename": "django_confenv-0.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7af2a21bf1311062b785bf19c311d267", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21408, "upload_time": "2020-02-03T07:42:21", "upload_time_iso_8601": "2020-02-03T07:42:21.749992Z", "url": "https://files.pythonhosted.org/packages/db/aa/cfbce7db8c7501893d32a008896e4bcdc8ea093e4d332eded11e607930cd/django_confenv-0.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a0478ead0fec7482098da49f67ea114", "sha256": "1327e8142522c53f6b7e91bad72ac59a9f96cb98703e9b42e582c39dc439c0be"}, "downloads": -1, "filename": "django-confenv-0.9.6.tar.gz", "has_sig": false, "md5_digest": "4a0478ead0fec7482098da49f67ea114", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17116, "upload_time": "2020-02-03T07:42:23", "upload_time_iso_8601": "2020-02-03T07:42:23.438703Z", "url": "https://files.pythonhosted.org/packages/42/94/cacf10d5a8ee0cae9a72be15d274b2cb2019ffa01a9c4de2d7f0b1b31d83/django-confenv-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "0e990a107f5f8d8acdf319c450424eca", "sha256": "792fb8399f4da585aad1d6d1d1d09c01e2e5e875a3c4e308bc4cdbb3870afe6f"}, "downloads": -1, "filename": "django_confenv-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0e990a107f5f8d8acdf319c450424eca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21423, "upload_time": "2020-04-19T12:59:04", "upload_time_iso_8601": "2020-04-19T12:59:04.813929Z", "url": "https://files.pythonhosted.org/packages/96/fc/9eebb27cb0397a0a271cfe46dee28e8b120c6a8f650de01baec718a9b88f/django_confenv-0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1045f1760ed3ef3d80249d21bbd8e3b4", "sha256": "509f96194db0da3bfe817504e140536d42f2daecd5e8eefe948989eeeea510b5"}, "downloads": -1, "filename": "django-confenv-0.9.7.tar.gz", "has_sig": false, "md5_digest": "1045f1760ed3ef3d80249d21bbd8e3b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17125, "upload_time": "2020-04-19T12:59:06", "upload_time_iso_8601": "2020-04-19T12:59:06.176337Z", "url": "https://files.pythonhosted.org/packages/9a/fb/e2c9b73944ff7c20ed204d8000c196b0fdd8df71fec8ad0bb3505738e990/django-confenv-0.9.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e990a107f5f8d8acdf319c450424eca", "sha256": "792fb8399f4da585aad1d6d1d1d09c01e2e5e875a3c4e308bc4cdbb3870afe6f"}, "downloads": -1, "filename": "django_confenv-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0e990a107f5f8d8acdf319c450424eca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21423, "upload_time": "2020-04-19T12:59:04", "upload_time_iso_8601": "2020-04-19T12:59:04.813929Z", "url": "https://files.pythonhosted.org/packages/96/fc/9eebb27cb0397a0a271cfe46dee28e8b120c6a8f650de01baec718a9b88f/django_confenv-0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1045f1760ed3ef3d80249d21bbd8e3b4", "sha256": "509f96194db0da3bfe817504e140536d42f2daecd5e8eefe948989eeeea510b5"}, "downloads": -1, "filename": "django-confenv-0.9.7.tar.gz", "has_sig": false, "md5_digest": "1045f1760ed3ef3d80249d21bbd8e3b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17125, "upload_time": "2020-04-19T12:59:06", "upload_time_iso_8601": "2020-04-19T12:59:06.176337Z", "url": "https://files.pythonhosted.org/packages/9a/fb/e2c9b73944ff7c20ed204d8000c196b0fdd8df71fec8ad0bb3505738e990/django-confenv-0.9.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:54 2020"}