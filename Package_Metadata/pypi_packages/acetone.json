{"info": {"author": "Stanislav Prokop", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "acetone library\n===============\n\nAbout\n-----\n\nGlue code removal. Acetone is a python library to provide inversion of\ncontrol in situation where other methods are inconvenient or they are\nnot even possible. Or you just like the library.\n\nUsage\n-----\n\nCreate the acetone container somewhere in your application:\n\n.. code:: python\n\n    # dependencies.py\n\n    from acetone import AcetoneContainer\n\n    dependencies = AcetoneContainer()\n    # or ioc_container\n    # or lord_of_the_dependencies\n    # or services\n\nThen use it:\n\n.. code:: python\n\n    # class_with_dependency.py\n\n    from dependencies import dependencies\n\n    class ClassWithSomeDependency(object):\n        # you can use strings or types as a key\n        dependency = dependencies.Dependency('key')\n\n        def use_the_dependency(self):\n            self.dependency.dependency_call('argument')\n\nCreate a dependency implementation:\n\n.. code:: python\n\n    # dependency_implementation.py\n\n    class DependencyImplementation(object):\n        def dependency_call(self, argument):\n            print(argument)\n\nLater register the implementation and run it!\n\n.. code:: python\n\n    # __main__.py\n\n    from dependencies import dependencies\n    from class_with_dependency import ClassWithSomeDependency\n    from dependency_implementation import DependencyImplementation\n\n\n    if __name__ == '__main__':\n        dependency_implementation = DependencyImplementation()\n        dependencies.register_instance('key', dependency_implementation)\n\n        instance = ClassWithSomeDependency()\n        instance.use_the_dependency()\n\nOr load it from a file:\n\n.. code:: json\n\n    [\n        {\n            \"name\": \"key\",\n            \"module\": \"dependency_implementation\",\n            \"factory\": \"DependencyImplementation\",\n            \"singleton\": true\n        }\n    ]\n\n.. code:: python\n\n    import json\n    from dependencies import dependencies\n\n    def main():\n        with open('configuration.json') as file:\n            content = json.load(file)\n            dependencies.load_from_dicts(content)\n\n        instance = ClassWithSomeDependency()\n        instance.use_the_dependency()\n\nFrequently asked questions\n--------------------------\n\nHow fast is it?\n~~~~~~~~~~~~~~~\n\nIt's very fast. It's even faster then a builtin property. The very first\ndependency access requires some initialization for its own setup and\ndependency creation (provided it was not created before), but the\nsubsequent calls are as fast as a member instance access. Dependencies\nuse a descriptor protocol (used by ``@property``), they are initialized\nlazily and once fetched from the container they are set as a normal\ninstance member (class member in case of ClassDependency). This trick is\nused by several frameworks (for example werkzeuq cached\\_property).\n\nHow do I mock it?\n~~~~~~~~~~~~~~~~~\n\nTechnically you can mock it, but I don't think it's necessary. The\ncontainer is simple and well tested. Its purpose is to provide a\nrequested dependency and the dependency can be a mock as well. You can\njust consider it as an essential part of your code and not mock it to\nyour advantage (would you mock properties?).\n\n.. code:: python\n\n    class TestXyz(TestCase):\n        def tearDown(self):\n            container.clean()\n\nTraditionalists wouldn't agree for sure but Python wasn't created by\ntraditionalists in the first place.\n\nAre there any requirements?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNo external dependencies. For the class used the only requirement is\nthat the class has to be a normal python class with ``__dict__``. In\nother words it can't use ``__slots__``.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/prokopst/acetone", "keywords": "dependency injection ioc inversion of control service locator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "acetone", "package_url": "https://pypi.org/project/acetone/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/acetone/", "project_urls": {"Homepage": "https://github.com/prokopst/acetone"}, "release_url": "https://pypi.org/project/acetone/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Glue code removal.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>Glue code removal. Acetone is a python library to provide inversion of\ncontrol in situation where other methods are inconvenient or they are\nnot even possible. Or you just like the library.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create the acetone container somewhere in your application:</p>\n<pre><span class=\"c1\"># dependencies.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">acetone</span> <span class=\"kn\">import</span> <span class=\"n\">AcetoneContainer</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"n\">AcetoneContainer</span><span class=\"p\">()</span>\n<span class=\"c1\"># or ioc_container</span>\n<span class=\"c1\"># or lord_of_the_dependencies</span>\n<span class=\"c1\"># or services</span>\n</pre>\n<p>Then use it:</p>\n<pre><span class=\"c1\"># class_with_dependency.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dependencies</span> <span class=\"kn\">import</span> <span class=\"n\">dependencies</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ClassWithSomeDependency</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># you can use strings or types as a key</span>\n    <span class=\"n\">dependency</span> <span class=\"o\">=</span> <span class=\"n\">dependencies</span><span class=\"o\">.</span><span class=\"n\">Dependency</span><span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">use_the_dependency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"o\">.</span><span class=\"n\">dependency_call</span><span class=\"p\">(</span><span class=\"s1\">'argument'</span><span class=\"p\">)</span>\n</pre>\n<p>Create a dependency implementation:</p>\n<pre><span class=\"c1\"># dependency_implementation.py</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DependencyImplementation</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dependency_call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argument</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">)</span>\n</pre>\n<p>Later register the implementation and run it!</p>\n<pre><span class=\"c1\"># __main__.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dependencies</span> <span class=\"kn\">import</span> <span class=\"n\">dependencies</span>\n<span class=\"kn\">from</span> <span class=\"nn\">class_with_dependency</span> <span class=\"kn\">import</span> <span class=\"n\">ClassWithSomeDependency</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dependency_implementation</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyImplementation</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">dependency_implementation</span> <span class=\"o\">=</span> <span class=\"n\">DependencyImplementation</span><span class=\"p\">()</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">.</span><span class=\"n\">register_instance</span><span class=\"p\">(</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"n\">dependency_implementation</span><span class=\"p\">)</span>\n\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">ClassWithSomeDependency</span><span class=\"p\">()</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">use_the_dependency</span><span class=\"p\">()</span>\n</pre>\n<p>Or load it from a file:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"key\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"module\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dependency_implementation\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"factory\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DependencyImplementation\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"singleton\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dependencies</span> <span class=\"kn\">import</span> <span class=\"n\">dependencies</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'configuration.json'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n        <span class=\"n\">dependencies</span><span class=\"o\">.</span><span class=\"n\">load_from_dicts</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">ClassWithSomeDependency</span><span class=\"p\">()</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">use_the_dependency</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"frequently-asked-questions\">\n<h2>Frequently asked questions</h2>\n<div id=\"how-fast-is-it\">\n<h3>How fast is it?</h3>\n<p>It\u2019s very fast. It\u2019s even faster then a builtin property. The very first\ndependency access requires some initialization for its own setup and\ndependency creation (provided it was not created before), but the\nsubsequent calls are as fast as a member instance access. Dependencies\nuse a descriptor protocol (used by <tt>@property</tt>), they are initialized\nlazily and once fetched from the container they are set as a normal\ninstance member (class member in case of ClassDependency). This trick is\nused by several frameworks (for example werkzeuq cached_property).</p>\n</div>\n<div id=\"how-do-i-mock-it\">\n<h3>How do I mock it?</h3>\n<p>Technically you can mock it, but I don\u2019t think it\u2019s necessary. The\ncontainer is simple and well tested. Its purpose is to provide a\nrequested dependency and the dependency can be a mock as well. You can\njust consider it as an essential part of your code and not mock it to\nyour advantage (would you mock properties?).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TestXyz</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">()</span>\n</pre>\n<p>Traditionalists wouldn\u2019t agree for sure but Python wasn\u2019t created by\ntraditionalists in the first place.</p>\n</div>\n<div id=\"are-there-any-requirements\">\n<h3>Are there any requirements?</h3>\n<p>No external dependencies. For the class used the only requirement is\nthat the class has to be a normal python class with <tt>__dict__</tt>. In\nother words it can\u2019t use <tt>__slots__</tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2309858, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "67d2bd9bd70751268525ef0b4d686d60", "sha256": "d297e54cec80df29e790cc8741055c995da93b8e534077554256948edbae37bf"}, "downloads": -1, "filename": "acetone-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67d2bd9bd70751268525ef0b4d686d60", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10361, "upload_time": "2016-08-28T20:13:06", "upload_time_iso_8601": "2016-08-28T20:13:06.130473Z", "url": "https://files.pythonhosted.org/packages/6e/a2/f93f818f18b713f6897de0edc405b84048c17e9ef9ebcea01990066cf833/acetone-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67d2bd9bd70751268525ef0b4d686d60", "sha256": "d297e54cec80df29e790cc8741055c995da93b8e534077554256948edbae37bf"}, "downloads": -1, "filename": "acetone-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67d2bd9bd70751268525ef0b4d686d60", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10361, "upload_time": "2016-08-28T20:13:06", "upload_time_iso_8601": "2016-08-28T20:13:06.130473Z", "url": "https://files.pythonhosted.org/packages/6e/a2/f93f818f18b713f6897de0edc405b84048c17e9ef9ebcea01990066cf833/acetone-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:24:40 2020"}