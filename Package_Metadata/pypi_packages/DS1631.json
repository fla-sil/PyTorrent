{"info": {"author": "Fabrice Sinc\u00e8re", "author_email": "fabrice.sincere@wanadoo.fr", "bugtrack_url": null, "classifiers": [], "description": "## DS1631 module\n\nThis pure python module provides a raspberry pi i2c interface for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 high-precision digital thermometer and thermostat.\n\n### Datasheets\n\n- [DS1631-DS1731](https://datasheets.maximintegrated.com/en/ds/DS1631-DS1731.pdf)\n- [DS1621](https://datasheets.maximintegrated.com/en/ds/DS1621.pdf)\n- [DS1721](https://datasheets.maximintegrated.com/en/ds/DS1721.pdf)\n\n### 2-wire serial data bus\n\nDS1631s are connected to Raspberry pi i2c GPIO (8 devices max) with 4 wires :\n\n- SDA i2c bus (GPIO2)\n- SCL i2c bus (GPIO3)\n- Power (3.3 V or 5 V)\n- Ground\n\n### Basic usage\n\nRaspberry pi : OS Raspbian  \n\nFirst, you need python 3 ```smbus``` module :  \n\n```\nsudo apt install python3-smbus\n```\n\n#### DS1631 device simple example\n\n```python\nimport DS1631\nimport time\n\ni2c_address = 0x48\nic1 = DS1631.DS1631(1, i2c_address)\n# thermostat config\nic1.set_tout_polarity(\"active-low\")\nic1.set_thigh(22.5)\nic1.set_tlow(20.5)\n# thermometer config\nic1.set_conversion_mode(\"continuous\")\nic1.set_resolution(12)\nic1.start_convert()\n# read temperature\nwhile True:\n    time.sleep(0.75)\n    temperature = ic1.get_temperature()\n    print(\"Temperature  : {} \u00b0C\".format(temperature))\n```\n\n#### Virtual device simple example\n\n```DS1631``` module provides a ```DS1631virtualdevice``` class for development without raspberry pi or DS1631s devices.\n\nOn\u2013Off controller (hysteresis controller) simulation is performed :  \n\n+ if temperature > thigh then electric radiator OFF\n+ if temperature < tlow then electric radiator ON\n\nOf course, you don't need python 3 ```smbus``` module, so you can work with a Windows OS computer or Android OS device (pydroid3).\n\n```python\nimport DS1631\nimport time\n\n# virtual device\nroom = DS1631.DS1631virtualdevice(initial_temperature=18,\n                                  thigh=20, tlow=19,\n                                  P=1000, R=0.02,\n                                  tau=360,\n                                  Text_max=15,Text_min=10,\n                                  period=24*3600)\nwhile True:\n    time.sleep(0.75)\n    temperature = room.get_temperature()\n    print(\"Temperature  : {} \u00b0C\".format(temperature))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "DS1631", "package_url": "https://pypi.org/project/DS1631/", "platform": "", "project_url": "https://pypi.org/project/DS1631/", "project_urls": null, "release_url": "https://pypi.org/project/DS1631/0.3.6/", "requires_dist": null, "requires_python": ">=3", "summary": "Raspberry pi i2c interface for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 digital thermometer and thermostat.", "version": "0.3.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>DS1631 module</h2>\n<p>This pure python module provides a raspberry pi i2c interface for Maxim-Dallas DS1621 DS1631 DS1631A DS1721 DS1731 high-precision digital thermometer and thermostat.</p>\n<h3>Datasheets</h3>\n<ul>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1631-DS1731.pdf\" rel=\"nofollow\">DS1631-DS1731</a></li>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1621.pdf\" rel=\"nofollow\">DS1621</a></li>\n<li><a href=\"https://datasheets.maximintegrated.com/en/ds/DS1721.pdf\" rel=\"nofollow\">DS1721</a></li>\n</ul>\n<h3>2-wire serial data bus</h3>\n<p>DS1631s are connected to Raspberry pi i2c GPIO (8 devices max) with 4 wires :</p>\n<ul>\n<li>SDA i2c bus (GPIO2)</li>\n<li>SCL i2c bus (GPIO3)</li>\n<li>Power (3.3 V or 5 V)</li>\n<li>Ground</li>\n</ul>\n<h3>Basic usage</h3>\n<p>Raspberry pi : OS Raspbian</p>\n<p>First, you need python 3 <code>smbus</code> module :</p>\n<pre><code>sudo apt install python3-smbus\n</code></pre>\n<h4>DS1631 device simple example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">DS1631</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">i2c_address</span> <span class=\"o\">=</span> <span class=\"mh\">0x48</span>\n<span class=\"n\">ic1</span> <span class=\"o\">=</span> <span class=\"n\">DS1631</span><span class=\"o\">.</span><span class=\"n\">DS1631</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i2c_address</span><span class=\"p\">)</span>\n<span class=\"c1\"># thermostat config</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_tout_polarity</span><span class=\"p\">(</span><span class=\"s2\">\"active-low\"</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_thigh</span><span class=\"p\">(</span><span class=\"mf\">22.5</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_tlow</span><span class=\"p\">(</span><span class=\"mf\">20.5</span><span class=\"p\">)</span>\n<span class=\"c1\"># thermometer config</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_conversion_mode</span><span class=\"p\">(</span><span class=\"s2\">\"continuous\"</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">set_resolution</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">start_convert</span><span class=\"p\">()</span>\n<span class=\"c1\"># read temperature</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">)</span>\n    <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">ic1</span><span class=\"o\">.</span><span class=\"n\">get_temperature</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature  : </span><span class=\"si\">{}</span><span class=\"s2\"> \u00b0C\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"p\">))</span>\n</pre>\n<h4>Virtual device simple example</h4>\n<p><code>DS1631</code> module provides a <code>DS1631virtualdevice</code> class for development without raspberry pi or DS1631s devices.</p>\n<p>On\u2013Off controller (hysteresis controller) simulation is performed :</p>\n<ul>\n<li>if temperature &gt; thigh then electric radiator OFF</li>\n<li>if temperature &lt; tlow then electric radiator ON</li>\n</ul>\n<p>Of course, you don't need python 3 <code>smbus</code> module, so you can work with a Windows OS computer or Android OS device (pydroid3).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">DS1631</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\"># virtual device</span>\n<span class=\"n\">room</span> <span class=\"o\">=</span> <span class=\"n\">DS1631</span><span class=\"o\">.</span><span class=\"n\">DS1631virtualdevice</span><span class=\"p\">(</span><span class=\"n\">initial_temperature</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span>\n                                  <span class=\"n\">thigh</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">tlow</span><span class=\"o\">=</span><span class=\"mi\">19</span><span class=\"p\">,</span>\n                                  <span class=\"n\">P</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span>\n                                  <span class=\"n\">tau</span><span class=\"o\">=</span><span class=\"mi\">360</span><span class=\"p\">,</span>\n                                  <span class=\"n\">Text_max</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"n\">Text_min</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                  <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"o\">*</span><span class=\"mi\">3600</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">)</span>\n    <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">room</span><span class=\"o\">.</span><span class=\"n\">get_temperature</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Temperature  : </span><span class=\"si\">{}</span><span class=\"s2\"> \u00b0C\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6570724, "releases": {"0.3.6": [{"comment_text": "", "digests": {"md5": "1e65e53bd743832c3cece63e83a31fe9", "sha256": "cd5b4f3220332027327599764fcf523db8ca4a4b83fdd65344f49647c4bbab5b"}, "downloads": -1, "filename": "DS1631-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1e65e53bd743832c3cece63e83a31fe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 20546, "upload_time": "2020-01-04T13:37:54", "upload_time_iso_8601": "2020-01-04T13:37:54.119465Z", "url": "https://files.pythonhosted.org/packages/29/46/4d92a527f0851d8e4ea86ae2ceffbbda0b47c4df77d3891c291a5840cb8e/DS1631-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e98d2f5cef5579634ecd2fa661897e9", "sha256": "5e1bd458f87f952b162fab09b75e1edf3c0c22d5ca49d5d9dbff24dcbf4eca65"}, "downloads": -1, "filename": "DS1631-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1e98d2f5cef5579634ecd2fa661897e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7895, "upload_time": "2020-01-04T13:37:56", "upload_time_iso_8601": "2020-01-04T13:37:56.029835Z", "url": "https://files.pythonhosted.org/packages/86/fd/64aaa23aa63da41a0aaeddd93ff7887a8b055d52124d57bc4a092bd3a60f/DS1631-0.3.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e65e53bd743832c3cece63e83a31fe9", "sha256": "cd5b4f3220332027327599764fcf523db8ca4a4b83fdd65344f49647c4bbab5b"}, "downloads": -1, "filename": "DS1631-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1e65e53bd743832c3cece63e83a31fe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 20546, "upload_time": "2020-01-04T13:37:54", "upload_time_iso_8601": "2020-01-04T13:37:54.119465Z", "url": "https://files.pythonhosted.org/packages/29/46/4d92a527f0851d8e4ea86ae2ceffbbda0b47c4df77d3891c291a5840cb8e/DS1631-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e98d2f5cef5579634ecd2fa661897e9", "sha256": "5e1bd458f87f952b162fab09b75e1edf3c0c22d5ca49d5d9dbff24dcbf4eca65"}, "downloads": -1, "filename": "DS1631-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1e98d2f5cef5579634ecd2fa661897e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7895, "upload_time": "2020-01-04T13:37:56", "upload_time_iso_8601": "2020-01-04T13:37:56.029835Z", "url": "https://files.pythonhosted.org/packages/86/fd/64aaa23aa63da41a0aaeddd93ff7887a8b055d52124d57bc4a092bd3a60f/DS1631-0.3.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:27 2020"}