{"info": {"author": "Lars Franke", "author_email": "lars.franke@mailbox.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "Clype\n=====\n\nPlaying around with the new type annotations in Python 3.5 and 3.6, I\nnoticed they can be used to define command line interfaces from a\nregular python function. It's kind of like what\n`click <http://click.pocoo.org>`__ does, but better.\n\nUsage\n-----\n\nSimpleCli Example:\n\n.. code:: python\n\n    # test.py\n    from typing import List, Optional\n    from pathlib import Path\n    from clype import SimpleCli\n\n    @SimpleCli\n    def mycli(v: Optional[bool], paths: List[Path]):\n        print('v:', v)\n        print('paths ({}):'.format(type(paths[0])), *paths)\n\n    if __name__ == '__main__':\n        mycli.run()\n\nResult:\n\n::\n\n    $ python test.py -v dir/file.ext\n    v: True\n    paths (<class 'pathlib.PosixPath'>): dir/file.ext\n\nSubcommandCli Example:\n\n.. code:: python\n\n    # test.py\n    from typing import List, Optional\n    from pathlib import Path\n    from clype import SubcommandCli\n\n    mycli = SubcommandCli('mycli')\n\n    @mycli.command\n    def bar(r: Optional[bool], path: Path):\n        \"\"\"\n        The first command\n        \"\"\"\n        pass\n\n    @mycli.command\n    def foo(v: Optional[bool], paths: List[Path]):\n        \"\"\"\n        The second command\n        \"\"\"\n        pass\n\n    if __name__ == '__main__':\n        mycli.run()\n\nResult:\n\n::\n\n    $ python test.py -h\n    usage: mycli [-h] command ...\n    optional arguments:\n      -h, --help  show this help message and exit\n    commands:\n      bar       The first command\n      foo       The second command\n    $ python test.py bar -h\n    usage: mycli bar [-h] [-r] path\n    positional arguments:\n      path\n    optional arguments:\n      -h, --help  show this help message and exit\n      -r", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frcl/clype", "keywords": "cli console typehints annotations", "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "clype", "package_url": "https://pypi.org/project/clype/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/clype/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/frcl/clype"}, "release_url": "https://pypi.org/project/clype/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Python library for creating command line interfacesusing type annotations", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Playing around with the new type annotations in Python 3.5 and 3.6, I\nnoticed they can be used to define command line interfaces from a\nregular python function. It\u2019s kind of like what\n<a href=\"http://click.pocoo.org\" rel=\"nofollow\">click</a> does, but better.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>SimpleCli Example:</p>\n<pre><span class=\"c1\"># test.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clype</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleCli</span>\n\n<span class=\"nd\">@SimpleCli</span>\n<span class=\"k\">def</span> <span class=\"nf\">mycli</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'v:'</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'paths (</span><span class=\"si\">{}</span><span class=\"s1\">):'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])),</span> <span class=\"o\">*</span><span class=\"n\">paths</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">mycli</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Result:</p>\n<pre>$ python test.py -v dir/file.ext\nv: True\npaths (&lt;class 'pathlib.PosixPath'&gt;): dir/file.ext\n</pre>\n<p>SubcommandCli Example:</p>\n<pre><span class=\"c1\"># test.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clype</span> <span class=\"kn\">import</span> <span class=\"n\">SubcommandCli</span>\n\n<span class=\"n\">mycli</span> <span class=\"o\">=</span> <span class=\"n\">SubcommandCli</span><span class=\"p\">(</span><span class=\"s1\">'mycli'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@mycli</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    The first command\n    \"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@mycli</span><span class=\"o\">.</span><span class=\"n\">command</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">],</span> <span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">]):</span>\n    <span class=\"sd\">\"\"\"\n    The second command\n    \"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">mycli</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Result:</p>\n<pre>$ python test.py -h\nusage: mycli [-h] command ...\noptional arguments:\n  -h, --help  show this help message and exit\ncommands:\n  bar       The first command\n  foo       The second command\n$ python test.py bar -h\nusage: mycli bar [-h] [-r] path\npositional arguments:\n  path\noptional arguments:\n  -h, --help  show this help message and exit\n  -r\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2928521, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Thu May  7 22:18:38 2020"}