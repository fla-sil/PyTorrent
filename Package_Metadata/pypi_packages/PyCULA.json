{"info": {"author": "Garrett Wright, Louis Theran", "author_email": "garrett.wright@temple.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "PyCULA provides an efficient and simple CUDA GPU environment for python.  PyCULA accomplishes this feat by combining the power of driver based PyCUDA with nVidia's runtime libraries and, most importantly, CULA GPU-LAPACK functionality in a single environment.  We aim to hide complications without limiting the enduser. \r\n\r\nPyCULA provides:\r\n    * Complete python ctypes bindings for CULAtools Premium\r\n    * Complete suite of sophisticated numpy based wrappers for CULA host_interface routines\r\n    * Complete suite of sophisticated PyCUDA.gpuarray based wrappers for CULA device_interface routines\r\n    * Functions to seamlessly combine the above in a single enviornment with:\r\n        * PyCUDA and PyCUDA custom kernels\r\n        * nVidia Runtime Libraries\r\n            * cuBLAS (scikits.cuda)\r\n            * cuFFT (scikits.cuda)\r\n            * cuSPARSE (coming soon!)\r\n        * and without:\r\n            * Headaches\r\n            * Memory Leaks\r\n            * Mountains of C code\r\n\r\nOther reasons to use Python and PyCULA for your GPGPU and scientific computing include:\r\n    * Develop and Debug Interactively in the Command-Line-Interpreter\r\n    * Open Source Code\r\n    * Integrate with scientific libraries including database and web libraries\r\n    * Prototype algorithms efficiently with SciPy\r\n    * Integrated Help\r\n    * GPU device arrays with Numpy like interface (via PyCUDA)\r\n\r\nTo see what PyCULA looks like, or to see more details, check out our documentation!", "description_content_type": null, "docs_url": "https://pythonhosted.org/PyCULA/", "download_url": "http://dl.dropbox.com/u/4485934/PyCULA-0.95a1-py2.6.egg", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://math.temple.edu/research/geometry/PyCULA/", "keywords": "CULA,pyCUDA,CUDA,numpy,GPU", "license": "GNU", "maintainer": "", "maintainer_email": "", "name": "PyCULA", "package_url": "https://pypi.org/project/PyCULA/", "platform": "Linux X86_64, Recommend Ubuntu>=9.10", "project_url": "https://pypi.org/project/PyCULA/", "project_urls": {"Download": "http://dl.dropbox.com/u/4485934/PyCULA-0.95a1-py2.6.egg", "Homepage": "http://math.temple.edu/research/geometry/PyCULA/"}, "release_url": "https://pypi.org/project/PyCULA/0.95a1/", "requires_dist": null, "requires_python": null, "summary": "Python wrapper for CULAtools", "version": "0.95a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyCULA provides an efficient and simple CUDA GPU environment for python.  PyCULA accomplishes this feat by combining the power of driver based PyCUDA with nVidia\u2019s runtime libraries and, most importantly, CULA GPU-LAPACK functionality in a single environment.  We aim to hide complications without limiting the enduser.</p>\n<dl>\n<dt>PyCULA provides:</dt>\n<dd><ul>\n<li>Complete python ctypes bindings for CULAtools Premium</li>\n<li>Complete suite of sophisticated numpy based wrappers for CULA host_interface routines</li>\n<li>Complete suite of sophisticated PyCUDA.gpuarray based wrappers for CULA device_interface routines</li>\n<li><dl>\n<dt>Functions to seamlessly combine the above in a single enviornment with:</dt>\n<dd><ul>\n<li>PyCUDA and PyCUDA custom kernels</li>\n<li><dl>\n<dt>nVidia Runtime Libraries</dt>\n<dd><ul>\n<li>cuBLAS (scikits.cuda)</li>\n<li>cuFFT (scikits.cuda)</li>\n<li>cuSPARSE (coming soon!)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>and without:</dt>\n<dd><ul>\n<li>Headaches</li>\n<li>Memory Leaks</li>\n<li>Mountains of C code</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n<dt>Other reasons to use Python and PyCULA for your GPGPU and scientific computing include:</dt>\n<dd><ul>\n<li>Develop and Debug Interactively in the Command-Line-Interpreter</li>\n<li>Open Source Code</li>\n<li>Integrate with scientific libraries including database and web libraries</li>\n<li>Prototype algorithms efficiently with SciPy</li>\n<li>Integrated Help</li>\n<li>GPU device arrays with Numpy like interface (via PyCUDA)</li>\n</ul>\n</dd>\n</dl>\n<p>To see what PyCULA looks like, or to see more details, check out our documentation!</p>\n\n          </div>"}, "last_serial": 802627, "releases": {"0.95a1": [], "0.9a4": []}, "urls": [], "timestamp": "Fri May  8 03:07:34 2020"}