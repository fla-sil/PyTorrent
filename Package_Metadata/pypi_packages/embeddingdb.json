{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics"], "description": "Embedding Database\n==================\nThis package provides a database schema and Python wrapper\nfor storing the embeddings generated through various representation\nlearning packages.\n\nCurrently, this package focuses on using a SQL database with SQLAlchemy,\nbut might be extended to use a NoSQL database as an alternative.\n\nInstallation\n------------\nInstall ``embeddingdb`` directly from GitHub with:\n\n.. code-block:: sh\n\n   $ pip install git+https://github.com/cthoyt/embeddingdb\n\nSet the environment variable ``EMBEDDINGDB_CONNECTION`` to a valid\nSQLAlchemy connection string for a PostgreSQL instance, as this package uses\nthe PostgreSQL-specific ``ARRAY`` type.\n\nCommand Line Interface\n----------------------\nThis package installs an entrypoint ``embeddingdb`` that can be used directly from\nthe shell.\n\nUploading Entity Embeddings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nEntities can be embedded and stored from various types of representation learning,\nincluding network representation learning, knowledge graph embedding, and textual\nlearning.\n\nUpload embeddings generated by ``word2vec`` by specifying the file path with:\n\n.. code-block:: sh\n\n   $ embeddingdb upload --fmt word2vec --path ~/path/to/file.txt\n\nUpload embeddings generated by ``pykeen`` by specifying the output directory\nwith:\n\n.. code-block:: sh\n\n   $ embeddingdb upload --fmt keen --path ~/path/to/directory/\n\nListing Entity Embeddings\n~~~~~~~~~~~~~~~~~~~~~~~~~\nAfter uploading, the collections can be listed with:\n\n.. code-block:: sh\n\n   $ embeddingdb ls\n\nAnalyzing Entity Embeddings' Correlations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nOne of the motivations for building this repository was to make a convenient way to\ncompare the embeddings for entities generated through orthogonal embedding tecnhiques.\nFor example, we wanted to know to what extent the embeddings for proteins generated from\ntheir sequences with ``ratvec`` contained the same information as the embeddings generated\nfrom protein-protein interaction networks with ``pykeen`` or ``nrl``.\n\nThe two positional arguments correspond to the collection identifiers in the database.\n\n.. code-block:: sh\n\n   $ embeddingdb analyze 1 2\n\nRunning with Docker\n-------------------\nAfter installing Docker, the entire web application can be instantiated with:\n\n.. code-block:: sh\n\n   $ docker-compose up\n\nGet the endpoint ``/test`` to instantiate the database and add a test collection.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "Knowledge Graph Embeddings,Machine Learning,Data Mining,Linked Data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "embeddingdb", "package_url": "https://pypi.org/project/embeddingdb/", "platform": "", "project_url": "https://pypi.org/project/embeddingdb/", "project_urls": null, "release_url": "https://pypi.org/project/embeddingdb/0.0.1/", "requires_dist": ["sqlalchemy", "tqdm", "psycopg2-binary", "scikit-learn", "click", "easy-config", "pandas", "joblib", "sphinx ; extra == 'docs'", "sphinx-rtd-theme ; extra == 'docs'", "sphinx-click ; extra == 'docs'", "sphinx-autodoc-typehints ; extra == 'docs'", "flask ; extra == 'web'", "flask-bootstrap ; extra == 'web'", "flask-sqlalchemy ; extra == 'web'", "flasgger ; extra == 'web'"], "requires_python": ">=3.7", "summary": "A package for storing and querying knowledge graph embeddings", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a database schema and Python wrapper\nfor storing the embeddings generated through various representation\nlearning packages.</p>\n<p>Currently, this package focuses on using a SQL database with SQLAlchemy,\nbut might be extended to use a NoSQL database as an alternative.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install <tt>embeddingdb</tt> directly from GitHub with:</p>\n<pre>$ pip install git+https://github.com/cthoyt/embeddingdb\n</pre>\n<p>Set the environment variable <tt>EMBEDDINGDB_CONNECTION</tt> to a valid\nSQLAlchemy connection string for a PostgreSQL instance, as this package uses\nthe PostgreSQL-specific <tt>ARRAY</tt> type.</p>\n</div>\n<div id=\"command-line-interface\">\n<h2>Command Line Interface</h2>\n<p>This package installs an entrypoint <tt>embeddingdb</tt> that can be used directly from\nthe shell.</p>\n<div id=\"uploading-entity-embeddings\">\n<h3>Uploading Entity Embeddings</h3>\n<p>Entities can be embedded and stored from various types of representation learning,\nincluding network representation learning, knowledge graph embedding, and textual\nlearning.</p>\n<p>Upload embeddings generated by <tt>word2vec</tt> by specifying the file path with:</p>\n<pre>$ embeddingdb upload --fmt word2vec --path ~/path/to/file.txt\n</pre>\n<p>Upload embeddings generated by <tt>pykeen</tt> by specifying the output directory\nwith:</p>\n<pre>$ embeddingdb upload --fmt keen --path ~/path/to/directory/\n</pre>\n</div>\n<div id=\"listing-entity-embeddings\">\n<h3>Listing Entity Embeddings</h3>\n<p>After uploading, the collections can be listed with:</p>\n<pre>$ embeddingdb ls\n</pre>\n</div>\n<div id=\"analyzing-entity-embeddings-correlations\">\n<h3>Analyzing Entity Embeddings\u2019 Correlations</h3>\n<p>One of the motivations for building this repository was to make a convenient way to\ncompare the embeddings for entities generated through orthogonal embedding tecnhiques.\nFor example, we wanted to know to what extent the embeddings for proteins generated from\ntheir sequences with <tt>ratvec</tt> contained the same information as the embeddings generated\nfrom protein-protein interaction networks with <tt>pykeen</tt> or <tt>nrl</tt>.</p>\n<p>The two positional arguments correspond to the collection identifiers in the database.</p>\n<pre>$ embeddingdb analyze <span class=\"m\">1</span> <span class=\"m\">2</span>\n</pre>\n</div>\n</div>\n<div id=\"running-with-docker\">\n<h2>Running with Docker</h2>\n<p>After installing Docker, the entire web application can be instantiated with:</p>\n<pre>$ docker-compose up\n</pre>\n<p>Get the endpoint <tt>/test</tt> to instantiate the database and add a test collection.</p>\n</div>\n\n          </div>"}, "last_serial": 5453756, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "213e812a9081410e1c49449ddd816bee", "sha256": "42d77278149dabad4c5771c4764654e3a61d28e770da6da85ff769d9cfffc6bc"}, "downloads": -1, "filename": "embeddingdb-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "213e812a9081410e1c49449ddd816bee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14079, "upload_time": "2019-06-26T20:57:53", "upload_time_iso_8601": "2019-06-26T20:57:53.412345Z", "url": "https://files.pythonhosted.org/packages/26/5a/e438bd17b1d42760824f5b3aab6b53457be6de25607824c4dfda2a2b44d0/embeddingdb-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad4482ecd797c1e111eb1b9554e37cce", "sha256": "56bfa60b2b7907b3db5646c79f37719cff99be92f5f2bbc8c49834c97af051b3"}, "downloads": -1, "filename": "embeddingdb-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ad4482ecd797c1e111eb1b9554e37cce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11268, "upload_time": "2019-06-26T20:57:56", "upload_time_iso_8601": "2019-06-26T20:57:56.054903Z", "url": "https://files.pythonhosted.org/packages/ef/db/ddf211ef47ead4b2002b37cb10b75b2f01c07255b79e21386203d8264911/embeddingdb-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "213e812a9081410e1c49449ddd816bee", "sha256": "42d77278149dabad4c5771c4764654e3a61d28e770da6da85ff769d9cfffc6bc"}, "downloads": -1, "filename": "embeddingdb-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "213e812a9081410e1c49449ddd816bee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14079, "upload_time": "2019-06-26T20:57:53", "upload_time_iso_8601": "2019-06-26T20:57:53.412345Z", "url": "https://files.pythonhosted.org/packages/26/5a/e438bd17b1d42760824f5b3aab6b53457be6de25607824c4dfda2a2b44d0/embeddingdb-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad4482ecd797c1e111eb1b9554e37cce", "sha256": "56bfa60b2b7907b3db5646c79f37719cff99be92f5f2bbc8c49834c97af051b3"}, "downloads": -1, "filename": "embeddingdb-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ad4482ecd797c1e111eb1b9554e37cce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11268, "upload_time": "2019-06-26T20:57:56", "upload_time_iso_8601": "2019-06-26T20:57:56.054903Z", "url": "https://files.pythonhosted.org/packages/ef/db/ddf211ef47ead4b2002b37cb10b75b2f01c07255b79e21386203d8264911/embeddingdb-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:41 2020"}