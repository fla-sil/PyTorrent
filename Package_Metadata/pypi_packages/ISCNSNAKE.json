{"info": {"author": "Connor Denomy", "author_email": "connordenomy@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n#\n# ISCNSNAKE : ISCN Structural and Numerical Analysis of Karyotype Entries\n#\n\nISCNSNAKE is a tool to use with ISCN : the International System for\nCytogenic Nomenclature written in python 3.7. The repository contains\nthree python files, one is the core of the module (ISCNParser.py) and the\nsecond (run_SNAKE.py) is a quick script that executes the main function of\nISCNParser. Most features are accessible through the console menu that\nopens when the script is ran but if you want to automate multiple files\nor do something more complicated it is suggested that you import the\nmodule into your own script. The third script (quick_run_SNAKE.py)\nruns ISCNParser at the default settings with users only having to specify\nthe location of the Mitelman database on their computer, the desired output\nfolder and filenames, and any criteria they wish to use as filters. For a \ndescription on how to use these filters consult readthedocs.org/ISCNSNAKE/\n\n\n#\n# SYSTEM REQUIREMENTS\n#\n\nPython 3.6 or greater (anaconda strongly recommended)\n\nPython modules\n- pandas \n- numpy\n- easy_install (for installation)\n\n#\n# INSTALLATION\n#\n\n1. Open either terminal or command line in the fold you place the download (this folder).\n2. Input the following:\n\neasy_install --always-unzip .\n\n3. You should be able to run the program from anywhere with the upcoming instructions.\n\n#\n# HOW TO USE\n#\n\nquick_SNAKE \n\nruns ISCNSNAKE.parse_file at the default settings, so if want to change the handling of clones, filenames, or analyze aberration cooccurance you will have to interact with the menu provided by run_SNAKE.py. For the vast majority of use\ncases this version is more than adequate.\n\nAfter installation, quick_SNAKE can be ran from any location using the following prompt entered in terminal or command prompt:\n\npython -m ISCNSNAKE.quick_SNAKE [-options]\n\nThis can also be done by entering interactive mode (just type python) and then:\n\nimport ISCNSNAKE.quick_SNAKE\n\nWith no options specified, the program will ask for some user input. These can also be specified by command line options.\n\n[-f] : Mitelman filters for selection rows and columns of the Mitelman database. \n\nFilter syntax is \u201ccolumn:attribute\u201d. For example, if you wanted to select only cases with topography indicated as breast, you would enter \u201cTopography:Breast\u201d as a filter. If you want to add additional filters, such as wanting to specify only adenocarcinomas with the same topography, create a second filter with the same syntax and separate it with two forward slashes.\n\nExample: \u201cTopography:Breast//Morphology:Adenocarcinoma\u201d. \n\nDouble slashes are used as commas, spaces, and dashes are all within the attributes in the Mitelman Database. Filters place restrictions on which categories are acceptable\nso it is possible to analyze multiple types by adding more filters. \n\nExample: \u201cTopography:Breast//Topography:Lung//Morphology:Adenocarcinoma\u201d\nThis would analyze all Breast and Lung adenocarcinomas\n\n[-p] : File prefix, determines names of output files. ex. -p Skeletal makes output files Skeletal_DeepDel.txt, Skeletal_DeepAmp.txt\n[-o] : Name of output folder, if it doesn\u2019t exist it will make one. Defaults to current directory.\n[-v] : Verbosity. If specified, will output each ISCN it comes across. Useful if you\u2019re unsure whether or not your filters were correct on filter usage but does slow the program down a bit.\n[-i] : Path to the plain text file of the Mitelman database\n\nStep by Step Tutorial:\n\nIn this example I will be using the Mitelman.txt file included in the download, looking to analyze\nRetinoblastomas.\n1. After installation, navigate to the folder where your desired data file is.\n2. Enter the command:\npython -m ISCNSNAKE.quick_SNAKE -i -p RB -o retinoblastoma -v \n\nYou will then be prompted to add filters. Since we want to analyze retinoblastomas we should enter\n\"Topography:Eye//Morphology:Retinoblastoma\"\n\nYou will then see the output to the terminal (because you specified verbose) and the files created from the\nanalysis in the folder \"retinoblastoma\"\n\n\n\n\nThe full version of the program with many experimental settings can be ran with the following prompt:\n\npython -m ISCNSNAKE.run_SNAKE\n\nThis can also be done in interactive mode.\n\nThis will open a menu that will allow you to configure many options. Here is a brief description of what each of the of the more complex options do. Many of the options simply specify filenames and should be fairly self-explanitory. \n\n1 -- input filename \nRequired. Enter the path to the file containing the karyotype data. \nex: ../../Mitelman.txt\n\n2 -- input data type (ISCN/Mitelman)\nCan be set to either ISCN or Mitelman. Default ISCN. Mitelman is the format that the text version of the database\nis in, as provided in Mitelman.txt. ISCN is a format where each karyotype in ISCN format is on a seperate line by itself,\nas in ISCN_example.txt\n\n3 -- clone handling\n\nSet this to one the 3 following options:\nfirst_only: only analyzes the first clone in each ISCN, good for small data sets with few clonal karyotypes\nand one or two massive karyotypes with 10+ clones\nseperate: analyzes each clone as a seperate patient, your frequency percentages will be very low, I \npersonally don't recommend this option.\nmerge: creates a consensus karyotype out of all the clonal karyotypes\n\n4 -- Output to file\n\nIf this is False, you will get no output. Can be good if you just want the raw data. To use this you will have\nto change how you call run_SNAKE or assign _ to a variable afterwards.\n\n6 -- output mode\nrelative if you want percentages, minmax if you want it to be a result between 0 and 1 (for machine learning\nand possibly other purposes)\\\n\n7 -- current filters\n\nEnter filters as described for quick_SNAKE but instead of seperating with double slashes just enter each\none seperately.\n\nYou may also incorporate elements of the ISCNParser algorithm into your script by importing ISCNSNAKE.ISCNParser\nand then calling the functions and classes for your needs. \n\n15 -- analyze dependancies\nWill make a list of co occurances of various aberrations. Very very very very slow. Creates a list\nof links in circos format.\n\n16 -- dependence quantile\nTrims links to the quantile selected. Useful as most dependancy matrixes end up with hundreds of thousands\nof co-occurances.\n\n18 -- analyze errors\nSet to True if you want a seperate file containing every instance of an unparsable karyotype. Could be used\npretty easily to check your own karyotypes to check for proper ISCN syntax. Will try to explain errors\nbut isn't very descriptive.\n\n20 -- verbose\nSet to True if you want all the karyotypes the program reads to be printed to console. (same as -v in\nquick_SNAKE)\n\n\n## Authors\n\n* **Connor Denomy** (connordenomy@gmail.com) - *Lead author*\nFeel free to email me any questions you have about using this program.\n\n#\n# Acknowledgments\n#\n\n* Samuel Germain for creating the prototype of this program in shell/perl and providing the basis for the core algorithm\n* Bjorn Haave for assisting\n* Vizeacoumar lab\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/connordenomy/ISCN-SNAKE", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ISCNSNAKE", "package_url": "https://pypi.org/project/ISCNSNAKE/", "platform": "", "project_url": "https://pypi.org/project/ISCNSNAKE/", "project_urls": {"Homepage": "https://gitlab.com/connordenomy/ISCN-SNAKE"}, "release_url": "https://pypi.org/project/ISCNSNAKE/2.2/", "requires_dist": ["pandas", "numpy"], "requires_python": ">=3.6.0", "summary": "A parser for ISCN data.", "version": "2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1></h1>\n<h1>ISCNSNAKE : ISCN Structural and Numerical Analysis of Karyotype Entries</h1>\n<h1></h1>\n<p>ISCNSNAKE is a tool to use with ISCN : the International System for\nCytogenic Nomenclature written in python 3.7. The repository contains\nthree python files, one is the core of the module (ISCNParser.py) and the\nsecond (run_SNAKE.py) is a quick script that executes the main function of\nISCNParser. Most features are accessible through the console menu that\nopens when the script is ran but if you want to automate multiple files\nor do something more complicated it is suggested that you import the\nmodule into your own script. The third script (quick_run_SNAKE.py)\nruns ISCNParser at the default settings with users only having to specify\nthe location of the Mitelman database on their computer, the desired output\nfolder and filenames, and any criteria they wish to use as filters. For a\ndescription on how to use these filters consult readthedocs.org/ISCNSNAKE/</p>\n<h1></h1>\n<h1>SYSTEM REQUIREMENTS</h1>\n<h1></h1>\n<p>Python 3.6 or greater (anaconda strongly recommended)</p>\n<p>Python modules</p>\n<ul>\n<li>pandas</li>\n<li>numpy</li>\n<li>easy_install (for installation)</li>\n</ul>\n<h1></h1>\n<h1>INSTALLATION</h1>\n<h1></h1>\n<ol>\n<li>Open either terminal or command line in the fold you place the download (this folder).</li>\n<li>Input the following:</li>\n</ol>\n<p>easy_install --always-unzip .</p>\n<ol>\n<li>You should be able to run the program from anywhere with the upcoming instructions.</li>\n</ol>\n<h1></h1>\n<h1>HOW TO USE</h1>\n<h1></h1>\n<p>quick_SNAKE</p>\n<p>runs ISCNSNAKE.parse_file at the default settings, so if want to change the handling of clones, filenames, or analyze aberration cooccurance you will have to interact with the menu provided by run_SNAKE.py. For the vast majority of use\ncases this version is more than adequate.</p>\n<p>After installation, quick_SNAKE can be ran from any location using the following prompt entered in terminal or command prompt:</p>\n<p>python -m ISCNSNAKE.quick_SNAKE [-options]</p>\n<p>This can also be done by entering interactive mode (just type python) and then:</p>\n<p>import ISCNSNAKE.quick_SNAKE</p>\n<p>With no options specified, the program will ask for some user input. These can also be specified by command line options.</p>\n<p>[-f] : Mitelman filters for selection rows and columns of the Mitelman database.</p>\n<p>Filter syntax is \u201ccolumn:attribute\u201d. For example, if you wanted to select only cases with topography indicated as breast, you would enter \u201cTopography:Breast\u201d as a filter. If you want to add additional filters, such as wanting to specify only adenocarcinomas with the same topography, create a second filter with the same syntax and separate it with two forward slashes.</p>\n<p>Example: \u201cTopography:Breast//Morphology:Adenocarcinoma\u201d.</p>\n<p>Double slashes are used as commas, spaces, and dashes are all within the attributes in the Mitelman Database. Filters place restrictions on which categories are acceptable\nso it is possible to analyze multiple types by adding more filters.</p>\n<p>Example: \u201cTopography:Breast//Topography:Lung//Morphology:Adenocarcinoma\u201d\nThis would analyze all Breast and Lung adenocarcinomas</p>\n<p>[-p] : File prefix, determines names of output files. ex. -p Skeletal makes output files Skeletal_DeepDel.txt, Skeletal_DeepAmp.txt\n[-o] : Name of output folder, if it doesn\u2019t exist it will make one. Defaults to current directory.\n[-v] : Verbosity. If specified, will output each ISCN it comes across. Useful if you\u2019re unsure whether or not your filters were correct on filter usage but does slow the program down a bit.\n[-i] : Path to the plain text file of the Mitelman database</p>\n<p>Step by Step Tutorial:</p>\n<p>In this example I will be using the Mitelman.txt file included in the download, looking to analyze\nRetinoblastomas.</p>\n<ol>\n<li>After installation, navigate to the folder where your desired data file is.</li>\n<li>Enter the command:\npython -m ISCNSNAKE.quick_SNAKE -i -p RB -o retinoblastoma -v</li>\n</ol>\n<p>You will then be prompted to add filters. Since we want to analyze retinoblastomas we should enter\n\"Topography:Eye//Morphology:Retinoblastoma\"</p>\n<p>You will then see the output to the terminal (because you specified verbose) and the files created from the\nanalysis in the folder \"retinoblastoma\"</p>\n<p>The full version of the program with many experimental settings can be ran with the following prompt:</p>\n<p>python -m ISCNSNAKE.run_SNAKE</p>\n<p>This can also be done in interactive mode.</p>\n<p>This will open a menu that will allow you to configure many options. Here is a brief description of what each of the of the more complex options do. Many of the options simply specify filenames and should be fairly self-explanitory.</p>\n<p>1 -- input filename\nRequired. Enter the path to the file containing the karyotype data.\nex: ../../Mitelman.txt</p>\n<p>2 -- input data type (ISCN/Mitelman)\nCan be set to either ISCN or Mitelman. Default ISCN. Mitelman is the format that the text version of the database\nis in, as provided in Mitelman.txt. ISCN is a format where each karyotype in ISCN format is on a seperate line by itself,\nas in ISCN_example.txt</p>\n<p>3 -- clone handling</p>\n<p>Set this to one the 3 following options:\nfirst_only: only analyzes the first clone in each ISCN, good for small data sets with few clonal karyotypes\nand one or two massive karyotypes with 10+ clones\nseperate: analyzes each clone as a seperate patient, your frequency percentages will be very low, I\npersonally don't recommend this option.\nmerge: creates a consensus karyotype out of all the clonal karyotypes</p>\n<p>4 -- Output to file</p>\n<p>If this is False, you will get no output. Can be good if you just want the raw data. To use this you will have\nto change how you call run_SNAKE or assign _ to a variable afterwards.</p>\n<p>6 -- output mode\nrelative if you want percentages, minmax if you want it to be a result between 0 and 1 (for machine learning\nand possibly other purposes)\\</p>\n<p>7 -- current filters</p>\n<p>Enter filters as described for quick_SNAKE but instead of seperating with double slashes just enter each\none seperately.</p>\n<p>You may also incorporate elements of the ISCNParser algorithm into your script by importing ISCNSNAKE.ISCNParser\nand then calling the functions and classes for your needs.</p>\n<p>15 -- analyze dependancies\nWill make a list of co occurances of various aberrations. Very very very very slow. Creates a list\nof links in circos format.</p>\n<p>16 -- dependence quantile\nTrims links to the quantile selected. Useful as most dependancy matrixes end up with hundreds of thousands\nof co-occurances.</p>\n<p>18 -- analyze errors\nSet to True if you want a seperate file containing every instance of an unparsable karyotype. Could be used\npretty easily to check your own karyotypes to check for proper ISCN syntax. Will try to explain errors\nbut isn't very descriptive.</p>\n<p>20 -- verbose\nSet to True if you want all the karyotypes the program reads to be printed to console. (same as -v in\nquick_SNAKE)</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Connor Denomy</strong> (<a href=\"mailto:connordenomy@gmail.com\">connordenomy@gmail.com</a>) - <em>Lead author</em>\nFeel free to email me any questions you have about using this program.</li>\n</ul>\n<h1></h1>\n<h1>Acknowledgments</h1>\n<h1></h1>\n<ul>\n<li>Samuel Germain for creating the prototype of this program in shell/perl and providing the basis for the core algorithm</li>\n<li>Bjorn Haave for assisting</li>\n<li>Vizeacoumar lab</li>\n</ul>\n\n          </div>"}, "last_serial": 5432932, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "ee0145eecaf347a0065ee6e3bf83337b", "sha256": "67509176730872f377522de97edaea38e48015fdf6f0735468faae9a35b204da"}, "downloads": -1, "filename": "ISCNSNAKE-2.0-py3.6.egg", "has_sig": false, "md5_digest": "ee0145eecaf347a0065ee6e3bf83337b", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6.0", "size": 45029, "upload_time": "2019-04-18T17:44:55", "upload_time_iso_8601": "2019-04-18T17:44:55.312912Z", "url": "https://files.pythonhosted.org/packages/2b/a6/ecdd50fc16a65e53be5261d7d0d669a9cb23b1178007f29b7de3f99e7c61/ISCNSNAKE-2.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "229003e2cfb8d9927be036f71093d4dd", "sha256": "8befce009576f25e38fc671adadf24936319acc37e92e99448fe4a11732b3dec"}, "downloads": -1, "filename": "ISCNSNAKE-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "229003e2cfb8d9927be036f71093d4dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48542, "upload_time": "2019-06-18T16:58:19", "upload_time_iso_8601": "2019-06-18T16:58:19.628105Z", "url": "https://files.pythonhosted.org/packages/93/f5/1c67d15da36497d41be50e8984ae168a738b37a8a019961b8cadab9d7ac0/ISCNSNAKE-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b85dc154efcfd855994e548b403a503", "sha256": "af0c764d47570a2212fb83bcbf1f08f8673e14cc1e942698a88466769fde0ba4"}, "downloads": -1, "filename": "ISCNSNAKE-2.0.tar.gz", "has_sig": false, "md5_digest": "3b85dc154efcfd855994e548b403a503", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 1742757, "upload_time": "2019-04-18T17:45:00", "upload_time_iso_8601": "2019-04-18T17:45:00.251287Z", "url": "https://files.pythonhosted.org/packages/ae/91/e407ee509030cbeb7dfb97e36074c97c9234d6e99501730c980552f4984b/ISCNSNAKE-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "9fec04dd84d36ee3fed7562585ab705d", "sha256": "02633649eeccde479004577d0dad1a06c09e9d7fd2c6c5485e10a57e04a5829a"}, "downloads": -1, "filename": "ISCNSNAKE-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fec04dd84d36ee3fed7562585ab705d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48541, "upload_time": "2019-06-18T17:00:28", "upload_time_iso_8601": "2019-06-18T17:00:28.710990Z", "url": "https://files.pythonhosted.org/packages/ce/de/f18257a0f07d33d52ab06fed4da5df2eb7477076cd8add6e55748af16dc3/ISCNSNAKE-2.1-py3-none-any.whl", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "031b77a7c7678708313bfe86dcb34355", "sha256": "b2926dc25e970f6329d7035675bcade8a8cc30a92105aad87e5dc735f85c09a2"}, "downloads": -1, "filename": "ISCNSNAKE-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "031b77a7c7678708313bfe86dcb34355", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48539, "upload_time": "2019-06-21T21:24:45", "upload_time_iso_8601": "2019-06-21T21:24:45.789915Z", "url": "https://files.pythonhosted.org/packages/15/6e/1cbb94035047ce7fcefbda9be6f4c11f56a573e96918d46200a8755c2645/ISCNSNAKE-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "017f053a6d74a3a20e806512aa5bec68", "sha256": "5beb20d7a3189680b1323ba05fc0a936271f50af99410a69496a5069fc6363ab"}, "downloads": -1, "filename": "ISCNSNAKE-2.2.tar.gz", "has_sig": false, "md5_digest": "017f053a6d74a3a20e806512aa5bec68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 1747280, "upload_time": "2019-06-21T21:24:53", "upload_time_iso_8601": "2019-06-21T21:24:53.177272Z", "url": "https://files.pythonhosted.org/packages/7a/d1/35f8a151da44248650d75bbba93c618563ddc002fad75ec0b175b4f630b2/ISCNSNAKE-2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "031b77a7c7678708313bfe86dcb34355", "sha256": "b2926dc25e970f6329d7035675bcade8a8cc30a92105aad87e5dc735f85c09a2"}, "downloads": -1, "filename": "ISCNSNAKE-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "031b77a7c7678708313bfe86dcb34355", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 48539, "upload_time": "2019-06-21T21:24:45", "upload_time_iso_8601": "2019-06-21T21:24:45.789915Z", "url": "https://files.pythonhosted.org/packages/15/6e/1cbb94035047ce7fcefbda9be6f4c11f56a573e96918d46200a8755c2645/ISCNSNAKE-2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "017f053a6d74a3a20e806512aa5bec68", "sha256": "5beb20d7a3189680b1323ba05fc0a936271f50af99410a69496a5069fc6363ab"}, "downloads": -1, "filename": "ISCNSNAKE-2.2.tar.gz", "has_sig": false, "md5_digest": "017f053a6d74a3a20e806512aa5bec68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 1747280, "upload_time": "2019-06-21T21:24:53", "upload_time_iso_8601": "2019-06-21T21:24:53.177272Z", "url": "https://files.pythonhosted.org/packages/7a/d1/35f8a151da44248650d75bbba93c618563ddc002fad75ec0b175b4f630b2/ISCNSNAKE-2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:08 2020"}