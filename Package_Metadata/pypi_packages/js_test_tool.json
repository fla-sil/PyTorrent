{"info": {"author": "edX", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "js-test-tool\n============\n\nRun JavaScript test suites and collect coverage information.\n\n\nInstallation\n------------\n\n.. code:: bash\n\n    cd js-test-tool\n    python setup.py install\n\n\nGetting Started\n---------------\n\n1. Create a file describing the test suite.\n\n.. code:: bash\n\n    js-test-tool init js_test.yml\n\nThis will create a YAML file (``js_test.yml``) that looks like:\n\n.. code:: yaml\n\n    ---\n    # Name of the test suite, used to construct\n    # the URL from which pages are served.\n    #\n    # For example, if the suite name is \"test_suite\",\n    # then:\n    #\n    #   * /suite/test_suite\n    #     serves the test suite runner page\n    #   * /suite/test_suite/include/*\n    #     serves dependencies (src, spec, lib, and fixtures)\n    #\n    # Test suite names must be URL-encodable and unique\n    # among suite descriptions passed to js-test-tool\n    test_suite_name: test_suite\n\n    # Currently, the only supported test runner is Jasmine\n    # See http://pivotal.github.io/jasmine/\n    # for the Jasmine documentation.\n    test_runner: jasmine\n\n    # Path prepended to source files in the coverage report (optional)\n    # For example, if the source path\n    # is \"src/source.js\" (relative to this YAML file)\n    # and the prepend path is \"base/dir\"\n    # then the coverage report will show\n    # \"base/dir/src/source.js\"\n    prepend_path: base/path\n\n    # Paths to library JavaScript files (optional)\n    lib_paths:\n        - path/to/lib\n\n    # Paths to source JavaScript files\n    src_paths:\n        - path/to/src\n\n    # Paths to spec (test) JavaScript files\n    spec_paths:\n        - path/to/spec\n\n    # Paths to fixture files (optional)\n    # The fixture path will be set automatically when using jasmine-jquery.\n    # (https://github.com/velesin/jasmine-jquery)\n    #\n    # You can then access fixtures using paths relative to\n    # the test suite description:\n    #\n    #   loadFixtures('path/to/fixture/fixture.html');\n    #\n    fixture_paths:\n        - path/to/fixture\n\n    # Regular expressions used to exclude *.js files from\n    # appearing in the test runner page.\n    # Some test runners (like the jasmine runner) include files by default,\n    # which means that they are loaded using a <script> tag in the test\n    # runner page. When loading many files, this can be slow, so\n    # exclude any files you don't need.\n    # Note that not all runners behave the same way: for example, the\n    # jasmine_requirejs runner does not include files using <script> tags\n    # by default, and so will ignore this directive.\n    exclude_from_page:\n        - path/to/lib/exclude/.*\n\n    # Regular expression used to guarantee that a *.js file\n    # is included in the test runner page.\n    # If a file name matches both `exclude_from_page` and\n    # `include_in_page`, the file WILL be included.\n    # You can use this to exclude all files in a directory,\n    # but make an exception for particular files.\n    include_in_page:\n        - path/to/lib/exclude/exception_.*\\.js\n\n\n* All paths are specified relative\n  to the location of the YAML file.\n\n* Directory paths are searched recursively.\n\n* JavaScript files are loaded in the specified order.\n\n* Paths cannot contain up-level references. For example, ``path/to/dir`` is okay,\n  but ``../path/to/dir`` is not.\n  If you need to access files in directories above the test suite directory,\n  use symbolic links.\n\n2. Run the test suite.\n\n.. code:: bash\n\n    js-test-tool run js_test.yml --use-firefox\n\nThis will output a report to the console showing which tests passed or failed.\n\n\nDev Mode\n--------\n\n``js-test-tool`` has a special mode for writing and debugging tests:\n\n.. code:: bash\n\n    js-test-tool dev js_test.yml\n\nThis will start ``js-test-tool`` in **dev mode**:\n\n* Tests will run in your default browser.\n* The tool will keep running until you terminate it with ``Ctrl-C``.\n* Test results are displayed directly in the browser.\n\n\nTimeouts\n--------\n\nIf tests take too long to run, the test runner will time out.\nThe default timeout is 5 minutes, but you can override this:\n\n.. code:: bash\n\n    js-test-tool run js_test.yml --use-chrome --timeout-sec 10\n\nThe above command sets the timeout to 10 seconds.\n\n\nCoverage\n--------\n\nTo collect JavaScript coverage:\n\n1. Download and unzip `JSCover`__\n\n__ http://tntim96.github.io/JSCover/\n\n2. Set the environment variable ``JSCOVER_JAR``:\n\n.. code:: bash\n\n    export JSCOVER_JAR=~/jscover/target/dist/JSCover-all.jar\n\n3. Run ``js-test-tool`` with coverage:\n\n.. code:: bash\n\n    js-test-tool run js_test.yml --use-phantomjs --coverage-xml=js_coverage.xml --coverage-html=js_coverage.html\n\nThis will create coverage reports in two formats:\n\n* Cobertura XML\n* HTML\n\n\nXUnit Reports\n-------------\n\n``js-test-tool`` can generate XUnit-style XML reports for consumption\nby a CI system such as Jenkins.\n\n.. code:: bash\n\n    js-test-tool run js_test.yml --use-firefox --xunit-report report.xml\n\nwill generate a report called ``report.xml``.\n\n\nMultiple Browsers\n------------------\n\nUsing command-line options, you can run the tests in\nmultiple browsers:\n\n.. code:: bash\n\n    js-test-tool run js_test.yml --use-chrome --use-phantomjs\n\nwill run the tests in both Chrome and PhantomJS if the\nbrowsers are installed.\n\nThe tool currently supports these browsers:\n\n* Chrome\n* PhantomJS\n* Firefox\n\nCoverage information is combined across browsers: a line is\nconsidered covered if it is executed under *any* browser.\n\n\nMultiple Test Suites\n--------------------\n\nYou can run test suites sequentially:\n\n.. code:: bash\n\n    js-test-tool run test_1.yml test_2.yml --use-firefox\n\nIf collecting coverage, then the coverage report\nwill contain information for all files included\nin each test suite.\n\n\nLicense\n-------\n\nThe code in this repository is licensed under version 3 of the AGPL unless\notherwise noted.\n\nPlease see ``LICENSE.txt`` for details.\n\n\nHow to Contribute\n-----------------\n\nContributions are very welcome. The easiest way is to fork this repo, and then\nmake a pull request from your fork. The first time you make a pull request, you\nmay be asked to sign a Contributor Agreement.\n\n\nReporting Security Issues\n-------------------------\n\nPlease do not report security issues in public. Please email security@edx.org\n\n\nMailing List and IRC Channel\n----------------------------\n\nYou can discuss this code on the `edx-code Google Group`__ or in the\n``edx-code`` IRC channel on Freenode.\n\n__ https://groups.google.com/forum/#!forum/edx-code\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/edx/js-test-tool", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "js_test_tool", "package_url": "https://pypi.org/project/js_test_tool/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/js_test_tool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/edx/js-test-tool"}, "release_url": "https://pypi.org/project/js_test_tool/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "Run JavaScript test suites and collect coverage information.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Run JavaScript test suites and collect coverage information.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"nb\">cd</span> js-test-tool\npython setup.py install\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<ol>\n<li>Create a file describing the test suite.</li>\n</ol>\n<pre>js-test-tool init js_test.yml\n</pre>\n<p>This will create a YAML file (<tt>js_test.yml</tt>) that looks like:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"c1\"># Name of the test suite, used to construct</span>\n<span class=\"c1\"># the URL from which pages are served.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># For example, if the suite name is \"test_suite\",</span>\n<span class=\"c1\"># then:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#   * /suite/test_suite</span>\n<span class=\"c1\">#     serves the test suite runner page</span>\n<span class=\"c1\">#   * /suite/test_suite/include/*</span>\n<span class=\"c1\">#     serves dependencies (src, spec, lib, and fixtures)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Test suite names must be URL-encodable and unique</span>\n<span class=\"c1\"># among suite descriptions passed to js-test-tool</span>\n<span class=\"nt\">test_suite_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test_suite</span>\n\n<span class=\"c1\"># Currently, the only supported test runner is Jasmine</span>\n<span class=\"c1\"># See http://pivotal.github.io/jasmine/</span>\n<span class=\"c1\"># for the Jasmine documentation.</span>\n<span class=\"nt\">test_runner</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">jasmine</span>\n\n<span class=\"c1\"># Path prepended to source files in the coverage report (optional)</span>\n<span class=\"c1\"># For example, if the source path</span>\n<span class=\"c1\"># is \"src/source.js\" (relative to this YAML file)</span>\n<span class=\"c1\"># and the prepend path is \"base/dir\"</span>\n<span class=\"c1\"># then the coverage report will show</span>\n<span class=\"c1\"># \"base/dir/src/source.js\"</span>\n<span class=\"nt\">prepend_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">base/path</span>\n\n<span class=\"c1\"># Paths to library JavaScript files (optional)</span>\n<span class=\"nt\">lib_paths</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/lib</span>\n\n<span class=\"c1\"># Paths to source JavaScript files</span>\n<span class=\"nt\">src_paths</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/src</span>\n\n<span class=\"c1\"># Paths to spec (test) JavaScript files</span>\n<span class=\"nt\">spec_paths</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/spec</span>\n\n<span class=\"c1\"># Paths to fixture files (optional)</span>\n<span class=\"c1\"># The fixture path will be set automatically when using jasmine-jquery.</span>\n<span class=\"c1\"># (https://github.com/velesin/jasmine-jquery)</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># You can then access fixtures using paths relative to</span>\n<span class=\"c1\"># the test suite description:</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#   loadFixtures('path/to/fixture/fixture.html');</span>\n<span class=\"c1\">#</span>\n<span class=\"nt\">fixture_paths</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/fixture</span>\n\n<span class=\"c1\"># Regular expressions used to exclude *.js files from</span>\n<span class=\"c1\"># appearing in the test runner page.</span>\n<span class=\"c1\"># Some test runners (like the jasmine runner) include files by default,</span>\n<span class=\"c1\"># which means that they are loaded using a &lt;script&gt; tag in the test</span>\n<span class=\"c1\"># runner page. When loading many files, this can be slow, so</span>\n<span class=\"c1\"># exclude any files you don't need.</span>\n<span class=\"c1\"># Note that not all runners behave the same way: for example, the</span>\n<span class=\"c1\"># jasmine_requirejs runner does not include files using &lt;script&gt; tags</span>\n<span class=\"c1\"># by default, and so will ignore this directive.</span>\n<span class=\"nt\">exclude_from_page</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/lib/exclude/.*</span>\n\n<span class=\"c1\"># Regular expression used to guarantee that a *.js file</span>\n<span class=\"c1\"># is included in the test runner page.</span>\n<span class=\"c1\"># If a file name matches both `exclude_from_page` and</span>\n<span class=\"c1\"># `include_in_page`, the file WILL be included.</span>\n<span class=\"c1\"># You can use this to exclude all files in a directory,</span>\n<span class=\"c1\"># but make an exception for particular files.</span>\n<span class=\"nt\">include_in_page</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">path/to/lib/exclude/exception_.*\\.js</span>\n</pre>\n<ul>\n<li>All paths are specified relative\nto the location of the YAML file.</li>\n<li>Directory paths are searched recursively.</li>\n<li>JavaScript files are loaded in the specified order.</li>\n<li>Paths cannot contain up-level references. For example, <tt>path/to/dir</tt> is okay,\nbut <tt><span class=\"pre\">../path/to/dir</span></tt> is not.\nIf you need to access files in directories above the test suite directory,\nuse symbolic links.</li>\n</ul>\n<ol>\n<li>Run the test suite.</li>\n</ol>\n<pre>js-test-tool run js_test.yml --use-firefox\n</pre>\n<p>This will output a report to the console showing which tests passed or failed.</p>\n</div>\n<div id=\"dev-mode\">\n<h2>Dev Mode</h2>\n<p><tt><span class=\"pre\">js-test-tool</span></tt> has a special mode for writing and debugging tests:</p>\n<pre>js-test-tool dev js_test.yml\n</pre>\n<p>This will start <tt><span class=\"pre\">js-test-tool</span></tt> in <strong>dev mode</strong>:</p>\n<ul>\n<li>Tests will run in your default browser.</li>\n<li>The tool will keep running until you terminate it with <tt><span class=\"pre\">Ctrl-C</span></tt>.</li>\n<li>Test results are displayed directly in the browser.</li>\n</ul>\n</div>\n<div id=\"timeouts\">\n<h2>Timeouts</h2>\n<p>If tests take too long to run, the test runner will time out.\nThe default timeout is 5 minutes, but you can override this:</p>\n<pre>js-test-tool run js_test.yml --use-chrome --timeout-sec <span class=\"m\">10</span>\n</pre>\n<p>The above command sets the timeout to 10 seconds.</p>\n</div>\n<div id=\"coverage\">\n<h2>Coverage</h2>\n<p>To collect JavaScript coverage:</p>\n<ol>\n<li>Download and unzip <a href=\"http://tntim96.github.io/JSCover/\" rel=\"nofollow\">JSCover</a></li>\n</ol>\n<ol>\n<li>Set the environment variable <tt>JSCOVER_JAR</tt>:</li>\n</ol>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">JSCOVER_JAR</span><span class=\"o\">=</span>~/jscover/target/dist/JSCover-all.jar\n</pre>\n<ol>\n<li>Run <tt><span class=\"pre\">js-test-tool</span></tt> with coverage:</li>\n</ol>\n<pre>js-test-tool run js_test.yml --use-phantomjs --coverage-xml<span class=\"o\">=</span>js_coverage.xml --coverage-html<span class=\"o\">=</span>js_coverage.html\n</pre>\n<p>This will create coverage reports in two formats:</p>\n<ul>\n<li>Cobertura XML</li>\n<li>HTML</li>\n</ul>\n</div>\n<div id=\"xunit-reports\">\n<h2>XUnit Reports</h2>\n<p><tt><span class=\"pre\">js-test-tool</span></tt> can generate XUnit-style XML reports for consumption\nby a CI system such as Jenkins.</p>\n<pre>js-test-tool run js_test.yml --use-firefox --xunit-report report.xml\n</pre>\n<p>will generate a report called <tt>report.xml</tt>.</p>\n</div>\n<div id=\"multiple-browsers\">\n<h2>Multiple Browsers</h2>\n<p>Using command-line options, you can run the tests in\nmultiple browsers:</p>\n<pre>js-test-tool run js_test.yml --use-chrome --use-phantomjs\n</pre>\n<p>will run the tests in both Chrome and PhantomJS if the\nbrowsers are installed.</p>\n<p>The tool currently supports these browsers:</p>\n<ul>\n<li>Chrome</li>\n<li>PhantomJS</li>\n<li>Firefox</li>\n</ul>\n<p>Coverage information is combined across browsers: a line is\nconsidered covered if it is executed under <em>any</em> browser.</p>\n</div>\n<div id=\"multiple-test-suites\">\n<h2>Multiple Test Suites</h2>\n<p>You can run test suites sequentially:</p>\n<pre>js-test-tool run test_1.yml test_2.yml --use-firefox\n</pre>\n<p>If collecting coverage, then the coverage report\nwill contain information for all files included\nin each test suite.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The code in this repository is licensed under version 3 of the AGPL unless\notherwise noted.</p>\n<p>Please see <tt>LICENSE.txt</tt> for details.</p>\n</div>\n<div id=\"how-to-contribute\">\n<h2>How to Contribute</h2>\n<p>Contributions are very welcome. The easiest way is to fork this repo, and then\nmake a pull request from your fork. The first time you make a pull request, you\nmay be asked to sign a Contributor Agreement.</p>\n</div>\n<div id=\"reporting-security-issues\">\n<h2>Reporting Security Issues</h2>\n<p>Please do not report security issues in public. Please email <a href=\"mailto:security%40edx.org\">security<span>@</span>edx<span>.</span>org</a></p>\n</div>\n<div id=\"mailing-list-and-irc-channel\">\n<h2>Mailing List and IRC Channel</h2>\n<p>You can discuss this code on the <a href=\"https://groups.google.com/forum/#!forum/edx-code\" rel=\"nofollow\">edx-code Google Group</a> or in the\n<tt><span class=\"pre\">edx-code</span></tt> IRC channel on Freenode.</p>\n</div>\n\n          </div>"}, "last_serial": 1249378, "releases": {"0.0.9": [{"comment_text": "", "digests": {"md5": "1abaa2d4c214c8d6869f9dedd9a351ff", "sha256": "7ac6c7b19247bc94798a4f34a508b529db94b48ca27de9227bce167cca08ad9f"}, "downloads": -1, "filename": "js_test_tool-0.0.9.tar.gz", "has_sig": false, "md5_digest": "1abaa2d4c214c8d6869f9dedd9a351ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70226, "upload_time": "2013-09-08T02:54:47", "upload_time_iso_8601": "2013-09-08T02:54:47.862134Z", "url": "https://files.pythonhosted.org/packages/6d/56/e40078f95e2e77267068dfa2fb2f871c3d2c07a1eef7a8056444323c0fd1/js_test_tool-0.0.9.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "4be32ce962d7ed1c798eea432e180a1f", "sha256": "ecb76e76624e933454717e4a4890b19bec4713fe019d6051a9543a1fc28c3043"}, "downloads": -1, "filename": "js_test_tool-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4be32ce962d7ed1c798eea432e180a1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126806, "upload_time": "2014-10-06T13:03:59", "upload_time_iso_8601": "2014-10-06T13:03:59.431512Z", "url": "https://files.pythonhosted.org/packages/b2/4f/88e6d3eea86e5503b2b065989d2d4fb18a22c1a51b9bbe1dfc43af193874/js_test_tool-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4be32ce962d7ed1c798eea432e180a1f", "sha256": "ecb76e76624e933454717e4a4890b19bec4713fe019d6051a9543a1fc28c3043"}, "downloads": -1, "filename": "js_test_tool-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4be32ce962d7ed1c798eea432e180a1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126806, "upload_time": "2014-10-06T13:03:59", "upload_time_iso_8601": "2014-10-06T13:03:59.431512Z", "url": "https://files.pythonhosted.org/packages/b2/4f/88e6d3eea86e5503b2b065989d2d4fb18a22c1a51b9bbe1dfc43af193874/js_test_tool-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:31 2020"}