{"info": {"author": "Jon Burr", "author_email": "jon.burr.gh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=========\nmemoclass\n=========\n-----------------------------------------------------------\nA utility package for memoizing functions and class methods\n-----------------------------------------------------------\n\n.. role:: python(code)\n    :language: python\n\n.. image:: https://github.com/Jon-Burr/memoclass/workflows/PyTest/badge.svg\n\nIntroduction\n============\n\nMemoization_ is a common technique used primarily as an optimizer, allowing the\ncaching of the return values of expensive functions. When a memoized function is\ncalled with a given set of arguments for the first time its return value is\ncached, and that value is then returned on all subsequent calls.\n\nWhile many memoization packages exist, as well as instructions to write your own\nsimple decorator, this package provides enhanced utility for memoizing methods\non *classes*. Especially, this allows for a couple of ways of automatically\nclearing the caches related to a particular instance, for example, when changing\na member variable would change the result of those functions. This package also\nuses :python:`inspect.signature` to correctly treat default argument values, where\npossible.\n\nPreliminary sphinx documentation can be found at\nhttps://jon-burr.github.io/memoclass/memoclass.html\n\nThe project is hosted on github at https://github.com/Jon-Burr/memoclass\n\nInstallation\n============\n\n.. code:: bash\n\n  pip install memoclass\n\nOverview of core components\n===========================\n\n:python:`memoclass.memoize.memofunc`\n------------------------------------\n\nMemoizes a single free function. The returned object is a :python:`MemoFunc` object,\nwhich has functions that allow you to temporarily disable the caching, or clear\nit entirely.\n\n.. code:: python\n\n  >>> from memoclass.memoize import memofunc\n  >>>\n  >>> @memofunc\n  >>> def build_list(x):\n  >>>     return [1, 2, 3, x]\n  >>> \n  >>> a = build_list(5)\n  >>> b = build_list(5)\n  >>> a is b\n  True\n  >>> build_list.clear_cache()\n  >>> c = build_list(5)\n  >>> a is c\n  False\n\nThe :python:`MemoFunc` class also has some extra properties that can be set while\ndecorating\n\n.. code:: python\n\n  >>> from memoclass.memoize import memofunc\n  >>> import copy\n  >>>\n  >>> @memofunc(on_return=copy.copy)\n  >>> def build_list(x):\n  >>>     return [1, 2, 3, x]\n  >>> \n  >>> a = build_list(5)\n  >>> b = build_list(5)\n  >>> a is b\n  False\n\n:python:`memoclass.memoize.memomethod`\n--------------------------------------\n\nMemoizes a class method. Methods bound to different instances have independent\ncaches, so the cache on one object can be cleared without clearing it for all\nother objects.\n\n.. code:: python\n\n  >>> from memoclass.memoize import memomethod\n  >>>\n  >>> class ListBuilder(object):\n  >>>     @memomethod\n  >>>     def __call__(self, x):\n  >>>         return [1, 2, 3, x]\n  >>>\n  >>> x = ListBuilder()\n  >>> y = ListBuilder()\n  >>> a = x()\n  >>> b = y()\n  >>> a is b\n  False\n  >>> x.__call__.clear_cache()\n  >>> c = y()\n  >>> b is c # Clearing x's cache has not touched y's\n  True\n\n:python:`memoclass.memoclass.MemoClass`\n---------------------------------------\n\nBase class meant to make interacting with memoized methods easier. It can\nenabled, disable and clear all memomethods attached to an instance (note that\nwhich methods exist is calculated at the *class* level, so any added onto an\ninstance will not be seen).\n\nBy default, setting any attribute will reset the object's caches, unless that\nattribute has been provided to the :python:`mutable_attrs` argument of\n:python:`MemoClass.__init__`. This behaviour can be disabled by setting\n:python:`mutable_attrs=None`. Additionally, any function can have the\n:python:`memoclass.memoclass.mutates` decorator applied to it, which will then reset\nthe caches whenever it is called.\n\n.. code:: python\n\n  >>> from memoclass.memoize import memomethod\n  >>> from memoclass.memoclass import MemoClass\n  >>>\n  >>> class PartialSum(MemoClass):\n  >>>\n  >>>     def __init__(self, stored):\n  >>>         super().__init__()\n  >>>         self.stored = stored\n  >>>\n  >>>     @memomethod\n  >>>     def __call__(self, other):\n  >>>         return self.stored + other\n  >>>\n  >>> a = PartialSum(5)\n  >>> a(3)\n  8\n  >>> a.stored = 3 # Triggers a cache reset\n  >>> a(3)\n  6\n\nA :python:`MemoClass` can be ``locked`` which means that all caches are enabled and\ncalling a function marked :python:`mutates` or setting a non-mutable attribute results\nin a :python:`ValueError`. When the class is then unlocked again, if the caches\nwere previously disabled, they will be disabled and cleared. This means it is\npossible to create a class whose methods are only temporarily memoized. This\nmight be useful if a class has expensive methods to calculate that rely on a\nglobal state. Note that by default, a :python:`memomethod` declared on a\n:python:`MemoClass` will lock its caller while it is called.\n\n.. _Memoization: https://en.wikipedia.org/wiki/Memoization\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jon-Burr/memoclass.git", "keywords": "memoize,cache", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "memoclass", "package_url": "https://pypi.org/project/memoclass/", "platform": "", "project_url": "https://pypi.org/project/memoclass/", "project_urls": {"Homepage": "https://github.com/Jon-Burr/memoclass.git"}, "release_url": "https://pypi.org/project/memoclass/0.2.1/", "requires_dist": ["future", "funcsigs ; python_version < \"3.0\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A utility package for memoizing functions and class methods", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://github.com/Jon-Burr/memoclass/workflows/PyTest/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90ae8b77c28004690589a9e448ad54c5f0311e82/68747470733a2f2f6769746875622e636f6d2f4a6f6e2d427572722f6d656d6f636c6173732f776f726b666c6f77732f5079546573742f62616467652e737667\">\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Memoization\" rel=\"nofollow\">Memoization</a> is a common technique used primarily as an optimizer, allowing the\ncaching of the return values of expensive functions. When a memoized function is\ncalled with a given set of arguments for the first time its return value is\ncached, and that value is then returned on all subsequent calls.</p>\n<p>While many memoization packages exist, as well as instructions to write your own\nsimple decorator, this package provides enhanced utility for memoizing methods\non <em>classes</em>. Especially, this allows for a couple of ways of automatically\nclearing the caches related to a particular instance, for example, when changing\na member variable would change the result of those functions. This package also\nuses <code class=\"python\"><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span></code> to correctly treat default argument values, where\npossible.</p>\n<p>Preliminary sphinx documentation can be found at\n<a href=\"https://jon-burr.github.io/memoclass/memoclass.html\" rel=\"nofollow\">https://jon-burr.github.io/memoclass/memoclass.html</a></p>\n<p>The project is hosted on github at <a href=\"https://github.com/Jon-Burr/memoclass\" rel=\"nofollow\">https://github.com/Jon-Burr/memoclass</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install memoclass\n</pre>\n</div>\n<div id=\"overview-of-core-components\">\n<h2>Overview of core components</h2>\n<div id=\"memoclass-memoize-memofunc\">\n<h3><code class=\"python\"><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">memoize</span><span class=\"o\">.</span><span class=\"n\">memofunc</span></code></h3>\n<p>Memoizes a single free function. The returned object is a <code class=\"python\"><span class=\"n\">MemoFunc</span></code> object,\nwhich has functions that allow you to temporarily disable the caching, or clear\nit entirely.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memoclass.memoize</span> <span class=\"kn\">import</span> <span class=\"n\">memofunc</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@memofunc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">build_list</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">build_list</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">build_list</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">build_list</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">build_list</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">c</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>The <code class=\"python\"><span class=\"n\">MemoFunc</span></code> class also has some extra properties that can be set while\ndecorating</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memoclass.memoize</span> <span class=\"kn\">import</span> <span class=\"n\">memofunc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@memofunc</span><span class=\"p\">(</span><span class=\"n\">on_return</span><span class=\"o\">=</span><span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">build_list</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">build_list</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">build_list</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"memoclass-memoize-memomethod\">\n<h3><code class=\"python\"><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">memoize</span><span class=\"o\">.</span><span class=\"n\">memomethod</span></code></h3>\n<p>Memoizes a class method. Methods bound to different instances have independent\ncaches, so the cache on one object can be cleared without clearing it for all\nother objects.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memoclass.memoize</span> <span class=\"kn\">import</span> <span class=\"n\">memomethod</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">ListBuilder</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"nd\">@memomethod</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ListBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">ListBuilder</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"n\">b</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">is</span> <span class=\"n\">c</span> <span class=\"c1\"># Clearing x's cache has not touched y's</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"memoclass-memoclass-memoclass\">\n<h3><code class=\"python\"><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">MemoClass</span></code></h3>\n<p>Base class meant to make interacting with memoized methods easier. It can\nenabled, disable and clear all memomethods attached to an instance (note that\nwhich methods exist is calculated at the <em>class</em> level, so any added onto an\ninstance will not be seen).</p>\n<p>By default, setting any attribute will reset the object\u2019s caches, unless that\nattribute has been provided to the <code class=\"python\"><span class=\"n\">mutable_attrs</span></code> argument of\n<code class=\"python\"><span class=\"n\">MemoClass</span><span class=\"o\">.</span><span class=\"fm\">__init__</span></code>. This behaviour can be disabled by setting\n<code class=\"python\"><span class=\"n\">mutable_attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span></code>. Additionally, any function can have the\n<code class=\"python\"><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">memoclass</span><span class=\"o\">.</span><span class=\"n\">mutates</span></code> decorator applied to it, which will then reset\nthe caches whenever it is called.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memoclass.memoize</span> <span class=\"kn\">import</span> <span class=\"n\">memomethod</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">memoclass.memoclass</span> <span class=\"kn\">import</span> <span class=\"n\">MemoClass</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">PartialSum</span><span class=\"p\">(</span><span class=\"n\">MemoClass</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stored</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stored</span> <span class=\"o\">=</span> <span class=\"n\">stored</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"nd\">@memomethod</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"o\">&gt;&gt;&gt;</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stored</span> <span class=\"o\">+</span> <span class=\"n\">other</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">PartialSum</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">8</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">stored</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"c1\"># Triggers a cache reset</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">6</span>\n</pre>\n<p>A <code class=\"python\"><span class=\"n\">MemoClass</span></code> can be <tt>locked</tt> which means that all caches are enabled and\ncalling a function marked <code class=\"python\"><span class=\"n\">mutates</span></code> or setting a non-mutable attribute results\nin a <code class=\"python\"><span class=\"ne\">ValueError</span></code>. When the class is then unlocked again, if the caches\nwere previously disabled, they will be disabled and cleared. This means it is\npossible to create a class whose methods are only temporarily memoized. This\nmight be useful if a class has expensive methods to calculate that rely on a\nglobal state. Note that by default, a <code class=\"python\"><span class=\"n\">memomethod</span></code> declared on a\n<code class=\"python\"><span class=\"n\">MemoClass</span></code> will lock its caller while it is called.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6501766, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a3b8a93e28f8f3c9ad7abe26f0611caa", "sha256": "3d1c31415c341691330ef3b6cbc843b4d6861e319f01e9bf8c9af12a535e3bf0"}, "downloads": -1, "filename": "memoclass-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b8a93e28f8f3c9ad7abe26f0611caa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11984, "upload_time": "2020-01-10T09:55:28", "upload_time_iso_8601": "2020-01-10T09:55:28.685442Z", "url": "https://files.pythonhosted.org/packages/50/d4/4fc3f7cbf303552a0873dadd0d38158dbc8c00c97d03412de9fa8976aee9/memoclass-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "311aa646f81f0505b02fdf0750582ddd", "sha256": "383eb37edd31222c4c32d13351d440d008c0cef796e51b4b7d16005510419821"}, "downloads": -1, "filename": "memoclass-0.1.0.tar.gz", "has_sig": false, "md5_digest": "311aa646f81f0505b02fdf0750582ddd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8117, "upload_time": "2020-01-10T09:55:31", "upload_time_iso_8601": "2020-01-10T09:55:31.051339Z", "url": "https://files.pythonhosted.org/packages/7e/9f/0cfa252e7598abc8623fb12dcc875243352399c2dd07c89404b3815d4a09/memoclass-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fbe89191cb5ff007138f42eb65050f76", "sha256": "1daa25c432c76a3dadf020c1662aa57f2a8266637ad94bf2982edb2ec3d7cc46"}, "downloads": -1, "filename": "memoclass-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fbe89191cb5ff007138f42eb65050f76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8656, "upload_time": "2020-01-10T13:20:39", "upload_time_iso_8601": "2020-01-10T13:20:39.986867Z", "url": "https://files.pythonhosted.org/packages/07/41/47fa752b3a81db93ab44ba3994fecf35eb9d51d60ac1fb4ac18a3382c193/memoclass-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a0ba49d9b7b7fed632398c9eed8d375", "sha256": "fd10abaaf7393ce8c1214e971029950c7c2341afc6c1fb9f339d906e0985359e"}, "downloads": -1, "filename": "memoclass-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7a0ba49d9b7b7fed632398c9eed8d375", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8096, "upload_time": "2020-01-10T13:20:41", "upload_time_iso_8601": "2020-01-10T13:20:41.811042Z", "url": "https://files.pythonhosted.org/packages/71/77/0f5562e996718b52214e895f25bd3760181e4a2dfb7edd191ec0a528fb4b/memoclass-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6b88fdd3bc82560bd5ec4c62aa8a6ccc", "sha256": "1de1e8027bc9f1e512d02b9d567d49c76eee654fca285e0af106eb5390b0c203"}, "downloads": -1, "filename": "memoclass-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b88fdd3bc82560bd5ec4c62aa8a6ccc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9203, "upload_time": "2020-01-20T17:06:30", "upload_time_iso_8601": "2020-01-20T17:06:30.309642Z", "url": "https://files.pythonhosted.org/packages/a8/19/67402e859b639811269f8264a842685dc07138d044dd31ef4b92f1e0b20a/memoclass-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4ca5208152894cfe44e99552841d59e", "sha256": "0da2666c3011e4ca4c2b32e48dff0492aec4878c5134ad9c5316b78a605403f5"}, "downloads": -1, "filename": "memoclass-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e4ca5208152894cfe44e99552841d59e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8656, "upload_time": "2020-01-20T17:06:32", "upload_time_iso_8601": "2020-01-20T17:06:32.153402Z", "url": "https://files.pythonhosted.org/packages/80/19/504f3b0614b4d378cf31b6b4000ad490609107b070094f2be379165331ec/memoclass-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "283a453cadc596fb4dffe0b842c9aab3", "sha256": "2d0c8fc23abe1cf559ddbac86a974c0c3a96b383312bdaf612d8bc311e2760bf"}, "downloads": -1, "filename": "memoclass-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "283a453cadc596fb4dffe0b842c9aab3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9504, "upload_time": "2020-01-22T18:18:39", "upload_time_iso_8601": "2020-01-22T18:18:39.765872Z", "url": "https://files.pythonhosted.org/packages/bb/8e/c4e73cd40bf54b877d4a8a79d722cfb7c098b2d4a19eb51f6d8e5cbea720/memoclass-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ce9bc703de7e16ced3efa934f1d35b3", "sha256": "af81f8776d527654ae45c60e00d571f9f611ccec789ab19f46536707e6dce16a"}, "downloads": -1, "filename": "memoclass-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4ce9bc703de7e16ced3efa934f1d35b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9944, "upload_time": "2020-01-22T18:18:41", "upload_time_iso_8601": "2020-01-22T18:18:41.278345Z", "url": "https://files.pythonhosted.org/packages/03/41/8dfc32c11be8f637222b0bce6baef5bcc83c9588966e3b48f51fa49f9189/memoclass-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "283a453cadc596fb4dffe0b842c9aab3", "sha256": "2d0c8fc23abe1cf559ddbac86a974c0c3a96b383312bdaf612d8bc311e2760bf"}, "downloads": -1, "filename": "memoclass-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "283a453cadc596fb4dffe0b842c9aab3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9504, "upload_time": "2020-01-22T18:18:39", "upload_time_iso_8601": "2020-01-22T18:18:39.765872Z", "url": "https://files.pythonhosted.org/packages/bb/8e/c4e73cd40bf54b877d4a8a79d722cfb7c098b2d4a19eb51f6d8e5cbea720/memoclass-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ce9bc703de7e16ced3efa934f1d35b3", "sha256": "af81f8776d527654ae45c60e00d571f9f611ccec789ab19f46536707e6dce16a"}, "downloads": -1, "filename": "memoclass-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4ce9bc703de7e16ced3efa934f1d35b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9944, "upload_time": "2020-01-22T18:18:41", "upload_time_iso_8601": "2020-01-22T18:18:41.278345Z", "url": "https://files.pythonhosted.org/packages/03/41/8dfc32c11be8f637222b0bce6baef5bcc83c9588966e3b48f51fa49f9189/memoclass-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:20 2020"}