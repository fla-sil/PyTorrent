{"info": {"author": "Andrey Antukh", "author_email": "niwi@niwi.be", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "=====================\ndjorm-ext-expressions\n=====================\n\nDjango by default, provides a wide range of field types and generic lookups for queries. This in many cases is more than enough. But there are cases where you need to use types defined for yourself and search operators that are not defined in django lookups and another important case is to make searches requiring the execution of some function in WHERE clause.\n\nIn django, for these last two cases, it requires writing SQL statements. ``djorm-ext-expressions``  introduces the method ``manager.where()`` and some class'es (SqlExpression, SqlFunction, AND, OR, ...) to facilite sql construction for advanced cases.\n\nSimple usage\n------------\n\nImagine some django model with postgresql integer array field. You need to find objects in the field containing a set of group numbers.\n\n**NOTE**: array field is part of django orm extensions package and is located on ``djorm-ext-pgarray`` submodule.\n\n**Example model definition**\n\n.. code-block:: python\n\n    from django.db import models\n    from djorm_expressions.models import ExpressionManager\n    from .somefiels import ArrayField\n\n    class Register(models.Model):\n        name = models.CharField(max_length=200)\n        points = ArrayField(dbtype=\"int\")\n\n        objects = ExpressionManager()\n\n\nWith this model definition, we can do this searches:\n\n.. code-block:: python\n\n    from djorm_expressions.base import SqlExpression, AND, OR\n\n    # search all register items that points field contains [2,3]\n\n    qs = Register.manager.where(\n        SqlExpression(\"points\", \"@>\", [2,3])\n    )\n\n    # search all register items that points fields contains [2,3] or [5,6]\n\n    expression = OR(\n        SqlExpression(\"points\", \"@>\", [2,3]),\n        SqlExpression(\"points\", \"@>\", [5,6]),\n    )\n\n    qs = Register.objects.where(expression)\n\n\nAlso, we can use functions to construct a expression:\n\n.. code-block:: python\n\n    from djorm_expressions.base import SqlFunction\n\n    class BitLength(SqlFunction):\n        sql_function = \"bit_length\"\n\n    # search all registers items that bit_length(name) > 20.\n    qs = Register.objects.where(\n        SqlExpression(BitLength(\"name\"), \">\", 20)\n    )\n\n\nI finally can redefine the behavior \"SqlExpression\" and make it more \"object oriented\":\n\n.. code-block:: python\n\n    class ArrayExpression(object):\n        def __init__(self, field):\n            self.field = field\n\n        def contains(self, value):\n            return SqlExpression(self.field, \"@>\", value)\n\n        def overlap(self, value):\n            return SqlExpression(self.field, \"&&\", value)\n\n    # search all register items that points field contains [2,3]\n    qs = Register.objects.where(\n        ArrayExpression(\"points\").contains([2,3])\n    )\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/niwibe/djorm-ext-expressions", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "djorm-ext-expressions", "package_url": "https://pypi.org/project/djorm-ext-expressions/", "platform": "OS Independent", "project_url": "https://pypi.org/project/djorm-ext-expressions/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/niwibe/djorm-ext-expressions"}, "release_url": "https://pypi.org/project/djorm-ext-expressions/0.6/", "requires_dist": null, "requires_python": null, "summary": "Facility of complex sql expressions for Django orm.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django by default, provides a wide range of field types and generic lookups for queries. This in many cases is more than enough. But there are cases where you need to use types defined for yourself and search operators that are not defined in django lookups and another important case is to make searches requiring the execution of some function in WHERE clause.</p>\n<p>In django, for these last two cases, it requires writing SQL statements. <tt><span class=\"pre\">djorm-ext-expressions</span></tt>  introduces the method <tt>manager.where()</tt> and some class\u2019es (SqlExpression, SqlFunction, AND, OR, \u2026) to facilite sql construction for advanced cases.</p>\n<div id=\"simple-usage\">\n<h2>Simple usage</h2>\n<p>Imagine some django model with postgresql integer array field. You need to find objects in the field containing a set of group numbers.</p>\n<p><strong>NOTE</strong>: array field is part of django orm extensions package and is located on <tt><span class=\"pre\">djorm-ext-pgarray</span></tt> submodule.</p>\n<p><strong>Example model definition</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djorm_expressions.models</span> <span class=\"kn\">import</span> <span class=\"n\">ExpressionManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.somefiels</span> <span class=\"kn\">import</span> <span class=\"n\">ArrayField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Register</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">ArrayField</span><span class=\"p\">(</span><span class=\"n\">dbtype</span><span class=\"o\">=</span><span class=\"s2\">\"int\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">ExpressionManager</span><span class=\"p\">()</span>\n</pre>\n<p>With this model definition, we can do this searches:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djorm_expressions.base</span> <span class=\"kn\">import</span> <span class=\"n\">SqlExpression</span><span class=\"p\">,</span> <span class=\"n\">AND</span><span class=\"p\">,</span> <span class=\"n\">OR</span>\n\n<span class=\"c1\"># search all register items that points field contains [2,3]</span>\n\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n    <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"s2\">\"points\"</span><span class=\"p\">,</span> <span class=\"s2\">\"@&gt;\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># search all register items that points fields contains [2,3] or [5,6]</span>\n\n<span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">OR</span><span class=\"p\">(</span>\n    <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"s2\">\"points\"</span><span class=\"p\">,</span> <span class=\"s2\">\"@&gt;\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span>\n    <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"s2\">\"points\"</span><span class=\"p\">,</span> <span class=\"s2\">\"@&gt;\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n</pre>\n<p>Also, we can use functions to construct a expression:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djorm_expressions.base</span> <span class=\"kn\">import</span> <span class=\"n\">SqlFunction</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BitLength</span><span class=\"p\">(</span><span class=\"n\">SqlFunction</span><span class=\"p\">):</span>\n    <span class=\"n\">sql_function</span> <span class=\"o\">=</span> <span class=\"s2\">\"bit_length\"</span>\n\n<span class=\"c1\"># search all registers items that bit_length(name) &gt; 20.</span>\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n    <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"n\">BitLength</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">),</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>I finally can redefine the behavior \u201cSqlExpression\u201d and make it more \u201cobject oriented\u201d:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ArrayExpression</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">field</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s2\">\"@&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">overlap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">SqlExpression</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s2\">\"&amp;&amp;\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># search all register items that points field contains [2,3]</span>\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n    <span class=\"n\">ArrayExpression</span><span class=\"p\">(</span><span class=\"s2\">\"points\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 913826, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "69dfb6f54f3b9c54bce6c279af432405", "sha256": "330af0660a6ece3be4b8a2c33380015fbdf01c993b88004799a5c9659b05d3ef"}, "downloads": -1, "filename": "djorm-ext-expressions-0.4.tar.gz", "has_sig": false, "md5_digest": "69dfb6f54f3b9c54bce6c279af432405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4465, "upload_time": "2012-10-17T07:21:03", "upload_time_iso_8601": "2012-10-17T07:21:03.636268Z", "url": "https://files.pythonhosted.org/packages/d9/52/f2e126094cf1aa15d4a419b5365aaa1c6ca36e307bba7d3864a533d87bc4/djorm-ext-expressions-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "8bfee210c4c9411e5d2666b6b88b3cea", "sha256": "8436b85cf55c4891442912deae80078b4a06df5f3e4c86ad4e4357777a5658f4"}, "downloads": -1, "filename": "djorm-ext-expressions-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8bfee210c4c9411e5d2666b6b88b3cea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4513, "upload_time": "2012-11-19T15:49:07", "upload_time_iso_8601": "2012-11-19T15:49:07.353491Z", "url": "https://files.pythonhosted.org/packages/ad/60/0614dca0bace5ad19a262aca7d2eaa95edbe85593876da89eb5de877cd0b/djorm-ext-expressions-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "db57f7301d1d137cd5a779f4aa564fdd", "sha256": "6c5f3c2f60394eaf1272d2ee95d6482d0b087d4123cf12cee183b941e16df370"}, "downloads": -1, "filename": "djorm-ext-expressions-0.4.2.tar.gz", "has_sig": false, "md5_digest": "db57f7301d1d137cd5a779f4aa564fdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4768, "upload_time": "2013-02-12T08:56:37", "upload_time_iso_8601": "2013-02-12T08:56:37.303586Z", "url": "https://files.pythonhosted.org/packages/20/8e/dd50fe099feaf7d932fba9bda20a279e37f57f3e69902f84ff3359154a61/djorm-ext-expressions-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "486019de83b4a9e8e43ba3919455a6aa", "sha256": "ed5e465d615876280080cb87b9e18fe09dea850b2372d25a9f5dd475e228cf8d"}, "downloads": -1, "filename": "djorm-ext-expressions-0.4.3.tar.gz", "has_sig": false, "md5_digest": "486019de83b4a9e8e43ba3919455a6aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4780, "upload_time": "2013-03-08T20:04:26", "upload_time_iso_8601": "2013-03-08T20:04:26.035378Z", "url": "https://files.pythonhosted.org/packages/64/1d/7a7f575b31a80a6d497088f823e5cd5423f90e30c62161bb7bd751e2c388/djorm-ext-expressions-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "2a3b2084a21c07f80f8dbda231b78f4c", "sha256": "9ac2bbdeec6976120ffbcd8a107dedd851ef7d2b3e3d945273c4a75e416728a9"}, "downloads": -1, "filename": "djorm-ext-expressions-0.4.4.tar.gz", "has_sig": false, "md5_digest": "2a3b2084a21c07f80f8dbda231b78f4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5676, "upload_time": "2013-06-06T19:57:16", "upload_time_iso_8601": "2013-06-06T19:57:16.697877Z", "url": "https://files.pythonhosted.org/packages/0d/e2/0110e316b84b0acc137f47e11cd088bfe6bf23919c6cf00a1a63d33b7a20/djorm-ext-expressions-0.4.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "1b45dd3a3b61abbff04e0cb260e08580", "sha256": "006e4a01039924deaa05bdb2b55f6f19d9ac8e038154f3be937918dee92cfaf7"}, "downloads": -1, "filename": "djorm-ext-expressions-0.5.tar.gz", "has_sig": false, "md5_digest": "1b45dd3a3b61abbff04e0cb260e08580", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5820, "upload_time": "2013-07-27T10:41:33", "upload_time_iso_8601": "2013-07-27T10:41:33.195338Z", "url": "https://files.pythonhosted.org/packages/0b/07/17593254fedcf8b371f1d641d43806bf44c54477f90a35d0096ba916d6c6/djorm-ext-expressions-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "fe716b3d1ec8c1e68435120c4012bb65", "sha256": "f0d9e4d297b5f7d9bd5c63d6f9b636f8ebd913a5254c12fcdf64239cb358f7ae"}, "downloads": -1, "filename": "djorm-ext-expressions-0.6.tar.gz", "has_sig": false, "md5_digest": "fe716b3d1ec8c1e68435120c4012bb65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5839, "upload_time": "2013-11-07T20:02:26", "upload_time_iso_8601": "2013-11-07T20:02:26.336748Z", "url": "https://files.pythonhosted.org/packages/ca/56/e5800128bf9dae3336a48db16e3880a41a1c006d837db4a63106136ab950/djorm-ext-expressions-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe716b3d1ec8c1e68435120c4012bb65", "sha256": "f0d9e4d297b5f7d9bd5c63d6f9b636f8ebd913a5254c12fcdf64239cb358f7ae"}, "downloads": -1, "filename": "djorm-ext-expressions-0.6.tar.gz", "has_sig": false, "md5_digest": "fe716b3d1ec8c1e68435120c4012bb65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5839, "upload_time": "2013-11-07T20:02:26", "upload_time_iso_8601": "2013-11-07T20:02:26.336748Z", "url": "https://files.pythonhosted.org/packages/ca/56/e5800128bf9dae3336a48db16e3880a41a1c006d837db4a63106136ab950/djorm-ext-expressions-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:30 2020"}