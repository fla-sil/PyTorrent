{"info": {"author": "Todd Salazar", "author_email": "unixsal@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# cheesefactory-database\n\n-----------------\n\n##### A wrapper for psycopg2.\n[![PyPI Latest Release](https://img.shields.io/pypi/v/cheesefactory-database.svg)](https://pypi.org/project/cheesefactory-database/)\n[![PyPI status](https://img.shields.io/pypi/status/cheesefactory-database.svg)](https://pypi.python.org/pypi/cheesefactory-database/)\n[![PyPI download month](https://img.shields.io/pypi/dm/cheesefactory-database.svg)](https://pypi.python.org/pypi/cheesefactory-database/)\n[![PyPI download week](https://img.shields.io/pypi/dw/cheesefactory-database.svg)](https://pypi.python.org/pypi/cheesefactory-database/)\n[![PyPI download day](https://img.shields.io/pypi/dd/cheesefactory-database.svg)](https://pypi.python.org/pypi/cheesefactory-database/)\n\n## Main Features\n\n* Built on psycopg2.\n* Pandas dataframe support.\n* Test table existence.\n* Test field existence.\n\n**Note:** _This package is still in beta status. As such, future versions may not be backwards compatible and features may change._\n\n## Installation\nThe source is hosted at https://bitbucket.org/hellsgrannies/cheesefactory-database\n\n\n```sh\npip install cheesefactory-database\n```\n\n## Dependencies\n\n* [psycopg2](https://www.psycopg.org/)\n  \n## License\n\n## Examples\n\n**Connect to the remote PostgreSQL server and execute a query**\n\n```python\nfrom cheesefactory_database.postgresql import CfPostgresql\n\ndb = CfPostgresql(host='myhostname', user='myusername', password='mypassword', database='mydatabase')\n```\n\nArgs:\n* _host_ (str): PostgreSQL server hostname/IP. Default: 127.0.0.1\n* _port_ (str): PostgreSQL server port. Default: 5432\n* _user_ (str): Username for authentication.\n* _password_ (str): Password for authentication.\n* _database_ (str): Database for connection\n* _autocommit_ (bool): Use autocommit on changes? Default: False\n* _dictionary_cursor_ (bool): Return the results as a dictionary? Default: False\n* _encoding_ (str): Database client encoding (\"utf8\", \"latin1\", \"usascii\"). Default: utf8\n\nReturns:\n* (CfPostgresql): An instance of the database connection.\n\n**Execute a query**\n\n```python\nresults = db.execute(\"SELECT first_name, last_name FROM person WHERE last_name = 'Smith'\")\n```\nArgs:\n* _query_ (str): SQL query to execute.\n* _dataframe_ (bool): Output the results to a pandas.Dataframe?\n* _fetchall_ (bool): Perform a fetchall() and return the results?\n\nReturns:\n* If _fetchall_=False, None is returned.\n* If _dataframe_=True, a pandas.Dataframe is returned.\n\n**Check connection status**\n\n```python\nstatus = db.connection_status()\n```\n\nReturns:\n* (str): Connection status: \"OK\" or \"Error\"\n\n**Check database existence**\n\n```python\nstatus = db.database_exists(database_name='my_database')\n```\n\nArgs:\n* _database_name_ (str): Name of the database to search for\n\nReturns:\n* (bool): True, if database exists. False, if not.\n\n**Check schema existence**\n\n```python\nstatus = db.schema_exists(schema_name='my_schema')\n```\n\nArgs:\n* _schema_name_ (str): Name of the schema to search for.\n\nReturns:\n* (bool): True, if schema exists. False, if not.\n\n**Check table existence**\n\n```python\nstatus = db.table_exists(table_path='my_schema.my_table')\n```\n\nArgs:\n* _table_path_ (str): Table name in the form &lt;schema>.&lt;table>\n\nReturns:\n* (bool): True, if table exists. False, if not.\n\n**Check field existence**\n\n```python\nstatus = db.fields_exist(table_path='my_schema.my_table', table_fields=['first_name', 'last_name'])\n```\n\nArgs:\n* _table_path_ (str): Table name in the form &lt;schema>.&lt;table>\n* _table_fields_ (str): A list of fields to check.\n\nReturns:\n* (bool): True, if all fields are present in the table. False, if not.\n\n**Get a table's primary keys**\n\n```python\nprimary_keys = db.get_primary_keys(table_path='my_schema.my_table')\n```\n\nArgs:\n* _table_path_ (str): Table name in the form &lt;schema>.&lt;table>\n\nReturns:\n* (List): A list of primary keys.\n\n**Quote PostgreSQL reserved words in a list**\n\n```python\nquoted_word_list = CfPostgresql.quote_reserved_words(word_list)\n```\n\nArgs:\n* _word_list_ (List): A list of words to check\n\nReturnes:\n* (List): _word_list_ with all PostgreSQL reserved words surrounded in double-quotes.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/hellsgrannies/cheesefactory-database", "keywords": "cheesefactory database postgresql postgres development pandas dataframe", "license": "", "maintainer": "", "maintainer_email": "", "name": "cheesefactory-database", "package_url": "https://pypi.org/project/cheesefactory-database/", "platform": "", "project_url": "https://pypi.org/project/cheesefactory-database/", "project_urls": {"Homepage": "https://bitbucket.org/hellsgrannies/cheesefactory-database"}, "release_url": "https://pypi.org/project/cheesefactory-database/0.9/", "requires_dist": null, "requires_python": "", "summary": "Wrappers for PostgreSQL interaction using dataframes or dictionaries.", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cheesefactory-database</h1>\n<hr>\n<h5>A wrapper for psycopg2.</h5>\n<p><a href=\"https://pypi.org/project/cheesefactory-database/\" rel=\"nofollow\"><img alt=\"PyPI Latest Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4eeee5941558ded4f08e512959f1a78010f3c84/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636865657365666163746f72792d64617461626173652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cheesefactory-database/\" rel=\"nofollow\"><img alt=\"PyPI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37c1b25fed90b08c36e082f4dcfe89d61192a9e5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f636865657365666163746f72792d64617461626173652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cheesefactory-database/\" rel=\"nofollow\"><img alt=\"PyPI download month\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f94d397683405ed156dd1e592626bf5612085449/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f636865657365666163746f72792d64617461626173652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cheesefactory-database/\" rel=\"nofollow\"><img alt=\"PyPI download week\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/437ad122cb3dbab9e189f2a125e225b346ad46e6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64772f636865657365666163746f72792d64617461626173652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cheesefactory-database/\" rel=\"nofollow\"><img alt=\"PyPI download day\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4399c8d92c8632f3ee3c850eaced6564f2f3417e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f636865657365666163746f72792d64617461626173652e737667\"></a></p>\n<h2>Main Features</h2>\n<ul>\n<li>Built on psycopg2.</li>\n<li>Pandas dataframe support.</li>\n<li>Test table existence.</li>\n<li>Test field existence.</li>\n</ul>\n<p><strong>Note:</strong> <em>This package is still in beta status. As such, future versions may not be backwards compatible and features may change.</em></p>\n<h2>Installation</h2>\n<p>The source is hosted at <a href=\"https://bitbucket.org/hellsgrannies/cheesefactory-database\" rel=\"nofollow\">https://bitbucket.org/hellsgrannies/cheesefactory-database</a></p>\n<pre>pip install cheesefactory-database\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://www.psycopg.org/\" rel=\"nofollow\">psycopg2</a></li>\n</ul>\n<h2>License</h2>\n<h2>Examples</h2>\n<p><strong>Connect to the remote PostgreSQL server and execute a query</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cheesefactory_database.postgresql</span> <span class=\"kn\">import</span> <span class=\"n\">CfPostgresql</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">CfPostgresql</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'myhostname'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'myusername'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'mypassword'</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'mydatabase'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>host</em> (str): PostgreSQL server hostname/IP. Default: 127.0.0.1</li>\n<li><em>port</em> (str): PostgreSQL server port. Default: 5432</li>\n<li><em>user</em> (str): Username for authentication.</li>\n<li><em>password</em> (str): Password for authentication.</li>\n<li><em>database</em> (str): Database for connection</li>\n<li><em>autocommit</em> (bool): Use autocommit on changes? Default: False</li>\n<li><em>dictionary_cursor</em> (bool): Return the results as a dictionary? Default: False</li>\n<li><em>encoding</em> (str): Database client encoding (\"utf8\", \"latin1\", \"usascii\"). Default: utf8</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(CfPostgresql): An instance of the database connection.</li>\n</ul>\n<p><strong>Execute a query</strong></p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT first_name, last_name FROM person WHERE last_name = 'Smith'\"</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>query</em> (str): SQL query to execute.</li>\n<li><em>dataframe</em> (bool): Output the results to a pandas.Dataframe?</li>\n<li><em>fetchall</em> (bool): Perform a fetchall() and return the results?</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>If <em>fetchall</em>=False, None is returned.</li>\n<li>If <em>dataframe</em>=True, a pandas.Dataframe is returned.</li>\n</ul>\n<p><strong>Check connection status</strong></p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connection_status</span><span class=\"p\">()</span>\n</pre>\n<p>Returns:</p>\n<ul>\n<li>(str): Connection status: \"OK\" or \"Error\"</li>\n</ul>\n<p><strong>Check database existence</strong></p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">database_exists</span><span class=\"p\">(</span><span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"s1\">'my_database'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>database_name</em> (str): Name of the database to search for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(bool): True, if database exists. False, if not.</li>\n</ul>\n<p><strong>Check schema existence</strong></p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">schema_exists</span><span class=\"p\">(</span><span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s1\">'my_schema'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>schema_name</em> (str): Name of the schema to search for.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(bool): True, if schema exists. False, if not.</li>\n</ul>\n<p><strong>Check table existence</strong></p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table_exists</span><span class=\"p\">(</span><span class=\"n\">table_path</span><span class=\"o\">=</span><span class=\"s1\">'my_schema.my_table'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>table_path</em> (str): Table name in the form &lt;schema&gt;.&lt;table&gt;</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(bool): True, if table exists. False, if not.</li>\n</ul>\n<p><strong>Check field existence</strong></p>\n<pre><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">fields_exist</span><span class=\"p\">(</span><span class=\"n\">table_path</span><span class=\"o\">=</span><span class=\"s1\">'my_schema.my_table'</span><span class=\"p\">,</span> <span class=\"n\">table_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'first_name'</span><span class=\"p\">,</span> <span class=\"s1\">'last_name'</span><span class=\"p\">])</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>table_path</em> (str): Table name in the form &lt;schema&gt;.&lt;table&gt;</li>\n<li><em>table_fields</em> (str): A list of fields to check.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(bool): True, if all fields are present in the table. False, if not.</li>\n</ul>\n<p><strong>Get a table's primary keys</strong></p>\n<pre><span class=\"n\">primary_keys</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">get_primary_keys</span><span class=\"p\">(</span><span class=\"n\">table_path</span><span class=\"o\">=</span><span class=\"s1\">'my_schema.my_table'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>table_path</em> (str): Table name in the form &lt;schema&gt;.&lt;table&gt;</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>(List): A list of primary keys.</li>\n</ul>\n<p><strong>Quote PostgreSQL reserved words in a list</strong></p>\n<pre><span class=\"n\">quoted_word_list</span> <span class=\"o\">=</span> <span class=\"n\">CfPostgresql</span><span class=\"o\">.</span><span class=\"n\">quote_reserved_words</span><span class=\"p\">(</span><span class=\"n\">word_list</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><em>word_list</em> (List): A list of words to check</li>\n</ul>\n<p>Returnes:</p>\n<ul>\n<li>(List): <em>word_list</em> with all PostgreSQL reserved words surrounded in double-quotes.</li>\n</ul>\n\n          </div>"}, "last_serial": 7113584, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "31e2f633f950639d743762e170624291", "sha256": "0aae4b0acda137a7b1d770194074ec0b613ce0c9d3e5d6c8e169169848efd307"}, "downloads": -1, "filename": "cheesefactory-database-0.1.tar.gz", "has_sig": false, "md5_digest": "31e2f633f950639d743762e170624291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2018-09-05T18:58:51", "upload_time_iso_8601": "2018-09-05T18:58:51.101475Z", "url": "https://files.pythonhosted.org/packages/ae/e6/54eeff8636d0b541936aa7cbfac1f8a6b967d24d698e5e9b43d6030dc6bd/cheesefactory-database-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "17295c55b1462719231a320b7c46e328", "sha256": "1272cab9a04feba32c534b8fbc4fec28e15ed00329b26a08a4e1e85e050bbaae"}, "downloads": -1, "filename": "cheesefactory-database-0.2.tar.gz", "has_sig": false, "md5_digest": "17295c55b1462719231a320b7c46e328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6804, "upload_time": "2020-03-24T23:30:54", "upload_time_iso_8601": "2020-03-24T23:30:54.478938Z", "url": "https://files.pythonhosted.org/packages/a7/59/6a0de13d9fdc23ac9c1ff7e4f4fd9e53401ea65eeb7ead7c14b9f43ee1bf/cheesefactory-database-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "afc7284942bb7dfee090887b5fbc3831", "sha256": "e1b0ae5ca12b92d4cc7dd4e7f016b10edfd63d0572be15fbc4edc352a306d417"}, "downloads": -1, "filename": "cheesefactory-database-0.3.tar.gz", "has_sig": false, "md5_digest": "afc7284942bb7dfee090887b5fbc3831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6725, "upload_time": "2020-03-25T01:06:17", "upload_time_iso_8601": "2020-03-25T01:06:17.785276Z", "url": "https://files.pythonhosted.org/packages/3c/71/30eb04012088b42bf60da882c4744ad3bd81315e0a6139e1fae791870d7a/cheesefactory-database-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "31bc558028483f517c25b7e10a6332bc", "sha256": "357b1882e8f798f447ccea9cdc35426cf585c136e62209d565079aca39fc4170"}, "downloads": -1, "filename": "cheesefactory-database-0.4.tar.gz", "has_sig": false, "md5_digest": "31bc558028483f517c25b7e10a6332bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6868, "upload_time": "2020-03-25T17:54:18", "upload_time_iso_8601": "2020-03-25T17:54:18.284763Z", "url": "https://files.pythonhosted.org/packages/8b/5f/f198920de1844c2d03617eac30acc5794852dc2f9a89df7f9eada4e1fe64/cheesefactory-database-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "f1c664065f6ddd4973a092e7ac949bcd", "sha256": "9050967353db97f18c233a821f187118c54fdea92b1218fd0806b3887b0b80b4"}, "downloads": -1, "filename": "cheesefactory-database-0.5.tar.gz", "has_sig": false, "md5_digest": "f1c664065f6ddd4973a092e7ac949bcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6882, "upload_time": "2020-04-01T23:54:31", "upload_time_iso_8601": "2020-04-01T23:54:31.400287Z", "url": "https://files.pythonhosted.org/packages/36/64/88ec86dee75755f20600d028106322e9ed10adfb21bf273b74f48d2dc029/cheesefactory-database-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "1ac5d443537e4b2527a96c30084d16d8", "sha256": "4df088ae862f14b62124795b71a8524e9a0cf3326e82220a279962df13504d46"}, "downloads": -1, "filename": "cheesefactory-database-0.6.tar.gz", "has_sig": false, "md5_digest": "1ac5d443537e4b2527a96c30084d16d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7234, "upload_time": "2020-04-08T18:00:32", "upload_time_iso_8601": "2020-04-08T18:00:32.022364Z", "url": "https://files.pythonhosted.org/packages/e9/45/610e3d1d8003d879c203d061cbe846d248fc2ec23efa0557ea0d6bd56a02/cheesefactory-database-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "962daf059c7c45c273fd87e13f4a85a8", "sha256": "e664bb028b33509c319bb3d0a09c918ca9c16c6ba89564aa848d43e833729f28"}, "downloads": -1, "filename": "cheesefactory-database-0.7.tar.gz", "has_sig": false, "md5_digest": "962daf059c7c45c273fd87e13f4a85a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7223, "upload_time": "2020-04-08T18:10:24", "upload_time_iso_8601": "2020-04-08T18:10:24.869476Z", "url": "https://files.pythonhosted.org/packages/25/26/437e24824f0e68b6298d4fec13d8b409c2e0e04468da413bbccc8dd7986a/cheesefactory-database-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "6f816dacd2545555270cbfd76441811e", "sha256": "c3c2b9cd9150c8895583e4d25bf9b9fe825568f4a9c6b514da868210c51391e7"}, "downloads": -1, "filename": "cheesefactory-database-0.8.tar.gz", "has_sig": false, "md5_digest": "6f816dacd2545555270cbfd76441811e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7254, "upload_time": "2020-04-19T01:15:18", "upload_time_iso_8601": "2020-04-19T01:15:18.263431Z", "url": "https://files.pythonhosted.org/packages/c1/02/1293aa91a574c9924e838301eaf55ecdfd45ecf2d6f21c8c634c19b7b2c2/cheesefactory-database-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "20148cf6190a90405efabb143395f034", "sha256": "925d4d19ea8d33d4c53d988f81b9d928f8cc82c5744b82a826edb1088c52c11d"}, "downloads": -1, "filename": "cheesefactory-database-0.9.tar.gz", "has_sig": false, "md5_digest": "20148cf6190a90405efabb143395f034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9217, "upload_time": "2020-04-27T17:44:34", "upload_time_iso_8601": "2020-04-27T17:44:34.903930Z", "url": "https://files.pythonhosted.org/packages/71/b6/5252918172efac97409af274d31dc034a92a28878caaac03ee4045491ee8/cheesefactory-database-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "20148cf6190a90405efabb143395f034", "sha256": "925d4d19ea8d33d4c53d988f81b9d928f8cc82c5744b82a826edb1088c52c11d"}, "downloads": -1, "filename": "cheesefactory-database-0.9.tar.gz", "has_sig": false, "md5_digest": "20148cf6190a90405efabb143395f034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9217, "upload_time": "2020-04-27T17:44:34", "upload_time_iso_8601": "2020-04-27T17:44:34.903930Z", "url": "https://files.pythonhosted.org/packages/71/b6/5252918172efac97409af274d31dc034a92a28878caaac03ee4045491ee8/cheesefactory-database-0.9.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:42 2020"}