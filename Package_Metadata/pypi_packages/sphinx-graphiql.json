{"info": {"author": "Rikin K", "author_email": "rikin@hasura.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "# Sphinx GraphiQL\n\nThis is a GraphiQL plugin for Sphinx that lets you make GraphQL queries from your docs.\n\nWe built this for documenting [Hasura GraphQL engine](https://hasura.io/)'s API. Check it out in action [here](https://docs.hasura.io/1.0/graphql/manual/queries/simple-object-queries.html). *(Note: In our docs we have added custom css overrides to make GraphiQL look as per our needs)*\n\n![example](https://raw.githubusercontent.com/hasura/sphinx-graphiql/master/assets/sphinx-graphiql-example.png)\n\n\n## Usage\n\nTo insert a GraphiQL component inside your `.rst` doc, use the declarative:\n\n```\n.. graphiql::\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n```\n\n### View only\n\nIf you want to make GraphiQL view-only (ie: disable execution), you just have to add another option `:view_only:`. For example:\n\n```\n.. graphiql::\n   :view_only:\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n```\n\n### Show a dummy response\n\nSometimes you will want to show the response along with the query without executing it. You can do that by adding a `:response:` option.\n\n```\n.. graphiql::\n   :view_only:\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n   :response:\n      {\n         \"data\": {\n            \"author\": [\n               {\n                  \"id\": 1\n                  \"name\": \"Justin\",\n               },\n               {\n                  \"id\": 2\n                  \"name\": \"Beltran\",\n               },\n               {\n                  \"id\": 3\n                  \"name\": \"Sidney\",\n               }\n           ]\n        }\n     }\n```\n\n### Custom endpoint\n\nBy default, the GraphQL endpoint is picked up from an environment variable as described [here](#default-graphql-endpoint). \nIn case you want to explicitly set an endpoint for a query, you can do so by adding an `:endpoint:` option.\n\n```\n.. graphiql::\n   :endpoint: http://localhost:8080/v1/graphql\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n```\n\n## Installation\n\n### Step 1: Install the plugin\n\n```bash\n$ pip install sphinx_graphiql\n```\n\n### Step 2: Mention the plugin as an extension in `conf.py`\n\nYou might be using other extensions in your docs. Append `sphinx_graphiql` to the list of extensions.\n\n```\nextensions.append('sphinx_graphiql')\n```\n\n### Step 3: Add the required scripts to your template HTML\n\nAdd the following tags inside the `<head></head>` of your template html file (typically `layout.html`).\n\n```html\n\n<!-- GraphiQL -->\n<script src=\"//cdn.jsdelivr.net/react/15.4.2/react.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/react/15.4.2/react-dom.min.js\"></script>\n<script src=\"https://rawgit.com/hasura/sphinx_graphiql/master/static/graphiql/graphiql.min.js\"></script>\n<link href=\"https://rawgit.com/hasura/sphinx_graphiql/master/static/graphiql/graphiql.css\" rel=\"stylesheet\">\n<link href=\"https://rawgit.com/hasura/sphinx_graphiql/master/static/styles.css\" rel=\"stylesheet\">\n<script type=\"text/javascript\">\n  // graphql query fetcher\n  const graphQLFetcher = function(endpoint) {\n    endpoint = endpoint || \"{{ GRAPHIQL_DEFAULT_ENDPOINT }}\";\n    return function(graphQLParams) {\n      const params = {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphQLParams),\n        credentials: 'include'\n      };\n      return fetch(endpoint, params)\n        .then(function (response) {\n          return response.text();\n        })\n        .then(function (responseBody) {\n          try {\n            return JSON.parse(responseBody);\n          } catch (error) {\n            return responseBody;\n          }\n        });\n    }\n  };\n\n  // create GraphiQL components and embed into HTML\n  const setupGraphiQL = function() {\n    if (typeof(React) === 'undefined' || typeof(ReactDOM) === 'undefined' || typeof(GraphiQL) === 'undefined') {\n      return;\n    }\n\n    const targets = document.getElementsByClassName('graphiql');\n    for (let i = 0; i < targets.length; i++) {\n      const target = targets[i];\n      const endpoint = target.getElementsByClassName(\"endpoint\")[0].innerHTML.trim();\n      const query = target.getElementsByClassName(\"query\")[0].innerHTML.trim();\n      const response = target.getElementsByClassName(\"response\")[0].innerHTML.trim();\n      const graphiQLElement = React.createElement(GraphiQL, {\n        fetcher: graphQLFetcher(endpoint),\n        schema: null, // TODO: Pass undefined to fetch schema via introspection\n        query: query,\n        response: response\n      });\n      ReactDOM.render(graphiQLElement, target);\n    }\n  };\n\n  // if graphiql elements present, setup graphiql\n  if (document.getElementsByClassName('graphiql').length > 0) {\n    setupGraphiQL();\n  }\n</script>\n```\n\n> You can find these tags at `static/static.html` of the root directory.\n\n## Configuration\n\n### Default GraphQL Endpoint\n\nYou have to set the GraphQL endpoint as an environment variable in your sphinx configuration file (typically `conf.py` at the root your your project).\n\nFor example:\n\n```python\nGRAPHIQL_DEFAULT_ENDPOINT = \"https://graphql.my-graphql-app.io/v1/graphql\"\n```\n\n### Auto-completion\n\nGraphiQL uses the GraphQL schema to auto complete as you type in queries and mutations.\n\nIf your GraphQL endpoint supports introspection, just pass `undefined` as the schema variable and \nauto-completion will work out of the box.\n\n```js\n\nconst graphiQLElement = React.createElement(GraphiQL, {\n  fetcher: graphQLFetcher(endpoint),\n  schema: undefined, // the schema will be fetched using introspection\n  query: query,\n  response: response\n});\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hasura/sphinx_graphiql", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sphinx-graphiql", "package_url": "https://pypi.org/project/sphinx-graphiql/", "platform": "", "project_url": "https://pypi.org/project/sphinx-graphiql/", "project_urls": {"Homepage": "https://github.com/hasura/sphinx_graphiql"}, "release_url": "https://pypi.org/project/sphinx-graphiql/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Sphinx extension for GraphiQL", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sphinx GraphiQL</h1>\n<p>This is a GraphiQL plugin for Sphinx that lets you make GraphQL queries from your docs.</p>\n<p>We built this for documenting <a href=\"https://hasura.io/\" rel=\"nofollow\">Hasura GraphQL engine</a>'s API. Check it out in action <a href=\"https://docs.hasura.io/1.0/graphql/manual/queries/simple-object-queries.html\" rel=\"nofollow\">here</a>. <em>(Note: In our docs we have added custom css overrides to make GraphiQL look as per our needs)</em></p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e63522cbd34be3488515513be1e4f9dbe9fafc4b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6861737572612f737068696e782d677261706869716c2f6d61737465722f6173736574732f737068696e782d677261706869716c2d6578616d706c652e706e67\"></p>\n<h2>Usage</h2>\n<p>To insert a GraphiQL component inside your <code>.rst</code> doc, use the declarative:</p>\n<pre><code>.. graphiql::\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n</code></pre>\n<h3>View only</h3>\n<p>If you want to make GraphiQL view-only (ie: disable execution), you just have to add another option <code>:view_only:</code>. For example:</p>\n<pre><code>.. graphiql::\n   :view_only:\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n</code></pre>\n<h3>Show a dummy response</h3>\n<p>Sometimes you will want to show the response along with the query without executing it. You can do that by adding a <code>:response:</code> option.</p>\n<pre><code>.. graphiql::\n   :view_only:\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n   :response:\n      {\n         \"data\": {\n            \"author\": [\n               {\n                  \"id\": 1\n                  \"name\": \"Justin\",\n               },\n               {\n                  \"id\": 2\n                  \"name\": \"Beltran\",\n               },\n               {\n                  \"id\": 3\n                  \"name\": \"Sidney\",\n               }\n           ]\n        }\n     }\n</code></pre>\n<h3>Custom endpoint</h3>\n<p>By default, the GraphQL endpoint is picked up from an environment variable as described <a href=\"#default-graphql-endpoint\" rel=\"nofollow\">here</a>.\nIn case you want to explicitly set an endpoint for a query, you can do so by adding an <code>:endpoint:</code> option.</p>\n<pre><code>.. graphiql::\n   :endpoint: http://localhost:8080/v1/graphql\n   :query:\n      query {\n         author {\n            id\n            name\n         }\n      }\n</code></pre>\n<h2>Installation</h2>\n<h3>Step 1: Install the plugin</h3>\n<pre>$ pip install sphinx_graphiql\n</pre>\n<h3>Step 2: Mention the plugin as an extension in <code>conf.py</code></h3>\n<p>You might be using other extensions in your docs. Append <code>sphinx_graphiql</code> to the list of extensions.</p>\n<pre><code>extensions.append('sphinx_graphiql')\n</code></pre>\n<h3>Step 3: Add the required scripts to your template HTML</h3>\n<p>Add the following tags inside the <code>&lt;head&gt;&lt;/head&gt;</code> of your template html file (typically <code>layout.html</code>).</p>\n<pre><span class=\"c\">&lt;!-- GraphiQL --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"//cdn.jsdelivr.net/react/15.4.2/react.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"//cdn.jsdelivr.net/react/15.4.2/react-dom.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/hasura/sphinx_graphiql/master/static/graphiql/graphiql.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/hasura/sphinx_graphiql/master/static/graphiql/graphiql.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/hasura/sphinx_graphiql/master/static/styles.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span><span class=\"p\">&gt;</span>\n  <span class=\"c1\">// graphql query fetcher</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">graphQLFetcher</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"nx\">endpoint</span> <span class=\"o\">||</span> <span class=\"s2\">\"{{ GRAPHIQL_DEFAULT_ENDPOINT }}\"</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">graphQLParams</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">'post'</span><span class=\"p\">,</span>\n        <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'Accept'</span><span class=\"o\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'Content-Type'</span><span class=\"o\">:</span> <span class=\"s1\">'application/json'</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">graphQLParams</span><span class=\"p\">),</span>\n        <span class=\"nx\">credentials</span><span class=\"o\">:</span> <span class=\"s1\">'include'</span>\n      <span class=\"p\">};</span>\n      <span class=\"k\">return</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">();</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">responseBody</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">try</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">responseBody</span><span class=\"p\">);</span>\n          <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">responseBody</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// create GraphiQL components and embed into HTML</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">setupGraphiQL</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"nx\">React</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"nx\">ReactDOM</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span><span class=\"p\">(</span><span class=\"nx\">GraphiQL</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">targets</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">'graphiql'</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">targets</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">target</span> <span class=\"o\">=</span> <span class=\"nx\">targets</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s2\">\"endpoint\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">();</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">query</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s2\">\"query\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">();</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s2\">\"response\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">();</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">graphiQLElement</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">GraphiQL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fetcher</span><span class=\"o\">:</span> <span class=\"nx\">graphQLFetcher</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">),</span>\n        <span class=\"nx\">schema</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"c1\">// TODO: Pass undefined to fetch schema via introspection</span>\n        <span class=\"nx\">query</span><span class=\"o\">:</span> <span class=\"nx\">query</span><span class=\"p\">,</span>\n        <span class=\"nx\">response</span><span class=\"o\">:</span> <span class=\"nx\">response</span>\n      <span class=\"p\">});</span>\n      <span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">graphiQLElement</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// if graphiql elements present, setup graphiql</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"s1\">'graphiql'</span><span class=\"p\">).</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setupGraphiQL</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<blockquote>\n<p>You can find these tags at <code>static/static.html</code> of the root directory.</p>\n</blockquote>\n<h2>Configuration</h2>\n<h3>Default GraphQL Endpoint</h3>\n<p>You have to set the GraphQL endpoint as an environment variable in your sphinx configuration file (typically <code>conf.py</code> at the root your your project).</p>\n<p>For example:</p>\n<pre><span class=\"n\">GRAPHIQL_DEFAULT_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://graphql.my-graphql-app.io/v1/graphql\"</span>\n</pre>\n<h3>Auto-completion</h3>\n<p>GraphiQL uses the GraphQL schema to auto complete as you type in queries and mutations.</p>\n<p>If your GraphQL endpoint supports introspection, just pass <code>undefined</code> as the schema variable and\nauto-completion will work out of the box.</p>\n<pre><span class=\"kr\">const</span> <span class=\"nx\">graphiQLElement</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">GraphiQL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">fetcher</span><span class=\"o\">:</span> <span class=\"nx\">graphQLFetcher</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">),</span>\n  <span class=\"nx\">schema</span><span class=\"o\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"c1\">// the schema will be fetched using introspection</span>\n  <span class=\"nx\">query</span><span class=\"o\">:</span> <span class=\"nx\">query</span><span class=\"p\">,</span>\n  <span class=\"nx\">response</span><span class=\"o\">:</span> <span class=\"nx\">response</span>\n<span class=\"p\">});</span>\n</pre>\n\n          </div>"}, "last_serial": 4108224, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3cd1a591c8ec7e78e5107720ac4221d1", "sha256": "89c8c070bfa03da3bd84b3076579a5d4e48810c9a4e15f324ae2e86fb74ff433"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3cd1a591c8ec7e78e5107720ac4221d1", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6778, "upload_time": "2018-06-22T12:53:08", "upload_time_iso_8601": "2018-06-22T12:53:08.801566Z", "url": "https://files.pythonhosted.org/packages/2d/5d/4c355aa6d3096e4a11e729f11f0599b9dc4f6070b81d56562b642b085456/sphinx_graphiql-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6012cc6e480b61d36d2a6a5bc44aa83", "sha256": "f87df011faed8174c9c8d91023bb1981edf2e53110f85f0d46918c9e54048b2e"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f6012cc6e480b61d36d2a6a5bc44aa83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4036, "upload_time": "2018-06-22T12:53:10", "upload_time_iso_8601": "2018-06-22T12:53:10.283846Z", "url": "https://files.pythonhosted.org/packages/4a/8f/4c1c0c9ff2bb66b73c474f9267086319271f35519800aaa556ca9c2a7ea6/sphinx_graphiql-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d2da465a9fefe1bd2a128cdfa497b7ee", "sha256": "3ced313097a3299799d02a4864d8e1d8750ae4640aca5f58c459c467b67599dc"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d2da465a9fefe1bd2a128cdfa497b7ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4244, "upload_time": "2018-07-27T11:03:59", "upload_time_iso_8601": "2018-07-27T11:03:59.965209Z", "url": "https://files.pythonhosted.org/packages/9d/80/afc15d179d13fbb961b095769dfa7cec8c6a8fee9b4005529893edbdf782/sphinx_graphiql-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b6af377f04c4fd66eb3d9d4e0cf87fe", "sha256": "a0671013d4710863b6451a427d1deeb8dff4ef9ca52f977da2db9cf2afa20503"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7b6af377f04c4fd66eb3d9d4e0cf87fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4150, "upload_time": "2018-07-27T11:04:01", "upload_time_iso_8601": "2018-07-27T11:04:01.480226Z", "url": "https://files.pythonhosted.org/packages/c1/ce/1445162b9f0724af3345dda830eba8445d1a587d4d4c97c848efbc657f22/sphinx_graphiql-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2da465a9fefe1bd2a128cdfa497b7ee", "sha256": "3ced313097a3299799d02a4864d8e1d8750ae4640aca5f58c459c467b67599dc"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d2da465a9fefe1bd2a128cdfa497b7ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4244, "upload_time": "2018-07-27T11:03:59", "upload_time_iso_8601": "2018-07-27T11:03:59.965209Z", "url": "https://files.pythonhosted.org/packages/9d/80/afc15d179d13fbb961b095769dfa7cec8c6a8fee9b4005529893edbdf782/sphinx_graphiql-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b6af377f04c4fd66eb3d9d4e0cf87fe", "sha256": "a0671013d4710863b6451a427d1deeb8dff4ef9ca52f977da2db9cf2afa20503"}, "downloads": -1, "filename": "sphinx_graphiql-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7b6af377f04c4fd66eb3d9d4e0cf87fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4150, "upload_time": "2018-07-27T11:04:01", "upload_time_iso_8601": "2018-07-27T11:04:01.480226Z", "url": "https://files.pythonhosted.org/packages/c1/ce/1445162b9f0724af3345dda830eba8445d1a587d4d4c97c848efbc657f22/sphinx_graphiql-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:05 2020"}