{"info": {"author": "Pavan Mishra", "author_email": "pavanmishra@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Pythonic web.py\n===========\n\nMaking `web.py` request handling more pythonic.\n\n\n```python\n\nimport lessweb\n\ndef hello(ctx, name):\n  if not name:\n    name = 'World'\n  return 'Hello, ' + name + '!'\n\nurls = ('GET', '/(.*)', hello)\n\napp = lessweb.application(urls, locals())\n\n```\n\nAll those magical web.* are now available in context variable.\n\n```python\n\ndef hello(ctx):\n  user_data = ctx.input(color=[])\n  if 'color' not in ctx.cookies and not user_data.color:\n    ctx.setcookies('color', 'blue')\n  return 'Hello, from ' + ctx.env.get('REMOTE_HOST') or ctx.ip\n\nurls = ('GET', '/', hello)\nimport lessweb\napp = lessweb.application(urls, locals())\n\n```\n\nOnly a part of web.py request handling has been masked with `less.web`. Rest of them are required to\ndo what they did already.\n\n```python\nimport web\nimport lessweb\n\ndef redirect_to_referer(ctx):\n\treferer = ctx.env.get('HTTP_REFERER', 'http://webpy.org')\n\traise web.seeother(referer)\n\nurls = ('GET', '/', redirect_to_referer)\napp = lessweb.application(urls, locals())\n```\nIt's implemented as a tiny pythonic wrapper around `web.py` request handling.\n\nThe idea is to allow all request/response manipulation through `ctx`(context) of the handler function rather than module(`web`) level functions. `ctx` is basically `web.ctx` of `web.py`, which is already used to set and access request context. It also wraps other module level functionality of `web.py` such as `header`, `input`, `cookies`, `sessions` to yield a more pythonic interface.\n\nTo use sessions you have to configure session store in config as follows.\n\n```python\nweb.config.sessionstore = web.session.DiskStore('sessions') # for disk store, other stores can be used similarly.\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/lessweb.py_v011/", "keywords": null, "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "lessweb.py", "package_url": "https://pypi.org/project/lessweb.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lessweb.py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/lessweb.py_v011/"}, "release_url": "https://pypi.org/project/lessweb.py/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Masking the web.py magic", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Pythonic web.py<br>===========<br><br>Making `web.py` request handling more pythonic.<br><br><br>```python<br><br>import lessweb<br><br>def hello(ctx, name):<br>  if not name:<br>    name = 'World'<br>  return 'Hello, ' + name + '!'<br><br>urls = ('GET', '/(.*)', hello)<br><br>app = lessweb.application(urls, locals())<br><br>```<br><br>All those magical web.* are now available in context variable.<br><br>```python<br><br>def hello(ctx):<br>  user_data = ctx.input(color=[])<br>  if 'color' not in ctx.cookies and not user_data.color:<br>    ctx.setcookies('color', 'blue')<br>  return 'Hello, from ' + ctx.env.get('REMOTE_HOST') or ctx.ip<br><br>urls = ('GET', '/', hello)<br>import lessweb<br>app = lessweb.application(urls, locals())<br><br>```<br><br>Only a part of web.py request handling has been masked with `less.web`. Rest of them are required to<br>do what they did already.<br><br>```python<br>import web<br>import lessweb<br><br>def redirect_to_referer(ctx):<br>\treferer = ctx.env.get('HTTP_REFERER', 'http://webpy.org')<br>\traise web.seeother(referer)<br><br>urls = ('GET', '/', redirect_to_referer)<br>app = lessweb.application(urls, locals())<br>```<br>It's implemented as a tiny pythonic wrapper around `web.py` request handling.<br><br>The idea is to allow all request/response manipulation through `ctx`(context) of the handler function rather than module(`web`) level functions. `ctx` is basically `web.ctx` of `web.py`, which is already used to set and access request context. It also wraps other module level functionality of `web.py` such as `header`, `input`, `cookies`, `sessions` to yield a more pythonic interface.<br><br>To use sessions you have to configure session store in config as follows.<br><br>```python<br>web.config.sessionstore = web.session.DiskStore('sessions') # for disk store, other stores can be used similarly.<br>```\n          </div>"}, "last_serial": 1245554, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a2f4b7dc36c32214ddf6ec0e0d6be6f2", "sha256": "f4f143d76aa8ffa0188d0111ffcf78437b0623fd14e4bbdf6aed6196802a1382"}, "downloads": -1, "filename": "lessweb.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2f4b7dc36c32214ddf6ec0e0d6be6f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2032, "upload_time": "2014-10-02T10:30:36", "upload_time_iso_8601": "2014-10-02T10:30:36.371081Z", "url": "https://files.pythonhosted.org/packages/37/4a/27711ec1657d602b928916f05c9ca48b4d7a6b17962f8a3d40b2b986fb92/lessweb.py-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2f4b7dc36c32214ddf6ec0e0d6be6f2", "sha256": "f4f143d76aa8ffa0188d0111ffcf78437b0623fd14e4bbdf6aed6196802a1382"}, "downloads": -1, "filename": "lessweb.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2f4b7dc36c32214ddf6ec0e0d6be6f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2032, "upload_time": "2014-10-02T10:30:36", "upload_time_iso_8601": "2014-10-02T10:30:36.371081Z", "url": "https://files.pythonhosted.org/packages/37/4a/27711ec1657d602b928916f05c9ca48b4d7a6b17962f8a3d40b2b986fb92/lessweb.py-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}