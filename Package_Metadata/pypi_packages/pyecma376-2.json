{"info": {"author": "Michael Thies", "author_email": "m.thies@plt.rwth-aachen.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyECMA376-2\n\nA Python implementation of the Open Packaging Conventions (OPC).\n\nECMA 376 Part 2 defines the \u201cOpen Packaging Conventions\u201d, which is the packaging format to be used by the Office Open XML file formats.\nIt specifies, how to represent multiple logical files (\u201cParts\u201d) within a physical Package (as a ZIP container), how to express semantic relationships between those Parts (using accompanying XML Parts), and how to add meta data and cryptographic signatures to the Package.\nThe format is defined in two steps: an abstract logic package model with Parts, Content Types and Relationships, and a physical mapping of this package model to PKZIP files.\n\nThis Python package aims to implement both, the logical model and physical mapping of OPC package files, to allow reading and writing such files.\nHowever, it does not provide functionality to deal with the packages' payload, i.e. there is not functionality included to parse MS Word Documents from .docx files etc.\n\n\n## Features of PyECMA376-2\n\n* reading OPC package files\n  * listing contained Parts (incl. Content Type)\n  * reading Parts as file-like objects (incl. interleaved Parts)\n  * parsing and following Relationships\n  * parsing package meta data (\u201cCore Properties\u201d)\n\n* writing OPC package files\n  * creating and writing Parts (via writable file-like objects, incl. interleaved Parts)\n  * adding Relationships (as simple Python objects)\n  * adding Content Type information\n  * composing and writing package meta data (\u201cCore Properties\u201d)\n\nModifying packages in-place is **not** supported.\n\n\n### Currently Missing Features\n\n* reading/verifying/creating cryptographic signatures\n\n\n### Dependencies\n\nThis package requires `lxml` for XML reading and writing (with proper XML namespaces support).\nApart from that only the Python standard library is required.\n\nThe Python interpreter must support Python 3.6 or higher.\n\n\n## Usage\n\nShort example of reading an OPC package file:\n\n```python\nimport pyecma376_2\n\nwith pyecma376_2.ZipPackageReader(\"document.docx\") as reader:\n    # List parts in package\n    for part_name, content_type in reader.list_parts():\n        print(part_name)\n    \n    # Get Relationship of type \"\u2026/officeDocument\" from package-level Relationships\n    document_part_name = reader.get_related_parts_by_type(\"/\")[\n        'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'][0]\n\n    # Read core properties (package meta data)\n    core_props = reader.get_core_properties()\n    print(core_props.creator)\n\n    # Open part as (binary) file-like object\n    with reader.open_part(document_part_name) as part:\n        # XML parsing and document interpretation goes here\n        print(part.read().decode())\n```\n\nShort example of creating and writing into an OPC package file:\n\n```python\nimport pyecma376_2\nimport datetime\n\nwith pyecma376_2.ZipPackageWriter(\"new_document.myx\") as writer:\n    # Add a part\n    with writer.open_part(\"/example/document.txt\", \"text/plain\") as part:\n        part.write(\"Lorem ipsum dolor sit amet.\".encode())\n\n    # Write core properties (meta data)\n    # To make those work, we need to add the RELATIONSHIP_TYPE_CORE_PROPERTIES relationship below. \n    cp = pyecma376_2.OPCCoreProperties()\n    cp.created = datetime.datetime.now()\n    with writer.open_part(pyecma376_2.DEFAULT_CORE_PROPERTIES_NAME, \"application/xml\") as part:\n        cp.write_xml(part)\n    \n    # Write the packages root relationships\n    writer.write_relationships([\n        pyecma376_2.OPCRelationship(\"r1\", \"http://example.com/my-package-relationship-id\", \"http://example.com\",\n                                    pyecma376_2.OPCTargetMode.EXTERNAL),\n        pyecma376_2.OPCRelationship(\"r2\", \"http://example.com/my-document-rel\", \"example/document.txt\",\n                                    pyecma376_2.OPCTargetMode.INTERNAL),\n        pyecma376_2.OPCRelationship(\"r3\", pyecma376_2.RELATIONSHIP_TYPE_CORE_PROPERTIES,\n                                    pyecma376_2.DEFAULT_CORE_PROPERTIES_NAME,\n                                    pyecma376_2.OPCTargetMode.INTERNAL),\n    ])\n    \n    # The Content Types Stream with all parts' ContentTypes is automatically added when closing the package\n    # Modify `writer.content_types` to change Content Types representation and use `writer.write_content_types_stream()`\n    # for premature serialization/output.\n```\n\n\n## Package Architecture\n\nThe architecture of this package follows the logical concept of the ECMA standard:\nThe `package_model` module defines abstract `OPCPackageReader` and `OPCPackageWriter` classes that implement all the logical package model functionality, but omit the physical mapping to ZIP files.\nThis mapping is reflected in the abstract methods `list_items()`, `open_item()` and `create_item()` which are then implemented by the `ZipPackageReader` and `ZipPackageWriter` classes from the `zip_package` module.\n\nAuxiliary classes and functions like `OPCRelationship`, `part_realpath` and `normalize_part_name` are also contained in the `package_model` module.\n\n\n## License\n\nThis package is developed by Michael Thies at the Chair of Process Control Engineering (PLT) at RWTH Aachen University.\n\nIt is published under the terms of Apache License v2.\nSee LICENSE and NOTICE files for details.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.rwth-aachen.de/acplt/pyecma376-2", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyecma376-2", "package_url": "https://pypi.org/project/pyecma376-2/", "platform": "", "project_url": "https://pypi.org/project/pyecma376-2/", "project_urls": {"Homepage": "https://git.rwth-aachen.de/acplt/pyecma376-2"}, "release_url": "https://pypi.org/project/pyecma376-2/0.2.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Library for reading and writing ECMA 376-2 (Open Packaging Conventions) files", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyECMA376-2</h1>\n<p>A Python implementation of the Open Packaging Conventions (OPC).</p>\n<p>ECMA 376 Part 2 defines the \u201cOpen Packaging Conventions\u201d, which is the packaging format to be used by the Office Open XML file formats.\nIt specifies, how to represent multiple logical files (\u201cParts\u201d) within a physical Package (as a ZIP container), how to express semantic relationships between those Parts (using accompanying XML Parts), and how to add meta data and cryptographic signatures to the Package.\nThe format is defined in two steps: an abstract logic package model with Parts, Content Types and Relationships, and a physical mapping of this package model to PKZIP files.</p>\n<p>This Python package aims to implement both, the logical model and physical mapping of OPC package files, to allow reading and writing such files.\nHowever, it does not provide functionality to deal with the packages' payload, i.e. there is not functionality included to parse MS Word Documents from .docx files etc.</p>\n<h2>Features of PyECMA376-2</h2>\n<ul>\n<li>\n<p>reading OPC package files</p>\n<ul>\n<li>listing contained Parts (incl. Content Type)</li>\n<li>reading Parts as file-like objects (incl. interleaved Parts)</li>\n<li>parsing and following Relationships</li>\n<li>parsing package meta data (\u201cCore Properties\u201d)</li>\n</ul>\n</li>\n<li>\n<p>writing OPC package files</p>\n<ul>\n<li>creating and writing Parts (via writable file-like objects, incl. interleaved Parts)</li>\n<li>adding Relationships (as simple Python objects)</li>\n<li>adding Content Type information</li>\n<li>composing and writing package meta data (\u201cCore Properties\u201d)</li>\n</ul>\n</li>\n</ul>\n<p>Modifying packages in-place is <strong>not</strong> supported.</p>\n<h3>Currently Missing Features</h3>\n<ul>\n<li>reading/verifying/creating cryptographic signatures</li>\n</ul>\n<h3>Dependencies</h3>\n<p>This package requires <code>lxml</code> for XML reading and writing (with proper XML namespaces support).\nApart from that only the Python standard library is required.</p>\n<p>The Python interpreter must support Python 3.6 or higher.</p>\n<h2>Usage</h2>\n<p>Short example of reading an OPC package file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyecma376_2</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">ZipPackageReader</span><span class=\"p\">(</span><span class=\"s2\">\"document.docx\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"c1\"># List parts in package</span>\n    <span class=\"k\">for</span> <span class=\"n\">part_name</span><span class=\"p\">,</span> <span class=\"n\">content_type</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">list_parts</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">part_name</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># Get Relationship of type \"\u2026/officeDocument\" from package-level Relationships</span>\n    <span class=\"n\">document_part_name</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_related_parts_by_type</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)[</span>\n        <span class=\"s1\">'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Read core properties (package meta data)</span>\n    <span class=\"n\">core_props</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_core_properties</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">core_props</span><span class=\"o\">.</span><span class=\"n\">creator</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Open part as (binary) file-like object</span>\n    <span class=\"k\">with</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">open_part</span><span class=\"p\">(</span><span class=\"n\">document_part_name</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">part</span><span class=\"p\">:</span>\n        <span class=\"c1\"># XML parsing and document interpretation goes here</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span>\n</pre>\n<p>Short example of creating and writing into an OPC package file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyecma376_2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">ZipPackageWriter</span><span class=\"p\">(</span><span class=\"s2\">\"new_document.myx\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Add a part</span>\n    <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">open_part</span><span class=\"p\">(</span><span class=\"s2\">\"/example/document.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text/plain\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">part</span><span class=\"p\">:</span>\n        <span class=\"n\">part</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"Lorem ipsum dolor sit amet.\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Write core properties (meta data)</span>\n    <span class=\"c1\"># To make those work, we need to add the RELATIONSHIP_TYPE_CORE_PROPERTIES relationship below. </span>\n    <span class=\"n\">cp</span> <span class=\"o\">=</span> <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCCoreProperties</span><span class=\"p\">()</span>\n    <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">open_part</span><span class=\"p\">(</span><span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CORE_PROPERTIES_NAME</span><span class=\"p\">,</span> <span class=\"s2\">\"application/xml\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">part</span><span class=\"p\">:</span>\n        <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">write_xml</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># Write the packages root relationships</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write_relationships</span><span class=\"p\">([</span>\n        <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCRelationship</span><span class=\"p\">(</span><span class=\"s2\">\"r1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://example.com/my-package-relationship-id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://example.com\"</span><span class=\"p\">,</span>\n                                    <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCTargetMode</span><span class=\"o\">.</span><span class=\"n\">EXTERNAL</span><span class=\"p\">),</span>\n        <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCRelationship</span><span class=\"p\">(</span><span class=\"s2\">\"r2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://example.com/my-document-rel\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example/document.txt\"</span><span class=\"p\">,</span>\n                                    <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCTargetMode</span><span class=\"o\">.</span><span class=\"n\">INTERNAL</span><span class=\"p\">),</span>\n        <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCRelationship</span><span class=\"p\">(</span><span class=\"s2\">\"r3\"</span><span class=\"p\">,</span> <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">RELATIONSHIP_TYPE_CORE_PROPERTIES</span><span class=\"p\">,</span>\n                                    <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CORE_PROPERTIES_NAME</span><span class=\"p\">,</span>\n                                    <span class=\"n\">pyecma376_2</span><span class=\"o\">.</span><span class=\"n\">OPCTargetMode</span><span class=\"o\">.</span><span class=\"n\">INTERNAL</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n    \n    <span class=\"c1\"># The Content Types Stream with all parts' ContentTypes is automatically added when closing the package</span>\n    <span class=\"c1\"># Modify `writer.content_types` to change Content Types representation and use `writer.write_content_types_stream()`</span>\n    <span class=\"c1\"># for premature serialization/output.</span>\n</pre>\n<h2>Package Architecture</h2>\n<p>The architecture of this package follows the logical concept of the ECMA standard:\nThe <code>package_model</code> module defines abstract <code>OPCPackageReader</code> and <code>OPCPackageWriter</code> classes that implement all the logical package model functionality, but omit the physical mapping to ZIP files.\nThis mapping is reflected in the abstract methods <code>list_items()</code>, <code>open_item()</code> and <code>create_item()</code> which are then implemented by the <code>ZipPackageReader</code> and <code>ZipPackageWriter</code> classes from the <code>zip_package</code> module.</p>\n<p>Auxiliary classes and functions like <code>OPCRelationship</code>, <code>part_realpath</code> and <code>normalize_part_name</code> are also contained in the <code>package_model</code> module.</p>\n<h2>License</h2>\n<p>This package is developed by Michael Thies at the Chair of Process Control Engineering (PLT) at RWTH Aachen University.</p>\n<p>It is published under the terms of Apache License v2.\nSee LICENSE and NOTICE files for details.</p>\n\n          </div>"}, "last_serial": 6880777, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b5a6b925fc9ceda9778644d8f989a535", "sha256": "fe1f1589cd9464e6de917b59f3097d2395ed4e44c087d978e1f39933f57a08a9"}, "downloads": -1, "filename": "pyecma376-2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b5a6b925fc9ceda9778644d8f989a535", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14087, "upload_time": "2020-02-28T13:41:12", "upload_time_iso_8601": "2020-02-28T13:41:12.448576Z", "url": "https://files.pythonhosted.org/packages/2a/65/f641ddad3ad84550b81f6ab7eb52d70df5febc62e89501e44de9d5c5961a/pyecma376-2-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fcbb8b784df426c6192e3fb03bd5e2c6", "sha256": "3359de385036fd7e047f5e40874011d86d84c5e10a17370a67f3562563516f33"}, "downloads": -1, "filename": "pyecma376-2-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fcbb8b784df426c6192e3fb03bd5e2c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14081, "upload_time": "2020-02-28T13:47:53", "upload_time_iso_8601": "2020-02-28T13:47:53.402781Z", "url": "https://files.pythonhosted.org/packages/1e/09/20d8234ebb4011d3fda4afd1d10d3ecab1151f5ec5b955ea75114983976d/pyecma376-2-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5783d26318b576cd0776240016e2ac43", "sha256": "0f7ebf4efc7ca3ba0a192fc7e5ac2b70c9d240c6f5eea3347ab6611f889c24e2"}, "downloads": -1, "filename": "pyecma376-2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5783d26318b576cd0776240016e2ac43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17983, "upload_time": "2020-02-29T16:33:09", "upload_time_iso_8601": "2020-02-29T16:33:09.910234Z", "url": "https://files.pythonhosted.org/packages/b7/72/401f77a8ab62cd335c4599ed52df1d3c3708014dd5219db5e3038a7dedb5/pyecma376-2-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "726df85703d7f54fabfc6acca2198ab6", "sha256": "4a8d7a210daf7cbfb47d1bb443a7588c2a319187fcf0f112aa04bce93b380027"}, "downloads": -1, "filename": "pyecma376-2-0.2.1.tar.gz", "has_sig": false, "md5_digest": "726df85703d7f54fabfc6acca2198ab6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17861, "upload_time": "2020-03-02T09:40:05", "upload_time_iso_8601": "2020-03-02T09:40:05.398345Z", "url": "https://files.pythonhosted.org/packages/9c/cb/e24993493be1c064b3592265c6b7284b75a1c614313d47d4c801a8f36ef9/pyecma376-2-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c3561f434fce8cd11e6706a36074baa9", "sha256": "7e31418dc82ba3a042f5aedc1fcdafa996c9a0a56c6bec8386f122d4cc42d15f"}, "downloads": -1, "filename": "pyecma376-2-0.2.2.tar.gz", "has_sig": false, "md5_digest": "c3561f434fce8cd11e6706a36074baa9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18299, "upload_time": "2020-03-23T15:14:31", "upload_time_iso_8601": "2020-03-23T15:14:31.242784Z", "url": "https://files.pythonhosted.org/packages/d5/1e/998cca7f87a7074f9cb7d95ee9859323285ecdac925ac5166bc02aa77e95/pyecma376-2-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "cb0ac54c67f31fb46ce440180c635622", "sha256": "275a3c48ba3830d0c2fc5fa9b12ccab7b25e4f5e272159c2356c15ff9012972f"}, "downloads": -1, "filename": "pyecma376-2-0.2.3.tar.gz", "has_sig": false, "md5_digest": "cb0ac54c67f31fb46ce440180c635622", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18332, "upload_time": "2020-03-25T14:08:50", "upload_time_iso_8601": "2020-03-25T14:08:50.681708Z", "url": "https://files.pythonhosted.org/packages/09/cf/051a18f967026be389a7124bb95bdc0be2bb7933ea81e83ccc0349711cf8/pyecma376-2-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb0ac54c67f31fb46ce440180c635622", "sha256": "275a3c48ba3830d0c2fc5fa9b12ccab7b25e4f5e272159c2356c15ff9012972f"}, "downloads": -1, "filename": "pyecma376-2-0.2.3.tar.gz", "has_sig": false, "md5_digest": "cb0ac54c67f31fb46ce440180c635622", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18332, "upload_time": "2020-03-25T14:08:50", "upload_time_iso_8601": "2020-03-25T14:08:50.681708Z", "url": "https://files.pythonhosted.org/packages/09/cf/051a18f967026be389a7124bb95bdc0be2bb7933ea81e83ccc0349711cf8/pyecma376-2-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:35 2020"}