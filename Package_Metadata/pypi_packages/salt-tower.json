{"info": {"author": "Jan Graichen", "author_email": "jgraichen@altimos.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: System :: Systems Administration"], "description": "<p align=\"center\"><img height=\"100\" alt=\"Salt Tower (Logo)\" src=\"./salt-tower.svg\" /></p><br />\n\n# Salt Tower - A Flexible External Pillar Module\n\n[![GitHub Workflow Status (master branch)](https://img.shields.io/github/workflow/status/jgraichen/salt-tower/Python%20Package/master?logo=github)](https://github.com/jgraichen/salt-tower/actions?query=branch%3Amaster+workflow%3A%22Python+Package%22)\n\nSalt Tower is an advanced and flexible `ext_pillar` that gives access to pillar values while processing and merging them, can render all usual salt file formats and include private and binary files for a minion.\n\nSalt Tower is inspired by [pillarstack](https://github.com/bbinet/pillarstack) for merging pillar files and giving access to them. It also has a [top file](#top-file) like salt itself and utilizes salt renderers to supports all formats such as YAML, Jinja, Python and any combination. Supercharged [renderers for plain text and YAML](#yamlet-renderer) are included too.\n\nEach tower data file is passed the current processed pillars. They can therefore access previously defined values. Data files can include other files that are all merged together.\n\nSalt Tower is designed to completely replace the usual pillar repository or can be utilized beside salts original pillar that e.g. can bootstrap a salt master with Salt Tower.\n\n## Questions or Need Help?\n\nThe is a [group](https://groups.google.com/d/forum/salt-tower) and [mailing list](mailto:salt-tower@googlegroups.com). You can join the group [here](https://groups.google.com/d/forum/salt-tower/join) or by sending a [subscribe email](mailto:salt-tower+subscribe@googlegroups.com).\n\nFeel free to ask for help, discuss solutions or ideas there. Otherwise you can open an [issue](https://github.com/jgraichen/salt-tower/issues/new).\n\n## Installation\n\nRecommended installation is using `pip` / `pip3` on the salt master:\n\n```\n$ pip install salt-tower\n```\n\n#### Using GitFS\n\nYou can include this repository as a gitfs root on synchronize runners on the master:\n\n```yaml\ngitfs_remotes:\n- https://github.com/jgraichen/salt-tower.git:\n  - base: v1.2.0\n```\n\nSync all modules:\n\n```\n$ salt-run saltutil.sync_all\npillar:\n    - pillar.tower\nrenderers:\n    - renderers.text\n    - renderers.yamlet\n```\n\nPlease note that *everything* in this repository would be merged with your other roots.\n\n#### Manual installation\n\nInstall the extension files from the `salt_tower/{pillar,renderers}` directories into the `extension_modules` directory configured in salt.\n\n## Configuration\n\nSalt Tower is configured as an `ext_pillar`:\n\n```yaml\next_pillar:\n  - tower: /path/to/tower.sls\n```\n\n### Top File\n\nThe `tower.sls` file is similar to the usual `top.sls` with some important differences.\n\n##### Ordered matchers\n\nPillar top items are ordered and processed in order of appearance. You can therefore define identical matchers multiple times.\n\n```yaml\n# tower.sls\nbase:\n  - '*':\n      - first\n\n  - '*':\n      - second\n```\n\n##### Common includes\n\nYou do not need to define a matcher at all, the files will be included for all minions. You also can use globs to match multiple files, e.g. include all files from `common/`.\n\n```yaml\nbase:\n  - common/*\n```\n\n##### Grains\n\nThe top file itself is rendered using the default renderer (`yaml|jinja`). Therefore you can use e.g. `grains` to include specific files.\n\n```yaml\nbase:\n  - common/*\n  - dist/{{ grains['oscodename'] }}\n```\n\n##### Embedded data\n\nYou can directly include pillar data into the top file simply be defining a `dict` item.\n\n```yaml\nbase:\n  - '*.a.example.org':\n      - site:\n          id: a\n          name: A Site\n```\n\n##### Iterative pillar processing\n\nAll matchers are compound matchers by default. As items are processes in order of appearance, later items can patch on previously defined pillar values. The above example includes `application.sls` for any minion matching `*.a.example.org` simply because it defines a `site` pillar value.\n\n```yaml\nbase:\n  - '*.a.example.org':\n      - site: {id: a, name: A Site}\n\n  - 'I@site:*':\n      - applications\n```\n\n##### Late-bound variable replacement\n\nFile includes are pre-processed by a string formatter to late-bind pillar values.\n\n```yaml\nbase:\n  - '*.a.example.org':\n      - site: {id: a, env: production}\n\n  - '*.a-staging.example.org':\n      - site: {id: a, env: staging}\n\n  - 'I@site:*':\n      - site/default\n      - site/{site.id}\n      - site/{site.id}/{site.env}/*\n```\n\nIn the above example a minion `node0.a-staging.example.org` will include the following files:\n\n```\nsite/default\nsite/a\nsite/a/staging/*\n```\n\n##### File lookup\n\nFile names will be matches to files and directories, e.g. when including `path/to/file` the first existing match will be used:\n\n```\npath/to/file\npath/to/file.sls\npath/to/file/init.sls\n```\n\n### Tower Data File\n\nA data file is processed like a usual pillar file. Rendering uses salts template engines therefore all usual features should be available.\n\nThe injected `pillar` objects can be used to access previously defined values. The additional `.get` method allows to traverse the pillar tree.\n\n```yaml\napplication:\n  title: Site of {{ pillar.get('tenant:name') }}\n```\n\n**Note:** Using `salt['pillar.get']()` will *not* work.\n\nTower data files can be [any supported template format](https://docs.saltstack.com/en/latest/ref/renderers/) including python files:\n\n```py\n#!py\n\ndef run():\n    ret = {'databases': []}\n\n    for app in __pillar__['application']:\n        ret['databases'].append({\n            'name': '{0}-{1}'.format(app['name'], app['env'])\n        })\n\n    return ret\n```\n\n##### Includes\n\nPillar data files can include other pillar files similar to how states can be included:\n\n```yaml\ninclude:\n  - another/pillar\n\ndata: more\n```\n\nIncluded files cannot be used in the pillar data file template itself but are merge in the pillar before the new pillar data. Includes can be relative to the current file by prefixing a dot:\n\n```yaml\ninclude:\n  - file/from/pillar/root.sls\n  - ./adjacent_file.sls\n  - ../parent_file.sls\n```\n\n### Yamlet renderer\n\nThe Yamlet renderer is an improved YAML renderer that supports loading other files and rendering templates:\n\n```yaml\nssh_private_key: !read id_rsa\nssh_public_key: !read id_rsa.pub\n```\n\nThis reads a file from the pillar directory in plain text or binary and embeds it into the pillar. This eases shipping private files to minions.\n\nUsing the `!include` tag files can be pushed through salts rendering pipeline on the server:\n\n```yaml\nnginx:\n  sites:\n    my-app: !include ../files/site.conf\n```\n\n```\n#!jinja | text strip\nserver {\n  listen {{ pillar.get('my-app:ip') }}:80;\n  root /var/www/my-app;\n}\n```\n\nThe pillar will return the following:\n\n```yaml\nnginx:\n  sites:\n    my-app: |\n      server {\n        listen 127.0.0.1:80;\n        root /var/www/my-app;\n      }\n```\n\nThis can greatly simplify states as they only need to drop pillar values into config files and restart services:\n\n```sls\nnginx:\n  pkg.installed: []\n  service.running: []\n\n{% for name in pillar.get('nginx:sites', {}) %}\n/etc/nginx/sites-enabled/{{ name }}:\n  file.managed:\n    - contents_pillar: nginx:sites:{{ name }}\n    - makedirs: True\n    - watch_in:\n      - service: nginx\n{% endfor %}\n```\n\nThe yamlet renderer `!include` macro does accept context variables too:\n\n```yaml\nnginx:\n  sites:\n    my-app: !include\n      source: ../files/site.conf\n      context:\n        listen_ip: 127.0.0.1\n```\n\n```\n#!jinja | text strip\nserver {\n  listen {{ listen_ip }}:80;\n  root /var/www/my-app;\n}\n```\n\n### Text renderer\n\nThe text renderer (used above) renders a file as plain text. It stripes the shebang and can optionally strip whitespace from the beginning and end.\n\n```\n#!text strip\n\nHello World\n```\n\nThis will return:\n\n```\nHello World\n```\n\nThe text renderer is mostly used for embedding rendered configuration files into a Yamlet file.\n\n### Advanced usage (very dangerous)\n\nThe pillar object passed to the python template engine is the actual mutable dict reference used to process and merge the data. It is possible to modify this dict e.g. in a python template without returning anything:\n\n```python\n#!py\n\nimport copy\n\ndef run():\n    databases = __pillar__['databases']\n    default = databases.pop('default') # Deletes from actual pillar\n\n    for name, config in databases.items():\n        databases[name] = dict(default, **config)\n\n    return {}\n```\n\n*Note 1:* Do not return `None`. Otherwise [Salt will render the template twice](https://github.com/saltstack/salt/blame/v2019.2.0/salt/template.py#L108) and all side-effects will be applied twice.\n\n*Note 2:* The `__pillar__` object in Python templates is different to other template engines. It is a dict and does not allow to traverse using `get`.\n\n```py\n#!py\n\ndef run():\n    return {\n        'wrong': __pilar__.get('tenant:name'),\n        'python': __pillar__['tenant']['name'],\n        'alternative': tower.get('tenant:name')\n    }\n```\n\nThe above example demonstrates different usages. The first example will only work if the pillar contains an actual `tenant:name` top-level key. The second example is idiomatic-python but will raise an error if the keys do not exist. The third example uses the additional `tower` helper module to traverse the pillar data.\n\nThe `tower` pillar object is available in all rendering engines and can be used for low-level interaction with the ext_pillar engine. Some available functions are:\n\n##### tower.get(key, default=None)\n\nGet a pillar value by given traverse path:\n\n```python\ntower.get('my:pillar:key')\n```\n\n##### tower.update(dict)\n\nMerges given dictionary into the pillar data.\n\n```python\ntower.update({'my': {'pillar': 'data'}})\n\nassert tower.get('my:pillar') == 'data'\n```\n\n##### tower.merge(tgt, *objects)\n\nMerges given dictionaries or lists into the first one.\n\nNote: The first given dictionary or list is *mutated* and returned.\n\n```python\ntgt = {}\n\nret = tower.merge(tgt, {'a': 1})\n\nassert ret is tgt\nassert tgt['a'] == 1\n```\n\n##### tower.format(obj, *args, **kwargs)\n\nPerforms recursive late-bind string formatting using tower pillar and given arguments ad keywords for resolving. Uses `string.Formatter` internally.\n\n```python\ntower.update({\n    'database': {\n        'password': 'secret'\n    }\n})\n\nret = tower.format('postgres://user@{database.password}/db')\n\nassert ret == 'postgres://user@secret/db'\n```\n\nFormat accept dictionaries and list as well an can therefore be used to format full or partial pillar data, this can be used to e.g. format defaults with extra variables:\n\n```python\n#!py\n\ndef run():\n    returns = {}\n    defaults = __pillar__['default_app_config']\n    # e.g. {\n    #        'database': 'sqlite:///opt/{name}.sqlite'\n    #        'listen': '0.0.0.0:{app.port}'\n    # }\n\n    for name, conf in __pillar__['applications'].items():\n        # Merge defaults with conf into new dictionary\n        conf = tower.merge({}, defaults, conf)\n\n        # Format late-bind defaults with application config\n        conf = tower.format(conf, name=name, app=conf)\n\n        returns[name] = conf\n\n    return {'applications': returns}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jgraichen/salt-tower", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "salt-tower", "package_url": "https://pypi.org/project/salt-tower/", "platform": "", "project_url": "https://pypi.org/project/salt-tower/", "project_urls": {"Homepage": "https://github.com/jgraichen/salt-tower"}, "release_url": "https://pypi.org/project/salt-tower/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A Flexible External Salt Pillar Module", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img alt=\"Salt Tower (Logo)\" height=\"100\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaf20242f7c27f31d85a6345c7d25b03744c28be/2e2f73616c742d746f7765722e737667\"></p><br>\n<h1>Salt Tower - A Flexible External Pillar Module</h1>\n<p><a href=\"https://github.com/jgraichen/salt-tower/actions?query=branch%3Amaster+workflow%3A%22Python+Package%22\" rel=\"nofollow\"><img alt=\"GitHub Workflow Status (master branch)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d865dc316356968c85a0a99fa4748b18eb5e8c47/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6a677261696368656e2f73616c742d746f7765722f507974686f6e2532305061636b6167652f6d61737465723f6c6f676f3d676974687562\"></a></p>\n<p>Salt Tower is an advanced and flexible <code>ext_pillar</code> that gives access to pillar values while processing and merging them, can render all usual salt file formats and include private and binary files for a minion.</p>\n<p>Salt Tower is inspired by <a href=\"https://github.com/bbinet/pillarstack\" rel=\"nofollow\">pillarstack</a> for merging pillar files and giving access to them. It also has a <a href=\"#top-file\" rel=\"nofollow\">top file</a> like salt itself and utilizes salt renderers to supports all formats such as YAML, Jinja, Python and any combination. Supercharged <a href=\"#yamlet-renderer\" rel=\"nofollow\">renderers for plain text and YAML</a> are included too.</p>\n<p>Each tower data file is passed the current processed pillars. They can therefore access previously defined values. Data files can include other files that are all merged together.</p>\n<p>Salt Tower is designed to completely replace the usual pillar repository or can be utilized beside salts original pillar that e.g. can bootstrap a salt master with Salt Tower.</p>\n<h2>Questions or Need Help?</h2>\n<p>The is a <a href=\"https://groups.google.com/d/forum/salt-tower\" rel=\"nofollow\">group</a> and <a href=\"mailto:salt-tower@googlegroups.com\">mailing list</a>. You can join the group <a href=\"https://groups.google.com/d/forum/salt-tower/join\" rel=\"nofollow\">here</a> or by sending a <a href=\"mailto:salt-tower+subscribe@googlegroups.com\">subscribe email</a>.</p>\n<p>Feel free to ask for help, discuss solutions or ideas there. Otherwise you can open an <a href=\"https://github.com/jgraichen/salt-tower/issues/new\" rel=\"nofollow\">issue</a>.</p>\n<h2>Installation</h2>\n<p>Recommended installation is using <code>pip</code> / <code>pip3</code> on the salt master:</p>\n<pre><code>$ pip install salt-tower\n</code></pre>\n<h4>Using GitFS</h4>\n<p>You can include this repository as a gitfs root on synchronize runners on the master:</p>\n<pre><span class=\"nt\">gitfs_remotes</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://github.com/jgraichen/salt-tower.git</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">base</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v1.2.0</span>\n</pre>\n<p>Sync all modules:</p>\n<pre><code>$ salt-run saltutil.sync_all\npillar:\n    - pillar.tower\nrenderers:\n    - renderers.text\n    - renderers.yamlet\n</code></pre>\n<p>Please note that <em>everything</em> in this repository would be merged with your other roots.</p>\n<h4>Manual installation</h4>\n<p>Install the extension files from the <code>salt_tower/{pillar,renderers}</code> directories into the <code>extension_modules</code> directory configured in salt.</p>\n<h2>Configuration</h2>\n<p>Salt Tower is configured as an <code>ext_pillar</code>:</p>\n<pre><span class=\"nt\">ext_pillar</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">tower</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/path/to/tower.sls</span>\n</pre>\n<h3>Top File</h3>\n<p>The <code>tower.sls</code> file is similar to the usual <code>top.sls</code> with some important differences.</p>\n<h5>Ordered matchers</h5>\n<p>Pillar top items are ordered and processed in order of appearance. You can therefore define identical matchers multiple times.</p>\n<pre><span class=\"c1\"># tower.sls</span>\n<span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n</pre>\n<h5>Common includes</h5>\n<p>You do not need to define a matcher at all, the files will be included for all minions. You also can use globs to match multiple files, e.g. include all files from <code>common/</code>.</p>\n<pre><span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">common/*</span>\n</pre>\n<h5>Grains</h5>\n<p>The top file itself is rendered using the default renderer (<code>yaml|jinja</code>). Therefore you can use e.g. <code>grains</code> to include specific files.</p>\n<pre><span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">common/*</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">dist/{{ grains['oscodename'] }}</span>\n</pre>\n<h5>Embedded data</h5>\n<p>You can directly include pillar data into the top file simply be defining a <code>dict</code> item.</p>\n<pre><span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*.a.example.org'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">site</span><span class=\"p\">:</span>\n          <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">a</span>\n          <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">A Site</span>\n</pre>\n<h5>Iterative pillar processing</h5>\n<p>All matchers are compound matchers by default. As items are processes in order of appearance, later items can patch on previously defined pillar values. The above example includes <code>application.sls</code> for any minion matching <code>*.a.example.org</code> simply because it defines a <code>site</code> pillar value.</p>\n<pre><span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*.a.example.org'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">site</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"nv\">a</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> name</span><span class=\"p\">:</span> <span class=\"nv\">A Site</span><span class=\"p p-Indicator\">}</span>\n\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'I@site:*'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">applications</span>\n</pre>\n<h5>Late-bound variable replacement</h5>\n<p>File includes are pre-processed by a string formatter to late-bind pillar values.</p>\n<pre><span class=\"nt\">base</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*.a.example.org'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">site</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"nv\">a</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> env</span><span class=\"p\">:</span> <span class=\"nv\">production</span><span class=\"p p-Indicator\">}</span>\n\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'*.a-staging.example.org'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">site</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"nv\">a</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> env</span><span class=\"p\">:</span> <span class=\"nv\">staging</span><span class=\"p p-Indicator\">}</span>\n\n  <span class=\"p p-Indicator\">-</span> <span class=\"s\">'I@site:*'</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">site/default</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">site/{site.id}</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">site/{site.id}/{site.env}/*</span>\n</pre>\n<p>In the above example a minion <code>node0.a-staging.example.org</code> will include the following files:</p>\n<pre><code>site/default\nsite/a\nsite/a/staging/*\n</code></pre>\n<h5>File lookup</h5>\n<p>File names will be matches to files and directories, e.g. when including <code>path/to/file</code> the first existing match will be used:</p>\n<pre><code>path/to/file\npath/to/file.sls\npath/to/file/init.sls\n</code></pre>\n<h3>Tower Data File</h3>\n<p>A data file is processed like a usual pillar file. Rendering uses salts template engines therefore all usual features should be available.</p>\n<p>The injected <code>pillar</code> objects can be used to access previously defined values. The additional <code>.get</code> method allows to traverse the pillar tree.</p>\n<pre><span class=\"nt\">application</span><span class=\"p\">:</span>\n  <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Site of {{ pillar.get('tenant:name') }}</span>\n</pre>\n<p><strong>Note:</strong> Using <code>salt['pillar.get']()</code> will <em>not</em> work.</p>\n<p>Tower data files can be <a href=\"https://docs.saltstack.com/en/latest/ref/renderers/\" rel=\"nofollow\">any supported template format</a> including python files:</p>\n<pre><span class=\"ch\">#!py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'databases'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">__pillar__</span><span class=\"p\">[</span><span class=\"s1\">'application'</span><span class=\"p\">]:</span>\n        <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"s1\">'databases'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span>\n            <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{0}</span><span class=\"s1\">-</span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">app</span><span class=\"p\">[</span><span class=\"s1\">'env'</span><span class=\"p\">])</span>\n        <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</pre>\n<h5>Includes</h5>\n<p>Pillar data files can include other pillar files similar to how states can be included:</p>\n<pre><span class=\"nt\">include</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">another/pillar</span>\n\n<span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">more</span>\n</pre>\n<p>Included files cannot be used in the pillar data file template itself but are merge in the pillar before the new pillar data. Includes can be relative to the current file by prefixing a dot:</p>\n<pre><span class=\"nt\">include</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">file/from/pillar/root.sls</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">./adjacent_file.sls</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">../parent_file.sls</span>\n</pre>\n<h3>Yamlet renderer</h3>\n<p>The Yamlet renderer is an improved YAML renderer that supports loading other files and rendering templates:</p>\n<pre><span class=\"nt\">ssh_private_key</span><span class=\"p\">:</span> <span class=\"kt\">!read</span> <span class=\"l l-Scalar l-Scalar-Plain\">id_rsa</span>\n<span class=\"nt\">ssh_public_key</span><span class=\"p\">:</span> <span class=\"kt\">!read</span> <span class=\"l l-Scalar l-Scalar-Plain\">id_rsa.pub</span>\n</pre>\n<p>This reads a file from the pillar directory in plain text or binary and embeds it into the pillar. This eases shipping private files to minions.</p>\n<p>Using the <code>!include</code> tag files can be pushed through salts rendering pipeline on the server:</p>\n<pre><span class=\"nt\">nginx</span><span class=\"p\">:</span>\n  <span class=\"nt\">sites</span><span class=\"p\">:</span>\n    <span class=\"nt\">my-app</span><span class=\"p\">:</span> <span class=\"kt\">!include</span> <span class=\"l l-Scalar l-Scalar-Plain\">../files/site.conf</span>\n</pre>\n<pre><code>#!jinja | text strip\nserver {\n  listen {{ pillar.get('my-app:ip') }}:80;\n  root /var/www/my-app;\n}\n</code></pre>\n<p>The pillar will return the following:</p>\n<pre><span class=\"nt\">nginx</span><span class=\"p\">:</span>\n  <span class=\"nt\">sites</span><span class=\"p\">:</span>\n    <span class=\"nt\">my-app</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n      <span class=\"no\">server {</span>\n        <span class=\"no\">listen 127.0.0.1:80;</span>\n        <span class=\"no\">root /var/www/my-app;</span>\n      <span class=\"no\">}</span>\n</pre>\n<p>This can greatly simplify states as they only need to drop pillar values into config files and restart services:</p>\n<pre><span class=\"nt\">nginx</span><span class=\"p\">:</span>\n  <span class=\"nt\">pkg.installed</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[]</span>\n  <span class=\"nt\">service.running</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[]</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">name</span> <span class=\"k\">in</span> <span class=\"nv\">pillar.get</span><span class=\"o\">(</span><span class=\"s1\">'nginx:sites'</span><span class=\"o\">,</span> <span class=\"o\">{})</span> <span class=\"cp\">%}</span>\n<span class=\"nt\">/etc/nginx/sites-enabled/</span><span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span><span class=\"p\">:</span>\n  <span class=\"nt\">file.managed</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">contents_pillar</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">nginx:sites</span><span class=\"p p-Indicator\">:</span><span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">makedirs</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">watch_in</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">service</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">nginx</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre>\n<p>The yamlet renderer <code>!include</code> macro does accept context variables too:</p>\n<pre><span class=\"nt\">nginx</span><span class=\"p\">:</span>\n  <span class=\"nt\">sites</span><span class=\"p\">:</span>\n    <span class=\"nt\">my-app</span><span class=\"p\">:</span> <span class=\"kt\">!include</span>\n      <span class=\"nt\">source</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">../files/site.conf</span>\n      <span class=\"nt\">context</span><span class=\"p\">:</span>\n        <span class=\"nt\">listen_ip</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">127.0.0.1</span>\n</pre>\n<pre><code>#!jinja | text strip\nserver {\n  listen {{ listen_ip }}:80;\n  root /var/www/my-app;\n}\n</code></pre>\n<h3>Text renderer</h3>\n<p>The text renderer (used above) renders a file as plain text. It stripes the shebang and can optionally strip whitespace from the beginning and end.</p>\n<pre><code>#!text strip\n\nHello World\n</code></pre>\n<p>This will return:</p>\n<pre><code>Hello World\n</code></pre>\n<p>The text renderer is mostly used for embedding rendered configuration files into a Yamlet file.</p>\n<h3>Advanced usage (very dangerous)</h3>\n<p>The pillar object passed to the python template engine is the actual mutable dict reference used to process and merge the data. It is possible to modify this dict e.g. in a python template without returning anything:</p>\n<pre><span class=\"ch\">#!py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"n\">__pillar__</span><span class=\"p\">[</span><span class=\"s1\">'databases'</span><span class=\"p\">]</span>\n    <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">)</span> <span class=\"c1\"># Deletes from actual pillar</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">config</span> <span class=\"ow\">in</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<p><em>Note 1:</em> Do not return <code>None</code>. Otherwise <a href=\"https://github.com/saltstack/salt/blame/v2019.2.0/salt/template.py#L108\" rel=\"nofollow\">Salt will render the template twice</a> and all side-effects will be applied twice.</p>\n<p><em>Note 2:</em> The <code>__pillar__</code> object in Python templates is different to other template engines. It is a dict and does not allow to traverse using <code>get</code>.</p>\n<pre><span class=\"ch\">#!py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'wrong'</span><span class=\"p\">:</span> <span class=\"n\">__pilar__</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'tenant:name'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'python'</span><span class=\"p\">:</span> <span class=\"n\">__pillar__</span><span class=\"p\">[</span><span class=\"s1\">'tenant'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">],</span>\n        <span class=\"s1\">'alternative'</span><span class=\"p\">:</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'tenant:name'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>The above example demonstrates different usages. The first example will only work if the pillar contains an actual <code>tenant:name</code> top-level key. The second example is idiomatic-python but will raise an error if the keys do not exist. The third example uses the additional <code>tower</code> helper module to traverse the pillar data.</p>\n<p>The <code>tower</code> pillar object is available in all rendering engines and can be used for low-level interaction with the ext_pillar engine. Some available functions are:</p>\n<h5>tower.get(key, default=None)</h5>\n<p>Get a pillar value by given traverse path:</p>\n<pre><span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'my:pillar:key'</span><span class=\"p\">)</span>\n</pre>\n<h5>tower.update(dict)</h5>\n<p>Merges given dictionary into the pillar data.</p>\n<pre><span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'my'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'pillar'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">}})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'my:pillar'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'data'</span>\n</pre>\n<h5>tower.merge(tgt, *objects)</h5>\n<p>Merges given dictionaries or lists into the first one.</p>\n<p>Note: The first given dictionary or list is <em>mutated</em> and returned.</p>\n<pre><span class=\"n\">tgt</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">tgt</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ret</span> <span class=\"ow\">is</span> <span class=\"n\">tgt</span>\n<span class=\"k\">assert</span> <span class=\"n\">tgt</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<h5>tower.format(obj, *args, **kwargs)</h5>\n<p>Performs recursive late-bind string formatting using tower pillar and given arguments ad keywords for resolving. Uses <code>string.Formatter</code> internally.</p>\n<pre><span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'secret'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">'postgres://user@</span><span class=\"si\">{database.password}</span><span class=\"s1\">/db'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">ret</span> <span class=\"o\">==</span> <span class=\"s1\">'postgres://user@secret/db'</span>\n</pre>\n<p>Format accept dictionaries and list as well an can therefore be used to format full or partial pillar data, this can be used to e.g. format defaults with extra variables:</p>\n<pre><span class=\"ch\">#!py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">returns</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"n\">__pillar__</span><span class=\"p\">[</span><span class=\"s1\">'default_app_config'</span><span class=\"p\">]</span>\n    <span class=\"c1\"># e.g. {</span>\n    <span class=\"c1\">#        'database': 'sqlite:///opt/{name}.sqlite'</span>\n    <span class=\"c1\">#        'listen': '0.0.0.0:{app.port}'</span>\n    <span class=\"c1\"># }</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">conf</span> <span class=\"ow\">in</span> <span class=\"n\">__pillar__</span><span class=\"p\">[</span><span class=\"s1\">'applications'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Merge defaults with conf into new dictionary</span>\n        <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">({},</span> <span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Format late-bind defaults with application config</span>\n        <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">tower</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n\n        <span class=\"n\">returns</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">conf</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'applications'</span><span class=\"p\">:</span> <span class=\"n\">returns</span><span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6553907, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "6535d4ada8a3c06fba286c4f6711afab", "sha256": "e67ddcc01820babc2b6ad725008988298332da3297c110f2eb8554be4f6b048b"}, "downloads": -1, "filename": "salt_tower-1.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6535d4ada8a3c06fba286c4f6711afab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11991, "upload_time": "2019-05-20T13:55:26", "upload_time_iso_8601": "2019-05-20T13:55:26.093712Z", "url": "https://files.pythonhosted.org/packages/0a/fc/c4ef05d87d3f6a549c05b853e5674cd4f63fae1f13b9a815e030a57d2dd2/salt_tower-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ec2937ce694ec1a5ca02d0ca2a9b03d", "sha256": "5911e29654c880d545ea5fbbdb035f93c9c9bb59cb74c69d3191a515cd63abeb"}, "downloads": -1, "filename": "salt-tower-1.1.0.tar.gz", "has_sig": true, "md5_digest": "0ec2937ce694ec1a5ca02d0ca2a9b03d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13838, "upload_time": "2019-05-20T13:55:28", "upload_time_iso_8601": "2019-05-20T13:55:28.776196Z", "url": "https://files.pythonhosted.org/packages/7b/23/09175b746fdfa062b41d1db629c2b1fa8bd12be25365225e46a1601a8540/salt-tower-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "483af1c97b3e455d03555329d07a40d4", "sha256": "b087a24bfd530e92bf261fdf4a11bb54669dd5d79c555b77c51048e32254fded"}, "downloads": -1, "filename": "salt_tower-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "483af1c97b3e455d03555329d07a40d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12466, "upload_time": "2020-02-01T10:57:47", "upload_time_iso_8601": "2020-02-01T10:57:47.046235Z", "url": "https://files.pythonhosted.org/packages/77/03/59b5abba314ca020d2b301cef697d12e251fcde9e02a92c329a80c9cf277/salt_tower-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe6664efa224d4c901eec032e3ecbaa3", "sha256": "fdaf75fb465e38c3ca91d1d954c23dbeffca29019c476c8e6b95ca5aacc8c8ed"}, "downloads": -1, "filename": "salt-tower-1.2.0.tar.gz", "has_sig": false, "md5_digest": "fe6664efa224d4c901eec032e3ecbaa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14904, "upload_time": "2020-02-01T10:57:48", "upload_time_iso_8601": "2020-02-01T10:57:48.574946Z", "url": "https://files.pythonhosted.org/packages/e1/bb/8f06be2b22f760ade778e81711de395d7d0e6e822ddd147153427aae4e02/salt-tower-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "483af1c97b3e455d03555329d07a40d4", "sha256": "b087a24bfd530e92bf261fdf4a11bb54669dd5d79c555b77c51048e32254fded"}, "downloads": -1, "filename": "salt_tower-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "483af1c97b3e455d03555329d07a40d4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12466, "upload_time": "2020-02-01T10:57:47", "upload_time_iso_8601": "2020-02-01T10:57:47.046235Z", "url": "https://files.pythonhosted.org/packages/77/03/59b5abba314ca020d2b301cef697d12e251fcde9e02a92c329a80c9cf277/salt_tower-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe6664efa224d4c901eec032e3ecbaa3", "sha256": "fdaf75fb465e38c3ca91d1d954c23dbeffca29019c476c8e6b95ca5aacc8c8ed"}, "downloads": -1, "filename": "salt-tower-1.2.0.tar.gz", "has_sig": false, "md5_digest": "fe6664efa224d4c901eec032e3ecbaa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14904, "upload_time": "2020-02-01T10:57:48", "upload_time_iso_8601": "2020-02-01T10:57:48.574946Z", "url": "https://files.pythonhosted.org/packages/e1/bb/8f06be2b22f760ade778e81711de395d7d0e6e822ddd147153427aae4e02/salt-tower-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:00 2020"}