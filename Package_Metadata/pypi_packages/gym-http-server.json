{"info": {"author": "Saravanabalagi Ramachandran", "author_email": "saravanabalagi@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "# Gym HTTP Server\n\nThis project provides a local REST API to the [gym](https://github.com/openai/gym) open-source library, allowing development in languages other than python.\n\nA python client is included, to demonstrate how to interact with the server.\n\n## Installation\n\nInstall the package using pip:\n\n```\npip install gym-http-server\n```\n\n## Usage\n\n### Direct Usage\n\nUse it simply from anywhere by calling\n```\ngym-http-server\n```\n\nIf you would like to run on a specific port, use `--listen` and `--port`\n```\ngym-http-server -l 127.0.0.1 -p 5000\n```\n\n### Pythonic Usage\n\nIf you want to use this inside your python script,\n```\nfrom gym_http_server import start_server\nstart_server()\n```\n\nIf you want to specify ip and port,\n```\nstart_server(listen=='127.0.0.1', port==5000)\n```\n\n## API specification\n\n\n  * POST `/v1/envs/`\n      * Create an instance of the specified environment\n      * param: `env_id` -- gym environment ID string, such as 'CartPole-v0'\n      * returns: `instance_id` -- a short identifier (such as '3c657dbc')\n\t    for the created environment instance. The instance_id is\n        used in future API calls to identify the environment to be\n        manipulated\n\n  * GET `/v1/envs/`\n      * List all environments running on the server\n\t  * returns: `envs` -- dict mapping `instance_id` to `env_id`\n\t    (e.g. `{'3c657dbc': 'CartPole-v0'}`) for every env on the server\n\n  * POST `/v1/envs/<instance_id>/reset/`\n      * Reset the state of the environment and return an initial\n        observation.\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n      * returns: `observation` -- the initial observation of the space\n\n  * POST `/v1/envs/<instance_id>/step/`\n      *  Step though an environment using an action.\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n\t  * param: `action` -- an action to take in the environment\n      * returns: `observation` -- agent's observation of the current\n        environment\n      * returns: `reward` -- amount of reward returned after previous action\n      * returns: `done` -- whether the episode has ended\n      * returns: `info` -- a dict containing auxiliary diagnostic information\n\n  * GET `/v1/envs/<instance_id>/action_space/`\n      * Get information (name and dimensions/bounds) of the env's\n        `action_space`\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n      * returns: `info` -- a dict containing 'name' (such as 'Discrete'), and\n    additional dimensional info (such as 'n') which varies from\n    space to space\n\n  * GET `/v1/envs/<instance_id>/observation_space/`\n      * Get information (name and dimensions/bounds) of the env's\n        `observation_space`\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n      * returns: `info` -- a dict containing 'name' (such as 'Discrete'), and\n    additional dimensional info (such as 'n') which varies from\n    space to space\n\n  * POST `/v1/envs/<instance_id>/monitor/start/`\n      * Start monitoring\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n      * param: `force` (default=False) -- Clear out existing training\n        data from this directory (by deleting every file\n        prefixed with \"openaigym.\")\n      * param: `resume` (default=False) -- Retain the training data\n        already in this directory, which will be merged with\n        our new data\n      * (NOTE: the `video_callable` parameter from the native\n    `env.monitor.start` function is NOT implemented)\n\n  * POST `/v1/envs/<instance_id>/monitor/close/`\n      * Flush all monitor data to disk\n      * param: `instance_id` -- a short identifier (such as '3c657dbc')\n        for the environment instance\n\n  * POST `/v1/upload/`\n      * Flush all monitor data to disk\n      * param: `training_dir` -- A directory containing the results of a\n        training run.\n      * param: `api_key` -- Your OpenAI API key\n      * param: `algorithm_id` (default=None) -- An arbitrary string\n        indicating the paricular version of the algorithm\n        (including choices of parameters) you are running.\n\n  * POST `/v1/shutdown/`\n      * Request a server shutdown\n      * Currently used by the integration tests to repeatedly create and destroy fresh copies of the server running in a separate thread\n\n\nForked from the archived [gym-http-api](https://github.com/openai/gym-http-api)\n\n\n## Licence\n\nThe MIT License\n\nCopyright (c) 2019 Saravanabalagi Ramachandran\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saravanabalagi/gym-http-server", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gym-http-server", "package_url": "https://pypi.org/project/gym-http-server/", "platform": "", "project_url": "https://pypi.org/project/gym-http-server/", "project_urls": {"Homepage": "https://github.com/saravanabalagi/gym-http-server"}, "release_url": "https://pypi.org/project/gym-http-server/0.0.1/", "requires_dist": ["Flask (==0.12.3)", "numpy", "gym (==0.7.4)", "requests (==2.21.0)", "pytest"], "requires_python": "", "summary": "Serve gym on a webserver and receive HTTP requests to play to the game from any client", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gym HTTP Server</h1>\n<p>This project provides a local REST API to the <a href=\"https://github.com/openai/gym\" rel=\"nofollow\">gym</a> open-source library, allowing development in languages other than python.</p>\n<p>A python client is included, to demonstrate how to interact with the server.</p>\n<h2>Installation</h2>\n<p>Install the package using pip:</p>\n<pre><code>pip install gym-http-server\n</code></pre>\n<h2>Usage</h2>\n<h3>Direct Usage</h3>\n<p>Use it simply from anywhere by calling</p>\n<pre><code>gym-http-server\n</code></pre>\n<p>If you would like to run on a specific port, use <code>--listen</code> and <code>--port</code></p>\n<pre><code>gym-http-server -l 127.0.0.1 -p 5000\n</code></pre>\n<h3>Pythonic Usage</h3>\n<p>If you want to use this inside your python script,</p>\n<pre><code>from gym_http_server import start_server\nstart_server()\n</code></pre>\n<p>If you want to specify ip and port,</p>\n<pre><code>start_server(listen=='127.0.0.1', port==5000)\n</code></pre>\n<h2>API specification</h2>\n<ul>\n<li>\n<p>POST <code>/v1/envs/</code></p>\n<ul>\n<li>Create an instance of the specified environment</li>\n<li>param: <code>env_id</code> -- gym environment ID string, such as 'CartPole-v0'</li>\n<li>returns: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the created environment instance. The instance_id is\nused in future API calls to identify the environment to be\nmanipulated</li>\n</ul>\n</li>\n<li>\n<p>GET <code>/v1/envs/</code></p>\n<ul>\n<li>List all environments running on the server</li>\n<li>returns: <code>envs</code> -- dict mapping <code>instance_id</code> to <code>env_id</code>\n(e.g. <code>{'3c657dbc': 'CartPole-v0'}</code>) for every env on the server</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/envs/&lt;instance_id&gt;/reset/</code></p>\n<ul>\n<li>Reset the state of the environment and return an initial\nobservation.</li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n<li>returns: <code>observation</code> -- the initial observation of the space</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/envs/&lt;instance_id&gt;/step/</code></p>\n<ul>\n<li>Step though an environment using an action.</li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n<li>param: <code>action</code> -- an action to take in the environment</li>\n<li>returns: <code>observation</code> -- agent's observation of the current\nenvironment</li>\n<li>returns: <code>reward</code> -- amount of reward returned after previous action</li>\n<li>returns: <code>done</code> -- whether the episode has ended</li>\n<li>returns: <code>info</code> -- a dict containing auxiliary diagnostic information</li>\n</ul>\n</li>\n<li>\n<p>GET <code>/v1/envs/&lt;instance_id&gt;/action_space/</code></p>\n<ul>\n<li>Get information (name and dimensions/bounds) of the env's\n<code>action_space</code></li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n<li>returns: <code>info</code> -- a dict containing 'name' (such as 'Discrete'), and\nadditional dimensional info (such as 'n') which varies from\nspace to space</li>\n</ul>\n</li>\n<li>\n<p>GET <code>/v1/envs/&lt;instance_id&gt;/observation_space/</code></p>\n<ul>\n<li>Get information (name and dimensions/bounds) of the env's\n<code>observation_space</code></li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n<li>returns: <code>info</code> -- a dict containing 'name' (such as 'Discrete'), and\nadditional dimensional info (such as 'n') which varies from\nspace to space</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/envs/&lt;instance_id&gt;/monitor/start/</code></p>\n<ul>\n<li>Start monitoring</li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n<li>param: <code>force</code> (default=False) -- Clear out existing training\ndata from this directory (by deleting every file\nprefixed with \"openaigym.\")</li>\n<li>param: <code>resume</code> (default=False) -- Retain the training data\nalready in this directory, which will be merged with\nour new data</li>\n<li>(NOTE: the <code>video_callable</code> parameter from the native\n<code>env.monitor.start</code> function is NOT implemented)</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/envs/&lt;instance_id&gt;/monitor/close/</code></p>\n<ul>\n<li>Flush all monitor data to disk</li>\n<li>param: <code>instance_id</code> -- a short identifier (such as '3c657dbc')\nfor the environment instance</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/upload/</code></p>\n<ul>\n<li>Flush all monitor data to disk</li>\n<li>param: <code>training_dir</code> -- A directory containing the results of a\ntraining run.</li>\n<li>param: <code>api_key</code> -- Your OpenAI API key</li>\n<li>param: <code>algorithm_id</code> (default=None) -- An arbitrary string\nindicating the paricular version of the algorithm\n(including choices of parameters) you are running.</li>\n</ul>\n</li>\n<li>\n<p>POST <code>/v1/shutdown/</code></p>\n<ul>\n<li>Request a server shutdown</li>\n<li>Currently used by the integration tests to repeatedly create and destroy fresh copies of the server running in a separate thread</li>\n</ul>\n</li>\n</ul>\n<p>Forked from the archived <a href=\"https://github.com/openai/gym-http-api\" rel=\"nofollow\">gym-http-api</a></p>\n<h2>Licence</h2>\n<p>The MIT License</p>\n<p>Copyright (c) 2019 Saravanabalagi Ramachandran</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n\n          </div>"}, "last_serial": 4955649, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0ebe4f48bb60c7ebe1c4e83279357b45", "sha256": "9d818fea5e7c25c9b4e7db5caace88fa8359a4c8a78177167f07cad3804a1be9"}, "downloads": -1, "filename": "gym_http_server-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebe4f48bb60c7ebe1c4e83279357b45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14144, "upload_time": "2019-03-18T19:38:41", "upload_time_iso_8601": "2019-03-18T19:38:41.417497Z", "url": "https://files.pythonhosted.org/packages/36/a4/dbcba8c1cf84f8e3127200994aa7fc032a27d75222baf908bbede6f42422/gym_http_server-0.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ebe4f48bb60c7ebe1c4e83279357b45", "sha256": "9d818fea5e7c25c9b4e7db5caace88fa8359a4c8a78177167f07cad3804a1be9"}, "downloads": -1, "filename": "gym_http_server-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebe4f48bb60c7ebe1c4e83279357b45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14144, "upload_time": "2019-03-18T19:38:41", "upload_time_iso_8601": "2019-03-18T19:38:41.417497Z", "url": "https://files.pythonhosted.org/packages/36/a4/dbcba8c1cf84f8e3127200994aa7fc032a27d75222baf908bbede6f42422/gym_http_server-0.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:01 2020"}