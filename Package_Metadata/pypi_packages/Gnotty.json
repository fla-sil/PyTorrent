{"info": {"author": "Stephen McDonald", "author_email": "stephen.mc@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======\nGnotty\n======\n\nCreated by `Stephen McDonald <http://twitter.com/stephen_mcd>`_\n\nGnotty ties the knot between the web and IRC. It is designed to assist\nopen source projects that host an IRC channel for collaboration on\ntheir project.\nGnotty is `BSD licensed <http://www.linfo.org/bsdlicense.html>`_.\n\nGnotty is comprised of several parts. Primarily Gnotty provides a\nmodern web client and server for communicating with an IRC channel via\na web browser. The web server uses `gevent <http://www.gevent.org>`_\nand `WebSockets <http://en.wikipedia.org/wiki/WebSockets>`_, which\nprovides the communication layer between the IRC channel and the web\nbrowser. Twitter's `Bootstrap <http://twitter.github.com/bootstrap/>`_\nis used to style the web interface, providing a fully responsive\nlayout, suitable for use with mobile devices. Customisable templates\nare also provided for skinning the web interface.\n\nCheck out the `Gnotty live demo <http://gnotty.jupo.org>`_ to see the\nweb interface in action.\n\nSecondly, Gnotty provides the ability to run a highly customisable\nIRC bot. Different classes of bots can be configured on startup, and\nbots can perform different services such as message logging and\ninteracting with users in the IRC channel. Bots also contain webhooks,\nwhich allows bots to receive and act on input over HTTP from external\nservices.\n\nGnotty also provides an optional Django application that archives IRC\nmessages, for browsing and searching via a web interface. By default\nthe IRC bot uses Python's logging module to provide configurable\nlogging handlers for IRC messages. When the Django application is\nused, a logging handler is added that logs all IRC messages to the\nDjango project's database. The Django application then provides all\nthe necessary views and templates for messages to be searched by\nkeyword, or browsed by date using a calendar interface.\n\nNote that the Django application is entirely optional. Gnotty can\nbe run without using Django at all, as a stand-alone gevent web\nserver that provides the web interface to an IRC channel, with\nconfigurable IRC bots.\n\n\nInstallation\n============\n\nThe easiest way to install Gnotty is directly from PyPi using\n`pip <http://www.pip-installer.org>`_ by running the command below::\n\n    $ pip install -U gnotty\n\nOtherwise you can obtain Gnotty from the\n`GitHub <https://github.com/stephenmcd/gnotty>`_ or\n`Bitbucket <https://bitbucket.org/stephenmcd/gnotty>`_ repositories,\nand install it directly from source::\n\n    $ python setup.py install\n\n\nConfiguration\n=============\n\nGnotty is configured via a handful of settings. When integrated\nwith Django, these settings can be defined in your Django project's\n``settings.py`` module. When Gnotty is run as a stand-alone\nclient, these same settings can be defined via the command-line, or\nin a separate Python configuration module. See the \"Stand-Alone Web\nClient\" section below for details.\n\n  * ``GNOTTY_HTTP_HOST`` - HTTP host address to serve from.\n    *string, default: 127.0.0.1*\n  * ``GNOTTY_HTTP_PORT`` - HTTP port to serve from.\n    *integer, default: 8080*\n  * ``GNOTTY_IRC_HOST`` - IRC host address to connect to.\n    *string, default: irc.freenode.net*\n  * ``GNOTTY_IRC_PORT`` - IRC port to connect to.\n    *integer, default: 6667*\n  * ``GNOTTY_IRC_CHANNEL`` - IRC channel to join.\n    *string, default: #gnotty*\n  * ``GNOTTY_IRC_CHANNEL_KEY`` - Optional key required to access\n    the IRC channel.\n    *string, default: None*\n  * ``GNOTTY_BOT_CLASS`` - Dotted Python path to the IRC client bot\n    class to run.\n    *string, default: gnotty.bots.BaseBot*\n  * ``GNOTTY_BOT_NICKNAME`` - IRC nickname the logging client will\n    use.\n    *string, default: gnotty*\n  * ``GNOTTY_BOT_PASSWORD`` - Optional IRC password for the bot.\n    *string, default: None*\n  * ``GNOTTY_LOGIN_REQUIRED`` - Django login required for all URLs\n    (Django only)\n    *boolean, default: False*\n  * ``GNOTTY_DAEMON`` - run in daemon mode.\n    *boolean, default: False*\n  * ``GNOTTY_PID_FILE`` - path to write PID file to when in daemon\n    mode.\n    *string, default: [tmp]/gnotty-[http-host]-[http-port].pid*\n  * ``GNOTTY_LOG_LEVEL`` - Log level to use. ``DEBUG`` will spew out\n    all IRC data.\n    *string, default: INFO*\n\nTo be clear: the IRC host and port are for specifying the IRC server\nto connect to. The HTTP host and port are what will be used to host\nthe gevent/WebSocket server.\n\n\nDjango Integration\n==================\n\nWith the above settings defined in your Django project's\n``settings.py`` module, a few more steps are required. As with most\nDjango apps, add ``gnotty`` to your ``INSTALLED_APPS`` setting, and\n``gnotty.urls`` to your project's ``urls.py`` module::\n\n    # settings.py\n    INSTALLED_APPS = (\n        # other apps here\n        'gnotty',\n    )\n\n    # urls.py\n    from django.conf.urls.defaults import patterns, include, url\n    urlpatterns = patterns('',\n        # other patterns here\n        ('^irc/', include('gnotty.urls')),\n    )\n\nAs you can see we've mounted all of the urls Gnotty provides under\nthe prefix ``/irc/`` - feel free to use whatever suits you here. With\nthis prefix, the URL on our Django development server\n`http://127.0.0.1:8000/irc/ <http://127.0.0.1:8000/irc/>`_ will load\nthe chat interface to the IRC channel, along with a search form for\nsearching the message archive, and links to browsing the archive by\ndate.\n\nThe final step when integrated with Django is to run the Gnotty\nserver itself. The Gnotty server is backed by gevent, and will host\nthe WebSocket bridge to the IRC channel. It will also start up the\nIRC bot that will connect to the channel, and log all of the messages\nin the channel to the database archive.\n\nRunning the Gnotty server when integrated with Django is simply a\nmatter of running the ``gnottify`` Django management command::\n\n    $ python manage.py gnottify [options]\n\nNote that each of the configuration options can also be specified as\narguments to the ``gnottify`` management command. The names and\nformats used in this context are the same as those described next for\nthe stand-alone web client. Any options provided as command-line\narguments take precendence over those defined in your Django project's\n``settings.py`` module.\n\nThe ``gnottify_runserver`` command is also included, which will run\nboth the Gnotty server and Django's ``runserver`` command at once,\nwhich is useful during development.\n\nStand-Alone Web Client\n======================\n\nAs mentioned, Gnotty can also be run as a stand-alone web client\nwithout using Django at all. In this mode, only the web interface to\nthe IRC channel is provided, along with whichever IRC bot class is\nconfigured. Message logging can be configured using standard handlers\nfor the ``logging`` module in Python's standard library.\n\nOnce installed, the command ``gnottify`` should be available on your\nsystem, and all of the options described earlier can be provided as\narguments to it::\n\n    $ gnottify --help\n    Usage: gnottify [options]\n\n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      -a HOST, --http-host=HOST\n                            HTTP host address to serve from\n                            [default: 127.0.0.1]\n      -p PORT, --http-port=PORT\n                            HTTP port to serve from\n                            [default: 8080]\n      -A HOST, --irc-host=HOST\n                            IRC host address to connect to\n                            [default: irc.freenode.net]\n      -P PORT, --irc-port=PORT\n                            IRC port to connect to\n                            [default: 6667]\n      -C CHANNEL, --irc-channel=CHANNEL\n                            IRC channel to join\n                            [default: #gnotty]\n      -K CHANNEL_KEY, --irc-channel-key=CHANNEL_KEY\n                            Optional key required to access the IRC channel\n      -c DOTTED_PYTHON_PATH, --bot-class=DOTTED_PYTHON_PATH\n                            Dotted Python path to the IRC client bot class to run\n                            [default: gnotty.bots.LoggingBot]\n      -n NICKNAME, --bot-nickname=NICKNAME\n                            IRC nickname the bot will use\n                            [default: gnotty]\n       -x PASSWORD, --bot-password=PASSWORD\n                            Optional IRC password for the bot\n                            [default: None]\n      -D, --daemon          run in daemon mode\n      -k, --kill            Shuts down a previously started daemon\n      -F FILE_PATH, --pid-file=FILE_PATH\n                            path to write PID file to when in daemon mode\n      -l INFO|DEBUG, --log-level=INFO|DEBUG\n                            Log level to use. DEBUG will spew out all IRC\n                            data.\n                            [default: INFO]\n      -f FILE_PATH, --conf-file=FILE_PATH\n                            path to a Python config file to load options from\n\nNote the final argument in the list, ``--conf-file``. This can be used\nto provide the path to a Python config module, that contains each of\nthe settings described earlier. Any options provided via command-line\narguments will take precedence over any options defined in the Python\nconfiguration module.\n\n\nDaemon Mode\n===========\n\nGnotty can be configured to run as a background process when the\n``GNOTTY_DAEMON`` setting is set to ``True`` (the ``--daemon`` arg\nwhen running stand-alone). When in daemon mode, Gnotty will write its\nprocess ID to the absolute file path specfified by the\n``GNOTTY_PID_FILE`` setting (the ``--pid-file`` arg when running\nstand-alone). If the PID file path is not configured, Gnotty will use\na file name based on the HTTP host and port, in your operating\nsystem's location for temporary files.\n\nWhen run in daemon mode, Gnotty will check for an existing PID file\nand if found, will attempt to shut down a previously started server\nwith the same PID file.\n\n\nIRC Bots\n========\n\nWhen running, Gnotty hosts an IRC bot that will connect to the\nconfigured IRC channel. The ``gnotty.bots.BaseBot`` bot is run by\ndefault, which implements message logging and support for commands\nissued within the IRC channel, and webhooks, which allow the IRC\nbot to receive data over HTTP.\n\nYou can implement your own IRC bot simply by subclassing\n``gnotty.bots.BaseBot`` and defining the Python dotted path to it on\nstartup, via the ``GNOTTY_BOT_CLASS`` setting (the ``--bot-class`` arg\nwhen running stand-alone).\n\nThe ``gnotty.bots.BaseBot`` class is derived from the third-party\n``irclib`` package's ``irc.client.SimpleIRCClient`` class (and\ntranslated into a Python new-style class for sanity). The IRC\nbot will have all of the same methods and events available as the\n``SimpleIRCClient`` class.\n\nThese are the built-in IRC bot classes provided by the\n``gnotty.bots`` package:\n\n  * ``gnotty.bots.BaseBot`` - The default bot class that implements\n    logging and handling for commands and webhooks. Your custom bot\n    should subclass this.\n  * ``gnotty.bots.ChatBot`` - A bot that demonstrates interacting with\n    the IRC channel by greeting and responding to other users.\n    Requires the ``nltk`` package to be installed.\n  * ``gnotty.bots.commits.CommitMixin`` - A base bot mixin for\n    receiving commit information for version control systems via bot\n    webhooks, and relaying the commits to the IRC channel. Used as the\n    base for the ``GitHubBot`` and ``BitBucketBot`` bots.\n  * ``gnotty.bots.GitHubBot`` - ``CommitMixin`` subclass for\n    `GitHub <http://github.com>`_\n  * ``gnotty.bots.BitBucketBot`` - ``CommitMixin`` subclass for\n    `Bitbucket <http://bitbucket.org>`_\n  * ``gnotty.bots.CommandBot`` - A bot that implements a handful\n    of basic commands that can be issued by users in the channel.\n  * ``gnotty.bots.RSSBot`` - A bot that watches RSS feeds and posts\n    new items from them to the IRC channel.\n  * ``gnotty.bots.Voltron`` - All of the available bots, merged into\n    one `super bot <http://www.youtube.com/watch?v=tZZv5Z2Iz_s>`_.\n\nTake a look at the source code for the ``gnotty.bots`` package. You'll\nsee that the different features from all of the available bots are\nimplemented as mixins, which you can mix and match together when\nbuilding your own bot classes.\n\n\nBot Events\n==========\n\nGnotty's IRC bots make use of an event handling system. Event handlers\nare implemented as methods on any of the classes used to build a bot.\nEach event handler gets wrapped with the decorator\n``gnotty.bots.events.on``, which takes a single positional argument for\nthe event name and marks the method as being a handler for that event.\nThe decorator may also accept optional keyword arguments depending on\nthe type of event. Several types of events are available:\n\n  * IRC channel events, as implemented by the ``irclib`` package's\n    ``irc.client.SimpleIRCClient`` class.\n  * IRC commands, which are custom commands that can be triggered by\n    users in the IRC channel. Each of these take a ``command`` keyword\n    argument, which defines the command name.\n  * Timer events, which are handlers that are periodically run at a\n    defined time interval. Each of these take a ``seconds`` keyword\n    argument, which defines the time interval.\n  * Webhooks, which are handlers that accept data over HTTP. Each of\n    take a ``urlpattern`` keyword argument which defines a regular\n    expression to match against the webhook's URL, similar to Django's\n    ``urlpatterns``.\n\nHere's an example IRC bot that implements all the above event types::\n\n  from gnotty.bots import BaseBot, events\n\n  class MyBot(BaseBot):\n\n      @events.on(\"join\")\n      def my_join_handler(self, connection, event):\n          \"\"\"IRC channel event - someone joined the channel.\"\"\"\n          nickname = self.get_nickname(event)\n          self.message_channel(\"Hello %s\" nickname)\n\n      @events.on(\"timer\", seconds=10)\n      def my_timer(self):\n          \"\"\"Do something every 10 seconds.\"\"\"\n          msg = \"Another 10 seconds has passed, are you annoyed yet?\"\n          self.message_channel(msg)\n\n      @events.on(\"command\", command=\"!time\")\n      def my_time_command(self, connection, event):\n          \"\"\"Write the time to the channel when someone types !time\"\"\"\n          from datetime import datetime\n          return \"The date and time is %s\" % datetime.now()\n\n      @events.on(\"webhook\", urlpattern=\"^/webhook/do/something/$\")\n      def my_webhook_handler(self, environ, url, params):\n          \"\"\"Tell the channel that someone hit the webhook URL.\"\"\"\n          ip = environ[\"REMOTE_ADDR\"]\n          self.message_channel(\"The IP %s hit the URL %s\" (ip, url))\n\nGiven the above class in an importable Python module named ``my_bot.py``,\nGnotty can be started with the bot using the following arguments::\n\n  $ gnottify --http-host=127.0.0.1 --http-port=8000 --bot-class=my_bot.MyBot\n\n\nChannel Events\n==============\n\nAs described above, each of the IRC channel events implemented by the\n``irclib`` package's ``irc.client.SimpleIRCClient`` class are available\nas event handlers for an IRC bot. Consult the ``irclib`` docs or source\ncode for details about each of the IRC channel events that are\nimplemented, as documenting all of these is beyond the scope of this\ndocument. Here are some of the common events to get you started:\n\n  - ``events.on(\"welcome\")``: Bot has connected to the server but not\n    yet joined the channel.\n  - ``events.on(\"namreply\")``: Bot receives the initial list of\n    nicknames in the channel once joined.\n  - ``events.on(\"join\")``: Someone new joined the channel.\n  - ``events.on(\"quit\")``: Someone left the channel.\n  - ``events.on(\"pubmsg\")``: A message was sent to the channel.\n\nEach of the channel events receive a ``connection`` and ``event``\nargument, which are objects for the connection to the IRC server, and\ninformation about the event that occurred.\n\n\nCommand Events\n==============\n\nEvent handlers for simple commands can be implemented using the\n``command`` event name for the ``gnotty.bots.events.on`` decorator.\nThe decorator then takes a ``command`` keyword argument, which is the\ncommand name itself. Command events are then triggered by any public\nmessages in the channel that contain the command name as the first word\nin the message. Each subsequent word in the message after the command\nis then passed as a separate argument to the event handler method for\nthe command. In each command event handler method, the bot can then\nperform some task, and return a message back to the channel.\n\n\nTimer Events\n============\n\nThese event handlers are defined using the ``timer`` event name for the\n``gnotty.bots.events.on`` decorator, and simply run repeatedly at a\ngiven interval. A ``seconds`` keyword argument to the decorator defines\nthe interval in seconds as an integer. Note that the ``seconds``\nkeyword argument is used to ``sleep`` after each time the event handler\nis run, in order to implement the interval, so an interval of 30\nseconds won't necessarily run precisely twice per minute, since the\nevent handler itself will take time to execute, particularly if it\naccesses external resources over a network.\n\n\nWebhook Events\n==============\n\nIRC bots run by Gnotty contain the ability to receive data over HTTP\nvia webhooks. Webhooks are methods defined on the bot class with the\n``webhook`` event handler name specified for the\n``gnotty.bots.events.on`` decorator. The decorator also requires a\n``urlpattern`` keyword argument, which is a regular expression for\nmatching the webhook URL.\n\nThe gevent web server will intercept any URLs prefixed\nwith the path ``/webhook/``, and pass the request onto the bot which\nwill match the URL to any of the URL patterns defined by webhook event\nhandlers on the running bot class. A webhook event handler receives\nthe following arguments:\n\n  * ``environ`` - The raw environment dict supplied by the gevent web\n    server that contains all information about the HTTP request.\n  * ``url`` - The actual URL accessed.\n  * ``params`` - A dictionary containing all of the POST and GET data.\n\nNote that the ``url`` and ``params`` arguments are simply provided for\nextra convenience, as their values (and all other environment\ninformation) are already available via the ``environ`` argument.\n\n\nMessage Logging\n===============\n\nBy default, each IRC message in the channel is logged by the IRC bot\nrun by Gnotty. Logging occurs using `Python's logging module\n<http://docs.python.org/library/logging.html>`_, to the logger named\n``irc.message``.\n\nEach log record contains the following attributes, where ``record`` is\nthe log record instance:\n\n  * ``record.server`` - The IRC server the message occurred on.\n  * ``record.channel`` - The IRC channel the message occurred on.\n  * ``record.nickname`` - The nickname of the user who sent the\n    message.\n  * ``record.msg`` - The actual message string itself.\n  * ``record.join_or_leave`` - ``True`` if the record was for a user\n    joining or leaving the channel, otherwise ``False``.\n\nHere's an example of adding an extra logging handler for IRC messages::\n\n  from logging import getLogger, StreamHandler\n\n  class MyLogHandler(StreamHandler):\n      def emit(self, record):\n          # Do something cool with the log record.\n          print record.msg\n\n  getLogger(\"irc.message\").addHandler(MyLogHandler())\n\n\nJavaScript Client\n=================\n\nThe web client that Gnotty provides includes all the necessary\nJavaScript files for communicating with the WebSocket server, such as\nDouglas Crockford's ``json2.js``, and the ``socket.io.js`` library\nitself. Also provided is the file ``gnotty.js`` which implements a\ncouple of public functions used by the web interface. The first is the\n``gnotty`` JavaScript function, which deals directly with the HTML\nstructure of the chat template::\n\n    // Start up the default UI. This function isn't very\n    // interesting, since it's bound to the HTML provided\n    // by Gnotty's chat template.\n    gnotty({\n        httpHost:     '127.0.0.1',\n        httpPort:     '8080',\n        ircHost:      'irc.freenode.net',\n        ircPort:      '6667',\n        ircChannel:   '#gnotty'\n    });\n\nThe second interface is the ``IRCClient`` function. This is of\nparticular interest if you'd like to create your own chat interface,\nas it deals exclusively with communication between the web browser and\nthe WebSocket server. Here's an example client that simply writes\nevents out to the console::\n\n    // Prompt the user for a nickname and password,\n    // and create an IRC client.\n    var client = new IRCClient({\n        httpHost:     '127.0.0.1',\n        httpPort:     '8080',\n        ircHost:      'irc.freenode.net',\n        ircPort:      '6667',\n        ircChannel:   '#gnotty',\n        ircNickname:  prompt('Enter a nickname:')\n        ircPassword:  prompt('Enter a password (optional):')\n    });\n\n    // When the client first joins the IRC channel,\n    // send a message to the channel to say hello.\n    client.onJoin = function() {\n        console.log('joined the channel');\n        client.message('Hello, is it me you\\'re looking for?');\n    };\n\n    // When someone joins or leaves the channel, we're given the\n    // entire user list. It'a an array of objects, each with a\n    // nickname and color property.\n    client.onNicknames = function(nicknames) {\n        nicknames = $.map(nicknames, function(obj) {\n            return obj.nickname;\n        }).join(', ');\n        console.log('The user list changed, here it is: ' + nicknames);\n    });\n\n    // Whenever a message is received from the channel, it's an\n    // object with nickname, message and color properties.\n    client.onMessage = function(data) {\n        console.log(data.nickname + ' wrote: ' + data.message);\n    });\n\n    // When we leave, reload the page.\n    client.onLeave = function() {\n        location.reload();\n    };\n\n    // The IRC server rejected the nickname.\n    client.onInvalid = function() {\n        console.log('Invalid nickname, please try again.');\n    };\n\nAs you may have guessed, the server-side settings configured for\nGnotty are passed directly into the ``gnotty`` JavaScript function,\nwhich then creates its own ``IRCClient`` instance.\n\nYou'll also see the data sent to the ``onMessage`` and ``onNickname``\nevents contain color values that the interface can use for colorizing\nnicknames. These are calculated on the server, so that both the chat\ninterface and message archive produce consistent colors every time\na particular nickname is displayed.\n\n\nHosting Private Chat Rooms\n==========================\n\nCreating a private login-protected chat room for your team members\nto collaborate on is a breeze using Gnotty. By setting the\n``GNOTTY_LOGIN_REQUIRED`` setting to ``True``, Gnotty will require\neach user to have a Django user account which they can authenticate\nwith. The following steps should get you started:\n\n  * Create a Django project with Gnotty installed, using the steps\n    described above under `Django Integration`. Take a look at the\n    ``example_project`` directory within Gnotty, which contains a\n    working Django project with Gnotty configured.\n  * Install an IRC server such as `ngIRCd <http://ngircd.barton.de/>`_.\n    ngIRCd can be installed on both Linux or OSX with a single command\n    (this works great for local development on OSX). Be sure to\n    configure ngIRCd to only allow local connections, so that only\n    Gnotty can connect to it.\n\nWith the above setup, all that is then needed are the following\nGnotty settings configured in your Django project's ``settings.py``\nmodule::\n\n    GNOTTY_IRC_HOST = \"127.0.0.1\"\n    GNOTTY_LOGIN_REQUIRED = True\n    GNOTTY_IRC_CHANNEL = \"#mychannel\"  # This can be anything really.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/stephenmcd/gnotty", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "Gnotty", "package_url": "https://pypi.org/project/Gnotty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Gnotty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/stephenmcd/gnotty"}, "release_url": "https://pypi.org/project/Gnotty/0.2.7/", "requires_dist": null, "requires_python": null, "summary": "Gnotty ties the knot between the web and IRC. It is a web client and message archive for IRC.", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            ======<br>Gnotty<br>======<br><br>Created by `Stephen McDonald &lt;http://twitter.com/stephen_mcd&gt;`_<br><br>Gnotty ties the knot between the web and IRC. It is designed to assist<br>open source projects that host an IRC channel for collaboration on<br>their project.<br>Gnotty is `BSD licensed &lt;http://www.linfo.org/bsdlicense.html&gt;`_.<br><br>Gnotty is comprised of several parts. Primarily Gnotty provides a<br>modern web client and server for communicating with an IRC channel via<br>a web browser. The web server uses `gevent &lt;http://www.gevent.org&gt;`_<br>and `WebSockets &lt;http://en.wikipedia.org/wiki/WebSockets&gt;`_, which<br>provides the communication layer between the IRC channel and the web<br>browser. Twitter's `Bootstrap &lt;http://twitter.github.com/bootstrap/&gt;`_<br>is used to style the web interface, providing a fully responsive<br>layout, suitable for use with mobile devices. Customisable templates<br>are also provided for skinning the web interface.<br><br>Check out the `Gnotty live demo &lt;http://gnotty.jupo.org&gt;`_ to see the<br>web interface in action.<br><br>Secondly, Gnotty provides the ability to run a highly customisable<br>IRC bot. Different classes of bots can be configured on startup, and<br>bots can perform different services such as message logging and<br>interacting with users in the IRC channel. Bots also contain webhooks,<br>which allows bots to receive and act on input over HTTP from external<br>services.<br><br>Gnotty also provides an optional Django application that archives IRC<br>messages, for browsing and searching via a web interface. By default<br>the IRC bot uses Python's logging module to provide configurable<br>logging handlers for IRC messages. When the Django application is<br>used, a logging handler is added that logs all IRC messages to the<br>Django project's database. The Django application then provides all<br>the necessary views and templates for messages to be searched by<br>keyword, or browsed by date using a calendar interface.<br><br>Note that the Django application is entirely optional. Gnotty can<br>be run without using Django at all, as a stand-alone gevent web<br>server that provides the web interface to an IRC channel, with<br>configurable IRC bots.<br><br><br>Installation<br>============<br><br>The easiest way to install Gnotty is directly from PyPi using<br>`pip &lt;http://www.pip-installer.org&gt;`_ by running the command below::<br><br>    $ pip install -U gnotty<br><br>Otherwise you can obtain Gnotty from the<br>`GitHub &lt;https://github.com/stephenmcd/gnotty&gt;`_ or<br>`Bitbucket &lt;https://bitbucket.org/stephenmcd/gnotty&gt;`_ repositories,<br>and install it directly from source::<br><br>    $ python setup.py install<br><br><br>Configuration<br>=============<br><br>Gnotty is configured via a handful of settings. When integrated<br>with Django, these settings can be defined in your Django project's<br>``settings.py`` module. When Gnotty is run as a stand-alone<br>client, these same settings can be defined via the command-line, or<br>in a separate Python configuration module. See the \"Stand-Alone Web<br>Client\" section below for details.<br><br>  * ``GNOTTY_HTTP_HOST`` - HTTP host address to serve from.<br>    *string, default: 127.0.0.1*<br>  * ``GNOTTY_HTTP_PORT`` - HTTP port to serve from.<br>    *integer, default: 8080*<br>  * ``GNOTTY_IRC_HOST`` - IRC host address to connect to.<br>    *string, default: irc.freenode.net*<br>  * ``GNOTTY_IRC_PORT`` - IRC port to connect to.<br>    *integer, default: 6667*<br>  * ``GNOTTY_IRC_CHANNEL`` - IRC channel to join.<br>    *string, default: #gnotty*<br>  * ``GNOTTY_IRC_CHANNEL_KEY`` - Optional key required to access<br>    the IRC channel.<br>    *string, default: None*<br>  * ``GNOTTY_BOT_CLASS`` - Dotted Python path to the IRC client bot<br>    class to run.<br>    *string, default: gnotty.bots.BaseBot*<br>  * ``GNOTTY_BOT_NICKNAME`` - IRC nickname the logging client will<br>    use.<br>    *string, default: gnotty*<br>  * ``GNOTTY_BOT_PASSWORD`` - Optional IRC password for the bot.<br>    *string, default: None*<br>  * ``GNOTTY_LOGIN_REQUIRED`` - Django login required for all URLs<br>    (Django only)<br>    *boolean, default: False*<br>  * ``GNOTTY_DAEMON`` - run in daemon mode.<br>    *boolean, default: False*<br>  * ``GNOTTY_PID_FILE`` - path to write PID file to when in daemon<br>    mode.<br>    *string, default: [tmp]/gnotty-[http-host]-[http-port].pid*<br>  * ``GNOTTY_LOG_LEVEL`` - Log level to use. ``DEBUG`` will spew out<br>    all IRC data.<br>    *string, default: INFO*<br><br>To be clear: the IRC host and port are for specifying the IRC server<br>to connect to. The HTTP host and port are what will be used to host<br>the gevent/WebSocket server.<br><br><br>Django Integration<br>==================<br><br>With the above settings defined in your Django project's<br>``settings.py`` module, a few more steps are required. As with most<br>Django apps, add ``gnotty`` to your ``INSTALLED_APPS`` setting, and<br>``gnotty.urls`` to your project's ``urls.py`` module::<br><br>    # settings.py<br>    INSTALLED_APPS = (<br>        # other apps here<br>        'gnotty',<br>    )<br><br>    # urls.py<br>    from django.conf.urls.defaults import patterns, include, url<br>    urlpatterns = patterns('',<br>        # other patterns here<br>        ('^irc/', include('gnotty.urls')),<br>    )<br><br>As you can see we've mounted all of the urls Gnotty provides under<br>the prefix ``/irc/`` - feel free to use whatever suits you here. With<br>this prefix, the URL on our Django development server<br>`http://127.0.0.1:8000/irc/ &lt;http://127.0.0.1:8000/irc/&gt;`_ will load<br>the chat interface to the IRC channel, along with a search form for<br>searching the message archive, and links to browsing the archive by<br>date.<br><br>The final step when integrated with Django is to run the Gnotty<br>server itself. The Gnotty server is backed by gevent, and will host<br>the WebSocket bridge to the IRC channel. It will also start up the<br>IRC bot that will connect to the channel, and log all of the messages<br>in the channel to the database archive.<br><br>Running the Gnotty server when integrated with Django is simply a<br>matter of running the ``gnottify`` Django management command::<br><br>    $ python manage.py gnottify [options]<br><br>Note that each of the configuration options can also be specified as<br>arguments to the ``gnottify`` management command. The names and<br>formats used in this context are the same as those described next for<br>the stand-alone web client. Any options provided as command-line<br>arguments take precendence over those defined in your Django project's<br>``settings.py`` module.<br><br>The ``gnottify_runserver`` command is also included, which will run<br>both the Gnotty server and Django's ``runserver`` command at once,<br>which is useful during development.<br><br>Stand-Alone Web Client<br>======================<br><br>As mentioned, Gnotty can also be run as a stand-alone web client<br>without using Django at all. In this mode, only the web interface to<br>the IRC channel is provided, along with whichever IRC bot class is<br>configured. Message logging can be configured using standard handlers<br>for the ``logging`` module in Python's standard library.<br><br>Once installed, the command ``gnottify`` should be available on your<br>system, and all of the options described earlier can be provided as<br>arguments to it::<br><br>    $ gnottify --help<br>    Usage: gnottify [options]<br><br>    Options:<br>      --version             show program's version number and exit<br>      -h, --help            show this help message and exit<br>      -a HOST, --http-host=HOST<br>                            HTTP host address to serve from<br>                            [default: 127.0.0.1]<br>      -p PORT, --http-port=PORT<br>                            HTTP port to serve from<br>                            [default: 8080]<br>      -A HOST, --irc-host=HOST<br>                            IRC host address to connect to<br>                            [default: irc.freenode.net]<br>      -P PORT, --irc-port=PORT<br>                            IRC port to connect to<br>                            [default: 6667]<br>      -C CHANNEL, --irc-channel=CHANNEL<br>                            IRC channel to join<br>                            [default: #gnotty]<br>      -K CHANNEL_KEY, --irc-channel-key=CHANNEL_KEY<br>                            Optional key required to access the IRC channel<br>      -c DOTTED_PYTHON_PATH, --bot-class=DOTTED_PYTHON_PATH<br>                            Dotted Python path to the IRC client bot class to run<br>                            [default: gnotty.bots.LoggingBot]<br>      -n NICKNAME, --bot-nickname=NICKNAME<br>                            IRC nickname the bot will use<br>                            [default: gnotty]<br>       -x PASSWORD, --bot-password=PASSWORD<br>                            Optional IRC password for the bot<br>                            [default: None]<br>      -D, --daemon          run in daemon mode<br>      -k, --kill            Shuts down a previously started daemon<br>      -F FILE_PATH, --pid-file=FILE_PATH<br>                            path to write PID file to when in daemon mode<br>      -l INFO|DEBUG, --log-level=INFO|DEBUG<br>                            Log level to use. DEBUG will spew out all IRC<br>                            data.<br>                            [default: INFO]<br>      -f FILE_PATH, --conf-file=FILE_PATH<br>                            path to a Python config file to load options from<br><br>Note the final argument in the list, ``--conf-file``. This can be used<br>to provide the path to a Python config module, that contains each of<br>the settings described earlier. Any options provided via command-line<br>arguments will take precedence over any options defined in the Python<br>configuration module.<br><br><br>Daemon Mode<br>===========<br><br>Gnotty can be configured to run as a background process when the<br>``GNOTTY_DAEMON`` setting is set to ``True`` (the ``--daemon`` arg<br>when running stand-alone). When in daemon mode, Gnotty will write its<br>process ID to the absolute file path specfified by the<br>``GNOTTY_PID_FILE`` setting (the ``--pid-file`` arg when running<br>stand-alone). If the PID file path is not configured, Gnotty will use<br>a file name based on the HTTP host and port, in your operating<br>system's location for temporary files.<br><br>When run in daemon mode, Gnotty will check for an existing PID file<br>and if found, will attempt to shut down a previously started server<br>with the same PID file.<br><br><br>IRC Bots<br>========<br><br>When running, Gnotty hosts an IRC bot that will connect to the<br>configured IRC channel. The ``gnotty.bots.BaseBot`` bot is run by<br>default, which implements message logging and support for commands<br>issued within the IRC channel, and webhooks, which allow the IRC<br>bot to receive data over HTTP.<br><br>You can implement your own IRC bot simply by subclassing<br>``gnotty.bots.BaseBot`` and defining the Python dotted path to it on<br>startup, via the ``GNOTTY_BOT_CLASS`` setting (the ``--bot-class`` arg<br>when running stand-alone).<br><br>The ``gnotty.bots.BaseBot`` class is derived from the third-party<br>``irclib`` package's ``irc.client.SimpleIRCClient`` class (and<br>translated into a Python new-style class for sanity). The IRC<br>bot will have all of the same methods and events available as the<br>``SimpleIRCClient`` class.<br><br>These are the built-in IRC bot classes provided by the<br>``gnotty.bots`` package:<br><br>  * ``gnotty.bots.BaseBot`` - The default bot class that implements<br>    logging and handling for commands and webhooks. Your custom bot<br>    should subclass this.<br>  * ``gnotty.bots.ChatBot`` - A bot that demonstrates interacting with<br>    the IRC channel by greeting and responding to other users.<br>    Requires the ``nltk`` package to be installed.<br>  * ``gnotty.bots.commits.CommitMixin`` - A base bot mixin for<br>    receiving commit information for version control systems via bot<br>    webhooks, and relaying the commits to the IRC channel. Used as the<br>    base for the ``GitHubBot`` and ``BitBucketBot`` bots.<br>  * ``gnotty.bots.GitHubBot`` - ``CommitMixin`` subclass for<br>    `GitHub &lt;http://github.com&gt;`_<br>  * ``gnotty.bots.BitBucketBot`` - ``CommitMixin`` subclass for<br>    `Bitbucket &lt;http://bitbucket.org&gt;`_<br>  * ``gnotty.bots.CommandBot`` - A bot that implements a handful<br>    of basic commands that can be issued by users in the channel.<br>  * ``gnotty.bots.RSSBot`` - A bot that watches RSS feeds and posts<br>    new items from them to the IRC channel.<br>  * ``gnotty.bots.Voltron`` - All of the available bots, merged into<br>    one `super bot &lt;http://www.youtube.com/watch?v=tZZv5Z2Iz_s&gt;`_.<br><br>Take a look at the source code for the ``gnotty.bots`` package. You'll<br>see that the different features from all of the available bots are<br>implemented as mixins, which you can mix and match together when<br>building your own bot classes.<br><br><br>Bot Events<br>==========<br><br>Gnotty's IRC bots make use of an event handling system. Event handlers<br>are implemented as methods on any of the classes used to build a bot.<br>Each event handler gets wrapped with the decorator<br>``gnotty.bots.events.on``, which takes a single positional argument for<br>the event name and marks the method as being a handler for that event.<br>The decorator may also accept optional keyword arguments depending on<br>the type of event. Several types of events are available:<br><br>  * IRC channel events, as implemented by the ``irclib`` package's<br>    ``irc.client.SimpleIRCClient`` class.<br>  * IRC commands, which are custom commands that can be triggered by<br>    users in the IRC channel. Each of these take a ``command`` keyword<br>    argument, which defines the command name.<br>  * Timer events, which are handlers that are periodically run at a<br>    defined time interval. Each of these take a ``seconds`` keyword<br>    argument, which defines the time interval.<br>  * Webhooks, which are handlers that accept data over HTTP. Each of<br>    take a ``urlpattern`` keyword argument which defines a regular<br>    expression to match against the webhook's URL, similar to Django's<br>    ``urlpatterns``.<br><br>Here's an example IRC bot that implements all the above event types::<br><br>  from gnotty.bots import BaseBot, events<br><br>  class MyBot(BaseBot):<br><br>      @events.on(\"join\")<br>      def my_join_handler(self, connection, event):<br>          \"\"\"IRC channel event - someone joined the channel.\"\"\"<br>          nickname = self.get_nickname(event)<br>          self.message_channel(\"Hello %s\" nickname)<br><br>      @events.on(\"timer\", seconds=10)<br>      def my_timer(self):<br>          \"\"\"Do something every 10 seconds.\"\"\"<br>          msg = \"Another 10 seconds has passed, are you annoyed yet?\"<br>          self.message_channel(msg)<br><br>      @events.on(\"command\", command=\"!time\")<br>      def my_time_command(self, connection, event):<br>          \"\"\"Write the time to the channel when someone types !time\"\"\"<br>          from datetime import datetime<br>          return \"The date and time is %s\" % datetime.now()<br><br>      @events.on(\"webhook\", urlpattern=\"^/webhook/do/something/$\")<br>      def my_webhook_handler(self, environ, url, params):<br>          \"\"\"Tell the channel that someone hit the webhook URL.\"\"\"<br>          ip = environ[\"REMOTE_ADDR\"]<br>          self.message_channel(\"The IP %s hit the URL %s\" (ip, url))<br><br>Given the above class in an importable Python module named ``my_bot.py``,<br>Gnotty can be started with the bot using the following arguments::<br><br>  $ gnottify --http-host=127.0.0.1 --http-port=8000 --bot-class=my_bot.MyBot<br><br><br>Channel Events<br>==============<br><br>As described above, each of the IRC channel events implemented by the<br>``irclib`` package's ``irc.client.SimpleIRCClient`` class are available<br>as event handlers for an IRC bot. Consult the ``irclib`` docs or source<br>code for details about each of the IRC channel events that are<br>implemented, as documenting all of these is beyond the scope of this<br>document. Here are some of the common events to get you started:<br><br>  - ``events.on(\"welcome\")``: Bot has connected to the server but not<br>    yet joined the channel.<br>  - ``events.on(\"namreply\")``: Bot receives the initial list of<br>    nicknames in the channel once joined.<br>  - ``events.on(\"join\")``: Someone new joined the channel.<br>  - ``events.on(\"quit\")``: Someone left the channel.<br>  - ``events.on(\"pubmsg\")``: A message was sent to the channel.<br><br>Each of the channel events receive a ``connection`` and ``event``<br>argument, which are objects for the connection to the IRC server, and<br>information about the event that occurred.<br><br><br>Command Events<br>==============<br><br>Event handlers for simple commands can be implemented using the<br>``command`` event name for the ``gnotty.bots.events.on`` decorator.<br>The decorator then takes a ``command`` keyword argument, which is the<br>command name itself. Command events are then triggered by any public<br>messages in the channel that contain the command name as the first word<br>in the message. Each subsequent word in the message after the command<br>is then passed as a separate argument to the event handler method for<br>the command. In each command event handler method, the bot can then<br>perform some task, and return a message back to the channel.<br><br><br>Timer Events<br>============<br><br>These event handlers are defined using the ``timer`` event name for the<br>``gnotty.bots.events.on`` decorator, and simply run repeatedly at a<br>given interval. A ``seconds`` keyword argument to the decorator defines<br>the interval in seconds as an integer. Note that the ``seconds``<br>keyword argument is used to ``sleep`` after each time the event handler<br>is run, in order to implement the interval, so an interval of 30<br>seconds won't necessarily run precisely twice per minute, since the<br>event handler itself will take time to execute, particularly if it<br>accesses external resources over a network.<br><br><br>Webhook Events<br>==============<br><br>IRC bots run by Gnotty contain the ability to receive data over HTTP<br>via webhooks. Webhooks are methods defined on the bot class with the<br>``webhook`` event handler name specified for the<br>``gnotty.bots.events.on`` decorator. The decorator also requires a<br>``urlpattern`` keyword argument, which is a regular expression for<br>matching the webhook URL.<br><br>The gevent web server will intercept any URLs prefixed<br>with the path ``/webhook/``, and pass the request onto the bot which<br>will match the URL to any of the URL patterns defined by webhook event<br>handlers on the running bot class. A webhook event handler receives<br>the following arguments:<br><br>  * ``environ`` - The raw environment dict supplied by the gevent web<br>    server that contains all information about the HTTP request.<br>  * ``url`` - The actual URL accessed.<br>  * ``params`` - A dictionary containing all of the POST and GET data.<br><br>Note that the ``url`` and ``params`` arguments are simply provided for<br>extra convenience, as their values (and all other environment<br>information) are already available via the ``environ`` argument.<br><br><br>Message Logging<br>===============<br><br>By default, each IRC message in the channel is logged by the IRC bot<br>run by Gnotty. Logging occurs using `Python's logging module<br>&lt;http://docs.python.org/library/logging.html&gt;`_, to the logger named<br>``irc.message``.<br><br>Each log record contains the following attributes, where ``record`` is<br>the log record instance:<br><br>  * ``record.server`` - The IRC server the message occurred on.<br>  * ``record.channel`` - The IRC channel the message occurred on.<br>  * ``record.nickname`` - The nickname of the user who sent the<br>    message.<br>  * ``record.msg`` - The actual message string itself.<br>  * ``record.join_or_leave`` - ``True`` if the record was for a user<br>    joining or leaving the channel, otherwise ``False``.<br><br>Here's an example of adding an extra logging handler for IRC messages::<br><br>  from logging import getLogger, StreamHandler<br><br>  class MyLogHandler(StreamHandler):<br>      def emit(self, record):<br>          # Do something cool with the log record.<br>          print record.msg<br><br>  getLogger(\"irc.message\").addHandler(MyLogHandler())<br><br><br>JavaScript Client<br>=================<br><br>The web client that Gnotty provides includes all the necessary<br>JavaScript files for communicating with the WebSocket server, such as<br>Douglas Crockford's ``json2.js``, and the ``socket.io.js`` library<br>itself. Also provided is the file ``gnotty.js`` which implements a<br>couple of public functions used by the web interface. The first is the<br>``gnotty`` JavaScript function, which deals directly with the HTML<br>structure of the chat template::<br><br>    // Start up the default UI. This function isn't very<br>    // interesting, since it's bound to the HTML provided<br>    // by Gnotty's chat template.<br>    gnotty({<br>        httpHost:     '127.0.0.1',<br>        httpPort:     '8080',<br>        ircHost:      'irc.freenode.net',<br>        ircPort:      '6667',<br>        ircChannel:   '#gnotty'<br>    });<br><br>The second interface is the ``IRCClient`` function. This is of<br>particular interest if you'd like to create your own chat interface,<br>as it deals exclusively with communication between the web browser and<br>the WebSocket server. Here's an example client that simply writes<br>events out to the console::<br><br>    // Prompt the user for a nickname and password,<br>    // and create an IRC client.<br>    var client = new IRCClient({<br>        httpHost:     '127.0.0.1',<br>        httpPort:     '8080',<br>        ircHost:      'irc.freenode.net',<br>        ircPort:      '6667',<br>        ircChannel:   '#gnotty',<br>        ircNickname:  prompt('Enter a nickname:')<br>        ircPassword:  prompt('Enter a password (optional):')<br>    });<br><br>    // When the client first joins the IRC channel,<br>    // send a message to the channel to say hello.<br>    client.onJoin = function() {<br>        console.log('joined the channel');<br>        client.message('Hello, is it me you\\'re looking for?');<br>    };<br><br>    // When someone joins or leaves the channel, we're given the<br>    // entire user list. It'a an array of objects, each with a<br>    // nickname and color property.<br>    client.onNicknames = function(nicknames) {<br>        nicknames = $.map(nicknames, function(obj) {<br>            return obj.nickname;<br>        }).join(', ');<br>        console.log('The user list changed, here it is: ' + nicknames);<br>    });<br><br>    // Whenever a message is received from the channel, it's an<br>    // object with nickname, message and color properties.<br>    client.onMessage = function(data) {<br>        console.log(data.nickname + ' wrote: ' + data.message);<br>    });<br><br>    // When we leave, reload the page.<br>    client.onLeave = function() {<br>        location.reload();<br>    };<br><br>    // The IRC server rejected the nickname.<br>    client.onInvalid = function() {<br>        console.log('Invalid nickname, please try again.');<br>    };<br><br>As you may have guessed, the server-side settings configured for<br>Gnotty are passed directly into the ``gnotty`` JavaScript function,<br>which then creates its own ``IRCClient`` instance.<br><br>You'll also see the data sent to the ``onMessage`` and ``onNickname``<br>events contain color values that the interface can use for colorizing<br>nicknames. These are calculated on the server, so that both the chat<br>interface and message archive produce consistent colors every time<br>a particular nickname is displayed.<br><br><br>Hosting Private Chat Rooms<br>==========================<br><br>Creating a private login-protected chat room for your team members<br>to collaborate on is a breeze using Gnotty. By setting the<br>``GNOTTY_LOGIN_REQUIRED`` setting to ``True``, Gnotty will require<br>each user to have a Django user account which they can authenticate<br>with. The following steps should get you started:<br><br>  * Create a Django project with Gnotty installed, using the steps<br>    described above under `Django Integration`. Take a look at the<br>    ``example_project`` directory within Gnotty, which contains a<br>    working Django project with Gnotty configured.<br>  * Install an IRC server such as `ngIRCd &lt;http://ngircd.barton.de/&gt;`_.<br>    ngIRCd can be installed on both Linux or OSX with a single command<br>    (this works great for local development on OSX). Be sure to<br>    configure ngIRCd to only allow local connections, so that only<br>    Gnotty can connect to it.<br><br>With the above setup, all that is then needed are the following<br>Gnotty settings configured in your Django project's ``settings.py``<br>module::<br><br>    GNOTTY_IRC_HOST = \"127.0.0.1\"<br>    GNOTTY_LOGIN_REQUIRED = True<br>    GNOTTY_IRC_CHANNEL = \"#mychannel\"  # This can be anything really.\n          </div>"}, "last_serial": 1727450, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b14aaee021720695be145607ec86eda5", "sha256": "c1a39c5f2b3b23f0beb5160a8e08ec69cce0570ac2ac067c89180de3e7400764"}, "downloads": -1, "filename": "Gnotty-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b14aaee021720695be145607ec86eda5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 301083, "upload_time": "2012-11-18T05:49:56", "upload_time_iso_8601": "2012-11-18T05:49:56.626829Z", "url": "https://files.pythonhosted.org/packages/69/ad/712a1c15026c531d4b899baa8aad247fe451820c81c540c46a9e03a61c4b/Gnotty-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e6fbc2a418867cf3ad09e65b2ec99b7c", "sha256": "6db64a3bb38c447baee992be5608eac4edc6820faa06405f703c91e73ebe38ff"}, "downloads": -1, "filename": "Gnotty-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e6fbc2a418867cf3ad09e65b2ec99b7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 508142, "upload_time": "2012-12-25T05:43:16", "upload_time_iso_8601": "2012-12-25T05:43:16.034972Z", "url": "https://files.pythonhosted.org/packages/80/83/7e22ef34e702bc2f098d4a9ffeb5d926fe62799e821d98ba6f2cdd53c4e5/Gnotty-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e4d5c47f75ff95c2d6a833ba207a97c7", "sha256": "5548351cb33b398e43e0556647ed7dad057ba96c2f92329bc727eac35e0b0c4f"}, "downloads": -1, "filename": "Gnotty-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e4d5c47f75ff95c2d6a833ba207a97c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 508497, "upload_time": "2013-01-27T13:27:05", "upload_time_iso_8601": "2013-01-27T13:27:05.521109Z", "url": "https://files.pythonhosted.org/packages/da/d3/a6c7efd1ff7e1c870f3f8d6821d36b8fe4ba3c2d21044d31952448614ccc/Gnotty-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "22266e85dba6ec99dd506cff075d7196", "sha256": "25e8959efea0514203ca4ef370129a9386c2b00a52f16e4168a8eeefcca05807"}, "downloads": -1, "filename": "Gnotty-0.2.2.tar.gz", "has_sig": false, "md5_digest": "22266e85dba6ec99dd506cff075d7196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 508952, "upload_time": "2013-02-17T09:03:36", "upload_time_iso_8601": "2013-02-17T09:03:36.633545Z", "url": "https://files.pythonhosted.org/packages/07/1d/250ba8885d7a4509be0395ef37834bce053dbc337b61b1891ade98960017/Gnotty-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b239cc7eccf305594d0efca696dc0edd", "sha256": "60694e8f8a08bff72a8feeee16cf9cf734fd81f88ecee56a29f8098335dd0e99"}, "downloads": -1, "filename": "Gnotty-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b239cc7eccf305594d0efca696dc0edd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 509191, "upload_time": "2013-02-23T09:25:16", "upload_time_iso_8601": "2013-02-23T09:25:16.315868Z", "url": "https://files.pythonhosted.org/packages/56/23/af36773281c2341dec16c9e3a91f2d07ab190077e9520915a4bcced2b60a/Gnotty-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "06106846abf1c0e5dafed80cedf199e9", "sha256": "2b570eee051061b75334210fac4f9efd12ae20709a2924b0f17b4dbc94bc7e0e"}, "downloads": -1, "filename": "Gnotty-0.2.4.tar.gz", "has_sig": false, "md5_digest": "06106846abf1c0e5dafed80cedf199e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 293465, "upload_time": "2013-03-06T23:29:17", "upload_time_iso_8601": "2013-03-06T23:29:17.460949Z", "url": "https://files.pythonhosted.org/packages/80/54/f29679d2ba2261f5c48d28f898336efd1af15bfd3e91d809e7a5fd99ecdd/Gnotty-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "571867075b33523f513706e91d5f36cc", "sha256": "a186500dc5cee40b07ebccfbd525537b5abc850982b50801343d17e220534c01"}, "downloads": -1, "filename": "Gnotty-0.2.5.tar.gz", "has_sig": false, "md5_digest": "571867075b33523f513706e91d5f36cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 565120, "upload_time": "2013-03-30T01:55:38", "upload_time_iso_8601": "2013-03-30T01:55:38.105095Z", "url": "https://files.pythonhosted.org/packages/34/9b/3cd8219be396033601aed7df3e1ddc27de5bd8bab07afd26649dc47c622d/Gnotty-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c60685f2ab0a8e1c47b3cefa20ec19fb", "sha256": "41c08866f1650dc523d025d84da56d4521ffd36d821dded1f1741ce7f8859e52"}, "downloads": -1, "filename": "Gnotty-0.2.6.tar.gz", "has_sig": false, "md5_digest": "c60685f2ab0a8e1c47b3cefa20ec19fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 299106, "upload_time": "2014-02-20T09:38:45", "upload_time_iso_8601": "2014-02-20T09:38:45.177223Z", "url": "https://files.pythonhosted.org/packages/f5/7c/54d2cdf3f859ab4142c8577342df30615167cd5e499b2f349c475648954f/Gnotty-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "cfbd433c854529ea554017a63b9c07ed", "sha256": "f1e76390fa5007b14d9fdf25c2e244af25c850ec936bff7e11fe01a0816be2ee"}, "downloads": -1, "filename": "Gnotty-0.2.7.tar.gz", "has_sig": false, "md5_digest": "cfbd433c854529ea554017a63b9c07ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 293444, "upload_time": "2015-09-17T23:42:11", "upload_time_iso_8601": "2015-09-17T23:42:11.189362Z", "url": "https://files.pythonhosted.org/packages/ea/f8/efd496dae831d71ab701b337957a4c0494a03d0961c919ad3ca8fa08dee8/Gnotty-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfbd433c854529ea554017a63b9c07ed", "sha256": "f1e76390fa5007b14d9fdf25c2e244af25c850ec936bff7e11fe01a0816be2ee"}, "downloads": -1, "filename": "Gnotty-0.2.7.tar.gz", "has_sig": false, "md5_digest": "cfbd433c854529ea554017a63b9c07ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 293444, "upload_time": "2015-09-17T23:42:11", "upload_time_iso_8601": "2015-09-17T23:42:11.189362Z", "url": "https://files.pythonhosted.org/packages/ea/f8/efd496dae831d71ab701b337957a4c0494a03d0961c919ad3ca8fa08dee8/Gnotty-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:11 2020"}