{"info": {"author": "Acrisel Team", "author_email": "support@acrisel.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "=======\nsshpipe\n=======\n\n---------------------------------------------------\nSSH tools to manage and channel data to remote host\n---------------------------------------------------\n\n.. contents:: Table of Contents\n   :depth: 2\n\nOverview\n========\n\n    .. _Eventor: https://github.com/Acrisel/eventor\n    .. _Sequent: https://github.com/Acrisel/sequent\n    \n    *sshpipe* was build as part of Eventor_ and Sequent_ to allow distributed processing using *SSH*. Usually, network based system are using ports to communicate between server and clients. However, in development environment, there may be many developers in need to individual port assignments. The management of such operation can become overwhelming.\n    \n    With SSH tunneling, each developer can manage its own environment. Using virtualenvs and SSH keys, developer can manage himself connections between servers and clients they are working on. \n    \n    If you have comments or insights, please don't hesitate to contact us at support@acrisel.com\n\nsshconfig\n=========\n\t\n    sshconfig is used to read SSH configuration file and give access to information stored there. It can be used also to save SSH configuration.\n    \nLoads and dumps\n---------------\n    \n    *loads()*, *load()* methods are used to read SSH configuration from string stream or file respectively into *SSHConfig* object. \n    *dumps()*, *dump()* methods are used to write *SSHConfig* object to string stream or file respectively.\n    \nSSHConfig Class\n---------------\n\n    SSHConfig class holds SSH configuration as read by *load()* or *loads()*. It can then be stored back into SSH configuration file with sshconfig's *dump()* and *dumps().  *SSHConfig* provides *get()* method to retrieve SSH settings.\n\n    Future functionality:\n    \n    1. validation of configuration.\n    #. manipulation of configuration (e.g., add key, change flags, etc.)\n    \nSSHPipe\n=======\n\n    SSHPipe class is used to initiate an SSH channel to a process running in remote host. SSHPipe is initiated with the command for the agent process. It would then start the agent (commonly an object of *SSHPipeClient* or of a class inheriting from it.) \n    \n    Once agent is started, SSHPipe provides methods to send the agent work assignments. When agent is done or fails, it would communicate back to SSHPipe object. The method *response()* can be used to retrieve that response.\n    \nExample\n-------\n\n    This example shows a SSHPipe creation from one host to another with. The service in the remote host will accept string message sent via the pipe and would store them into a file.\n    \n    *sshremotehandlerusage.py*, below, initiates  \n\n    .. code:: python\n        :number-lines:\n    \n        import os\n        import multiprocessing as mp\n        from sshpipe import SSHPipe\n\n        def run():\n            agent_dir = '/var/acrisel/sand/acris/sshpipe/sshpipe/sshpipe_examples' \n            agentpy = os.path.join(agent_dir, \"sshremotehandler.py\")\n            host = 'ubuntud01_eventor' # SSH config host name of remote server.\n    \n            sshagent = SSHPipe(host, agentpy)\n            sshagent.start()\n    \n            if not sshagent.is_alive():\n                print(\"Agent not alive\", sshagent.response())\n                exit(1)\n    \n            sshagent.send(\"This is life.\\n\")\n            sshagent.send(\"This is also life.\\n\")\n            sshagent.send(\"This is yet another life.\\n\")\n            sshagent.send(\"That is all, life.\\n\")\n            sshagent.send(\"TERM\")\n    \n            if not sshagent.is_alive():\n                print(sshagent.response())\n                exit()\n    \n            response = sshagent.close()\n            if response:\n                exitcode, stdout, stderr = response\n            print('Response: ', response)\n    \n        if __name__ == '__main__':\n            mp.set_start_method('spawn')\n            run()\n            \n    The remote agent *sshremotehandler.py* is would run through SHHPipe and would loop awaiting input on its *stdin* stream. \n    \n    .. code:: python\n        :number-lines:\n        \n        import logging\n        from sshpipe import SSHPipeHandler\n\n        module_logger = logging.getLogger(__file__)\n\n        class MySSHPipeHandler(SSHPipeHandler):\n    \n            def __init__(self, *args, **kwargs):\n                super(MySSHPipeHandler, self).__init__(*args, **kwargs)\n                self.file = None\n                \n            def atstart(self, received):\n                file = \"{}{}\".format(__file__, \".remote.log\")\n                self.module_logger.debug(\"Opening file: {}.\".format(file))\n                self.file = open(file, 'w')\n        \n            def atexit(self, received):\n                if self.file is not None:\n                    self.file.close()\n                super(MySSHPipeHandler, self).atexit(received)\n    \n            def handle(self, received):\n                self.file.write(str(received))     \n                \n        if __name__ == '__main__':\n            client = MySSHPipeHandler()\n            client.service_loop()\n        \n    The handler overrides the four methods of *SSHPipeHandler*. *__init__()* defines an instance member *file*, *atstart()* opens file to which records would be written, *atexit()* closes the file, and *handle()* writes received record to file.\n    \nExample Explanation\n-------------------\n\nLets say we run *sshremotehandlerusage.py* program on some server, ubuntud20\n    \nClasses and Methods\n-------------------\n\n    .. code:: python\n    \n        SSHPipe(host, command, name=None, user=None, term_message='TERM', config=None, encoding='utf8', callback=None, logger=None)\n        \n            SSHPipe establishes connection to remote *host* and runs *command*.  *host* can be ip address, hostname, or SSH host name.\n            *name* associates and id to the pipe.  If *user* is provided, it will use for the SSH connectivity.  term_message, is \n    \nSSHPipeClient\n=============\n\n\n\n\t\nexample\n-------\n\n    .. code-block:: python\n\t\n        import logging\n\t\n        # create logger\n        logger = logging.getLogger('simple_example')\n        logger.setLevel(logging.DEBUG)\n\t\n        # create console handler and set level to debug\n        ch = logging.TimedRotatingFileHandler()\n        ch.setLevel(logging.DEBUG)\n\t\n        # create formatter\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\t\n        # add formatter to ch\n        ch.setFormatter(formatter)\n\t\n        # add ch to logger\n        logger.addHandler(ch)\n\t\n        # 'application' code\n        logger.debug('debug message')\n        logger.info('info message')\n        logger.warn('warn message')\n        logger.error('error message')\n        logger.critical('critical message')\t\n\nMpLogger and LevelBasedFormatter\n================================\n\n    Multiprocessor logger using QueueListener and QueueHandler\n    It uses TimedSizedRotatingHandler as its logging handler\n\n    It also uses acris provided LevelBasedFormatter which facilitate message formats\n    based on record level.  LevelBasedFormatter inherent from logging.Formatter and\n    can be used as such in customized logging handlers. \n\t\nexample\n-------\n\nWithin main process\n~~~~~~~~~~~~~~~~~~~\n\n    .. code-block:: python\n\t\n        import time\n        import random\n        import logging\n        from acris import MpLogger\n        import os\n        import multiprocessing as mp\n\n        def subproc(limit=1, logger_info=None):\n            logger=MpLogger.get_logger(logger_info, name=\"acrilog.subproc\", )\n    \t\tfor i in range(limit):\n                sleep_time=3/random.randint(1,10)\n                time.sleep(sleep_time)\n                logger.info(\"proc [%s]: %s/%s - sleep %4.4ssec\" % (os.getpid(), i, limit, sleep_time))\n\n        level_formats={logging.DEBUG:\"[ %(asctime)s ][ %(levelname)s ][ %(message)s ][ %(module)s.%(funcName)s(%(lineno)d) ]\",\n                        'default':   \"[ %(asctime)s ][ %(levelname)s ][ %(message)s ]\",\n                        }\n    \n        mplogger=MpLogger(logging_level=logging.DEBUG, level_formats=level_formats, datefmt='%Y-%m-%d,%H:%M:%S.%f')\n        logger=mplogger.start(name='main_process')\n\n        logger.debug(\"starting sub processes\")\n        procs=list()\n        for limit in [1, 1]:\n            proc=mp.Process(target=subproc, args=(limit, mplogger.logger_info(),))\n            procs.append(proc)\n            proc.start()\n    \n        for proc in procs:\n            if proc:\n                proc.join()\n    \n        logger.debug(\"sub processes completed\")\n\n        mplogger.stop()\t\n        \n    \nExample output\n--------------\n\n    .. code-block:: python\n\n        [ 2016-12-19,11:39:44.953189 ][ DEBUG ][ starting sub processes ][ mplogger.<module>(45) ]\n        [ 2016-12-19,11:39:45.258794 ][ INFO ][ proc [932]: 0/1 - sleep  0.3sec ]\n        [ 2016-12-19,11:39:45.707914 ][ INFO ][ proc [931]: 0/1 - sleep 0.75sec ]\n        [ 2016-12-19,11:39:45.710487 ][ DEBUG ][ sub processes completed ][ mplogger.<module>(56) ]\n        \nClarification of parameters\n===========================\n\nname\n----\n\n**name** identifies the base name for logger. Note the this parameter is available in both MpLogger init method and in its start method.\n\nMpLogger init's **name** argument is used for consolidated logger when **consolidate** is set.  It is also used for private logger of the main process, if one not provided when calling *start()* method. \n\nproecess_key\n------------\n\n**process_key** defines one or more logger record field that would be part of the file name of the log.  In case it is used, logger will have a file per records' process key.  This will be in addition for a consolidated log, if **consolidate** is set. \n\nBy default, MpLogger uses **name** as the process key.  If something else is provided, e.g., **processName**, it will be concatenated to **name** as postfix.  \n\nfile_prefix and file_suffix\n---------------------------\n\nAllows to distinguish among sets of logs of different runs by setting one (or both) of **file_prefix** and **file_suffix**.  Usually, the use of PID and granular datetime as prefix or suffix would create unique set of logs.\n\nfile_mode\n---------\n\n**file_mode** let program define how logs will be opened.  In default, logs are open in append mode.  Hense, history is collected and file a rolled overnight and by size. \n\nconsolidate\n----------- \n\n**consolidate**, when set, will create consolidated log from all processing logs.\nIf **consolidated** is set and *start()* is called without **name**, consolidation will be done into the main process.\n\nkwargs\n------\n\n**kwargs** are named arguments that will passed to FileHandler.  This include:\n    | file_mode='a', for RotatingFileHandler\n    | maxBytes=0, for RotatingFileHandler\n    | backupCount=0, for RotatingFileHandler and TimedRotatingFileHandler\n    | encoding='ascii', for RotatingFileHandler and TimedRotatingFileHandler\n    | delay=False, for TimedRotatingFileHandler\n    | when='h', for TimedRotatingFileHandler\n    | interval=1, TimedRotatingFileHandler\n    | utc=False, TimedRotatingFileHandler\n    | atTime=None, for TimedRotatingFileHandler\n    \n     \nChange History\n==============\n    \n        \nNext Steps\n==========\n\n    1. Acknowledgment from handler that SSH pipe was established.\n    #. SSHMultiPipe to allow management of multiple pipe from a single point.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Acrisel/sshpipe", "keywords": "library logger multiprocessing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sshpipe", "package_url": "https://pypi.org/project/sshpipe/", "platform": "", "project_url": "https://pypi.org/project/sshpipe/", "project_urls": {"Homepage": "https://github.com/Acrisel/sshpipe"}, "release_url": "https://pypi.org/project/sshpipe/0.5.2/", "requires_dist": null, "requires_python": "", "summary": "sshpipe provide tools to manage ssh channel to remote hosts.", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id4\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#sshconfig\" id=\"id5\" rel=\"nofollow\">sshconfig</a><ul>\n<li><a href=\"#loads-and-dumps\" id=\"id6\" rel=\"nofollow\">Loads and dumps</a></li>\n<li><a href=\"#sshconfig-class\" id=\"id7\" rel=\"nofollow\">SSHConfig Class</a></li>\n</ul>\n</li>\n<li><a href=\"#id1\" id=\"id8\" rel=\"nofollow\">SSHPipe</a><ul>\n<li><a href=\"#example\" id=\"id9\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#example-explanation\" id=\"id10\" rel=\"nofollow\">Example Explanation</a></li>\n<li><a href=\"#classes-and-methods\" id=\"id11\" rel=\"nofollow\">Classes and Methods</a></li>\n</ul>\n</li>\n<li><a href=\"#sshpipeclient\" id=\"id12\" rel=\"nofollow\">SSHPipeClient</a></li>\n<li><a href=\"#mplogger-and-levelbasedformatter\" id=\"id13\" rel=\"nofollow\">MpLogger and LevelBasedFormatter</a><ul>\n<li><a href=\"#id3\" id=\"id14\" rel=\"nofollow\">example</a></li>\n<li><a href=\"#example-output\" id=\"id15\" rel=\"nofollow\">Example output</a></li>\n</ul>\n</li>\n<li><a href=\"#clarification-of-parameters\" id=\"id16\" rel=\"nofollow\">Clarification of parameters</a><ul>\n<li><a href=\"#name\" id=\"id17\" rel=\"nofollow\">name</a></li>\n<li><a href=\"#proecess-key\" id=\"id18\" rel=\"nofollow\">proecess_key</a></li>\n<li><a href=\"#file-prefix-and-file-suffix\" id=\"id19\" rel=\"nofollow\">file_prefix and file_suffix</a></li>\n<li><a href=\"#file-mode\" id=\"id20\" rel=\"nofollow\">file_mode</a></li>\n<li><a href=\"#consolidate\" id=\"id21\" rel=\"nofollow\">consolidate</a></li>\n<li><a href=\"#kwargs\" id=\"id22\" rel=\"nofollow\">kwargs</a></li>\n</ul>\n</li>\n<li><a href=\"#change-history\" id=\"id23\" rel=\"nofollow\">Change History</a></li>\n<li><a href=\"#next-steps\" id=\"id24\" rel=\"nofollow\">Next Steps</a></li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Overview</a></h2>\n<blockquote>\n<p><em>sshpipe</em> was build as part of <a href=\"https://github.com/Acrisel/eventor\" rel=\"nofollow\">Eventor</a> and <a href=\"https://github.com/Acrisel/sequent\" rel=\"nofollow\">Sequent</a> to allow distributed processing using <em>SSH</em>. Usually, network based system are using ports to communicate between server and clients. However, in development environment, there may be many developers in need to individual port assignments. The management of such operation can become overwhelming.</p>\n<p>With SSH tunneling, each developer can manage its own environment. Using virtualenvs and SSH keys, developer can manage himself connections between servers and clients they are working on.</p>\n<p>If you have comments or insights, please don\u2019t hesitate to contact us at <a href=\"mailto:support%40acrisel.com\">support<span>@</span>acrisel<span>.</span>com</a></p>\n</blockquote>\n</div>\n<div id=\"sshconfig\">\n<h2><a href=\"#id5\" rel=\"nofollow\">sshconfig</a></h2>\n<blockquote>\nsshconfig is used to read SSH configuration file and give access to information stored there. It can be used also to save SSH configuration.</blockquote>\n<div id=\"loads-and-dumps\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Loads and dumps</a></h3>\n<blockquote>\n<em>loads()</em>, <em>load()</em> methods are used to read SSH configuration from string stream or file respectively into <em>SSHConfig</em> object.\n<em>dumps()</em>, <em>dump()</em> methods are used to write <em>SSHConfig</em> object to string stream or file respectively.</blockquote>\n</div>\n<div id=\"sshconfig-class\">\n<h3><a href=\"#id7\" rel=\"nofollow\">SSHConfig Class</a></h3>\n<blockquote>\n<p>SSHConfig class holds SSH configuration as read by <em>load()</em> or <em>loads()</em>. It can then be stored back into SSH configuration file with sshconfig\u2019s <em>dump()</em> and <em>dumps().  *SSHConfig</em> provides <em>get()</em> method to retrieve SSH settings.</p>\n<p>Future functionality:</p>\n<ol>\n<li>validation of configuration.</li>\n<li>manipulation of configuration (e.g., add key, change flags, etc.)</li>\n</ol>\n</blockquote>\n</div>\n</div>\n<div id=\"id1\">\n<h2><a href=\"#id8\" rel=\"nofollow\">SSHPipe</a></h2>\n<blockquote>\n<p>SSHPipe class is used to initiate an SSH channel to a process running in remote host. SSHPipe is initiated with the command for the agent process. It would then start the agent (commonly an object of <em>SSHPipeClient</em> or of a class inheriting from it.)</p>\n<p>Once agent is started, SSHPipe provides methods to send the agent work assignments. When agent is done or fails, it would communicate back to SSHPipe object. The method <em>response()</em> can be used to retrieve that response.</p>\n</blockquote>\n<div id=\"example\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Example</a></h3>\n<blockquote>\n<p>This example shows a SSHPipe creation from one host to another with. The service in the remote host will accept string message sent via the pipe and would store them into a file.</p>\n<p><em>sshremotehandlerusage.py</em>, below, initiates</p>\n<pre><span class=\"ln\"> 1 </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"ln\"> 2 </span><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span> <span class=\"k\">as</span> <span class=\"nn\">mp</span>\n<span class=\"ln\"> 3 </span><span class=\"kn\">from</span> <span class=\"nn\">sshpipe</span> <span class=\"kn\">import</span> <span class=\"n\">SSHPipe</span>\n<span class=\"ln\"> 4 </span>\n<span class=\"ln\"> 5 </span><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n<span class=\"ln\"> 6 </span>    <span class=\"n\">agent_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/acrisel/sand/acris/sshpipe/sshpipe/sshpipe_examples'</span>\n<span class=\"ln\"> 7 </span>    <span class=\"n\">agentpy</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">agent_dir</span><span class=\"p\">,</span> <span class=\"s2\">\"sshremotehandler.py\"</span><span class=\"p\">)</span>\n<span class=\"ln\"> 8 </span>    <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">'ubuntud01_eventor'</span> <span class=\"c1\"># SSH config host name of remote server.</span>\n<span class=\"ln\"> 9 </span>\n<span class=\"ln\">10 </span>    <span class=\"n\">sshagent</span> <span class=\"o\">=</span> <span class=\"n\">SSHPipe</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">agentpy</span><span class=\"p\">)</span>\n<span class=\"ln\">11 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"ln\">12 </span>\n<span class=\"ln\">13 </span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">():</span>\n<span class=\"ln\">14 </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Agent not alive\"</span><span class=\"p\">,</span> <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">())</span>\n<span class=\"ln\">15 </span>        <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"ln\">16 </span>\n<span class=\"ln\">17 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"This is life.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"ln\">18 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"This is also life.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"ln\">19 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"This is yet another life.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"ln\">20 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"That is all, life.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"ln\">21 </span>    <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"TERM\"</span><span class=\"p\">)</span>\n<span class=\"ln\">22 </span>\n<span class=\"ln\">23 </span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">is_alive</span><span class=\"p\">():</span>\n<span class=\"ln\">24 </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">())</span>\n<span class=\"ln\">25 </span>        <span class=\"n\">exit</span><span class=\"p\">()</span>\n<span class=\"ln\">26 </span>\n<span class=\"ln\">27 </span>    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">sshagent</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"ln\">28 </span>    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n<span class=\"ln\">29 </span>        <span class=\"n\">exitcode</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">response</span>\n<span class=\"ln\">30 </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Response: '</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"ln\">31 </span>\n<span class=\"ln\">32 </span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n<span class=\"ln\">33 </span>    <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">set_start_method</span><span class=\"p\">(</span><span class=\"s1\">'spawn'</span><span class=\"p\">)</span>\n<span class=\"ln\">34 </span>    <span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The remote agent <em>sshremotehandler.py</em> is would run through SHHPipe and would loop awaiting input on its <em>stdin</em> stream.</p>\n<pre><span class=\"ln\"> 1 </span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"ln\"> 2 </span><span class=\"kn\">from</span> <span class=\"nn\">sshpipe</span> <span class=\"kn\">import</span> <span class=\"n\">SSHPipeHandler</span>\n<span class=\"ln\"> 3 </span>\n<span class=\"ln\"> 4 </span><span class=\"n\">module_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n<span class=\"ln\"> 5 </span>\n<span class=\"ln\"> 6 </span><span class=\"k\">class</span> <span class=\"nc\">MySSHPipeHandler</span><span class=\"p\">(</span><span class=\"n\">SSHPipeHandler</span><span class=\"p\">):</span>\n<span class=\"ln\"> 7 </span>\n<span class=\"ln\"> 8 </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"ln\"> 9 </span>        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MySSHPipeHandler</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"ln\">10 </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"ln\">11 </span>\n<span class=\"ln\">12 </span>    <span class=\"k\">def</span> <span class=\"nf\">atstart</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">received</span><span class=\"p\">):</span>\n<span class=\"ln\">13 </span>        <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"s2\">\".remote.log\"</span><span class=\"p\">)</span>\n<span class=\"ln\">14 </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module_logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"Opening file: </span><span class=\"si\">{}</span><span class=\"s2\">.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">))</span>\n<span class=\"ln\">15 </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n<span class=\"ln\">16 </span>\n<span class=\"ln\">17 </span>    <span class=\"k\">def</span> <span class=\"nf\">atexit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">received</span><span class=\"p\">):</span>\n<span class=\"ln\">18 </span>        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"ln\">19 </span>            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"ln\">20 </span>        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MySSHPipeHandler</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">atexit</span><span class=\"p\">(</span><span class=\"n\">received</span><span class=\"p\">)</span>\n<span class=\"ln\">21 </span>\n<span class=\"ln\">22 </span>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">received</span><span class=\"p\">):</span>\n<span class=\"ln\">23 </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">received</span><span class=\"p\">))</span>\n<span class=\"ln\">24 </span>\n<span class=\"ln\">25 </span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n<span class=\"ln\">26 </span>    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MySSHPipeHandler</span><span class=\"p\">()</span>\n<span class=\"ln\">27 </span>    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">service_loop</span><span class=\"p\">()</span>\n</pre>\n<p>The handler overrides the four methods of <em>SSHPipeHandler</em>. <em>__init__()</em> defines an instance member <em>file</em>, <em>atstart()</em> opens file to which records would be written, <em>atexit()</em> closes the file, and <em>handle()</em> writes received record to file.</p>\n</blockquote>\n</div>\n<div id=\"example-explanation\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Example Explanation</a></h3>\n<p>Lets say we run <em>sshremotehandlerusage.py</em> program on some server, ubuntud20</p>\n</div>\n<div id=\"classes-and-methods\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Classes and Methods</a></h3>\n<blockquote>\n<pre><span class=\"n\">SSHPipe</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">term_message</span><span class=\"o\">=</span><span class=\"s1\">'TERM'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"n\">SSHPipe</span> <span class=\"n\">establishes</span> <span class=\"n\">connection</span> <span class=\"n\">to</span> <span class=\"n\">remote</span> <span class=\"o\">*</span><span class=\"n\">host</span><span class=\"o\">*</span> <span class=\"ow\">and</span> <span class=\"n\">runs</span> <span class=\"o\">*</span><span class=\"n\">command</span><span class=\"o\">*.</span>  <span class=\"o\">*</span><span class=\"n\">host</span><span class=\"o\">*</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">ip</span> <span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"ow\">or</span> <span class=\"n\">SSH</span> <span class=\"n\">host</span> <span class=\"n\">name</span><span class=\"o\">.</span>\n    <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"o\">*</span> <span class=\"n\">associates</span> <span class=\"ow\">and</span> <span class=\"nb\">id</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">pipe</span><span class=\"o\">.</span>  <span class=\"n\">If</span> <span class=\"o\">*</span><span class=\"n\">user</span><span class=\"o\">*</span> <span class=\"ow\">is</span> <span class=\"n\">provided</span><span class=\"p\">,</span> <span class=\"n\">it</span> <span class=\"n\">will</span> <span class=\"n\">use</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">SSH</span> <span class=\"n\">connectivity</span><span class=\"o\">.</span>  <span class=\"n\">term_message</span><span class=\"p\">,</span> <span class=\"ow\">is</span>\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"sshpipeclient\">\n<h2><a href=\"#id12\" rel=\"nofollow\">SSHPipeClient</a></h2>\n<h2 id=\"id2\"><span class=\"section-subtitle\">example</span></h2>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"c1\"># create logger</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'simple_example'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create console handler and set level to debug</span>\n<span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">TimedRotatingFileHandler</span><span class=\"p\">()</span>\n<span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create formatter</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(name)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add formatter to ch</span>\n<span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add ch to logger</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 'application' code</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'debug message'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'info message'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s1\">'warn message'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'error message'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">'critical message'</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"mplogger-and-levelbasedformatter\">\n<h2><a href=\"#id13\" rel=\"nofollow\">MpLogger and LevelBasedFormatter</a></h2>\n<blockquote>\n<p>Multiprocessor logger using QueueListener and QueueHandler\nIt uses TimedSizedRotatingHandler as its logging handler</p>\n<p>It also uses acris provided LevelBasedFormatter which facilitate message formats\nbased on record level.  LevelBasedFormatter inherent from logging.Formatter and\ncan be used as such in customized logging handlers.</p>\n</blockquote>\n<div id=\"id3\">\n<h3><a href=\"#id14\" rel=\"nofollow\">example</a></h3>\n<h3 id=\"within-main-process\"><span class=\"section-subtitle\">Within main process</span></h3>\n<blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">acris</span> <span class=\"kn\">import</span> <span class=\"n\">MpLogger</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span> <span class=\"k\">as</span> <span class=\"nn\">mp</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">subproc</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">logger_info</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">MpLogger</span><span class=\"o\">.</span><span class=\"n\">get_logger</span><span class=\"p\">(</span><span class=\"n\">logger_info</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"acrilog.subproc\"</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">):</span>\n        <span class=\"n\">sleep_time</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sleep_time</span><span class=\"p\">)</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"proc [</span><span class=\"si\">%s</span><span class=\"s2\">]: </span><span class=\"si\">%s</span><span class=\"s2\">/</span><span class=\"si\">%s</span><span class=\"s2\"> - sleep </span><span class=\"si\">%4.4s</span><span class=\"s2\">sec\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">(),</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">sleep_time</span><span class=\"p\">))</span>\n\n<span class=\"n\">level_formats</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span><span class=\"s2\">\"[ </span><span class=\"si\">%(asctime)s</span><span class=\"s2\"> ][ </span><span class=\"si\">%(levelname)s</span><span class=\"s2\"> ][ </span><span class=\"si\">%(message)s</span><span class=\"s2\"> ][ </span><span class=\"si\">%(module)s</span><span class=\"s2\">.</span><span class=\"si\">%(funcName)s</span><span class=\"s2\">(</span><span class=\"si\">%(lineno)d</span><span class=\"s2\">) ]\"</span><span class=\"p\">,</span>\n                <span class=\"s1\">'default'</span><span class=\"p\">:</span>   <span class=\"s2\">\"[ </span><span class=\"si\">%(asctime)s</span><span class=\"s2\"> ][ </span><span class=\"si\">%(levelname)s</span><span class=\"s2\"> ][ </span><span class=\"si\">%(message)s</span><span class=\"s2\"> ]\"</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n\n<span class=\"n\">mplogger</span><span class=\"o\">=</span><span class=\"n\">MpLogger</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">level_formats</span><span class=\"o\">=</span><span class=\"n\">level_formats</span><span class=\"p\">,</span> <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">,%H:%M:%S.</span><span class=\"si\">%f</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"n\">mplogger</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'main_process'</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"starting sub processes\"</span><span class=\"p\">)</span>\n<span class=\"n\">procs</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">limit</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]:</span>\n    <span class=\"n\">proc</span><span class=\"o\">=</span><span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">subproc</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">mplogger</span><span class=\"o\">.</span><span class=\"n\">logger_info</span><span class=\"p\">(),))</span>\n    <span class=\"n\">procs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">proc</span><span class=\"p\">)</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">proc</span> <span class=\"ow\">in</span> <span class=\"n\">procs</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">proc</span><span class=\"p\">:</span>\n        <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"sub processes completed\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">mplogger</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"example-output\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Example output</a></h3>\n<blockquote>\n<pre><span class=\"p\">[</span> <span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mf\">44.953189</span> <span class=\"p\">][</span> <span class=\"n\">DEBUG</span> <span class=\"p\">][</span> <span class=\"n\">starting</span> <span class=\"n\">sub</span> <span class=\"n\">processes</span> <span class=\"p\">][</span> <span class=\"n\">mplogger</span><span class=\"o\">.&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mf\">45.258794</span> <span class=\"p\">][</span> <span class=\"n\">INFO</span> <span class=\"p\">][</span> <span class=\"n\">proc</span> <span class=\"p\">[</span><span class=\"mi\">932</span><span class=\"p\">]:</span> <span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">sleep</span>  <span class=\"mf\">0.3</span><span class=\"n\">sec</span> <span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mf\">45.707914</span> <span class=\"p\">][</span> <span class=\"n\">INFO</span> <span class=\"p\">][</span> <span class=\"n\">proc</span> <span class=\"p\">[</span><span class=\"mi\">931</span><span class=\"p\">]:</span> <span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">sleep</span> <span class=\"mf\">0.75</span><span class=\"n\">sec</span> <span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">:</span><span class=\"mf\">45.710487</span> <span class=\"p\">][</span> <span class=\"n\">DEBUG</span> <span class=\"p\">][</span> <span class=\"n\">sub</span> <span class=\"n\">processes</span> <span class=\"n\">completed</span> <span class=\"p\">][</span> <span class=\"n\">mplogger</span><span class=\"o\">.&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">56</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"clarification-of-parameters\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Clarification of parameters</a></h2>\n<div id=\"name\">\n<h3><a href=\"#id17\" rel=\"nofollow\">name</a></h3>\n<p><strong>name</strong> identifies the base name for logger. Note the this parameter is available in both MpLogger init method and in its start method.</p>\n<p>MpLogger init\u2019s <strong>name</strong> argument is used for consolidated logger when <strong>consolidate</strong> is set.  It is also used for private logger of the main process, if one not provided when calling <em>start()</em> method.</p>\n</div>\n<div id=\"proecess-key\">\n<h3><a href=\"#id18\" rel=\"nofollow\">proecess_key</a></h3>\n<p><strong>process_key</strong> defines one or more logger record field that would be part of the file name of the log.  In case it is used, logger will have a file per records\u2019 process key.  This will be in addition for a consolidated log, if <strong>consolidate</strong> is set.</p>\n<p>By default, MpLogger uses <strong>name</strong> as the process key.  If something else is provided, e.g., <strong>processName</strong>, it will be concatenated to <strong>name</strong> as postfix.</p>\n</div>\n<div id=\"file-prefix-and-file-suffix\">\n<h3><a href=\"#id19\" rel=\"nofollow\">file_prefix and file_suffix</a></h3>\n<p>Allows to distinguish among sets of logs of different runs by setting one (or both) of <strong>file_prefix</strong> and <strong>file_suffix</strong>.  Usually, the use of PID and granular datetime as prefix or suffix would create unique set of logs.</p>\n</div>\n<div id=\"file-mode\">\n<h3><a href=\"#id20\" rel=\"nofollow\">file_mode</a></h3>\n<p><strong>file_mode</strong> let program define how logs will be opened.  In default, logs are open in append mode.  Hense, history is collected and file a rolled overnight and by size.</p>\n</div>\n<div id=\"consolidate\">\n<h3><a href=\"#id21\" rel=\"nofollow\">consolidate</a></h3>\n<p><strong>consolidate</strong>, when set, will create consolidated log from all processing logs.\nIf <strong>consolidated</strong> is set and <em>start()</em> is called without <strong>name</strong>, consolidation will be done into the main process.</p>\n</div>\n<div id=\"kwargs\">\n<h3><a href=\"#id22\" rel=\"nofollow\">kwargs</a></h3>\n<dl>\n<dt><strong>kwargs</strong> are named arguments that will passed to FileHandler.  This include:</dt>\n<dd><div>\n<div>file_mode=\u2019a\u2019, for RotatingFileHandler</div>\n<div>maxBytes=0, for RotatingFileHandler</div>\n<div>backupCount=0, for RotatingFileHandler and TimedRotatingFileHandler</div>\n<div>encoding=\u2019ascii\u2019, for RotatingFileHandler and TimedRotatingFileHandler</div>\n<div>delay=False, for TimedRotatingFileHandler</div>\n<div>when=\u2019h\u2019, for TimedRotatingFileHandler</div>\n<div>interval=1, TimedRotatingFileHandler</div>\n<div>utc=False, TimedRotatingFileHandler</div>\n<div>atTime=None, for TimedRotatingFileHandler</div>\n</div>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Change History</a></h2>\n</div>\n<div id=\"next-steps\">\n<h2><a href=\"#id24\" rel=\"nofollow\">Next Steps</a></h2>\n<blockquote>\n<ol>\n<li>Acknowledgment from handler that SSH pipe was established.</li>\n<li>SSHMultiPipe to allow management of multiple pipe from a single point.</li>\n</ol>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 3507895, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "0e5d4339d049d3bc2c618f1527fcaad6", "sha256": "33c933481738d312da0eeb5fa35afb5e76220b3a0bad4421f46b2253c8a615eb"}, "downloads": -1, "filename": "sshpipe-0.5.0.tar.gz", "has_sig": true, "md5_digest": "0e5d4339d049d3bc2c618f1527fcaad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29523, "upload_time": "2018-01-01T15:44:06", "upload_time_iso_8601": "2018-01-01T15:44:06.516006Z", "url": "https://files.pythonhosted.org/packages/26/07/420cc59db80e91652a9e0f688c8c258489a4d71cdb0c2c594fa366a59d37/sshpipe-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e4a53241392cc0ced5d7b64a03217abd", "sha256": "57523edd21480e419278319280e94e4b32febf433b2ef2f2f969a95d4356dd60"}, "downloads": -1, "filename": "sshpipe-0.5.1.tar.gz", "has_sig": true, "md5_digest": "e4a53241392cc0ced5d7b64a03217abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30369, "upload_time": "2018-01-21T00:21:37", "upload_time_iso_8601": "2018-01-21T00:21:37.226775Z", "url": "https://files.pythonhosted.org/packages/ad/5e/d29238085419487fee5523f6c8ffb8829e309db25ac97fd5a136bf26a32a/sshpipe-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "8176ae3c1532cdb4673b9234812ffc66", "sha256": "aaac0d90706494bf45dc3b386b89b9eb53a40648c2740a8453688a4a3edd68fb"}, "downloads": -1, "filename": "sshpipe-0.5.2.tar.gz", "has_sig": true, "md5_digest": "8176ae3c1532cdb4673b9234812ffc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30407, "upload_time": "2018-01-21T00:40:58", "upload_time_iso_8601": "2018-01-21T00:40:58.314372Z", "url": "https://files.pythonhosted.org/packages/0e/c1/b4b90a9307b69be314a6a48a8fc010c9ae95bd9e262558b47ce156fb7f89/sshpipe-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8176ae3c1532cdb4673b9234812ffc66", "sha256": "aaac0d90706494bf45dc3b386b89b9eb53a40648c2740a8453688a4a3edd68fb"}, "downloads": -1, "filename": "sshpipe-0.5.2.tar.gz", "has_sig": true, "md5_digest": "8176ae3c1532cdb4673b9234812ffc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30407, "upload_time": "2018-01-21T00:40:58", "upload_time_iso_8601": "2018-01-21T00:40:58.314372Z", "url": "https://files.pythonhosted.org/packages/0e/c1/b4b90a9307b69be314a6a48a8fc010c9ae95bd9e262558b47ce156fb7f89/sshpipe-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:06 2020"}