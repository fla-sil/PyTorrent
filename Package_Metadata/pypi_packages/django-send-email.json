{"info": {"author": "Justin Quick", "author_email": "justquick@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Communications :: Email"], "description": "# Email Command for Django\n\nThis app provides a simple management command for sending emails using your Django settings from the command line.\n\n\n## Install\n\nPull down the app:\n\n    $ pip install django-send-email\n\nAdd it to your `INSTALLED_APPS`:\n\n    INSTALLED_APPS = (\n      ...\n      'django_send_email'\n    )\n\n\n## Sending Emails\n\ndjango-send-email provides a management command named `send_email_message` to send emails from the command line.\n\n    $ django-admin.py send_email_message subject message user1@example.com user2@example.com\n\nSubject, message and at least one recipient are required. You can pass `ADMINS` or `MANAGERS` as any one of the recipients and django-send-email will fetch the recipients from the proper Django setting.\n\n    $ django-admin.py send_email_message subject message MANAGERS --bcc=ADMINS\n\nYou can also pass a filename as the message argument and django-send-email will use the file contents at the body of the email.\n\n    $ django-admin.py send_email_message subject /path/to/message.txt user1@example.com user2@example.com\n\nAlternatively you can use `-` as the message argument to read from standard input.\n\n    $ django-admin.py send_email_message subject - user1@example.com user2@example.com < /path/to/message.txt\n    $ echo \"some message text\" | django-admin.py send_email_message subject - user1@example.com user2@example.com\n\n### Full Usage\n\n    Usage: manage.py send_email_message [options] <subject> <message or file or \"-\"> <recipient1>...<recipientN>\n\n    Sends an email to the specified email addresses.\n    Message can be a string, filename or \"-\" to read from stdin.\n\n    Options:\n      -v VERBOSITY, --verbosity=VERBOSITY\n                            Verbosity level; 0=minimal output, 1=normal output,\n                            2=verbose output, 3=very verbose output\n      --settings=SETTINGS   The Python path to a settings module, e.g.\n                            \"myproject.settings.main\". If this isn't provided, the\n                            DJANGO_SETTINGS_MODULE environment variable will be\n                            used.\n      --pythonpath=PYTHONPATH\n                            A directory to add to the Python path, e.g.\n                            \"/home/djangoprojects/myproject\".\n      --traceback           Print traceback on exception\n      --noinput             Tells Django to NOT prompt the user for input of any\n                            kind.\n      -f FROM_EMAIL, --from=FROM_EMAIL\n                            Email address to use to send emails from. Defaults to\n                            use settings.DEFAULT_FROM_EMAIL\n      -r, --raise-error     Exceptions during the email sending process will be\n                            raised. Default to failing silently\n      -n, --noprefix        Disables email subject prefix. Default behavior is to\n                            prepend settings.EMAIL_SUBJECT_PREFIX\n      -b BCC, --bcc=BCC     Comma separated list of email addresses for BCC\n      -c CC, --cc=CC        Comma separated list of email addresses for CC\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n\n\n## Testing\n\nRunning the unittests is as simple as testing any other Django app\n\n    django-admin.py test django_send_email\n\nTo test the command on a development SMTP server, you can run the debug SMTP server from the `smtp` library.\n\n    $ python -m smtpd -n -c DebuggingServer localhost:1025\n\nJust make sure that Django is configured correctly to point at localhost:1025", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justquick/django-send-email", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-send-email", "package_url": "https://pypi.org/project/django-send-email/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-send-email/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/justquick/django-send-email"}, "release_url": "https://pypi.org/project/django-send-email/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Send emails from the command line using Django's settings", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Email Command for Django<br><br>This app provides a simple management command for sending emails using your Django settings from the command line.<br><br><br>## Install<br><br>Pull down the app:<br><br>    $ pip install django-send-email<br><br>Add it to your `INSTALLED_APPS`:<br><br>    INSTALLED_APPS = (<br>      ...<br>      'django_send_email'<br>    )<br><br><br>## Sending Emails<br><br>django-send-email provides a management command named `send_email_message` to send emails from the command line.<br><br>    $ django-admin.py send_email_message subject message user1@example.com user2@example.com<br><br>Subject, message and at least one recipient are required. You can pass `ADMINS` or `MANAGERS` as any one of the recipients and django-send-email will fetch the recipients from the proper Django setting.<br><br>    $ django-admin.py send_email_message subject message MANAGERS --bcc=ADMINS<br><br>You can also pass a filename as the message argument and django-send-email will use the file contents at the body of the email.<br><br>    $ django-admin.py send_email_message subject /path/to/message.txt user1@example.com user2@example.com<br><br>Alternatively you can use `-` as the message argument to read from standard input.<br><br>    $ django-admin.py send_email_message subject - user1@example.com user2@example.com &lt; /path/to/message.txt<br>    $ echo \"some message text\" | django-admin.py send_email_message subject - user1@example.com user2@example.com<br><br>### Full Usage<br><br>    Usage: manage.py send_email_message [options] &lt;subject&gt; &lt;message or file or \"-\"&gt; &lt;recipient1&gt;...&lt;recipientN&gt;<br><br>    Sends an email to the specified email addresses.<br>    Message can be a string, filename or \"-\" to read from stdin.<br><br>    Options:<br>      -v VERBOSITY, --verbosity=VERBOSITY<br>                            Verbosity level; 0=minimal output, 1=normal output,<br>                            2=verbose output, 3=very verbose output<br>      --settings=SETTINGS   The Python path to a settings module, e.g.<br>                            \"myproject.settings.main\". If this isn't provided, the<br>                            DJANGO_SETTINGS_MODULE environment variable will be<br>                            used.<br>      --pythonpath=PYTHONPATH<br>                            A directory to add to the Python path, e.g.<br>                            \"/home/djangoprojects/myproject\".<br>      --traceback           Print traceback on exception<br>      --noinput             Tells Django to NOT prompt the user for input of any<br>                            kind.<br>      -f FROM_EMAIL, --from=FROM_EMAIL<br>                            Email address to use to send emails from. Defaults to<br>                            use settings.DEFAULT_FROM_EMAIL<br>      -r, --raise-error     Exceptions during the email sending process will be<br>                            raised. Default to failing silently<br>      -n, --noprefix        Disables email subject prefix. Default behavior is to<br>                            prepend settings.EMAIL_SUBJECT_PREFIX<br>      -b BCC, --bcc=BCC     Comma separated list of email addresses for BCC<br>      -c CC, --cc=CC        Comma separated list of email addresses for CC<br>      --version             show program's version number and exit<br>      -h, --help            show this help message and exit<br><br><br>## Testing<br><br>Running the unittests is as simple as testing any other Django app<br><br>    django-admin.py test django_send_email<br><br>To test the command on a development SMTP server, you can run the debug SMTP server from the `smtp` library.<br><br>    $ python -m smtpd -n -c DebuggingServer localhost:1025<br><br>Just make sure that Django is configured correctly to point at localhost:1025\n          </div>"}, "last_serial": 1592328, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cb957d5ae1d74db2f437edbf772b6fc8", "sha256": "7cd5330acc5c410f87bdb53b153a319d108709c3758a43c8858b9f9eff5a3edb"}, "downloads": -1, "filename": "django-send-email-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cb957d5ae1d74db2f437edbf772b6fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5807, "upload_time": "2015-06-15T09:40:04", "upload_time_iso_8601": "2015-06-15T09:40:04.836879Z", "url": "https://files.pythonhosted.org/packages/c4/46/edf1682d45afe1989667fcbb7dc09c885079b74b1c8af1434f03c02fb4aa/django-send-email-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb957d5ae1d74db2f437edbf772b6fc8", "sha256": "7cd5330acc5c410f87bdb53b153a319d108709c3758a43c8858b9f9eff5a3edb"}, "downloads": -1, "filename": "django-send-email-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cb957d5ae1d74db2f437edbf772b6fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5807, "upload_time": "2015-06-15T09:40:04", "upload_time_iso_8601": "2015-06-15T09:40:04.836879Z", "url": "https://files.pythonhosted.org/packages/c4/46/edf1682d45afe1989667fcbb7dc09c885079b74b1c8af1434f03c02fb4aa/django-send-email-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:38 2020"}