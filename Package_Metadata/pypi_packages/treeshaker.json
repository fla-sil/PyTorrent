{"info": {"author": "Thomas Gilgenast", "author_email": "thomasgilgenast@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: System :: Archiving :: Packaging", "Topic :: System :: Software Distribution"], "description": "treeshaker\n==========\n\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/treeshaker.svg)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/treeshaker.svg)](https://pypi.org/project/treeshaker)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/treeshaker.svg)](https://pypi.org/project/treeshaker)\n![Test](https://github.com/sclabs/treeshaker/workflows/Test/badge.svg)\n\nA tree-shaking tool for Python.\n\nWhat it does\n------------\n\n![](images/treeshaker.png)\n\nIf you give treeshaker a root environment (specified by a `requirements.txt`\nfile), a list of target packages `target_packages` (in this case `mypkg` and\n`otherpkg`), and a target module (in this case `mypkg.target`), treeshaker will\ncreate an output directory that contains\n\n 1. the subset of modules among all the modules in all the `target_packages`\n    that are needed to import the target module, copied as .py files directly\n    into the root of the output directory and\n 2. a new `requirements.txt` file containing the subset of the root\n    `requirements.txt` lines needed to import all the modules in (1)\n\nAn end user can then open the folder, `pip install -r requirements.txt`, and\nimport the target module, without installing or obtaining the complete code for\nany of the `target_packages`.\n\nQuick start\n-----------\n\n 1. Install treeshaker:\n\n        $ pip install treeshaker\n\n 2. Define your root environment in a `requirements.txt` file and ensure the\n    listed packages are available in your current Python environment. If you\n    don't have a `requirements.txt` file yet, you can run\n\n        $ pip install <package that provides target module>\n        $ pip freeze > requirements.txt\n\n    If you already have a `requirements.txt` file, you can instead run\n\n        $ pip install -r requirements.txt\n\n 3. Create a configuration file (see the [example config file](examples/treeshaker.cfg)\n    for reference), specifying the location of your root `requirements.txt` file\n    as well as the details of what targets should be built and how.\n\n 4. Run treeshaker:\n\n        $ treeshaker\n\nDemo\n----\n\n 1. `git clone https://github.com/sclabs/treeshaker.git`\n 2. `cd treeshaker`\n 3. `virtualenv venv`\n 4. `source venv/bin/activate`\n 5. `pip install . ./examples/mypkg ./examples/otherpkg ./examples/externaldep ./examples/otherdep`\n 6. `treeshaker --config examples/treeshaker.cfg`\n\nTo clean up after the demo run\n\n    $ python examples/clean.py\n\nImportant features\n------------------\n\n### Building multiple targets versus building one target\n\nTo build one specific target, run\n\n    $ treeshaker --target <target_module_name>\n\ntreeshaker will find the configuration file section `[target:<target_module>]`\n(which must exist) to determine the `outdir` (a required key in every\n`[target:<target_module>]` section) and all other parameters for the build.\n\nTo build a list of targets, add the desired targets to the `[targets]` section\n(as keys with no values) and run\n\n    $ treeshaker\n\n### Module renaming\n\nThe copied modules will be renamed if necessary to avoid name conflicts.\n\nIf one copied module is `mypkg.dep` and another is `otherpkg.dep`, these will be\nrenamed to `dep_mypkg.py` and `dep_otherpkg.py`, respectively.\n\n### Import rewriting\n\nDuring module renaming, treeshaker will attempt to rewrite import statements in\nthe copied modules as necessary. The logic for doing this is quite rudimentary\nand is only expected to succeed when the import is of the form\n\n    import mypkg.mymod\n\nor\n\n    from mypkg.mymod import not_a_module\n\nIn these cases, when `mypkg.mymod` is copied, it will be renamed and a simple\nfind-and-replace will \"fix\" the import statement.\n\nThe following form of import is expected to fail:\n\n    from mypkg import mymod\n\nRelative imports are generally also expected to fail, though they may work when\nimporting a sibling module whose name has no conflicts.\n\n### Configuration file inheritance\n\nIf a key is missing from a `[target:<target_module>]` section, treeshaker will\nfall back to looking for the key in the `[target]` section.\n\nThe [example configuration file](examples/treeshaker.cfg) defines many keys in\nthe `[target]` section, but all of these can be overridden on a per-target basis\nby adding the key to the corresponding `[target:<target_module>]` section.\n\n### `<outdir>` interpolation\n\nYou can use the special string `<outdir>` in the `[target]` section or any\n`[target:<target_module>]` section and it will be replaced with the actual\noutdir at runtime.\n\n### Automatic documentation\n\nFunctions and/or classes listed in a `functions` key and [python-fire](https://github.com/google/python-fire)\ncomponents listed in a `fire_components` key in the configuration file will be\ndocumented in `<outdir>/README.md`, using their docstring or fire help page,\nrespectively.\n\nYou can also manually write a README section that will be included in\n`<outdir>/README.md` by specifying a filename in a `readme` key. If this file\ndoes not exist on the disk, it will not be included.\n\n### Custom configuration file name\n\nTo run treeshaker using a specific configuration file, run\n\n    $ treeshaker --config path/to/customconfig.cfg\n\nHow does it work?\n-----------------\n\n### Dependency graph construction\n\nPython provides [modulefinder](https://docs.python.org/2/library/modulefinder.html) in the\nstandard library, but it is not quite powerful of flexible enough to accomplish\nwhat we want. Instead, we use the [modulegraph](https://github.com/ronaldoussoren/modulegraph)\nlibrary, which is both performant (thanks to the useful `excludes` argument) and\nflexible (it creates a dependency graph that we can analyze in detail to\nclassify imported modules).\n\n### Matching PyPI package names to root module names\n\nHow can treeshaker determine that if you import a module from `sklearn`, the\ncorresponding `requirements.txt` line is e.g., `scikit-learn==0.22.1`?\n\n[pipreqs](https://github.com/bndr/pipreqs) has compiled a mapping of PyPI names\nto root module names for many PyPI packages; we use this list to perform this\nmatching. We considered adding a dependency on pipreqs, but we decided to vendor\nit ourselves to avoid an additional seven dependent package installs (we only\nuse the single file that contains the mapping).\n\nFor consistency, we choose to use the actual module name (the one used in\nimports and the one that reflects the location of the package on-disk after\ninstall) to specify the `target_packages`.\n\nCaveats\n-------\n\nWhile treeshaking is a cool concept, there's rarely any real need to perform\ntreeshaking on Python code. This library was created for a highly specific use\ncase: automatically minimizing the amount of code revealed from a monolithic\nprivate codebase when providing code for one specific module (or more\nspecifically, the task that module performs).\n\nIn a monolithic library design, it's possible to have a very large number of\nmodules and a large number of tasks that the library can accomplish. It might be\nbetter to apply the \"single responsibility principle\" and design a set of\nlibraries that each do one task, but what happens when the monolith already\nexists and a redesign is not feasible? In most situations, there is no harm in\ndistributing the entire library even if the person requesting the code wants to\naccomplish just one task. However, when the library code is private, it may be\ndesirable to minimize the total amount of code \"exposed\" or \"revealed\" to the\nrequestor.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sclabs/treeshaker", "keywords": "tree-shaking", "license": "", "maintainer": "", "maintainer_email": "", "name": "treeshaker", "package_url": "https://pypi.org/project/treeshaker/", "platform": "", "project_url": "https://pypi.org/project/treeshaker/", "project_urls": {"Homepage": "https://github.com/sclabs/treeshaker"}, "release_url": "https://pypi.org/project/treeshaker/0.0.2/", "requires_dist": ["fire (>=0.2.1)", "modulegraph (>=0.18)", "pip-tools (>=4.5.0)", "requirements-parser (>=0.2.0)", "six (>=1.14.0)", "configparser (>=4.0.2) ; python_version < \"3.2\"", "enum34 (>=1.1.9) ; python_version < \"3.4\"", "importlib-metadata (>=1.5.0) ; python_version < \"3.8\""], "requires_python": "", "summary": "A tree-shaking tool for Python.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>treeshaker</h1>\n<p><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca4c7d26786ab3928fa31f1fc00d30ffaeec2c36/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f747265657368616b65722e737667\">\n<a href=\"https://pypi.org/project/treeshaker\" rel=\"nofollow\"><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85f1bbfe4ffa25bf48623799362bd15a6ffb4899/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f747265657368616b65722e737667\"></a>\n<a href=\"https://pypi.org/project/treeshaker\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80a6f1bf9ce0f64155e794dc9ea2b41531cbaa45/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f747265657368616b65722e737667\"></a>\n<img alt=\"Test\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49da1d95d4ec325511aedd7a16a4ccd1d6e646f3/68747470733a2f2f6769746875622e636f6d2f73636c6162732f747265657368616b65722f776f726b666c6f77732f546573742f62616467652e737667\"></p>\n<p>A tree-shaking tool for Python.</p>\n<h2>What it does</h2>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ef2699d7f18a3a6a265440b051dfc36949320f2/696d616765732f747265657368616b65722e706e67\"></p>\n<p>If you give treeshaker a root environment (specified by a <code>requirements.txt</code>\nfile), a list of target packages <code>target_packages</code> (in this case <code>mypkg</code> and\n<code>otherpkg</code>), and a target module (in this case <code>mypkg.target</code>), treeshaker will\ncreate an output directory that contains</p>\n<ol>\n<li>the subset of modules among all the modules in all the <code>target_packages</code>\nthat are needed to import the target module, copied as .py files directly\ninto the root of the output directory and</li>\n<li>a new <code>requirements.txt</code> file containing the subset of the root\n<code>requirements.txt</code> lines needed to import all the modules in (1)</li>\n</ol>\n<p>An end user can then open the folder, <code>pip install -r requirements.txt</code>, and\nimport the target module, without installing or obtaining the complete code for\nany of the <code>target_packages</code>.</p>\n<h2>Quick start</h2>\n<ol>\n<li>\n<p>Install treeshaker:</p>\n<pre><code>$ pip install treeshaker\n</code></pre>\n</li>\n<li>\n<p>Define your root environment in a <code>requirements.txt</code> file and ensure the\nlisted packages are available in your current Python environment. If you\ndon't have a <code>requirements.txt</code> file yet, you can run</p>\n<pre><code>$ pip install &lt;package that provides target module&gt;\n$ pip freeze &gt; requirements.txt\n</code></pre>\n<p>If you already have a <code>requirements.txt</code> file, you can instead run</p>\n<pre><code>$ pip install -r requirements.txt\n</code></pre>\n</li>\n<li>\n<p>Create a configuration file (see the <a href=\"examples/treeshaker.cfg\" rel=\"nofollow\">example config file</a>\nfor reference), specifying the location of your root <code>requirements.txt</code> file\nas well as the details of what targets should be built and how.</p>\n</li>\n<li>\n<p>Run treeshaker:</p>\n<pre><code>$ treeshaker\n</code></pre>\n</li>\n</ol>\n<h2>Demo</h2>\n<ol>\n<li><code>git clone https://github.com/sclabs/treeshaker.git</code></li>\n<li><code>cd treeshaker</code></li>\n<li><code>virtualenv venv</code></li>\n<li><code>source venv/bin/activate</code></li>\n<li><code>pip install . ./examples/mypkg ./examples/otherpkg ./examples/externaldep ./examples/otherdep</code></li>\n<li><code>treeshaker --config examples/treeshaker.cfg</code></li>\n</ol>\n<p>To clean up after the demo run</p>\n<pre><code>$ python examples/clean.py\n</code></pre>\n<h2>Important features</h2>\n<h3>Building multiple targets versus building one target</h3>\n<p>To build one specific target, run</p>\n<pre><code>$ treeshaker --target &lt;target_module_name&gt;\n</code></pre>\n<p>treeshaker will find the configuration file section <code>[target:&lt;target_module&gt;]</code>\n(which must exist) to determine the <code>outdir</code> (a required key in every\n<code>[target:&lt;target_module&gt;]</code> section) and all other parameters for the build.</p>\n<p>To build a list of targets, add the desired targets to the <code>[targets]</code> section\n(as keys with no values) and run</p>\n<pre><code>$ treeshaker\n</code></pre>\n<h3>Module renaming</h3>\n<p>The copied modules will be renamed if necessary to avoid name conflicts.</p>\n<p>If one copied module is <code>mypkg.dep</code> and another is <code>otherpkg.dep</code>, these will be\nrenamed to <code>dep_mypkg.py</code> and <code>dep_otherpkg.py</code>, respectively.</p>\n<h3>Import rewriting</h3>\n<p>During module renaming, treeshaker will attempt to rewrite import statements in\nthe copied modules as necessary. The logic for doing this is quite rudimentary\nand is only expected to succeed when the import is of the form</p>\n<pre><code>import mypkg.mymod\n</code></pre>\n<p>or</p>\n<pre><code>from mypkg.mymod import not_a_module\n</code></pre>\n<p>In these cases, when <code>mypkg.mymod</code> is copied, it will be renamed and a simple\nfind-and-replace will \"fix\" the import statement.</p>\n<p>The following form of import is expected to fail:</p>\n<pre><code>from mypkg import mymod\n</code></pre>\n<p>Relative imports are generally also expected to fail, though they may work when\nimporting a sibling module whose name has no conflicts.</p>\n<h3>Configuration file inheritance</h3>\n<p>If a key is missing from a <code>[target:&lt;target_module&gt;]</code> section, treeshaker will\nfall back to looking for the key in the <code>[target]</code> section.</p>\n<p>The <a href=\"examples/treeshaker.cfg\" rel=\"nofollow\">example configuration file</a> defines many keys in\nthe <code>[target]</code> section, but all of these can be overridden on a per-target basis\nby adding the key to the corresponding <code>[target:&lt;target_module&gt;]</code> section.</p>\n<h3><code>&lt;outdir&gt;</code> interpolation</h3>\n<p>You can use the special string <code>&lt;outdir&gt;</code> in the <code>[target]</code> section or any\n<code>[target:&lt;target_module&gt;]</code> section and it will be replaced with the actual\noutdir at runtime.</p>\n<h3>Automatic documentation</h3>\n<p>Functions and/or classes listed in a <code>functions</code> key and <a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">python-fire</a>\ncomponents listed in a <code>fire_components</code> key in the configuration file will be\ndocumented in <code>&lt;outdir&gt;/README.md</code>, using their docstring or fire help page,\nrespectively.</p>\n<p>You can also manually write a README section that will be included in\n<code>&lt;outdir&gt;/README.md</code> by specifying a filename in a <code>readme</code> key. If this file\ndoes not exist on the disk, it will not be included.</p>\n<h3>Custom configuration file name</h3>\n<p>To run treeshaker using a specific configuration file, run</p>\n<pre><code>$ treeshaker --config path/to/customconfig.cfg\n</code></pre>\n<h2>How does it work?</h2>\n<h3>Dependency graph construction</h3>\n<p>Python provides <a href=\"https://docs.python.org/2/library/modulefinder.html\" rel=\"nofollow\">modulefinder</a> in the\nstandard library, but it is not quite powerful of flexible enough to accomplish\nwhat we want. Instead, we use the <a href=\"https://github.com/ronaldoussoren/modulegraph\" rel=\"nofollow\">modulegraph</a>\nlibrary, which is both performant (thanks to the useful <code>excludes</code> argument) and\nflexible (it creates a dependency graph that we can analyze in detail to\nclassify imported modules).</p>\n<h3>Matching PyPI package names to root module names</h3>\n<p>How can treeshaker determine that if you import a module from <code>sklearn</code>, the\ncorresponding <code>requirements.txt</code> line is e.g., <code>scikit-learn==0.22.1</code>?</p>\n<p><a href=\"https://github.com/bndr/pipreqs\" rel=\"nofollow\">pipreqs</a> has compiled a mapping of PyPI names\nto root module names for many PyPI packages; we use this list to perform this\nmatching. We considered adding a dependency on pipreqs, but we decided to vendor\nit ourselves to avoid an additional seven dependent package installs (we only\nuse the single file that contains the mapping).</p>\n<p>For consistency, we choose to use the actual module name (the one used in\nimports and the one that reflects the location of the package on-disk after\ninstall) to specify the <code>target_packages</code>.</p>\n<h2>Caveats</h2>\n<p>While treeshaking is a cool concept, there's rarely any real need to perform\ntreeshaking on Python code. This library was created for a highly specific use\ncase: automatically minimizing the amount of code revealed from a monolithic\nprivate codebase when providing code for one specific module (or more\nspecifically, the task that module performs).</p>\n<p>In a monolithic library design, it's possible to have a very large number of\nmodules and a large number of tasks that the library can accomplish. It might be\nbetter to apply the \"single responsibility principle\" and design a set of\nlibraries that each do one task, but what happens when the monolith already\nexists and a redesign is not feasible? In most situations, there is no harm in\ndistributing the entire library even if the person requesting the code wants to\naccomplish just one task. However, when the library code is private, it may be\ndesirable to minimize the total amount of code \"exposed\" or \"revealed\" to the\nrequestor.</p>\n\n          </div>"}, "last_serial": 6862132, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7a077bf7acb89ba189bd9cf7f0b49454", "sha256": "563fa80b4b38dd19dcc4787d919662be15cf5135b7bec52981623e4d1045c648"}, "downloads": -1, "filename": "treeshaker-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7a077bf7acb89ba189bd9cf7f0b49454", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21438, "upload_time": "2020-02-26T23:05:26", "upload_time_iso_8601": "2020-02-26T23:05:26.472870Z", "url": "https://files.pythonhosted.org/packages/6a/62/b3f1eb2048dd13f13cd1107ff5aab156c5d84f3a5be0a788c77c9518aab1/treeshaker-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18ada52612632277383b56e3b85777f0", "sha256": "ca19eb1303b2f0bfa07b25a754839c57567e746ea92b38e22875e2f198b75d1d"}, "downloads": -1, "filename": "treeshaker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "18ada52612632277383b56e3b85777f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67163, "upload_time": "2020-02-26T23:05:28", "upload_time_iso_8601": "2020-02-26T23:05:28.776199Z", "url": "https://files.pythonhosted.org/packages/8d/81/a5d175da09a4132866b050a34c9d46ee99e79496b7e9c7e86d4c49ed250e/treeshaker-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8857b795f1593d2cea226d9d43899578", "sha256": "ae189937d71b7528bf7258a94202032298566c2b702a00619ddf451917601ab6"}, "downloads": -1, "filename": "treeshaker-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8857b795f1593d2cea226d9d43899578", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22369, "upload_time": "2020-03-22T22:49:34", "upload_time_iso_8601": "2020-03-22T22:49:34.451086Z", "url": "https://files.pythonhosted.org/packages/40/c2/4005aea4fcd334408b1b83095e8558a370f184122e9a1ba18f3941560317/treeshaker-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24472be8e384ec0f4216f6cac9269c27", "sha256": "32f080ffab7d92223cf1548a664db7fcf02eca41833dcd88edaf59a6e8466dc4"}, "downloads": -1, "filename": "treeshaker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "24472be8e384ec0f4216f6cac9269c27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25520, "upload_time": "2020-03-22T22:49:35", "upload_time_iso_8601": "2020-03-22T22:49:35.825127Z", "url": "https://files.pythonhosted.org/packages/f3/a7/ebedca678165f4400806d876ec53a02bf46dd345a2908f76cfc7befa8537/treeshaker-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8857b795f1593d2cea226d9d43899578", "sha256": "ae189937d71b7528bf7258a94202032298566c2b702a00619ddf451917601ab6"}, "downloads": -1, "filename": "treeshaker-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8857b795f1593d2cea226d9d43899578", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22369, "upload_time": "2020-03-22T22:49:34", "upload_time_iso_8601": "2020-03-22T22:49:34.451086Z", "url": "https://files.pythonhosted.org/packages/40/c2/4005aea4fcd334408b1b83095e8558a370f184122e9a1ba18f3941560317/treeshaker-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24472be8e384ec0f4216f6cac9269c27", "sha256": "32f080ffab7d92223cf1548a664db7fcf02eca41833dcd88edaf59a6e8466dc4"}, "downloads": -1, "filename": "treeshaker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "24472be8e384ec0f4216f6cac9269c27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25520, "upload_time": "2020-03-22T22:49:35", "upload_time_iso_8601": "2020-03-22T22:49:35.825127Z", "url": "https://files.pythonhosted.org/packages/f3/a7/ebedca678165f4400806d876ec53a02bf46dd345a2908f76cfc7befa8537/treeshaker-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:35 2020"}