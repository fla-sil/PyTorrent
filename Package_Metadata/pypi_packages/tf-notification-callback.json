{"info": {"author": "Tushar Mittal", "author_email": "chiragmittal.mittal@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3"], "description": "# TensorFlow Notification Callback\n\n[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)\n\n[![PyPI version](https://badge.fury.io/py/tf-notification-callback.svg)](https://badge.fury.io/py/tf-notification-callback)\n\nA Tensorflow/Keras callback which sends information about your model training, on various messaging platforms.\n\n## Installation\n\nUsing `pip`:\n\n```bash\npip install tf_notification_callback\n```\n\n## Usage\n\nImport the required module and add it to the list callbacks while training your model.\n\n**Example:**\n\n```python\n>>> from tf_notification_callback import TelegramCallback\n>>> telegram_callback = TelegramCallback('<BotToken>',\n                                     '<ChatID>',\n\t                             'CNN Model',\n\t                             ['loss', 'val_loss'],\n\t                             ['accuracy', 'val_accuracy'],\n\t                             True)\n>>> model.fit(x_train, y_train,\n          batch_size=32,\n          epochs=10,\n          validation_data=(x_test, y_test),\n          callbacks=[telegram_callback])\n```\n\n### Telegram\n\n1. Create a telegram bot using BotFather\n\t* Search for @BotFather on telegram.\n\t* Send `/help` to get list of all commands.\n\t* Send `/newbot` to create a new bot and complete the setup.\n\t* Copy the **bot token** after creating the bot.\n2. Get the **chat ID**\n\t* Search for the bot you created and send it any random message.\n\t* Go to this URL `https://api.telegram.org/bot<BOT_TOKEN>/getUpdates` (replace <BOT_TOKEN> with your bot token)\n\t* Copy the `chat id` of the user you want to send messages to.\n3. Use the `TelegramCallback()` class.\n\n```python\nTelegramCallback(bot_token=None, chat_id=None, modelName='model', loss_metrics=['loss'], acc_metrics=[], getSummary=False):\n```\n\n**Arguments:**\n\n`bot_token` : unique token of Telegram bot `{str}`\n`chat_id` : Telegram chat id you want to send message to `{str}`\n`modelName` : name of your model `{str}`\n`loss_metrics` : loss metrics you want in the loss graph `{list of strings}`\n`acc_metrics` : accuracy metrics you want in the accuracy graphs `{list of strings}`\n`getSummary` : Do you want message for each epoch (False) or a single message containing information about all epochs (True). `{bool}`\n\n### Slack\n\n1. Create a Slack workspace\n2. Create a new channel\n3. Search for the **Incoming Webhooks** in the Apps and install it.\n4. Copy the **Webhook URL**\n5. Import the `SlackCallback()` class. It takes in the following arguments\n\n`webhookURL` : unique webhook URL of the app `{str}`\n`channel` :  channel name or username you want to send message to `{str}`\n`modelName` : name of your model `{str}`\n`loss_metrics` : loss metrics you want in the loss graph `{list of strings}`\n`acc_metrics` : accuracy metrics you want in the accuracy graph `{list of strings}`\n`getSummary` : Do you want message for each epoch (False) or a single message containing information about all epochs (True). `{bool}`\n\n*Sending images in Slack is not supported currently.*\n\n## ToDo\n\n* WhatsApp\n* E-Mail\n* Zulip\n* Messages\n\n## Motivation\n\nAs the Deep Learning models are getting more and more complex and computationally heavy, they take a very long time to train. During my internship, people used to start the model training and left it overnight. They could only check its progress the next day. So I thought it would be great if there was a simple way to get the training info remotely on their devices.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/techytushar/tf_notification_callback", "keywords": "api python keras training callback tensorflow machine learning deep learning nlp", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "tf-notification-callback", "package_url": "https://pypi.org/project/tf-notification-callback/", "platform": "", "project_url": "https://pypi.org/project/tf-notification-callback/", "project_urls": {"Homepage": "https://github.com/techytushar/tf_notification_callback"}, "release_url": "https://pypi.org/project/tf-notification-callback/0.2/", "requires_dist": ["python-telegram-bot (>=12)", "matplotlib (>=3)", "keras (>=2.3)", "tensorflow (>=2)"], "requires_python": ">=3.6", "summary": "Receive notifications about your model training anywhere you want!", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TensorFlow Notification Callback</h1>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"forthebadge made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c389fc25d835c23e3f833bf61244db7530f53e46/687474703a2f2f466f7254686542616467652e636f6d2f696d616765732f6261646765732f6d6164652d776974682d707974686f6e2e737667\"></a></p>\n<p><a href=\"https://badge.fury.io/py/tf-notification-callback\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7da0cbf2b5ad2cd94f13af946edeb53ac08016b/68747470733a2f2f62616467652e667572792e696f2f70792f74662d6e6f74696669636174696f6e2d63616c6c6261636b2e737667\"></a></p>\n<p>A Tensorflow/Keras callback which sends information about your model training, on various messaging platforms.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code>:</p>\n<pre>pip install tf_notification_callback\n</pre>\n<h2>Usage</h2>\n<p>Import the required module and add it to the list callbacks while training your model.</p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tf_notification_callback</span> <span class=\"kn\">import</span> <span class=\"n\">TelegramCallback</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">telegram_callback</span> <span class=\"o\">=</span> <span class=\"n\">TelegramCallback</span><span class=\"p\">(</span><span class=\"s1\">'&lt;BotToken&gt;'</span><span class=\"p\">,</span>\n                                     <span class=\"s1\">'&lt;ChatID&gt;'</span><span class=\"p\">,</span>\n\t                             <span class=\"s1\">'CNN Model'</span><span class=\"p\">,</span>\n\t                             <span class=\"p\">[</span><span class=\"s1\">'loss'</span><span class=\"p\">,</span> <span class=\"s1\">'val_loss'</span><span class=\"p\">],</span>\n\t                             <span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">,</span> <span class=\"s1\">'val_accuracy'</span><span class=\"p\">],</span>\n\t                             <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span>\n          <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n          <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n          <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">),</span>\n          <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">telegram_callback</span><span class=\"p\">])</span>\n</pre>\n<h3>Telegram</h3>\n<ol>\n<li>Create a telegram bot using BotFather\n<ul>\n<li>Search for @BotFather on telegram.</li>\n<li>Send <code>/help</code> to get list of all commands.</li>\n<li>Send <code>/newbot</code> to create a new bot and complete the setup.</li>\n<li>Copy the <strong>bot token</strong> after creating the bot.</li>\n</ul>\n</li>\n<li>Get the <strong>chat ID</strong>\n<ul>\n<li>Search for the bot you created and send it any random message.</li>\n<li>Go to this URL <code>https://api.telegram.org/bot&lt;BOT_TOKEN&gt;/getUpdates</code> (replace &lt;BOT_TOKEN&gt; with your bot token)</li>\n<li>Copy the <code>chat id</code> of the user you want to send messages to.</li>\n</ul>\n</li>\n<li>Use the <code>TelegramCallback()</code> class.</li>\n</ol>\n<pre><span class=\"n\">TelegramCallback</span><span class=\"p\">(</span><span class=\"n\">bot_token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">modelName</span><span class=\"o\">=</span><span class=\"s1\">'model'</span><span class=\"p\">,</span> <span class=\"n\">loss_metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'loss'</span><span class=\"p\">],</span> <span class=\"n\">acc_metrics</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">getSummary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n</pre>\n<p><strong>Arguments:</strong></p>\n<p><code>bot_token</code> : unique token of Telegram bot <code>{str}</code>\n<code>chat_id</code> : Telegram chat id you want to send message to <code>{str}</code>\n<code>modelName</code> : name of your model <code>{str}</code>\n<code>loss_metrics</code> : loss metrics you want in the loss graph <code>{list of strings}</code>\n<code>acc_metrics</code> : accuracy metrics you want in the accuracy graphs <code>{list of strings}</code>\n<code>getSummary</code> : Do you want message for each epoch (False) or a single message containing information about all epochs (True). <code>{bool}</code></p>\n<h3>Slack</h3>\n<ol>\n<li>Create a Slack workspace</li>\n<li>Create a new channel</li>\n<li>Search for the <strong>Incoming Webhooks</strong> in the Apps and install it.</li>\n<li>Copy the <strong>Webhook URL</strong></li>\n<li>Import the <code>SlackCallback()</code> class. It takes in the following arguments</li>\n</ol>\n<p><code>webhookURL</code> : unique webhook URL of the app <code>{str}</code>\n<code>channel</code> :  channel name or username you want to send message to <code>{str}</code>\n<code>modelName</code> : name of your model <code>{str}</code>\n<code>loss_metrics</code> : loss metrics you want in the loss graph <code>{list of strings}</code>\n<code>acc_metrics</code> : accuracy metrics you want in the accuracy graph <code>{list of strings}</code>\n<code>getSummary</code> : Do you want message for each epoch (False) or a single message containing information about all epochs (True). <code>{bool}</code></p>\n<p><em>Sending images in Slack is not supported currently.</em></p>\n<h2>ToDo</h2>\n<ul>\n<li>WhatsApp</li>\n<li>E-Mail</li>\n<li>Zulip</li>\n<li>Messages</li>\n</ul>\n<h2>Motivation</h2>\n<p>As the Deep Learning models are getting more and more complex and computationally heavy, they take a very long time to train. During my internship, people used to start the model training and left it overnight. They could only check its progress the next day. So I thought it would be great if there was a simple way to get the training info remotely on their devices.</p>\n\n          </div>"}, "last_serial": 6637440, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5e67bd22bceff48964c67cbb49856b93", "sha256": "55a7e17e22c9d46a2229457ce231be9feb322c8e3e4d59e12eb2a934361e5ff6"}, "downloads": -1, "filename": "tf_notification_callback-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5e67bd22bceff48964c67cbb49856b93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4144, "upload_time": "2020-02-15T12:28:28", "upload_time_iso_8601": "2020-02-15T12:28:28.405627Z", "url": "https://files.pythonhosted.org/packages/0a/35/93e734aa951c2e2492ca1fc15fe6116b92411f412e809f897b5af85ffc3b/tf_notification_callback-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc7f70b8248b3cad0e0afe2e08ad2227", "sha256": "392c53f97bb3556facede143a936470b39cf5d26594184393d282ab666044319"}, "downloads": -1, "filename": "tf_notification_callback-0.1.tar.gz", "has_sig": false, "md5_digest": "bc7f70b8248b3cad0e0afe2e08ad2227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3712, "upload_time": "2020-02-15T12:28:31", "upload_time_iso_8601": "2020-02-15T12:28:31.526812Z", "url": "https://files.pythonhosted.org/packages/5e/23/598955b328f398f4063214c849c3abf010920d1984a6ce92769bf9cbf578/tf_notification_callback-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fb12e4c48c2f03d00358fa44b7ec3a1a", "sha256": "534af0f589fc08a1a71c26a133650f58dac24c716a8b869e449db9edcde15b46"}, "downloads": -1, "filename": "tf_notification_callback-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb12e4c48c2f03d00358fa44b7ec3a1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4222, "upload_time": "2020-02-15T19:48:00", "upload_time_iso_8601": "2020-02-15T19:48:00.783433Z", "url": "https://files.pythonhosted.org/packages/8a/2e/aa4b4d04982f37bce230134e7187c21d49dd188bb9f6434a4e3bdf856e22/tf_notification_callback-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c9ac55b6efe91876872c36e23d2a9d0", "sha256": "37ecd8f6abd7f1a72edd59a6c0c62434d00be1e9069e5c65441a973dd4c9dcf8"}, "downloads": -1, "filename": "tf_notification_callback-0.2.tar.gz", "has_sig": false, "md5_digest": "6c9ac55b6efe91876872c36e23d2a9d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3872, "upload_time": "2020-02-15T19:48:03", "upload_time_iso_8601": "2020-02-15T19:48:03.217096Z", "url": "https://files.pythonhosted.org/packages/9b/d9/6de5893c6e1de7bf2dcff912fcdac627b43fefd593b89a880a4d0f7557fa/tf_notification_callback-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb12e4c48c2f03d00358fa44b7ec3a1a", "sha256": "534af0f589fc08a1a71c26a133650f58dac24c716a8b869e449db9edcde15b46"}, "downloads": -1, "filename": "tf_notification_callback-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb12e4c48c2f03d00358fa44b7ec3a1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4222, "upload_time": "2020-02-15T19:48:00", "upload_time_iso_8601": "2020-02-15T19:48:00.783433Z", "url": "https://files.pythonhosted.org/packages/8a/2e/aa4b4d04982f37bce230134e7187c21d49dd188bb9f6434a4e3bdf856e22/tf_notification_callback-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c9ac55b6efe91876872c36e23d2a9d0", "sha256": "37ecd8f6abd7f1a72edd59a6c0c62434d00be1e9069e5c65441a973dd4c9dcf8"}, "downloads": -1, "filename": "tf_notification_callback-0.2.tar.gz", "has_sig": false, "md5_digest": "6c9ac55b6efe91876872c36e23d2a9d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3872, "upload_time": "2020-02-15T19:48:03", "upload_time_iso_8601": "2020-02-15T19:48:03.217096Z", "url": "https://files.pythonhosted.org/packages/9b/d9/6de5893c6e1de7bf2dcff912fcdac627b43fefd593b89a880a4d0f7557fa/tf_notification_callback-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:26 2020"}