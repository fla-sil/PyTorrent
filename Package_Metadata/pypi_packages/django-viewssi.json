{"info": {"author": "tamask", "author_email": "tamas.kemenczy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "* Bugs_\r\n\r\n.. _Bugs: http://bugs.launchpad.net/django-viewssi\r\n\r\nA template tag for making simulated GET requests to Django application view\r\nfunctions. The HTTP response can be displayed in the given template.\r\n\r\nVariations of usage of ``viewssi``::\r\n\r\n    {% viewssi path.to.view %}\r\n    {% viewssi path.to.view arg,arg2,kwarg=val %}\r\n    {% viewssi path.to.view arg,arg2,kwarg=val as var %}\r\n    {% viewssi path.to.view arg,arg2,kwarg=val get p1=v1,p2=v2 as var %}\r\n\r\nThe first argument is the path to a view function to call. If the\r\nview requires ``args`` and/or ``kwargs``, pass them as the second\r\ntoken in the tag. ``args`` and the values of ``kwargs`` are\r\nresolved to template variables unless they are quoted.\r\n\r\nThe view doesn't have to be exposed in a URL\r\nconfiguration. Essentially any function can be called that accepts\r\none argument (the request) and returns a\r\n``django.http.HttpResponse`` object.\r\n\r\nYou can pass a GET query string by including a ``get`` token in\r\nthe tag followed by ``key=value`` pairs. Parameter values are also\r\nresolved to template variables unless they are quoted.\r\n\r\nIf the ``as <template-variable-name`` token of the tag is\r\nprovided, the view's response is assigned to the given template\r\nvariable. Otherwise, the response content is returned in place.\r\n\r\nWhen the response is assigned to a template variable, the http\r\nresponse is represented as a ``HttpResponseProxy`` object which\r\ncontains a template-useable interface for fetching the response\r\ncode, headers, and content. Examples::\r\n\r\n    {% ifequal response.status_code \"200\" %}\r\n    {{ response }}\r\n    {% endifequal %}\r\n\r\n``HttpResponseProxy`` behaves is a dict-like object. The http\r\nresponse headers are set as the dict items and their names are\r\ntransposed for use in templates, i.e. 'Content-type' becomes\r\n'content_type'. For example::\r\n\r\n    {% ifequal response.content_type \"text/html\" %}\r\n    {% endifequal %}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/django-viewssi", "keywords": "django utilities templatetag", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-viewssi", "package_url": "https://pypi.org/project/django-viewssi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-viewssi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/django-viewssi"}, "release_url": "https://pypi.org/project/django-viewssi/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Template tag for requesting views in templates (Django)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li><a href=\"http://bugs.launchpad.net/django-viewssi\" rel=\"nofollow\">Bugs</a></li>\n</ul>\n<p>A template tag for making simulated GET requests to Django application view\nfunctions. The HTTP response can be displayed in the given template.</p>\n<p>Variations of usage of <tt>viewssi</tt>:</p>\n<pre>{% viewssi path.to.view %}\n{% viewssi path.to.view arg,arg2,kwarg=val %}\n{% viewssi path.to.view arg,arg2,kwarg=val as var %}\n{% viewssi path.to.view arg,arg2,kwarg=val get p1=v1,p2=v2 as var %}\n</pre>\n<p>The first argument is the path to a view function to call. If the\nview requires <tt>args</tt> and/or <tt>kwargs</tt>, pass them as the second\ntoken in the tag. <tt>args</tt> and the values of <tt>kwargs</tt> are\nresolved to template variables unless they are quoted.</p>\n<p>The view doesn\u2019t have to be exposed in a URL\nconfiguration. Essentially any function can be called that accepts\none argument (the request) and returns a\n<tt>django.http.HttpResponse</tt> object.</p>\n<p>You can pass a GET query string by including a <tt>get</tt> token in\nthe tag followed by <tt>key=value</tt> pairs. Parameter values are also\nresolved to template variables unless they are quoted.</p>\n<p>If the <tt>as <span class=\"pre\">&lt;template-variable-name</span></tt> token of the tag is\nprovided, the view\u2019s response is assigned to the given template\nvariable. Otherwise, the response content is returned in place.</p>\n<p>When the response is assigned to a template variable, the http\nresponse is represented as a <tt>HttpResponseProxy</tt> object which\ncontains a template-useable interface for fetching the response\ncode, headers, and content. Examples:</p>\n<pre>{% ifequal response.status_code \"200\" %}\n{{ response }}\n{% endifequal %}\n</pre>\n<p><tt>HttpResponseProxy</tt> behaves is a dict-like object. The http\nresponse headers are set as the dict items and their names are\ntransposed for use in templates, i.e. \u2018Content-type\u2019 becomes\n\u2018content_type\u2019. For example:</p>\n<pre>{% ifequal response.content_type \"text/html\" %}\n{% endifequal %}\n</pre>\n\n          </div>"}, "last_serial": 790991, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d0c9645b5dec4619b62e7bd1dc0790ed", "sha256": "2714b5459ad6856b96d43cdc9b4ffc75d7caf0bf67b8d1433fbde74de9b2ff47"}, "downloads": -1, "filename": "django-viewssi-0.1.tar.gz", "has_sig": false, "md5_digest": "d0c9645b5dec4619b62e7bd1dc0790ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8407, "upload_time": "2009-01-29T17:46:26", "upload_time_iso_8601": "2009-01-29T17:46:26Z", "url": "https://files.pythonhosted.org/packages/24/38/44d8233ecb9af5afcb34f7ac4a9293633f7c0941ccf1a5cb3d53cd87c1d4/django-viewssi-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d2848a0c62e6c88190f82284c79d9209", "sha256": "919e5cdaffb58edb41245f8878f24967e3d2c50240f19abab33b81cf6c51aa8a"}, "downloads": -1, "filename": "django-viewssi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d2848a0c62e6c88190f82284c79d9209", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4934, "upload_time": "2009-01-30T16:23:17", "upload_time_iso_8601": "2009-01-30T16:23:17Z", "url": "https://files.pythonhosted.org/packages/81/6b/64778d6ec3b2ca18d638d8ab6c419195d1f5bdee8bed3f5038acda6bd0b3/django-viewssi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2848a0c62e6c88190f82284c79d9209", "sha256": "919e5cdaffb58edb41245f8878f24967e3d2c50240f19abab33b81cf6c51aa8a"}, "downloads": -1, "filename": "django-viewssi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d2848a0c62e6c88190f82284c79d9209", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4934, "upload_time": "2009-01-30T16:23:17", "upload_time_iso_8601": "2009-01-30T16:23:17Z", "url": "https://files.pythonhosted.org/packages/81/6b/64778d6ec3b2ca18d638d8ab6c419195d1f5bdee8bed3f5038acda6bd0b3/django-viewssi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:01 2020"}