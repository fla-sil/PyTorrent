{"info": {"author": "Charles LeDoux", "author_email": "charles.a.ledoux@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux"], "description": "This is meant to be a super simple drop in for tracking progress.\n\nThis is, in essence, a wrapper around [progressbar2][1] with my personally \npreferred defaults and ways of doing things.\n\nIf you need anything even slightly more complicated than what EtaTimer \nprovides, I recommend looking at the progressbar2 module instead.\n\n[1]: https://github.com/WoLpH/python-progressbar\n\n# Quickstart\n    from etatimer import EtaTimer\n    import time\n\n    x = range(5)\n    t = Timer(len(x))\n    for i in x:\n        t.tick()\n        time.sleep(1)\n\n# Classes\n\n### `EtaTimer(total, name=\"\", stream=sys.stdout)`\nCreate a simple ETA Timer named `name` that tracks `total` number of operations \nand prints updates to the stream `stream`.\n\n### `DummyEtaTimer()`\nTimer that supports same API as EtaTimer, but does nothing. Allows for code \nthat must always pass a timer, but doesn't always have information needed for \ncreating an EtaTimer.\n\nExample: If a file is not seekable, we can't determine the number of lines.\n\n    if infile.seekable():\n        timer = ETATimer(sum(1 for i in infile))\n        infile.seek(0, 0)\n    else:\n        timer = DummyTimer()\n    process_file(infile, timer)\n\n# API\n\n### `timer.tick()`\n    \nMark that one processing item has been completed. \n\nIf all items are processed, ding() will be automatically called.\n\nThe timer can be stopped early through manual calling of ding()\n\nCan be used as an arbitrary callback function. Will accept and ignore any \nnumber of parameters.\n\n### `timer.ding()`\n\nTimer's done!\n\nPrints final statistics. \n\n### `timer.finished`\n\nBoolean indicating if time is finished.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cledoux/python-etatimer", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "etatimer", "package_url": "https://pypi.org/project/etatimer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/etatimer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cledoux/python-etatimer"}, "release_url": "https://pypi.org/project/etatimer/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Copyright (c) Charles LeDouxAll rights reserved.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            This is meant to be a super simple drop in for tracking progress.<br><br>This is, in essence, a wrapper around [progressbar2][1] with my personally <br>preferred defaults and ways of doing things.<br><br>If you need anything even slightly more complicated than what EtaTimer <br>provides, I recommend looking at the progressbar2 module instead.<br><br>[1]: https://github.com/WoLpH/python-progressbar<br><br># Quickstart<br>    from etatimer import EtaTimer<br>    import time<br><br>    x = range(5)<br>    t = Timer(len(x))<br>    for i in x:<br>        t.tick()<br>        time.sleep(1)<br><br># Classes<br><br>### `EtaTimer(total, name=\"\", stream=sys.stdout)`<br>Create a simple ETA Timer named `name` that tracks `total` number of operations <br>and prints updates to the stream `stream`.<br><br>### `DummyEtaTimer()`<br>Timer that supports same API as EtaTimer, but does nothing. Allows for code <br>that must always pass a timer, but doesn't always have information needed for <br>creating an EtaTimer.<br><br>Example: If a file is not seekable, we can't determine the number of lines.<br><br>    if infile.seekable():<br>        timer = ETATimer(sum(1 for i in infile))<br>        infile.seek(0, 0)<br>    else:<br>        timer = DummyTimer()<br>    process_file(infile, timer)<br><br># API<br><br>### `timer.tick()`<br>    <br>Mark that one processing item has been completed. <br><br>If all items are processed, ding() will be automatically called.<br><br>The timer can be stopped early through manual calling of ding()<br><br>Can be used as an arbitrary callback function. Will accept and ignore any <br>number of parameters.<br><br>### `timer.ding()`<br><br>Timer's done!<br><br>Prints final statistics. <br><br>### `timer.finished`<br><br>Boolean indicating if time is finished.\n          </div>"}, "last_serial": 1829688, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "c9db259fe52f5363dac87dcb6f55d2c9", "sha256": "ce535f8e3d10a38524c9c3eb82d1306d2ef02e52b7904ff03bd5fe3f1348b996"}, "downloads": -1, "filename": "etatimer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c9db259fe52f5363dac87dcb6f55d2c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3897, "upload_time": "2015-10-19T21:55:09", "upload_time_iso_8601": "2015-10-19T21:55:09.852229Z", "url": "https://files.pythonhosted.org/packages/19/dc/0fd20ada592abf038018e65cd2953f2fca32bcc95b18eb983ac5e4388ad3/etatimer-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c6ff5664b65b067650d3da31f1fa8381", "sha256": "7d5e74a77bdfb2236b0d8457c4614a5765810ea571aae96b505daa0ffef55674"}, "downloads": -1, "filename": "etatimer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c6ff5664b65b067650d3da31f1fa8381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3988, "upload_time": "2015-10-25T02:14:28", "upload_time_iso_8601": "2015-10-25T02:14:28.521491Z", "url": "https://files.pythonhosted.org/packages/85/e6/ded3d4688cce7aa10d5c4d95d9ffdb7a9146d97022c67c86f08e34f39535/etatimer-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "91f15e2b35a62447339e84a8b278b87b", "sha256": "518c4970347089073b2daa77b3959f2ff5ae52cdecc4f3a8de76b85afb792a64"}, "downloads": -1, "filename": "etatimer-0.0.5.tar.gz", "has_sig": false, "md5_digest": "91f15e2b35a62447339e84a8b278b87b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4259, "upload_time": "2015-11-05T04:34:37", "upload_time_iso_8601": "2015-11-05T04:34:37.344738Z", "url": "https://files.pythonhosted.org/packages/1a/26/ea9061edff36a69fe51938a9abb349f9e83efa16b47b7c3403af95696604/etatimer-0.0.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4777afc5064e09e55548930e87d4ea03", "sha256": "ba31153f306c83bbb104d7dc61c6bf6882e71fb1dbe38ea40e82d7ac9ceff781"}, "downloads": -1, "filename": "etatimer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4777afc5064e09e55548930e87d4ea03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4293, "upload_time": "2015-11-23T16:22:27", "upload_time_iso_8601": "2015-11-23T16:22:27.182326Z", "url": "https://files.pythonhosted.org/packages/1b/3c/f2862f8c606d3cc6bc9682bd99a96aa3028837c717a5724ee86036f4ac0e/etatimer-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4777afc5064e09e55548930e87d4ea03", "sha256": "ba31153f306c83bbb104d7dc61c6bf6882e71fb1dbe38ea40e82d7ac9ceff781"}, "downloads": -1, "filename": "etatimer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4777afc5064e09e55548930e87d4ea03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4293, "upload_time": "2015-11-23T16:22:27", "upload_time_iso_8601": "2015-11-23T16:22:27.182326Z", "url": "https://files.pythonhosted.org/packages/1b/3c/f2862f8c606d3cc6bc9682bd99a96aa3028837c717a5724ee86036f4ac0e/etatimer-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:32 2020"}