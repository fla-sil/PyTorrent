{"info": {"author": "Sam Morley", "author_email": "sam@inakleinbottle.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# markingpy\nTool for grading a directory of python submissions using a scheme file containing exercises. The grader supports multiple test cases and analyses code style using PyLint.\n\n[![Build Status](https://travis-ci.com/inakleinbottle/markingpy.svg?branch=master)](https://travis-ci.com/inakleinbottle/markingpy) \n\nRead the full documentation at [https://markingpy.readthedocs.io](markingpy.readthedocs.io).\n\n## Installation\nMarkingpy should be installed using the pip installation tool.\n\n```sh\npip install markingpy\n```\n\n## Example usage\nThere are two steps to using markingpy. First is to create the marking scheme file, which should be of the following form:\n\n```python\nfrom markingpy import mark_scheme, exercise, PyLintChecker\n\n# If you want to use timing tests, use \nfrom markingpy import TimingCase\n\n# Initialise mark scheme configuration.\nms = mark_scheme(\n    linter=PyLintChecker(),  # add a linter to the marking process\n    submissions_path='submissions' # Directory to search for submissions\n)\n\n\n@exercise(name='Exercise 1',\n\t  descr='Short description for feedback')\ndef ex_1_function(arg1, arg2):\n\t\"\"\"\n\tModel solution for exercise 1.\n\t\"\"\"\n\tpass\n\n# Now add the call test components\n\nex_1_function.add_test_call((1, 1), marks=1)\nex_1_function.add_test.call((1, 2), marks=1)\n\n# Add a timing test using the following\ncases = [\n\tTimingCase((1, 1), {}, 1),\n\tTimingCase((10, 10), {}, 3),\n]\nex_1_function.timing_test(cases, marks=2)\n\n\n@ex_1_function.test\ndef custom_test():\n\t\"\"\"\n\tDefine a custom test. This test determines whether the\n\tsubmission function does any type checking during\n\texecution. The test is passed if the function raises\n\ta TypeError.\n\n\tCustom functions should return True or False for success\n\tor failure, respectively.\n\t\"\"\"\n\n\t# Use the function ex_1_function in the test\n\t# this will be replaced by the submission function\n\t# during testing\n\ttry:\n\t\tout = ex_1_function(1.0, 2.0)\n\texcept TypeError:\n\t\treturn True\n\treturn False\n```\n\nOnce the marking scheme has been created, in `scheme.py` or similar, use the command line tool to begin grading submissions:\n```\nmarkingy scheme.py run\n```\nThe results and feedback will be generated and stored in a database, and can be retrieved using the command\n```\nmarkingpy scheme.py dump directory\n```\nwhich will dump feedback files (.txt) into *directory* for each submission.\n\n## Development setup\nClone the repository and run ``make install``. Markingpy uses ``pipenv`` to handle its dependencies.\n\n## Additional Disclaimer\nThis is my first Python package that I have \"released\" (i.e. put on PyPI), and I would be grateful for any feedback and constructive criticisms. Contributions are certainly welcome in all forms; see below.\n\n## Contributing\n\n1. Fork it (<https://github.com/inakleinbottle/markingpy/fork>)\n2. Create your feature branch (`git checkout -b feature/name`)\n3. Commit your changes (`git commit -m 'Add some feature')\n4. Push to the branch (`git push origin feature/name`)\n5. Create a new Pull Request.\n\n## Release History\n\n * 1.0.0\n    * Reworked grader system. Tests can now be run in separate processes to provide better isolation.\n    * Reworked command line interface.\n    * Reorganised and improved test suite.\n    * Greatly simplified marking scheme creation and exercise association.\n\n * 0.2.0\n\t* Added support to tests on arbitrary objects and their methods.\n\t* Various improvements to the code base. Added descriptor support\n\t  for test classes and exercise classes.\n\t* Expanded the documentation.\n\t* Implemented finder system for locating submissions, which currently\n\t  supports loading submissions from directory (as before) and SQLite \n\t  databases. Planned support for server loading.\n\n * 0.1.0\n\t* First release\n\n## Meta\n\nSam Morley - sam@inakleinbottle.com - [https://inakelinbottle.com](https://inakleinbottle.com)\n\nDistributed under the GPLV3 license. See ``LICENSE`` for more information.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://markingpy.readthedocs.io/en/latest/index.html", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "markingpy", "package_url": "https://pypi.org/project/markingpy/", "platform": "", "project_url": "https://pypi.org/project/markingpy/", "project_urls": {"Homepage": "https://markingpy.readthedocs.io/en/latest/index.html"}, "release_url": "https://pypi.org/project/markingpy/1.0.0/", "requires_dist": ["pylint"], "requires_python": ">=3.6", "summary": "Program for automatic grading of Python code.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>markingpy</h1>\n<p>Tool for grading a directory of python submissions using a scheme file containing exercises. The grader supports multiple test cases and analyses code style using PyLint.</p>\n<p><a href=\"https://travis-ci.com/inakleinbottle/markingpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/017b2c5d2a2e64afaeac785c1570f33817a5ca50/68747470733a2f2f7472617669732d63692e636f6d2f696e616b6c65696e626f74746c652f6d61726b696e6770792e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Read the full documentation at <a href=\"markingpy.readthedocs.io\" rel=\"nofollow\">https://markingpy.readthedocs.io</a>.</p>\n<h2>Installation</h2>\n<p>Markingpy should be installed using the pip installation tool.</p>\n<pre>pip install markingpy\n</pre>\n<h2>Example usage</h2>\n<p>There are two steps to using markingpy. First is to create the marking scheme file, which should be of the following form:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">markingpy</span> <span class=\"kn\">import</span> <span class=\"n\">mark_scheme</span><span class=\"p\">,</span> <span class=\"n\">exercise</span><span class=\"p\">,</span> <span class=\"n\">PyLintChecker</span>\n\n<span class=\"c1\"># If you want to use timing tests, use </span>\n<span class=\"kn\">from</span> <span class=\"nn\">markingpy</span> <span class=\"kn\">import</span> <span class=\"n\">TimingCase</span>\n\n<span class=\"c1\"># Initialise mark scheme configuration.</span>\n<span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">mark_scheme</span><span class=\"p\">(</span>\n    <span class=\"n\">linter</span><span class=\"o\">=</span><span class=\"n\">PyLintChecker</span><span class=\"p\">(),</span>  <span class=\"c1\"># add a linter to the marking process</span>\n    <span class=\"n\">submissions_path</span><span class=\"o\">=</span><span class=\"s1\">'submissions'</span> <span class=\"c1\"># Directory to search for submissions</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"nd\">@exercise</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Exercise 1'</span><span class=\"p\">,</span>\n\t  <span class=\"n\">descr</span><span class=\"o\">=</span><span class=\"s1\">'Short description for feedback'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ex_1_function</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n\t<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">\tModel solution for exercise 1.</span>\n<span class=\"sd\">\t\"\"\"</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Now add the call test components</span>\n\n<span class=\"n\">ex_1_function</span><span class=\"o\">.</span><span class=\"n\">add_test_call</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ex_1_function</span><span class=\"o\">.</span><span class=\"n\">add_test</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add a timing test using the following</span>\n<span class=\"n\">cases</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"n\">TimingCase</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">{},</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n\t<span class=\"n\">TimingCase</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">{},</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n<span class=\"n\">ex_1_function</span><span class=\"o\">.</span><span class=\"n\">timing_test</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">,</span> <span class=\"n\">marks</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@ex_1_function</span><span class=\"o\">.</span><span class=\"n\">test</span>\n<span class=\"k\">def</span> <span class=\"nf\">custom_test</span><span class=\"p\">():</span>\n\t<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">\tDefine a custom test. This test determines whether the</span>\n<span class=\"sd\">\tsubmission function does any type checking during</span>\n<span class=\"sd\">\texecution. The test is passed if the function raises</span>\n<span class=\"sd\">\ta TypeError.</span>\n\n<span class=\"sd\">\tCustom functions should return True or False for success</span>\n<span class=\"sd\">\tor failure, respectively.</span>\n<span class=\"sd\">\t\"\"\"</span>\n\n\t<span class=\"c1\"># Use the function ex_1_function in the test</span>\n\t<span class=\"c1\"># this will be replaced by the submission function</span>\n\t<span class=\"c1\"># during testing</span>\n\t<span class=\"k\">try</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">ex_1_function</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n\t<span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"kc\">True</span>\n\t<span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre>\n<p>Once the marking scheme has been created, in <code>scheme.py</code> or similar, use the command line tool to begin grading submissions:</p>\n<pre><code>markingy scheme.py run\n</code></pre>\n<p>The results and feedback will be generated and stored in a database, and can be retrieved using the command</p>\n<pre><code>markingpy scheme.py dump directory\n</code></pre>\n<p>which will dump feedback files (.txt) into <em>directory</em> for each submission.</p>\n<h2>Development setup</h2>\n<p>Clone the repository and run <code>make install</code>. Markingpy uses <code>pipenv</code> to handle its dependencies.</p>\n<h2>Additional Disclaimer</h2>\n<p>This is my first Python package that I have \"released\" (i.e. put on PyPI), and I would be grateful for any feedback and constructive criticisms. Contributions are certainly welcome in all forms; see below.</p>\n<h2>Contributing</h2>\n<ol>\n<li>Fork it (<a href=\"https://github.com/inakleinbottle/markingpy/fork\" rel=\"nofollow\">https://github.com/inakleinbottle/markingpy/fork</a>)</li>\n<li>Create your feature branch (<code>git checkout -b feature/name</code>)</li>\n<li>Commit your changes (`git commit -m 'Add some feature')</li>\n<li>Push to the branch (<code>git push origin feature/name</code>)</li>\n<li>Create a new Pull Request.</li>\n</ol>\n<h2>Release History</h2>\n<ul>\n<li>\n<p>1.0.0</p>\n<ul>\n<li>Reworked grader system. Tests can now be run in separate processes to provide better isolation.</li>\n<li>Reworked command line interface.</li>\n<li>Reorganised and improved test suite.</li>\n<li>Greatly simplified marking scheme creation and exercise association.</li>\n</ul>\n</li>\n<li>\n<p>0.2.0</p>\n<ul>\n<li>Added support to tests on arbitrary objects and their methods.</li>\n<li>Various improvements to the code base. Added descriptor support\nfor test classes and exercise classes.</li>\n<li>Expanded the documentation.</li>\n<li>Implemented finder system for locating submissions, which currently\nsupports loading submissions from directory (as before) and SQLite\ndatabases. Planned support for server loading.</li>\n</ul>\n</li>\n<li>\n<p>0.1.0</p>\n<ul>\n<li>First release</li>\n</ul>\n</li>\n</ul>\n<h2>Meta</h2>\n<p>Sam Morley - <a href=\"mailto:sam@inakleinbottle.com\">sam@inakleinbottle.com</a> - <a href=\"https://inakleinbottle.com\" rel=\"nofollow\">https://inakelinbottle.com</a></p>\n<p>Distributed under the GPLV3 license. See <code>LICENSE</code> for more information.</p>\n\n          </div>"}, "last_serial": 5950846, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1f77727b6026dbd38f181fedbab0b2f5", "sha256": "19a7340aaea9a5908be06a983379b3c452fd60905392dd7df2840bfc7d35e995"}, "downloads": -1, "filename": "markingpy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1f77727b6026dbd38f181fedbab0b2f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31365, "upload_time": "2019-01-12T20:21:23", "upload_time_iso_8601": "2019-01-12T20:21:23.312500Z", "url": "https://files.pythonhosted.org/packages/4f/df/a28c3b4cd48525577e3246e6f3d366929903df368611ddcf7eded0254b2e/markingpy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caaef442a362c97f918adff8e30fd8b1", "sha256": "44d1b6ebbd52de72a309786a61ef171d0e9ad9cfdfd75b1c3e3fe5fd595832de"}, "downloads": -1, "filename": "markingpy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "caaef442a362c97f918adff8e30fd8b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15963, "upload_time": "2019-01-12T20:21:25", "upload_time_iso_8601": "2019-01-12T20:21:25.585112Z", "url": "https://files.pythonhosted.org/packages/b7/e8/5be0ec52188e3cc858c746d8f070dee832a8592236b12d46db92af28b1ca/markingpy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c6b575298bdff2eff146f5efe3d76d2f", "sha256": "2a71f6dd77eaa7b6effeddffbc4e57e76b361ce8f1dd543fe906f5d97038c0b8"}, "downloads": -1, "filename": "markingpy-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c6b575298bdff2eff146f5efe3d76d2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52021, "upload_time": "2019-01-28T10:08:38", "upload_time_iso_8601": "2019-01-28T10:08:38.235502Z", "url": "https://files.pythonhosted.org/packages/99/f5/823e3a457e114563d45e8fd8291410913f4b5f0215c620427644d42db8c3/markingpy-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d54ef860fbebb9165e2a4431b6fd0f5", "sha256": "dd8b6d37297d1cdcd63ce7c5a20923c64e8b4789378de83059cb3ef7085f82ef"}, "downloads": -1, "filename": "markingpy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7d54ef860fbebb9165e2a4431b6fd0f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29823, "upload_time": "2019-01-28T10:08:39", "upload_time_iso_8601": "2019-01-28T10:08:39.959289Z", "url": "https://files.pythonhosted.org/packages/be/48/7ae6d5899277ca015ac100c32de14a2f3b1ccb295484a277590360b10443/markingpy-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "5ec21e33845a97663788435d2685b244", "sha256": "f808b36bb3ae8012a73f29dd8a75cc316c0f2792371e7912166c30d60b48101c"}, "downloads": -1, "filename": "markingpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5ec21e33845a97663788435d2685b244", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59537, "upload_time": "2019-10-09T16:32:48", "upload_time_iso_8601": "2019-10-09T16:32:48.505967Z", "url": "https://files.pythonhosted.org/packages/44/de/21e0eb3c09dbc85f51acf0783276f09532e65bbe235ec1fc2fa905027f67/markingpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "668f15a126c1642fe25b183ff0e4128b", "sha256": "8ccc7ca127973c67b824ec9bae18312be50fe8e612fcd230f90afa860b01ba50"}, "downloads": -1, "filename": "markingpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "668f15a126c1642fe25b183ff0e4128b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30715, "upload_time": "2019-10-09T16:32:50", "upload_time_iso_8601": "2019-10-09T16:32:50.427496Z", "url": "https://files.pythonhosted.org/packages/0d/47/89de039d2a3cea322abda57691c84e567cdb39c36827d997ba08bd547090/markingpy-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5ec21e33845a97663788435d2685b244", "sha256": "f808b36bb3ae8012a73f29dd8a75cc316c0f2792371e7912166c30d60b48101c"}, "downloads": -1, "filename": "markingpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5ec21e33845a97663788435d2685b244", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 59537, "upload_time": "2019-10-09T16:32:48", "upload_time_iso_8601": "2019-10-09T16:32:48.505967Z", "url": "https://files.pythonhosted.org/packages/44/de/21e0eb3c09dbc85f51acf0783276f09532e65bbe235ec1fc2fa905027f67/markingpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "668f15a126c1642fe25b183ff0e4128b", "sha256": "8ccc7ca127973c67b824ec9bae18312be50fe8e612fcd230f90afa860b01ba50"}, "downloads": -1, "filename": "markingpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "668f15a126c1642fe25b183ff0e4128b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30715, "upload_time": "2019-10-09T16:32:50", "upload_time_iso_8601": "2019-10-09T16:32:50.427496Z", "url": "https://files.pythonhosted.org/packages/0d/47/89de039d2a3cea322abda57691c84e567cdb39c36827d997ba08bd547090/markingpy-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:42 2020"}