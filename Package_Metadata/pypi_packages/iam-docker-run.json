{"info": {"author": "Doug Kerwin", "author_email": "dwkerwin@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "IAM-Docker-Run\n==============\n\nRun Docker containers within the context of an AWS IAM Role, and other\ndevelopment workflow helpers.\n\nMotivation\n----------\n\nThe goal is to run our application on our laptops in development in as\nsimilar environment as possible to the production environment when the\napplication runs in ECS or EKS, which would run under the task IAM role\nwith permissions specific to that task.\n\nA shortcut sometimes taken by developers is to execute code locally with\ntheir personal IAM user which often has very high and broad privileges.\nWorse, those long lived credentials sometimes find themselves checked\ninto source control as part of a docker-compose.yml file, etc.\nIAM-Docker-Run allows you to run your containers locally within the\ncontext of the IAM role you\u2019ve created for your application. The\ncredentials themselves are temporary, they are stored in a file in your\nsystem\u2019s temp path, and never wind up in source control.\n\nIAM-Docker-Run generates AWS temporary credentials and builds a lengthly\n``docker run`` command line statement, echoing it as it executes it so\nyou have transparency into the command it is running.\n\n**This is a development workflow tool, not designed to run production\ncontainers.**\n\nA related effort is\n`IAM-Starter <https://github.com/billtrust/iam-starter>`__ which starts\na local process (outside of Docker) in the context of an AWS IAM role.\n\nInstallation\n------------\n\n.. code:: shell\n\n   pip install iam-docker-run\n\nBasic Example Usage\n-------------------\n\nSay you are developing a console application using AWS resources and are\nin your project\u2019s root directory and want to execute your application\nusing your latest source code and the IAM role created for your project.\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice:latest \\\n       --role role-myservice-task\n\nYou can alternatively specify a local AWS profile, then the container\nwill run with the credentials given by that role. This profile would\nhave to exist locally in your ``~/.aws/config`` file, which can be\ncreated with ``aws configure --profile myprofile``.\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice:latest \\\n       --profile myprofile\n\nOr you can specify a role and a profile. In this case the profile\nprovides the credentials necessary to assume the role.\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice:latest \\\n       --role role-myservice-task \\\n       --profile myprofile\n\nArguments and More Examples\n---------------------------\n\nFull argument list\n~~~~~~~~~~~~~~~~~~\n\nFor a full list of arguments, run ``iam-docker-run -h``.\n\nFull Entrypoint\n~~~~~~~~~~~~~~~\n\nThe Docker syntax for overriding an entrypoint with anything more than\none word can seem couterintuitive. With the Docker syntax, the\nentrypoint can only be the first command and all arguments to that are\nseparated out on the cmd, so if you want to run\n``python myapp.py --myarg test123``, then ``python`` is your entrypoint\nand the rest go on your cmd, to produce a docker run statement like:\n\n.. code:: shell\n\n   docker run --entrypoint python mycompany/myimage myapp.py --myarg test123\n\nTo make things easier, iam-docker-run provides the ``--full-entrypoint``\nargument, so you can use it like this:\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myimage \\\n       --full-entrypoint \"python myapp.py --myarg test123\"\n\nShell\n~~~~~\n\nIf you want to debug something in the container, just add a ``--shell``\nargument and it will override the entrypoint with ``/bin/bash``. If you\nwish to use an alternate shell, you can override this with the following\nenrivonment variable:\n\n.. code:: shell\n\n   export IAM_DOCKER_RUN_SHELL_COMMAND=\"/bin/sh\"\n\nIt is especially convenient to use this command to add to the end of any\nexisting set of arguments. It will override both the default ENTRYPOINT\ndefined in the Dockerfile as well as the ``--full-entrypoint`` argument.\n\n.. code:: shell\n\n   # for example, --shell will take precedence over --full-entrypoint\n   iam-docker-run \\\n       --image mycompany/myimage \\\n       --full-entrypoint \"python myapp.py --myarg test123\" \\\n       --shell # let me jump in real quick without modifying the rest of my args\n\nCustom environment variables file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have environment variables you want passed to Docker via\n``docker run --env-file``, with iam-docker-run you would use\n``--custom-env-file``. The reason for this is that iam-docker-run is\nalready using a file to pass into Docker with the environment variables\nfor the AWS temporary credentials, so if you have environment variables\nto add to that, specify a ``--custom-env-file`` and that will be\nconcatenated to the env file created by iam-docker-run.\n\nDefault behavior is to look for a file called ``iam-docker-run.env``. If\nthis file is not found it is silently ignored. This is helpful if you\nhave an environment variable such as ``AWS_ENV=dev`` which you want\nloaded each time without specifying this argument. Hopefully the rest of\nyour variables are loaded into the environment from a remote\nconfiguration store such as AWS SSM Parameter Store. If you need help\nwith this see\n`ssm-starter <https://github.com/billtrust/ssm-starter>`__.\n\nCustom environment arguments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdditionally you can pass environment variables by ``-e`` or\n``--envvar``, which is passthrough to the ``docker -e`` argument. These\nare additive with the custom environment variables file.\n\nForeground / background\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAs the main use case is a development workflow, by default the container\nruns in the foreground. To run in the background, specify\n``--detached``, which maps to the ``docker run -d`` command. To interact\nwith the terminal, specify ``--interactive``, which maps to\n``docker run -it``.\n\nSource code volume mount by arguments (developer workflow)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``--host-source-path`` and ``--container-source-path`` arguments are\ndesigned to make it easy to mount your source code into the container\nwhen using Docker in a developer workflow where you make changes in your\nIDE on your host computer and want that source code immediately inserted\ninto the container. The ``--host-source-path`` argument can be relative.\nIn prior versions of IAM-Docker-Run the source code mount was automatic\nand required the ``--no-volume`` argument to prevent mounting it. This\nautomatic mount behavior has been removed however these arguments will\nremain for backward compatibility.\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice \\\n       --role role-myservice-task \\\n       --host-source-path ./mysource \\\n       --container-source-path /myapp\n\nAdditional volume mounts\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can mount additional volumes by ``-v`` or ``--volume``, which is\npassthrough to the ``docker -v`` argument. These are additive with the\nsource code volume mount (if specified) and the docker in docker mount.\n\nOvercoming SELinux with volume mounts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you are running SELinux and experience permission denied issues when\nmounting volumes, specify the ``--selinux`` argument, which will alter\nthe dockr run volume mount argument so that the volume is readable.\n\nEnable Docker in Docker\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to enable Docker in Docker, you can mount the Docker socket\nby adding the ``--mount-docker`` argument. If you then install Docker in\nthe container with the below script and use the Docker CLI from within\nthe container.\n\n.. code:: shell\n\n   # install the docker client\n   curl -fsSL get.docker.com -o get-docker.sh\n   sh get-docker.sh\n\nAdding a portmap\n~~~~~~~~~~~~~~~~\n\nYou can use ``--portmap`` or ``-p``, which is a direct match to the\n``docker run -p`` argument, for example:\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice \\\n       --role role-myservice-task \\\n       --portmap 30000:3000\n\nThe ``--portmap 30000:3000`` argument in this example would take a HTTP\nserver listening in the container on port 3000 and maps it to port 30000\non your laptop.\n\nNote that you can use multiple portmaps as follows:\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myservice \\\n       --role role-myservice-task \\\n       -p 4430:443 \\\n       -p 8080:80\n\nRegion\n~~~~~~\n\nIf ``--region`` is provided that will take precidence, otherwise\niam-docker-run will look for your region in AWS_REGION or\nAWS_DEFAULT_REGION environment variables. If none are provided it will\ndefault to us-east-1.\n\nContainer Name Tempfile\n-----------------------\n\nIAM-Docker-Run generates a random container name if the \u2013name arg is not\nsupplied. If this container name is needed for anything downstream such\nas the code debugging inside the container feature of VSCode, the\ncontainer name needs to be discoverable. IAM-Docker-Run enables this by\ngenerating a file which contains the name of the container and writes it\nin a pre-determined location.\n\nThe location of this file follows the:\n``/temp/<last directory name of pwd>/_container_name.txt``\n\nYou can override the first part of the prefix with the following\nenvironment variable:\n\n.. code:: shell\n\n   export IAM_DOCKER_RUN_CONTAINER_NAME_PATH_PREFIX=/tmp/somewhere/else\n\nOr you can disable this entirely by setting:\n\n.. code:: shell\n\n   export IAM_DOCKER_RUN_DISABLE_CONTAINER_NAME_TEMPFILE=true\n\nShortcut\n--------\n\nAn alternate way to invoke iam-docker-run on the command line is to use\nthe alias ``idr``. Just less typing.\n\n.. code:: shell\n\n   idr --image busybox --role myrole\n\nExample CI workflow\n-------------------\n\nThe second use case for iam-docker-run is for running tests from\ncontinuous integration.\n\n.. code:: shell\n\n   iam-docker-run \\\n       --image mycompany/myimage \\\n       --role role-myservice-task \\\n       --full-entrypoint \"/bin/bash /tests/run-integration-test.sh\" \\\n       --profile jenkins\n\nVerbose debugging\n-----------------\n\nTo turn on verbose output for debugging, set the ``--verbose`` argument.\n\nTemporary Credentials Expire Within 1 Hour\n------------------------------------------\n\nA goal of this project was to be as easy as possible for developers to\nuse and to allow the greatest portability. To that end, the temporary\nAWS credentials are generated just once before the container starts,\nrather than requiring a more complex setup where an additional container\nwould run all the time and regenerate credentials. When the temp\ncredentials expire (the STS max of 1 hour), the application will start\nexperiencing expired credential exceptions. For this among other reasons\nis why you would not use this tool in any environment other than local\ndevelopment or in your build/CI/CD workflow where usage periods are\nshort and the container can be restarted easily and often.\n\nNote: While the STS temporary credentials maximum was recently raised to\n12 hours, if you are already in the context of an IAM role which is then\nassuming another role, the limit in this case remains to be 1 hour.\n\nTesting\n-------\n\nRun the automated script cli tests:\n\n.. code:: shell\n\n   pip install --user nose scripttest\n   python setup.py install --user\n   export AWS_REGION=us-east-1\n   # set AWS_PROFILE to a valid profile name which can assume roles\n   export AWS_PROFILE=dev\n   nosetests -v --exe -w ./test\n\nTesting the use case of a role being supplied without a profile, using\nthe credentials in the environment, is difficult to test an a generic\nautomated way. For now, the following manual steps can test this\ncondition.\n\n.. code:: shell\n\n   # set ROLE_ARN_FOR_LOCAL_CREDS to a role which can list s3 buckets\n   export ROLE_ARN_FOR_LOCAL_CREDS=arn:aws:iam::123456789012:role/my-role\n   # set AWS_PROFILE to a valid profile name which can assume the ROLE_ARN\n   export AWS_PROFILE=dev\n   export ROLE_NAME_FOR_CONTAINER=role-ops-developers\n\n   aws sts assume-role \\\n       --role-arn $ROLE_ARN_FOR_LOCAL_CREDS \\\n       --role-session-name testing \\\n       --profile $AWS_PROFILE\n\n   # put credentials in the environment\n   export AWS_ACCESS_KEY_ID=fromabove\n   export AWS_SECRET_ACCESS_KEY=fromabove\n   export AWS_SESSION_TOKEN=fromabove\n\n   iam-docker-run \\\n       --role $ROLE_NAME_FOR_CONTAINER \\\n       --image mesosphere/aws-cli:latest --full-entrypoint \"aws s3 ls\"\n\n   # command should succeed with a listing of s3 buckets\n\nPublishing Updates to PyPi\n--------------------------\n\nFor the maintainer - to publish an updated version of Iam-Docker-Run,\nincrement the version number in iam_docker_run.py and run the following:\n\n.. code:: shell\n\n   docker build -f ./Dockerfile.buildenv -t billtrust/iam-docker-run:build .\n   docker run --rm -it --entrypoint make billtrust/iam-docker-run:build publish\n\nAt the prompts, enter the username and password to the Billtrust\npypi.org repo.\n\nLicense\n-------\n\nMIT License\n\nCopyright (c) 2018 Factor Systems Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/billtrust/iam-docker-run", "keywords": "aws,iam,iam-role,docker", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "iam-docker-run", "package_url": "https://pypi.org/project/iam-docker-run/", "platform": "", "project_url": "https://pypi.org/project/iam-docker-run/", "project_urls": {"Homepage": "https://github.com/billtrust/iam-docker-run"}, "release_url": "https://pypi.org/project/iam-docker-run/0.3.6/", "requires_dist": null, "requires_python": "", "summary": "Run Docker containers within the context of an AWS IAM Role, and other development workflow helpers.", "version": "0.3.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Run Docker containers within the context of an AWS IAM Role, and other\ndevelopment workflow helpers.</p>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>The goal is to run our application on our laptops in development in as\nsimilar environment as possible to the production environment when the\napplication runs in ECS or EKS, which would run under the task IAM role\nwith permissions specific to that task.</p>\n<p>A shortcut sometimes taken by developers is to execute code locally with\ntheir personal IAM user which often has very high and broad privileges.\nWorse, those long lived credentials sometimes find themselves checked\ninto source control as part of a docker-compose.yml file, etc.\nIAM-Docker-Run allows you to run your containers locally within the\ncontext of the IAM role you\u2019ve created for your application. The\ncredentials themselves are temporary, they are stored in a file in your\nsystem\u2019s temp path, and never wind up in source control.</p>\n<p>IAM-Docker-Run generates AWS temporary credentials and builds a lengthly\n<tt>docker run</tt> command line statement, echoing it as it executes it so\nyou have transparency into the command it is running.</p>\n<p><strong>This is a development workflow tool, not designed to run production\ncontainers.</strong></p>\n<p>A related effort is\n<a href=\"https://github.com/billtrust/iam-starter\" rel=\"nofollow\">IAM-Starter</a> which starts\na local process (outside of Docker) in the context of an AWS IAM role.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install iam-docker-run\n</pre>\n</div>\n<div id=\"basic-example-usage\">\n<h2>Basic Example Usage</h2>\n<p>Say you are developing a console application using AWS resources and are\nin your project\u2019s root directory and want to execute your application\nusing your latest source code and the IAM role created for your project.</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice:latest <span class=\"se\">\\\n</span>    --role role-myservice-task\n</pre>\n<p>You can alternatively specify a local AWS profile, then the container\nwill run with the credentials given by that role. This profile would\nhave to exist locally in your <tt><span class=\"pre\">~/.aws/config</span></tt> file, which can be\ncreated with <tt>aws configure <span class=\"pre\">--profile</span> myprofile</tt>.</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice:latest <span class=\"se\">\\\n</span>    --profile myprofile\n</pre>\n<p>Or you can specify a role and a profile. In this case the profile\nprovides the credentials necessary to assume the role.</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice:latest <span class=\"se\">\\\n</span>    --role role-myservice-task <span class=\"se\">\\\n</span>    --profile myprofile\n</pre>\n</div>\n<div id=\"arguments-and-more-examples\">\n<h2>Arguments and More Examples</h2>\n<div id=\"full-argument-list\">\n<h3>Full argument list</h3>\n<p>For a full list of arguments, run <tt><span class=\"pre\">iam-docker-run</span> <span class=\"pre\">-h</span></tt>.</p>\n</div>\n<div id=\"full-entrypoint\">\n<h3>Full Entrypoint</h3>\n<p>The Docker syntax for overriding an entrypoint with anything more than\none word can seem couterintuitive. With the Docker syntax, the\nentrypoint can only be the first command and all arguments to that are\nseparated out on the cmd, so if you want to run\n<tt>python myapp.py <span class=\"pre\">--myarg</span> test123</tt>, then <tt>python</tt> is your entrypoint\nand the rest go on your cmd, to produce a docker run statement like:</p>\n<pre>docker run --entrypoint python mycompany/myimage myapp.py --myarg test123\n</pre>\n<p>To make things easier, iam-docker-run provides the <tt><span class=\"pre\">--full-entrypoint</span></tt>\nargument, so you can use it like this:</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myimage <span class=\"se\">\\\n</span>    --full-entrypoint <span class=\"s2\">\"python myapp.py --myarg test123\"</span>\n</pre>\n</div>\n<div id=\"shell\">\n<h3>Shell</h3>\n<p>If you want to debug something in the container, just add a <tt><span class=\"pre\">--shell</span></tt>\nargument and it will override the entrypoint with <tt>/bin/bash</tt>. If you\nwish to use an alternate shell, you can override this with the following\nenrivonment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">IAM_DOCKER_RUN_SHELL_COMMAND</span><span class=\"o\">=</span><span class=\"s2\">\"/bin/sh\"</span>\n</pre>\n<p>It is especially convenient to use this command to add to the end of any\nexisting set of arguments. It will override both the default ENTRYPOINT\ndefined in the Dockerfile as well as the <tt><span class=\"pre\">--full-entrypoint</span></tt> argument.</p>\n<pre><span class=\"c1\"># for example, --shell will take precedence over --full-entrypoint\n</span>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myimage <span class=\"se\">\\\n</span>    --full-entrypoint <span class=\"s2\">\"python myapp.py --myarg test123\"</span> <span class=\"se\">\\\n</span>    --shell <span class=\"c1\"># let me jump in real quick without modifying the rest of my args</span>\n</pre>\n</div>\n<div id=\"custom-environment-variables-file\">\n<h3>Custom environment variables file</h3>\n<p>If you have environment variables you want passed to Docker via\n<tt>docker run <span class=\"pre\">--env-file</span></tt>, with iam-docker-run you would use\n<tt><span class=\"pre\">--custom-env-file</span></tt>. The reason for this is that iam-docker-run is\nalready using a file to pass into Docker with the environment variables\nfor the AWS temporary credentials, so if you have environment variables\nto add to that, specify a <tt><span class=\"pre\">--custom-env-file</span></tt> and that will be\nconcatenated to the env file created by iam-docker-run.</p>\n<p>Default behavior is to look for a file called <tt><span class=\"pre\">iam-docker-run.env</span></tt>. If\nthis file is not found it is silently ignored. This is helpful if you\nhave an environment variable such as <tt>AWS_ENV=dev</tt> which you want\nloaded each time without specifying this argument. Hopefully the rest of\nyour variables are loaded into the environment from a remote\nconfiguration store such as AWS SSM Parameter Store. If you need help\nwith this see\n<a href=\"https://github.com/billtrust/ssm-starter\" rel=\"nofollow\">ssm-starter</a>.</p>\n</div>\n<div id=\"custom-environment-arguments\">\n<h3>Custom environment arguments</h3>\n<p>Additionally you can pass environment variables by <tt><span class=\"pre\">-e</span></tt> or\n<tt><span class=\"pre\">--envvar</span></tt>, which is passthrough to the <tt>docker <span class=\"pre\">-e</span></tt> argument. These\nare additive with the custom environment variables file.</p>\n</div>\n<div id=\"foreground-background\">\n<h3>Foreground / background</h3>\n<p>As the main use case is a development workflow, by default the container\nruns in the foreground. To run in the background, specify\n<tt><span class=\"pre\">--detached</span></tt>, which maps to the <tt>docker run <span class=\"pre\">-d</span></tt> command. To interact\nwith the terminal, specify <tt><span class=\"pre\">--interactive</span></tt>, which maps to\n<tt>docker run <span class=\"pre\">-it</span></tt>.</p>\n</div>\n<div id=\"source-code-volume-mount-by-arguments-developer-workflow\">\n<h3>Source code volume mount by arguments (developer workflow)</h3>\n<p>The <tt><span class=\"pre\">--host-source-path</span></tt> and <tt><span class=\"pre\">--container-source-path</span></tt> arguments are\ndesigned to make it easy to mount your source code into the container\nwhen using Docker in a developer workflow where you make changes in your\nIDE on your host computer and want that source code immediately inserted\ninto the container. The <tt><span class=\"pre\">--host-source-path</span></tt> argument can be relative.\nIn prior versions of IAM-Docker-Run the source code mount was automatic\nand required the <tt><span class=\"pre\">--no-volume</span></tt> argument to prevent mounting it. This\nautomatic mount behavior has been removed however these arguments will\nremain for backward compatibility.</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice <span class=\"se\">\\\n</span>    --role role-myservice-task <span class=\"se\">\\\n</span>    --host-source-path ./mysource <span class=\"se\">\\\n</span>    --container-source-path /myapp\n</pre>\n</div>\n<div id=\"additional-volume-mounts\">\n<h3>Additional volume mounts</h3>\n<p>You can mount additional volumes by <tt><span class=\"pre\">-v</span></tt> or <tt><span class=\"pre\">--volume</span></tt>, which is\npassthrough to the <tt>docker <span class=\"pre\">-v</span></tt> argument. These are additive with the\nsource code volume mount (if specified) and the docker in docker mount.</p>\n</div>\n<div id=\"overcoming-selinux-with-volume-mounts\">\n<h3>Overcoming SELinux with volume mounts</h3>\n<p>If you are running SELinux and experience permission denied issues when\nmounting volumes, specify the <tt><span class=\"pre\">--selinux</span></tt> argument, which will alter\nthe dockr run volume mount argument so that the volume is readable.</p>\n</div>\n<div id=\"enable-docker-in-docker\">\n<h3>Enable Docker in Docker</h3>\n<p>If you want to enable Docker in Docker, you can mount the Docker socket\nby adding the <tt><span class=\"pre\">--mount-docker</span></tt> argument. If you then install Docker in\nthe container with the below script and use the Docker CLI from within\nthe container.</p>\n<pre><span class=\"c1\"># install the docker client\n</span>curl -fsSL get.docker.com -o get-docker.sh\nsh get-docker.sh\n</pre>\n</div>\n<div id=\"adding-a-portmap\">\n<h3>Adding a portmap</h3>\n<p>You can use <tt><span class=\"pre\">--portmap</span></tt> or <tt><span class=\"pre\">-p</span></tt>, which is a direct match to the\n<tt>docker run <span class=\"pre\">-p</span></tt> argument, for example:</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice <span class=\"se\">\\\n</span>    --role role-myservice-task <span class=\"se\">\\\n</span>    --portmap <span class=\"m\">30000</span>:3000\n</pre>\n<p>The <tt><span class=\"pre\">--portmap</span> 30000:3000</tt> argument in this example would take a HTTP\nserver listening in the container on port 3000 and maps it to port 30000\non your laptop.</p>\n<p>Note that you can use multiple portmaps as follows:</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myservice <span class=\"se\">\\\n</span>    --role role-myservice-task <span class=\"se\">\\\n</span>    -p <span class=\"m\">4430</span>:443 <span class=\"se\">\\\n</span>    -p <span class=\"m\">8080</span>:80\n</pre>\n</div>\n<div id=\"region\">\n<h3>Region</h3>\n<p>If <tt><span class=\"pre\">--region</span></tt> is provided that will take precidence, otherwise\niam-docker-run will look for your region in AWS_REGION or\nAWS_DEFAULT_REGION environment variables. If none are provided it will\ndefault to us-east-1.</p>\n</div>\n</div>\n<div id=\"container-name-tempfile\">\n<h2>Container Name Tempfile</h2>\n<p>IAM-Docker-Run generates a random container name if the \u2013name arg is not\nsupplied. If this container name is needed for anything downstream such\nas the code debugging inside the container feature of VSCode, the\ncontainer name needs to be discoverable. IAM-Docker-Run enables this by\ngenerating a file which contains the name of the container and writes it\nin a pre-determined location.</p>\n<p>The location of this file follows the:\n<tt><span class=\"pre\">/temp/&lt;last</span> directory name of <span class=\"pre\">pwd&gt;/_container_name.txt</span></tt></p>\n<p>You can override the first part of the prefix with the following\nenvironment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">IAM_DOCKER_RUN_CONTAINER_NAME_PATH_PREFIX</span><span class=\"o\">=</span>/tmp/somewhere/else\n</pre>\n<p>Or you can disable this entirely by setting:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">IAM_DOCKER_RUN_DISABLE_CONTAINER_NAME_TEMPFILE</span><span class=\"o\">=</span><span class=\"nb\">true</span>\n</pre>\n</div>\n<div id=\"shortcut\">\n<h2>Shortcut</h2>\n<p>An alternate way to invoke iam-docker-run on the command line is to use\nthe alias <tt>idr</tt>. Just less typing.</p>\n<pre>idr --image busybox --role myrole\n</pre>\n</div>\n<div id=\"example-ci-workflow\">\n<h2>Example CI workflow</h2>\n<p>The second use case for iam-docker-run is for running tests from\ncontinuous integration.</p>\n<pre>iam-docker-run <span class=\"se\">\\\n</span>    --image mycompany/myimage <span class=\"se\">\\\n</span>    --role role-myservice-task <span class=\"se\">\\\n</span>    --full-entrypoint <span class=\"s2\">\"/bin/bash /tests/run-integration-test.sh\"</span> <span class=\"se\">\\\n</span>    --profile jenkins\n</pre>\n</div>\n<div id=\"verbose-debugging\">\n<h2>Verbose debugging</h2>\n<p>To turn on verbose output for debugging, set the <tt><span class=\"pre\">--verbose</span></tt> argument.</p>\n</div>\n<div id=\"temporary-credentials-expire-within-1-hour\">\n<h2>Temporary Credentials Expire Within 1 Hour</h2>\n<p>A goal of this project was to be as easy as possible for developers to\nuse and to allow the greatest portability. To that end, the temporary\nAWS credentials are generated just once before the container starts,\nrather than requiring a more complex setup where an additional container\nwould run all the time and regenerate credentials. When the temp\ncredentials expire (the STS max of 1 hour), the application will start\nexperiencing expired credential exceptions. For this among other reasons\nis why you would not use this tool in any environment other than local\ndevelopment or in your build/CI/CD workflow where usage periods are\nshort and the container can be restarted easily and often.</p>\n<p>Note: While the STS temporary credentials maximum was recently raised to\n12 hours, if you are already in the context of an IAM role which is then\nassuming another role, the limit in this case remains to be 1 hour.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Run the automated script cli tests:</p>\n<pre>pip install --user nose scripttest\npython setup.py install --user\n<span class=\"nb\">export</span> <span class=\"nv\">AWS_REGION</span><span class=\"o\">=</span>us-east-1\n<span class=\"c1\"># set AWS_PROFILE to a valid profile name which can assume roles\n</span><span class=\"nb\">export</span> <span class=\"nv\">AWS_PROFILE</span><span class=\"o\">=</span>dev\nnosetests -v --exe -w ./test\n</pre>\n<p>Testing the use case of a role being supplied without a profile, using\nthe credentials in the environment, is difficult to test an a generic\nautomated way. For now, the following manual steps can test this\ncondition.</p>\n<pre><span class=\"c1\"># set ROLE_ARN_FOR_LOCAL_CREDS to a role which can list s3 buckets\n</span><span class=\"nb\">export</span> <span class=\"nv\">ROLE_ARN_FOR_LOCAL_CREDS</span><span class=\"o\">=</span>arn:aws:iam::123456789012:role/my-role\n<span class=\"c1\"># set AWS_PROFILE to a valid profile name which can assume the ROLE_ARN\n</span><span class=\"nb\">export</span> <span class=\"nv\">AWS_PROFILE</span><span class=\"o\">=</span>dev\n<span class=\"nb\">export</span> <span class=\"nv\">ROLE_NAME_FOR_CONTAINER</span><span class=\"o\">=</span>role-ops-developers\n\naws sts assume-role <span class=\"se\">\\\n</span>    --role-arn <span class=\"nv\">$ROLE_ARN_FOR_LOCAL_CREDS</span> <span class=\"se\">\\\n</span>    --role-session-name testing <span class=\"se\">\\\n</span>    --profile <span class=\"nv\">$AWS_PROFILE</span>\n\n<span class=\"c1\"># put credentials in the environment\n</span><span class=\"nb\">export</span> <span class=\"nv\">AWS_ACCESS_KEY_ID</span><span class=\"o\">=</span>fromabove\n<span class=\"nb\">export</span> <span class=\"nv\">AWS_SECRET_ACCESS_KEY</span><span class=\"o\">=</span>fromabove\n<span class=\"nb\">export</span> <span class=\"nv\">AWS_SESSION_TOKEN</span><span class=\"o\">=</span>fromabove\n\niam-docker-run <span class=\"se\">\\\n</span>    --role <span class=\"nv\">$ROLE_NAME_FOR_CONTAINER</span> <span class=\"se\">\\\n</span>    --image mesosphere/aws-cli:latest --full-entrypoint <span class=\"s2\">\"aws s3 ls\"</span>\n\n<span class=\"c1\"># command should succeed with a listing of s3 buckets</span>\n</pre>\n</div>\n<div id=\"publishing-updates-to-pypi\">\n<h2>Publishing Updates to PyPi</h2>\n<p>For the maintainer - to publish an updated version of Iam-Docker-Run,\nincrement the version number in iam_docker_run.py and run the following:</p>\n<pre>docker build -f ./Dockerfile.buildenv -t billtrust/iam-docker-run:build .\ndocker run --rm -it --entrypoint make billtrust/iam-docker-run:build publish\n</pre>\n<p>At the prompts, enter the username and password to the Billtrust\npypi.org repo.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2018 Factor Systems Inc.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 6981069, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "a78dc942dd953fd2ebef7db6fc044d75", "sha256": "8fb770fb3821acf872914d40eb9cb206eb2b720e24421255da14c6963915d527"}, "downloads": -1, "filename": "iam-docker-run-0.1.10.tar.gz", "has_sig": false, "md5_digest": "a78dc942dd953fd2ebef7db6fc044d75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12333, "upload_time": "2018-07-22T19:44:44", "upload_time_iso_8601": "2018-07-22T19:44:44.747106Z", "url": "https://files.pythonhosted.org/packages/13/7c/02b9d3b0a390efe34b3a109e7b1dd68b7b8f7e0851f2a9668dc0181ea603/iam-docker-run-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "95522fad2ae00494b866dd922dd715d3", "sha256": "a45bdb555647b600252e3efb7dc83ea5e8a04cad416b2d44b19b0a75ed9ebd7f"}, "downloads": -1, "filename": "iam-docker-run-0.1.11.tar.gz", "has_sig": false, "md5_digest": "95522fad2ae00494b866dd922dd715d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12570, "upload_time": "2018-09-20T17:33:36", "upload_time_iso_8601": "2018-09-20T17:33:36.995796Z", "url": "https://files.pythonhosted.org/packages/08/9b/4b0e1929ea30fcc3a56eb8dbeff8c398c046d2d88ac3d937412478363d16/iam-docker-run-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "70f481c182fe3c6f2f56feac8423d45a", "sha256": "e79355e27ea491751a429ee539d55d7dbcc290bfe20bbb74a8e927066ab63136"}, "downloads": -1, "filename": "iam-docker-run-0.1.12.tar.gz", "has_sig": false, "md5_digest": "70f481c182fe3c6f2f56feac8423d45a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12999, "upload_time": "2018-09-28T21:13:54", "upload_time_iso_8601": "2018-09-28T21:13:54.954048Z", "url": "https://files.pythonhosted.org/packages/71/75/cd5ed1fd0b77bdf3c1a4444365886513fbac7eb3e32221f9067a1a1988bb/iam-docker-run-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "44a1565d7e5891116cc4592297433819", "sha256": "31ea46d58d0333d070c8b0bbdf6d2f6ebdb9552cb2ec644d94aab0382759d3f2"}, "downloads": -1, "filename": "iam-docker-run-0.1.13.tar.gz", "has_sig": false, "md5_digest": "44a1565d7e5891116cc4592297433819", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17517, "upload_time": "2018-10-01T14:45:31", "upload_time_iso_8601": "2018-10-01T14:45:31.561324Z", "url": "https://files.pythonhosted.org/packages/c2/4a/8462747bad072085701bff4858857a2a118c6f48b7beea61f2076008c738/iam-docker-run-0.1.13.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "579625b909304c81f6a061157babceeb", "sha256": "68eb0883a4b2ebf0b55cae23227139518b9a0b45f4dce798f807244d87a543e4"}, "downloads": -1, "filename": "iam-docker-run-0.1.4.tar.gz", "has_sig": false, "md5_digest": "579625b909304c81f6a061157babceeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11737, "upload_time": "2018-05-21T19:42:06", "upload_time_iso_8601": "2018-05-21T19:42:06.471895Z", "url": "https://files.pythonhosted.org/packages/c7/13/cdb742d74c15a24a4646c8855505294a6799d135b57f6733d14dc98592ce/iam-docker-run-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "e65293f6af0078cd1048d77d413620eb", "sha256": "8e29b80fdd2150e9ac8b6c0ae78dbe778a5828c34031d5b3966e94f6745f34ec"}, "downloads": -1, "filename": "iam-docker-run-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e65293f6af0078cd1048d77d413620eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11776, "upload_time": "2018-06-05T15:45:28", "upload_time_iso_8601": "2018-06-05T15:45:28.150861Z", "url": "https://files.pythonhosted.org/packages/36/a6/c2ee416a93a9492386bd90e40431de1a56736dd1c414278c86cc86a6bada/iam-docker-run-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "4f9f8b9900f48879a29780fd5557eee7", "sha256": "f35da47cef10d45687e39eb10c801eb07c3cd5c570979722da9f9266cf5b4390"}, "downloads": -1, "filename": "iam-docker-run-0.1.6.tar.gz", "has_sig": false, "md5_digest": "4f9f8b9900f48879a29780fd5557eee7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12001, "upload_time": "2018-06-06T02:56:59", "upload_time_iso_8601": "2018-06-06T02:56:59.117695Z", "url": "https://files.pythonhosted.org/packages/3f/c5/570da50e6f832ae7b56856738ac4cbe5214589e92edbdc87d06bc1e65fa6/iam-docker-run-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "0f4300ad8860dcbba816f4a1dfc3a41b", "sha256": "3213b2acfe409d3be576d068bdc35ec48ea90bee7cecd58b83a616aa131495a2"}, "downloads": -1, "filename": "iam-docker-run-0.1.7.tar.gz", "has_sig": false, "md5_digest": "0f4300ad8860dcbba816f4a1dfc3a41b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12151, "upload_time": "2018-07-10T14:14:09", "upload_time_iso_8601": "2018-07-10T14:14:09.628084Z", "url": "https://files.pythonhosted.org/packages/ab/67/7f068b385de1ebd201f70fbaf7f4a0b23abf0d7ce1f62963314712975b25/iam-docker-run-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "7ad7f7e62cf84100d98b38c46898b7fe", "sha256": "cda5a8ee81ee555e0b691fde8546b26eee3edc902386688ccd4014dbaaaf8478"}, "downloads": -1, "filename": "iam-docker-run-0.1.8.tar.gz", "has_sig": false, "md5_digest": "7ad7f7e62cf84100d98b38c46898b7fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12410, "upload_time": "2018-07-12T15:01:25", "upload_time_iso_8601": "2018-07-12T15:01:25.844567Z", "url": "https://files.pythonhosted.org/packages/cf/e1/ffa29be8548e8ebb385c54f247af5651c86960112b2eea56f12b997b0180/iam-docker-run-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "6606f18f907e1b4334758ce5743152af", "sha256": "2706858c327315816fe59de77316504764747b6a270036aa0fd6b65a5b4f71f7"}, "downloads": -1, "filename": "iam-docker-run-0.1.9.tar.gz", "has_sig": false, "md5_digest": "6606f18f907e1b4334758ce5743152af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12414, "upload_time": "2018-07-12T19:00:53", "upload_time_iso_8601": "2018-07-12T19:00:53.085351Z", "url": "https://files.pythonhosted.org/packages/9e/04/24a6c8ca29e276015ac53f17193fd8bbdc9ce5d65cbc3db8bc3cced2b054/iam-docker-run-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b4db818ab8b06385fa8d7074916beded", "sha256": "0dc627157a1ead2f1963099fc4f3be7e48b838657f53ee1e0dd49ec7172c5a8c"}, "downloads": -1, "filename": "iam-docker-run-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b4db818ab8b06385fa8d7074916beded", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12958, "upload_time": "2018-10-18T16:36:27", "upload_time_iso_8601": "2018-10-18T16:36:27.939807Z", "url": "https://files.pythonhosted.org/packages/84/36/8f80989f7598b19860cbb60cb50a764c51828aabf846ed3a7bc014b2cebe/iam-docker-run-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "084f965e790d39487f9c6b7bac537468", "sha256": "0db12908aed2bfe818e68d221745cbb82cb8a4f3918db0f45fd96271968bd9f1"}, "downloads": -1, "filename": "iam-docker-run-0.2.1.tar.gz", "has_sig": false, "md5_digest": "084f965e790d39487f9c6b7bac537468", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13197, "upload_time": "2018-10-23T21:02:33", "upload_time_iso_8601": "2018-10-23T21:02:33.330775Z", "url": "https://files.pythonhosted.org/packages/5f/07/145ee1f741334b058fe5206413ff491cc04d2e3efcde0d862411a6f26e7d/iam-docker-run-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "98610db93ab86b81977d3e246eadecff", "sha256": "6b6fbdf83c186ab0f903c9b4710ce130d9680c5bf4a6df527a416281cee577f7"}, "downloads": -1, "filename": "iam-docker-run-0.2.2.tar.gz", "has_sig": false, "md5_digest": "98610db93ab86b81977d3e246eadecff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13285, "upload_time": "2018-11-15T16:33:37", "upload_time_iso_8601": "2018-11-15T16:33:37.888175Z", "url": "https://files.pythonhosted.org/packages/6d/87/982b3d5f57444040cf264a9de85b9315c8d1f49376eb57f10a6ab4ffe801/iam-docker-run-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "444b391a823bc83a52122f20c3bd3981", "sha256": "f910d916e2a8a3a903b94c2bb1a4b707f1d1008aea119d35059f208a89edc77d"}, "downloads": -1, "filename": "iam-docker-run-0.2.3.tar.gz", "has_sig": false, "md5_digest": "444b391a823bc83a52122f20c3bd3981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13288, "upload_time": "2018-11-15T16:38:35", "upload_time_iso_8601": "2018-11-15T16:38:35.766056Z", "url": "https://files.pythonhosted.org/packages/b2/09/aa2328072bbab16e697702ab1a49e6ee6b7d69d722457c7b101a4f5b34be/iam-docker-run-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bacd9488e0ec10a66b2024b9354317ef", "sha256": "4bece802645505cfa9c82d028455bdf03baa37291f87ae31539d90cb71a6b8d9"}, "downloads": -1, "filename": "iam-docker-run-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bacd9488e0ec10a66b2024b9354317ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16406, "upload_time": "2019-01-04T19:27:58", "upload_time_iso_8601": "2019-01-04T19:27:58.056008Z", "url": "https://files.pythonhosted.org/packages/92/08/2ed68f5f089966f68a93b3e065081fe49edd5e1993ef662d99dfa974a5fa/iam-docker-run-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "bd033f97f0e41913c0b3fec3389e4efa", "sha256": "608d0b9c18d41ce9e81532747c19bed9cb87b0d7b4a74b30074a2297143892af"}, "downloads": -1, "filename": "iam-docker-run-0.3.1.tar.gz", "has_sig": false, "md5_digest": "bd033f97f0e41913c0b3fec3389e4efa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16493, "upload_time": "2019-01-10T20:13:44", "upload_time_iso_8601": "2019-01-10T20:13:44.388952Z", "url": "https://files.pythonhosted.org/packages/dc/e9/2c903a62ee3635e7bddabddc3a0a899c5c6419882819de3bdaabf66019e6/iam-docker-run-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8790eac79468e501ca822fc3d78b46a0", "sha256": "970470b4afa3b296990e659b18844fbb36bed548fc80a5a851a8fe317285b435"}, "downloads": -1, "filename": "iam-docker-run-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8790eac79468e501ca822fc3d78b46a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19964, "upload_time": "2019-04-03T18:47:33", "upload_time_iso_8601": "2019-04-03T18:47:33.784882Z", "url": "https://files.pythonhosted.org/packages/93/b2/e9f7d651c89fa21749252129dcb51cb5421725edcaa565abc18c644486f4/iam-docker-run-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a1f56f871325442e22438a3e34e86a6f", "sha256": "ffab6ed0c65109d126aad3396da9eb7db3d833912419559f09661b07f6134faa"}, "downloads": -1, "filename": "iam-docker-run-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a1f56f871325442e22438a3e34e86a6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16543, "upload_time": "2019-07-11T15:12:29", "upload_time_iso_8601": "2019-07-11T15:12:29.599944Z", "url": "https://files.pythonhosted.org/packages/28/7a/27196016cf223d6c29bf2683234c48d5ce09e8a68d76e2d8c74aeec4f8fa/iam-docker-run-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "fdd22959d26ec2eb12834bd5cd24abf2", "sha256": "d12bb96147f1561170ec862babd73ebf3ea516db1f3ed88b67acd0864131321f"}, "downloads": -1, "filename": "iam-docker-run-0.3.4.tar.gz", "has_sig": false, "md5_digest": "fdd22959d26ec2eb12834bd5cd24abf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20073, "upload_time": "2019-10-04T18:36:42", "upload_time_iso_8601": "2019-10-04T18:36:42.952049Z", "url": "https://files.pythonhosted.org/packages/36/fd/c431c9fbeed258181c8e840a52799dfc5abf6fd9fdb6a4d75d61b12d7f3c/iam-docker-run-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "1b5b22e44a85aba76a5dcca29d397586", "sha256": "ff47dd411b19975ed38e0217ab584d0eb6ff3798c345ad5208a8ca63a7aba737"}, "downloads": -1, "filename": "iam-docker-run-0.3.5.tar.gz", "has_sig": false, "md5_digest": "1b5b22e44a85aba76a5dcca29d397586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20049, "upload_time": "2019-10-04T19:26:04", "upload_time_iso_8601": "2019-10-04T19:26:04.680081Z", "url": "https://files.pythonhosted.org/packages/0e/9f/2b0b67f31f55e7b12358961d0333c2a09613032cf36bd14524d1834045a4/iam-docker-run-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "9e167df2c176f2c42d3eb955bf8f8fc8", "sha256": "bd5d0282484f069b72c3d06cf2e90b800c641b4409d0778245ef2a1adb59e4c7"}, "downloads": -1, "filename": "iam-docker-run-0.3.6.tar.gz", "has_sig": false, "md5_digest": "9e167df2c176f2c42d3eb955bf8f8fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14979, "upload_time": "2020-04-08T20:57:16", "upload_time_iso_8601": "2020-04-08T20:57:16.251578Z", "url": "https://files.pythonhosted.org/packages/04/2b/3b75f21273665ffc3364055c5b824ce97bd6a329e181996e363bd41fbe11/iam-docker-run-0.3.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e167df2c176f2c42d3eb955bf8f8fc8", "sha256": "bd5d0282484f069b72c3d06cf2e90b800c641b4409d0778245ef2a1adb59e4c7"}, "downloads": -1, "filename": "iam-docker-run-0.3.6.tar.gz", "has_sig": false, "md5_digest": "9e167df2c176f2c42d3eb955bf8f8fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14979, "upload_time": "2020-04-08T20:57:16", "upload_time_iso_8601": "2020-04-08T20:57:16.251578Z", "url": "https://files.pythonhosted.org/packages/04/2b/3b75f21273665ffc3364055c5b824ce97bd6a329e181996e363bd41fbe11/iam-docker-run-0.3.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:18 2020"}