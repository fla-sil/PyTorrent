{"info": {"author": "Violin Memory, Inc.", "author_email": "opensource@vmem.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "Violin Memory Client API\n========================\n\nWelcome to the Violin Memory Client Interface Library.  This API provides\nan additional management interface to many Violin Memory products through\na REST-like interface.\n\nSupported Products and Versions\n===============================\n\nThe following products are supported by this library:\n\n\nv7000 Concerto Gateway\n----------------------\n\nSupport for this product is accomplished using the JSON REST API:\n\n* 7.50\n\n\nv6000 Memory Gateway\n--------------------\n\nSupport for this product is accomplished using the XML REST API:\n\n* V6.x\n* V6.x / G6.x  and prior\n\n\nv6000 Memory Array\n------------------\n\nSupport for this product is accomplished using the XML REST API:\n\n* Generic support for all versions\n\nGetting Started\n===============\n\nGetting a connection to your Violin Memory appliance is as simple as this::\n\n    import vmemclient\n    con = vmemclient.open(hostname, username, password)\n\nThe **open()** function automatically determines what kind of Violin\nMemory appliance it sees, and returns a version specific object that you\ncan use to query and manage your array.  It makes this connection over\n*https* preferably, but it can also fallback to *http* for the session\nauthentication if *https* isn't working.\n\nWhen finished interacting with the Violin Memory array, close the\nconnection like so::\n\n    con.close()\n\nThere are a few different object types that the *open()* function can\nreturn.  Please refer to the *open()* documentation for more info on the\nspecifics of using each object type, and the various functions available\nfor your product / version.\n\n\nExamples\n========\n\nBelow are a few examples of how to use the core VXG python library:\n\n\nExample 1:  Get the system uptime\n----------------------------------\n\nThis example works on all MGs running 6.x and lower, and all ACMs.::\n\n    # Get the connection object\n    con = vmemclient.open(hostname, username, password)\n    if con is not None:\n        node = '/system/uptime'\n        answer = con.basic.get_node_values(node)\n        uptime = datetime.timedelta(int(milliseconds=answer[node]))\n        print '{0} uptime: {1}'.format(hostname, uptime)\n        con.close()\n\n\nExample 2:  List all LUNs\n-------------------------\n\nThis example works on all MGs running 6.x and lower.::\n\n    con = vmemclient.open(hostname, username, password)\n    if con is not None:\n        base_node = '/vshare/state/local/container/*'\n        containers = con.basic.get_node_values(base_node)\n        for container in containers.values():\n            print '[LUNs in container: {0}]'.format(container)\n            luns_node = base_node[:-1] + container + '/lun/*'\n            luns = con.basic.get_node_values(luns_node)\n            for lun in luns.values():\n                print ' - {0}'.format(lun)\n            print\n        con.close()\n\n\nExample 3:  Create a LUN\n------------------------\n\nEach object returned from *vmemclient.open()* has a number of namespaces,\nand each namespace will have a collection of functions.  This example\nwill demonstrate how to do LUN creation on a MG running 6.x.  Pairing\nthese functions with the version specific REST API documentation will\ntell what types of input are expected, and any acceptible values.::\n\n    # Create the object connection like normal\n    con = vmemclient.open(hostname, username, password)\n    if con is not None:\n        answer = con.basic.get_node_values('/vshare/state/local/container/*')\n        if not answer:\n            print 'No container present'\n        else:\n            # Use the first container on this MG\n            container = answer.values()[0]\n\n            # Create a single, read-only, thick LUN of size 10G\n            result = con.lun.create_lun(container, 'MyNewLun', size='10',\n                                        quantity=1, nozero='nozero',\n                                        thin='0', readonly='r',\n                                        startnum=1)\n\n            # Actions return a dict with two keys: 'code' and 'message'\n            if result['code'] == 0:\n                print 'Created LUN OK: {0}'.format(result['message'])\n            else:\n                print 'Failed ({code}): {message}'.format(**result)\n\n        # Done\n        con.close()\n\nChangelog\n=========\n\nVersion 1.1.9\n---------------------\n* Ensure port 443 is used if https protocol is specified\n\n\nVersion 1.1.8\n---------------------\n* Added support for Encryption\n\n\nVersion 1.1.7\n---------------------\n* Added support for Replication\n\n\nVersion 1.1.5 / 1.1.6\n---------------------\n* Added support for iSCSI operations\n* Minor bug fixes\n\n\nVersion 1.1.4\n-------------\n* Added support for snapgroup operations\n* Added function to remap thin clones\n* Minor bug fixes\n\n\nVersion 1.1.3\n-------------\n* vmemclient.open() raises AuthenticationError on auth error\n* Minor bug fixes\n\n\nVersion 1.1.2\n-------------\n* Moving .snapshot.get_snapshot_copy_status() to .lun.get_lun_copy_status()\n* Adding .snapshot.get_snapshot_copy_status()\n\n\nVersion 1.1.1\n-------------\n* Minor bug fixes\n\n\nVersion 1.1.0\n-------------\n* Added support for Concerto 7.5.2\n\n\nVersion 1.0.1\n-------------\n* Updated licensing\n\n\nVersion 1.0.0\n-------------\n* Initial version of this package\n* Support for VShare 5.x / 6.x\n* Support for ACM (generic)\n* Support for Concerto 7.50", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.vmem.com", "keywords": "violin violinmemory vmem vmemclient rest", "license": "Apache Version 2.0", "maintainer": null, "maintainer_email": null, "name": "vmemclient", "package_url": "https://pypi.org/project/vmemclient/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vmemclient/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.vmem.com"}, "release_url": "https://pypi.org/project/vmemclient/1.1.9/", "requires_dist": null, "requires_python": null, "summary": "Violin Memory Client Interface Library", "version": "1.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"violin-memory-client-api\">\n<h2>Violin Memory Client API</h2>\n<p>Welcome to the Violin Memory Client Interface Library.  This API provides\nan additional management interface to many Violin Memory products through\na REST-like interface.</p>\n</div>\n<div id=\"supported-products-and-versions\">\n<h2>Supported Products and Versions</h2>\n<p>The following products are supported by this library:</p>\n<div id=\"v7000-concerto-gateway\">\n<h3>v7000 Concerto Gateway</h3>\n<p>Support for this product is accomplished using the JSON REST API:</p>\n<ul>\n<li>7.50</li>\n</ul>\n</div>\n<div id=\"v6000-memory-gateway\">\n<h3>v6000 Memory Gateway</h3>\n<p>Support for this product is accomplished using the XML REST API:</p>\n<ul>\n<li>V6.x</li>\n<li>V6.x / G6.x  and prior</li>\n</ul>\n</div>\n<div id=\"v6000-memory-array\">\n<h3>v6000 Memory Array</h3>\n<p>Support for this product is accomplished using the XML REST API:</p>\n<ul>\n<li>Generic support for all versions</li>\n</ul>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Getting a connection to your Violin Memory appliance is as simple as this:</p>\n<pre>import vmemclient\ncon = vmemclient.open(hostname, username, password)\n</pre>\n<p>The <strong>open()</strong> function automatically determines what kind of Violin\nMemory appliance it sees, and returns a version specific object that you\ncan use to query and manage your array.  It makes this connection over\n<em>https</em> preferably, but it can also fallback to <em>http</em> for the session\nauthentication if <em>https</em> isn\u2019t working.</p>\n<p>When finished interacting with the Violin Memory array, close the\nconnection like so:</p>\n<pre>con.close()\n</pre>\n<p>There are a few different object types that the <em>open()</em> function can\nreturn.  Please refer to the <em>open()</em> documentation for more info on the\nspecifics of using each object type, and the various functions available\nfor your product / version.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Below are a few examples of how to use the core VXG python library:</p>\n<div id=\"example-1-get-the-system-uptime\">\n<h3>Example 1:  Get the system uptime</h3>\n<p>This example works on all MGs running 6.x and lower, and all ACMs.:</p>\n<pre># Get the connection object\ncon = vmemclient.open(hostname, username, password)\nif con is not None:\n    node = '/system/uptime'\n    answer = con.basic.get_node_values(node)\n    uptime = datetime.timedelta(int(milliseconds=answer[node]))\n    print '{0} uptime: {1}'.format(hostname, uptime)\n    con.close()\n</pre>\n</div>\n<div id=\"example-2-list-all-luns\">\n<h3>Example 2:  List all LUNs</h3>\n<p>This example works on all MGs running 6.x and lower.:</p>\n<pre>con = vmemclient.open(hostname, username, password)\nif con is not None:\n    base_node = '/vshare/state/local/container/*'\n    containers = con.basic.get_node_values(base_node)\n    for container in containers.values():\n        print '[LUNs in container: {0}]'.format(container)\n        luns_node = base_node[:-1] + container + '/lun/*'\n        luns = con.basic.get_node_values(luns_node)\n        for lun in luns.values():\n            print ' - {0}'.format(lun)\n        print\n    con.close()\n</pre>\n</div>\n<div id=\"example-3-create-a-lun\">\n<h3>Example 3:  Create a LUN</h3>\n<p>Each object returned from <em>vmemclient.open()</em> has a number of namespaces,\nand each namespace will have a collection of functions.  This example\nwill demonstrate how to do LUN creation on a MG running 6.x.  Pairing\nthese functions with the version specific REST API documentation will\ntell what types of input are expected, and any acceptible values.:</p>\n<pre># Create the object connection like normal\ncon = vmemclient.open(hostname, username, password)\nif con is not None:\n    answer = con.basic.get_node_values('/vshare/state/local/container/*')\n    if not answer:\n        print 'No container present'\n    else:\n        # Use the first container on this MG\n        container = answer.values()[0]\n\n        # Create a single, read-only, thick LUN of size 10G\n        result = con.lun.create_lun(container, 'MyNewLun', size='10',\n                                    quantity=1, nozero='nozero',\n                                    thin='0', readonly='r',\n                                    startnum=1)\n\n        # Actions return a dict with two keys: 'code' and 'message'\n        if result['code'] == 0:\n            print 'Created LUN OK: {0}'.format(result['message'])\n        else:\n            print 'Failed ({code}): {message}'.format(**result)\n\n    # Done\n    con.close()\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"version-1-1-9\">\n<h3>Version 1.1.9</h3>\n<ul>\n<li>Ensure port 443 is used if https protocol is specified</li>\n</ul>\n</div>\n<div id=\"version-1-1-8\">\n<h3>Version 1.1.8</h3>\n<ul>\n<li>Added support for Encryption</li>\n</ul>\n</div>\n<div id=\"version-1-1-7\">\n<h3>Version 1.1.7</h3>\n<ul>\n<li>Added support for Replication</li>\n</ul>\n</div>\n<div id=\"version-1-1-5-1-1-6\">\n<h3>Version 1.1.5 / 1.1.6</h3>\n<ul>\n<li>Added support for iSCSI operations</li>\n<li>Minor bug fixes</li>\n</ul>\n</div>\n<div id=\"version-1-1-4\">\n<h3>Version 1.1.4</h3>\n<ul>\n<li>Added support for snapgroup operations</li>\n<li>Added function to remap thin clones</li>\n<li>Minor bug fixes</li>\n</ul>\n</div>\n<div id=\"version-1-1-3\">\n<h3>Version 1.1.3</h3>\n<ul>\n<li>vmemclient.open() raises AuthenticationError on auth error</li>\n<li>Minor bug fixes</li>\n</ul>\n</div>\n<div id=\"version-1-1-2\">\n<h3>Version 1.1.2</h3>\n<ul>\n<li>Moving .snapshot.get_snapshot_copy_status() to .lun.get_lun_copy_status()</li>\n<li>Adding .snapshot.get_snapshot_copy_status()</li>\n</ul>\n</div>\n<div id=\"version-1-1-1\">\n<h3>Version 1.1.1</h3>\n<ul>\n<li>Minor bug fixes</li>\n</ul>\n</div>\n<div id=\"version-1-1-0\">\n<h3>Version 1.1.0</h3>\n<ul>\n<li>Added support for Concerto 7.5.2</li>\n</ul>\n</div>\n<div id=\"version-1-0-1\">\n<h3>Version 1.0.1</h3>\n<ul>\n<li>Updated licensing</li>\n</ul>\n</div>\n<div id=\"version-1-0-0\">\n<h3>Version 1.0.0</h3>\n<ul>\n<li>Initial version of this package</li>\n<li>Support for VShare 5.x / 6.x</li>\n<li>Support for ACM (generic)</li>\n<li>Support for Concerto 7.50</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2345223, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "fc11244b06c38c4701594a3db6e7b7c2", "sha256": "f7cc5354126757b16509d3acc1c02176bf25e84299f3a6fb42e403070daf241c"}, "downloads": -1, "filename": "vmemclient-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fc11244b06c38c4701594a3db6e7b7c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43644, "upload_time": "2015-03-16T22:38:40", "upload_time_iso_8601": "2015-03-16T22:38:40.309931Z", "url": "https://files.pythonhosted.org/packages/2d/3f/cd082994bb98934d09c51d8042ac3dc227a199f9c6af6247240ec9d1c663/vmemclient-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "9d3640d9a374eacdce20f944d7cc64e4", "sha256": "f2b40c418de78fd71ec5d6dee8f9b3ba8bf8daab59325941bc34ace9ff98bee1"}, "downloads": -1, "filename": "vmemclient-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9d3640d9a374eacdce20f944d7cc64e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48470, "upload_time": "2015-06-11T23:22:42", "upload_time_iso_8601": "2015-06-11T23:22:42.244686Z", "url": "https://files.pythonhosted.org/packages/d8/6f/ffdcc4d09ec8d55db1755d6853cf92bf4b52863884394843db898ddf1398/vmemclient-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "18ff7aaf3b22ffe95090ecb07db6aa93", "sha256": "b15c1767f0cab39071fdb6a4f4168516aabd5f55c2e8e6c08bde6be1ebb8c9c2"}, "downloads": -1, "filename": "vmemclient-1.1.1.tar.gz", "has_sig": false, "md5_digest": "18ff7aaf3b22ffe95090ecb07db6aa93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49103, "upload_time": "2015-06-18T15:03:27", "upload_time_iso_8601": "2015-06-18T15:03:27.545634Z", "url": "https://files.pythonhosted.org/packages/42/fd/79babae2394e80aef9d9c31199ebd540d3abf93432dfbebe73da6ac827ba/vmemclient-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "f74440df2cfa470e3dd981d6a19e086b", "sha256": "229f872266e314755e5d7d17c6ce3f4b2ee4c4e5db0dae0bf89115e2a933755d"}, "downloads": -1, "filename": "vmemclient-1.1.2.tar.gz", "has_sig": false, "md5_digest": "f74440df2cfa470e3dd981d6a19e086b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49776, "upload_time": "2015-06-19T01:31:25", "upload_time_iso_8601": "2015-06-19T01:31:25.940661Z", "url": "https://files.pythonhosted.org/packages/93/87/ad72a919779da64b65dbfb9bbd9d2d64dfd9c8f46cf73f1dc1eb5544ce2f/vmemclient-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "f56c5053886a98c9371a7ba1610481e9", "sha256": "35923491dafa7812a81bdab3d7a9c117988db72f98481e08fd5f2afc72f92f60"}, "downloads": -1, "filename": "vmemclient-1.1.3.tar.gz", "has_sig": false, "md5_digest": "f56c5053886a98c9371a7ba1610481e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50532, "upload_time": "2015-06-26T20:34:10", "upload_time_iso_8601": "2015-06-26T20:34:10.304700Z", "url": "https://files.pythonhosted.org/packages/cd/c6/d4c4b98ea0c2bdc0204ceede75e37c71de8bbb12936c82b2712f27674c73/vmemclient-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "d3cab2ea7fc7f4b5831cbc29b0709c4b", "sha256": "e2a6bfd3ed5d245a66fd4474a2df902c1ba0f2e305b87e9b9bd0b489a8b302cc"}, "downloads": -1, "filename": "vmemclient-1.1.4.tar.gz", "has_sig": false, "md5_digest": "d3cab2ea7fc7f4b5831cbc29b0709c4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52391, "upload_time": "2015-07-01T17:45:45", "upload_time_iso_8601": "2015-07-01T17:45:45.433682Z", "url": "https://files.pythonhosted.org/packages/ab/45/a468da8c56b9362eff54eaaef1135400155bba9fb1a0c626d3ca1ffc610a/vmemclient-1.1.4.tar.gz", "yanked": false}], "1.1.5": [], "1.1.6": [{"comment_text": "", "digests": {"md5": "3da4f43799e35df5cbefe4a5f863f06e", "sha256": "429f4288c2950413fa4137fc208d73c2cec08176abbfba6cfc5004cd195322d4"}, "downloads": -1, "filename": "vmemclient-1.1.6.tar.gz", "has_sig": false, "md5_digest": "3da4f43799e35df5cbefe4a5f863f06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64107, "upload_time": "2015-09-30T06:27:21", "upload_time_iso_8601": "2015-09-30T06:27:21.152722Z", "url": "https://files.pythonhosted.org/packages/1c/8f/8cc6a9d86b62c89ae256fd04eeeb59a563258373fa0788ad28ac7f06af6e/vmemclient-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "4e60c44bfa0c3e6a117b839decc557df", "sha256": "d7386f93d8991a3a1caeb737e01fb8189e724937d46b13ff42aa50367e051aac"}, "downloads": -1, "filename": "vmemclient-1.1.7.tar.gz", "has_sig": false, "md5_digest": "4e60c44bfa0c3e6a117b839decc557df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58448, "upload_time": "2016-07-14T22:51:43", "upload_time_iso_8601": "2016-07-14T22:51:43.325753Z", "url": "https://files.pythonhosted.org/packages/62/76/8f97e57d13eb5e2cc2ce2d155d368550898a5b00b79659188507948c451b/vmemclient-1.1.7.tar.gz", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "ebd474d99da0af599c5540345c4b60d0", "sha256": "ee7048d921bf1414abb1b3ed339fe3c6664dc8e5db1068242f98b9719ccbf2a9"}, "downloads": -1, "filename": "vmemclient-1.1.8.tar.gz", "has_sig": false, "md5_digest": "ebd474d99da0af599c5540345c4b60d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58566, "upload_time": "2016-08-10T17:37:47", "upload_time_iso_8601": "2016-08-10T17:37:47.152188Z", "url": "https://files.pythonhosted.org/packages/ef/be/262fc81646be4c8ffb1c0e5b4d406b6b0b8f8e5a4037051c6cd7a6331d80/vmemclient-1.1.8.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "e243f71d864dc422acdfeb4c62a9da72", "sha256": "17a082c5691abbd141b9fb328aa03d14b6bf731a603aaa98caabb2b3d110ffdc"}, "downloads": -1, "filename": "vmemclient-1.1.9.tar.gz", "has_sig": false, "md5_digest": "e243f71d864dc422acdfeb4c62a9da72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58694, "upload_time": "2016-09-15T21:54:09", "upload_time_iso_8601": "2016-09-15T21:54:09.699030Z", "url": "https://files.pythonhosted.org/packages/10/2c/24327c6abe9d899137471cc4186a5fd21f0885fcbbbcd280259520f64e49/vmemclient-1.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e243f71d864dc422acdfeb4c62a9da72", "sha256": "17a082c5691abbd141b9fb328aa03d14b6bf731a603aaa98caabb2b3d110ffdc"}, "downloads": -1, "filename": "vmemclient-1.1.9.tar.gz", "has_sig": false, "md5_digest": "e243f71d864dc422acdfeb4c62a9da72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58694, "upload_time": "2016-09-15T21:54:09", "upload_time_iso_8601": "2016-09-15T21:54:09.699030Z", "url": "https://files.pythonhosted.org/packages/10/2c/24327c6abe9d899137471cc4186a5fd21f0885fcbbbcd280259520f64e49/vmemclient-1.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:48 2020"}