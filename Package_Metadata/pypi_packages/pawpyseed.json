{"info": {"author": "Kyle Bystrom", "author_email": "kylebystrom@berkeley.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3"], "description": "# pawpyseed\n\n<https://kylebystrom.github.io/pawpyseed/> <br/>\n\nPAWpySeed is a parallelized Python and C tool for reading and\nanalyzing the optimized band structure and wave functions\nof VASP DFT calculations. The code is written for the PAW\nformalism developed by P.E. Blochl and implemented\nin VASP.\n\n## Installation\n\nTO compile the C code, pawpyseed needs to link with the Intel Math Kernel Library\n(MKL). You can customize how this is done via the config file (see \"The customizable way\").\nHowever, for most users, the easy way described below is adequate.\n\n### The easy way\n\nFirst, install `mkl-devel` in your local installation:\n\n```\npip install mkl-devel --user\n```\n\nNext, find your Python installation directory (call it `INST_DIR`) and add the `include` and `lib` to your\nC compiler paths to link with MKL:\n```\nexport C_INCLUDE_PATH=$INST_DIR/include:$C_INCLUDE_PATH\nexport LIBRARY_PATH=$INST_DIR/lib:$LIBRARY_PATH\nexport LD_LIBRARY_PATH=$INST_DIR/lib:$LD_LIBRARY_PATH\n```\n\nThen run\n```\npython setup.py build\npython setup.py install\n```\n\nOR with `pip`.\n\n```\npip install pawpyseed\n```\n\nThis has been tested on Scientific Linux 7 and Linux Mint 18,\nbut should work for systems that have the appropriate\npackages and environment variables defined as described below.\n\n#### Simple site.cfg approach\n\nAfter installing MKL locally with `pip`,\ncopy `site.cfg.default` from the pawpyseed repository to `~/.pawpyseed-site.cfg`.\nOpen it and set `root=<your home directory>/.local` under the `[mkl]` heading\nand uncomment it by removing the `#`.\n\nIF you get linking issues at runtime using this method, try setting\n`sdl=True` in the config file and then setting the environment\nvariable `MKL_THREADING_LAYER=sequential`.\n\n#### Intel easy way\n\nIf you have `icc` and prefer to use it to compile pawpyseed's C libraries,\nset `compiler=icc` in `~/.pawpyseed-site.cfg` and then\nset `root` to your MKL installation directory. Set `sdl=True`. You MKL distribution must have also\nbeen compiled with the Intel compiler. Run the `setup.py` script or `pip install pawpyseed`.\n\n### The customizable way\n\nTo make your own config file,\nmake a file in your home directory `~` named `.pawpyseed-site.cfg`. This file allows you\nto customize configuration settings for pawpyseed. It is read using the Python\nconfigparser module <https://docs.python.org/3/library/configparser.html>. If you don't\nwant to learn about the configuration file options, skip to \"The Easy Way\" to get this done with quickly.\nThe options (with their defaults) are as follows:\n\n```\n[compiler]\n# Name of the compiler to be used. By default, let's the setup script choose this.\ncompiler_name = <no default> # Examples: icc or gcc\n# Name of the linker to be used. By default, let's the setup script choose this.\n# NOTE: Don't forget the -shared tag for icc or gcc!\n# NOTE: If compiler_name is set and linker_name is not,\n#       linker_name is set to compiler_name with the -shared tag appended.\nlinker_name = <no default> # Examples: icc -shared or gcc -shared\n\n[mkl]\n# MKL installation directory. <root>/lib or <root>/lib/intel64 must contain\n# the MKL shared object libraries, while <root>/include must containn the MKL headers.\n# Many systems have the environment variable\n# MKLROOT set for this, so you can set this to the output of:\n#       echo $MKLROOT\n# If you pip install mkl-devel, this goes to /usr or /usr/local.\n# If you pip install mkl-devel --user, this goes to ~/.local\n# (or the equivalents for your system).\nroot = <no default>\n# Don't change this. Might be used in the future but currently has no effect.\ninterface32 = True\n# Whether to compile with the single dynamic library libmkl_rt.so.\n# If you are having installation/performance problems, try setting sdl=True,\n# pip installing mkl-devel with the --user option, set root=~/.local,\n# and set the environment variable MKL_THREADING_LAYER=sequential\n# when using pawpyseed.\nsdl = False\n\n[threading]\n# Whether to use omp_loops. If False, pawpyseed doesn't do any parallelization\n# on its own, though its calls to MKL, BLAS, LAPACK, etc might be\n# threaded by MKL.\nomp_loops = True\n# Whether to use threading for MKL. OVERRIDDEN if sdl=True, in which case\n# MKL is threaded by default and you can run sequentially by\n# setting the environment variable MKL_THREADING_LAYER=sequential\n# when using pawpyseed.\n# NOTE: ONLY SET THIS TRUE IF COMPILING WITH icc (OR gcc with omp_loops=False),\n# and only if you are very concerned about speed. This is because gcc\n# cannot do nested parallelism with MKL\nthreaded_mkl = False\n\n# NOTE: Do not link to icc-compiled MKL libraries when compiling the C\n# extension with gcc or vice versa. Use like type compilers.\n```\n\n### Dependencies\n\nAll dependencies indicate the minimum version tested.\nPAWpySeed might work fine with earlier versions, but\nuse of older versions will not be officially supported.\n\nPython requirements:\n```\nPython>=3.5\nnumpy>=1.14\nscipy>=1.0\npymatgen>=2018.2.13\nsympy>=1.1.1\nmatplotlib>=0.2.5\n```\n\nC requirements:\n```\nicc >= 16.0.4 OR gcc >= 4.8.5\nIntel Math Kernel Library >= 11.3.4\n```\nIf you don't want to `pip install` Intel MKL,\nit is available for free installation on a variety of platforms.\nMost computing clusters will have Intel MKL, and you can install it\non your desktop (or any system to which you have root access) by following\nthe relevant instructions at the following URL:\n<https://software.intel.com/en-us/articles/free-ipsxe-tools-and-libraries>.\n\n## Theory and Input\n\n### PAW\n\nThe projector augmented wave (PAW) method is a technique\nused in plane wave density functional theory to simplify\nthe description of the wavefunctions near the nuclei\nof a system. The strong Coulombic forces near an atomic\nnucleus creates quickly oscillating wavefunctions that are\nnot well described by plane waves without prohibitively\nlarge basis sets, so a \"pseudopotential\" is introduced\nnear the atomic nuclei which results in smooth \n\"pseudo wavefunctions\" well described by plane waves. The\nfull wavefunctions can be recovered by a linear transform\nof the pseudowavefunctions. The PAW method requires\nthree sets of functions: projector functions, onto which\npseudowavefunctions are projected to probe their character;\nfull partial waves, which describe atomic valence states\nderived from the true potential; and pseudo partial waves,\nwhich are derived from the full partial waves and\npseudopotential.\n\n### Files\n\nThe projector functions and partial waves are unique\nto each element and stored in the POTCAR file\nused in a VASP calculation. The pseudowavefunction\nis the part of the wavefunction optimized during a DFT\ncalculation and is stored in the WAVECAR output file\nin VASP. PAWpySeed parses both files to retrieve\nall parts of the full Kohn Sham wavefunctions.\n\n## The Code\n\nThe main purpose of PAWpySeed is to evaluate overlap\noperators between Kohn-Sham wavefunctions from different\nstructures, which is not done by standard plane-wave DFT codes.\nSuch functionality can be useful for analyzing the composition\nof defect levels in solids, which is main application for which\nthe code is currently focused.\n\n### Implementation\n\n* Python Interface\n* Computationally intensive tasks in C\n* Parallelized with openmp\n\n### Current Functionality\n\n* Read pseudowavefunctions\n* Read projectors and partial waves from VASP POTCAR\n* Evaluate overlap operators between bands,\nincluding when bands belong to different structures\nwith the same lattice\n* Project point defect levels onto bulk valence\nand conduction bands\n* Convenient pycdt interface\n* Perturbation-extrapolation correction for point defect calculations\n* Read noncollinear pseudo wavefunctions and construct all-electron wavefunctions (no overlap operator evaluation for noncollinear data)\n* Calculate plane-wave matrix elements between bands.\n\n## Acknowledgments\n\nThe code in PAWpySeed is based on a several algorithms and codes, which are enumerated\nhere.\n\n1. **PAW**:\nThe PAW method was developed by P. E. Blochl in 1994. His paper deriving the method\nwas helpful to me in deriving the extensions to the formalism needed to develop\nthis code.\n    * P. E. Blochl. Projector augmented-wave method. Phys. Rev. B, 50:17953, 1994.\n2. **VASP**:\nPAWpySeed is primarily built to read and process the output of VASP calculations.\nPAWpySeed reads PAW wavefunctions and calculate overlap operators using algorithms\nderived from VASP and other plane-wave codes, so the following citations are necessary.\nThe last citation is specifically for the PAW method and potentials. See the VASP website\nat <http://community.hartree.stfc.ac.uk/wiki/site/admin/vasp.html> for information\non citing specific functionals.\n    * G. Kresse and J. Hafner. Ab initio molecular dynamics for liquid metals. Phys. Rev. B, 47:558, 1993.\n    * G. Kresse and J. Hafner. Ab initio molecular-dynamics simulation of the liquid-metal-amorphous-semiconductor transition in germanium. Phys. Rev. B, 49:14251, 1994.\n    * G. Kresse and J. Furthm\u00fcller. Efficiency of ab-initio total energy calculations for metals and semiconductors using a plane-wave basis set. Comput. Mat. Sci., 6:15, 1996.\n    * G. Kresse and J. Furthm\u00fcller. Efficient iterative schemes for ab initio total-energy calculations using a plane-wave basis set. Phys. Rev. B, 54:11169, 1996.\n    * G. Kresse and D. Joubert. From ultrasoft pseudopotentials to the projector augmented-wave method. Phys. Rev. B, 59:1758, 1999.\n3. **NUMSBT**:\nNUMSBT is a code written by J. D. Talman, which implements an algorithm that\ncalculates the spherical Bessel transform (SBT) in O(NlogN) time.\nPAWpySeed\nemploys the high-k transform algorithm implemented in NUMSBT\nto calculate the overlap operators between\noverlapping augmentation spheres that have different positions or elements.\nIt is also used to filter out high-frequency components from AE partial\nwaves, which allows projections from pseudowavefunctions to AE partial\nwaves to be performed in real space, which is a vital component of the\ncode.\nNUMSBT is distributed under the Standard CPC License, and the algorithm is\ndeveloped in the following paper:\n    * Talman, J. Computer Physics Communications 2009, 180, 332 \u2013338.\n4. **WaveTrans**:\nreader.c and reader.h, which read WAVECAR files from VASP output,\nare based on the Fortran program, WaveTrans, written by\nR. M. Feenstra and M. Widom from the Dept. of Physics at Carnegie\nMellon University. To see the original work,\nplease visit <https://www.andrew.cmu.edu/user/feenstra/wavetrans/>.\n5. **Doxygen**:\nDoxygen is a documentation generator from which I built the docs for PAWpySeed.\nIt is an excellent tool that allows for clean, up-to-date documentaton\nthat is easy to make and navigate. Check it out at <http://www.stack.nl/~dimitri/doxygen/>.\n\n## Citing\n\nIf you find pawpyseed useful, please encourage its development by\nciting the following paper in your research:\n\n```\n@ARTICLE{2019arXiv190411572B,\n       author = { {Bystrom}, Kyle and {Broberg}, Danny and {Dwaraknath}, Shyam and\n         {Persson}, Kristin A. and {Asta}, Mark},\n        title = \"{Pawpyseed: Perturbation-extrapolation band shifting corrections for point defect calculations}\",\n      journal = {arXiv e-prints},\n     keywords = {Condensed Matter - Materials Science},\n         year = \"2019\",\n        month = \"Apr\",\n          eid = {arXiv:1904.11572},\n        pages = {arXiv:1904.11572},\narchivePrefix = {arXiv},\n       eprint = {1904.11572},\n primaryClass = {cond-mat.mtrl-sci},\n       adsurl = {https://ui.adsabs.harvard.edu/abs/2019arXiv190411572B},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}\n\n```\n\nYou can view the paper here: <https://arxiv.org/abs/1904.11572>\n\n## Questions and Comments\n\nFind a bug? Areas of code unclearly documented? Other questions? Feel free to contact\nKyle Bystrom at kylebystrom@gmail.com with the subject \"pawpyseed: (Your Topic)\"\nAND/OR create an issue on the Github page at <https://github.com/kylebystrom/pawpyseed>.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kylebystrom/pawpyseed", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pawpyseed", "package_url": "https://pypi.org/project/pawpyseed/", "platform": "", "project_url": "https://pypi.org/project/pawpyseed/", "project_urls": {"Homepage": "https://github.com/kylebystrom/pawpyseed"}, "release_url": "https://pypi.org/project/pawpyseed/0.6.2/", "requires_dist": null, "requires_python": "", "summary": "Parallel C/Python package for numerical analysis of PAW DFT wavefunctions", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pawpyseed</h1>\n<p><a href=\"https://kylebystrom.github.io/pawpyseed/\" rel=\"nofollow\">https://kylebystrom.github.io/pawpyseed/</a> <br></p>\n<p>PAWpySeed is a parallelized Python and C tool for reading and\nanalyzing the optimized band structure and wave functions\nof VASP DFT calculations. The code is written for the PAW\nformalism developed by P.E. Blochl and implemented\nin VASP.</p>\n<h2>Installation</h2>\n<p>TO compile the C code, pawpyseed needs to link with the Intel Math Kernel Library\n(MKL). You can customize how this is done via the config file (see \"The customizable way\").\nHowever, for most users, the easy way described below is adequate.</p>\n<h3>The easy way</h3>\n<p>First, install <code>mkl-devel</code> in your local installation:</p>\n<pre><code>pip install mkl-devel --user\n</code></pre>\n<p>Next, find your Python installation directory (call it <code>INST_DIR</code>) and add the <code>include</code> and <code>lib</code> to your\nC compiler paths to link with MKL:</p>\n<pre><code>export C_INCLUDE_PATH=$INST_DIR/include:$C_INCLUDE_PATH\nexport LIBRARY_PATH=$INST_DIR/lib:$LIBRARY_PATH\nexport LD_LIBRARY_PATH=$INST_DIR/lib:$LD_LIBRARY_PATH\n</code></pre>\n<p>Then run</p>\n<pre><code>python setup.py build\npython setup.py install\n</code></pre>\n<p>OR with <code>pip</code>.</p>\n<pre><code>pip install pawpyseed\n</code></pre>\n<p>This has been tested on Scientific Linux 7 and Linux Mint 18,\nbut should work for systems that have the appropriate\npackages and environment variables defined as described below.</p>\n<h4>Simple site.cfg approach</h4>\n<p>After installing MKL locally with <code>pip</code>,\ncopy <code>site.cfg.default</code> from the pawpyseed repository to <code>~/.pawpyseed-site.cfg</code>.\nOpen it and set <code>root=&lt;your home directory&gt;/.local</code> under the <code>[mkl]</code> heading\nand uncomment it by removing the <code>#</code>.</p>\n<p>IF you get linking issues at runtime using this method, try setting\n<code>sdl=True</code> in the config file and then setting the environment\nvariable <code>MKL_THREADING_LAYER=sequential</code>.</p>\n<h4>Intel easy way</h4>\n<p>If you have <code>icc</code> and prefer to use it to compile pawpyseed's C libraries,\nset <code>compiler=icc</code> in <code>~/.pawpyseed-site.cfg</code> and then\nset <code>root</code> to your MKL installation directory. Set <code>sdl=True</code>. You MKL distribution must have also\nbeen compiled with the Intel compiler. Run the <code>setup.py</code> script or <code>pip install pawpyseed</code>.</p>\n<h3>The customizable way</h3>\n<p>To make your own config file,\nmake a file in your home directory <code>~</code> named <code>.pawpyseed-site.cfg</code>. This file allows you\nto customize configuration settings for pawpyseed. It is read using the Python\nconfigparser module <a href=\"https://docs.python.org/3/library/configparser.html\" rel=\"nofollow\">https://docs.python.org/3/library/configparser.html</a>. If you don't\nwant to learn about the configuration file options, skip to \"The Easy Way\" to get this done with quickly.\nThe options (with their defaults) are as follows:</p>\n<pre><code>[compiler]\n# Name of the compiler to be used. By default, let's the setup script choose this.\ncompiler_name = &lt;no default&gt; # Examples: icc or gcc\n# Name of the linker to be used. By default, let's the setup script choose this.\n# NOTE: Don't forget the -shared tag for icc or gcc!\n# NOTE: If compiler_name is set and linker_name is not,\n#       linker_name is set to compiler_name with the -shared tag appended.\nlinker_name = &lt;no default&gt; # Examples: icc -shared or gcc -shared\n\n[mkl]\n# MKL installation directory. &lt;root&gt;/lib or &lt;root&gt;/lib/intel64 must contain\n# the MKL shared object libraries, while &lt;root&gt;/include must containn the MKL headers.\n# Many systems have the environment variable\n# MKLROOT set for this, so you can set this to the output of:\n#       echo $MKLROOT\n# If you pip install mkl-devel, this goes to /usr or /usr/local.\n# If you pip install mkl-devel --user, this goes to ~/.local\n# (or the equivalents for your system).\nroot = &lt;no default&gt;\n# Don't change this. Might be used in the future but currently has no effect.\ninterface32 = True\n# Whether to compile with the single dynamic library libmkl_rt.so.\n# If you are having installation/performance problems, try setting sdl=True,\n# pip installing mkl-devel with the --user option, set root=~/.local,\n# and set the environment variable MKL_THREADING_LAYER=sequential\n# when using pawpyseed.\nsdl = False\n\n[threading]\n# Whether to use omp_loops. If False, pawpyseed doesn't do any parallelization\n# on its own, though its calls to MKL, BLAS, LAPACK, etc might be\n# threaded by MKL.\nomp_loops = True\n# Whether to use threading for MKL. OVERRIDDEN if sdl=True, in which case\n# MKL is threaded by default and you can run sequentially by\n# setting the environment variable MKL_THREADING_LAYER=sequential\n# when using pawpyseed.\n# NOTE: ONLY SET THIS TRUE IF COMPILING WITH icc (OR gcc with omp_loops=False),\n# and only if you are very concerned about speed. This is because gcc\n# cannot do nested parallelism with MKL\nthreaded_mkl = False\n\n# NOTE: Do not link to icc-compiled MKL libraries when compiling the C\n# extension with gcc or vice versa. Use like type compilers.\n</code></pre>\n<h3>Dependencies</h3>\n<p>All dependencies indicate the minimum version tested.\nPAWpySeed might work fine with earlier versions, but\nuse of older versions will not be officially supported.</p>\n<p>Python requirements:</p>\n<pre><code>Python&gt;=3.5\nnumpy&gt;=1.14\nscipy&gt;=1.0\npymatgen&gt;=2018.2.13\nsympy&gt;=1.1.1\nmatplotlib&gt;=0.2.5\n</code></pre>\n<p>C requirements:</p>\n<pre><code>icc &gt;= 16.0.4 OR gcc &gt;= 4.8.5\nIntel Math Kernel Library &gt;= 11.3.4\n</code></pre>\n<p>If you don't want to <code>pip install</code> Intel MKL,\nit is available for free installation on a variety of platforms.\nMost computing clusters will have Intel MKL, and you can install it\non your desktop (or any system to which you have root access) by following\nthe relevant instructions at the following URL:\n<a href=\"https://software.intel.com/en-us/articles/free-ipsxe-tools-and-libraries\" rel=\"nofollow\">https://software.intel.com/en-us/articles/free-ipsxe-tools-and-libraries</a>.</p>\n<h2>Theory and Input</h2>\n<h3>PAW</h3>\n<p>The projector augmented wave (PAW) method is a technique\nused in plane wave density functional theory to simplify\nthe description of the wavefunctions near the nuclei\nof a system. The strong Coulombic forces near an atomic\nnucleus creates quickly oscillating wavefunctions that are\nnot well described by plane waves without prohibitively\nlarge basis sets, so a \"pseudopotential\" is introduced\nnear the atomic nuclei which results in smooth\n\"pseudo wavefunctions\" well described by plane waves. The\nfull wavefunctions can be recovered by a linear transform\nof the pseudowavefunctions. The PAW method requires\nthree sets of functions: projector functions, onto which\npseudowavefunctions are projected to probe their character;\nfull partial waves, which describe atomic valence states\nderived from the true potential; and pseudo partial waves,\nwhich are derived from the full partial waves and\npseudopotential.</p>\n<h3>Files</h3>\n<p>The projector functions and partial waves are unique\nto each element and stored in the POTCAR file\nused in a VASP calculation. The pseudowavefunction\nis the part of the wavefunction optimized during a DFT\ncalculation and is stored in the WAVECAR output file\nin VASP. PAWpySeed parses both files to retrieve\nall parts of the full Kohn Sham wavefunctions.</p>\n<h2>The Code</h2>\n<p>The main purpose of PAWpySeed is to evaluate overlap\noperators between Kohn-Sham wavefunctions from different\nstructures, which is not done by standard plane-wave DFT codes.\nSuch functionality can be useful for analyzing the composition\nof defect levels in solids, which is main application for which\nthe code is currently focused.</p>\n<h3>Implementation</h3>\n<ul>\n<li>Python Interface</li>\n<li>Computationally intensive tasks in C</li>\n<li>Parallelized with openmp</li>\n</ul>\n<h3>Current Functionality</h3>\n<ul>\n<li>Read pseudowavefunctions</li>\n<li>Read projectors and partial waves from VASP POTCAR</li>\n<li>Evaluate overlap operators between bands,\nincluding when bands belong to different structures\nwith the same lattice</li>\n<li>Project point defect levels onto bulk valence\nand conduction bands</li>\n<li>Convenient pycdt interface</li>\n<li>Perturbation-extrapolation correction for point defect calculations</li>\n<li>Read noncollinear pseudo wavefunctions and construct all-electron wavefunctions (no overlap operator evaluation for noncollinear data)</li>\n<li>Calculate plane-wave matrix elements between bands.</li>\n</ul>\n<h2>Acknowledgments</h2>\n<p>The code in PAWpySeed is based on a several algorithms and codes, which are enumerated\nhere.</p>\n<ol>\n<li><strong>PAW</strong>:\nThe PAW method was developed by P. E. Blochl in 1994. His paper deriving the method\nwas helpful to me in deriving the extensions to the formalism needed to develop\nthis code.\n<ul>\n<li>P. E. Blochl. Projector augmented-wave method. Phys. Rev. B, 50:17953, 1994.</li>\n</ul>\n</li>\n<li><strong>VASP</strong>:\nPAWpySeed is primarily built to read and process the output of VASP calculations.\nPAWpySeed reads PAW wavefunctions and calculate overlap operators using algorithms\nderived from VASP and other plane-wave codes, so the following citations are necessary.\nThe last citation is specifically for the PAW method and potentials. See the VASP website\nat <a href=\"http://community.hartree.stfc.ac.uk/wiki/site/admin/vasp.html\" rel=\"nofollow\">http://community.hartree.stfc.ac.uk/wiki/site/admin/vasp.html</a> for information\non citing specific functionals.\n<ul>\n<li>G. Kresse and J. Hafner. Ab initio molecular dynamics for liquid metals. Phys. Rev. B, 47:558, 1993.</li>\n<li>G. Kresse and J. Hafner. Ab initio molecular-dynamics simulation of the liquid-metal-amorphous-semiconductor transition in germanium. Phys. Rev. B, 49:14251, 1994.</li>\n<li>G. Kresse and J. Furthm\u00fcller. Efficiency of ab-initio total energy calculations for metals and semiconductors using a plane-wave basis set. Comput. Mat. Sci., 6:15, 1996.</li>\n<li>G. Kresse and J. Furthm\u00fcller. Efficient iterative schemes for ab initio total-energy calculations using a plane-wave basis set. Phys. Rev. B, 54:11169, 1996.</li>\n<li>G. Kresse and D. Joubert. From ultrasoft pseudopotentials to the projector augmented-wave method. Phys. Rev. B, 59:1758, 1999.</li>\n</ul>\n</li>\n<li><strong>NUMSBT</strong>:\nNUMSBT is a code written by J. D. Talman, which implements an algorithm that\ncalculates the spherical Bessel transform (SBT) in O(NlogN) time.\nPAWpySeed\nemploys the high-k transform algorithm implemented in NUMSBT\nto calculate the overlap operators between\noverlapping augmentation spheres that have different positions or elements.\nIt is also used to filter out high-frequency components from AE partial\nwaves, which allows projections from pseudowavefunctions to AE partial\nwaves to be performed in real space, which is a vital component of the\ncode.\nNUMSBT is distributed under the Standard CPC License, and the algorithm is\ndeveloped in the following paper:\n<ul>\n<li>Talman, J. Computer Physics Communications 2009, 180, 332 \u2013338.</li>\n</ul>\n</li>\n<li><strong>WaveTrans</strong>:\nreader.c and reader.h, which read WAVECAR files from VASP output,\nare based on the Fortran program, WaveTrans, written by\nR. M. Feenstra and M. Widom from the Dept. of Physics at Carnegie\nMellon University. To see the original work,\nplease visit <a href=\"https://www.andrew.cmu.edu/user/feenstra/wavetrans/\" rel=\"nofollow\">https://www.andrew.cmu.edu/user/feenstra/wavetrans/</a>.</li>\n<li><strong>Doxygen</strong>:\nDoxygen is a documentation generator from which I built the docs for PAWpySeed.\nIt is an excellent tool that allows for clean, up-to-date documentaton\nthat is easy to make and navigate. Check it out at <a href=\"http://www.stack.nl/%7Edimitri/doxygen/\" rel=\"nofollow\">http://www.stack.nl/~dimitri/doxygen/</a>.</li>\n</ol>\n<h2>Citing</h2>\n<p>If you find pawpyseed useful, please encourage its development by\nciting the following paper in your research:</p>\n<pre><code>@ARTICLE{2019arXiv190411572B,\n       author = { {Bystrom}, Kyle and {Broberg}, Danny and {Dwaraknath}, Shyam and\n         {Persson}, Kristin A. and {Asta}, Mark},\n        title = \"{Pawpyseed: Perturbation-extrapolation band shifting corrections for point defect calculations}\",\n      journal = {arXiv e-prints},\n     keywords = {Condensed Matter - Materials Science},\n         year = \"2019\",\n        month = \"Apr\",\n          eid = {arXiv:1904.11572},\n        pages = {arXiv:1904.11572},\narchivePrefix = {arXiv},\n       eprint = {1904.11572},\n primaryClass = {cond-mat.mtrl-sci},\n       adsurl = {https://ui.adsabs.harvard.edu/abs/2019arXiv190411572B},\n      adsnote = {Provided by the SAO/NASA Astrophysics Data System}\n}\n\n</code></pre>\n<p>You can view the paper here: <a href=\"https://arxiv.org/abs/1904.11572\" rel=\"nofollow\">https://arxiv.org/abs/1904.11572</a></p>\n<h2>Questions and Comments</h2>\n<p>Find a bug? Areas of code unclearly documented? Other questions? Feel free to contact\nKyle Bystrom at <a href=\"mailto:kylebystrom@gmail.com\">kylebystrom@gmail.com</a> with the subject \"pawpyseed: (Your Topic)\"\nAND/OR create an issue on the Github page at <a href=\"https://github.com/kylebystrom/pawpyseed\" rel=\"nofollow\">https://github.com/kylebystrom/pawpyseed</a>.</p>\n\n          </div>"}, "last_serial": 6669879, "releases": {"0.0.4a0": [{"comment_text": "", "digests": {"md5": "b3723eae61d043c90e0b71f604b089e5", "sha256": "f9bcd4293731029d0f54a374a7fd71b41c4d93be86cd8b8e4491fb1712b0592c"}, "downloads": -1, "filename": "pawpyseed-0.0.4a0.tar.gz", "has_sig": false, "md5_digest": "b3723eae61d043c90e0b71f604b089e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 732655, "upload_time": "2018-08-20T18:57:11", "upload_time_iso_8601": "2018-08-20T18:57:11.695166Z", "url": "https://files.pythonhosted.org/packages/f6/a5/7fcbd754e76b8ba8fe0813326d9f149510241383323e322ab338b073abfa/pawpyseed-0.0.4a0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "73d71ffc492e7df8b9574217522bd0aa", "sha256": "2756edaf6bd6034650d091cabd89557fb8d03f891eb8016e75336ff1be8f89c6"}, "downloads": -1, "filename": "pawpyseed-0.2.0.tar.gz", "has_sig": false, "md5_digest": "73d71ffc492e7df8b9574217522bd0aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2700741, "upload_time": "2019-01-07T21:03:11", "upload_time_iso_8601": "2019-01-07T21:03:11.444358Z", "url": "https://files.pythonhosted.org/packages/b7/16/3087703ba223c95139d7692c86c4958e9602fd50b4e60db4376ef2351167/pawpyseed-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8fbde33af31de1256298e2e845ff74b7", "sha256": "9ed7a6481c7d3dd534ef8eeeede976db675d37da6ca9f6b81cb938e7841484ba"}, "downloads": -1, "filename": "pawpyseed-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8fbde33af31de1256298e2e845ff74b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2904943, "upload_time": "2019-01-31T23:04:12", "upload_time_iso_8601": "2019-01-31T23:04:12.563044Z", "url": "https://files.pythonhosted.org/packages/b1/4b/dedab0e0c7e2bbbbf30aad75ddc859a2f08d2cb2fbbf5600250e0ad4de91/pawpyseed-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "44d9bdd17d033e92b144c903a7922a6a", "sha256": "ff92dd9bdcb3c2070641472ea422dec47d0db3d989ebfbf80a9f638cafcdc2d4"}, "downloads": -1, "filename": "pawpyseed-0.3.1.tar.gz", "has_sig": false, "md5_digest": "44d9bdd17d033e92b144c903a7922a6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2904992, "upload_time": "2019-02-01T22:25:14", "upload_time_iso_8601": "2019-02-01T22:25:14.640477Z", "url": "https://files.pythonhosted.org/packages/0a/2a/77cd9c4935e233dc5c540a7325fde5057e4b34836e723e23393d5c2e93bc/pawpyseed-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fbf598d2bfa62ef96131db4650c08106", "sha256": "9255d68377f9d385f3bf365cbc643dd8243f3ccdd61e535e49c308a86188e0e4"}, "downloads": -1, "filename": "pawpyseed-0.4.0.tar.gz", "has_sig": false, "md5_digest": "fbf598d2bfa62ef96131db4650c08106", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4359630, "upload_time": "2019-02-28T00:49:25", "upload_time_iso_8601": "2019-02-28T00:49:25.711199Z", "url": "https://files.pythonhosted.org/packages/8f/be/6fd0ce82f22fc5bd6a5e4b66606ce9759b2433d527cb131234f48ba585d7/pawpyseed-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "d06542c5996734d09fa834fcf403140f", "sha256": "183a4ef34f4eb52ec42ac11cdfbe66fa6c34501d4b4235c8bba06071e9e93a76"}, "downloads": -1, "filename": "pawpyseed-0.5.0.tar.gz", "has_sig": false, "md5_digest": "d06542c5996734d09fa834fcf403140f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4433684, "upload_time": "2019-04-02T16:18:24", "upload_time_iso_8601": "2019-04-02T16:18:24.539533Z", "url": "https://files.pythonhosted.org/packages/d2/25/f8cb2c44882d6700bd07f03f1d53e47ccf4280711e93f30c9510d60687bb/pawpyseed-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "2b2d3c17bfeff0f30b1d3d0f0dfbc0ac", "sha256": "3e6520d81ba5dba2963c63fb7548acecbabdfc7a26c7e2f874a6b5b96e3eac7a"}, "downloads": -1, "filename": "pawpyseed-0.5.1.tar.gz", "has_sig": false, "md5_digest": "2b2d3c17bfeff0f30b1d3d0f0dfbc0ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4472448, "upload_time": "2019-04-10T23:23:34", "upload_time_iso_8601": "2019-04-10T23:23:34.893081Z", "url": "https://files.pythonhosted.org/packages/fa/cb/7ade90fe8b1a9b81044d971d5cb54c5788e51ebebc109d638ba68d5a0119/pawpyseed-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "37b0f98029d9a2d79eee2b2ccce5c23c", "sha256": "6c95f4bd2fdb7be9ce309239c1de036e8f006e9c4bebac6e996a413a8c31796f"}, "downloads": -1, "filename": "pawpyseed-0.6.0.tar.gz", "has_sig": false, "md5_digest": "37b0f98029d9a2d79eee2b2ccce5c23c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4621995, "upload_time": "2019-08-23T17:43:00", "upload_time_iso_8601": "2019-08-23T17:43:00.290051Z", "url": "https://files.pythonhosted.org/packages/0b/93/d0e47ed91f6340ffe657376890ad9f5e898f8acadcab23cd5f434592b4d4/pawpyseed-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "3b3e0ffb051bc81c0dc60e02d6fd74b5", "sha256": "ca14329142736eb2a48a91d67aef0d63d553788d67266869c4fb555982ab3849"}, "downloads": -1, "filename": "pawpyseed-0.6.1.tar.gz", "has_sig": false, "md5_digest": "3b3e0ffb051bc81c0dc60e02d6fd74b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6192275, "upload_time": "2019-12-02T22:07:00", "upload_time_iso_8601": "2019-12-02T22:07:00.642709Z", "url": "https://files.pythonhosted.org/packages/a4/b8/1990087912fd5f3e1b0c31495298acf6c6e33c29c172aac5fd12fe940638/pawpyseed-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "37f50d5cc8537f304f7b9f853ba22cbc", "sha256": "1e083297b288ee2e1ab836d7b5c293c95baa92e8174d004d9b077b9c098ecaf1"}, "downloads": -1, "filename": "pawpyseed-0.6.2.tar.gz", "has_sig": false, "md5_digest": "37f50d5cc8537f304f7b9f853ba22cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6192184, "upload_time": "2020-02-20T18:27:00", "upload_time_iso_8601": "2020-02-20T18:27:00.798383Z", "url": "https://files.pythonhosted.org/packages/46/e2/5ce9c68c746926dbdbb3677d01fc2b7aa52fafbf0bbb5d32211ae286e1f9/pawpyseed-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37f50d5cc8537f304f7b9f853ba22cbc", "sha256": "1e083297b288ee2e1ab836d7b5c293c95baa92e8174d004d9b077b9c098ecaf1"}, "downloads": -1, "filename": "pawpyseed-0.6.2.tar.gz", "has_sig": false, "md5_digest": "37f50d5cc8537f304f7b9f853ba22cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6192184, "upload_time": "2020-02-20T18:27:00", "upload_time_iso_8601": "2020-02-20T18:27:00.798383Z", "url": "https://files.pythonhosted.org/packages/46/e2/5ce9c68c746926dbdbb3677d01fc2b7aa52fafbf0bbb5d32211ae286e1f9/pawpyseed-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:44 2020"}