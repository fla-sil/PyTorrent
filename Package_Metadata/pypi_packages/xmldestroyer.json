{"info": {"author": "Dan Ros\u00e9n", "author_email": "dan.rosen@gu.se", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Text Processing :: Markup :: XML"], "description": "xmldestroyer\n============\n\nThis library does a bottom-up transformation of XML documents, extracting the\nparts that are relevant for the task at hand, and either returning it as a\npython generator, or serializing it to disk as XML (again!), JSON or text.\n\nOne design goal is to be able to process gigabyte-sized documents with constant\nmemory footprint.\n\nInspired by the Haskell libraries\n`Scrap Your Boilerplate <https://hackage.haskell.org/package/syb>`__,\n`uniplate <https://hackage.haskell.org/package/uniplate>`__ and\n`geniplate <https://hackage.haskell.org/package/geniplate-mirror>`__.\n\nExample, get the texts from all ``<p>`` tags in a document:\n\n::\n\n    from xmldestroyer import xd\n    import sys\n\n    def p(text, _attrs, _children, _parents):\n        return text\n\n    infile, outfile = sys.args\n\n    xd(infile, outfile, p=p)\n\nThis outputs a text file with the text from all ``<p>`` tags, one per line.\n\nWorks with python 2.7, 3.3, 3.4 and 3.5.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/danr/xmldestroyer", "keywords": "xml bottom up bottom-up transformation syb scrap your boilerplate scrap-your-boilerplate uniplate geniplate", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xmldestroyer", "package_url": "https://pypi.org/project/xmldestroyer/", "platform": "", "project_url": "https://pypi.org/project/xmldestroyer/", "project_urls": {"Homepage": "http://github.com/danr/xmldestroyer"}, "release_url": "https://pypi.org/project/xmldestroyer/0.2/", "requires_dist": null, "requires_python": "", "summary": "Bottom-up transformation of XML into python generators, XML, JSON or text.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library does a bottom-up transformation of XML documents, extracting the\nparts that are relevant for the task at hand, and either returning it as a\npython generator, or serializing it to disk as XML (again!), JSON or text.</p>\n<p>One design goal is to be able to process gigabyte-sized documents with constant\nmemory footprint.</p>\n<p>Inspired by the Haskell libraries\n<a href=\"https://hackage.haskell.org/package/syb\" rel=\"nofollow\">Scrap Your Boilerplate</a>,\n<a href=\"https://hackage.haskell.org/package/uniplate\" rel=\"nofollow\">uniplate</a> and\n<a href=\"https://hackage.haskell.org/package/geniplate-mirror\" rel=\"nofollow\">geniplate</a>.</p>\n<p>Example, get the texts from all <tt>&lt;p&gt;</tt> tags in a document:</p>\n<pre>from xmldestroyer import xd\nimport sys\n\ndef p(text, _attrs, _children, _parents):\n    return text\n\ninfile, outfile = sys.args\n\nxd(infile, outfile, p=p)\n</pre>\n<p>This outputs a text file with the text from all <tt>&lt;p&gt;</tt> tags, one per line.</p>\n<p>Works with python 2.7, 3.3, 3.4 and 3.5.</p>\n\n          </div>"}, "last_serial": 2528175, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d18a5140a6316d415949c6e5646d4981", "sha256": "98541f48e0d0970860402a86fb89c1ac89b27bae28958d9780087b36c3999dfd"}, "downloads": -1, "filename": "xmldestroyer-0.1.tar.gz", "has_sig": false, "md5_digest": "d18a5140a6316d415949c6e5646d4981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7082, "upload_time": "2016-12-16T16:29:08", "upload_time_iso_8601": "2016-12-16T16:29:08.122789Z", "url": "https://files.pythonhosted.org/packages/1b/59/7b5df057cdcb9af8d31cc37462385098da42865d47936c456d1e5d1e2242/xmldestroyer-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "13440d7dffbf5281c041285983e5267e", "sha256": "71c5003a61d57a77981750fefe533b3e4437e580fb88b2a620d1e53a07285a63"}, "downloads": -1, "filename": "xmldestroyer-0.2.tar.gz", "has_sig": false, "md5_digest": "13440d7dffbf5281c041285983e5267e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7116, "upload_time": "2016-12-19T13:42:35", "upload_time_iso_8601": "2016-12-19T13:42:35.158072Z", "url": "https://files.pythonhosted.org/packages/ad/3f/addd758f341f512a19c2f60baa240ef2a89747212fd4614f505af9babdc6/xmldestroyer-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13440d7dffbf5281c041285983e5267e", "sha256": "71c5003a61d57a77981750fefe533b3e4437e580fb88b2a620d1e53a07285a63"}, "downloads": -1, "filename": "xmldestroyer-0.2.tar.gz", "has_sig": false, "md5_digest": "13440d7dffbf5281c041285983e5267e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7116, "upload_time": "2016-12-19T13:42:35", "upload_time_iso_8601": "2016-12-19T13:42:35.158072Z", "url": "https://files.pythonhosted.org/packages/ad/3f/addd758f341f512a19c2f60baa240ef2a89747212fd4614f505af9babdc6/xmldestroyer-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:03 2020"}