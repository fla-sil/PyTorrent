{"info": {"author": "Philip Howard", "author_email": "phil@gadgetoid.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: System :: Hardware"], "description": "Pibrella\n========\n\nSupport code and API library for the Pibrella addon board.\n\nInstallation\n============\n\nThe easy way\n------------\n\n**Python 3:**\n\n    sudo apt-get install python3-pip\n    sudo pip-3.2 install pibrella\n\n**Python 2:**\n\n    sudo apt-get install python-pip\n    sudo pip install pibrella\n\nAlternative method\n------------------\n\nAlternatively you can clone this repository and install:\n\n    git clone http://github.com/pimoroni/pibrella\n    cd pibrella\n    sudo python setup.py install\n\nTo try the examples:\n\n    git clone http://github.com/pimoroni/pibrella\n    cd pibrella/examples\n    sudo python siren.py\n\n\nUsage\n=====\n\nRun as root!\n------------\n\nPibrella depends upon RPi.GPIO > 0.5.4, which requires root to access your GPIO.\n\nIf you're using an interactive shell you should: sudo python -i, otherwise sudo python yourscript.py\n\nFirst steps\n-----------\n\nTo get started you need to import pibrella. Simply:\n\n    import pibrella\n\nThis will set up GPIO for you and collect all of the Pibrella's inputs and outputs into some handily named objects.\n\nIf, for example, you wanted to turn on an LED you could:\n\n    pibrella.light.red.on()\n\nAnd to turn it off again:\n\n    pibrella.light.red.off()\n\nPibrellas collections ( lights, inputs, outputs ) allow you to also control a group of things at the same time. So to turn all of the LEDs off you can simply:\n\n    pibrella.light.off()\n\nOr on:\n\n    pibrella.light.on()\n\n\nBlinking and pulsing LEDs\n-------------------------\n\nLights aren't simply there for toggling on and off. Any good lighting display needs pulsing, fading, blinking and strobing. Pibrella has functions for those, too:\n\n    pibrella.light.red.blink(ON_TIME, OFF_TIME) \n\nAnd something more exciting:\n\n    pibrella.light.red.pulse(FADE_IN_TIME, FADE_OUT_TIME, ON_TIME, OFF_TIME)\n\nThe astute observer will realise that these are equivilent:\n\n    pibrella.light.red.pulse(0, 0, 1, 1)\n    pibrella.light.red.blink(1, 1)\n\nYou can also fade LEDs from one brightness to another, like so:\n\n    pibrella.light.red.fade(0, 100, 2) # From 0 to 100% in 2 seconds\n\n\nInputs and outputs\n------------------\n\nThe input and output collections correspond to the 4 in and 4 out pins of the Pibrella. These are named a, b, c, d for inputs and e, f, g, h for outputs- you'll see these labels on the board itself.\n\nTo turn output \"e\" on, you can:\n\n    pibrella.output.e.on()\n\nYou can also write an explicit value, ( 1 is on/high, 0 is off/low ) like so\n\n    pibrella.output.e.write(1)\n\nThis is useful if you want to toggle a pin on and off programmatically, or write an input value directly to an output.\n\nAnd you can write to the whole output collection simultaneously if you wish:\n\n    pibrella.output.write(1)\n\nInputs are similar, except you're reading them instead of turning them on and off. To read a single input:\n\n    my_value = pibrella.input.e.read()\n\nOr to read all inputs into a dictionary:\n\n    inputs = pibrella.input.read()\n    input_e = inputs['e']\n\n\nThe button\n----------\n\nThe Pibrella button is, for all intents and purposes, just another input. It does, however, have a pull-down resistor enabled to prevent it reading random electrical fluctuations as button presses.\n\nLike an input, you can read the button state at any time:\n\n    pibrella.button.read()\n\nThe buzzer\n----------\n\nThe buzzer is just another output. However just turning it on and off wont get you much more than a single pop, it needs to be toggled rapidly to make a continuous tone. We've provided functions for this.\n\nFirst, you can buzz at a specific frequency:\n\n    pibrella.buzzer.buzz( frequency )\n    \nOr play a note ( you can use both positive and negative values here, with 0 being A at 440Hz )\n\n    pibrella.buzzer.note( 1 )\n\nOr play a built-in tone:\n\n    pibrella.buzzer.fail()\n    pibrella.buzzer.success()\n\n\nHandling events\n---------------\n\nIf you want to catch an input changing state and run a specific function, you can use changed, pressed and released on any of the inputs or the button. Changed will trigger when a pin transitions from 1 ( high/on ) to 0 ( low/off ) or vice versa. Pressed will trigger when it transitions from 0 to 1, and Released when it transitions from 1 to 0.\n\nFor example:\n\n    def button_pressed(pin):\n        print(\"You pressed the button!\")\n\n    pibrella.button.pressed(button_pressed)\n\nThe \"pin\" parameter of the button pressed function is the Pibrella pin that triggered the event, in this case \"pin\" will be equal to \"pibrella.button\" so you can .read() it.\n\n    def button_changed(pin):\n        if pin.read() == 1:\n            print(\"You pressed the button!\")\n        else:\n            print(\"You released the button!\")\n\n    pibrella.button.changed(button_changed)\n\nIf you want to turn a light on when the button is pressed, your code should look something like this:\n\n    import pibrella\n\n    def button_changed(pin):\n        pibrella.light.red.write(pin.read())\n\n    pibrella.button.changed(button_changed)\n\nAnd in just 4 lines, you've got started with event-driven programming!\n\nQuick Reference\n===============\n\nAll of Pibrella's inputs, outputs and lights are stored in collectons. You can reference a pin by name or by index in one of three ways:\n\n\tpibrella.light[0]\t\t# By index\n\tpibrella.light['red']\t\t# By name, for use with a variable\n\tpibrella.light.red\t\t# By name\n\nYou can also refer to a whole collection at once, simply by omitting the index or name:\n\t\n\tpibrella.light\n\nHelp Text\n---------\n\nPibrella has a small amount of built-in help. If you want to know the names of the lights, inputs or putputs simply type:\n\n    pibrella.lights\n\nOr otherwise, and you'll get a list of the supported names.\n\nLights\n------\n\nThe following methods are available for every Pibrella light:\n\n\t.on()\t# Turn a light on\n\t.off()\t# Turn a light off\n\t.high()\t# Same as on\n\t.low() \t# Same as off\n\n\t.toggle() # Toggle a lights status from on to off and off to on\n\t# If lights are pulsing/blinking toggle will always turn them off\n\n\t.pulse( transition_on, transition_off, time_on, time_off )\t# Pulse a light, values in seconds\n\t.blink( time_on, time_off )\t# Blink a light, values in seconds\n\t.write( value )\t# Turn on if value = 1, or off if value = 0\n\nOutputs\n-------\n\nAn output can do everything a light can do, they are identical in all but name!\n\nInputs\n------\n\nThe following methods are available for every Pibrella input:\n\nGeneral\n-------\n\n\tpibrella.pause() # Wrapper for signal.pause(), great for pausing your application after calling blink, pulse or loop\n\n\tpibrella.loop( function_name )  # Pass pibrella a function to run over and over again, asyncronously\n\t# You must call pibrella.pause() after giving it a function to loop, or your code will simply exit!\n\n\n\nChange Log\n==========\n\n1.2\n---\n- Significant version bump to highlight launch to Production/Stable status\n- Small tweak to allow use of with, ie: \"with pibrella.light.red as red:\"\n\n1.1.7-dev\n---------\n- Fixed buzzer to stop after playing melody\n- Wrapped changed/pressed/released so they can be registered simultaneously\n- Added \"len\" to pin collections, to support random.choice(pibrella.light)\n- Added error if run without root\n\n1.1.6-dev\n---------\n- Populated LICENSE.txt\n\n1.1.5-dev\n---------\n- Renamed amber to yellow and added alias support for backwards-compatibility\n- Added lights, inputs, outputs and pins as pluralalised aliases for light, input etc\n- Tweaked how on/off/toggle calls to lights/outputs are handled during pulse/blink\n\n1.1.4-dev\n---------\n- Added pulse(), blink() and fade() to all outputs\n\n1.1.3-dev\n---------\n- Built-in asyncronous alarm sound! pibrella.buzzer.alarm()\n- Replaced xrange with range\n\n1.1.2-dev\n---------\n- Added support for REV 1 Raspberry Pi\n\n1.1.1-dev\n---------\n- Added fade(from,to,duration) for lights\n\n1.1-dev\n-------\n- Removed *.all.* keyword, use pibrella.input.read() instead of pibrella.input.all.read()\n- Added helper to list pins, try: pibrella.input in interactive shell\n- Added ['name'] and [idx] support to pin collections, try: pibrella.input[0] pibrella.input['a']\n- Added buzzer to pibrella.pin\n- Added return values to most methods\n\n1.0-dev\n-------\n- Initial development/beta release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://explore.pimoroni.com", "keywords": "Raspberry Pi Explorer HAT", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Explorer", "package_url": "https://pypi.org/project/Explorer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Explorer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://explore.pimoroni.com"}, "release_url": "https://pypi.org/project/Explorer/0.1/", "requires_dist": null, "requires_python": null, "summary": "A module to control the Explorer HAT Raspberry Pi Addon Board", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pibrella\">\n<h2>Pibrella</h2>\n<p>Support code and API library for the Pibrella addon board.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"the-easy-way\">\n<h3>The easy way</h3>\n<p><strong>Python 3:</strong></p>\n<blockquote>\nsudo apt-get install python3-pip\nsudo pip-3.2 install pibrella</blockquote>\n<p><strong>Python 2:</strong></p>\n<blockquote>\nsudo apt-get install python-pip\nsudo pip install pibrella</blockquote>\n</div>\n<div id=\"alternative-method\">\n<h3>Alternative method</h3>\n<p>Alternatively you can clone this repository and install:</p>\n<blockquote>\ngit clone <a href=\"http://github.com/pimoroni/pibrella\" rel=\"nofollow\">http://github.com/pimoroni/pibrella</a>\ncd pibrella\nsudo python setup.py install</blockquote>\n<p>To try the examples:</p>\n<blockquote>\ngit clone <a href=\"http://github.com/pimoroni/pibrella\" rel=\"nofollow\">http://github.com/pimoroni/pibrella</a>\ncd pibrella/examples\nsudo python siren.py</blockquote>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"run-as-root\">\n<h3>Run as root!</h3>\n<p>Pibrella depends upon RPi.GPIO &gt; 0.5.4, which requires root to access your GPIO.</p>\n<p>If you\u2019re using an interactive shell you should: sudo python -i, otherwise sudo python yourscript.py</p>\n</div>\n<div id=\"first-steps\">\n<h3>First steps</h3>\n<p>To get started you need to import pibrella. Simply:</p>\n<blockquote>\nimport pibrella</blockquote>\n<p>This will set up GPIO for you and collect all of the Pibrella\u2019s inputs and outputs into some handily named objects.</p>\n<p>If, for example, you wanted to turn on an LED you could:</p>\n<blockquote>\npibrella.light.red.on()</blockquote>\n<p>And to turn it off again:</p>\n<blockquote>\npibrella.light.red.off()</blockquote>\n<p>Pibrellas collections ( lights, inputs, outputs ) allow you to also control a group of things at the same time. So to turn all of the LEDs off you can simply:</p>\n<blockquote>\npibrella.light.off()</blockquote>\n<p>Or on:</p>\n<blockquote>\npibrella.light.on()</blockquote>\n</div>\n<div id=\"blinking-and-pulsing-leds\">\n<h3>Blinking and pulsing LEDs</h3>\n<p>Lights aren\u2019t simply there for toggling on and off. Any good lighting display needs pulsing, fading, blinking and strobing. Pibrella has functions for those, too:</p>\n<blockquote>\npibrella.light.red.blink(ON_TIME, OFF_TIME)</blockquote>\n<p>And something more exciting:</p>\n<blockquote>\npibrella.light.red.pulse(FADE_IN_TIME, FADE_OUT_TIME, ON_TIME, OFF_TIME)</blockquote>\n<p>The astute observer will realise that these are equivilent:</p>\n<blockquote>\npibrella.light.red.pulse(0, 0, 1, 1)\npibrella.light.red.blink(1, 1)</blockquote>\n<p>You can also fade LEDs from one brightness to another, like so:</p>\n<blockquote>\npibrella.light.red.fade(0, 100, 2) # From 0 to 100% in 2 seconds</blockquote>\n</div>\n<div id=\"inputs-and-outputs\">\n<h3>Inputs and outputs</h3>\n<p>The input and output collections correspond to the 4 in and 4 out pins of the Pibrella. These are named a, b, c, d for inputs and e, f, g, h for outputs- you\u2019ll see these labels on the board itself.</p>\n<p>To turn output \u201ce\u201d on, you can:</p>\n<blockquote>\npibrella.output.e.on()</blockquote>\n<p>You can also write an explicit value, ( 1 is on/high, 0 is off/low ) like so</p>\n<blockquote>\npibrella.output.e.write(1)</blockquote>\n<p>This is useful if you want to toggle a pin on and off programmatically, or write an input value directly to an output.</p>\n<p>And you can write to the whole output collection simultaneously if you wish:</p>\n<blockquote>\npibrella.output.write(1)</blockquote>\n<p>Inputs are similar, except you\u2019re reading them instead of turning them on and off. To read a single input:</p>\n<blockquote>\nmy_value = pibrella.input.e.read()</blockquote>\n<p>Or to read all inputs into a dictionary:</p>\n<blockquote>\ninputs = pibrella.input.read()\ninput_e = inputs[\u2018e\u2019]</blockquote>\n</div>\n<div id=\"the-button\">\n<h3>The button</h3>\n<p>The Pibrella button is, for all intents and purposes, just another input. It does, however, have a pull-down resistor enabled to prevent it reading random electrical fluctuations as button presses.</p>\n<p>Like an input, you can read the button state at any time:</p>\n<blockquote>\npibrella.button.read()</blockquote>\n</div>\n<div id=\"the-buzzer\">\n<h3>The buzzer</h3>\n<p>The buzzer is just another output. However just turning it on and off wont get you much more than a single pop, it needs to be toggled rapidly to make a continuous tone. We\u2019ve provided functions for this.</p>\n<p>First, you can buzz at a specific frequency:</p>\n<blockquote>\npibrella.buzzer.buzz( frequency )</blockquote>\n<p>Or play a note ( you can use both positive and negative values here, with 0 being A at 440Hz )</p>\n<blockquote>\npibrella.buzzer.note( 1 )</blockquote>\n<p>Or play a built-in tone:</p>\n<blockquote>\npibrella.buzzer.fail()\npibrella.buzzer.success()</blockquote>\n</div>\n<div id=\"handling-events\">\n<h3>Handling events</h3>\n<p>If you want to catch an input changing state and run a specific function, you can use changed, pressed and released on any of the inputs or the button. Changed will trigger when a pin transitions from 1 ( high/on ) to 0 ( low/off ) or vice versa. Pressed will trigger when it transitions from 0 to 1, and Released when it transitions from 1 to 0.</p>\n<p>For example:</p>\n<blockquote>\n<dl>\n<dt>def button_pressed(pin):</dt>\n<dd>print(\u201cYou pressed the button!\u201d)</dd>\n</dl>\n<p>pibrella.button.pressed(button_pressed)</p>\n</blockquote>\n<p>The \u201cpin\u201d parameter of the button pressed function is the Pibrella pin that triggered the event, in this case \u201cpin\u201d will be equal to \u201cpibrella.button\u201d so you can .read() it.</p>\n<blockquote>\n<dl>\n<dt>def button_changed(pin):</dt>\n<dd><dl>\n<dt>if pin.read() == 1:</dt>\n<dd>print(\u201cYou pressed the button!\u201d)</dd>\n<dt>else:</dt>\n<dd>print(\u201cYou released the button!\u201d)</dd>\n</dl>\n</dd>\n</dl>\n<p>pibrella.button.changed(button_changed)</p>\n</blockquote>\n<p>If you want to turn a light on when the button is pressed, your code should look something like this:</p>\n<blockquote>\n<p>import pibrella</p>\n<dl>\n<dt>def button_changed(pin):</dt>\n<dd>pibrella.light.red.write(pin.read())</dd>\n</dl>\n<p>pibrella.button.changed(button_changed)</p>\n</blockquote>\n<p>And in just 4 lines, you\u2019ve got started with event-driven programming!</p>\n</div>\n</div>\n<div id=\"quick-reference\">\n<h2>Quick Reference</h2>\n<p>All of Pibrella\u2019s inputs, outputs and lights are stored in collectons. You can reference a pin by name or by index in one of three ways:</p>\n<blockquote>\npibrella.light[0]               # By index\npibrella.light[\u2018red\u2019]           # By name, for use with a variable\npibrella.light.red              # By name</blockquote>\n<p>You can also refer to a whole collection at once, simply by omitting the index or name:</p>\n<blockquote>\npibrella.light</blockquote>\n<div id=\"help-text\">\n<h3>Help Text</h3>\n<p>Pibrella has a small amount of built-in help. If you want to know the names of the lights, inputs or putputs simply type:</p>\n<blockquote>\npibrella.lights</blockquote>\n<p>Or otherwise, and you\u2019ll get a list of the supported names.</p>\n</div>\n<div id=\"lights\">\n<h3>Lights</h3>\n<p>The following methods are available for every Pibrella light:</p>\n<blockquote>\n<p>.on()   # Turn a light on\n.off()  # Turn a light off\n.high() # Same as on\n.low()  # Same as off</p>\n<p>.toggle() # Toggle a lights status from on to off and off to on\n# If lights are pulsing/blinking toggle will always turn them off</p>\n<p>.pulse( transition_on, transition_off, time_on, time_off )      # Pulse a light, values in seconds\n.blink( time_on, time_off )     # Blink a light, values in seconds\n.write( value ) # Turn on if value = 1, or off if value = 0</p>\n</blockquote>\n</div>\n<div id=\"outputs\">\n<h3>Outputs</h3>\n<p>An output can do everything a light can do, they are identical in all but name!</p>\n</div>\n<div id=\"inputs\">\n<h3>Inputs</h3>\n<p>The following methods are available for every Pibrella input:</p>\n</div>\n<div id=\"general\">\n<h3>General</h3>\n<blockquote>\n<p>pibrella.pause() # Wrapper for signal.pause(), great for pausing your application after calling blink, pulse or loop</p>\n<p>pibrella.loop( function_name )  # Pass pibrella a function to run over and over again, asyncronously\n# You must call pibrella.pause() after giving it a function to loop, or your code will simply exit!</p>\n</blockquote>\n</div>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<div id=\"id1\">\n<h3>1.2</h3>\n<ul>\n<li>Significant version bump to highlight launch to Production/Stable status</li>\n<li>Small tweak to allow use of with, ie: \u201cwith pibrella.light.red as red:\u201d</li>\n</ul>\n</div>\n<div id=\"dev\">\n<h3>1.1.7-dev</h3>\n<ul>\n<li>Fixed buzzer to stop after playing melody</li>\n<li>Wrapped changed/pressed/released so they can be registered simultaneously</li>\n<li>Added \u201clen\u201d to pin collections, to support random.choice(pibrella.light)</li>\n<li>Added error if run without root</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1.6-dev</h3>\n<ul>\n<li>Populated LICENSE.txt</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.1.5-dev</h3>\n<ul>\n<li>Renamed amber to yellow and added alias support for backwards-compatibility</li>\n<li>Added lights, inputs, outputs and pins as pluralalised aliases for light, input etc</li>\n<li>Tweaked how on/off/toggle calls to lights/outputs are handled during pulse/blink</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.1.4-dev</h3>\n<ul>\n<li>Added pulse(), blink() and fade() to all outputs</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.1.3-dev</h3>\n<ul>\n<li>Built-in asyncronous alarm sound! pibrella.buzzer.alarm()</li>\n<li>Replaced xrange with range</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.1.2-dev</h3>\n<ul>\n<li>Added support for REV 1 Raspberry Pi</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.1.1-dev</h3>\n<ul>\n<li>Added fade(from,to,duration) for lights</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.1-dev</h3>\n<ul>\n<li>Removed <em>.all.</em> keyword, use pibrella.input.read() instead of pibrella.input.all.read()</li>\n<li>Added helper to list pins, try: pibrella.input in interactive shell</li>\n<li>Added [\u2018name\u2019] and [idx] support to pin collections, try: pibrella.input[0] pibrella.input[\u2018a\u2019]</li>\n<li>Added buzzer to pibrella.pin</li>\n<li>Added return values to most methods</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.0-dev</h3>\n<ul>\n<li>Initial development/beta release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1399118, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 00:44:37 2020"}