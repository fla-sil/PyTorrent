{"info": {"author": "tryexceptpass", "author_email": "cmedina@tryexceptpass.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Communications", "Topic :: Internet"], "description": "Korv is an API framework that uses TCP sockets over SSH to exchange JSON data with a REST-like protocol. It's built on top of the `asyncssh` module, so it uses `asyncio` to manage the sockets and its callbacks. This allows you to build rich APIs with the session security of SSH and without the TCP overhead of HTTP.\n\nCommunications over this framework requires SSH keys like logging into a normal SSH server:\n* The server itself has a private key and a set of public keys for the authorized clients.\n* The client has a private key and a set of public keys for the servers it can connect to.\n\n\n## Verbs\nThere are 4 main verbs that indicate the intent of your request:\n* `GET` for retrieving information.\n* `STORE` for creating new objects.\n* `UPDATE` for changing existing objects.\n* `DELETE` for removing objects.\n\n\n## Keys\nAs discussed previously, you establish an SSH session with the server, so it's possible to reuse existing keys or generate them through any standard mechanism like the one below:\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n\n## Server\nGetting a server up and running is very simple:\n\n```python\nfrom korv import KorvServer\n\n\ndef hello(request):\n    \"\"\"Callback for the /hello endpoint\"\"\"\n\n    return 200, {'msg': 'Hello World!'}\n\ndef echo(request):\n    \"\"\"Callback for the /echo endpoint\"\"\"\n\n    return 200, {'msg': f'{request}'}\n\n\n# Create a server\nk = KorvServer(host_keys=['PATH_TO_YOUR_SERVER_PRIVATE_KEY'], authorized_client_keys='PATH_TO_YOUR_AUTHORIZED_PUBLIC_KEYS')\n\n# Register the callbacks\nk.add_callback('GET', '/hello', hello)\nk.add_callback('GET', '/echo', echo)\n\n# Start listening for requests\nk.start()\n```\n\nThis will start a new SSH server with the specified private key that listens on port `8022` by default and will accept the clients listed in the authorized keys.\n\n## Client\nFollowing is an example on how to communicate with this server.\n\n```python\n>>> from korv import KorvClient\n>>>\n>>> # Create the client\n>>> k = KorvClient(client_keys=['PATH_TO_YOUR_CLIENTS_PRIVATE_KEY'])\n>>>\n>>> # Issue a GET request and print the output\n>>> k.get('/hello', callback=lambda response: print(response['body']))\n>>> {'msg': 'Hello World!'}\n```\n\n## Return Codes\nWe're using standard HTTP response codes:\n* `200` = Success.\n* `400` = Malformed request or missing parameters.\n* `404` = NotFound\n* `500` = Internal error.\n\nServer exceptions map to a `500` return code ans will include a traceback in the response.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tryexceptpass/korv", "keywords": "ssh api framework", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "korv", "package_url": "https://pypi.org/project/korv/", "platform": "", "project_url": "https://pypi.org/project/korv/", "project_urls": {"Gitter Chat": "https://gitter.im/try-except-pass/korv", "Homepage": "https://github.com/tryexceptpass/korv", "Say Thanks!": "https://saythanks.io/to/tryexceptpass", "Source": "https://github.com/tryexceptpass/korv"}, "release_url": "https://pypi.org/project/korv/0.2.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "SSH API Framework", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Korv is an API framework that uses TCP sockets over SSH to exchange JSON data with a REST-like protocol. It's built on top of the <code>asyncssh</code> module, so it uses <code>asyncio</code> to manage the sockets and its callbacks. This allows you to build rich APIs with the session security of SSH and without the TCP overhead of HTTP.</p>\n<p>Communications over this framework requires SSH keys like logging into a normal SSH server:</p>\n<ul>\n<li>The server itself has a private key and a set of public keys for the authorized clients.</li>\n<li>The client has a private key and a set of public keys for the servers it can connect to.</li>\n</ul>\n<h2>Verbs</h2>\n<p>There are 4 main verbs that indicate the intent of your request:</p>\n<ul>\n<li><code>GET</code> for retrieving information.</li>\n<li><code>STORE</code> for creating new objects.</li>\n<li><code>UPDATE</code> for changing existing objects.</li>\n<li><code>DELETE</code> for removing objects.</li>\n</ul>\n<h2>Keys</h2>\n<p>As discussed previously, you establish an SSH session with the server, so it's possible to reuse existing keys or generate them through any standard mechanism like the one below:</p>\n<pre>ssh-keygen -t rsa -b <span class=\"m\">4096</span> -C <span class=\"s2\">\"your_email@example.com\"</span>\n</pre>\n<h2>Server</h2>\n<p>Getting a server up and running is very simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">korv</span> <span class=\"kn\">import</span> <span class=\"n\">KorvServer</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Callback for the /hello endpoint\"\"\"</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'msg'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello World!'</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Callback for the /echo endpoint\"\"\"</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'msg'</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">}</span>\n\n\n<span class=\"c1\"># Create a server</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">KorvServer</span><span class=\"p\">(</span><span class=\"n\">host_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'PATH_TO_YOUR_SERVER_PRIVATE_KEY'</span><span class=\"p\">],</span> <span class=\"n\">authorized_client_keys</span><span class=\"o\">=</span><span class=\"s1\">'PATH_TO_YOUR_AUTHORIZED_PUBLIC_KEYS'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register the callbacks</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'/hello'</span><span class=\"p\">,</span> <span class=\"n\">hello</span><span class=\"p\">)</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'/echo'</span><span class=\"p\">,</span> <span class=\"n\">echo</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Start listening for requests</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>This will start a new SSH server with the specified private key that listens on port <code>8022</code> by default and will accept the clients listed in the authorized keys.</p>\n<h2>Client</h2>\n<p>Following is an example on how to communicate with this server.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">korv</span> <span class=\"kn\">import</span> <span class=\"n\">KorvClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Create the client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">KorvClient</span><span class=\"p\">(</span><span class=\"n\">client_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'PATH_TO_YOUR_CLIENTS_PRIVATE_KEY'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Issue a GET request and print the output</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/hello'</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">]))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">'msg'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello World!'</span><span class=\"p\">}</span>\n</pre>\n<h2>Return Codes</h2>\n<p>We're using standard HTTP response codes:</p>\n<ul>\n<li><code>200</code> = Success.</li>\n<li><code>400</code> = Malformed request or missing parameters.</li>\n<li><code>404</code> = NotFound</li>\n<li><code>500</code> = Internal error.</li>\n</ul>\n<p>Server exceptions map to a <code>500</code> return code ans will include a traceback in the response.</p>\n\n          </div>"}, "last_serial": 4706415, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "18e812f2ff2b162abd476917d4743abb", "sha256": "aadad2a8e09db1b41904bdb831c1898322fe9d39e6cda192aff73fbb52087925"}, "downloads": -1, "filename": "korv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18e812f2ff2b162abd476917d4743abb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3683, "upload_time": "2018-04-30T22:11:48", "upload_time_iso_8601": "2018-04-30T22:11:48.205257Z", "url": "https://files.pythonhosted.org/packages/66/ed/1fc96314a3fed6c9490ff11c3befc72a28fa74479e3120591d7b34932eea/korv-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "58aa62c60307ec04c946a93028481e97", "sha256": "a8ba835b924147c4ed180d89bc960b058cab19d5ceafe8c927cafae9e8ae909c"}, "downloads": -1, "filename": "korv-0.1.1.tar.gz", "has_sig": false, "md5_digest": "58aa62c60307ec04c946a93028481e97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4982, "upload_time": "2018-04-30T22:44:44", "upload_time_iso_8601": "2018-04-30T22:44:44.129381Z", "url": "https://files.pythonhosted.org/packages/3c/e9/ba3e5a473fd0c06db955397ad961d28339bd1e39b9e6a00b443473d7cc0b/korv-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a8921595f66aa15672f4dea84c9697ed", "sha256": "b00b09c5ce0e4f1766f217add99bdf1ab4c7dddbad123dadb8c7297db20ba2c9"}, "downloads": -1, "filename": "korv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a8921595f66aa15672f4dea84c9697ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5084, "upload_time": "2018-06-13T00:47:01", "upload_time_iso_8601": "2018-06-13T00:47:01.014888Z", "url": "https://files.pythonhosted.org/packages/1a/5e/5e104655343261812e8e1c390c2fc1cdfd1c7b53775e38fc23f61cef24f6/korv-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "36055c1a0d0d4c69f988119f55e5d8c1", "sha256": "fcc469ef65582f913ebfc81b63b69c021f1ee882b2170e75cf293cdd86ae65df"}, "downloads": -1, "filename": "korv-0.1.3.tar.gz", "has_sig": false, "md5_digest": "36055c1a0d0d4c69f988119f55e5d8c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5169, "upload_time": "2019-01-08T03:54:08", "upload_time_iso_8601": "2019-01-08T03:54:08.092922Z", "url": "https://files.pythonhosted.org/packages/01/eb/99cdb4ad49270e33a76468cd1105ab3cdfbaf50bc791ea4908033bf3ce77/korv-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d758f6918d9774185c210b1314ddd6e9", "sha256": "454b6b29f3a8284c35376c47872f5f2ee39b2f6453ca38dbe63953ed067cdac8"}, "downloads": -1, "filename": "korv-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d758f6918d9774185c210b1314ddd6e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5207, "upload_time": "2019-01-17T05:20:38", "upload_time_iso_8601": "2019-01-17T05:20:38.742411Z", "url": "https://files.pythonhosted.org/packages/52/b6/08c53c3b5eff68c6562d04312f6039b0d235dd5692a2c883d111be5da811/korv-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4cc83656ced6ac35ce5d6206977f628e", "sha256": "9f174e27a0eb032d661aea86f76ff1a49434e57969cc3eb9a0fad5c88cf52ae7"}, "downloads": -1, "filename": "korv-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4cc83656ced6ac35ce5d6206977f628e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5200, "upload_time": "2019-01-17T05:32:22", "upload_time_iso_8601": "2019-01-17T05:32:22.710567Z", "url": "https://files.pythonhosted.org/packages/35/cc/329346d1c336696d5e8d8195b01d2cb9d785106ebda5b2d9283c762be9d6/korv-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4cc83656ced6ac35ce5d6206977f628e", "sha256": "9f174e27a0eb032d661aea86f76ff1a49434e57969cc3eb9a0fad5c88cf52ae7"}, "downloads": -1, "filename": "korv-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4cc83656ced6ac35ce5d6206977f628e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5200, "upload_time": "2019-01-17T05:32:22", "upload_time_iso_8601": "2019-01-17T05:32:22.710567Z", "url": "https://files.pythonhosted.org/packages/35/cc/329346d1c336696d5e8d8195b01d2cb9d785106ebda5b2d9283c762be9d6/korv-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:56 2020"}