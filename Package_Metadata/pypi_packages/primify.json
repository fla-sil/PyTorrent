{"info": {"author": "Levi Borodenko", "author_email": "Levi.borodenko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "# Primify\n_Transform any image into a prime number that looks like the image if glanced upon from far away._\n\n![result](https://i.imgur.com/UoMYkVS.png)\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)\n\n## How does it work\n\nWe proceed in 5 steps:\n\n1. We resize the image to contain at most a `--max_digits` amount of pixels.\n\n2. Run various image processing steps like edge enhancement and smoothing before converting the image into grey-scale.\n\n3. We then quantise the image into just having 5 to 10 greyness levels.\n\n_Note: There are multiple different methods for quantising the color levels and some methods will produces better results for some images. Make sure to play around with the `--method` parameter to get the best result._\n\n4. Now we map each greyness level to a digit, et voila, we have embedded the picture into a number.\n\n5. It now remains to tweak some of the digits until we find a prime number that still looks like the image.\n\n_Note: According to the prime number theorem, the density of prime numbers is  asymptotically of order 1/log(n). Hence, if we have some number n with m digits, the number of primality tests that we expect to do until we hit a prime number is roughly proportional to m. Since we use the Baillie\u2013PSW primality test, the overall expected computational complexity of our prime searching procedure is O(n*log(n)\u00b3)._\n\n## How to use\n\nSimply get the `primify` command line tool via `pip install primify`.\nYou can also import the `PrimeImage` class from `primify.primify_base` or use `cli.py` as a command-line script.\n\n### Requirements\nMake sure you meet all the dependencies inside the `requirements.txt`. I would recommend to use pypy, as it seems to decrease compiling time by about 20%.\n\n### Command-line tool\n```\nusage: primify [-h] [--image IMAGE_PATH] [--max_digits MAX_DIGITS]\n                  [--method {0,1,2}] [--output_dir OUTPUT_DIR]\n                  [--output_file OUTPUT_FILE] [-v]\n\nCommand-line tool for converting images to primes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --image IMAGE_PATH    Source image to be converted.\n  --max_digits MAX_DIGITS\n                        Maximal number of digits the prime can have.\n  --method {0,1,2}      Method for converting image. Tweak 'till happy\n  --output_dir OUTPUT_DIR\n                        Directory of the output text file\n  --output_file OUTPUT_FILE\n                        File name of the text file containing the prime.\n  -v                    Verbose output (Recommended!)\n```\nThus, if you have the source image at `./source.png` and you want to convert it into a prime contained in `./prime/prime.txt` which has at most 5000 digits and using conversion method 0 (other options are 1 or 2). Then you should run:\n\n`primify -v --image ./source.png --max_digits 5000 --method 0 --output_dir ./prime/ --output_file prime.txt`\n\n### Importing the PrimeImage class\n\nyou can also simply import the `PrimeImage` class from `primify.primify_base` and use that class in your own code. Take a look at the source code to see what methods and attributes there are.", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LeviBorodenko/primify", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "primify", "package_url": "https://pypi.org/project/primify/", "platform": "any", "project_url": "https://pypi.org/project/primify/", "project_urls": {"Documentation": "https://github.com/LeviBorodenko/primify", "Homepage": "https://github.com/LeviBorodenko/primify"}, "release_url": "https://pypi.org/project/primify/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Embed any image into a prime number.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Primify</h1>\n<p><em>Transform any image into a prime number that looks like the image if glanced upon from far away.</em></p>\n<p><img alt=\"result\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19922e1fd4968ce5a7930815ac672cb42525eea4/68747470733a2f2f692e696d6775722e636f6d2f556f4d596b56532e706e67\">\n<a href=\"https://travis-ci.org/joemccann/dillinger\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46a86bdaceb13474da2f9cbfdb20be1bb45f5a01/68747470733a2f2f7472617669732d63692e6f72672f6a6f656d6363616e6e2f64696c6c696e6765722e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>How does it work</h2>\n<p>We proceed in 5 steps:</p>\n<ol>\n<li>\n<p>We resize the image to contain at most a <code>--max_digits</code> amount of pixels.</p>\n</li>\n<li>\n<p>Run various image processing steps like edge enhancement and smoothing before converting the image into grey-scale.</p>\n</li>\n<li>\n<p>We then quantise the image into just having 5 to 10 greyness levels.</p>\n</li>\n</ol>\n<p><em>Note: There are multiple different methods for quantising the color levels and some methods will produces better results for some images. Make sure to play around with the <code>--method</code> parameter to get the best result.</em></p>\n<ol>\n<li>\n<p>Now we map each greyness level to a digit, et voila, we have embedded the picture into a number.</p>\n</li>\n<li>\n<p>It now remains to tweak some of the digits until we find a prime number that still looks like the image.</p>\n</li>\n</ol>\n<p><em>Note: According to the prime number theorem, the density of prime numbers is  asymptotically of order 1/log(n). Hence, if we have some number n with m digits, the number of primality tests that we expect to do until we hit a prime number is roughly proportional to m. Since we use the Baillie\u2013PSW primality test, the overall expected computational complexity of our prime searching procedure is O(n*log(n)\u00b3).</em></p>\n<h2>How to use</h2>\n<p>Simply get the <code>primify</code> command line tool via <code>pip install primify</code>.\nYou can also import the <code>PrimeImage</code> class from <code>primify.primify_base</code> or use <code>cli.py</code> as a command-line script.</p>\n<h3>Requirements</h3>\n<p>Make sure you meet all the dependencies inside the <code>requirements.txt</code>. I would recommend to use pypy, as it seems to decrease compiling time by about 20%.</p>\n<h3>Command-line tool</h3>\n<pre><code>usage: primify [-h] [--image IMAGE_PATH] [--max_digits MAX_DIGITS]\n                  [--method {0,1,2}] [--output_dir OUTPUT_DIR]\n                  [--output_file OUTPUT_FILE] [-v]\n\nCommand-line tool for converting images to primes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --image IMAGE_PATH    Source image to be converted.\n  --max_digits MAX_DIGITS\n                        Maximal number of digits the prime can have.\n  --method {0,1,2}      Method for converting image. Tweak 'till happy\n  --output_dir OUTPUT_DIR\n                        Directory of the output text file\n  --output_file OUTPUT_FILE\n                        File name of the text file containing the prime.\n  -v                    Verbose output (Recommended!)\n</code></pre>\n<p>Thus, if you have the source image at <code>./source.png</code> and you want to convert it into a prime contained in <code>./prime/prime.txt</code> which has at most 5000 digits and using conversion method 0 (other options are 1 or 2). Then you should run:</p>\n<p><code>primify -v --image ./source.png --max_digits 5000 --method 0 --output_dir ./prime/ --output_file prime.txt</code></p>\n<h3>Importing the PrimeImage class</h3>\n<p>you can also simply import the <code>PrimeImage</code> class from <code>primify.primify_base</code> and use that class in your own code. Take a look at the source code to see what methods and attributes there are.</p>\n\n          </div>"}, "last_serial": 6405723, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "69e5b420d67efedf22754c08ca56966c", "sha256": "3b4336c43d3a37d7fae819526e53131f9fb6684433fb3368b567d6b9256d59d3"}, "downloads": -1, "filename": "primify-1.0.1.tar.gz", "has_sig": false, "md5_digest": "69e5b420d67efedf22754c08ca56966c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1403095, "upload_time": "2020-01-05T20:00:38", "upload_time_iso_8601": "2020-01-05T20:00:38.078173Z", "url": "https://files.pythonhosted.org/packages/25/61/b9090942832ce1ecd2feb6aeb9dd65ee2ae9d3394ef5c6d53c1c7f220e15/primify-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e7ddc1e1b4fee2d1a61e1256894d9fc6", "sha256": "d73fb24f1a14ec8ffcf2c777b6640069dc5f65995075bb2502911b74cc563520"}, "downloads": -1, "filename": "primify-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e7ddc1e1b4fee2d1a61e1256894d9fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1403324, "upload_time": "2020-01-07T00:06:30", "upload_time_iso_8601": "2020-01-07T00:06:30.181746Z", "url": "https://files.pythonhosted.org/packages/39/09/32382d249e81e5db0611704b83403a85643ea20a13c2a84095a99eb73466/primify-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7ddc1e1b4fee2d1a61e1256894d9fc6", "sha256": "d73fb24f1a14ec8ffcf2c777b6640069dc5f65995075bb2502911b74cc563520"}, "downloads": -1, "filename": "primify-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e7ddc1e1b4fee2d1a61e1256894d9fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1403324, "upload_time": "2020-01-07T00:06:30", "upload_time_iso_8601": "2020-01-07T00:06:30.181746Z", "url": "https://files.pythonhosted.org/packages/39/09/32382d249e81e5db0611704b83403a85643ea20a13c2a84095a99eb73466/primify-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:24 2020"}