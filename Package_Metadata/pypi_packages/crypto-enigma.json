{"info": {"author": "Roy Levien", "author_email": "royl@aldaron.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "crypto-enigma\r\n-------------\r\n\r\n|Python Programming Language| |PyPi| |Development Status| |BSD3 License| |PyPi Build Status|\r\n\r\nAn Enigma machine simulator with state and encoding display for Python 2.7.\r\n\r\nCurrently support is only provided for those `machine models`_ in most\r\nwidespread general use during the war years: the `I`_, `M3`_, and `M4`_.\r\n\r\n.. _functionality_api:\r\n\r\nFunctionality: package API\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe package provides functionality for generating a machine configuration\r\nfrom a conventional specification, examining the state of a configuration, simulating\r\nthe operation of a machine by stepping between states, and\r\nencoding messages:\r\n\r\nCreate a machine configuration (see the `documentation <http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.config_enigma_from_string>`__ for :code:`config_enigma_from_string`):\r\n\r\n.. parsed-literal::\r\n\r\n    >>> from crypto_enigma import *\r\n    >>> cfg = EnigmaConfig.config_enigma_from_string(u'B-I-III-I EMO UX.MO.AY 13.04.11')\r\n\r\nEncode messages (see the `documentation <http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.enigma_encoding>`__ for :code:`enigma_encoding`):\r\n\r\n\r\n.. parsed-literal::\r\n\r\n    >>> cfg.enigma_encoding(u'TESTINGXTESTINGUD')\r\n    u'OZQKPFLPYZRPYTFVU'\r\n\r\n    >>> cfg.enigma_encoding(u'OZQKPFLPYZRPYTFVU')\r\n    u'TESTINGXTESTINGUD'\r\n\r\nShow configuration details (see the `documentation <http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.config_string>`__ for :code:`config_string`):\r\n\r\n.. parsed-literal::\r\n\r\n    >>> print(cfg.config_string(letter=u'X', format='internal', mark_func=lambda c: '(' + c + ')'))\r\n    X > ABCDEFGHIJKLMNOPQRSTUVW(X)YZ\r\n      P YBCDEFGHIJKLONMPQRSTXVW(U)AZ         UX.MO.AY\r\n      1 HCZMRVJPKSUDTQOLWEXN(Y)FAGIB  O  05  I\r\n      2 KOMQEPVZNXRBDLJHFSUWYACT(G)I  M  10  III\r\n      3 AXIQJZ(K)RMSUNTOLYDHVBWEGPFC  E  19  I\r\n      R YRUHQSLDPX(N)GOKMIEBFZCWVJAT         B\r\n      3 ATZQVYWRCEGOI(L)NXDHJMKSUBPF         I\r\n      2 VLWMEQYPZOA(N)CIBFDKRXSGTJUH         III\r\n      1 WZBLRVXAYGIPD(T)OHNEJMKFQSUC         I\r\n      P YBCDEFGHIJKLONMPQRS(T)XVWUAZ         UX.MO.AY\r\n    T < CNAUJVQSLEMIKBZRGPHXDFY(T)WO\r\n\r\nSimulate machine operation (see the `documentation <http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.print_operation>`__ for :code:`print_operation`):\r\n\r\n.. parsed-literal::\r\n\r\n    >>> cfg.print_operation(message=u'TESTING', show_step=True, mark_func=lambda c: '(' + c + ')')\r\n    0000       CNAUJVQSLEMIKBZRGPHXDFYTWO   EMO  19 10 05\r\n    0001  T > UNXKGVERLYDIQBTWMHZ(O)AFPCJS  EMP  19 10 06\r\n    0002  E > QTYJ(Z)XUPKDIMLSWHAVNBGROFCE  EMQ  19 10 07\r\n    0003  S > DMXAPTRWKYINBLUESG(Q)FOZHCJV  ENR  19 11 08\r\n    0004  T > IUSMHRPEAQTVDYWGJFC(K)BLOZNX  ENS  19 11 09\r\n    0005  I > WMVXQRLS(P)YOGBTKIEFHNZCADJU  ENT  19 11 10\r\n    0006  N > WKIQXNRSCVBOY(F)LUDGHZPJAEMT  ENU  19 11 11\r\n    0007  G > RVPTWS(L)KYXHGNMQCOAFDZBEJIU  ENV  19 11 12\r\n\r\nWatch the machine as it runs for 500 steps:\r\n\r\n.. parsed-literal::\r\n\r\n    >>> cfg.print_operation(steps=500, show_step=True, format='internal', overwrite=True)\r\n\r\n.. _functionality_commandline:\r\n\r\nFunctionality: command line\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA command line script, |script_code|, provides almost all the functionality of the API.\r\n\r\nEncode messages:\r\n\r\n.. parsed-literal::\r\n\r\n    $ |script| encode \"B-I-III-I EMO UX.MO.AY 13.04.11\" \"TESTINGXTESTINGUD\"\r\n    OZQKPFLPYZRPYTFVU\r\n\r\n    $ |script| encode \"B-I-III-I EMO UX.MO.AY 13.04.11\" \"OZQKPFLPYZRPYTFVU\"\r\n    TESTINGXTESTINGUD\r\n\r\nShow configuration details (explained in more detail in the command line help):\r\n\r\n.. parsed-literal::\r\n\r\n    $ |script| show \"B-I-III-I EMO UX.MO.AY 13.04.11\" -l 'X' -H'()' -f internal\r\n    X > ABCDEFGHIJKLMNOPQRSTUVW(X)YZ\r\n      P YBCDEFGHIJKLONMPQRSTXVW(U)AZ         UX.MO.AY\r\n      1 HCZMRVJPKSUDTQOLWEXN(Y)FAGIB  O  05  I\r\n      2 KOMQEPVZNXRBDLJHFSUWYACT(G)I  M  10  III\r\n      3 AXIQJZ(K)RMSUNTOLYDHVBWEGPFC  E  19  I\r\n      R YRUHQSLDPX(N)GOKMIEBFZCWVJAT         B\r\n      3 ATZQVYWRCEGOI(L)NXDHJMKSUBPF         I\r\n      2 VLWMEQYPZOA(N)CIBFDKRXSGTJUH         III\r\n      1 WZBLRVXAYGIPD(T)OHNEJMKFQSUC         I\r\n      P YBCDEFGHIJKLONMPQRS(T)XVWUAZ         UX.MO.AY\r\n    T < CNAUJVQSLEMIKBZRGPHXDFY(T)WO\r\n\r\nSimulate machine operation (explained in more detail command line help):\r\n\r\n.. parsed-literal::\r\n\r\n    $ |script| run \"B-I-III-I EMO UX.MO.AY 13.04.11\" -m \"TESTING\" -t -H'()'\r\n    0000       CNAUJVQSLEMIKBZRGPHXDFYTWO   EMO  19 10 05\r\n    0001  T > UNXKGVERLYDIQBTWMHZ(O)AFPCJS  EMP  19 10 06\r\n    0002  E > QTYJ(Z)XUPKDIMLSWHAVNBGROFCE  EMQ  19 10 07\r\n    0003  S > DMXAPTRWKYINBLUESG(Q)FOZHCJV  ENR  19 11 08\r\n    0004  T > IUSMHRPEAQTVDYWGJFC(K)BLOZNX  ENS  19 11 09\r\n    0005  I > WMVXQRLS(P)YOGBTKIEFHNZCADJU  ENT  19 11 10\r\n    0006  N > WKIQXNRSCVBOY(F)LUDGHZPJAEMT  ENU  19 11 11\r\n    0007  G > RVPTWS(L)KYXHGNMQCOAFDZBEJIU  ENV  19 11 12\r\n\r\nWatch the machine as it runs for 500 steps:\r\n\r\n.. parsed-literal::\r\n\r\n    $ |script| run  \"c-\u03b2-VIII-VII-VI QMLI 'UX.MO.AY 01.13.04.11\" -s 500 -t -f internal -o\r\n\r\n.. _documentation:\r\n\r\nDocumentation\r\n~~~~~~~~~~~~~\r\n\r\n|Stable Docs|\r\n\r\nFull documentation is available at `Read the Docs`_.\r\n\r\nCommand line documentation is available as help from the command line script:\r\n\r\n.. parsed-literal::\r\n\r\n   $ |script| --help\r\n\r\nLimitations\r\n~~~~~~~~~~~\r\n\r\nNote that the correct display of some characters used to represent\r\ncomponents (thin Naval rotors) assumes support for Unicode, while some\r\naspects of the display of machine state depend on support for combining\r\nUnicode. This is a `known\r\nlimitation <https://github.com/orome/crypto-enigma-py/issues/1>`__ that\r\nwill be addressed in a future release.\r\n\r\nNote also that at the start of any scripts that use this package, you should\r\n\r\n.. parsed-literal::\r\n\r\n   from __future__ import unicode_literals\r\n\r\nbefore any code that uses the API, or confiure IPython (in :code:`ipython_config.py`) with\r\n\r\n.. parsed-literal::\r\n\r\n   c.InteractiveShellApp.exec_lines += [\"from __future__ import unicode_literals\"]\r\n\r\nor explicitly suppply Unicode strings (e.g., as in the examples above with :code:`u'TESTING'`).\r\n\r\nAlternatives\r\n~~~~~~~~~~~~\r\n\r\nFor other Python Enigma machines see:\r\n\r\n-  `py-enigma <https://pypi.python.org/pypi/py-enigma/>`__ (Python 3)\r\n\r\nThis package is based on a `Haskell version`_, with essentially the same API.\r\n\r\nDevelopment status\r\n~~~~~~~~~~~~~~~~~~\r\n\r\n|Development Build Status| |Development Docs|\r\n\r\nThis package is in the early stages of development, and I and can't promise the current\r\n`development version`_ will work. More detail about planned releases and activities\r\ncan be found the list of scheduled `milestones`_ and in the list of `open issues`_.\r\nVarious `test versions`_ may be available for installation or issues review, but these also\r\nmay not work as expected.\r\n\r\n\r\n\r\n.. |script| replace:: enigma.py\r\n.. |script_code| replace:: :code:`enigma.py`\r\n\r\n.. _machine models: http://www.cryptomuseum.com/crypto/enigma/tree.htm\r\n.. _I: http://www.cryptomuseum.com/crypto/enigma/i/index.htm\r\n.. _M3: http://www.cryptomuseum.com/crypto/enigma/m3/index.htm\r\n.. _M4: http://www.cryptomuseum.com/crypto/enigma/m4/index.htm\r\n\r\n.. _development version: https://github.com/orome/crypto-enigma-py/tree/develop\r\n.. _test versions: https://testpypi.python.org/pypi/crypto-enigma\r\n.. _milestones: https://github.com/orome/crypto-enigma-py/milestones\r\n.. _open issues: https://github.com/orome/crypto-enigma-py/issues\r\n.. _Read the Docs: http://crypto-enigma.readthedocs.org/en/pypi/\r\n\r\n.. _Enigma machines: http://en.wikipedia.org/wiki/Enigma_machine\r\n.. _Haskell version: https://hackage.haskell.org/package/crypto-enigma\r\n.. _Hackage documentation: https://hackage.haskell.org/package/crypto-enigma/docs/Crypto-Enigma.html\r\n\r\n.. |Python Programming Language| image:: https://img.shields.io/badge/language-Python-blue.svg\r\n   :target: https://www.python.org\r\n.. |PyPi| image:: https://img.shields.io/pypi/v/crypto-enigma.svg\r\n   :target: https://pypi.python.org/pypi/crypto-enigma\r\n.. |Development Docs| image:: https://readthedocs.org/projects/crypto-enigma/badge/?version=latest\r\n   :target: http://crypto-enigma.readthedocs.org/en/latest/?badge=latest\r\n   :alt: Documentation Status\r\n.. |Stable Docs| image:: https://readthedocs.org/projects/crypto-enigma/badge/?version=pypi\r\n   :target: http://crypto-enigma.readthedocs.org/en/pypi/?badge=pypi\r\n   :alt: Documentation Status\r\n.. |Supported Python versions| image:: https://img.shields.io/pypi/pyversions/crypto-enigma.svg\r\n   :target: https://pypi.python.org/pypi/crypto-enigma/\r\n.. |Development Status| image:: https://img.shields.io/pypi/status/crypto-enigma.svg\r\n   :target: https://pypi.python.org/pypi/crypto-enigma/\r\n.. |BSD3 License| image:: http://img.shields.io/badge/license-BSD3-brightgreen.svg\r\n   :target: https://github.com/orome/crypto-enigma-py/blob/pypi/LICENSE.txt\r\n.. |PyPi Build Status| image:: https://travis-ci.org/orome/crypto-enigma-py.svg?branch=pypi\r\n   :target: https://travis-ci.org/orome/crypto-enigma-py/branches\r\n.. |Development Build Status| image:: https://travis-ci.org/orome/crypto-enigma-py.svg?branch=develop\r\n   :target: https://travis-ci.org/orome/crypto-enigma-py/branches", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orome/crypto-enigma-py", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "crypto-enigma", "package_url": "https://pypi.org/project/crypto-enigma/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/crypto-enigma/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/orome/crypto-enigma-py"}, "release_url": "https://pypi.org/project/crypto-enigma/0.2.1b2/", "requires_dist": null, "requires_python": null, "summary": "An Enigma machine simulation package.", "version": "0.2.1b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"Python Programming Language\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d4afb321f8485d48bf3424388264f007e10cc9c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c616e67756167652d507974686f6e2d626c75652e737667\"></a> <a href=\"https://pypi.python.org/pypi/crypto-enigma\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92fec858ab9a22e409fb68badf45e0d99b6e8dce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63727970746f2d656e69676d612e737667\"></a> <a href=\"https://pypi.python.org/pypi/crypto-enigma/\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b98e68267843a750c1e890f7ed19713b52f17df/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f63727970746f2d656e69676d612e737667\"></a> <a href=\"https://github.com/orome/crypto-enigma-py/blob/pypi/LICENSE.txt\" rel=\"nofollow\"><img alt=\"BSD3 License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0478aaec0b6da4dbb2b814a267721483b9a95953/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d425344332d627269676874677265656e2e737667\"></a> <a href=\"https://travis-ci.org/orome/crypto-enigma-py/branches\" rel=\"nofollow\"><img alt=\"PyPi Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cddc05fc1200c06df93d60da995d3367479c978e/68747470733a2f2f7472617669732d63692e6f72672f6f726f6d652f63727970746f2d656e69676d612d70792e7376673f6272616e63683d70797069\"></a></p>\n<p>An Enigma machine simulator with state and encoding display for Python 2.7.</p>\n<p>Currently support is only provided for those <a href=\"http://www.cryptomuseum.com/crypto/enigma/tree.htm\" rel=\"nofollow\">machine models</a> in most\nwidespread general use during the war years: the <a href=\"http://www.cryptomuseum.com/crypto/enigma/i/index.htm\" rel=\"nofollow\">I</a>, <a href=\"http://www.cryptomuseum.com/crypto/enigma/m3/index.htm\" rel=\"nofollow\">M3</a>, and <a href=\"http://www.cryptomuseum.com/crypto/enigma/m4/index.htm\" rel=\"nofollow\">M4</a>.</p>\n<div id=\"functionality-package-api\">\n<span id=\"functionality-api\"></span><h2>Functionality: package API</h2>\n<p>The package provides functionality for generating a machine configuration\nfrom a conventional specification, examining the state of a configuration, simulating\nthe operation of a machine by stepping between states, and\nencoding messages:</p>\n<p>Create a machine configuration (see the <a href=\"http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.config_enigma_from_string\" rel=\"nofollow\">documentation</a> for <code>config_enigma_from_string</code>):</p>\n<pre>&gt;&gt;&gt; from crypto_enigma import *\n&gt;&gt;&gt; cfg = EnigmaConfig.config_enigma_from_string(u'B-I-III-I EMO UX.MO.AY 13.04.11')\n</pre>\n<p>Encode messages (see the <a href=\"http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.enigma_encoding\" rel=\"nofollow\">documentation</a> for <code>enigma_encoding</code>):</p>\n<pre>&gt;&gt;&gt; cfg.enigma_encoding(u'TESTINGXTESTINGUD')\nu'OZQKPFLPYZRPYTFVU'\n\n&gt;&gt;&gt; cfg.enigma_encoding(u'OZQKPFLPYZRPYTFVU')\nu'TESTINGXTESTINGUD'\n</pre>\n<p>Show configuration details (see the <a href=\"http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.config_string\" rel=\"nofollow\">documentation</a> for <code>config_string</code>):</p>\n<pre>&gt;&gt;&gt; print(cfg.config_string(letter=u'X', format='internal', mark_func=lambda c: '(' + c + ')'))\nX &gt; ABCDEFGHIJKLMNOPQRSTUVW(X)YZ\n  P YBCDEFGHIJKLONMPQRSTXVW(U)AZ         UX.MO.AY\n  1 HCZMRVJPKSUDTQOLWEXN(Y)FAGIB  O  05  I\n  2 KOMQEPVZNXRBDLJHFSUWYACT(G)I  M  10  III\n  3 AXIQJZ(K)RMSUNTOLYDHVBWEGPFC  E  19  I\n  R YRUHQSLDPX(N)GOKMIEBFZCWVJAT         B\n  3 ATZQVYWRCEGOI(L)NXDHJMKSUBPF         I\n  2 VLWMEQYPZOA(N)CIBFDKRXSGTJUH         III\n  1 WZBLRVXAYGIPD(T)OHNEJMKFQSUC         I\n  P YBCDEFGHIJKLONMPQRS(T)XVWUAZ         UX.MO.AY\nT &lt; CNAUJVQSLEMIKBZRGPHXDFY(T)WO\n</pre>\n<p>Simulate machine operation (see the <a href=\"http://crypto-enigma.readthedocs.org/en/pypi/machine.html#crypto_enigma.machine.EnigmaConfig.print_operation\" rel=\"nofollow\">documentation</a> for <code>print_operation</code>):</p>\n<pre>&gt;&gt;&gt; cfg.print_operation(message=u'TESTING', show_step=True, mark_func=lambda c: '(' + c + ')')\n0000       CNAUJVQSLEMIKBZRGPHXDFYTWO   EMO  19 10 05\n0001  T &gt; UNXKGVERLYDIQBTWMHZ(O)AFPCJS  EMP  19 10 06\n0002  E &gt; QTYJ(Z)XUPKDIMLSWHAVNBGROFCE  EMQ  19 10 07\n0003  S &gt; DMXAPTRWKYINBLUESG(Q)FOZHCJV  ENR  19 11 08\n0004  T &gt; IUSMHRPEAQTVDYWGJFC(K)BLOZNX  ENS  19 11 09\n0005  I &gt; WMVXQRLS(P)YOGBTKIEFHNZCADJU  ENT  19 11 10\n0006  N &gt; WKIQXNRSCVBOY(F)LUDGHZPJAEMT  ENU  19 11 11\n0007  G &gt; RVPTWS(L)KYXHGNMQCOAFDZBEJIU  ENV  19 11 12\n</pre>\n<p>Watch the machine as it runs for 500 steps:</p>\n<pre>&gt;&gt;&gt; cfg.print_operation(steps=500, show_step=True, format='internal', overwrite=True)\n</pre>\n</div>\n<div id=\"functionality-command-line\">\n<span id=\"functionality-commandline\"></span><h2>Functionality: command line</h2>\n<p>A command line script, <code>enigma.py</code>, provides almost all the functionality of the API.</p>\n<p>Encode messages:</p>\n<pre>$ enigma.py encode \"B-I-III-I EMO UX.MO.AY 13.04.11\" \"TESTINGXTESTINGUD\"\nOZQKPFLPYZRPYTFVU\n\n$ enigma.py encode \"B-I-III-I EMO UX.MO.AY 13.04.11\" \"OZQKPFLPYZRPYTFVU\"\nTESTINGXTESTINGUD\n</pre>\n<p>Show configuration details (explained in more detail in the command line help):</p>\n<pre>$ enigma.py show \"B-I-III-I EMO UX.MO.AY 13.04.11\" -l 'X' -H'()' -f internal\nX &gt; ABCDEFGHIJKLMNOPQRSTUVW(X)YZ\n  P YBCDEFGHIJKLONMPQRSTXVW(U)AZ         UX.MO.AY\n  1 HCZMRVJPKSUDTQOLWEXN(Y)FAGIB  O  05  I\n  2 KOMQEPVZNXRBDLJHFSUWYACT(G)I  M  10  III\n  3 AXIQJZ(K)RMSUNTOLYDHVBWEGPFC  E  19  I\n  R YRUHQSLDPX(N)GOKMIEBFZCWVJAT         B\n  3 ATZQVYWRCEGOI(L)NXDHJMKSUBPF         I\n  2 VLWMEQYPZOA(N)CIBFDKRXSGTJUH         III\n  1 WZBLRVXAYGIPD(T)OHNEJMKFQSUC         I\n  P YBCDEFGHIJKLONMPQRS(T)XVWUAZ         UX.MO.AY\nT &lt; CNAUJVQSLEMIKBZRGPHXDFY(T)WO\n</pre>\n<p>Simulate machine operation (explained in more detail command line help):</p>\n<pre>$ enigma.py run \"B-I-III-I EMO UX.MO.AY 13.04.11\" -m \"TESTING\" -t -H'()'\n0000       CNAUJVQSLEMIKBZRGPHXDFYTWO   EMO  19 10 05\n0001  T &gt; UNXKGVERLYDIQBTWMHZ(O)AFPCJS  EMP  19 10 06\n0002  E &gt; QTYJ(Z)XUPKDIMLSWHAVNBGROFCE  EMQ  19 10 07\n0003  S &gt; DMXAPTRWKYINBLUESG(Q)FOZHCJV  ENR  19 11 08\n0004  T &gt; IUSMHRPEAQTVDYWGJFC(K)BLOZNX  ENS  19 11 09\n0005  I &gt; WMVXQRLS(P)YOGBTKIEFHNZCADJU  ENT  19 11 10\n0006  N &gt; WKIQXNRSCVBOY(F)LUDGHZPJAEMT  ENU  19 11 11\n0007  G &gt; RVPTWS(L)KYXHGNMQCOAFDZBEJIU  ENV  19 11 12\n</pre>\n<p>Watch the machine as it runs for 500 steps:</p>\n<pre>$ enigma.py run  \"c-\u03b2-VIII-VII-VI QMLI 'UX.MO.AY 01.13.04.11\" -s 500 -t -f internal -o\n</pre>\n</div>\n<div id=\"id1\">\n<span id=\"documentation\"></span><h2>Documentation</h2>\n<p><a href=\"http://crypto-enigma.readthedocs.org/en/pypi/?badge=pypi\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b80ae3b122d15129d6fb165895248a9b7bcd597/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f63727970746f2d656e69676d612f62616467652f3f76657273696f6e3d70797069\"></a></p>\n<p>Full documentation is available at <a href=\"http://crypto-enigma.readthedocs.org/en/pypi/\" rel=\"nofollow\">Read the Docs</a>.</p>\n<p>Command line documentation is available as help from the command line script:</p>\n<pre>$ enigma.py --help\n</pre>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<p>Note that the correct display of some characters used to represent\ncomponents (thin Naval rotors) assumes support for Unicode, while some\naspects of the display of machine state depend on support for combining\nUnicode. This is a <a href=\"https://github.com/orome/crypto-enigma-py/issues/1\" rel=\"nofollow\">known\nlimitation</a> that\nwill be addressed in a future release.</p>\n<p>Note also that at the start of any scripts that use this package, you should</p>\n<pre>from __future__ import unicode_literals\n</pre>\n<p>before any code that uses the API, or confiure IPython (in <code>ipython_config.py</code>) with</p>\n<pre>c.InteractiveShellApp.exec_lines += [\"from __future__ import unicode_literals\"]\n</pre>\n<p>or explicitly suppply Unicode strings (e.g., as in the examples above with <code>u'TESTING'</code>).</p>\n</div>\n<div id=\"alternatives\">\n<h2>Alternatives</h2>\n<p>For other Python Enigma machines see:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/py-enigma/\" rel=\"nofollow\">py-enigma</a> (Python 3)</li>\n</ul>\n<p>This package is based on a <a href=\"https://hackage.haskell.org/package/crypto-enigma\" rel=\"nofollow\">Haskell version</a>, with essentially the same API.</p>\n</div>\n<div id=\"development-status\">\n<h2>Development status</h2>\n<p><a href=\"https://travis-ci.org/orome/crypto-enigma-py/branches\" rel=\"nofollow\"><img alt=\"Development Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85c8651e223c3d695e771c783f92233f3fa7a9ed/68747470733a2f2f7472617669732d63692e6f72672f6f726f6d652f63727970746f2d656e69676d612d70792e7376673f6272616e63683d646576656c6f70\"></a> <a href=\"http://crypto-enigma.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75fc554606b799ce1ec7d5a19990536eb2c24e6b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f63727970746f2d656e69676d612f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>This package is in the early stages of development, and I and can\u2019t promise the current\n<a href=\"https://github.com/orome/crypto-enigma-py/tree/develop\" rel=\"nofollow\">development version</a> will work. More detail about planned releases and activities\ncan be found the list of scheduled <a href=\"https://github.com/orome/crypto-enigma-py/milestones\" rel=\"nofollow\">milestones</a> and in the list of <a href=\"https://github.com/orome/crypto-enigma-py/issues\" rel=\"nofollow\">open issues</a>.\nVarious <a href=\"https://testpypi.python.org/pypi/crypto-enigma\" rel=\"nofollow\">test versions</a> may be available for installation or issues review, but these also\nmay not work as expected.</p>\n</div>\n\n          </div>"}, "last_serial": 1875305, "releases": {"0.2.1b2": [{"comment_text": "", "digests": {"md5": "1d82ecbde7825bafa8883031d14d8a53", "sha256": "8ca58f1ea8f75bf5eecd712cf2d9b54432abe3d225edcfe3abf76a8695e824e0"}, "downloads": -1, "filename": "crypto-enigma-0.2.1b2.tar.gz", "has_sig": false, "md5_digest": "1d82ecbde7825bafa8883031d14d8a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34033, "upload_time": "2015-12-22T17:39:53", "upload_time_iso_8601": "2015-12-22T17:39:53.264575Z", "url": "https://files.pythonhosted.org/packages/f3/7c/d4f80a89e3f969cb7ee601f9d9ae9d5ed67c531f2a9f0fafea5ed3124849/crypto-enigma-0.2.1b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d82ecbde7825bafa8883031d14d8a53", "sha256": "8ca58f1ea8f75bf5eecd712cf2d9b54432abe3d225edcfe3abf76a8695e824e0"}, "downloads": -1, "filename": "crypto-enigma-0.2.1b2.tar.gz", "has_sig": false, "md5_digest": "1d82ecbde7825bafa8883031d14d8a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34033, "upload_time": "2015-12-22T17:39:53", "upload_time_iso_8601": "2015-12-22T17:39:53.264575Z", "url": "https://files.pythonhosted.org/packages/f3/7c/d4f80a89e3f969cb7ee601f9d9ae9d5ed67c531f2a9f0fafea5ed3124849/crypto-enigma-0.2.1b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:01 2020"}