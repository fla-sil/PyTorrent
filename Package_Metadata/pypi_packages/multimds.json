{"info": {"author": "Lila Rieber", "author_email": "lr65358@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "MultiMDS is a tool for locus-specific structural comparisons of two Hi-C datasets. It jointly infers and aligns 3D structures from two datasets, such as different cell types. The output is aligned 3D structure files (which can be plotted, see below), locus-specific quantifications of relocalization, and compartment changes as a fraction of total relocalization. The amount of relocalization at each locus represents how much the locus changes between the datasets, which may be correlated with functional changes. The compartment fraction represents the importance of compartment changes to the global reorganization, which is expected to be 1/3 by chance. An enrichment of compartment changes suggests differential compartmentalization between the datasets. A lack of enrichment (or depletion) suggests that compartment-independent changes (such as TAD changes) dominate. \n\n# Installation\n\nPython3 required!\n\n```bash\npip install --user multimds\n```\n\nInstall the following optional dependency for plotting figures (python 3 required):\n```bash\npip install --user mayavi\n```\nIf you can't use pip, clone the repository and add its location to PYTHONPATH. \n\nIf you want to create gifs of your structures, you'll need to install [ImageMagick](https://www.imagemagick.org/script/index.php). \n\nIf you want to simulate Hi-C data (for figures), you'll need to install Sim3C:\n\n```bash\npip install --user git+https://github.com/Lila14/sim3C\n```\n\n# Example\n\n## Test data\nClone the repository, and then navigate into multimds/scripts directory. Download and normalize sample data for GM12878 and K562 cell types. Warning: this script downloads 23 Gb. \n``./test.sh``\n\nOpen a python console and run the following commands (skip plotting commands unless you have mayavi)\n\n```python\nfrom multimds import multimds\nstruct1, struct2 = multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\nfrom multimds import plotting\nplotting.plot_structures_interactive((struct1, struct2))\n```\n\nYou can calculate the fraction of changes explained by the A/B compartment axis, which is expected to be 1/3 by chance. (This analysis is only useful for datasets which have A/B compartments, such as mammalian cells.) \n\n```python\nfrom multimds import compartment_analysis\ncompartment_analysis.calculate_compartment_fraction(struct1, struct2, \"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\n```\n\n# Input files\n\nMultiMDS uses intrachromosomal BED files as input. Data must be normalized prior to use (for example, using [HiC-Pro](http://nservant.github.io/HiC-Pro/)). \n\nFormat:\n\n>chrom\tbin1\\_start\tbin1\\_end\tchrom\tbin2\\_start\tbin2\\_end\tnormalized\\_contact\\_frequency\n\nExample - chr21 data at 10-Kbp resolution:\n\n>chr21\t16050000\t16060000\tchr21\t16050000\t16060000\t12441.5189291\n> \n>...\n\nImportant: the BED files must be the same species, chromosome, and resolution!\n\n# Output files\n\n## Relocalization\n\nThe relocalization of each locus is written to a BED file, with the format [PREFIX1]_[PREFIX2]_relocalization.bed\n\nFor example the output of\n\n```python\nmultimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\n```\n\nis GM12878_combined_21_100kb_K562_21_100kb_relocalization.bed\n\n## Structure files\nAligned structures are saved to tsv files, which can be used for plotting (see below). The header contains the name of the chromosome, the resolution, and the starting genomic coordinate. Each line in the file contains the genomic bin number followed by the 3D coordinates (with \"nan\" for missing data). \n\nExample - chr21 at 10-kb resolution:\n\n>chr21\n> \n>10000\n> \n>16050000\n> \n>0\t0.589878298045\t0.200029092421\t0.182515056542\n> \n>1\t0.592088232028\t0.213915817254\t0.186657230841\n> \n>2\tnan\tnan\tnan\n> \n>...\n\n0 corresponds to the bin 16050000-16060000, 1 corresponds to the bin 16060000-16070000, etc. \n\n# Difference penalty\n\nThe difference penalty controls how similar the output structures will be. Higher values mean that differences are penalized more by the algorithm. By default it is set to 0.05, but it is recommended that this be changed. \n\n```python\nstruct1, struct2 = multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", penalty=0.02)\n```\n\nThe minimum penalty that can achieve reproducibility is recommended. The script reproducibility.py (in the scripts directory) plots reproducibility at different values of this parameter. Choose the parameter at which the increase in reproducibility levels off.\n\nFor example run\n\n```python\nfrom multimds import reproducibility\nreproducibility.plot_reproducibility(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\n```\n\nOutput:\n\n![alt text](http://lugh.bmb.psu.edu/data/rieber/multimds_fig2.png \"Reproducibility\")\n\nIn this example a penalty of 0.05 appears best.\n\n\n# Plotting\n\nLoad a structure:\n\n```python\nfrom multimds import data_tools\nstructure = data_tools.structure_from_file(\"GM12878_combined_21_100kb_structure.tsv\")\n```\n\nCreate an interactive 3D plot in Mayavi. (Mayavi allows you to rotate the image and save a view.)\n\n```python\nfrom multimds import plotting\nplotting.plot_structure_interactive(structure, color=(0,0.5,0.7), radius=0.01, enrichments=range(len(structure.getPoints())))\n```\n\nIf _radius_ is not selected, the to-scale radius of heterochromatin is used. \n\n_enrichments_ is a vector with a numerical value for each bin in the structure (i.e. bins that do not have a nan coordinate). For example, this could represent ChIP-seq enrichments for each bin. This option overrides _color_ and will use a rainbow colormap, with blue representing low values and red representing high values. \n\nMultiple structures can be plotted simultaneously:\n\n```python\nchroms = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, X)\nstructures = [data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom) for chrom in chroms)]\nplotting.plot_structures_interactive(structures)\n```\n\nThe plotting module has 23 built-in colors designed to be maximally different to the human eye. By default, these colors are used when plotting multiple structures. You can also specify a list of colors:\n\n```python\nchroms = (1, 2)\nstructures = [data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom) for chrom in chroms)]\nplotting.plot_structures_interactive(structures, colors=[(1,0,0), (0,0,1)])\n```\n\nplot_structures_interactive and plot_structures_gif output a file \"structures_legend.png\" showing the colors for each structure. \n\n_all_enrichments_ is a list of enrichments, e.g. \n\n```python\nplotting.plot_structures_interactive(structures, all_enrichments=[enrichments1, enrichments2])\n```\n\nThe radius can also be specified, as above. \n\nThe option _cut_ creates a cross-section of the plot. For example, this is useful for viewing the interior of the nucleus.\n\n```python\nchroms = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, X)\nstructures = [data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom) for chrom in chroms)]\nplotting.plot_structures_interactive(structures, cut=True)\n```\n\nA plot can be saved as a gif:\n\n```python\nplotting.plot_structure_gif(structure, \"struct\", increment=10)\n```\n\nwill create struct.gif\n\nA smaller value of _increment_ will lead to a smoother gif. Increments must be a factor of 360. \n\nMultiple structures can also be plotted in a single gif:\n\n```python\nplotting.plot_structures_gif(structures, \"struct\", colors=default_colors, radius=None, increment=10)\n```\n\n# Options\n\n## Output prefix\n\nYou can use a custom prefix for your output files. For example\n\n```python\nstruct1, struct2 = multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", prefix=\"test_\")\n```\n\nwill output test_GM12878_combined_21_10kb_structure.tsv, test_K562_21_10kb_structure.tsv, test_GM12878_combined_21_10kb_K562_21_10kb_relocalization.bed\n\n## Prior\n\nExponential decay in contact frequency with genomic separation is a hallmark of Hi-C data. To reduce noise, miniMDS corrects contact frequencies with a distance-decay prior. The default prior weight is 0.05. \n\n```python\nstruct1, struct2 = multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", weight=0)\n```\n\nw can be any value between 0 and 1, inclusive. \n\n# Partitioned MDS\n\nPartitioned MDS is more efficient for very large datasets. \n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\n```\n\n## Number of partitions\n\nPartitioning is used in the structural inference step for greater efficiency and accuracy. By default 4 partitions are used. The number of partitions must be even. \n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", num_partitions=6)\n```\n\nLimit the maximum RAM (in Kb) used by any given partition (default: 32000000):\n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", maxmemory=10000000)\n```\n\n## Resolution ratio\n\nPartitioned MDS first infers a global intrachromosomal structure at low resolution, which it uses as a scaffold for high-resolution inference. By default a resolution ratio of 10 is used. So if your input file is 100-kb resolution, a 1-Mb structure will be used for approximation. \n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", res_ratio=20)\n```\n\nThe value you choose depends on your tradeoff between speed and accuracy (but must be an integer). Lower resolutions (i.e. higher ratios) are faster but less accurate.\n\n## Number of threads\n\nMultimds uses multithreading to achieve greater speed. By default, 3 threads are requested, because this is safe for standard 4-core desktop computers. However, the number of threads used will never exceed the number of processors or the number of partitions, regardless of what is requested. \n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", num_threads=4)\n```\n\n## Scaling factor\n\nThe scaling factor a describes the assumed relationship between contact frequencies and physical distances: distance = contact_frequency^(-1/a). The default value is 4, based on Wang et al 2016.\n\n```python\nstruct1, struct2 = multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\", alpha=3)\n```\n\n# Reproducing figures\nShell scripts to reproduce figures from the paper can be found in the scripts directory. \n\nRequirements:\n* [bedtools](http://bedtools.readthedocs.io/en/latest/content/installation.html)\n* [edgeR](https://bioconductor.org/packages/release/bioc/html/edgeR.html)\n* [bigWigToWig](https://www.encodeproject.org/software/bigwigtowig/)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seqcode/multimds", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multimds", "package_url": "https://pypi.org/project/multimds/", "platform": "", "project_url": "https://pypi.org/project/multimds/", "project_urls": {"Homepage": "https://github.com/seqcode/multimds"}, "release_url": "https://pypi.org/project/multimds/0.0.9/", "requires_dist": ["h5py", "numpy", "pandas", "pymp-pypi", "scikit-learn", "scipy", "seaborn"], "requires_python": "", "summary": "Structural inference and alignment of Hi-C datasets", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>MultiMDS is a tool for locus-specific structural comparisons of two Hi-C datasets. It jointly infers and aligns 3D structures from two datasets, such as different cell types. The output is aligned 3D structure files (which can be plotted, see below), locus-specific quantifications of relocalization, and compartment changes as a fraction of total relocalization. The amount of relocalization at each locus represents how much the locus changes between the datasets, which may be correlated with functional changes. The compartment fraction represents the importance of compartment changes to the global reorganization, which is expected to be 1/3 by chance. An enrichment of compartment changes suggests differential compartmentalization between the datasets. A lack of enrichment (or depletion) suggests that compartment-independent changes (such as TAD changes) dominate.</p>\n<p># Installation</p>\n<p>Python3 required!</p>\n<p><tt>`bash\npip install <span class=\"pre\">--user</span> multimds\n`</tt></p>\n<p>Install the following optional dependency for plotting figures (python 3 required):\n<tt>`bash\npip install <span class=\"pre\">--user</span> mayavi\n`</tt>\nIf you can\u2019t use pip, clone the repository and add its location to PYTHONPATH.</p>\n<p>If you want to create gifs of your structures, you\u2019ll need to install [ImageMagick](<a href=\"https://www.imagemagick.org/script/index.php\" rel=\"nofollow\">https://www.imagemagick.org/script/index.php</a>).</p>\n<p>If you want to simulate Hi-C data (for figures), you\u2019ll need to install Sim3C:</p>\n<p><tt>`bash\npip install <span class=\"pre\">--user</span> <span class=\"pre\">git+https://github.com/Lila14/sim3C</span>\n`</tt></p>\n<p># Example</p>\n<p>## Test data\nClone the repository, and then navigate into multimds/scripts directory. Download and normalize sample data for GM12878 and K562 cell types. Warning: this script downloads 23 Gb.\n<tt>./test.sh</tt></p>\n<p>Open a python console and run the following commands (skip plotting commands unless you have mayavi)</p>\n<p><tt>`python\nfrom multimds import multimds\nstruct1, struct2 = <span class=\"pre\">multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\")\nfrom multimds import plotting\n<span class=\"pre\">plotting.plot_structures_interactive((struct1,</span> struct2))\n`</tt></p>\n<p>You can calculate the fraction of changes explained by the A/B compartment axis, which is expected to be 1/3 by chance. (This analysis is only useful for datasets which have A/B compartments, such as mammalian cells.)</p>\n<p><tt>`python\nfrom multimds import compartment_analysis\ncompartment_analysis.calculate_compartment_fraction(struct1, struct2, \"hic_data/GM12878_combined_21_100kb.bed\", \"hic_data/K562_21_100kb.bed\")\n`</tt></p>\n<p># Input files</p>\n<p>MultiMDS uses intrachromosomal BED files as input. Data must be normalized prior to use (for example, using [HiC-Pro](<a href=\"http://nservant.github.io/HiC-Pro/\" rel=\"nofollow\">http://nservant.github.io/HiC-Pro/</a>)).</p>\n<p>Format:</p>\n<p>&gt;chrom  bin1_start     bin1_end       chrom   bin2_start     bin2_end       normalized_contact_frequency</p>\n<p>Example - chr21 data at 10-Kbp resolution:</p>\n<p>&gt;chr21  16050000        16060000        chr21   16050000        16060000        12441.5189291\n&gt;\n&gt;\u2026</p>\n<p>Important: the BED files must be the same species, chromosome, and resolution!</p>\n<p># Output files</p>\n<p>## Relocalization</p>\n<p>The relocalization of each locus is written to a BED file, with the format [PREFIX1]_[PREFIX2]_relocalization.bed</p>\n<p>For example the output of</p>\n<p><tt>`python\n<span class=\"pre\">multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\")\n`</tt></p>\n<p>is GM12878_combined_21_100kb_K562_21_100kb_relocalization.bed</p>\n<p>## Structure files\nAligned structures are saved to tsv files, which can be used for plotting (see below). The header contains the name of the chromosome, the resolution, and the starting genomic coordinate. Each line in the file contains the genomic bin number followed by the 3D coordinates (with \u201cnan\u201d for missing data).</p>\n<p>Example - chr21 at 10-kb resolution:</p>\n<p>&gt;chr21\n&gt;\n&gt;10000\n&gt;\n&gt;16050000\n&gt;\n&gt;0      0.589878298045  0.200029092421  0.182515056542\n&gt;\n&gt;1      0.592088232028  0.213915817254  0.186657230841\n&gt;\n&gt;2      nan     nan     nan\n&gt;\n&gt;\u2026</p>\n<p>0 corresponds to the bin 16050000-16060000, 1 corresponds to the bin 16060000-16070000, etc.</p>\n<p># Difference penalty</p>\n<p>The difference penalty controls how similar the output structures will be. Higher values mean that differences are penalized more by the algorithm. By default it is set to 0.05, but it is recommended that this be changed.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", penalty=0.02)\n`</tt></p>\n<p>The minimum penalty that can achieve reproducibility is recommended. The script reproducibility.py (in the scripts directory) plots reproducibility at different values of this parameter. Choose the parameter at which the increase in reproducibility levels off.</p>\n<p>For example run</p>\n<p><tt>`python\nfrom multimds import reproducibility\n<span class=\"pre\">reproducibility.plot_reproducibility(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\")\n`</tt></p>\n<p>Output:</p>\n<p>![alt text](<a href=\"http://lugh.bmb.psu.edu/data/rieber/multimds_fig2.png\" rel=\"nofollow\">http://lugh.bmb.psu.edu/data/rieber/multimds_fig2.png</a> \u201cReproducibility\u201d)</p>\n<p>In this example a penalty of 0.05 appears best.</p>\n<p># Plotting</p>\n<p>Load a structure:</p>\n<p><tt>`python\nfrom multimds import data_tools\nstructure = <span class=\"pre\">data_tools.structure_from_file(\"GM12878_combined_21_100kb_structure.tsv\")</span>\n`</tt></p>\n<p>Create an interactive 3D plot in Mayavi. (Mayavi allows you to rotate the image and save a view.)</p>\n<p><tt>`python\nfrom multimds import plotting\nplotting.plot_structure_interactive(structure, <span class=\"pre\">color=(0,0.5,0.7),</span> radius=0.01, <span class=\"pre\">enrichments=range(len(structure.getPoints())))</span>\n`</tt></p>\n<p>If _radius_ is not selected, the to-scale radius of heterochromatin is used.</p>\n<p>_enrichments_ is a vector with a numerical value for each bin in the structure (i.e. bins that do not have a nan coordinate). For example, this could represent ChIP-seq enrichments for each bin. This option overrides _color_ and will use a rainbow colormap, with blue representing low values and red representing high values.</p>\n<p>Multiple structures can be plotted simultaneously:</p>\n<p><tt>`python\nchroms = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, X)\nstructures = <span class=\"pre\">[data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom)</span> for chrom in chroms)]\nplotting.plot_structures_interactive(structures)\n`</tt></p>\n<p>The plotting module has 23 built-in colors designed to be maximally different to the human eye. By default, these colors are used when plotting multiple structures. You can also specify a list of colors:</p>\n<p><tt>`python\nchroms = (1, 2)\nstructures = <span class=\"pre\">[data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom)</span> for chrom in chroms)]\nplotting.plot_structures_interactive(structures, <span class=\"pre\">colors=[(1,0,0),</span> <span class=\"pre\">(0,0,1)])</span>\n`</tt></p>\n<p>plot_structures_interactive and plot_structures_gif output a file \u201cstructures_legend.png\u201d showing the colors for each structure.</p>\n<p>_all_enrichments_ is a list of enrichments, e.g.</p>\n<p><tt>`python\nplotting.plot_structures_interactive(structures, <span class=\"pre\">all_enrichments=[enrichments1,</span> enrichments2])\n`</tt></p>\n<p>The radius can also be specified, as above.</p>\n<p>The option _cut_ creates a cross-section of the plot. For example, this is useful for viewing the interior of the nucleus.</p>\n<p><tt>`python\nchroms = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, X)\nstructures = <span class=\"pre\">[data_tools.structure_from_file(\"GM12878_combined_{}_100kb_structure.tsv\".format(chrom)</span> for chrom in chroms)]\nplotting.plot_structures_interactive(structures, cut=True)\n`</tt></p>\n<p>A plot can be saved as a gif:</p>\n<p><tt>`python\nplotting.plot_structure_gif(structure, \"struct\", increment=10)\n`</tt></p>\n<p>will create struct.gif</p>\n<p>A smaller value of _increment_ will lead to a smoother gif. Increments must be a factor of 360.</p>\n<p>Multiple structures can also be plotted in a single gif:</p>\n<p><tt>`python\nplotting.plot_structures_gif(structures, \"struct\", colors=default_colors, radius=None, increment=10)\n`</tt></p>\n<p># Options</p>\n<p>## Output prefix</p>\n<p>You can use a custom prefix for your output files. For example</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", <span class=\"pre\">prefix=\"test_\")</span>\n`</tt></p>\n<p>will output test_GM12878_combined_21_10kb_structure.tsv, test_K562_21_10kb_structure.tsv, test_GM12878_combined_21_10kb_K562_21_10kb_relocalization.bed</p>\n<p>## Prior</p>\n<p>Exponential decay in contact frequency with genomic separation is a hallmark of Hi-C data. To reduce noise, miniMDS corrects contact frequencies with a distance-decay prior. The default prior weight is 0.05.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.full_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", weight=0)\n`</tt></p>\n<p>w can be any value between 0 and 1, inclusive.</p>\n<p># Partitioned MDS</p>\n<p>Partitioned MDS is more efficient for very large datasets.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\")\n`</tt></p>\n<p>## Number of partitions</p>\n<p>Partitioning is used in the structural inference step for greater efficiency and accuracy. By default 4 partitions are used. The number of partitions must be even.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", num_partitions=6)\n`</tt></p>\n<p>Limit the maximum RAM (in Kb) used by any given partition (default: 32000000):</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", maxmemory=10000000)\n`</tt></p>\n<p>## Resolution ratio</p>\n<p>Partitioned MDS first infers a global intrachromosomal structure at low resolution, which it uses as a scaffold for high-resolution inference. By default a resolution ratio of 10 is used. So if your input file is 100-kb resolution, a 1-Mb structure will be used for approximation.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", res_ratio=20)\n`</tt></p>\n<p>The value you choose depends on your tradeoff between speed and accuracy (but must be an integer). Lower resolutions (i.e. higher ratios) are faster but less accurate.</p>\n<p>## Number of threads</p>\n<p>Multimds uses multithreading to achieve greater speed. By default, 3 threads are requested, because this is safe for standard 4-core desktop computers. However, the number of threads used will never exceed the number of processors or the number of partitions, regardless of what is requested.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", num_threads=4)\n`</tt></p>\n<p>## Scaling factor</p>\n<p>The scaling factor a describes the assumed relationship between contact frequencies and physical distances: distance = contact_frequency^(-1/a). The default value is 4, based on Wang et al 2016.</p>\n<p><tt>`python\nstruct1, struct2 = <span class=\"pre\">multimds.partitioned_mds(\"hic_data/GM12878_combined_21_100kb.bed\",</span> \"hic_data/K562_21_100kb.bed\", alpha=3)\n`</tt></p>\n<p># Reproducing figures\nShell scripts to reproduce figures from the paper can be found in the scripts directory.</p>\n<p>Requirements:\n* [bedtools](<a href=\"http://bedtools.readthedocs.io/en/latest/content/installation.html\" rel=\"nofollow\">http://bedtools.readthedocs.io/en/latest/content/installation.html</a>)\n* [edgeR](<a href=\"https://bioconductor.org/packages/release/bioc/html/edgeR.html\" rel=\"nofollow\">https://bioconductor.org/packages/release/bioc/html/edgeR.html</a>)\n* [bigWigToWig](<a href=\"https://www.encodeproject.org/software/bigwigtowig/\" rel=\"nofollow\">https://www.encodeproject.org/software/bigwigtowig/</a>)</p>\n\n          </div>"}, "last_serial": 6276173, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4a7005ab28243bba4ad40f763bd571b9", "sha256": "64611ee23738b1d5e3ca5abad2d16c5c05d517c586160d2bd5c78c4e78509564"}, "downloads": -1, "filename": "multimds-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a7005ab28243bba4ad40f763bd571b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25464, "upload_time": "2019-08-09T18:02:45", "upload_time_iso_8601": "2019-08-09T18:02:45.368668Z", "url": "https://files.pythonhosted.org/packages/c0/a7/ac691a781296eb5a43f83eee43369e490e10af8d2d913bf679c0c3b8ed06/multimds-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d762de744f187b7f28dd0f9c23d1dfa0", "sha256": "be388c0ef4b3880a3d169ea8c8fd951df9cfe237ca9df8fbdafbb3142e26865a"}, "downloads": -1, "filename": "multimds-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d762de744f187b7f28dd0f9c23d1dfa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21597, "upload_time": "2019-08-09T18:02:47", "upload_time_iso_8601": "2019-08-09T18:02:47.403561Z", "url": "https://files.pythonhosted.org/packages/5a/72/338d6179467567c13e210a7acd5baa0a9f992cf7d358123fb8e3dd390117/multimds-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4519e900e49dc6e39ef00721d94fde45", "sha256": "3d9ef79aed4f26008e3d19801e8ac9043052cff33221a16ebb94faf08c51ab00"}, "downloads": -1, "filename": "multimds-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4519e900e49dc6e39ef00721d94fde45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24366, "upload_time": "2019-08-12T17:44:24", "upload_time_iso_8601": "2019-08-12T17:44:24.506787Z", "url": "https://files.pythonhosted.org/packages/6a/a5/8b570ca8f1a839db8d2834ac64f4b00edebaa4ac3b268b9b551af5c4b8e9/multimds-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3fe9454014bb96a6b05f09b1b3fe519", "sha256": "be6e8d19d83c034a46122af38334f3e950a3d25b1f3f7d2a3dc98b32d29f2e22"}, "downloads": -1, "filename": "multimds-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f3fe9454014bb96a6b05f09b1b3fe519", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20449, "upload_time": "2019-08-12T17:44:25", "upload_time_iso_8601": "2019-08-12T17:44:25.694590Z", "url": "https://files.pythonhosted.org/packages/e1/c0/db41ab6873207b29e702fc2ac795b211d592d4b672a883c9a51c5dfb19fc/multimds-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cd26c11710112eeca2b888c8dd63c4b2", "sha256": "91516d17529b01868e8bcda13a4920dd9b97382a16b06dacee10964116416185"}, "downloads": -1, "filename": "multimds-0.0.3-py2.7.egg", "has_sig": false, "md5_digest": "cd26c11710112eeca2b888c8dd63c4b2", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 53687, "upload_time": "2019-09-13T22:34:58", "upload_time_iso_8601": "2019-09-13T22:34:58.345129Z", "url": "https://files.pythonhosted.org/packages/9f/c7/c3382591eaa1c3527fecf7fac5f2a1f0a6f96280617d54d2d8212aa6f17a/multimds-0.0.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "41f0311ebcb079ca455050a2effa54a5", "sha256": "8d8aee811634218f0cf240735692a0ab398d8439a9821eaaed72691e6f732e03"}, "downloads": -1, "filename": "multimds-0.0.3-py3.6.egg", "has_sig": false, "md5_digest": "41f0311ebcb079ca455050a2effa54a5", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 54181, "upload_time": "2019-09-13T22:35:00", "upload_time_iso_8601": "2019-09-13T22:35:00.118787Z", "url": "https://files.pythonhosted.org/packages/5d/96/66d10084cc591d07f5dbb788732f12ad7c9529732d5370beb6c7fcb00412/multimds-0.0.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "038d02f3575b3df6e7ae67c14f0ff196", "sha256": "b95214672bf8364f2aef2bff46320448aa75fa537e14e0fc71405bc53d0dfac4"}, "downloads": -1, "filename": "multimds-0.0.3-py3.7.egg", "has_sig": false, "md5_digest": "038d02f3575b3df6e7ae67c14f0ff196", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 54535, "upload_time": "2019-09-13T22:35:01", "upload_time_iso_8601": "2019-09-13T22:35:01.849737Z", "url": "https://files.pythonhosted.org/packages/08/60/c05b8bab67eb24c8ac2278c951038d199d3c85d42a81c6e7f5c1b9ca4c95/multimds-0.0.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3db8d31c46327980c4692d5c8f0525f6", "sha256": "8a0d1f34ff9a43be42df060cacfa96e1779fd50367f02c6850f87cba73a4db79"}, "downloads": -1, "filename": "multimds-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3db8d31c46327980c4692d5c8f0525f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25861, "upload_time": "2019-08-14T18:22:55", "upload_time_iso_8601": "2019-08-14T18:22:55.148735Z", "url": "https://files.pythonhosted.org/packages/b0/99/52648b80119f0b9abb06e71c013b9cc8a2e49c22c07d46be167db5a60275/multimds-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a05ef72f3c2af2db8cb24f38a0f65e3", "sha256": "b3702aad48bbf1d0f41c6cf0500f2857d45a159711c7bf27bf30525ba68ba701"}, "downloads": -1, "filename": "multimds-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1a05ef72f3c2af2db8cb24f38a0f65e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21288, "upload_time": "2019-08-14T18:22:56", "upload_time_iso_8601": "2019-08-14T18:22:56.783301Z", "url": "https://files.pythonhosted.org/packages/79/d6/0aebf673a9391aab8aecf0a81f80312b1dd296b0da4ad6ce47eee662a0ab/multimds-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "6f810478e9c01fc44c63823490b0ed63", "sha256": "f25a07d03598be75152ef68da5446d4cba9f2758793d65358a5a0f32044bc722"}, "downloads": -1, "filename": "multimds-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6f810478e9c01fc44c63823490b0ed63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26146, "upload_time": "2019-09-13T22:34:56", "upload_time_iso_8601": "2019-09-13T22:34:56.631560Z", "url": "https://files.pythonhosted.org/packages/4a/05/87821d9bd1f3cd357c97379c8ee9721f3318f0d698d73809e35fdeba74e9/multimds-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "874e9cc873912b586d47269a363ba046", "sha256": "d8b2db9c2489f02c6884b1ea44230228632dc9e4b2d4d950e4f1bf27e0a27743"}, "downloads": -1, "filename": "multimds-0.0.4.tar.gz", "has_sig": false, "md5_digest": "874e9cc873912b586d47269a363ba046", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25307, "upload_time": "2019-09-13T22:35:04", "upload_time_iso_8601": "2019-09-13T22:35:04.302669Z", "url": "https://files.pythonhosted.org/packages/4d/6c/8a5d92be94f717655c9a740fa65b8a3f4b34e48e10c4e8cfefbb5f36e83c/multimds-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6326468707d3d1bba47130e4c0d815f9", "sha256": "651ecd7e46f7feb0aa7f601547c90133cea227edf56ff0c85c9d1c0bef842d70"}, "downloads": -1, "filename": "multimds-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6326468707d3d1bba47130e4c0d815f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26003, "upload_time": "2019-09-19T17:32:22", "upload_time_iso_8601": "2019-09-19T17:32:22.408578Z", "url": "https://files.pythonhosted.org/packages/9e/bc/59c021323194880f60494e0ca4b02b05922aa32d70fd179ac1aafb341e3a/multimds-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5f9adc37199f228166166f4d79a7bae", "sha256": "a0d1f5bd28f88d698bb471d359c6320f73a9388e11e6648f03dce56c516026d7"}, "downloads": -1, "filename": "multimds-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a5f9adc37199f228166166f4d79a7bae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24991, "upload_time": "2019-09-19T17:32:29", "upload_time_iso_8601": "2019-09-19T17:32:29.539223Z", "url": "https://files.pythonhosted.org/packages/55/96/3c2975fefc24d0c4709686e291f4db78367af3403ee09462f16f6df50467/multimds-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "261f40ef205b76f0d973b6180bd60c12", "sha256": "5d207b6e4696265827f734b0ecbd2aea136badc00218894f45aa6c3467c42e09"}, "downloads": -1, "filename": "multimds-0.0.6-py2-none-any.whl", "has_sig": false, "md5_digest": "261f40ef205b76f0d973b6180bd60c12", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30496, "upload_time": "2019-11-08T23:57:48", "upload_time_iso_8601": "2019-11-08T23:57:48.584196Z", "url": "https://files.pythonhosted.org/packages/9a/ee/99374033a047a18d7ed785ec691f37a40d5bfd1152ba84f9288f01fcad6d/multimds-0.0.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96d98a64d5cb995a894a694b1cb4f729", "sha256": "65e6da8af477f219bf996074dbf9d8e93a882454a6418c4b376df2ede071dc1e"}, "downloads": -1, "filename": "multimds-0.0.6.tar.gz", "has_sig": false, "md5_digest": "96d98a64d5cb995a894a694b1cb4f729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21892, "upload_time": "2019-11-08T23:57:50", "upload_time_iso_8601": "2019-11-08T23:57:50.190238Z", "url": "https://files.pythonhosted.org/packages/ed/12/95475c5329b25a6d569c2c8e1c8b1e539fabc8822fcf818408f478749cde/multimds-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "8439124ae97a9cb46732c7d5485ff108", "sha256": "3f01377908eb903e63090310c7a4bbf974cca598e9411430521037a20339021a"}, "downloads": -1, "filename": "multimds-0.0.7-py2-none-any.whl", "has_sig": false, "md5_digest": "8439124ae97a9cb46732c7d5485ff108", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30495, "upload_time": "2019-11-11T17:02:35", "upload_time_iso_8601": "2019-11-11T17:02:35.760426Z", "url": "https://files.pythonhosted.org/packages/16/b5/7fbea07a4a364fc8ee9962c6c7dfcdad972eb6b1da2e81997a8eafa4d71a/multimds-0.0.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c88db19bf1cbdb83baaf60e6f4a1ca3f", "sha256": "91605640861bb05a2ff70c96e178a816be154ef99c76f7323edb8137fbf52657"}, "downloads": -1, "filename": "multimds-0.0.7.tar.gz", "has_sig": false, "md5_digest": "c88db19bf1cbdb83baaf60e6f4a1ca3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21889, "upload_time": "2019-11-11T17:02:37", "upload_time_iso_8601": "2019-11-11T17:02:37.084339Z", "url": "https://files.pythonhosted.org/packages/f0/53/6ef501e8c4940241e6ea154b2101e40963f2228cb904de421d9e5b702166/multimds-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "eab6f2525a9670c085f9f8a5bbc27b84", "sha256": "4f23ab8102e8491db93d0a6a16ec1137bc437be3124d64d7cedd313592389228"}, "downloads": -1, "filename": "multimds-0.0.8-py2-none-any.whl", "has_sig": false, "md5_digest": "eab6f2525a9670c085f9f8a5bbc27b84", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30921, "upload_time": "2019-12-10T23:20:54", "upload_time_iso_8601": "2019-12-10T23:20:54.369792Z", "url": "https://files.pythonhosted.org/packages/d1/e4/3f4ddf520b4a4f261fcfd55b9b76cfe9b74704acab2df379e93f9d2122a8/multimds-0.0.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8671b22f73ff728b788c1b62da4f880", "sha256": "f1a84df45facf544cca698422414d7c09dd339762195eaff316eea261689d77b"}, "downloads": -1, "filename": "multimds-0.0.8.tar.gz", "has_sig": false, "md5_digest": "e8671b22f73ff728b788c1b62da4f880", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21920, "upload_time": "2019-12-10T23:20:55", "upload_time_iso_8601": "2019-12-10T23:20:55.903887Z", "url": "https://files.pythonhosted.org/packages/6a/8f/cfd760d0e52040b087ad0f7b9eaac46ae8a066d0586041fbeddd2ced9eb2/multimds-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "cb0e2c3bc45983060ed551739e7aafc8", "sha256": "7fcdff6b36c12f459345fe838943c9a81ff108010ab656f4bd5f3a5c44536cd0"}, "downloads": -1, "filename": "multimds-0.0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "cb0e2c3bc45983060ed551739e7aafc8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30949, "upload_time": "2019-12-10T23:32:26", "upload_time_iso_8601": "2019-12-10T23:32:26.254489Z", "url": "https://files.pythonhosted.org/packages/45/1c/244797a495b5da7c6a01f7b4093b84d5fa154762f696c337edb9cf994a4b/multimds-0.0.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d125c05e972bfedc94f65bb65bbda3c", "sha256": "caeff5536e2948a54381c063b9cff79bab42c9a4a33dd8effd4946a7da9dcbaa"}, "downloads": -1, "filename": "multimds-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d125c05e972bfedc94f65bb65bbda3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21939, "upload_time": "2019-12-10T23:32:27", "upload_time_iso_8601": "2019-12-10T23:32:27.904788Z", "url": "https://files.pythonhosted.org/packages/02/1f/5703451c3635018980d76d5e2d1a3848a01d43fa92a45dec5bf682936d72/multimds-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb0e2c3bc45983060ed551739e7aafc8", "sha256": "7fcdff6b36c12f459345fe838943c9a81ff108010ab656f4bd5f3a5c44536cd0"}, "downloads": -1, "filename": "multimds-0.0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "cb0e2c3bc45983060ed551739e7aafc8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30949, "upload_time": "2019-12-10T23:32:26", "upload_time_iso_8601": "2019-12-10T23:32:26.254489Z", "url": "https://files.pythonhosted.org/packages/45/1c/244797a495b5da7c6a01f7b4093b84d5fa154762f696c337edb9cf994a4b/multimds-0.0.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d125c05e972bfedc94f65bb65bbda3c", "sha256": "caeff5536e2948a54381c063b9cff79bab42c9a4a33dd8effd4946a7da9dcbaa"}, "downloads": -1, "filename": "multimds-0.0.9.tar.gz", "has_sig": false, "md5_digest": "9d125c05e972bfedc94f65bb65bbda3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21939, "upload_time": "2019-12-10T23:32:27", "upload_time_iso_8601": "2019-12-10T23:32:27.904788Z", "url": "https://files.pythonhosted.org/packages/02/1f/5703451c3635018980d76d5e2d1a3848a01d43fa92a45dec5bf682936d72/multimds-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:24 2020"}