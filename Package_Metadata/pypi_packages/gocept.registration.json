{"info": {"author": "Christian Theune, Stephan Richter and others", "author_email": "mail@gocept.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "======================\nUser self-registration\n======================\n\nThis package provides functionality to implement user self-registration for\napplications.\n\nThe general workflow requires that every user provides at least his email\naddress but additional data may be provided, too.  After a user registered, an\nemail is send out asking him to confirm his identity by clicking a link that\nis embedded in the email.  Once a registration is confirmed, the temporarily\nstored registration data is deleted.\n\nApplications can customize the registration behaviour by subscribing to events\nfor registration and confirmation and providing application-specific views and\nadapters for registration and email creation.\n\nThere is a demo application included in this package/buildout that shows how\nto use the basic views available to quickly create registration and\nconfirmation views and customized emails for your application. Both the views\nand the email generation provide a good degree of flexibility so they can be\nre-used directly, but you can also provide your own.\n\n\n======================\nUser self-registration\n======================\n\nRegistering a user\n==================\n\nRegistrations are managed by the registrations utility:\n\n  >>> from gocept.registration.registrations import Registrations\n  >>> registrations = Registrations()\n\nWe can now register a user by passing his email address and some additional\ndata:\n\n  >>> peter = registrations.register('peter@example.com', {'name': u'Peter'})\n  >>> peter\n  <gocept.registration.registrations.Registration object at 0x...>\n\nAll registrations have a hash that anonymous identifies them, the email and\nthe data attached:\n\n  >>> peter.hash\n  '<SHA-HASH>'\n  >>> peter.email\n  'peter@example.com'\n  >>> peter.data\n  {'name': u'Peter'}\n\nPeter's registration is contained in the utility identified by the hash:\n\n  >>> registrations[peter.hash]\n  <gocept.registration.registrations.Registration object at 0x...>\n\nPeter can now confirm his registration using the hash that was given to him:\n\n  >>> registrations.confirm(peter.hash)\n\nNow that he confirmed his registration, it isn't stored in the utility\nanymore:\n\n  >>> registrations[peter.hash]\n  Traceback (most recent call last):\n  KeyError: '<SHA-HASH>'\n\nCustomizing the Registration Object\n===================================\n\nWhen calling the ``register`` method, we can also optionally pass in a\nfactory to construct the registration.  This is useful when\nsubclassing the ``Registration`` class.\n\n  >>> from gocept.registration.registrations import Registration\n  >>> class MyRegistration(Registration):\n  ...     def __init__(self, hash, email, data):\n  ...         assert data.has_key('agentNumber'), 'missing agent number!'\n  ...         super(MyRegistration, self).__init__(hash, email, data)\n\n  >>> registrations.register('james@bond.com',\n  ...                        {'name': u'James Bond'},\n  ...                        factory=MyRegistration)\n  Traceback (most recent call last):\n  ...\n  AssertionError: missing agent number!\n  >>> registrations.register('james@bond.com',\n  ...                        {'name': u'James Bond',\n  ...                         'agentNumber': u'007'},\n  ...                        factory=MyRegistration)\n  <MyRegistration object at ...>\n\n\nApplication hooks\n=================\n\nThere are two hooks that applications can tap into for customizing the registration process:\n\n- the ObjectAddedEvent for the registration object, and\n- the RegistrationConfirmedEvent when the user confirms his registration\n\nLet's register a subscriber for both events to demonstrate where each is called:\n\n  >>> def registered(event):\n  ...     print event, event.object\n  >>> import zope.component\n  >>> from zope.app.container.interfaces import IObjectAddedEvent\n  >>> zope.component.provideHandler(registered, (IObjectAddedEvent,))\n\n  >>> chuck = registrations.register('chuck@example.com', {'name': u'LeChuck'})\n  <zope.app.container.contained.ObjectAddedEvent object at 0x...>\n  <gocept.registration.registrations.Registration object at 0x...>\n\n  >>> def confirmed(event):\n  ...     print event, event.registration\n  >>> from gocept.registration.interfaces import IRegistrationConfirmed\n  >>> zope.component.provideHandler(confirmed, (IRegistrationConfirmed,))\n\n  >>> registrations.confirm(chuck.hash)\n  <gocept.registration.interfaces.RegistrationConfirmedEvent object at 0x...>\n  <gocept.registration.registrations.Registration object at 0x...>\n\nLet's clean those registrations up again:\n\n  >>> from zope.app.testing import placelesssetup\n  >>> placelesssetup.tearDown()\n\n\nConfirmation emails\n===================\n\nSending out registration emails is divided into two parts: creating the email\nitself, and sending it.\n\nCreating confirmation mails\n---------------------------\n\nTo provide some central configuration, registrations can be adapted to\nIRegistrationEmailConfiguration:\n\n  >>> from gocept.registration.interfaces import IEmailConfiguration\n  >>> from gocept.registration.interfaces import IRegistration\n  >>> class TestConfig(object):\n  ...     zope.interface.implements(IEmailConfiguration)\n  ...     addr_from = \"Ad Ministrator <admin@example.com>\"\n  ...     confirmation_url = \"http://example.com/confirm?hash=%s\"\n  ...     confirmation_template = \"\"\"From: %(from)s\n  ... To: %(to)s\n  ... Subject: Please confirm your registration\n  ... \n  ... We received your registration. To activate it, please follow this confirmation\n  ... \n  ... link:\n  ... \n  ...  %(link)s\"\"\"\n  ...     def __init__(self, registration):\n  ...         pass\n  >>> zope.component.provideAdapter(TestConfig, adapts=(IRegistration,))\n\nThe confirmation email is created by adapting the registration object to the\nIRegistrationEmail interface. We provide a simple implementation to start\nfrom.\n\n  >>> from gocept.registration.email import ConfirmationEmail\n  >>> mail = ConfirmationEmail(chuck)\n  >>> print mail.message\n  From: Ad Ministrator <admin@example.com>\n  To: chuck@example.com\n  Subject: Please confirm your registration\n  <BLANKLINE>\n  We received your registration. To activate it, please follow this confirmation\n  link:\n  <BLANKLINE>\n  http://example.com/confirm?hash=<SHA-HASH>\n\n\nSending confirmation mails\n--------------------------\n\nWe provide a standard event handler that will send out an email for the\nregistration:\n\n  >>> from gocept.registration.email import send_registration_mail\n  >>> zope.component.provideAdapter(ConfirmationEmail, (IRegistration,))\n  >>> zope.component.provideHandler(send_registration_mail, (IRegistration, IObjectAddedEvent,))\n  >>> from zope.component.event import objectEventNotify\n  >>> zope.component.provideHandler(objectEventNotify, (IObjectAddedEvent,))\n  >>> from gocept.registration.tests import DummyMailer\n  >>> zope.component.provideUtility(DummyMailer())\n  >>> janine = registrations.register('janine@example.com')\n  (Ad Ministrator <admin@example.com> -> ['janine@example.com'])\n  From: Ad Ministrator <admin@example.com>\n  To: janine@example.com\n  Subject: Please confirm your registration\n  <BLANKLINE>\n  We received your registration. To activate it, please follow this confirmation\n  <BLANKLINE>\n  link:\n  <BLANKLINE>\n  http://example.com/confirm?hash=<SHA-HASH>\n\n\nChanges\n=======\n\n\n0.3.0 (2010-06-22)\n------------------\n\n- Feature: Allowing passing in a factory to the register of the\n  ``Registrations`` object.\n- Bug: Fixed missing import statement for Contained.\n\n0.2.0 (2008-05-10)\n------------------\n\n- Feature: Made coverage report available for package.\n\n- Feature: Implement a testing registrations component that produces a\n  predictable hash.\n\n- Feature: Use ``IMailDelivery`` interface instead of ``IMailer``.\n\n\n0.1.0 (2008-03-28)\n------------------\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/gocept.registration/", "keywords": "zope3 gocept user registration", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "gocept.registration", "package_url": "https://pypi.org/project/gocept.registration/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gocept.registration/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/gocept.registration/"}, "release_url": "https://pypi.org/project/gocept.registration/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "User self-registration", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"user-self-registration\">\n<h2>User self-registration</h2>\n<p>This package provides functionality to implement user self-registration for\napplications.</p>\n<p>The general workflow requires that every user provides at least his email\naddress but additional data may be provided, too.  After a user registered, an\nemail is send out asking him to confirm his identity by clicking a link that\nis embedded in the email.  Once a registration is confirmed, the temporarily\nstored registration data is deleted.</p>\n<p>Applications can customize the registration behaviour by subscribing to events\nfor registration and confirmation and providing application-specific views and\nadapters for registration and email creation.</p>\n<p>There is a demo application included in this package/buildout that shows how\nto use the basic views available to quickly create registration and\nconfirmation views and customized emails for your application. Both the views\nand the email generation provide a good degree of flexibility so they can be\nre-used directly, but you can also provide your own.</p>\n</div>\n<div id=\"id1\">\n<h2>User self-registration</h2>\n<div id=\"registering-a-user\">\n<h3>Registering a user</h3>\n<p>Registrations are managed by the registrations utility:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from gocept.registration.registrations import Registrations\n&gt;&gt;&gt; registrations = Registrations()\n</pre>\n</blockquote>\n<p>We can now register a user by passing his email address and some additional\ndata:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; peter = registrations.register('peter@example.com', {'name': u'Peter'})\n&gt;&gt;&gt; peter\n&lt;gocept.registration.registrations.Registration object at 0x...&gt;\n</pre>\n</blockquote>\n<p>All registrations have a hash that anonymous identifies them, the email and\nthe data attached:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; peter.hash\n'&lt;SHA-HASH&gt;'\n&gt;&gt;&gt; peter.email\n'peter@example.com'\n&gt;&gt;&gt; peter.data\n{'name': u'Peter'}\n</pre>\n</blockquote>\n<p>Peter\u2019s registration is contained in the utility identified by the hash:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; registrations[peter.hash]\n&lt;gocept.registration.registrations.Registration object at 0x...&gt;\n</pre>\n</blockquote>\n<p>Peter can now confirm his registration using the hash that was given to him:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; registrations.confirm(peter.hash)\n</pre>\n</blockquote>\n<p>Now that he confirmed his registration, it isn\u2019t stored in the utility\nanymore:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; registrations[peter.hash]\nTraceback (most recent call last):\nKeyError: '&lt;SHA-HASH&gt;'\n</pre>\n</blockquote>\n</div>\n<div id=\"customizing-the-registration-object\">\n<h3>Customizing the Registration Object</h3>\n<p>When calling the <tt>register</tt> method, we can also optionally pass in a\nfactory to construct the registration.  This is useful when\nsubclassing the <tt>Registration</tt> class.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from gocept.registration.registrations import Registration\n&gt;&gt;&gt; class MyRegistration(Registration):\n...     def __init__(self, hash, email, data):\n...         assert data.has_key('agentNumber'), 'missing agent number!'\n...         super(MyRegistration, self).__init__(hash, email, data)\n</pre>\n<pre>&gt;&gt;&gt; registrations.register('james@bond.com',\n...                        {'name': u'James Bond'},\n...                        factory=MyRegistration)\nTraceback (most recent call last):\n...\nAssertionError: missing agent number!\n&gt;&gt;&gt; registrations.register('james@bond.com',\n...                        {'name': u'James Bond',\n...                         'agentNumber': u'007'},\n...                        factory=MyRegistration)\n&lt;MyRegistration object at ...&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"application-hooks\">\n<h3>Application hooks</h3>\n<p>There are two hooks that applications can tap into for customizing the registration process:</p>\n<ul>\n<li>the ObjectAddedEvent for the registration object, and</li>\n<li>the RegistrationConfirmedEvent when the user confirms his registration</li>\n</ul>\n<p>Let\u2019s register a subscriber for both events to demonstrate where each is called:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def registered(event):\n...     print event, event.object\n&gt;&gt;&gt; import zope.component\n&gt;&gt;&gt; from zope.app.container.interfaces import IObjectAddedEvent\n&gt;&gt;&gt; zope.component.provideHandler(registered, (IObjectAddedEvent,))\n</pre>\n<pre>&gt;&gt;&gt; chuck = registrations.register('chuck@example.com', {'name': u'LeChuck'})\n&lt;zope.app.container.contained.ObjectAddedEvent object at 0x...&gt;\n&lt;gocept.registration.registrations.Registration object at 0x...&gt;\n</pre>\n<pre>&gt;&gt;&gt; def confirmed(event):\n...     print event, event.registration\n&gt;&gt;&gt; from gocept.registration.interfaces import IRegistrationConfirmed\n&gt;&gt;&gt; zope.component.provideHandler(confirmed, (IRegistrationConfirmed,))\n</pre>\n<pre>&gt;&gt;&gt; registrations.confirm(chuck.hash)\n&lt;gocept.registration.interfaces.RegistrationConfirmedEvent object at 0x...&gt;\n&lt;gocept.registration.registrations.Registration object at 0x...&gt;\n</pre>\n</blockquote>\n<p>Let\u2019s clean those registrations up again:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.app.testing import placelesssetup\n&gt;&gt;&gt; placelesssetup.tearDown()\n</pre>\n</blockquote>\n</div>\n<div id=\"confirmation-emails\">\n<h3>Confirmation emails</h3>\n<p>Sending out registration emails is divided into two parts: creating the email\nitself, and sending it.</p>\n<div id=\"creating-confirmation-mails\">\n<h4>Creating confirmation mails</h4>\n<p>To provide some central configuration, registrations can be adapted to\nIRegistrationEmailConfiguration:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from gocept.registration.interfaces import IEmailConfiguration\n&gt;&gt;&gt; from gocept.registration.interfaces import IRegistration\n&gt;&gt;&gt; class TestConfig(object):\n...     zope.interface.implements(IEmailConfiguration)\n...     addr_from = \"Ad Ministrator &lt;admin@example.com&gt;\"\n...     confirmation_url = \"http://example.com/confirm?hash=%s\"\n...     confirmation_template = \"\"\"From: %(from)s\n... To: %(to)s\n... Subject: Please confirm your registration\n...\n... We received your registration. To activate it, please follow this confirmation\n...\n... link:\n...\n...  %(link)s\"\"\"\n...     def __init__(self, registration):\n...         pass\n&gt;&gt;&gt; zope.component.provideAdapter(TestConfig, adapts=(IRegistration,))\n</pre>\n</blockquote>\n<p>The confirmation email is created by adapting the registration object to the\nIRegistrationEmail interface. We provide a simple implementation to start\nfrom.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from gocept.registration.email import ConfirmationEmail\n&gt;&gt;&gt; mail = ConfirmationEmail(chuck)\n&gt;&gt;&gt; print mail.message\nFrom: Ad Ministrator &lt;admin@example.com&gt;\nTo: chuck@example.com\nSubject: Please confirm your registration\n&lt;BLANKLINE&gt;\nWe received your registration. To activate it, please follow this confirmation\nlink:\n&lt;BLANKLINE&gt;\nhttp://example.com/confirm?hash=&lt;SHA-HASH&gt;\n</pre>\n</blockquote>\n</div>\n<div id=\"sending-confirmation-mails\">\n<h4>Sending confirmation mails</h4>\n<p>We provide a standard event handler that will send out an email for the\nregistration:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from gocept.registration.email import send_registration_mail\n&gt;&gt;&gt; zope.component.provideAdapter(ConfirmationEmail, (IRegistration,))\n&gt;&gt;&gt; zope.component.provideHandler(send_registration_mail, (IRegistration, IObjectAddedEvent,))\n&gt;&gt;&gt; from zope.component.event import objectEventNotify\n&gt;&gt;&gt; zope.component.provideHandler(objectEventNotify, (IObjectAddedEvent,))\n&gt;&gt;&gt; from gocept.registration.tests import DummyMailer\n&gt;&gt;&gt; zope.component.provideUtility(DummyMailer())\n&gt;&gt;&gt; janine = registrations.register('janine@example.com')\n(Ad Ministrator &lt;admin@example.com&gt; -&gt; ['janine@example.com'])\nFrom: Ad Ministrator &lt;admin@example.com&gt;\nTo: janine@example.com\nSubject: Please confirm your registration\n&lt;BLANKLINE&gt;\nWe received your registration. To activate it, please follow this confirmation\n&lt;BLANKLINE&gt;\nlink:\n&lt;BLANKLINE&gt;\nhttp://example.com/confirm?hash=&lt;SHA-HASH&gt;\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h3>Changes</h3>\n<div id=\"id2\">\n<h4>0.3.0 (2010-06-22)</h4>\n<ul>\n<li>Feature: Allowing passing in a factory to the register of the\n<tt>Registrations</tt> object.</li>\n<li>Bug: Fixed missing import statement for Contained.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>0.2.0 (2008-05-10)</h4>\n<ul>\n<li>Feature: Made coverage report available for package.</li>\n<li>Feature: Implement a testing registrations component that produces a\npredictable hash.</li>\n<li>Feature: Use <tt>IMailDelivery</tt> interface instead of <tt>IMailer</tt>.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.1.0 (2008-03-28)</h4>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6197042, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "60417ba25b1b307f8fff4612572585b8", "sha256": "dc8b034727faf043679f5fefec9732c9072168f24b13350c76439a003298dd3b"}, "downloads": -1, "filename": "gocept.registration-0.1.0.tar.gz", "has_sig": false, "md5_digest": "60417ba25b1b307f8fff4612572585b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12004, "upload_time": "2008-03-28T17:11:31", "upload_time_iso_8601": "2008-03-28T17:11:31Z", "url": "https://files.pythonhosted.org/packages/7b/99/e2de639f3fa4c32ead2d7dcfacda75f5f42353c4fb53900940d692aa4fe7/gocept.registration-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a246906c5e10e51479903581f294c7ab", "sha256": "2362379ad4eb71483974fbfc4dce9c9baa377ec79e40b8c8db6f452ff963032f"}, "downloads": -1, "filename": "gocept.registration-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a246906c5e10e51479903581f294c7ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11450, "upload_time": "2008-05-11T04:28:24", "upload_time_iso_8601": "2008-05-11T04:28:24Z", "url": "https://files.pythonhosted.org/packages/18/4e/19fa96e057613d805b14dd59ae38fc8c7d09ca3ccb728dabb8367ee9adea/gocept.registration-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f54585320f9eba88b6077fee7738d14c", "sha256": "9533254c7a08bd0d49750054149df6db543c0ff463f2ce844366d243361e4f3e"}, "downloads": -1, "filename": "gocept.registration-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f54585320f9eba88b6077fee7738d14c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12600, "upload_time": "2010-06-22T15:11:07", "upload_time_iso_8601": "2010-06-22T15:11:07.263554Z", "url": "https://files.pythonhosted.org/packages/18/2f/ffe50c68829b5f96080194d00f090d6ae242b25ebce7c2638d12009ea5a3/gocept.registration-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f54585320f9eba88b6077fee7738d14c", "sha256": "9533254c7a08bd0d49750054149df6db543c0ff463f2ce844366d243361e4f3e"}, "downloads": -1, "filename": "gocept.registration-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f54585320f9eba88b6077fee7738d14c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12600, "upload_time": "2010-06-22T15:11:07", "upload_time_iso_8601": "2010-06-22T15:11:07.263554Z", "url": "https://files.pythonhosted.org/packages/18/2f/ffe50c68829b5f96080194d00f090d6ae242b25ebce7c2638d12009ea5a3/gocept.registration-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:01 2020"}