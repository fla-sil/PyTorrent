{"info": {"author": "Lukasz Balcerzak", "author_email": "lukaszbalcerzak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "=====================================\nfrogress - a progress tool for humans\n=====================================\n\n.. image:: https://secure.travis-ci.org/lukaszb/frogress.png?branch=master\n   :target: http://travis-ci.org/lukaszb/frogress\n\n.. image:: https://coveralls.io/repos/lukaszb/frogress/badge.png?branch=master\n   :target: https://coveralls.io/r/lukaszb/frogress/\n\n.. image:: https://pypip.in/v/frogress/badge.png\n   :target: https://crate.io/packages/frogress/\n\n::\n\n                /----------------------------------------------------------------------------------\\\n                |                                                                                  |\n      @..@     /| [###.......] Progress: 34.2MB / 125.8MB |  25.0% | Time: 14min3s | ETA: 19min52s |\n     (----)   / |                                                                                  |\n    ( >__< )    \\----------------------------------------------------------------------------------/\n    ^^ ~~ ^^\n\n\nfrogress is small progress indication tool to be used for fast prototyping.\nWhy *frogress* anyway? Because it's a bar (most of the time) and it jumps on\nyour terminal, that's why!\n\n- Does NOT break your workflow (in most cases there is no need to call\n  progress bar to render itself)\n- It can guess if you `iterate over a list`_ (or similar iterable) ...\n- or if iterate over a file ...\n- or if iterate over generator - provided you know it's total length ...\n- or not! (no eta, no total steps, no percentage and indicator instead of a bar\n  but it works!)\n- And you can easily teach it how to show progress of fat, gzipped xml file\n  when using lxml_ to parse it\n- Supports Python 2.6+, Python 3, PyPY\n- Fully tested\n\n\nIteration examples\n==================\n\n\n.. _iterate over a list:\n\nIterate over a list\n-------------------\n\n::\n\n    >>> import frogress\n    >>> items = [1, 2, 3, 4, 5]\n    >>> for item in frogress.bar(items):\n    ...     pass # do something with item\n\n    [##........] Step 2/5 |  20.0% | Time: 0.1s | ETA: 0.5s\n\n\nIterate over a file\n-------------------\n\n::\n\n    >>> import frogress\n    >>> for line in frogress.bar(open('/path/to/file', steps_label='Progress')):\n    ...     pass # do something cruel with a line\n\n    [###.......] Progress: 3.2MB / 12.8MB |  25.0% | Time: 14min3s | ETA: 19min52s\n\n\nIterate over generator\n----------------------\n\n::\n\n    >>> import frogress\n    >>> count = 100\n    >>> items = range(count)\n    >>> for item in frogress.bar(items, steps=count):\n    ...     pass # do something with item\n\n    [#########.] Step 86/100 |  86.0% | Time: 1.2s | ETA: 7.3s\n\n\nIterate over a generator with unknown total number of steps\n-----------------------------------------------------------\n\n::\n\n    >>> import frogress\n    >>> def counter():\n    ...     num = 1\n    ...     while True:\n    ...         yield num\n    ...         num += 1\n    ...\n    >>> items = counter()\n    >>> for item in frogress.bar(items):\n    ...     pass # do something with item\n\n    [........#.] Step: 1410 | Time: 2min14s\n    [.........#] Step: 1411 | Time: 2min15s\n    [........#.] Step: 1412 | Time: 2min16s\n    [.......#..] Step: 1413 | Time: 2min17s\n\n\n\nIterate over gzipped xml file using lxml\n----------------------------------------\n\nThe only problem with how to present a progress of file that's being processed\nis the source from which frogress should extract progress information. We can\ntry to do this simple way (without knowledge of how much of the file is already\nprocessed) or give ``frogress`` a *source*.\n\n\nSimple way\n~~~~~~~~~~\n\n::\n\n    >>> import frogress\n    >>> import gzip\n    >>> from lxml.etree import iterparse\n    >>> stream = gzip.open('my-fat.xml.gz')\n    >>> context = iterparse(stream)\n    >>> for action, element in frogress.bar(context):\n    ...     pass # do something with element\n    ...     element.clear() # don't forget about the memory!\n\n    [...#......] Progress: 41923 | Time: 1h42min\n\nThis is perfectly fine: we passed an iterable that doesn't provide information\non how many total items there is to process - so we have an bar activity\nindicator, no total steps at the progress and no ETA.\n\nHowever, there is clearly a way of retrieving this information - after all this\nis only a file that's being processed. And that file should be passed as\n``source`` argument to the ``frogress.bar`` function.\n\nPass source\n~~~~~~~~~~~\n\n::\n\n    >>> import frogress\n    >>> import gzip\n    >>> from lxml.etree import iterparse\n    >>> stream = gzip.open('my-fat.xml.gz')\n    >>> context = iterparse(stream)\n    >>> for action, element in frogress.bar(context, source=stream.myfileobj):\n    ...     pass # do something with element\n    ...     element.clear() # don't forget about the memory!\n\n    [#####.....] Progress: 73.5MB / 156.4MB |  47.3% | Time: 1h42min | ETA: 1h53min\n\nJust remember to pass file that is actually processed, not a wrapper! Standard\nfile would be passed directly, however in example, ``gzip`` module wraps stream\nit is working on and it's available as attribute ``myfileobj``. On the other\nhand ``bz2`` module doesn't wrap streams. And so on. ``frogress`` can guess if\na stream is file like object, however passing proper source is responsibility\nof the user.\n\n\nProgress bar class API\n======================\n\nMost of the time you won't need to call those API directly - ``frogress.bar``\nfunction should work for majority of the use cases. If, however, you feel like\nyou need to make some customization, here we present some examples::\n\n    >>> import frogress\n    >>> items = [1, 2, 3, 4, 5]\n    >>> progressbar = frogress.Bar(items)\n    >>> progressbar.step\n    0\n    >>> progressbar.started # it's still None\n    >>> progressbar.finished # here too\n    >>> for item in progressbar:\n    ...     pass # process the item (it will draw progressbar during iteration)\n    >>> progressbar.step\n    5\n    >>> progressbar.widgets\n    [<BarWidget>, <ProgressWidget>, <PercentageWidget>, <EtaWidget>, <TimeWidget>]\n    >>> len(progressbar)\n    5\n    >>> progressbar.output\n    <open file '<stderr>', mode 'w' at 0x103df61e0>\n    >>> progressbar.started\n    datetime.datetime(2013, 5, 12, 22, 2, 26, 752454)\n    >>> progressbar.finished\n    datetime.datetime(2013, 5, 12, 22, 2, 26, 792901)\n\n\nTips & Tricks\n=============\n\nHow to change label of the progress widget\n------------------------------------------\n\n::\n\n    >>> import frogress\n    >>> items = [1, 2, 3, 4, 5]\n    >>> widgets = [frogress.BarWidget, frogress.ProgressWidget('Items: '), frogress.TimerWidget]\n    >>> for item in frogress.bar(items, widgets=widgets):\n    >>>     pass\n\n\n.. _lxml: http://lxml.de/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lukaszb/frogress", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "frogress", "package_url": "https://pypi.org/project/frogress/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/frogress/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lukaszb/frogress"}, "release_url": "https://pypi.org/project/frogress/0.9.1/", "requires_dist": null, "requires_python": null, "summary": "frogress is simple progress tool", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/lukaszb/frogress\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/lukaszb/frogress.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0995b8b1aa0a413771ac01169edb911c51bbdf24/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6c756b61737a622f66726f67726573732e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/lukaszb/frogress/\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/lukaszb/frogress/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ea0fd521da18e1de121d66be2fbb5f7b90e6511/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6c756b61737a622f66726f67726573732f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://crate.io/packages/frogress/\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/frogress/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5886e4cfd6e0047b4007039c181407194bbf00bc/68747470733a2f2f70797069702e696e2f762f66726f67726573732f62616467652e706e67\"></a>\n<pre>            /----------------------------------------------------------------------------------\\\n            |                                                                                  |\n  @..@     /| [###.......] Progress: 34.2MB / 125.8MB |  25.0% | Time: 14min3s | ETA: 19min52s |\n (----)   / |                                                                                  |\n( &gt;__&lt; )    \\----------------------------------------------------------------------------------/\n^^ ~~ ^^\n</pre>\n<p>frogress is small progress indication tool to be used for fast prototyping.\nWhy <em>frogress</em> anyway? Because it\u2019s a bar (most of the time) and it jumps on\nyour terminal, that\u2019s why!</p>\n<ul>\n<li>Does NOT break your workflow (in most cases there is no need to call\nprogress bar to render itself)</li>\n<li>It can guess if you <a href=\"#iterate-over-a-list\" rel=\"nofollow\">iterate over a list</a> (or similar iterable) \u2026</li>\n<li>or if iterate over a file \u2026</li>\n<li>or if iterate over generator - provided you know it\u2019s total length \u2026</li>\n<li>or not! (no eta, no total steps, no percentage and indicator instead of a bar\nbut it works!)</li>\n<li>And you can easily teach it how to show progress of fat, gzipped xml file\nwhen using <a href=\"http://lxml.de/\" rel=\"nofollow\">lxml</a> to parse it</li>\n<li>Supports Python 2.6+, Python 3, PyPY</li>\n<li>Fully tested</li>\n</ul>\n<div id=\"iteration-examples\">\n<h2>Iteration examples</h2>\n<div id=\"id1\">\n<span id=\"iterate-over-a-list\"></span><h3>Iterate over a list</h3>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; items = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; for item in frogress.bar(items):\n...     pass # do something with item\n\n[##........] Step 2/5 |  20.0% | Time: 0.1s | ETA: 0.5s\n</pre>\n</div>\n<div id=\"iterate-over-a-file\">\n<h3>Iterate over a file</h3>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; for line in frogress.bar(open('/path/to/file', steps_label='Progress')):\n...     pass # do something cruel with a line\n\n[###.......] Progress: 3.2MB / 12.8MB |  25.0% | Time: 14min3s | ETA: 19min52s\n</pre>\n</div>\n<div id=\"iterate-over-generator\">\n<h3>Iterate over generator</h3>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; count = 100\n&gt;&gt;&gt; items = range(count)\n&gt;&gt;&gt; for item in frogress.bar(items, steps=count):\n...     pass # do something with item\n\n[#########.] Step 86/100 |  86.0% | Time: 1.2s | ETA: 7.3s\n</pre>\n</div>\n<div id=\"iterate-over-a-generator-with-unknown-total-number-of-steps\">\n<h3>Iterate over a generator with unknown total number of steps</h3>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; def counter():\n...     num = 1\n...     while True:\n...         yield num\n...         num += 1\n...\n&gt;&gt;&gt; items = counter()\n&gt;&gt;&gt; for item in frogress.bar(items):\n...     pass # do something with item\n\n[........#.] Step: 1410 | Time: 2min14s\n[.........#] Step: 1411 | Time: 2min15s\n[........#.] Step: 1412 | Time: 2min16s\n[.......#..] Step: 1413 | Time: 2min17s\n</pre>\n</div>\n<div id=\"iterate-over-gzipped-xml-file-using-lxml\">\n<h3>Iterate over gzipped xml file using lxml</h3>\n<p>The only problem with how to present a progress of file that\u2019s being processed\nis the source from which frogress should extract progress information. We can\ntry to do this simple way (without knowledge of how much of the file is already\nprocessed) or give <tt>frogress</tt> a <em>source</em>.</p>\n<div id=\"simple-way\">\n<h4>Simple way</h4>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; import gzip\n&gt;&gt;&gt; from lxml.etree import iterparse\n&gt;&gt;&gt; stream = gzip.open('my-fat.xml.gz')\n&gt;&gt;&gt; context = iterparse(stream)\n&gt;&gt;&gt; for action, element in frogress.bar(context):\n...     pass # do something with element\n...     element.clear() # don't forget about the memory!\n\n[...#......] Progress: 41923 | Time: 1h42min\n</pre>\n<p>This is perfectly fine: we passed an iterable that doesn\u2019t provide information\non how many total items there is to process - so we have an bar activity\nindicator, no total steps at the progress and no ETA.</p>\n<p>However, there is clearly a way of retrieving this information - after all this\nis only a file that\u2019s being processed. And that file should be passed as\n<tt>source</tt> argument to the <tt>frogress.bar</tt> function.</p>\n</div>\n<div id=\"pass-source\">\n<h4>Pass source</h4>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; import gzip\n&gt;&gt;&gt; from lxml.etree import iterparse\n&gt;&gt;&gt; stream = gzip.open('my-fat.xml.gz')\n&gt;&gt;&gt; context = iterparse(stream)\n&gt;&gt;&gt; for action, element in frogress.bar(context, source=stream.myfileobj):\n...     pass # do something with element\n...     element.clear() # don't forget about the memory!\n\n[#####.....] Progress: 73.5MB / 156.4MB |  47.3% | Time: 1h42min | ETA: 1h53min\n</pre>\n<p>Just remember to pass file that is actually processed, not a wrapper! Standard\nfile would be passed directly, however in example, <tt>gzip</tt> module wraps stream\nit is working on and it\u2019s available as attribute <tt>myfileobj</tt>. On the other\nhand <tt>bz2</tt> module doesn\u2019t wrap streams. And so on. <tt>frogress</tt> can guess if\na stream is file like object, however passing proper source is responsibility\nof the user.</p>\n</div>\n</div>\n</div>\n<div id=\"progress-bar-class-api\">\n<h2>Progress bar class API</h2>\n<p>Most of the time you won\u2019t need to call those API directly - <tt>frogress.bar</tt>\nfunction should work for majority of the use cases. If, however, you feel like\nyou need to make some customization, here we present some examples:</p>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; items = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; progressbar = frogress.Bar(items)\n&gt;&gt;&gt; progressbar.step\n0\n&gt;&gt;&gt; progressbar.started # it's still None\n&gt;&gt;&gt; progressbar.finished # here too\n&gt;&gt;&gt; for item in progressbar:\n...     pass # process the item (it will draw progressbar during iteration)\n&gt;&gt;&gt; progressbar.step\n5\n&gt;&gt;&gt; progressbar.widgets\n[&lt;BarWidget&gt;, &lt;ProgressWidget&gt;, &lt;PercentageWidget&gt;, &lt;EtaWidget&gt;, &lt;TimeWidget&gt;]\n&gt;&gt;&gt; len(progressbar)\n5\n&gt;&gt;&gt; progressbar.output\n&lt;open file '&lt;stderr&gt;', mode 'w' at 0x103df61e0&gt;\n&gt;&gt;&gt; progressbar.started\ndatetime.datetime(2013, 5, 12, 22, 2, 26, 752454)\n&gt;&gt;&gt; progressbar.finished\ndatetime.datetime(2013, 5, 12, 22, 2, 26, 792901)\n</pre>\n</div>\n<div id=\"tips-tricks\">\n<h2>Tips &amp; Tricks</h2>\n<h2 id=\"how-to-change-label-of-the-progress-widget\"><span class=\"section-subtitle\">How to change label of the progress widget</span></h2>\n<pre>&gt;&gt;&gt; import frogress\n&gt;&gt;&gt; items = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; widgets = [frogress.BarWidget, frogress.ProgressWidget('Items: '), frogress.TimerWidget]\n&gt;&gt;&gt; for item in frogress.bar(items, widgets=widgets):\n&gt;&gt;&gt;     pass\n</pre>\n</div>\n\n          </div>"}, "last_serial": 777537, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "cf6d22a5cf5b8cd7e6b2cc7507a50813", "sha256": "00a0a6c8734aedd41029c944673204d0a446aa03024b9389cc77f1f9bdd62445"}, "downloads": -1, "filename": "frogress-0.9.0.tar.gz", "has_sig": false, "md5_digest": "cf6d22a5cf5b8cd7e6b2cc7507a50813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10513, "upload_time": "2013-06-04T23:50:19", "upload_time_iso_8601": "2013-06-04T23:50:19.067318Z", "url": "https://files.pythonhosted.org/packages/d3/14/36c31b0b6f1e12c05dde12a203350b8c5a6adb8b16f44c0f35eeabd2901d/frogress-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "63df68b172eeae8cb4166cd938a6b0de", "sha256": "da5b8206bce00ae245002975f50b73362e5d2e81151b48c66cfd4b15ba28952c"}, "downloads": -1, "filename": "frogress-0.9.1.tar.gz", "has_sig": false, "md5_digest": "63df68b172eeae8cb4166cd938a6b0de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15677, "upload_time": "2013-06-23T17:36:48", "upload_time_iso_8601": "2013-06-23T17:36:48.204410Z", "url": "https://files.pythonhosted.org/packages/23/1e/d1498145bd80fc0b08cb35eeb1212c664d86efe91426ec83b0637901c0ef/frogress-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63df68b172eeae8cb4166cd938a6b0de", "sha256": "da5b8206bce00ae245002975f50b73362e5d2e81151b48c66cfd4b15ba28952c"}, "downloads": -1, "filename": "frogress-0.9.1.tar.gz", "has_sig": false, "md5_digest": "63df68b172eeae8cb4166cd938a6b0de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15677, "upload_time": "2013-06-23T17:36:48", "upload_time_iso_8601": "2013-06-23T17:36:48.204410Z", "url": "https://files.pythonhosted.org/packages/23/1e/d1498145bd80fc0b08cb35eeb1212c664d86efe91426ec83b0637901c0ef/frogress-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:10 2020"}