{"info": {"author": "hayj", "author_email": "hj@hayj.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "\nSystemTools\n===========\n\nThis project gathers some useful Python functions and classes. We organized them in different modules:\n\n\n* **systemtools.duration**\n* **systemtools.logger**\n* **systemtools.location**\n* **systemtools.basics**\n* **systemtools.number**\n* **systemtools.file**\n* **systemtools.system**\n\nTo install all:\n\n.. code-block::\n\n   pip install systools\n\n\n\nsystemtools.printer\n-------------------\n\nThis module provide function that beautiful print variables.\n\n.. code-block::\n\n   >>> from systemtools.printer import *\n   >>> bp(['Some text lorem ipsum dolor sit amet', {'a': 'This is some text that is short.', 'b': 'This is a longer text lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet.'}, 'Here an other text', 8, 9, [2, 3, 4, 5], 10, {1, 2, 3}])\n   [\n     Some text lorem ipsum dolor sit amet,\n     {\n       a: This is some text that is short.,\n       b: This is a longer text lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit am\n     },\n     ...,\n     10,\n     { 1, 2, 3 }\n   ]\n\n\nYou level as second argument (from 0 to 5) to set the verbosity of the print.\n\nsystemtools.duration\n--------------------\n\nThis module provide some useful class to handle time.\n\n.. code-block::\n\n   >>> from systemtools.duration import *\n\n\nTicToc\n^^^^^^\n\nThis class allow an easy print of computation time in your scripts:\n\n.. code-block::\n\n   >>> tt = TicToc()\n   >>> tt.tic() # Start the timer\n   >>> <do something...>\n   >>> tt.tic() # Print the time duration (human readable) since the previous tic()\n   tic: 1s\n   >>> <do something...>\n   >>> tt.tic()\n   tic: 1s\n   >>> tt.toc() # Print the total duration\n\ntoc total duration: 2s\n\nYou can give ``msg`` parameter to add a message to the printed duration. You can also choose to do not display anything using ``display=False``.\n\nBoth ``tic`` and ``toc`` methods return the time spent in seconds.\n\nProgressBar\n^^^^^^^^^^^\n\nA light alternative to `tqdm <https://github.com/tqdm/tqdm>`_. Just wrap your iterables with the ``pb`` funct:\n\n.. code-block:: python\n\n   for i in pb(range(iterationAmount)):\n       time.sleep(0.01)\n\nThis will display:\n\n.. code-block::\n\n     0% [                    ]\n    20% [====                ] (1.6s left)\n    40% [========            ] (1.214s left)\n    60% [============        ] (0.813s left)\n    80% [================    ] (0.404s left)\n   100% [====================] (total duration: 2.03s, mean duration: 0.01s)\n\n\nBy default, ``pb`` will **not** display more than 10 messages to do not display too much progress informations in the case you used the ``nohup`` command, or used a ``Logger`` for example.\n\n``pb`` take same parameters as the ``ProgressBar`` class init parameters. You can use the class directly to handle your progress bar by hand giving an iteration amount and by calling the ``tic()`` method at each iteration:\n\n.. code-block:: python\n\n   iterationAmount = 200\n   pb = ProgressBar(iterationAmount)\n   for i in range(iterationAmount):\n       time.sleep(0.01)\n       pb.tic(i) # Give a message to the `tic` method to display informations about the current iteration\n\nIf you work on a terminal, it will automatically display informations more frenquently and replace the current line.\n\nInit parameters are (\\ `see the code for more information <https://github.com/hayj/SystemTools/blob/master/systemtools/duration.py#L179>`_\\ ):\n\n\n* **message**\\ : will display this message at each ``tic()``\n* **printRatio**\\ : display a message at each ``printRatio * iterationAmount`` times you call ``tic()``. Default is 0.1, meaning it will display 10%, 20%...\n\n``tic()`` parameters are:\n\n\n* **extraMessage**\\ : use this message if you want to display informations about the current iteration. \n\n*Tested in Python 3 on Ubuntu.*\n\nTimer\n^^^^^\n\nThis class call a function each n seconds:\n\n.. code-block::\n\n   >>> timer = Timer(myFunct, 5)\n   >>> timer.start()\n\n\n\nYou can stop it using:\n\n.. code-block::\n\n   >>> timer.stop()\n\n\nSet ``sleepFirst=True`` if you don't want to call your funct at the startup of the timer.\n\nsystemtools.logger\n------------------\n\nA Logger class is a wrapper over ``logging``.\n\n.. code-block::\n\n   >>> from systemtools.logger import *\n   >>> logger = Logger(\"test.log\") # Give a file path\n   >>> logger.info(\"a\") # Print infos\n   >>> logger.error(\"b\") # Print errors...\n\n\nIf you created a class which contains ``logger`` and ``verbose`` like this one:\n\n.. code-block::\n\n   >>> class LoggerTest:\n   ...     def __init__(self, logger=None, verbose=True):\n   ...             self.logger = logger\n   ...             self.verbose = verbose\n\n\nAnd use functions ``log``\\ , ``logError``... this way in a method of your class:\n\n    ...             log(\"Initialized....\", self)\n\n\nSo the log function will automaticllay check if verbose is True, and if there is no ``logger``\\ , it will simply print your message.\n\nYou can also use ``logException`` this way:\n\n    ...             logException(e, self) # You can give message (string) and location (string) parameters\n\n\nYou can also give a ``Logger`` instead of a class instance:\n\n.. code-block::\n\n   >>> log(\"a\", logger)\n   >>> logException(e, logger, verbose=myVerbose)\n   >>> ...\n\n\nsystemtools.location\n--------------------\n\nThis module gathers some useful functions on file system location.\n\n.. code-block::\n\n   >>> from systemtools.location import *\n\n\n\n* **sortedGlob(regex, caseSensitive=True, sortBy=GlobSortEnum.NAME, reverse=False)**\\ : This function works the same as glob.glob but return an ordered list of files path. glob.glob return (by default) a ordered list which can change across OS or executions and it is prone to errors in your python script. You can use different orders via sortBy: GlobSortEnum.<MTIME|NAME|SIZE|NUMERICAL_NAME> the last one is the same as name but take into account numbers (e.g. test1.txt < test10.txt).\n* **homeDir()** : Return the path of your home dir.\n* **tmpDir(\\ *file*\\ =None, subDir=None)**\\ : Return the path of the tmp dir, If you give ``__file__`` in first param, the tmp dir will be \"tmp\" in the current directory, else it will be ~/tmp. You can set ``subDir`` in parameters.\n* **execDir(\\ *file*\\ =None)**\\ : Get the current directory, it is better to give ``__file__`` in parameter to be sure to get the dir of the current Python script.\n* **isDir(path)**\\ : Return True is the given path is a directory.\n* **isFile(path)**\\ : Return True is the given path is a file.\n* **decomposePath(path)**\\ : Return a tuple (dir, filename, ext, filenameAndExt) of a path.\n\nYou can set the default tmp directory:\n\n.. code-block:: python\n\n   from systemtools import config as systConf\n   systConf.defaultTmpDir = \"/your/tmp/directory\"\n\nsystemtools.basics\n------------------\n\nThis module gathers some useful basics functions.\n\n.. code-block::\n\n   >>> from systemtools.basics import *\n\n\n\n* **listSubstract(a, b)**\\ : Substract all ``b`` items from ``a``.\n* **convertDate(readableDate=None, dateFormat=DATE_FORMAT.datetime)**\\ : Convert a readable date (wrote by a human) in a date format you chose. Warning : utc shift may appear. DATE_FORMAT enum contains \"datetimeString datetime timestamp arrow arrowString humanize\".\n\n  * **mergeDicts(dict1, ...)**\\ : shallow copy of all dict and merge into a new dict\n  * **reduceDictStr**\\ : See the code for parameters. Reduce all strings of a dict in order to print it.\n  * **stripAccents(text)**\\ : Remove all accents of a string.\n  * **printLTS(l)**\\ : Pretty print a list or a dict. Use ``listToStr`` internally.\n  * **listToStr(l)**\\ : Convert a list or a dict to a pretty string.\n  * **floatAsReadable**\\ : Convert a float to a readable string without \"e-X\".\n  * **sortByKey(d)**\\ : Sort a dict by the key. Return an ``OrderedDict``.\n  * **sortBy(l, desc=False, index=1)**\\ : Sort a list of tuple (or an itemized dict) by the specific index given in parameters.\n  * **chunks(l, n)**\\ : return a list of lists (of len n) from ``l``. You can also use ``chunksYielder``.\n  * **split(l, n)**\\ : split a list in n parts.\n  * **splitMaxSized(l, batchMaxSize)**\\ : Split a list in multiple parts in such a way that each part has a max size of batchMaxSize.\n  * **normalize(l)**\\ : Normalize (between 0.0 and 1.0) all elements of a list according to the sum of all elements.\n  * **getRandomInt(a=None, b=None, seed=None, count=1)**\\ : Return a random int between ``a`` and ``b``.\n  * **getRandomFloat(min=0.0, max=1.0, decimalMax=2)**\\ : Return a random float between ``min`` and ``max``.\n  * **getRandomStr(digitCount=10, withTimestamp=True)**\\ : Return a random string with a timestamp if enabled.\n  * **getRandomName(addInt=True, maxInt=100)**\\ : Return a random name with a random int.\n  * **Random class**\\ : This class is useful when you want to seed random values and reset it after the class usage. See the code for more informations.\n  * **dictContains(d, key)**\\ : Equivalent to ``key in d and d[key] is not None``.\n  * **intersection(lists)**\\ : Return the intersection of all lists.\n  * **reduceStr**\\ : Reduce a str, you can set booleans removeNumbers, toLowerCase, removeAccents and removePunct.\n  * **varname(p)**\\ : Return the name of p from the Python script.\n  * **stripAllLines(text, removeBlank=True)**\\ : Return the text but strip all lines.\n  * **byteToStr(b)**\\ : Convert bytes to str.\n  * **getDictSubElement(theDict, keys)**\\ : This function browse the dict as a tree and return the value in the path defined by keys which is a list of dict keys. It return None if it doesn't find anything. Example: ``getDictSubElement({'a': {'b': 1}}, ['a', 'b'])`` return ``1``.\n  * **objectAsKey(o)**\\ : Convert any object to a key, if if instead call ``str(o)`` or ``repr(o)``\\ , the string can change  over executions of your script due to the unordered nature of dictionnaries and sets.\n  * **reducedLTS(o, amount=25)**\\ : Same as ``lts(o)`` but keep only ``amount`` elements at the head and the tail of the object if it is a list.\n  * **reduceBlank(text, keepNewLines=False) (aslias stripAll, trimAll)**\\ : Strip a string and reduce all blank space to a unique space. If you set keepNewLines as True, it will keep a unique '\\n' at each blank space which contains a '\\n' or a '\\r'.\n  * **linearScore(x, x1=0.0, x2=1.0, y1=0.0, y2=1.0, stayBetween0And1=True)**\\ : Give you a score f(x) defined by the linear function line (x1, y1) (x2, y2).\n  * **camelCaseToUnderscoreCase(name)**\\ : Convert a string which is formatted as the camelCase norm to the underscore_case norm.\n  * **camelCaseToUnderscoreCaseDict(theDict)**\\ : Turn each key of the dict according to ``camelCaseToUnderscoreCase``.\n  * **tuplesToDict(tupleList)**\\ : Convert a list of tuples to a dict in such a way that the first element of each tuple will be the key.\n  * **findDuplicates(texts, strip=True)**\\ : Return a list a duplicates (indexes of texts in th list).\n  * **intByteSize(n)**\\ : Return the size of an integer in bytes.\n\nsystemtools.number\n------------------\n\nThis module gathers some useful basics functions on number parsing.\n\n.. code-block::\n\n   >>> from systemtools.number import *\n\n\n\n* **parseNumber(text)**\\ : Return the first number in the given text for any locale.\n* **getAllNumbers(text, removeCommas=False)**\\ : Return all numbers in a string. You can also use ``getFirstNumber``.\n* **getFirstNumber(text)**\\ : Get the first numbers of a string.\n* **removeAllNumbers(text)**\\ : Remove all numbers from a string.\n* **truncateFloat(f, n)**\\ : Truncates/pads a float f to n decimal places without rounding.\n\nsystemtools.file\n----------------\n\nThis module gathers some useful functions on file and directories management.\n\n.. code-block::\n\n   >>> from systemtools.file import *\n\n\n\n* **getLastModifiedTimeSpent(path, timeSpentUnit=TIMESPENT_UNIT.HOURS)**\\ : Return the time spent after the last modified event on a path (file or directory).\n* **strToFilename(text)**\\ : Convert a string in a filename (storable on the disk). So it will remove all non permitted chars.\n* **mkdir(path)**\\ : Create a directory if it doesn't already exist.\n* **globRemove(globPattern)**\\ : Remove file according to a glob pattern similar to the glob lib.\n* **removeFile(path)**\\ : Remove a file or a list of files.\n* **fileToStr(path)**\\ : Load a file and return the string in.\n* **fileToStrList**\\ : Load a file and return a list of strings. You can set ``strip`` as ``False`` to don't strip all lines, ``skipBlank`` as ``False`` to keep blank lines, you can choose your comment start indicator using ``commentStart`` (default is \"###\").\n* **strToFile(text, path)**\\ : Store a string in a file.\n* **strToTmpFile(text, name=None, ext=\"\", addRandomStr=False)**\\ : Store a string to a tmp file (using ``tmpDir`` function). Example: strToTmpFile(\"a\", \"test.txt\").\n* **strListToTmpFile**\\ : Use ``strToTmpFile`` but for a list of strings which is concatened.\n* **normalizeNumericalFilePaths(globRegex)**\\ : This function get a glob path and rename all \"file1.json\", \"file2.json\"... \"file20.json\" to \"file01.json\", \"file02.json\"... \"file20.json\" to better sort the folder by file names.\n* **encryptFile(path, key, text=None, remove=True)**\\ : This function encrypt a file, if you give text in ``text`` parameter, the function will create the file. Return True if all is ok. You need to install 7zip using ``sudo apt-get install p7zip-full`` on Linux. Set remove as ``False`` if you don't want to remove the decrypted file.\n* **decryptFile(path, key, remove=True)**\\ : This function decrypt a file and return the text. Set remove as ``False`` if you don't want to remove the encrypted file.\n\nsystemtools.system\n------------------\n\nThis module gathers some useful functions on the OS management.\n\n.. code-block::\n\n   >>> from systemtools.system import *\n\n\n\n* **getUsedPorts()**\\ : Return all busy ports on your machine (works on Linux using netstat).\n* **getUser()**\\ : Equivalent to ``getpass.getuser()``\n* **setCallTimeout(timeout) and resetCallTimeout()**\\ : Use ``setCallTimeout`` to set a timeout before calling a function (so you can catch an Exception if the function is too long), then reset the timeout.\n* **getRAMTotal()**\\ : Return the amount of RAM in Go\n* **cpuCount()**\\ : Equivalent to ``multiprocessing.cpu_count()``\n* **isHostname(h)**\\ : Return ``True`` if the hostname of the current computer starts with ``h``.\n* **getHostname()**\\ : Equivalent to ``socket.gethostname()``\n* **randomSleep(min=0.1, max=None)**\\ : Sleep between min and max. If max is None: max = min + 0.2 * min.\n* **getMemoryPercent()**\\ : Return the % of memory usage.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "systools", "package_url": "https://pypi.org/project/systools/", "platform": "", "project_url": "https://pypi.org/project/systools/", "project_urls": null, "release_url": "https://pypi.org/project/systools/0.0.95/", "requires_dist": null, "requires_python": "", "summary": "This project gathers some useful basics Python functions and class.", "version": "0.0.95", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This project gathers some useful Python functions and classes. We organized them in different modules:</p>\n<ul>\n<li><strong>systemtools.duration</strong></li>\n<li><strong>systemtools.logger</strong></li>\n<li><strong>systemtools.location</strong></li>\n<li><strong>systemtools.basics</strong></li>\n<li><strong>systemtools.number</strong></li>\n<li><strong>systemtools.file</strong></li>\n<li><strong>systemtools.system</strong></li>\n</ul>\n<p>To install all:</p>\n<pre>pip install systools\n</pre>\n<div id=\"systemtools-printer\">\n<h2>systemtools.printer</h2>\n<p>This module provide function that beautiful print variables.</p>\n<pre>&gt;&gt;&gt; from systemtools.printer import *\n&gt;&gt;&gt; bp(['Some text lorem ipsum dolor sit amet', {'a': 'This is some text that is short.', 'b': 'This is a longer text lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit amet.'}, 'Here an other text', 8, 9, [2, 3, 4, 5], 10, {1, 2, 3}])\n[\n  Some text lorem ipsum dolor sit amet,\n  {\n    a: This is some text that is short.,\n    b: This is a longer text lorem ipsum dolor sit amet lorem ipsum dolor sit amet lorem ipsum dolor sit am\n  },\n  ...,\n  10,\n  { 1, 2, 3 }\n]\n</pre>\n<p>You level as second argument (from 0 to 5) to set the verbosity of the print.</p>\n</div>\n<div id=\"systemtools-duration\">\n<h2>systemtools.duration</h2>\n<p>This module provide some useful class to handle time.</p>\n<pre>&gt;&gt;&gt; from systemtools.duration import *\n</pre>\n<div id=\"tictoc\">\n<h3>TicToc</h3>\n<p>This class allow an easy print of computation time in your scripts:</p>\n<pre>&gt;&gt;&gt; tt = TicToc()\n&gt;&gt;&gt; tt.tic() # Start the timer\n&gt;&gt;&gt; &lt;do something...&gt;\n&gt;&gt;&gt; tt.tic() # Print the time duration (human readable) since the previous tic()\ntic: 1s\n&gt;&gt;&gt; &lt;do something...&gt;\n&gt;&gt;&gt; tt.tic()\ntic: 1s\n&gt;&gt;&gt; tt.toc() # Print the total duration\n</pre>\n<p>toc total duration: 2s</p>\n<p>You can give <tt>msg</tt> parameter to add a message to the printed duration. You can also choose to do not display anything using <tt>display=False</tt>.</p>\n<p>Both <tt>tic</tt> and <tt>toc</tt> methods return the time spent in seconds.</p>\n</div>\n<div id=\"progressbar\">\n<h3>ProgressBar</h3>\n<p>A light alternative to <a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\">tqdm</a>. Just wrap your iterables with the <tt>pb</tt> funct:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pb</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">iterationAmount</span><span class=\"p\">)):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</pre>\n<p>This will display:</p>\n<pre>  0% [                    ]\n 20% [====                ] (1.6s left)\n 40% [========            ] (1.214s left)\n 60% [============        ] (0.813s left)\n 80% [================    ] (0.404s left)\n100% [====================] (total duration: 2.03s, mean duration: 0.01s)\n</pre>\n<p>By default, <tt>pb</tt> will <strong>not</strong> display more than 10 messages to do not display too much progress informations in the case you used the <tt>nohup</tt> command, or used a <tt>Logger</tt> for example.</p>\n<p><tt>pb</tt> take same parameters as the <tt>ProgressBar</tt> class init parameters. You can use the class directly to handle your progress bar by hand giving an iteration amount and by calling the <tt>tic()</tt> method at each iteration:</p>\n<pre><span class=\"n\">iterationAmount</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">pb</span> <span class=\"o\">=</span> <span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"n\">iterationAmount</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">iterationAmount</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n    <span class=\"n\">pb</span><span class=\"o\">.</span><span class=\"n\">tic</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"c1\"># Give a message to the `tic` method to display informations about the current iteration</span>\n</pre>\n<p>If you work on a terminal, it will automatically display informations more frenquently and replace the current line.</p>\n<p>Init parameters are (<a href=\"https://github.com/hayj/SystemTools/blob/master/systemtools/duration.py#L179\" rel=\"nofollow\">see the code for more information</a>):</p>\n<ul>\n<li><strong>message</strong>: will display this message at each <tt>tic()</tt></li>\n<li><strong>printRatio</strong>: display a message at each <tt>printRatio * iterationAmount</tt> times you call <tt>tic()</tt>. Default is 0.1, meaning it will display 10%, 20%\u2026</li>\n</ul>\n<p><tt>tic()</tt> parameters are:</p>\n<ul>\n<li><strong>extraMessage</strong>: use this message if you want to display informations about the current iteration.</li>\n</ul>\n<p><em>Tested in Python 3 on Ubuntu.</em></p>\n</div>\n<div id=\"timer\">\n<h3>Timer</h3>\n<p>This class call a function each n seconds:</p>\n<pre>&gt;&gt;&gt; timer = Timer(myFunct, 5)\n&gt;&gt;&gt; timer.start()\n</pre>\n<p>You can stop it using:</p>\n<pre>&gt;&gt;&gt; timer.stop()\n</pre>\n<p>Set <tt>sleepFirst=True</tt> if you don\u2019t want to call your funct at the startup of the timer.</p>\n</div>\n</div>\n<div id=\"systemtools-logger\">\n<h2>systemtools.logger</h2>\n<p>A Logger class is a wrapper over <tt>logging</tt>.</p>\n<pre>&gt;&gt;&gt; from systemtools.logger import *\n&gt;&gt;&gt; logger = Logger(\"test.log\") # Give a file path\n&gt;&gt;&gt; logger.info(\"a\") # Print infos\n&gt;&gt;&gt; logger.error(\"b\") # Print errors...\n</pre>\n<p>If you created a class which contains <tt>logger</tt> and <tt>verbose</tt> like this one:</p>\n<pre>&gt;&gt;&gt; class LoggerTest:\n...     def __init__(self, logger=None, verbose=True):\n...             self.logger = logger\n...             self.verbose = verbose\n</pre>\n<p>And use functions <tt>log</tt>, <tt>logError</tt>\u2026 this way in a method of your class:</p>\n<blockquote>\n\u2026             log(\u201cInitialized\u2026.\u201d, self)</blockquote>\n<p>So the log function will automaticllay check if verbose is True, and if there is no <tt>logger</tt>, it will simply print your message.</p>\n<p>You can also use <tt>logException</tt> this way:</p>\n<blockquote>\n\u2026             logException(e, self) # You can give message (string) and location (string) parameters</blockquote>\n<p>You can also give a <tt>Logger</tt> instead of a class instance:</p>\n<pre>&gt;&gt;&gt; log(\"a\", logger)\n&gt;&gt;&gt; logException(e, logger, verbose=myVerbose)\n&gt;&gt;&gt; ...\n</pre>\n</div>\n<div id=\"systemtools-location\">\n<h2>systemtools.location</h2>\n<p>This module gathers some useful functions on file system location.</p>\n<pre>&gt;&gt;&gt; from systemtools.location import *\n</pre>\n<ul>\n<li><strong>sortedGlob(regex, caseSensitive=True, sortBy=GlobSortEnum.NAME, reverse=False)</strong>: This function works the same as glob.glob but return an ordered list of files path. glob.glob return (by default) a ordered list which can change across OS or executions and it is prone to errors in your python script. You can use different orders via sortBy: GlobSortEnum.&lt;MTIME|NAME|SIZE|NUMERICAL_NAME&gt; the last one is the same as name but take into account numbers (e.g. test1.txt &lt; test10.txt).</li>\n<li><strong>homeDir()</strong> : Return the path of your home dir.</li>\n<li><strong>tmpDir(*file*=None, subDir=None)</strong>: Return the path of the tmp dir, If you give <tt>__file__</tt> in first param, the tmp dir will be \u201ctmp\u201d in the current directory, else it will be ~/tmp. You can set <tt>subDir</tt> in parameters.</li>\n<li><strong>execDir(*file*=None)</strong>: Get the current directory, it is better to give <tt>__file__</tt> in parameter to be sure to get the dir of the current Python script.</li>\n<li><strong>isDir(path)</strong>: Return True is the given path is a directory.</li>\n<li><strong>isFile(path)</strong>: Return True is the given path is a file.</li>\n<li><strong>decomposePath(path)</strong>: Return a tuple (dir, filename, ext, filenameAndExt) of a path.</li>\n</ul>\n<p>You can set the default tmp directory:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">systemtools</span> <span class=\"kn\">import</span> <span class=\"n\">config</span> <span class=\"k\">as</span> <span class=\"n\">systConf</span>\n<span class=\"n\">systConf</span><span class=\"o\">.</span><span class=\"n\">defaultTmpDir</span> <span class=\"o\">=</span> <span class=\"s2\">\"/your/tmp/directory\"</span>\n</pre>\n</div>\n<div id=\"systemtools-basics\">\n<h2>systemtools.basics</h2>\n<p>This module gathers some useful basics functions.</p>\n<pre>&gt;&gt;&gt; from systemtools.basics import *\n</pre>\n<ul>\n<li><strong>listSubstract(a, b)</strong>: Substract all <tt>b</tt> items from <tt>a</tt>.</li>\n<li><strong>convertDate(readableDate=None, dateFormat=DATE_FORMAT.datetime)</strong>: Convert a readable date (wrote by a human) in a date format you chose. Warning : utc shift may appear. DATE_FORMAT enum contains \u201cdatetimeString datetime timestamp arrow arrowString humanize\u201d.<ul>\n<li><strong>mergeDicts(dict1, \u2026)</strong>: shallow copy of all dict and merge into a new dict</li>\n<li><strong>reduceDictStr</strong>: See the code for parameters. Reduce all strings of a dict in order to print it.</li>\n<li><strong>stripAccents(text)</strong>: Remove all accents of a string.</li>\n<li><strong>printLTS(l)</strong>: Pretty print a list or a dict. Use <tt>listToStr</tt> internally.</li>\n<li><strong>listToStr(l)</strong>: Convert a list or a dict to a pretty string.</li>\n<li><strong>floatAsReadable</strong>: Convert a float to a readable string without \u201ce-X\u201d.</li>\n<li><strong>sortByKey(d)</strong>: Sort a dict by the key. Return an <tt>OrderedDict</tt>.</li>\n<li><strong>sortBy(l, desc=False, index=1)</strong>: Sort a list of tuple (or an itemized dict) by the specific index given in parameters.</li>\n<li><strong>chunks(l, n)</strong>: return a list of lists (of len n) from <tt>l</tt>. You can also use <tt>chunksYielder</tt>.</li>\n<li><strong>split(l, n)</strong>: split a list in n parts.</li>\n<li><strong>splitMaxSized(l, batchMaxSize)</strong>: Split a list in multiple parts in such a way that each part has a max size of batchMaxSize.</li>\n<li><strong>normalize(l)</strong>: Normalize (between 0.0 and 1.0) all elements of a list according to the sum of all elements.</li>\n<li><strong>getRandomInt(a=None, b=None, seed=None, count=1)</strong>: Return a random int between <tt>a</tt> and <tt>b</tt>.</li>\n<li><strong>getRandomFloat(min=0.0, max=1.0, decimalMax=2)</strong>: Return a random float between <tt>min</tt> and <tt>max</tt>.</li>\n<li><strong>getRandomStr(digitCount=10, withTimestamp=True)</strong>: Return a random string with a timestamp if enabled.</li>\n<li><strong>getRandomName(addInt=True, maxInt=100)</strong>: Return a random name with a random int.</li>\n<li><strong>Random class</strong>: This class is useful when you want to seed random values and reset it after the class usage. See the code for more informations.</li>\n<li><strong>dictContains(d, key)</strong>: Equivalent to <tt>key in d and d[key] is not None</tt>.</li>\n<li><strong>intersection(lists)</strong>: Return the intersection of all lists.</li>\n<li><strong>reduceStr</strong>: Reduce a str, you can set booleans removeNumbers, toLowerCase, removeAccents and removePunct.</li>\n<li><strong>varname(p)</strong>: Return the name of p from the Python script.</li>\n<li><strong>stripAllLines(text, removeBlank=True)</strong>: Return the text but strip all lines.</li>\n<li><strong>byteToStr(b)</strong>: Convert bytes to str.</li>\n<li><strong>getDictSubElement(theDict, keys)</strong>: This function browse the dict as a tree and return the value in the path defined by keys which is a list of dict keys. It return None if it doesn\u2019t find anything. Example: <tt><span class=\"pre\">getDictSubElement({'a':</span> {'b': <span class=\"pre\">1}},</span> ['a', <span class=\"pre\">'b'])</span></tt> return <tt>1</tt>.</li>\n<li><strong>objectAsKey(o)</strong>: Convert any object to a key, if if instead call <tt>str(o)</tt> or <tt>repr(o)</tt>, the string can change  over executions of your script due to the unordered nature of dictionnaries and sets.</li>\n<li><strong>reducedLTS(o, amount=25)</strong>: Same as <tt>lts(o)</tt> but keep only <tt>amount</tt> elements at the head and the tail of the object if it is a list.</li>\n<li><strong>reduceBlank(text, keepNewLines=False) (aslias stripAll, trimAll)</strong>: Strip a string and reduce all blank space to a unique space. If you set keepNewLines as True, it will keep a unique \u2018n\u2019 at each blank space which contains a \u2018n\u2019 or a \u2018r\u2019.</li>\n<li><strong>linearScore(x, x1=0.0, x2=1.0, y1=0.0, y2=1.0, stayBetween0And1=True)</strong>: Give you a score f(x) defined by the linear function line (x1, y1) (x2, y2).</li>\n<li><strong>camelCaseToUnderscoreCase(name)</strong>: Convert a string which is formatted as the camelCase norm to the underscore_case norm.</li>\n<li><strong>camelCaseToUnderscoreCaseDict(theDict)</strong>: Turn each key of the dict according to <tt>camelCaseToUnderscoreCase</tt>.</li>\n<li><strong>tuplesToDict(tupleList)</strong>: Convert a list of tuples to a dict in such a way that the first element of each tuple will be the key.</li>\n<li><strong>findDuplicates(texts, strip=True)</strong>: Return a list a duplicates (indexes of texts in th list).</li>\n<li><strong>intByteSize(n)</strong>: Return the size of an integer in bytes.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"systemtools-number\">\n<h2>systemtools.number</h2>\n<p>This module gathers some useful basics functions on number parsing.</p>\n<pre>&gt;&gt;&gt; from systemtools.number import *\n</pre>\n<ul>\n<li><strong>parseNumber(text)</strong>: Return the first number in the given text for any locale.</li>\n<li><strong>getAllNumbers(text, removeCommas=False)</strong>: Return all numbers in a string. You can also use <tt>getFirstNumber</tt>.</li>\n<li><strong>getFirstNumber(text)</strong>: Get the first numbers of a string.</li>\n<li><strong>removeAllNumbers(text)</strong>: Remove all numbers from a string.</li>\n<li><strong>truncateFloat(f, n)</strong>: Truncates/pads a float f to n decimal places without rounding.</li>\n</ul>\n</div>\n<div id=\"systemtools-file\">\n<h2>systemtools.file</h2>\n<p>This module gathers some useful functions on file and directories management.</p>\n<pre>&gt;&gt;&gt; from systemtools.file import *\n</pre>\n<ul>\n<li><strong>getLastModifiedTimeSpent(path, timeSpentUnit=TIMESPENT_UNIT.HOURS)</strong>: Return the time spent after the last modified event on a path (file or directory).</li>\n<li><strong>strToFilename(text)</strong>: Convert a string in a filename (storable on the disk). So it will remove all non permitted chars.</li>\n<li><strong>mkdir(path)</strong>: Create a directory if it doesn\u2019t already exist.</li>\n<li><strong>globRemove(globPattern)</strong>: Remove file according to a glob pattern similar to the glob lib.</li>\n<li><strong>removeFile(path)</strong>: Remove a file or a list of files.</li>\n<li><strong>fileToStr(path)</strong>: Load a file and return the string in.</li>\n<li><strong>fileToStrList</strong>: Load a file and return a list of strings. You can set <tt>strip</tt> as <tt>False</tt> to don\u2019t strip all lines, <tt>skipBlank</tt> as <tt>False</tt> to keep blank lines, you can choose your comment start indicator using <tt>commentStart</tt> (default is \u201c###\u201d).</li>\n<li><strong>strToFile(text, path)</strong>: Store a string in a file.</li>\n<li><strong>strToTmpFile(text, name=None, ext=\u201d\u201d, addRandomStr=False)</strong>: Store a string to a tmp file (using <tt>tmpDir</tt> function). Example: strToTmpFile(\u201ca\u201d, \u201ctest.txt\u201d).</li>\n<li><strong>strListToTmpFile</strong>: Use <tt>strToTmpFile</tt> but for a list of strings which is concatened.</li>\n<li><strong>normalizeNumericalFilePaths(globRegex)</strong>: This function get a glob path and rename all \u201cfile1.json\u201d, \u201cfile2.json\u201d\u2026 \u201cfile20.json\u201d to \u201cfile01.json\u201d, \u201cfile02.json\u201d\u2026 \u201cfile20.json\u201d to better sort the folder by file names.</li>\n<li><strong>encryptFile(path, key, text=None, remove=True)</strong>: This function encrypt a file, if you give text in <tt>text</tt> parameter, the function will create the file. Return True if all is ok. You need to install 7zip using <tt>sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">p7zip-full</span></tt> on Linux. Set remove as <tt>False</tt> if you don\u2019t want to remove the decrypted file.</li>\n<li><strong>decryptFile(path, key, remove=True)</strong>: This function decrypt a file and return the text. Set remove as <tt>False</tt> if you don\u2019t want to remove the encrypted file.</li>\n</ul>\n</div>\n<div id=\"systemtools-system\">\n<h2>systemtools.system</h2>\n<p>This module gathers some useful functions on the OS management.</p>\n<pre>&gt;&gt;&gt; from systemtools.system import *\n</pre>\n<ul>\n<li><strong>getUsedPorts()</strong>: Return all busy ports on your machine (works on Linux using netstat).</li>\n<li><strong>getUser()</strong>: Equivalent to <tt>getpass.getuser()</tt></li>\n<li><strong>setCallTimeout(timeout) and resetCallTimeout()</strong>: Use <tt>setCallTimeout</tt> to set a timeout before calling a function (so you can catch an Exception if the function is too long), then reset the timeout.</li>\n<li><strong>getRAMTotal()</strong>: Return the amount of RAM in Go</li>\n<li><strong>cpuCount()</strong>: Equivalent to <tt>multiprocessing.cpu_count()</tt></li>\n<li><strong>isHostname(h)</strong>: Return <tt>True</tt> if the hostname of the current computer starts with <tt>h</tt>.</li>\n<li><strong>getHostname()</strong>: Equivalent to <tt>socket.gethostname()</tt></li>\n<li><strong>randomSleep(min=0.1, max=None)</strong>: Sleep between min and max. If max is None: max = min + 0.2 * min.</li>\n<li><strong>getMemoryPercent()</strong>: Return the % of memory usage.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6799582, "releases": {"0.0.92": [{"comment_text": "", "digests": {"md5": "0165fdefc08b0dce25f277ec2f0581e9", "sha256": "af299e2dbcc7f9b6a0e6e53ce4d68f14bb8c1a62217c348acdeda0b20d740dbf"}, "downloads": -1, "filename": "systools-0.0.92.tar.gz", "has_sig": false, "md5_digest": "0165fdefc08b0dce25f277ec2f0581e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56695, "upload_time": "2019-08-29T13:56:39", "upload_time_iso_8601": "2019-08-29T13:56:39.602778Z", "url": "https://files.pythonhosted.org/packages/6d/5f/3613cf24ebfc2f85196f42a78522db7d2cc995fca2c904a40023ef8b7447/systools-0.0.92.tar.gz", "yanked": false}], "0.0.93": [{"comment_text": "", "digests": {"md5": "960c5387cb07d05d4a02bf3d96e8fc77", "sha256": "450167aab9a3132ebe546b834ef5b458d0564e41cf50ef998a35f12ae53a3dee"}, "downloads": -1, "filename": "systools-0.0.93.tar.gz", "has_sig": false, "md5_digest": "960c5387cb07d05d4a02bf3d96e8fc77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57138, "upload_time": "2019-08-29T14:08:17", "upload_time_iso_8601": "2019-08-29T14:08:17.880217Z", "url": "https://files.pythonhosted.org/packages/f7/72/382e788e420aae32b0118d2a434302a58abd57ddc2c86e0f613372802594/systools-0.0.93.tar.gz", "yanked": false}], "0.0.94": [{"comment_text": "", "digests": {"md5": "15a282799515d6812a3b8aad0fe4ad00", "sha256": "2baa328066bc4e7515d24d07090484af2e55c512406ebdd417ced3c3cbf5f976"}, "downloads": -1, "filename": "systools-0.0.94.tar.gz", "has_sig": false, "md5_digest": "15a282799515d6812a3b8aad0fe4ad00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58348, "upload_time": "2020-02-04T15:23:37", "upload_time_iso_8601": "2020-02-04T15:23:37.100898Z", "url": "https://files.pythonhosted.org/packages/6e/9b/ce6d41e261c28ebe02cba47d86ec992d69f86a5722e02e0a2bd6d52a9898/systools-0.0.94.tar.gz", "yanked": false}], "0.0.95": [{"comment_text": "", "digests": {"md5": "571c79df6887a7336e527e138172f8aa", "sha256": "2aaf155f5e487f802e59c91aeaf46bd87c2bca64b83671958e8554ab8bf392a2"}, "downloads": -1, "filename": "systools-0.0.95.tar.gz", "has_sig": false, "md5_digest": "571c79df6887a7336e527e138172f8aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 260524, "upload_time": "2020-03-12T14:11:01", "upload_time_iso_8601": "2020-03-12T14:11:01.846594Z", "url": "https://files.pythonhosted.org/packages/46/b3/c1424b2c888d04cdb18c58b1a32665a5f6c7bef1430b17c1bd618ca4c17f/systools-0.0.95.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "571c79df6887a7336e527e138172f8aa", "sha256": "2aaf155f5e487f802e59c91aeaf46bd87c2bca64b83671958e8554ab8bf392a2"}, "downloads": -1, "filename": "systools-0.0.95.tar.gz", "has_sig": false, "md5_digest": "571c79df6887a7336e527e138172f8aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 260524, "upload_time": "2020-03-12T14:11:01", "upload_time_iso_8601": "2020-03-12T14:11:01.846594Z", "url": "https://files.pythonhosted.org/packages/46/b3/c1424b2c888d04cdb18c58b1a32665a5f6c7bef1430b17c1bd618ca4c17f/systools-0.0.95.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:50 2020"}