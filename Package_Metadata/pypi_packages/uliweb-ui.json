{"info": {"author": "limodou", "author_email": "limodou@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Uliweb UI\n\n## What's it\n\nuliweb-ui is used to collection ui components, such as css and js.\n\n## Compile utils and tags\n\nFirst install node.js, npm\uff0cthen install gulp and dependencies:\n\n```\nnpm install gulp\nnpm install gulp gulp-riot gulp-clean-css gulp-jshint gulp-uglify gulp-concat gulp-rename gulp-notify del riot uglify-js error jshint\n```\n\nRun:\n\n```\ngulp default\n```\n\nto compile `uliweb-ui.css` and `uliweb-ui.js` to `uliweb_ui/static/modules`, also\ncompile tags to `uliweb_ui/static/modules/tags`\n\n## make jsmodules.js\n\n`jsmodules.js` is used to combine js modules defined in `settings.ini` into a javascript\nfile, so that `head.load` can load them via `load([\"module1\", \"module2\"], function(){})`.\nYou can get it through command line `uliweb jsmodule -a uliweb_ui` to recreate it and save\nit to `uliweb_ui/static/jsmodules.js`. Because uliweb_ui is just an app, but not an application,\nso you should run `jsmodule` command in a project directory, so you can make a simple\nproject, and just add `uliweb_ui` to `INSTALLED_APPS`, and run the command.\n\nUliweb_ui is already create `jsmodule.js` for you. But if you want to add more ui components\nto settings.ini, and also want to use `load` to process them, you should recreate `jsmodules.js`\nyourself.\n\n## Concat plugins\nStep.1 Write some configuration in 'settings.ini' of your uliweb project. like that:\n\n```\n[TEMPLATE_GULP]\nyou_want_name = [ \"plugin name\", ... ]\n```\n\nStep.2 Enter a command in CLI of your uliweb project\n\n```\nuliweb gulpplugins -d app_name\n```\n\nThen you will find some files in the folder(you_want_name.js && you_want_name.css)\n\n```\n.../your_project/apps/app_name/static/\n```\n\nStep.3 In the template file, use plugin with command \"{{use 'plugin name'}}\" , you_want_name.js and you_want_name.css will loaded\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uliwebext/uliweb-ui", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "uliweb-ui", "package_url": "https://pypi.org/project/uliweb-ui/", "platform": "any", "project_url": "https://pypi.org/project/uliweb-ui/", "project_urls": {"Homepage": "https://github.com/uliwebext/uliweb-ui"}, "release_url": "https://pypi.org/project/uliweb-ui/0.1.0/", "requires_dist": ["uliweb3"], "requires_python": "", "summary": "Uliweb ui application", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Uliweb UI</p>\n<p>## What\u2019s it</p>\n<p>uliweb-ui is used to collection ui components, such as css and js.</p>\n<p>## Compile utils and tags</p>\n<p>First install node.js, npm\uff0cthen install gulp and dependencies:</p>\n<p><tt>`\nnpm install gulp\nnpm install gulp <span class=\"pre\">gulp-riot</span> <span class=\"pre\">gulp-clean-css</span> <span class=\"pre\">gulp-jshint</span> <span class=\"pre\">gulp-uglify</span> <span class=\"pre\">gulp-concat</span> <span class=\"pre\">gulp-rename</span> <span class=\"pre\">gulp-notify</span> del riot <span class=\"pre\">uglify-js</span> error jshint\n`</tt></p>\n<p>Run:</p>\n<p><tt>`\ngulp default\n`</tt></p>\n<p>to compile <cite>uliweb-ui.css</cite> and <cite>uliweb-ui.js</cite> to <cite>uliweb_ui/static/modules</cite>, also\ncompile tags to <cite>uliweb_ui/static/modules/tags</cite></p>\n<p>## make jsmodules.js</p>\n<p><cite>jsmodules.js</cite> is used to combine js modules defined in <cite>settings.ini</cite> into a javascript\nfile, so that <cite>head.load</cite> can load them via <cite>load([\u201cmodule1\u201d, \u201cmodule2\u201d], function(){})</cite>.\nYou can get it through command line <cite>uliweb jsmodule -a uliweb_ui</cite> to recreate it and save\nit to <cite>uliweb_ui/static/jsmodules.js</cite>. Because uliweb_ui is just an app, but not an application,\nso you should run <cite>jsmodule</cite> command in a project directory, so you can make a simple\nproject, and just add <cite>uliweb_ui</cite> to <cite>INSTALLED_APPS</cite>, and run the command.</p>\n<p>Uliweb_ui is already create <cite>jsmodule.js</cite> for you. But if you want to add more ui components\nto settings.ini, and also want to use <cite>load</cite> to process them, you should recreate <cite>jsmodules.js</cite>\nyourself.</p>\n<p>## Concat plugins\nStep.1 Write some configuration in \u2018settings.ini\u2019 of your uliweb project. like that:</p>\n<p><tt>`\n[TEMPLATE_GULP]\nyou_want_name = [ \"plugin name\", ... ]\n`</tt></p>\n<p>Step.2 Enter a command in CLI of your uliweb project</p>\n<p><tt>`\nuliweb gulpplugins <span class=\"pre\">-d</span> app_name\n`</tt></p>\n<p>Then you will find some files in the folder(you_want_name.js &amp;&amp; you_want_name.css)</p>\n<p><tt>`\n<span class=\"pre\">.../your_project/apps/app_name/static/</span>\n`</tt></p>\n<p>Step.3 In the template file, use plugin with command \u201c{{use \u2018plugin name\u2019}}\u201d , you_want_name.js and you_want_name.css will loaded</p>\n\n          </div>"}, "last_serial": 5048159, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dfe3ec603bcbd693ccb303d1f29dadff", "sha256": "fc20130bba3cc1c4746a5e370cbe7ac7718bb2a0251f8bf5e9a5c88c48411c36"}, "downloads": -1, "filename": "uliweb_ui-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dfe3ec603bcbd693ccb303d1f29dadff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13517490, "upload_time": "2019-04-02T09:48:51", "upload_time_iso_8601": "2019-04-02T09:48:51.264265Z", "url": "https://files.pythonhosted.org/packages/2e/c1/8d6571640f2057da3928a420261f5aa407edf78baaa6cb95669216095f6d/uliweb_ui-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2453af7a905f62b9a89c65eb172b4638", "sha256": "6c5dc57da48fbd37bf0069e8a492a81fba63a24fa3acdbaa87fe917782742171"}, "downloads": -1, "filename": "uliweb-ui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2453af7a905f62b9a89c65eb172b4638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12597974, "upload_time": "2019-04-02T09:48:58", "upload_time_iso_8601": "2019-04-02T09:48:58.678742Z", "url": "https://files.pythonhosted.org/packages/27/95/7b5f8b9ca543b8c0344b0e69209fc58213d4ea69e1e3b7c7208b78f08212/uliweb-ui-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfe3ec603bcbd693ccb303d1f29dadff", "sha256": "fc20130bba3cc1c4746a5e370cbe7ac7718bb2a0251f8bf5e9a5c88c48411c36"}, "downloads": -1, "filename": "uliweb_ui-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dfe3ec603bcbd693ccb303d1f29dadff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13517490, "upload_time": "2019-04-02T09:48:51", "upload_time_iso_8601": "2019-04-02T09:48:51.264265Z", "url": "https://files.pythonhosted.org/packages/2e/c1/8d6571640f2057da3928a420261f5aa407edf78baaa6cb95669216095f6d/uliweb_ui-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2453af7a905f62b9a89c65eb172b4638", "sha256": "6c5dc57da48fbd37bf0069e8a492a81fba63a24fa3acdbaa87fe917782742171"}, "downloads": -1, "filename": "uliweb-ui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2453af7a905f62b9a89c65eb172b4638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12597974, "upload_time": "2019-04-02T09:48:58", "upload_time_iso_8601": "2019-04-02T09:48:58.678742Z", "url": "https://files.pythonhosted.org/packages/27/95/7b5f8b9ca543b8c0344b0e69209fc58213d4ea69e1e3b7c7208b78f08212/uliweb-ui-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:11 2020"}