{"info": {"author": "Anish Pandey,Sushil Ghimire", "author_email": "sharmaanix@gmail.com , sushil79g@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<h1>This projects aims to build a library for all the NLP processes for Nepali Language.</h1>\n\n<h2>Getting the module</h2>\n\n```bash\ngit clone git@github.com:sushil79g/Nepali_nlp.git\ncd Nepali_nlp/nepali_nlp\n```\n\n<h3>Loading Embedding</h3>\n\n```python\nfrom Embedding import Embeddings\nword_vec = Embeddings().load_large_vector()\n#word_vec = Embeddings().load_vector() #For small Embedding\n#from fasttext_embedding import Fasttext\n#word_vec = Fasttext().load()\n```\n\n<h3>For Nepali Synonym</h3>\n\n```python\nfrom synonym import Synonym\nSynonym().raw_synonym(word = '\u092e\u093e\u092f\u093e',word_vec=word_vec) #method: 1\n#output -> \u0938\u094d\u0928\u0947\u0939','\u092a\u094d\u0930\u0947\u092e','\u0906\u0926\u0930','\u092e\u093e\u092f\u093e\u0901','\u0926\u092f\u093e','\u092e\u093e\u092f\u093e\u0932\u0941','\u0936\u094d\u0930\u0926\u094d\u0927\u093e','\u0906\u0924\u094d\u092e\u093f\u092f\u0924\u093e','\u0938\u094d\u092a\u0930\u094d\u0936','\u0924\u093f\u092e\u0940\nSynonym().filter_synonym(word = '\u0938\u093e\u0925\u0940',word_vec=word_vec) #method: 2\n#output -> '\u092d\u093e\u0907\u0939\u0930\u0942','\u0938\u0939\u092a\u093e\u0920\u0940','\u092a\u094d\u0930\u0947\u092e\u0940','\u0926\u093e\u0907','\u092a\u094d\u0930\u0947\u092e\u093f','\u092c\u0939\u093f\u0928\u0940'\n```\n<h3>Word-spell corrector</h3>\n\n```python\nfrom spellcheck import Corrector\nCorrector().corrector(word='\u0938\u0941\u0936\u0932') #In a very raw stage for now.\n#output-> ['\u0938\u0941\u0936\u0940\u0932', '\u0938\u0941\u0936\u0940\u0932']\n```\n<h3>Nepali text summerizer</h3>\n\n```python\nfrom summerization import Summerize\nSummerize().show_summary(word_vec,text, length_sentence_predict=5)\n```\n<h3>Nepali unicode to Devnagiri Font</h3>\n\n```python\nfrom unicode_nepali import Unicode\ntext = 'ma ghara jaanchhu'\nUnicode().unicode_word(text) #output-> '\u092e \u0918\u0930 \u091c\u093e\u0928\u094d\u091b\u0941'\n```\n<h3>Preeti-font character to Devnagiri Font</h3>\n\n```python\nfrom preeti_unicode import preeti\nunicode_word = 'g]kfnL'\nprint(preeti(unicode_word)) #output-> \u0928\u0947\u092a\u093e\u0932\u0940\n```\n<h3>OCR(optical character reader)</h3>\n\n```python\nfrom ocr import OCR\ntext = OCR(image_location)\n```\n<h3>Nepali Tokenizer</h3>\n\n```python\nfrom Nepali_tokenizer import Tokenizer\nTokenizer().sentence_tokenize(text) #To tokenize sentence\nTokenizer().word_tokenize(text) #To tokenize word\nTokenizer().character_tokenize(text) #To tokenize character\n```\n\n<h3>Nepali sentence similarity</h3>\n\n```python\nfrom sentence_similar import  Avg_vector_similar\nsentences = [\"\u0915\u0941\u092a\u094b\u0937\u0923\u0915\u0948 \u0915\u093e\u0930\u0923 \u0936\u093e\u0930\u0940\u0930\u093f\u0915 \u0930 \u092e\u093e\u0928\u0938\u093f\u0915 \u0930\u0941\u092a\u092e\u093e \u0915\u092e\u091c\u094b\u0930 \u092e\u093e\u0924\u094d\u0930 \u0939\u094b\u0907\u0928, \u0905\u0915\u093e\u0932\u092e\u0948 \u091c\u094d\u092f\u093e\u0928 \u092a\u0928\u093f \u0917\u0941\u092e\u093e\u0909\u0928\u0941\u0915\u094b \u092a\u0930\u0947\u0915\u094b \u0938\u092e\u093e\u091a\u093e\u0930 \u092c\u0917\u094d\u0930\u0947\u0932\u094d\u0924\u0940 \u0938\u0941\u0928\u094d\u0928 \u0938\u0915\u093f\u0928\u094d\u091b\",\"\u0915\u0930\u094d\u0923\u093e\u0932\u0940 \u092a\u094d\u0930\u0926\u0947\u0936 \u0938\u093e\u092e\u093e\u091c\u093f\u0915 \u0935\u093f\u0915\u093e\u0938 \u092e\u0928\u094d\u0924\u094d\u0930\u093e\u0932\u092f\u0932\u0947 \u0909\u092a\u0932\u092c\u094d\u0927 \u0917\u0930\u093e\u090f\u0915\u094b \u0924\u0925\u094d\u092f\u093e\u0902\u0915\u0932\u0947 \u0915\u0930\u094d\u0923\u093e\u0932\u0940\u092e\u093e \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u0930\u094d\u0937 \u091c\u0928\u094d\u092e\u093f\u090f\u0915\u093e \u096b \u0935\u0930\u094d\u0937\u092e\u0941\u0928\u0940\u0915\u093e \u092c\u093e\u0932\u092c\u093e\u0932\u093f\u0915\u093e \u0967 \u0939\u091c\u093e\u0930 \u091c\u0928\u093e\u092e\u0927\u094d\u092f\u0947 \u096b\u096e \u091c\u0928\u093e\u0932\u0947 \u091c\u094d\u092f\u093e\u0928 \u0917\u0941\u092e\u093e\u0909\u0901\u0926\u0948 \u0906\u090f\u0915\u094b \u0926\u0947\u0916\u093e\u090f\u0915\u094b \u091b\"]\nAvg_vector_similar().pair_similarity(word_vec, sentences) #output-> 0.6817289590835571\n```\n\n<h3>Nepali new-portal Scrapper (onlinekhabar and ekantipur for now)</h3>\n\n```python\nfrom news_scrap import extract_news\nnews_link = 'https://www.onlinekhabar.com/2019/12/821094'\ntitle, news = extract_news(news_link) #onlinekhabar and ekantipur is supported at the moment.\n```\n<h3>Show latest news summary</h3>\n\n```python\nfrom news_latest import Update_news\ntitle, links, summerized_news = Update_news().show_latest(word_vec=word_vec,portal='onlinekhabar',number_of_news=5) #ekantipur portal is also supported\n```\n\nTODOs:</br>\n- [x] Nepali Embeddings \n- [x] Tokenizers (sentence, word, character) \n- [x] Stop Words\n- [x] Nepali Words Collection \n- [x] Nepali Word synonym\n- [x] Roman Nepali to Nepali\n- [x] Nepali OCR\n- [x] Summerization \n- [x] Pos_tag\n- [x] Sentence similarity score\n- [ ] Translation(Nepali<->English)(Currently)\n- [ ] Spell correction (Currently)\n- [ ] Named Entity Recognition", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/sushil79g/Nepali_nlp/archive/0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sushil79g/Nepali_nlp", "keywords": "NLP ml ai nepali", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Nepali-nlp", "package_url": "https://pypi.org/project/Nepali-nlp/", "platform": "", "project_url": "https://pypi.org/project/Nepali-nlp/", "project_urls": {"Bug Reports": "https://github.com/sushil79g/Nepali_nlp/issues", "Download": "https://github.com/sushil79g/Nepali_nlp/archive/0.1.tar.gz", "Homepage": "https://github.com/sushil79g/Nepali_nlp", "Source": "https://github.com/sushil79g/Nepali_nlp"}, "release_url": "https://pypi.org/project/Nepali-nlp/0.1/", "requires_dist": null, "requires_python": "", "summary": "Natural language processing library for Nepali langauge", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>&lt;h1&gt;This projects aims to build a library for all the NLP processes for Nepali Language.&lt;/h1&gt;</p>\n<p>&lt;h2&gt;Getting the module&lt;/h2&gt;</p>\n<p><tt>`bash\ngit clone git@github.com:sushil79g/Nepali_nlp.git\ncd Nepali_nlp/nepali_nlp\n`</tt></p>\n<p>&lt;h3&gt;Loading Embedding&lt;/h3&gt;</p>\n<p><tt>`python\nfrom Embedding import Embeddings\nword_vec = <span class=\"pre\">Embeddings().load_large_vector()</span>\n#word_vec = <span class=\"pre\">Embeddings().load_vector()</span> #For small Embedding\n#from fasttext_embedding import Fasttext\n#word_vec = <span class=\"pre\">Fasttext().load()</span>\n`</tt></p>\n<p>&lt;h3&gt;For Nepali Synonym&lt;/h3&gt;</p>\n<p><tt>`python\nfrom synonym import Synonym\n<span class=\"pre\">Synonym().raw_synonym(word</span> = <span class=\"pre\">'\u092e\u093e\u092f\u093e',word_vec=word_vec)</span> #method: 1\n#output <span class=\"pre\">-&gt;</span> <span class=\"pre\">\u0938\u094d\u0928\u0947\u0939','\u092a\u094d\u0930\u0947\u092e','\u0906\u0926\u0930','\u092e\u093e\u092f\u093e\u0901','\u0926\u092f\u093e','\u092e\u093e\u092f\u093e\u0932\u0941','\u0936\u094d\u0930\u0926\u094d\u0927\u093e','\u0906\u0924\u094d\u092e\u093f\u092f\u0924\u093e','\u0938\u094d\u092a\u0930\u094d\u0936','\u0924\u093f\u092e\u0940</span>\n<span class=\"pre\">Synonym().filter_synonym(word</span> = <span class=\"pre\">'\u0938\u093e\u0925\u0940',word_vec=word_vec)</span> #method: 2\n#output <span class=\"pre\">-&gt;</span> <span class=\"pre\">'\u092d\u093e\u0907\u0939\u0930\u0942','\u0938\u0939\u092a\u093e\u0920\u0940','\u092a\u094d\u0930\u0947\u092e\u0940','\u0926\u093e\u0907','\u092a\u094d\u0930\u0947\u092e\u093f','\u092c\u0939\u093f\u0928\u0940'</span>\n`</tt>\n&lt;h3&gt;Word-spell corrector&lt;/h3&gt;</p>\n<p><tt>`python\nfrom spellcheck import Corrector\n<span class=\"pre\">Corrector().corrector(word='\u0938\u0941\u0936\u0932')</span> #In a very raw stage for now.\n<span class=\"pre\">#output-&gt;</span> ['\u0938\u0941\u0936\u0940\u0932', '\u0938\u0941\u0936\u0940\u0932']\n`</tt>\n&lt;h3&gt;Nepali text summerizer&lt;/h3&gt;</p>\n<p><tt>`python\nfrom summerization import Summerize\n<span class=\"pre\">Summerize().show_summary(word_vec,text,</span> length_sentence_predict=5)\n`</tt>\n&lt;h3&gt;Nepali unicode to Devnagiri Font&lt;/h3&gt;</p>\n<p><tt>`python\nfrom unicode_nepali import Unicode\ntext = 'ma ghara jaanchhu'\n<span class=\"pre\">Unicode().unicode_word(text)</span> <span class=\"pre\">#output-&gt;</span> '\u092e \u0918\u0930 \u091c\u093e\u0928\u094d\u091b\u0941'\n`</tt>\n&lt;h3&gt;Preeti-font character to Devnagiri Font&lt;/h3&gt;</p>\n<p><tt>`python\nfrom preeti_unicode import preeti\nunicode_word = 'g]kfnL'\nprint(preeti(unicode_word)) <span class=\"pre\">#output-&gt;</span> \u0928\u0947\u092a\u093e\u0932\u0940\n`</tt>\n&lt;h3&gt;OCR(optical character reader)&lt;/h3&gt;</p>\n<p><tt>`python\nfrom ocr import OCR\ntext = OCR(image_location)\n`</tt>\n&lt;h3&gt;Nepali Tokenizer&lt;/h3&gt;</p>\n<p><tt>`python\nfrom Nepali_tokenizer import Tokenizer\n<span class=\"pre\">Tokenizer().sentence_tokenize(text)</span> #To tokenize sentence\n<span class=\"pre\">Tokenizer().word_tokenize(text)</span> #To tokenize word\n<span class=\"pre\">Tokenizer().character_tokenize(text)</span> #To tokenize character\n`</tt></p>\n<p>&lt;h3&gt;Nepali sentence similarity&lt;/h3&gt;</p>\n<p><tt>`python\nfrom sentence_similar import\u00a0 Avg_vector_similar\nsentences = [\"\u0915\u0941\u092a\u094b\u0937\u0923\u0915\u0948 \u0915\u093e\u0930\u0923 \u0936\u093e\u0930\u0940\u0930\u093f\u0915 \u0930 \u092e\u093e\u0928\u0938\u093f\u0915 \u0930\u0941\u092a\u092e\u093e \u0915\u092e\u091c\u094b\u0930 \u092e\u093e\u0924\u094d\u0930 \u0939\u094b\u0907\u0928, \u0905\u0915\u093e\u0932\u092e\u0948 \u091c\u094d\u092f\u093e\u0928 \u092a\u0928\u093f \u0917\u0941\u092e\u093e\u0909\u0928\u0941\u0915\u094b \u092a\u0930\u0947\u0915\u094b \u0938\u092e\u093e\u091a\u093e\u0930 \u092c\u0917\u094d\u0930\u0947\u0932\u094d\u0924\u0940 \u0938\u0941\u0928\u094d\u0928 <span class=\"pre\">\u0938\u0915\u093f\u0928\u094d\u091b\",\"\u0915\u0930\u094d\u0923\u093e\u0932\u0940</span> \u092a\u094d\u0930\u0926\u0947\u0936 \u0938\u093e\u092e\u093e\u091c\u093f\u0915 \u0935\u093f\u0915\u093e\u0938 \u092e\u0928\u094d\u0924\u094d\u0930\u093e\u0932\u092f\u0932\u0947 \u0909\u092a\u0932\u092c\u094d\u0927 \u0917\u0930\u093e\u090f\u0915\u094b <span class=\"pre\">\u0924\u0925\u094d\u092f\u093e\u0902\u0915\u0932\u0947</span> \u0915\u0930\u094d\u0923\u093e\u0932\u0940\u092e\u093e \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u0930\u094d\u0937 \u091c\u0928\u094d\u092e\u093f\u090f\u0915\u093e \u096b \u0935\u0930\u094d\u0937\u092e\u0941\u0928\u0940\u0915\u093e \u092c\u093e\u0932\u092c\u093e\u0932\u093f\u0915\u093e \u0967 \u0939\u091c\u093e\u0930 \u091c\u0928\u093e\u092e\u0927\u094d\u092f\u0947 \u096b\u096e \u091c\u0928\u093e\u0932\u0947 \u091c\u094d\u092f\u093e\u0928 \u0917\u0941\u092e\u093e\u0909\u0901\u0926\u0948 \u0906\u090f\u0915\u094b \u0926\u0947\u0916\u093e\u090f\u0915\u094b \u091b\"]\n<span class=\"pre\">Avg_vector_similar().pair_similarity(word_vec,</span> sentences) <span class=\"pre\">#output-&gt;</span> 0.6817289590835571\n`</tt></p>\n<p>&lt;h3&gt;Nepali new-portal Scrapper (onlinekhabar and ekantipur for now)&lt;/h3&gt;</p>\n<p><tt>`python\nfrom news_scrap import extract_news\nnews_link = <span class=\"pre\">'https://www.onlinekhabar.com/2019/12/821094'</span>\ntitle, news = extract_news(news_link) #onlinekhabar and ekantipur is supported at the moment.\n`</tt>\n&lt;h3&gt;Show latest news summary&lt;/h3&gt;</p>\n<p><tt>`python\nfrom news_latest import Update_news\ntitle, links, summerized_news = <span class=\"pre\">Update_news().show_latest(word_vec=word_vec,portal='onlinekhabar',number_of_news=5)</span> #ekantipur portal is also supported\n`</tt></p>\n<p>TODOs:&lt;/br&gt;\n- [x] Nepali Embeddings\n- [x] Tokenizers (sentence, word, character)\n- [x] Stop Words\n- [x] Nepali Words Collection\n- [x] Nepali Word synonym\n- [x] Roman Nepali to Nepali\n- [x] Nepali OCR\n- [x] Summerization\n- [x] Pos_tag\n- [x] Sentence similarity score\n- [ ] Translation(Nepali&lt;-&gt;English)(Currently)\n- [ ] Spell correction (Currently)\n- [ ] Named Entity Recognition</p>\n\n          </div>"}, "last_serial": 6833166, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4c23d8d338f2c5a730b702446463eda3", "sha256": "9f30a7b9ee71a2c1c47f715f3a26ee5fdcfaa9884be1335a61b3c8377363dac0"}, "downloads": -1, "filename": "Nepali_nlp-0.1.tar.gz", "has_sig": false, "md5_digest": "4c23d8d338f2c5a730b702446463eda3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13731, "upload_time": "2020-03-18T03:41:10", "upload_time_iso_8601": "2020-03-18T03:41:10.916679Z", "url": "https://files.pythonhosted.org/packages/a8/4e/00f74a3b5e97ed82995b621279023fa1fe63e8b4ff79805d2aa9cf899b35/Nepali_nlp-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c23d8d338f2c5a730b702446463eda3", "sha256": "9f30a7b9ee71a2c1c47f715f3a26ee5fdcfaa9884be1335a61b3c8377363dac0"}, "downloads": -1, "filename": "Nepali_nlp-0.1.tar.gz", "has_sig": false, "md5_digest": "4c23d8d338f2c5a730b702446463eda3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13731, "upload_time": "2020-03-18T03:41:10", "upload_time_iso_8601": "2020-03-18T03:41:10.916679Z", "url": "https://files.pythonhosted.org/packages/a8/4e/00f74a3b5e97ed82995b621279023fa1fe63e8b4ff79805d2aa9cf899b35/Nepali_nlp-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:27 2020"}