{"info": {"author": "Stephan Zevenhuizen", "author_email": "S.J.M.Zevenhuizen@uu.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Python is a great language to use for automatic processing of scientific data.\nScanning probe microscopes (SPM) produce scientific data in the form of images,\nimages of surfaces that can have atomic or molecular resolutions. The microscope\nproduces surfaces that are not level. Before you can analyse the surface, the\nsurface must first be levelled (flattened). This Python library provides\nroutines to flatten the surface and to generate statistical data on surface\nstructures. Surfaces with contaminations, step edges and atomic or molecular\nresolution can be handled.\n\nSPIEPy and SPIW - MATLAB Toolbox [`source`_] are related projects. SPIEPy uses\nmany algorithms originally designed by the SPIW project. The performance of\nthese algorithms is discussed in REVIEW OF SCIENTIFIC INSTRUMENTS **84**, 113701\n(2013) [`DOI`_].\n\n.. _source: http://sourceforge.net/projects/spiw/\n.. _DOI: http://dx.doi.org/10.1063/1.4827076\n\nThe library SPIEPy has the packages spiepy with the modules for the tasks\ndescribed above and spiepy.demo to generate sample data. With this sample data,\nyou can familiarize yourself with SPIEPy.\n\nDependencies\n------------\nSPIEPy requires the NumPy library (http://www.numpy.org), SciPy library\n(http://scipy.org) and the Matplotlib library (http://matplotlib.org).\n\nInstallation\n------------\nUsing pip::\n\n    > pip install SPIEPy\n\nCLASSES\n-------\nIm\n    SPIEPy_image_structure, set attribute ``data`` with a 2D ndarray of image\n    data, set all other attributes with the metadata of the image.\n\nFUNCTIONS\n---------\nFlattening functions:\n\n- flatten_by_iterate_mask\n- flatten_by_peaks\n- flatten_poly_xy\n- flatten_xy\n\nLocating functions:\n\n- locate_masked_points_and_remove\n- locate_regions\n- locate_steps\n- locate_troughs_and_peaks\n\nMasking functions:\n\n- mask_by_mean\n- mask_by_troughs_and_peaks\n- mask_tidy\n\nMeasuring functions:\n\n- measure_feature_properties\n\nDemo functions:\n\n- list_demo_files\n- load_demo_file\n\nDATA\n----\nNANOMAP\n    Colormap which is the standard orange colormap used my most SPM software.\n\nHelp\n----\nOn the interpreter console use the built-in help function to get the help page\nof the module, function, ...\n\n.. code-block:: pycon\n\n    >>> import spiepy, spiepy.demo\n    >>> help(spiepy)\n    ...\n    >>> help(spiepy.demo)\n    ...\n    >>> help(spiepy.flatten_by_iterate_mask)\n    ...\n\n**Documentation:** http://www.staff.science.uu.nl/~zeven101/SPIEPy/\n\nExample usage\n-------------\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n    #\n    #   Copyright \u00a9 2014 - 2017 Stephan Zevenhuizen\n    #   Flattening terrace image, (09-10-2017).\n    #\n\n    import spiepy, spiepy.demo\n    import matplotlib.pyplot as plt\n    import numpy as np\n\n    im = spiepy.Im()\n    demos = spiepy.demo.list_demo_files()\n    print(demos)\n    im.data = spiepy.demo.load_demo_file(demos[1])\n\n    plt.imshow(im.data, cmap = spiepy.NANOMAP, origin = 'lower')\n    print('Original image.')\n    plt.show()\n\n    im_out, _ = spiepy.flatten_xy(im)\n    plt.imshow(im_out.data, cmap = spiepy.NANOMAP, origin = 'lower')\n    print('Preflattened image.')\n    plt.show()\n\n    mask = spiepy.locate_steps(im_out, 4)\n    plot_image = np.ma.array(im_out.data, mask = mask)\n    palette = spiepy.NANOMAP\n    palette.set_bad('#00ff00', 1.0)\n    plt.imshow(plot_image, cmap = palette, origin = 'lower')\n    print('Preflattened image, mask.')\n    plt.show()\n\n    im_final, _ = spiepy.flatten_xy(im, mask)\n    plt.imshow(im_final.data, cmap = spiepy.NANOMAP, origin = 'lower')\n    print('Flattened image.')\n    plt.show()\n\n    y, x = np.histogram(im_out.data, bins = 200)\n    ys, xs = np.histogram(im_final.data, bins = 200)\n    fig, ax = plt.subplots()\n    ax.plot(x[:-1], y, '-b', label = 'Standard plane flattening')\n    ax.plot(xs[:-1], ys, '-r', label = 'SPIEPy stepped plane flattening')\n    ax.legend(loc = 2, fancybox = True, framealpha = 0.2)\n    ax.set_xlabel('z (nm)')\n    ax.set_ylabel('count')\n    plt.show()\n\nAuthors & affiliations\n----------------------\nStephan J. M. Zevenhuizen [#]_\n\n..  [#] Condensed Matter and Interfaces, Debye Institute for Nanomaterials\n    Science, Utrecht University, Utrecht, The Netherlands.\n\n\n", "description_content_type": null, "docs_url": "https://pythonhosted.org/SPIEPy/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/SPIEPy/", "keywords": "SPM scanning probe microscopy image analysis flattening nano nanotechnology", "license": "The license file is in the package.", "maintainer": "", "maintainer_email": "", "name": "SPIEPy", "package_url": "https://pypi.org/project/SPIEPy/", "platform": "", "project_url": "https://pypi.org/project/SPIEPy/", "project_urls": {"Homepage": "https://pypi.org/project/SPIEPy/"}, "release_url": "https://pypi.org/project/SPIEPy/0.2.0/", "requires_dist": ["matplotlib", "numpy", "scipy"], "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "summary": "SPIEPy (Scanning Probe Image Enchanter using Python) is a Python library to improve automatic processing of SPM images.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python is a great language to use for automatic processing of scientific data.\nScanning probe microscopes (SPM) produce scientific data in the form of images,\nimages of surfaces that can have atomic or molecular resolutions. The microscope\nproduces surfaces that are not level. Before you can analyse the surface, the\nsurface must first be levelled (flattened). This Python library provides\nroutines to flatten the surface and to generate statistical data on surface\nstructures. Surfaces with contaminations, step edges and atomic or molecular\nresolution can be handled.</p>\n<p>SPIEPy and SPIW - MATLAB Toolbox [<a href=\"http://sourceforge.net/projects/spiw/\" rel=\"nofollow\">source</a>] are related projects. SPIEPy uses\nmany algorithms originally designed by the SPIW project. The performance of\nthese algorithms is discussed in REVIEW OF SCIENTIFIC INSTRUMENTS <strong>84</strong>, 113701\n(2013) [<a href=\"http://dx.doi.org/10.1063/1.4827076\" rel=\"nofollow\">DOI</a>].</p>\n<p>The library SPIEPy has the packages spiepy with the modules for the tasks\ndescribed above and spiepy.demo to generate sample data. With this sample data,\nyou can familiarize yourself with SPIEPy.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>SPIEPy requires the NumPy library (<a href=\"http://www.numpy.org\" rel=\"nofollow\">http://www.numpy.org</a>), SciPy library\n(<a href=\"http://scipy.org\" rel=\"nofollow\">http://scipy.org</a>) and the Matplotlib library (<a href=\"http://matplotlib.org\" rel=\"nofollow\">http://matplotlib.org</a>).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using pip:</p>\n<pre>&gt; pip install SPIEPy\n</pre>\n</div>\n<div id=\"classes\">\n<h2>CLASSES</h2>\n<dl>\n<dt>Im</dt>\n<dd>SPIEPy_image_structure, set attribute <tt>data</tt> with a 2D ndarray of image\ndata, set all other attributes with the metadata of the image.</dd>\n</dl>\n</div>\n<div id=\"functions\">\n<h2>FUNCTIONS</h2>\n<p>Flattening functions:</p>\n<ul>\n<li>flatten_by_iterate_mask</li>\n<li>flatten_by_peaks</li>\n<li>flatten_poly_xy</li>\n<li>flatten_xy</li>\n</ul>\n<p>Locating functions:</p>\n<ul>\n<li>locate_masked_points_and_remove</li>\n<li>locate_regions</li>\n<li>locate_steps</li>\n<li>locate_troughs_and_peaks</li>\n</ul>\n<p>Masking functions:</p>\n<ul>\n<li>mask_by_mean</li>\n<li>mask_by_troughs_and_peaks</li>\n<li>mask_tidy</li>\n</ul>\n<p>Measuring functions:</p>\n<ul>\n<li>measure_feature_properties</li>\n</ul>\n<p>Demo functions:</p>\n<ul>\n<li>list_demo_files</li>\n<li>load_demo_file</li>\n</ul>\n</div>\n<div id=\"data\">\n<h2>DATA</h2>\n<dl>\n<dt>NANOMAP</dt>\n<dd>Colormap which is the standard orange colormap used my most SPM software.</dd>\n</dl>\n</div>\n<div id=\"help\">\n<h2>Help</h2>\n<p>On the interpreter console use the built-in help function to get the help page\nof the module, function, \u2026</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">spiepy</span><span class=\"o\">,</span> <span class=\"nn\">spiepy.demo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">spiepy</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">demo</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">flatten_by_iterate_mask</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n</pre>\n<p><strong>Documentation:</strong> <a href=\"http://www.staff.science.uu.nl/~zeven101/SPIEPy/\" rel=\"nofollow\">http://www.staff.science.uu.nl/~zeven101/SPIEPy/</a></p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<pre><span class=\"c1\"># -*- coding: utf-8 -*-</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#   Copyright \u00a9 2014 - 2017 Stephan Zevenhuizen</span>\n<span class=\"c1\">#   Flattening terrace image, (09-10-2017).</span>\n<span class=\"c1\">#</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">spiepy</span><span class=\"o\">,</span> <span class=\"nn\">spiepy.demo</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">Im</span><span class=\"p\">()</span>\n<span class=\"n\">demos</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">list_demo_files</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">demos</span><span class=\"p\">)</span>\n<span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">demo</span><span class=\"o\">.</span><span class=\"n\">load_demo_file</span><span class=\"p\">(</span><span class=\"n\">demos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmap</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">NANOMAP</span><span class=\"p\">,</span> <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Original image.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">im_out</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">flatten_xy</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">im_out</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmap</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">NANOMAP</span><span class=\"p\">,</span> <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Preflattened image.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">locate_steps</span><span class=\"p\">(</span><span class=\"n\">im_out</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">plot_image</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ma</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">im_out</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">palette</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">NANOMAP</span>\n<span class=\"n\">palette</span><span class=\"o\">.</span><span class=\"n\">set_bad</span><span class=\"p\">(</span><span class=\"s1\">'#00ff00'</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">plot_image</span><span class=\"p\">,</span> <span class=\"n\">cmap</span> <span class=\"o\">=</span> <span class=\"n\">palette</span><span class=\"p\">,</span> <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Preflattened image, mask.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">im_final</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">flatten_xy</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">im_final</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmap</span> <span class=\"o\">=</span> <span class=\"n\">spiepy</span><span class=\"o\">.</span><span class=\"n\">NANOMAP</span><span class=\"p\">,</span> <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Flattened image.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">im_out</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">histogram</span><span class=\"p\">(</span><span class=\"n\">im_final</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'-b'</span><span class=\"p\">,</span> <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">'Standard plane flattening'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">ys</span><span class=\"p\">,</span> <span class=\"s1\">'-r'</span><span class=\"p\">,</span> <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s1\">'SPIEPy stepped plane flattening'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">fancybox</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">framealpha</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s1\">'z (nm)'</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"authors-affiliations\">\n<h2>Authors &amp; affiliations</h2>\n<p>Stephan J. M. Zevenhuizen <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a></p>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Condensed Matter and Interfaces, Debye Institute for Nanomaterials\nScience, Utrecht University, Utrecht, The Netherlands.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 3236127, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0d2bab1967802d37277baf37e847506d", "sha256": "4d803a433e2709866df9e4e52d62b8c90db197fef66b5b59bee530fc65c51c5e"}, "downloads": -1, "filename": "SPIEPy-0.1.0.zip", "has_sig": false, "md5_digest": "0d2bab1967802d37277baf37e847506d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4456216, "upload_time": "2014-12-09T09:00:02", "upload_time_iso_8601": "2014-12-09T09:00:02.550932Z", "url": "https://files.pythonhosted.org/packages/f4/4d/1e5412fdbe8ccceb33a727fea107031621e720e58ebf0f20d57b0d48ec88/SPIEPy-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "46bed4e1eae51e2d3ba03255c7874907", "sha256": "7413257c8e455b017fc487c5c4c7a162e4e751366edb11c711484fe8b28636a4"}, "downloads": -1, "filename": "SPIEPy-0.1.1.zip", "has_sig": false, "md5_digest": "46bed4e1eae51e2d3ba03255c7874907", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4444825, "upload_time": "2014-12-17T16:20:16", "upload_time_iso_8601": "2014-12-17T16:20:16.317278Z", "url": "https://files.pythonhosted.org/packages/61/4e/a5283c96e09d0a298d462d283f49c6b513cc9e9dbb6469d9d0dd26496642/SPIEPy-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d531af18354e655608f77a2e4eaa7076", "sha256": "193f5408e1d31516d14bff7acd1a153d10ca5071870c2ac48ac552373f3632f4"}, "downloads": -1, "filename": "SPIEPy-0.1.2.zip", "has_sig": false, "md5_digest": "d531af18354e655608f77a2e4eaa7076", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4444891, "upload_time": "2014-12-20T14:12:48", "upload_time_iso_8601": "2014-12-20T14:12:48.942070Z", "url": "https://files.pythonhosted.org/packages/18/12/d89d6642419dd60e11cfd98ce72214a1601989ddaaf999ce5018b6b5a46c/SPIEPy-0.1.2.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2dfcf53592706a9f2777bf2f6067360e", "sha256": "d21fd2c56c03ca54d3248dde8c64bb7023df11ef789cb655c3712018e36c0f31"}, "downloads": -1, "filename": "SPIEPy-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dfcf53592706a9f2777bf2f6067360e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 4442674, "upload_time": "2017-10-09T12:04:35", "upload_time_iso_8601": "2017-10-09T12:04:35.064070Z", "url": "https://files.pythonhosted.org/packages/65/25/2dcf99f6d5ef48ec347da29d54f74d57b488a493439f90f8809e8bd74031/SPIEPy-0.2.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2dfcf53592706a9f2777bf2f6067360e", "sha256": "d21fd2c56c03ca54d3248dde8c64bb7023df11ef789cb655c3712018e36c0f31"}, "downloads": -1, "filename": "SPIEPy-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dfcf53592706a9f2777bf2f6067360e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 4442674, "upload_time": "2017-10-09T12:04:35", "upload_time_iso_8601": "2017-10-09T12:04:35.064070Z", "url": "https://files.pythonhosted.org/packages/65/25/2dcf99f6d5ef48ec347da29d54f74d57b488a493439f90f8809e8bd74031/SPIEPy-0.2.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:04:52 2020"}