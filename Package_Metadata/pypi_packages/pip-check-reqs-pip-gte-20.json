{"info": {"author": "Richard Jonees", "author_email": "r1chardj0n3s@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "Fork details\n============\n\nThis is a fork of ``r1chardj0n3s/pip-check-reqs``.\nI have no intention of maintaining this in the long-term.\nThis exists to work around a current bug, at https://github.com/r1chardj0n3s/pip-check-reqs/pull/22,\nand to publish a fixed version to PyPI.\n\npip-check-reqs\n==============\n\nIt happens: you start using a module in your project and it works and you\ndon't realise that it's only being included in your `virtualenv`_ because\nit's a dependency of a package you're using. pip-missing-reqs finds those\nmodules so you can include them in the `requirements.txt`_ for the project.\n\nAlternatively, you have a long-running project that has some packages in\nrequirements.txt that are no longer actively used in the codebase. The\npip-extra-reqs tool will find those modules so you can remove them.\n\n.. _`virtualenv`: https://virtualenv.pypa.io/en/latest/\n.. _`requirements.txt`: https://pip.pypa.io/en/latest/user_guide.html#requirements-files\n\nAssuming your project follows a layout like the suggested `sample project`_::\n\n    setup.py\n    setup.cfg\n    requirements.txt\n    sample/__init__.py\n    sample/sample.py\n    sample/tests/test_sample.py\n\n.. _`sample project`: https://packaging.python.org/en/latest/tutorial.html#creating-your-own-project\n\nBasic usage, running in your project directory::\n\n    <activate virtualenv for your project>\n    pip-missing-reqs --ignore-file=sample/tests/* sample\n    pip-extra-reqs --ignore-file=sample/tests/* sample\n\nThis will find all imports in the code in \"sample\" and check that the\npackages those modules belong to are in the requirements.txt file.\n\nAdditionally it is possible to check that there are no dependencies in\nrequirements.txt that are then unused in the project::\n\n    <activate virtualenv for your project>\n    pip-extra-reqs --ignore-file=sample/tests/* sample\n\nThis would find anything that is listed in requirements.txt but that is not\nimported by sample.\n\nSample tox.ini configuration\n----------------------------\n\nTo make your life easier, copy something like this into your tox.ini::\n\n    [testenv:pip-check-reqs]\n    deps=-rrequirements.txt\n    commands=\n        pip-missing-reqs --ignore-file=sample/tests/* sample\n        pip-extra-reqs --ignore-file=sample/tests/* sample\n\n\nExcluding test files (or others) from this check\n------------------------------------------------\n\nYour test files will sometimes be present in the same directory as your\napplication source (\"sample\" in the above examples). The requirements for\nthose tests generally should not be in the requirements.txt file, and you\ndon't want this tool to generate false hits for those.\n\nYou may exclude those test files from your check using the `--ignore-file`\noption (shorthand is `-f`). Multiple instances of the option are allowed.\n\n\nExcluding modules from the check\n--------------------------------\n\nIf your project has modules which are conditionally imported, or requirements\nwhich are conditionally included, you may exclude certain modules from the\ncheck by name (or glob pattern) using `--ignore-module` (shorthand is `-m`)::\n\n    # ignore the module spam\n    pip-missing-reqs --ignore-module=spam sample\n    # ignore the whole package spam as well\n    pip-missing-reqs --ignore-module=spam --ignore-module=spam.* sample\n\n\nWith Thanks To\n--------------\n\nJosh Hesketh -- who refactored code and contributed the pip-extra-reqs tool.\n\nWil Cooley -- who handled the removal of normalize_name and fixed some bugs.\n\nRelease History\n---------------\n\n2.0.1\n\n- handled removal of normalize_name from pip.utils\n- handle packages with no files\n\n2.0 **renamed package to pip_check_reqs**\n\n- added tool pip-extra-reqs to find packages installed but not used\n  (contributed by Josh Hesketh)\n\n1.2.1\n\n- relax requirement to 6.0+\n\n1.2.0\n\n- bumped pip requirement to 6.0.8+\n- updated use of pip internals to match that version\n\n1.1.9\n\n- test fixes and cleanup\n- remove hard-coded simplejson debugging behaviour\n\n1.1.8\n\n- use os.path.realpath to avoid symlink craziness on debian/ubuntu\n\n1.1.7\n\n- tweak to debug output\n\n1.1.6\n\n- add debug (very verbose) run output\n\n1.1.5\n\n- add header to output to make it clearer when in a larger test run\n- fix tests and self-test\n\n1.1.4\n\n- add --version\n- remove debug print from released code lol\n\n1.1.3\n\n- fix program to generate exit code useful for testing\n\n1.1.2\n\n- corrected version of vendored search_packages_info() from pip\n- handle relative imports\n\n1.1.1\n\n- fixed handling of import from __future__\n- self-tested and added own requirements.txt\n- cleaned up usage to require a file or directory to scan (rather than\n  defaulting to \".\")\n- vendored code from pip 1.6dev which fixes bug in search_packages_info\n  until pip 1.6 is released\n\n1.1.0 \n\n- implemented --ignore-module\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/r1chardj0n3s/pip-check-reqs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pip-check-reqs-pip-gte-20", "package_url": "https://pypi.org/project/pip-check-reqs-pip-gte-20/", "platform": "", "project_url": "https://pypi.org/project/pip-check-reqs-pip-gte-20/", "project_urls": {"Homepage": "https://github.com/r1chardj0n3s/pip-check-reqs"}, "release_url": "https://pypi.org/project/pip-check-reqs-pip-gte-20/2.0.3.1/", "requires_dist": ["packaging", "pip (>=19.3)"], "requires_python": "", "summary": "Find packages that should or should not be in requirements for a project", "version": "2.0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"fork-details\">\n<h2>Fork details</h2>\n<p>This is a fork of <tt><span class=\"pre\">r1chardj0n3s/pip-check-reqs</span></tt>.\nI have no intention of maintaining this in the long-term.\nThis exists to work around a current bug, at <a href=\"https://github.com/r1chardj0n3s/pip-check-reqs/pull/22\" rel=\"nofollow\">https://github.com/r1chardj0n3s/pip-check-reqs/pull/22</a>,\nand to publish a fixed version to PyPI.</p>\n</div>\n<div id=\"pip-check-reqs\">\n<h2>pip-check-reqs</h2>\n<p>It happens: you start using a module in your project and it works and you\ndon\u2019t realise that it\u2019s only being included in your <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> because\nit\u2019s a dependency of a package you\u2019re using. pip-missing-reqs finds those\nmodules so you can include them in the <a href=\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\" rel=\"nofollow\">requirements.txt</a> for the project.</p>\n<p>Alternatively, you have a long-running project that has some packages in\nrequirements.txt that are no longer actively used in the codebase. The\npip-extra-reqs tool will find those modules so you can remove them.</p>\n<p>Assuming your project follows a layout like the suggested <a href=\"https://packaging.python.org/en/latest/tutorial.html#creating-your-own-project\" rel=\"nofollow\">sample project</a>:</p>\n<pre>setup.py\nsetup.cfg\nrequirements.txt\nsample/__init__.py\nsample/sample.py\nsample/tests/test_sample.py\n</pre>\n<p>Basic usage, running in your project directory:</p>\n<pre>&lt;activate virtualenv for your project&gt;\npip-missing-reqs --ignore-file=sample/tests/* sample\npip-extra-reqs --ignore-file=sample/tests/* sample\n</pre>\n<p>This will find all imports in the code in \u201csample\u201d and check that the\npackages those modules belong to are in the requirements.txt file.</p>\n<p>Additionally it is possible to check that there are no dependencies in\nrequirements.txt that are then unused in the project:</p>\n<pre>&lt;activate virtualenv for your project&gt;\npip-extra-reqs --ignore-file=sample/tests/* sample\n</pre>\n<p>This would find anything that is listed in requirements.txt but that is not\nimported by sample.</p>\n<div id=\"sample-tox-ini-configuration\">\n<h3>Sample tox.ini configuration</h3>\n<p>To make your life easier, copy something like this into your tox.ini:</p>\n<pre>[testenv:pip-check-reqs]\ndeps=-rrequirements.txt\ncommands=\n    pip-missing-reqs --ignore-file=sample/tests/* sample\n    pip-extra-reqs --ignore-file=sample/tests/* sample\n</pre>\n</div>\n<div id=\"excluding-test-files-or-others-from-this-check\">\n<h3>Excluding test files (or others) from this check</h3>\n<p>Your test files will sometimes be present in the same directory as your\napplication source (\u201csample\u201d in the above examples). The requirements for\nthose tests generally should not be in the requirements.txt file, and you\ndon\u2019t want this tool to generate false hits for those.</p>\n<p>You may exclude those test files from your check using the <cite>\u2013ignore-file</cite>\noption (shorthand is <cite>-f</cite>). Multiple instances of the option are allowed.</p>\n</div>\n<div id=\"excluding-modules-from-the-check\">\n<h3>Excluding modules from the check</h3>\n<p>If your project has modules which are conditionally imported, or requirements\nwhich are conditionally included, you may exclude certain modules from the\ncheck by name (or glob pattern) using <cite>\u2013ignore-module</cite> (shorthand is <cite>-m</cite>):</p>\n<pre># ignore the module spam\npip-missing-reqs --ignore-module=spam sample\n# ignore the whole package spam as well\npip-missing-reqs --ignore-module=spam --ignore-module=spam.* sample\n</pre>\n</div>\n<div id=\"with-thanks-to\">\n<h3>With Thanks To</h3>\n<p>Josh Hesketh \u2013 who refactored code and contributed the pip-extra-reqs tool.</p>\n<p>Wil Cooley \u2013 who handled the removal of normalize_name and fixed some bugs.</p>\n</div>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<p>2.0.1</p>\n<ul>\n<li>handled removal of normalize_name from pip.utils</li>\n<li>handle packages with no files</li>\n</ul>\n<p>2.0 <strong>renamed package to pip_check_reqs</strong></p>\n<ul>\n<li>added tool pip-extra-reqs to find packages installed but not used\n(contributed by Josh Hesketh)</li>\n</ul>\n<p>1.2.1</p>\n<ul>\n<li>relax requirement to 6.0+</li>\n</ul>\n<p>1.2.0</p>\n<ul>\n<li>bumped pip requirement to 6.0.8+</li>\n<li>updated use of pip internals to match that version</li>\n</ul>\n<p>1.1.9</p>\n<ul>\n<li>test fixes and cleanup</li>\n<li>remove hard-coded simplejson debugging behaviour</li>\n</ul>\n<p>1.1.8</p>\n<ul>\n<li>use os.path.realpath to avoid symlink craziness on debian/ubuntu</li>\n</ul>\n<p>1.1.7</p>\n<ul>\n<li>tweak to debug output</li>\n</ul>\n<p>1.1.6</p>\n<ul>\n<li>add debug (very verbose) run output</li>\n</ul>\n<p>1.1.5</p>\n<ul>\n<li>add header to output to make it clearer when in a larger test run</li>\n<li>fix tests and self-test</li>\n</ul>\n<p>1.1.4</p>\n<ul>\n<li>add \u2013version</li>\n<li>remove debug print from released code lol</li>\n</ul>\n<p>1.1.3</p>\n<ul>\n<li>fix program to generate exit code useful for testing</li>\n</ul>\n<p>1.1.2</p>\n<ul>\n<li>corrected version of vendored search_packages_info() from pip</li>\n<li>handle relative imports</li>\n</ul>\n<p>1.1.1</p>\n<ul>\n<li>fixed handling of import from __future__</li>\n<li>self-tested and added own requirements.txt</li>\n<li>cleaned up usage to require a file or directory to scan (rather than\ndefaulting to \u201c.\u201d)</li>\n<li>vendored code from pip 1.6dev which fixes bug in search_packages_info\nuntil pip 1.6 is released</li>\n</ul>\n<p>1.1.0</p>\n<ul>\n<li>implemented \u2013ignore-module</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6555806, "releases": {"2.0.3.1": [{"comment_text": "", "digests": {"md5": "6c7b29b2fddc63ef795fa689102e692f", "sha256": "068a12b520e1b20badeabc5082edd737dd7a96c2471258aa6cac1af5ca783076"}, "downloads": -1, "filename": "pip_check_reqs_pip_gte_20-2.0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c7b29b2fddc63ef795fa689102e692f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10239, "upload_time": "2020-02-01T21:22:33", "upload_time_iso_8601": "2020-02-01T21:22:33.132877Z", "url": "https://files.pythonhosted.org/packages/a4/7e/7532737a3c9af5fcb9446236e0bca33171fa28b67a81fc6c0bf9f5c77d60/pip_check_reqs_pip_gte_20-2.0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "177e21c286f41ffbc75a69771a68d403", "sha256": "cf60d085426863b13219cbbcb1aa91ffad15e5838f503bcb2228c3c54f6d72c4"}, "downloads": -1, "filename": "pip_check_reqs_pip_gte_20-2.0.3.1.tar.gz", "has_sig": false, "md5_digest": "177e21c286f41ffbc75a69771a68d403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8393, "upload_time": "2020-02-01T21:22:35", "upload_time_iso_8601": "2020-02-01T21:22:35.793596Z", "url": "https://files.pythonhosted.org/packages/03/65/7649c532b8f37804fcdf1565eaafb1f5028df7c4c9ca1c39018da08ffbe6/pip_check_reqs_pip_gte_20-2.0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c7b29b2fddc63ef795fa689102e692f", "sha256": "068a12b520e1b20badeabc5082edd737dd7a96c2471258aa6cac1af5ca783076"}, "downloads": -1, "filename": "pip_check_reqs_pip_gte_20-2.0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c7b29b2fddc63ef795fa689102e692f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10239, "upload_time": "2020-02-01T21:22:33", "upload_time_iso_8601": "2020-02-01T21:22:33.132877Z", "url": "https://files.pythonhosted.org/packages/a4/7e/7532737a3c9af5fcb9446236e0bca33171fa28b67a81fc6c0bf9f5c77d60/pip_check_reqs_pip_gte_20-2.0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "177e21c286f41ffbc75a69771a68d403", "sha256": "cf60d085426863b13219cbbcb1aa91ffad15e5838f503bcb2228c3c54f6d72c4"}, "downloads": -1, "filename": "pip_check_reqs_pip_gte_20-2.0.3.1.tar.gz", "has_sig": false, "md5_digest": "177e21c286f41ffbc75a69771a68d403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8393, "upload_time": "2020-02-01T21:22:35", "upload_time_iso_8601": "2020-02-01T21:22:35.793596Z", "url": "https://files.pythonhosted.org/packages/03/65/7649c532b8f37804fcdf1565eaafb1f5028df7c4c9ca1c39018da08ffbe6/pip_check_reqs_pip_gte_20-2.0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:24 2020"}