{"info": {"author": "Ciprian Tarta", "author_email": "me@cipriantarta.ro", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. role:: python(code)\n    :language: python\n\nDjango Autoshard\n================\n\nA `Django <https://www.djangoproject.com/>`_ library that makes sharding easy, using the `Consistent Hashing <https://en.wikipedia.org/wiki/Consistent_hashing>`_ algorithm.\n\n.. image:: https://badge.fury.io/py/django-autoshard.svg\n    :target: https://badge.fury.io/py/django-autoshard\n\n.. image:: https://travis-ci.org/cipriantarta/django-autoshard.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/cipriantarta/django-autoshard\n\n.. image:: https://coveralls.io/repos/github/cipriantarta/django-autoshard/badge.svg?branch=master\n    :alt: Coverage Status\n    :target: https://coveralls.io/github/cipriantarta/django-autoshard?branch=master\n\n\nNotes\n=====\nWriting a general sharding library for all business models is practically impossible, but there are common particularities that apply to most of them.\n\nIf you are not familiar with sharding, you should first document yourself on what sharding means and how you could apply it to your own business model. You can start `here <https://en.wikipedia.org/wiki/Shard_(database_architecture)>`_.\n\nThis library was written with the following business model in mind.\n\nAn application usually has a user account that must be different from other user accounts either by using a unique email address, or username, or other information that can be considered unique across the application.\n\nEach user account will be sharded using that unique constraint and all data that belongs to that user will live on the same shard that the user account does.\n\nYou can perhaps customize this business model to fit your own requirements, but the idea of this library was to add sharding to a Django app, with a minimum amount of effort.\n\nThe sharding algorithm used by this library is inspired by `Instagram's sharding solution <http://instagram-engineering.tumblr.com/post/10853187575/sharding-ids-at-instagram>`_, but instead of an auto-increment ID and stored procedures, this library uses a RNG for the local ID part. This probably means that when the stars align, you might get a collision if an insert is made in the same millisecond and the RNG gives you the same number.\n\n\nInstallation\n============\n\n:python:`pip install django-autoshard`\n\n1. Add :python:`django_autoshard` to your INSTALLED_APPS settings like this:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_autoshard',\n    )\n\n2. Create a new user model that extends the :python:`ShardedModel` and extend all related models from :python:`ShardRelatedModel`\n\n.. code-block:: python\n\n    from django.contrib.auth.models import AbstractUser\n    from django_autoshard.models import ShardedModel, ShardRelatedModel\n    from django_autoshard.managers import ShardedManager\n\n\n    class User(ShardedModel, AbstractUser):\n        SHARD_KEY = 'email'\n        objects = ShardedManager()\n\n\n    class Book(ShardRelatedModel):\n        user = models.ForeignKey(User)\n\n3. Use this model as the default auth model in your :python:`settings.py` file.\n    :python:`AUTH_USER_MODEL='<path.to.your.model>.User'`\n\n4. Make sure you have set up the :python:`settings.DATABASES` correctly(any Django supported database back-end will work) and add the following to your settings file. The range() will create the logical shards, so in the example below, range(10) will create 10 logical shards on the NODE \"192.168.0.100\" using the default database name, user and password:\n        .. code-block:: python\n\n            DJANGO_AUTOSHARD = {\n                \"NODES\": [\n                    {\n                        \"HOST\": \"192.168.0.100\",  # DB MACHINE 1\n                        \"RANGE\": range(10)\n                    },\n                    {\n                        \"HOST\": \"192.168.0.101\", # DB MACHINE 2\n                        \"RANGE\": range(10, 20)\n                    }\n                    # and so on ...\n                ]\n            }\n\n5. Run :python:`python manage.py create_shards`\n\n6. Run :python:`python manage.py migrate`\n\n7. Run :python:`python manage.py migrate_shards`\n\n8. Run :python:`python manage.py drop_constraints`\n\nCommands\n========\nManagement Commands that come with this library:\n\n    1. create_shards:\n        - this command will create all the logical shards(new databases) on all of the configured shard nodes in :python:`settings.DJANGO_AUTOSHARD`\n\n    2. migrate_shards:\n        - this command will migrate all your application's models to all of the logical shards created with \"create_shards\"\n\n    3. drop_constraints:\n        - this command will drop all the foreign key constraints from the \"default\" database that have a relation with your \"ShardedModel\"\n\nSettings\n========\nThe settings are isolated into a single dict in your settings.py file like so:\n\n.. code-block:: python\n\n    DJANGO_AUTOSHARD = {\n        'EPOCH': '2016-01-01',\n        'MAX_SHARDS': 1000,\n        'NODES': {\n            ...\n        }\n    }\n\n:python:`EPOCH` - defaults to :python:`'2016-01-01'`. Must be in :python:`'%Y-%m-%d'` format.\n\n:python:`MAX_SHARDS` - defaults to :python:`8192`. This should NEVER be changed after initial setup, unless you want to rehash all your sharded data.\n\nCaveats\n=======\n- you will no longer be able to use database joins between your sharded models, but you can still use joins on models that are related to your sharded model(models on the same shard as the user)\n- models that come from third party apps that are related to your sharded model and you don't have any control over, will need to have their foreign key dropped(use :python:`drop_constraints` command).\n- instead of using :python:`Book.objects.create(...)` you will have to use :python:`book = Book(...)` and then :python:`book.save()`. This is because of how Django model managers work.\n- if your business model requires to do searches on shard related models, or other fields of the sharded model besides the configured :python:`SHARD_KEY`, for example text based search, you will need to use tools like Elasticsearch, where you will store your text info and the shard id of tha object that this text info belongs to, in a single Elasticsearch document.\n- :python:`ShardedModel` does not support :python:`count()` and :python:`all()`\n- :python:`django.contrib.admin` will not work with sharded models\n\nTODO\n====\n\n- Add replicas support\n- Create shard migration script\n- Create a benchmarking script\n- Add more tests\n\nChange Log\n==========\n\n1.2.0 [2016-06-30]\n------------------\n- Changed the way shards are built, using `settings.DJANGO_AUTOSHARD['NODES']`. See INSTALLATION\n- added support for Django 1.7\n- removed support for python 3.3, because it only worked with Django 1.8\n- django_autoshard User model is only created when testing now.\n\n1.1.2 [2016-06-27]\n------------------\n- allow `all()` and `count()` if `using` is passed.\n\n1.1 [2016-05-21]\n----------------\n- fixes management commands for python2 and python3 < 3.5\n- raise :python:`NotImplementedError` when trying to use :python:`count()` or :python:`all()` on a :python:`ShardedModel`\n- Update documentation\n\n1.0(alpha) [2016-04-02]\n-----------------------\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cipriantarta/django-autoshard", "keywords": "django shard sharding", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-autoshard", "package_url": "https://pypi.org/project/django-autoshard/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-autoshard/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cipriantarta/django-autoshard"}, "release_url": "https://pypi.org/project/django-autoshard/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "A Django library that makes sharding easy.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-autoshard\">\n<h2>Django Autoshard</h2>\n<p>A <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> library that makes sharding easy, using the <a href=\"https://en.wikipedia.org/wiki/Consistent_hashing\" rel=\"nofollow\">Consistent Hashing</a> algorithm.</p>\n<a href=\"https://badge.fury.io/py/django-autoshard\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-autoshard.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e99a6a90b5f4687ae074fa4a2b281c328ef9339b/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6175746f73686172642e737667\"></a>\n<a href=\"https://travis-ci.org/cipriantarta/django-autoshard\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cdcfbcb499bfadb7c02f7f194b22e9977fb0024/68747470733a2f2f7472617669732d63692e6f72672f6369707269616e74617274612f646a616e676f2d6175746f73686172642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/cipriantarta/django-autoshard?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c91836c4fb4a55dd1b8c2a8502dc2549a99defac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6369707269616e74617274612f646a616e676f2d6175746f73686172642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>Writing a general sharding library for all business models is practically impossible, but there are common particularities that apply to most of them.</p>\n<p>If you are not familiar with sharding, you should first document yourself on what sharding means and how you could apply it to your own business model. You can start <a href=\"https://en.wikipedia.org/wiki/Shard_(database_architecture)\" rel=\"nofollow\">here</a>.</p>\n<p>This library was written with the following business model in mind.</p>\n<p>An application usually has a user account that must be different from other user accounts either by using a unique email address, or username, or other information that can be considered unique across the application.</p>\n<p>Each user account will be sharded using that unique constraint and all data that belongs to that user will live on the same shard that the user account does.</p>\n<p>You can perhaps customize this business model to fit your own requirements, but the idea of this library was to add sharding to a Django app, with a minimum amount of effort.</p>\n<p>The sharding algorithm used by this library is inspired by <a href=\"http://instagram-engineering.tumblr.com/post/10853187575/sharding-ids-at-instagram\" rel=\"nofollow\">Instagram\u2019s sharding solution</a>, but instead of an auto-increment ID and stored procedures, this library uses a RNG for the local ID part. This probably means that when the stars align, you might get a collision if an insert is made in the same millisecond and the RNG gives you the same number.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><code class=\"python\"><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">autoshard</span></code></p>\n<ol>\n<li>Add <code class=\"python\"><span class=\"n\">django_autoshard</span></code> to your INSTALLED_APPS settings like this:</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django_autoshard'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Create a new user model that extends the <code class=\"python\"><span class=\"n\">ShardedModel</span></code> and extend all related models from <code class=\"python\"><span class=\"n\">ShardRelatedModel</span></code></li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractUser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_autoshard.models</span> <span class=\"kn\">import</span> <span class=\"n\">ShardedModel</span><span class=\"p\">,</span> <span class=\"n\">ShardRelatedModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_autoshard.managers</span> <span class=\"kn\">import</span> <span class=\"n\">ShardedManager</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">ShardedModel</span><span class=\"p\">,</span> <span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n    <span class=\"n\">SHARD_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'email'</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">ShardedManager</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">ShardRelatedModel</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li><dl>\n<dt>Use this model as the default auth model in your <code class=\"python\"><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">py</span></code> file.</dt>\n<dd><p><code class=\"python\"><span class=\"n\">AUTH_USER_MODEL</span><span class=\"o\">=</span><span class=\"s1\">\u2019&lt;path.to.your.model&gt;.User\u2019</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Make sure you have set up the <code class=\"python\"><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASES</span></code> correctly(any Django supported database back-end will work) and add the following to your settings file. The range() will create the logical shards, so in the example below, range(10) will create 10 logical shards on the NODE \u201c192.168.0.100\u201d using the default database name, user and password:</dt>\n<dd><pre><span class=\"n\">DJANGO_AUTOSHARD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"NODES\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"192.168.0.100\"</span><span class=\"p\">,</span>  <span class=\"c1\"># DB MACHINE 1</span>\n            <span class=\"s2\">\"RANGE\"</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"192.168.0.101\"</span><span class=\"p\">,</span> <span class=\"c1\"># DB MACHINE 2</span>\n            <span class=\"s2\">\"RANGE\"</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># and so on ...</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</dd>\n</dl>\n</li>\n<li><p>Run <code class=\"python\"><span class=\"n\">python</span> <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">create_shards</span></code></p>\n</li>\n<li><p>Run <code class=\"python\"><span class=\"n\">python</span> <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">migrate</span></code></p>\n</li>\n<li><p>Run <code class=\"python\"><span class=\"n\">python</span> <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">migrate_shards</span></code></p>\n</li>\n<li><p>Run <code class=\"python\"><span class=\"n\">python</span> <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">drop_constraints</span></code></p>\n</li>\n</ol>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>Management Commands that come with this library:</p>\n<blockquote>\n<ol>\n<li><dl>\n<dt>create_shards:</dt>\n<dd><ul>\n<li>this command will create all the logical shards(new databases) on all of the configured shard nodes in <code class=\"python\"><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DJANGO_AUTOSHARD</span></code></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>migrate_shards:</dt>\n<dd><ul>\n<li>this command will migrate all your application\u2019s models to all of the logical shards created with \u201ccreate_shards\u201d</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>drop_constraints:</dt>\n<dd><ul>\n<li>this command will drop all the foreign key constraints from the \u201cdefault\u201d database that have a relation with your \u201cShardedModel\u201d</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>The settings are isolated into a single dict in your settings.py file like so:</p>\n<pre><span class=\"n\">DJANGO_AUTOSHARD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'EPOCH'</span><span class=\"p\">:</span> <span class=\"s1\">'2016-01-01'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'MAX_SHARDS'</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"s1\">'NODES'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><code class=\"python\"><span class=\"n\">EPOCH</span></code> - defaults to <code class=\"python\"><span class=\"s1\">\u20182016-01-01\u2019</span></code>. Must be in <code class=\"python\"><span class=\"s1\">\u2018%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">\u2019</span></code> format.</p>\n<p><code class=\"python\"><span class=\"n\">MAX_SHARDS</span></code> - defaults to <code class=\"python\"><span class=\"mi\">8192</span></code>. This should NEVER be changed after initial setup, unless you want to rehash all your sharded data.</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<ul>\n<li>you will no longer be able to use database joins between your sharded models, but you can still use joins on models that are related to your sharded model(models on the same shard as the user)</li>\n<li>models that come from third party apps that are related to your sharded model and you don\u2019t have any control over, will need to have their foreign key dropped(use <code class=\"python\"><span class=\"n\">drop_constraints</span></code> command).</li>\n<li>instead of using <code class=\"python\"><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">\u2026</span><span class=\"p\">)</span></code> you will have to use <code class=\"python\"><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"p\">(</span><span class=\"o\">\u2026</span><span class=\"p\">)</span></code> and then <code class=\"python\"><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span></code>. This is because of how Django model managers work.</li>\n<li>if your business model requires to do searches on shard related models, or other fields of the sharded model besides the configured <code class=\"python\"><span class=\"n\">SHARD_KEY</span></code>, for example text based search, you will need to use tools like Elasticsearch, where you will store your text info and the shard id of tha object that this text info belongs to, in a single Elasticsearch document.</li>\n<li><code class=\"python\"><span class=\"n\">ShardedModel</span></code> does not support <code class=\"python\"><span class=\"n\">count</span><span class=\"p\">()</span></code> and <code class=\"python\"><span class=\"nb\">all</span><span class=\"p\">()</span></code></li>\n<li><code class=\"python\"><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">contrib</span><span class=\"o\">.</span><span class=\"n\">admin</span></code> will not work with sharded models</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Add replicas support</li>\n<li>Create shard migration script</li>\n<li>Create a benchmarking script</li>\n<li>Add more tests</li>\n</ul>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<div id=\"id1\">\n<h3>1.2.0 [2016-06-30]</h3>\n<ul>\n<li>Changed the way shards are built, using <cite>settings.DJANGO_AUTOSHARD[\u2018NODES\u2019]</cite>. See INSTALLATION</li>\n<li>added support for Django 1.7</li>\n<li>removed support for python 3.3, because it only worked with Django 1.8</li>\n<li>django_autoshard User model is only created when testing now.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1.2 [2016-06-27]</h3>\n<ul>\n<li>allow <cite>all()</cite> and <cite>count()</cite> if <cite>using</cite> is passed.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.1 [2016-05-21]</h3>\n<ul>\n<li>fixes management commands for python2 and python3 &lt; 3.5</li>\n<li>raise <code class=\"python\"><span class=\"ne\">NotImplementedError</span></code> when trying to use <code class=\"python\"><span class=\"n\">count</span><span class=\"p\">()</span></code> or <code class=\"python\"><span class=\"nb\">all</span><span class=\"p\">()</span></code> on a <code class=\"python\"><span class=\"n\">ShardedModel</span></code></li>\n<li>Update documentation</li>\n</ul>\n</div>\n<div id=\"alpha-2016-04-02\">\n<h3>1.0(alpha) [2016-04-02]</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2218167, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5e48503ae729614743acc04e1b0115fb", "sha256": "6aceb517ef4a141caebf87d0452d56b670b03c073630913da9d5ed94aaf847ee"}, "downloads": -1, "filename": "django-autoshard-1.0.tar.gz", "has_sig": false, "md5_digest": "5e48503ae729614743acc04e1b0115fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10406, "upload_time": "2016-04-02T07:00:27", "upload_time_iso_8601": "2016-04-02T07:00:27.745325Z", "url": "https://files.pythonhosted.org/packages/7c/83/d8df3a6d4598fe336f9241d94359408212e16e792209a06601ee114d090e/django-autoshard-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "0d02557887d20634e8e95bf6e6506d37", "sha256": "a8d37d597601ea782266094e43f9600e72f15b4ed91ee0a2152b5a8f47a9aeb9"}, "downloads": -1, "filename": "django-autoshard-1.1.tar.gz", "has_sig": false, "md5_digest": "0d02557887d20634e8e95bf6e6506d37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10325, "upload_time": "2016-05-21T08:07:56", "upload_time_iso_8601": "2016-05-21T08:07:56.568096Z", "url": "https://files.pythonhosted.org/packages/c6/56/0c0764d4142edcc65fdf4cb417beb5ee1b121b5da91fd741033975f9c0cd/django-autoshard-1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "456405d5cd57611c749d046d82ebc99c", "sha256": "8502a372ff683cdfceb70c82ab712e1f46a9cbd907cd983b1c27b69c6f63b0e8"}, "downloads": -1, "filename": "django-autoshard-1.1.2.tar.gz", "has_sig": false, "md5_digest": "456405d5cd57611c749d046d82ebc99c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10499, "upload_time": "2016-06-27T07:33:18", "upload_time_iso_8601": "2016-06-27T07:33:18.836221Z", "url": "https://files.pythonhosted.org/packages/0f/60/22bf6c01aefdf47f056f59fc65ef3616152b6ca2cbb135f4130ce8d5e549/django-autoshard-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "0a4e947405b63b9734bcc517c094ad9b", "sha256": "59fd25c105de129a1e45543f37c838061f8e5d75d549c50954df5dc8d91cef42"}, "downloads": -1, "filename": "django-autoshard-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0a4e947405b63b9734bcc517c094ad9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10546, "upload_time": "2016-06-30T17:07:28", "upload_time_iso_8601": "2016-06-30T17:07:28.218038Z", "url": "https://files.pythonhosted.org/packages/c9/40/bfd44a6b95d96074a5e08d2a50e524a2c9e2a2084144353d647686360474/django-autoshard-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "7fd542d56620e74a892c4968dcd4038f", "sha256": "fa664a43c6627dc2e299f729ef59ec924e3c6a15ebd31477fbae69b619975e3a"}, "downloads": -1, "filename": "django-autoshard-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7fd542d56620e74a892c4968dcd4038f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10684, "upload_time": "2016-07-13T05:08:54", "upload_time_iso_8601": "2016-07-13T05:08:54.973783Z", "url": "https://files.pythonhosted.org/packages/48/13/c95ab61e18b30de0268ffceef4a9c531b2e8346ddddf1ad8a9d8c56245db/django-autoshard-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fd542d56620e74a892c4968dcd4038f", "sha256": "fa664a43c6627dc2e299f729ef59ec924e3c6a15ebd31477fbae69b619975e3a"}, "downloads": -1, "filename": "django-autoshard-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7fd542d56620e74a892c4968dcd4038f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10684, "upload_time": "2016-07-13T05:08:54", "upload_time_iso_8601": "2016-07-13T05:08:54.973783Z", "url": "https://files.pythonhosted.org/packages/48/13/c95ab61e18b30de0268ffceef4a9c531b2e8346ddddf1ad8a9d8c56245db/django-autoshard-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:31 2020"}