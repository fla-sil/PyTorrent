{"info": {"author": "Y-Bro", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SQLAlchemy-serializer\nMixin for SQLAlchemy models serialization without pain.\n\nIf you want to serialize SQLAlchemy model instances with only one line of code,\nand tools like `marshmallow` seems to be redundant and too complex for such a simple task,\nthis mixin definitely suits you.\n\n**Contents**\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Advanced usage](#Advanced-usage)\n- [Custom formats](#Custom-formats)\n- [Custom types](#Custom-types)\n- [Timezones](#Timezones)\n- [Troubleshooting](#Troubleshooting)\n- [Tests](#Tests)\n\n## Installation\n\n```bash\npip install SQLAlchemy-serializer\n```\n\n## Usage\n\nIf you want SQLAlchemy model to become serializable,\nadd **SerializerMixin** in class definition:\n```python\nfrom sqlalchemy_serializer import SerializerMixin\n\n\nclass SomeModel(db.Model, SerializerMixin):\n    ...\n```\n\nThis mixin adds **.to_dict()** method to model instances.\nSo now you can do something like this:\n```python\nitem = SomeModel.query.filter(.....).one()\nresult = item.to_dict()\n```\nYou get values of all SQLAlchemy fields in the `result` var, even nested relationships\nIn order to change the default output you shuld pass tuple of fieldnames as an argument\n\n- If you want to exclude or add some extra fields (not from dataase) \n  You should pass `rules` argument\n- If you want to define the only fields to be presented in serializer's output\n  use `only` argument\n\nIf you want to exclude a few fields for this exact item:\n```python\nresult = item.to_dict(rules=('-somefield', '-some_relation.nested_one.another_nested_one'))\n```\n\nIf you want to add a field which is not defined as an SQLAlchemy field:\n```python\nclass SomeModel(db.Model, SerializerMixin):\n    non_sql_field = 123\n\n    def method(self):\n        return anything\n\nresult = item.to_dict(rules=('non_sql_field', 'method'))\n```\n**Note** that method or a function should have no arguments except ***self***,\nin order to let serializer call it without hesitations.\n\nIf you want to get exact fields:\n```python\n\nresult = item.to_dict(only=('non_sql_field', 'method', 'somefield'))\n```\n**Note** that if ***somefield*** is an SQLAlchemy instance, you get all it's\nserializable fields. So if you want to get only some of them, you should define it like below:\n```python\n\nresult = item.to_dict(only=('non_sql_field', 'method', 'somefield.id', 'somefield.etc'))\n```\nYou can use negative rules in `only` param too.\nSo `item.to_dict(only=('somefield', -'somefield.id'))`\nwill return `somefiled` without `id`. See [Negative rules in ONLY section](#Negative-rules-in-ONLY-section)\n\nIf you want to define schema for all instances of particular SQLAlchemy model,\nadd serialize properties to model definition:\n```python\nclass SomeModel(db.Model, SerializerMixin):\n    serialize_only = ('somefield.id',)\n    serialize_rules = ()\n    ...\n    somefield = db.relationship('AnotherModel')\n\nresult = item.to_dict()\n```\nSo the `result` in this case will be `{'somefield': [{'id': some_id}]}`\n***serialize_only*** and  ***serialize_rules*** work the same way as ***to_dict's*** arguments\n\n\n# Advanced usage \nFor more examples see [tests](https://github.com/n0nSmoker/SQLAlchemy-serializer/tree/master/tests)\n\n```python\nclass FlatModel(db.Model, SerializerMixin):\n    \"\"\"\n    to_dict() of all instances of this model now returns only following two fields\n    \"\"\"\n    serialize_only = ('non_sqlalchemy_field', 'id')\n    serialize_rules = ()\n\n    id = db.Column(db.Integer, primary_key=True)\n    string = db.Column(db.String(256), default='Some string!')\n    time = db.Column(db.DateTime, default=datetime.utcnow())\n    date = db.Column(db.Date, default=datetime.utcnow())\n    boolean = db.Column(db.Boolean, default=True)\n    boolean2 = db.Column(db.Boolean, default=False)\n    null = db.Column(db.String)\n    non_sqlalchemy_dict = dict(qwerty=123)\n\n\nclass ComplexModel(db.Model, SerializerMixin):\n   \"\"\"\n   Schema is not defined so\n   we will get all SQLAlchemy attributes of the instance by default\n   without `non_sqlalchemy_list`\n   \"\"\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    string = db.Column(db.String(256), default='Some string!')\n    boolean = db.Column(db.Boolean, default=True)\n    null = db.Column(db.String)\n    flat_id = db.Column(db.ForeignKey('test_flat_model.id'))\n    rel = db.relationship('FlatModel')\n    non_sqlalchemy_list = [dict(a=12, b=10), dict(a=123, b=12)]\n\nitem = ComplexModel.query.first()\n\n\n# Now by default the result looks like this:\nitem.to_dict()\n\ndict(\n    id=1,\n    string='Some string!',\n    boolean=True,\n    null=None,\n    flat_id=1,\n    rel=[dict(\n        id=1,\n        non_sqlalchemy_dict=dict(qwerty=123)\n    )]\n\n\n# Extend schema\nitem.to_dict(rules=('-id', '-rel.id', 'rel.string', 'non_sqlalchemy_list'))\n\ndict(\n    string='Some string!',\n    boolean=True,\n    null=None,\n    flat_id=1,\n    non_sqlalchemy_list=[dict(a=12, b=10), dict(a=123, b=12)],\n    rel=dict(\n        string='Some string!',\n        non_sqlalchemy_dict=dict(qwerty=123)\n    )\n)\n\n\n# Exclusive schema\nitem.to_dict(only=('id', 'flat_id', 'rel.id', 'non_sqlalchemy_list.a'))\n\ndict(\n    id=1,\n    flat_id=1,\n    non_sqlalchemy_list=[dict(a=12), dict(a=123)],\n    rel=dict(\n        id=1\n    )\n)\n```\n\n# Custom formats\nIf you want to change datetime/date/time/decimal format in one model you can specify it like below:\n```python\nfrom sqlalchemy_serializer import SerializerMixin\n\nclass SomeModel(db.Model, SerializerMixin):\n    __tablename__ = 'custom_table_name'\n    \n    date_format = '%s'  # Unixtimestamp (seconds)\n    datetime_format = '%Y %b %d %H:%M:%S.%f'\n    time_format = '%H:%M.%f'\n    decimal_format = '{:0>10.3}'\n\n    id = sa.Column(sa.Integer, primary_key=True)\n    date = sa.Column(sa.Date)\n    datetime = sa.Column(sa.DateTime)\n    time = sa.Column(sa.Time)\n    money = Decimal('12.123')  # same result with sa.Float(asdecimal=True, ...)\n```\n\nIf you want to change format in every model, you should write\nyour own mixin class inherited from `SerializerMixin`:\n```python\nfrom sqlalchemy_serializer import SerializerMixin\n\nclass CustomSerializerMixin(SerializerMixin):\n    date_format = '%s'  # Unixtimestamp (seconds)\n    datetime_format = '%Y %b %d %H:%M:%S.%f'\n    time_format = '%H:%M.%f'\n    decimal_format = '{:0>10.3}'\n```\nAnd later use it as usual:\n```python\nfrom decimal import Decimal\nimport sqlalchemy as sa\nfrom some.lib.package import CustomSerializerMixin\n\n\nclass CustomSerializerModel(db.Model, CustomSerializerMixin):\n    __tablename__ = 'custom_table_name'\n\n    id = sa.Column(sa.Integer, primary_key=True)\n    date = sa.Column(sa.Date)\n    datetime = sa.Column(sa.DateTime)\n    time = sa.Column(sa.Time)\n    money = Decimal('12.123')  # same result with sa.Float(asdecimal=True, ...)\n\n```\nAll `date/time/datetime/decimal` fields will be serialized using your custom formats.\n\n- Decimal uses python `format` syntax\n- To get **unixtimestamp** use `%s`, \n- Other `datetime` formats you can find [in docs](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)\n\n\n# Custom types\nBy default the library can serialize the following types:\n ```\n - int \n - str \n - float \n - bytes \n - bool \n - type(None)\n - time\n - datetime\n - date\n - Decimal\n - Enum\n - dict (if values and keys are one of types mentioned above, or inherit one of them)\n - any Iterable (if types of values are mentioned above, or inherit one of them)\n ```\n If you want to add serialization of any other type or redefine the default behaviour. \n You should add something like this:\n\n```python\n\nserialize_types = (\n    (SomeType, lambda x: some_expression),\n    (AnyOtherType, some_function)\n)\n```\nTo your own mixin class inherited from `SerializerMixin`:\n\n```python\nfrom sqlalchemy_serializer import SerializerMixin\nfrom geoalchemy2.elements import WKBElement\nfrom geoalchemy2.shape import to_shape\n\ndef serialize_int(value):\n    return value + 100\n\nclass CustomSerializerMixin(SerializerMixin):\n    serialize_types = (\n        (WKBElement, lambda x: to_shape(x).to_wkt()),\n        (int, serialize_int)\n    )\n```\n... or directly to the model:\n```python\nfrom geoalchemy2 import Geometry\nfrom sqlalchemy_serializer import SerializerMixin\n\nclass Point(Base, SerializerMixin):\n    serialize_types = (\n        (WKBElement, lambda x: to_shape(x).to_wkt()),\n        (AnyOtherType, serialize_smth)\n    )\n    __tablename__ = 'point'\n    id = Column(Integer, primary_key=True)\n    position = Column(Geometry('POINT'))\n```\n\nUnfortunately you can not access formats or tzinfo in that functions.\nI'll implement this logic later if any of users needs it.\n\n\n# Timezones\nTo keep `datetimes` consistent its better to store it in the database normalized to **UTC**.\nBut when you return response, sometimes (mostly in web, mobile applications can do it themselves)\nyou need to convert all `datetimes` to user's timezone.\nSo you need to tell serializer what timezone to use.\nThere are two ways to do it:\n-  The simplest one is to pass timezone directly as an argument for `to_dict` function\n```python\nimport pytz\n\nitem.to_dict(timezone=pytz.timezone('Europe/Moscow'))\n```\n- But if you do not want to write this code in every function, you should define\n  timezone logic in your custom mixin (how to use customized mixin see [Castomization](#Castomization))\n ```python\nimport pytz\nfrom sqlalchemy_serializer import SerializerMixin\nfrom some.package import get_current_user\n\nclass CustomSerializerMixin(SerializerMixin):\n    def get_tzinfo(self):\n        # you can write your own logic here, \n        # the example below will work if you store timezone\n        # in user's profile\n        return pytz.timezone(get_current_user()['timezone'])\n```\n\n# Troubleshooting\n\n## Max recursion\nIf you've faced with **maximum recursion depth exceeded** exception,\nmost likely the serializer have found instance of the same class somewhere among model's relationships.\nEspecially if you use backrefs. In this case you need to tell it where to stop like below:\n```python\nclass User(Base, SerializerMixin):\n    __tablename__ = 'users'\n    \n    # Exclude nested model of the same class to avoid max recursion error\n    serialize_rules = ('-related_models.user',)\n    ...\n    related_models = relationship(\"RelatedModel\", backref='user')\n    \n    \nclass RelatedModel(Base, SerializerMixin):\n    __tablename__ = 'some_table'\n\n    ...\n    user_id = Column(Integer, ForeignKey('users.id'))\n    ...\n```\nIf for some reason you need the field `user` to be presented in `related_models` field.\nYou can change `serialize_rules` to `('-related_models.user.related_models',)`\nTo break the chain of serialisation a bit further.\n\n## Controversial rules\nIf you add controversial rules like `serialize_rules = ('-prop', 'prop.id')`\nThe serializer will exclude the whole `prop`. You need to revert these rules\nor use `serialize_only` option. You can also combine `serialize_only` and `serialize_only`.\n\n## Negative rules in ONLY section\nIf you pass rules in `serialize_only` the serializer becomes **NOT** greedy and returns **ONLY** fields listed there.\nSo `serialize_only = ('-model.id',)` will return nothing\nBut `serialize_only = ('model', '-model.id',)` will return `model` field without `id`\n\n## One element tuples\nDo not forget to add **comma** at the end of one element tuples, it is trivial, \nbut a lot of developers forget about it:\n```python\nserialize_only = ('some_field',)  # <--- Thats right!\nserialize_only = ('some_field')  # <--- WRONG it is actually not a tuple\n\n```\n\n# Tests\nTo run tests and see tests coverage report just type the following command:(doker and doker-compose should be installed on you local machine)\n```bash\nmake test\n```\nTo run a particular test use\n```bash\nmake test file=tests/some_file.py\nmake test file=tests/some_file.py::test_func\n```\n\nI will appreciate any help in improving this library, so feel free to submit issues or pull requests.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/n0nSmoker/SQLAlchemy-serializer", "keywords": "sqlalchemy,serialize,to_dict,JSON", "license": "", "maintainer": "", "maintainer_email": "", "name": "SQLAlchemy-serializer", "package_url": "https://pypi.org/project/SQLAlchemy-serializer/", "platform": "", "project_url": "https://pypi.org/project/SQLAlchemy-serializer/", "project_urls": {"Homepage": "https://github.com/n0nSmoker/SQLAlchemy-serializer"}, "release_url": "https://pypi.org/project/SQLAlchemy-serializer/1.3.4.2/", "requires_dist": null, "requires_python": "", "summary": "Mixin for SQLAlchemy-models serialization without pain", "version": "1.3.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SQLAlchemy-serializer</h1>\n<p>Mixin for SQLAlchemy models serialization without pain.</p>\n<p>If you want to serialize SQLAlchemy model instances with only one line of code,\nand tools like <code>marshmallow</code> seems to be redundant and too complex for such a simple task,\nthis mixin definitely suits you.</p>\n<p><strong>Contents</strong></p>\n<ul>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#Advanced-usage\" rel=\"nofollow\">Advanced usage</a></li>\n<li><a href=\"#Custom-formats\" rel=\"nofollow\">Custom formats</a></li>\n<li><a href=\"#Custom-types\" rel=\"nofollow\">Custom types</a></li>\n<li><a href=\"#Timezones\" rel=\"nofollow\">Timezones</a></li>\n<li><a href=\"#Troubleshooting\" rel=\"nofollow\">Troubleshooting</a></li>\n<li><a href=\"#Tests\" rel=\"nofollow\">Tests</a></li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install SQLAlchemy-serializer\n</pre>\n<h2>Usage</h2>\n<p>If you want SQLAlchemy model to become serializable,\nadd <strong>SerializerMixin</strong> in class definition:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>This mixin adds <strong>.to_dict()</strong> method to model instances.\nSo now you can do something like this:</p>\n<pre><span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">SomeModel</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">.....</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n<p>You get values of all SQLAlchemy fields in the <code>result</code> var, even nested relationships\nIn order to change the default output you shuld pass tuple of fieldnames as an argument</p>\n<ul>\n<li>If you want to exclude or add some extra fields (not from dataase)\nYou should pass <code>rules</code> argument</li>\n<li>If you want to define the only fields to be presented in serializer's output\nuse <code>only</code> argument</li>\n</ul>\n<p>If you want to exclude a few fields for this exact item:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'-somefield'</span><span class=\"p\">,</span> <span class=\"s1\">'-some_relation.nested_one.another_nested_one'</span><span class=\"p\">))</span>\n</pre>\n<p>If you want to add a field which is not defined as an SQLAlchemy field:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SomeModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">non_sql_field</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">anything</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'non_sql_field'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Note</strong> that method or a function should have no arguments except <em><strong>self</strong></em>,\nin order to let serializer call it without hesitations.</p>\n<p>If you want to get exact fields:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'non_sql_field'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">,</span> <span class=\"s1\">'somefield'</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Note</strong> that if <em><strong>somefield</strong></em> is an SQLAlchemy instance, you get all it's\nserializable fields. So if you want to get only some of them, you should define it like below:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'non_sql_field'</span><span class=\"p\">,</span> <span class=\"s1\">'method'</span><span class=\"p\">,</span> <span class=\"s1\">'somefield.id'</span><span class=\"p\">,</span> <span class=\"s1\">'somefield.etc'</span><span class=\"p\">))</span>\n</pre>\n<p>You can use negative rules in <code>only</code> param too.\nSo <code>item.to_dict(only=('somefield', -'somefield.id'))</code>\nwill return <code>somefiled</code> without <code>id</code>. See <a href=\"#Negative-rules-in-ONLY-section\" rel=\"nofollow\">Negative rules in ONLY section</a></p>\n<p>If you want to define schema for all instances of particular SQLAlchemy model,\nadd serialize properties to model definition:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SomeModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">serialize_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'somefield.id'</span><span class=\"p\">,)</span>\n    <span class=\"n\">serialize_rules</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">somefield</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s1\">'AnotherModel'</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n<p>So the <code>result</code> in this case will be <code>{'somefield': [{'id': some_id}]}</code>\n<em><strong>serialize_only</strong></em> and  <em><strong>serialize_rules</strong></em> work the same way as <em><strong>to_dict's</strong></em> arguments</p>\n<h1>Advanced usage</h1>\n<p>For more examples see <a href=\"https://github.com/n0nSmoker/SQLAlchemy-serializer/tree/master/tests\" rel=\"nofollow\">tests</a></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FlatModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    to_dict() of all instances of this model now returns only following two fields</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">serialize_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'non_sqlalchemy_field'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">)</span>\n    <span class=\"n\">serialize_rules</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'Some string!'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">())</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">())</span>\n    <span class=\"n\">boolean</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">boolean2</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">null</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">non_sqlalchemy_dict</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">qwerty</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ComplexModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n   <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">   Schema is not defined so</span>\n<span class=\"sd\">   we will get all SQLAlchemy attributes of the instance by default</span>\n<span class=\"sd\">   without `non_sqlalchemy_list`</span>\n<span class=\"sd\">   \"\"\"</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'Some string!'</span><span class=\"p\">)</span>\n    <span class=\"n\">boolean</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">null</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">flat_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'test_flat_model.id'</span><span class=\"p\">))</span>\n    <span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s1\">'FlatModel'</span><span class=\"p\">)</span>\n    <span class=\"n\">non_sqlalchemy_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)]</span>\n\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">ComplexModel</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Now by default the result looks like this:</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n\n<span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">'Some string!'</span><span class=\"p\">,</span>\n    <span class=\"n\">boolean</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">flat_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">rel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">non_sqlalchemy_dict</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">qwerty</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"p\">)]</span>\n\n\n<span class=\"c1\"># Extend schema</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'-id'</span><span class=\"p\">,</span> <span class=\"s1\">'-rel.id'</span><span class=\"p\">,</span> <span class=\"s1\">'rel.string'</span><span class=\"p\">,</span> <span class=\"s1\">'non_sqlalchemy_list'</span><span class=\"p\">))</span>\n\n<span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">'Some string!'</span><span class=\"p\">,</span>\n    <span class=\"n\">boolean</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">flat_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">non_sqlalchemy_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)],</span>\n    <span class=\"n\">rel</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"s1\">'Some string!'</span><span class=\"p\">,</span>\n        <span class=\"n\">non_sqlalchemy_dict</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">qwerty</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Exclusive schema</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">only</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'flat_id'</span><span class=\"p\">,</span> <span class=\"s1\">'rel.id'</span><span class=\"p\">,</span> <span class=\"s1\">'non_sqlalchemy_list.a'</span><span class=\"p\">))</span>\n\n<span class=\"nb\">dict</span><span class=\"p\">(</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">flat_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">non_sqlalchemy_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)],</span>\n    <span class=\"n\">rel</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Custom formats</h1>\n<p>If you want to change datetime/date/time/decimal format in one model you can specify it like below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_table_name'</span>\n    \n    <span class=\"n\">date_format</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">'</span>  <span class=\"c1\"># Unixtimestamp (seconds)</span>\n    <span class=\"n\">datetime_format</span> <span class=\"o\">=</span> <span class=\"s1\">'%Y %b </span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S.</span><span class=\"si\">%f</span><span class=\"s1\">'</span>\n    <span class=\"n\">time_format</span> <span class=\"o\">=</span> <span class=\"s1\">'%H:%M.</span><span class=\"si\">%f</span><span class=\"s1\">'</span>\n    <span class=\"n\">decimal_format</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{:0&gt;10.3}</span><span class=\"s1\">'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">)</span>\n    <span class=\"n\">money</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'12.123'</span><span class=\"p\">)</span>  <span class=\"c1\"># same result with sa.Float(asdecimal=True, ...)</span>\n</pre>\n<p>If you want to change format in every model, you should write\nyour own mixin class inherited from <code>SerializerMixin</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSerializerMixin</span><span class=\"p\">(</span><span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">date_format</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">'</span>  <span class=\"c1\"># Unixtimestamp (seconds)</span>\n    <span class=\"n\">datetime_format</span> <span class=\"o\">=</span> <span class=\"s1\">'%Y %b </span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S.</span><span class=\"si\">%f</span><span class=\"s1\">'</span>\n    <span class=\"n\">time_format</span> <span class=\"o\">=</span> <span class=\"s1\">'%H:%M.</span><span class=\"si\">%f</span><span class=\"s1\">'</span>\n    <span class=\"n\">decimal_format</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{:0&gt;10.3}</span><span class=\"s1\">'</span>\n</pre>\n<p>And later use it as usual:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">some.lib.package</span> <span class=\"kn\">import</span> <span class=\"n\">CustomSerializerMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSerializerModel</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">CustomSerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_table_name'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"p\">)</span>\n    <span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">DateTime</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">)</span>\n    <span class=\"n\">money</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'12.123'</span><span class=\"p\">)</span>  <span class=\"c1\"># same result with sa.Float(asdecimal=True, ...)</span>\n</pre>\n<p>All <code>date/time/datetime/decimal</code> fields will be serialized using your custom formats.</p>\n<ul>\n<li>Decimal uses python <code>format</code> syntax</li>\n<li>To get <strong>unixtimestamp</strong> use <code>%s</code>,</li>\n<li>Other <code>datetime</code> formats you can find <a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior\" rel=\"nofollow\">in docs</a></li>\n</ul>\n<h1>Custom types</h1>\n<p>By default the library can serialize the following types:</p>\n<pre><code>- int \n- str \n- float \n- bytes \n- bool \n- type(None)\n- time\n- datetime\n- date\n- Decimal\n- Enum\n- dict (if values and keys are one of types mentioned above, or inherit one of them)\n- any Iterable (if types of values are mentioned above, or inherit one of them)\n</code></pre>\n<p>If you want to add serialization of any other type or redefine the default behaviour.\nYou should add something like this:</p>\n<pre><span class=\"n\">serialize_types</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">SomeType</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">some_expression</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"n\">AnyOtherType</span><span class=\"p\">,</span> <span class=\"n\">some_function</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>To your own mixin class inherited from <code>SerializerMixin</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geoalchemy2.elements</span> <span class=\"kn\">import</span> <span class=\"n\">WKBElement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geoalchemy2.shape</span> <span class=\"kn\">import</span> <span class=\"n\">to_shape</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">serialize_int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"mi\">100</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSerializerMixin</span><span class=\"p\">(</span><span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">serialize_types</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">WKBElement</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">to_shape</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_wkt</span><span class=\"p\">()),</span>\n        <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">serialize_int</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>... or directly to the model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">geoalchemy2</span> <span class=\"kn\">import</span> <span class=\"n\">Geometry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">serialize_types</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">WKBElement</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">to_shape</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_wkt</span><span class=\"p\">()),</span>\n        <span class=\"p\">(</span><span class=\"n\">AnyOtherType</span><span class=\"p\">,</span> <span class=\"n\">serialize_smth</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'point'</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Geometry</span><span class=\"p\">(</span><span class=\"s1\">'POINT'</span><span class=\"p\">))</span>\n</pre>\n<p>Unfortunately you can not access formats or tzinfo in that functions.\nI'll implement this logic later if any of users needs it.</p>\n<h1>Timezones</h1>\n<p>To keep <code>datetimes</code> consistent its better to store it in the database normalized to <strong>UTC</strong>.\nBut when you return response, sometimes (mostly in web, mobile applications can do it themselves)\nyou need to convert all <code>datetimes</code> to user's timezone.\nSo you need to tell serializer what timezone to use.\nThere are two ways to do it:</p>\n<ul>\n<li>The simplest one is to pass timezone directly as an argument for <code>to_dict</code> function</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'Europe/Moscow'</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>But if you do not want to write this code in every function, you should define\ntimezone logic in your custom mixin (how to use customized mixin see <a href=\"#Castomization\" rel=\"nofollow\">Castomization</a>)</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_serializer</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">some.package</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_user</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSerializerMixin</span><span class=\"p\">(</span><span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"nf\">get_tzinfo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n       <span class=\"c1\"># you can write your own logic here, </span>\n       <span class=\"c1\"># the example below will work if you store timezone</span>\n       <span class=\"c1\"># in user's profile</span>\n       <span class=\"k\">return</span> <span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"n\">get_current_user</span><span class=\"p\">()[</span><span class=\"s1\">'timezone'</span><span class=\"p\">])</span>\n</pre>\n<h1>Troubleshooting</h1>\n<h2>Max recursion</h2>\n<p>If you've faced with <strong>maximum recursion depth exceeded</strong> exception,\nmost likely the serializer have found instance of the same class somewhere among model's relationships.\nEspecially if you use backrefs. In this case you need to tell it where to stop like below:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n    \n    <span class=\"c1\"># Exclude nested model of the same class to avoid max recursion error</span>\n    <span class=\"n\">serialize_rules</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'-related_models.user'</span><span class=\"p\">,)</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">related_models</span> <span class=\"o\">=</span> <span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s2\">\"RelatedModel\"</span><span class=\"p\">,</span> <span class=\"n\">backref</span><span class=\"o\">=</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>\n    \n    \n<span class=\"k\">class</span> <span class=\"nc\">RelatedModel</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">SerializerMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'some_table'</span>\n\n    <span class=\"o\">...</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'users.id'</span><span class=\"p\">))</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>If for some reason you need the field <code>user</code> to be presented in <code>related_models</code> field.\nYou can change <code>serialize_rules</code> to <code>('-related_models.user.related_models',)</code>\nTo break the chain of serialisation a bit further.</p>\n<h2>Controversial rules</h2>\n<p>If you add controversial rules like <code>serialize_rules = ('-prop', 'prop.id')</code>\nThe serializer will exclude the whole <code>prop</code>. You need to revert these rules\nor use <code>serialize_only</code> option. You can also combine <code>serialize_only</code> and <code>serialize_only</code>.</p>\n<h2>Negative rules in ONLY section</h2>\n<p>If you pass rules in <code>serialize_only</code> the serializer becomes <strong>NOT</strong> greedy and returns <strong>ONLY</strong> fields listed there.\nSo <code>serialize_only = ('-model.id',)</code> will return nothing\nBut <code>serialize_only = ('model', '-model.id',)</code> will return <code>model</code> field without <code>id</code></p>\n<h2>One element tuples</h2>\n<p>Do not forget to add <strong>comma</strong> at the end of one element tuples, it is trivial,\nbut a lot of developers forget about it:</p>\n<pre><span class=\"n\">serialize_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'some_field'</span><span class=\"p\">,)</span>  <span class=\"c1\"># &lt;--- Thats right!</span>\n<span class=\"n\">serialize_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'some_field'</span><span class=\"p\">)</span>  <span class=\"c1\"># &lt;--- WRONG it is actually not a tuple</span>\n</pre>\n<h1>Tests</h1>\n<p>To run tests and see tests coverage report just type the following command:(doker and doker-compose should be installed on you local machine)</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<p>To run a particular test use</p>\n<pre>make <span class=\"nb\">test</span> <span class=\"nv\">file</span><span class=\"o\">=</span>tests/some_file.py\nmake <span class=\"nb\">test</span> <span class=\"nv\">file</span><span class=\"o\">=</span>tests/some_file.py::test_func\n</pre>\n<p>I will appreciate any help in improving this library, so feel free to submit issues or pull requests.</p>\n\n          </div>"}, "last_serial": 6012390, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "a76286455329726443e713f2d8aa65af", "sha256": "d2b6bfd16d80b442d38118e8e290d79ce64c7daeb13b19b561abe53a87b78ee8"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.2.tar.gz", "has_sig": false, "md5_digest": "a76286455329726443e713f2d8aa65af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2882, "upload_time": "2017-12-14T12:50:31", "upload_time_iso_8601": "2017-12-14T12:50:31.942970Z", "url": "https://files.pythonhosted.org/packages/da/23/e844e207e8ca5473048f203b7cdc34b42100e306c8c5d93e4b3b2e64da4e/SQLAlchemy-serializer-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b4700e83c23d6e78de252136812e5889", "sha256": "3175274458978be01ee89b571841e19573527058b20073d4f42e99a9b970bf87"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.3.tar.gz", "has_sig": false, "md5_digest": "b4700e83c23d6e78de252136812e5889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2923, "upload_time": "2017-12-14T19:36:06", "upload_time_iso_8601": "2017-12-14T19:36:06.465431Z", "url": "https://files.pythonhosted.org/packages/f9/77/a3db24e2d1fa084b4736dabe29750d1cce25ad2375d528e84ecea24bf409/SQLAlchemy-serializer-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "61f8128c9267d738d37552fdb653921e", "sha256": "c2f9bfa90f52ce513d0fa4019a75f984ed6fc4724e8d40eea6e6292a36bc3f5d"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.4.tar.gz", "has_sig": false, "md5_digest": "61f8128c9267d738d37552fdb653921e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3644, "upload_time": "2017-12-20T16:05:57", "upload_time_iso_8601": "2017-12-20T16:05:57.572403Z", "url": "https://files.pythonhosted.org/packages/1b/77/17963177e0ef2d833ab9a7f4baa8bb0a9460fa2f6f3fb5e7bccd94308a52/SQLAlchemy-serializer-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "d84a5595356df1f6ad83c21bf48733b7", "sha256": "48e051adc353c728429f5a09dcabe4ad2b2a4abff4f2af3a4573d7ab51756250"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.5.tar.gz", "has_sig": false, "md5_digest": "d84a5595356df1f6ad83c21bf48733b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3702, "upload_time": "2017-12-26T10:22:11", "upload_time_iso_8601": "2017-12-26T10:22:11.065122Z", "url": "https://files.pythonhosted.org/packages/25/13/cd49f19fe6df1fe5e9a847948c7e76cfbbcacc0ac6c8e3f23f78691d3ec6/SQLAlchemy-serializer-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "d9fd41a8f42711d9f70d5110756aff9b", "sha256": "1ff3187cdd70f61a0093cacc43dc4dcffc75be6fb39999aef893aeec21d95cce"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.6.tar.gz", "has_sig": false, "md5_digest": "d9fd41a8f42711d9f70d5110756aff9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3695, "upload_time": "2017-12-27T10:47:30", "upload_time_iso_8601": "2017-12-27T10:47:30.011741Z", "url": "https://files.pythonhosted.org/packages/56/35/a8ebed131f6da06c81c0871735dc887524d00d1dbd9e837f182d1305de10/SQLAlchemy-serializer-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "fb4165085af0cd600af6b7f710f7acdf", "sha256": "91656c5545b2302097f874327494604e8b8ee6cb9d8c9dd7d6c3dfbb50d6bb14"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.7.tar.gz", "has_sig": false, "md5_digest": "fb4165085af0cd600af6b7f710f7acdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3697, "upload_time": "2018-01-16T11:15:59", "upload_time_iso_8601": "2018-01-16T11:15:59.819929Z", "url": "https://files.pythonhosted.org/packages/e8/8f/05673200c630345bd8ded48a49c28531538033bb7a04015f4edd47d8995b/SQLAlchemy-serializer-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "5fa2183715ced9cc838943bb2bd001ee", "sha256": "793bc5a710bcacf8d1142c4d3269f37a7c18847f680a2ea0ba47ea1c1e212ac2"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.8.tar.gz", "has_sig": false, "md5_digest": "5fa2183715ced9cc838943bb2bd001ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3855, "upload_time": "2018-01-16T11:24:03", "upload_time_iso_8601": "2018-01-16T11:24:03.749495Z", "url": "https://files.pythonhosted.org/packages/3f/5d/0df3a7ef8016b02ccb4813e2e8d081d35e18209ad1862019ec906de6437e/SQLAlchemy-serializer-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "1f22c34f8591deb892f94e99d99d249d", "sha256": "39cdf630fc44200c7bb50d1731a08f923a0716d8fc4187bd0cf0096fb74cf73d"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.9.tar.gz", "has_sig": false, "md5_digest": "1f22c34f8591deb892f94e99d99d249d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3879, "upload_time": "2018-02-12T17:03:18", "upload_time_iso_8601": "2018-02-12T17:03:18.596254Z", "url": "https://files.pythonhosted.org/packages/81/bd/92cddbd4cc2600d9c0dd3cb3083caa94c2d0d0ddb4e0f1e2f6dbbc740ecd/SQLAlchemy-serializer-0.9.tar.gz", "yanked": false}], "0.91": [{"comment_text": "", "digests": {"md5": "3069c3385b5ab6252dc87c7e1f2a6bad", "sha256": "4ec9f26b0b113fe2520e9f0be51bf8aad337c4fcfe884ddb23bf204de426b3af"}, "downloads": -1, "filename": "SQLAlchemy-serializer-0.91.tar.gz", "has_sig": false, "md5_digest": "3069c3385b5ab6252dc87c7e1f2a6bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3877, "upload_time": "2018-03-27T15:53:06", "upload_time_iso_8601": "2018-03-27T15:53:06.655689Z", "url": "https://files.pythonhosted.org/packages/a7/15/9f7698dee44d724bac5f3667f0927325df6a509570048435ecd15956ebcf/SQLAlchemy-serializer-0.91.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b8dd283a46f8bd15a4061af02383e958", "sha256": "12ef053adb6eb4f9dd92b789d9839a015c0f553a180aad1a2c0e7b9d9e1d5dfa"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.1.tar.gz", "has_sig": false, "md5_digest": "b8dd283a46f8bd15a4061af02383e958", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4898, "upload_time": "2019-01-19T18:52:15", "upload_time_iso_8601": "2019-01-19T18:52:15.369262Z", "url": "https://files.pythonhosted.org/packages/f4/c9/8890e1afe10cd221917d37c1d7aa37c362d9598f2d0a2eb2ae09e473564f/SQLAlchemy-serializer-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f55bb474a95c1bde8c52f005e7214eef", "sha256": "0102c80869bb30c5c9eb9bc7fd0fe5321a2ce8f72aa3d916d1bcc061b7f0334c"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f55bb474a95c1bde8c52f005e7214eef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4925, "upload_time": "2019-04-20T18:40:57", "upload_time_iso_8601": "2019-04-20T18:40:57.109580Z", "url": "https://files.pythonhosted.org/packages/a5/f0/ec25204b2ac83c6b84da3489b6d203ca48dcccd4d7905ebf5d05dc046e41/SQLAlchemy-serializer-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3e3c7936bff4a53f2a458f1c52dfe723", "sha256": "883f012ed81c3a07e275adc58836572ca925631e2a0400110b97096dbbb17c55"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3e3c7936bff4a53f2a458f1c52dfe723", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6603, "upload_time": "2019-04-20T18:51:55", "upload_time_iso_8601": "2019-04-20T18:51:55.347868Z", "url": "https://files.pythonhosted.org/packages/46/47/7b89d75f3a03668c185ef63a3d7cb8327dfdc347161eee972aa0fc9599e8/SQLAlchemy-serializer-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "4b2eb18ddb7c7b07f68d7ec4cef37e60", "sha256": "ad685926f7fc7f3f7fbe0c7c19abbae8e5bf8987c4fd62382415dfe8362f1e8b"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.1.3.tar.gz", "has_sig": false, "md5_digest": "4b2eb18ddb7c7b07f68d7ec4cef37e60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6627, "upload_time": "2019-04-20T19:03:41", "upload_time_iso_8601": "2019-04-20T19:03:41.309282Z", "url": "https://files.pythonhosted.org/packages/07/dc/bd77ce9bddf561c4eeb82103795c96f6c83e52469ca73c48790dfb6841dc/SQLAlchemy-serializer-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "d625cb4cf8f1cc89485c97bac2915934", "sha256": "6af05436b5ba2061d8c04a6db31e31e74b033ef69b1f068be1e654d54bf065fb"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.1.4.tar.gz", "has_sig": false, "md5_digest": "d625cb4cf8f1cc89485c97bac2915934", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4929, "upload_time": "2019-04-22T08:00:08", "upload_time_iso_8601": "2019-04-22T08:00:08.913181Z", "url": "https://files.pythonhosted.org/packages/e8/53/bfea4ea7713929f1af506beaf444ca415d05e58c2458b6ec553e5a43fe72/SQLAlchemy-serializer-1.1.4.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f57082a6ea587ab185bdd08ff8e73b42", "sha256": "240e387d28dbb79803ebb47ea1b8c4d5f46fe555a6e078a407421a72fe2d8730"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.2.tar.gz", "has_sig": false, "md5_digest": "f57082a6ea587ab185bdd08ff8e73b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4961, "upload_time": "2019-05-28T21:34:58", "upload_time_iso_8601": "2019-05-28T21:34:58.024741Z", "url": "https://files.pythonhosted.org/packages/da/f8/fd08fb1c365cc599634c865ba3324e2250a386c9aa773ad67447cbfa23f4/SQLAlchemy-serializer-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "25c312df4dcc0858e772736294a9c840", "sha256": "2f8d360b63b0c3fe450553177ca3ee8779479ed307c0aebad711f9f128890193"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.tar.gz", "has_sig": false, "md5_digest": "25c312df4dcc0858e772736294a9c840", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5083, "upload_time": "2019-05-31T12:35:32", "upload_time_iso_8601": "2019-05-31T12:35:32.116810Z", "url": "https://files.pythonhosted.org/packages/95/88/7fc5601c18e97621441be15271c2d489ff54b2e70ae173ab37a75dc6e5ad/SQLAlchemy-serializer-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "e60c04574342134038289a0c2e04ea42", "sha256": "3d7b053b1552bce47101e1e8e4e236cbd70be49c74f1a3f4971769ee2d043d5d"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.1.tar.gz", "has_sig": false, "md5_digest": "e60c04574342134038289a0c2e04ea42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5116, "upload_time": "2019-06-17T23:19:42", "upload_time_iso_8601": "2019-06-17T23:19:42.799167Z", "url": "https://files.pythonhosted.org/packages/46/c4/561cc43b5dfe03bb2889cef8e8d5b1b69c193558635cba7e901a4191216b/SQLAlchemy-serializer-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "28595d4aa2a4296cc27e06ad90b1ea57", "sha256": "98947a4e66f6a8d731d4a6da0f0027f0830ad97c72ec095750747238e89d5936"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.2.tar.gz", "has_sig": false, "md5_digest": "28595d4aa2a4296cc27e06ad90b1ea57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5150, "upload_time": "2019-09-24T16:12:44", "upload_time_iso_8601": "2019-09-24T16:12:44.038991Z", "url": "https://files.pythonhosted.org/packages/e4/ca/4d7d99d1ca70fe7439bdb9d5e54c8c6b4073fc527ee281df011746d48fa2/SQLAlchemy-serializer-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "3e08fcf736261d6af534e81074fb482c", "sha256": "403ac3bd8761443ec9c39851d4b4ffa67c5c7f15c329e21cecd0b6355ba193e7"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.3.tar.gz", "has_sig": false, "md5_digest": "3e08fcf736261d6af534e81074fb482c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5154, "upload_time": "2019-10-04T08:44:13", "upload_time_iso_8601": "2019-10-04T08:44:13.401090Z", "url": "https://files.pythonhosted.org/packages/e5/9f/2727832291c4612d3d71683c73b29589561be54db7a429009ebdfd1782c4/SQLAlchemy-serializer-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "22c429a4a5facea37955b7f4111991d1", "sha256": "409962f413340363a50438d4697ca2e3de4813c263cb466695ab902e9b26390c"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.4.tar.gz", "has_sig": false, "md5_digest": "22c429a4a5facea37955b7f4111991d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5154, "upload_time": "2019-10-10T09:29:54", "upload_time_iso_8601": "2019-10-10T09:29:54.967726Z", "url": "https://files.pythonhosted.org/packages/57/86/0652ceaaa6de4d2a11d03efc810e9f958df3db4745a9cd2653bba5a9adab/SQLAlchemy-serializer-1.3.4.tar.gz", "yanked": false}], "1.3.4.1": [{"comment_text": "", "digests": {"md5": "75d33b592ca7acd0739208ee2e7ad799", "sha256": "9acb5fd7e45bc4117a539d32695e5f1c330a97d7063aff6707ec78426ae58188"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.4.1.tar.gz", "has_sig": false, "md5_digest": "75d33b592ca7acd0739208ee2e7ad799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9820, "upload_time": "2019-10-18T09:45:34", "upload_time_iso_8601": "2019-10-18T09:45:34.138857Z", "url": "https://files.pythonhosted.org/packages/af/b1/3052f1c56b2c563f1b97c3339bdbac2f9e64d2cdc00d9cc71bad79dfb6e5/SQLAlchemy-serializer-1.3.4.1.tar.gz", "yanked": false}], "1.3.4.2": [{"comment_text": "", "digests": {"md5": "9cb5bd7f0c13d2e416f0eb981b5063c6", "sha256": "bd26034a349080f352664dcbc5cb8c6ec0f34170c622ef22d6f47dd750499b52"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.4.2.tar.gz", "has_sig": false, "md5_digest": "9cb5bd7f0c13d2e416f0eb981b5063c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10440, "upload_time": "2019-10-22T12:06:06", "upload_time_iso_8601": "2019-10-22T12:06:06.897138Z", "url": "https://files.pythonhosted.org/packages/cd/64/327122c82e5a87005d47bf30f3466ff715125fe67c3589661abdf9795557/SQLAlchemy-serializer-1.3.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9cb5bd7f0c13d2e416f0eb981b5063c6", "sha256": "bd26034a349080f352664dcbc5cb8c6ec0f34170c622ef22d6f47dd750499b52"}, "downloads": -1, "filename": "SQLAlchemy-serializer-1.3.4.2.tar.gz", "has_sig": false, "md5_digest": "9cb5bd7f0c13d2e416f0eb981b5063c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10440, "upload_time": "2019-10-22T12:06:06", "upload_time_iso_8601": "2019-10-22T12:06:06.897138Z", "url": "https://files.pythonhosted.org/packages/cd/64/327122c82e5a87005d47bf30f3466ff715125fe67c3589661abdf9795557/SQLAlchemy-serializer-1.3.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:52 2020"}