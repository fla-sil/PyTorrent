{"info": {"author": "Simon Willison", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# shapefile-to-sqlite\n\n[![PyPI](https://img.shields.io/pypi/v/shapefile-to-sqlite.svg)](https://pypi.org/project/shapefile-to-sqlite/)\n[![CircleCI](https://circleci.com/gh/simonw/shapefile-to-sqlite.svg?style=svg)](https://circleci.com/gh/simonw/shapefile-to-sqlite)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/simonw/shapefile-to-sqlite/blob/master/LICENSE)\n\nLoad shapefiles into a SQLite (optionally SpatiaLite) database.\n\n## How to install\n\n    $ pip install shapefile-to-sqlite\n\n## How to use\n\nYou can run this tool against a shapefile file like so:\n\n    $ shapefile-to-sqlite my.db features.shp\n\nThis will load the geometries as GeoJSON in a text column.\n\n## Using with SpatiaLite\n\nIf you have [SpatiaLite](https://www.gaia-gis.it/fossil/libspatialite/index) available you can load them as SpatiaLite geometries like this:\n\n    $ shapefile-to-sqlite my.db features.shp --spatialite\n\nThe data will be loaded into a table called `features` - based on the name of the shapefile. You can specify an alternative table name using `--table`:\n\n    $ shapefile-to-sqlite my.db features.shp --table=places\n\nThe tool will search for the SpatiaLite module in the following locations:\n\n- `/usr/lib/x86_64-linux-gnu/mod_spatialite.so`\n- `/usr/local/lib/mod_spatialite.dylib`\n\nIf you have installed the module in another location, you can use the `--spatialite_mod=xxx` option to specify where:\n\n    $ shapefile-to-sqlite my.db features.shp \\\n        --spatialite_mod=/usr/lib/mod_spatialite.dylib\n\n## Projections\n\nBy default, this tool will attempt to convert geometries in the shapefile to the WGS 84 projection, for best conformance with the [GeoJSON specification](https://tools.ietf.org/html/rfc7946).\n\nIf you want it to leave the data in whatever projection was used by the shapefile, use the `--crs=keep` option.\n\nYou can convert the data to another output projection by passing it to the `--crs` option. For example, to convert to [EPSG:2227](https://epsg.io/2227) (California zone 3) use `--crs=espg:2227`.\n\nThe full list of formats accepted by the `--crs` option is [documented here](https://pyproj4.github.io/pyproj/stable/api/crs.html#pyproj.crs.CRS.__init__).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/simonw/shapefile-to-sqlite", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "shapefile-to-sqlite", "package_url": "https://pypi.org/project/shapefile-to-sqlite/", "platform": "", "project_url": "https://pypi.org/project/shapefile-to-sqlite/", "project_urls": {"Homepage": "https://github.com/simonw/shapefile-to-sqlite"}, "release_url": "https://pypi.org/project/shapefile-to-sqlite/0.2/", "requires_dist": ["sqlite-utils (>=2.2)", "Shapely", "Fiona", "pyproj", "pytest ; extra == 'test'"], "requires_python": "", "summary": "Load shapefiles into a SQLite (optionally SpatiaLite) database", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>shapefile-to-sqlite</h1>\n<p><a href=\"https://pypi.org/project/shapefile-to-sqlite/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3bda7407fe3715ce9c0e2e1145bdae7015ae8fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736861706566696c652d746f2d73716c6974652e737667\"></a>\n<a href=\"https://circleci.com/gh/simonw/shapefile-to-sqlite\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dba0ca0831f2eec1fbf47f2e42a362a94c36fe54/68747470733a2f2f636972636c6563692e636f6d2f67682f73696d6f6e772f736861706566696c652d746f2d73716c6974652e7376673f7374796c653d737667\"></a>\n<a href=\"https://github.com/simonw/shapefile-to-sqlite/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bad0ad2a7195b40874e3a10488118122d89489fd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p>Load shapefiles into a SQLite (optionally SpatiaLite) database.</p>\n<h2>How to install</h2>\n<pre><code>$ pip install shapefile-to-sqlite\n</code></pre>\n<h2>How to use</h2>\n<p>You can run this tool against a shapefile file like so:</p>\n<pre><code>$ shapefile-to-sqlite my.db features.shp\n</code></pre>\n<p>This will load the geometries as GeoJSON in a text column.</p>\n<h2>Using with SpatiaLite</h2>\n<p>If you have <a href=\"https://www.gaia-gis.it/fossil/libspatialite/index\" rel=\"nofollow\">SpatiaLite</a> available you can load them as SpatiaLite geometries like this:</p>\n<pre><code>$ shapefile-to-sqlite my.db features.shp --spatialite\n</code></pre>\n<p>The data will be loaded into a table called <code>features</code> - based on the name of the shapefile. You can specify an alternative table name using <code>--table</code>:</p>\n<pre><code>$ shapefile-to-sqlite my.db features.shp --table=places\n</code></pre>\n<p>The tool will search for the SpatiaLite module in the following locations:</p>\n<ul>\n<li><code>/usr/lib/x86_64-linux-gnu/mod_spatialite.so</code></li>\n<li><code>/usr/local/lib/mod_spatialite.dylib</code></li>\n</ul>\n<p>If you have installed the module in another location, you can use the <code>--spatialite_mod=xxx</code> option to specify where:</p>\n<pre><code>$ shapefile-to-sqlite my.db features.shp \\\n    --spatialite_mod=/usr/lib/mod_spatialite.dylib\n</code></pre>\n<h2>Projections</h2>\n<p>By default, this tool will attempt to convert geometries in the shapefile to the WGS 84 projection, for best conformance with the <a href=\"https://tools.ietf.org/html/rfc7946\" rel=\"nofollow\">GeoJSON specification</a>.</p>\n<p>If you want it to leave the data in whatever projection was used by the shapefile, use the <code>--crs=keep</code> option.</p>\n<p>You can convert the data to another output projection by passing it to the <code>--crs</code> option. For example, to convert to <a href=\"https://epsg.io/2227\" rel=\"nofollow\">EPSG:2227</a> (California zone 3) use <code>--crs=espg:2227</code>.</p>\n<p>The full list of formats accepted by the <code>--crs</code> option is <a href=\"https://pyproj4.github.io/pyproj/stable/api/crs.html#pyproj.crs.CRS.__init__\" rel=\"nofollow\">documented here</a>.</p>\n\n          </div>"}, "last_serial": 6658365, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5358635df9eda154a0d3137c508f9e4e", "sha256": "e4319a5b720dda75f4882ed9369b46be64efe2c46b6726873424be02d3eed1b9"}, "downloads": -1, "filename": "shapefile_to_sqlite-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5358635df9eda154a0d3137c508f9e4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8192, "upload_time": "2020-02-16T18:36:08", "upload_time_iso_8601": "2020-02-16T18:36:08.777909Z", "url": "https://files.pythonhosted.org/packages/36/da/2d5388cd1f37f3035e453f0e77c69790ee11bac55bebf57ab468afb46fcc/shapefile_to_sqlite-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "fccf046dfae1559fc75d942130bc887d", "sha256": "cd24f7b62583774994093a31de1e6ec4f3933659840dfea140f02015009ecf71"}, "downloads": -1, "filename": "shapefile_to_sqlite-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fccf046dfae1559fc75d942130bc887d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9982, "upload_time": "2020-02-19T05:19:57", "upload_time_iso_8601": "2020-02-19T05:19:57.243742Z", "url": "https://files.pythonhosted.org/packages/ee/e5/ef945558afb91688452eba5635627c43e211165d7b245c56c445adc1c38d/shapefile_to_sqlite-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fccf046dfae1559fc75d942130bc887d", "sha256": "cd24f7b62583774994093a31de1e6ec4f3933659840dfea140f02015009ecf71"}, "downloads": -1, "filename": "shapefile_to_sqlite-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fccf046dfae1559fc75d942130bc887d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9982, "upload_time": "2020-02-19T05:19:57", "upload_time_iso_8601": "2020-02-19T05:19:57.243742Z", "url": "https://files.pythonhosted.org/packages/ee/e5/ef945558afb91688452eba5635627c43e211165d7b245c56c445adc1c38d/shapefile_to_sqlite-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:13:45 2020"}