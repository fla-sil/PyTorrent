{"info": {"author": "R\u00e9mi Koenig", "author_email": "remi.koenig@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "Django BigAuto Hack\r\n        ===================\r\n        \r\n        `Support for BigAutoField <https://code.djangoproject.com/ticket/14286>`_ has been a work in progress for 4 years now. But the ticket has the following valuable comment:\r\n        \r\n          In the meantime, it suffices to use a standard AutoField and hack the database like so:\r\n         \r\n          In the table in question, alter the field like so: ``ALTER TABLE [table_name] ALTER COLUMN [field_name] [data_type]``, where ``[data_type]`` is one of the following:\r\n         \r\n          - MySQL: bigint AUTO_INCREMENT\r\n          - Oracle: NUMBER(19)\r\n          - PostgreSQL: bigserial\r\n          - SQLite: integer\r\n         \r\n          For every foreign key pointing to your field, you will also need to alter the column, but with these data types:\r\n         \r\n          - MySQL: bigint\r\n          - Oracle: NUMBER(19)\r\n          - PostgreSQL: bigint\r\n          - SQLite: integer\r\n         \r\n          This is a pain, but you only need to do it when creating tables, once. On the other hand, users shouldn't have to hack the database for such a simple feature, in my opinion. It would be super-cool if 1.3 included a fully-functional BigAutoField.\r\n        \r\n        This simple django app makes this hack less of pain. Running\r\n        \r\n        ::\r\n        \r\n            $ python manage.py bigautohack myapp.MyModel\r\n        \r\n        Will run the needed ``ALTER TABLE`` commands, turning the database column for ``MyModel``'s primary key into a big integer, as well as all columns referencing ``MyModel``.\r\n        \r\n        To install simply run ``pip install django-bigautohack`` and add ``bigautohack`` to your ``INSTALLED_APPS``.\r\n        \r\n        Limitation\r\n        ==========\r\n        \r\n        You probably need to make generic foreign keys use a big integer as well.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Remiremi/django_bigautohack", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-bigautohack", "package_url": "https://pypi.org/project/django-bigautohack/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-bigautohack/", "project_urls": {"Homepage": "https://github.com/Remiremi/django_bigautohack"}, "release_url": "https://pypi.org/project/django-bigautohack/0.1/", "requires_dist": null, "requires_python": null, "summary": "Nice working solution to make up for the absence of BigAutoField in django (#14286).", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django BigAuto Hack\n<br>        ===================\n<br>        \n<br>        `Support for BigAutoField &lt;https://code.djangoproject.com/ticket/14286&gt;`_ has been a work in progress for 4 years now. But the ticket has the following valuable comment:\n<br>        \n<br>          In the meantime, it suffices to use a standard AutoField and hack the database like so:\n<br>         \n<br>          In the table in question, alter the field like so: ``ALTER TABLE [table_name] ALTER COLUMN [field_name] [data_type]``, where ``[data_type]`` is one of the following:\n<br>         \n<br>          - MySQL: bigint AUTO_INCREMENT\n<br>          - Oracle: NUMBER(19)\n<br>          - PostgreSQL: bigserial\n<br>          - SQLite: integer\n<br>         \n<br>          For every foreign key pointing to your field, you will also need to alter the column, but with these data types:\n<br>         \n<br>          - MySQL: bigint\n<br>          - Oracle: NUMBER(19)\n<br>          - PostgreSQL: bigint\n<br>          - SQLite: integer\n<br>         \n<br>          This is a pain, but you only need to do it when creating tables, once. On the other hand, users shouldn't have to hack the database for such a simple feature, in my opinion. It would be super-cool if 1.3 included a fully-functional BigAutoField.\n<br>        \n<br>        This simple django app makes this hack less of pain. Running\n<br>        \n<br>        ::\n<br>        \n<br>            $ python manage.py bigautohack myapp.MyModel\n<br>        \n<br>        Will run the needed ``ALTER TABLE`` commands, turning the database column for ``MyModel``'s primary key into a big integer, as well as all columns referencing ``MyModel``.\n<br>        \n<br>        To install simply run ``pip install django-bigautohack`` and add ``bigautohack`` to your ``INSTALLED_APPS``.\n<br>        \n<br>        Limitation\n<br>        ==========\n<br>        \n<br>        You probably need to make generic foreign keys use a big integer as well.\n          </div>"}, "last_serial": 1207277, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d00d5aaefc10ce7c37a87a35ad44c88b", "sha256": "dab4267670b7563d77f916b96bd58488aa894cc325f9912949fa3b337e6afbd0"}, "downloads": -1, "filename": "django-bigautohack-0.1.tar.gz", "has_sig": false, "md5_digest": "d00d5aaefc10ce7c37a87a35ad44c88b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3691, "upload_time": "2014-08-30T09:30:38", "upload_time_iso_8601": "2014-08-30T09:30:38.310825Z", "url": "https://files.pythonhosted.org/packages/84/22/a25be2fc4641d1c1de86743c8bd6c8b30641d329b451254208ea55b4991e/django-bigautohack-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d00d5aaefc10ce7c37a87a35ad44c88b", "sha256": "dab4267670b7563d77f916b96bd58488aa894cc325f9912949fa3b337e6afbd0"}, "downloads": -1, "filename": "django-bigautohack-0.1.tar.gz", "has_sig": false, "md5_digest": "d00d5aaefc10ce7c37a87a35ad44c88b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3691, "upload_time": "2014-08-30T09:30:38", "upload_time_iso_8601": "2014-08-30T09:30:38.310825Z", "url": "https://files.pythonhosted.org/packages/84/22/a25be2fc4641d1c1de86743c8bd6c8b30641d329b451254208ea55b4991e/django-bigautohack-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:26 2020"}