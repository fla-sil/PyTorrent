{"info": {"author": "Greene Lab", "author_email": "team@greenelab.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "Genes\n*****\n\nGenes is a Django app to represent genes.\n\n\nDownload and Install\n====================\n\nThis package is registered as ``django-genes`` in PyPI and is pip\ninstallable:\n\n::\n\n   pip install django-genes\n\nIf any of the following dependency packages are not found on your\nsystem, ``pip`` will install them too:\n\n* ``django 1.8 or later`` (Django web framework)\n\n* ``django-organisms`` (``Organisms`` model, which is required by\n  ``Genes`` model)\n\n* ``django-haystack`` (see ``Search Indexes and Data Template``\n  section.)\n\n* ``django-fixtureless`` (for unittest, see ``tests.py``)\n\n\nQuick Start\n===========\n\n1. Add **'genes'** and **'organisms'** to your ``INSTALLED_APPS``\nsetting like this:\n\n::\n\n   INSTALLED_APPS = (\n       ...\n       'organisms',\n       'genes',\n   )\n\n2. Run ``python manage.py migrate`` command to create ``genes`` and\n``organisms`` models.\n\n3. **(Optional)** The following step is only needed if you have\ndjango-tastypie installed to create a REST API for your project and\nwould like to have API endpoints for ``django-organisms`` and\n``django-genes``.\n\nAdd the following to your project's ``urls.py`` file:\n\n::\n\n   # There are probably already other imports here, such as:\n   # from django.conf.urls import url, patterns, include\n\n   # If you have not already done so, import the tastypie API:\n   from tastypie.api import Api\n\n   # Import the API Resources for Organisms and Genes:\n   from organisms.api import OrganismResource\n   from genes.api import GeneResource\n\n   # If you have not already done so, initialize your API and\n   # add the Organism and Gene Resources to it. You can also register\n   # the CrossRefResource and CrossRefDBResource if you want to have\n   # API endpoints for them as well.\n   v0_api = Api()\n   v0_api.register(OrganismResource())\n   v0_api.register(GeneResource())\n   v0_api.register(CrossRefResource())\n   v0_api.register(CrossRefDBResource())\n\n   # In the urlpatterns, include the urls for this api:\n   urlpatterns = patterns('',\n       ...\n       (r'^api/', include(v0_api.urls))\n   )\n\n\nSearch Indexes and Data Template\n================================\n\nThe module ``search_indexes.py`` can be used by **django haystack**\n(https://github.com/django-haystack/django-haystack) to search genes.\nIt includes the Gene fields that should be included in the search\nindex, and how they should be weighted. The ``text`` field refers to a\ndocument that is built for the search engine to index. The location of\ndata template for this document is:\n``genes/templates/search/indexes/gene_text.txt``.\n\nFor more information, see:\nhttp://django-haystack.readthedocs.org/en/latest/tutorial.html#handling-data\n\n\nUsage of Management Commands\n============================\n\nThis app includes five management commands in ``management/commands/``\nsub-directory:\n\n\n1. genes_add_xrdb\n-----------------\n\n..\n\n   This command adds cross-reference databases for genes. It **must**\n   be called for every new cross-reference database to populate the\n   gene and cross-reference objects in the database. It requires 2\n   arguments:\n\n   * name: the name of the database\n\n   * URL: the URL for that database, with the string '_REPL_' added at\n     the end of the URL\n\n   For example, this command adds Ensembl as a cross-reference\n   database:\n\n   ::\n\n      python manage.py genes_add_xrdb --name=Ensembl --URL=http://www.ensembl.org/Gene/Summary?g=_REPL_\n\n   And this command adds MIM as a cross-reference database:\n\n   ::\n\n      python manage.py genes_add_xrdb --name=MIM --URL=http://www.ncbi.nlm.nih.gov/omim/_REPL_\n\n\n2. genes_load_geneinfo\n----------------------\n\n..\n\n   This command parses gene info file(s) and saves the corresponding\n   gene objects into the database. It takes 2 required arguments and 5\n   optional arguments:\n\n   * (Required) geneinfo_file: location of gene info file;\n\n   * (Required) taxonomy_id: taxonomy ID for organism for which genes\n     are being populated;\n\n   * (Optional) gi_tax_id: alternative taxonomy ID for some organisms\n     (such as S. cerevisiae);\n\n   * (Optional) symbol_col: symbol column in gene info file. Default\n     is 2;\n\n   * (Optional) systematic_col: systematic column in gene info file.\n     Default is 3;\n\n   * (Optional) alias_col: the column containing gene aliases. If a\n     hyphen '-' or blank space ' ' is passed, symbol_col will be used.\n     Default is 4.\n\n   * (Optional) put_systematic_in_xrdb: name of cross-reference\n     Database for which you want to use organism systematic IDs as\n     CrossReference IDs. This is useful for Pseudomonas, for example,\n     as systematic IDs are saved into PseudoCAP cross-reference\n     database.\n\n   The following example shows how to download a gzipped human gene\n   info file from NIH FTP server, and populate the database based on\n   this file.\n\n   ::\n\n      # Create a temporary data directory:\n      mkdir data\n\n      # Download a gzipped human gene info file into data directory:\n      wget -P data/ -N ftp://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz\n\n      # Unzip downloaded file:\n      gunzip -c data/Homo_sapiens.gene_info.gz > data/Homo_sapiens.gene_info\n\n      # Call genes_load_geneinfo to populate the database:\n      python manage.py genes_load_geneinfo --geneinfo_file=data/Homo_sapiens.gene_info --taxonomy_id=9606 --systematic_col=3 --symbol_col=2\n\n\n3. genes_load_uniprot.py\n------------------------\n\n..\n\n   This command can be used to populate database with UniProtKB\n   identifiers. It takes one argument:\n\n   * uniprot_file: location of a file mapping UniProtKB IDs to Entrez\n     and Ensembl IDs\n\n   **Important:** Before calling this command, please make sure that\n   both Ensembl and Entrez identifiers have been loaded into the\n   database.\n\n   After downloading the gzipped file, use ``zgrep`` command to get\n   the lines we need (the original file is quite large), then run this\n   command:\n\n   ::\n\n      wget -P data/ -N ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz\n      zgrep -e \"GeneID\" -e \"Ensembl\" data/idmapping.dat.gz > data/uniprot_entrez_ensembl.txt\n      python manage.py genes_load_uniprot --uniprot_file=data/uniprot_entrez_ensembl.txt\n\n\n4. genes_load_wb.py\n-------------------\n\n..\n\n   This command can be used to populate database with WormBase\n   identifiers. It takes 3 arguments:\n\n   * (Required) wb_url: URL of wormbase xrefs file;\n\n   * (Optional) db_name: the name of the cross-reference database,\n     default is 'WormBase'.\n\n   As is expected, the WormBase cross-reference database should be\n   populated using the ``genes_add_xrdb`` command (see command #1)\n   before this command to populate the WormBase identifiers. Here is\n   an example:\n\n   ::\n\n      # Find latest version of WormBase here:\n      # http://www.wormbase.org/about/release_schedule#102--10-1\n      python manage.py genes_load_wb --wb_url=ftp://ftp.wormbase.org/pub/wormbase/releases/WS243/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS243.xrefs.txt.gz\n\n\n5. genes_load_gene_history.py\n-----------------------------\n\n..\n\n   This management command will read an input gene history file and\n   find all genes whose tax_id match input taxonomy ID. If the gene\n   already exists in the database, the Gene record in database will be\n   set as obsolete; if not, a new obsolete Gene record will be created\n   in the database.\n\n   The command accepts 2 required arguments and 3 optional arguments:\n\n   * (Required) gene_history_file: Input gene history file. A gzipped\n     example file can be found at:\n     ftp://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz\n\n   * (Required) tax_id: Taxonomy ID assigned by NCBI to a certain\n     organism. Genes of the other organisms in input file will be\n     skipped.\n\n   * (Optional) tax_id_col: column number of tax_id in input file.\n     Default is 1.\n\n   * (Optional) discontinued_id_col: column number of discontinued\n     GeneID in input file. Default is 3.\n\n   * (Optional) discontinued_symbol_col: column number of gene's\n     discontinued symbol in input file. Default is 4.\n\n   Note that column numbers in the last three arguments all start from\n   1, **not** 0.\n\n   For example, to add obsolete genes whose tax_id is 208964 in the\n   file \"gene_history\", we will use the command like this:\n\n   ::\n\n      # Download file into your data directory:\n      cd /data_dir; wget ftp://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz\n\n      # Unzip the downloaded file into \"gene_history\"\n      gunzip gene_history.gz\n\n      # Run management command:\n      python manage.py genes_load_gene_history /data_dir/gene_history 208964 --tax_id_col=1 --discontinued_id_col=3 --discontinued_symbol_col=4\n\n   (Here ``--tax_id_col=1 --discontinued_id_col=3\n   --discontinued_symbol_col=4`` are optional because they are using\n   default values.)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/greenelab/django-genes", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "django-genes", "package_url": "https://pypi.org/project/django-genes/", "platform": "", "project_url": "https://pypi.org/project/django-genes/", "project_urls": {"Homepage": "https://github.com/greenelab/django-genes"}, "release_url": "https://pypi.org/project/django-genes/0.18/", "requires_dist": null, "requires_python": "", "summary": "A simple Django app to represent genes.", "version": "0.18", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Genes is a Django app to represent genes.</p>\n<div id=\"download-and-install\">\n<h2>Download and Install</h2>\n<p>This package is registered as <tt><span class=\"pre\">django-genes</span></tt> in PyPI and is pip\ninstallable:</p>\n<pre>pip install django-genes\n</pre>\n<p>If any of the following dependency packages are not found on your\nsystem, <tt>pip</tt> will install them too:</p>\n<ul>\n<li><tt>django 1.8 or later</tt> (Django web framework)</li>\n<li><tt><span class=\"pre\">django-organisms</span></tt> (<tt>Organisms</tt> model, which is required by\n<tt>Genes</tt> model)</li>\n<li><tt><span class=\"pre\">django-haystack</span></tt> (see <tt>Search Indexes and Data Template</tt>\nsection.)</li>\n<li><tt><span class=\"pre\">django-fixtureless</span></tt> (for unittest, see <tt>tests.py</tt>)</li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>1. Add <strong>\u2018genes\u2019</strong> and <strong>\u2018organisms\u2019</strong> to your <tt>INSTALLED_APPS</tt>\nsetting like this:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'organisms',\n    'genes',\n)\n</pre>\n<p>2. Run <tt>python manage.py migrate</tt> command to create <tt>genes</tt> and\n<tt>organisms</tt> models.</p>\n<p>3. <strong>(Optional)</strong> The following step is only needed if you have\ndjango-tastypie installed to create a REST API for your project and\nwould like to have API endpoints for <tt><span class=\"pre\">django-organisms</span></tt> and\n<tt><span class=\"pre\">django-genes</span></tt>.</p>\n<p>Add the following to your project\u2019s <tt>urls.py</tt> file:</p>\n<pre># There are probably already other imports here, such as:\n# from django.conf.urls import url, patterns, include\n\n# If you have not already done so, import the tastypie API:\nfrom tastypie.api import Api\n\n# Import the API Resources for Organisms and Genes:\nfrom organisms.api import OrganismResource\nfrom genes.api import GeneResource\n\n# If you have not already done so, initialize your API and\n# add the Organism and Gene Resources to it. You can also register\n# the CrossRefResource and CrossRefDBResource if you want to have\n# API endpoints for them as well.\nv0_api = Api()\nv0_api.register(OrganismResource())\nv0_api.register(GeneResource())\nv0_api.register(CrossRefResource())\nv0_api.register(CrossRefDBResource())\n\n# In the urlpatterns, include the urls for this api:\nurlpatterns = patterns('',\n    ...\n    (r'^api/', include(v0_api.urls))\n)\n</pre>\n</div>\n<div id=\"search-indexes-and-data-template\">\n<h2>Search Indexes and Data Template</h2>\n<p>The module <tt>search_indexes.py</tt> can be used by <strong>django haystack</strong>\n(<a href=\"https://github.com/django-haystack/django-haystack\" rel=\"nofollow\">https://github.com/django-haystack/django-haystack</a>) to search genes.\nIt includes the Gene fields that should be included in the search\nindex, and how they should be weighted. The <tt>text</tt> field refers to a\ndocument that is built for the search engine to index. The location of\ndata template for this document is:\n<tt>genes/templates/search/indexes/gene_text.txt</tt>.</p>\n<p>For more information, see:\n<a href=\"http://django-haystack.readthedocs.org/en/latest/tutorial.html#handling-data\" rel=\"nofollow\">http://django-haystack.readthedocs.org/en/latest/tutorial.html#handling-data</a></p>\n</div>\n<div id=\"usage-of-management-commands\">\n<h2>Usage of Management Commands</h2>\n<p>This app includes five management commands in <tt>management/commands/</tt>\nsub-directory:</p>\n<div id=\"genes-add-xrdb\">\n<h3>1. genes_add_xrdb</h3>\n<blockquote>\n<p>This command adds cross-reference databases for genes. It <strong>must</strong>\nbe called for every new cross-reference database to populate the\ngene and cross-reference objects in the database. It requires 2\narguments:</p>\n<ul>\n<li>name: the name of the database</li>\n<li>URL: the URL for that database, with the string \u2018_REPL_\u2019 added at\nthe end of the URL</li>\n</ul>\n<p>For example, this command adds Ensembl as a cross-reference\ndatabase:</p>\n<pre>python manage.py genes_add_xrdb --name=Ensembl --URL=http://www.ensembl.org/Gene/Summary?g=_REPL_\n</pre>\n<p>And this command adds MIM as a cross-reference database:</p>\n<pre>python manage.py genes_add_xrdb --name=MIM --URL=http://www.ncbi.nlm.nih.gov/omim/_REPL_\n</pre>\n</blockquote>\n</div>\n<div id=\"genes-load-geneinfo\">\n<h3>2. genes_load_geneinfo</h3>\n<blockquote>\n<p>This command parses gene info file(s) and saves the corresponding\ngene objects into the database. It takes 2 required arguments and 5\noptional arguments:</p>\n<ul>\n<li>(Required) geneinfo_file: location of gene info file;</li>\n<li>(Required) taxonomy_id: taxonomy ID for organism for which genes\nare being populated;</li>\n<li>(Optional) gi_tax_id: alternative taxonomy ID for some organisms\n(such as S. cerevisiae);</li>\n<li>(Optional) symbol_col: symbol column in gene info file. Default\nis 2;</li>\n<li>(Optional) systematic_col: systematic column in gene info file.\nDefault is 3;</li>\n<li>(Optional) alias_col: the column containing gene aliases. If a\nhyphen \u2018-\u2018 or blank space \u2018 \u2018 is passed, symbol_col will be used.\nDefault is 4.</li>\n<li>(Optional) put_systematic_in_xrdb: name of cross-reference\nDatabase for which you want to use organism systematic IDs as\nCrossReference IDs. This is useful for Pseudomonas, for example,\nas systematic IDs are saved into PseudoCAP cross-reference\ndatabase.</li>\n</ul>\n<p>The following example shows how to download a gzipped human gene\ninfo file from NIH FTP server, and populate the database based on\nthis file.</p>\n<pre># Create a temporary data directory:\nmkdir data\n\n# Download a gzipped human gene info file into data directory:\nwget -P data/ -N ftp://ftp.ncbi.nih.gov/gene/DATA/GENE_INFO/Mammalia/Homo_sapiens.gene_info.gz\n\n# Unzip downloaded file:\ngunzip -c data/Homo_sapiens.gene_info.gz &gt; data/Homo_sapiens.gene_info\n\n# Call genes_load_geneinfo to populate the database:\npython manage.py genes_load_geneinfo --geneinfo_file=data/Homo_sapiens.gene_info --taxonomy_id=9606 --systematic_col=3 --symbol_col=2\n</pre>\n</blockquote>\n</div>\n<div id=\"genes-load-uniprot-py\">\n<h3>3. genes_load_uniprot.py</h3>\n<blockquote>\n<p>This command can be used to populate database with UniProtKB\nidentifiers. It takes one argument:</p>\n<ul>\n<li>uniprot_file: location of a file mapping UniProtKB IDs to Entrez\nand Ensembl IDs</li>\n</ul>\n<p><strong>Important:</strong> Before calling this command, please make sure that\nboth Ensembl and Entrez identifiers have been loaded into the\ndatabase.</p>\n<p>After downloading the gzipped file, use <tt>zgrep</tt> command to get\nthe lines we need (the original file is quite large), then run this\ncommand:</p>\n<pre>wget -P data/ -N ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz\nzgrep -e \"GeneID\" -e \"Ensembl\" data/idmapping.dat.gz &gt; data/uniprot_entrez_ensembl.txt\npython manage.py genes_load_uniprot --uniprot_file=data/uniprot_entrez_ensembl.txt\n</pre>\n</blockquote>\n</div>\n<div id=\"genes-load-wb-py\">\n<h3>4. genes_load_wb.py</h3>\n<blockquote>\n<p>This command can be used to populate database with WormBase\nidentifiers. It takes 3 arguments:</p>\n<ul>\n<li>(Required) wb_url: URL of wormbase xrefs file;</li>\n<li>(Optional) db_name: the name of the cross-reference database,\ndefault is \u2018WormBase\u2019.</li>\n</ul>\n<p>As is expected, the WormBase cross-reference database should be\npopulated using the <tt>genes_add_xrdb</tt> command (see command #1)\nbefore this command to populate the WormBase identifiers. Here is\nan example:</p>\n<pre># Find latest version of WormBase here:\n# http://www.wormbase.org/about/release_schedule#102--10-1\npython manage.py genes_load_wb --wb_url=ftp://ftp.wormbase.org/pub/wormbase/releases/WS243/species/c_elegans/PRJNA13758/c_elegans.PRJNA13758.WS243.xrefs.txt.gz\n</pre>\n</blockquote>\n</div>\n<div id=\"genes-load-gene-history-py\">\n<h3>5. genes_load_gene_history.py</h3>\n<blockquote>\n<p>This management command will read an input gene history file and\nfind all genes whose tax_id match input taxonomy ID. If the gene\nalready exists in the database, the Gene record in database will be\nset as obsolete; if not, a new obsolete Gene record will be created\nin the database.</p>\n<p>The command accepts 2 required arguments and 3 optional arguments:</p>\n<ul>\n<li>(Required) gene_history_file: Input gene history file. A gzipped\nexample file can be found at:\n<a>ftp://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz</a></li>\n<li>(Required) tax_id: Taxonomy ID assigned by NCBI to a certain\norganism. Genes of the other organisms in input file will be\nskipped.</li>\n<li>(Optional) tax_id_col: column number of tax_id in input file.\nDefault is 1.</li>\n<li>(Optional) discontinued_id_col: column number of discontinued\nGeneID in input file. Default is 3.</li>\n<li>(Optional) discontinued_symbol_col: column number of gene\u2019s\ndiscontinued symbol in input file. Default is 4.</li>\n</ul>\n<p>Note that column numbers in the last three arguments all start from\n1, <strong>not</strong> 0.</p>\n<p>For example, to add obsolete genes whose tax_id is 208964 in the\nfile \u201cgene_history\u201d, we will use the command like this:</p>\n<pre># Download file into your data directory:\ncd /data_dir; wget ftp://ftp.ncbi.nih.gov/gene/DATA/gene_history.gz\n\n# Unzip the downloaded file into \"gene_history\"\ngunzip gene_history.gz\n\n# Run management command:\npython manage.py genes_load_gene_history /data_dir/gene_history 208964 --tax_id_col=1 --discontinued_id_col=3 --discontinued_symbol_col=4\n</pre>\n<p>(Here <tt><span class=\"pre\">--tax_id_col=1</span> <span class=\"pre\">--discontinued_id_col=3</span>\n<span class=\"pre\">--discontinued_symbol_col=4</span></tt> are optional because they are using\ndefault values.)</p>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4820770, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "02ee91511a786a9db3558febeb8ac1f7", "sha256": "fe80987e350d0f0e0a55909fff1b573fe8b75577b90691fff86956574da290b3"}, "downloads": -1, "filename": "django-genes-0.1.tar.gz", "has_sig": false, "md5_digest": "02ee91511a786a9db3558febeb8ac1f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13484, "upload_time": "2016-04-27T17:48:10", "upload_time_iso_8601": "2016-04-27T17:48:10.993515Z", "url": "https://files.pythonhosted.org/packages/a4/e3/2b60cd64d564240d2d51dec47c6879745615880c3c1329dc0aa8f7b57f57/django-genes-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "3260360a5092b532f9c7a92ee97c9d62", "sha256": "7f00903a974481ba633c2228133b28dec484651124dfa7e18e9593401d2848e6"}, "downloads": -1, "filename": "django-genes-0.10.tar.gz", "has_sig": false, "md5_digest": "3260360a5092b532f9c7a92ee97c9d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23857, "upload_time": "2016-12-19T20:24:21", "upload_time_iso_8601": "2016-12-19T20:24:21.231093Z", "url": "https://files.pythonhosted.org/packages/55/eb/38d8991fa1e400ed94e9a06caafe9df034b6086dace30fb472044332ce55/django-genes-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "5d1622c94a60fa3b972442e6dfc48153", "sha256": "c5dc168a761ff93e42f231fe686a32002b2ef9a33f0deaf6d174bd669bf381ec"}, "downloads": -1, "filename": "django-genes-0.11.tar.gz", "has_sig": false, "md5_digest": "5d1622c94a60fa3b972442e6dfc48153", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25575, "upload_time": "2017-01-26T20:05:25", "upload_time_iso_8601": "2017-01-26T20:05:25.903847Z", "url": "https://files.pythonhosted.org/packages/3b/64/d9f489a14048994271cae2fdb1110f7abb300882328963edd0a1416e68ed/django-genes-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "b8571b2749230b4d38eb8a6347d0091b", "sha256": "77d4790474947f1dfb3ed261890c0c066688fcf73d2279016c9e76302fb4f297"}, "downloads": -1, "filename": "django-genes-0.12.tar.gz", "has_sig": false, "md5_digest": "b8571b2749230b4d38eb8a6347d0091b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26378, "upload_time": "2017-03-20T15:02:32", "upload_time_iso_8601": "2017-03-20T15:02:32.230283Z", "url": "https://files.pythonhosted.org/packages/4e/85/6f38006aa3bf19633a5cdd02e5b67021e40edc2fe3849e97e0ea5a772d88/django-genes-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "fd0d2528f4a5ec5ff9412b67542429ad", "sha256": "1db690ceaf84a17b3a7db3264ff52b8c0ee76758ed7816fd6fc12a74656665ad"}, "downloads": -1, "filename": "django-genes-0.13.tar.gz", "has_sig": false, "md5_digest": "fd0d2528f4a5ec5ff9412b67542429ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27446, "upload_time": "2017-06-20T17:57:18", "upload_time_iso_8601": "2017-06-20T17:57:18.807416Z", "url": "https://files.pythonhosted.org/packages/96/f5/08160c3f74ae6826bc21883f077b94525a4df6507236047bf97c297c0165/django-genes-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "bea6ee7d8bd6b0c74effc2a586bad67c", "sha256": "062f11e423fc642bc0a794c4767dba13b37f245824202a3557c54323cdb5a5f1"}, "downloads": -1, "filename": "django-genes-0.14.tar.gz", "has_sig": false, "md5_digest": "bea6ee7d8bd6b0c74effc2a586bad67c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27923, "upload_time": "2017-07-14T18:45:00", "upload_time_iso_8601": "2017-07-14T18:45:00.049419Z", "url": "https://files.pythonhosted.org/packages/1e/71/873c9f26cd126743a0f4d64dfbaa84a6a0cd4a206772b5e4ad0ebc48bb4f/django-genes-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "465c35d42c6f69ca52a406b014e0b930", "sha256": "71af76cb3cdf62aeefe0d1bcdc1f0bf5150f57feec6e2c93981cd1dbc091da6a"}, "downloads": -1, "filename": "django-genes-0.15.tar.gz", "has_sig": false, "md5_digest": "465c35d42c6f69ca52a406b014e0b930", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23768, "upload_time": "2017-07-19T15:32:55", "upload_time_iso_8601": "2017-07-19T15:32:55.913055Z", "url": "https://files.pythonhosted.org/packages/af/08/37b29865e83516340261279583449402fd31ff964250e23a46d1663449bd/django-genes-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "c30cffaf420dbe30bb44fb1865960757", "sha256": "72d0662a86a4787e78f9aea9ab6a541863dd6097da2844aa5cbd9057c47ddec7"}, "downloads": -1, "filename": "django-genes-0.16.tar.gz", "has_sig": false, "md5_digest": "c30cffaf420dbe30bb44fb1865960757", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23891, "upload_time": "2017-08-18T19:19:49", "upload_time_iso_8601": "2017-08-18T19:19:49.949120Z", "url": "https://files.pythonhosted.org/packages/43/35/01260d2ff1306a3629ccc90d391426cd8592c5425b91c2f2c41209b6f478/django-genes-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "d887191d837e5f90ad1981dae60eb0c4", "sha256": "ee27ed9d531cdce385fcf319654c2fe73c41c417f32faea0e3b17446feb1180e"}, "downloads": -1, "filename": "django-genes-0.17.tar.gz", "has_sig": false, "md5_digest": "d887191d837e5f90ad1981dae60eb0c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27886, "upload_time": "2017-12-04T21:56:17", "upload_time_iso_8601": "2017-12-04T21:56:17.510672Z", "url": "https://files.pythonhosted.org/packages/7e/f1/b5f9877aeda6fb67f25aca8a430f7a3741865bcc9fc7edb4f76323fbab8e/django-genes-0.17.tar.gz", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "6829070a11ef84aba25a8148e3692028", "sha256": "d89c913b666e6f5d2e082f99bfd06d6fdbeddaca977fe08a74903534f00cb7c4"}, "downloads": -1, "filename": "django-genes-0.18.tar.gz", "has_sig": false, "md5_digest": "6829070a11ef84aba25a8148e3692028", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23789, "upload_time": "2019-02-14T15:11:47", "upload_time_iso_8601": "2019-02-14T15:11:47.416173Z", "url": "https://files.pythonhosted.org/packages/0d/27/ac71f75f9d93a8e2f8e0ef749139bcc08c131700eb3e7de5c74a3f2eeddb/django-genes-0.18.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a468c7897b177224dc2b1db30f00ffb9", "sha256": "b8eaa273a7963c04d505bc6ba4d5fb73e30c820c6658d9d598489e5581f95334"}, "downloads": -1, "filename": "django-genes-0.2.tar.gz", "has_sig": false, "md5_digest": "a468c7897b177224dc2b1db30f00ffb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16402, "upload_time": "2016-05-16T20:59:17", "upload_time_iso_8601": "2016-05-16T20:59:17.521863Z", "url": "https://files.pythonhosted.org/packages/2a/a6/b2fb8fda6feea8ac4233ae8f305cdc699a47f238e3e688a4bfbc3cb182de/django-genes-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e5be3dd166ca5534f2b7e20e727c4ddc", "sha256": "956f9fa7be85d5d9ab9c436ef0028ae1d2ce09f5fa015bb40dc8a0bb4404c53c"}, "downloads": -1, "filename": "django-genes-0.3.tar.gz", "has_sig": false, "md5_digest": "e5be3dd166ca5534f2b7e20e727c4ddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22038, "upload_time": "2016-06-28T19:34:07", "upload_time_iso_8601": "2016-06-28T19:34:07.424310Z", "url": "https://files.pythonhosted.org/packages/11/38/b041ad50d3c6243c2da513ad26a6efbc892c06c26cf6c24b717f8fb245f5/django-genes-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "81a789397e9dcd8c546971deb77720c5", "sha256": "69c241498f14b851e6104ec666dbef54cc9c206d02ebc9ea53189b67c009670f"}, "downloads": -1, "filename": "django-genes-0.4.tar.gz", "has_sig": false, "md5_digest": "81a789397e9dcd8c546971deb77720c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22225, "upload_time": "2016-10-06T15:16:58", "upload_time_iso_8601": "2016-10-06T15:16:58.193659Z", "url": "https://files.pythonhosted.org/packages/c2/02/cd83957d2d9f9ca0d84fd603c0c5b0bbde781b0e17ec1589198429e98f74/django-genes-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "e7af4988ce901ffbc46bdcb667d30979", "sha256": "0587b3398e85698acaeb74c3205be545a8c305c7880866eff356da9c519f5b43"}, "downloads": -1, "filename": "django-genes-0.5.tar.gz", "has_sig": false, "md5_digest": "e7af4988ce901ffbc46bdcb667d30979", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22275, "upload_time": "2016-10-24T20:29:09", "upload_time_iso_8601": "2016-10-24T20:29:09.521381Z", "url": "https://files.pythonhosted.org/packages/50/84/eb665d6ff8a911b5d035fbbee26f5f4f9d1859f2fc7072645d5e561090cd/django-genes-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e5dd8fd17fd78584b31aefce3937bb4e", "sha256": "ed6996330870bdfcabc2a330143aa5da20cfe0c1169a26cb2810c7a89a73312a"}, "downloads": -1, "filename": "django-genes-0.6.tar.gz", "has_sig": false, "md5_digest": "e5dd8fd17fd78584b31aefce3937bb4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19000, "upload_time": "2016-10-25T21:10:30", "upload_time_iso_8601": "2016-10-25T21:10:30.154417Z", "url": "https://files.pythonhosted.org/packages/70/26/fc56d34f253b79683df5075a93c2df9cc2bef81146fa2581f4d29c41eb95/django-genes-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "5db4b9fcadaea041baf7f95683856f55", "sha256": "f7f2412cf769709b1ba3f59b7d40ace249d9ef3401d7c7066f6c7167a0b7a31c"}, "downloads": -1, "filename": "django-genes-0.7.tar.gz", "has_sig": false, "md5_digest": "5db4b9fcadaea041baf7f95683856f55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23260, "upload_time": "2016-11-14T20:34:29", "upload_time_iso_8601": "2016-11-14T20:34:29.659048Z", "url": "https://files.pythonhosted.org/packages/c2/26/520a327dd61a37515676832e64d40428d19278d04f86bd397be9d418dd0a/django-genes-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "a1f0fca617ed841ac6783a0fc8fba64a", "sha256": "cf2c40fc3115ce043f19a0e617768638bcd6d8f16efb48cbdbac47aa882ec228"}, "downloads": -1, "filename": "django-genes-0.8.tar.gz", "has_sig": false, "md5_digest": "a1f0fca617ed841ac6783a0fc8fba64a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23789, "upload_time": "2016-11-17T21:05:26", "upload_time_iso_8601": "2016-11-17T21:05:26.639988Z", "url": "https://files.pythonhosted.org/packages/6c/53/b67ac4cae7e0262a974bb835a9672dd209390b0918ecc5b709f344ad8f63/django-genes-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "5030eaa201be7039c2b0c8b02498f09a", "sha256": "0e78bb6aa17a605b42b88d27186701667eb94ce006c02c2cbc7a2226089476e0"}, "downloads": -1, "filename": "django-genes-0.9.tar.gz", "has_sig": false, "md5_digest": "5030eaa201be7039c2b0c8b02498f09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20688, "upload_time": "2016-11-22T15:42:47", "upload_time_iso_8601": "2016-11-22T15:42:47.068235Z", "url": "https://files.pythonhosted.org/packages/2c/19/80677e166047ed0b228169641b5c9895514c68d15559e65755865e1fa626/django-genes-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6829070a11ef84aba25a8148e3692028", "sha256": "d89c913b666e6f5d2e082f99bfd06d6fdbeddaca977fe08a74903534f00cb7c4"}, "downloads": -1, "filename": "django-genes-0.18.tar.gz", "has_sig": false, "md5_digest": "6829070a11ef84aba25a8148e3692028", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23789, "upload_time": "2019-02-14T15:11:47", "upload_time_iso_8601": "2019-02-14T15:11:47.416173Z", "url": "https://files.pythonhosted.org/packages/0d/27/ac71f75f9d93a8e2f8e0ef749139bcc08c131700eb3e7de5c74a3f2eeddb/django-genes-0.18.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:54 2020"}