{"info": {"author": "Xiaotian Derrick Yang", "author_email": "yxt1991@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Quanbit\n<!-- [![Build Status](https://travis-ci.org/theochem/grid.svg?branch=master)](https://travis-ci.org/theochem/grid)\n[![Build Status](https://dev.azure.com/yxt1991/Grid/_apis/build/status/theochem.grid?branchName=master)](https://dev.azure.com/yxt1991/Grid/_build/latest?definitionId=2&branchName=master)\n[![codecov](https://codecov.io/gh/theochem/grid/branch/master/graph/badge.svg)](https://codecov.io/gh/theochem/grid)<br/>\n -->\n[![Python Version](https://img.shields.io/badge/python-3.6%2B-blue.svg)](https://docs.python.org/3/whatsnew/3.6.html)\n[![GitHub](https://img.shields.io/github/license/tczorro/quanbit)](https://github.com/tczorro/quanbit/blob/master/LICENSE)\n[![Code Style](https://img.shields.io/badge/code%20style-black-black.svg)](https://black.readthedocs.io/en/stable/)\n\n## About\n**Quanbit** is a pythonic package for simulating quantum computer. It faciliate basic quantum algorithm exploration on a classic computer.\n\n## Platform\n**Quanbit** is a pure python package supporting `Windows`, `Linux` and `MacOS`.\n\n## Example: [Quantum Teleportation](https://en.wikipedia.org/wiki/Quantum_teleportation#Formal_presentation)\n```python\nfrom quanbit import X, Y, Z, BellBasis\nfrom quanbit import cubit, bell_state, Measure\nimport numpy as np\n\n# Alice has an unknown qubit C\ntheta, phi, alpha = np.random.rand(3)\nqubit_C = cubit(theta, phi, alpha)\n\n# To teleport the cubit, Alice and Bob need to share a maximally entangled state\n# Anyone of the four states is sufficient, we choose 1/sqrt(2) (|00> + |11>) here\nqubit_AB = bell_state(0)\n\n# Now the total state is, where @ represent tensor product:\ntotal_state = qubit_C @ qubit_AB\n\n# Project the state of Alice's two qubits as a superpositions of the Bell basis\ntotal_state = BellBasis(total_state, [0, 1])\n\n# Measuring her two cubits in Bell basis\nCA, B_state = Measure(total_state, indices[0, 1])\n\n# Rotate Bob's state based on the measurement result\n# if CA == (0, 0), no change need to be made\n# when CA is in state \\Psi+\nif CA == (0, 1):\n    B_state = X(B_state)\n# when CA is in state \\Psi-\nelif CA == (1, 0):\n    B_state = Z(X(B_state))\n# when CA is in state \\Phi-\nelif CA == (1, 1):\n    B_state = Z(B_state)\n# Now Bob's state is the same as Alice initial qubit_C.\n```\n\n## License\n**Quanbit** is distributed under [BSD 3-Clause](https://github.com/tczorro/quanbit/blob/master/LICENSE).\n\n## Dependence\n* Installation requirements: `numpy`\n* Testing requirement: `pytest`\n* QA requirement: `tox`\n\n## Installation\nTo run tests:\n```bash\npytest quanbit\n```\n\nTo install Quanbit to system:\n```bash\npip install .\n```\n## Local build and Testing\nTo install editable Quanbit locally:\n```bash\npip install -e .\n```\nTo run tests:\n```bash\npytest tests\n```\n\n## Quality Assurance\nTo run QA locally:\n```bash\ntox\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tczorro/quanbit", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "quanbit", "package_url": "https://pypi.org/project/quanbit/", "platform": "", "project_url": "https://pypi.org/project/quanbit/", "project_urls": {"Homepage": "https://github.com/tczorro/quanbit"}, "release_url": "https://pypi.org/project/quanbit/0.0.1/", "requires_dist": ["numpy (>=1.16)", "pytest (>=2.6)"], "requires_python": "", "summary": "Python library for simulating quantum computor and algorithm.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Quanbit</h1>\n\n<p><a href=\"https://docs.python.org/3/whatsnew/3.6.html\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48b8db40aeec52d95e91ad95fcb5451f6abef6b6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362532422d626c75652e737667\"></a>\n<a href=\"https://github.com/tczorro/quanbit/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70e81d90dc6ced4e4dca2cc6de1172ddb728def8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f74637a6f72726f2f7175616e626974\"></a>\n<a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\"><img alt=\"Code Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/658ebe3406ca78d0a03131809779c1570c31545d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d626c61636b2e737667\"></a></p>\n<h2>About</h2>\n<p><strong>Quanbit</strong> is a pythonic package for simulating quantum computer. It faciliate basic quantum algorithm exploration on a classic computer.</p>\n<h2>Platform</h2>\n<p><strong>Quanbit</strong> is a pure python package supporting <code>Windows</code>, <code>Linux</code> and <code>MacOS</code>.</p>\n<h2>Example: <a href=\"https://en.wikipedia.org/wiki/Quantum_teleportation#Formal_presentation\" rel=\"nofollow\">Quantum Teleportation</a></h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">quanbit</span> <span class=\"kn\">import</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">BellBasis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">quanbit</span> <span class=\"kn\">import</span> <span class=\"n\">cubit</span><span class=\"p\">,</span> <span class=\"n\">bell_state</span><span class=\"p\">,</span> <span class=\"n\">Measure</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Alice has an unknown qubit C</span>\n<span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">qubit_C</span> <span class=\"o\">=</span> <span class=\"n\">cubit</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To teleport the cubit, Alice and Bob need to share a maximally entangled state</span>\n<span class=\"c1\"># Anyone of the four states is sufficient, we choose 1/sqrt(2) (|00&gt; + |11&gt;) here</span>\n<span class=\"n\">qubit_AB</span> <span class=\"o\">=</span> <span class=\"n\">bell_state</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now the total state is, where @ represent tensor product:</span>\n<span class=\"n\">total_state</span> <span class=\"o\">=</span> <span class=\"n\">qubit_C</span> <span class=\"o\">@</span> <span class=\"n\">qubit_AB</span>\n\n<span class=\"c1\"># Project the state of Alice's two qubits as a superpositions of the Bell basis</span>\n<span class=\"n\">total_state</span> <span class=\"o\">=</span> <span class=\"n\">BellBasis</span><span class=\"p\">(</span><span class=\"n\">total_state</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Measuring her two cubits in Bell basis</span>\n<span class=\"n\">CA</span><span class=\"p\">,</span> <span class=\"n\">B_state</span> <span class=\"o\">=</span> <span class=\"n\">Measure</span><span class=\"p\">(</span><span class=\"n\">total_state</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Rotate Bob's state based on the measurement result</span>\n<span class=\"c1\"># if CA == (0, 0), no change need to be made</span>\n<span class=\"c1\"># when CA is in state \\Psi+</span>\n<span class=\"k\">if</span> <span class=\"n\">CA</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">B_state</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">(</span><span class=\"n\">B_state</span><span class=\"p\">)</span>\n<span class=\"c1\"># when CA is in state \\Psi-</span>\n<span class=\"k\">elif</span> <span class=\"n\">CA</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"n\">B_state</span> <span class=\"o\">=</span> <span class=\"n\">Z</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">(</span><span class=\"n\">B_state</span><span class=\"p\">))</span>\n<span class=\"c1\"># when CA is in state \\Phi-</span>\n<span class=\"k\">elif</span> <span class=\"n\">CA</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">B_state</span> <span class=\"o\">=</span> <span class=\"n\">Z</span><span class=\"p\">(</span><span class=\"n\">B_state</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now Bob's state is the same as Alice initial qubit_C.</span>\n</pre>\n<h2>License</h2>\n<p><strong>Quanbit</strong> is distributed under <a href=\"https://github.com/tczorro/quanbit/blob/master/LICENSE\" rel=\"nofollow\">BSD 3-Clause</a>.</p>\n<h2>Dependence</h2>\n<ul>\n<li>Installation requirements: <code>numpy</code></li>\n<li>Testing requirement: <code>pytest</code></li>\n<li>QA requirement: <code>tox</code></li>\n</ul>\n<h2>Installation</h2>\n<p>To run tests:</p>\n<pre>pytest quanbit\n</pre>\n<p>To install Quanbit to system:</p>\n<pre>pip install .\n</pre>\n<h2>Local build and Testing</h2>\n<p>To install editable Quanbit locally:</p>\n<pre>pip install -e .\n</pre>\n<p>To run tests:</p>\n<pre>pytest tests\n</pre>\n<h2>Quality Assurance</h2>\n<p>To run QA locally:</p>\n<pre>tox\n</pre>\n\n          </div>"}, "last_serial": 7032951, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0e2ce1a72db06fe5930d0fe1f597a180", "sha256": "5e854aff3655a346f237a6f55cdbbaf8fd8d48966455b022e8843a9c1e7a6f90"}, "downloads": -1, "filename": "quanbit-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e2ce1a72db06fe5930d0fe1f597a180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7433, "upload_time": "2020-04-16T15:27:03", "upload_time_iso_8601": "2020-04-16T15:27:03.549981Z", "url": "https://files.pythonhosted.org/packages/19/3f/1939698f3b56fcda3bdbf44721e5203a4eaa912a770d332be8115f0e0ac6/quanbit-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "797158b49c45f074c50f1eb19445be18", "sha256": "4166a5d101bf5d07f5f9f17ffcd6e831a4bad32d01d293c7eccd3bb1a433a22c"}, "downloads": -1, "filename": "quanbit-0.0.1.tar.gz", "has_sig": false, "md5_digest": "797158b49c45f074c50f1eb19445be18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5564, "upload_time": "2020-04-16T15:29:48", "upload_time_iso_8601": "2020-04-16T15:29:48.557418Z", "url": "https://files.pythonhosted.org/packages/4c/8b/1cdc58fa285e2f10e0d68ed82d54144e7b5b2df069044475ea1d4718fa3f/quanbit-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e2ce1a72db06fe5930d0fe1f597a180", "sha256": "5e854aff3655a346f237a6f55cdbbaf8fd8d48966455b022e8843a9c1e7a6f90"}, "downloads": -1, "filename": "quanbit-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e2ce1a72db06fe5930d0fe1f597a180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7433, "upload_time": "2020-04-16T15:27:03", "upload_time_iso_8601": "2020-04-16T15:27:03.549981Z", "url": "https://files.pythonhosted.org/packages/19/3f/1939698f3b56fcda3bdbf44721e5203a4eaa912a770d332be8115f0e0ac6/quanbit-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "797158b49c45f074c50f1eb19445be18", "sha256": "4166a5d101bf5d07f5f9f17ffcd6e831a4bad32d01d293c7eccd3bb1a433a22c"}, "downloads": -1, "filename": "quanbit-0.0.1.tar.gz", "has_sig": false, "md5_digest": "797158b49c45f074c50f1eb19445be18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5564, "upload_time": "2020-04-16T15:29:48", "upload_time_iso_8601": "2020-04-16T15:29:48.557418Z", "url": "https://files.pythonhosted.org/packages/4c/8b/1cdc58fa285e2f10e0d68ed82d54144e7b5b2df069044475ea1d4718fa3f/quanbit-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:58 2020"}