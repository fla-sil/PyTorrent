{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Documentation Status](https://readthedocs.org/projects/smallab/badge/?version=latest)](https://smallab.readthedocs.io/en/latest/?badge=latest)\n\n# smallab\n:small_blue_diamond: :microscope: :small_blue_diamond:\n\nsmallab (Small Lab) is an experiment framework designed to be easy to use with your experiment. \n\nThe code in this repo should be understandable as a whole in at most 10 minutes.\n\n## Features\n\n* Easy to understand and simple\n* Easy parallelization of experiments\n* Only runs not previously completed experiments\n* Hooks allow monitoring batch progress\n* All parameters to methods use the typing module\n\n## Installation\n\n\npip install smallab\n\nor clone here from source\n\n## Documentation\n\nhttps://smallab.readthedocs.io/en/latest/\n\n## Usage\nCheck out demo.py (Copied here)\n\n```python\nimport typing\nimport random\nimport os\nimport dill\n\n#What you need to import from smallab\nfrom smallab.experiment import Experiment\nfrom smallab.runner import ExperimentRunner\n\n\n#Write a simple experiment\nclass SimpleExperiment(Experiment):\n    #Need to implement this method, will be passed the specification\n    #Return a dictionary of results\n    def main(self, specification: typing.Dict) -> typing.Dict:\n        random.seed(specification[\"seed\"])\n        for i in range(specification[\"num_calls\"]): #Advance the random number generator some amount\n           random.random()\n        if \"fail\" in specification and specification[\"fail\"]:\n            raise Exception()\n        return {\"number\":random.random()}\n\nrunner = ExperimentRunner()\n\n\n#Optional: Email yourself when the whole batch is done\n#Read https://stackoverflow.com/questions/5619914/sendmail-errno61-connection-refused about how to start an stmp serevr\nfrom smallab.utilities.email_hooks import EmailCallbackBatchOnly\n\nrunner.attach_callbacks([EmailCallbackBatchOnly(\"test@test.com\",40)])\n#Take it back off since we don't actually want to bother Mr. Test\nrunner.attach_callbacks([])\n\n#Set the specifications for our experiments, the author reccomends reading this from a json file!\nspecifications = [{\"seed\": 1,\"num_calls\":1}, {\"seed\":2,\"num_calls\":1}]\n\n#Fire off the experiment\nrunner.run(\"random_number\",specifications,SimpleExperiment())\n\n#Read back our results\nfor root,_,files in os.walk(runner.get_save_directory(\"random_number\")):\n    for fname in files:\n        if \".pkl\" in fname:\n            with open(os.path.join(root, fname), \"rb\") as f:\n                results = dill.load(f)\n                print(results[\"specification\"][\"seed\"])\n                print(results[\"result\"][\"number\"])\n\n\nfrom smallab.specification_generator import SpecificationGenerator\n#If you want to run a lot of experiments but not manual write out each one, use the specification generator.\n#Note: This is also JSON serializable, so you could store this in a json file\ngeneration_specification = {\"seed\":[1,2,3,4,5,6,7,8],\"num_calls\":[1,2,3]}\n\n#Call the generate method. Will create the cross product.\nspecifications = SpecificationGenerator().generate(generation_specification)\nprint(specifications)\n\nrunner.run(\"random_number_from_generator\",specifications,SimpleExperiment(),continue_from_last_run=True)\n\n#Read back our results\nfor root,_,files in os.walk(runner.get_save_directory(\"random_number_from_generator\")):\n    for fname in files:\n        if \".pkl\" in fname:\n            with open(os.path.join(root, fname), \"rb\") as f:\n                results = dill.load(f)\n                print(results[\"specification\"][\"seed\"])\n                print(results[\"result\"][\"number\"])\n\n#If you have an experiment you want run on a lot of computers you can use the MultiComputerGenerator\n#You assign each computer a number from 0..number_of_computers-1 and it gives each computer every number_of_computerth specification\nfrom smallab.specification_generator import MultiComputerGenerator\nall_specifications = SpecificationGenerator().from_json_file('test.json')\n\ng1 = MultiComputerGenerator(0,2)\ng2 = MultiComputerGenerator(1,2)\nspecifications_1 = g1.from_json_file(\"test.json\")\nspecifications_2 = g2.from_json_file(\"test.json\")\n\n\nassert len(specifications_1) + len(specifications_2) == len(all_specifications)\n\n#Need to freeze the sets in order to do set manipulation on dictionaries\nspecifications_1 = set([frozenset(sorted(x.items())) for x in specifications_1])\nspecifications_2 = set([frozenset(sorted(x.items())) for x in specifications_2])\nall_specifications = set([frozenset(sorted(x.items())) for x in all_specifications])\n\n#This will generate two disjoint sets of specifications\nassert specifications_1.isdisjoint(specifications_2)\n#That together make the whole specification\nassert specifications_1.union(specifications_2) == all_specifications\n\n\n\n#You can use the provided logging callbacks to log completion and failure of specific specifcations\nfrom smallab.utilities import logger_callbacks\nrunner.attach_callbacks([LoggingCallback()])\nrunner.run('with_logging',SpecificationGenerator().from_json_file(\"test.json\"),SimpleExperiment(),continue_from_last_run=True)\n```\n\n## How it works\nThe ExperimentRunner class is passed a list of dictionaries of specifications. \nThese dictionaries need to be json serializable.\n\nThe ExperimentRunner looks at the completed.json in the folder for the batch name (The name parameter of the .run method) and computes which experiments need to be run. \nThe experiments that need to run are the specifications not in the completed.json.\n\nThe ExperimentRunner begins runnning the batch either in parallel or single threaded. \nIf the parallel implementation is used each specification is joblib's threaded backend. \n\nOnce all experiments are either completed or failed (They threw an exception) the results are saved as a pickle file. \nThe results are saved in a dictionary that looks like {\"specification\": <the specification the experiment was passed>, \"result\": <what the experiment .main returned>}.\n\nThe return value of the experiment .main function must be pickle serializable. \n\n### Callbacks\nThe runner has several hooks which are called at different times. \n\n* `on_specification_complete` called whenever a specification completes running (Ususually a single experiment)\n* `on_specification_falure` called whenver a specification fails running (Throws an exception)\n* `on_batch_complete` called after runner `.run` has finished running, passed all the succesfully completed specifications\n* `on_batch_failure` called after runner `.run` has finished running, passed all the failed specifications\n\n\n### Folder Structure\nEach experiment is saved in the following structure\n\n* experiment_runs/\n\n.* \\<name\\>/ #The name you provide to runner.run\n\n..* <specification_hash>/ # A hash of the dictionary you provide as the specification\n\n...* specification.json # The specification.json\n\n...* <specification_hash>.pkl #The results dictionary\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/octopuscabbage/smallab", "keywords": "", "license": "BSD 2-Clause License", "maintainer": "", "maintainer_email": "", "name": "smallab", "package_url": "https://pypi.org/project/smallab/", "platform": "", "project_url": "https://pypi.org/project/smallab/", "project_urls": {"Homepage": "https://github.com/octopuscabbage/smallab"}, "release_url": "https://pypi.org/project/smallab/1.3.3/", "requires_dist": ["joblib", "numpy", "tqdm", "humanhash3", "python-dateutil"], "requires_python": "", "summary": "smallab (Small Lab) is an experiment framework designed to be easy to use with your experiment", "version": "1.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://smallab.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3ff55bd5ea4446e62c98db6bf21340a0bcfe16b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736d616c6c61622f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h1>smallab</h1>\n<p>:small_blue_diamond: :microscope: :small_blue_diamond:</p>\n<p>smallab (Small Lab) is an experiment framework designed to be easy to use with your experiment.</p>\n<p>The code in this repo should be understandable as a whole in at most 10 minutes.</p>\n<h2>Features</h2>\n<ul>\n<li>Easy to understand and simple</li>\n<li>Easy parallelization of experiments</li>\n<li>Only runs not previously completed experiments</li>\n<li>Hooks allow monitoring batch progress</li>\n<li>All parameters to methods use the typing module</li>\n</ul>\n<h2>Installation</h2>\n<p>pip install smallab</p>\n<p>or clone here from source</p>\n<h2>Documentation</h2>\n<p><a href=\"https://smallab.readthedocs.io/en/latest/\" rel=\"nofollow\">https://smallab.readthedocs.io/en/latest/</a></p>\n<h2>Usage</h2>\n<p>Check out demo.py (Copied here)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dill</span>\n\n<span class=\"c1\">#What you need to import from smallab</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.runner</span> <span class=\"kn\">import</span> <span class=\"n\">ExperimentRunner</span>\n\n\n<span class=\"c1\">#Write a simple experiment</span>\n<span class=\"k\">class</span> <span class=\"nc\">SimpleExperiment</span><span class=\"p\">(</span><span class=\"n\">Experiment</span><span class=\"p\">):</span>\n    <span class=\"c1\">#Need to implement this method, will be passed the specification</span>\n    <span class=\"c1\">#Return a dictionary of results</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">specification</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">:</span>\n        <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"n\">specification</span><span class=\"p\">[</span><span class=\"s2\">\"seed\"</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">specification</span><span class=\"p\">[</span><span class=\"s2\">\"num_calls\"</span><span class=\"p\">]):</span> <span class=\"c1\">#Advance the random number generator some amount</span>\n           <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"fail\"</span> <span class=\"ow\">in</span> <span class=\"n\">specification</span> <span class=\"ow\">and</span> <span class=\"n\">specification</span><span class=\"p\">[</span><span class=\"s2\">\"fail\"</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"number\"</span><span class=\"p\">:</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()}</span>\n\n<span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">ExperimentRunner</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\">#Optional: Email yourself when the whole batch is done</span>\n<span class=\"c1\">#Read https://stackoverflow.com/questions/5619914/sendmail-errno61-connection-refused about how to start an stmp serevr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.utilities.email_hooks</span> <span class=\"kn\">import</span> <span class=\"n\">EmailCallbackBatchOnly</span>\n\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">attach_callbacks</span><span class=\"p\">([</span><span class=\"n\">EmailCallbackBatchOnly</span><span class=\"p\">(</span><span class=\"s2\">\"test@test.com\"</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">)])</span>\n<span class=\"c1\">#Take it back off since we don't actually want to bother Mr. Test</span>\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">attach_callbacks</span><span class=\"p\">([])</span>\n\n<span class=\"c1\">#Set the specifications for our experiments, the author reccomends reading this from a json file!</span>\n<span class=\"n\">specifications</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"seed\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s2\">\"num_calls\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"seed\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"num_calls\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}]</span>\n\n<span class=\"c1\">#Fire off the experiment</span>\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">\"random_number\"</span><span class=\"p\">,</span><span class=\"n\">specifications</span><span class=\"p\">,</span><span class=\"n\">SimpleExperiment</span><span class=\"p\">())</span>\n\n<span class=\"c1\">#Read back our results</span>\n<span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">get_save_directory</span><span class=\"p\">(</span><span class=\"s2\">\"random_number\"</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\".pkl\"</span> <span class=\"ow\">in</span> <span class=\"n\">fname</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">),</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">dill</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s2\">\"specification\"</span><span class=\"p\">][</span><span class=\"s2\">\"seed\"</span><span class=\"p\">])</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s2\">\"result\"</span><span class=\"p\">][</span><span class=\"s2\">\"number\"</span><span class=\"p\">])</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.specification_generator</span> <span class=\"kn\">import</span> <span class=\"n\">SpecificationGenerator</span>\n<span class=\"c1\">#If you want to run a lot of experiments but not manual write out each one, use the specification generator.</span>\n<span class=\"c1\">#Note: This is also JSON serializable, so you could store this in a json file</span>\n<span class=\"n\">generation_specification</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"seed\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"s2\">\"num_calls\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]}</span>\n\n<span class=\"c1\">#Call the generate method. Will create the cross product.</span>\n<span class=\"n\">specifications</span> <span class=\"o\">=</span> <span class=\"n\">SpecificationGenerator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">generation_specification</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">specifications</span><span class=\"p\">)</span>\n\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">\"random_number_from_generator\"</span><span class=\"p\">,</span><span class=\"n\">specifications</span><span class=\"p\">,</span><span class=\"n\">SimpleExperiment</span><span class=\"p\">(),</span><span class=\"n\">continue_from_last_run</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Read back our results</span>\n<span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">get_save_directory</span><span class=\"p\">(</span><span class=\"s2\">\"random_number_from_generator\"</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\".pkl\"</span> <span class=\"ow\">in</span> <span class=\"n\">fname</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">),</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">dill</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s2\">\"specification\"</span><span class=\"p\">][</span><span class=\"s2\">\"seed\"</span><span class=\"p\">])</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s2\">\"result\"</span><span class=\"p\">][</span><span class=\"s2\">\"number\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\">#If you have an experiment you want run on a lot of computers you can use the MultiComputerGenerator</span>\n<span class=\"c1\">#You assign each computer a number from 0..number_of_computers-1 and it gives each computer every number_of_computerth specification</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.specification_generator</span> <span class=\"kn\">import</span> <span class=\"n\">MultiComputerGenerator</span>\n<span class=\"n\">all_specifications</span> <span class=\"o\">=</span> <span class=\"n\">SpecificationGenerator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_json_file</span><span class=\"p\">(</span><span class=\"s1\">'test.json'</span><span class=\"p\">)</span>\n\n<span class=\"n\">g1</span> <span class=\"o\">=</span> <span class=\"n\">MultiComputerGenerator</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">g2</span> <span class=\"o\">=</span> <span class=\"n\">MultiComputerGenerator</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">specifications_1</span> <span class=\"o\">=</span> <span class=\"n\">g1</span><span class=\"o\">.</span><span class=\"n\">from_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"test.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">specifications_2</span> <span class=\"o\">=</span> <span class=\"n\">g2</span><span class=\"o\">.</span><span class=\"n\">from_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"test.json\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">specifications_1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">specifications_2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_specifications</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Need to freeze the sets in order to do set manipulation on dictionaries</span>\n<span class=\"n\">specifications_1</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">frozenset</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">specifications_1</span><span class=\"p\">])</span>\n<span class=\"n\">specifications_2</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">frozenset</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">specifications_2</span><span class=\"p\">])</span>\n<span class=\"n\">all_specifications</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([</span><span class=\"nb\">frozenset</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">all_specifications</span><span class=\"p\">])</span>\n\n<span class=\"c1\">#This will generate two disjoint sets of specifications</span>\n<span class=\"k\">assert</span> <span class=\"n\">specifications_1</span><span class=\"o\">.</span><span class=\"n\">isdisjoint</span><span class=\"p\">(</span><span class=\"n\">specifications_2</span><span class=\"p\">)</span>\n<span class=\"c1\">#That together make the whole specification</span>\n<span class=\"k\">assert</span> <span class=\"n\">specifications_1</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">specifications_2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">all_specifications</span>\n\n\n\n<span class=\"c1\">#You can use the provided logging callbacks to log completion and failure of specific specifcations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smallab.utilities</span> <span class=\"kn\">import</span> <span class=\"n\">logger_callbacks</span>\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">attach_callbacks</span><span class=\"p\">([</span><span class=\"n\">LoggingCallback</span><span class=\"p\">()])</span>\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'with_logging'</span><span class=\"p\">,</span><span class=\"n\">SpecificationGenerator</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"test.json\"</span><span class=\"p\">),</span><span class=\"n\">SimpleExperiment</span><span class=\"p\">(),</span><span class=\"n\">continue_from_last_run</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>How it works</h2>\n<p>The ExperimentRunner class is passed a list of dictionaries of specifications.\nThese dictionaries need to be json serializable.</p>\n<p>The ExperimentRunner looks at the completed.json in the folder for the batch name (The name parameter of the .run method) and computes which experiments need to be run.\nThe experiments that need to run are the specifications not in the completed.json.</p>\n<p>The ExperimentRunner begins runnning the batch either in parallel or single threaded.\nIf the parallel implementation is used each specification is joblib's threaded backend.</p>\n<p>Once all experiments are either completed or failed (They threw an exception) the results are saved as a pickle file.\nThe results are saved in a dictionary that looks like {\"specification\": &lt;the specification the experiment was passed&gt;, \"result\": &lt;what the experiment .main returned&gt;}.</p>\n<p>The return value of the experiment .main function must be pickle serializable.</p>\n<h3>Callbacks</h3>\n<p>The runner has several hooks which are called at different times.</p>\n<ul>\n<li><code>on_specification_complete</code> called whenever a specification completes running (Ususually a single experiment)</li>\n<li><code>on_specification_falure</code> called whenver a specification fails running (Throws an exception)</li>\n<li><code>on_batch_complete</code> called after runner <code>.run</code> has finished running, passed all the succesfully completed specifications</li>\n<li><code>on_batch_failure</code> called after runner <code>.run</code> has finished running, passed all the failed specifications</li>\n</ul>\n<h3>Folder Structure</h3>\n<p>Each experiment is saved in the following structure</p>\n<ul>\n<li>experiment_runs/</li>\n</ul>\n<p>.* &lt;name&gt;/ #The name you provide to runner.run</p>\n<p>..* &lt;specification_hash&gt;/ # A hash of the dictionary you provide as the specification</p>\n<p>...* specification.json # The specification.json</p>\n<p>...* &lt;specification_hash&gt;.pkl #The results dictionary</p>\n\n          </div>"}, "last_serial": 7176755, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "86ce098f4bbbe240ca8e1dbfa97e4db3", "sha256": "414a886699e30e4cbc0fad0cf652efd93f7f2860f5ead887e5e417b82fd52202"}, "downloads": -1, "filename": "smallab-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "86ce098f4bbbe240ca8e1dbfa97e4db3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8700, "upload_time": "2019-11-08T22:59:31", "upload_time_iso_8601": "2019-11-08T22:59:31.996487Z", "url": "https://files.pythonhosted.org/packages/d8/de/06ab6aad2a0ad9153c1ea2db8c4d86792c8dc93f67e52eacac0ef66d6dcf/smallab-0.0.0-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6f93cfc74e6e59e54518c500498b2316", "sha256": "3b0b4f0726476ffb1c17d8f892cc11c0523f3607618c50a0135bbd28a9c2903e"}, "downloads": -1, "filename": "smallab-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f93cfc74e6e59e54518c500498b2316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9940, "upload_time": "2019-12-11T21:17:15", "upload_time_iso_8601": "2019-12-11T21:17:15.088880Z", "url": "https://files.pythonhosted.org/packages/3b/d7/68540c976a15fe3dde003105f57808924dcaa7875db946457a1a3ce506c1/smallab-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9397296ba9a88f68265f599899edd728", "sha256": "5886224a1ed0a8979f61f68b4e9738850019a4d58419f58cdf4adf6b31a4aee1"}, "downloads": -1, "filename": "smallab-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9397296ba9a88f68265f599899edd728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9533, "upload_time": "2019-12-11T21:17:16", "upload_time_iso_8601": "2019-12-11T21:17:16.522889Z", "url": "https://files.pythonhosted.org/packages/4b/c1/76568bb668cea4219ecdbfc616479083a41f37afb36f885dc41f51ebf339/smallab-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bc91270b0f7c84b36490f5035bde0bcd", "sha256": "92f80933de2d9ef7b2cfc9f7bea5d2915b80a2d70019a6f025ad798c2ea3696a"}, "downloads": -1, "filename": "smallab-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc91270b0f7c84b36490f5035bde0bcd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9908, "upload_time": "2019-12-11T23:17:16", "upload_time_iso_8601": "2019-12-11T23:17:16.752899Z", "url": "https://files.pythonhosted.org/packages/13/46/af5477652c1adc194dd9b14967f358b39389ecf0028abfcb0ab34a81e0ab/smallab-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "808a15562c89247f9152568ecb602381", "sha256": "70b1db224d339b6f12569e920f96491390a15d0dfd4b63118573468705c4003b"}, "downloads": -1, "filename": "smallab-0.1.1.tar.gz", "has_sig": false, "md5_digest": "808a15562c89247f9152568ecb602381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9497, "upload_time": "2019-12-11T23:17:17", "upload_time_iso_8601": "2019-12-11T23:17:17.939358Z", "url": "https://files.pythonhosted.org/packages/89/fd/628c2409dca307a4c7a96328980fd0011eda12885e4c6700281cdfb3e794/smallab-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0b6d77685f2506ae4bd24e31c57270b0", "sha256": "c535b1c79063c1e1cffd44a8bba56692672fe2dbc282b323dc5356395d8cccbb"}, "downloads": -1, "filename": "smallab-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0b6d77685f2506ae4bd24e31c57270b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10872, "upload_time": "2019-12-13T20:28:07", "upload_time_iso_8601": "2019-12-13T20:28:07.008728Z", "url": "https://files.pythonhosted.org/packages/76/e9/9bfe127e417a41b45d3474632efe840ff1748999c98e217448cc5d7bb70c/smallab-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ec541e10483e47684393f0756f209f5", "sha256": "414c68b968751c371fc3252b1eff79903ca9515e76412b9c97d460d8f46b57f4"}, "downloads": -1, "filename": "smallab-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4ec541e10483e47684393f0756f209f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10340, "upload_time": "2019-12-13T20:28:08", "upload_time_iso_8601": "2019-12-13T20:28:08.689456Z", "url": "https://files.pythonhosted.org/packages/1f/b1/ecf643e0f572804657685656e5d5fe6e7972c31a196278d3ffe0bc8e59ee/smallab-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "adaa1d22ae6d3b3693860a87261e6def", "sha256": "5a7b6fc769f4ad03c3d6b27d369b4825ce83bb955f4f18411eda915846286060"}, "downloads": -1, "filename": "smallab-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adaa1d22ae6d3b3693860a87261e6def", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16105, "upload_time": "2020-04-20T21:16:16", "upload_time_iso_8601": "2020-04-20T21:16:16.647383Z", "url": "https://files.pythonhosted.org/packages/37/ce/ce5536898d369ecd1806b248a226788c8d50cdfc148a4a504e6b0016d54d/smallab-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93da7a2160687f6a508a1596e2e58136", "sha256": "8e30001e37ceb35a98175b05603b468c96899efd73dfcbb71b8fd3637ce1d238"}, "downloads": -1, "filename": "smallab-1.0.0.tar.gz", "has_sig": false, "md5_digest": "93da7a2160687f6a508a1596e2e58136", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13404, "upload_time": "2020-04-20T21:16:17", "upload_time_iso_8601": "2020-04-20T21:16:17.679734Z", "url": "https://files.pythonhosted.org/packages/93/85/f45a837ecf7a3329fa58264e6022d2fd7544da269780104c3dd232dbaa47/smallab-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4ec7d20b03e25058589e57255b867b0d", "sha256": "350d8b75029ab18ce3a53108bf791d2b708f3e20451e813812170f117e43cfa2"}, "downloads": -1, "filename": "smallab-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ec7d20b03e25058589e57255b867b0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16273, "upload_time": "2020-04-22T23:51:22", "upload_time_iso_8601": "2020-04-22T23:51:22.007923Z", "url": "https://files.pythonhosted.org/packages/fe/47/2e18ab3bc79c8c1d4ba0830eb64e6364fb755a2fedd163f0c5a20cc2baea/smallab-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee2b5258c96e41e48af6f7d88bcabd5", "sha256": "4e887c23d035870138e99d9d12a13f8488fbe8471c806db5e787802812ac1579"}, "downloads": -1, "filename": "smallab-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7ee2b5258c96e41e48af6f7d88bcabd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13565, "upload_time": "2020-04-22T23:51:23", "upload_time_iso_8601": "2020-04-22T23:51:23.447827Z", "url": "https://files.pythonhosted.org/packages/d7/a0/ba9f6b97ec0c1320720a6310fdf800452e48be6a51e7328fe3605de11820/smallab-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "06e88086fda0ba163ac97f7376898ee7", "sha256": "d0e023e1da4b6c2694bb200d8a0ff2ad76806c3ee3fefb2871f54d139d6a9ade"}, "downloads": -1, "filename": "smallab-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06e88086fda0ba163ac97f7376898ee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18543, "upload_time": "2020-05-01T02:33:44", "upload_time_iso_8601": "2020-05-01T02:33:44.306326Z", "url": "https://files.pythonhosted.org/packages/bf/c6/72ae5709c2fd9c725db2a60edde6f63681a52efa3c55099c61c9201340e0/smallab-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30c0c140a4b068f2ba53b0882a4919b8", "sha256": "b1e7cf4761c80011eee7ba87b7808fd3ed7155df9d31c55030dbd9d0c0bab81a"}, "downloads": -1, "filename": "smallab-1.1.0.tar.gz", "has_sig": false, "md5_digest": "30c0c140a4b068f2ba53b0882a4919b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14922, "upload_time": "2020-05-01T02:33:45", "upload_time_iso_8601": "2020-05-01T02:33:45.753419Z", "url": "https://files.pythonhosted.org/packages/a2/e4/94d4536f98d12813b3dd93f27a44fdef3908303800e9a93d2f72cc539e2f/smallab-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f8cfc170be61655645950f26b383747d", "sha256": "87ae4662771c0d5d0cb9b9749803c9476d1e5244ffa062bb291e0e37058ba4e5"}, "downloads": -1, "filename": "smallab-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8cfc170be61655645950f26b383747d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18618, "upload_time": "2020-05-05T17:50:05", "upload_time_iso_8601": "2020-05-05T17:50:05.306789Z", "url": "https://files.pythonhosted.org/packages/59/e6/ca39eaa30d3f108cb3cb91ebf536fde8b9b6a6e2f0bb380bca5de10a691d/smallab-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fca551297e9814fe2b32378616a2e68", "sha256": "ac55df643a6dbca8530e9ea55419b3f253a32ff8201f790397a1709160465b64"}, "downloads": -1, "filename": "smallab-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3fca551297e9814fe2b32378616a2e68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15119, "upload_time": "2020-05-05T17:50:06", "upload_time_iso_8601": "2020-05-05T17:50:06.677028Z", "url": "https://files.pythonhosted.org/packages/4e/0b/6345cf04579f5b053c70ee6da0fb8f1422c909979a8b3c70cdf935394131/smallab-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "34a793d5428b2fa4b03600ce479bbc98", "sha256": "624e8f54e481222629d0f56dac26f932a9a775396c16f5d4153edc6c197573f1"}, "downloads": -1, "filename": "smallab-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "34a793d5428b2fa4b03600ce479bbc98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18893, "upload_time": "2020-05-05T18:52:28", "upload_time_iso_8601": "2020-05-05T18:52:28.718808Z", "url": "https://files.pythonhosted.org/packages/e3/66/82b1ad98c48aa907fb76add03e103f7f232f9c801d02ccbaea72562d0cb0/smallab-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed80e9c3e53f122314ac6ec8e57ca5ff", "sha256": "f261029957332bf2802852dab75ce484fd3d9aa026b163927a3d19655fbc62e3"}, "downloads": -1, "filename": "smallab-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ed80e9c3e53f122314ac6ec8e57ca5ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15412, "upload_time": "2020-05-05T18:52:29", "upload_time_iso_8601": "2020-05-05T18:52:29.972672Z", "url": "https://files.pythonhosted.org/packages/72/0c/57ccdad37cdc4dc9bd7264a5f0d00f50b10f392934b89a2c4909ad38b170/smallab-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "c66e5e9e55e8551451987e631a45ee23", "sha256": "e75bd156b4cc69d817d15c7434b7cbe70757b5e850a623edd7c3366299341b2d"}, "downloads": -1, "filename": "smallab-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c66e5e9e55e8551451987e631a45ee23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18921, "upload_time": "2020-05-05T19:44:32", "upload_time_iso_8601": "2020-05-05T19:44:32.207217Z", "url": "https://files.pythonhosted.org/packages/3d/7d/aa90245925674447cecb821cf743b81cba0844d79cdf9da53a8e6bd5e3ed/smallab-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f56006398bae4d0d6ecad4afa8b9e9c1", "sha256": "d668175ce46d837f1b14129237631e33cedc59bffa050adfa9d49eefe5f1f744"}, "downloads": -1, "filename": "smallab-1.2.1.tar.gz", "has_sig": false, "md5_digest": "f56006398bae4d0d6ecad4afa8b9e9c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15439, "upload_time": "2020-05-05T19:44:33", "upload_time_iso_8601": "2020-05-05T19:44:33.208357Z", "url": "https://files.pythonhosted.org/packages/24/ea/04b4271415ceb1be9d33776369bfb1c3d8051dff31652774572842820f39/smallab-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "35732b46dfec2225e68120c5592060ab", "sha256": "fa0d71640e6e51f1ec773fbd8ce66a0bcbf6e4ec9e758a71c30059ae25dd95b5"}, "downloads": -1, "filename": "smallab-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35732b46dfec2225e68120c5592060ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18921, "upload_time": "2020-05-05T20:47:52", "upload_time_iso_8601": "2020-05-05T20:47:52.178221Z", "url": "https://files.pythonhosted.org/packages/17/d4/8d0323fcb57155016ff1e8a54853be485719a76a333e1157e6c9210d213e/smallab-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc3bb3233ee56bd8d9437cc2ef83ceb", "sha256": "925d306e5f0935b5aff6a499975112fff3b07f532d02aa510cb98bd68542cc61"}, "downloads": -1, "filename": "smallab-1.3.0.tar.gz", "has_sig": false, "md5_digest": "cdc3bb3233ee56bd8d9437cc2ef83ceb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15435, "upload_time": "2020-05-05T20:47:53", "upload_time_iso_8601": "2020-05-05T20:47:53.591925Z", "url": "https://files.pythonhosted.org/packages/da/a7/099f82b8e6728914a4428d8dd2b85467e2932f954052e945b97e55858e84/smallab-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "c40182e0f21ed3a1786df137b8e94f2e", "sha256": "da7b98217925b8a3c81d118378c77934df386634b73f7813732f4be67266c5cc"}, "downloads": -1, "filename": "smallab-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c40182e0f21ed3a1786df137b8e94f2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18924, "upload_time": "2020-05-06T00:36:00", "upload_time_iso_8601": "2020-05-06T00:36:00.427077Z", "url": "https://files.pythonhosted.org/packages/5c/e1/56bec6f1994c6184d8133d01b446d2bdc045b85e5da808b35b1b1577b900/smallab-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c778b66e202e7865ec747300e063fc26", "sha256": "def08c5fc42353517e4e9b95465a2afab6502b943b87982219d62419fff90b78"}, "downloads": -1, "filename": "smallab-1.3.1.tar.gz", "has_sig": false, "md5_digest": "c778b66e202e7865ec747300e063fc26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15431, "upload_time": "2020-05-06T00:36:01", "upload_time_iso_8601": "2020-05-06T00:36:01.858048Z", "url": "https://files.pythonhosted.org/packages/c2/39/85bd1f7488cf807ca4993db523d7673276e7d95f4c437e05fcec0f2ca11d/smallab-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "9762509526e299b4075615faa754254b", "sha256": "215fe3c35e36131fdae9cbf28f6d9c398ab92f200f89ccc2e0e1dff8ba009fe4"}, "downloads": -1, "filename": "smallab-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9762509526e299b4075615faa754254b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18923, "upload_time": "2020-05-06T00:38:35", "upload_time_iso_8601": "2020-05-06T00:38:35.266463Z", "url": "https://files.pythonhosted.org/packages/0b/98/9663704580f806075537d86fbf29861c94ba75d5975481ce19510e7b93ee/smallab-1.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88cc2cf8e0448634d96b77c7ed97e70f", "sha256": "643ba8ab5fcdf07597707ddad61ef6aed8f190bdf0ed2380e739d39bba80adad"}, "downloads": -1, "filename": "smallab-1.3.2.tar.gz", "has_sig": false, "md5_digest": "88cc2cf8e0448634d96b77c7ed97e70f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15431, "upload_time": "2020-05-06T00:38:36", "upload_time_iso_8601": "2020-05-06T00:38:36.252242Z", "url": "https://files.pythonhosted.org/packages/f1/e2/3bdf3984097d00a212929b90fd29d3013cd473a2622dea43c7a0b4a27ab1/smallab-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "9e46c32f9e2424e85a61a0bccffdba73", "sha256": "3cb5da1d1fffb51b0e869ae2f31351a21c9d8e7395f175d8c90a7978e2c81e31"}, "downloads": -1, "filename": "smallab-1.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e46c32f9e2424e85a61a0bccffdba73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18927, "upload_time": "2020-05-06T00:54:41", "upload_time_iso_8601": "2020-05-06T00:54:41.382222Z", "url": "https://files.pythonhosted.org/packages/29/fa/911d3e6bb78419d81395b37852af800bbc964867534a65d2c2f1a7a9b7c4/smallab-1.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c508ca4a3473c4e942284b19930b5730", "sha256": "8a9bec767ab34577c90d75fe11a138f614c0cc510c631c92a357a6a6837cc535"}, "downloads": -1, "filename": "smallab-1.3.3.tar.gz", "has_sig": false, "md5_digest": "c508ca4a3473c4e942284b19930b5730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15436, "upload_time": "2020-05-06T00:54:42", "upload_time_iso_8601": "2020-05-06T00:54:42.432445Z", "url": "https://files.pythonhosted.org/packages/b3/e0/96bd2b737e0e4914bd2d6818fe986dc3894366d13f11cbcc090f43f94e95/smallab-1.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e46c32f9e2424e85a61a0bccffdba73", "sha256": "3cb5da1d1fffb51b0e869ae2f31351a21c9d8e7395f175d8c90a7978e2c81e31"}, "downloads": -1, "filename": "smallab-1.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e46c32f9e2424e85a61a0bccffdba73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18927, "upload_time": "2020-05-06T00:54:41", "upload_time_iso_8601": "2020-05-06T00:54:41.382222Z", "url": "https://files.pythonhosted.org/packages/29/fa/911d3e6bb78419d81395b37852af800bbc964867534a65d2c2f1a7a9b7c4/smallab-1.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c508ca4a3473c4e942284b19930b5730", "sha256": "8a9bec767ab34577c90d75fe11a138f614c0cc510c631c92a357a6a6837cc535"}, "downloads": -1, "filename": "smallab-1.3.3.tar.gz", "has_sig": false, "md5_digest": "c508ca4a3473c4e942284b19930b5730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15436, "upload_time": "2020-05-06T00:54:42", "upload_time_iso_8601": "2020-05-06T00:54:42.432445Z", "url": "https://files.pythonhosted.org/packages/b3/e0/96bd2b737e0e4914bd2d6818fe986dc3894366d13f11cbcc090f43f94e95/smallab-1.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:09 2020"}