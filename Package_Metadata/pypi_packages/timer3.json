{"info": {"author": "Ask Solem", "author_email": "ask@celeryproject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "#############################################\n timer3 - Schedule Python functions.\n#############################################\n\n:Version: 0.1.0\n\nIntroduction\n------------\n\nThe ``timer3`` module lets you schedule Python functions at specific times,\nor at an interval. It can be used as a replacement to ``threading.Timer``,\nthe difference is that ``timer3`` is always only using a single thread (unless\nyou manually start more of them)\n\nYou should never use this to apply expensive operations, as this would not\nbe effective when running in a single thread, rather you should make the\ntimer move the operations to a execution pool (like a thread/multiprocessing\npool, or maybe sending a message)::\n\n    >>> pool = multiprocessing.Pool()\n    >>> timer3.apply_after(10000, pool.apply_async, (expensive_fun, ))\n\n\nInstallation\n============\n\nYou can install ``timer3`` either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``,::\n\n    $ pip install timer3\n\n\nExamples\n========\n\nApply function after ``n`` msecs::\n\n    >>> import timer3\n    >>> timer3.apply_after(msecs, fun, args, kwargs, priority=0)\n\nApply function every ``n`` msecs::\n\n    >>> timer3.apply_interval(msecs, fun, args, kwargs, priority=0)\n\nApply function at a specific date (a ``datetime`` object)::\n\n    >>> timer3.apply_at(datetime, fun, args, kwargs, priority=0)\n\nCancelling timers\n-----------------\n\nThe ``apply_*`` functions returns a ``timer3.Entry`` instance,\nyou can use this to cancel the execution::\n\n    >>> tref = timer3.apply_after(msecs, fun, args, kwargs)\n    >>> tref.cancel()\n\n\nRunning custom ``Timer`` threads\n--------------------------------\n\nWhen using the module interface a default timer thread is started\nas soon as you schedule something. If you want to keep track of the\nthread manually, you can use the ``timer3.Timer`` class::\n\n    >>> timer = timer3.Timer()\n    >>> timer.apply_after(msecs, fun, args, kwargs)\n    >>> timer.stop() # stops the thread and joins it.\n\n\nLicense\n=======\n\nThis software is licensed under the ``New BSD License``. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ask/timer/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "timer3", "package_url": "https://pypi.org/project/timer3/", "platform": "any", "project_url": "https://pypi.org/project/timer3/", "project_urls": {"Homepage": "http://github.com/ask/timer/"}, "release_url": "https://pypi.org/project/timer3/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "timer3 - Scheduler for Python functions.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.1.0</td></tr>\n</tbody>\n</table>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The <tt>timer3</tt> module lets you schedule Python functions at specific times,\nor at an interval. It can be used as a replacement to <tt>threading.Timer</tt>,\nthe difference is that <tt>timer3</tt> is always only using a single thread (unless\nyou manually start more of them)</p>\n<p>You should never use this to apply expensive operations, as this would not\nbe effective when running in a single thread, rather you should make the\ntimer move the operations to a execution pool (like a thread/multiprocessing\npool, or maybe sending a message):</p>\n<pre>&gt;&gt;&gt; pool = multiprocessing.Pool()\n&gt;&gt;&gt; timer3.apply_after(10000, pool.apply_async, (expensive_fun, ))\n</pre>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install <tt>timer3</tt> either via the Python Package Index (PyPI)\nor from source.</p>\n<p>To install using <tt>pip</tt>,:</p>\n<pre>$ pip install timer3\n</pre>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Apply function after <tt>n</tt> msecs:</p>\n<pre>&gt;&gt;&gt; import timer3\n&gt;&gt;&gt; timer3.apply_after(msecs, fun, args, kwargs, priority=0)\n</pre>\n<p>Apply function every <tt>n</tt> msecs:</p>\n<pre>&gt;&gt;&gt; timer3.apply_interval(msecs, fun, args, kwargs, priority=0)\n</pre>\n<p>Apply function at a specific date (a <tt>datetime</tt> object):</p>\n<pre>&gt;&gt;&gt; timer3.apply_at(datetime, fun, args, kwargs, priority=0)\n</pre>\n</div>\n</div>\n<div id=\"cancelling-timers\">\n<h2>Cancelling timers</h2>\n<p>The <tt>apply_*</tt> functions returns a <tt>timer3.Entry</tt> instance,\nyou can use this to cancel the execution:</p>\n<pre>&gt;&gt;&gt; tref = timer3.apply_after(msecs, fun, args, kwargs)\n&gt;&gt;&gt; tref.cancel()\n</pre>\n</div>\n<div id=\"running-custom-timer-threads\">\n<h2>Running custom <tt>Timer</tt> threads</h2>\n<p>When using the module interface a default timer thread is started\nas soon as you schedule something. If you want to keep track of the\nthread manually, you can use the <tt>timer3.Timer</tt> class:</p>\n<pre>&gt;&gt;&gt; timer = timer3.Timer()\n&gt;&gt;&gt; timer.apply_after(msecs, fun, args, kwargs)\n&gt;&gt;&gt; timer.stop() # stops the thread and joins it.\n</pre>\n<div id=\"license\">\n<h3>License</h3>\n<p>This software is licensed under the <tt>New BSD License</tt>. See the <tt>LICENSE</tt>\nfile in the top distribution directory for the full license text.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4287826, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "cd34e6a2f124f950d6a4ea4d99d0bd00", "sha256": "5ac6443742ba0bded7ca86f3b5f45cf4a1073b8bbac74a41edd173ab5d96b98d"}, "downloads": -1, "filename": "timer3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cd34e6a2f124f950d6a4ea4d99d0bd00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5078, "upload_time": "2018-09-16T21:11:54", "upload_time_iso_8601": "2018-09-16T21:11:54.697654Z", "url": "https://files.pythonhosted.org/packages/97/ba/c6427cd826d23cec470dae40bcffc17a9e95fd27031c9900d6fa49bf3953/timer3-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "33bb7bfb522bc20bc3027a16d3af1d42", "sha256": "e0e69921d6ab46adbe6fcfd54c435e746b9da01bbb9999a233c8c31761330f95"}, "downloads": -1, "filename": "timer3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "33bb7bfb522bc20bc3027a16d3af1d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5089, "upload_time": "2018-09-19T09:57:47", "upload_time_iso_8601": "2018-09-19T09:57:47.574188Z", "url": "https://files.pythonhosted.org/packages/37/5a/05977765f1f0943a05865121e7fb79e93c98259245d89a5aa81fbab29039/timer3-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33bb7bfb522bc20bc3027a16d3af1d42", "sha256": "e0e69921d6ab46adbe6fcfd54c435e746b9da01bbb9999a233c8c31761330f95"}, "downloads": -1, "filename": "timer3-0.1.2.tar.gz", "has_sig": false, "md5_digest": "33bb7bfb522bc20bc3027a16d3af1d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5089, "upload_time": "2018-09-19T09:57:47", "upload_time_iso_8601": "2018-09-19T09:57:47.574188Z", "url": "https://files.pythonhosted.org/packages/37/5a/05977765f1f0943a05865121e7fb79e93c98259245d89a5aa81fbab29039/timer3-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:28 2020"}