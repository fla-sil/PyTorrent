{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers"], "description": "ftw.deploy\n==========\n\n``ftw.deploy`` provides opinionated tooling for git-push based deployment setups.\nThe tool helps installing hooks and deployment scripts.\n\n.. contents:: Table of Contents\n\n\nInstallation\n------------\n\n``ftw.deploy`` simply provides a ``deploy`` command as console script.\nIt requires Python 3!\n\nThe package can be installed with ``pip`` in combination with your favorite\nway of isolation / virtual-env.\n\nExample:\n\n.. code::\n\n   $ python3 -m venv ftw.deploy\n   $ cd ftw.deploy\n   $ source bin/activate\n   $ ./bin/pip install ftw.deploy\n\n   # sym-link the deploy script into your PATH\n   $ ln -s `pwd`/bin/deploy ~/bin\n   $ deploy --help\n\n\nUsage\n-----\n\nAfter installation, should have a ``deploy`` command available.\nThe most recent documentation is available with ``deploy help``.\n\n\n**Initialize deploy scripts**\n\nThe first step in a fresh project is to initialize the deployment scripts.\nThis can be done with ``deploy init plone``.\nThis will create scripts in the folders ``deploy`` and ``scripts``.\n\n**Installing deployment and configuring the remote**\n\nNext, install the deployment on the server by cloning the repository and\nperforming installation steps.\nThen adapt ``scripts/setup-git-remotes`` with the deployment location and execute it.\n\n**Setup hook**\n\nFor installing the ``post-receive`` hook and configuring the repository execute the\n``deploy setup [remote]`` command.\n\n**Update scripts**\n\nYou can update existing scripts in a project with ``deploy update``.\n\n**Installing an update**\n\nWhen all is set up, you can simply push on the ``master``-branch  of the remote in\norder to install an update. Examples:\n\n.. code::\n\n   git push prod master\n   git push test my-branch:master\n   git push prod test/master:master\n\n**Rerun a deployment**\n\nIf you need to rerun a deployment, simply use ``deploy rerun [remote]``.\n\n**Connect to the deployment with ssh**\n\n``ftw.deploy`` provides a shortcut for connecting with ssh and cd'ing into\nthe deployment directory ``deploy ssh [remote]``.\n\n\nTemplates\n---------\n\nPlone\n~~~~~\n\nThe plone template contains push deployment scripts which are optimized for use in\ncombination with `ftw.buildouts <https://github.com/4teamwork/ftw-buildouts>`_.\n\n\nCustom update script\n++++++++++++++++++++\n\nThe ``deploy/after_push`` script can be configured to run another script\nthan ``deploy/update_plone``.\n\nFor example you could add a ``scripts/nightly-reinstall`` and then add to\nyour nightly buildout configuration file:\n\n.. code::\n\n    [buildout]\n    deployment-update-plone-script = scripts/nightly-reinstall\n\nBe aware that this must be in the ``buildout.cfg`` of the deployment (which\nmay be a symlink), but it can not be extended since the buildout config file\nis not parsed recursively for this option.\n\n\nAdvanced Usage\n--------------\n\nVPN without SSH\n~~~~~~~~~~~~~~~\n\nWhen the deployment is in a VPN without SSH access, we cannot push to the\ndeployment.\nIn this situation the ``deploy/pull`` script can be used for simulating a push.\nIt pulls from the upstream (the branch must have an upstream defined) and runs\nthe deployment scripts.\n\n\nZero Downtime\n~~~~~~~~~~~~~\n\nWhen upgrades need to be installed, the script normally takes the site offline\nin order to prevent conflicting writes to the database while the upgrades run.\n\nWhen having a zero downtime environment, such as when only a publihser writes\nthe database (which is stopped while running upgrades), it is safe to keep the\nsite running for anonymous users.\n\nIn order to enable this behavior you must set the ``deployment-zero-downtime``\noption in the buildout configurations which should be upgraded in zero downtime\nmode.\n\n**WARNING:** The ``deployment-zero-downtime`` must be in the ``buildout.cfg`` file\nof the deployment. It does not work when using ``extend`` for this option since\nthe option is directly read from ``buildout.cfg``.\n\nExample:\n\n.. code::\n\n    [buildout]\n    extends =\n        ...\n\n    deployment-zero-downtime = true\n\nDeploy one commit with zero downtime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen deploying a commit with upgrade steps, the site will be taken offline\nunless zero downtime is configured.\nBut sometimes we want to deploy a commit with (fast) upgrades to a\nnon-zero-downtime deployment, but without downtime.\nFor marking a commit as \"zero-downtime proof\", you can push it to the branch\n`zero-downtime` on the deployment remote, before doing a regular deployment.\n\n.. code::\n\n    $ git push testing master:zero-downtime\n    $ git push testing master\n\n\nActivate zero downtime by environment variable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen using deploy/pull, we can activate the zero downtime strategy\nwith an environment variable:\n\nExample:\n\n.. code::\n\n   $ ZERO_DOWNTIME=true deploy/pull\n\n\nDevelopment\n-----------\n\nIn order to develop ``ftw.deploy``, you need to install\n`pipenv <https://pipenv.readthedocs.io>`_ and follow these instructions:\n\n.. code::\n\n  $ git clone git@github.com:4teamwork/ftw.deploy.git\n  $ cd ftw.deploy\n  $ pipenv install --dev\n  $ pipenv shell\n  $ deploy --help\n  $ pytest\n\n\nCopyright\n---------\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.deploy`` is licensed under GNU General Public License, version 2.\n\nChangelog\n=========\n\n\n1.3.0 (2019-12-17)\n------------------\n\n- Plone template: combine Plone 5 resource bundle aggregations. [jone]\n\n\n1.2.0 (2019-02-04)\n------------------\n\n- Add --tunnel option to deploy ssh. [jone]\n\n\n1.1.0 (2018-12-21)\n------------------\n\n- Fix bug causing crash when not in a git repository. [jone]\n\n- Provide \"deploy ssh\" command. [jone]\n\n\n1.0.0 (2018-12-21)\n------------------\n\n- Initial implementation. [jone]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.deploy", "keywords": "ftw deploy", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.deploy", "package_url": "https://pypi.org/project/ftw.deploy/", "platform": "", "project_url": "https://pypi.org/project/ftw.deploy/", "project_urls": {"Homepage": "https://github.com/4teamwork/ftw.deploy"}, "release_url": "https://pypi.org/project/ftw.deploy/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Tooling and scripts for git push based deployment at 4teamwork.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ftw-deploy\">\n<h2><a href=\"#id5\" rel=\"nofollow\">ftw.deploy</a></h2>\n<p><tt>ftw.deploy</tt> provides opinionated tooling for git-push based deployment setups.\nThe tool helps installing hooks and deployment scripts.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#ftw-deploy\" id=\"id5\" rel=\"nofollow\">ftw.deploy</a><ul>\n<li><a href=\"#installation\" id=\"id6\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id7\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#templates\" id=\"id8\" rel=\"nofollow\">Templates</a><ul>\n<li><a href=\"#custom-update-script\" id=\"id9\" rel=\"nofollow\">Custom update script</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" id=\"id10\" rel=\"nofollow\">Advanced Usage</a><ul>\n<li><a href=\"#vpn-without-ssh\" id=\"id11\" rel=\"nofollow\">VPN without SSH</a></li>\n<li><a href=\"#zero-downtime\" id=\"id12\" rel=\"nofollow\">Zero Downtime</a></li>\n<li><a href=\"#deploy-one-commit-with-zero-downtime\" id=\"id13\" rel=\"nofollow\">Deploy one commit with zero downtime</a></li>\n<li><a href=\"#activate-zero-downtime-by-environment-variable\" id=\"id14\" rel=\"nofollow\">Activate zero downtime by environment variable</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" id=\"id15\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#copyright\" id=\"id16\" rel=\"nofollow\">Copyright</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id17\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id18\" rel=\"nofollow\">1.3.0 (2019-12-17)</a></li>\n<li><a href=\"#id2\" id=\"id19\" rel=\"nofollow\">1.2.0 (2019-02-04)</a></li>\n<li><a href=\"#id3\" id=\"id20\" rel=\"nofollow\">1.1.0 (2018-12-21)</a></li>\n<li><a href=\"#id4\" id=\"id21\" rel=\"nofollow\">1.0.0 (2018-12-21)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Installation</a></h3>\n<p><tt>ftw.deploy</tt> simply provides a <tt>deploy</tt> command as console script.\nIt requires Python 3!</p>\n<p>The package can be installed with <tt>pip</tt> in combination with your favorite\nway of isolation / virtual-env.</p>\n<p>Example:</p>\n<pre>$ python3 -m venv ftw.deploy\n$ cd ftw.deploy\n$ source bin/activate\n$ ./bin/pip install ftw.deploy\n\n# sym-link the deploy script into your PATH\n$ ln -s `pwd`/bin/deploy ~/bin\n$ deploy --help\n</pre>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Usage</a></h3>\n<p>After installation, should have a <tt>deploy</tt> command available.\nThe most recent documentation is available with <tt>deploy help</tt>.</p>\n<p><strong>Initialize deploy scripts</strong></p>\n<p>The first step in a fresh project is to initialize the deployment scripts.\nThis can be done with <tt>deploy init plone</tt>.\nThis will create scripts in the folders <tt>deploy</tt> and <tt>scripts</tt>.</p>\n<p><strong>Installing deployment and configuring the remote</strong></p>\n<p>Next, install the deployment on the server by cloning the repository and\nperforming installation steps.\nThen adapt <tt><span class=\"pre\">scripts/setup-git-remotes</span></tt> with the deployment location and execute it.</p>\n<p><strong>Setup hook</strong></p>\n<p>For installing the <tt><span class=\"pre\">post-receive</span></tt> hook and configuring the repository execute the\n<tt>deploy setup [remote]</tt> command.</p>\n<p><strong>Update scripts</strong></p>\n<p>You can update existing scripts in a project with <tt>deploy update</tt>.</p>\n<p><strong>Installing an update</strong></p>\n<p>When all is set up, you can simply push on the <tt>master</tt>-branch  of the remote in\norder to install an update. Examples:</p>\n<pre>git push prod master\ngit push test my-branch:master\ngit push prod test/master:master\n</pre>\n<p><strong>Rerun a deployment</strong></p>\n<p>If you need to rerun a deployment, simply use <tt>deploy rerun [remote]</tt>.</p>\n<p><strong>Connect to the deployment with ssh</strong></p>\n<p><tt>ftw.deploy</tt> provides a shortcut for connecting with ssh and cd\u2019ing into\nthe deployment directory <tt>deploy ssh [remote]</tt>.</p>\n</div>\n<div id=\"templates\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Templates</a></h3>\n<h3 id=\"plone\"><span class=\"section-subtitle\">Plone</span></h3>\n<p>The plone template contains push deployment scripts which are optimized for use in\ncombination with <a href=\"https://github.com/4teamwork/ftw-buildouts\" rel=\"nofollow\">ftw.buildouts</a>.</p>\n<div id=\"custom-update-script\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Custom update script</a></h4>\n<p>The <tt>deploy/after_push</tt> script can be configured to run another script\nthan <tt>deploy/update_plone</tt>.</p>\n<p>For example you could add a <tt><span class=\"pre\">scripts/nightly-reinstall</span></tt> and then add to\nyour nightly buildout configuration file:</p>\n<pre>[buildout]\ndeployment-update-plone-script = scripts/nightly-reinstall\n</pre>\n<p>Be aware that this must be in the <tt>buildout.cfg</tt> of the deployment (which\nmay be a symlink), but it can not be extended since the buildout config file\nis not parsed recursively for this option.</p>\n</div>\n</div>\n<div id=\"advanced-usage\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Advanced Usage</a></h3>\n<div id=\"vpn-without-ssh\">\n<h4><a href=\"#id11\" rel=\"nofollow\">VPN without SSH</a></h4>\n<p>When the deployment is in a VPN without SSH access, we cannot push to the\ndeployment.\nIn this situation the <tt>deploy/pull</tt> script can be used for simulating a push.\nIt pulls from the upstream (the branch must have an upstream defined) and runs\nthe deployment scripts.</p>\n</div>\n<div id=\"zero-downtime\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Zero Downtime</a></h4>\n<p>When upgrades need to be installed, the script normally takes the site offline\nin order to prevent conflicting writes to the database while the upgrades run.</p>\n<p>When having a zero downtime environment, such as when only a publihser writes\nthe database (which is stopped while running upgrades), it is safe to keep the\nsite running for anonymous users.</p>\n<p>In order to enable this behavior you must set the <tt><span class=\"pre\">deployment-zero-downtime</span></tt>\noption in the buildout configurations which should be upgraded in zero downtime\nmode.</p>\n<p><strong>WARNING:</strong> The <tt><span class=\"pre\">deployment-zero-downtime</span></tt> must be in the <tt>buildout.cfg</tt> file\nof the deployment. It does not work when using <tt>extend</tt> for this option since\nthe option is directly read from <tt>buildout.cfg</tt>.</p>\n<p>Example:</p>\n<pre>[buildout]\nextends =\n    ...\n\ndeployment-zero-downtime = true\n</pre>\n</div>\n<div id=\"deploy-one-commit-with-zero-downtime\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Deploy one commit with zero downtime</a></h4>\n<p>When deploying a commit with upgrade steps, the site will be taken offline\nunless zero downtime is configured.\nBut sometimes we want to deploy a commit with (fast) upgrades to a\nnon-zero-downtime deployment, but without downtime.\nFor marking a commit as \u201czero-downtime proof\u201d, you can push it to the branch\n<cite>zero-downtime</cite> on the deployment remote, before doing a regular deployment.</p>\n<pre>$ git push testing master:zero-downtime\n$ git push testing master\n</pre>\n</div>\n<div id=\"activate-zero-downtime-by-environment-variable\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Activate zero downtime by environment variable</a></h4>\n<p>When using deploy/pull, we can activate the zero downtime strategy\nwith an environment variable:</p>\n<p>Example:</p>\n<pre>$ ZERO_DOWNTIME=true deploy/pull\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Development</a></h3>\n<p>In order to develop <tt>ftw.deploy</tt>, you need to install\n<a href=\"https://pipenv.readthedocs.io\" rel=\"nofollow\">pipenv</a> and follow these instructions:</p>\n<pre>$ git clone git@github.com:4teamwork/ftw.deploy.git\n$ cd ftw.deploy\n$ pipenv install --dev\n$ pipenv shell\n$ deploy --help\n$ pytest\n</pre>\n</div>\n<div id=\"copyright\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Copyright</a></h3>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.deploy</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id18\" rel=\"nofollow\">1.3.0 (2019-12-17)</a></h3>\n<ul>\n<li>Plone template: combine Plone 5 resource bundle aggregations. [jone]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id19\" rel=\"nofollow\">1.2.0 (2019-02-04)</a></h3>\n<ul>\n<li>Add \u2013tunnel option to deploy ssh. [jone]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id20\" rel=\"nofollow\">1.1.0 (2018-12-21)</a></h3>\n<ul>\n<li>Fix bug causing crash when not in a git repository. [jone]</li>\n<li>Provide \u201cdeploy ssh\u201d command. [jone]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id21\" rel=\"nofollow\">1.0.0 (2018-12-21)</a></h3>\n<ul>\n<li>Initial implementation. [jone]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6569115, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "19057e625b2cb741cd1b08bcd0dc347a", "sha256": "fb0e357752ea70688b6ab8489992d9515638519f730bec9aa469708330958eee"}, "downloads": -1, "filename": "ftw.deploy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "19057e625b2cb741cd1b08bcd0dc347a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24192, "upload_time": "2018-12-21T08:10:45", "upload_time_iso_8601": "2018-12-21T08:10:45.944705Z", "url": "https://files.pythonhosted.org/packages/ff/97/941e08bb7cca24070bc9aceea09e783fbdcdab46398e0e13b5c2c29931e1/ftw.deploy-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f8bba18d3c87b2890629a93b02a76fa1", "sha256": "906de719e4640c361d86c03bb59129342b19e58eee9ffe4f07b656256a422be2"}, "downloads": -1, "filename": "ftw.deploy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f8bba18d3c87b2890629a93b02a76fa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25079, "upload_time": "2018-12-21T09:41:13", "upload_time_iso_8601": "2018-12-21T09:41:13.238241Z", "url": "https://files.pythonhosted.org/packages/47/64/8c588d347d4d34e64ec5b2aceb9c10d22cdce0753bd30e730bb9233a85f1/ftw.deploy-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "142214c637f8d8ef858b6a735d9a0ed7", "sha256": "6fa141c4ddf0e4e9785fdda8448b9807f449de36c0acd2e5a67088fe566803f6"}, "downloads": -1, "filename": "ftw.deploy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "142214c637f8d8ef858b6a735d9a0ed7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25602, "upload_time": "2019-02-04T16:45:03", "upload_time_iso_8601": "2019-02-04T16:45:03.008590Z", "url": "https://files.pythonhosted.org/packages/64/b7/204edd87d7c79505f28e109f91814b727b0c69370559aef8abf528470edf/ftw.deploy-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "1d8c84dcb03dace499295c1fd92eb762", "sha256": "f2884834b731acad087ba935855c7daf41f723cd017e175e720ec9a02ecec03f"}, "downloads": -1, "filename": "ftw.deploy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "1d8c84dcb03dace499295c1fd92eb762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25720, "upload_time": "2019-12-17T16:12:48", "upload_time_iso_8601": "2019-12-17T16:12:48.638903Z", "url": "https://files.pythonhosted.org/packages/c8/1c/e2a11cfcf0a95b75a43416811ab66cf3751b9660cc87846b113fd6d43db5/ftw.deploy-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d8c84dcb03dace499295c1fd92eb762", "sha256": "f2884834b731acad087ba935855c7daf41f723cd017e175e720ec9a02ecec03f"}, "downloads": -1, "filename": "ftw.deploy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "1d8c84dcb03dace499295c1fd92eb762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25720, "upload_time": "2019-12-17T16:12:48", "upload_time_iso_8601": "2019-12-17T16:12:48.638903Z", "url": "https://files.pythonhosted.org/packages/c8/1c/e2a11cfcf0a95b75a43416811ab66cf3751b9660cc87846b113fd6d43db5/ftw.deploy-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:55 2020"}