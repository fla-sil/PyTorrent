{"info": {"author": "Patrick Cloke", "author_email": "clokep@patrick.cloke.us", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django Render Block\n###################\n\n.. image:: https://travis-ci.org/clokep/django-render-block.svg?branch=master\n    :target: https://travis-ci.org/clokep/django-render-block\n\nRender the content of a specific block tag from a Django template. Works for\narbitrary template inheritance, even if a block is defined in the child template\nbut not in the parent. Generally it works like ``render_to_string`` from Django,\nbut allows you to specify a block to render.\n\nFeatures\n========\n\n*   Render a specific block from a template\n*   Fully supports the Django templating engine\n*   Partially supports the `Jinja2 <http://jinja.pocoo.org/>`__ engine: it does\n    not currently process the ``extends`` tag.\n\nRequirements\n============\n\nDjango Render Block supports Django 1.11, 2.1, and 2.2.\n\nExamples\n========\n\nIn ``test1.html``:\n\n.. code-block:: jinja\n\n    {% block block1 %}block1 from test1{% endblock %}\n    {% block block2 %}block2 from test1{% endblock %}\n\nIn ``test2.html``:\n\n.. code-block:: jinja\n\n    {% extends 'test1.html' %}\n    {% block block1 %}block1 from test2{% endblock %}\n\nAnd from the Python shell:\n\n.. code-block:: python\n\n    >>> from render_block import render_block_to_string\n    >>> print render_block_to_string('test2.html', 'block1')\n    u'block1 from test2'\n    >>> print render_block_to_string('test2.html', 'block2')\n    u'block2 from test1'\n\nIt can also accept a context as a ``dict`` (just like ``render_to_string``), in\n``test3.html``:\n\n.. code-block:: jinja\n\n    {% block block3 %}Render this {{ variable }}!{% endblock %}\n\nAnd from Python:\n\n.. code-block:: python\n\n    >>> print render_block_to_string('test3.html', 'block3', {'variable': 'test'})\n    u'Render this test!'\n\nAPI Reference\n=============\n\nThe API is simple and attempts to mirror the built-in ``render_to_string`` API.\n\n``render_block_to_string(template_name, block_name, context=None, request=None)``\n\n    ``template_name``\n        The name of the template to load and render. If it\u2019s a list of template\n        names, Django uses ``select_template()`` instead of ``get_template()``\n        to find the template.\n\n    ``block_name``\n        The name of the block to render from the above template.\n\n    ``context``\n        A ``dict`` to be used as the template\u2019s context for rendering.\n\n        ``context`` is now optional. An empty context will be used if it isn\u2019t\n        provided.\n\n    ``request``\n        The request object used to render the template.\n\n        ``request`` is optional and works only for Django templates. If\n        provided a ``RequestContext`` will be used instead of a ``Context``.\n\nExceptions\n----------\n\nLike ``render_to_string`` this will raise the following exceptions:\n\n    ``TemplateDoesNotExists``\n        Raised if the template(s) specified by ``template_name`` cannot be\n        loaded.\n\n    ``TemplateSyntaxError``\n        Raised if the loaded template contains invalid syntax.\n\nThere are also two additional errors that can be raised:\n\n    ``BlockNotFound``\n        Raised if the block given by ``block_name`` does not exist in the\n        template.\n\n    ``UnsupportedEngine``\n        Raised if a template backend besides the Django backend is used.\n\nContributing\n============\n\nIf you find a bug or have an idea for an improvement to Django Render Block,\nplease\n`file an issue <https://github.com/clokep/django-render-block/issues/new>`_ or\nprovide a pull request! Check the\n`list of issues <https://github.com/clokep/django-render-block/issues/>`_ for\nideas of what to work on.\n\nAttribution\n===========\n\nThis is based on a few sources:\n\n* Originally `Django Snippet 769 <https://djangosnippets.org/snippets/769/>`__\n* Updated version `Django Snippet 942 <https://djangosnippets.org/snippets/942/>`__\n* A version of the snippets was ported as `Django-Block-Render <https://github.com/uniphil/Django-Block-Render/>`_\n* Additionally inspired by part of `django-templated-email <https://github.com/BradWhittington/django-templated-email/blob/master/templated_email/utils.py>`_\n* Also based on a `StackOverflow answer 2687173 <http://stackoverflow.com/questions/2687173/django-how-can-i-get-a-block-from-a-template>`_\n\n.. :changelog:\n\nChangelog\n#########\n\n0.6 (May 8, 2019)\n=================\n\n*   Supports Django 1.11, Django 2.1, and Django 2.2.\n*   Supports Python 2.7, 3.5, 3.6, and 3.7.\n*   ``render_block_to_string`` now optionally accepts a ``request`` parameter.\n    If given a ``RequestContext`` instead of a ``Context`` is used when\n    rendering with the Django templating engine. See #15, thanks to @vintage.\n\n0.5 (September 1, 2016)\n=======================\n\n*   Fixes a major issue with inheriting templates and rendering a block found in\n    the parent template, but overwriting part of it in the child template.\n    (`#8 <https://github.com/clokep/django-render-block/pull/8>`_)\n\n0.4 (August 4, 2016)\n====================\n\n*   Initial support for using the `Jinja2 <http://jinja.pocoo.org/>`_ templating\n    engine. See README for caveats. (`#3 <https://github.com/clokep/django-render-block/pull/3>`_)\n*   Support Django 1.10. (`#5 <https://github.com/clokep/django-render-block/pull/5>`_)\n*   Support Python 3. (`#6 <https://github.com/clokep/django-render-block/pull/6>`_)\n\n0.3.1 (June 1, 2016)\n====================\n\n*   Refactoring to make more generic (for potentially supporting multiple\n    templating engines).\n\n0.3 (May 27, 2016)\n==================\n\n*   Largely rewritten.\n*   Updated to support modern Django (1.8, 1.9):\n\n    *   Guards against different template backends.\n    *   Uses internal APIs for each node.\n    *   Removed ``context_instance`` parameter.\n    *   Support for calling ``{{ block.super }}``.\n\n0.2.2 (January 10, 2011)\n========================\n\n*   Updated per\n    `comment 3466 on Django Snippet 942 <https://djangosnippets.org/snippets/942/#c3466>`_\n    to fix an issue with nested extends. The specific bug was not reproducible,\n    but the additional code shouldn't hurt.\n\n0.2.1 (August 27, 2010)\n=======================\n\n*   Updated per\n    `comment 3237 on Django Snippet 942 <https://djangosnippets.org/snippets/942/#c3237>`_\n    to remove a pointless render. The specific bug was not reproducible, but the\n    code is extraneous.\n\n0.2 (August 4, 2008)\n====================\n\n*   Updated version from\n    `Django Snippet 942 <https://djangosnippets.org/snippets/942/>`_ by zbyte64.\n*   Improves include:\n\n    1.  Simpler/better handling of \"extends\" block tag\n    2.  Searches If/Else blocks\n    3.  Less code\n    4.  Allow list of templates to be passed which is closer to the behavior of\n        render_to_response\n\n\n0.1 (May 22, 2008)\n==================\n\n*   Initial version from\n    `Django Snippet 769 <https://djangosnippets.org/snippets/769/>`_ by sciyoshi.\n*   Supports Django 0.96.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/clokep/django-render-block", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clokep/django-render-block", "keywords": "django,template,block,templates,render,context", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-render-block", "package_url": "https://pypi.org/project/django-render-block/", "platform": "", "project_url": "https://pypi.org/project/django-render-block/", "project_urls": {"Download": "https://github.com/clokep/django-render-block", "Homepage": "https://github.com/clokep/django-render-block"}, "release_url": "https://pypi.org/project/django-render-block/0.6/", "requires_dist": ["django (>=1.11)"], "requires_python": "", "summary": "Render a particular block from a template to a string.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-render-block\">\n<h2>Django Render Block</h2>\n<a href=\"https://travis-ci.org/clokep/django-render-block\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/clokep/django-render-block.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d0a7b9c61d9b7e7bdb788c719d6db5c2b6f6104/68747470733a2f2f7472617669732d63692e6f72672f636c6f6b65702f646a616e676f2d72656e6465722d626c6f636b2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Render the content of a specific block tag from a Django template. Works for\narbitrary template inheritance, even if a block is defined in the child template\nbut not in the parent. Generally it works like <tt>render_to_string</tt> from Django,\nbut allows you to specify a block to render.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Render a specific block from a template</li>\n<li>Fully supports the Django templating engine</li>\n<li>Partially supports the <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> engine: it does\nnot currently process the <tt>extends</tt> tag.</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Django Render Block supports Django 1.11, 2.1, and 2.2.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>In <tt>test1.html</tt>:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">block1</span> <span class=\"cp\">%}</span><span class=\"x\">block1 from test1</span><span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">block2</span> <span class=\"cp\">%}</span><span class=\"x\">block2 from test1</span><span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>In <tt>test2.html</tt>:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s1\">'test1.html'</span> <span class=\"cp\">%}</span><span class=\"x\">\n</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">block1</span> <span class=\"cp\">%}</span><span class=\"x\">block1 from test2</span><span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>And from the Python shell:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">render_block</span> <span class=\"kn\">import</span> <span class=\"n\">render_block_to_string</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">render_block_to_string</span><span class=\"p\">(</span><span class=\"s1\">'test2.html'</span><span class=\"p\">,</span> <span class=\"s1\">'block1'</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'block1 from test2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">render_block_to_string</span><span class=\"p\">(</span><span class=\"s1\">'test2.html'</span><span class=\"p\">,</span> <span class=\"s1\">'block2'</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'block2 from test1'</span>\n</pre>\n<p>It can also accept a context as a <tt>dict</tt> (just like <tt>render_to_string</tt>), in\n<tt>test3.html</tt>:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">block3</span> <span class=\"cp\">%}</span><span class=\"x\">Render this </span><span class=\"cp\">{{</span> <span class=\"nv\">variable</span> <span class=\"cp\">}}</span><span class=\"x\">!</span><span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>And from Python:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">render_block_to_string</span><span class=\"p\">(</span><span class=\"s1\">'test3.html'</span><span class=\"p\">,</span> <span class=\"s1\">'block3'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'variable'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">})</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Render this test!'</span>\n</pre>\n</div>\n<div id=\"api-reference\">\n<h3>API Reference</h3>\n<p>The API is simple and attempts to mirror the built-in <tt>render_to_string</tt> API.</p>\n<p><tt>render_block_to_string(template_name, block_name, context=None, request=None)</tt></p>\n<blockquote>\n<dl>\n<dt><tt>template_name</tt></dt>\n<dd>The name of the template to load and render. If it\u2019s a list of template\nnames, Django uses <tt>select_template()</tt> instead of <tt>get_template()</tt>\nto find the template.</dd>\n<dt><tt>block_name</tt></dt>\n<dd>The name of the block to render from the above template.</dd>\n<dt><tt>context</tt></dt>\n<dd><p>A <tt>dict</tt> to be used as the template\u2019s context for rendering.</p>\n<p><tt>context</tt> is now optional. An empty context will be used if it isn\u2019t\nprovided.</p>\n</dd>\n<dt><tt>request</tt></dt>\n<dd><p>The request object used to render the template.</p>\n<p><tt>request</tt> is optional and works only for Django templates. If\nprovided a <tt>RequestContext</tt> will be used instead of a <tt>Context</tt>.</p>\n</dd>\n</dl>\n</blockquote>\n<div id=\"exceptions\">\n<h4>Exceptions</h4>\n<p>Like <tt>render_to_string</tt> this will raise the following exceptions:</p>\n<blockquote>\n<dl>\n<dt><tt>TemplateDoesNotExists</tt></dt>\n<dd>Raised if the template(s) specified by <tt>template_name</tt> cannot be\nloaded.</dd>\n<dt><tt>TemplateSyntaxError</tt></dt>\n<dd>Raised if the loaded template contains invalid syntax.</dd>\n</dl>\n</blockquote>\n<p>There are also two additional errors that can be raised:</p>\n<blockquote>\n<dl>\n<dt><tt>BlockNotFound</tt></dt>\n<dd>Raised if the block given by <tt>block_name</tt> does not exist in the\ntemplate.</dd>\n<dt><tt>UnsupportedEngine</tt></dt>\n<dd>Raised if a template backend besides the Django backend is used.</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>If you find a bug or have an idea for an improvement to Django Render Block,\nplease\n<a href=\"https://github.com/clokep/django-render-block/issues/new\" rel=\"nofollow\">file an issue</a> or\nprovide a pull request! Check the\n<a href=\"https://github.com/clokep/django-render-block/issues/\" rel=\"nofollow\">list of issues</a> for\nideas of what to work on.</p>\n</div>\n<div id=\"attribution\">\n<h3>Attribution</h3>\n<p>This is based on a few sources:</p>\n<ul>\n<li>Originally <a href=\"https://djangosnippets.org/snippets/769/\" rel=\"nofollow\">Django Snippet 769</a></li>\n<li>Updated version <a href=\"https://djangosnippets.org/snippets/942/\" rel=\"nofollow\">Django Snippet 942</a></li>\n<li>A version of the snippets was ported as <a href=\"https://github.com/uniphil/Django-Block-Render/\" rel=\"nofollow\">Django-Block-Render</a></li>\n<li>Additionally inspired by part of <a href=\"https://github.com/BradWhittington/django-templated-email/blob/master/templated_email/utils.py\" rel=\"nofollow\">django-templated-email</a></li>\n<li>Also based on a <a href=\"http://stackoverflow.com/questions/2687173/django-how-can-i-get-a-block-from-a-template\" rel=\"nofollow\">StackOverflow answer 2687173</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"may-8-2019\">\n<h3>0.6 (May 8, 2019)</h3>\n<ul>\n<li>Supports Django 1.11, Django 2.1, and Django 2.2.</li>\n<li>Supports Python 2.7, 3.5, 3.6, and 3.7.</li>\n<li><tt>render_block_to_string</tt> now optionally accepts a <tt>request</tt> parameter.\nIf given a <tt>RequestContext</tt> instead of a <tt>Context</tt> is used when\nrendering with the Django templating engine. See #15, thanks to @vintage.</li>\n</ul>\n</div>\n<div id=\"september-1-2016\">\n<h3>0.5 (September 1, 2016)</h3>\n<ul>\n<li>Fixes a major issue with inheriting templates and rendering a block found in\nthe parent template, but overwriting part of it in the child template.\n(<a href=\"https://github.com/clokep/django-render-block/pull/8\" rel=\"nofollow\">#8</a>)</li>\n</ul>\n</div>\n<div id=\"august-4-2016\">\n<h3>0.4 (August 4, 2016)</h3>\n<ul>\n<li>Initial support for using the <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> templating\nengine. See README for caveats. (<a href=\"https://github.com/clokep/django-render-block/pull/3\" rel=\"nofollow\">#3</a>)</li>\n<li>Support Django 1.10. (<a href=\"https://github.com/clokep/django-render-block/pull/5\" rel=\"nofollow\">#5</a>)</li>\n<li>Support Python 3. (<a href=\"https://github.com/clokep/django-render-block/pull/6\" rel=\"nofollow\">#6</a>)</li>\n</ul>\n</div>\n<div id=\"june-1-2016\">\n<h3>0.3.1 (June 1, 2016)</h3>\n<ul>\n<li>Refactoring to make more generic (for potentially supporting multiple\ntemplating engines).</li>\n</ul>\n</div>\n<div id=\"may-27-2016\">\n<h3>0.3 (May 27, 2016)</h3>\n<ul>\n<li>Largely rewritten.</li>\n<li>Updated to support modern Django (1.8, 1.9):<ul>\n<li>Guards against different template backends.</li>\n<li>Uses internal APIs for each node.</li>\n<li>Removed <tt>context_instance</tt> parameter.</li>\n<li>Support for calling <tt>{{ block.super }}</tt>.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"january-10-2011\">\n<h3>0.2.2 (January 10, 2011)</h3>\n<ul>\n<li>Updated per\n<a href=\"https://djangosnippets.org/snippets/942/#c3466\" rel=\"nofollow\">comment 3466 on Django Snippet 942</a>\nto fix an issue with nested extends. The specific bug was not reproducible,\nbut the additional code shouldn\u2019t hurt.</li>\n</ul>\n</div>\n<div id=\"august-27-2010\">\n<h3>0.2.1 (August 27, 2010)</h3>\n<ul>\n<li>Updated per\n<a href=\"https://djangosnippets.org/snippets/942/#c3237\" rel=\"nofollow\">comment 3237 on Django Snippet 942</a>\nto remove a pointless render. The specific bug was not reproducible, but the\ncode is extraneous.</li>\n</ul>\n</div>\n<div id=\"august-4-2008\">\n<h3>0.2 (August 4, 2008)</h3>\n<ul>\n<li>Updated version from\n<a href=\"https://djangosnippets.org/snippets/942/\" rel=\"nofollow\">Django Snippet 942</a> by zbyte64.</li>\n<li>Improves include:<ol>\n<li>Simpler/better handling of \u201cextends\u201d block tag</li>\n<li>Searches If/Else blocks</li>\n<li>Less code</li>\n<li>Allow list of templates to be passed which is closer to the behavior of\nrender_to_response</li>\n</ol>\n</li>\n</ul>\n</div>\n<div id=\"may-22-2008\">\n<h3>0.1 (May 22, 2008)</h3>\n<ul>\n<li>Initial version from\n<a href=\"https://djangosnippets.org/snippets/769/\" rel=\"nofollow\">Django Snippet 769</a> by sciyoshi.</li>\n<li>Supports Django 0.96.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5242644, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "727ab1cc44991d3daac2ab45fa12bb6e", "sha256": "7e6edddb1495d03d771d20e73865cdd7124283a01b207f44dfb5dfe716b12185"}, "downloads": -1, "filename": "django_render_block-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "727ab1cc44991d3daac2ab45fa12bb6e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17442, "upload_time": "2016-06-01T17:39:20", "upload_time_iso_8601": "2016-06-01T17:39:20.595360Z", "url": "https://files.pythonhosted.org/packages/1f/bf/dc5d8f3efd7c101d976e52a35faa087c0c44acc0847c85c10b7047499a74/django_render_block-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "363d270f368289555c82a86ec0cd50c4", "sha256": "561f6d9f889ef306b7f953bf29ebd952a2ad0f6d6659b571f7e497ece7f96185"}, "downloads": -1, "filename": "django_render_block-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "363d270f368289555c82a86ec0cd50c4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11511, "upload_time": "2016-08-04T22:33:07", "upload_time_iso_8601": "2016-08-04T22:33:07.653394Z", "url": "https://files.pythonhosted.org/packages/26/20/ab895a61237a1b832cfd3248166023c6fc6fd328cceed99e8980852620b4/django_render_block-0.4-py2.py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "c3aa7579fde66a81fe766b96afbef866", "sha256": "0eab0c4ef1b99ad307e1bd1bdd0daa6ee4252bc39363b1b30b29cf675b840968"}, "downloads": -1, "filename": "django_render_block-0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c3aa7579fde66a81fe766b96afbef866", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12136, "upload_time": "2016-09-01T12:15:01", "upload_time_iso_8601": "2016-09-01T12:15:01.600390Z", "url": "https://files.pythonhosted.org/packages/43/b4/7495a352983dd20589aed780bbda6dafb7c5abe99add2accd7b04af3b94f/django_render_block-0.5-py2.py3-none-any.whl", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "5f11ed919361e9a5c3a1d7276f5a8a4c", "sha256": "95c7dc9610378a10e0c4a10d8364ec7307210889afccd6a67a6aaa0fd599bd4d"}, "downloads": -1, "filename": "django_render_block-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f11ed919361e9a5c3a1d7276f5a8a4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10029, "upload_time": "2019-05-08T12:18:29", "upload_time_iso_8601": "2019-05-08T12:18:29.449223Z", "url": "https://files.pythonhosted.org/packages/1a/15/d0447101dc519bc5cdbc8eb3edf77a6ee7dd164f8ae3e0862f3f7eecf4c4/django_render_block-0.6-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f11ed919361e9a5c3a1d7276f5a8a4c", "sha256": "95c7dc9610378a10e0c4a10d8364ec7307210889afccd6a67a6aaa0fd599bd4d"}, "downloads": -1, "filename": "django_render_block-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f11ed919361e9a5c3a1d7276f5a8a4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10029, "upload_time": "2019-05-08T12:18:29", "upload_time_iso_8601": "2019-05-08T12:18:29.449223Z", "url": "https://files.pythonhosted.org/packages/1a/15/d0447101dc519bc5cdbc8eb3edf77a6ee7dd164f8ae3e0862f3f7eecf4c4/django_render_block-0.6-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:54:17 2020"}