{"info": {"author": "ACSONE SA/NV", "author_email": "info@acsone.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "streamingxmlwriter\n==================\n\n.. image:: https://img.shields.io/badge/licence-LGPL--3-blue.svg\n   :target: http://www.gnu.org/licenses/lgpl-3.0-standalone.html\n   :alt: License: LGPL-3\n.. image:: https://badge.fury.io/py/streamingxmlwriter.svg\n    :target: http://badge.fury.io/py/streamingxmlwriter\n.. image:: https://travis-ci.org/acsone/streamingxmlwriter.svg?branch=master\n   :target: https://travis-ci.org/acsone/streamingxmlwriter\n.. image:: https://coveralls.io/repos/acsone/streamingxmlwriter/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/repos/github/acsone/streamingxmlwriter/badge.svg?branch=master\n\nA lightweight pythonic standard compliant streaming xml writer.\n\n  .. code:: python\n\n    from io import BytesIO\n\n    import streamingxmlwriter\n\n    stream = BytesIO()\n    with streamingxmlwriter.from_stream(stream) as writer:\n        writer.start_namespace('myns', 'http://mynamespace.org/')\n        with writer.element('myns:root', {'att1': '1'}):\n            with writer.element('myns:child1'):\n                writer.characters('text content')\n            writer.comment(' a comment ')\n            with writer.element('myns:child2'):\n                writer.characters('text content')\n            # shortcut for elements containing a single text node\n            writer.text_element('myns:child3', 'text content', {'att2': '2'})\n\nFor more API examples, look at the documentation of the\n``StreamingXMLWriter`` class in ``core.py``.\n\nUnder the hood it generates SAX events to the standard xml.sax.saxutils.XMLGenerator.\nIt also provides a `from_sax_handler` constructor so it can also be used to emit\nsax events for other purposes than outputing to an io stream.\n\nPython 2 (2.7+) and python 3 (3.3+) are supported.\n\nSupported XML features are:\n\n  * elements\n  * attributes\n  * text\n  * processing instructions\n  * comments\n  * selectable encoding\n  * namespaces for elements and attributes, with or without prefix\n\nUnsupported XML features (yet):\n\n  * DOCTYPE declaration\n  * entities\n  * CDATA sections\n\nCredits\n=======\n\nAuthor\n------\n\n  * St\u00e9phane Bidoul (ACSONE)\n\nMaintainer\n----------\n\n.. image:: https://www.acsone.eu/logo.png\n   :alt: ACSONE SA/NV\n   :target: http://www.acsone.eu\n\nThis module is maintained by ACSONE SA/NV.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/acsone/streamingxmlwriter", "keywords": null, "license": "LGPLv3", "maintainer": null, "maintainer_email": null, "name": "streamingxmlwriter", "package_url": "https://pypi.org/project/streamingxmlwriter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/streamingxmlwriter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/acsone/streamingxmlwriter"}, "release_url": "https://pypi.org/project/streamingxmlwriter/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A lightweight pythonic standard compliant streaming xml writer", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"streamingxmlwriter\">\n<h2>streamingxmlwriter</h2>\n<a href=\"http://www.gnu.org/licenses/lgpl-3.0-standalone.html\" rel=\"nofollow\"><img alt=\"License: LGPL-3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/568de9667cb13e0743720c3932c4a799101e0ac4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e63652d4c47504c2d2d332d626c75652e737667\"></a>\n<a href=\"http://badge.fury.io/py/streamingxmlwriter\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/streamingxmlwriter.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a9be666eb71138e041d82ba63a7182eff699a34/68747470733a2f2f62616467652e667572792e696f2f70792f73747265616d696e67786d6c7772697465722e737667\"></a>\n<a href=\"https://travis-ci.org/acsone/streamingxmlwriter\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/acsone/streamingxmlwriter.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3edaef02b5d4ac08bef8575cbea4790eeaedd255/68747470733a2f2f7472617669732d63692e6f72672f6163736f6e652f73747265616d696e67786d6c7772697465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/repos/github/acsone/streamingxmlwriter/badge.svg?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/acsone/streamingxmlwriter/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f478c50f2438f24ded8e76ecb73a37617e32b52/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6163736f6e652f73747265616d696e67786d6c7772697465722f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<p>A lightweight pythonic standard compliant streaming xml writer.</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">streamingxmlwriter</span>\n\n<span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">streamingxmlwriter</span><span class=\"o\">.</span><span class=\"n\">from_stream</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">start_namespace</span><span class=\"p\">(</span><span class=\"s1\">'myns'</span><span class=\"p\">,</span> <span class=\"s1\">'http://mynamespace.org/'</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"p\">(</span><span class=\"s1\">'myns:root'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'att1'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">}):</span>\n        <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"p\">(</span><span class=\"s1\">'myns:child1'</span><span class=\"p\">):</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">characters</span><span class=\"p\">(</span><span class=\"s1\">'text content'</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">comment</span><span class=\"p\">(</span><span class=\"s1\">' a comment '</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">element</span><span class=\"p\">(</span><span class=\"s1\">'myns:child2'</span><span class=\"p\">):</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">characters</span><span class=\"p\">(</span><span class=\"s1\">'text content'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># shortcut for elements containing a single text node</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">text_element</span><span class=\"p\">(</span><span class=\"s1\">'myns:child3'</span><span class=\"p\">,</span> <span class=\"s1\">'text content'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'att2'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">})</span>\n</pre>\n</blockquote>\n<p>For more API examples, look at the documentation of the\n<tt>StreamingXMLWriter</tt> class in <tt>core.py</tt>.</p>\n<p>Under the hood it generates SAX events to the standard xml.sax.saxutils.XMLGenerator.\nIt also provides a <cite>from_sax_handler</cite> constructor so it can also be used to emit\nsax events for other purposes than outputing to an io stream.</p>\n<p>Python 2 (2.7+) and python 3 (3.3+) are supported.</p>\n<p>Supported XML features are:</p>\n<blockquote>\n<ul>\n<li>elements</li>\n<li>attributes</li>\n<li>text</li>\n<li>processing instructions</li>\n<li>comments</li>\n<li>selectable encoding</li>\n<li>namespaces for elements and attributes, with or without prefix</li>\n</ul>\n</blockquote>\n<p>Unsupported XML features (yet):</p>\n<blockquote>\n<ul>\n<li>DOCTYPE declaration</li>\n<li>entities</li>\n<li>CDATA sections</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<div id=\"author\">\n<h3>Author</h3>\n<blockquote>\n<ul>\n<li>St\u00e9phane Bidoul (ACSONE)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"maintainer\">\n<h3>Maintainer</h3>\n<a href=\"http://www.acsone.eu\" rel=\"nofollow\"><img alt=\"ACSONE SA/NV\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60c7caf6215a8af3b5f56d3ae95fdbe242bddeb1/68747470733a2f2f7777772e6163736f6e652e65752f6c6f676f2e706e67\"></a>\n<p>This module is maintained by ACSONE SA/NV.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7131845, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a4bdcbfebc575ceca52825b7f13a02da", "sha256": "7cd7576f2eb9c8f1510b7cda6f0d4519da50c0f816d788e205fa8d9939247827"}, "downloads": -1, "filename": "streamingxmlwriter-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4bdcbfebc575ceca52825b7f13a02da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4831, "upload_time": "2016-02-17T14:06:14", "upload_time_iso_8601": "2016-02-17T14:06:14.182079Z", "url": "https://files.pythonhosted.org/packages/6c/7a/09ae2cef23249fa6eb7b7c3a64974d1c824ffce22eab6d549083503f9437/streamingxmlwriter-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca860fb695c875fb99df4cf08621d2e0", "sha256": "3d68345d35628a60776c359e467d883aa264b7fb0eb772cfccd49fe1ab3897ae"}, "downloads": -1, "filename": "streamingxmlwriter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ca860fb695c875fb99df4cf08621d2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7109, "upload_time": "2016-02-17T14:04:47", "upload_time_iso_8601": "2016-02-17T14:04:47.690593Z", "url": "https://files.pythonhosted.org/packages/84/4d/05838decadb43601835243e4d88aeeb62cb030949d9b1af0c277c4a8590d/streamingxmlwriter-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4bdcbfebc575ceca52825b7f13a02da", "sha256": "7cd7576f2eb9c8f1510b7cda6f0d4519da50c0f816d788e205fa8d9939247827"}, "downloads": -1, "filename": "streamingxmlwriter-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4bdcbfebc575ceca52825b7f13a02da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4831, "upload_time": "2016-02-17T14:06:14", "upload_time_iso_8601": "2016-02-17T14:06:14.182079Z", "url": "https://files.pythonhosted.org/packages/6c/7a/09ae2cef23249fa6eb7b7c3a64974d1c824ffce22eab6d549083503f9437/streamingxmlwriter-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca860fb695c875fb99df4cf08621d2e0", "sha256": "3d68345d35628a60776c359e467d883aa264b7fb0eb772cfccd49fe1ab3897ae"}, "downloads": -1, "filename": "streamingxmlwriter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ca860fb695c875fb99df4cf08621d2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7109, "upload_time": "2016-02-17T14:04:47", "upload_time_iso_8601": "2016-02-17T14:04:47.690593Z", "url": "https://files.pythonhosted.org/packages/84/4d/05838decadb43601835243e4d88aeeb62cb030949d9b1af0c277c4a8590d/streamingxmlwriter-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:21 2020"}