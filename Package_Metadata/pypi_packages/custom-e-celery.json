{"info": {"author": "Ask Solem", "author_email": "ask@celeryproject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Object Brokering", "Topic :: System :: Distributed Computing"], "description": ".. image:: http://docs.celeryproject.org/en/latest/_images/celery-banner-small.png\n\n|build-status| |license| |wheel| |pyversion| |pyimp|\n\n:Version: 4.0.2 (latentcall)\n:Web: http://celeryproject.org/\n:Download: http://pypi.python.org/pypi/celery/\n:Source: https://github.com/celery/celery/\n:Keywords: task, queue, job, async, rabbitmq, amqp, redis,\n  python, distributed, actors\n\n--\n\nWhat's a Task Queue?\n====================\n\nTask queues are used as a mechanism to distribute work across threads or\nmachines.\n\nA task queue's input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.\n\nCelery communicates via messages, usually using a broker\nto mediate between clients and workers. To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.\n\nA Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.\n\nCelery is written in Python, but the protocol can be implemented in any\nlanguage. In addition to Python there's node-celery_ for Node.js,\nand a `PHP client`_.\n\nLanguage interoperability can also be achieved by using webhooks\nin such a way that the client enqueues an URL to be requested by a worker.\n\n.. _node-celery: https://github.com/mher/node-celery\n.. _`PHP client`: https://github.com/gjedeer/celery-php\n\nWhat do I need?\n===============\n\nCelery version 4.0 runs on,\n\n- Python (2.7, 3.4, 3.5)\n- PyPy (5.4, 5.5)\n\n\nThis is the last version to support Python 2.7,\nand from the next version (Celery 5.x) Python 3.5 or newer is required.\n\nIf you're running an older version of Python, you need to be running\nan older version of Celery:\n\n- Python 2.6: Celery series 3.1 or earlier.\n- Python 2.5: Celery series 3.0 or earlier.\n- Python 2.4 was Celery series 2.2 or earlier.\n\nCelery is a project with minimal funding,\nso we don't support Microsoft Windows.\nPlease don't open any issues related to that platform.\n\n*Celery* is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there's also experimental support for a myriad of other solutions, including\nusing SQLite for local development.\n\n*Celery* can run on a single machine, on multiple machines, or even\nacross datacenters.\n\nGet Started\n===========\n\nIf this is the first time you're trying to use Celery, or you're\nnew to Celery 4.0 coming from previous versions then you should read our\ngetting started tutorials:\n\n- `First steps with Celery`_\n\n    Tutorial teaching you the bare minimum needed to get started with Celery.\n\n- `Next steps`_\n\n    A more complete overview, showing more features.\n\n.. _`First steps with Celery`:\n    http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\n\n.. _`Next steps`:\n    http://docs.celeryproject.org/en/latest/getting-started/next-steps.html\n\nCelery is...\n=============\n\n- **Simple**\n\n    Celery is easy to use and maintain, and does *not need configuration files*.\n\n    It has an active, friendly community you can talk to for support,\n    like at our `mailing-list`_, or the IRC channel.\n\n    Here's one of the simplest applications you can make::\n\n        from celery import Celery\n\n        app = Celery('hello', broker='amqp://guest@localhost//')\n\n        @app.task\n        def hello():\n            return 'hello world'\n\n- **Highly Available**\n\n    Workers and clients will automatically retry in the event\n    of connection loss or failure, and some brokers support\n    HA in way of *Primary/Primary* or *Primary/Replica* replication.\n\n- **Fast**\n\n    A single Celery process can process millions of tasks a minute,\n    with sub-millisecond round-trip latency (using RabbitMQ,\n    py-librabbitmq, and optimized settings).\n\n- **Flexible**\n\n    Almost every part of *Celery* can be extended or used on its own,\n    Custom pool implementations, serializers, compression schemes, logging,\n    schedulers, consumers, producers, broker transports, and much more.\n\nIt supports...\n================\n\n    - **Message Transports**\n\n        - RabbitMQ_, Redis_, Amazon SQS\n\n    - **Concurrency**\n\n        - Prefork, Eventlet_, gevent_, single threaded (``solo``)\n\n    - **Result Stores**\n\n        - AMQP, Redis\n        - memcached\n        - SQLAlchemy, Django ORM\n        - Apache Cassandra, IronCache, Elasticsearch\n\n    - **Serialization**\n\n        - *pickle*, *json*, *yaml*, *msgpack*.\n        - *zlib*, *bzip2* compression.\n        - Cryptographic message signing.\n\n.. _`Eventlet`: http://eventlet.net/\n.. _`gevent`: http://gevent.org/\n\n.. _RabbitMQ: http://rabbitmq.com\n.. _Redis: http://redis.io\n.. _SQLAlchemy: http://sqlalchemy.org\n\nFramework Integration\n=====================\n\nCelery is easy to integrate with web frameworks, some of which even have\nintegration packages:\n\n    +--------------------+------------------------+\n    | `Django`_          | not needed             |\n    +--------------------+------------------------+\n    | `Pyramid`_         | `pyramid_celery`_      |\n    +--------------------+------------------------+\n    | `Pylons`_          | `celery-pylons`_       |\n    +--------------------+------------------------+\n    | `Flask`_           | not needed             |\n    +--------------------+------------------------+\n    | `web2py`_          | `web2py-celery`_       |\n    +--------------------+------------------------+\n    | `Tornado`_         | `tornado-celery`_      |\n    +--------------------+------------------------+\n\nThe integration packages aren't strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at ``fork``.\n\n.. _`Django`: http://djangoproject.com/\n.. _`Pylons`: http://pylonsproject.org/\n.. _`Flask`: http://flask.pocoo.org/\n.. _`web2py`: http://web2py.com/\n.. _`Bottle`: http://bottlepy.org/\n.. _`Pyramid`: http://docs.pylonsproject.org/en/latest/docs/pyramid.html\n.. _`pyramid_celery`: http://pypi.python.org/pypi/pyramid_celery/\n.. _`celery-pylons`: http://pypi.python.org/pypi/celery-pylons\n.. _`web2py-celery`: http://code.google.com/p/web2py-celery/\n.. _`Tornado`: http://www.tornadoweb.org/\n.. _`tornado-celery`: https://github.com/mher/tornado-celery/\n\n.. _celery-documentation:\n\nDocumentation\n=============\n\nThe `latest documentation`_ is hosted at Read The Docs, containing user guides,\ntutorials, and an API reference.\n\n.. _`latest documentation`: http://docs.celeryproject.org/en/latest/\n\n.. _celery-installation:\n\nInstallation\n============\n\nYou can install Celery either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``:\n\n::\n\n\n    $ pip install -U Celery\n\n.. _bundles:\n\nBundles\n-------\n\nCelery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.\n\nYou can specify these in your requirements or on the ``pip``\ncommand-line by using brackets. Multiple bundles can be specified by\nseparating them by commas.\n\n::\n\n\n    $ pip install \"celery[librabbitmq]\"\n\n    $ pip install \"celery[librabbitmq,redis,auth,msgpack]\"\n\nThe following bundles are available:\n\nSerializers\n~~~~~~~~~~~\n\n:``celery[auth]``:\n    for using the ``auth`` security serializer.\n\n:``celery[msgpack]``:\n    for using the msgpack serializer.\n\n:``celery[yaml]``:\n    for using the yaml serializer.\n\nConcurrency\n~~~~~~~~~~~\n\n:``celery[eventlet]``:\n    for using the ``eventlet`` pool.\n\n:``celery[gevent]``:\n    for using the ``gevent`` pool.\n\nTransports and Backends\n~~~~~~~~~~~~~~~~~~~~~~~\n\n:``celery[librabbitmq]``:\n    for using the librabbitmq C library.\n\n:``celery[redis]``:\n    for using Redis as a message transport or as a result backend.\n\n:``celery[sqs]``:\n    for using Amazon SQS as a message transport (*experimental*).\n\n:``celery[tblib``]\n    for using the ``task_remote_tracebacks`` feature.\n\n:``celery[memcache]``:\n    for using Memcached as a result backend (using ``pylibmc``)\n\n:``celery[pymemcache]``:\n    for using Memcached as a result backend (pure-Python implementation).\n\n:``celery[cassandra]``:\n    for using Apache Cassandra as a result backend with DataStax driver.\n\n:``celery[couchbase]``:\n    for using Couchbase as a result backend.\n\n:``celery[elasticsearch]``:\n    for using Elasticsearch as a result backend.\n\n:``celery[riak]``:\n    for using Riak as a result backend.\n\n:``celery[zookeeper]``:\n    for using Zookeeper as a message transport.\n\n:``celery[sqlalchemy]``:\n    for using SQLAlchemy as a result backend (*supported*).\n\n:``celery[pyro]``:\n    for using the Pyro4 message transport (*experimental*).\n\n:``celery[slmq]``:\n    for using the SoftLayer Message Queue transport (*experimental*).\n\n:``celery[consul]``:\n    for using the Consul.io Key/Value store as a message transport or result backend (*experimental*).\n\n:``celery[django]``\n    specifies the lowest version possible for Django support.\n\n    You should probably not use this in your requirements, it's here\n    for informational purposes only.\n\n\n.. _celery-installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Celery from PyPI:\n\nhttp://pypi.python.org/pypi/celery/\n\nYou can install it by doing the following,:\n\n::\n\n\n    $ tar xvfz celery-0.0.0.tar.gz\n    $ cd celery-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou aren't currently using a virtualenv.\n\n.. _celery-installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nThe Celery development version also requires the development\nversions of ``kombu``, ``amqp``, ``billiard``, and ``vine``.\n\nYou can install the latest snapshot of these using the following\npip commands:\n\n::\n\n\n    $ pip install https://github.com/celery/celery/zipball/master#egg=celery\n    $ pip install https://github.com/celery/billiard/zipball/master#egg=billiard\n    $ pip install https://github.com/celery/py-amqp/zipball/master#egg=amqp\n    $ pip install https://github.com/celery/kombu/zipball/master#egg=kombu\n    $ pip install https://github.com/celery/vine/zipball/master#egg=vine\n\nWith git\n~~~~~~~~\n\nPlease the Contributing section.\n\n.. _getting-help:\n\nGetting Help\n============\n\n.. _mailing-list:\n\nMailing list\n------------\n\nFor discussions about the usage, development, and future of Celery,\nplease join the `celery-users`_ mailing list.\n\n.. _`celery-users`: http://groups.google.com/group/celery-users/\n\n.. _irc-channel:\n\nIRC\n---\n\nCome chat with us on IRC. The **#celery** channel is located at the `Freenode`_\nnetwork.\n\n.. _`Freenode`: http://freenode.net\n\n.. _bug-tracker:\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports, or annoyances please report them\nto our issue tracker at https://github.com/celery/celery/issues/\n\n.. _wiki:\n\nWiki\n====\n\nhttp://wiki.github.com/celery/celery/\n\n.. _contributing-short:\n\nContributing\n============\n\nDevelopment of `celery` happens at GitHub: https://github.com/celery/celery\n\nYou're highly encouraged to participate in the development\nof `celery`. If you don't like GitHub (for some reason) you're welcome\nto send regular patches.\n\nBe sure to also read the `Contributing to Celery`_ section in the\ndocumentation.\n\n.. _`Contributing to Celery`:\n    http://docs.celeryproject.org/en/master/contributing.html\n\n.. _license:\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n.. |build-status| image:: https://secure.travis-ci.org/celery/celery.png?branch=master\n    :alt: Build status\n    :target: https://travis-ci.org/celery/celery\n\n.. |coverage| image:: https://codecov.io/github/celery/celery/coverage.svg?branch=master\n    :target: https://codecov.io/github/celery/celery?branch=master\n\n.. |license| image:: https://img.shields.io/pypi/l/celery.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/celery.svg\n    :alt: Celery can be installed via wheel\n    :target: http://pypi.python.org/pypi/celery/\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/celery.svg\n    :alt: Supported Python versions.\n    :target: http://pypi.python.org/pypi/celery/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/celery.svg\n    :alt: Support Python implementations.\n    :target: http://pypi.python.org/pypi/celery/\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://celeryproject.org", "keywords": "task job queue distributed messaging actor", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "custom-e-celery", "package_url": "https://pypi.org/project/custom-e-celery/", "platform": "any", "project_url": "https://pypi.org/project/custom-e-celery/", "project_urls": {"Homepage": "http://celeryproject.org"}, "release_url": "https://pypi.org/project/custom-e-celery/4.0.2/", "requires_dist": null, "requires_python": "", "summary": "Distributed Task Queue.", "version": "4.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"http://docs.celeryproject.org/en/latest/_images/celery-banner-small.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1336bf90c555ca9b45aca49e9d2b51a00783c1c/687474703a2f2f646f63732e63656c65727970726f6a6563742e6f72672f656e2f6c61746573742f5f696d616765732f63656c6572792d62616e6e65722d736d616c6c2e706e67\">\n<p><a href=\"https://travis-ci.org/celery/celery\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a72a1c7b63bfec966ef72186efb4cd8bcde5af4/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f63656c6572792f63656c6572792e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"BSD License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5514e595f6b0bf3af9a7dff4ac806be71a7db576/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f63656c6572792e737667\"></a> <a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\"><img alt=\"Celery can be installed via wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20eaeeb951818aa27f8fd9c9e9abc8ffd69a1b1d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f63656c6572792e737667\"></a> <a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\"><img alt=\"Supported Python versions.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65ee5156d7be30bec2fe837eef7ab36c750fe58a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63656c6572792e737667\"></a> <a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\"><img alt=\"Support Python implementations.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8268c3be306b968a88e880839fcf60ccd68bf998/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f63656c6572792e737667\"></a></p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th><td>4.0.2 (latentcall)</td>\n</tr>\n<tr><th>Web:</th><td><a href=\"http://celeryproject.org/\" rel=\"nofollow\">http://celeryproject.org/</a></td>\n</tr>\n<tr><th>Download:</th><td><a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\">http://pypi.python.org/pypi/celery/</a></td>\n</tr>\n<tr><th>Source:</th><td><a href=\"https://github.com/celery/celery/\" rel=\"nofollow\">https://github.com/celery/celery/</a></td>\n</tr>\n<tr><th>Keywords:</th><td>task, queue, job, async, rabbitmq, amqp, redis,\npython, distributed, actors</td>\n</tr>\n</tbody>\n</table>\n<p>\u2013</p>\n<div id=\"what-s-a-task-queue\">\n<h2>What\u2019s a Task Queue?</h2>\n<p>Task queues are used as a mechanism to distribute work across threads or\nmachines.</p>\n<p>A task queue\u2019s input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.</p>\n<p>Celery communicates via messages, usually using a broker\nto mediate between clients and workers. To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.</p>\n<p>A Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.</p>\n<p>Celery is written in Python, but the protocol can be implemented in any\nlanguage. In addition to Python there\u2019s <a href=\"https://github.com/mher/node-celery\" rel=\"nofollow\">node-celery</a> for Node.js,\nand a <a href=\"https://github.com/gjedeer/celery-php\" rel=\"nofollow\">PHP client</a>.</p>\n<p>Language interoperability can also be achieved by using webhooks\nin such a way that the client enqueues an URL to be requested by a worker.</p>\n</div>\n<div id=\"what-do-i-need\">\n<h2>What do I need?</h2>\n<p>Celery version 4.0 runs on,</p>\n<ul>\n<li>Python (2.7, 3.4, 3.5)</li>\n<li>PyPy (5.4, 5.5)</li>\n</ul>\n<p>This is the last version to support Python 2.7,\nand from the next version (Celery 5.x) Python 3.5 or newer is required.</p>\n<p>If you\u2019re running an older version of Python, you need to be running\nan older version of Celery:</p>\n<ul>\n<li>Python 2.6: Celery series 3.1 or earlier.</li>\n<li>Python 2.5: Celery series 3.0 or earlier.</li>\n<li>Python 2.4 was Celery series 2.2 or earlier.</li>\n</ul>\n<p>Celery is a project with minimal funding,\nso we don\u2019t support Microsoft Windows.\nPlease don\u2019t open any issues related to that platform.</p>\n<p><em>Celery</em> is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there\u2019s also experimental support for a myriad of other solutions, including\nusing SQLite for local development.</p>\n<p><em>Celery</em> can run on a single machine, on multiple machines, or even\nacross datacenters.</p>\n</div>\n<div id=\"get-started\">\n<h2>Get Started</h2>\n<p>If this is the first time you\u2019re trying to use Celery, or you\u2019re\nnew to Celery 4.0 coming from previous versions then you should read our\ngetting started tutorials:</p>\n<ul>\n<li><p><a href=\"http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\" rel=\"nofollow\">First steps with Celery</a></p>\n<blockquote>\n<p>Tutorial teaching you the bare minimum needed to get started with Celery.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://docs.celeryproject.org/en/latest/getting-started/next-steps.html\" rel=\"nofollow\">Next steps</a></p>\n<blockquote>\n<p>A more complete overview, showing more features.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"celery-is\">\n<h2>Celery is\u2026</h2>\n<ul>\n<li><p><strong>Simple</strong></p>\n<blockquote>\n<p>Celery is easy to use and maintain, and does <em>not need configuration files</em>.</p>\n<p>It has an active, friendly community you can talk to for support,\nlike at our <a href=\"#mailing-list\" rel=\"nofollow\">mailing-list</a>, or the IRC channel.</p>\n<p>Here\u2019s one of the simplest applications you can make:</p>\n<pre>from celery import Celery\n\napp = Celery('hello', broker='amqp://guest@localhost//')\n\n@app.task\ndef hello():\n    return 'hello world'\n</pre>\n</blockquote>\n</li>\n<li><p><strong>Highly Available</strong></p>\n<blockquote>\n<p>Workers and clients will automatically retry in the event\nof connection loss or failure, and some brokers support\nHA in way of <em>Primary/Primary</em> or <em>Primary/Replica</em> replication.</p>\n</blockquote>\n</li>\n<li><p><strong>Fast</strong></p>\n<blockquote>\n<p>A single Celery process can process millions of tasks a minute,\nwith sub-millisecond round-trip latency (using RabbitMQ,\npy-librabbitmq, and optimized settings).</p>\n</blockquote>\n</li>\n<li><p><strong>Flexible</strong></p>\n<blockquote>\n<p>Almost every part of <em>Celery</em> can be extended or used on its own,\nCustom pool implementations, serializers, compression schemes, logging,\nschedulers, consumers, producers, broker transports, and much more.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"it-supports\">\n<h2>It supports\u2026</h2>\n<blockquote>\n<ul>\n<li><p><strong>Message Transports</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"http://rabbitmq.com\" rel=\"nofollow\">RabbitMQ</a>, <a href=\"http://redis.io\" rel=\"nofollow\">Redis</a>, Amazon SQS</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Concurrency</strong></p>\n<blockquote>\n<ul>\n<li>Prefork, <a href=\"http://eventlet.net/\" rel=\"nofollow\">Eventlet</a>, <a href=\"http://gevent.org/\" rel=\"nofollow\">gevent</a>, single threaded (<tt>solo</tt>)</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Result Stores</strong></p>\n<blockquote>\n<ul>\n<li>AMQP, Redis</li>\n<li>memcached</li>\n<li>SQLAlchemy, Django ORM</li>\n<li>Apache Cassandra, IronCache, Elasticsearch</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Serialization</strong></p>\n<blockquote>\n<ul>\n<li><em>pickle</em>, <em>json</em>, <em>yaml</em>, <em>msgpack</em>.</li>\n<li><em>zlib</em>, <em>bzip2</em> compression.</li>\n<li>Cryptographic message signing.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"framework-integration\">\n<h2>Framework Integration</h2>\n<p>Celery is easy to integrate with web frameworks, some of which even have\nintegration packages:</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"http://djangoproject.com/\" rel=\"nofollow\">Django</a></td>\n<td>not needed</td>\n</tr>\n<tr><td><a href=\"http://docs.pylonsproject.org/en/latest/docs/pyramid.html\" rel=\"nofollow\">Pyramid</a></td>\n<td><a href=\"http://pypi.python.org/pypi/pyramid_celery/\" rel=\"nofollow\">pyramid_celery</a></td>\n</tr>\n<tr><td><a href=\"http://pylonsproject.org/\" rel=\"nofollow\">Pylons</a></td>\n<td><a href=\"http://pypi.python.org/pypi/celery-pylons\" rel=\"nofollow\">celery-pylons</a></td>\n</tr>\n<tr><td><a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a></td>\n<td>not needed</td>\n</tr>\n<tr><td><a href=\"http://web2py.com/\" rel=\"nofollow\">web2py</a></td>\n<td><a href=\"http://code.google.com/p/web2py-celery/\" rel=\"nofollow\">web2py-celery</a></td>\n</tr>\n<tr><td><a href=\"http://www.tornadoweb.org/\" rel=\"nofollow\">Tornado</a></td>\n<td><a href=\"https://github.com/mher/tornado-celery/\" rel=\"nofollow\">tornado-celery</a></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The integration packages aren\u2019t strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at <tt>fork</tt>.</p>\n</div>\n<div id=\"documentation\">\n<span id=\"celery-documentation\"></span><h2>Documentation</h2>\n<p>The <a href=\"http://docs.celeryproject.org/en/latest/\" rel=\"nofollow\">latest documentation</a> is hosted at Read The Docs, containing user guides,\ntutorials, and an API reference.</p>\n</div>\n<div id=\"installation\">\n<span id=\"celery-installation\"></span><h2>Installation</h2>\n<p>You can install Celery either via the Python Package Index (PyPI)\nor from source.</p>\n<p>To install using <tt>pip</tt>:</p>\n<pre>$ pip install -U Celery\n</pre>\n<div id=\"id1\">\n<span id=\"bundles\"></span><h3>Bundles</h3>\n<p>Celery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.</p>\n<p>You can specify these in your requirements or on the <tt>pip</tt>\ncommand-line by using brackets. Multiple bundles can be specified by\nseparating them by commas.</p>\n<pre>$ pip install \"celery[librabbitmq]\"\n\n$ pip install \"celery[librabbitmq,redis,auth,msgpack]\"\n</pre>\n<p>The following bundles are available:</p>\n<div id=\"serializers\">\n<h4>Serializers</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>celery[auth]</tt>:</th><td>for using the <tt>auth</tt> security serializer.</td>\n</tr>\n<tr><th><tt>celery[msgpack]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using the msgpack serializer.</td>\n</tr>\n<tr><th><tt>celery[yaml]</tt>:</th><td>for using the yaml serializer.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"concurrency\">\n<h4>Concurrency</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>celery[eventlet]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using the <tt>eventlet</tt> pool.</td>\n</tr>\n<tr><th><tt>celery[gevent]</tt>:</th><td>for using the <tt>gevent</tt> pool.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"transports-and-backends\">\n<h4>Transports and Backends</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>celery[librabbitmq]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using the librabbitmq C library.</td>\n</tr>\n<tr><th><tt>celery[redis]</tt>:</th><td>for using Redis as a message transport or as a result backend.</td>\n</tr>\n<tr><th><tt>celery[sqs]</tt>:</th><td>for using Amazon SQS as a message transport (<em>experimental</em>).</td>\n</tr>\n</tbody>\n</table>\n<dl>\n<dt>:<tt>celery[tblib</tt>]</dt>\n<dd>for using the <tt>task_remote_tracebacks</tt> feature.</dd>\n</dl>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><tt>celery[memcache]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Memcached as a result backend (using <tt>pylibmc</tt>)</td>\n</tr>\n<tr><th><tt>celery[pymemcache]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Memcached as a result backend (pure-Python implementation).</td>\n</tr>\n<tr><th><tt>celery[cassandra]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Apache Cassandra as a result backend with DataStax driver.</td>\n</tr>\n<tr><th><tt>celery[couchbase]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Couchbase as a result backend.</td>\n</tr>\n<tr><th><tt>celery[elasticsearch]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Elasticsearch as a result backend.</td>\n</tr>\n<tr><th><tt>celery[riak]</tt>:</th><td>for using Riak as a result backend.</td>\n</tr>\n<tr><th><tt>celery[zookeeper]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using Zookeeper as a message transport.</td>\n</tr>\n<tr><th><tt>celery[sqlalchemy]</tt>:</th></tr>\n<tr><td>\u00a0</td><td>for using SQLAlchemy as a result backend (<em>supported</em>).</td>\n</tr>\n<tr><th><tt>celery[pyro]</tt>:</th><td>for using the Pyro4 message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th><tt>celery[slmq]</tt>:</th><td>for using the SoftLayer Message Queue transport (<em>experimental</em>).</td>\n</tr>\n<tr><th><tt>celery[consul]</tt>:</th><td>for using the Consul.io Key/Value store as a message transport or result backend (<em>experimental</em>).</td>\n</tr>\n</tbody>\n</table>\n<dl>\n<dt>:<tt>celery[django]</tt></dt>\n<dd><p>specifies the lowest version possible for Django support.</p>\n<p>You should probably not use this in your requirements, it\u2019s here\nfor informational purposes only.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"downloading-and-installing-from-source\">\n<span id=\"celery-installing-from-source\"></span><h3>Downloading and installing from source</h3>\n<p>Download the latest version of Celery from PyPI:</p>\n<p><a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\">http://pypi.python.org/pypi/celery/</a></p>\n<p>You can install it by doing the following,:</p>\n<pre>$ tar xvfz celery-0.0.0.tar.gz\n$ cd celery-0.0.0\n$ python setup.py build\n# python setup.py install\n</pre>\n<p>The last command must be executed as a privileged user if\nyou aren\u2019t currently using a virtualenv.</p>\n</div>\n<div id=\"using-the-development-version\">\n<span id=\"celery-installing-from-git\"></span><h3>Using the development version</h3>\n<div id=\"with-pip\">\n<h4>With pip</h4>\n<p>The Celery development version also requires the development\nversions of <tt>kombu</tt>, <tt>amqp</tt>, <tt>billiard</tt>, and <tt>vine</tt>.</p>\n<p>You can install the latest snapshot of these using the following\npip commands:</p>\n<pre>$ pip install https://github.com/celery/celery/zipball/master#egg=celery\n$ pip install https://github.com/celery/billiard/zipball/master#egg=billiard\n$ pip install https://github.com/celery/py-amqp/zipball/master#egg=amqp\n$ pip install https://github.com/celery/kombu/zipball/master#egg=kombu\n$ pip install https://github.com/celery/vine/zipball/master#egg=vine\n</pre>\n</div>\n<div id=\"with-git\">\n<h4>With git</h4>\n<p>Please the Contributing section.</p>\n</div>\n</div>\n</div>\n<div id=\"id2\">\n<span id=\"getting-help\"></span><h2>Getting Help</h2>\n<div id=\"id3\">\n<span id=\"mailing-list\"></span><h3>Mailing list</h3>\n<p>For discussions about the usage, development, and future of Celery,\nplease join the <a href=\"http://groups.google.com/group/celery-users/\" rel=\"nofollow\">celery-users</a> mailing list.</p>\n</div>\n<div id=\"irc\">\n<span id=\"irc-channel\"></span><h3>IRC</h3>\n<p>Come chat with us on IRC. The <strong>#celery</strong> channel is located at the <a href=\"http://freenode.net\" rel=\"nofollow\">Freenode</a>\nnetwork.</p>\n</div>\n</div>\n<div id=\"id4\">\n<span id=\"bug-tracker\"></span><h2>Bug tracker</h2>\n<p>If you have any suggestions, bug reports, or annoyances please report them\nto our issue tracker at <a href=\"https://github.com/celery/celery/issues/\" rel=\"nofollow\">https://github.com/celery/celery/issues/</a></p>\n</div>\n<div id=\"id5\">\n<span id=\"wiki\"></span><h2>Wiki</h2>\n<p><a href=\"http://wiki.github.com/celery/celery/\" rel=\"nofollow\">http://wiki.github.com/celery/celery/</a></p>\n</div>\n<div id=\"contributing\">\n<span id=\"contributing-short\"></span><h2>Contributing</h2>\n<p>Development of <cite>celery</cite> happens at GitHub: <a href=\"https://github.com/celery/celery\" rel=\"nofollow\">https://github.com/celery/celery</a></p>\n<p>You\u2019re highly encouraged to participate in the development\nof <cite>celery</cite>. If you don\u2019t like GitHub (for some reason) you\u2019re welcome\nto send regular patches.</p>\n<p>Be sure to also read the <a href=\"http://docs.celeryproject.org/en/master/contributing.html\" rel=\"nofollow\">Contributing to Celery</a> section in the\ndocumentation.</p>\n</div>\n<div id=\"id6\">\n<span id=\"license\"></span><h2>License</h2>\n<p>This software is licensed under the <cite>New BSD License</cite>. See the <tt>LICENSE</tt>\nfile in the top distribution directory for the full license text.</p>\n</div>\n\n          </div>"}, "last_serial": 2675631, "releases": {"4.0.2": [{"comment_text": "", "digests": {"md5": "9d0677ac523c31df0cd135e3580c0b38", "sha256": "4cf7f5c42c4e8b4c7251de04c4a16c88128cb15e9edbd7bd1dc7b215960345f2"}, "downloads": -1, "filename": "custom-e-celery-4.0.2.tar.gz", "has_sig": false, "md5_digest": "9d0677ac523c31df0cd135e3580c0b38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1347035, "upload_time": "2017-03-01T14:07:38", "upload_time_iso_8601": "2017-03-01T14:07:38.670057Z", "url": "https://files.pythonhosted.org/packages/31/32/6f641cf48f0dea6a17c05f576bb95457f7cac4d502ae8f829f1f4c42bc87/custom-e-celery-4.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d0677ac523c31df0cd135e3580c0b38", "sha256": "4cf7f5c42c4e8b4c7251de04c4a16c88128cb15e9edbd7bd1dc7b215960345f2"}, "downloads": -1, "filename": "custom-e-celery-4.0.2.tar.gz", "has_sig": false, "md5_digest": "9d0677ac523c31df0cd135e3580c0b38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1347035, "upload_time": "2017-03-01T14:07:38", "upload_time_iso_8601": "2017-03-01T14:07:38.670057Z", "url": "https://files.pythonhosted.org/packages/31/32/6f641cf48f0dea6a17c05f576bb95457f7cac4d502ae8f829f1f4c42bc87/custom-e-celery-4.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:18 2020"}