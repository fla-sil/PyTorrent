{"info": {"author": "saaj", "author_email": "mail@saaj.me", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://bitbucket-badges.atlassian.io/badge/saaj/fangorn.svg?ref=default\n  :target: https://bitbucket.org/saaj/fangorn/addon/pipelines/home\n.. image:: https://codecov.io/bitbucket/saaj/fangorn/branch/default/graph/badge.svg\n  :target: https://codecov.io/bitbucket/saaj/fangorn/branch/default\n.. image:: https://badge.fury.io/py/Fangorn.png\n  :target: https://pypi.python.org/pypi/Fangorn\n\n*******\nFangorn\n*******\n\nNested Sets aka Modified Pre-order Tree Traversal (MPTT) *SQL* tree implemented in Python\nfor *MySQL* and *SQLite*. Uses both traversal markup (left, right) and adjacency list\nparentId for more ad-hoc query flexibility.\n\nProvides tree structure validation and \"memorisation\" via SQLite *:memory:* for quick reads.\n\nExample\n=======\n\nWe want to achieve the following tree. Node is represented by ``name id \u2192 parentId (l, r)``.\nTo output a tree this way ``fangorn.test.visualize`` function can be used.\n\n.. sourcecode:: text\n\n  R 1 \u2192 None (1, 18)\n  \u2514\u2500A1 2 \u2192 1 (2, 5)\n    \u2514\u2500B1 3 \u2192 2 (3, 4)\n  \u2514\u2500A2 4 \u2192 1 (6, 13)\n    \u2514\u2500B2 5 \u2192 4 (7, 8)\n    \u2514\u2500B3 6 \u2192 4 (9, 12)\n      \u2514\u2500C1 7 \u2192 6 (10, 11)\n  \u2514\u2500A3 8 \u2192 1 (14, 17)\n    \u2514\u2500B4 9 \u2192 8 (15, 16)\n\nFirst we need a table to represent the tree. And we want a tree node to have a name.\n\n.. sourcecode:: python\n\n  import MySQLdb as mysql\n  conn = mysql.connect(user = 'guest', db = 'test')\n  conn.query('''\n    CREATE TABLE `node` (\n      `node_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n      `parent_id` int(10) unsigned DEFAULT NULL,\n      `l` int(10) unsigned NOT NULL,\n      `r` int(10) unsigned NOT NULL,\n      `name` varchar(8) NOT NULL,\n      PRIMARY KEY (`node_id`),\n      KEY `l` (`l`),\n      KEY `r` (`r`),\n      KEY `parent_id` (`parent_id`),\n      CONSTRAINT `node_has_node` FOREIGN KEY (`parent_id`)\n        REFERENCES `node` (`node_id`)\n        ON DELETE CASCADE\n        ON UPDATE CASCADE\n    ) ENGINE=InnoDB;\n  ''')\n\nNow we can create tree instance. Note that DAO that the tree relies on is expected to support\n*named* DB-API paramstyle (i.e. `WHERE node_id = :nodeId`). Also transaction control methods\nare recommended to implement nested transaction support. However test suite requires nested\ntransactions to run. For `MySQLdb` and `sqlite3` there're compatibility wrappers under\n`fangorn.compat`.\n\n.. sourcecode:: python\n\n  import fangorn\n  from fangorn.compat.mysqldb import Mysqldb as MysqldbWrapper\n  tree = fangorn.NestedSetsTree(MysqldbWrapper(conn), 'node', ('name',))\n\n  rId  = tree.add(dict(name = 'R'))\n  a1Id = tree.add(dict(name = 'A1'), parentId = rId)\n  tree.add(dict(name = 'B1'), parentId = a1Id)\n  a2Id = tree.add(dict(name = 'A2'), parentId = rId)\n  b2Id = tree.add(dict(name = 'B2'), parentId = a2Id)\n  b3Id = tree.add(dict(name = 'B3'), prevId = b2Id)\n  tree.add(dict(name = 'C1'), parentId = b3Id)\n  a3Id = tree.add(dict(name = 'A3'), parentId = rId)\n  tree.add(dict(name = 'B4'), parentId = a3Id)\n\n  tree.move(a1Id, rId)\n  tree.move(a3Id, prevId = a2Id)\n\nNow we can play with the tree.\n\n.. sourcecode:: python\n\n  print(tree.isDescendantOf(a2Id, 4)) # False\n  print(tree.isDescendantOf(a2Id, 6)) # True\n  print(tree.isDescendantOf(a2Id, 7)) # True\n  print(tree.isDescendantOf(a2Id, 9)) # False\n\n  print([n['name'] for n in tree.getChildren(a2Id)])    # ['B2', 'B3']\n  print([n['name'] for n in tree.getDescendants(a2Id)]) # ['B2', 'B3', 'C1']\n  print([n['name'] for n in tree.getPath(7)])           # ['R', 'A2', 'B3', 'C1']\n\n  print(tree.getNode(8))   # {'left': 14L, 'right': 17L, 'nodeId': 8L, 'name': 'A3', 'parentId': 1L}\n  print(tree.getParent(8)) # {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'R', 'parentId': None}\n  print(tree.getRoot())    # {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'R', 'parentId': None}\n\n  tree.edit(1, dict(name = 'RR'))\n  print(tree.getRoot()) # {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'RR', 'parentId': None}\n\n  print([n['name'] for n in tree.getDescendants(a2Id)] # ['B2', 'B3', 'C1'])\n  tree.remove(b3Id)\n  print([n['name'] for n in tree.getDescendants(a2Id)] # ['B2'])\n\n\nFor more usage examples look at project's\n`test suite <https://bitbucket.org/saaj/fangorn/src/default/fangorn/test/>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/saaj/fangorn", "keywords": "python tree nested-sets mysql sqlite", "license": "LGPL-2.1+", "maintainer": "", "maintainer_email": "", "name": "Fangorn", "package_url": "https://pypi.org/project/Fangorn/", "platform": "Any", "project_url": "https://pypi.org/project/Fangorn/", "project_urls": {"Homepage": "https://bitbucket.org/saaj/fangorn"}, "release_url": "https://pypi.org/project/Fangorn/0.3.2/", "requires_dist": null, "requires_python": "", "summary": "Nested Sets SQL Tree for Python", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://bitbucket.org/saaj/fangorn/addon/pipelines/home\" rel=\"nofollow\"><img alt=\"https://bitbucket-badges.atlassian.io/badge/saaj/fangorn.svg?ref=default\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f89454815613d396e067934b8199051d51197da0/68747470733a2f2f6269746275636b65742d6261646765732e61746c61737369616e2e696f2f62616467652f7361616a2f66616e676f726e2e7376673f7265663d64656661756c74\"></a>\n<a href=\"https://codecov.io/bitbucket/saaj/fangorn/branch/default\" rel=\"nofollow\"><img alt=\"https://codecov.io/bitbucket/saaj/fangorn/branch/default/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0da77bac0b69d3d710efea4d9f43b72aabc236d/68747470733a2f2f636f6465636f762e696f2f6269746275636b65742f7361616a2f66616e676f726e2f6272616e63682f64656661756c742f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/Fangorn\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/Fangorn.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/008ce409a254e846f1c74ed843a9df188d9d6915/68747470733a2f2f62616467652e667572792e696f2f70792f46616e676f726e2e706e67\"></a>\n<div id=\"fangorn\">\n<h2>Fangorn</h2>\n<p>Nested Sets aka Modified Pre-order Tree Traversal (MPTT) <em>SQL</em> tree implemented in Python\nfor <em>MySQL</em> and <em>SQLite</em>. Uses both traversal markup (left, right) and adjacency list\nparentId for more ad-hoc query flexibility.</p>\n<p>Provides tree structure validation and \u201cmemorisation\u201d via SQLite <em>:memory:</em> for quick reads.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>We want to achieve the following tree. Node is represented by <tt>name id \u2192 parentId (l, r)</tt>.\nTo output a tree this way <tt>fangorn.test.visualize</tt> function can be used.</p>\n<pre>R 1 \u2192 None (1, 18)\n\u2514\u2500A1 2 \u2192 1 (2, 5)\n  \u2514\u2500B1 3 \u2192 2 (3, 4)\n\u2514\u2500A2 4 \u2192 1 (6, 13)\n  \u2514\u2500B2 5 \u2192 4 (7, 8)\n  \u2514\u2500B3 6 \u2192 4 (9, 12)\n    \u2514\u2500C1 7 \u2192 6 (10, 11)\n\u2514\u2500A3 8 \u2192 1 (14, 17)\n  \u2514\u2500B4 9 \u2192 8 (15, 16)\n</pre>\n<p>First we need a table to represent the tree. And we want a tree node to have a name.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">MySQLdb</span> <span class=\"k\">as</span> <span class=\"nn\">mysql</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">mysql</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s1\">'guest'</span><span class=\"p\">,</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'''\n  CREATE TABLE `node` (\n    `node_id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `parent_id` int(10) unsigned DEFAULT NULL,\n    `l` int(10) unsigned NOT NULL,\n    `r` int(10) unsigned NOT NULL,\n    `name` varchar(8) NOT NULL,\n    PRIMARY KEY (`node_id`),\n    KEY `l` (`l`),\n    KEY `r` (`r`),\n    KEY `parent_id` (`parent_id`),\n    CONSTRAINT `node_has_node` FOREIGN KEY (`parent_id`)\n      REFERENCES `node` (`node_id`)\n      ON DELETE CASCADE\n      ON UPDATE CASCADE\n  ) ENGINE=InnoDB;\n'''</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can create tree instance. Note that DAO that the tree relies on is expected to support\n<em>named</em> DB-API paramstyle (i.e. <cite>WHERE node_id = :nodeId</cite>). Also transaction control methods\nare recommended to implement nested transaction support. However test suite requires nested\ntransactions to run. For <cite>MySQLdb</cite> and <cite>sqlite3</cite> there\u2019re compatibility wrappers under\n<cite>fangorn.compat</cite>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">fangorn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fangorn.compat.mysqldb</span> <span class=\"kn\">import</span> <span class=\"n\">Mysqldb</span> <span class=\"k\">as</span> <span class=\"n\">MysqldbWrapper</span>\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">fangorn</span><span class=\"o\">.</span><span class=\"n\">NestedSetsTree</span><span class=\"p\">(</span><span class=\"n\">MysqldbWrapper</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">),</span> <span class=\"s1\">'node'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,))</span>\n\n<span class=\"n\">rId</span>  <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'R'</span><span class=\"p\">))</span>\n<span class=\"n\">a1Id</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'A1'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">rId</span><span class=\"p\">)</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'B1'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">a1Id</span><span class=\"p\">)</span>\n<span class=\"n\">a2Id</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'A2'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">rId</span><span class=\"p\">)</span>\n<span class=\"n\">b2Id</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'B2'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">a2Id</span><span class=\"p\">)</span>\n<span class=\"n\">b3Id</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'B3'</span><span class=\"p\">),</span> <span class=\"n\">prevId</span> <span class=\"o\">=</span> <span class=\"n\">b2Id</span><span class=\"p\">)</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'C1'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">b3Id</span><span class=\"p\">)</span>\n<span class=\"n\">a3Id</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'A3'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">rId</span><span class=\"p\">)</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'B4'</span><span class=\"p\">),</span> <span class=\"n\">parentId</span> <span class=\"o\">=</span> <span class=\"n\">a3Id</span><span class=\"p\">)</span>\n\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a1Id</span><span class=\"p\">,</span> <span class=\"n\">rId</span><span class=\"p\">)</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a3Id</span><span class=\"p\">,</span> <span class=\"n\">prevId</span> <span class=\"o\">=</span> <span class=\"n\">a2Id</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can play with the tree.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">isDescendantOf</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">isDescendantOf</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">isDescendantOf</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">isDescendantOf</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))</span> <span class=\"c1\"># False</span>\n\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getChildren</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">)])</span>    <span class=\"c1\"># ['B2', 'B3']</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getDescendants</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">)])</span> <span class=\"c1\"># ['B2', 'B3', 'C1']</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getPath</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)])</span>           <span class=\"c1\"># ['R', 'A2', 'B3', 'C1']</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getNode</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>   <span class=\"c1\"># {'left': 14L, 'right': 17L, 'nodeId': 8L, 'name': 'A3', 'parentId': 1L}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getParent</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span> <span class=\"c1\"># {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'R', 'parentId': None}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getRoot</span><span class=\"p\">())</span>    <span class=\"c1\"># {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'R', 'parentId': None}</span>\n\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'RR'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getRoot</span><span class=\"p\">())</span> <span class=\"c1\"># {'left': 1L, 'right': 18L, 'nodeId': 1L, 'name': 'RR', 'parentId': None}</span>\n\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getDescendants</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">)]</span> <span class=\"c1\"># ['B2', 'B3', 'C1'])</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">b3Id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">getDescendants</span><span class=\"p\">(</span><span class=\"n\">a2Id</span><span class=\"p\">)]</span> <span class=\"c1\"># ['B2'])</span>\n</pre>\n<p>For more usage examples look at project\u2019s\n<a href=\"https://bitbucket.org/saaj/fangorn/src/default/fangorn/test/\" rel=\"nofollow\">test suite</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2653430, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "f8ba2a2fa16761151833397c3d3dc832", "sha256": "e86f3c787f92ef7940daf039b6576c010aaf36e4dfc3a4a28e2f9a3f18e00d0a"}, "downloads": -1, "filename": "Fangorn-0.2.1.zip", "has_sig": false, "md5_digest": "f8ba2a2fa16761151833397c3d3dc832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128031, "upload_time": "2013-06-04T16:54:53", "upload_time_iso_8601": "2013-06-04T16:54:53.865053Z", "url": "https://files.pythonhosted.org/packages/cc/d3/0b9d991aff13eeef0d72acb7e29e220536f69ea666789788a854434bca2a/Fangorn-0.2.1.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2f3acc48917ece54ef86ccc6ac8f50c9", "sha256": "56aaddfe9ad7e8f59b854ea6f9b1201b91b9ffe5ab5a02011c543b41713be30f"}, "downloads": -1, "filename": "Fangorn-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2f3acc48917ece54ef86ccc6ac8f50c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126387, "upload_time": "2015-07-04T19:21:03", "upload_time_iso_8601": "2015-07-04T19:21:03.378902Z", "url": "https://files.pythonhosted.org/packages/f5/8d/2f9cd018b4f25a2dade8140330b0e64e3af41367d8be9db8413ceab27efb/Fangorn-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "649920e6b30a5c9e17fdfa8b0c52c7bb", "sha256": "eb327d9db357e36a3d495cc0d97a81fa3016212f2678dee364ff1f263cf078b7"}, "downloads": -1, "filename": "Fangorn-0.3.1.tar.gz", "has_sig": false, "md5_digest": "649920e6b30a5c9e17fdfa8b0c52c7bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50537, "upload_time": "2015-07-07T07:35:56", "upload_time_iso_8601": "2015-07-07T07:35:56.809370Z", "url": "https://files.pythonhosted.org/packages/e6/0a/fcf46a8ca08833aeb0235886b0346beaadaa564e97a873c7f17742241734/Fangorn-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "7857546112696d64ab35dd2095c1bed4", "sha256": "1fe6f17b16ed36a42885ce39f0a9aa2fe2ff14f3cb91960af6843b842e536e9e"}, "downloads": -1, "filename": "Fangorn-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7857546112696d64ab35dd2095c1bed4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52606, "upload_time": "2017-02-19T20:58:40", "upload_time_iso_8601": "2017-02-19T20:58:40.929193Z", "url": "https://files.pythonhosted.org/packages/c2/cd/94b08418e03542cc96d706dfdb2b5307f54a200ca56c3cf975f4555cef04/Fangorn-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7857546112696d64ab35dd2095c1bed4", "sha256": "1fe6f17b16ed36a42885ce39f0a9aa2fe2ff14f3cb91960af6843b842e536e9e"}, "downloads": -1, "filename": "Fangorn-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7857546112696d64ab35dd2095c1bed4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52606, "upload_time": "2017-02-19T20:58:40", "upload_time_iso_8601": "2017-02-19T20:58:40.929193Z", "url": "https://files.pythonhosted.org/packages/c2/cd/94b08418e03542cc96d706dfdb2b5307f54a200ca56c3cf975f4555cef04/Fangorn-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:46 2020"}