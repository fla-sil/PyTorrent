{"info": {"author": "Eric Pruitt, Isis Lovecruft", "author_email": "isis@patternsinthevoid.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving", "Topic :: System :: Archiving :: Backup", "Topic :: System :: Archiving :: Compression"], "description": "===============================\n#pyrsync\n===============================\npyrsync is a Python module which implements the [rsync algorithm] [1], \nwritten in pure Python. It *is not* a wrapper for rsync, but a set of \nfunctions which apply full rsync functionality through Python.\n\nThe original rsync specification calls for the use of an MD5 hash, which\nthe developers of this module considers to be outdated, and thus all \noccurences of MD5 have been replaced with SHA256. Personally, I would\nopt for using SHA512, but this would double the storage size for hash\ntable databases. SHA256 is sufficient to meet standard security \nrequirements for verification processes as of this release, although,\neventually, added functionality for the user/developer to choose between\nvarious hashes should be considered for further releases.\n\nThe majority of the code for this module is taken from [Eric Pruitt's\npost at ActiveState] [1]. It was orginally licensed under an [MIT license]\n[2], and this license has been kept wthout modifications.\n\n## Installation\n--------------------------------\nIf you have [setuptools] [3] installed, simply do:\n\n    $ sudo python setup.py install\n\nIf you do not have setuptools, the setup.py script will detect this and \ndefault to using the python builtin distutils. To install using distutils,\nthe installation process is the same as documented above for setuptools.\n\n## Use\n--------------------------------\nAn example use case for this module:\n\n    # On the system containing the file that needs to be patched\n    >>> import pyrsync\n    >>> unpatched = open(\"unpatched.file\", \"rb\")\n    >>> hashes = pyrsync.blockchecksums(unpatched)\n\n    # On the remote system after having received hashes\n    >>> import pyrsync\n    >>> patchedfile = open(\"patched.file\", \"rb\")\n    >>> delta = pyrsync.rsyncdelta(patchedfile, hashes)\n\n    # System with the unpatched file after receiving delta\n    >>> unpatched.seek(0)\n    >>> save_to = open(\"locally-patched.file\", \"wb\")\n    >>> pyrsync.patchstream(unpatched, save_to, delta)\n\n[1]: http://samba.anu.edu.au/rsync/ \"Andrew Tridgell and Paul Mackerras. The rsync algorithm. Technical Report TR-CS-96-05, Canberra 0200 ACT, Australia, 1996.\"\n[2]: https://code.activestate.com/recipes/577518-rsync-algorithm/ \"Rsync Algorithm (Python Recipe)\"\n[3]: http://www.opensource.org/licenses/mit-license.php \"OSI MIT License\"", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isislovecruft/pyrsync", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pyrsync", "package_url": "https://pypi.org/project/pyrsync/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyrsync/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/isislovecruft/pyrsync"}, "release_url": "https://pypi.org/project/pyrsync/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A Python module which implements rsync with SHA256 hash.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pyrsync is a Python module which implements the [rsync algorithm] [1],\nwritten in pure Python. It <em>is not</em> a wrapper for rsync, but a set of\nfunctions which apply full rsync functionality through Python.</p>\n<p>The original rsync specification calls for the use of an MD5 hash, which\nthe developers of this module considers to be outdated, and thus all\noccurences of MD5 have been replaced with SHA256. Personally, I would\nopt for using SHA512, but this would double the storage size for hash\ntable databases. SHA256 is sufficient to meet standard security\nrequirements for verification processes as of this release, although,\neventually, added functionality for the user/developer to choose between\nvarious hashes should be considered for further releases.</p>\n<p>The majority of the code for this module is taken from [Eric Pruitt\u2019s\npost at ActiveState] [1]. It was orginally licensed under an [MIT license]\n[2], and this license has been kept wthout modifications.</p>\n<div id=\"installation\">\n<h2>## Installation</h2>\n<p>If you have [setuptools] [3] installed, simply do:</p>\n<blockquote>\n$ sudo python setup.py install</blockquote>\n<p>If you do not have setuptools, the setup.py script will detect this and\ndefault to using the python builtin distutils. To install using distutils,\nthe installation process is the same as documented above for setuptools.</p>\n</div>\n<div id=\"use\">\n<h2>## Use</h2>\n<p>An example use case for this module:</p>\n<blockquote>\n<p># On the system containing the file that needs to be patched\n&gt;&gt;&gt; import pyrsync\n&gt;&gt;&gt; unpatched = open(\u201cunpatched.file\u201d, \u201crb\u201d)\n&gt;&gt;&gt; hashes = pyrsync.blockchecksums(unpatched)</p>\n<p># On the remote system after having received hashes\n&gt;&gt;&gt; import pyrsync\n&gt;&gt;&gt; patchedfile = open(\u201cpatched.file\u201d, \u201crb\u201d)\n&gt;&gt;&gt; delta = pyrsync.rsyncdelta(patchedfile, hashes)</p>\n<p># System with the unpatched file after receiving delta\n&gt;&gt;&gt; unpatched.seek(0)\n&gt;&gt;&gt; save_to = open(\u201clocally-patched.file\u201d, \u201cwb\u201d)\n&gt;&gt;&gt; pyrsync.patchstream(unpatched, save_to, delta)</p>\n</blockquote>\n<p>[1]: <a href=\"http://samba.anu.edu.au/rsync/\" rel=\"nofollow\">http://samba.anu.edu.au/rsync/</a> \u201cAndrew Tridgell and Paul Mackerras. The rsync algorithm. Technical Report TR-CS-96-05, Canberra 0200 ACT, Australia, 1996.\u201d\n[2]: <a href=\"https://code.activestate.com/recipes/577518-rsync-algorithm/\" rel=\"nofollow\">https://code.activestate.com/recipes/577518-rsync-algorithm/</a> \u201cRsync Algorithm (Python Recipe)\u201d\n[3]: <a href=\"http://www.opensource.org/licenses/mit-license.php\" rel=\"nofollow\">http://www.opensource.org/licenses/mit-license.php</a> \u201cOSI MIT License\u201d</p>\n</div>\n\n          </div>"}, "last_serial": 754702, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f5eb79fa0f8d436c5d5c7324e06d88fa", "sha256": "cdba9f08885829696337010b8288f4cae8c6a33201e998a6c56776c3ed3af35b"}, "downloads": -1, "filename": "pyrsync-0.1.0.linux-x86_64-py2.6.exe", "has_sig": true, "md5_digest": "f5eb79fa0f8d436c5d5c7324e06d88fa", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 72758, "upload_time": "2012-01-27T07:19:19", "upload_time_iso_8601": "2012-01-27T07:19:19.284146Z", "url": "https://files.pythonhosted.org/packages/f0/87/f58099cbacc3c5ae29e843888f37236f03e5bff13b5d80855e3cd92e9038/pyrsync-0.1.0.linux-x86_64-py2.6.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "243fffd0d1db536b57d21bb6dcbefc81", "sha256": "f1f4f7e61a3e13db4f13eff0ce54e1783a1b896b7b21b0e37e2ff53e468a2f8f"}, "downloads": -1, "filename": "pyrsync-0.1.0.tar.gz", "has_sig": true, "md5_digest": "243fffd0d1db536b57d21bb6dcbefc81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4818, "upload_time": "2012-01-27T07:19:29", "upload_time_iso_8601": "2012-01-27T07:19:29.726266Z", "url": "https://files.pythonhosted.org/packages/f7/71/01ffcce27e02b66d1fb5765cfec1251e0a1abb627a5d7d062e3ad180d0b2/pyrsync-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5eb79fa0f8d436c5d5c7324e06d88fa", "sha256": "cdba9f08885829696337010b8288f4cae8c6a33201e998a6c56776c3ed3af35b"}, "downloads": -1, "filename": "pyrsync-0.1.0.linux-x86_64-py2.6.exe", "has_sig": true, "md5_digest": "f5eb79fa0f8d436c5d5c7324e06d88fa", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 72758, "upload_time": "2012-01-27T07:19:19", "upload_time_iso_8601": "2012-01-27T07:19:19.284146Z", "url": "https://files.pythonhosted.org/packages/f0/87/f58099cbacc3c5ae29e843888f37236f03e5bff13b5d80855e3cd92e9038/pyrsync-0.1.0.linux-x86_64-py2.6.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "243fffd0d1db536b57d21bb6dcbefc81", "sha256": "f1f4f7e61a3e13db4f13eff0ce54e1783a1b896b7b21b0e37e2ff53e468a2f8f"}, "downloads": -1, "filename": "pyrsync-0.1.0.tar.gz", "has_sig": true, "md5_digest": "243fffd0d1db536b57d21bb6dcbefc81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4818, "upload_time": "2012-01-27T07:19:29", "upload_time_iso_8601": "2012-01-27T07:19:29.726266Z", "url": "https://files.pythonhosted.org/packages/f7/71/01ffcce27e02b66d1fb5765cfec1251e0a1abb627a5d7d062e3ad180d0b2/pyrsync-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:31 2020"}