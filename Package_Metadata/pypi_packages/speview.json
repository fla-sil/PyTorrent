{"info": {"author": "Roman Kiselev", "author_email": "roman.kiselew@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Topic :: Multimedia :: Graphics :: Viewers", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Visualization"], "description": "### Introduction\n\nThis program is able to read and display binary SPE files,\ngenerated by `WinSpec` software (Princeton Instruments).\nIt works in a very similar to a photo-viewing application\nfashion, i.e. the spectrum is displayed after the\nfile is clicked in a filemanager. Arrows keys are used to\nshow next/previous file in the folder. Press the space bar\nto hold the current line.\n\nThe program is able to subtract a dark file and perform\na wavenumber calibration.\n\n### Details\n\n#### Data storage model\nThe basic idea is that all your SPE files, which are relevant\nto each other (e.g. data, calibration, dark), should be\nplaced into a single folder. `speview` reads the relevant\nfiles that are necessary to display the data, as well as\ncreates some new files in the same folder. Ideally, all the\nspectra should be taken with the same settings (accumulations,\ngain, exposure time, slit width, readout rate and so on).\n\nSo remember, `speview` can work _only_ with those files, which\nare located in the same directory.\n\n#### How it works, or short manual\nTo display an SPE file correctly, `speview` requires a simple\nconfiguration file, called \"`.speview.conf`\". The file\nis created if it is not present. If this is the case,\nspeview would ask user the following questions:\n* Do you want to perform wavenumber calibration?\n  - If yes, then select an SPE file with the spectrum of a\n    standard substance, then select the corresponding dark file.\n* Do you want to subtract dark from your actual data\n  to be displayed?\n  - If yes, then select the corresponding dark file.\n\n`speview` accepts only a single argument, which is a filename\nof the SPE file to be displayed. The directory of this file\nbecomes the working directory. The spectrum is obtained from\nthe binary SPE file using module \"`winspec`\". If the wavenumber\ncalibration is required, it is performed with a module called\n\"`xcalraman`\". The calibration report and calibration\ncoefficients are stored in files \"`calibration_report-<substance>.pdf`\"\nand \"`xcal_coeffs.csv`\", respectively.\n\nAfter the data are processed, speview calls matplotlib to\ncreate a plot and displays it with the default backend, e.g.\n`qt4agg`. A window with a plot will pop up.\n\n### Installation\nYou should be able to install the package with the following two commands:\n```\npip install pyzenity --allow-unverified pyzenity\npip install speview\n```\nPyZenity is not stored on _PyPi_ and therefore is considered by `pip` as\npotentially dangerous package. For this reason you have to install it manually\nwith a separate command.\n\n#### Troubleshooting\nPlease note, that you may encounter two troubles:\n 1. The matplotlib uses a non-interactive backend (no window appears)\n 2. Pylab has some problems with shared libraries of PySide:\n\n>  ImportError: libpyside-python2.7.so.1.2: cannot open\n>  shared object file: No such file or directory\n\n##### Selecting default backend for matplotlib\nYou can select your default backend, e.g. _qt4agg_, in `matplotlibrc` file.\nThe location of this file can be determined from `python`:\n```\nimport matplotlib as m\nm.get_configdir()\n```\nUsually it is something like \"`.config/matplotlib/`\", and placing a file named\n\"`matplotlibrc`\" there should work just fine. More info could be found at\nhttp://matplotlib.org/users/customizing.html\n\nYou may wish to use a `qt4agg` backend, which requires `PySide`. If you install\n`PySide` with `pip`, make sure that you have tools `cmake` and `qmake`. The last\none is typically found in something like `libqt4-dev`.\n\n##### Fixing Pylab\nProblem happens because for some reason the post-installation script\n\"`pyside_postinstall.py`\" did not run. Fix it by executing:\n```\npython ~/.virtualenvs/<your_virtualenv>/bin/pyside_postinstall.py -install\n```\n\n#### Description of requirements\nI tested the package using virtual environment and generated a list of\ndependencies with the \"`pip freeze`\" command.\nBasically, you should have on your computer the following packages:\n * `pylab` for plotting (_note_: you need support for an interactive backend,\n    e.g. qt4agg, wxagg, gtkagg, tkagg, etc.). You can test whether you have a\n    suitable backend by running the following line of code in your python\n    interpeter: `import pylab as p; p.gca(); p.show()`.\n    If a window with empty axes will pop up, then everything is correct!\n * `xcal_raman` for x-axis calibration and reading of SPE files\n    (available on https://pypi.python.org/pypi/xcal_raman)\n * `pyZenity` for graphical interaction with user\n\n### Use\nYou can select this programm to be the default application to open SPE files.\nThen if you click an SPE file, the programm gets its filename as a first\nargument.\n\n#### First run\nIf you start it for the first time in some specific folder, it will ask you a\ncouple of questions and create a config file `.speview.conf` based on your\nanswers.\n\n#### User interaction\nThen a standard matplotlib window with a plotted spectrum will popup. You can\nuse all features the matplotlib offers you:\n  * Adjust figure size and line parameters\n  * Pan and scale the plot with mouse and icons on top\n  * Save figure (`s` key)\n  * Turn grid on/off (`g` key)\n  * Turn axis scale (log or linear) with `l` key for y-axis and `L` key for\n    x-axis\n\nUse the following keystrokes for additional functions, not offered by\nmatplotlib:\n  * `Right` and `left` arrows: go to next/previous SPE file\n  * `Space` bar: save current spectrum to buffer or remove it from buffer\n  * `d` key to subtract a saved spectrum from the current one (the result is\n     displayed in another scale)\n  * `D` to remove the result of subtraction (opposite of `d`)\n  * `v` or `V` to toggle the visibility of current spectrum (useful if you,\n    for example, would like to see only the result of the subtraction)\n  * `i` or `I`  to display the file info (acquisition parameters and comments)\n  * `F5` to select the default figure format\n  * **`h` or `H` to display the help message and the program version**\n\n#### Future plans\nWhat I would like to implement in the future:\n * Reading of SPE files with multiple spectra\n * Reading of CSV files generated by WinSpec\n\nFor more details, see https://github.com/ximeg/speview/issues", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ximeg/speview", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "speview", "package_url": "https://pypi.org/project/speview/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/speview/", "project_urls": {"Homepage": "https://github.com/ximeg/speview"}, "release_url": "https://pypi.org/project/speview/0.6.2/", "requires_dist": null, "requires_python": null, "summary": "Program to display binary SPE files containing Raman spectra", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ### Introduction<br><br>This program is able to read and display binary SPE files,<br>generated by `WinSpec` software (Princeton Instruments).<br>It works in a very similar to a photo-viewing application<br>fashion, i.e. the spectrum is displayed after the<br>file is clicked in a filemanager. Arrows keys are used to<br>show next/previous file in the folder. Press the space bar<br>to hold the current line.<br><br>The program is able to subtract a dark file and perform<br>a wavenumber calibration.<br><br>### Details<br><br>#### Data storage model<br>The basic idea is that all your SPE files, which are relevant<br>to each other (e.g. data, calibration, dark), should be<br>placed into a single folder. `speview` reads the relevant<br>files that are necessary to display the data, as well as<br>creates some new files in the same folder. Ideally, all the<br>spectra should be taken with the same settings (accumulations,<br>gain, exposure time, slit width, readout rate and so on).<br><br>So remember, `speview` can work _only_ with those files, which<br>are located in the same directory.<br><br>#### How it works, or short manual<br>To display an SPE file correctly, `speview` requires a simple<br>configuration file, called \"`.speview.conf`\". The file<br>is created if it is not present. If this is the case,<br>speview would ask user the following questions:<br>* Do you want to perform wavenumber calibration?<br>  - If yes, then select an SPE file with the spectrum of a<br>    standard substance, then select the corresponding dark file.<br>* Do you want to subtract dark from your actual data<br>  to be displayed?<br>  - If yes, then select the corresponding dark file.<br><br>`speview` accepts only a single argument, which is a filename<br>of the SPE file to be displayed. The directory of this file<br>becomes the working directory. The spectrum is obtained from<br>the binary SPE file using module \"`winspec`\". If the wavenumber<br>calibration is required, it is performed with a module called<br>\"`xcalraman`\". The calibration report and calibration<br>coefficients are stored in files \"`calibration_report-&lt;substance&gt;.pdf`\"<br>and \"`xcal_coeffs.csv`\", respectively.<br><br>After the data are processed, speview calls matplotlib to<br>create a plot and displays it with the default backend, e.g.<br>`qt4agg`. A window with a plot will pop up.<br><br>### Installation<br>You should be able to install the package with the following two commands:<br>```<br>pip install pyzenity --allow-unverified pyzenity<br>pip install speview<br>```<br>PyZenity is not stored on _PyPi_ and therefore is considered by `pip` as<br>potentially dangerous package. For this reason you have to install it manually<br>with a separate command.<br><br>#### Troubleshooting<br>Please note, that you may encounter two troubles:<br> 1. The matplotlib uses a non-interactive backend (no window appears)<br> 2. Pylab has some problems with shared libraries of PySide:<br><br>&gt;  ImportError: libpyside-python2.7.so.1.2: cannot open<br>&gt;  shared object file: No such file or directory<br><br>##### Selecting default backend for matplotlib<br>You can select your default backend, e.g. _qt4agg_, in `matplotlibrc` file.<br>The location of this file can be determined from `python`:<br>```<br>import matplotlib as m<br>m.get_configdir()<br>```<br>Usually it is something like \"`.config/matplotlib/`\", and placing a file named<br>\"`matplotlibrc`\" there should work just fine. More info could be found at<br>http://matplotlib.org/users/customizing.html<br><br>You may wish to use a `qt4agg` backend, which requires `PySide`. If you install<br>`PySide` with `pip`, make sure that you have tools `cmake` and `qmake`. The last<br>one is typically found in something like `libqt4-dev`.<br><br>##### Fixing Pylab<br>Problem happens because for some reason the post-installation script<br>\"`pyside_postinstall.py`\" did not run. Fix it by executing:<br>```<br>python ~/.virtualenvs/&lt;your_virtualenv&gt;/bin/pyside_postinstall.py -install<br>```<br><br>#### Description of requirements<br>I tested the package using virtual environment and generated a list of<br>dependencies with the \"`pip freeze`\" command.<br>Basically, you should have on your computer the following packages:<br> * `pylab` for plotting (_note_: you need support for an interactive backend,<br>    e.g. qt4agg, wxagg, gtkagg, tkagg, etc.). You can test whether you have a<br>    suitable backend by running the following line of code in your python<br>    interpeter: `import pylab as p; p.gca(); p.show()`.<br>    If a window with empty axes will pop up, then everything is correct!<br> * `xcal_raman` for x-axis calibration and reading of SPE files<br>    (available on https://pypi.python.org/pypi/xcal_raman)<br> * `pyZenity` for graphical interaction with user<br><br>### Use<br>You can select this programm to be the default application to open SPE files.<br>Then if you click an SPE file, the programm gets its filename as a first<br>argument.<br><br>#### First run<br>If you start it for the first time in some specific folder, it will ask you a<br>couple of questions and create a config file `.speview.conf` based on your<br>answers.<br><br>#### User interaction<br>Then a standard matplotlib window with a plotted spectrum will popup. You can<br>use all features the matplotlib offers you:<br>  * Adjust figure size and line parameters<br>  * Pan and scale the plot with mouse and icons on top<br>  * Save figure (`s` key)<br>  * Turn grid on/off (`g` key)<br>  * Turn axis scale (log or linear) with `l` key for y-axis and `L` key for<br>    x-axis<br><br>Use the following keystrokes for additional functions, not offered by<br>matplotlib:<br>  * `Right` and `left` arrows: go to next/previous SPE file<br>  * `Space` bar: save current spectrum to buffer or remove it from buffer<br>  * `d` key to subtract a saved spectrum from the current one (the result is<br>     displayed in another scale)<br>  * `D` to remove the result of subtraction (opposite of `d`)<br>  * `v` or `V` to toggle the visibility of current spectrum (useful if you,<br>    for example, would like to see only the result of the subtraction)<br>  * `i` or `I`  to display the file info (acquisition parameters and comments)<br>  * `F5` to select the default figure format<br>  * **`h` or `H` to display the help message and the program version**<br><br>#### Future plans<br>What I would like to implement in the future:<br> * Reading of SPE files with multiple spectra<br> * Reading of CSV files generated by WinSpec<br><br>For more details, see https://github.com/ximeg/speview/issues\n          </div>"}, "last_serial": 1269984, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "252eb370221400286447eb2812f57025", "sha256": "7dd1c95913a637287811120f9e1bcb71b52155945cc9ebc3c0be1dea175d2b7d"}, "downloads": -1, "filename": "speview-0.1.2.tar.gz", "has_sig": true, "md5_digest": "252eb370221400286447eb2812f57025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29960, "upload_time": "2014-09-30T15:47:56", "upload_time_iso_8601": "2014-09-30T15:47:56.822797Z", "url": "https://files.pythonhosted.org/packages/e8/6f/5716e215687d2b54d4cacb6fe16e17071c5d5a73c536cd8cbdb53ef4337b/speview-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "452b60b73866a6aac0d6e6c640fd5ad4", "sha256": "2d0b53a4dc47180b88f8f95f993decc2615ba79d719efff9612a126002a23fc7"}, "downloads": -1, "filename": "speview-0.1.3.tar.gz", "has_sig": true, "md5_digest": "452b60b73866a6aac0d6e6c640fd5ad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29335, "upload_time": "2014-09-30T18:54:28", "upload_time_iso_8601": "2014-09-30T18:54:28.919227Z", "url": "https://files.pythonhosted.org/packages/fb/61/347b75e8eeb318ffa4c8a66dd165acdee07dd38740d24f7fa8933ea584bc/speview-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2dc7b4d2b37073b2a97a2609732f3c8f", "sha256": "b3d5d3727f1b4fad1dffa3eb2a3944d3312af8b8428f2f72a11d2a1f8705fd24"}, "downloads": -1, "filename": "speview-0.1.4.tar.gz", "has_sig": true, "md5_digest": "2dc7b4d2b37073b2a97a2609732f3c8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29950, "upload_time": "2014-10-01T10:07:19", "upload_time_iso_8601": "2014-10-01T10:07:19.652058Z", "url": "https://files.pythonhosted.org/packages/d9/75/c789a7e7c5c0e908fd088aa9d0c48c631e9d38d4d8914118865a71e06530/speview-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "447dccbe75a45769f52a15a13475c4ea", "sha256": "97d29971939098f82b65bbd727e6eea4447a3d4536ce84e244493e7f546594e5"}, "downloads": -1, "filename": "speview-0.2.0.tar.gz", "has_sig": true, "md5_digest": "447dccbe75a45769f52a15a13475c4ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30046, "upload_time": "2014-10-01T21:11:48", "upload_time_iso_8601": "2014-10-01T21:11:48.362488Z", "url": "https://files.pythonhosted.org/packages/73/f3/9ea43e344405d9a3b0e16889bc13b24fafde807bb2f719d6253dad17526e/speview-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d6a4538d000eb326e377197a2db7ea33", "sha256": "10cabfac0a74d788c3f304f75f3cbb171e0a37baa51bf1f1f4dcfc076eb4cc7f"}, "downloads": -1, "filename": "speview-0.2.1.tar.gz", "has_sig": true, "md5_digest": "d6a4538d000eb326e377197a2db7ea33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30850, "upload_time": "2014-10-02T10:07:37", "upload_time_iso_8601": "2014-10-02T10:07:37.759806Z", "url": "https://files.pythonhosted.org/packages/0d/d8/3de491d79ae47826087a83e66064429434c6665f37b0278f78843b49f7ce/speview-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5e3d807133756ffcb90838964a35c52e", "sha256": "fe7da6e35e8033e7d13c489819ddf6e2fc5de195dc12ccfcfd9ce9df2b89d884"}, "downloads": -1, "filename": "speview-0.3.0.tar.gz", "has_sig": true, "md5_digest": "5e3d807133756ffcb90838964a35c52e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32482, "upload_time": "2014-10-07T16:30:56", "upload_time_iso_8601": "2014-10-07T16:30:56.875706Z", "url": "https://files.pythonhosted.org/packages/ca/8b/bfa216790421318bc678b2f80d010df03b4510d848327422609f575ec8f0/speview-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "80121b8c12bd471d3ec8351316fd3683", "sha256": "15de22b5f5456868d659f49d78311e6c7721fd8be05eb269e5dc936074c0ca21"}, "downloads": -1, "filename": "speview-0.4.0.tar.gz", "has_sig": true, "md5_digest": "80121b8c12bd471d3ec8351316fd3683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33860, "upload_time": "2014-10-08T12:24:25", "upload_time_iso_8601": "2014-10-08T12:24:25.464607Z", "url": "https://files.pythonhosted.org/packages/85/e1/0e314dc607408bd6952e6576529ba2638c1dfbdaf01e994d570a280577aa/speview-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ecbe6ae2ea8cd8d70633f4b526e2b6fd", "sha256": "971a2a835758849bb2c2e713d0791c48358844091dbeb714891df4f85ec21fef"}, "downloads": -1, "filename": "speview-0.5.0.tar.gz", "has_sig": true, "md5_digest": "ecbe6ae2ea8cd8d70633f4b526e2b6fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34689, "upload_time": "2014-10-13T08:47:54", "upload_time_iso_8601": "2014-10-13T08:47:54.672303Z", "url": "https://files.pythonhosted.org/packages/8a/e8/4d4ad00eac04c48a422aec0934c97e1fbf6b2fd3903939dc29074edf865e/speview-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ec59f03e83f5f8d14cadb64964095064", "sha256": "abf8339f0b80c05fbb7fb975b2fc69e16fda2e7abfa9f9185a901fb58b072ac3"}, "downloads": -1, "filename": "speview-0.5.1.tar.gz", "has_sig": true, "md5_digest": "ec59f03e83f5f8d14cadb64964095064", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34771, "upload_time": "2014-10-13T17:27:10", "upload_time_iso_8601": "2014-10-13T17:27:10.607383Z", "url": "https://files.pythonhosted.org/packages/7b/63/4c66effdcc1e4273bf18357f89a33ad7e25649b97388a86e5b8566b8b02a/speview-0.5.1.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "15ad40baa66a0fe6d11d526ec84bc03f", "sha256": "2126afd5734df18eb68dd66dc9ce1cc2d548e1a10a1ec0d6ea19c78441aed52e"}, "downloads": -1, "filename": "speview-0.6.1.tar.gz", "has_sig": true, "md5_digest": "15ad40baa66a0fe6d11d526ec84bc03f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45271, "upload_time": "2014-10-14T13:01:38", "upload_time_iso_8601": "2014-10-14T13:01:38.677602Z", "url": "https://files.pythonhosted.org/packages/8d/1f/f0dcc93b36b704e1356239864c951b05dadecc2604059addaa4c2244168a/speview-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "0417769843382d6c727c94d26737bf7a", "sha256": "278ac63cd982f86614e52d489b5cdeec353c555f0423a0ad065ee127ea045fbf"}, "downloads": -1, "filename": "speview-0.6.2.tar.gz", "has_sig": true, "md5_digest": "0417769843382d6c727c94d26737bf7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45526, "upload_time": "2014-10-14T13:21:29", "upload_time_iso_8601": "2014-10-14T13:21:29.569168Z", "url": "https://files.pythonhosted.org/packages/ee/c6/c960be3208cdbd86fa0087d76b16bc5bd231b7be6fd29055734e624cd9b4/speview-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0417769843382d6c727c94d26737bf7a", "sha256": "278ac63cd982f86614e52d489b5cdeec353c555f0423a0ad065ee127ea045fbf"}, "downloads": -1, "filename": "speview-0.6.2.tar.gz", "has_sig": true, "md5_digest": "0417769843382d6c727c94d26737bf7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45526, "upload_time": "2014-10-14T13:21:29", "upload_time_iso_8601": "2014-10-14T13:21:29.569168Z", "url": "https://files.pythonhosted.org/packages/ee/c6/c960be3208cdbd86fa0087d76b16bc5bd231b7be6fd29055734e624cd9b4/speview-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:30 2020"}