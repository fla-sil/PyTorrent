{"info": {"author": "Tan Shuai", "author_email": "7anshuai@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pyreds\n======\n\n`reds <https://github.com/tj/reds>`_ is a light-weight Redis Search for Node.js.\n\npyreds is a Python port of reds.\n\nInstallation\n------------\n\npyreds requires a running Redis server. See `Redis's quickstart\n<http://redis.io/topics/quickstart>`_ for installation instructions.\n\nTo install pyreds, simply:\n\n.. code-block:: bash\n\n    $ pip install pyreds\n\nYou may need install NLTK Data:\n\n.. code-block:: pycon\n\n    >>> import nltk\n    >>> nltk.download('stopwords')\n\nGetting Started\n---------------\n\nThe first thing you'll want to do is create a `Search` instance, which allow you to pass a `key`, used for namespacing within Redis so that you may have several searches in the same db.\n \n.. code-block:: pycon\n\n    >>> import pyreds\n    >>> search = pyreds.create_search('pets')\n\npyreds acts against arbitrary numeric or string based ids, so you could utilize this library with essentially anything you wish, even combining data stores. The following example just uses a list for our \"database\", containing some strings, which we add to pyreds by calling `Search#index()` padding the body of text and an id of some kind, in this case the index.\n\n.. code-block:: pycon\n\n    >>> strs = []\n    >>> strs.append('Tobi wants four dollars')\n    >>> strs.append('Tobi only wants $4')\n    >>> strs.append('Loki is really fat')\n    >>> strs.append('Loki, Jane, and Tobi are ferrets')\n    >>> strs.append('Manny is a cat')\n    >>> strs.append('Luna is a cat')\n    >>> strs.append('Mustachio is a cat')\n    >>> for i, v in enumerate(strs):\n    ...     search.index(v, i)\n\nTo perform a query against pyreds simply invoke `Search#query()` with a string, which return a `Query` instance. Then invoke `Query#end()`, which return a list of ids when present, or an empty list otherwise.\n\n.. code-block:: pycon\n\n    >>> ids = search.query('Tobi dollars').end()\n    >>> print('Search results for \"Tobi dollars\"'))\n    >>> for id in ids:\n    ...     print('  - {}'.format(strs[id]))\n\nBy default pyreds performs an intersection of the search words. The previous example would yield the following output since only one string contains both \"Tobi\" and \"dollars\":\n\n.. code-block:: pycon\n\n    Search results for \"Tobi dollars\":\n        - Tobi wants four dollars\n\nWe can tweak pyreds to perform a union by passing either \"union\" or \"or\" to `Search#type()` between `Search#query()` and `Query#end()`, indicating that any of the constants computed may be present for the id to match.\n\n.. code-block:: pycon\n\n    >>> ids = search.query('tobi dollars').type('or').end()\n    >>> print('Search results for \"Tobi dollars\"'))\n    >>> for id in ids:\n    ...     print('  - {}'.format(strs[id]))\n\nThe union search would yield the following since three strings contain either \"Tobi\" or \"dollars\":\n\n.. code-block:: pycon\n\n    Search results for \"tobi dollars\":\n        - Tobi wants four dollars\n        - Tobi only wants $4\n        - Loki, Jane, and Tobi are ferrets\n\nAPI\n---\n\n.. code-block:: pycon\n\n    >>> search = pyreds.create_search(key)\n    >>> search.index(text, id)\n    >>> search.remove(id)\n    >>> query = search.query(text[, type]) # will return a `Query` instance\n    >>>\n    >>> query.between(start, stop)\n    >>> query.type(type)\n    >>> query.end()\n\nLICENSE\n-------\n\nThe MIT License", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/7anshuai/pyreds/archive/0.1.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/7anshuai/pyreds", "keywords": "redis,full text search", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyreds", "package_url": "https://pypi.org/project/pyreds/", "platform": "", "project_url": "https://pypi.org/project/pyreds/", "project_urls": {"Download": "https://github.com/7anshuai/pyreds/archive/0.1.3.tar.gz", "Homepage": "https://github.com/7anshuai/pyreds"}, "release_url": "https://pypi.org/project/pyreds/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Simple full text search module for Python, backed by Redis", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/tj/reds\" rel=\"nofollow\">reds</a> is a light-weight Redis Search for Node.js.</p>\n<p>pyreds is a Python port of reds.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>pyreds requires a running Redis server. See <a href=\"http://redis.io/topics/quickstart\" rel=\"nofollow\">Redis\u2019s quickstart</a> for installation instructions.</p>\n<p>To install pyreds, simply:</p>\n<pre>$ pip install pyreds\n</pre>\n<p>You may need install NLTK Data:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nltk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nltk</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"s1\">'stopwords'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>The first thing you\u2019ll want to do is create a <cite>Search</cite> instance, which allow you to pass a <cite>key</cite>, used for namespacing within Redis so that you may have several searches in the same db.</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pyreds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">pyreds</span><span class=\"o\">.</span><span class=\"n\">create_search</span><span class=\"p\">(</span><span class=\"s1\">'pets'</span><span class=\"p\">)</span>\n</pre>\n<p>pyreds acts against arbitrary numeric or string based ids, so you could utilize this library with essentially anything you wish, even combining data stores. The following example just uses a list for our \u201cdatabase\u201d, containing some strings, which we add to pyreds by calling <cite>Search#index()</cite> padding the body of text and an id of some kind, in this case the index.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Tobi wants four dollars'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Tobi only wants $4'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Loki is really fat'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Loki, Jane, and Tobi are ferrets'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Manny is a cat'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Luna is a cat'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Mustachio is a cat'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">strs</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<p>To perform a query against pyreds simply invoke <cite>Search#query()</cite> with a string, which return a <cite>Query</cite> instance. Then invoke <cite>Query#end()</cite>, which return a list of ids when present, or an empty list otherwise.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'Tobi dollars'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Search results for \"Tobi dollars\"'</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'  - </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">strs</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]))</span>\n</pre>\n<p>By default pyreds performs an intersection of the search words. The previous example would yield the following output since only one string contains both \u201cTobi\u201d and \u201cdollars\u201d:</p>\n<pre><span class=\"go\">Search results for \"Tobi dollars\":\n    - Tobi wants four dollars</span>\n</pre>\n<p>We can tweak pyreds to perform a union by passing either \u201cunion\u201d or \u201cor\u201d to <cite>Search#type()</cite> between <cite>Search#query()</cite> and <cite>Query#end()</cite>, indicating that any of the constants computed may be present for the id to match.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'tobi dollars'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">(</span><span class=\"s1\">'or'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Search results for \"Tobi dollars\"'</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"nb\">id</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'  - </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">strs</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]))</span>\n</pre>\n<p>The union search would yield the following since three strings contain either \u201cTobi\u201d or \u201cdollars\u201d:</p>\n<pre><span class=\"go\">Search results for \"tobi dollars\":\n    - Tobi wants four dollars\n    - Tobi only wants $4\n    - Loki, Jane, and Tobi are ferrets</span>\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">pyreds</span><span class=\"o\">.</span><span class=\"n\">create_search</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">[,</span> <span class=\"nb\">type</span><span class=\"p\">])</span> <span class=\"c1\"># will return a `Query` instance</span>\n<span class=\"go\">&gt;&gt;&gt;\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>The MIT License</p>\n</div>\n\n          </div>"}, "last_serial": 3433975, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "698e25808cda28ac48049cafcb7d0105", "sha256": "a1abe51489d7754a1a83f4297c1f67a599cceb5c31d706a807e534acc3ba9e4a"}, "downloads": -1, "filename": "pyreds-0.1.1.tar.gz", "has_sig": false, "md5_digest": "698e25808cda28ac48049cafcb7d0105", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8299, "upload_time": "2017-12-20T05:43:27", "upload_time_iso_8601": "2017-12-20T05:43:27.628558Z", "url": "https://files.pythonhosted.org/packages/a0/2c/d8e9ac0999c3335c3602b3112dd168eb85cfd39d496b7bc9a2be93857922/pyreds-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "05fb7a97c18f0c012473035cf90771c4", "sha256": "45a6993545db3a2a3f30bdc0efa6bd87c7773919dbafe235d58e85bf56cf6344"}, "downloads": -1, "filename": "pyreds-0.1.2.tar.gz", "has_sig": false, "md5_digest": "05fb7a97c18f0c012473035cf90771c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8413, "upload_time": "2017-12-21T08:06:33", "upload_time_iso_8601": "2017-12-21T08:06:33.083055Z", "url": "https://files.pythonhosted.org/packages/96/c7/30c8382d1d6f7d46f5412365448adabd927d80ba314875e152faf2624318/pyreds-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8e52c0b47b07d8388a516ceeb6b98f8c", "sha256": "c7f6c9275210f89952e73121401a34175e72e6d895d1e45307c8f82b2a002dd5"}, "downloads": -1, "filename": "pyreds-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8e52c0b47b07d8388a516ceeb6b98f8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8394, "upload_time": "2017-12-21T10:17:38", "upload_time_iso_8601": "2017-12-21T10:17:38.301321Z", "url": "https://files.pythonhosted.org/packages/7f/30/34f0c8ca9b5adb98225f23f26b8ee0820b73ef5bc57806708ead251272ff/pyreds-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e52c0b47b07d8388a516ceeb6b98f8c", "sha256": "c7f6c9275210f89952e73121401a34175e72e6d895d1e45307c8f82b2a002dd5"}, "downloads": -1, "filename": "pyreds-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8e52c0b47b07d8388a516ceeb6b98f8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8394, "upload_time": "2017-12-21T10:17:38", "upload_time_iso_8601": "2017-12-21T10:17:38.301321Z", "url": "https://files.pythonhosted.org/packages/7f/30/34f0c8ca9b5adb98225f23f26b8ee0820b73ef5bc57806708ead251272ff/pyreds-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:56 2020"}