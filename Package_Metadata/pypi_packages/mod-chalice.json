{"info": {"author": "Dushyant Rajput", "author_email": "rajpdus@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "===========\nChalice\n===========\n\n\nChalice is a microframework for writing serverless apps in python. It allows\nyou to quickly create and deploy applications that use AWS Lambda.  It provides:\n\n* A command line tool for creating, deploying, and managing your app\n* A decorator based API for integrating with Amazon API Gateway, Amazon S3,\n  Amazon SNS, Amazon SQS, and other AWS services.\n* Automatic IAM policy generation\n\n\nYou can create Rest APIs:\n\n.. code-block:: python\n\n    from chalice import Chalice\n\n    app = Chalice(app_name=\"helloworld\")\n\n    @app.route(\"/\")\n    def index():\n        return {\"hello\": \"world\"}\n\nTasks that run on a periodic basis:\n\n.. code-block:: python\n\n    from chalice import Chalice, Rate\n\n    app = Chalice(app_name=\"helloworld\")\n\n    # Automatically runs every 5 minutes\n    @app.schedule(Rate(5, unit=Rate.MINUTES))\n    def periodic_task(event):\n        return {\"hello\": \"world\"}\n\n\nYou can connect a lambda function to an S3 event:\n\n.. code-block:: python\n\n    from chalice import Chalice\n\n    app = Chalice(app_name=\"helloworld\")\n\n    # Whenever an object is uploaded to 'mybucket'\n    # this lambda function will be invoked.\n\n    @app.on_s3_event(bucket='mybucket')\n    def handler(event):\n        print(\"Object uploaded for bucket: %s, key: %s\"\n              % (event.bucket, event.key))\n\nAs well as an SQS queue:\n\n.. code-block:: python\n\n    from chalice import Chalice\n\n    app = Chalice(app_name=\"helloworld\")\n\n    # Invoke this lambda function whenever a message\n    # is sent to the ``my-queue-name`` SQS queue.\n\n    @app.on_sqs_message(queue='my-queue-name')\n    def handler(event):\n        for record in event:\n            print(\"Message body: %s\" % record.body)\n\n\nAnd several other AWS resources.\n\nOnce you've written your code, you just run ``chalice deploy``\nand Chalice takes care of deploying your app.\n\n::\n\n    $ chalice deploy\n    ...\n    https://endpoint/dev\n\n    $ curl https://endpoint/api\n    {\"hello\": \"world\"}\n\nUp and running in less than 30 seconds.\nGive this project a try and share your feedback with us here on Github.\n\nThe documentation is available\n`on readthedocs <http://chalice.readthedocs.io/en/latest/>`__.\n\n\nRelated Projects\n----------------\n* `AWS Chalice <https://github.com/aws/chalice>`__ - Repository from which this\n  project was forked.\n* `serverless <https://github.com/serverless/serverless>`__ - Build applications\n  comprised of microservices that run in response to events, auto-scale for\n  you, and only charge you when they run.\n* `Zappa <https://github.com/Miserlou/Zappa>`__ - Deploy python WSGI applications\n  on AWS Lambda and API Gateway.\n* `claudia <https://github.com/claudiajs/claudia>`__ - Deploy node.js projects\n  to AWS Lambda and API Gateway.\n* `Domovoi <https://github.com/kislyuk/domovoi>`_ - An extension to Chalice that\n  handles a variety of AWS Lambda event sources such as SNS push notifications,\n  S3 events, and Step Functions state machines.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rapdus/chalice", "keywords": "chalice", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "mod-chalice", "package_url": "https://pypi.org/project/mod-chalice/", "platform": "", "project_url": "https://pypi.org/project/mod-chalice/", "project_urls": {"Homepage": "https://github.com/rapdus/chalice"}, "release_url": "https://pypi.org/project/mod-chalice/1.0/", "requires_dist": ["attrs (>=17.4.0,<20.0.0)", "botocore (<2.0.0,>=1.12.86)", "click (<8.0,>=6.6)", "enum-compat (>=0.0.2)", "jmespath (>=0.9.3,<1.0.0)", "pip (<19.4,>=9)", "setuptools", "six (<2.0.0,>=1.10.0)", "wheel", "typing (==3.6.4); python_version < \"3.7\"", "watchdog (==0.8.3); extra == 'event-file-poller'"], "requires_python": "", "summary": "Microframework", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Chalice is a microframework for writing serverless apps in python. It allows\nyou to quickly create and deploy applications that use AWS Lambda.  It provides:</p>\n<ul>\n<li>A command line tool for creating, deploying, and managing your app</li>\n<li>A decorator based API for integrating with Amazon API Gateway, Amazon S3,\nAmazon SNS, Amazon SQS, and other AWS services.</li>\n<li>Automatic IAM policy generation</li>\n</ul>\n<p>You can create Rest APIs:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">chalice</span> <span class=\"kn\">import</span> <span class=\"n\">Chalice</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Chalice</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s2\">\"helloworld\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">}</span>\n</pre>\n<p>Tasks that run on a periodic basis:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">chalice</span> <span class=\"kn\">import</span> <span class=\"n\">Chalice</span><span class=\"p\">,</span> <span class=\"n\">Rate</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Chalice</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s2\">\"helloworld\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Automatically runs every 5 minutes</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"p\">(</span><span class=\"n\">Rate</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">Rate</span><span class=\"o\">.</span><span class=\"n\">MINUTES</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">periodic_task</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">}</span>\n</pre>\n<p>You can connect a lambda function to an S3 event:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">chalice</span> <span class=\"kn\">import</span> <span class=\"n\">Chalice</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Chalice</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s2\">\"helloworld\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Whenever an object is uploaded to 'mybucket'</span>\n<span class=\"c1\"># this lambda function will be invoked.</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on_s3_event</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"s1\">'mybucket'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Object uploaded for bucket: </span><span class=\"si\">%s</span><span class=\"s2\">, key: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span>\n          <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">bucket</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">))</span>\n</pre>\n<p>As well as an SQS queue:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">chalice</span> <span class=\"kn\">import</span> <span class=\"n\">Chalice</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Chalice</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"s2\">\"helloworld\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Invoke this lambda function whenever a message</span>\n<span class=\"c1\"># is sent to the ``my-queue-name`` SQS queue.</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on_sqs_message</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'my-queue-name'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Message body: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>And several other AWS resources.</p>\n<p>Once you\u2019ve written your code, you just run <tt>chalice deploy</tt>\nand Chalice takes care of deploying your app.</p>\n<pre>$ chalice deploy\n...\nhttps://endpoint/dev\n\n$ curl https://endpoint/api\n{\"hello\": \"world\"}\n</pre>\n<p>Up and running in less than 30 seconds.\nGive this project a try and share your feedback with us here on Github.</p>\n<p>The documentation is available\n<a href=\"http://chalice.readthedocs.io/en/latest/\" rel=\"nofollow\">on readthedocs</a>.</p>\n<div id=\"related-projects\">\n<h2>Related Projects</h2>\n<ul>\n<li><a href=\"https://github.com/aws/chalice\" rel=\"nofollow\">AWS Chalice</a> - Repository from which this\nproject was forked.</li>\n<li><a href=\"https://github.com/serverless/serverless\" rel=\"nofollow\">serverless</a> - Build applications\ncomprised of microservices that run in response to events, auto-scale for\nyou, and only charge you when they run.</li>\n<li><a href=\"https://github.com/Miserlou/Zappa\" rel=\"nofollow\">Zappa</a> - Deploy python WSGI applications\non AWS Lambda and API Gateway.</li>\n<li><a href=\"https://github.com/claudiajs/claudia\" rel=\"nofollow\">claudia</a> - Deploy node.js projects\nto AWS Lambda and API Gateway.</li>\n<li><a href=\"https://github.com/kislyuk/domovoi\" rel=\"nofollow\">Domovoi</a> - An extension to Chalice that\nhandles a variety of AWS Lambda event sources such as SNS push notifications,\nS3 events, and Step Functions state machines.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6164164, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7f7f2e9be357bf31eaf02b05d5e05ff3", "sha256": "512093dfaa670b045550f239233896b5ea6a687ba6b1097ff8e13190012e1c6a"}, "downloads": -1, "filename": "mod_chalice-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f7f2e9be357bf31eaf02b05d5e05ff3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 285621, "upload_time": "2019-11-19T19:47:46", "upload_time_iso_8601": "2019-11-19T19:47:46.550792Z", "url": "https://files.pythonhosted.org/packages/21/cc/bf07c965d75cf5a35a873e34cdde586bddc552debaa07cb9978536b9c4e7/mod_chalice-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d105745271bf5f8eda94ab3e280bc31", "sha256": "ad401adc83e39d22537884001beb566864be89f9239b86de31afdfbb578a6b48"}, "downloads": -1, "filename": "mod-chalice-1.0.tar.gz", "has_sig": false, "md5_digest": "7d105745271bf5f8eda94ab3e280bc31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268704, "upload_time": "2019-11-19T19:47:50", "upload_time_iso_8601": "2019-11-19T19:47:50.384860Z", "url": "https://files.pythonhosted.org/packages/92/52/66523ae3e08aad3c375eb9e186c240f688dbaf81e7e8c27d22b1fbec805e/mod-chalice-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f7f2e9be357bf31eaf02b05d5e05ff3", "sha256": "512093dfaa670b045550f239233896b5ea6a687ba6b1097ff8e13190012e1c6a"}, "downloads": -1, "filename": "mod_chalice-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f7f2e9be357bf31eaf02b05d5e05ff3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 285621, "upload_time": "2019-11-19T19:47:46", "upload_time_iso_8601": "2019-11-19T19:47:46.550792Z", "url": "https://files.pythonhosted.org/packages/21/cc/bf07c965d75cf5a35a873e34cdde586bddc552debaa07cb9978536b9c4e7/mod_chalice-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d105745271bf5f8eda94ab3e280bc31", "sha256": "ad401adc83e39d22537884001beb566864be89f9239b86de31afdfbb578a6b48"}, "downloads": -1, "filename": "mod-chalice-1.0.tar.gz", "has_sig": false, "md5_digest": "7d105745271bf5f8eda94ab3e280bc31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268704, "upload_time": "2019-11-19T19:47:50", "upload_time_iso_8601": "2019-11-19T19:47:50.384860Z", "url": "https://files.pythonhosted.org/packages/92/52/66523ae3e08aad3c375eb9e186c240f688dbaf81e7e8c27d22b1fbec805e/mod-chalice-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:57 2020"}