{"info": {"author": "Aric Coady", "author_email": "aric.coady@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![image](https://img.shields.io/pypi/v/futured.svg)](https://pypi.org/project/futured/)\n![image](https://img.shields.io/pypi/pyversions/futured.svg)\n[![image](https://pepy.tech/badge/futured)](https://pepy.tech/project/futured)\n![image](https://img.shields.io/pypi/status/futured.svg)\n[![image](https://img.shields.io/travis/coady/futured.svg)](https://travis-ci.org/coady/futured)\n[![image](https://img.shields.io/codecov/c/github/coady/futured.svg)](https://codecov.io/github/coady/futured)\n[![image](https://readthedocs.org/projects/futured/badge)](https://futured.readthedocs.io)\n[![image](https://requires.io/github/coady/futured/requirements.svg)](https://requires.io/github/coady/futured/requirements/)\n[![image](https://api.codeclimate.com/v1/badges/bdc33b8af847fbbecfce/maintainability)](https://codeclimate.com/github/coady/futured/maintainability)\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://pypi.org/project/black/)\n[![image](http://mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\nFutured provides a simple consistent interface for concurrent functional programming in Python.\nIt wraps any callable to return a `concurrent.futures.Future`,\nwraps any async coroutine to return an `asyncio.Future`,\nand provides concurrent iterators and context managers for futures.\n\n# Usage\n## threaded, processed\nTransform any callable into one which runs in a thread or process pool, and returns a future.\n\n```python\nfrom futured import threaded, processed\nimport requests\n\nfetch = threaded(requests.Session().get)\nfetch(url)  # return Future\n\nfs = (fetch(url + path) for path in paths)\nthreaded.results(fs)  # generate results from futures\nthreaded.results(fs, timeout=...)  # generate results as completed\n\nfetch.map(urls)  # generate results in order\nfetch.map(urls, timeout=...)  # generate results as completed\nfetch.mapzip(urls)  # generate (url, result) pairs as completed\n```\n\nThread and process pool executors may be used as context managers,\ncustomized with options, and reused with different callables.\n\n```python\nthreaded(max_workers=...)(func, ...)\nprocessed(max_workers=...)(func, ...)\n```\n\n`futured` classes have a `waiting` context manager which collects results from tasks.\nFutures can be registered at creation, or appended to the list of tasks.\n\n```python\nwith threaded.waiting(*fs) as tasks:\n    tasks.append(future)\ntasks  # list of completed results\n```\n\n## asynced\nThe same interface works for `asyncio`.\n\n```python\nfrom futured import asynced\nimport httpx\n\nfetch = asynced(httpx.Client().get)\nfetch(url)  # return coroutine\n\nasynced.results(fs)  # generate results from futures\nasynced.results(fs, timeout=...)  # generate results as completed\n\nfetch.map(urls)  # generate results in order\nfetch.map(urls, timeout=...)  # generate results as completed\nfetch.mapzip(urls)  # generate (url, result) pairs as completed\n```\n\n`asynced` provides utilities for calling coroutines from a synchronous context.\n`waiting` is similar to [trio's nursery](https://trio.readthedocs.io/en/latest/reference-core.html#nurseries-and-spawning),\nbut returns results from a synchronous `with` block.\n\n```python\nasynced.run(async_func, ...)  # call and run until complete\nasynced.run(async_gen, ...)  # call and run synchronous iterator\nwith asynced.waiting(*fs) as tasks:  # concurrent coroutines completed in a block\n```\n\n## decorators\nNaturally `futured` wrappers can be used as decorators, but arguments can also be partially bound.\n\n```python\n@threaded\ndef slow():\n   ...\n\nfetch = threaded(requests.Session().get, url)\nfetch(params=...)\n```\n\nMethods are supported, as well as a `decorated` utility for automatically subclassing.\n\n```python\nfrom futured import decorated\n\nFutureSession = decorated(requests.Session, request=threaded)\n\n # equivalent to\nclass FutureSession(requests.Session):\n    request = threaded(requests.Session.request)\n```\n\n## command\n`command` wraps `subprocess.Popen` to provide a `Future` compatible interface.\n\n```python\nfrom futured import futured, command\n\ncommand('ls').result()  # return stdout or raises stderr\ncommand('ls').pipe('wc')  # pipes into next command, or | ('wc',... )\nfor line in command('ls'):  # iterable lines\ncommand.coroutine('ls')  # return coroutine\n\nfutured(command, 'ls')  # supports `map` interface\nasynced(command.coroutine, 'ls')  # supports `map` interface with timeout\n```\n\n## forked\n`forked` allows iteration in separate child processes.\n\n```python\nfrom futured import forked\n\nfor value in forked(values, max_workers=...):\n    # in a child process\n # in parent after children have exited\n```\n\n# Installation\n\n    $ pip install futured\n\n# Tests\n100% branch coverage.\n\n    $ pytest [--cov]\n\n# Changes\n1.1\n* Stream completed futures from a pending pool\n\n1.0\n* Executed functions are context managers\n* `starmap` supported\n\n0.3\n* `forked` has optional maximum number of workers\n* `waiting` context manager\n* `command` pipes (`|`)\n* `distributed.Client` support\n\n0.2\n* `command.coroutine` creates asyncio subprocesses\n* `futured.mapzip` generates results zipped with arguments\n* `asynced.run` supports asynchronous iterators\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coady/futured", "keywords": "concurrent futures threads processes async asyncio", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "futured", "package_url": "https://pypi.org/project/futured/", "platform": "", "project_url": "https://pypi.org/project/futured/", "project_urls": {"Documentation": "https://futured.readthedocs.io", "Homepage": "https://github.com/coady/futured"}, "release_url": "https://pypi.org/project/futured/1.1/", "requires_dist": ["m2r ; extra == 'docs'", "nbsphinx ; extra == 'docs'", "jupyter ; extra == 'docs'", "nest-asyncio ; extra == 'docs'", "httpx ; extra == 'docs'"], "requires_python": ">=3.5", "summary": "Functional interface for concurrent futures, including asynchronous I/O.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/futured/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d45cf9a848a12010e5b3698be5f3039c6a7f2b60/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f667574757265642e737667\"></a>\n<img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ba0d0974ba30cc5a3806b858ef67894384e471a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f667574757265642e737667\">\n<a href=\"https://pepy.tech/project/futured\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc915556d71038cca46f703ea3f83a8a4f45c576/68747470733a2f2f706570792e746563682f62616467652f66757475726564\"></a>\n<img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4bdd6dee0d18baf88758210b97bb33f12e891dd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f667574757265642e737667\">\n<a href=\"https://travis-ci.org/coady/futured\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a425417ea82c947b771f8585a9a821abe9a96479/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6164792f667574757265642e737667\"></a>\n<a href=\"https://codecov.io/github/coady/futured\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4db4351b05aea2712d6083dccd9031c34242051e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f636f6164792f667574757265642e737667\"></a>\n<a href=\"https://futured.readthedocs.io\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/294733a6cb1f1a53518c65ca48d59171be229514/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f667574757265642f6261646765\"></a>\n<a href=\"https://requires.io/github/coady/futured/requirements/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3b8fba46e16e1b22470ed3608410a4ebeceec20/68747470733a2f2f72657175697265732e696f2f6769746875622f636f6164792f667574757265642f726571756972656d656e74732e737667\"></a>\n<a href=\"https://codeclimate.com/github/coady/futured/maintainability\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3af3e05ddf002bf3fd62c539a89dc83d17ab20e/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62646333336238616638343766626265636663652f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://pypi.org/project/black/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9993afbe0db44dfa421d6d5d094f2e90b25b392/687474703a2f2f6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a></p>\n<p>Futured provides a simple consistent interface for concurrent functional programming in Python.\nIt wraps any callable to return a <code>concurrent.futures.Future</code>,\nwraps any async coroutine to return an <code>asyncio.Future</code>,\nand provides concurrent iterators and context managers for futures.</p>\n<h1>Usage</h1>\n<h2>threaded, processed</h2>\n<p>Transform any callable into one which runs in a thread or process pool, and returns a future.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">futured</span> <span class=\"kn\">import</span> <span class=\"n\">threaded</span><span class=\"p\">,</span> <span class=\"n\">processed</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">fetch</span> <span class=\"o\">=</span> <span class=\"n\">threaded</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>\n<span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># return Future</span>\n\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n<span class=\"n\">threaded</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results from futures</span>\n<span class=\"n\">threaded</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=...</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results as completed</span>\n\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results in order</span>\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=...</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results as completed</span>\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">mapzip</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">)</span>  <span class=\"c1\"># generate (url, result) pairs as completed</span>\n</pre>\n<p>Thread and process pool executors may be used as context managers,\ncustomized with options, and reused with different callables.</p>\n<pre><span class=\"n\">threaded</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=...</span><span class=\"p\">)(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">processed</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=...</span><span class=\"p\">)(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p><code>futured</code> classes have a <code>waiting</code> context manager which collects results from tasks.\nFutures can be registered at creation, or appended to the list of tasks.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">threaded</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">fs</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n    <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n<span class=\"n\">tasks</span>  <span class=\"c1\"># list of completed results</span>\n</pre>\n<h2>asynced</h2>\n<p>The same interface works for <code>asyncio</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">futured</span> <span class=\"kn\">import</span> <span class=\"n\">asynced</span>\n<span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n\n<span class=\"n\">fetch</span> <span class=\"o\">=</span> <span class=\"n\">asynced</span><span class=\"p\">(</span><span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">)</span>\n<span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>  <span class=\"c1\"># return coroutine</span>\n\n<span class=\"n\">asynced</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results from futures</span>\n<span class=\"n\">asynced</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=...</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results as completed</span>\n\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results in order</span>\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=...</span><span class=\"p\">)</span>  <span class=\"c1\"># generate results as completed</span>\n<span class=\"n\">fetch</span><span class=\"o\">.</span><span class=\"n\">mapzip</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">)</span>  <span class=\"c1\"># generate (url, result) pairs as completed</span>\n</pre>\n<p><code>asynced</code> provides utilities for calling coroutines from a synchronous context.\n<code>waiting</code> is similar to <a href=\"https://trio.readthedocs.io/en/latest/reference-core.html#nurseries-and-spawning\" rel=\"nofollow\">trio's nursery</a>,\nbut returns results from a synchronous <code>with</code> block.</p>\n<pre><span class=\"n\">asynced</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">async_func</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># call and run until complete</span>\n<span class=\"n\">asynced</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">async_gen</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># call and run synchronous iterator</span>\n<span class=\"k\">with</span> <span class=\"n\">asynced</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">fs</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>  <span class=\"c1\"># concurrent coroutines completed in a block</span>\n</pre>\n<h2>decorators</h2>\n<p>Naturally <code>futured</code> wrappers can be used as decorators, but arguments can also be partially bound.</p>\n<pre><span class=\"nd\">@threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">slow</span><span class=\"p\">():</span>\n   <span class=\"o\">...</span>\n\n<span class=\"n\">fetch</span> <span class=\"o\">=</span> <span class=\"n\">threaded</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n</pre>\n<p>Methods are supported, as well as a <code>decorated</code> utility for automatically subclassing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">futured</span> <span class=\"kn\">import</span> <span class=\"n\">decorated</span>\n\n<span class=\"n\">FutureSession</span> <span class=\"o\">=</span> <span class=\"n\">decorated</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">threaded</span><span class=\"p\">)</span>\n\n <span class=\"c1\"># equivalent to</span>\n<span class=\"k\">class</span> <span class=\"nc\">FutureSession</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">threaded</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<h2>command</h2>\n<p><code>command</code> wraps <code>subprocess.Popen</code> to provide a <code>Future</code> compatible interface.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">futured</span> <span class=\"kn\">import</span> <span class=\"n\">futured</span><span class=\"p\">,</span> <span class=\"n\">command</span>\n\n<span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>  <span class=\"c1\"># return stdout or raises stderr</span>\n<span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'wc'</span><span class=\"p\">)</span>  <span class=\"c1\"># pipes into next command, or | ('wc',... )</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">):</span>  <span class=\"c1\"># iterable lines</span>\n<span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">coroutine</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span>  <span class=\"c1\"># return coroutine</span>\n\n<span class=\"n\">futured</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"s1\">'ls'</span><span class=\"p\">)</span>  <span class=\"c1\"># supports `map` interface</span>\n<span class=\"n\">asynced</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">coroutine</span><span class=\"p\">,</span> <span class=\"s1\">'ls'</span><span class=\"p\">)</span>  <span class=\"c1\"># supports `map` interface with timeout</span>\n</pre>\n<h2>forked</h2>\n<p><code>forked</code> allows iteration in separate child processes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">futured</span> <span class=\"kn\">import</span> <span class=\"n\">forked</span>\n\n<span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">forked</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">max_workers</span><span class=\"o\">=...</span><span class=\"p\">):</span>\n    <span class=\"c1\"># in a child process</span>\n <span class=\"c1\"># in parent after children have exited</span>\n</pre>\n<h1>Installation</h1>\n<pre><code>$ pip install futured\n</code></pre>\n<h1>Tests</h1>\n<p>100% branch coverage.</p>\n<pre><code>$ pytest [--cov]\n</code></pre>\n<h1>Changes</h1>\n<p>1.1</p>\n<ul>\n<li>Stream completed futures from a pending pool</li>\n</ul>\n<p>1.0</p>\n<ul>\n<li>Executed functions are context managers</li>\n<li><code>starmap</code> supported</li>\n</ul>\n<p>0.3</p>\n<ul>\n<li><code>forked</code> has optional maximum number of workers</li>\n<li><code>waiting</code> context manager</li>\n<li><code>command</code> pipes (<code>|</code>)</li>\n<li><code>distributed.Client</code> support</li>\n</ul>\n<p>0.2</p>\n<ul>\n<li><code>command.coroutine</code> creates asyncio subprocesses</li>\n<li><code>futured.mapzip</code> generates results zipped with arguments</li>\n<li><code>asynced.run</code> supports asynchronous iterators</li>\n</ul>\n\n          </div>"}, "last_serial": 6304701, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "d2ee9c898aa9d3d52387206f05f2a7d6", "sha256": "504e4a25dadec954868192737c7984e834e48682762fa18596fbdeba593009cd"}, "downloads": -1, "filename": "futured-0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d2ee9c898aa9d3d52387206f05f2a7d6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4235, "upload_time": "2017-05-07T21:25:22", "upload_time_iso_8601": "2017-05-07T21:25:22.258909Z", "url": "https://files.pythonhosted.org/packages/42/3b/15b36140ada7d283fdc01448cdb627075a2846ea6d63f897cd6e08378e4d/futured-0.0-py2.py3-none-any.whl", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "da7db36802a91c8388a2a7e437f7ae82", "sha256": "889e8033defff6f41be9b73bda55a46c9a5128204912764b9579dc0404cac12e"}, "downloads": -1, "filename": "futured-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da7db36802a91c8388a2a7e437f7ae82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5661, "upload_time": "2017-06-11T21:49:32", "upload_time_iso_8601": "2017-06-11T21:49:32.910555Z", "url": "https://files.pythonhosted.org/packages/01/52/3e2e4f64881e3b3bda051e47bfadfdd53c0a8587fc22a94684a0474a2eda/futured-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "385aa16a689f0edc30a1f0486a105c42", "sha256": "d8da11cfb3ce48154722bd6c6d42fa67637ccf3b801b801789eb17e161cd43d7"}, "downloads": -1, "filename": "futured-0.1.tar.gz", "has_sig": false, "md5_digest": "385aa16a689f0edc30a1f0486a105c42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4686, "upload_time": "2017-06-11T21:49:34", "upload_time_iso_8601": "2017-06-11T21:49:34.196025Z", "url": "https://files.pythonhosted.org/packages/5d/ec/341c9f89f49ae8cfb16bb08953a0df37f82d911414b1187af8abf70f318b/futured-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "136cd69c8141509d45260fe198d4c327", "sha256": "04ace8a3daebca7b657acf3f0a2c93272527f124af53d2d7ac10e605da08b5c2"}, "downloads": -1, "filename": "futured-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "136cd69c8141509d45260fe198d4c327", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6488, "upload_time": "2017-09-17T23:51:02", "upload_time_iso_8601": "2017-09-17T23:51:02.740568Z", "url": "https://files.pythonhosted.org/packages/2e/f2/8fcbb9487667aeadba5c5e247a43d15c933e7eb2d66208af4dc435b26e50/futured-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1405a7efd098ebd4cfed4de0f3ee1366", "sha256": "2f09b4cf832133c386921fdcf22bad26bf2f94cd4ebe6cbb193509b317c701cc"}, "downloads": -1, "filename": "futured-0.2.tar.gz", "has_sig": false, "md5_digest": "1405a7efd098ebd4cfed4de0f3ee1366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5565, "upload_time": "2017-09-17T23:51:04", "upload_time_iso_8601": "2017-09-17T23:51:04.057586Z", "url": "https://files.pythonhosted.org/packages/bf/d4/0a14149d0e007902183bf9e72ba0333154e1f903ede34f70df86082b3d62/futured-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "9d9865fcc005393894ca6ea07c2ae908", "sha256": "b1eeac1e34fa3628e0b33311be9327c174c2552dcac916e4ed787eacb9830d41"}, "downloads": -1, "filename": "futured-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9d9865fcc005393894ca6ea07c2ae908", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4935, "upload_time": "2018-08-18T18:59:49", "upload_time_iso_8601": "2018-08-18T18:59:49.444298Z", "url": "https://files.pythonhosted.org/packages/92/d9/a55b4cfa0b1d561745b08ccecae8d7685dbbcdcdd1be6d613a3cbffc7644/futured-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d388d3e07ddf609e499cb5870b4fb692", "sha256": "df5e025d8bfa5c94dc0f504a14d4b61e702b8007849626e90edb35d0f3aa5ebd"}, "downloads": -1, "filename": "futured-0.3.tar.gz", "has_sig": false, "md5_digest": "d388d3e07ddf609e499cb5870b4fb692", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6616, "upload_time": "2018-08-18T18:59:51", "upload_time_iso_8601": "2018-08-18T18:59:51.374694Z", "url": "https://files.pythonhosted.org/packages/6d/f1/3b430180ee782c61fc6c5e4bd0b41987196e4ade885043602fe334648ff7/futured-0.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "23dd21ffb12f4c154d74e21e6b745466", "sha256": "84681089fc7c697091c25a29f1b6d86060b48b642261c8991d1e111f98649cba"}, "downloads": -1, "filename": "futured-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "23dd21ffb12f4c154d74e21e6b745466", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5963, "upload_time": "2019-07-21T18:45:55", "upload_time_iso_8601": "2019-07-21T18:45:55.062431Z", "url": "https://files.pythonhosted.org/packages/00/0f/fcb08f82fe7b2d3182c464cb8f7d08e49d8cf2fed6defd2ba569697acaf7/futured-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02e539152272edb9f1d5072435701ac8", "sha256": "5a757bca581d5f3ff87229a06d7d2b1c113e297baf184723f544258d3dba615b"}, "downloads": -1, "filename": "futured-1.0.tar.gz", "has_sig": false, "md5_digest": "02e539152272edb9f1d5072435701ac8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10967, "upload_time": "2019-07-21T18:45:56", "upload_time_iso_8601": "2019-07-21T18:45:56.215111Z", "url": "https://files.pythonhosted.org/packages/ba/d5/13e81ce61fc305b4019223a3eed339f368f11d3b505f1d9356cbd4a5f521/futured-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "33c3e729c45e6c0412065c2ae41e952a", "sha256": "1b9b3a0950e1cc954adf1974f53913b42e3c52491e4686de9f50f391d5880883"}, "downloads": -1, "filename": "futured-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33c3e729c45e6c0412065c2ae41e952a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6395, "upload_time": "2019-12-14T21:55:58", "upload_time_iso_8601": "2019-12-14T21:55:58.210866Z", "url": "https://files.pythonhosted.org/packages/b5/fb/262fc9d26dcf2bf87fb82bfa5f1c944886c93112d580602541e278af73d8/futured-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56fbaaa7d8dd8ddf839de495fc698200", "sha256": "ddb049834a0e8ee2993ea20fde3e0b17ee95f8bd09559b5992709b9069e21081"}, "downloads": -1, "filename": "futured-1.1.tar.gz", "has_sig": false, "md5_digest": "56fbaaa7d8dd8ddf839de495fc698200", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12373, "upload_time": "2019-12-14T21:55:59", "upload_time_iso_8601": "2019-12-14T21:55:59.763115Z", "url": "https://files.pythonhosted.org/packages/a4/e1/2665fea39d4bdb7effba24faf178124d699362a177ee20510c09541a58ce/futured-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33c3e729c45e6c0412065c2ae41e952a", "sha256": "1b9b3a0950e1cc954adf1974f53913b42e3c52491e4686de9f50f391d5880883"}, "downloads": -1, "filename": "futured-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33c3e729c45e6c0412065c2ae41e952a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6395, "upload_time": "2019-12-14T21:55:58", "upload_time_iso_8601": "2019-12-14T21:55:58.210866Z", "url": "https://files.pythonhosted.org/packages/b5/fb/262fc9d26dcf2bf87fb82bfa5f1c944886c93112d580602541e278af73d8/futured-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56fbaaa7d8dd8ddf839de495fc698200", "sha256": "ddb049834a0e8ee2993ea20fde3e0b17ee95f8bd09559b5992709b9069e21081"}, "downloads": -1, "filename": "futured-1.1.tar.gz", "has_sig": false, "md5_digest": "56fbaaa7d8dd8ddf839de495fc698200", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12373, "upload_time": "2019-12-14T21:55:59", "upload_time_iso_8601": "2019-12-14T21:55:59.763115Z", "url": "https://files.pythonhosted.org/packages/a4/e1/2665fea39d4bdb7effba24faf178124d699362a177ee20510c09541a58ce/futured-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:34 2020"}