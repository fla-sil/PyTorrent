{"info": {"author": "Wilson Freitas", "author_email": "wilson.freitas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "**bizdays** computes business days between two dates based on the definition of nonworking days (usually holidays and weekends\u2014nonworking weekdays).\nIt also computes other collateral effects like adjust dates for the next or previous business day, check whether a date is a business day, create generators of business days sequences, and so forth.\n\n## Install\n\n**bizdays** is avalilable at PyPI, so it is pip instalable.\n\n\tpip install bizdays\n\n## Using\n\nBusiness days calculations are done defining a `Calendar` object.\n\n```python\nfrom bizdays import Calendar\ncal = Calendar(holidays, ['Sunday', 'Saturday'])\n```\n\nwhere `holidays` is a sequence of dates which represents nonworking dates and the second argument, `weekdays`, is a sequence with nonworking weekdays.\n`holidays` must be a sequence of strings with ISO formatted dates or `datetime.date` objects and `weekdays` a sequence of weekdays in words.\n\nOnce you have a `Calendar` you can\n\n```python\n>>> cal.isbizday('2014-01-12')\nFalse\n>>> cal.isbizday('2014-01-13')\nTrue\n>>> cal.bizdays('2014-01-13', '2015-01-13')\n253\n>>> cal.adjust_next('2015-12-25')\ndatetime.date(2015, 12, 28)\n>>> cal.adjust_next('2015-12-28')\ndatetime.date(2015, 12, 28)\n>>> cal.adjust_previous('2014-01-01')\ndatetime.date(2013, 12, 31)\n>>> cal.adjust_previous('2014-01-02')\ndatetime.date(2014, 1, 2)\n>>> cal.seq('2014-01-02', '2014-01-07')\n<generator object seq at 0x1092b02d0>\n>>> list(cal.seq('2014-01-02', '2014-01-07'))\n[datetime.date(2014, 1, 2), datetime.date(2014, 1, 3), datetime.date(2014, 1, 6), datetime.date(2014, 1, 7)]\n>>> cal.offset('2014-01-02', 5)\ndatetime.date(2014, 1, 9)\n>>> cal.getdate('15th day', 2002, 5)\ndatetime.date(2002, 5, 15)\n>>> cal.getdate('15th bizday', 2002, 5)\ndatetime.date(2002, 5, 22)\n>>> cal.getdate('last wed', 2002, 5)\ndatetime.date(2002, 5, 29)\n>>> cal.getdate('first fri before last day ', 2002, 5)\ndatetime.date(2002, 5, 24)\n```\n\nIn this example I used the list of holidays released by [ANBIMA](http://www.anbima.com.br/feriados/feriados.asp).\n\n> **Important note on date arguments and returning dates**\n> \n> As you can see in the examples all date arguments are strings ISO formatted (`YYYY-mm-dd` or `%Y-%m-%d`), but they can also be passed as `datetime.date` objects.\n> All returning dates are `datetime.date` objects (or a sequence of it), unless you set `iso=True`, that will return an ISO formatted string.\n\n> The `startdate` and `enddate` of a `Calendar` are defined accordingly the first and last given holidays.\n\n### bizdays\n\nTo compute the business days between two dates you call `bizdays` passing `from` and `to` dates as arguments.\n\n```python\n>>> cal.bizdays('2012-12-31', '2013-01-03')\n2\n```\n\n### getdate\n\nYou specify dates by its position or related to other dates, for example:\n\n```python\n>>> cal.getdate('15th day', 2002, 5)\ndatetime.date(2002, 5, 15)\n```\n\nit returns the 15th day of 2002 may. You can also reffer to the whole year.\n\n```python\n>>> cal.getdate('150th day', 2002)\ndatetime.date(2002, 5, 30)\n```\n\nIt accepts `day`, `bizday` and weekdays by: `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, and `sat`.\n\n```python\n>>> cal.getdate('last day', 2006)\ndatetime.date(2006, 12, 31)\n>>> cal.getdate('last bizday', 2006)\ndatetime.date(2006, 12, 29)\n>>> cal.getdate('last mon', 2006)\ndatetime.date(2006, 12, 25)\n```\n\nFor postion use: `first`, `second`, `third`, `1st`, `2nd`, `3rd`, `[n]th`, and `last`.\n\n#### Using date postions as a reference\n\nYou can find before and after other date positions (using date positions as a reference).\n\n```python\n>>> cal.getdate('last mon before 30th day', 2006, 7)\ndatetime.date(2006, 7, 24)\n>>> cal.getdate('second bizday after 15th day', 2006)\ndatetime.date(2006, 1, 18)\n```\n\n#### following and preceding\n\nSeveral contracts, by default, always expiry in the same day, for example, 1st Januray, which isn't a business day, so instead of carrying your code with awful checks you could call `following` which returns the given date\nwhether it is a business day or the next business day.\n\n```python\n>>> cal.following('2013-01-01')\ndatetime.date(2013, 1, 2)\n>>> cal.following('2013-01-02')\ndatetime.date(2013, 1, 2)\n```\n\nWe also have `preceding`, although I suppose it is unusual, too.\n\n```python\n>>> cal.preceding('2013-01-01')\ndatetime.date(2012, 12, 31)\n```\n\n#### modified_following and modified_preceding\n\n`modified_following` and `modified_preceding` are common functions used to specify maturity of contracts.\nThey work the same way `following` and `preceding` but once the returning date is a different month it is adjusted to the `following` or `preceding` business day in the same month.\n\n```python\n>>> dt = cal.getdate('last day', 2002, 3)\n>>> dt\ndatetime.date(2002, 3, 31)\n>>> cal.modified_following(dt, iso=True)\n'2002-03-28'\n>>> cal.isbizday('2002-03-29')\nFalse\n>>> dt = cal.getdate('first day', 2002, 6)\n>>> dt\ndatetime.date(2002, 6, 1)\n>>> cal.modified_preceding(dt, iso=True)\n'2002-06-03'\n```\n\n### seq\n\nTo execute calculations through sequential dates, sometimes you must consider only business days.\nFor example, you want to compute the price of a bond from its issue date up to its maturity.\nYou have to walk over business days in order to carry the contract up to maturity.\nTo accomplish that you use the `seq` method (stolen from R) which returns a sequence generator of business days.\n\n```python\n>>> for dt in cal.seq('2012-12-31', '2013-01-03'):\n...     print dt\n... \n2012-12-31\n2013-01-02\n2013-01-03\n```\n\n### offset\n\nThis method offsets the given date by `n` days respecting the calendar, so it obligatorily returns a business day.\n\n```python\n>>> cal.offset('2013-01-02', 1)\ndatetime.date(2013, 1, 3)\n>>> cal.offset('2013-01-02', 3)\ndatetime.date(2013, 1, 7)\n>>> cal.offset('2013-01-02', 0)\ndatetime.date(2013, 1, 2)\n```\n\nObviously, if you want to offset backwards you can use `-n`.\n\n```python\n>>> print cal.offset('2013-01-02', -1)\n2012-12-31\n>>> print cal.offset('2013-01-02', -3)\n2012-12-27\n```\n\nOnce the given date is a business day there is no problems, but if instead it isn't a working day the offset can lead to unexpected results. For example:\n\n```python\n>>> cal.offset('2013-01-01', 1)\ndatetime.date(2013, 1, 2)\n>>> cal.offset('2013-01-01', 0)\ndatetime.date(2013, 1, 1)\n>>> cal.offset('2013-01-01', -1)\ndatetime.date(2012, 12, 31)\n```\n\n## Actual Calendar\n\nThe Actual Calendar can be defined as\n\n```python\n>>> cal = Calendar(name='actual')\n>>> cal\nCalendar: actual\nStart: 1970-01-01\nEnd: 2071-01-01\nHolidays: 0\nFinancial: True\n```\n\nThe Actual Calendar doesn't consider holidays, nor nonworking weekdays for counting business days between 2 dates.\nThis is the same of subtracting 2 dates, and adjust methods will return the given argument.\nBut the idea of using the Actual Calendar is working with the same interface for any calendar you work with.\nWhen you price financial instruments you don't have to check if it uses business days or not.\n\n> `startdate` and `enddate` defaults to `1970-01-01` and `2071-01-01`, but they can be set during Calendar's instanciation.\n\n## Vectorized operations\n\nThe Calendar's methods: `isbizday`, `bizdays`, `adjust_previous`, `adjust_next`, and `offset`, have a vectorized counterparty, inside `Calendar.vec` attribute.\n\n```python\n>>> cal = Calendar.load('Test.cal')\n>>> dates = ('2002-01-01', '2002-01-02', '2002-01-03')\n>>> tuple(cal.vec.adjust_next(dates))\n(datetime.date(2002, 1, 2),\n datetime.date(2002, 1, 2),\n datetime.date(2002, 1, 3))\n>>> list(cal.vec.bizdays('2001-12-31', dates))\n[0, 1, 2]\n```\n\nThese functions accept sequences and single values, but always return generators.\nIn `bizdays` call a date and a sequence have been passed, computing business days between that date and all the others.\n\n### Recycle rule\n\nOnce you pass 2 sequences for `bizdays` and `offset` and those sequences doesn't have the same length, no problem.\nThe shorter collection is cycled to fit the longer's length.\n\n```python\n>>> dates = ('2002-01-01', '2002-01-02', '2002-01-03', '2002-01-04', '2002-01-05')\n>>> tuple(cal.vec.offset(dates, (1, 2, 3)))\n(datetime.date(2002, 1, 3),\n datetime.date(2002, 1, 4),\n datetime.date(2002, 1, 8),\n datetime.date(2002, 1, 7),\n datetime.date(2002, 1, 9))\n```\n\n> These methods work well with sequences but not with generators, since I haven't found an easy way to find out which generator is the shorter.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wilsonfreitas/bizdays", "keywords": "business days,finance,calendar,bizdays", "license": "", "maintainer": "", "maintainer_email": "", "name": "bizdays", "package_url": "https://pypi.org/project/bizdays/", "platform": "", "project_url": "https://pypi.org/project/bizdays/", "project_urls": {"Homepage": "https://github.com/wilsonfreitas/bizdays"}, "release_url": "https://pypi.org/project/bizdays/0.3.0/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Functions to handle business days calculations", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>bizdays</strong> computes business days between two dates based on the definition of nonworking days (usually holidays and weekends\u2014nonworking weekdays).\nIt also computes other collateral effects like adjust dates for the next or previous business day, check whether a date is a business day, create generators of business days sequences, and so forth.</p>\n<h2>Install</h2>\n<p><strong>bizdays</strong> is avalilable at PyPI, so it is pip instalable.</p>\n<pre><code>pip install bizdays\n</code></pre>\n<h2>Using</h2>\n<p>Business days calculations are done defining a <code>Calendar</code> object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bizdays</span> <span class=\"kn\">import</span> <span class=\"n\">Calendar</span>\n<span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">(</span><span class=\"n\">holidays</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Sunday'</span><span class=\"p\">,</span> <span class=\"s1\">'Saturday'</span><span class=\"p\">])</span>\n</pre>\n<p>where <code>holidays</code> is a sequence of dates which represents nonworking dates and the second argument, <code>weekdays</code>, is a sequence with nonworking weekdays.\n<code>holidays</code> must be a sequence of strings with ISO formatted dates or <code>datetime.date</code> objects and <code>weekdays</code> a sequence of weekdays in words.</p>\n<p>Once you have a <code>Calendar</code> you can</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">isbizday</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-12'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">isbizday</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-13'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">bizdays</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-13'</span><span class=\"p\">,</span> <span class=\"s1\">'2015-01-13'</span><span class=\"p\">)</span>\n<span class=\"mi\">253</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">adjust_next</span><span class=\"p\">(</span><span class=\"s1\">'2015-12-25'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2015</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">adjust_next</span><span class=\"p\">(</span><span class=\"s1\">'2015-12-28'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2015</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">adjust_previous</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-01'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">adjust_previous</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-02'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-02'</span><span class=\"p\">,</span> <span class=\"s1\">'2014-01-07'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"n\">seq</span> <span class=\"n\">at</span> <span class=\"mh\">0x1092b02d0</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-02'</span><span class=\"p\">,</span> <span class=\"s1\">'2014-01-07'</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2014-01-02'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2014</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'15th day'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'15th bizday'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last wed'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'first fri before last day '</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n</pre>\n<p>In this example I used the list of holidays released by <a href=\"http://www.anbima.com.br/feriados/feriados.asp\" rel=\"nofollow\">ANBIMA</a>.</p>\n<blockquote>\n<p><strong>Important note on date arguments and returning dates</strong></p>\n<p>As you can see in the examples all date arguments are strings ISO formatted (<code>YYYY-mm-dd</code> or <code>%Y-%m-%d</code>), but they can also be passed as <code>datetime.date</code> objects.\nAll returning dates are <code>datetime.date</code> objects (or a sequence of it), unless you set <code>iso=True</code>, that will return an ISO formatted string.</p>\n</blockquote>\n<blockquote>\n<p>The <code>startdate</code> and <code>enddate</code> of a <code>Calendar</code> are defined accordingly the first and last given holidays.</p>\n</blockquote>\n<h3>bizdays</h3>\n<p>To compute the business days between two dates you call <code>bizdays</code> passing <code>from</code> and <code>to</code> dates as arguments.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">bizdays</span><span class=\"p\">(</span><span class=\"s1\">'2012-12-31'</span><span class=\"p\">,</span> <span class=\"s1\">'2013-01-03'</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</pre>\n<h3>getdate</h3>\n<p>You specify dates by its position or related to other dates, for example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'15th day'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n</pre>\n<p>it returns the 15th day of 2002 may. You can also reffer to the whole year.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'150th day'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p>It accepts <code>day</code>, <code>bizday</code> and weekdays by: <code>sun</code>, <code>mon</code>, <code>tue</code>, <code>wed</code>, <code>thu</code>, <code>fri</code>, and <code>sat</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last day'</span><span class=\"p\">,</span> <span class=\"mi\">2006</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last bizday'</span><span class=\"p\">,</span> <span class=\"mi\">2006</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last mon'</span><span class=\"p\">,</span> <span class=\"mi\">2006</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre>\n<p>For postion use: <code>first</code>, <code>second</code>, <code>third</code>, <code>1st</code>, <code>2nd</code>, <code>3rd</code>, <code>[n]th</code>, and <code>last</code>.</p>\n<h4>Using date postions as a reference</h4>\n<p>You can find before and after other date positions (using date positions as a reference).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last mon before 30th day'</span><span class=\"p\">,</span> <span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'second bizday after 15th day'</span><span class=\"p\">,</span> <span class=\"mi\">2006</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2006</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">)</span>\n</pre>\n<h4>following and preceding</h4>\n<p>Several contracts, by default, always expiry in the same day, for example, 1st Januray, which isn't a business day, so instead of carrying your code with awful checks you could call <code>following</code> which returns the given date\nwhether it is a business day or the next business day.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">following</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">following</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>We also have <code>preceding</code>, although I suppose it is unusual, too.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">preceding</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n</pre>\n<h4>modified_following and modified_preceding</h4>\n<p><code>modified_following</code> and <code>modified_preceding</code> are common functions used to specify maturity of contracts.\nThey work the same way <code>following</code> and <code>preceding</code> but once the returning date is a different month it is adjusted to the <code>following</code> or <code>preceding</code> business day in the same month.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'last day'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dt</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">modified_following</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">iso</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">'2002-03-28'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">isbizday</span><span class=\"p\">(</span><span class=\"s1\">'2002-03-29'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">getdate</span><span class=\"p\">(</span><span class=\"s1\">'first day'</span><span class=\"p\">,</span> <span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dt</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">modified_preceding</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">iso</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">'2002-06-03'</span>\n</pre>\n<h3>seq</h3>\n<p>To execute calculations through sequential dates, sometimes you must consider only business days.\nFor example, you want to compute the price of a bond from its issue date up to its maturity.\nYou have to walk over business days in order to carry the contract up to maturity.\nTo accomplish that you use the <code>seq</code> method (stolen from R) which returns a sequence generator of business days.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">dt</span> <span class=\"ow\">in</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"s1\">'2012-12-31'</span><span class=\"p\">,</span> <span class=\"s1\">'2013-01-03'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"n\">dt</span>\n<span class=\"o\">...</span> \n<span class=\"mi\">2012</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">31</span>\n<span class=\"mi\">2013</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span>\n<span class=\"mi\">2013</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">03</span>\n</pre>\n<h3>offset</h3>\n<p>This method offsets the given date by <code>n</code> days respecting the calendar, so it obligatorily returns a business day.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Obviously, if you want to offset backwards you can use <code>-n</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"mi\">2012</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">31</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-02'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"mi\">2012</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">27</span>\n</pre>\n<p>Once the given date is a business day there is no problems, but if instead it isn't a working day the offset can lead to unexpected results. For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"s1\">'2013-01-01'</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n</pre>\n<h2>Actual Calendar</h2>\n<p>The Actual Calendar can be defined as</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'actual'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span>\n<span class=\"n\">Calendar</span><span class=\"p\">:</span> <span class=\"n\">actual</span>\n<span class=\"n\">Start</span><span class=\"p\">:</span> <span class=\"mi\">1970</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>\n<span class=\"n\">End</span><span class=\"p\">:</span> <span class=\"mi\">2071</span><span class=\"o\">-</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">01</span>\n<span class=\"n\">Holidays</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">Financial</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n</pre>\n<p>The Actual Calendar doesn't consider holidays, nor nonworking weekdays for counting business days between 2 dates.\nThis is the same of subtracting 2 dates, and adjust methods will return the given argument.\nBut the idea of using the Actual Calendar is working with the same interface for any calendar you work with.\nWhen you price financial instruments you don't have to check if it uses business days or not.</p>\n<blockquote>\n<p><code>startdate</code> and <code>enddate</code> defaults to <code>1970-01-01</code> and <code>2071-01-01</code>, but they can be set during Calendar's instanciation.</p>\n</blockquote>\n<h2>Vectorized operations</h2>\n<p>The Calendar's methods: <code>isbizday</code>, <code>bizdays</code>, <code>adjust_previous</code>, <code>adjust_next</code>, and <code>offset</code>, have a vectorized counterparty, inside <code>Calendar.vec</code> attribute.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'Test.cal'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'2002-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-02'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-03'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">adjust_next</span><span class=\"p\">(</span><span class=\"n\">dates</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">bizdays</span><span class=\"p\">(</span><span class=\"s1\">'2001-12-31'</span><span class=\"p\">,</span> <span class=\"n\">dates</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>These functions accept sequences and single values, but always return generators.\nIn <code>bizdays</code> call a date and a sequence have been passed, computing business days between that date and all the others.</p>\n<h3>Recycle rule</h3>\n<p>Once you pass 2 sequences for <code>bizdays</code> and <code>offset</code> and those sequences doesn't have the same length, no problem.\nThe shorter collection is cycled to fit the longer's length.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'2002-01-01'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-02'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-03'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-04'</span><span class=\"p\">,</span> <span class=\"s1\">'2002-01-05'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">dates</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span>\n <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2002</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))</span>\n</pre>\n<blockquote>\n<p>These methods work well with sequences but not with generators, since I haven't found an easy way to find out which generator is the shorter.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6999138, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "aa3f1bf27c6585985eb7ca5575acb852", "sha256": "606d7280206112f89d6fd6e8581ea0dbc2650c0e74859c6c494ac5f1f327c640"}, "downloads": -1, "filename": "bizdays-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa3f1bf27c6585985eb7ca5575acb852", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8633, "upload_time": "2020-04-11T11:06:06", "upload_time_iso_8601": "2020-04-11T11:06:06.909261Z", "url": "https://files.pythonhosted.org/packages/c5/8b/70f2980029842153a0028bbb2c359579162eea035e8502f0028a8f2eee23/bizdays-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da09dbd51f89f9995f59e799f1460c75", "sha256": "60e819945337509880de249d58e6bff164e39d0fd08c6fc852891d5c598bc7cb"}, "downloads": -1, "filename": "bizdays-0.3.0.tar.gz", "has_sig": false, "md5_digest": "da09dbd51f89f9995f59e799f1460c75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8476, "upload_time": "2020-04-11T11:06:08", "upload_time_iso_8601": "2020-04-11T11:06:08.575195Z", "url": "https://files.pythonhosted.org/packages/9b/94/e5b24666b1415a0e6948e2fbb6477eeb918f8e438ea192f46097696de167/bizdays-0.3.0.tar.gz", "yanked": false}], "v0.2.0": [{"comment_text": "", "digests": {"md5": "5686219a9d2a4d7db1cbc80a8d35607f", "sha256": "34213953d19ed32bd4344150bcfb05b5b5d5a5f35719894159cb05aae01a0b6d"}, "downloads": -1, "filename": "bizdays-v0.2.0.tar.gz", "has_sig": false, "md5_digest": "5686219a9d2a4d7db1cbc80a8d35607f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7138, "upload_time": "2014-10-19T03:02:09", "upload_time_iso_8601": "2014-10-19T03:02:09.903502Z", "url": "https://files.pythonhosted.org/packages/ee/07/f2014d2753fefe6d0f0523210e24c7b97f089eab70427229f8104fdbe5cd/bizdays-v0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa3f1bf27c6585985eb7ca5575acb852", "sha256": "606d7280206112f89d6fd6e8581ea0dbc2650c0e74859c6c494ac5f1f327c640"}, "downloads": -1, "filename": "bizdays-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa3f1bf27c6585985eb7ca5575acb852", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 8633, "upload_time": "2020-04-11T11:06:06", "upload_time_iso_8601": "2020-04-11T11:06:06.909261Z", "url": "https://files.pythonhosted.org/packages/c5/8b/70f2980029842153a0028bbb2c359579162eea035e8502f0028a8f2eee23/bizdays-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da09dbd51f89f9995f59e799f1460c75", "sha256": "60e819945337509880de249d58e6bff164e39d0fd08c6fc852891d5c598bc7cb"}, "downloads": -1, "filename": "bizdays-0.3.0.tar.gz", "has_sig": false, "md5_digest": "da09dbd51f89f9995f59e799f1460c75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8476, "upload_time": "2020-04-11T11:06:08", "upload_time_iso_8601": "2020-04-11T11:06:08.575195Z", "url": "https://files.pythonhosted.org/packages/9b/94/e5b24666b1415a0e6948e2fbb6477eeb918f8e438ea192f46097696de167/bizdays-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:12 2020"}