{"info": {"author": "Peter Ilfrich", "author_email": "das-peter@gmx.de", "bugtrack_url": null, "classifiers": [], "description": "# Python Basic Utilities `pbu`\n\nAvailable on [PyPi](https://pypi.org/project/pbu/)\n\n**Table of Contents**\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n3. [Classes](#classes)\n    1. [JSON](#json) - a JavaScript-like dictionary access helper\n    2. [Logger](#logger) - a wrapper around the Python logging framework\n    3. [TimeSeries](#timeseries) - powerful helper class to organise time series\n    4. [AbstractMongoStore](#abstractmongostore) - helper and wrapper class for MongoDB access\n    5. [AbstractMysqlStore](#abstractmysqlstore) - helper and wrapper class for MySQL access\n    6. [BasicMonitor](#basicmonitor) - monitor class orchestrating regular operations\n4. [Functions](#functions)\n    1. [`list_to_json`](#list_to_json)\n    2. [`default_options`](#default_options)\n\n\n## Installation\n\nInstall via pip:\n\n```bash\npip install pbu\n```\n\n## Usage\n\n***Optional***: If you have a requirement.txt file, you can add `pbu`:\n\n```bash\npbu\n```\n\nThen, simply import the class / module you need:\n\n```python\nfrom pbu import JSON\n\n# and start using it\nobj = JSON({\"my\": {\"obj\": \"content\"}})\nprint(obj.my.obj)\n```\n\n## Classes\n\n### JSON\n\nThis is an adaptation of the native `dict` class, providing Javascript-like dictionary access using the \"dot-notation\" \n(e.g. `person.relations[0].address.street`) rather than the Python-native bracket notation (e.g. \n`person[\"relations\"][0][\"address\"][\"street\"]`). It overrides the basic `__getattr__` and `__setattr__` methods as a \nshortcut to manage the dictionary content.\n\n**Example**\n\n```python\nfrom pbu import JSON\nmy_obj = JSON({\"initial\": \"content\"})\nprint(my_obj.initial)\n# prints out \"content\"\n\nmy_obj.initial = {\"a\": 5, \"b\": 3}\nprint(my_obj.initial.a + my_obj.initial.b)\n# prints out 8\nmy_obj.initial.b = 13\nprint(my_obj.initial.a + my_obj.initial.b)\n# prints out 18\n\nmy_obj.extension = 10\nprint(my_obj.extension)\n# prints out 10\n```\n\n### Logger\n\nThis is a basic logger allowing to write log files, for `logger.info` it writes a debug.log and for `logger.error` or \n`logger.exception` it writes an error.log file.\n\n**Example**\n\n```python\nfrom pbu import Logger\n\nlogger = Logger(name=\"logger-name\")\nlogger.debug(\"Some debug message goes here\")\nlogger.error(\"Error executing something\")\n\nlogger = Logger(name=\"logger-name\", log_folder=\"./logs\")\nlogger.debug(\"This will create the debug.log and error.log in the ./logs folder\")\n```\n\n### TimeSeries\n\nThe time series class is a helper utility, that allows to compile complex time-series, offering functionality to add \ntime series, remove time series and most importantly align time series with timestamps to a previously defined \nresolution by interpolating missing values and re-aligning measurements within the tolerance of the provided time \nseries. \n\nIt supports 2 different structures:\n\n**List of Dictionary Items**\n\n```python\nfrom datetime import datetime, timedelta\n\nlist_of_dict = [\n    { \"date_time\": datetime.now(), \"measurement_1\": 12, \"measurement_2\": 15 },\n    { \"date_time\": datetime.now() + timedelta(hours=1), \"measurement_1\": 10, \"measurement_2\": 16 },\n    { \"date_time\": datetime.now() + timedelta(hours=2), \"measurement_1\": 9, \"measurement_2\": 12 },\n]\n```\n\n**Dictionary of Lists**\n\n```python\nfrom datetime import datetime, timedelta\n\ndict_of_list = {\n    \"date_time\": [datetime.now(), datetime.now() + timedelta(hours=1), datetime + timedelta(hours=2)],\n    \"measurement_1\": [12, 10, 16],\n    \"measurement_2\": [15, 16, 12],\n}\n```\n\n**Example**\n\n```python\nfrom pbu import TimeSeries\nfrom datetime import datetime, timedelta\n\n# initial time series base data (you can add measurements as well or provide as list of dictionaries\ndict_of_list = {\n    \"date_time\": TimeSeries.create_date_range(datetime.now(), datetime.now() + timedelta(days=1), timedelta(hours=3)),\n}\n\n# init time series\nts = TimeSeries(input_data=dict_of_list, date_time_key=\"date_time\")\n# add values (ensure same length as date_time series)\nts.add_values(\"measurement_1\", [12, 10, 16, 10, 5, 8, 12, 9])  \n\n# you can translate into a list of dictionary items (keys are maintained)\nlist_of_dict = ts.translate_to_list_of_dicts()\n\n# extract data series from the time series\nmeasurement_1 = ts.get_values(\"measurement_1\")\n\n# create new series that provides same value for all timestamps\nts.fill_values(\"constant_series\", 5)\n\n# remove a series from the total data structure\nts.remove_series(\"constant_series\")\n\n# re-sample data to 5 minute resolution, interpolating values, also pre-pending another day in front of the time series \nts.align_to_resolution(resolution=timedelta(minutes=5), start_date=datetime.now() - timedelta(days=1))\n# this will result in \"interpolated\" values for the first day, using the first value (12) to fill missing values\nprint(len(ts.translate_to_list_of_dicts()))  # 12 an hour, 2 days, 48 * 12 = ~576 items\n\n# the same can also be achieved by:\nts.set_resolution(timedelta(minutes=5))\n# no need to provide resolution now\nts.align_to_resolution(start_date=datetime.now() - timedelta(days=1))\n```\n\n### AbstractMongoStore\n\nDatabase store with helper functions for accessing MongoDB. Each store instance represents a single collection. This \ncomes with an `AbstractMongoDocument` class, which can be used to model the document types you store within a MongoDB \ncollection.\n\n**Example**\n\n```python\nfrom pbu import AbstractMongoStore, AbstractMongoDocument\n\n# this is the object type stored in the mongo store\nclass MyObjectType(AbstractMongoDocument):\n    def __init__(self, val1, val2):\n        # optional: provide id and data model version \n        super().__init__()\n        self.attribute = val1\n        self.attribute2 = val2,\n    def to_json(self):\n        # init with version and id\n        result = super().to_json()\n        # add attributes to dictionary and return\n        result[\"attribute\"] = self.attribute\n        result[\"attribute2\"] = self.attribute2\n        return result\n\n    @staticmethod\n    def from_json(json):\n        result = MyObjectType(json[\"attribute1\"], json[\"attribute2\"])\n        # get _id and version attributes\n        result.extract_system_fields(json)\n        return result\n\n\nclass MyObjectStore(AbstractMongoStore):\n    def __init__(self, mongo_url, db_name, collection_name, data_model_version):\n        # provide object type class as de-serialisation class (providing from_json and to_json)\n        super.__init__(mongo_url, db_name, collection_name, MyObjectType, data_model_version)\n\n\n# create instance of store\nstore = MyObjectStore(\"mongodb://localhost:27017\", \"mydb\", \"colName\", 5)\n\n# create document using a dictionary\nstore.create({\n    \"version\": 5,\n    \"attribute1\": \"a\",\n    \"attribute2\": 16,\n})\n\n# or use the type\ndoc = MyObjectType(\"a\", 16)\ndoc.version = 5\ndoc_id = store.create(doc)\n\n# update single document using helper functions\nstore.update(AbstractMongoStore.id_query(doc_id), \n             AbstractMongoStore.set_update([\"attribute1\", \"attribute2\"], [\"b\", 12]))\n\n\n# returns a list of MyObjectType objects matching the version\nlist_of_results = store.query({ \"version\": 5 })\n``` \n\n### BasicMonitor\n\nAn abstract class providing base-functionality for running monitors - threads that run a specific routine in a regular \ninterval. This can be an executor waiting for new tasks to be processed (and checking every 5 seconds) or a thread that\nmonitors some readout in a regular interval. The monitor is wrapped to re-start itself, in case of errors.\n\n**Example**\n\n```python\nfrom pbu import BasicMonitor\n\nclass MyOwnMonitor(BasicMonitor):\n    def __init__(self, data):\n        super().__init__(monitor_id=\"my_id\", wait_time=5)  # waits 5 seconds between each execution loop\n        self.data = data\n\n    def running(self):\n        while self.active:\n            # your code goes here (example):\n            # result = fetch_data(self.data)\n            # store_result(result)\n            self.wait()\n```\n\nIf you want to run in a regular interval, the `running` method needs to be slightly modified:\n\n```python\nfrom time import time\nfrom pbu import BasicMonitor\n\nclass MyRegularOwnMonitor(BasicMonitor):\n    def __init__(self, data):\n        super().__init__(monitor_id=\"another_id\", wait_time=60, run_interval=True)  # execute every 60 seconds\n        self.data = data\n\n    def running(self):\n        while self.active:\n            start_ts = time()  # capture start of loop\n            # your code goes here (example):\n            # result = do_something(self.data)\n            # store_result(result)\n            self.wait(exec_duration=round(time() - start_ts))  # include the execution duration\n```\n\nYou can also pass a custom logger as `custom_logger` argument to the constructor. By default it will use the \n`pbu.Logger` and log major events such as start/stop/restart and errors.\n\n**Manage and run monitor**\n\n```python\nimport threading\n\ndef start_monitor_thread(monitor):\n    \"\"\"\n    Thread function to be run by the new thread.\n    :param monitor: BasicMonitor - an instance of sub-class of BasicMonitor \n    \"\"\"\n    # start the monitor\n    monitor.start()\n\n\n# create monitor instance of your own class that implements BasicMonitor\nregular_monitor = MyRegularOwnMonitor(data={\"some\": \"data\"})\n\n# create thread with start-up function and start it\nt = threading.Thread(target=start_monitor_thread, args=(regular_monitor, ), daemon=True)\nt.start()\n\n# in a separate piece of code (e.g. REST handler or timer) you can stop the monitor instance\nregular_monitor.stop()\n```\n\nStopping a monitor doesn't interrupt the current thread. If the monitor is for example in a wait period and you send the \n`stop` signal, the thread will still run until the wait period passes.\n\n> _In an API scenario, I recommend using a `dict` or `list` to cache monitors and retrieve them via the API using the \n`to_json()` method for identification. This then allows you to signal starting / stopping of monitors by providing the \nmonitor ID and lookup the monitor instance in the monitor cache._\n\n**`BasicMonitor` Methods**\n\n- `start()` - starts the monitor\n- `stop()` - stops the monitor\n- `to_json()` - returns a dictionary with basic monitor technical information (id, state, wait behaviour, etc)\n- `wait_till_midnight()` - waits till the next midnight in your machines time zone\n- `wait(exec_duration=0)` - waits for the time specified in the constructor and in case of `run_interval=True` for the \noptional `exec_duration`, if provided.\n\n## Functions\n\n### `list_to_json`\n\n```python\nfrom pbu import list_to_json\n\n# assuming we have `my_store` as an instance of MongoDB store or MySQL store, you can:\nlist_of_dictionaries = list_to_json(item_list=my_store.get_all())  # output is a list of dictionaries\n```\n\nThis function operates on lists of objects inheriting from `AbstractMongoDocument` or `AbstractMysqlDocument` and \nconverts them into dictionaries using the `to_json()` method of any object passed into the function. Objects passed into\nthe function _require_ the `to_json()` method and need to return the dictionary representation of the object. This \nfunction is just a mapping shortcut.\n\n### `default_options`\n\n```python\nfrom pbu import default_options\n\nDEFAULTS = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n}\n\nresult = default_options(default=DEFAULTS, override={\"b\": 4, \"d\": 5})\n# result is: {\"a\": 1, \"b\": 4, \"c\": 3, \"d\": 5}\n```\n\nIf you want to avoid additional keys other than the keys in DEFAULTS, you can provide a third argument:\n\n```python\nfrom pbu import default_options\n\nDEFAULTS = {\n    \"a\": 1,\n    \"b\": 2,\n}\n\nresult = default_options(default=DEFAULTS, override={\"b\": 4, \"d\": 5}, allow_unknown_keys=False)\n# result is: {\"a\": 1, \"b\": 4}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilfrich/python-basic-utils", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "pbu", "package_url": "https://pypi.org/project/pbu/", "platform": "", "project_url": "https://pypi.org/project/pbu/", "project_urls": {"Homepage": "https://github.com/ilfrich/python-basic-utils"}, "release_url": "https://pypi.org/project/pbu/0.6.6/", "requires_dist": ["mysql-connector-python", "pytz", "pymongo", "tzlocal", "requests", "pandas"], "requires_python": "", "summary": "Basic Utility module for the Python programming language", "version": "0.6.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Basic Utilities <code>pbu</code></h1>\n<p>Available on <a href=\"https://pypi.org/project/pbu/\" rel=\"nofollow\">PyPi</a></p>\n<p><strong>Table of Contents</strong></p>\n<ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#classes\" rel=\"nofollow\">Classes</a>\n<ol>\n<li><a href=\"#json\" rel=\"nofollow\">JSON</a> - a JavaScript-like dictionary access helper</li>\n<li><a href=\"#logger\" rel=\"nofollow\">Logger</a> - a wrapper around the Python logging framework</li>\n<li><a href=\"#timeseries\" rel=\"nofollow\">TimeSeries</a> - powerful helper class to organise time series</li>\n<li><a href=\"#abstractmongostore\" rel=\"nofollow\">AbstractMongoStore</a> - helper and wrapper class for MongoDB access</li>\n<li><a href=\"#abstractmysqlstore\" rel=\"nofollow\">AbstractMysqlStore</a> - helper and wrapper class for MySQL access</li>\n<li><a href=\"#basicmonitor\" rel=\"nofollow\">BasicMonitor</a> - monitor class orchestrating regular operations</li>\n</ol>\n</li>\n<li><a href=\"#functions\" rel=\"nofollow\">Functions</a>\n<ol>\n<li><a href=\"#list_to_json\" rel=\"nofollow\"><code>list_to_json</code></a></li>\n<li><a href=\"#default_options\" rel=\"nofollow\"><code>default_options</code></a></li>\n</ol>\n</li>\n</ol>\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre>pip install pbu\n</pre>\n<h2>Usage</h2>\n<p><em><strong>Optional</strong></em>: If you have a requirement.txt file, you can add <code>pbu</code>:</p>\n<pre>pbu\n</pre>\n<p>Then, simply import the class / module you need:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span>\n\n<span class=\"c1\"># and start using it</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">({</span><span class=\"s2\">\"my\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"obj\"</span><span class=\"p\">:</span> <span class=\"s2\">\"content\"</span><span class=\"p\">}})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre>\n<h2>Classes</h2>\n<h3>JSON</h3>\n<p>This is an adaptation of the native <code>dict</code> class, providing Javascript-like dictionary access using the \"dot-notation\"\n(e.g. <code>person.relations[0].address.street</code>) rather than the Python-native bracket notation (e.g.\n<code>person[\"relations\"][0][\"address\"][\"street\"]</code>). It overrides the basic <code>__getattr__</code> and <code>__setattr__</code> methods as a\nshortcut to manage the dictionary content.</p>\n<p><strong>Example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span>\n<span class=\"n\">my_obj</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">({</span><span class=\"s2\">\"initial\"</span><span class=\"p\">:</span> <span class=\"s2\">\"content\"</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints out \"content\"</span>\n\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints out 8</span>\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">13</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints out 18</span>\n\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">extension</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">extension</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints out 10</span>\n</pre>\n<h3>Logger</h3>\n<p>This is a basic logger allowing to write log files, for <code>logger.info</code> it writes a debug.log and for <code>logger.error</code> or\n<code>logger.exception</code> it writes an error.log file.</p>\n<p><strong>Example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"logger-name\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"Some debug message goes here\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Error executing something\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"logger-name\"</span><span class=\"p\">,</span> <span class=\"n\">log_folder</span><span class=\"o\">=</span><span class=\"s2\">\"./logs\"</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"This will create the debug.log and error.log in the ./logs folder\"</span><span class=\"p\">)</span>\n</pre>\n<h3>TimeSeries</h3>\n<p>The time series class is a helper utility, that allows to compile complex time-series, offering functionality to add\ntime series, remove time series and most importantly align time series with timestamps to a previously defined\nresolution by interpolating missing values and re-aligning measurements within the tolerance of the provided time\nseries.</p>\n<p>It supports 2 different structures:</p>\n<p><strong>List of Dictionary Items</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"n\">list_of_dict</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"date_time\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"s2\">\"measurement_1\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s2\">\"measurement_2\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"date_time\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"s2\">\"measurement_1\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">\"measurement_2\"</span><span class=\"p\">:</span> <span class=\"mi\">16</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"date_time\"</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s2\">\"measurement_1\"</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"s2\">\"measurement_2\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span> <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Dictionary of Lists</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"n\">dict_of_list</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"date_time\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">datetime</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)],</span>\n    <span class=\"s2\">\"measurement_1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"measurement_2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">TimeSeries</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n\n<span class=\"c1\"># initial time series base data (you can add measurements as well or provide as list of dictionaries</span>\n<span class=\"n\">dict_of_list</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"date_time\"</span><span class=\"p\">:</span> <span class=\"n\">TimeSeries</span><span class=\"o\">.</span><span class=\"n\">create_date_range</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)),</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># init time series</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">TimeSeries</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"o\">=</span><span class=\"n\">dict_of_list</span><span class=\"p\">,</span> <span class=\"n\">date_time_key</span><span class=\"o\">=</span><span class=\"s2\">\"date_time\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># add values (ensure same length as date_time series)</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">add_values</span><span class=\"p\">(</span><span class=\"s2\">\"measurement_1\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">])</span>  \n\n<span class=\"c1\"># you can translate into a list of dictionary items (keys are maintained)</span>\n<span class=\"n\">list_of_dict</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">translate_to_list_of_dicts</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># extract data series from the time series</span>\n<span class=\"n\">measurement_1</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">get_values</span><span class=\"p\">(</span><span class=\"s2\">\"measurement_1\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create new series that provides same value for all timestamps</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">fill_values</span><span class=\"p\">(</span><span class=\"s2\">\"constant_series\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># remove a series from the total data structure</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">remove_series</span><span class=\"p\">(</span><span class=\"s2\">\"constant_series\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># re-sample data to 5 minute resolution, interpolating values, also pre-pending another day in front of the time series </span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">align_to_resolution</span><span class=\"p\">(</span><span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"c1\"># this will result in \"interpolated\" values for the first day, using the first value (12) to fill missing values</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">translate_to_list_of_dicts</span><span class=\"p\">()))</span>  <span class=\"c1\"># 12 an hour, 2 days, 48 * 12 = ~576 items</span>\n\n<span class=\"c1\"># the same can also be achieved by:</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">set_resolution</span><span class=\"p\">(</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"c1\"># no need to provide resolution now</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">align_to_resolution</span><span class=\"p\">(</span><span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<h3>AbstractMongoStore</h3>\n<p>Database store with helper functions for accessing MongoDB. Each store instance represents a single collection. This\ncomes with an <code>AbstractMongoDocument</code> class, which can be used to model the document types you store within a MongoDB\ncollection.</p>\n<p><strong>Example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractMongoStore</span><span class=\"p\">,</span> <span class=\"n\">AbstractMongoDocument</span>\n\n<span class=\"c1\"># this is the object type stored in the mongo store</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyObjectType</span><span class=\"p\">(</span><span class=\"n\">AbstractMongoDocument</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val1</span><span class=\"p\">,</span> <span class=\"n\">val2</span><span class=\"p\">):</span>\n        <span class=\"c1\"># optional: provide id and data model version </span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attribute</span> <span class=\"o\">=</span> <span class=\"n\">val1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attribute2</span> <span class=\"o\">=</span> <span class=\"n\">val2</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># init with version and id</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n        <span class=\"c1\"># add attributes to dictionary and return</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">\"attribute\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attribute</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">\"attribute2\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attribute2</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">MyObjectType</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">[</span><span class=\"s2\">\"attribute1\"</span><span class=\"p\">],</span> <span class=\"n\">json</span><span class=\"p\">[</span><span class=\"s2\">\"attribute2\"</span><span class=\"p\">])</span>\n        <span class=\"c1\"># get _id and version attributes</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">extract_system_fields</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyObjectStore</span><span class=\"p\">(</span><span class=\"n\">AbstractMongoStore</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mongo_url</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"p\">,</span> <span class=\"n\">collection_name</span><span class=\"p\">,</span> <span class=\"n\">data_model_version</span><span class=\"p\">):</span>\n        <span class=\"c1\"># provide object type class as de-serialisation class (providing from_json and to_json)</span>\n        <span class=\"nb\">super</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">mongo_url</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"p\">,</span> <span class=\"n\">collection_name</span><span class=\"p\">,</span> <span class=\"n\">MyObjectType</span><span class=\"p\">,</span> <span class=\"n\">data_model_version</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># create instance of store</span>\n<span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">MyObjectStore</span><span class=\"p\">(</span><span class=\"s2\">\"mongodb://localhost:27017\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mydb\"</span><span class=\"p\">,</span> <span class=\"s2\">\"colName\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create document using a dictionary</span>\n<span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"attribute1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"attribute2\"</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># or use the type</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">MyObjectType</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">doc_id</span> <span class=\"o\">=</span> <span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># update single document using helper functions</span>\n<span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">AbstractMongoStore</span><span class=\"o\">.</span><span class=\"n\">id_query</span><span class=\"p\">(</span><span class=\"n\">doc_id</span><span class=\"p\">),</span> \n             <span class=\"n\">AbstractMongoStore</span><span class=\"o\">.</span><span class=\"n\">set_update</span><span class=\"p\">([</span><span class=\"s2\">\"attribute1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"attribute2\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]))</span>\n\n\n<span class=\"c1\"># returns a list of MyObjectType objects matching the version</span>\n<span class=\"n\">list_of_results</span> <span class=\"o\">=</span> <span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">({</span> <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span> <span class=\"p\">})</span>\n</pre>\n<h3>BasicMonitor</h3>\n<p>An abstract class providing base-functionality for running monitors - threads that run a specific routine in a regular\ninterval. This can be an executor waiting for new tasks to be processed (and checking every 5 seconds) or a thread that\nmonitors some readout in a regular interval. The monitor is wrapped to re-start itself, in case of errors.</p>\n<p><strong>Example</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">BasicMonitor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyOwnMonitor</span><span class=\"p\">(</span><span class=\"n\">BasicMonitor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">monitor_id</span><span class=\"o\">=</span><span class=\"s2\">\"my_id\"</span><span class=\"p\">,</span> <span class=\"n\">wait_time</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># waits 5 seconds between each execution loop</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">running</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">:</span>\n            <span class=\"c1\"># your code goes here (example):</span>\n            <span class=\"c1\"># result = fetch_data(self.data)</span>\n            <span class=\"c1\"># store_result(result)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n</pre>\n<p>If you want to run in a regular interval, the <code>running</code> method needs to be slightly modified:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">BasicMonitor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyRegularOwnMonitor</span><span class=\"p\">(</span><span class=\"n\">BasicMonitor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">monitor_id</span><span class=\"o\">=</span><span class=\"s2\">\"another_id\"</span><span class=\"p\">,</span> <span class=\"n\">wait_time</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">run_interval</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># execute every 60 seconds</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">running</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">:</span>\n            <span class=\"n\">start_ts</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>  <span class=\"c1\"># capture start of loop</span>\n            <span class=\"c1\"># your code goes here (example):</span>\n            <span class=\"c1\"># result = do_something(self.data)</span>\n            <span class=\"c1\"># store_result(result)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">exec_duration</span><span class=\"o\">=</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_ts</span><span class=\"p\">))</span>  <span class=\"c1\"># include the execution duration</span>\n</pre>\n<p>You can also pass a custom logger as <code>custom_logger</code> argument to the constructor. By default it will use the\n<code>pbu.Logger</code> and log major events such as start/stop/restart and errors.</p>\n<p><strong>Manage and run monitor</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">start_monitor_thread</span><span class=\"p\">(</span><span class=\"n\">monitor</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Thread function to be run by the new thread.</span>\n<span class=\"sd\">    :param monitor: BasicMonitor - an instance of sub-class of BasicMonitor </span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># start the monitor</span>\n    <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># create monitor instance of your own class that implements BasicMonitor</span>\n<span class=\"n\">regular_monitor</span> <span class=\"o\">=</span> <span class=\"n\">MyRegularOwnMonitor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"some\"</span><span class=\"p\">:</span> <span class=\"s2\">\"data\"</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># create thread with start-up function and start it</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">start_monitor_thread</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">regular_monitor</span><span class=\"p\">,</span> <span class=\"p\">),</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># in a separate piece of code (e.g. REST handler or timer) you can stop the monitor instance</span>\n<span class=\"n\">regular_monitor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>Stopping a monitor doesn't interrupt the current thread. If the monitor is for example in a wait period and you send the\n<code>stop</code> signal, the thread will still run until the wait period passes.</p>\n<blockquote>\n<p><em>In an API scenario, I recommend using a <code>dict</code> or <code>list</code> to cache monitors and retrieve them via the API using the\n<code>to_json()</code> method for identification. This then allows you to signal starting / stopping of monitors by providing the\nmonitor ID and lookup the monitor instance in the monitor cache.</em></p>\n</blockquote>\n<p><strong><code>BasicMonitor</code> Methods</strong></p>\n<ul>\n<li><code>start()</code> - starts the monitor</li>\n<li><code>stop()</code> - stops the monitor</li>\n<li><code>to_json()</code> - returns a dictionary with basic monitor technical information (id, state, wait behaviour, etc)</li>\n<li><code>wait_till_midnight()</code> - waits till the next midnight in your machines time zone</li>\n<li><code>wait(exec_duration=0)</code> - waits for the time specified in the constructor and in case of <code>run_interval=True</code> for the\noptional <code>exec_duration</code>, if provided.</li>\n</ul>\n<h2>Functions</h2>\n<h3><code>list_to_json</code></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">list_to_json</span>\n\n<span class=\"c1\"># assuming we have `my_store` as an instance of MongoDB store or MySQL store, you can:</span>\n<span class=\"n\">list_of_dictionaries</span> <span class=\"o\">=</span> <span class=\"n\">list_to_json</span><span class=\"p\">(</span><span class=\"n\">item_list</span><span class=\"o\">=</span><span class=\"n\">my_store</span><span class=\"o\">.</span><span class=\"n\">get_all</span><span class=\"p\">())</span>  <span class=\"c1\"># output is a list of dictionaries</span>\n</pre>\n<p>This function operates on lists of objects inheriting from <code>AbstractMongoDocument</code> or <code>AbstractMysqlDocument</code> and\nconverts them into dictionaries using the <code>to_json()</code> method of any object passed into the function. Objects passed into\nthe function <em>require</em> the <code>to_json()</code> method and need to return the dictionary representation of the object. This\nfunction is just a mapping shortcut.</p>\n<h3><code>default_options</code></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">default_options</span>\n\n<span class=\"n\">DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"c\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">default_options</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">DEFAULTS</span><span class=\"p\">,</span> <span class=\"n\">override</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"c1\"># result is: {\"a\": 1, \"b\": 4, \"c\": 3, \"d\": 5}</span>\n</pre>\n<p>If you want to avoid additional keys other than the keys in DEFAULTS, you can provide a third argument:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbu</span> <span class=\"kn\">import</span> <span class=\"n\">default_options</span>\n\n<span class=\"n\">DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">default_options</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">DEFAULTS</span><span class=\"p\">,</span> <span class=\"n\">override</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span> <span class=\"n\">allow_unknown_keys</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># result is: {\"a\": 1, \"b\": 4}</span>\n</pre>\n\n          </div>"}, "last_serial": 7058548, "releases": {"0.3.10": [{"comment_text": "", "digests": {"md5": "42490d0f7c0fa61a6ff1bf8b1cf8d4de", "sha256": "aa76a712889253c4e75b260a7ae4d3b6a7f4dcdd8a6985b05dc4dab13d96ce77"}, "downloads": -1, "filename": "pbu-0.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "42490d0f7c0fa61a6ff1bf8b1cf8d4de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25453, "upload_time": "2019-11-08T01:57:14", "upload_time_iso_8601": "2019-11-08T01:57:14.639111Z", "url": "https://files.pythonhosted.org/packages/2e/7e/6f0a6f53b9e5ee18f542bc6b91b8c5b1b90f0702b9db1ce28dd2e88ae43e/pbu-0.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8324b1fb6b2edc392ac2edbe8cc4f4c", "sha256": "c541bf5cc2749a7febee15241d0ba207d502b987659bed991326df8854ffe69a"}, "downloads": -1, "filename": "pbu-0.3.10.tar.gz", "has_sig": false, "md5_digest": "d8324b1fb6b2edc392ac2edbe8cc4f4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21251, "upload_time": "2019-11-08T01:57:16", "upload_time_iso_8601": "2019-11-08T01:57:16.791086Z", "url": "https://files.pythonhosted.org/packages/df/b2/f0c6d209ff304ba59ab939f6f624ca5b73feeb88f94464f2064ebb533954/pbu-0.3.10.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "b75ecba3b21efef21ea0d9ccfb8fc1a4", "sha256": "b3da1f39ca1ea437544d24296863724c7d4dc2a8f3cec072266142df29b10b9a"}, "downloads": -1, "filename": "pbu-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b75ecba3b21efef21ea0d9ccfb8fc1a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25293, "upload_time": "2019-11-08T01:13:35", "upload_time_iso_8601": "2019-11-08T01:13:35.613397Z", "url": "https://files.pythonhosted.org/packages/df/ca/896cbb4d8f192ab3c5216bd081400432453cbad5f99a1cf9440760480cb8/pbu-0.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "800029bd72bc7e9fa558522b2e91eaea", "sha256": "a8439bcc4e45ea8a2b6bf460107964a7bdc71bcb0aea957149d6168b819bac07"}, "downloads": -1, "filename": "pbu-0.3.9.tar.gz", "has_sig": false, "md5_digest": "800029bd72bc7e9fa558522b2e91eaea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21110, "upload_time": "2019-11-08T01:13:37", "upload_time_iso_8601": "2019-11-08T01:13:37.555007Z", "url": "https://files.pythonhosted.org/packages/3b/35/e79ae3848593d193fa0a6ad934f39a6ceed02f1184e9a2d24b2e3348b971/pbu-0.3.9.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "36768d597c013c5385ff85f3bf7b60c8", "sha256": "623591245dd5d523503bccc64ad61e78a71b7c29e6d6c9caf746da99657cc467"}, "downloads": -1, "filename": "pbu-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36768d597c013c5385ff85f3bf7b60c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25581, "upload_time": "2019-11-14T02:48:24", "upload_time_iso_8601": "2019-11-14T02:48:24.120211Z", "url": "https://files.pythonhosted.org/packages/84/2e/0b9f7e2daab80622fa90e6cbbd54890944af18d30229b7419436dc0eb82d/pbu-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfefba13dcb53d55f1e1ef08380fdebe", "sha256": "4bca058353a02df70298edc8b5566be010c9299050a554f0c6332fbe35cc8051"}, "downloads": -1, "filename": "pbu-0.4.0.tar.gz", "has_sig": false, "md5_digest": "cfefba13dcb53d55f1e1ef08380fdebe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21429, "upload_time": "2019-11-14T02:48:27", "upload_time_iso_8601": "2019-11-14T02:48:27.467953Z", "url": "https://files.pythonhosted.org/packages/ef/db/2e0ccd0dd88780a841e8b03e8f8cd705f65bab2958f4e9d35f020081a4fb/pbu-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f0e045ec28b08a73f33c6017b40a76a0", "sha256": "9a11669cd002b1a3293670336e78f4afb02a860514d6f37aa163d340d0f1146a"}, "downloads": -1, "filename": "pbu-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0e045ec28b08a73f33c6017b40a76a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25640, "upload_time": "2019-11-15T02:35:39", "upload_time_iso_8601": "2019-11-15T02:35:39.234356Z", "url": "https://files.pythonhosted.org/packages/31/5c/e6226eab5ed39c187623e309f65ec6f057bbd668d99d8309a85b97b43948/pbu-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8060e528d336fe8e528e87e728cad04", "sha256": "38f05d9cd33f6d2779030e37b90ae112218a08039756fb22bb7732ad440aeb62"}, "downloads": -1, "filename": "pbu-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e8060e528d336fe8e528e87e728cad04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21545, "upload_time": "2019-11-15T02:35:41", "upload_time_iso_8601": "2019-11-15T02:35:41.042369Z", "url": "https://files.pythonhosted.org/packages/cd/7b/bb301659607422f8b03189bad63f5e63babb7d9f4739d88836f5078d21f6/pbu-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a7dc503a16bb0f9e25a80021e448fab4", "sha256": "dc707ac3181b870ef992e24174242b20f829f0740db583bd1e5baed8587f64e2"}, "downloads": -1, "filename": "pbu-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a7dc503a16bb0f9e25a80021e448fab4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27244, "upload_time": "2020-01-12T11:37:37", "upload_time_iso_8601": "2020-01-12T11:37:37.071241Z", "url": "https://files.pythonhosted.org/packages/9f/ef/5493cfdfb82571cecf5080354466273052cd51c4594b21fde1724fec4328/pbu-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8796500243c53e0c6ab8564b7ca5f6bd", "sha256": "21fccaa1bf52fe763fff16f79c403d33466aa2d750dac269d17fb271258d9852"}, "downloads": -1, "filename": "pbu-0.5.1.tar.gz", "has_sig": false, "md5_digest": "8796500243c53e0c6ab8564b7ca5f6bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19470, "upload_time": "2020-01-12T11:37:39", "upload_time_iso_8601": "2020-01-12T11:37:39.220194Z", "url": "https://files.pythonhosted.org/packages/14/79/5e4c7f18afc5260e9d37b0cf192e404266f97621a130b4a3e8cf9e5d0ada/pbu-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "eb4e9fb968cea3e8dad905b2e888d4e4", "sha256": "f66e20cc7cf56cef87741ea8b07fe55616a8d81d21feb97b970da9c9d2dfd33c"}, "downloads": -1, "filename": "pbu-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb4e9fb968cea3e8dad905b2e888d4e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30181, "upload_time": "2020-02-11T09:58:23", "upload_time_iso_8601": "2020-02-11T09:58:23.908668Z", "url": "https://files.pythonhosted.org/packages/0f/94/27d4a21f1cbc88a263cb48017c83338e2ac395863e64d709b467cc020231/pbu-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18d7a34ae6b3ab5a195ddd1b1de69094", "sha256": "1262be55527933bed94b0bd71e1ee29505761a88c00de33fc7831180034540d2"}, "downloads": -1, "filename": "pbu-0.6.0.tar.gz", "has_sig": false, "md5_digest": "18d7a34ae6b3ab5a195ddd1b1de69094", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22258, "upload_time": "2020-02-11T09:58:26", "upload_time_iso_8601": "2020-02-11T09:58:26.166380Z", "url": "https://files.pythonhosted.org/packages/78/2a/c0e8a89bc0d9e319ccd0757c8ad43ab120bef0e500ad49402b514c948caa/pbu-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "bed0cac4b79df3362b74945afcd98cfd", "sha256": "048dae12de4e67003707b82418d9759362d5be9c54507a92a446b620c0966f82"}, "downloads": -1, "filename": "pbu-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bed0cac4b79df3362b74945afcd98cfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30365, "upload_time": "2020-02-13T04:32:54", "upload_time_iso_8601": "2020-02-13T04:32:54.196415Z", "url": "https://files.pythonhosted.org/packages/e6/d8/4b61ad19934c00fe633d3303d9b1fc3ec961004b4095745825d249b0bacf/pbu-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02f3ab96398451d3791a81b97d143b39", "sha256": "774b53a0952c17808fc4d4806d8d0ad59550d0127f690a3b899ebe1b9875a735"}, "downloads": -1, "filename": "pbu-0.6.1.tar.gz", "has_sig": false, "md5_digest": "02f3ab96398451d3791a81b97d143b39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22415, "upload_time": "2020-02-13T04:32:56", "upload_time_iso_8601": "2020-02-13T04:32:56.351122Z", "url": "https://files.pythonhosted.org/packages/65/80/1000d5544f8f033309321497a449f4f5b380a368b2a2ee4896ffb9f40432/pbu-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "3527cd210729bc86a74d1268b22685d1", "sha256": "a2068abea3c1170b2d28e4f6a9851e97e7ccb5335fc1efeb799afa0fb8387e22"}, "downloads": -1, "filename": "pbu-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3527cd210729bc86a74d1268b22685d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31374, "upload_time": "2020-03-04T03:27:35", "upload_time_iso_8601": "2020-03-04T03:27:35.703066Z", "url": "https://files.pythonhosted.org/packages/e9/f0/3f126c4b95d05156e0e77756492ca3b9473cf4929efce6a747465fcdb653/pbu-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "931c1a1f8ea0169704e1aa8eb23a61fe", "sha256": "9764d1d08ac4e9283aee742d1ada7c9223d6cace1ae8382ef474bdfd0ad0d23b"}, "downloads": -1, "filename": "pbu-0.6.2.tar.gz", "has_sig": false, "md5_digest": "931c1a1f8ea0169704e1aa8eb23a61fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23322, "upload_time": "2020-03-04T03:27:38", "upload_time_iso_8601": "2020-03-04T03:27:38.100632Z", "url": "https://files.pythonhosted.org/packages/a3/7f/4d906d9e253a7cf77d884b975e9eb76926370cf6b07cb6f79f2c90534911/pbu-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "e1d4191928ded41a1309b58cceda0b38", "sha256": "bfaf842ccfe6207aa7fdd211ec44666cfa426b678d56c43c95057e4208f36386"}, "downloads": -1, "filename": "pbu-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e1d4191928ded41a1309b58cceda0b38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31413, "upload_time": "2020-03-17T11:17:12", "upload_time_iso_8601": "2020-03-17T11:17:12.991642Z", "url": "https://files.pythonhosted.org/packages/ba/38/b5c4008ed64d0974bae115e6068edf111a851d1f15faf0afd699e7abad87/pbu-0.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8b38f2c47e730fa5ad1aa65d6ec96ee", "sha256": "11b544bf15e75476fc217f03eca29efed2a0d6c68dc0e821d1fc086f7411a0d8"}, "downloads": -1, "filename": "pbu-0.6.3.tar.gz", "has_sig": false, "md5_digest": "f8b38f2c47e730fa5ad1aa65d6ec96ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23363, "upload_time": "2020-03-17T11:17:15", "upload_time_iso_8601": "2020-03-17T11:17:15.243181Z", "url": "https://files.pythonhosted.org/packages/6d/6d/1938c37138c016aad438ece8a10c494fcfbead12be3cc66a776ac3aa17d0/pbu-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "9d68997853df01ebf198a9ff67c6ff84", "sha256": "f257b58421352f07f85110fc700639b172f774412da6d93c453c375aeba415ae"}, "downloads": -1, "filename": "pbu-0.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9d68997853df01ebf198a9ff67c6ff84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29927, "upload_time": "2020-04-02T04:06:24", "upload_time_iso_8601": "2020-04-02T04:06:24.873251Z", "url": "https://files.pythonhosted.org/packages/1b/17/6ce4ce1c59be78d2dc5544b5641d6da7d2976fd81e405d616c95c6c960a9/pbu-0.6.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "912197518312435b4b77d028eb31b4b1", "sha256": "c85a7550312975b611ae4f4c8e58039e2576404fd236a98adfd21b67dbc57c3d"}, "downloads": -1, "filename": "pbu-0.6.4.tar.gz", "has_sig": false, "md5_digest": "912197518312435b4b77d028eb31b4b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23367, "upload_time": "2020-04-02T04:06:26", "upload_time_iso_8601": "2020-04-02T04:06:26.470833Z", "url": "https://files.pythonhosted.org/packages/bf/58/9de224ff403f24753a92b481ac6681368deddb8f6c183e93c37571b363ca/pbu-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "1c928d70c7134b842d6c39c7bec05347", "sha256": "93d431afc6fdb2390e3a561354f4c6f6639ed2fb0e273508bc52a2c8c2768916"}, "downloads": -1, "filename": "pbu-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1c928d70c7134b842d6c39c7bec05347", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30047, "upload_time": "2020-04-08T10:11:48", "upload_time_iso_8601": "2020-04-08T10:11:48.707343Z", "url": "https://files.pythonhosted.org/packages/85/c6/6bb6bce78393561c9b0bf429893859b283c0c61b7f568a41d5c777342748/pbu-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3dbd9990c110a81bde6d6a81331575", "sha256": "a535e172dfab37f205d6e113501c448dccc8a2b7bef9990fdac010265848854d"}, "downloads": -1, "filename": "pbu-0.6.5.tar.gz", "has_sig": false, "md5_digest": "7b3dbd9990c110a81bde6d6a81331575", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23508, "upload_time": "2020-04-08T10:11:50", "upload_time_iso_8601": "2020-04-08T10:11:50.228227Z", "url": "https://files.pythonhosted.org/packages/87/d3/da0dbd4e3f5f768ee2305ff6054dfa50136c32b8d9b8ae1a9e7147e81009/pbu-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "51ff992f93a004185a78a4b9cc0d2b52", "sha256": "d50ae95b9e8ea585be060bb6ca32a1efd01e9cb1d1d87864e45a7a77c23baa99"}, "downloads": -1, "filename": "pbu-0.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "51ff992f93a004185a78a4b9cc0d2b52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30050, "upload_time": "2020-04-20T08:54:34", "upload_time_iso_8601": "2020-04-20T08:54:34.600722Z", "url": "https://files.pythonhosted.org/packages/9f/d5/86d9fc32f694a0e0300ffd88439c1f7c1c062711a8ef8b94f59c08e5211d/pbu-0.6.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "461d875208b34c1b4a8d042b26997a87", "sha256": "6ef970312b3115c93b0cf2cfbecca951dc5f615eb7994e736a99e120f2e425bb"}, "downloads": -1, "filename": "pbu-0.6.6.tar.gz", "has_sig": false, "md5_digest": "461d875208b34c1b4a8d042b26997a87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27537, "upload_time": "2020-04-20T08:54:36", "upload_time_iso_8601": "2020-04-20T08:54:36.424499Z", "url": "https://files.pythonhosted.org/packages/f6/6d/99cfb5ed9de53987988edd3c033895ab12a019fa8f64cd5c776161e1e08c/pbu-0.6.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51ff992f93a004185a78a4b9cc0d2b52", "sha256": "d50ae95b9e8ea585be060bb6ca32a1efd01e9cb1d1d87864e45a7a77c23baa99"}, "downloads": -1, "filename": "pbu-0.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "51ff992f93a004185a78a4b9cc0d2b52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30050, "upload_time": "2020-04-20T08:54:34", "upload_time_iso_8601": "2020-04-20T08:54:34.600722Z", "url": "https://files.pythonhosted.org/packages/9f/d5/86d9fc32f694a0e0300ffd88439c1f7c1c062711a8ef8b94f59c08e5211d/pbu-0.6.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "461d875208b34c1b4a8d042b26997a87", "sha256": "6ef970312b3115c93b0cf2cfbecca951dc5f615eb7994e736a99e120f2e425bb"}, "downloads": -1, "filename": "pbu-0.6.6.tar.gz", "has_sig": false, "md5_digest": "461d875208b34c1b4a8d042b26997a87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27537, "upload_time": "2020-04-20T08:54:36", "upload_time_iso_8601": "2020-04-20T08:54:36.424499Z", "url": "https://files.pythonhosted.org/packages/f6/6d/99cfb5ed9de53987988edd3c033895ab12a019fa8f64cd5c776161e1e08c/pbu-0.6.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:33 2020"}