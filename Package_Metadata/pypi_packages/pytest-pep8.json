{"info": {"author": "Holger Krekel and Ronny Pfannschmidt", "author_email": "holger.krekel@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": ".. image:: https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/status.png\r\n   :target: https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/latest\r\n.. image:: https://pypip.in/v/pytest-pep8/badge.png\r\n   :target: https://pypi.python.org/pypi/pytest-pep8\r\n\r\npy.test plugin for efficiently checking PEP8 compliance \r\n=======================================================\r\n\r\nUsage\r\n-----\r\n\r\ninstall via::\r\n\r\n    pip install pytest-pep8\r\n\r\nif you then type::\r\n\r\n    py.test --pep8\r\n    \r\nevery file ending in ``.py`` will be discovered and pep8-checked, \r\nstarting from the command line arguments. \r\n\r\n.. warning::\r\n\r\n    Running pep8 tests on your project is likely to cause a lot of \r\n    issues.  This plugin allows to configure on a per-project and\r\n    per-file basis which errors or warnings to care about, see\r\n    pep8ignore_.  As a preliminary advise, if you have \r\n    projects where you don't want to care at all about pep8 checks, \r\n    you can put configure it like this::\r\n\r\n        # content of setup.cfg (or pytest.ini)\r\n        [pytest]\r\n        pep8ignore = * ALL\r\n\r\n\r\nA little example \r\n----------------\r\n\r\nIf you have a pep8-violating file like this::\r\n\r\n    # content of myfile.py\r\n \r\n    somefunc( 123,456)\r\n\r\nyou can run it with the plugin installed::\r\n\r\n    $ py.test --pep8\r\n    =========================== test session starts ============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py F\n    \n    ================================= FAILURES =================================\n    ________________________________ PEP8-check ________________________________\n    /tmp/doc-exec-2/myfile.py:2:10: E201 whitespace after '('\n    somefunc( 123,456)\n             ^\n    /tmp/doc-exec-2/myfile.py:2:14: E231 missing whitespace after ','\n    somefunc( 123,456)\n                 ^\n    \n    ========================= 1 failed in 0.00 seconds =========================\n\r\nFor the meaning of (E)rror and (W)arning codes, see the error\r\noutput when running against your files or checkout `pep8.py\r\n<https://github.com/jcrocholl/pep8/blob/master/pep8.py>`_.\r\n\r\nLet's not now fix the PEP8 errors::\r\n\r\n    # content of myfile.py\r\n    somefunc(123, 456)\r\n\r\nand run again::\r\n\r\n    $ py.test --pep8\r\n    =========================== test session starts ============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py .\n    \n    ========================= 1 passed in 0.00 seconds =========================\n\r\nthe pep8 check now is passing. Moreover, if\r\nyou run it once again (and report skip reasons)::\r\n\r\n    $ py.test --pep8 -rs \r\n    =========================== test session starts ============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py s\n    ========================= short test summary info ==========================\n    SKIP [1] /home/hpk/p/pytest-pep8/pytest_pep8.py:65: file(s) previously passed PEP8 checks\n    \n    ======================== 1 skipped in 0.00 seconds =========================\n\r\nyou can see that the pep8 check was skipped because\r\nthe file has not been modified since it was last checked.\r\nAs the pep8 plugin uses the \r\n`pytest-cache plugin <http://pypi.python.org/pypi/pytest-cache>`_\r\nto implement its caching, you can use its ``--clearcache`` option to \r\nremove all pytest caches, among them the pep8 related one, which \r\nwill trigger the pep8 checking code to run once again::\r\n\r\n    $ py.test --pep8 --clearcache\r\n    =========================== test session starts ============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\n    rootdir: /tmp/doc-exec-2, inifile: \n    plugins: pep8, cache\n    collected 1 items\n    \n    myfile.py .\n    \n    ========================= 1 passed in 0.00 seconds =========================\n\r\n.. _pep8ignore:\r\n\r\nConfiguring PEP8 options per project and file\r\n---------------------------------------------\r\n\r\nYou may configure PEP8-checking options for your project\r\nby adding an ``pep8ignore`` entry to your ``setup.cfg``\r\nor ``setup.cfg`` file like this::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8ignore = E201 E231\r\n\r\nThis would globally prevent complaints about two whitespace issues.\r\nRerunning with the above example will now look better::\r\n\r\n    $ py.test -q  --pep8\r\n    .\n    1 passed in 0.00 seconds\n\r\nIf you have some files where you want to specifically ignore \r\nsome errors or warnings you can start a pep8ignore line with \r\na glob-pattern and a space-separated list of codes::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8ignore = \r\n        *.py E201\r\n        doc/conf.py ALL\r\n\r\nSo if you have a conf.py like this::\r\n\r\n    # content of doc/conf.py\r\n\r\n    func (  [1,2,3]) #this line lots pep8 errors :)\r\n\r\nthen running again with the previous example will show a single\r\nfailure and it will ignore doc/conf.py alltogether::\r\n\r\n    $ py.test --pep8 -v # verbose shows what is ignored\r\n    =========================== test session starts ============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2 -- /home/hpk/venv/clean/bin/python\n    cachedir: /tmp/doc-exec-2/.cache\n    rootdir: /tmp/doc-exec-2, inifile: setup.cfg\n    plugins: pep8, cache\n    collecting ... collected 1 items\n    \n    myfile.py PASSED\n    \n    ========================= 1 passed in 0.01 seconds =========================\n\r\nNote that doc/conf.py was not considered or imported.\r\n\r\nIf you'ld like to have longer lines than 79 chars (which is the default for the\r\npep8 checker), you can configure it like this::\r\n\r\n    # content of setup.cfg\r\n    [pytest]\r\n    pep8maxlinelength = 99\r\n\r\nRunning PEP8 checks and no other tests\r\n--------------------------------------\r\n\r\nYou can also restrict your test run to only perform \"pep8\" tests\r\nand not any other tests by typing::\r\n\r\n    py.test --pep8 -m pep8\r\n\r\nThis will only run test items with the \"pep8\" marker which this\r\nplugins adds dynamically.\r\n\r\nNotes\r\n-----\r\n\r\nThe repository of this plugin is at http://bitbucket.org/pytest-dev/pytest-pep8\r\n\r\nFor more info on py.test see http://pytest.org\r\n\r\nThe code is partially based on Ronny Pfannschmidt's pytest-codecheckers plugin.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pytest-dev/pytest-pep8", "keywords": null, "license": "MIT license", "maintainer": null, "maintainer_email": null, "name": "pytest-pep8", "package_url": "https://pypi.org/project/pytest-pep8/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytest-pep8/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/pytest-dev/pytest-pep8"}, "release_url": "https://pypi.org/project/pytest-pep8/1.0.6/", "requires_dist": null, "requires_python": null, "summary": "pytest plugin to check PEP8 requirements", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/latest\" rel=\"nofollow\"><img alt=\"https://drone.io/bitbucket.org/pytest-dev/pytest-pep8/status.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d12f19246a22a2411144852bd7436d1b2b4e3e0b/68747470733a2f2f64726f6e652e696f2f6269746275636b65742e6f72672f7079746573742d6465762f7079746573742d706570382f7374617475732e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-pep8\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/pytest-pep8/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e86da0899705f494e0689b1ef19e19ebbb2f0d87/68747470733a2f2f70797069702e696e2f762f7079746573742d706570382f62616467652e706e67\"></a>\n<div id=\"py-test-plugin-for-efficiently-checking-pep8-compliance\">\n<h2>py.test plugin for efficiently checking PEP8 compliance</h2>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>install via:</p>\n<pre>pip install pytest-pep8\n</pre>\n<p>if you then type:</p>\n<pre>py.test --pep8\n</pre>\n<p>every file ending in <tt>.py</tt> will be discovered and pep8-checked,\nstarting from the command line arguments.</p>\n<div>\n<p>Warning</p>\n<p>Running pep8 tests on your project is likely to cause a lot of\nissues.  This plugin allows to configure on a per-project and\nper-file basis which errors or warnings to care about, see\n<a href=\"#pep8ignore\" rel=\"nofollow\">pep8ignore</a>.  As a preliminary advise, if you have\nprojects where you don\u2019t want to care at all about pep8 checks,\nyou can put configure it like this:</p>\n<pre># content of setup.cfg (or pytest.ini)\n[pytest]\npep8ignore = * ALL\n</pre>\n</div>\n</div>\n<div id=\"a-little-example\">\n<h3>A little example</h3>\n<p>If you have a pep8-violating file like this:</p>\n<pre># content of myfile.py\n\nsomefunc( 123,456)\n</pre>\n<p>you can run it with the plugin installed:</p>\n<pre>$ py.test --pep8\n=========================== test session starts ============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\nrootdir: /tmp/doc-exec-2, inifile:\nplugins: pep8, cache\ncollected 1 items\n\nmyfile.py F\n\n================================= FAILURES =================================\n________________________________ PEP8-check ________________________________\n/tmp/doc-exec-2/myfile.py:2:10: E201 whitespace after '('\nsomefunc( 123,456)\n         ^\n/tmp/doc-exec-2/myfile.py:2:14: E231 missing whitespace after ','\nsomefunc( 123,456)\n             ^\n\n========================= 1 failed in 0.00 seconds =========================\n</pre>\n<p>For the meaning of (E)rror and (W)arning codes, see the error\noutput when running against your files or checkout <a href=\"https://github.com/jcrocholl/pep8/blob/master/pep8.py\" rel=\"nofollow\">pep8.py</a>.</p>\n<p>Let\u2019s not now fix the PEP8 errors:</p>\n<pre># content of myfile.py\nsomefunc(123, 456)\n</pre>\n<p>and run again:</p>\n<pre>$ py.test --pep8\n=========================== test session starts ============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\nrootdir: /tmp/doc-exec-2, inifile:\nplugins: pep8, cache\ncollected 1 items\n\nmyfile.py .\n\n========================= 1 passed in 0.00 seconds =========================\n</pre>\n<p>the pep8 check now is passing. Moreover, if\nyou run it once again (and report skip reasons):</p>\n<pre>$ py.test --pep8 -rs\n=========================== test session starts ============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\nrootdir: /tmp/doc-exec-2, inifile:\nplugins: pep8, cache\ncollected 1 items\n\nmyfile.py s\n========================= short test summary info ==========================\nSKIP [1] /home/hpk/p/pytest-pep8/pytest_pep8.py:65: file(s) previously passed PEP8 checks\n\n======================== 1 skipped in 0.00 seconds =========================\n</pre>\n<p>you can see that the pep8 check was skipped because\nthe file has not been modified since it was last checked.\nAs the pep8 plugin uses the\n<a href=\"http://pypi.python.org/pypi/pytest-cache\" rel=\"nofollow\">pytest-cache plugin</a>\nto implement its caching, you can use its <tt><span class=\"pre\">--clearcache</span></tt> option to\nremove all pytest caches, among them the pep8 related one, which\nwill trigger the pep8 checking code to run once again:</p>\n<pre>$ py.test --pep8 --clearcache\n=========================== test session starts ============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2\nrootdir: /tmp/doc-exec-2, inifile:\nplugins: pep8, cache\ncollected 1 items\n\nmyfile.py .\n\n========================= 1 passed in 0.00 seconds =========================\n</pre>\n</div>\n<div id=\"configuring-pep8-options-per-project-and-file\">\n<span id=\"pep8ignore\"></span><h3>Configuring PEP8 options per project and file</h3>\n<p>You may configure PEP8-checking options for your project\nby adding an <tt>pep8ignore</tt> entry to your <tt>setup.cfg</tt>\nor <tt>setup.cfg</tt> file like this:</p>\n<pre># content of setup.cfg\n[pytest]\npep8ignore = E201 E231\n</pre>\n<p>This would globally prevent complaints about two whitespace issues.\nRerunning with the above example will now look better:</p>\n<pre>$ py.test -q  --pep8\n.\n1 passed in 0.00 seconds\n</pre>\n<p>If you have some files where you want to specifically ignore\nsome errors or warnings you can start a pep8ignore line with\na glob-pattern and a space-separated list of codes:</p>\n<pre># content of setup.cfg\n[pytest]\npep8ignore =\n    *.py E201\n    doc/conf.py ALL\n</pre>\n<p>So if you have a conf.py like this:</p>\n<pre># content of doc/conf.py\n\nfunc (  [1,2,3]) #this line lots pep8 errors :)\n</pre>\n<p>then running again with the previous example will show a single\nfailure and it will ignore doc/conf.py alltogether:</p>\n<pre>$ py.test --pep8 -v # verbose shows what is ignored\n=========================== test session starts ============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.30 -- pytest-2.7.2 -- /home/hpk/venv/clean/bin/python\ncachedir: /tmp/doc-exec-2/.cache\nrootdir: /tmp/doc-exec-2, inifile: setup.cfg\nplugins: pep8, cache\ncollecting ... collected 1 items\n\nmyfile.py PASSED\n\n========================= 1 passed in 0.01 seconds =========================\n</pre>\n<p>Note that doc/conf.py was not considered or imported.</p>\n<p>If you\u2019ld like to have longer lines than 79 chars (which is the default for the\npep8 checker), you can configure it like this:</p>\n<pre># content of setup.cfg\n[pytest]\npep8maxlinelength = 99\n</pre>\n</div>\n<div id=\"running-pep8-checks-and-no-other-tests\">\n<h3>Running PEP8 checks and no other tests</h3>\n<p>You can also restrict your test run to only perform \u201cpep8\u201d tests\nand not any other tests by typing:</p>\n<pre>py.test --pep8 -m pep8\n</pre>\n<p>This will only run test items with the \u201cpep8\u201d marker which this\nplugins adds dynamically.</p>\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>The repository of this plugin is at <a href=\"http://bitbucket.org/pytest-dev/pytest-pep8\" rel=\"nofollow\">http://bitbucket.org/pytest-dev/pytest-pep8</a></p>\n<p>For more info on py.test see <a href=\"http://pytest.org\" rel=\"nofollow\">http://pytest.org</a></p>\n<p>The code is partially based on Ronny Pfannschmidt\u2019s pytest-codecheckers plugin.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4149947, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "0537165b2a430e34075793af4888f78b", "sha256": "945ddaa707f9c76fd70b92f689def739af97bf005e623ea24a0a1ad778cc8930"}, "downloads": -1, "filename": "pytest-pep8-0.5.zip", "has_sig": false, "md5_digest": "0537165b2a430e34075793af4888f78b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6130, "upload_time": "2010-12-06T14:25:36", "upload_time_iso_8601": "2010-12-06T14:25:36.389619Z", "url": "https://files.pythonhosted.org/packages/5e/49/7f4fef1fbb47ca63a515a815ca3f0781a5993e32609a7ac10814d772e17a/pytest-pep8-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "6a61c132a1e32f107c89e9cbf12a5b3b", "sha256": "9c7a918025a9426bf69dc4e26001f31de82d8bad5aaa32d00ad9475662ca2d44"}, "downloads": -1, "filename": "pytest-pep8-0.6.zip", "has_sig": false, "md5_digest": "6a61c132a1e32f107c89e9cbf12a5b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6874, "upload_time": "2010-12-06T14:40:07", "upload_time_iso_8601": "2010-12-06T14:40:07.203499Z", "url": "https://files.pythonhosted.org/packages/f5/6b/f59d33c2a389d963f6392f0c64d813d9f9c7fa5c5f768404949b8c81dc66/pytest-pep8-0.6.zip", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "2c58f3b935c811c7887bda51ededf60e", "sha256": "2612a847ac76119911e92209a0f36b45e9faa994ce5673d05cfbb0e680b2058a"}, "downloads": -1, "filename": "pytest-pep8-0.7.zip", "has_sig": false, "md5_digest": "2c58f3b935c811c7887bda51ededf60e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6920, "upload_time": "2010-12-06T16:38:17", "upload_time_iso_8601": "2010-12-06T16:38:17.595211Z", "url": "https://files.pythonhosted.org/packages/84/4e/aaf53bb08b462b05f64db6db4a3635ef5e9f3a0bb6c36119ea76774e6d87/pytest-pep8-0.7.zip", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "a4a4ec02798fd80192eeeaa83bb67f0a", "sha256": "fe8586e024c71fee7bd935b0382ce12c5de1ae9731b19e8d904a345cb9e9d1cf"}, "downloads": -1, "filename": "pytest-pep8-0.8.zip", "has_sig": false, "md5_digest": "a4a4ec02798fd80192eeeaa83bb67f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6902, "upload_time": "2012-05-23T14:57:46", "upload_time_iso_8601": "2012-05-23T14:57:46.362357Z", "url": "https://files.pythonhosted.org/packages/6f/6b/9bf9496d3bc0742f81bfc1f8ce97b1905dfe03edd54ae0af0bfc6387bd58/pytest-pep8-0.8.zip", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "058ce13fb4498c9ae39bc6a4a86fd8ba", "sha256": "21ac37804031e5546159d58a48da9f7e14faeaba5312922ac6dde77e05b7f431"}, "downloads": -1, "filename": "pytest-pep8-0.9.zip", "has_sig": false, "md5_digest": "058ce13fb4498c9ae39bc6a4a86fd8ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6907, "upload_time": "2012-06-16T17:37:29", "upload_time_iso_8601": "2012-06-16T17:37:29.963975Z", "url": "https://files.pythonhosted.org/packages/0a/6b/c5049e8e528d591fb9175d8ec4da56c6ff6df28e80c21d78bbca6cf0c0ed/pytest-pep8-0.9.zip", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "084ed49a45bd21cdf2d70823115863ec", "sha256": "4f5ad9756817569bc29184654f951ad67a42ad72e468f2806aa55e42bdc83cfa"}, "downloads": -1, "filename": "pytest-pep8-0.9.1.zip", "has_sig": false, "md5_digest": "084ed49a45bd21cdf2d70823115863ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6958, "upload_time": "2012-06-16T17:39:24", "upload_time_iso_8601": "2012-06-16T17:39:24.207814Z", "url": "https://files.pythonhosted.org/packages/0a/ff/7c48ca16b150687385ac8e6dd8751b51d07c7740d44712cf5f516a12ab25/pytest-pep8-0.9.1.zip", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "5a60978e5d19ce713cb47c4251b40cdf", "sha256": "d738ef5c6fcacb373e1b355ea2a35827b015d61cb5550e828a0713d500cac9ff"}, "downloads": -1, "filename": "pytest-pep8-1.0.zip", "has_sig": false, "md5_digest": "5a60978e5d19ce713cb47c4251b40cdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9529, "upload_time": "2012-06-20T22:36:45", "upload_time_iso_8601": "2012-06-20T22:36:45.116557Z", "url": "https://files.pythonhosted.org/packages/60/9e/0f6a137e87e14b9f6637ea379d99fe6495bb77d660c8521eafe2b35e4b32/pytest-pep8-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "afad4e88a4597febe6baf6c15f613bc8", "sha256": "29b2219a30ac3cb000e34de078171e3d1d773d2ef66b61d8d60c3733887efe02"}, "downloads": -1, "filename": "pytest-pep8-1.0.1.zip", "has_sig": false, "md5_digest": "afad4e88a4597febe6baf6c15f613bc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9606, "upload_time": "2012-06-21T10:28:51", "upload_time_iso_8601": "2012-06-21T10:28:51.062577Z", "url": "https://files.pythonhosted.org/packages/51/77/90269b8defdf5afb44c621e10ae3360e83751f6f8f5bf797b701937f7789/pytest-pep8-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a4bdfb03cdfa7c37034e29405d7f350a", "sha256": "cda871b3a77ea77e6d81c80e6b69a9640364dc2b356a75f4caf6a96f7a3ff7cd"}, "downloads": -1, "filename": "pytest-pep8-1.0.2.zip", "has_sig": false, "md5_digest": "a4bdfb03cdfa7c37034e29405d7f350a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9628, "upload_time": "2012-06-24T15:24:05", "upload_time_iso_8601": "2012-06-24T15:24:05.517123Z", "url": "https://files.pythonhosted.org/packages/56/5d/971d21605cf50d2a9a347b270e4c6086a27f520fef9bca12a8306e39b76a/pytest-pep8-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "dbb38dd33fb57134d13feb6d6b2d7aa1", "sha256": "2e44bd48f25aeea65591c1b42e258b6231669a6c00f7a3d2cd5952c3e0f3cd4e"}, "downloads": -1, "filename": "pytest-pep8-1.0.3.zip", "has_sig": false, "md5_digest": "dbb38dd33fb57134d13feb6d6b2d7aa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13198, "upload_time": "2012-11-06T15:02:27", "upload_time_iso_8601": "2012-11-06T15:02:27.180482Z", "url": "https://files.pythonhosted.org/packages/9b/30/ccc2b2043222333db499c766a3f2a3e9e58f145fed02e9c3a589d86fd1a2/pytest-pep8-1.0.3.zip", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ff74c592d96b36972a4b8f12d0cb975d", "sha256": "f93c049db6fb30084ed3115e25fd48666ef277f35bd26966e1af72e5ec03a219"}, "downloads": -1, "filename": "pytest-pep8-1.0.4.zip", "has_sig": false, "md5_digest": "ff74c592d96b36972a4b8f12d0cb975d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13254, "upload_time": "2012-11-29T20:22:47", "upload_time_iso_8601": "2012-11-29T20:22:47.267996Z", "url": "https://files.pythonhosted.org/packages/dc/84/527760f106e787359e28bfda0d3401c718c84adb2d3013f36ecef2f8edcb/pytest-pep8-1.0.4.zip", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "6199353734615fde47d1fbfef1ebc737", "sha256": "68964fbe84b5fb4cfd91fb4c821281d3ff76c8eedcf7949740990d8087932e84"}, "downloads": -1, "filename": "pytest-pep8-1.0.5.tar.gz", "has_sig": false, "md5_digest": "6199353734615fde47d1fbfef1ebc737", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7180, "upload_time": "2013-10-04T12:59:23", "upload_time_iso_8601": "2013-10-04T12:59:23.627985Z", "url": "https://files.pythonhosted.org/packages/ab/95/7da1883e97c02a713f97e09115e1b7394437e195819bb96489eb08e5ac2f/pytest-pep8-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "3debd0bac8f63532ae70c7351e73e993", "sha256": "032ef7e5fa3ac30f4458c73e05bb67b0f036a8a5cb418a534b3170f89f120318"}, "downloads": -1, "filename": "pytest-pep8-1.0.6.tar.gz", "has_sig": false, "md5_digest": "3debd0bac8f63532ae70c7351e73e993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7271, "upload_time": "2014-04-27T06:21:28", "upload_time_iso_8601": "2014-04-27T06:21:28.945626Z", "url": "https://files.pythonhosted.org/packages/1f/1c/c834344ef39381558b047bea1e3005197fa8457c199d58219996ca07defb/pytest-pep8-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3debd0bac8f63532ae70c7351e73e993", "sha256": "032ef7e5fa3ac30f4458c73e05bb67b0f036a8a5cb418a534b3170f89f120318"}, "downloads": -1, "filename": "pytest-pep8-1.0.6.tar.gz", "has_sig": false, "md5_digest": "3debd0bac8f63532ae70c7351e73e993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7271, "upload_time": "2014-04-27T06:21:28", "upload_time_iso_8601": "2014-04-27T06:21:28.945626Z", "url": "https://files.pythonhosted.org/packages/1f/1c/c834344ef39381558b047bea1e3005197fa8457c199d58219996ca07defb/pytest-pep8-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:53 2020"}