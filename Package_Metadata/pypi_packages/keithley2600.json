{"info": {"author": "Sam Schott", "author_email": "ss2151@cam.ac.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![PyPI Release](https://img.shields.io/pypi/v/keithley2600.svg)](https://pypi.org/pypi/keithley2600/)\n[![Downloads](https://pepy.tech/badge/keithley2600)](https://pepy.tech/project/keithley2600)\n[![Build Status](https://travis-ci.com/OE-FET/keithley2600.svg?branch=master)](https://travis-ci.com/OE-FET/keithley2600)\n[![Documentation Status](https://readthedocs.org/projects/keithley2600/badge/?version=latest)](https://keithley2600.readthedocs.io/en/latest/?badge=latest)\n\n**Warning:** From version 1.3.2, keithley2600 only support Python 3.6 and higher. Install version 1.3.1 if\nyou require support for Python 2.7.\n\n# keithley2600\nA full Python driver for the Keithley 2600 series of source measurement units.\n\n## About\nkeithley2600 provides access to base functions and higher level functions such as IV\nmeasurements, transfer and output curves, etc. Base commands replicate the functionality\nand syntax from the Keithley's internal TSP functions, which have a syntax similar to\nPython.\n\n*Warning:*\n\nThere are currently only heuristic checks for allowed commands and arguments by the driver\nitself. See the [Keithley 2600 reference manual](https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8)\nfor all available commands. To enable command checking, set the keyword argument argument\n`raise_keithley_errors = True` in the constructor. When `raise_keithley_errors` is set,\nall invalid commands will be raised as Python errors. This is done by reading the\nKeithley's error queue after every command and will therefore result in significant\ncommunication overhead.\n\nAlmost all Keithley TSP commands can be used with this driver. Not supported are:\n\n* All Keithley IV sweep commands. We implement our own in the `Keithley2600` class.\n* Keithley TSP functions that have the same name as a Keithley TSP attribute (and vice\n  versa). The driver cannot decide whether to handle them as a function call or as an\n  attribute access. Currently, there is only one such case:\n  - `io.output()` has been dropped because it conflicts with `smuX.source.output`, which\n    is more commonly used.\n* Keithley TSP commands that have the same name as built-in attributes of the driver.\n  Currently, this is only:\n  - `lan.trigger[N].connected`: conflicts with the attribute `Keithley2600.connected`.\n\n\n## Installation\nInstall the stable version from PyPi by running\n```console\n$ pip install keithley2600\n```\nor the latest development version from GitHub:\n```console\n$ pip install git+https://github.com/OE-FET/keithley2600\n```\n\n## Usage\n\nConnect to the Keithley 2600 and perform some base commands:\n```python\nfrom keithley2600 import Keithley2600\n\nk = Keithley2600('TCPIP0::192.168.2.121::INSTR')\n\nk.smua.source.output = k.smua.OUTPUT_ON   # turn on SMUA\nk.smua.source.levelv = -40  # sets SMUA source level to -40V\nv = k.smua.measure.v()  # measures and returns the SMUA voltage\ni = k.smua.measure.i()  # measures current at smuA\n\nk.smua.measure.v(k.smua.nvbuffer1)  # measures the voltage, stores the result in buffer\nk.smua.nvbuffer1.clear()  # clears nvbuffer1 of SMUA\n```\nHigher level commands defined in the driver:\n\n```python\ndata = k.readBuffer(k.smua.nvbuffer1)  # reads all entries from nvbuffer1 of SMUA\nerrs = k.readErrorQueue()  # gets all entries from error queue\n\nk.setIntegrationTime(k.smua, 0.001)  # sets integration time in sec\nk.applyVoltage(k.smua, 10)  # turns on and applies 10V to SMUA\nk.applyCurrent(k.smub, 0.1)  # sources 0.1A from SMUB\nk.rampToVoltage(k.smua, 10, delay=0.1, stepSize=1)  # ramps SMUA to 10V in steps of 1V\n\n# sweep commands\nk.voltageSweepSingleSMU(k.smua, range(0, 61), t_int=0.1,\n                        delay=-1, pulsed=False)\nk.voltageSweepDualSMU(smu1=k.smua, smu2=k.smub, smu1_sweeplist=range(0, 61),\n                      smu2_sweeplist=range(0, 61), t_int=0.1, delay=-1, pulsed=False)\nk.transferMeasurement( ... )\nk.outputMeasurement( ... )\n```\n\n*Singleton behaviour:*\n\nOnce a Keithley2600 instance with a visa address `'address'` has been created, repeated\ncalls to `Keithley2600('address')` will return the existing instance instead of creating a\nnew one. This prevents the user from opening multiple connections to the same instrument\nsimultaneously and allows easy access to a Keithley2600 instance from different parts of a\nprogram. For example:\n\n```python\n>>> from keithley2600 import Keithley2600\n>>> k1 = Keithley2600('TCPIP0::192.168.2.121::INSTR')\n>>> k2 = Keithley2600('TCPIP0::192.168.2.121::INSTR')\n>>> print(k1 is k2)\nTrue\n```\n\n*Data structures:*\n\nThe methods `voltageSweepSingleSMU` and `voltageSweepDualSMU` return lists with the\nmeasured voltages and currents. The higher level commands `transferMeasurement` and\n`outputMeasurement` return `ResultTable` objects which are somewhat similar to pandas\ndataframes but include support for column units. `ResultTable` stores the measurement\ndata internally as a numpy array and provides information about column titles and units.\nIt also provides a dictionary-like interface to access columns by name, methods to load\nand save the data to text files, and live plotting of the data (requires matplotlib).\n\nFor example:\n```python\nimport time\nfrom  keithley2600 import Keithley2600, ResultTable\n\nk = Keithley2600('TCPIP0::192.168.2.121::INSTR')\n\n# create ResultTable with two columns\nrt = ResultTable(column_titles=['Voltage', 'Current'], units=['V', 'A'],\n                 params={'recorded': time.asctime(), 'sweep_type': 'iv'})\n\n# create live plot which updates as data is added\nrt.plot(live=True)\n\n# measure some currents\nfor v in range(0, 20):\n    k.applyVoltage(k.smua, 10)\n    i = k.smua.measure.i()\n    rt.append_row([v, i])\n\n# save the data\nrt.save('~/iv_curve.txt')\n```\n\nSee the [documentation](https://keithley2600.readthedocs.io/en/latest/api/result_table.html)\nfor all available methods.\n\n## Backend selection\n\nkeithley2600 uses [PyVISA](https://pyvisa.readthedocs.io/) to connect to instruments.\nPyVISA supports both proprietray IVI libraries such as NI-VISA, Keysight VISA, R&S VISA,\ntekVISA etc. and the purely Python backend [PyVISA-py](https://pyvisa-py.readthedocs.io/en/latest/).\nYou can select a specific backend by giving its path to the `Keithley2600` constructor\nin the `visa_library` argument. For example:\n\n```python\nfrom  keithley2600 import Keithley2600\n\nk = Keithley2600('TCPIP0::192.168.2.121::INSTR', visa_library='/usr/lib/libvisa.so.7')\n```\n\nkeithley2600 defaults to using the PyVISA-py backend, selected by `visa_library='@py'`,\nsince this is only a pip-install away. If you pass an empty string, keithley2600 will use\nan installed IVI library if it can find one in standard locations and fall back to\nPyVISA-py otherwise.\n\nYou can find more information about selecting the backend in the\n[PyVISA docs](https://pyvisa.readthedocs.io/en/latest/introduction/configuring.html).\n\n## System requirements\n\n- Python 3.6 and higher\n\n##  Documentation\n\n* API documentation of keithley2600: [https://keithley2600.readthedocs.io/en/latest/](https://keithley2600.readthedocs.io/en/latest/)\n\n* Keithley 2600 reference manual with all commands: [https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8](https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OE-FET/keithley2600.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keithley2600", "package_url": "https://pypi.org/project/keithley2600/", "platform": "", "project_url": "https://pypi.org/project/keithley2600/", "project_urls": {"Homepage": "https://github.com/OE-FET/keithley2600.git"}, "release_url": "https://pypi.org/project/keithley2600/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Full Python driver for the Keithley 2600 series.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/pypi/keithley2600/\" rel=\"nofollow\"><img alt=\"PyPI Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fd7681a527e42b8b2b8b65fbc2d5e0c2289076f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b656974686c6579323630302e737667\"></a>\n<a href=\"https://pepy.tech/project/keithley2600\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b751af8ee9aa82829d88937d3ea45d180a734e6/68747470733a2f2f706570792e746563682f62616467652f6b656974686c657932363030\"></a>\n<a href=\"https://travis-ci.com/OE-FET/keithley2600\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51f277afa1d9d70d0293377eb9e4fa84a63c0cd2/68747470733a2f2f7472617669732d63692e636f6d2f4f452d4645542f6b656974686c6579323630302e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://keithley2600.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/160f94b972a020476bf5dd04b1e0e1909d1dd6d4/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6b656974686c6579323630302f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><strong>Warning:</strong> From version 1.3.2, keithley2600 only support Python 3.6 and higher. Install version 1.3.1 if\nyou require support for Python 2.7.</p>\n<h1>keithley2600</h1>\n<p>A full Python driver for the Keithley 2600 series of source measurement units.</p>\n<h2>About</h2>\n<p>keithley2600 provides access to base functions and higher level functions such as IV\nmeasurements, transfer and output curves, etc. Base commands replicate the functionality\nand syntax from the Keithley's internal TSP functions, which have a syntax similar to\nPython.</p>\n<p><em>Warning:</em></p>\n<p>There are currently only heuristic checks for allowed commands and arguments by the driver\nitself. See the <a href=\"https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8\" rel=\"nofollow\">Keithley 2600 reference manual</a>\nfor all available commands. To enable command checking, set the keyword argument argument\n<code>raise_keithley_errors = True</code> in the constructor. When <code>raise_keithley_errors</code> is set,\nall invalid commands will be raised as Python errors. This is done by reading the\nKeithley's error queue after every command and will therefore result in significant\ncommunication overhead.</p>\n<p>Almost all Keithley TSP commands can be used with this driver. Not supported are:</p>\n<ul>\n<li>All Keithley IV sweep commands. We implement our own in the <code>Keithley2600</code> class.</li>\n<li>Keithley TSP functions that have the same name as a Keithley TSP attribute (and vice\nversa). The driver cannot decide whether to handle them as a function call or as an\nattribute access. Currently, there is only one such case:\n<ul>\n<li><code>io.output()</code> has been dropped because it conflicts with <code>smuX.source.output</code>, which\nis more commonly used.</li>\n</ul>\n</li>\n<li>Keithley TSP commands that have the same name as built-in attributes of the driver.\nCurrently, this is only:\n<ul>\n<li><code>lan.trigger[N].connected</code>: conflicts with the attribute <code>Keithley2600.connected</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Install the stable version from PyPi by running</p>\n<pre><span class=\"gp\">$</span> pip install keithley2600\n</pre>\n<p>or the latest development version from GitHub:</p>\n<pre><span class=\"gp\">$</span> pip install git+https://github.com/OE-FET/keithley2600\n</pre>\n<h2>Usage</h2>\n<p>Connect to the Keithley 2600 and perform some base commands:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keithley2600</span> <span class=\"kn\">import</span> <span class=\"n\">Keithley2600</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Keithley2600</span><span class=\"p\">(</span><span class=\"s1\">'TCPIP0::192.168.2.121::INSTR'</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">OUTPUT_ON</span>   <span class=\"c1\"># turn on SMUA</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">levelv</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">40</span>  <span class=\"c1\"># sets SMUA source level to -40V</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">()</span>  <span class=\"c1\"># measures and returns the SMUA voltage</span>\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span>  <span class=\"c1\"># measures current at smuA</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">nvbuffer1</span><span class=\"p\">)</span>  <span class=\"c1\"># measures the voltage, stores the result in buffer</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">nvbuffer1</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>  <span class=\"c1\"># clears nvbuffer1 of SMUA</span>\n</pre>\n<p>Higher level commands defined in the driver:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">readBuffer</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">nvbuffer1</span><span class=\"p\">)</span>  <span class=\"c1\"># reads all entries from nvbuffer1 of SMUA</span>\n<span class=\"n\">errs</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">readErrorQueue</span><span class=\"p\">()</span>  <span class=\"c1\"># gets all entries from error queue</span>\n\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">setIntegrationTime</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"mf\">0.001</span><span class=\"p\">)</span>  <span class=\"c1\"># sets integration time in sec</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">applyVoltage</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># turns on and applies 10V to SMUA</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">applyCurrent</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smub</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>  <span class=\"c1\"># sources 0.1A from SMUB</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">rampToVoltage</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">stepSize</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># ramps SMUA to 10V in steps of 1V</span>\n\n<span class=\"c1\"># sweep commands</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">voltageSweepSingleSMU</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">),</span> <span class=\"n\">t_int</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n                        <span class=\"n\">delay</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pulsed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">voltageSweepDualSMU</span><span class=\"p\">(</span><span class=\"n\">smu1</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"n\">smu2</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smub</span><span class=\"p\">,</span> <span class=\"n\">smu1_sweeplist</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">),</span>\n                      <span class=\"n\">smu2_sweeplist</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">),</span> <span class=\"n\">t_int</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pulsed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">transferMeasurement</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">outputMeasurement</span><span class=\"p\">(</span> <span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre>\n<p><em>Singleton behaviour:</em></p>\n<p>Once a Keithley2600 instance with a visa address <code>'address'</code> has been created, repeated\ncalls to <code>Keithley2600('address')</code> will return the existing instance instead of creating a\nnew one. This prevents the user from opening multiple connections to the same instrument\nsimultaneously and allows easy access to a Keithley2600 instance from different parts of a\nprogram. For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">keithley2600</span> <span class=\"kn\">import</span> <span class=\"n\">Keithley2600</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">Keithley2600</span><span class=\"p\">(</span><span class=\"s1\">'TCPIP0::192.168.2.121::INSTR'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">Keithley2600</span><span class=\"p\">(</span><span class=\"s1\">'TCPIP0::192.168.2.121::INSTR'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k1</span> <span class=\"ow\">is</span> <span class=\"n\">k2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p><em>Data structures:</em></p>\n<p>The methods <code>voltageSweepSingleSMU</code> and <code>voltageSweepDualSMU</code> return lists with the\nmeasured voltages and currents. The higher level commands <code>transferMeasurement</code> and\n<code>outputMeasurement</code> return <code>ResultTable</code> objects which are somewhat similar to pandas\ndataframes but include support for column units. <code>ResultTable</code> stores the measurement\ndata internally as a numpy array and provides information about column titles and units.\nIt also provides a dictionary-like interface to access columns by name, methods to load\nand save the data to text files, and live plotting of the data (requires matplotlib).</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span>  <span class=\"nn\">keithley2600</span> <span class=\"kn\">import</span> <span class=\"n\">Keithley2600</span><span class=\"p\">,</span> <span class=\"n\">ResultTable</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Keithley2600</span><span class=\"p\">(</span><span class=\"s1\">'TCPIP0::192.168.2.121::INSTR'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create ResultTable with two columns</span>\n<span class=\"n\">rt</span> <span class=\"o\">=</span> <span class=\"n\">ResultTable</span><span class=\"p\">(</span><span class=\"n\">column_titles</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Voltage'</span><span class=\"p\">,</span> <span class=\"s1\">'Current'</span><span class=\"p\">],</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">],</span>\n                 <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'recorded'</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">asctime</span><span class=\"p\">(),</span> <span class=\"s1\">'sweep_type'</span><span class=\"p\">:</span> <span class=\"s1\">'iv'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># create live plot which updates as data is added</span>\n<span class=\"n\">rt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">live</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># measure some currents</span>\n<span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">applyVoltage</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">smua</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">()</span>\n    <span class=\"n\">rt</span><span class=\"o\">.</span><span class=\"n\">append_row</span><span class=\"p\">([</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># save the data</span>\n<span class=\"n\">rt</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'~/iv_curve.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>See the <a href=\"https://keithley2600.readthedocs.io/en/latest/api/result_table.html\" rel=\"nofollow\">documentation</a>\nfor all available methods.</p>\n<h2>Backend selection</h2>\n<p>keithley2600 uses <a href=\"https://pyvisa.readthedocs.io/\" rel=\"nofollow\">PyVISA</a> to connect to instruments.\nPyVISA supports both proprietray IVI libraries such as NI-VISA, Keysight VISA, R&amp;S VISA,\ntekVISA etc. and the purely Python backend <a href=\"https://pyvisa-py.readthedocs.io/en/latest/\" rel=\"nofollow\">PyVISA-py</a>.\nYou can select a specific backend by giving its path to the <code>Keithley2600</code> constructor\nin the <code>visa_library</code> argument. For example:</p>\n<pre><span class=\"kn\">from</span>  <span class=\"nn\">keithley2600</span> <span class=\"kn\">import</span> <span class=\"n\">Keithley2600</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">Keithley2600</span><span class=\"p\">(</span><span class=\"s1\">'TCPIP0::192.168.2.121::INSTR'</span><span class=\"p\">,</span> <span class=\"n\">visa_library</span><span class=\"o\">=</span><span class=\"s1\">'/usr/lib/libvisa.so.7'</span><span class=\"p\">)</span>\n</pre>\n<p>keithley2600 defaults to using the PyVISA-py backend, selected by <code>visa_library='@py'</code>,\nsince this is only a pip-install away. If you pass an empty string, keithley2600 will use\nan installed IVI library if it can find one in standard locations and fall back to\nPyVISA-py otherwise.</p>\n<p>You can find more information about selecting the backend in the\n<a href=\"https://pyvisa.readthedocs.io/en/latest/introduction/configuring.html\" rel=\"nofollow\">PyVISA docs</a>.</p>\n<h2>System requirements</h2>\n<ul>\n<li>Python 3.6 and higher</li>\n</ul>\n<h2>Documentation</h2>\n<ul>\n<li>\n<p>API documentation of keithley2600: <a href=\"https://keithley2600.readthedocs.io/en/latest/\" rel=\"nofollow\">https://keithley2600.readthedocs.io/en/latest/</a></p>\n</li>\n<li>\n<p>Keithley 2600 reference manual with all commands: <a href=\"https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8\" rel=\"nofollow\">https://www.tek.com/keithley-source-measure-units/smu-2600b-series-sourcemeter-manual-8</a></p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6755553, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "24f5b9cd77fa5cbc9b00a77bb91c9967", "sha256": "a660921d98474ab6fcd3a991373c99913c19db7d5e5a50cd1f86af001cd7111c"}, "downloads": -1, "filename": "keithley2600-1.1.0.tar.gz", "has_sig": false, "md5_digest": "24f5b9cd77fa5cbc9b00a77bb91c9967", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24038, "upload_time": "2019-01-31T19:21:31", "upload_time_iso_8601": "2019-01-31T19:21:31.445313Z", "url": "https://files.pythonhosted.org/packages/0c/cf/7d27b4c38e2137b7f8628a428276502dd22bb67fb1656ee9ef33f641d4aa/keithley2600-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ea306055e9ada229ba97ad8c2c49b4ac", "sha256": "d0316dbc576b766a203b0b6791611ca64095dda114fd138f1e1be73590f9e1e3"}, "downloads": -1, "filename": "keithley2600-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ea306055e9ada229ba97ad8c2c49b4ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25247, "upload_time": "2019-05-01T20:17:06", "upload_time_iso_8601": "2019-05-01T20:17:06.743374Z", "url": "https://files.pythonhosted.org/packages/a0/3a/2a2065cb5b549fcac1d431c8de95de0449107ea9f1c0d5b9759b8bec596d/keithley2600-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4d4def487d50ded1cb15accb0a530869", "sha256": "746763bb7e78826fdb4987386ad6be4fe23f799ab445f391c2c9c8af5b7ef545"}, "downloads": -1, "filename": "keithley2600-1.2.0.tar.gz", "has_sig": false, "md5_digest": "4d4def487d50ded1cb15accb0a530869", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27455, "upload_time": "2019-05-16T14:48:13", "upload_time_iso_8601": "2019-05-16T14:48:13.752974Z", "url": "https://files.pythonhosted.org/packages/78/f1/addf0a94160bd2ed30d8c72022769a2d3b946e2caa413f245c5db95de696/keithley2600-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5a14b2b297a5a22ae12d18db91e08ce1", "sha256": "b92a3f43472862863861e50fdc1ad9da3f0ee7b1e1adc27b3f3ac7fef7276ccf"}, "downloads": -1, "filename": "keithley2600-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5a14b2b297a5a22ae12d18db91e08ce1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27581, "upload_time": "2019-05-20T13:18:07", "upload_time_iso_8601": "2019-05-20T13:18:07.504329Z", "url": "https://files.pythonhosted.org/packages/8f/a5/273327f59a1e622c21f2e3d809598fa3c872b5bd2d1ff422d369bbad6c06/keithley2600-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f8160dd45ab4bd10c57abe36474781b", "sha256": "36da1ce278809b82fb513bc47d46a3f21420cf55e604975fb860ce0ae3e3e59d"}, "downloads": -1, "filename": "keithley2600-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7f8160dd45ab4bd10c57abe36474781b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27502, "upload_time": "2019-05-20T13:18:10", "upload_time_iso_8601": "2019-05-20T13:18:10.207466Z", "url": "https://files.pythonhosted.org/packages/e3/44/710d7c1a4d928c54339ce03fc61dde20c95180414bc11a1ee58d8d0a5029/keithley2600-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "16af1e6dacc1391dcc1e8448657bd984", "sha256": "aa0e64c3dea1520ab7c7c2a2b0cff72b7e1ee444819017843fd3da5810ebfd59"}, "downloads": -1, "filename": "keithley2600-1.2.2.tar.gz", "has_sig": false, "md5_digest": "16af1e6dacc1391dcc1e8448657bd984", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28012, "upload_time": "2019-06-27T12:38:58", "upload_time_iso_8601": "2019-06-27T12:38:58.803973Z", "url": "https://files.pythonhosted.org/packages/f8/ab/a91b1a236cbfaca7bdd4a31f78ffcdbbe3b9bfd3b4890cddbb0063c7e482/keithley2600-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "9bdb61348eed1930abefec5872864943", "sha256": "f076dbb82544452a12556f02ac851ce8c0c403ebf8e4f8ab47f67a0e974c212d"}, "downloads": -1, "filename": "keithley2600-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bdb61348eed1930abefec5872864943", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27872, "upload_time": "2019-07-19T19:32:19", "upload_time_iso_8601": "2019-07-19T19:32:19.415462Z", "url": "https://files.pythonhosted.org/packages/51/ae/b19f5af823f5313f777e68094d2e23f86bb8634288f68c253a49a375fe1b/keithley2600-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd0c1bb7418a4669d1ad0796e086969a", "sha256": "a216f8ecadf3589515cfb77bd4f036c16da58d6a84e153b765b3622dfd1e2dda"}, "downloads": -1, "filename": "keithley2600-1.3.0.tar.gz", "has_sig": false, "md5_digest": "dd0c1bb7418a4669d1ad0796e086969a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28130, "upload_time": "2019-07-19T19:32:21", "upload_time_iso_8601": "2019-07-19T19:32:21.717807Z", "url": "https://files.pythonhosted.org/packages/c8/e3/b2e63cafd5d72d31558f6198e7bf7f0a29572031176db63b083b0e468eac/keithley2600-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "6d80930bd76fc82960b7287b3fb4e8fd", "sha256": "5078bfc127ca5f93e9214356d4805bc01e0120356c305dab8d52b06b399d7d42"}, "downloads": -1, "filename": "keithley2600-1.3.1.tar.gz", "has_sig": false, "md5_digest": "6d80930bd76fc82960b7287b3fb4e8fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29052, "upload_time": "2019-09-22T12:21:13", "upload_time_iso_8601": "2019-09-22T12:21:13.709762Z", "url": "https://files.pythonhosted.org/packages/9d/08/990ff630376ecea6c06118d657076bdd4c0cae34f0e555a44c02f1314393/keithley2600-1.3.1.tar.gz", "yanked": false}], "1.3.1b1": [{"comment_text": "", "digests": {"md5": "212f061b3c37668e13fe7b1f37e2a57d", "sha256": "271c0d4b2afcc1c3f313dcc349dc189513af5a9cd5a5e5da5e8f3dfe3259882f"}, "downloads": -1, "filename": "keithley2600-1.3.1b1.tar.gz", "has_sig": false, "md5_digest": "212f061b3c37668e13fe7b1f37e2a57d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28605, "upload_time": "2019-09-20T18:06:02", "upload_time_iso_8601": "2019-09-20T18:06:02.118569Z", "url": "https://files.pythonhosted.org/packages/2e/44/66c57bc7df50fd6d63556232bb7ac13e855c8ef437d174aa9efa21e9b61a/keithley2600-1.3.1b1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "12c3bdc6ddbf00308bab26e9a323a4db", "sha256": "71e19b72595c1f1b8ba7069a0afdb7e772b34380d3e79cbc11b02e1196e590a1"}, "downloads": -1, "filename": "keithley2600-1.3.2.tar.gz", "has_sig": false, "md5_digest": "12c3bdc6ddbf00308bab26e9a323a4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28974, "upload_time": "2019-10-29T17:01:13", "upload_time_iso_8601": "2019-10-29T17:01:13.618778Z", "url": "https://files.pythonhosted.org/packages/28/93/cc7fb443d21310ff55f1eb00c6b25bad253f7d504ac2cc17269038a61fc8/keithley2600-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "89ad00948f7e3fce969df15130b1578a", "sha256": "1e3cbfb77d63fd70b6c3d04c37d9147fcdef7d5f016ebf24849b6b05a23495d8"}, "downloads": -1, "filename": "keithley2600-1.3.3.tar.gz", "has_sig": false, "md5_digest": "89ad00948f7e3fce969df15130b1578a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28830, "upload_time": "2020-01-27T12:45:15", "upload_time_iso_8601": "2020-01-27T12:45:15.415139Z", "url": "https://files.pythonhosted.org/packages/fc/89/e86d2320c296b81230303acccf9f693120a56a721df754d2163d043ca548/keithley2600-1.3.3.tar.gz", "yanked": false}], "1.3.3.dev1": [{"comment_text": "", "digests": {"md5": "02068bfe19898bd0cd5d77bc380d143c", "sha256": "896a6d96e430975696b9d30ca65f0af3974afbf1dbdb570fcc4965bf4d6e940c"}, "downloads": -1, "filename": "keithley2600-1.3.3.dev1.tar.gz", "has_sig": false, "md5_digest": "02068bfe19898bd0cd5d77bc380d143c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29007, "upload_time": "2019-12-04T17:09:02", "upload_time_iso_8601": "2019-12-04T17:09:02.539332Z", "url": "https://files.pythonhosted.org/packages/b0/04/5601d3c295b7c7b6a13cbe4799ece93e6409f35d5942d98a9e83e153b0ce/keithley2600-1.3.3.dev1.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "f2c07e15880142ddb9d571244ff5faba", "sha256": "73c3d80c6050d0854de63d306579e6d7ee1fba6b7f0b80f4ab0862402332a2cc"}, "downloads": -1, "filename": "keithley2600-1.3.4.tar.gz", "has_sig": false, "md5_digest": "f2c07e15880142ddb9d571244ff5faba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28832, "upload_time": "2020-01-31T13:54:31", "upload_time_iso_8601": "2020-01-31T13:54:31.571751Z", "url": "https://files.pythonhosted.org/packages/54/07/87ed79ae813a7ef424ba490b7a6fb42e42c6365157985d9c081dd6d120b5/keithley2600-1.3.4.tar.gz", "yanked": false}], "1.3.5.dev1": [{"comment_text": "", "digests": {"md5": "2d4e609bb72dffbef9509f3d3f4a5fa4", "sha256": "301a7d2ce161108f237e18cccedef9fac7ba23fba8f468c16f0d0a4bbc17ea93"}, "downloads": -1, "filename": "keithley2600-1.3.5.dev1.tar.gz", "has_sig": false, "md5_digest": "2d4e609bb72dffbef9509f3d3f4a5fa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28903, "upload_time": "2020-02-03T15:33:11", "upload_time_iso_8601": "2020-02-03T15:33:11.552213Z", "url": "https://files.pythonhosted.org/packages/d0/9e/2743624b9ba376df5013abc76f30a231541b750241c1a53da4a020e3daa3/keithley2600-1.3.5.dev1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "ed23fffa2953b945a6b3fa706dc0d383", "sha256": "117e0f7d4d773b0677fd086abfa082c1edbac3bec62036a2be195cb6b89912fe"}, "downloads": -1, "filename": "keithley2600-1.4.0.tar.gz", "has_sig": false, "md5_digest": "ed23fffa2953b945a6b3fa706dc0d383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30088, "upload_time": "2020-03-05T15:01:14", "upload_time_iso_8601": "2020-03-05T15:01:14.063298Z", "url": "https://files.pythonhosted.org/packages/70/c9/02d134c82fa3b882a2bf46cb19d5c6cf23c5f45fc30e1b1c58502a6fa222/keithley2600-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed23fffa2953b945a6b3fa706dc0d383", "sha256": "117e0f7d4d773b0677fd086abfa082c1edbac3bec62036a2be195cb6b89912fe"}, "downloads": -1, "filename": "keithley2600-1.4.0.tar.gz", "has_sig": false, "md5_digest": "ed23fffa2953b945a6b3fa706dc0d383", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30088, "upload_time": "2020-03-05T15:01:14", "upload_time_iso_8601": "2020-03-05T15:01:14.063298Z", "url": "https://files.pythonhosted.org/packages/70/c9/02d134c82fa3b882a2bf46cb19d5c6cf23c5f45fc30e1b1c58502a6fa222/keithley2600-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:17 2020"}