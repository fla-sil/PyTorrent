{"info": {"author": "Pawel Stoworowicz", "author_email": "stoworow@gmail.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://travis-ci.org/stovorov/IteratorDecorator.svg?branch=master\n    :target: https://travis-ci.org/stovorov/IteratorDecorator\n\n.. image:: https://codecov.io/gh/stovorov/IteratorDecorator/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/stovorov/IteratorDecorator\n\nIteratorDecorator\n=================\n\nImplementing iterator in Python is nothing complicated though what's missing is possibility to make it even\neasier. This small library adds ``iter_attribute`` decorator allowing to quickly choose iterable for which\niterator would be implemented.\n\nRequirements\n------------\n\n    Python3.5+\n\n\nExample\n-------\n\n.. code:: python\n\n\n    from IteratorDecorator import iter_attribute\n\n\n    @iter_attribute('number')\n    class CaseClass:\n        def __init__(self):\n            self.number = [1, 2, 3, 4]\n            self.attr = ['attr1', 'attr2', 'attr3']\n\n    obj = CaseClass()\n\n    for num in obj:\n        print(num)\n\n\nInstalling\n----------\n\nIn your virtualenv just call:\n\n::\n\n    $ pip install IteratorDecorator\n\n\nWarning\n-------\n\nWhen using PyCharm or MYPY you'll probably see issues with decorated class not being recognized as Iterator.\nThat's an issue which I could not overcome yet, it's probably due to the fact that interpretation of object\nis being done statically rather than dynamically. MYPY checks for definition of methods in class code which\nchanges at runtime. Since ``__iter__`` and ``__next__`` are added dynamically MYPY cannot find those\ndefined in objects before object of a class is created. Possible workarounds for this issue are:\n\n1. Define ``__iter__`` method in class:\n\n.. code:: python\n\n    @iter_attribute('attr')\n    class Test:\n        def __init__(self) -> None:\n            self.attr = [1, 2, 3]\n\n        def __iter__(self) -> 'Test':\n            return self\n\nActually it does not have to be \"real\" ``__iter__`` since it'll be replaced by decorator implementation, but\nthe definition is only needed for static checkers.\n\n\n2. After creating object use cast or assert function denoting that particular instance inherits\n\n.. code:: python\n\n    from collections.Iterator:\n\n    assert isinstance(my_object, collections.Iterator)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stovorov/IteratorDecorator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "IteratorDecorator", "package_url": "https://pypi.org/project/IteratorDecorator/", "platform": "", "project_url": "https://pypi.org/project/IteratorDecorator/", "project_urls": {"Homepage": "https://github.com/stovorov/IteratorDecorator"}, "release_url": "https://pypi.org/project/IteratorDecorator/0.11/", "requires_dist": null, "requires_python": "", "summary": "Adds dynamically interface of iterator to class", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/stovorov/IteratorDecorator\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/stovorov/IteratorDecorator.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef604d7c9b3cefe943e994aa8ad928b0cd334c8d/68747470733a2f2f7472617669732d63692e6f72672f73746f766f726f762f4974657261746f724465636f7261746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/stovorov/IteratorDecorator\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/stovorov/IteratorDecorator/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76afe753b4f659a59ba13b442ef9c308fc0919a5/68747470733a2f2f636f6465636f762e696f2f67682f73746f766f726f762f4974657261746f724465636f7261746f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<div id=\"iteratordecorator\">\n<h2>IteratorDecorator</h2>\n<p>Implementing iterator in Python is nothing complicated though what\u2019s missing is possibility to make it even\neasier. This small library adds <tt>iter_attribute</tt> decorator allowing to quickly choose iterable for which\niterator would be implemented.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<blockquote>\nPython3.5+</blockquote>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">IteratorDecorator</span> <span class=\"kn\">import</span> <span class=\"n\">iter_attribute</span>\n\n\n<span class=\"nd\">@iter_attribute</span><span class=\"p\">(</span><span class=\"s1\">'number'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">CaseClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'attr1'</span><span class=\"p\">,</span> <span class=\"s1\">'attr2'</span><span class=\"p\">,</span> <span class=\"s1\">'attr3'</span><span class=\"p\">]</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">CaseClass</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"n\">obj</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>In your virtualenv just call:</p>\n<pre>$ pip install IteratorDecorator\n</pre>\n</div>\n<div id=\"warning\">\n<h3>Warning</h3>\n<p>When using PyCharm or MYPY you\u2019ll probably see issues with decorated class not being recognized as Iterator.\nThat\u2019s an issue which I could not overcome yet, it\u2019s probably due to the fact that interpretation of object\nis being done statically rather than dynamically. MYPY checks for definition of methods in class code which\nchanges at runtime. Since <tt>__iter__</tt> and <tt>__next__</tt> are added dynamically MYPY cannot find those\ndefined in objects before object of a class is created. Possible workarounds for this issue are:</p>\n<ol>\n<li>Define <tt>__iter__</tt> method in class:</li>\n</ol>\n<pre><span class=\"nd\">@iter_attribute</span><span class=\"p\">(</span><span class=\"s1\">'attr'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Test</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'Test'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n</pre>\n<p>Actually it does not have to be \u201creal\u201d <tt>__iter__</tt> since it\u2019ll be replaced by decorator implementation, but\nthe definition is only needed for static checkers.</p>\n<ol>\n<li>After creating object use cast or assert function denoting that particular instance inherits</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections.Iterator</span><span class=\"p\">:</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">my_object</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Iterator</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4403132, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4bf5c992277f530fc2d400a2d62325ea", "sha256": "125b9036b37f4c2784c20be0fe0876a1c6cf111772342849b8f533f054e7badd"}, "downloads": -1, "filename": "IteratorDecorator-0.1.tar.gz", "has_sig": false, "md5_digest": "4bf5c992277f530fc2d400a2d62325ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3049, "upload_time": "2018-07-01T21:22:35", "upload_time_iso_8601": "2018-07-01T21:22:35.407976Z", "url": "https://files.pythonhosted.org/packages/72/4b/293e859cf11249cef5670c70bb991c9ef08721663062defef06e1c7f9215/IteratorDecorator-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "365b51beee2fb16d9678e0652d7077d8", "sha256": "4fe827b0c309e78ad54a767186f37136cc811f54e39b3f75805b876570fbfc75"}, "downloads": -1, "filename": "IteratorDecorator-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "365b51beee2fb16d9678e0652d7077d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4556, "upload_time": "2018-10-22T17:33:13", "upload_time_iso_8601": "2018-10-22T17:33:13.008580Z", "url": "https://files.pythonhosted.org/packages/ef/26/5cb3626b80f11df14439744dfe4b65d8d18d55ca5a5bd578806b1ab69d16/IteratorDecorator-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51c2ecd907bae07f2600a45852eb2b15", "sha256": "1f46752b92746eef61185af7fa02e8d57e8ef96482305a54de8fdd9cec2ee8a9"}, "downloads": -1, "filename": "IteratorDecorator-0.11.tar.gz", "has_sig": false, "md5_digest": "51c2ecd907bae07f2600a45852eb2b15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2921, "upload_time": "2018-10-22T17:33:14", "upload_time_iso_8601": "2018-10-22T17:33:14.186349Z", "url": "https://files.pythonhosted.org/packages/a0/a9/38fed639505851e777d0ed0072c26d10158ebbb4ef21a3789daf74fd0bd2/IteratorDecorator-0.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "365b51beee2fb16d9678e0652d7077d8", "sha256": "4fe827b0c309e78ad54a767186f37136cc811f54e39b3f75805b876570fbfc75"}, "downloads": -1, "filename": "IteratorDecorator-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "365b51beee2fb16d9678e0652d7077d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4556, "upload_time": "2018-10-22T17:33:13", "upload_time_iso_8601": "2018-10-22T17:33:13.008580Z", "url": "https://files.pythonhosted.org/packages/ef/26/5cb3626b80f11df14439744dfe4b65d8d18d55ca5a5bd578806b1ab69d16/IteratorDecorator-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51c2ecd907bae07f2600a45852eb2b15", "sha256": "1f46752b92746eef61185af7fa02e8d57e8ef96482305a54de8fdd9cec2ee8a9"}, "downloads": -1, "filename": "IteratorDecorator-0.11.tar.gz", "has_sig": false, "md5_digest": "51c2ecd907bae07f2600a45852eb2b15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2921, "upload_time": "2018-10-22T17:33:14", "upload_time_iso_8601": "2018-10-22T17:33:14.186349Z", "url": "https://files.pythonhosted.org/packages/a0/a9/38fed639505851e777d0ed0072c26d10158ebbb4ef21a3789daf74fd0bd2/IteratorDecorator-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:48 2020"}