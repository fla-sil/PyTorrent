{"info": {"author": "friedkeenan", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ips.py\n\nA Python library for handling IPS patches.\n\nI wanted to create this as there was no suitable library for how I wanted to manipulate IPS patches, which at the time was just changing the offsets in the records. Since then I have wanted to extend it for my own needs, and for the potential needs of others.\n\nThe logic for creating patches from two file objects is taken from [flips](https://github.com/Alcaro/Flips/), which creates very good, small patches.\n\n### How to use\n\nTo import the library, do\n\n```py\nimport ips\n```\n\nTo get a `Patch` object from an IPS file, do\n\n```py\nwith open(\"path/to/patch.ips\", \"rb\") as f:\n    p = ips.Patch.load(f)\n```\n\nIf you already have the bytes of the IPS file, you can do\n\n```py\nwith open(\"path/to/patch.ips\", \"rb\") as f:\n    cont = f.read()\n\n...\n\np = ips.Patch.load(cont)\n```\n\nTo apply a `Patch` object, do\n\n```py\nwith open(\"path/to/original/file.bin\", \"rb\") as old, open(\"path/to/new/file.bin\", \"wb\") as new:\n    p.apply(old, new)\n```\n\nIf you don't want to necessarily write it to a new file, you can do\n\n```py\nimport io\n\nnew = io.BytesIO()\nwith open(\"path/to/original/file.bin\", \"rb\") as old:\n    p.apply(old, new)\n```\n\nTo create a `Patch` object from two file objects, do\n\n```py\nwith open(\"path/to/original/file.bin\", \"rb\") as old, open(\"path/to/new/file.bin\", \"rb\") as new:\n    p = ips.Patch.create(old, new)\n```\n\nTo pack a `Patch` object into a `bytes` object, do\n\n```py\nbytes(p)\n```\n\nTo add a record to a `Patch` object, use the `add_record` method.\n\nTo get a list of records in a `Patch` object, use the `records` attribute.\n\nTo get whether a `Patch` object is using the IPS32 format, which allows for offsets up to 4 GiB, check the `ips32` attribute.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/friedkeenan/ips.py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ips.py", "package_url": "https://pypi.org/project/ips.py/", "platform": "", "project_url": "https://pypi.org/project/ips.py/", "project_urls": {"Homepage": "https://github.com/friedkeenan/ips.py"}, "release_url": "https://pypi.org/project/ips.py/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Python library for handling IPS patches", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ips.py</h1>\n<p>A Python library for handling IPS patches.</p>\n<p>I wanted to create this as there was no suitable library for how I wanted to manipulate IPS patches, which at the time was just changing the offsets in the records. Since then I have wanted to extend it for my own needs, and for the potential needs of others.</p>\n<p>The logic for creating patches from two file objects is taken from <a href=\"https://github.com/Alcaro/Flips/\" rel=\"nofollow\">flips</a>, which creates very good, small patches.</p>\n<h3>How to use</h3>\n<p>To import the library, do</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ips</span>\n</pre>\n<p>To get a <code>Patch</code> object from an IPS file, do</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/patch.ips\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ips</span><span class=\"o\">.</span><span class=\"n\">Patch</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>If you already have the bytes of the IPS file, you can do</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/patch.ips\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">cont</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ips</span><span class=\"o\">.</span><span class=\"n\">Patch</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">cont</span><span class=\"p\">)</span>\n</pre>\n<p>To apply a <code>Patch</code> object, do</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/original/file.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/new/file.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">new</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">)</span>\n</pre>\n<p>If you don't want to necessarily write it to a new file, you can do</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n\n<span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/original/file.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">old</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">)</span>\n</pre>\n<p>To create a <code>Patch</code> object from two file objects, do</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/original/file.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/new/file.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">new</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ips</span><span class=\"o\">.</span><span class=\"n\">Patch</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">)</span>\n</pre>\n<p>To pack a <code>Patch</code> object into a <code>bytes</code> object, do</p>\n<pre><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<p>To add a record to a <code>Patch</code> object, use the <code>add_record</code> method.</p>\n<p>To get a list of records in a <code>Patch</code> object, use the <code>records</code> attribute.</p>\n<p>To get whether a <code>Patch</code> object is using the IPS32 format, which allows for offsets up to 4 GiB, check the <code>ips32</code> attribute.</p>\n\n          </div>"}, "last_serial": 7043940, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c8c102f634f5a5b22e1e8269c926f495", "sha256": "fb372594fc7aad41299e161801ccd8ec5744987ca6d8be22646026805dc74fd1"}, "downloads": -1, "filename": "ips.py-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c8c102f634f5a5b22e1e8269c926f495", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16060, "upload_time": "2020-04-16T01:36:59", "upload_time_iso_8601": "2020-04-16T01:36:59.918104Z", "url": "https://files.pythonhosted.org/packages/56/41/fe4d9d40f302becb50ed3a5cab1e6f9c5a0426a773d9cc1617fd9bf81254/ips.py-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b362b98b149717eff3a38ef4c144210", "sha256": "602c0bc8230eff0c0c74d1b6740c6779ca9471d7de99c6f0b5c275b569256a5d"}, "downloads": -1, "filename": "ips.py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6b362b98b149717eff3a38ef4c144210", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3725, "upload_time": "2020-04-16T01:37:01", "upload_time_iso_8601": "2020-04-16T01:37:01.866143Z", "url": "https://files.pythonhosted.org/packages/56/2b/39764663d1f18c9ed926214c5f8ef53002466b427b6b2265fffafc4033b6/ips.py-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5055a0f8247b3f91444ae41f5cc394a3", "sha256": "b12f2211cdc70e95f531da0a64c3eae4c3afd897fc53cac83ed3619615362fe5"}, "downloads": -1, "filename": "ips.py-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5055a0f8247b3f91444ae41f5cc394a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16069, "upload_time": "2020-04-17T20:29:10", "upload_time_iso_8601": "2020-04-17T20:29:10.666317Z", "url": "https://files.pythonhosted.org/packages/13/85/32e1ad705380ce4f3d138be8f9fe0c21b5b2105957bb130fa0eda52876b3/ips.py-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "354db251c9536eec098259841d01a55a", "sha256": "1a36689ba6da8b13f7295454e22061e7ed5650ef93fd583cd93b00fe79f0cf4f"}, "downloads": -1, "filename": "ips.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "354db251c9536eec098259841d01a55a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3729, "upload_time": "2020-04-17T20:29:11", "upload_time_iso_8601": "2020-04-17T20:29:11.659367Z", "url": "https://files.pythonhosted.org/packages/10/a7/c6a6fce12c055d5e54d0e46915772af3476b6d82cff839bda6073fbcd587/ips.py-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5055a0f8247b3f91444ae41f5cc394a3", "sha256": "b12f2211cdc70e95f531da0a64c3eae4c3afd897fc53cac83ed3619615362fe5"}, "downloads": -1, "filename": "ips.py-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5055a0f8247b3f91444ae41f5cc394a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16069, "upload_time": "2020-04-17T20:29:10", "upload_time_iso_8601": "2020-04-17T20:29:10.666317Z", "url": "https://files.pythonhosted.org/packages/13/85/32e1ad705380ce4f3d138be8f9fe0c21b5b2105957bb130fa0eda52876b3/ips.py-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "354db251c9536eec098259841d01a55a", "sha256": "1a36689ba6da8b13f7295454e22061e7ed5650ef93fd583cd93b00fe79f0cf4f"}, "downloads": -1, "filename": "ips.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "354db251c9536eec098259841d01a55a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3729, "upload_time": "2020-04-17T20:29:11", "upload_time_iso_8601": "2020-04-17T20:29:11.659367Z", "url": "https://files.pythonhosted.org/packages/10/a7/c6a6fce12c055d5e54d0e46915772af3476b6d82cff839bda6073fbcd587/ips.py-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:34 2020"}