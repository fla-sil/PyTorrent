{"info": {"author": "Comau", "author_email": "info@edo.cloud", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pyedo\nThis package contains the SDK to program e.DO robot with Python\n\n# Programming e.DO with Python\nInstall the latest Python version on your device:\n\nDownload the SDK from our site. Drag and drop the \"pyedo\" package into the python path site packages.\n\n\"C:\\Users\\YourAccount\\AppData\\Local\\Programs\\Python\\PythonXX\\Lib\\site-packages\\\"\n\nYou are now able to connect your device with e.DO via Python.\nCreate a new program, import the object from the pyedo library, create an instance of an eDO object in your program and now move e.DO with the available methods defined below.\n\n# INIT\nThis method allows to initialize the e.DO robot, with or without gripper:\n- init_7Axes() :\ncan initialize the robot with 7 axes (e.DO 6 axes plus the gripper)\n- init_6Axes() :\ncan initialize the robot with 6 axes \n\n# DISENGAGE\nThis method allows to disengage the brakes:\n- disengage_std() :\ncan disengage the robot with the standard movement (RECOMMENDED)\n- disengage_safe() :\ncan release only the brakes\n- disengage_sin() :\ncan disegage the robot with a sinusoidal movement (MANDATORY TO HAVE THE JOINTS FAR AWAY FROM THE STROKE END)\n\n# CALIB\nThis method allows to calibrate all the joints:\n- calib_axes() :\nCan calibrate all the robot axes (MANDATORY TO HAVE THE JOINTS ALLIGNED WITH THE NOTCHES (Home Position)) \nThe calibration is possible only after the initizialization(init method) and the disengage of the brakes(disengage method) .\n\n# MOVE\nThis method allows to move the e.DO robot, performing the pianification of the trajectory in different ways:\n- move_joint(ovr, j1, j2, j3, j4, j5, j6, j7) :\nCan move the joints to a joint_position indicated through the angles in degrees (j1, , j2, j3, j4, j5, j6) and the opening of the gripper J7 in mm with a velocity percentage in (ovr) up to the maximum value \u00c2\u00ab100\u00c2\u00bb\n- move_cartesian(ovr, x, y, z, a, e, r) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) with a velocity percentage in (ovr) up to the maximum value \u00c2\u00ab100\u00c2\u00bb\n- move_circular(ovr, x1, y1, z1, a1, e1, r1, x2, y2, z2, a2, e2, r2) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) passing through another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) with a velocity percentage in (ovr), up to the maximum value \u00c2\u00ab100\u00c2\u00bb, creating a circular path.\n- move_cancel() :\nCan cancel the buffer of the moves, helpfull when some erros occur in generating path trajectory not allowed.\n- move_cartesianX(ovr, x, y, z, a, e, r, j7) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) and the opening position in mm of the gripper  in (j7) with a velocity percentage in (ovr) up to the maximum value \"100\"\n- move_circularX(ovr, x1, y1, z1, a1, e1, r1,j71, x2, y2, z2, a2, e2, r2,j72) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) and the opening position in mm of the gripper  in (j71) passing throug another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) and the opening position in mm of the gripper  in (j72)  with a velocity percentage in (ovr), up to the maximum value \"100\", creating a circular path.\n\n# JOG\n- jog_joint(ovr, j1, j2, j3, j4, j5, j6, j7) :\nCan move the joints, once per time for a delta, in a direction indicated with  \"1\"(positive) or \"-1\"(negative) in the (j1, j2, j3, j4, j5, j6, j7) with a velocity percentage in (ovr) up to the maximum value \"100\"\n- jog_cartesian(ovr, x, y, z, a, e, r) :\nCan move the joints in a cartesian_position, once coordinate per time for a delta, indicated with \"1\"(positive) or \"-1\"(negative) in the a cartesian_position through the pose in (x1, y, z, a, e, r) with a velocity percentage in (ovr) up to the maximum value \"100\"\n\n# LISTEN\n- listen_JointState() :\nAllows to start the subscribing on the topic related to these informations:\n[Position \nVelocity\nCurrent]\n- listen_CartesianPosition() :\nAllows to start the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)\n\n# UNLISTEN\n- unlisten_JointState() :\nAllows to stop the subscribing on the topic related to these informations:\n[Position \nVelocity\nCurrent]\n- unlisten_CartesianPosition() :\nAllows to stop the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)\n\n# GET\n- get_JointState() :\nAllows to get the Joint State dictionary containing the variables listened with the listen method:\n[Position \nVelocity\nCurrent\ncartesianPosition]\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Comau/pyedo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyedo", "package_url": "https://pypi.org/project/pyedo/", "platform": "", "project_url": "https://pypi.org/project/pyedo/", "project_urls": {"Homepage": "https://github.com/Comau/pyedo"}, "release_url": "https://pypi.org/project/pyedo/0.3/", "requires_dist": null, "requires_python": "", "summary": "This package contains the SDK to program COMAU e.DO robot with Python", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># pyedo\nThis package contains the SDK to program e.DO robot with Python</p>\n<p># Programming e.DO with Python\nInstall the latest Python version on your device:</p>\n<p>Download the SDK from our site. Drag and drop the \u201cpyedo\u201d package into the python path site packages.</p>\n<p>\u201cC:UsersYourAccountAppDataLocalProgramsPythonPythonXXLibsite-packages\u201d</p>\n<p>You are now able to connect your device with e.DO via Python.\nCreate a new program, import the object from the pyedo library, create an instance of an eDO object in your program and now move e.DO with the available methods defined below.</p>\n<p># INIT\nThis method allows to initialize the e.DO robot, with or without gripper:\n- init_7Axes() :\ncan initialize the robot with 7 axes (e.DO 6 axes plus the gripper)\n- init_6Axes() :\ncan initialize the robot with 6 axes</p>\n<p># DISENGAGE\nThis method allows to disengage the brakes:\n- disengage_std() :\ncan disengage the robot with the standard movement (RECOMMENDED)\n- disengage_safe() :\ncan release only the brakes\n- disengage_sin() :\ncan disegage the robot with a sinusoidal movement (MANDATORY TO HAVE THE JOINTS FAR AWAY FROM THE STROKE END)</p>\n<p># CALIB\nThis method allows to calibrate all the joints:\n- calib_axes() :\nCan calibrate all the robot axes (MANDATORY TO HAVE THE JOINTS ALLIGNED WITH THE NOTCHES (Home Position))\nThe calibration is possible only after the initizialization(init method) and the disengage of the brakes(disengage method) .</p>\n<p># MOVE\nThis method allows to move the e.DO robot, performing the pianification of the trajectory in different ways:\n- move_joint(ovr, j1, j2, j3, j4, j5, j6, j7) :\nCan move the joints to a joint_position indicated through the angles in degrees (j1, , j2, j3, j4, j5, j6) and the opening of the gripper J7 in mm with a velocity percentage in (ovr) up to the maximum value \u00c2\u00ab100\u00c2\u00bb\n- move_cartesian(ovr, x, y, z, a, e, r) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) with a velocity percentage in (ovr) up to the maximum value \u00c2\u00ab100\u00c2\u00bb\n- move_circular(ovr, x1, y1, z1, a1, e1, r1, x2, y2, z2, a2, e2, r2) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) passing through another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) with a velocity percentage in (ovr), up to the maximum value \u00c2\u00ab100\u00c2\u00bb, creating a circular path.\n- move_cancel() :\nCan cancel the buffer of the moves, helpfull when some erros occur in generating path trajectory not allowed.\n- move_cartesianX(ovr, x, y, z, a, e, r, j7) :\nCan move the joints to a cartesian_position indicated through the pose in (x, y, z, a, e, r) and the opening position in mm of the gripper  in (j7) with a velocity percentage in (ovr) up to the maximum value \u201c100\u201d\n- move_circularX(ovr, x1, y1, z1, a1, e1, r1,j71, x2, y2, z2, a2, e2, r2,j72) :\nCan move the joints to a cartesian_position indicated through the pose in (x1, y1, z1, a1, e1, r1) and the opening position in mm of the gripper  in (j71) passing throug another cartesian_position indicated through the pose in (x2, y2, z2, a2, e2, r2) and the opening position in mm of the gripper  in (j72)  with a velocity percentage in (ovr), up to the maximum value \u201c100\u201d, creating a circular path.</p>\n<p># JOG\n- jog_joint(ovr, j1, j2, j3, j4, j5, j6, j7) :\nCan move the joints, once per time for a delta, in a direction indicated with  \u201c1\u201d(positive) or \u201c-1\u201d(negative) in the (j1, j2, j3, j4, j5, j6, j7) with a velocity percentage in (ovr) up to the maximum value \u201c100\u201d\n- jog_cartesian(ovr, x, y, z, a, e, r) :\nCan move the joints in a cartesian_position, once coordinate per time for a delta, indicated with \u201c1\u201d(positive) or \u201c-1\u201d(negative) in the a cartesian_position through the pose in (x1, y, z, a, e, r) with a velocity percentage in (ovr) up to the maximum value \u201c100\u201d</p>\n<p># LISTEN\n- listen_JointState() :\nAllows to start the subscribing on the topic related to these informations:\n[Position\nVelocity\nCurrent]\n- listen_CartesianPosition() :\nAllows to start the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)</p>\n<p># UNLISTEN\n- unlisten_JointState() :\nAllows to stop the subscribing on the topic related to these informations:\n[Position\nVelocity\nCurrent]\n- unlisten_CartesianPosition() :\nAllows to stop the subscribing on the topic related to the cartesian position (x,y,z,a,e,r)</p>\n<p># GET\n- get_JointState() :\nAllows to get the Joint State dictionary containing the variables listened with the listen method:\n[Position\nVelocity\nCurrent\ncartesianPosition]</p>\n\n          </div>"}, "last_serial": 6563968, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "929edc0e860079fe65f03cacd1daf4e7", "sha256": "7c5c77b784c51feaacaa96b67c33f714dfb98e59da95897f5f43e7dbf107c883"}, "downloads": -1, "filename": "pyedo-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "929edc0e860079fe65f03cacd1daf4e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5941, "upload_time": "2020-01-31T08:43:46", "upload_time_iso_8601": "2020-01-31T08:43:46.214174Z", "url": "https://files.pythonhosted.org/packages/56/cd/659868d6fd5d10fc3e73e43ae7972ed97d0709293a8145800802a4134a4e/pyedo-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a616fe7fa16e55ee17dedb31587e8d40", "sha256": "33545e5d6c08e3b21cf8476b47d0de9233c893604060b465b637d19d1e69e069"}, "downloads": -1, "filename": "pyedo-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a616fe7fa16e55ee17dedb31587e8d40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2464, "upload_time": "2020-02-03T17:02:55", "upload_time_iso_8601": "2020-02-03T17:02:55.883590Z", "url": "https://files.pythonhosted.org/packages/83/e2/db942c961ebf388dbb25d70aadf47520a1e24be24a3db8b245dfe8c356b8/pyedo-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c6c352d7817fac07ea43206cae884ba", "sha256": "ee470e196402a116ee31940e36a33b4944b10d875d06cdcd7752b6fbaf9df9b5"}, "downloads": -1, "filename": "pyedo-0.2.tar.gz", "has_sig": false, "md5_digest": "0c6c352d7817fac07ea43206cae884ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6382, "upload_time": "2020-02-03T17:02:57", "upload_time_iso_8601": "2020-02-03T17:02:57.499613Z", "url": "https://files.pythonhosted.org/packages/5b/44/d2fc56cfdce8b6bdffb571ee6ee8f81a42fffe2a3c89ef384e0160d1853e/pyedo-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a78aa5cef38b2b70af489e20e0b1e32b", "sha256": "7969c51fbfd309c8fef6e19cf312cb0cdd51681c66c977ead0b1cb8c4d59b979"}, "downloads": -1, "filename": "pyedo-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a78aa5cef38b2b70af489e20e0b1e32b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10650, "upload_time": "2020-02-03T17:33:06", "upload_time_iso_8601": "2020-02-03T17:33:06.538486Z", "url": "https://files.pythonhosted.org/packages/62/0b/764d63bc93cf8d4d8ed79dc69bb5134d91ee2ebc895b95bb7fddc03882b4/pyedo-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "165a1085cce9c69f284ea012b4429003", "sha256": "b0b700dcd8762ff786a84ccbe086efc01467da04fa25e9983f349b7ff0d973c8"}, "downloads": -1, "filename": "pyedo-0.3.tar.gz", "has_sig": false, "md5_digest": "165a1085cce9c69f284ea012b4429003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8241, "upload_time": "2020-02-03T17:33:07", "upload_time_iso_8601": "2020-02-03T17:33:07.496966Z", "url": "https://files.pythonhosted.org/packages/cc/08/924531aaa801205def21428ab0c1eed95c0341cd232766e54885904cf1fb/pyedo-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a78aa5cef38b2b70af489e20e0b1e32b", "sha256": "7969c51fbfd309c8fef6e19cf312cb0cdd51681c66c977ead0b1cb8c4d59b979"}, "downloads": -1, "filename": "pyedo-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a78aa5cef38b2b70af489e20e0b1e32b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10650, "upload_time": "2020-02-03T17:33:06", "upload_time_iso_8601": "2020-02-03T17:33:06.538486Z", "url": "https://files.pythonhosted.org/packages/62/0b/764d63bc93cf8d4d8ed79dc69bb5134d91ee2ebc895b95bb7fddc03882b4/pyedo-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "165a1085cce9c69f284ea012b4429003", "sha256": "b0b700dcd8762ff786a84ccbe086efc01467da04fa25e9983f349b7ff0d973c8"}, "downloads": -1, "filename": "pyedo-0.3.tar.gz", "has_sig": false, "md5_digest": "165a1085cce9c69f284ea012b4429003", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8241, "upload_time": "2020-02-03T17:33:07", "upload_time_iso_8601": "2020-02-03T17:33:07.496966Z", "url": "https://files.pythonhosted.org/packages/cc/08/924531aaa801205def21428ab0c1eed95c0341cd232766e54885904cf1fb/pyedo-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:31 2020"}