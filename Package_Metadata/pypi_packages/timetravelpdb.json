{"info": {"author": "Thomas Grainger", "author_email": "timetravelpdb@graingert.co.uk", "bugtrack_url": null, "classifiers": [], "description": "timetravelpdb\n=============\n\nEnhances the Python Debugger to add the ability to travel back in time.\n\nHave you ever been using PDB to step through a program and suddenly\nrealize you wish you could jump back in time and know what a variable\nused to contain?\n\nThis version of PDB adds the ability to jump back in time to the state\nof your program as it was in the past. You can examine variables and\neven continue execution from that point forward (though that is\ndangerous because it may harm the time space continuum.)\n\nHow it works:\n\nAs you know, time is the 4th dimension. Every moment is another\nuniverse. Pretty trippy, eh?\n\nTTPDB simply records a pointer to the current universe before displaying\nthe input prompt. As you step through your program, each step records a\npointer to the past universes. The last 100 pointers are remembered. You\ncan jump into any of those universes. Once in those universes you can\nexamine variables. Heck you can do anything you want because you are\nreally in that universe.\n\nOnce you are done with that universe you can \"pop up\" back to the\nuniverse you left thanks to our time portal technology.\n\nQ: When I'm in another universe, can I run the code? A: Yes. However if\nyou modify anything outside of your python process there's a chance you\nwill create a hole in the time-space continuum and destroy the universe.\n\nQ: Can I use the \"record universe\" function while in another universe?\nA: Of course! In fact, while in those past universes do a \"ulist\" to see\nthe universes recorded so far. You'll notice that there are fewer items\non the list. That's because when you were in that moment of time, the\nothers hadn't been recorded yet. Stepping through the program will now\nmake a new branch of history. You can jump between those universes, pop\nup back to where you came from, and so on. It can be a little confusing\nbut, heck, time travel always is.\n\nQ: Why did you release this on April Fools Day? A: Seemed like a good\nidea at the time.\n\nQ: Is this to promote your \"Time Management for System Administrators\"\nbook? A: This one? http://everythingsysadmin.com/books.html No, not at\nall. It's to promote my next book which won't be out until October 2014:\nThe Practice of Cloud Administration.\nhttp://everythingsysadmin.com/2014/03/sneak-preview.html Oh, and it\ncertainly isn't promoting my RFC April Fools book: http://rfchumor.com/\n\nQ: Are you really traveling back in time? A: No. Everyone knows it isn't\npossible to actually travel back in time. All we have of the past is our\nmemories. What this does is use a feature of the Unix kernel that has\nbeen there since the 1970s to record a snapshot of absolutely everything\nabout the process and jump between these memories. This feature is\ngreatly misunderstood by most Unix users.\n\n| The truth is that we can't go back in time. It would be nice if we\ncould. But we can't.\n| Instead we have our old memories and that has to be good enough. And,\nto be honest, what most of us need more than the abilty to travel back\nin time is the ability to let go of the past.\n\n\nChanges\n=========\n\n0.1.0 (2015-04-02)\n------------------\n\n- First version of timetravelpdb that can be installed from PyPI", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graingert/timetravelpdb", "keywords": "time,travel,timetravel,pdb,debug", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "timetravelpdb", "package_url": "https://pypi.org/project/timetravelpdb/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/timetravelpdb/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/graingert/timetravelpdb"}, "release_url": "https://pypi.org/project/timetravelpdb/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "The Time Travel Python Debugger", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            timetravelpdb<br>=============<br><br>Enhances the Python Debugger to add the ability to travel back in time.<br><br>Have you ever been using PDB to step through a program and suddenly<br>realize you wish you could jump back in time and know what a variable<br>used to contain?<br><br>This version of PDB adds the ability to jump back in time to the state<br>of your program as it was in the past. You can examine variables and<br>even continue execution from that point forward (though that is<br>dangerous because it may harm the time space continuum.)<br><br>How it works:<br><br>As you know, time is the 4th dimension. Every moment is another<br>universe. Pretty trippy, eh?<br><br>TTPDB simply records a pointer to the current universe before displaying<br>the input prompt. As you step through your program, each step records a<br>pointer to the past universes. The last 100 pointers are remembered. You<br>can jump into any of those universes. Once in those universes you can<br>examine variables. Heck you can do anything you want because you are<br>really in that universe.<br><br>Once you are done with that universe you can \"pop up\" back to the<br>universe you left thanks to our time portal technology.<br><br>Q: When I'm in another universe, can I run the code? A: Yes. However if<br>you modify anything outside of your python process there's a chance you<br>will create a hole in the time-space continuum and destroy the universe.<br><br>Q: Can I use the \"record universe\" function while in another universe?<br>A: Of course! In fact, while in those past universes do a \"ulist\" to see<br>the universes recorded so far. You'll notice that there are fewer items<br>on the list. That's because when you were in that moment of time, the<br>others hadn't been recorded yet. Stepping through the program will now<br>make a new branch of history. You can jump between those universes, pop<br>up back to where you came from, and so on. It can be a little confusing<br>but, heck, time travel always is.<br><br>Q: Why did you release this on April Fools Day? A: Seemed like a good<br>idea at the time.<br><br>Q: Is this to promote your \"Time Management for System Administrators\"<br>book? A: This one? http://everythingsysadmin.com/books.html No, not at<br>all. It's to promote my next book which won't be out until October 2014:<br>The Practice of Cloud Administration.<br>http://everythingsysadmin.com/2014/03/sneak-preview.html Oh, and it<br>certainly isn't promoting my RFC April Fools book: http://rfchumor.com/<br><br>Q: Are you really traveling back in time? A: No. Everyone knows it isn't<br>possible to actually travel back in time. All we have of the past is our<br>memories. What this does is use a feature of the Unix kernel that has<br>been there since the 1970s to record a snapshot of absolutely everything<br>about the process and jump between these memories. This feature is<br>greatly misunderstood by most Unix users.<br><br>| The truth is that we can't go back in time. It would be nice if we<br>could. But we can't.<br>| Instead we have our old memories and that has to be good enough. And,<br>to be honest, what most of us need more than the abilty to travel back<br>in time is the ability to let go of the past.<br><br><br>Changes<br>=========<br><br>0.1.0 (2015-04-02)<br>------------------<br><br>- First version of timetravelpdb that can be installed from PyPI\n          </div>"}, "last_serial": 1487913, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 03:53:21 2020"}