{"info": {"author": "Tomi Tuhkanen", "author_email": "tomi.tuhkanen@iki.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# RuuviTag Sensor Python Package\n\n[![Build Status](https://travis-ci.com/ttu/ruuvitag-sensor.svg?branch=master)](https://travis-ci.com/ttu/ruuvitag-sensor) [![PyPI](https://img.shields.io/pypi/v/ruuvitag_sensor.svg)](https://pypi.python.org/pypi/ruuvitag_sensor)\n\nRuuviTag Sensor is a Python library for communicating with [RuuviTag BLE Sensor Beacon](http://ruuvitag.com/) and for decoding sensord data from broadcasted eddystone-url.\n\n### Requirements\n\n* RuuviTag with Weather Station firmware\n    * Setup [guide](https://ruu.vi/setup/)\n    * Supports [Data Format 2, 3, 4 and 5](https://github.com/ruuvi/ruuvi-sensor-protocols)\n      * __NOTE:__ Data Formats 2, 3 and 4 are _deprecated_ and should not be used\n* Bluez (Linux-only)\n    * [BlueZ install guide](#BlueZ)\n* __BETA:__ Cross-platform BLE implementation with [Bleson](https://github.com/TheCellule/python-bleson) communication module\n    * [Bleson install guide](#Bleson)\n   \n\n### Installation\n\nInstall latest released version\n```sh\n$ pip install ruuvitag_sensor\n```\n\nInstall latest developement version\n```sh\n$ pip install git+https://github.com/ttu/ruuvitag-sensor\n# Or clone this repository and install locally\n$ pip install -e .\n```\n\nFull installation guide for [Raspberry PI & Raspbian](https://github.com/ttu/ruuvitag-sensor/blob/master/install_guide_pi.md)\n\n### Usage\n\nRuuviTag sensors can be identified using MAC addresses.\n\n\n##### Get sensor datas with callback\n\n`get_datas` calls the callback every time when a RuuviTag sensor broadcasts data. This method is the preferred way to use the library.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor\n\ndef handle_data(found_data):\n    print('MAC ' + found_data[0])\n    print(found_data[1])\n\nRuuviTagSensor.get_datas(handle_data)\n```\n\nOptional list of macs and run flag can be passed to the get_datas function. Callback is called only for macs in the list and setting run flag to false will stop execution. If run flag is not passed, function will execute forever.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor, RunFlag\n\ncounter = 10\n# RunFlag for stopping execution at desired time\nrun_flag = RunFlag()\n\ndef handle_data(found_data):\n    print('MAC ' + found_data[0])\n    print(found_data[1])\n    global counter\n    counter = counter - 1\n    if counter < 0:\n        run_flag.running = False\n\n# List of macs of sensors which will execute callback function\nmacs = ['AA:2C:6A:1E:59:3D', 'CC:2C:6A:1E:59:3D']\n\nRuuviTagSensor.get_datas(handle_data, macs, run_flag)\n```\n\n##### Get data for specified sensors\n\n`get_data_for_sensors` will collect latest data from sensors for specified duration.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor\n\n# List of macs of sensors which data will be collected\n# If list is empty, data will be collected for all found sensors\nmacs = ['AA:2C:6A:1E:59:3D', 'CC:2C:6A:1E:59:3D']\n# get_data_for_sensors will look data for the duration of timeout_in_sec\ntimeout_in_sec = 4\n\ndatas = RuuviTagSensor.get_data_for_sensors(macs, timeout_in_sec)\n\n# Dictionary will have lates data for each sensor\nprint(datas['AA:2C:6A:1E:59:3D'])\nprint(datas['CC:2C:6A:1E:59:3D'])\n```\n\n__NOTE:__ This method shouldn't be used for a long duration with short timeout. `get_data_for_sensors` will start and stop a new BLE scanning process with every method call. For a long running processes it is recommended to use `get_datas`-method with a callback.\n\n##### Get data from sensor\n\n__NOTE:__ For a single sensor it is recommended to use `RuuviTagSensor.get_datas` or `RuuviTagSensor.get_data_for_sensors` functions instead of `RuuviTag`-class. \n\n```python\nfrom ruuvitag_sensor.ruuvitag import RuuviTag\n\nsensor = RuuviTag('AA:2C:6A:1E:59:3D')\n\n# update state from the device\nstate = sensor.update()\n\n# get latest state (does not get it from the device)\nstate = sensor.state\n\nprint(state)\n```\n\n##### RuuviTagReactive\n\nReactive wrapper and background process for RuuviTagSensor get_datas. Optional MAC address list can be passed on initializer and execution can be stopped with stop function.\n\n```python\nfrom ruuvitag_sensor.ruuvi_rx import RuuviTagReactive\n\nruuvi_rx = RuuviTagReactive()\n\n# Print all notifications\nruuvi_rx.get_subject().\\\n    subscribe(print)\n\n# Print only last data every 10 seconds for F4:A5:74:89:16:57\nruuvi_rx.get_subject().\\\n    filter(lambda x: x[0] == 'F4:A5:74:89:16:57').\\\n    buffer_with_time(10000).\\\n    subscribe(lambda datas: print(datas[len(datas) - 1]))\n\n# Execute only every time when temperature changes for F4:A5:74:89:16:57\nruuvi_rx.get_subject().\\\n    filter(lambda x: x[0] == 'F4:A5:74:89:16:57').\\\n    map(lambda x: x[1]['temperature']).\\\n    distinct_until_changed().\\\n    subscribe(lambda x: print('Temperature changed: {}'.format(x)))\n\n# Close all connections and stop bluetooth communication\nruuvi_rx.stop()\n```\n\nMore [samples](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/rx.py) and simple [HTTP server](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio_rx.py) under examples directory.\n\nCheck official documentation from RxPy [GitHub](https://github.com/ReactiveX/RxPY) and [RxPY Public API](https://ninmesara.github.io/RxPY/api/operators/index.html)\n\n##### Find sensors\n\n`find_ruuvitags` function will exeute forever and when new RuuviTag sensor is found it will print it's MAC address and state at that moment. This function can be used with a command line applications. Logging must be enabled and set to print to console.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor\nimport ruuvitag_sensor.log\n\nruuvitag_sensor.log.enable_console()\n\nRuuviTagSensor.find_ruuvitags()\n```\n\n##### Using different Bluetooth device\n\nIf you have multiple Bluetooth devices installed, device to be used might not be the default (Linux: hci0). Device can be passed with `bt_device` parameter.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor\nfrom ruuvitag_sensor.ruuvitag import RuuviTag\n\nsensor = RuuviTag('F4:A5:74:89:16:57', 'hci1')\n\nRuuviTagSensor.find_ruuvitags('hci1')\n\ndatas = RuuviTagSensor.get_data_for_sensors(bt_device='hci1')\n\nRuuviTagSensor.get_datas(lambda x: print('%s - %s' % (x[0], x[1]), bt_device=device))\n```\n\n##### Parse data\n\n```python\nfrom ruuvitag_sensor.data_formats import DataFormats\nfrom ruuvitag_sensor.decoder import get_decoder\n\nfull_data = '043E2A0201030157168974A51F0201060303AAFE1716AAFE10F9037275752E76692F23416A5558314D417730C3'\ndata = full_data[26:]\n\n# convert_data returns tuple which has Data Format type and encoded data\n(data_format, encoded) = DataFormats.convert_data(data)\n\nsensor_data = get_decoder(data_format).decode_data(encoded)\n\nprint(sensor_data)\n# {'temperature': 25.12, 'identifier': '0', 'humidity': 26.5, 'pressure': 992.0}\n```\n\n##### Data Formats\n\nExample data has data from 4 sensors with different firmwares.\n* 1st is Data Format 2 (URL) so identifier is None as sensor doesn't broadcast any identifier data\n* 2nd is Data Format 4 (URL) and it has an identifier character\n* 3rd is Data Format 3 (RAW)\n* 4th is Data Format 5 (RAW v2)\n\n```python\n{\n'CA:F7:44:DE:EB:E1': { 'data_format': 2, 'temperature': 22.0, 'humidity': 28.0, 'pressure': 991.0, 'identifier': None }, \n'F4:A5:74:89:16:57': { 'data_format': 4, 'temperature': 23.24, 'humidity': 29.0, 'pressure': 991.0, 'identifier': '0' },\n'A3:GE:2D:91:A4:1F': { 'data_format': 3, 'battery': 2899, 'pressure': 1027.66, 'humidity': 20.5, 'acceleration': 63818.215675463696, 'acceleration_x': 200.34, 'acceleration_y': 0.512, 'acceleration_z': -200.42, 'temperature': 26.3},\n'CB:B8:33:4C:88:4F': { 'data_format': 5, 'battery': 2.995, 'pressure': 1000.43, 'mac': 'cbb8334c884f', 'measurement_sequence_number': 2467, 'acceleration_z': 1028, 'acceleration': 1028.0389097694697, 'temperature': 22.14, 'acceleration_y': -8, 'acceleration_x': 4, 'humidity': 53.97, 'tx_power': 4, 'movement_counter': 70 }\n}\n```\n\n##### Note on Data Format 2 and 4\n\nThere is no reason to use Data Format 2 or 4.\n\nOriginal reasoning to use the URL-encoded data was to use _Google's Nearby_ notifications to let users to view the tags without the need to install any app. Since the _Nearby_ has been discontinued there isn't any benefit in using Eddystone format anymore.\n\n##### Logging and Print to console\n\nLogging can be enabled by importing `ruuvitag_sensor.log`. Console print can be enabled by calling `ruuvitag_sensor.log.enable_console()`. Command line application has console logging enabled by default.\n\n```python\nfrom ruuvitag_sensor.ruuvi import RuuviTagSensor\nimport ruuvitag_sensor.log\n\nruuvitag_sensor.log.enable_console()\n\ndatas = RuuviTagSensor.get_data_for_sensors()\n\nprint(datas)\n```\n\n##### Command line application\n\n```\n$ python ruuvitag_sensor -h\n\nusage: ruuvitag_sensor [-h] [-g MAC_ADDRESS] [-d BT_DEVICE] [-f] [-l] [-s] [--version]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g MAC_ADDRESS, --get MAC_ADDRESS\n                        Get data\n  -d BT_DEVICE, --device BT_DEVICE\n                        Set Bluetooth device id (default hci0)\n  -f, --find            Find broadcasting RuuviTags\n  -l, --latest          Get latest data for found RuuviTags\n  -s, --stream          Stream broadcasts from all RuuviTags\n  --version             show program's version number and exit\n```\n\n## BlueZ\n\nBlueZ works only on __Linux__. Windows and macOS supports are only for testing and url decoding. \n\nBlueZ tools require __superuser__ rights.\n\nInstall BlueZ.\n\n```sh\n$ sudo apt-get install bluez bluez-hcidump\n```\n\nRuuvitag_sensor package uses internally _hciconfig_, _hcitool_ and _hcidump_. These tools are deprecated. In case tools are missing, older version of BlueZ is required ([Issue](https://github.com/ttu/ruuvitag-sensor/issues/31))\n\n### BlueZ limitations\n\nThe ruuvitag-sensor use BlueZ to listen broadcasted BL information (uses _hciconf_, _hcitool_, _hcidump_). Implementation does not handle well unexpected errors or changes, e.g. when adapter is busy, rebooted or powered down.\n\nIn case of errors, application tries to exit immediately, so it can be automatically restarted.\n\n## Bleson\n\nCurrent state and known bugs in [issue #78](https://github.com/ttu/ruuvitag-sensor/issues/78).\n\nBleson works with Linux, macOS and partially with Windows.\n\nRequires _Python 3_.\n\nBleson is not installed automatically with `ruuvitag_sensor` package. Install it manually from GitHub.\n\n```sh\n$ pip install git+https://github.com/TheCellule/python-bleson\n```\n\nAdd environment variable `RUUVI_BLE_ADAPTER` with value `Bleson`. E.g.\n\n```sh\n$ export RUUVI_BLE_ADAPTER=\"Bleson\"\n```\n\n__NOTE:__ On macOS only Data Format 5 works as macOS doesn't advertise MAC-address and only DF5 has MAC in sensor payload. `RuuviTag`-class doesn't work with macOS.\n\n__NOTE:__ On Windows Bleson requires _Python 3.6_. Unfortunately on Windows, Bleson doesn't send any payload for advertised package, so it is still unusable.\n\n## Examples\n\nExamples are in [examples](https://github.com/ttu/ruuvitag-sensor/tree/master/examples) directory, e.g.\n\n* Keep track of each sensors current status and send updated data to server. [Sync](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/send_updated_sync.py) and [async](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/send_updated_async.py) version.\n* Send found sensor data to InfluxDB. [Reactive](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/post_to_influxdb_rx.py) and [non-reactive](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/post_to_influxdb.py) version. Naming convention of sent data matches [RuuviCollector library](https://github.com/scrin/ruuvicollector).\n* Simple HTTP Server for serving found sensor data. [Flask](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server.py), [aiohttp](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio.py) and [aiohttp with Rx](https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio_rx.py).\n\n## Changelog\n\n[Changelog](https://github.com/ttu/ruuvitag-sensor/blob/master/CHANGELOG.md)\n\n## Developer notes\n\n[Notes for developers](https://github.com/ttu/ruuvitag-sensor/blob/master/developer_notes.md) who are interested in developing RuuviTag Sensor package or interested in it's internal functionality.\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\nLicensed under the [MIT](https://github.com/ttu/ruuvitag-sensor/blob/master/LICENSE) License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ttu/ruuvitag-sensor/tarball/1.1.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ttu/ruuvitag-sensor", "keywords": "RuuviTag BLE", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ruuvitag-sensor", "package_url": "https://pypi.org/project/ruuvitag-sensor/", "platform": "any", "project_url": "https://pypi.org/project/ruuvitag-sensor/", "project_urls": {"Download": "https://github.com/ttu/ruuvitag-sensor/tarball/1.1.0", "Homepage": "https://github.com/ttu/ruuvitag-sensor"}, "release_url": "https://pypi.org/project/ruuvitag-sensor/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Find RuuviTag sensor beacons, get and encode data from selected sensors", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RuuviTag Sensor Python Package</h1>\n<p><a href=\"https://travis-ci.com/ttu/ruuvitag-sensor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69463ac08c332adaefdb696ce885255c61aa4023/68747470733a2f2f7472617669732d63692e636f6d2f7474752f72757576697461672d73656e736f722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/ruuvitag_sensor\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7787dd5cad199ce4d2ecdc1be0462f0be71376b7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72757576697461675f73656e736f722e737667\"></a></p>\n<p>RuuviTag Sensor is a Python library for communicating with <a href=\"http://ruuvitag.com/\" rel=\"nofollow\">RuuviTag BLE Sensor Beacon</a> and for decoding sensord data from broadcasted eddystone-url.</p>\n<h3>Requirements</h3>\n<ul>\n<li>RuuviTag with Weather Station firmware\n<ul>\n<li>Setup <a href=\"https://ruu.vi/setup/\" rel=\"nofollow\">guide</a></li>\n<li>Supports <a href=\"https://github.com/ruuvi/ruuvi-sensor-protocols\" rel=\"nofollow\">Data Format 2, 3, 4 and 5</a>\n<ul>\n<li><strong>NOTE:</strong> Data Formats 2, 3 and 4 are <em>deprecated</em> and should not be used</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Bluez (Linux-only)\n<ul>\n<li><a href=\"#BlueZ\" rel=\"nofollow\">BlueZ install guide</a></li>\n</ul>\n</li>\n<li><strong>BETA:</strong> Cross-platform BLE implementation with <a href=\"https://github.com/TheCellule/python-bleson\" rel=\"nofollow\">Bleson</a> communication module\n<ul>\n<li><a href=\"#Bleson\" rel=\"nofollow\">Bleson install guide</a></li>\n</ul>\n</li>\n</ul>\n<h3>Installation</h3>\n<p>Install latest released version</p>\n<pre>$ pip install ruuvitag_sensor\n</pre>\n<p>Install latest developement version</p>\n<pre>$ pip install git+https://github.com/ttu/ruuvitag-sensor\n<span class=\"c1\"># Or clone this repository and install locally</span>\n$ pip install -e .\n</pre>\n<p>Full installation guide for <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/install_guide_pi.md\" rel=\"nofollow\">Raspberry PI &amp; Raspbian</a></p>\n<h3>Usage</h3>\n<p>RuuviTag sensors can be identified using MAC addresses.</p>\n<h5>Get sensor datas with callback</h5>\n<p><code>get_datas</code> calls the callback every time when a RuuviTag sensor broadcasts data. This method is the preferred way to use the library.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">found_data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'MAC '</span> <span class=\"o\">+</span> <span class=\"n\">found_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">found_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_datas</span><span class=\"p\">(</span><span class=\"n\">handle_data</span><span class=\"p\">)</span>\n</pre>\n<p>Optional list of macs and run flag can be passed to the get_datas function. Callback is called only for macs in the list and setting run flag to false will stop execution. If run flag is not passed, function will execute forever.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span><span class=\"p\">,</span> <span class=\"n\">RunFlag</span>\n\n<span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"c1\"># RunFlag for stopping execution at desired time</span>\n<span class=\"n\">run_flag</span> <span class=\"o\">=</span> <span class=\"n\">RunFlag</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">found_data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'MAC '</span> <span class=\"o\">+</span> <span class=\"n\">found_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">found_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">global</span> <span class=\"n\">counter</span>\n    <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">counter</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">counter</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">run_flag</span><span class=\"o\">.</span><span class=\"n\">running</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># List of macs of sensors which will execute callback function</span>\n<span class=\"n\">macs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'AA:2C:6A:1E:59:3D'</span><span class=\"p\">,</span> <span class=\"s1\">'CC:2C:6A:1E:59:3D'</span><span class=\"p\">]</span>\n\n<span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_datas</span><span class=\"p\">(</span><span class=\"n\">handle_data</span><span class=\"p\">,</span> <span class=\"n\">macs</span><span class=\"p\">,</span> <span class=\"n\">run_flag</span><span class=\"p\">)</span>\n</pre>\n<h5>Get data for specified sensors</h5>\n<p><code>get_data_for_sensors</code> will collect latest data from sensors for specified duration.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span>\n\n<span class=\"c1\"># List of macs of sensors which data will be collected</span>\n<span class=\"c1\"># If list is empty, data will be collected for all found sensors</span>\n<span class=\"n\">macs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'AA:2C:6A:1E:59:3D'</span><span class=\"p\">,</span> <span class=\"s1\">'CC:2C:6A:1E:59:3D'</span><span class=\"p\">]</span>\n<span class=\"c1\"># get_data_for_sensors will look data for the duration of timeout_in_sec</span>\n<span class=\"n\">timeout_in_sec</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_data_for_sensors</span><span class=\"p\">(</span><span class=\"n\">macs</span><span class=\"p\">,</span> <span class=\"n\">timeout_in_sec</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dictionary will have lates data for each sensor</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">[</span><span class=\"s1\">'AA:2C:6A:1E:59:3D'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">[</span><span class=\"s1\">'CC:2C:6A:1E:59:3D'</span><span class=\"p\">])</span>\n</pre>\n<p><strong>NOTE:</strong> This method shouldn't be used for a long duration with short timeout. <code>get_data_for_sensors</code> will start and stop a new BLE scanning process with every method call. For a long running processes it is recommended to use <code>get_datas</code>-method with a callback.</p>\n<h5>Get data from sensor</h5>\n<p><strong>NOTE:</strong> For a single sensor it is recommended to use <code>RuuviTagSensor.get_datas</code> or <code>RuuviTagSensor.get_data_for_sensors</code> functions instead of <code>RuuviTag</code>-class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvitag</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTag</span>\n\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTag</span><span class=\"p\">(</span><span class=\"s1\">'AA:2C:6A:1E:59:3D'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># update state from the device</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get latest state (does not get it from the device)</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">state</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n</pre>\n<h5>RuuviTagReactive</h5>\n<p>Reactive wrapper and background process for RuuviTagSensor get_datas. Optional MAC address list can be passed on initializer and execution can be stopped with stop function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi_rx</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagReactive</span>\n\n<span class=\"n\">ruuvi_rx</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagReactive</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Print all notifications</span>\n<span class=\"n\">ruuvi_rx</span><span class=\"o\">.</span><span class=\"n\">get_subject</span><span class=\"p\">()</span><span class=\"o\">.</span>\\\n    <span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print only last data every 10 seconds for F4:A5:74:89:16:57</span>\n<span class=\"n\">ruuvi_rx</span><span class=\"o\">.</span><span class=\"n\">get_subject</span><span class=\"p\">()</span><span class=\"o\">.</span>\\\n    <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'F4:A5:74:89:16:57'</span><span class=\"p\">)</span><span class=\"o\">.</span>\\\n    <span class=\"n\">buffer_with_time</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span><span class=\"o\">.</span>\\\n    <span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">datas</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># Execute only every time when temperature changes for F4:A5:74:89:16:57</span>\n<span class=\"n\">ruuvi_rx</span><span class=\"o\">.</span><span class=\"n\">get_subject</span><span class=\"p\">()</span><span class=\"o\">.</span>\\\n    <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'F4:A5:74:89:16:57'</span><span class=\"p\">)</span><span class=\"o\">.</span>\\\n    <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">'temperature'</span><span class=\"p\">])</span><span class=\"o\">.</span>\\\n    <span class=\"n\">distinct_until_changed</span><span class=\"p\">()</span><span class=\"o\">.</span>\\\n    <span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Temperature changed: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Close all connections and stop bluetooth communication</span>\n<span class=\"n\">ruuvi_rx</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>More <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/rx.py\" rel=\"nofollow\">samples</a> and simple <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio_rx.py\" rel=\"nofollow\">HTTP server</a> under examples directory.</p>\n<p>Check official documentation from RxPy <a href=\"https://github.com/ReactiveX/RxPY\" rel=\"nofollow\">GitHub</a> and <a href=\"https://ninmesara.github.io/RxPY/api/operators/index.html\" rel=\"nofollow\">RxPY Public API</a></p>\n<h5>Find sensors</h5>\n<p><code>find_ruuvitags</code> function will exeute forever and when new RuuviTag sensor is found it will print it's MAC address and state at that moment. This function can be used with a command line applications. Logging must be enabled and set to print to console.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ruuvitag_sensor.log</span>\n\n<span class=\"n\">ruuvitag_sensor</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">enable_console</span><span class=\"p\">()</span>\n\n<span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">find_ruuvitags</span><span class=\"p\">()</span>\n</pre>\n<h5>Using different Bluetooth device</h5>\n<p>If you have multiple Bluetooth devices installed, device to be used might not be the default (Linux: hci0). Device can be passed with <code>bt_device</code> parameter.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvitag</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTag</span>\n\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTag</span><span class=\"p\">(</span><span class=\"s1\">'F4:A5:74:89:16:57'</span><span class=\"p\">,</span> <span class=\"s1\">'hci1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">find_ruuvitags</span><span class=\"p\">(</span><span class=\"s1\">'hci1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_data_for_sensors</span><span class=\"p\">(</span><span class=\"n\">bt_device</span><span class=\"o\">=</span><span class=\"s1\">'hci1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_datas</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\"> - </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"n\">bt_device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">))</span>\n</pre>\n<h5>Parse data</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.data_formats</span> <span class=\"kn\">import</span> <span class=\"n\">DataFormats</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.decoder</span> <span class=\"kn\">import</span> <span class=\"n\">get_decoder</span>\n\n<span class=\"n\">full_data</span> <span class=\"o\">=</span> <span class=\"s1\">'043E2A0201030157168974A51F0201060303AAFE1716AAFE10F9037275752E76692F23416A5558314D417730C3'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">full_data</span><span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">:]</span>\n\n<span class=\"c1\"># convert_data returns tuple which has Data Format type and encoded data</span>\n<span class=\"p\">(</span><span class=\"n\">data_format</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">DataFormats</span><span class=\"o\">.</span><span class=\"n\">convert_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">sensor_data</span> <span class=\"o\">=</span> <span class=\"n\">get_decoder</span><span class=\"p\">(</span><span class=\"n\">data_format</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode_data</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor_data</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'temperature': 25.12, 'identifier': '0', 'humidity': 26.5, 'pressure': 992.0}</span>\n</pre>\n<h5>Data Formats</h5>\n<p>Example data has data from 4 sensors with different firmwares.</p>\n<ul>\n<li>1st is Data Format 2 (URL) so identifier is None as sensor doesn't broadcast any identifier data</li>\n<li>2nd is Data Format 4 (URL) and it has an identifier character</li>\n<li>3rd is Data Format 3 (RAW)</li>\n<li>4th is Data Format 5 (RAW v2)</li>\n</ul>\n<pre><span class=\"p\">{</span>\n<span class=\"s1\">'CA:F7:44:DE:EB:E1'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'data_format'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'temperature'</span><span class=\"p\">:</span> <span class=\"mf\">22.0</span><span class=\"p\">,</span> <span class=\"s1\">'humidity'</span><span class=\"p\">:</span> <span class=\"mf\">28.0</span><span class=\"p\">,</span> <span class=\"s1\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">991.0</span><span class=\"p\">,</span> <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"p\">},</span> \n<span class=\"s1\">'F4:A5:74:89:16:57'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'data_format'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'temperature'</span><span class=\"p\">:</span> <span class=\"mf\">23.24</span><span class=\"p\">,</span> <span class=\"s1\">'humidity'</span><span class=\"p\">:</span> <span class=\"mf\">29.0</span><span class=\"p\">,</span> <span class=\"s1\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">991.0</span><span class=\"p\">,</span> <span class=\"s1\">'identifier'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span> <span class=\"p\">},</span>\n<span class=\"s1\">'A3:GE:2D:91:A4:1F'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'data_format'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'battery'</span><span class=\"p\">:</span> <span class=\"mi\">2899</span><span class=\"p\">,</span> <span class=\"s1\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">1027.66</span><span class=\"p\">,</span> <span class=\"s1\">'humidity'</span><span class=\"p\">:</span> <span class=\"mf\">20.5</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration'</span><span class=\"p\">:</span> <span class=\"mf\">63818.215675463696</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_x'</span><span class=\"p\">:</span> <span class=\"mf\">200.34</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_y'</span><span class=\"p\">:</span> <span class=\"mf\">0.512</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_z'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">200.42</span><span class=\"p\">,</span> <span class=\"s1\">'temperature'</span><span class=\"p\">:</span> <span class=\"mf\">26.3</span><span class=\"p\">},</span>\n<span class=\"s1\">'CB:B8:33:4C:88:4F'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'data_format'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'battery'</span><span class=\"p\">:</span> <span class=\"mf\">2.995</span><span class=\"p\">,</span> <span class=\"s1\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">1000.43</span><span class=\"p\">,</span> <span class=\"s1\">'mac'</span><span class=\"p\">:</span> <span class=\"s1\">'cbb8334c884f'</span><span class=\"p\">,</span> <span class=\"s1\">'measurement_sequence_number'</span><span class=\"p\">:</span> <span class=\"mi\">2467</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_z'</span><span class=\"p\">:</span> <span class=\"mi\">1028</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration'</span><span class=\"p\">:</span> <span class=\"mf\">1028.0389097694697</span><span class=\"p\">,</span> <span class=\"s1\">'temperature'</span><span class=\"p\">:</span> <span class=\"mf\">22.14</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_y'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'acceleration_x'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'humidity'</span><span class=\"p\">:</span> <span class=\"mf\">53.97</span><span class=\"p\">,</span> <span class=\"s1\">'tx_power'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'movement_counter'</span><span class=\"p\">:</span> <span class=\"mi\">70</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h5>Note on Data Format 2 and 4</h5>\n<p>There is no reason to use Data Format 2 or 4.</p>\n<p>Original reasoning to use the URL-encoded data was to use <em>Google's Nearby</em> notifications to let users to view the tags without the need to install any app. Since the <em>Nearby</em> has been discontinued there isn't any benefit in using Eddystone format anymore.</p>\n<h5>Logging and Print to console</h5>\n<p>Logging can be enabled by importing <code>ruuvitag_sensor.log</code>. Console print can be enabled by calling <code>ruuvitag_sensor.log.enable_console()</code>. Command line application has console logging enabled by default.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ruuvitag_sensor.ruuvi</span> <span class=\"kn\">import</span> <span class=\"n\">RuuviTagSensor</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ruuvitag_sensor.log</span>\n\n<span class=\"n\">ruuvitag_sensor</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">enable_console</span><span class=\"p\">()</span>\n\n<span class=\"n\">datas</span> <span class=\"o\">=</span> <span class=\"n\">RuuviTagSensor</span><span class=\"o\">.</span><span class=\"n\">get_data_for_sensors</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">datas</span><span class=\"p\">)</span>\n</pre>\n<h5>Command line application</h5>\n<pre><code>$ python ruuvitag_sensor -h\n\nusage: ruuvitag_sensor [-h] [-g MAC_ADDRESS] [-d BT_DEVICE] [-f] [-l] [-s] [--version]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g MAC_ADDRESS, --get MAC_ADDRESS\n                        Get data\n  -d BT_DEVICE, --device BT_DEVICE\n                        Set Bluetooth device id (default hci0)\n  -f, --find            Find broadcasting RuuviTags\n  -l, --latest          Get latest data for found RuuviTags\n  -s, --stream          Stream broadcasts from all RuuviTags\n  --version             show program's version number and exit\n</code></pre>\n<h2>BlueZ</h2>\n<p>BlueZ works only on <strong>Linux</strong>. Windows and macOS supports are only for testing and url decoding.</p>\n<p>BlueZ tools require <strong>superuser</strong> rights.</p>\n<p>Install BlueZ.</p>\n<pre>$ sudo apt-get install bluez bluez-hcidump\n</pre>\n<p>Ruuvitag_sensor package uses internally <em>hciconfig</em>, <em>hcitool</em> and <em>hcidump</em>. These tools are deprecated. In case tools are missing, older version of BlueZ is required (<a href=\"https://github.com/ttu/ruuvitag-sensor/issues/31\" rel=\"nofollow\">Issue</a>)</p>\n<h3>BlueZ limitations</h3>\n<p>The ruuvitag-sensor use BlueZ to listen broadcasted BL information (uses <em>hciconf</em>, <em>hcitool</em>, <em>hcidump</em>). Implementation does not handle well unexpected errors or changes, e.g. when adapter is busy, rebooted or powered down.</p>\n<p>In case of errors, application tries to exit immediately, so it can be automatically restarted.</p>\n<h2>Bleson</h2>\n<p>Current state and known bugs in <a href=\"https://github.com/ttu/ruuvitag-sensor/issues/78\" rel=\"nofollow\">issue #78</a>.</p>\n<p>Bleson works with Linux, macOS and partially with Windows.</p>\n<p>Requires <em>Python 3</em>.</p>\n<p>Bleson is not installed automatically with <code>ruuvitag_sensor</code> package. Install it manually from GitHub.</p>\n<pre>$ pip install git+https://github.com/TheCellule/python-bleson\n</pre>\n<p>Add environment variable <code>RUUVI_BLE_ADAPTER</code> with value <code>Bleson</code>. E.g.</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">RUUVI_BLE_ADAPTER</span><span class=\"o\">=</span><span class=\"s2\">\"Bleson\"</span>\n</pre>\n<p><strong>NOTE:</strong> On macOS only Data Format 5 works as macOS doesn't advertise MAC-address and only DF5 has MAC in sensor payload. <code>RuuviTag</code>-class doesn't work with macOS.</p>\n<p><strong>NOTE:</strong> On Windows Bleson requires <em>Python 3.6</em>. Unfortunately on Windows, Bleson doesn't send any payload for advertised package, so it is still unusable.</p>\n<h2>Examples</h2>\n<p>Examples are in <a href=\"https://github.com/ttu/ruuvitag-sensor/tree/master/examples\" rel=\"nofollow\">examples</a> directory, e.g.</p>\n<ul>\n<li>Keep track of each sensors current status and send updated data to server. <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/send_updated_sync.py\" rel=\"nofollow\">Sync</a> and <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/send_updated_async.py\" rel=\"nofollow\">async</a> version.</li>\n<li>Send found sensor data to InfluxDB. <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/post_to_influxdb_rx.py\" rel=\"nofollow\">Reactive</a> and <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/post_to_influxdb.py\" rel=\"nofollow\">non-reactive</a> version. Naming convention of sent data matches <a href=\"https://github.com/scrin/ruuvicollector\" rel=\"nofollow\">RuuviCollector library</a>.</li>\n<li>Simple HTTP Server for serving found sensor data. <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server.py\" rel=\"nofollow\">Flask</a>, <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio.py\" rel=\"nofollow\">aiohttp</a> and <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/examples/http_server_asyncio_rx.py\" rel=\"nofollow\">aiohttp with Rx</a>.</li>\n</ul>\n<h2>Changelog</h2>\n<p><a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/CHANGELOG.md\" rel=\"nofollow\">Changelog</a></p>\n<h2>Developer notes</h2>\n<p><a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/developer_notes.md\" rel=\"nofollow\">Notes for developers</a> who are interested in developing RuuviTag Sensor package or interested in it's internal functionality.</p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<h2>License</h2>\n<p>Licensed under the <a href=\"https://github.com/ttu/ruuvitag-sensor/blob/master/LICENSE\" rel=\"nofollow\">MIT</a> License.</p>\n\n          </div>"}, "last_serial": 7100941, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "9111e9d33705eb10d22bf1863d5e1ec1", "sha256": "bab0fb6d1583145fb8da6b16c5a4b9d4e9f8659e47f366a935af8ac5dab5ced0"}, "downloads": -1, "filename": "ruuvitag_sensor-0.10.0.tar.gz", "has_sig": false, "md5_digest": "9111e9d33705eb10d22bf1863d5e1ec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15700, "upload_time": "2018-03-11T17:12:09", "upload_time_iso_8601": "2018-03-11T17:12:09.233260Z", "url": "https://files.pythonhosted.org/packages/21/6a/6c5a30f0e9089bebe8bfd4e1dc019d05a64f867b4b6796ab1fb52f802603/ruuvitag_sensor-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "adca3b718f63975381d11bc8cb3b8532", "sha256": "1e5c98349eb8ecd3b88be01558759ba36abf2d8af3bd985065967494c9d129de"}, "downloads": -1, "filename": "ruuvitag_sensor-0.11.0.tar.gz", "has_sig": false, "md5_digest": "adca3b718f63975381d11bc8cb3b8532", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16857, "upload_time": "2018-04-25T14:51:57", "upload_time_iso_8601": "2018-04-25T14:51:57.975220Z", "url": "https://files.pythonhosted.org/packages/bf/dc/f9fff32bc5be277f531bc0dbd5b2d9cb2778d128fabc485170f35e987325/ruuvitag_sensor-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "b75674a620be4206783188e02d42254e", "sha256": "d77818a9ce50f0b4e8b7ca95a19526e2c4f6616eab75db1c37b2abb576fe4d21"}, "downloads": -1, "filename": "ruuvitag_sensor-0.12.0.tar.gz", "has_sig": false, "md5_digest": "b75674a620be4206783188e02d42254e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17430, "upload_time": "2019-02-15T18:15:39", "upload_time_iso_8601": "2019-02-15T18:15:39.361617Z", "url": "https://files.pythonhosted.org/packages/34/d9/a0a7eab9dbf3b64d310cd4b4aee22d9cedc0fe5635e4c619f11b56748ef7/ruuvitag_sensor-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "d2fa075044e0cbbbf2b050cc60d569bd", "sha256": "27b42d457f0722796ca10d26733b96e9ac431e446473cd4d755729c277dbf253"}, "downloads": -1, "filename": "ruuvitag_sensor-0.13.0.tar.gz", "has_sig": false, "md5_digest": "d2fa075044e0cbbbf2b050cc60d569bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17700, "upload_time": "2019-07-01T11:49:21", "upload_time_iso_8601": "2019-07-01T11:49:21.554814Z", "url": "https://files.pythonhosted.org/packages/72/04/582136009773cccc389002a858b24e4abaecc02ed3f7fc6d4bee40a6704f/ruuvitag_sensor-0.13.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "aec23af1a96ce0f6b7a4e8705a231830", "sha256": "79f8d390b70f3f7e9dd91321d41bb3400d80e57459c265bb648adb0043d3cfc2"}, "downloads": -1, "filename": "ruuvitag_sensor-0.2.2.zip", "has_sig": false, "md5_digest": "aec23af1a96ce0f6b7a4e8705a231830", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11480, "upload_time": "2017-01-03T22:37:48", "upload_time_iso_8601": "2017-01-03T22:37:48.392391Z", "url": "https://files.pythonhosted.org/packages/cf/71/230c436d0bd7b3e381fc9c2e5e86f09b1de01b767ddeb4c7c08965e77e10/ruuvitag_sensor-0.2.2.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0c04d5ed3c2b3d6c3238293ccb9f7233", "sha256": "8069036efd30d406db02a3a6813a7a32ed7a8157f45810c7dcb618254a5a11a2"}, "downloads": -1, "filename": "ruuvitag_sensor-0.3.0.zip", "has_sig": false, "md5_digest": "0c04d5ed3c2b3d6c3238293ccb9f7233", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12793, "upload_time": "2017-01-28T23:09:31", "upload_time_iso_8601": "2017-01-28T23:09:31.490345Z", "url": "https://files.pythonhosted.org/packages/5d/6b/7d9f67af9a4acfcdb965db25178fa2269680eaad47dfe09313b44ba7ea2b/ruuvitag_sensor-0.3.0.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "fed5f0e5c20828a0722b2707d81c4e5f", "sha256": "470a14897b4394b13edda0a2bea8f1999f079fcb4fafd56a1d163c9b87199a09"}, "downloads": -1, "filename": "ruuvitag_sensor-0.3.1.zip", "has_sig": false, "md5_digest": "fed5f0e5c20828a0722b2707d81c4e5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12829, "upload_time": "2017-01-29T16:45:16", "upload_time_iso_8601": "2017-01-29T16:45:16.071141Z", "url": "https://files.pythonhosted.org/packages/e3/33/4979ed6dd79f08f31d81c758dbe2ccc299c07e7a162a9041f87ec6e7d832/ruuvitag_sensor-0.3.1.zip", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "69b577d157a5648ad9fd9e44bb418166", "sha256": "17857d77b7b47a0c7f14dd4008bfa8c0b2b679e89c4f66179af44e08e0cff4a8"}, "downloads": -1, "filename": "ruuvitag_sensor-0.3.2.zip", "has_sig": false, "md5_digest": "69b577d157a5648ad9fd9e44bb418166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12978, "upload_time": "2017-01-30T19:21:18", "upload_time_iso_8601": "2017-01-30T19:21:18.711548Z", "url": "https://files.pythonhosted.org/packages/00/02/492a4cc16fc22bef7f6e0f02cfad35683753767bf46f431539745874228d/ruuvitag_sensor-0.3.2.zip", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "397cba9b1e787b496cf59420b9ed6739", "sha256": "0d94ab2be5e9a8c8a94469ea4c1012188e004d27f35c145d04815fff56200590"}, "downloads": -1, "filename": "ruuvitag_sensor-0.3.3.zip", "has_sig": false, "md5_digest": "397cba9b1e787b496cf59420b9ed6739", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12958, "upload_time": "2017-01-31T08:15:19", "upload_time_iso_8601": "2017-01-31T08:15:19.844310Z", "url": "https://files.pythonhosted.org/packages/71/0c/9745e012fa2a66be1f3fdc90826904a6df27708cd65de56e7d2fdd4f4c80/ruuvitag_sensor-0.3.3.zip", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "aef497ec2f0a97d8f3e57d5d223e79fd", "sha256": "7a7c9de95a1acf674c98a07aeb919e407bc16f0e42f57b1e99c391edb5a2c586"}, "downloads": -1, "filename": "ruuvitag_sensor-0.3.4.zip", "has_sig": false, "md5_digest": "aef497ec2f0a97d8f3e57d5d223e79fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12949, "upload_time": "2017-02-01T07:55:27", "upload_time_iso_8601": "2017-02-01T07:55:27.385852Z", "url": "https://files.pythonhosted.org/packages/9d/f3/e7c9598c0dc3a7d613f2125f62dc6faa24a1c969a40e5516af9efaa26cef/ruuvitag_sensor-0.3.4.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "c1e7ff2a715dcfd10b41da00178bbc11", "sha256": "3275670fec3de7dd22cfd94091834922c435214e50b33dc5ff9e7a56b1a9e113"}, "downloads": -1, "filename": "ruuvitag_sensor-0.4.0.zip", "has_sig": false, "md5_digest": "c1e7ff2a715dcfd10b41da00178bbc11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14939, "upload_time": "2017-02-19T09:59:23", "upload_time_iso_8601": "2017-02-19T09:59:23.134504Z", "url": "https://files.pythonhosted.org/packages/01/d2/644432d71763ecbc654a824040d0070dcbf845f0b68d3ade5f6988808c10/ruuvitag_sensor-0.4.0.zip", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9a9785dd65739e8b1f47be876e792b95", "sha256": "ca4a3d0de9e0c677bdd4c3d5dcb1bdeaab769714dc971749b82a49d158f2b095"}, "downloads": -1, "filename": "ruuvitag_sensor-0.5.0.zip", "has_sig": false, "md5_digest": "9a9785dd65739e8b1f47be876e792b95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17634, "upload_time": "2017-03-01T22:00:23", "upload_time_iso_8601": "2017-03-01T22:00:23.232281Z", "url": "https://files.pythonhosted.org/packages/ee/36/8016262be8a3e523dc2ff7b134b9587e1f1b922b0302109851ca1f436938/ruuvitag_sensor-0.5.0.zip", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7b0c15d2f20d420ddbb24527cf5a6147", "sha256": "04f45c89f2bf5f31fa6c16ff0c1eabcdebf350acc1237e5b69ac1675c173b2a7"}, "downloads": -1, "filename": "ruuvitag_sensor-0.6.0.zip", "has_sig": false, "md5_digest": "7b0c15d2f20d420ddbb24527cf5a6147", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19462, "upload_time": "2017-05-05T19:01:56", "upload_time_iso_8601": "2017-05-05T19:01:56.743268Z", "url": "https://files.pythonhosted.org/packages/95/da/e685615a13aeeb9bb0d8e0f45c126039efa6a0e317f1b5844045fc2db473/ruuvitag_sensor-0.6.0.zip", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "a2777e09717e40c092cb2d43acc79fee", "sha256": "e3598065dbfc85a11de049677fcfae8656d697a27a14d176befb1322c250d947"}, "downloads": -1, "filename": "ruuvitag_sensor-0.7.0.zip", "has_sig": false, "md5_digest": "a2777e09717e40c092cb2d43acc79fee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20180, "upload_time": "2017-06-28T21:27:20", "upload_time_iso_8601": "2017-06-28T21:27:20.082120Z", "url": "https://files.pythonhosted.org/packages/d9/19/4108b74b78ffd3e9a0b7150df00b018003cd5b2c02d4600aa6a1c4188848/ruuvitag_sensor-0.7.0.zip", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "a0c20a7e28f97f554da4cb0c92b64cd1", "sha256": "1876b910268e733c4253c07d360545b6e0d40b699441b6b17830799e3cae95d4"}, "downloads": -1, "filename": "ruuvitag_sensor-0.8.0.tar.gz", "has_sig": false, "md5_digest": "a0c20a7e28f97f554da4cb0c92b64cd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14409, "upload_time": "2017-07-29T07:14:15", "upload_time_iso_8601": "2017-07-29T07:14:15.770744Z", "url": "https://files.pythonhosted.org/packages/de/e2/bfbadc45996df3110407a9c0cbf3399718886f7735f40071c31ab4c34b96/ruuvitag_sensor-0.8.0.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "bb626477e42faddb1406d00395385e88", "sha256": "6053f3011b86dc964c148041bfe0a9d73b2707e5308f631e356458426db95151"}, "downloads": -1, "filename": "ruuvitag_sensor-0.8.2.tar.gz", "has_sig": false, "md5_digest": "bb626477e42faddb1406d00395385e88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14599, "upload_time": "2017-09-09T12:17:22", "upload_time_iso_8601": "2017-09-09T12:17:22.899784Z", "url": "https://files.pythonhosted.org/packages/49/4c/cc2afc1bddae2a194a9128c078bf55319a9e650f388bab6323e2de7ba7f4/ruuvitag_sensor-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "132fb34de2f31f4a0519eb0c11e59559", "sha256": "49924ae26376b9f4efff64909b4fac996e2a044923fe36275ed29a0d209d68e6"}, "downloads": -1, "filename": "ruuvitag_sensor-0.9.0.tar.gz", "has_sig": false, "md5_digest": "132fb34de2f31f4a0519eb0c11e59559", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15578, "upload_time": "2017-10-28T22:08:11", "upload_time_iso_8601": "2017-10-28T22:08:11.356544Z", "url": "https://files.pythonhosted.org/packages/06/a3/9e7f02f8c8a995e4735f66d946c60d6250406681acd721d1c452e18d3416/ruuvitag_sensor-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "417bb8dc1e2a4a174c8c5cb61778a469", "sha256": "1d8aecdbf0ba102c343d76505a97a83cb6753960c32021e3b69bac70ddfdf094"}, "downloads": -1, "filename": "ruuvitag_sensor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "417bb8dc1e2a4a174c8c5cb61778a469", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15670, "upload_time": "2020-03-21T06:17:28", "upload_time_iso_8601": "2020-03-21T06:17:28.042921Z", "url": "https://files.pythonhosted.org/packages/f7/74/4797218270a77d277ed5677597ffeac494e13a292a44f8d0c12a72e2474e/ruuvitag_sensor-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "065f5d2fb22aa2f0eb0e84f2ec67d9cf", "sha256": "ae9c60e6536a35695ab384f53aa2dc0efde0569317024c853a3c96e0ed4f6b6c"}, "downloads": -1, "filename": "ruuvitag_sensor-1.0.1.tar.gz", "has_sig": false, "md5_digest": "065f5d2fb22aa2f0eb0e84f2ec67d9cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17020, "upload_time": "2020-03-21T06:47:03", "upload_time_iso_8601": "2020-03-21T06:47:03.112430Z", "url": "https://files.pythonhosted.org/packages/25/90/2c071a18c1df0daf17d1c22ee1aff7874979aedaf2cf6ede5f8e2fc016be/ruuvitag_sensor-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b495fbcd4c50ecb8f00a31caed8b41e2", "sha256": "c180c6093ef1271ab52b89cc68ab8b115ae6a4d21cf9cd6efddc2e434d030045"}, "downloads": -1, "filename": "ruuvitag_sensor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b495fbcd4c50ecb8f00a31caed8b41e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19073, "upload_time": "2020-04-25T19:30:00", "upload_time_iso_8601": "2020-04-25T19:30:00.813943Z", "url": "https://files.pythonhosted.org/packages/35/33/0e9792790997a613f89ff4ea268de5f046fc68296e41526daa5ba8350e95/ruuvitag_sensor-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b495fbcd4c50ecb8f00a31caed8b41e2", "sha256": "c180c6093ef1271ab52b89cc68ab8b115ae6a4d21cf9cd6efddc2e434d030045"}, "downloads": -1, "filename": "ruuvitag_sensor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b495fbcd4c50ecb8f00a31caed8b41e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19073, "upload_time": "2020-04-25T19:30:00", "upload_time_iso_8601": "2020-04-25T19:30:00.813943Z", "url": "https://files.pythonhosted.org/packages/35/33/0e9792790997a613f89ff4ea268de5f046fc68296e41526daa5ba8350e95/ruuvitag_sensor-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:50 2020"}