{"info": {"author": "FraudLabs Pro", "author_email": "support@fraudlabspro.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# FraudLabs Pro Python SDK\n\nThis Python module enables user to easily implement fraud detection feature into their solution using the API from https://www.fraudlabspro.com.\n\n\n\nBelow are the features of this Python module:\n\n* Fraud analysis and scoring\n* Credit card issuing bank validation\n* SMS verification and validation\n\nThis module requires API key to function. You may subscribe a free API key at https://www.fraudlabspro.com\n\n\n\n\n\n## Usage Example\n\n### Validate Order\n\n#### Object Properties\n\n\n\n| Property Name        | Property Type | Description                                                  |\n| -------------------- | ------------- | ------------------------------------------------------------ |\n| ip                   | string        | IP address of online transaction. It supports both IPv4 and IPv6 address format. |\n| billing->firstName   | string        | User's first name.                                           |\n| billing->lastName    | string        | User's last name.                                            |\n| billing->username    | string        | User's username.                                             |\n| billing->password    | string        | User's password.                                             |\n| billing->email       | string        | User's email address.                                        |\n| billing->phone       | string        | User's phone number.                                         |\n| billing->address     | string        | Street address of billing address.                           |\n| billing->city        | string        | City of billing address.                                     |\n| billing->state       | string        | State of billing address. It supports state codes, e.g. NY (New York), for state or province of United States or Canada. Please refer to [State & Province Codes](https://www.fraudlabspro.com/developer/reference/state-and-province-codes) for complete list. |\n| billing->postcode    | string        | Postal or ZIP code of billing address.                       |\n| billing->country     | string        | Country of billing address. It requires the input of ISO-3166 alpha-2 country code, e.g. US for United States. Please refer to [Country Codes](https://www.fraudlabspro.com/developer/reference/country-codes) for complete list. |\n| order->orderId       | string        | Merchant identifier to uniquely identify a transaction. It supports maximum of 15 characters user order id input. |\n| order->note          | string        | Merchant description of an order transaction. It supports maximum of 200 characters. |\n| order->amount        | float         | Amount of the transaction.                                   |\n| order->quantity      | integer       | Total quantity of the transaction.                           |\n| order->currency      | string        | Currency code used in the transaction. It requires the input of ISO-4217 (3 characters) currency code, e.g. USD for US Dollar. Please refer to [Currency Codes](https://www.fraudlabspro.com/developer/reference/currency-codes) for complete list. |\n| order->department    | string        | Merchant identifier to uniquely identify a product or service department. |\n| order->paymentMethod | string        | Payment mode of transaction. Please see references section.  |\n| card->number         | string        | Billing credit card number or BIN number.                    |\n| card->avs            | string        | The single character AVS result returned by the credit card processor. Please refer to [AVS & CVV2 Response Codes](https://www.fraudlabspro.com/developer/reference/avs-and-cvv2-response-codes) for details. |\n| card->cvv            | string        | The single character CVV2 result returned by the credit card processor. Please refer to [AVS & CVV2 Response Codes](https://www.fraudlabspro.com/developer/reference/avs-and-cvv2-response-codes) for details. |\n| shipping->address    | string        | Street address of shipping address.                          |\n| shipping->city       | string        | City of shipping address.                                    |\n| shipping->state      | string        | State of shipping address. It supports state codes, e.g. NY - New York, for state or province of United States or Canada. Please refer to [State & Province Codes](https://www.fraudlabspro.com/developer/reference/state-and-province-codes) for complete list. |\n| shipping->postcode   | string        | Postal or ZIP code of shipping address.                      |\n| shipping->country    | string        | Country of shipping address. It requires the input of ISO-3166 alpha-2 country code, e.g. US for United States. Please refer to [Country Codes](https://www.fraudlabspro.com/developer/reference/country-codes) for complete list. |\n\n\n\n```python\n # import SDK to use the function\nfrom libs.order import Order\n\n # Configure your API key\napi_key = 'YOUR_API_KEY'\n\n # Order Details\ndict1 = {\n\t'key': api_key,\n\t'ip': '146.112.62.105',\n\t'order': {\n\t\t'order_id': '67398', \n\t\t'currency': 'USD',\n\t\t'amount': '42',\n\t\t'quantity': 1, \n\t\t'paymentMethod': 'creditcard'\n\t},\n\t'card': {\n\t\t'number': '4556553172971283'\n\t},\n\t'billing': {\n\t\t'firstName': 'Hector',\n\t\t'lastName': 'Henderson',\n\t\t'email': 'hh5566@gmail.com',\n\t\t'phone': '561-628-8674',\n\t\t'address': '1766 Powder House Road',\n\t\t'city': 'West Palm Beach',\n\t\t'state': 'FL',\n\t\t'postcode': '33401',\n\t\t'country': 'US',\n\t},\n\t'shipping': {\n\t\t'address': '4469 Chestnut Street',\n\t\t'city'   : 'Tampa',\n\t\t'state'  : 'FL',\n\t\t'postcode': '33602',\n\t\t'country': 'US',\n\t}\n}\n\n # Sends the order details to FraudLabs Pro\nresult = Order.validate(dict1)\n```\n\n\n\n### Get Transaction\n\n#### Parameter Properties\n\n| Parameter Name | Parameter Type | Description                                                  |\n| -------------- | -------------- | ------------------------------------------------------------ |\n| $id            | string         | FraudLabs Pro transaction ID or Order ID.                    |\n| $type          | string         | ID type. Either: **FraudLabsPrp::FLP_ID** or **FraudLabsPro::ORDER_ID** |\n\n```python\n # import SDK to use the function\nfrom libs.order import Order\n\n # Configure your API key\napi_key = 'YOUR_API_KEY'\n\n # Values to get transaction details\nget_transaction_variables = {\n\t'key': api_key,\n\t'id': '20180705-WISXW2',\n\t'id_type': 'FraudLabsPro::FLP_ID'\n}\n\n # Send the values to FraudLabs Pro\nresult = Order.get_transaction(get_transaction_variables)\n```\n\n\n\n### Feedback\n\n#### Object Properties\n\n| Property Name | Property Type | Description                                                  |\n| ------------- | ------------- | ------------------------------------------------------------ |\n| id            | string        | Unique transaction ID generated from **Validate** function.  |\n| status        | string        | Perform APPROVE, REJECT, or REJECT_BLACKLIST action to transaction.\tRefer to [reference section](#feedback-status) for status code. |\n| note          | string        | Notes for the feedback request.                              |\n\n```python\n # import SDK to use the function\nfrom libs.order import Order\n\n # Configure your API key\napi_key = 'YOUR_API_KEY'\n\n # Set feedback of the particular order\nfeedback_variables = {\n\t'key': api_key,\n\t'id': '20180705-WISXW2',\n\t# Three actions available: APPROVE, REJECT, REJECT_BLACKLIST\n\t'action': 'APPROVE',\n\t'notes': 'This is for testing purpose.',\n}\n\nOrder.feedback(feedback_variables)\n```\n\n\n\n## SMS Verification\n\n### Send SMS Verification\n\n#### Object Properties\n\n| Property Name | Property Type | Description                                                  |\n| ------------- | :-----------: | ------------------------------------------------------------ |\n| tel           |    string     | The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses. |\n| mesg          |    string     | The message template for the SMS. Add <otp> as placeholder for the actual OTP to be generated. Max length is 140 characters. |\n| country_code  |    string     | ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done. |\n\n```python\n # import SDK to use the function\nfrom libs.smsverification import SMSVerification\n\n # Configure your API key\napi_key = 'YOUR_API_KEY'\n\n # Send SMS verification\nsms_verification_variables = {\n\t'key': api_key,\n\t'tel': '+15616288674',\n\t'country_code': 'US',\n\t'mesg': 'Your OTP for the transaction is <otp>.',\n}\nresult = SMSVerification.send_sms(sms_verification_variables)\n```\n\n\n\n### Get SMS Verification Result\n\n#### Object Properties\n\n| Property Name | Property Type | Description                                                  |\n| ------------- | :-----------: | ------------------------------------------------------------ |\n| tran_id       |    string     | The unique ID that was returned by the Send SMS Verification that triggered the OTP sms. |\n| otp           |    string     | The OTP that was sent to the recipient\u00e2\u20ac\u2122s phone.              |\n\n```python\n # import SDK to use the function\nfrom libs.smsverification import SMSVerification\n\n # Configure your API key\napi_key = 'YOUR_API_KEY'\n\n # Get SMS verification result\nverify_sms_variables = {\n\t'key': api_key,\n\t'tran_id': 'UNIQUE_TRANS_ID',\n\t'otp': 'OTP_RECEIVED',\n}\nresult = SMSVerification.verify_sms(verify_sms_variables)\n```\n\n\n\n# Reference\n\n#### Payment Method\n\n| Payment Method |\n| -------------- |\n| creditcard     |\n| paypal         |\n| googlecheckout |\n| bitcoin        |\n| cod            |\n| moneyorder     |\n| wired          |\n| bankdeposit    |\n| others         |\n\n\n\nLICENCE\n=====================\nSee the LICENSE file.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.fraudlabspro.com", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fraudlabspro", "package_url": "https://pypi.org/project/fraudlabspro/", "platform": "", "project_url": "https://pypi.org/project/fraudlabspro/", "project_urls": {"Homepage": "https://www.fraudlabspro.com"}, "release_url": "https://pypi.org/project/fraudlabspro/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "A Python module enables user to easily implement fraud detection feature into their solution using the API from https://www.fraudlabspro.com.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FraudLabs Pro Python SDK</h1>\n<p>This Python module enables user to easily implement fraud detection feature into their solution using the API from <a href=\"https://www.fraudlabspro.com\" rel=\"nofollow\">https://www.fraudlabspro.com</a>.</p>\n<p>Below are the features of this Python module:</p>\n<ul>\n<li>Fraud analysis and scoring</li>\n<li>Credit card issuing bank validation</li>\n<li>SMS verification and validation</li>\n</ul>\n<p>This module requires API key to function. You may subscribe a free API key at <a href=\"https://www.fraudlabspro.com\" rel=\"nofollow\">https://www.fraudlabspro.com</a></p>\n<h2>Usage Example</h2>\n<h3>Validate Order</h3>\n<h4>Object Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Property Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ip</td>\n<td>string</td>\n<td>IP address of online transaction. It supports both IPv4 and IPv6 address format.</td>\n</tr>\n<tr>\n<td>billing-&gt;firstName</td>\n<td>string</td>\n<td>User's first name.</td>\n</tr>\n<tr>\n<td>billing-&gt;lastName</td>\n<td>string</td>\n<td>User's last name.</td>\n</tr>\n<tr>\n<td>billing-&gt;username</td>\n<td>string</td>\n<td>User's username.</td>\n</tr>\n<tr>\n<td>billing-&gt;password</td>\n<td>string</td>\n<td>User's password.</td>\n</tr>\n<tr>\n<td>billing-&gt;email</td>\n<td>string</td>\n<td>User's email address.</td>\n</tr>\n<tr>\n<td>billing-&gt;phone</td>\n<td>string</td>\n<td>User's phone number.</td>\n</tr>\n<tr>\n<td>billing-&gt;address</td>\n<td>string</td>\n<td>Street address of billing address.</td>\n</tr>\n<tr>\n<td>billing-&gt;city</td>\n<td>string</td>\n<td>City of billing address.</td>\n</tr>\n<tr>\n<td>billing-&gt;state</td>\n<td>string</td>\n<td>State of billing address. It supports state codes, e.g. NY (New York), for state or province of United States or Canada. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/state-and-province-codes\" rel=\"nofollow\">State &amp; Province Codes</a> for complete list.</td>\n</tr>\n<tr>\n<td>billing-&gt;postcode</td>\n<td>string</td>\n<td>Postal or ZIP code of billing address.</td>\n</tr>\n<tr>\n<td>billing-&gt;country</td>\n<td>string</td>\n<td>Country of billing address. It requires the input of ISO-3166 alpha-2 country code, e.g. US for United States. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/country-codes\" rel=\"nofollow\">Country Codes</a> for complete list.</td>\n</tr>\n<tr>\n<td>order-&gt;orderId</td>\n<td>string</td>\n<td>Merchant identifier to uniquely identify a transaction. It supports maximum of 15 characters user order id input.</td>\n</tr>\n<tr>\n<td>order-&gt;note</td>\n<td>string</td>\n<td>Merchant description of an order transaction. It supports maximum of 200 characters.</td>\n</tr>\n<tr>\n<td>order-&gt;amount</td>\n<td>float</td>\n<td>Amount of the transaction.</td>\n</tr>\n<tr>\n<td>order-&gt;quantity</td>\n<td>integer</td>\n<td>Total quantity of the transaction.</td>\n</tr>\n<tr>\n<td>order-&gt;currency</td>\n<td>string</td>\n<td>Currency code used in the transaction. It requires the input of ISO-4217 (3 characters) currency code, e.g. USD for US Dollar. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/currency-codes\" rel=\"nofollow\">Currency Codes</a> for complete list.</td>\n</tr>\n<tr>\n<td>order-&gt;department</td>\n<td>string</td>\n<td>Merchant identifier to uniquely identify a product or service department.</td>\n</tr>\n<tr>\n<td>order-&gt;paymentMethod</td>\n<td>string</td>\n<td>Payment mode of transaction. Please see references section.</td>\n</tr>\n<tr>\n<td>card-&gt;number</td>\n<td>string</td>\n<td>Billing credit card number or BIN number.</td>\n</tr>\n<tr>\n<td>card-&gt;avs</td>\n<td>string</td>\n<td>The single character AVS result returned by the credit card processor. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/avs-and-cvv2-response-codes\" rel=\"nofollow\">AVS &amp; CVV2 Response Codes</a> for details.</td>\n</tr>\n<tr>\n<td>card-&gt;cvv</td>\n<td>string</td>\n<td>The single character CVV2 result returned by the credit card processor. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/avs-and-cvv2-response-codes\" rel=\"nofollow\">AVS &amp; CVV2 Response Codes</a> for details.</td>\n</tr>\n<tr>\n<td>shipping-&gt;address</td>\n<td>string</td>\n<td>Street address of shipping address.</td>\n</tr>\n<tr>\n<td>shipping-&gt;city</td>\n<td>string</td>\n<td>City of shipping address.</td>\n</tr>\n<tr>\n<td>shipping-&gt;state</td>\n<td>string</td>\n<td>State of shipping address. It supports state codes, e.g. NY - New York, for state or province of United States or Canada. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/state-and-province-codes\" rel=\"nofollow\">State &amp; Province Codes</a> for complete list.</td>\n</tr>\n<tr>\n<td>shipping-&gt;postcode</td>\n<td>string</td>\n<td>Postal or ZIP code of shipping address.</td>\n</tr>\n<tr>\n<td>shipping-&gt;country</td>\n<td>string</td>\n<td>Country of shipping address. It requires the input of ISO-3166 alpha-2 country code, e.g. US for United States. Please refer to <a href=\"https://www.fraudlabspro.com/developer/reference/country-codes\" rel=\"nofollow\">Country Codes</a> for complete list.</td>\n</tr></tbody></table>\n<pre> <span class=\"c1\"># import SDK to use the function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libs.order</span> <span class=\"kn\">import</span> <span class=\"n\">Order</span>\n\n <span class=\"c1\"># Configure your API key</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n\n <span class=\"c1\"># Order Details</span>\n<span class=\"n\">dict1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'ip'</span><span class=\"p\">:</span> <span class=\"s1\">'146.112.62.105'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'order'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'order_id'</span><span class=\"p\">:</span> <span class=\"s1\">'67398'</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'currency'</span><span class=\"p\">:</span> <span class=\"s1\">'USD'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'amount'</span><span class=\"p\">:</span> <span class=\"s1\">'42'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'quantity'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> \n\t\t<span class=\"s1\">'paymentMethod'</span><span class=\"p\">:</span> <span class=\"s1\">'creditcard'</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"s1\">'card'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'4556553172971283'</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"s1\">'billing'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'firstName'</span><span class=\"p\">:</span> <span class=\"s1\">'Hector'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'lastName'</span><span class=\"p\">:</span> <span class=\"s1\">'Henderson'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'hh5566@gmail.com'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'phone'</span><span class=\"p\">:</span> <span class=\"s1\">'561-628-8674'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"s1\">'1766 Powder House Road'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"s1\">'West Palm Beach'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'FL'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'postcode'</span><span class=\"p\">:</span> <span class=\"s1\">'33401'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"s1\">'US'</span><span class=\"p\">,</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"s1\">'shipping'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"s1\">'4469 Chestnut Street'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'city'</span>   <span class=\"p\">:</span> <span class=\"s1\">'Tampa'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'state'</span>  <span class=\"p\">:</span> <span class=\"s1\">'FL'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'postcode'</span><span class=\"p\">:</span> <span class=\"s1\">'33602'</span><span class=\"p\">,</span>\n\t\t<span class=\"s1\">'country'</span><span class=\"p\">:</span> <span class=\"s1\">'US'</span><span class=\"p\">,</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n <span class=\"c1\"># Sends the order details to FraudLabs Pro</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">dict1</span><span class=\"p\">)</span>\n</pre>\n<h3>Get Transaction</h3>\n<h4>Parameter Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Parameter Name</th>\n<th>Parameter Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$id</td>\n<td>string</td>\n<td>FraudLabs Pro transaction ID or Order ID.</td>\n</tr>\n<tr>\n<td>$type</td>\n<td>string</td>\n<td>ID type. Either: <strong>FraudLabsPrp::FLP_ID</strong> or <strong>FraudLabsPro::ORDER_ID</strong></td>\n</tr></tbody></table>\n<pre> <span class=\"c1\"># import SDK to use the function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libs.order</span> <span class=\"kn\">import</span> <span class=\"n\">Order</span>\n\n <span class=\"c1\"># Configure your API key</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n\n <span class=\"c1\"># Values to get transaction details</span>\n<span class=\"n\">get_transaction_variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'20180705-WISXW2'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'id_type'</span><span class=\"p\">:</span> <span class=\"s1\">'FraudLabsPro::FLP_ID'</span>\n<span class=\"p\">}</span>\n\n <span class=\"c1\"># Send the values to FraudLabs Pro</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">get_transaction</span><span class=\"p\">(</span><span class=\"n\">get_transaction_variables</span><span class=\"p\">)</span>\n</pre>\n<h3>Feedback</h3>\n<h4>Object Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th>Property Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>string</td>\n<td>Unique transaction ID generated from <strong>Validate</strong> function.</td>\n</tr>\n<tr>\n<td>status</td>\n<td>string</td>\n<td>Perform APPROVE, REJECT, or REJECT_BLACKLIST action to transaction.\tRefer to <a href=\"#feedback-status\" rel=\"nofollow\">reference section</a> for status code.</td>\n</tr>\n<tr>\n<td>note</td>\n<td>string</td>\n<td>Notes for the feedback request.</td>\n</tr></tbody></table>\n<pre> <span class=\"c1\"># import SDK to use the function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libs.order</span> <span class=\"kn\">import</span> <span class=\"n\">Order</span>\n\n <span class=\"c1\"># Configure your API key</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n\n <span class=\"c1\"># Set feedback of the particular order</span>\n<span class=\"n\">feedback_variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'20180705-WISXW2'</span><span class=\"p\">,</span>\n\t<span class=\"c1\"># Three actions available: APPROVE, REJECT, REJECT_BLACKLIST</span>\n\t<span class=\"s1\">'action'</span><span class=\"p\">:</span> <span class=\"s1\">'APPROVE'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'notes'</span><span class=\"p\">:</span> <span class=\"s1\">'This is for testing purpose.'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Order</span><span class=\"o\">.</span><span class=\"n\">feedback</span><span class=\"p\">(</span><span class=\"n\">feedback_variables</span><span class=\"p\">)</span>\n</pre>\n<h2>SMS Verification</h2>\n<h3>Send SMS Verification</h3>\n<h4>Object Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th align=\"center\">Property Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tel</td>\n<td align=\"center\">string</td>\n<td>The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses.</td>\n</tr>\n<tr>\n<td>mesg</td>\n<td align=\"center\">string</td>\n<td>The message template for the SMS. Add &lt;otp&gt; as placeholder for the actual OTP to be generated. Max length is 140 characters.</td>\n</tr>\n<tr>\n<td>country_code</td>\n<td align=\"center\">string</td>\n<td>ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done.</td>\n</tr></tbody></table>\n<pre> <span class=\"c1\"># import SDK to use the function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libs.smsverification</span> <span class=\"kn\">import</span> <span class=\"n\">SMSVerification</span>\n\n <span class=\"c1\"># Configure your API key</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n\n <span class=\"c1\"># Send SMS verification</span>\n<span class=\"n\">sms_verification_variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'tel'</span><span class=\"p\">:</span> <span class=\"s1\">'+15616288674'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'country_code'</span><span class=\"p\">:</span> <span class=\"s1\">'US'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'mesg'</span><span class=\"p\">:</span> <span class=\"s1\">'Your OTP for the transaction is &lt;otp&gt;.'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">SMSVerification</span><span class=\"o\">.</span><span class=\"n\">send_sms</span><span class=\"p\">(</span><span class=\"n\">sms_verification_variables</span><span class=\"p\">)</span>\n</pre>\n<h3>Get SMS Verification Result</h3>\n<h4>Object Properties</h4>\n<table>\n<thead>\n<tr>\n<th>Property Name</th>\n<th align=\"center\">Property Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tran_id</td>\n<td align=\"center\">string</td>\n<td>The unique ID that was returned by the Send SMS Verification that triggered the OTP sms.</td>\n</tr>\n<tr>\n<td>otp</td>\n<td align=\"center\">string</td>\n<td>The OTP that was sent to the recipient\u00e2\u20ac\u2122s phone.</td>\n</tr></tbody></table>\n<pre> <span class=\"c1\"># import SDK to use the function</span>\n<span class=\"kn\">from</span> <span class=\"nn\">libs.smsverification</span> <span class=\"kn\">import</span> <span class=\"n\">SMSVerification</span>\n\n <span class=\"c1\"># Configure your API key</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n\n <span class=\"c1\"># Get SMS verification result</span>\n<span class=\"n\">verify_sms_variables</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\t<span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"n\">api_key</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'tran_id'</span><span class=\"p\">:</span> <span class=\"s1\">'UNIQUE_TRANS_ID'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'otp'</span><span class=\"p\">:</span> <span class=\"s1\">'OTP_RECEIVED'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">SMSVerification</span><span class=\"o\">.</span><span class=\"n\">verify_sms</span><span class=\"p\">(</span><span class=\"n\">verify_sms_variables</span><span class=\"p\">)</span>\n</pre>\n<h1>Reference</h1>\n<h4>Payment Method</h4>\n<table>\n<thead>\n<tr>\n<th>Payment Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>creditcard</td>\n</tr>\n<tr>\n<td>paypal</td>\n</tr>\n<tr>\n<td>googlecheckout</td>\n</tr>\n<tr>\n<td>bitcoin</td>\n</tr>\n<tr>\n<td>cod</td>\n</tr>\n<tr>\n<td>moneyorder</td>\n</tr>\n<tr>\n<td>wired</td>\n</tr>\n<tr>\n<td>bankdeposit</td>\n</tr>\n<tr>\n<td>others</td>\n</tr></tbody></table>\n<h1>LICENCE</h1>\n<p>See the LICENSE file.</p>\n\n          </div>"}, "last_serial": 6251133, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "a3e7b93d8fc2fc77d6be3f281f20210c", "sha256": "c711cb43f12fc8192f21f04e637f1654d9a950f7dab0e4283426bd35324daf4d"}, "downloads": -1, "filename": "fraudlabspro-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3e7b93d8fc2fc77d6be3f281f20210c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8425, "upload_time": "2019-12-06T00:37:59", "upload_time_iso_8601": "2019-12-06T00:37:59.108521Z", "url": "https://files.pythonhosted.org/packages/d4/a2/6f43db8829b3b766a306ca9b61457cfea1484abf92946310e63e36b0d9d4/fraudlabspro-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecf0a126fb4a2eace4d8696e6ee94335", "sha256": "696e47f5936e1acd8dc81d3a4165ef5a47fb605eb2db432a57f012797486d3df"}, "downloads": -1, "filename": "fraudlabspro-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ecf0a126fb4a2eace4d8696e6ee94335", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6392, "upload_time": "2019-12-06T00:38:04", "upload_time_iso_8601": "2019-12-06T00:38:04.359661Z", "url": "https://files.pythonhosted.org/packages/d6/cc/86bcc472acebf805fb9bdf712b0c604987d9a6aab57c43756c98f097fdd9/fraudlabspro-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3e7b93d8fc2fc77d6be3f281f20210c", "sha256": "c711cb43f12fc8192f21f04e637f1654d9a950f7dab0e4283426bd35324daf4d"}, "downloads": -1, "filename": "fraudlabspro-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3e7b93d8fc2fc77d6be3f281f20210c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8425, "upload_time": "2019-12-06T00:37:59", "upload_time_iso_8601": "2019-12-06T00:37:59.108521Z", "url": "https://files.pythonhosted.org/packages/d4/a2/6f43db8829b3b766a306ca9b61457cfea1484abf92946310e63e36b0d9d4/fraudlabspro-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecf0a126fb4a2eace4d8696e6ee94335", "sha256": "696e47f5936e1acd8dc81d3a4165ef5a47fb605eb2db432a57f012797486d3df"}, "downloads": -1, "filename": "fraudlabspro-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ecf0a126fb4a2eace4d8696e6ee94335", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6392, "upload_time": "2019-12-06T00:38:04", "upload_time_iso_8601": "2019-12-06T00:38:04.359661Z", "url": "https://files.pythonhosted.org/packages/d6/cc/86bcc472acebf805fb9bdf712b0c604987d9a6aab57c43756c98f097fdd9/fraudlabspro-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:31 2020"}