{"info": {"author": "Mariano Mara", "author_email": "mariano.mara@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "--------------\n        SQLA_Hierarchy\n        --------------\n        \n        -----------\n        Description\n        -----------\n        \n        Given a `Table`_ object and a `Select`_ expression, this class will return the information from these objects with some extra columns that will properly denote the hierarchical relation between the rows. The returned Hierarchy object could then be executed and it will return the same Select statement submitted plus the following columns:\n        \n        - level: the relative level of the row related to its parent\n        - connect_path: a list with all the ids that compound this part of the hierarchy, from the root node to the current value (**IMPORTANT**: Oracle requires some extra post processing to generate the list) \n        - is_leaf: boolean indicating is the particular id is a leaf or not\n        \n        The resultset will be returned properly ordered by the levels in the hierarchy\n        \n        Special remarks:\n        \n        - The selected table must have a self referential foreign key relation, otherwise it will raise MissingForeignKey\n        - Not every database is supported (at the moment). Check the global var supported_db for an up2date list. Trying to execute Hierarchy with an unsupported db will raise NotImplementedError or HierarchyLesserError (check the errors classes docstring for the exact meaning of each of them).\n        - To prevent the query from returning every node as a different starting node and, therefore, having duplicate values, you can provide the 'starting_node' parameter in the kwargs. The value you must provide is the parent id for the root node you want to start building the hierarchical tree. None has the same meaning as \"0\" since we perform a coalesce function in the query. By default the system will add a 'starting_node'=\"0\". If you don't want a starting node, pass 'starting_node'=False and the clause will not be added to the query\n        \n        *Supported databases*:\n        \n        - PostgreSQL (>=8.4.0)\n        - Oracle (>=10g)\n        \n        *Databases we might support on a next version*:\n        \n        - SQL Server\n        - DB2\n        \n        *Databases that we know we cannot support* (because they do not implement recursive):\n        \n        - MySQL\n        - SQLite\n        \n        -------------\n        Some examples\n        -------------\n        \n        First of all, let's set up some imports and variables we will be using ::\n        \n            >>> import ConfigParser\n            >>> from sqlalchemy import Table, Column, ForeignKey, MetaData, create_engine\n            >>> from sqlalchemy import Unicode, select, and_\n            >>> from sqlalchemy.orm import mapper, relationship, scoped_session, sessionmaker\n            >>> from sqla_hierarchy import *\n            >>> DBSession = scoped_session(sessionmaker())\n            >>> metadata = MetaData()\n            >>> config = ConfigParser.ConfigParser() \n            >>> config.read('setup.cfg')\n            ['setup.cfg']\n            >>> engine = create_engine('postgresql://%s' % config.get('dburi', 'pg-db'))\n            >>> DBSession.configure(bind=engine)\n            >>> metadata.bind = engine\n        \n        Let's build some simple table/class to hold boss/employee relation ::\n        \n            >>> example_tb = Table('employee', metadata,  \n            ...                    Column('id', Unicode, primary_key=True), \n            ...                    Column('boss', Unicode, ForeignKey('employee.id')))\n            >>> class Employee(object): \n            ...     def __init__(self, employee, boss=None): \n            ...         self.id = employee\n            ...         self.boss = boss\n            ...     def __repr__(self): \n            ...         return \"<Employee %s, Boss %s>\" % (self.id, self.boss) \n            ...  \n            >>> mapper(Employee, example_tb, properties={  #doctest: +ELLIPSIS\n            ...        'parent': relationship(Employee, remote_side=[example_tb.c.id])}) \n            <Mapper at 0x...; Employee>\n            >>> example_tb.drop(checkfirst=True)\n            >>> example_tb.create(checkfirst=True)\n        \n        Add some data ::\n        \n            >>> pl = [Employee(u'King Cold', None), Employee(u'Frieza', u'King Cold'), \n            ...       Employee(u'Zarbon', u'Frieza'), Employee(u'Dodoria', u'Frieza'), \n            ...       Employee(u'Captain Ginyu', u'Frieza'), \n            ...       Employee(u'Jeice', u'Captain Ginyu'),\n            ...       Employee(u'Burter', u'Captain Ginyu'),\n            ...       Employee(u'Recoome', u'Captain Ginyu'),\n            ...       Employee(u'Guldo', u'Captain Ginyu'),\n            ...       Employee(u'Dr Gero', None), Employee(u'A-16', u'Dr Gero'), \n            ...       Employee(u'A-17', u'Dr Gero'), Employee(u'A-18', u'Dr Gero'), \n            ...       Employee(u'Cell', u'Dr Gero'), Employee(u'Cell Junior', u'Cell')] \n            >>> DBSession.add_all(pl)\n            >>> DBSession.commit()\n        \n        Now let's query some basic relations. First we want a list of bosses and employees using some indentation to visually understand who depends on who ::\n        \n            >>> qry = Hierarchy(DBSession, example_tb, select([example_tb])) \n            >>> rs = DBSession.execute(qry).fetchall()\n            >>> for ev in rs:\n            ...     if ev.level == 1:\n            ...         print(ev.id)\n            ...     else:\n            ...         print(\" \"*2*ev.level+ev.id) \n            Dr Gero\n                A-16\n                A-17\n                A-18\n                Cell\n                  Cell Junior\n            King Cold\n                Frieza\n                  Captain Ginyu\n                    Burter\n                    Guldo\n                    Jeice\n                    Recoome\n                  Dodoria\n                  Zarbon\n        \n        Let's take a look at the special attributes sqla_hierachy added ::\n        \n            >>> print(rs[0])\n            (u'Dr Gero', None, 1, ['Dr Gero'], False)\n        \n        *Level*: The relative position of this record in the tree. '1' means he/she is the root. The higher the number, the bigger the distance is between the root and the current record ::\n        \n            >>> print(rs[0].level)\n            1\n        \n        *Connect Path*: Print the full list of members of this relation: from the root up to the current record::\n        \n            >> print(rs[0].connect_path)\n            ['Dr Gero']\n        \n        *Is Leaf*: If is_leaf is True, this record has no more dependents. If False, there are more records that depend on him/her::\n        \n            >>> print(rs[0].is_leaf)\n            False\n            \n        Now an example with a record that is a leaf ::\n        \n            >>> print(rs[9].level, rs[9].is_leaf)\n            (4, True)\n            >>> print(rs[9].connect_path)\n            ['King Cold', 'Frieza', 'Captain Ginyu', 'Burter']\n        \n        .. _Table: http://www.sqlalchemy.org/docs/core/schema.html#sqlalchemy.schema.Table\n        .. _Select: http://www.sqlalchemy.org/docs/core/expression_api.html#sqlalchemy.sql.expression.Select _", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/marplatense/sqla_hierarchy/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marplatense/sqla_hierarchy", "keywords": "sqlachemy,hierarchy,adjacency list,python", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "sqla-hierarchy", "package_url": "https://pypi.org/project/sqla-hierarchy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqla-hierarchy/", "project_urls": {"Download": "https://github.com/marplatense/sqla_hierarchy/downloads", "Homepage": "https://github.com/marplatense/sqla_hierarchy"}, "release_url": "https://pypi.org/project/sqla-hierarchy/0.1/", "requires_dist": null, "requires_python": null, "summary": "Adjacency List Relationships helper (only using databases own implementations)", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            --------------<br>        SQLA_Hierarchy<br>        --------------<br>        <br>        -----------<br>        Description<br>        -----------<br>        <br>        Given a `Table`_ object and a `Select`_ expression, this class will return the information from these objects with some extra columns that will properly denote the hierarchical relation between the rows. The returned Hierarchy object could then be executed and it will return the same Select statement submitted plus the following columns:<br>        <br>        - level: the relative level of the row related to its parent<br>        - connect_path: a list with all the ids that compound this part of the hierarchy, from the root node to the current value (**IMPORTANT**: Oracle requires some extra post processing to generate the list) <br>        - is_leaf: boolean indicating is the particular id is a leaf or not<br>        <br>        The resultset will be returned properly ordered by the levels in the hierarchy<br>        <br>        Special remarks:<br>        <br>        - The selected table must have a self referential foreign key relation, otherwise it will raise MissingForeignKey<br>        - Not every database is supported (at the moment). Check the global var supported_db for an up2date list. Trying to execute Hierarchy with an unsupported db will raise NotImplementedError or HierarchyLesserError (check the errors classes docstring for the exact meaning of each of them).<br>        - To prevent the query from returning every node as a different starting node and, therefore, having duplicate values, you can provide the 'starting_node' parameter in the kwargs. The value you must provide is the parent id for the root node you want to start building the hierarchical tree. None has the same meaning as \"0\" since we perform a coalesce function in the query. By default the system will add a 'starting_node'=\"0\". If you don't want a starting node, pass 'starting_node'=False and the clause will not be added to the query<br>        <br>        *Supported databases*:<br>        <br>        - PostgreSQL (&gt;=8.4.0)<br>        - Oracle (&gt;=10g)<br>        <br>        *Databases we might support on a next version*:<br>        <br>        - SQL Server<br>        - DB2<br>        <br>        *Databases that we know we cannot support* (because they do not implement recursive):<br>        <br>        - MySQL<br>        - SQLite<br>        <br>        -------------<br>        Some examples<br>        -------------<br>        <br>        First of all, let's set up some imports and variables we will be using ::<br>        <br>            &gt;&gt;&gt; import ConfigParser<br>            &gt;&gt;&gt; from sqlalchemy import Table, Column, ForeignKey, MetaData, create_engine<br>            &gt;&gt;&gt; from sqlalchemy import Unicode, select, and_<br>            &gt;&gt;&gt; from sqlalchemy.orm import mapper, relationship, scoped_session, sessionmaker<br>            &gt;&gt;&gt; from sqla_hierarchy import *<br>            &gt;&gt;&gt; DBSession = scoped_session(sessionmaker())<br>            &gt;&gt;&gt; metadata = MetaData()<br>            &gt;&gt;&gt; config = ConfigParser.ConfigParser() <br>            &gt;&gt;&gt; config.read('setup.cfg')<br>            ['setup.cfg']<br>            &gt;&gt;&gt; engine = create_engine('postgresql://%s' % config.get('dburi', 'pg-db'))<br>            &gt;&gt;&gt; DBSession.configure(bind=engine)<br>            &gt;&gt;&gt; metadata.bind = engine<br>        <br>        Let's build some simple table/class to hold boss/employee relation ::<br>        <br>            &gt;&gt;&gt; example_tb = Table('employee', metadata,  <br>            ...                    Column('id', Unicode, primary_key=True), <br>            ...                    Column('boss', Unicode, ForeignKey('employee.id')))<br>            &gt;&gt;&gt; class Employee(object): <br>            ...     def __init__(self, employee, boss=None): <br>            ...         self.id = employee<br>            ...         self.boss = boss<br>            ...     def __repr__(self): <br>            ...         return \"&lt;Employee %s, Boss %s&gt;\" % (self.id, self.boss) <br>            ...  <br>            &gt;&gt;&gt; mapper(Employee, example_tb, properties={  #doctest: +ELLIPSIS<br>            ...        'parent': relationship(Employee, remote_side=[example_tb.c.id])}) <br>            &lt;Mapper at 0x...; Employee&gt;<br>            &gt;&gt;&gt; example_tb.drop(checkfirst=True)<br>            &gt;&gt;&gt; example_tb.create(checkfirst=True)<br>        <br>        Add some data ::<br>        <br>            &gt;&gt;&gt; pl = [Employee(u'King Cold', None), Employee(u'Frieza', u'King Cold'), <br>            ...       Employee(u'Zarbon', u'Frieza'), Employee(u'Dodoria', u'Frieza'), <br>            ...       Employee(u'Captain Ginyu', u'Frieza'), <br>            ...       Employee(u'Jeice', u'Captain Ginyu'),<br>            ...       Employee(u'Burter', u'Captain Ginyu'),<br>            ...       Employee(u'Recoome', u'Captain Ginyu'),<br>            ...       Employee(u'Guldo', u'Captain Ginyu'),<br>            ...       Employee(u'Dr Gero', None), Employee(u'A-16', u'Dr Gero'), <br>            ...       Employee(u'A-17', u'Dr Gero'), Employee(u'A-18', u'Dr Gero'), <br>            ...       Employee(u'Cell', u'Dr Gero'), Employee(u'Cell Junior', u'Cell')] <br>            &gt;&gt;&gt; DBSession.add_all(pl)<br>            &gt;&gt;&gt; DBSession.commit()<br>        <br>        Now let's query some basic relations. First we want a list of bosses and employees using some indentation to visually understand who depends on who ::<br>        <br>            &gt;&gt;&gt; qry = Hierarchy(DBSession, example_tb, select([example_tb])) <br>            &gt;&gt;&gt; rs = DBSession.execute(qry).fetchall()<br>            &gt;&gt;&gt; for ev in rs:<br>            ...     if ev.level == 1:<br>            ...         print(ev.id)<br>            ...     else:<br>            ...         print(\" \"*2*ev.level+ev.id) <br>            Dr Gero<br>                A-16<br>                A-17<br>                A-18<br>                Cell<br>                  Cell Junior<br>            King Cold<br>                Frieza<br>                  Captain Ginyu<br>                    Burter<br>                    Guldo<br>                    Jeice<br>                    Recoome<br>                  Dodoria<br>                  Zarbon<br>        <br>        Let's take a look at the special attributes sqla_hierachy added ::<br>        <br>            &gt;&gt;&gt; print(rs[0])<br>            (u'Dr Gero', None, 1, ['Dr Gero'], False)<br>        <br>        *Level*: The relative position of this record in the tree. '1' means he/she is the root. The higher the number, the bigger the distance is between the root and the current record ::<br>        <br>            &gt;&gt;&gt; print(rs[0].level)<br>            1<br>        <br>        *Connect Path*: Print the full list of members of this relation: from the root up to the current record::<br>        <br>            &gt;&gt; print(rs[0].connect_path)<br>            ['Dr Gero']<br>        <br>        *Is Leaf*: If is_leaf is True, this record has no more dependents. If False, there are more records that depend on him/her::<br>        <br>            &gt;&gt;&gt; print(rs[0].is_leaf)<br>            False<br>            <br>        Now an example with a record that is a leaf ::<br>        <br>            &gt;&gt;&gt; print(rs[9].level, rs[9].is_leaf)<br>            (4, True)<br>            &gt;&gt;&gt; print(rs[9].connect_path)<br>            ['King Cold', 'Frieza', 'Captain Ginyu', 'Burter']<br>        <br>        .. _Table: http://www.sqlalchemy.org/docs/core/schema.html#sqlalchemy.schema.Table<br>        .. _Select: http://www.sqlalchemy.org/docs/core/expression_api.html#sqlalchemy.sql.expression.Select _\n          </div>"}, "last_serial": 282450, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c64eabab0e487556cbfa38a4346c6990", "sha256": "21e81997cf342f9fc6039ed3f0b8a085e49d741cf848a37b0d0800bdb9825dd3"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.4.egg", "has_sig": false, "md5_digest": "c64eabab0e487556cbfa38a4346c6990", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 12118, "upload_time": "2011-03-23T16:18:25", "upload_time_iso_8601": "2011-03-23T16:18:25.405862Z", "url": "https://files.pythonhosted.org/packages/48/cd/3adb3b7a61cdbf21bcb9ea1c8be7af9e6f0524b498f03ea486addd9cc5b6/sqla_hierarchy-0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce9192b07300652a68b8edd57ca2838e", "sha256": "cff568762eb28f9b9f03055c137f5e329ed763dd7dbc4caee9066d47d486ef51"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.5.egg", "has_sig": false, "md5_digest": "ce9192b07300652a68b8edd57ca2838e", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 12052, "upload_time": "2011-03-23T16:18:12", "upload_time_iso_8601": "2011-03-23T16:18:12.978740Z", "url": "https://files.pythonhosted.org/packages/7d/72/68fc0ca850d3b6d633034cabc91a8f9164bcc25d4b9a8c954517a7ce7484/sqla_hierarchy-0.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b7332788b9bc03387d29fde50e25e56", "sha256": "4cf9309048c77cd775ae9b57df28bd2c2baba82e1d78c66b30950e071c92d081"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.6.egg", "has_sig": false, "md5_digest": "5b7332788b9bc03387d29fde50e25e56", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 12078, "upload_time": "2011-03-23T16:18:39", "upload_time_iso_8601": "2011-03-23T16:18:39.722504Z", "url": "https://files.pythonhosted.org/packages/0b/c7/0bf50c4cb9288cc81598bb594c6c014455d440f95a6e7b413d0927053848/sqla_hierarchy-0.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe2ff8a1c253875beff2ad375659319b", "sha256": "7db814c1ac23d4dcbdc59c2e75c95c32aa2b833f98c929cc0e1b06a246c9361b"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.7.egg", "has_sig": false, "md5_digest": "fe2ff8a1c253875beff2ad375659319b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 12056, "upload_time": "2011-03-23T16:18:02", "upload_time_iso_8601": "2011-03-23T16:18:02.929018Z", "url": "https://files.pythonhosted.org/packages/16/8c/1a2d19b5cef1309e84e680453e92b736d7dba5cad9b81f9b98014f2c7c9f/sqla_hierarchy-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b3c80e0af02a801d36dd60f7bdea406", "sha256": "ed16c49d137421d92673da233274d075ee9b13b8a270ca7c6f6d4e8b4f76544f"}, "downloads": -1, "filename": "sqla_hierarchy-0.1.tar.gz", "has_sig": false, "md5_digest": "4b3c80e0af02a801d36dd60f7bdea406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6692, "upload_time": "2011-03-23T16:12:04", "upload_time_iso_8601": "2011-03-23T16:12:04.948380Z", "url": "https://files.pythonhosted.org/packages/06/a3/a8456cd0a488bc04ae9caec068937e5ba8e7a4827df631bede56d0b665b7/sqla_hierarchy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c64eabab0e487556cbfa38a4346c6990", "sha256": "21e81997cf342f9fc6039ed3f0b8a085e49d741cf848a37b0d0800bdb9825dd3"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.4.egg", "has_sig": false, "md5_digest": "c64eabab0e487556cbfa38a4346c6990", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 12118, "upload_time": "2011-03-23T16:18:25", "upload_time_iso_8601": "2011-03-23T16:18:25.405862Z", "url": "https://files.pythonhosted.org/packages/48/cd/3adb3b7a61cdbf21bcb9ea1c8be7af9e6f0524b498f03ea486addd9cc5b6/sqla_hierarchy-0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce9192b07300652a68b8edd57ca2838e", "sha256": "cff568762eb28f9b9f03055c137f5e329ed763dd7dbc4caee9066d47d486ef51"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.5.egg", "has_sig": false, "md5_digest": "ce9192b07300652a68b8edd57ca2838e", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 12052, "upload_time": "2011-03-23T16:18:12", "upload_time_iso_8601": "2011-03-23T16:18:12.978740Z", "url": "https://files.pythonhosted.org/packages/7d/72/68fc0ca850d3b6d633034cabc91a8f9164bcc25d4b9a8c954517a7ce7484/sqla_hierarchy-0.1-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b7332788b9bc03387d29fde50e25e56", "sha256": "4cf9309048c77cd775ae9b57df28bd2c2baba82e1d78c66b30950e071c92d081"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.6.egg", "has_sig": false, "md5_digest": "5b7332788b9bc03387d29fde50e25e56", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 12078, "upload_time": "2011-03-23T16:18:39", "upload_time_iso_8601": "2011-03-23T16:18:39.722504Z", "url": "https://files.pythonhosted.org/packages/0b/c7/0bf50c4cb9288cc81598bb594c6c014455d440f95a6e7b413d0927053848/sqla_hierarchy-0.1-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe2ff8a1c253875beff2ad375659319b", "sha256": "7db814c1ac23d4dcbdc59c2e75c95c32aa2b833f98c929cc0e1b06a246c9361b"}, "downloads": -1, "filename": "sqla_hierarchy-0.1-py2.7.egg", "has_sig": false, "md5_digest": "fe2ff8a1c253875beff2ad375659319b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 12056, "upload_time": "2011-03-23T16:18:02", "upload_time_iso_8601": "2011-03-23T16:18:02.929018Z", "url": "https://files.pythonhosted.org/packages/16/8c/1a2d19b5cef1309e84e680453e92b736d7dba5cad9b81f9b98014f2c7c9f/sqla_hierarchy-0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b3c80e0af02a801d36dd60f7bdea406", "sha256": "ed16c49d137421d92673da233274d075ee9b13b8a270ca7c6f6d4e8b4f76544f"}, "downloads": -1, "filename": "sqla_hierarchy-0.1.tar.gz", "has_sig": false, "md5_digest": "4b3c80e0af02a801d36dd60f7bdea406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6692, "upload_time": "2011-03-23T16:12:04", "upload_time_iso_8601": "2011-03-23T16:12:04.948380Z", "url": "https://files.pythonhosted.org/packages/06/a3/a8456cd0a488bc04ae9caec068937e5ba8e7a4827df631bede56d0b665b7/sqla_hierarchy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:02 2020"}