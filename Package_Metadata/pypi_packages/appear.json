{"info": {"author": "Andrew Houghton", "author_email": "houghtonandrew0@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# appear\n\nA python package for making hidden details of your application magically appear by streaming them to the browser.\n\n### Installation\n\nRun `pip install appear`\n\n### When and why should you use Appear?\n\nUse appear if you have a python application which has information you want to visualize in a browser whilst the application is running.\n\n- Low overhead on the data sender, only one line to send data.\n- The application sending the data doesn't have to alter it's function signatures because information is sent via side effects.\n- Low overhead on the frontend, appear takes care of all the data transfer related stuff so you can focus on how to display your data.\n- Flexible, handles multiple visualizations in one page.\n\n### Structure\n\nAppear has 3 main parts.\n1. A helper function to send data from your application.\n2. A server which relays your data to the browser using socket.io\n3. A frontend package which makes it easy to receive the data sent from the server and use them for visualizations.\n\n### Usage\n\n##### 1. Send data from your application\n\nFirst add functions to the codebase you want to instrument by calling the appear helper method.\n\n```python\nfrom appear import helper\n\n###### Your application code here #####\n\n# In the middle of your application code add the following method call to send data\nhelper(\n    url=\"http://localhost:5000/broadcast\",  # This is the url of the Appear server\n    target=\"myVisualizationName\",  # Name of the visualization to update\n    data={\"datapoints\":[1,2,3], \"title\": \"My Graph\"},  # Data to send to the visualization\n)\n```\n\nThe data sent in the data argument can be any JSON serializable data.\n\n##### 2. Write frontend code\n\nThe frontend code needs 3 things;\n1. Include socket.io and the server connection code with\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\" integrity=\"sha256-yr4fRk/GU1ehYJPAs8P4JlTgu0Hdsp4ZKrx8bDEDC3I=\" crossorigin=\"anonymous\"></script>\n<script src=\"static/vis_server.js\"></script>\n```\n2. Connect to the server, eg `server = new VisServer()`.\n3. Connect a function to a visualization, eg `server.subscribe(\"visualizationName\", update_my_vis)`. You can connect multiple visualizations at once by calling the subscribe method multiple times.\n\nA complete example of what the frontend code can look like is shown below;\n\n```html\n<!DOCTYPE HTML>\n<html>\n\n<head>\n    <title>Appear</title>\n    <script src=\"static/vis_server.js\"></script>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n    // Visualization function\n    function update_my_vis(msg) {\n        document.getElementById(\"visualizationName\").textContent = \"Number of entities \" + msg.entities + \" out of \" + msg.limit\n    }\n\n    // Link visualization functions to content\n    server = new VisServer()\n    server.subscribe(\"visualizationName\", update_my_vis)\n    </script>\n</head>\n\n<body>\n    <h1>Appear</h1>\n    <p id=\"visualizationName\"></p>\n</body>\n\n</html>\n```\n\nSave your html inside a new folder named templates, and call the file index.html. Eg. `templates/index.html`\n\n##### 3. Run appear server\n\nRun the appear server. Make sure that the `templates` directory matches the directory of the frontend code you created.\n\n`python -m appear.app templates`\n\n##### 4. Start using appear\n\nOpen a browser to http://localhost:5000 and then start your application. You should see your frontend when the page loads. Each time your application calls the helper method the data in the browser will be updated using the frontend function which you linked.\n\n### Working sample\n\nTry out the sample included in this repo in the samples folder;\n1. Run `python -m appear.app sample/templates`\n2. Open a browser to http://localhost:5000\n3. In another terminal run `python sample/example_app.py`\n4. The browser will update with live data from the running application.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrew-houghton/appear", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "appear", "package_url": "https://pypi.org/project/appear/", "platform": "", "project_url": "https://pypi.org/project/appear/", "project_urls": {"Homepage": "https://github.com/andrew-houghton/appear"}, "release_url": "https://pypi.org/project/appear/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "Make program internals appear in the browser", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>appear</h1>\n<p>A python package for making hidden details of your application magically appear by streaming them to the browser.</p>\n<h3>Installation</h3>\n<p>Run <code>pip install appear</code></p>\n<h3>When and why should you use Appear?</h3>\n<p>Use appear if you have a python application which has information you want to visualize in a browser whilst the application is running.</p>\n<ul>\n<li>Low overhead on the data sender, only one line to send data.</li>\n<li>The application sending the data doesn't have to alter it's function signatures because information is sent via side effects.</li>\n<li>Low overhead on the frontend, appear takes care of all the data transfer related stuff so you can focus on how to display your data.</li>\n<li>Flexible, handles multiple visualizations in one page.</li>\n</ul>\n<h3>Structure</h3>\n<p>Appear has 3 main parts.</p>\n<ol>\n<li>A helper function to send data from your application.</li>\n<li>A server which relays your data to the browser using socket.io</li>\n<li>A frontend package which makes it easy to receive the data sent from the server and use them for visualizations.</li>\n</ol>\n<h3>Usage</h3>\n<h5>1. Send data from your application</h5>\n<p>First add functions to the codebase you want to instrument by calling the appear helper method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">appear</span> <span class=\"kn\">import</span> <span class=\"n\">helper</span>\n\n<span class=\"c1\">###### Your application code here #####</span>\n\n<span class=\"c1\"># In the middle of your application code add the following method call to send data</span>\n<span class=\"n\">helper</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://localhost:5000/broadcast\"</span><span class=\"p\">,</span>  <span class=\"c1\"># This is the url of the Appear server</span>\n    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s2\">\"myVisualizationName\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Name of the visualization to update</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"datapoints\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"My Graph\"</span><span class=\"p\">},</span>  <span class=\"c1\"># Data to send to the visualization</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The data sent in the data argument can be any JSON serializable data.</p>\n<h5>2. Write frontend code</h5>\n<p>The frontend code needs 3 things;</p>\n<ol>\n<li>Include socket.io and the server connection code with</li>\n</ol>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js\"</span> <span class=\"na\">integrity</span><span class=\"o\">=</span><span class=\"s\">\"sha256-yr4fRk/GU1ehYJPAs8P4JlTgu0Hdsp4ZKrx8bDEDC3I=\"</span> <span class=\"na\">crossorigin</span><span class=\"o\">=</span><span class=\"s\">\"anonymous\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"static/vis_server.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<ol>\n<li>Connect to the server, eg <code>server = new VisServer()</code>.</li>\n<li>Connect a function to a visualization, eg <code>server.subscribe(\"visualizationName\", update_my_vis)</code>. You can connect multiple visualizations at once by calling the subscribe method multiple times.</li>\n</ol>\n<p>A complete example of what the frontend code can look like is shown below;</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE HTML&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Appear<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"static/vis_server.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">// Visualization function</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">update_my_vis</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"visualizationName\"</span><span class=\"p\">).</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"s2\">\"Number of entities \"</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">entities</span> <span class=\"o\">+</span> <span class=\"s2\">\" out of \"</span> <span class=\"o\">+</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">limit</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Link visualization functions to content</span>\n    <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">VisServer</span><span class=\"p\">()</span>\n    <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"visualizationName\"</span><span class=\"p\">,</span> <span class=\"nx\">update_my_vis</span><span class=\"p\">)</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Appear<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"visualizationName\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Save your html inside a new folder named templates, and call the file index.html. Eg. <code>templates/index.html</code></p>\n<h5>3. Run appear server</h5>\n<p>Run the appear server. Make sure that the <code>templates</code> directory matches the directory of the frontend code you created.</p>\n<p><code>python -m appear.app templates</code></p>\n<h5>4. Start using appear</h5>\n<p>Open a browser to <a href=\"http://localhost:5000\" rel=\"nofollow\">http://localhost:5000</a> and then start your application. You should see your frontend when the page loads. Each time your application calls the helper method the data in the browser will be updated using the frontend function which you linked.</p>\n<h3>Working sample</h3>\n<p>Try out the sample included in this repo in the samples folder;</p>\n<ol>\n<li>Run <code>python -m appear.app sample/templates</code></li>\n<li>Open a browser to <a href=\"http://localhost:5000\" rel=\"nofollow\">http://localhost:5000</a></li>\n<li>In another terminal run <code>python sample/example_app.py</code></li>\n<li>The browser will update with live data from the running application.</li>\n</ol>\n\n          </div>"}, "last_serial": 6420131, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0eb295b6065742ee3e4a5f4beec71a1e", "sha256": "942ea7e7eb46f68b372dd4bd1b31cb0e237093405466f0cbfdd99783daf9c550"}, "downloads": -1, "filename": "appear-1.0.tar.gz", "has_sig": false, "md5_digest": "0eb295b6065742ee3e4a5f4beec71a1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1449, "upload_time": "2019-12-22T20:59:02", "upload_time_iso_8601": "2019-12-22T20:59:02.624722Z", "url": "https://files.pythonhosted.org/packages/30/10/1f6694eee38b15011c6b30fc3a6611cb5b76052bd6a6b0fa20d5e71e1ef7/appear-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "083ff1442649a4951ea49970e0e7e3f8", "sha256": "4d4571a2758908b56a4fe3b1c01e49f15e2376872a66a4167035dd0b8db1df73"}, "downloads": -1, "filename": "appear-1.1.tar.gz", "has_sig": false, "md5_digest": "083ff1442649a4951ea49970e0e7e3f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1222, "upload_time": "2019-12-22T21:04:19", "upload_time_iso_8601": "2019-12-22T21:04:19.653075Z", "url": "https://files.pythonhosted.org/packages/f0/8c/0b9449806727b3d662663624b0196cf2b0fef046932737faa47a9a4370d7/appear-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "239dfb9ba1afa1ac9b07eaf38bede768", "sha256": "37182421b0d46c92a037113e20bd5aa4ee172fa52a1912800b31cd986a29d012"}, "downloads": -1, "filename": "appear-1.2.tar.gz", "has_sig": false, "md5_digest": "239dfb9ba1afa1ac9b07eaf38bede768", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2475, "upload_time": "2019-12-23T03:52:16", "upload_time_iso_8601": "2019-12-23T03:52:16.802140Z", "url": "https://files.pythonhosted.org/packages/d7/5b/0b9b810afda950ef21e30de6e62589b9677d60eb9003bb6be2c20d213963/appear-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ef9364d05283f61aeeac5098906b43ad", "sha256": "33b66844a7ce451efbbbdaedcf6ae16ff3b789e284335c01e705993966d0c8e7"}, "downloads": -1, "filename": "appear-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ef9364d05283f61aeeac5098906b43ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3018, "upload_time": "2019-12-24T00:31:55", "upload_time_iso_8601": "2019-12-24T00:31:55.963404Z", "url": "https://files.pythonhosted.org/packages/ea/e9/522dbbd3f2a963b6a36beb4cc252e9a80af7273e09698071060daed95033/appear-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "63f5eb6c509f039779bbde89ddb9724a", "sha256": "9914b951c8f2c82c9bd543c8c9bda53a73f3422a98cf65670347c3111ca663ad"}, "downloads": -1, "filename": "appear-1.2.2.tar.gz", "has_sig": false, "md5_digest": "63f5eb6c509f039779bbde89ddb9724a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3389, "upload_time": "2019-12-24T00:39:09", "upload_time_iso_8601": "2019-12-24T00:39:09.142321Z", "url": "https://files.pythonhosted.org/packages/1b/8e/583cde4a52205a0981290d35f20621c946cf928af379479e1c2a514f2e03/appear-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "7e4c91b887aceb91be4201017155d04c", "sha256": "f95691ae84a7650c6db82b2262a1a62b9e7c61a9109fbeae7bad38fcdb70ffca"}, "downloads": -1, "filename": "appear-1.2.3.tar.gz", "has_sig": false, "md5_digest": "7e4c91b887aceb91be4201017155d04c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4932, "upload_time": "2020-01-09T05:02:00", "upload_time_iso_8601": "2020-01-09T05:02:00.273077Z", "url": "https://files.pythonhosted.org/packages/c2/25/b477f9d84e0e65cdd02a419e34c4cf97725c1e6facfd2881c4113b40b065/appear-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e4c91b887aceb91be4201017155d04c", "sha256": "f95691ae84a7650c6db82b2262a1a62b9e7c61a9109fbeae7bad38fcdb70ffca"}, "downloads": -1, "filename": "appear-1.2.3.tar.gz", "has_sig": false, "md5_digest": "7e4c91b887aceb91be4201017155d04c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4932, "upload_time": "2020-01-09T05:02:00", "upload_time_iso_8601": "2020-01-09T05:02:00.273077Z", "url": "https://files.pythonhosted.org/packages/c2/25/b477f9d84e0e65cdd02a419e34c4cf97725c1e6facfd2881c4113b40b065/appear-1.2.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:40 2020"}