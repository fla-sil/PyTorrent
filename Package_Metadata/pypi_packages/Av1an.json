{"info": {"author": "Master_Of_Zen", "author_email": "master_of_zen@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<h1 align=\"center\">\n    <br>\n    Av1an\n    </br>\n</h1>\n\n<h2 align=\"center\">All-in-one tool for streamlining av1 encoding</h2>\n\n![alt text](https://cdn.discordapp.com/attachments/665440744567472169/685103807952060447/143740_05_03_20.png)\n\n<h4 align=\"center\"> \n<a href=\"https://discord.gg/TssVH86\"><img src=\"https://discordapp.com/api/guilds/696849974230515794/embed.png\" alt=\"Discord server\" /></a>\n<img src=\"https://ci.appveyor.com/api/projects/status/cvweipdgphbjkkar?svg=true\" alt=\"Project Badge\"> <a href=\"https://codeclimate.com/github/master-of-zen/Av1an/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/41ea7ad221dcdad3fe8d/maintainability\" />\n<img= src=\"https://app.codacy.com/manual/Grenight/Av1an?utm_source=github.com&utm_medium=referral&utm_content=master-of-zen/Av1an&utm_campaign=Badge_Grade_Dashboard\"></a>\n<a href=\"https://www.codacy.com/manual/Grenight/Av1an?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=master-of-zen/Av1an&amp;utm_campaign=Badge_Grade\"><img src=\"https://api.codacy.com/project/badge/Grade/4632dbb2f6f34ad199142c01a3eb2aaf\"/></a>\n</h4>\n<h2 align=\"center\">Easy, Fast, and Efficient </h2>\n\nStart using AV1 encoding. All open-source encoders are supported (Aom, Rav1e, SVT-AV1) also VP9, VP8.\n\nExample with default parameters:\n\n    av1an -i input\n\nWith your own parameters:\n\n    av1an -i input -enc aom -v \" --cpu-used=3 --end-usage=q --cq-level=30 \" -ff \" -vf scale=-1:720 \"\n    -w 10 -p 2 -a \" -c:a libopus -b:a 24k \" -s scenes.csv -log my_log -o output_file\n\n<h2 align=\"center\">Usage</h2>\n\n    -i   --file_path         Input file (relative or absolute path)\n\n    -o   --output_file       Name/Path for output file (Default: (input file name)_av1.mkv)\n                            Output file ending is always `.mkv`\n\n    -enc --encoder          Encoder to use (aom,rav1e,svt_av1,vpx. Default: aom)\n                            Example: -enc rav1e\n\n    -v   --video_params     Encoder settings flags (If not set, will be used default parameters.\n                            Required for SVT-AV1s)\n                            Must be inside ' ' or \" \"\n\n    -p   --passes           Set number of passes for encoding\n                            (Default: Aomenc: 2, Rav1e: 1, SVT-AV1: 2)\n                            At current moment 2nd pass Rav1e not working\n\n    -a   --audio_params     FFmpeg audio settings flags (Default: copy audio from source to output)\n                            Example: -a '-c:a libopus -b:a  64k'\n\n    -w   --workers          Overrides automatically set number of workers.\n                            Example: Rav1e settings \" ... --tile-rows 2 --tile-cols 2 ... \" -w 3\n\n    -s   --scenes           Path to file with scenes timestamps.\n                            If given `0` spliting will be ignored\n                            If file not exist, new will be generated in current folder\n                            First run to generate stamps, all next reuse it.\n                            Example: \"-s scenes.csv\"\n\n    -tr  --threshold        PySceneDetect threshold for scene detection Default: 50\n\n    -ff  --ffmpeg             FFmpeg options. Applied to each segment individually \n                            Example:\n                            --ff \" -r 24 -vf scale=320:240 \"\n\n    -fmt --pix_format       Setting custom pixel/bit format(Default: 'yuv420p')\n                            Example for 10 bit: 'yuv420p10le'\n                            Encoding options should be adjusted accordingly.\n\n    --resume                If encode was stopped/quit resumes encode with saving all progress\n                            Resuming automatically skips scenedetection, audio encoding/copy,\n                            spliting, so resuming only possible after actuall encoding is started.\n                            /.temp folder must be presented for resume.\n\n    --no_check              Skip checking numbers of frames for source and encoded chunks.\n                            Needed if framerate changes to avoid console spam.\n                            By default any differences in frames of encoded files will be reported.\n\n    --keep                  Not deleting temprally folders after encode finished.\n\n    -log --logging          Path to .log file(Default: no logging)\n\n    --temp                  Set path for temporally folders. Default: .temp\n\n    --boost                 Enable experimental CQ boosting for dark scenes. Refer to 1.7 release notes.\n\n    -bl                     CQ limit for boosting. CQ can't get lower than this value.\n\n    -br                     CQ range for boosting. Delta for which CQ can be changed\n\n    --vmaf                  Calculate vmaf for each encoded clip.\n                            Saves plot after encode, showing vmaf values for all video segments.\n                            Requires: Installed FFMPEG with libvmaf and installed libvmaf.\n\n    --vmaf_path             Custom path to libvmaf models, by default used system one.\n\n    --tg_vmaf               Vmaf value to target. Best works with 90-95 on 720/1080.\n\n    --vmaf_steps            Number of evenly spaced probes that is used to interpolate vmaf to cq change.\n                            Must be bigger than 3. Optimal is 4-6 probes. Default: 4\n\n    --vmaf_error            Decrease initial Vmaf values for interpolation.Increasing number will result \n                            in lower CQ and bigger final vmaf score, use to correct whole vmaf plot. \n                            For start If target vmaf undershoot increase value by undershoot amount.\n\n    --min_cq, --max_cq      Minimum and maximum CQ values used in interpolation in target Vmaf mode\n                            Use to limit CQ values range. Default: 20, 63.\n\n<h2 align=\"center\">Main Features</h2>\n\n**Spliting video by scenes for parallel encoding** because AV1 encoders currently not good at multithreading, encoding is limited to single or couple of threads at the same time.\n\n*   [PySceneDetect](https://pyscenedetect.readthedocs.io/en/latest/) used for spliting video by scenes and running multiple encoders.\n*   Fastest way to encode AV1 without lossing quality, as fast as many cores cpu have :).\n*   Resuming encoding without loss of encoded progress.\n*   Simple and clean console look.\n*   Automatic determination of how many workers the host can handle.\n*   Building encoding queue with bigger files first, minimizing waiting for last scene to encode.\n*   Both video and audio transcoding with FFmpeg.\n*   Logging of progress of all encoders.\n*   \"Boosting\" quality of scenes based on their brightness.\n\n## Install \n*   [Python3](https://www.python.org/downloads/) \nFor Windows in installer set check option to `add Python to PATH`\n\n*   [Av1an on PIP3](https://pypi.org/project/Av1an/)\nInstallation: `pip install Av1an`\n\n*   [FFmpeg](https://ffmpeg.org/download.html)\n*   [AOMENC](https://aomedia.googlesource.com/aom/) For Aomenc encoder\n*   [Rav1e](https://github.com/xiph/rav1e) For Rav1e encoder\n*   [SVT-AV1](https://github.com/OpenVisualCloud/SVT-AV1) For SVT-AV1 encoder\n\nFor update run `pip install av1an -U`\n\n### Donations for Threadripper 3990x dream\nBitcoin - 1gU9aQ2qqoQPuvop2jqC68JKZh5cyCivG\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/master-of-zen/Av1an", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Av1an", "package_url": "https://pypi.org/project/Av1an/", "platform": "", "project_url": "https://pypi.org/project/Av1an/", "project_urls": {"Homepage": "https://github.com/master-of-zen/Av1an"}, "release_url": "https://pypi.org/project/Av1an/1.8.0.post1/", "requires_dist": ["numpy", "scenedetect[opencv,progress_bar]", "opencv-python", "tqdm", "psutil", "scipy", "matplotlib"], "requires_python": ">=3.6", "summary": "All-in-one encode toolkit", "version": "1.8.0.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\n    <br>\n    Av1an\n    <br>\n</h1>\n<h2>All-in-one tool for streamlining av1 encoding</h2>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74b96e4b805c555cc72570e7180e6ff267280074/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3636353434303734343536373437323136392f3638353130333830373935323036303434372f3134333734305f30355f30335f32302e706e67\"></p>\n<h4> \n<a href=\"https://discord.gg/TssVH86\" rel=\"nofollow\"><img alt=\"Discord server\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4be027b21fae2b102d4963160b28238d182d066a/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3639363834393937343233303531353739342f656d6265642e706e67\"></a>\n<img alt=\"Project Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8b099e4431b9020207aa65a4274119c16346078/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f63767765697064677068626a6b6b61723f7376673d74727565\"> <a href=\"https://codeclimate.com/github/master-of-zen/Av1an/maintainability\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80710bc771cd9e478b9af3251e4ac7289206b8a0/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f34316561376164323231646364616433666538642f6d61696e7461696e6162696c697479\">\n&lt;img= src=\"https://app.codacy.com/manual/Grenight/Av1an?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=master-of-zen/Av1an&amp;utm_campaign=Badge_Grade_Dashboard\"&gt;</a>\n<a href=\"https://www.codacy.com/manual/Grenight/Av1an?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=master-of-zen/Av1an&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6ff8cceaa7577254f9b03988e761d64e1781836/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3436333264626232663666333461643139393134326330316133656232616166\"></a>\n</h4>\n<h2>Easy, Fast, and Efficient </h2>\n<p>Start using AV1 encoding. All open-source encoders are supported (Aom, Rav1e, SVT-AV1) also VP9, VP8.</p>\n<p>Example with default parameters:</p>\n<pre><code>av1an -i input\n</code></pre>\n<p>With your own parameters:</p>\n<pre><code>av1an -i input -enc aom -v \" --cpu-used=3 --end-usage=q --cq-level=30 \" -ff \" -vf scale=-1:720 \"\n-w 10 -p 2 -a \" -c:a libopus -b:a 24k \" -s scenes.csv -log my_log -o output_file\n</code></pre>\n<h2>Usage</h2>\n<pre><code>-i   --file_path         Input file (relative or absolute path)\n\n-o   --output_file       Name/Path for output file (Default: (input file name)_av1.mkv)\n                        Output file ending is always `.mkv`\n\n-enc --encoder          Encoder to use (aom,rav1e,svt_av1,vpx. Default: aom)\n                        Example: -enc rav1e\n\n-v   --video_params     Encoder settings flags (If not set, will be used default parameters.\n                        Required for SVT-AV1s)\n                        Must be inside ' ' or \" \"\n\n-p   --passes           Set number of passes for encoding\n                        (Default: Aomenc: 2, Rav1e: 1, SVT-AV1: 2)\n                        At current moment 2nd pass Rav1e not working\n\n-a   --audio_params     FFmpeg audio settings flags (Default: copy audio from source to output)\n                        Example: -a '-c:a libopus -b:a  64k'\n\n-w   --workers          Overrides automatically set number of workers.\n                        Example: Rav1e settings \" ... --tile-rows 2 --tile-cols 2 ... \" -w 3\n\n-s   --scenes           Path to file with scenes timestamps.\n                        If given `0` spliting will be ignored\n                        If file not exist, new will be generated in current folder\n                        First run to generate stamps, all next reuse it.\n                        Example: \"-s scenes.csv\"\n\n-tr  --threshold        PySceneDetect threshold for scene detection Default: 50\n\n-ff  --ffmpeg             FFmpeg options. Applied to each segment individually \n                        Example:\n                        --ff \" -r 24 -vf scale=320:240 \"\n\n-fmt --pix_format       Setting custom pixel/bit format(Default: 'yuv420p')\n                        Example for 10 bit: 'yuv420p10le'\n                        Encoding options should be adjusted accordingly.\n\n--resume                If encode was stopped/quit resumes encode with saving all progress\n                        Resuming automatically skips scenedetection, audio encoding/copy,\n                        spliting, so resuming only possible after actuall encoding is started.\n                        /.temp folder must be presented for resume.\n\n--no_check              Skip checking numbers of frames for source and encoded chunks.\n                        Needed if framerate changes to avoid console spam.\n                        By default any differences in frames of encoded files will be reported.\n\n--keep                  Not deleting temprally folders after encode finished.\n\n-log --logging          Path to .log file(Default: no logging)\n\n--temp                  Set path for temporally folders. Default: .temp\n\n--boost                 Enable experimental CQ boosting for dark scenes. Refer to 1.7 release notes.\n\n-bl                     CQ limit for boosting. CQ can't get lower than this value.\n\n-br                     CQ range for boosting. Delta for which CQ can be changed\n\n--vmaf                  Calculate vmaf for each encoded clip.\n                        Saves plot after encode, showing vmaf values for all video segments.\n                        Requires: Installed FFMPEG with libvmaf and installed libvmaf.\n\n--vmaf_path             Custom path to libvmaf models, by default used system one.\n\n--tg_vmaf               Vmaf value to target. Best works with 90-95 on 720/1080.\n\n--vmaf_steps            Number of evenly spaced probes that is used to interpolate vmaf to cq change.\n                        Must be bigger than 3. Optimal is 4-6 probes. Default: 4\n\n--vmaf_error            Decrease initial Vmaf values for interpolation.Increasing number will result \n                        in lower CQ and bigger final vmaf score, use to correct whole vmaf plot. \n                        For start If target vmaf undershoot increase value by undershoot amount.\n\n--min_cq, --max_cq      Minimum and maximum CQ values used in interpolation in target Vmaf mode\n                        Use to limit CQ values range. Default: 20, 63.\n</code></pre>\n<h2>Main Features</h2>\n<p><strong>Spliting video by scenes for parallel encoding</strong> because AV1 encoders currently not good at multithreading, encoding is limited to single or couple of threads at the same time.</p>\n<ul>\n<li><a href=\"https://pyscenedetect.readthedocs.io/en/latest/\" rel=\"nofollow\">PySceneDetect</a> used for spliting video by scenes and running multiple encoders.</li>\n<li>Fastest way to encode AV1 without lossing quality, as fast as many cores cpu have :).</li>\n<li>Resuming encoding without loss of encoded progress.</li>\n<li>Simple and clean console look.</li>\n<li>Automatic determination of how many workers the host can handle.</li>\n<li>Building encoding queue with bigger files first, minimizing waiting for last scene to encode.</li>\n<li>Both video and audio transcoding with FFmpeg.</li>\n<li>Logging of progress of all encoders.</li>\n<li>\"Boosting\" quality of scenes based on their brightness.</li>\n</ul>\n<h2>Install</h2>\n<ul>\n<li>\n<p><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python3</a>\nFor Windows in installer set check option to <code>add Python to PATH</code></p>\n</li>\n<li>\n<p><a href=\"https://pypi.org/project/Av1an/\" rel=\"nofollow\">Av1an on PIP3</a>\nInstallation: <code>pip install Av1an</code></p>\n</li>\n<li>\n<p><a href=\"https://ffmpeg.org/download.html\" rel=\"nofollow\">FFmpeg</a></p>\n</li>\n<li>\n<p><a href=\"https://aomedia.googlesource.com/aom/\" rel=\"nofollow\">AOMENC</a> For Aomenc encoder</p>\n</li>\n<li>\n<p><a href=\"https://github.com/xiph/rav1e\" rel=\"nofollow\">Rav1e</a> For Rav1e encoder</p>\n</li>\n<li>\n<p><a href=\"https://github.com/OpenVisualCloud/SVT-AV1\" rel=\"nofollow\">SVT-AV1</a> For SVT-AV1 encoder</p>\n</li>\n</ul>\n<p>For update run <code>pip install av1an -U</code></p>\n<h3>Donations for Threadripper 3990x dream</h3>\n<p>Bitcoin - 1gU9aQ2qqoQPuvop2jqC68JKZh5cyCivG</p>\n\n          </div>"}, "last_serial": 7153088, "releases": {"1.7.0": [{"comment_text": "", "digests": {"md5": "afd378c7d50b2912cc88065c854a83ab", "sha256": "c38af36583c9646e40a372543508f5d18780db6cf6e3e6f46faa6f17f37a9e63"}, "downloads": -1, "filename": "Av1an-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "afd378c7d50b2912cc88065c854a83ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24159, "upload_time": "2020-04-23T10:08:15", "upload_time_iso_8601": "2020-04-23T10:08:15.379248Z", "url": "https://files.pythonhosted.org/packages/fb/0e/29d6088c79397a20031b5a7e547b0a1ce085136844273141f19f1a2e580a/Av1an-1.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e15eb595acb91f28d839dc8914fa2515", "sha256": "89bd86a79db66ba04a490260e34f7e0a9f5ebc889c575d2b77fe03dde0e221e8"}, "downloads": -1, "filename": "Av1an-1.7.0.tar.gz", "has_sig": false, "md5_digest": "e15eb595acb91f28d839dc8914fa2515", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14104, "upload_time": "2020-04-23T10:08:17", "upload_time_iso_8601": "2020-04-23T10:08:17.739828Z", "url": "https://files.pythonhosted.org/packages/d0/50/9363d7cb9c9d48aa310f597ecf02ad6a7433302769405c46ca3f19111a76/Av1an-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "cb05372c0ffbcda09e7ccd1ed7c4ad0f", "sha256": "470056f81c0e5819635361c0dbfc23e58933f4a7e7717afff47e4f92ed6d5c25"}, "downloads": -1, "filename": "Av1an-1.8.0.tar.gz", "has_sig": false, "md5_digest": "cb05372c0ffbcda09e7ccd1ed7c4ad0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14294, "upload_time": "2020-04-24T20:17:00", "upload_time_iso_8601": "2020-04-24T20:17:00.609881Z", "url": "https://files.pythonhosted.org/packages/09/a9/1f915b90d35d04f9dd6ec58b3773075475a55535f2628db86414731916f8/Av1an-1.8.0.tar.gz", "yanked": false}], "1.8.0.post1": [{"comment_text": "", "digests": {"md5": "c77772070d75055973b81f8821decb53", "sha256": "7d1f4ab58dd2723b8c71e6d013ca948e8326164e8a3504a21b641abd561ec386"}, "downloads": -1, "filename": "Av1an-1.8.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c77772070d75055973b81f8821decb53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15018, "upload_time": "2020-05-02T19:38:25", "upload_time_iso_8601": "2020-05-02T19:38:25.476205Z", "url": "https://files.pythonhosted.org/packages/21/60/86076e11edd65d81ed2caf81f68614cac6fa2cf6414ebeedfea392e9f6b8/Av1an-1.8.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eab45dd9bd88e25737130f132837c51e", "sha256": "99f1b155f2cbbf0a2217b6fe4033ab6959974bc73179b30d2ce4454423a43e13"}, "downloads": -1, "filename": "Av1an-1.8.0.post1.tar.gz", "has_sig": false, "md5_digest": "eab45dd9bd88e25737130f132837c51e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14412, "upload_time": "2020-05-02T19:38:26", "upload_time_iso_8601": "2020-05-02T19:38:26.643575Z", "url": "https://files.pythonhosted.org/packages/59/c8/0b6f31460f6e090cecf8b1e96ea8d42b072caaba990bacfa3a5d2a8bb1b2/Av1an-1.8.0.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c77772070d75055973b81f8821decb53", "sha256": "7d1f4ab58dd2723b8c71e6d013ca948e8326164e8a3504a21b641abd561ec386"}, "downloads": -1, "filename": "Av1an-1.8.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c77772070d75055973b81f8821decb53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15018, "upload_time": "2020-05-02T19:38:25", "upload_time_iso_8601": "2020-05-02T19:38:25.476205Z", "url": "https://files.pythonhosted.org/packages/21/60/86076e11edd65d81ed2caf81f68614cac6fa2cf6414ebeedfea392e9f6b8/Av1an-1.8.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eab45dd9bd88e25737130f132837c51e", "sha256": "99f1b155f2cbbf0a2217b6fe4033ab6959974bc73179b30d2ce4454423a43e13"}, "downloads": -1, "filename": "Av1an-1.8.0.post1.tar.gz", "has_sig": false, "md5_digest": "eab45dd9bd88e25737130f132837c51e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14412, "upload_time": "2020-05-02T19:38:26", "upload_time_iso_8601": "2020-05-02T19:38:26.643575Z", "url": "https://files.pythonhosted.org/packages/59/c8/0b6f31460f6e090cecf8b1e96ea8d42b072caaba990bacfa3a5d2a8bb1b2/Av1an-1.8.0.post1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:06 2020"}