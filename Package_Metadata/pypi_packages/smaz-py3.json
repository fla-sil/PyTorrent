{"info": {"author": "Luis Nell", "author_email": "luis@originell.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# smaz-py3\n\nSmall string compression using [_smaz_](https://github.com/antirez/smaz) compression\nalgorithm.\n\nThis library wraps the original C code, so it should be quite fast. It also has a\ntestsuite that uses [hypothesis](https://hypothesis.readthedocs.io/en/latest/) based\nproperty testing - a fancy way of saying that the tests are run with randomly\ngenerated strings using most of unicode, to better guard against edge cases.\n\n## Why do I need this?\n\nYou are working with tons of short strings (text messages, urls,...) and want to save\nspace.\n\nAccording to the original code and notes, it achieves best compression with english\nstrings (up to 50%) that do not contain a ton of numbers. However, any other language\nmight just work as well (allegedly still up to 30%).\n\nNote that in certain cases it is possible that the compression increases the size.\nKeep that in mind and maybe first run some tests. Measuring size is explained in the\nexample below as well.\n\n## How do I use this?\n\nLet's install:\n\n```sh\n$ pip install smaz-py3\n```\n\n_Note_: the `-py3` is important. There is an original release, kudos to Benjamin\nSergeant, but it does not work with Python 3+.\n\nNow, a usage example.\n\n```python\nimport smaz\n# First we compress our example sentence.\ncompressed = smaz.compress(\"The quick brown fox jumps over the lazy dog.\")\n# The output is raw bytes. As can be seen in the decompress() call below.\n# Now, we decompress these raw bytes again. This should return our example sentence.\ndecompressed = smaz.decompress(b'H\\x00\\xfeq&\\x83\\xfek^sA)\\xdc\\xfa\\x00\\xfej&-<\\x95\\xe7\\r\\x0b\\x89\\xdbG\\x18\\x06;n')\n#  This does not fail, which means we have successfully compressed and decompressed\n#  without damaging anything.\nassert decompressed == \"The quick brown fox jumps over the lazy dog.\"\n```\n\nHow much did we compress?\n\n```python\n# First, we get the actual byte size of our example string.\noriginal_size = len(\"The quick brown fox jumps over the lazy dog.\".encode(\"utf-8\"))  # 44 bytes\n# As `compressed` is already raw bytes, we can also call len() on this\ncompressed_size = len(compressed)  # 31 bytes\ncompression_ratio = 1 - compressed_size / original_size  # 0.295\n```\n\nSo we saved about 30% (0.295 \\* 100 and some rounding \ud83d\ude09).\n\nIf the compression ratio would be below 0, we would have actually increased the\nstring. Yes, this can happen. Again, smaz works best on _small_ strings.\n\n### A small note about NULL bytes\n\nCurrently, `smaz-py3` does not support strings with NULL bytes (`\\x00`) in compression:\n\n```python\n>>> import smaz\n>>> smaz.compress(\"The quick brown fox\\x00 jumps over the lazy dog.\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: embedded null character\n```\n\nMy reasoning behind this is that in most scenarios you want to clean that away\nbeforehand anyways. If you think this is wrong, please open up an\n[issue on github](https://github.com/originell/smaz-py3). I am happy for further input!\n\n## Migrating from Python 2 `smaz`\n\nIf you have been using the [Python 2 `smaz` library](https://pypi.org/project/smaz/),\nthis Python 3 version exposes the same API, so it is a drop-in replacement.\n\n**Important**: While developing this extension, I think I found a bug in the original\nlibrary. Using Python 2.7.16:\n\n```python\n>>> import smaz\n>>> smaz.compress(\"The quick brown fox jumps over the lazy dog.\")\n'H'  # this is wrong.\n>>> small = smaz.compress(\"The quick brown fox jumps over the lazy dog.\")\n>>> smaz.decompress(small)\n'The'  # information lost.\n```\n\nSo, if you are actually upgrading from this, please make sure that you are not\naffected by this. `smaz-py3` is not prone to this bug.\n\nBehind the scenes, smaz uses NULL bytes in compression. However, when converting from\nC back to a Python string object, NULL is used to mark the end of the string. The\nabove sentence, compressed, has the NULL byte right after the `H` (`H\\x00\\xfeq\u2026`).\nThat's why it stops right then and there. Again, `smaz-py3` is not affected by this,\nmostly because I got lucky in choosing this example sentence.\n\n## Credits\n\nCredit where credit is due. First to [antirez's SMAZ compression](https://github.com/antirez/smaz)\nand to the [original python 2 wrapper](https://pypi.org/project/smaz/) by Benjamin\nSergeant.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/originell/smaz-py3/tarball/1.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/originell/smaz-py3", "keywords": "smaz string compression", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "smaz-py3", "package_url": "https://pypi.org/project/smaz-py3/", "platform": "", "project_url": "https://pypi.org/project/smaz-py3/", "project_urls": {"Download": "https://github.com/originell/smaz-py3/tarball/1.0.1", "Homepage": "https://github.com/originell/smaz-py3"}, "release_url": "https://pypi.org/project/smaz-py3/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Small string compression using smaz, supports Python 3.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>smaz-py3</h1>\n<p>Small string compression using <a href=\"https://github.com/antirez/smaz\" rel=\"nofollow\"><em>smaz</em></a> compression\nalgorithm.</p>\n<p>This library wraps the original C code, so it should be quite fast. It also has a\ntestsuite that uses <a href=\"https://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">hypothesis</a> based\nproperty testing - a fancy way of saying that the tests are run with randomly\ngenerated strings using most of unicode, to better guard against edge cases.</p>\n<h2>Why do I need this?</h2>\n<p>You are working with tons of short strings (text messages, urls,...) and want to save\nspace.</p>\n<p>According to the original code and notes, it achieves best compression with english\nstrings (up to 50%) that do not contain a ton of numbers. However, any other language\nmight just work as well (allegedly still up to 30%).</p>\n<p>Note that in certain cases it is possible that the compression increases the size.\nKeep that in mind and maybe first run some tests. Measuring size is explained in the\nexample below as well.</p>\n<h2>How do I use this?</h2>\n<p>Let's install:</p>\n<pre>$ pip install smaz-py3\n</pre>\n<p><em>Note</em>: the <code>-py3</code> is important. There is an original release, kudos to Benjamin\nSergeant, but it does not work with Python 3+.</p>\n<p>Now, a usage example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">smaz</span>\n<span class=\"c1\"># First we compress our example sentence.</span>\n<span class=\"n\">compressed</span> <span class=\"o\">=</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># The output is raw bytes. As can be seen in the decompress() call below.</span>\n<span class=\"c1\"># Now, we decompress these raw bytes again. This should return our example sentence.</span>\n<span class=\"n\">decompressed</span> <span class=\"o\">=</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">decompress</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'H</span><span class=\"se\">\\x00\\xfe</span><span class=\"s1\">q&amp;</span><span class=\"se\">\\x83\\xfe</span><span class=\"s1\">k^sA)</span><span class=\"se\">\\xdc\\xfa\\x00\\xfe</span><span class=\"s1\">j&amp;-&lt;</span><span class=\"se\">\\x95\\xe7\\r\\x0b\\x89\\xdb</span><span class=\"s1\">G</span><span class=\"se\">\\x18\\x06</span><span class=\"s1\">;n'</span><span class=\"p\">)</span>\n<span class=\"c1\">#  This does not fail, which means we have successfully compressed and decompressed</span>\n<span class=\"c1\">#  without damaging anything.</span>\n<span class=\"k\">assert</span> <span class=\"n\">decompressed</span> <span class=\"o\">==</span> <span class=\"s2\">\"The quick brown fox jumps over the lazy dog.\"</span>\n</pre>\n<p>How much did we compress?</p>\n<pre><span class=\"c1\"># First, we get the actual byte size of our example string.</span>\n<span class=\"n\">original_size</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">))</span>  <span class=\"c1\"># 44 bytes</span>\n<span class=\"c1\"># As `compressed` is already raw bytes, we can also call len() on this</span>\n<span class=\"n\">compressed_size</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"p\">)</span>  <span class=\"c1\"># 31 bytes</span>\n<span class=\"n\">compression_ratio</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">compressed_size</span> <span class=\"o\">/</span> <span class=\"n\">original_size</span>  <span class=\"c1\"># 0.295</span>\n</pre>\n<p>So we saved about 30% (0.295 * 100 and some rounding \ud83d\ude09).</p>\n<p>If the compression ratio would be below 0, we would have actually increased the\nstring. Yes, this can happen. Again, smaz works best on <em>small</em> strings.</p>\n<h3>A small note about NULL bytes</h3>\n<p>Currently, <code>smaz-py3</code> does not support strings with NULL bytes (<code>\\x00</code>) in compression:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">smaz</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox</span><span class=\"se\">\\x00</span><span class=\"s2\"> jumps over the lazy dog.\"</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">embedded</span> <span class=\"n\">null</span> <span class=\"n\">character</span>\n</pre>\n<p>My reasoning behind this is that in most scenarios you want to clean that away\nbeforehand anyways. If you think this is wrong, please open up an\n<a href=\"https://github.com/originell/smaz-py3\" rel=\"nofollow\">issue on github</a>. I am happy for further input!</p>\n<h2>Migrating from Python 2 <code>smaz</code></h2>\n<p>If you have been using the <a href=\"https://pypi.org/project/smaz/\" rel=\"nofollow\">Python 2 <code>smaz</code> library</a>,\nthis Python 3 version exposes the same API, so it is a drop-in replacement.</p>\n<p><strong>Important</strong>: While developing this extension, I think I found a bug in the original\nlibrary. Using Python 2.7.16:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">smaz</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'H'</span>  <span class=\"c1\"># this is wrong.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">small</span> <span class=\"o\">=</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">smaz</span><span class=\"o\">.</span><span class=\"n\">decompress</span><span class=\"p\">(</span><span class=\"n\">small</span><span class=\"p\">)</span>\n<span class=\"s1\">'The'</span>  <span class=\"c1\"># information lost.</span>\n</pre>\n<p>So, if you are actually upgrading from this, please make sure that you are not\naffected by this. <code>smaz-py3</code> is not prone to this bug.</p>\n<p>Behind the scenes, smaz uses NULL bytes in compression. However, when converting from\nC back to a Python string object, NULL is used to mark the end of the string. The\nabove sentence, compressed, has the NULL byte right after the <code>H</code> (<code>H\\x00\\xfeq\u2026</code>).\nThat's why it stops right then and there. Again, <code>smaz-py3</code> is not affected by this,\nmostly because I got lucky in choosing this example sentence.</p>\n<h2>Credits</h2>\n<p>Credit where credit is due. First to <a href=\"https://github.com/antirez/smaz\" rel=\"nofollow\">antirez's SMAZ compression</a>\nand to the <a href=\"https://pypi.org/project/smaz/\" rel=\"nofollow\">original python 2 wrapper</a> by Benjamin\nSergeant.</p>\n\n          </div>"}, "last_serial": 6359730, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b266674160106230b3e63fafb076e423", "sha256": "ba35695cb28506eda1432025b9e966471b889cfa2bc6224ed7fd2723fcea2f82"}, "downloads": -1, "filename": "smaz-py3-1.0.tar.gz", "has_sig": false, "md5_digest": "b266674160106230b3e63fafb076e423", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3769, "upload_time": "2019-12-25T22:11:22", "upload_time_iso_8601": "2019-12-25T22:11:22.914646Z", "url": "https://files.pythonhosted.org/packages/2b/59/8a61eabe93c99f50926bdb934ae06184069033c31940d8c1436eb4130074/smaz-py3-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "edfc912b9ad089cb213d24e16249f194", "sha256": "cb2eac900b33e92613b63feea1e61b80290ee8b077d6388ccd0b3c5c892ca68b"}, "downloads": -1, "filename": "smaz-py3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "edfc912b9ad089cb213d24e16249f194", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20623, "upload_time": "2019-12-25T22:25:43", "upload_time_iso_8601": "2019-12-25T22:25:43.996955Z", "url": "https://files.pythonhosted.org/packages/22/51/b78d8c3eb9a7e7c6f2d6e276d1419f6753126a61e76194476f86e5682493/smaz-py3-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edfc912b9ad089cb213d24e16249f194", "sha256": "cb2eac900b33e92613b63feea1e61b80290ee8b077d6388ccd0b3c5c892ca68b"}, "downloads": -1, "filename": "smaz-py3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "edfc912b9ad089cb213d24e16249f194", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20623, "upload_time": "2019-12-25T22:25:43", "upload_time_iso_8601": "2019-12-25T22:25:43.996955Z", "url": "https://files.pythonhosted.org/packages/22/51/b78d8c3eb9a7e7c6f2d6e276d1419f6753126a61e76194476f86e5682493/smaz-py3-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:57 2020"}