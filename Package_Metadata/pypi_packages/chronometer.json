{"info": {"author": "Arthur Skowronek", "author_email": "eisensheng@mailbox.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System", "Topic :: System :: Benchmark", "Topic :: Utilities"], "description": "Chronometer\r\n===========\r\n\r\n.. image:: https://img.shields.io/travis/eisensheng/chronometer.svg?style=flat\r\n    :target: https://travis-ci.org/eisensheng/chronometer\r\n    :alt: Continuous Integration\r\n\r\n.. image:: https://img.shields.io/coveralls/eisensheng/chronometer/develop.svg?style=flat\r\n    :target: https://coveralls.io/r/eisensheng/chronometer?branch=develop\r\n    :alt: Test Coverage\r\n\r\n.. image:: https://readthedocs.org/projects/chronometer/badge/?version=latest&style=flat\r\n    :target: http://chronometer.readthedocs.org/en/latest/\r\n    :alt: Documentation\r\n\r\n.. image:: https://pypip.in/version/chronometer/badge.svg?style=flat\r\n    :target: https://pypi.python.org/pypi/chronometer/\r\n    :alt: Latest Version\r\n\r\n.. image:: https://pypip.in/py_versions/chronometer/badge.svg?style=flat\r\n    :target: https://pypi.python.org/pypi/chronometer/\r\n    :alt: Python versions\r\n\r\n.. image:: https://pypip.in/license/chronometer/badge.svg?style=flat\r\n    :target: https://github.com/eisensheng/chronometer/blob/develop/COPYING\r\n    :alt: MIT License\r\n\r\nYet another simple time measurement tool for Python.  The goal of this\r\nimplementation is to avoid as much cruft as possible.  The current version\r\nis 72 lines of actual code long, leaving out blank, doc and comment lines.\r\nChronometer provides only functions to measure how much wall-clock time\r\nhas passed between starting and stopping the timer.\r\n\r\nNothing more.  Nothing less.\r\n\r\nChronometer tries to stay accurate to the actual time spent between\r\nstarting and stopping the timer by utilizing a monotonic timer.  According\r\nto the linux manual a monotonic timer is subject to time adjustments so\r\nit stays accurate but will never move backwards or jump.  It will be\r\nadjusted gradually and always moves forward as long as the system runs.\r\n\r\n\r\nExamples\r\n--------\r\n\r\nEasy:\r\n\r\n.. code-block:: python\r\n\r\n    import time\r\n    from chronometer import Chronometer\r\n\r\n    long_running_task = lambda: time.sleep(3.)\r\n\r\n    with Chronometer() as t:\r\n        long_running_task()  # that will take a few seconds.\r\n    print('Phew, that took me {:.3f} seconds!'.format(float(t)))\r\n\r\n\r\nAdvanced:\r\n\r\n.. code-block:: python\r\n\r\n    from time import sleep\r\n    from chronometer import Chronometer\r\n\r\n    counter = 0\r\n    def long_running_task_that_can_fail():\r\n        global counter\r\n        counter += 1\r\n        sleep(2.)\r\n        return counter > 3\r\n\r\n    with Chronometer() as t:\r\n        while not long_running_task_that_can_fail():\r\n            print('Failed after {:.3f} seconds!'.format(t.reset()))\r\n    print('Success after {:.3f} seconds!'.format(float(t)))\r\n\r\n\r\nRidiculous:\r\n\r\n.. code-block:: python\r\n\r\n    import asyncio\r\n    from chronometer import Chronometer\r\n\r\n\r\n    class PingEchoServerProtocol(asyncio.StreamReaderProtocol):\r\n\r\n        def __init__(self):\r\n            super().__init__(asyncio.StreamReader(), self.client_connected)\r\n            self.reader, self.writer = None, None\r\n            self.latency_timer = Chronometer()\r\n\r\n        def client_connected(self, reader, writer):\r\n            self.reader, self.writer = reader, writer\r\n            asyncio.async(self.ping_loop())\r\n            asyncio.async(self.handler())\r\n\r\n        @asyncio.coroutine\r\n        def send(self, data):\r\n            self.writer.write(data.encode('utf-8') + b'\\n')\r\n            yield from self.writer.drain()\r\n\r\n        @asyncio.coroutine\r\n        def ping_loop(self):\r\n            yield from asyncio.sleep(5.)\r\n            while True:\r\n                if self.latency_timer.stopped:\r\n                    self.latency_timer.start()\r\n                    yield from self.send('PING (send me PONG!)')\r\n\r\n                sleep_duration = max(2., 10. - self.latency_timer.elapsed)\r\n                yield from asyncio.sleep(sleep_duration)\r\n\r\n        @asyncio.coroutine\r\n        def handler(self):\r\n            while True:\r\n                data = (yield from self.reader.readline())\r\n                if data[:4] == b'PONG' and self.latency_timer.started:\r\n                    yield from self.send(('Latency: {:.3f}s'\r\n                                          .format(self.latency_timer.stop())))\r\n\r\n    l = asyncio.get_event_loop()\r\n\r\n    @asyncio.coroutine\r\n    def startup():\r\n        s = (yield from l.create_server(lambda: PingEchoServerProtocol(),\r\n                                        host='localhost', port=2727))\r\n        print('Now telnet to localhost 2727')\r\n        yield from s.wait_closed()\r\n\r\n    l.run_until_complete(startup())", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eisensheng/chronometer", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "chronometer", "package_url": "https://pypi.org/project/chronometer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/chronometer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/eisensheng/chronometer"}, "release_url": "https://pypi.org/project/chronometer/1.0/", "requires_dist": null, "requires_python": null, "summary": "Yet another simple time measurement tool for Python with less cruft and more features.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/eisensheng/chronometer\" rel=\"nofollow\"><img alt=\"Continuous Integration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/283c8e753ab655d73556a4aa468e45020c0d2572/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f656973656e7368656e672f6368726f6e6f6d657465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/eisensheng/chronometer?branch=develop\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e909358b0387064a99e4a4dd3fd014c4a20e6a29/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f656973656e7368656e672f6368726f6e6f6d657465722f646576656c6f702e7376673f7374796c653d666c6174\"></a>\n<a href=\"http://chronometer.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/851c387ab89a1b7cceddfe28a01ff5880e874d01/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6368726f6e6f6d657465722f62616467652f3f76657273696f6e3d6c6174657374267374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/chronometer/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07fdac2517b35ed37758328be3dcb916703c4e31/68747470733a2f2f70797069702e696e2f76657273696f6e2f6368726f6e6f6d657465722f62616467652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/chronometer/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0122963934cefecd7ec786ffa03d084418bc9d06/68747470733a2f2f70797069702e696e2f70795f76657273696f6e732f6368726f6e6f6d657465722f62616467652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/eisensheng/chronometer/blob/develop/COPYING\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7db2cb96d2cf2d653d201b54dc5782f8e4aad5f7/68747470733a2f2f70797069702e696e2f6c6963656e73652f6368726f6e6f6d657465722f62616467652e7376673f7374796c653d666c6174\"></a>\n<p>Yet another simple time measurement tool for Python.  The goal of this\nimplementation is to avoid as much cruft as possible.  The current version\nis 72 lines of actual code long, leaving out blank, doc and comment lines.\nChronometer provides only functions to measure how much wall-clock time\nhas passed between starting and stopping the timer.</p>\n<p>Nothing more.  Nothing less.</p>\n<p>Chronometer tries to stay accurate to the actual time spent between\nstarting and stopping the timer by utilizing a monotonic timer.  According\nto the linux manual a monotonic timer is subject to time adjustments so\nit stays accurate but will never move backwards or jump.  It will be\nadjusted gradually and always moves forward as long as the system runs.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Easy:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chronometer</span> <span class=\"kn\">import</span> <span class=\"n\">Chronometer</span>\n\n<span class=\"n\">long_running_task</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Chronometer</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"n\">long_running_task</span><span class=\"p\">()</span>  <span class=\"c1\"># that will take a few seconds.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Phew, that took me </span><span class=\"si\">{:.3f}</span><span class=\"s1\"> seconds!'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)))</span>\n</pre>\n<p>Advanced:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chronometer</span> <span class=\"kn\">import</span> <span class=\"n\">Chronometer</span>\n\n<span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">def</span> <span class=\"nf\">long_running_task_that_can_fail</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">counter</span>\n    <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">counter</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Chronometer</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">long_running_task_that_can_fail</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Failed after </span><span class=\"si\">{:.3f}</span><span class=\"s1\"> seconds!'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Success after </span><span class=\"si\">{:.3f}</span><span class=\"s1\"> seconds!'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)))</span>\n</pre>\n<p>Ridiculous:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chronometer</span> <span class=\"kn\">import</span> <span class=\"n\">Chronometer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PingEchoServerProtocol</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReaderProtocol</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client_connected</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span> <span class=\"o\">=</span> <span class=\"n\">Chronometer</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">client_connected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ping_loop</span><span class=\"p\">())</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"k\">async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ping_loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">5.</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span><span class=\"o\">.</span><span class=\"n\">stopped</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n                <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'PING (send me PONG!)'</span><span class=\"p\">)</span>\n\n            <span class=\"n\">sleep_duration</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">10.</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span><span class=\"o\">.</span><span class=\"n\">elapsed</span><span class=\"p\">)</span>\n            <span class=\"k\">yield from</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sleep_duration</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[:</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'PONG'</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"p\">:</span>\n                <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">((</span><span class=\"s1\">'Latency: </span><span class=\"si\">{:.3f}</span><span class=\"s1\">s'</span>\n                                      <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">latency_timer</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">())))</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">startup</span><span class=\"p\">():</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">yield from</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">PingEchoServerProtocol</span><span class=\"p\">(),</span>\n                                    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">2727</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Now telnet to localhost 2727'</span><span class=\"p\">)</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">startup</span><span class=\"p\">())</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1356519, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "595bb6883bfea1970f4188a18a84191f", "sha256": "9722198bf8dfd4880da429b739738c0d09f04a5ad901ed43273a092f7978a483"}, "downloads": -1, "filename": "chronometer-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "595bb6883bfea1970f4188a18a84191f", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 6266, "upload_time": "2014-12-21T19:03:43", "upload_time_iso_8601": "2014-12-21T19:03:43.009600Z", "url": "https://files.pythonhosted.org/packages/8b/2e/487bb336e1548506c86d06f818c9ab3014122272773688392ddf08062bbe/chronometer-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b89e863450645c935114f683cf1f26c2", "sha256": "ff31478af4ea0e7cb8590702b2605d300e6f4462c52fd3157cd7db18bf2b060f"}, "downloads": -1, "filename": "chronometer-1.0.zip", "has_sig": false, "md5_digest": "b89e863450645c935114f683cf1f26c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12355, "upload_time": "2014-12-21T19:03:23", "upload_time_iso_8601": "2014-12-21T19:03:23.157548Z", "url": "https://files.pythonhosted.org/packages/d5/a6/93bb2c89176c5517033b3409f506e5404f4495d2ba73d9fa45962d844308/chronometer-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "595bb6883bfea1970f4188a18a84191f", "sha256": "9722198bf8dfd4880da429b739738c0d09f04a5ad901ed43273a092f7978a483"}, "downloads": -1, "filename": "chronometer-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "595bb6883bfea1970f4188a18a84191f", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 6266, "upload_time": "2014-12-21T19:03:43", "upload_time_iso_8601": "2014-12-21T19:03:43.009600Z", "url": "https://files.pythonhosted.org/packages/8b/2e/487bb336e1548506c86d06f818c9ab3014122272773688392ddf08062bbe/chronometer-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b89e863450645c935114f683cf1f26c2", "sha256": "ff31478af4ea0e7cb8590702b2605d300e6f4462c52fd3157cd7db18bf2b060f"}, "downloads": -1, "filename": "chronometer-1.0.zip", "has_sig": false, "md5_digest": "b89e863450645c935114f683cf1f26c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12355, "upload_time": "2014-12-21T19:03:23", "upload_time_iso_8601": "2014-12-21T19:03:23.157548Z", "url": "https://files.pythonhosted.org/packages/d5/a6/93bb2c89176c5517033b3409f506e5404f4495d2ba73d9fa45962d844308/chronometer-1.0.zip", "yanked": false}], "timestamp": "Thu May  7 22:19:28 2020"}