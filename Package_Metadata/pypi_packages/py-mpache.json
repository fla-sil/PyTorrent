{"info": {"author": "mr purple", "author_email": "mrpurplenz@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System", "Topic :: System :: Systems Administration"], "description": "# py-mpache #\n\n## INSTALL ##\n\nInstallation is fairly simple.  Just do the standard install as root:\n\n    tar -xvzf py-mpache-*.tar.gz\n    cd py-mpache-*\n    python setup.py install\n\nYou can not yet also install directly using *pip* or *easy_install* but once thats implimented the line will be\n\n    pip install py-mpache\n\n\n## USAGE ##\n\nThis library will follows the XML API.  If you follow the \ndocumentation on https://github.com/ampache/ampache/wiki/XML-API \n\nit is forked from crusty monkeys subsonic python wrapper and the intention is that calls to that wrapper will be identical to calls to this ampache wrapper.\n\nSo you can also view crusty monkeys subsonic documentation at http://stuffivelearned.org/doku.php?id=programming:python:py-sonic\n\n## BASIC TUTORIAL ##\n\nThis is about as basic as it gets.  We are just going to set up the connection\nand then get a couple of random songs.\n\n```python\n#!/usr/bin/env python\n\nfrom pprint import pprint\nimport libmpache\n\n# We pass in the base url, the username, password, and port number\n# Be sure to use https:// if this is an ssl connection!\nconn = libmpache.Connection('http://music.example.com' , 'myuser' , \n    'secretpass' , port=80)\n# Let's get 2 completely random songs\nsongs = conn.getRandomSongs(size=2)\n# We'll just pretty print the results we got to the terminal\npprint(songs)\n```\n\nAs you can see, it's really pretty simple.  If you use the documentation \nprovided in the library:\n\n    pydoc libsonic.connection\n\nor the api docs on subsonic.org (listed above), you should be able to make use\nof your server without too much trouble.\n\nRight now, only plain old dictionary structures are returned.  The plan \nfor a later release includes the following:\n\n* Proper object representations for Artist, Album, Song, etc.\n* Lazy access of members (the song objects aren't created until you want to\n  do something with them)\n\n## TODO ##\nI havent started yet but changes required will be to parse the XML from the ampache server and return lists as per py-sonic.\n\nMy intention is to incorporate every api call available from the latest ampache api version so as to maximise the possible outputs from this wrapper\n\nUltimately once list returns are working I want to build another project linking this wrapper as a backend to mopidy. Probably based on the mopidy-subsonic extension.\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mrpurplenz/py-mpache/tarball/0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrpurplenz/py-mpache", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "py-mpache", "package_url": "https://pypi.org/project/py-mpache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py-mpache/", "project_urls": {"Download": "https://github.com/mrpurplenz/py-mpache/tarball/0.1", "Homepage": "https://github.com/mrpurplenz/py-mpache"}, "release_url": "https://pypi.org/project/py-mpache/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # py-mpache #<br><br>## INSTALL ##<br><br>Installation is fairly simple.  Just do the standard install as root:<br><br>    tar -xvzf py-mpache-*.tar.gz<br>    cd py-mpache-*<br>    python setup.py install<br><br>You can not yet also install directly using *pip* or *easy_install* but once thats implimented the line will be<br><br>    pip install py-mpache<br><br><br>## USAGE ##<br><br>This library will follows the XML API.  If you follow the <br>documentation on https://github.com/ampache/ampache/wiki/XML-API <br><br>it is forked from crusty monkeys subsonic python wrapper and the intention is that calls to that wrapper will be identical to calls to this ampache wrapper.<br><br>So you can also view crusty monkeys subsonic documentation at http://stuffivelearned.org/doku.php?id=programming:python:py-sonic<br><br>## BASIC TUTORIAL ##<br><br>This is about as basic as it gets.  We are just going to set up the connection<br>and then get a couple of random songs.<br><br>```python<br>#!/usr/bin/env python<br><br>from pprint import pprint<br>import libmpache<br><br># We pass in the base url, the username, password, and port number<br># Be sure to use https:// if this is an ssl connection!<br>conn = libmpache.Connection('http://music.example.com' , 'myuser' , <br>    'secretpass' , port=80)<br># Let's get 2 completely random songs<br>songs = conn.getRandomSongs(size=2)<br># We'll just pretty print the results we got to the terminal<br>pprint(songs)<br>```<br><br>As you can see, it's really pretty simple.  If you use the documentation <br>provided in the library:<br><br>    pydoc libsonic.connection<br><br>or the api docs on subsonic.org (listed above), you should be able to make use<br>of your server without too much trouble.<br><br>Right now, only plain old dictionary structures are returned.  The plan <br>for a later release includes the following:<br><br>* Proper object representations for Artist, Album, Song, etc.<br>* Lazy access of members (the song objects aren't created until you want to<br>  do something with them)<br><br>## TODO ##<br>I havent started yet but changes required will be to parse the XML from the ampache server and return lists as per py-sonic.<br><br>My intention is to incorporate every api call available from the latest ampache api version so as to maximise the possible outputs from this wrapper<br><br>Ultimately once list returns are working I want to build another project linking this wrapper as a backend to mopidy. Probably based on the mopidy-subsonic extension.<br>\n          </div>"}, "last_serial": 2343536, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7211005e10beb12aba3c6818815928a3", "sha256": "c23f7c03ee9b5c66e75e9f479479e5cf16d2cb752b6ff5b2eb19fb47fb4a1dff"}, "downloads": -1, "filename": "py-mpache-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7211005e10beb12aba3c6818815928a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38536, "upload_time": "2016-09-15T04:04:54", "upload_time_iso_8601": "2016-09-15T04:04:54.919920Z", "url": "https://files.pythonhosted.org/packages/93/19/263d60db550e265046126306c85fe0d067cb750fa93e642e60f386c6f50a/py-mpache-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7211005e10beb12aba3c6818815928a3", "sha256": "c23f7c03ee9b5c66e75e9f479479e5cf16d2cb752b6ff5b2eb19fb47fb4a1dff"}, "downloads": -1, "filename": "py-mpache-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7211005e10beb12aba3c6818815928a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38536, "upload_time": "2016-09-15T04:04:54", "upload_time_iso_8601": "2016-09-15T04:04:54.919920Z", "url": "https://files.pythonhosted.org/packages/93/19/263d60db550e265046126306c85fe0d067cb750fa93e642e60f386c6f50a/py-mpache-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:40 2020"}