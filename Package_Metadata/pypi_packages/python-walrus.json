{"info": {"author": "Jarry Shaw", "author_email": "jarryshaw@icloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Utilities"], "description": "# walrus\n\n[![PyPI - Downloads](https://pepy.tech/badge/python-walrus)](https://pepy.tech/count/python-walrus)\n[![PyPI - Version](https://img.shields.io/pypi/v/python-walrus.svg)](https://pypi.org/project/python-walrus)\n[![PyPI - Format](https://img.shields.io/pypi/format/python-walrus.svg)](https://pypi.org/project/python-walrus)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/python-walrus.svg)](https://pypi.org/project/python-walrus)\n\n[![Travis CI - Status](https://img.shields.io/travis/pybpc/walrus.svg)](https://travis-ci.org/pybpc/walrus)\n[![Codecov - Coverage](https://codecov.io/gh/pybpc/walrus/branch/master/graph/badge.svg)](https://codecov.io/gh/pybpc/walrus)\n![License](https://img.shields.io/github/license/pybpc/walrus.svg)\n[![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE)\n\n> Write *assignment expressions* in Python 3.8 flavour, and let `walrus` worry about back-port issues :beer:\n\n&emsp; Since [PEP 572](https://www.python.org/dev/peps/pep-0572/), Python introduced *assignment expressions*\nsyntax in version __3.8__. For those who wish to use *assignment expressions* in their code, `walrus` provides an\nintelligent, yet imperfect, solution of a **backport compiler** by replacing *assignment expressions* syntax with\nold-fashioned assignment-then-conditional syntax, which guarantees you to always write *assignment expressions* in\nPython 3.8 flavour then compile for compatibility later.\n\n## Installation\n\n> Note that `walrus` only supports Python versions __since 3.3__ \ud83d\udc0d\n\n&emsp; For macOS users, `walrus` is now available through [Homebrew](https://brew.sh):\n\n```sh\nbrew tap jarryshaw/tap\nbrew install walrus\n# or simply, a one-liner\nbrew install jarryshaw/tap/walrus\n```\n\n&emsp; Simply run the following to install the current version from PyPI:\n\n```sh\npip install python-walrus\n```\n\n&emsp; Or install the latest version from the git repository:\n\n```sh\ngit clone https://github.com/pybpc/walrus.git\ncd walrus\npip install -e .\n# and to update at any time\ngit pull\n```\n\n## Basic Usage\n\n### CLI\n\n&emsp; It is fairly straightforward to use `walrus`:\n\n> context in `${...}` changes dynamically according to runtime environment\n\n```man\nusage: walrus [options] <python source files and folders...>\n\nBack-port compiler for Python 3.8 assignment expressions.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -na, --no-archive     do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for non-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n  -s SEP, --linesep SEP\n                        line separator to process source files (${OS_LINESEP})\n  -nl, --no-linting     do not lint converted codes\n  -t INDENT, --tabsize INDENT\n                        indentation tab size (4)\n```\n\n&emsp; `walrus` will read then convert all *assignment expressions* syntax in every Python\nfile under this path. In case there might be some problems with the conversion, `walrus` will\nduplicate all original files it is to modify into `archive` directory ahead of the process,\nif `-n` not set.\n\n&emsp; Besides, to keep consistency of API to users, `walrus` ships with a *decorator* for\nsuch functions to check assignment expressions at runtime, if `-nl` not set.\n\n## Developer Reference\n\n### Environments\n\n`walrus` currently supports three environment arguments:\n\n- `WALRUS_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `WALRUS_VERSION` -- convert against Python version (same as `--python` option in CLI)\n- `WALRUS_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n- `WALRUS_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `WALRUS_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `WALRUS_TABSIZE` -- indentation tab size (same as `--tabsize` option in CLI)\n\n### APIs\n\n#### `walrus` -- wrapper works for conversion\n\n```python\nwalrus(filename)\n```\n\nArgs:\n\n- `filename` -- `str`, file to be converted\n\nEnvs:\n\n- `WALRUS_QUIET` -- run in quiet mode (same as `--quiet` option in CLI)\n- `WALRUS_ENCODING` -- encoding to open source files (same as `--encoding` option in CLI)\n- `WALRUS_VERSION`-- convert against Python version (same as `--python` option in CLI)\n- `WALRUS_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `WALRUS_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `WALRUS_TABSIZE` -- indentation tab size (same as `--tabsize` option in CLI)\n\nRaises:\n\n- `ConvertError` -- when source code contains syntax errors\n\n#### `convert` -- the main conversion process\n\n```python\nconvert(string, source='<unknown>')\n```\n\nArgs:\n\n- `string` -- `str`, context to be converted\n- `source` -- `str`, source of the context\n\nEnvs:\n\n- `WALRUS_VERSION` -- convert against Python version (same as `--python` option in CLI)\n- `WALRUS_LINESEP` -- line separator to process source files (same as `--linesep` option in CLI)\n- `WALRUS_LINTING` -- lint converted codes (same as `--linting` option in CLI)\n- `WALRUS_TABSIZE` -- indentation tab size (same as `--tabsize` option in CLI)\n\nReturns:\n\n- `str` -- converted string\n\nRaises:\n\n- `ConvertError` -- when source code contains syntax errors\n\n#### Internal exceptions\n\n```python\nclass ConvertError(SyntaxError):\n    \"\"\"Parso syntax error.\"\"\"\n```\n\n```python\nclass ContextError(RuntimeError):\n    \"\"\"Missing conversion context.\"\"\"\n```\n\n```python\nclass EnvironError(EnvironmentError):\n    \"\"\"Invalid environment.\"\"\"\n```\n\n## Test\n\n&emsp; See [`tests`](https://github.com/pybpc/walrus/blob/master/tests) folder.\n\n## Known issues\n\n&emsp; Since `walrus` is currently based on [`parso`](https://github.com/davidhalter/parso) project,\nit had encountered several compatibility and parsing issues.\n\n* ~~Parsing f-strings with format spec beginning with `=` produces incorrect SyntaxError ([#89](https://github.com/davidhalter/parso/issues/89))~~\n  This issue has been resolved since `parso` version __0.5.2__.\n\n* ~~Parsing invalid use cases of assignment expressions do not raise SyntaxError ([#89](https://github.com/davidhalter/parso/issues/89))~~\n  This issue has been resolved since `parso` version __0.5.2__.\n\n## Contribution\n\n&emsp; Contributions are very welcome, especially fixing bugs and providing test cases.\nNote that code must remain valid and reasonable.\n\n## See Also\n\n- [`pybpc`](https://github.com/pybpc/bpc) (formerly known as `python-babel`)\n- [`f2format`](https://github.com/pybpc/f2format)\n- [`poseur`](https://github.com/pybpc/poseur)\n- [`vermin`](https://github.com/netromdk/vermin)\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pybpc/walrus", "keywords": "walrus operator,assignment expression,back-port compiler", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "python-walrus", "package_url": "https://pypi.org/project/python-walrus/", "platform": "", "project_url": "https://pypi.org/project/python-walrus/", "project_urls": {"Homepage": "https://github.com/pybpc/walrus"}, "release_url": "https://pypi.org/project/python-walrus/0.1.4/", "requires_dist": ["parso (>=0.6.0)", "tbtrim (>=0.2.1)", "bpc-utils"], "requires_python": ">=3.3", "summary": "Back-port compiler for Python 3.8 assignment expressions.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>walrus</h1>\n<p><a href=\"https://pepy.tech/count/python-walrus\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f25f0627e92993820b169900dfaf1da369ff83a3/68747470733a2f2f706570792e746563682f62616467652f707974686f6e2d77616c727573\"></a>\n<a href=\"https://pypi.org/project/python-walrus\" rel=\"nofollow\"><img alt=\"PyPI - Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b2c266333f87162a43f82d98b8f8cb64873eb4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e2d77616c7275732e737667\"></a>\n<a href=\"https://pypi.org/project/python-walrus\" rel=\"nofollow\"><img alt=\"PyPI - Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2edea6fc80303b0b8a7b3f3c70a2566d3a3bbc7a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f707974686f6e2d77616c7275732e737667\"></a>\n<a href=\"https://pypi.org/project/python-walrus\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d3fab9e96334c6c72a30a2813a6776f627658f7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974686f6e2d77616c7275732e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/pybpc/walrus\" rel=\"nofollow\"><img alt=\"Travis CI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/871cc45d0e636ee726278b0eb388d2be59ff50f7/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f70796270632f77616c7275732e737667\"></a>\n<a href=\"https://codecov.io/gh/pybpc/walrus\" rel=\"nofollow\"><img alt=\"Codecov - Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b306582ebffe673f15d2eb8ec92f8c42dfa09fe7/68747470733a2f2f636f6465636f762e696f2f67682f70796270632f77616c7275732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8ef554b50701d7b18d06aede9aa6d82fc41a5cf/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f70796270632f77616c7275732e737667\">\n<a href=\"https://github.com/996icu/996.ICU/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"LICENSE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/497459f5647e21d9f1011ef127da39a0f90d936f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d416e74692532303939362d626c75652e737667\"></a></p>\n<blockquote>\n<p>Write <em>assignment expressions</em> in Python 3.8 flavour, and let <code>walrus</code> worry about back-port issues :beer:</p>\n</blockquote>\n<p>\u2003 Since <a href=\"https://www.python.org/dev/peps/pep-0572/\" rel=\"nofollow\">PEP 572</a>, Python introduced <em>assignment expressions</em>\nsyntax in version <strong>3.8</strong>. For those who wish to use <em>assignment expressions</em> in their code, <code>walrus</code> provides an\nintelligent, yet imperfect, solution of a <strong>backport compiler</strong> by replacing <em>assignment expressions</em> syntax with\nold-fashioned assignment-then-conditional syntax, which guarantees you to always write <em>assignment expressions</em> in\nPython 3.8 flavour then compile for compatibility later.</p>\n<h2>Installation</h2>\n<blockquote>\n<p>Note that <code>walrus</code> only supports Python versions <strong>since 3.3</strong> \ud83d\udc0d</p>\n</blockquote>\n<p>\u2003 For macOS users, <code>walrus</code> is now available through <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a>:</p>\n<pre>brew tap jarryshaw/tap\nbrew install walrus\n<span class=\"c1\"># or simply, a one-liner</span>\nbrew install jarryshaw/tap/walrus\n</pre>\n<p>\u2003 Simply run the following to install the current version from PyPI:</p>\n<pre>pip install python-walrus\n</pre>\n<p>\u2003 Or install the latest version from the git repository:</p>\n<pre>git clone https://github.com/pybpc/walrus.git\n<span class=\"nb\">cd</span> walrus\npip install -e .\n<span class=\"c1\"># and to update at any time</span>\ngit pull\n</pre>\n<h2>Basic Usage</h2>\n<h3>CLI</h3>\n<p>\u2003 It is fairly straightforward to use <code>walrus</code>:</p>\n<blockquote>\n<p>context in <code>${...}</code> changes dynamically according to runtime environment</p>\n</blockquote>\n<pre>usage: walrus [options] &lt;python source files and folders...&gt;\n\nBack-port compiler for Python 3.8 assignment expressions.\n\npositional arguments:\n  SOURCE                python source files and folders to be converted (${CWD})\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n  -q, --quiet           run in quiet mode\n\narchive options:\n  duplicate original files in case there's any issue\n\n  -na, --no-archive     do not archive original files\n  -p PATH, --archive-path PATH\n                        path to archive original files (${CWD}/archive)\n\nconvert options:\n  compatibility configuration for non-unicode files\n\n  -c CODING, --encoding CODING\n                        encoding to open source files (${LOCALE_ENCODING})\n  -v VERSION, --python VERSION\n                        convert against Python version (${LATEST_VERSION})\n  -s SEP, --linesep SEP\n                        line separator to process source files (${OS_LINESEP})\n  -nl, --no-linting     do not lint converted codes\n  -t INDENT, --tabsize INDENT\n                        indentation tab size (4)\n</pre>\n<p>\u2003 <code>walrus</code> will read then convert all <em>assignment expressions</em> syntax in every Python\nfile under this path. In case there might be some problems with the conversion, <code>walrus</code> will\nduplicate all original files it is to modify into <code>archive</code> directory ahead of the process,\nif <code>-n</code> not set.</p>\n<p>\u2003 Besides, to keep consistency of API to users, <code>walrus</code> ships with a <em>decorator</em> for\nsuch functions to check assignment expressions at runtime, if <code>-nl</code> not set.</p>\n<h2>Developer Reference</h2>\n<h3>Environments</h3>\n<p><code>walrus</code> currently supports three environment arguments:</p>\n<ul>\n<li><code>WALRUS_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>WALRUS_VERSION</code> -- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>WALRUS_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n<li><code>WALRUS_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>WALRUS_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>WALRUS_TABSIZE</code> -- indentation tab size (same as <code>--tabsize</code> option in CLI)</li>\n</ul>\n<h3>APIs</h3>\n<h4><code>walrus</code> -- wrapper works for conversion</h4>\n<pre><span class=\"n\">walrus</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>filename</code> -- <code>str</code>, file to be converted</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>WALRUS_QUIET</code> -- run in quiet mode (same as <code>--quiet</code> option in CLI)</li>\n<li><code>WALRUS_ENCODING</code> -- encoding to open source files (same as <code>--encoding</code> option in CLI)</li>\n<li><code>WALRUS_VERSION</code>-- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>WALRUS_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>WALRUS_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>WALRUS_TABSIZE</code> -- indentation tab size (same as <code>--tabsize</code> option in CLI)</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code> -- when source code contains syntax errors</li>\n</ul>\n<h4><code>convert</code> -- the main conversion process</h4>\n<pre><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'&lt;unknown&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><code>string</code> -- <code>str</code>, context to be converted</li>\n<li><code>source</code> -- <code>str</code>, source of the context</li>\n</ul>\n<p>Envs:</p>\n<ul>\n<li><code>WALRUS_VERSION</code> -- convert against Python version (same as <code>--python</code> option in CLI)</li>\n<li><code>WALRUS_LINESEP</code> -- line separator to process source files (same as <code>--linesep</code> option in CLI)</li>\n<li><code>WALRUS_LINTING</code> -- lint converted codes (same as <code>--linting</code> option in CLI)</li>\n<li><code>WALRUS_TABSIZE</code> -- indentation tab size (same as <code>--tabsize</code> option in CLI)</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li><code>str</code> -- converted string</li>\n</ul>\n<p>Raises:</p>\n<ul>\n<li><code>ConvertError</code> -- when source code contains syntax errors</li>\n</ul>\n<h4>Internal exceptions</h4>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ConvertError</span><span class=\"p\">(</span><span class=\"ne\">SyntaxError</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Parso syntax error.\"\"\"</span>\n</pre>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ContextError</span><span class=\"p\">(</span><span class=\"ne\">RuntimeError</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Missing conversion context.\"\"\"</span>\n</pre>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EnvironError</span><span class=\"p\">(</span><span class=\"ne\">EnvironmentError</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Invalid environment.\"\"\"</span>\n</pre>\n<h2>Test</h2>\n<p>\u2003 See <a href=\"https://github.com/pybpc/walrus/blob/master/tests\" rel=\"nofollow\"><code>tests</code></a> folder.</p>\n<h2>Known issues</h2>\n<p>\u2003 Since <code>walrus</code> is currently based on <a href=\"https://github.com/davidhalter/parso\" rel=\"nofollow\"><code>parso</code></a> project,\nit had encountered several compatibility and parsing issues.</p>\n<ul>\n<li>\n<p><del>Parsing f-strings with format spec beginning with <code>=</code> produces incorrect SyntaxError (<a href=\"https://github.com/davidhalter/parso/issues/89\" rel=\"nofollow\">#89</a>)</del>\nThis issue has been resolved since <code>parso</code> version <strong>0.5.2</strong>.</p>\n</li>\n<li>\n<p><del>Parsing invalid use cases of assignment expressions do not raise SyntaxError (<a href=\"https://github.com/davidhalter/parso/issues/89\" rel=\"nofollow\">#89</a>)</del>\nThis issue has been resolved since <code>parso</code> version <strong>0.5.2</strong>.</p>\n</li>\n</ul>\n<h2>Contribution</h2>\n<p>\u2003 Contributions are very welcome, especially fixing bugs and providing test cases.\nNote that code must remain valid and reasonable.</p>\n<h2>See Also</h2>\n<ul>\n<li><a href=\"https://github.com/pybpc/bpc\" rel=\"nofollow\"><code>pybpc</code></a> (formerly known as <code>python-babel</code>)</li>\n<li><a href=\"https://github.com/pybpc/f2format\" rel=\"nofollow\"><code>f2format</code></a></li>\n<li><a href=\"https://github.com/pybpc/poseur\" rel=\"nofollow\"><code>poseur</code></a></li>\n<li><a href=\"https://github.com/netromdk/vermin\" rel=\"nofollow\"><code>vermin</code></a></li>\n</ul>\n\n          </div>"}, "last_serial": 6777766, "releases": {"0.0.0.dev0": [{"comment_text": "", "digests": {"md5": "092c931ffb3882d5fa7933e8f98c4da7", "sha256": "cddc1aee9019b35d6a9548ca95c7a392f37da74f751a556e56687c0712211631"}, "downloads": -1, "filename": "python_walrus-0.0.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "092c931ffb3882d5fa7933e8f98c4da7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5959, "upload_time": "2019-06-10T13:18:23", "upload_time_iso_8601": "2019-06-10T13:18:23.828881Z", "url": "https://files.pythonhosted.org/packages/81/8d/7ca4fd7928c2f2f92808cae0e5884bbe3b2453e5040bc6876f4353d734af/python_walrus-0.0.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6441c58c7da99cd8167d326beedeb633", "sha256": "a535a5ad1a8bf3e653cc49c0f17a3da6a0f3b1c8aa945eb5b085c30fe6448223"}, "downloads": -1, "filename": "python-walrus-0.0.0.dev0.tar.gz", "has_sig": false, "md5_digest": "6441c58c7da99cd8167d326beedeb633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5691, "upload_time": "2019-06-10T13:18:27", "upload_time_iso_8601": "2019-06-10T13:18:27.653523Z", "url": "https://files.pythonhosted.org/packages/dc/98/3771b9b86786617cbc968d507d3507bb9c8fee084c8bd629e292680ecf26/python-walrus-0.0.0.dev0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3557f1a0fad630c76c8a9f539dd57c85", "sha256": "421a2209b6b25a1cce0d801faee0025f9bf955271148cab95a12ce92612fbb2c"}, "downloads": -1, "filename": "python_walrus-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3557f1a0fad630c76c8a9f539dd57c85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13149, "upload_time": "2019-11-25T14:34:10", "upload_time_iso_8601": "2019-11-25T14:34:10.235119Z", "url": "https://files.pythonhosted.org/packages/4f/8a/ab11ff09e528779ca9c781a0da12be7996d38ea9e6a5ec3d390bc7449027/python_walrus-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b5fe7505fdf1a5a037257a8f2facc9b", "sha256": "f9600d2b046a34ae015ae39d6d354b43e6d4ca92d315e1733cbbde17de1d6b9f"}, "downloads": -1, "filename": "python-walrus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7b5fe7505fdf1a5a037257a8f2facc9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 16190, "upload_time": "2019-11-25T14:34:12", "upload_time_iso_8601": "2019-11-25T14:34:12.194043Z", "url": "https://files.pythonhosted.org/packages/98/a6/9478dbff9668c803d87f7932e8f799a215b35958f2ebf197ee97b1d57763/python-walrus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "66a0168782c686847d81f11098e862bc", "sha256": "bd92da197f1ca67c325aa777aae3a113d17651d9ed44e90758736b91be10ce03"}, "downloads": -1, "filename": "python_walrus-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "66a0168782c686847d81f11098e862bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13523, "upload_time": "2019-11-26T13:35:40", "upload_time_iso_8601": "2019-11-26T13:35:40.306782Z", "url": "https://files.pythonhosted.org/packages/be/79/e3892c05cf1e315f0c7ec89f9a36f535cc3136af5fd2e7c8dd6d3c995506/python_walrus-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0ab71c3481fc7127a44ec9929fc6209", "sha256": "9c5eea34c6b719e834ef2909cc1ba541882513bd4de3f518a5808e10cead4eb2"}, "downloads": -1, "filename": "python-walrus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b0ab71c3481fc7127a44ec9929fc6209", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13786, "upload_time": "2019-11-26T13:35:41", "upload_time_iso_8601": "2019-11-26T13:35:41.887485Z", "url": "https://files.pythonhosted.org/packages/a0/a7/6ed483c7d2e1aad96b537de5820f2d2de90b9b8d928edbd51e6ffb2d36d8/python-walrus-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "930a460d58fc3ae8429302afa7e8f5fc", "sha256": "1bc1e2bfac9822e26bfde5bbe1e34c55eec6389c850875f31607c5a8eefee279"}, "downloads": -1, "filename": "python_walrus-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "930a460d58fc3ae8429302afa7e8f5fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14472, "upload_time": "2019-11-27T13:31:25", "upload_time_iso_8601": "2019-11-27T13:31:25.369415Z", "url": "https://files.pythonhosted.org/packages/79/2f/665b51d20a3e5fa9dc48982adf8c3d76c402e26ec981031aaf87a417af12/python_walrus-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cba3172caa3b92a0bcaeb0f1c441c69c", "sha256": "612ec589c2351b69c273681beee23d41ce437eda44113d1e26af88186c17931d"}, "downloads": -1, "filename": "python-walrus-0.1.2.tar.gz", "has_sig": false, "md5_digest": "cba3172caa3b92a0bcaeb0f1c441c69c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 14726, "upload_time": "2019-11-27T13:31:27", "upload_time_iso_8601": "2019-11-27T13:31:27.279937Z", "url": "https://files.pythonhosted.org/packages/22/15/734bfb1bf6937c93ff7c2c70d55b3a5626c18c285da1219117ef6ce62e02/python-walrus-0.1.2.tar.gz", "yanked": false}], "0.1.2.post1": [{"comment_text": "", "digests": {"md5": "fc342058a14ff50b77b2ec23073d5058", "sha256": "95042789f6d727a28c57137275601567f8b5b6aae39430bb91b50c0cabbd9db7"}, "downloads": -1, "filename": "python_walrus-0.1.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "fc342058a14ff50b77b2ec23073d5058", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14900, "upload_time": "2019-11-28T12:09:56", "upload_time_iso_8601": "2019-11-28T12:09:56.304309Z", "url": "https://files.pythonhosted.org/packages/b9/c8/db10a22b4a58c0921db97a4690d2b55fa153dc2280942732ecb257a0c54b/python_walrus-0.1.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "670301f86829968ffdea09aba5a8af58", "sha256": "2e8d79085fc0f907f9aa0cb0f682231dc60ccc94ccfe9b4d086fe8b7143453d4"}, "downloads": -1, "filename": "python-walrus-0.1.2.post1.tar.gz", "has_sig": false, "md5_digest": "670301f86829968ffdea09aba5a8af58", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15105, "upload_time": "2019-11-28T12:09:58", "upload_time_iso_8601": "2019-11-28T12:09:58.082971Z", "url": "https://files.pythonhosted.org/packages/c9/7a/ae35a503451fc1166747a40e5f0ac874769ee3bf8db78088f6458c4d5cbb/python-walrus-0.1.2.post1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1f9b137e9f67faa7a5dd45ec3cf45143", "sha256": "060f938358e5a4b3a2b5fac61f71363df09e672dc14417d515e906357d1981af"}, "downloads": -1, "filename": "python_walrus-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1f9b137e9f67faa7a5dd45ec3cf45143", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14788, "upload_time": "2019-12-11T15:28:27", "upload_time_iso_8601": "2019-12-11T15:28:27.681090Z", "url": "https://files.pythonhosted.org/packages/b1/8a/1e04c8ec310f132ae70d5cc4d622e4bd88b4cfa0a817e237fb7962aa8ffa/python_walrus-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5daf04694537a7cf8899d56a8607f1", "sha256": "00fdbabd77b52604980811fd968891f57558c1a9861c517ed0cdd39193e11e64"}, "downloads": -1, "filename": "python-walrus-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ca5daf04694537a7cf8899d56a8607f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 15077, "upload_time": "2019-12-11T15:28:30", "upload_time_iso_8601": "2019-12-11T15:28:30.316745Z", "url": "https://files.pythonhosted.org/packages/e6/50/d4bd2003f0ac449eec56b36e2d7ca5b38575d58db566cda9bb053baf1734/python-walrus-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c80ba76a903b35c7e6e04441ee1b74d9", "sha256": "e21e43b1bddb0600b8effb6e00b095b05c66c2e8b7ebcec391cdbd20a1413faa"}, "downloads": -1, "filename": "python_walrus-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c80ba76a903b35c7e6e04441ee1b74d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13587, "upload_time": "2020-03-09T15:21:51", "upload_time_iso_8601": "2020-03-09T15:21:51.980872Z", "url": "https://files.pythonhosted.org/packages/11/a0/794daa2262ac85b50c4f00656cb4eecad5a10802e0ec056c13a22d5ba06e/python_walrus-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7de2e3ec6b573c01caa5850a1c20f6f", "sha256": "ff014752e4e5cfabb8b3b7727d3c31037ff0893fcab52fbe17b6135a5da07e0d"}, "downloads": -1, "filename": "python-walrus-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d7de2e3ec6b573c01caa5850a1c20f6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13877, "upload_time": "2020-03-09T15:21:54", "upload_time_iso_8601": "2020-03-09T15:21:54.179737Z", "url": "https://files.pythonhosted.org/packages/14/cd/fc6e92adc09d541a0e46e793960b6b4497af7ea1a2e5b9f1a36d29ad10ab/python-walrus-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c80ba76a903b35c7e6e04441ee1b74d9", "sha256": "e21e43b1bddb0600b8effb6e00b095b05c66c2e8b7ebcec391cdbd20a1413faa"}, "downloads": -1, "filename": "python_walrus-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c80ba76a903b35c7e6e04441ee1b74d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 13587, "upload_time": "2020-03-09T15:21:51", "upload_time_iso_8601": "2020-03-09T15:21:51.980872Z", "url": "https://files.pythonhosted.org/packages/11/a0/794daa2262ac85b50c4f00656cb4eecad5a10802e0ec056c13a22d5ba06e/python_walrus-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7de2e3ec6b573c01caa5850a1c20f6f", "sha256": "ff014752e4e5cfabb8b3b7727d3c31037ff0893fcab52fbe17b6135a5da07e0d"}, "downloads": -1, "filename": "python-walrus-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d7de2e3ec6b573c01caa5850a1c20f6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 13877, "upload_time": "2020-03-09T15:21:54", "upload_time_iso_8601": "2020-03-09T15:21:54.179737Z", "url": "https://files.pythonhosted.org/packages/14/cd/fc6e92adc09d541a0e46e793960b6b4497af7ea1a2e5b9f1a36d29ad10ab/python-walrus-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:38 2020"}