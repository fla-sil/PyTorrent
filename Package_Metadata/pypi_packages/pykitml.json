{"info": {"author": "RainingComputers", "author_email": "vishnu.vish.shankar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "![pykitml logo](https://raw.githubusercontent.com/RainingComputers/pykitml/master/pykitml128.png)\n\n# pykitml (Python Kit for Machine Learning)\nMachine Learning library written in Python and NumPy.\n\n### Installation\n\n```\npython3 -m pip install pykitml\n```\n\n### Documentation\n\nhttps://pykitml.readthedocs.io/en/latest/\n\n### Models\n+ Linear Regression\n+ Logistic Regression\n+ Support Vector Machine\n+ Neural Network\n+ Nearest Neighbor\n+ Decision Tree\n+ Random Forest\n+ Naive Bayes\n+ K-Means Clustering\n+ Principle Component Analysis\n\n### Benchmark (Intel i5-6400, 4 cores @ 3.3GHz)\n\n| Model                                               | Dataset | Dataset Size | Time          |\n|-----------------------------------------------------|---------|--------------|---------------|\n| Logistic regression, 1500 epochs, 10 examples/batch | Adult   | 392106x13    | < 1 sec       |\n| 784x100x10 Network, 1200 epochs, 50 examples/batch  | MNIST   | 60000x784    | 35 sec        |\n| SVM, 1000 epochs, 20 examples/batch                 | MNIST   | 10000x784    | 39 sec        |\n| Decision Tree, 6 max-depth, 83 nodes                | Adult   | 392106x13    | 1 min 51 sec  |\n| Random forest, 9 max-depth, 100 trees               | Adult   | 392106x13    | 1 hour 35 min |\n\n# Demo (MNIST)\n### Training\n``` python\nimport os.path\n\nimport numpy as np\nimport pykitml as pk\nfrom pykitml.datasets import mnist\n\n# Download dataset\nif(not os.path.exists('mnist.pkl')): mnist.get()\n\n# Load dataset\ntraining_data, training_targets, testing_data, testing_targets = mnist.load()\n\n# Create a new neural network\ndigit_classifier = pk.NeuralNetwork([784, 100, 10])\n\n# Train it\ndigit_classifier.train(\n    training_data=training_data,\n    targets=training_targets, \n    batch_size=50, \n    epochs=1200, \n    optimizer=pk.Adam(learning_rate=0.012, decay_rate=0.95), \n    testing_data=testing_data, \n    testing_targets=testing_targets,\n    testing_freq=30,\n    decay_freq=15\n)\n\n# Save it\npk.save(digit_classifier, 'digit_classifier_network.pkl')\n\n# Show performance\naccuracy = digit_classifier.accuracy(training_data, training_targets)\nprint('Train Accuracy:', accuracy)        \naccuracy = digit_classifier.accuracy(testing_data, testing_targets)\nprint('Test Accuracy:', accuracy)\n\n# Plot performance graph\ndigit_classifier.plot_performance()\n\n# Show confusion matrix\ndigit_classifier.confusion_matrix(training_data, training_targets)\n```\n\n### Trying the model\n```python\nimport random\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pykitml as pk\nfrom pykitml.datasets import mnist\n\n# Load dataset\ninputs_train, outputs_train, inputs_test, outputs_test = mnist.load()\n\n# Use only first 10000\ninputs_train = inputs_train[:10000]\noutputs_train = outputs_train[:10000]\n\n# Load the trained network\nsvm_mnist_classifier = pk.load('svm_mnist_classifier.pkl')\n\n# Pick a random example from testing data\nindex = random.randint(0, 9000)\n\n# Show the test data and the label\nplt.imshow(inputs_train[index].reshape(28, 28))\nplt.show()\nprint('Label: ', outputs_train[index])\n\n# Transform the input\ninput_data = pk.gaussian_kernel(inputs_train[index], inputs_train)\n\n# Show prediction\nsvm_mnist_classifier.feed(input_data)\nmodel_output = svm_mnist_classifier.get_output_onehot()\nprint('Predicted: ', model_output)\n```\n\n### Performance Graph\n\n![Performance Graph](https://raw.githubusercontent.com/RainingComputers/pykitml/master/docs/demo_pics/neural_network_perf_graph.png)\n\n## Confusion Matrix\n\n![Confusion Matrix](https://raw.githubusercontent.com/RainingComputers/pykitml/master/docs/demo_pics/neural_network_confusion_matrix.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RainingComputers/pykitml", "keywords": "pykitml", "license": "", "maintainer": "", "maintainer_email": "", "name": "pykitml", "package_url": "https://pypi.org/project/pykitml/", "platform": "", "project_url": "https://pypi.org/project/pykitml/", "project_urls": {"Homepage": "https://github.com/RainingComputers/pykitml"}, "release_url": "https://pypi.org/project/pykitml/0.0.1/", "requires_dist": ["numpy", "matplotlib", "tqdm", "graphviz"], "requires_python": ">=3.5", "summary": "Machine Learning library written in Python and NumPy.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"pykitml logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b4ab45332aec2f0b39e9a811e40b3e43bd8be95/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5261696e696e67436f6d7075746572732f70796b69746d6c2f6d61737465722f70796b69746d6c3132382e706e67\"></p>\n<h1>pykitml (Python Kit for Machine Learning)</h1>\n<p>Machine Learning library written in Python and NumPy.</p>\n<h3>Installation</h3>\n<pre><code>python3 -m pip install pykitml\n</code></pre>\n<h3>Documentation</h3>\n<p><a href=\"https://pykitml.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pykitml.readthedocs.io/en/latest/</a></p>\n<h3>Models</h3>\n<ul>\n<li>Linear Regression</li>\n<li>Logistic Regression</li>\n<li>Support Vector Machine</li>\n<li>Neural Network</li>\n<li>Nearest Neighbor</li>\n<li>Decision Tree</li>\n<li>Random Forest</li>\n<li>Naive Bayes</li>\n<li>K-Means Clustering</li>\n<li>Principle Component Analysis</li>\n</ul>\n<h3>Benchmark (Intel i5-6400, 4 cores @ 3.3GHz)</h3>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>Dataset</th>\n<th>Dataset Size</th>\n<th>Time</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Logistic regression, 1500 epochs, 10 examples/batch</td>\n<td>Adult</td>\n<td>392106x13</td>\n<td>&lt; 1 sec</td>\n</tr>\n<tr>\n<td>784x100x10 Network, 1200 epochs, 50 examples/batch</td>\n<td>MNIST</td>\n<td>60000x784</td>\n<td>35 sec</td>\n</tr>\n<tr>\n<td>SVM, 1000 epochs, 20 examples/batch</td>\n<td>MNIST</td>\n<td>10000x784</td>\n<td>39 sec</td>\n</tr>\n<tr>\n<td>Decision Tree, 6 max-depth, 83 nodes</td>\n<td>Adult</td>\n<td>392106x13</td>\n<td>1 min 51 sec</td>\n</tr>\n<tr>\n<td>Random forest, 9 max-depth, 100 trees</td>\n<td>Adult</td>\n<td>392106x13</td>\n<td>1 hour 35 min</td>\n</tr></tbody></table>\n<h1>Demo (MNIST)</h1>\n<h3>Training</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os.path</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pykitml</span> <span class=\"k\">as</span> <span class=\"nn\">pk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pykitml.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">mnist</span>\n\n<span class=\"c1\"># Download dataset</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s1\">'mnist.pkl'</span><span class=\"p\">)):</span> <span class=\"n\">mnist</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Load dataset</span>\n<span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">training_targets</span><span class=\"p\">,</span> <span class=\"n\">testing_data</span><span class=\"p\">,</span> <span class=\"n\">testing_targets</span> <span class=\"o\">=</span> <span class=\"n\">mnist</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a new neural network</span>\n<span class=\"n\">digit_classifier</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">NeuralNetwork</span><span class=\"p\">([</span><span class=\"mi\">784</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Train it</span>\n<span class=\"n\">digit_classifier</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span>\n    <span class=\"n\">training_data</span><span class=\"o\">=</span><span class=\"n\">training_data</span><span class=\"p\">,</span>\n    <span class=\"n\">targets</span><span class=\"o\">=</span><span class=\"n\">training_targets</span><span class=\"p\">,</span> \n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> \n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">1200</span><span class=\"p\">,</span> \n    <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.012</span><span class=\"p\">,</span> <span class=\"n\">decay_rate</span><span class=\"o\">=</span><span class=\"mf\">0.95</span><span class=\"p\">),</span> \n    <span class=\"n\">testing_data</span><span class=\"o\">=</span><span class=\"n\">testing_data</span><span class=\"p\">,</span> \n    <span class=\"n\">testing_targets</span><span class=\"o\">=</span><span class=\"n\">testing_targets</span><span class=\"p\">,</span>\n    <span class=\"n\">testing_freq</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">decay_freq</span><span class=\"o\">=</span><span class=\"mi\">15</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Save it</span>\n<span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">digit_classifier</span><span class=\"p\">,</span> <span class=\"s1\">'digit_classifier_network.pkl'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show performance</span>\n<span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"n\">digit_classifier</span><span class=\"o\">.</span><span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">training_targets</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Train Accuracy:'</span><span class=\"p\">,</span> <span class=\"n\">accuracy</span><span class=\"p\">)</span>        \n<span class=\"n\">accuracy</span> <span class=\"o\">=</span> <span class=\"n\">digit_classifier</span><span class=\"o\">.</span><span class=\"n\">accuracy</span><span class=\"p\">(</span><span class=\"n\">testing_data</span><span class=\"p\">,</span> <span class=\"n\">testing_targets</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Test Accuracy:'</span><span class=\"p\">,</span> <span class=\"n\">accuracy</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot performance graph</span>\n<span class=\"n\">digit_classifier</span><span class=\"o\">.</span><span class=\"n\">plot_performance</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Show confusion matrix</span>\n<span class=\"n\">digit_classifier</span><span class=\"o\">.</span><span class=\"n\">confusion_matrix</span><span class=\"p\">(</span><span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">training_targets</span><span class=\"p\">)</span>\n</pre>\n<h3>Trying the model</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pykitml</span> <span class=\"k\">as</span> <span class=\"nn\">pk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pykitml.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">mnist</span>\n\n<span class=\"c1\"># Load dataset</span>\n<span class=\"n\">inputs_train</span><span class=\"p\">,</span> <span class=\"n\">outputs_train</span><span class=\"p\">,</span> <span class=\"n\">inputs_test</span><span class=\"p\">,</span> <span class=\"n\">outputs_test</span> <span class=\"o\">=</span> <span class=\"n\">mnist</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Use only first 10000</span>\n<span class=\"n\">inputs_train</span> <span class=\"o\">=</span> <span class=\"n\">inputs_train</span><span class=\"p\">[:</span><span class=\"mi\">10000</span><span class=\"p\">]</span>\n<span class=\"n\">outputs_train</span> <span class=\"o\">=</span> <span class=\"n\">outputs_train</span><span class=\"p\">[:</span><span class=\"mi\">10000</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Load the trained network</span>\n<span class=\"n\">svm_mnist_classifier</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'svm_mnist_classifier.pkl'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Pick a random example from testing data</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show the test data and the label</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">inputs_train</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Label: '</span><span class=\"p\">,</span> <span class=\"n\">outputs_train</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Transform the input</span>\n<span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">gaussian_kernel</span><span class=\"p\">(</span><span class=\"n\">inputs_train</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">],</span> <span class=\"n\">inputs_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Show prediction</span>\n<span class=\"n\">svm_mnist_classifier</span><span class=\"o\">.</span><span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">)</span>\n<span class=\"n\">model_output</span> <span class=\"o\">=</span> <span class=\"n\">svm_mnist_classifier</span><span class=\"o\">.</span><span class=\"n\">get_output_onehot</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Predicted: '</span><span class=\"p\">,</span> <span class=\"n\">model_output</span><span class=\"p\">)</span>\n</pre>\n<h3>Performance Graph</h3>\n<p><img alt=\"Performance Graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0ea595d1063d135de0d7aadaad8827e9b7af4ad/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5261696e696e67436f6d7075746572732f70796b69746d6c2f6d61737465722f646f63732f64656d6f5f706963732f6e657572616c5f6e6574776f726b5f706572665f67726170682e706e67\"></p>\n<h2>Confusion Matrix</h2>\n<p><img alt=\"Confusion Matrix\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2cf44b6928ce530b241d1b11a7d217719daf4e9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5261696e696e67436f6d7075746572732f70796b69746d6c2f6d61737465722f646f63732f64656d6f5f706963732f6e657572616c5f6e6574776f726b5f636f6e667573696f6e5f6d61747269782e706e67\"></p>\n\n          </div>"}, "last_serial": 6759631, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5098e77313182a3ac689b5baec5af01b", "sha256": "e5ea9da3e69c45bd7d6029538d2654b7cd90c57d17bf142a144087d591b3166e"}, "downloads": -1, "filename": "pykitml-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5098e77313182a3ac689b5baec5af01b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 46792, "upload_time": "2020-03-06T05:32:12", "upload_time_iso_8601": "2020-03-06T05:32:12.353979Z", "url": "https://files.pythonhosted.org/packages/91/5b/e690b122210f6cba9e74dcac0770bd8123557778b55c107ef6032dec7dac/pykitml-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5181223df288d29e3978e092ef276b8a", "sha256": "6fe8f752f9e090338e80e04a38376b9237f1603dbb29db6bcd3bdb5b1b884cd2"}, "downloads": -1, "filename": "pykitml-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5181223df288d29e3978e092ef276b8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34820, "upload_time": "2020-03-06T05:32:14", "upload_time_iso_8601": "2020-03-06T05:32:14.982030Z", "url": "https://files.pythonhosted.org/packages/39/5c/967552f7eeb81cc693b1c546d2a7fc90153350a8abdb7a829f38ed2742a9/pykitml-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5098e77313182a3ac689b5baec5af01b", "sha256": "e5ea9da3e69c45bd7d6029538d2654b7cd90c57d17bf142a144087d591b3166e"}, "downloads": -1, "filename": "pykitml-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5098e77313182a3ac689b5baec5af01b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 46792, "upload_time": "2020-03-06T05:32:12", "upload_time_iso_8601": "2020-03-06T05:32:12.353979Z", "url": "https://files.pythonhosted.org/packages/91/5b/e690b122210f6cba9e74dcac0770bd8123557778b55c107ef6032dec7dac/pykitml-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5181223df288d29e3978e092ef276b8a", "sha256": "6fe8f752f9e090338e80e04a38376b9237f1603dbb29db6bcd3bdb5b1b884cd2"}, "downloads": -1, "filename": "pykitml-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5181223df288d29e3978e092ef276b8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34820, "upload_time": "2020-03-06T05:32:14", "upload_time_iso_8601": "2020-03-06T05:32:14.982030Z", "url": "https://files.pythonhosted.org/packages/39/5c/967552f7eeb81cc693b1c546d2a7fc90153350a8abdb7a829f38ed2742a9/pykitml-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:30 2020"}