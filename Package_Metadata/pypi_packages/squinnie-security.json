{"info": {"author": "Matthias Gerstner", "author_email": "matthias.gerstner@suse.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 2.7", "Topic :: Security"], "description": "Squinnie\n========\n\nThis is Squinnie, a security oriented system scanning utility for Linux\nsystems. It is a terminal program that collects relevant low level\nsystem data from a local machine, remote host or SUSE Cloud instance.\nThe collected data is cached in an application specific format on disk\nand can be analysed and viewed according to command line parameters.\n\nThe purpose of Squinnie is to:\n\n-  identify possible security issues by inspecting privileges of running\n   processes, opened file descriptors, files on disk etc.\n-  allow to navigate through large data sets containing information\n   about a running system, for identifying possible interesting\n   interfaces and software parts that are worth further investigation.\n\nSquinnie allows to look into a running system in a black box fashion.\nThis can be helpful for reviewing large and complex systems where a code\nreview is not feasible.\n\nSquinnie can highlight certain spots of interest in its different view\nmodes (e.g.\u00a0world readable files, unusual capability settings or\nsimilar). This highlighting is currently done by way of terminal colors.\nThese are just pointers, however. Squinnie will not perform an\nautomatical security analysis like other tools do (e.g.\u00a0Lynis). Squinnie\nrather provides a large data collection and a means to navigate it that\nallows a security expert to interactively dig deeper and uncover\npossible security issues.\n\nInstallation\n------------\n\nThe additional python module requirements for this project can be found\nin the PIP requirements file ``requirements.txt``. These requirements\nare only for the host system that runs Squinnie. The target systems\nscanned by Squinnie don\u2019t require any additional Python modules. For\nthem the only requirement is that a fairly recent Python 2 interpreter\nis available.\n\nStructure\n---------\n\nThe main program is ``bin/squinnie``. It\u2019s concerned with two different\ngroups of command line arguments for scanning and viewing. Scanning is\nthe process of collecting data from one or more hosts. Viewing is the\nprocess of extracting relevant bits of data from an existing data\ncollection and displaying them in a human readable manner.\n\nData Collection Approach\n------------------------\n\nSquinnie collects a snapshot of data from the target host(s). Most of\nthis cannot be done in an atomic way i.e.\u00a0there can be some\ninconsistencies when e.g.\u00a0processes are spawned and ended or files\nappear and disappear. Thus the data collection is by design not a\nperfect information approach. It can make sense to collect snapshots of\ndata when the target system is in different states e.g.\u00a0directly after\nboot, with an active graphical user session or with certain server\nprocesses being active. This depends much on the target system\u2019s purpose\nand the desired coverage.\n\nSecurity Warning\n----------------\n\nBe aware that collecting the low level system information may be a\nsecurity risk in its own right, because sensitive data will be collected\nand made accessible in the context of a regular user account.\n\nThis scanner is targeted towards analysis of test systems, not for\nproduction environments. If you do want to scan a production system then\nyou should make sure that the resulting dumps are stored safely to avoid\nsecurity issues. Also note that the scanning process can hurt the target\nsystem\u2019s performance while it is taking place, because a lot of I/O is\ngenerated and the introspection of kernel data e.g.\u00a0via /proc and /sys\nis bad for caching and locking in the kernel.\n\nAt the moment only scans running as the root user are fully supported.\nBasically it would also possible to scan as a non-privileged user. The\ninformation available to the scanner will be very limited then, however.\n\nUsage\n-----\n\nPlease see the online help output produced by ``./squinnie -h``.\n\nSquinnie scans localhost by default, collecting relevant information\nthat will be cached and subsequently displayed, depending on the\nprovided command-line arguments.\n\n::\n\n   # Squinnie will cache collected data here\n   $ mkdir -p /tmp/my_test_scan/\n\n   # Main view\n   $ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan\n\n   # Show open file descriptors\n   $ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan --fd\n\n   # Show all files on the filesystem\n   $ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan/ --filesystem\n\nFor scanning localhost Squinnie will invoke ``sudo`` to gain root\nprivileges. For scanning remote systems ``ssh`` is utilized and either\ninteractive authentication or public key authentication will be required\nto access them, depending on the configuration of the remote SSH server.\n\nThe same data cache directory specified with ``-d`` can be used for\ndifferent hosts at the same time. Each host will be stored and looked up\nin a subdirectory based on its hostname.\n\nTo avoid having to specify the same parameters again and again there\nexists also an environment variable ``SQUINNIE_OPTS`` that can be used\nlike this:\n\n::\n\n   $ export SQUINNIE_OPTS=\"--mode ssh --entry root@host -d /tmp/my_test_scan\"\n   $ squinnie --filesystem\n\nAdvanced Usage\n--------------\n\nShow which processes run with which capabilities:\n\n::\n\n   $ squinnie -d /tmp/my_test_scan/ | grep CAP_\n\nShow which files on the filesystem have which capabilities set (usually\ne.g.\u00a0\\ ``/bin/ping``):\n\n::\n\n   $ squinnie -d /tmp/my_test_scan/ --filesystem --capabilities\n\nSUSE OpenStack Cloud 7\n----------------------\n\nTo scan many nodes of a SUSE OpenStack Cloud instance interactively,\nuse:\n\n::\n\n   $ squinnie -d /tmp/my_test_scan/ -m susecloud -e <ip-of-cloud-admin-node>\n\nBy default, all nodes are scanned, but only the results of the admin\nnode are shown. To show all, you can use:\n\n::\n\n   $ squinnie -d /tmp/my_test_scan/ -m susecloud -e <ip-of-cloud-admin-node> -a\n\nFuture Development\n------------------\n\nThis software is not yet feature complete. More security sensitive\ncontexts can be identified, additional relevant data collected and\nespecially a graphical display of the collected data are on the\nwhishlist.\n\nName Change\n-----------\n\nThis project was formerly known as \u201cHamster\u201d, but it turned out that a\nlarger open-source project under that name already exists. Therefore it\nwas renamed to Squinnie, one of the few rodent names not yet widely used\nin software projects.\n\nAuthors and Contact\n-------------------\n\nThis software is mainly developed by current and former employees of\nSUSE Linux:\n\n-  Benjamin Deuter\n-  Jannik Main\n-  Matthias Gerstner matthias.gerstner@suse.com (current maintainer)\n-  Sebastian Kaim\n\nFor questions please reach out to the current maintainer. Contributions\nand bug reports should go through the Github issue tracker / pull\nrequest interface.\n\nFor the purpose of secure communication (e.g.\u00a0privately reporting a\nsecurity issue) please contact the maintainer via GPG encrypted mail:\n\n-  matthias.gerstner@suse.com:\n\n   -  GPG Key-ID: 0x14C405C971923553\n   -  Fingerprint ``3559 3A99 9BF6 D633 F287 1370 BD61 7A00 1534 7DC0``\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgerstner/squinnie", "keywords": "openSUSE security scanner review audit", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "squinnie-security", "package_url": "https://pypi.org/project/squinnie-security/", "platform": "", "project_url": "https://pypi.org/project/squinnie-security/", "project_urls": {"Homepage": "https://github.com/mgerstner/squinnie"}, "release_url": "https://pypi.org/project/squinnie-security/0.5.1/", "requires_dist": ["execnet", "terminaltables", "termcolor"], "requires_python": "", "summary": "Squinnie is a security oriented system scanning utility for Linux", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is Squinnie, a security oriented system scanning utility for Linux\nsystems. It is a terminal program that collects relevant low level\nsystem data from a local machine, remote host or SUSE Cloud instance.\nThe collected data is cached in an application specific format on disk\nand can be analysed and viewed according to command line parameters.</p>\n<p>The purpose of Squinnie is to:</p>\n<ul>\n<li>identify possible security issues by inspecting privileges of running\nprocesses, opened file descriptors, files on disk etc.</li>\n<li>allow to navigate through large data sets containing information\nabout a running system, for identifying possible interesting\ninterfaces and software parts that are worth further investigation.</li>\n</ul>\n<p>Squinnie allows to look into a running system in a black box fashion.\nThis can be helpful for reviewing large and complex systems where a code\nreview is not feasible.</p>\n<p>Squinnie can highlight certain spots of interest in its different view\nmodes (e.g.\u00a0world readable files, unusual capability settings or\nsimilar). This highlighting is currently done by way of terminal colors.\nThese are just pointers, however. Squinnie will not perform an\nautomatical security analysis like other tools do (e.g.\u00a0Lynis). Squinnie\nrather provides a large data collection and a means to navigate it that\nallows a security expert to interactively dig deeper and uncover\npossible security issues.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The additional python module requirements for this project can be found\nin the PIP requirements file <tt>requirements.txt</tt>. These requirements\nare only for the host system that runs Squinnie. The target systems\nscanned by Squinnie don\u2019t require any additional Python modules. For\nthem the only requirement is that a fairly recent Python 2 interpreter\nis available.</p>\n</div>\n<div id=\"structure\">\n<h2>Structure</h2>\n<p>The main program is <tt>bin/squinnie</tt>. It\u2019s concerned with two different\ngroups of command line arguments for scanning and viewing. Scanning is\nthe process of collecting data from one or more hosts. Viewing is the\nprocess of extracting relevant bits of data from an existing data\ncollection and displaying them in a human readable manner.</p>\n</div>\n<div id=\"data-collection-approach\">\n<h2>Data Collection Approach</h2>\n<p>Squinnie collects a snapshot of data from the target host(s). Most of\nthis cannot be done in an atomic way i.e.\u00a0there can be some\ninconsistencies when e.g.\u00a0processes are spawned and ended or files\nappear and disappear. Thus the data collection is by design not a\nperfect information approach. It can make sense to collect snapshots of\ndata when the target system is in different states e.g.\u00a0directly after\nboot, with an active graphical user session or with certain server\nprocesses being active. This depends much on the target system\u2019s purpose\nand the desired coverage.</p>\n</div>\n<div id=\"security-warning\">\n<h2>Security Warning</h2>\n<p>Be aware that collecting the low level system information may be a\nsecurity risk in its own right, because sensitive data will be collected\nand made accessible in the context of a regular user account.</p>\n<p>This scanner is targeted towards analysis of test systems, not for\nproduction environments. If you do want to scan a production system then\nyou should make sure that the resulting dumps are stored safely to avoid\nsecurity issues. Also note that the scanning process can hurt the target\nsystem\u2019s performance while it is taking place, because a lot of I/O is\ngenerated and the introspection of kernel data e.g.\u00a0via /proc and /sys\nis bad for caching and locking in the kernel.</p>\n<p>At the moment only scans running as the root user are fully supported.\nBasically it would also possible to scan as a non-privileged user. The\ninformation available to the scanner will be very limited then, however.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Please see the online help output produced by <tt>./squinnie <span class=\"pre\">-h</span></tt>.</p>\n<p>Squinnie scans localhost by default, collecting relevant information\nthat will be cached and subsequently displayed, depending on the\nprovided command-line arguments.</p>\n<pre># Squinnie will cache collected data here\n$ mkdir -p /tmp/my_test_scan/\n\n# Main view\n$ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan\n\n# Show open file descriptors\n$ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan --fd\n\n# Show all files on the filesystem\n$ squinnie --mode ssh --entry root@host -d /tmp/my_test_scan/ --filesystem\n</pre>\n<p>For scanning localhost Squinnie will invoke <tt>sudo</tt> to gain root\nprivileges. For scanning remote systems <tt>ssh</tt> is utilized and either\ninteractive authentication or public key authentication will be required\nto access them, depending on the configuration of the remote SSH server.</p>\n<p>The same data cache directory specified with <tt><span class=\"pre\">-d</span></tt> can be used for\ndifferent hosts at the same time. Each host will be stored and looked up\nin a subdirectory based on its hostname.</p>\n<p>To avoid having to specify the same parameters again and again there\nexists also an environment variable <tt>SQUINNIE_OPTS</tt> that can be used\nlike this:</p>\n<pre>$ export SQUINNIE_OPTS=\"--mode ssh --entry root@host -d /tmp/my_test_scan\"\n$ squinnie --filesystem\n</pre>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced Usage</h2>\n<p>Show which processes run with which capabilities:</p>\n<pre>$ squinnie -d /tmp/my_test_scan/ | grep CAP_\n</pre>\n<p>Show which files on the filesystem have which capabilities set (usually\ne.g.\u00a0<tt>/bin/ping</tt>):</p>\n<pre>$ squinnie -d /tmp/my_test_scan/ --filesystem --capabilities\n</pre>\n</div>\n<div id=\"suse-openstack-cloud-7\">\n<h2>SUSE OpenStack Cloud 7</h2>\n<p>To scan many nodes of a SUSE OpenStack Cloud instance interactively,\nuse:</p>\n<pre>$ squinnie -d /tmp/my_test_scan/ -m susecloud -e &lt;ip-of-cloud-admin-node&gt;\n</pre>\n<p>By default, all nodes are scanned, but only the results of the admin\nnode are shown. To show all, you can use:</p>\n<pre>$ squinnie -d /tmp/my_test_scan/ -m susecloud -e &lt;ip-of-cloud-admin-node&gt; -a\n</pre>\n</div>\n<div id=\"future-development\">\n<h2>Future Development</h2>\n<p>This software is not yet feature complete. More security sensitive\ncontexts can be identified, additional relevant data collected and\nespecially a graphical display of the collected data are on the\nwhishlist.</p>\n</div>\n<div id=\"name-change\">\n<h2>Name Change</h2>\n<p>This project was formerly known as \u201cHamster\u201d, but it turned out that a\nlarger open-source project under that name already exists. Therefore it\nwas renamed to Squinnie, one of the few rodent names not yet widely used\nin software projects.</p>\n</div>\n<div id=\"authors-and-contact\">\n<h2>Authors and Contact</h2>\n<p>This software is mainly developed by current and former employees of\nSUSE Linux:</p>\n<ul>\n<li>Benjamin Deuter</li>\n<li>Jannik Main</li>\n<li>Matthias Gerstner <a href=\"mailto:matthias.gerstner%40suse.com\">matthias<span>.</span>gerstner<span>@</span>suse<span>.</span>com</a> (current maintainer)</li>\n<li>Sebastian Kaim</li>\n</ul>\n<p>For questions please reach out to the current maintainer. Contributions\nand bug reports should go through the Github issue tracker / pull\nrequest interface.</p>\n<p>For the purpose of secure communication (e.g.\u00a0privately reporting a\nsecurity issue) please contact the maintainer via GPG encrypted mail:</p>\n<ul>\n<li><a href=\"mailto:matthias.gerstner%40suse.com\">matthias<span>.</span>gerstner<span>@</span>suse<span>.</span>com</a>:<ul>\n<li>GPG Key-ID: 0x14C405C971923553</li>\n<li>Fingerprint <tt>3559 3A99 9BF6 D633 F287 1370 BD61 7A00 1534 7DC0</tt></li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6458278, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "f78e63f87d71dd38723861f50ca5bac2", "sha256": "fcf5a6c4a36b33f105e56dd02fe8579989a7f8a1f6fd7a0eca35e68ba429396c"}, "downloads": -1, "filename": "squinnie_security-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f78e63f87d71dd38723861f50ca5bac2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 83048, "upload_time": "2020-01-15T12:27:20", "upload_time_iso_8601": "2020-01-15T12:27:20.404530Z", "url": "https://files.pythonhosted.org/packages/59/96/81e9112dc21aded2068e06e21b59767b3a4693e62fd55530b2d08b198d71/squinnie_security-0.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee281d96ff9240d7e8717c36a8d75d8", "sha256": "a0bde23a8703ce3d6bec021c2a6957af594d624712d628f4f2d50b36f456bb0d"}, "downloads": -1, "filename": "squinnie-security-0.5.1.tar.gz", "has_sig": false, "md5_digest": "dee281d96ff9240d7e8717c36a8d75d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59894, "upload_time": "2020-01-15T12:27:23", "upload_time_iso_8601": "2020-01-15T12:27:23.223355Z", "url": "https://files.pythonhosted.org/packages/1e/ab/7be9bc83d18162d08db9f72ada1488d4a556c673caf846c43a874e906764/squinnie-security-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f78e63f87d71dd38723861f50ca5bac2", "sha256": "fcf5a6c4a36b33f105e56dd02fe8579989a7f8a1f6fd7a0eca35e68ba429396c"}, "downloads": -1, "filename": "squinnie_security-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f78e63f87d71dd38723861f50ca5bac2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 83048, "upload_time": "2020-01-15T12:27:20", "upload_time_iso_8601": "2020-01-15T12:27:20.404530Z", "url": "https://files.pythonhosted.org/packages/59/96/81e9112dc21aded2068e06e21b59767b3a4693e62fd55530b2d08b198d71/squinnie_security-0.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dee281d96ff9240d7e8717c36a8d75d8", "sha256": "a0bde23a8703ce3d6bec021c2a6957af594d624712d628f4f2d50b36f456bb0d"}, "downloads": -1, "filename": "squinnie-security-0.5.1.tar.gz", "has_sig": false, "md5_digest": "dee281d96ff9240d7e8717c36a8d75d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59894, "upload_time": "2020-01-15T12:27:23", "upload_time_iso_8601": "2020-01-15T12:27:23.223355Z", "url": "https://files.pythonhosted.org/packages/1e/ab/7be9bc83d18162d08db9f72ada1488d4a556c673caf846c43a874e906764/squinnie-security-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:24 2020"}