{"info": {"author": "Stefan Mavrodiev", "author_email": "stefan@olimex.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Home Automation", "Topic :: Software Development :: Embedded Systems"], "description": "pyA64\n=====\n\n|Build Status|\n\nDescription\n-----------\n\nThe package provide methods for controlling GPIO pins via memory access. It's written for\n`A64-OLinuXino <https://www.olimex.com/Products/OLinuXino/A64/A64-OLinuXino/open-source-hardware>`__,\nbut it can be used with other boards. In this case proper operation is\nnot guaranteed.\n\n**Notes**:\n\n\t* When using GPIO make sure that the desired gpio is not used by another periphery.\n\t* Using this library requires root access.\n\t* Currently (0.1.0) port L is not supported, because the memory cannot be accessed from userspace.\n\nGPIO methods\n------------\n\nThe following methods are available:\n\n* **init()** - Make initialization of the module. Must be called first.\n* **getcfg()** - Read current configuration of gpio.\n* **setcfg()** - Write configuration to gpio.\n* **input()** - Return current value of gpio.\n* **output()** - Set output value.\n* **pullup()** - Set pull-up/pull-down.\n\nThe available constants are:\n\n* **HIGH** - 1\n* **LOW** - 0\n* **INPUT** - 0\n* **OUPTUT** - 1\n* **PULLUP** - 1\n* **PULLDOWN** - 2\n\nThe gpio are named two ways:\n\n* By port name: PH0, PG2, PE10, etc. These can be imported from port module:\n\n.. code:: python\n\n\t>>> from pyA64.gpio import port\n\t>>> dir(port)\n\n* By connector name and pin number: gpio2p12, gpio3p8, lcdp18, uext1p3 and etc:\n\n.. code:: python\n\n\t>>> from pyA64.gpio import connector\n\t>>> dir(connector)\n\nGenerally these constants are just an offset in the memory from the base\nGPIO address, so they can be assigned to a number type variable.\n\n.. code:: python\n\n\t>>> led = port.PE17\n\t>>> print led\n\t226\n\nChangelog\n---------\n\n-  pyA64 0.1.0 (21 NOV 2017)\n\n\t- Initial release\n\n\n.. |Build Status| image:: https://travis-ci.org/OLIMEX/pyA64.svg?branch=master\n   :target: https://travis-ci.org/OLIMEX/pyA64", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.olimex.com/", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyA64", "package_url": "https://pypi.org/project/pyA64/", "platform": "", "project_url": "https://pypi.org/project/pyA64/", "project_urls": {"Homepage": "https://www.olimex.com/"}, "release_url": "https://pypi.org/project/pyA64/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Control GPIO ports on A64-OLinuXino", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/OLIMEX/pyA64\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0667c0d1a7d4834aabc84acb39e242802c432cd/68747470733a2f2f7472617669732d63692e6f72672f4f4c494d45582f70794136342e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>The package provide methods for controlling GPIO pins via memory access. It\u2019s written for\n<a href=\"https://www.olimex.com/Products/OLinuXino/A64/A64-OLinuXino/open-source-hardware\" rel=\"nofollow\">A64-OLinuXino</a>,\nbut it can be used with other boards. In this case proper operation is\nnot guaranteed.</p>\n<p><strong>Notes</strong>:</p>\n<blockquote>\n<ul>\n<li>When using GPIO make sure that the desired gpio is not used by another periphery.</li>\n<li>Using this library requires root access.</li>\n<li>Currently (0.1.0) port L is not supported, because the memory cannot be accessed from userspace.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"gpio-methods\">\n<h2>GPIO methods</h2>\n<p>The following methods are available:</p>\n<ul>\n<li><strong>init()</strong> - Make initialization of the module. Must be called first.</li>\n<li><strong>getcfg()</strong> - Read current configuration of gpio.</li>\n<li><strong>setcfg()</strong> - Write configuration to gpio.</li>\n<li><strong>input()</strong> - Return current value of gpio.</li>\n<li><strong>output()</strong> - Set output value.</li>\n<li><strong>pullup()</strong> - Set pull-up/pull-down.</li>\n</ul>\n<p>The available constants are:</p>\n<ul>\n<li><strong>HIGH</strong> - 1</li>\n<li><strong>LOW</strong> - 0</li>\n<li><strong>INPUT</strong> - 0</li>\n<li><strong>OUPTUT</strong> - 1</li>\n<li><strong>PULLUP</strong> - 1</li>\n<li><strong>PULLDOWN</strong> - 2</li>\n</ul>\n<p>The gpio are named two ways:</p>\n<ul>\n<li>By port name: PH0, PG2, PE10, etc. These can be imported from port module:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyA64.gpio</span> <span class=\"kn\">import</span> <span class=\"n\">port</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>By connector name and pin number: gpio2p12, gpio3p8, lcdp18, uext1p3 and etc:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyA64.gpio</span> <span class=\"kn\">import</span> <span class=\"n\">connector</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">connector</span><span class=\"p\">)</span>\n</pre>\n<p>Generally these constants are just an offset in the memory from the base\nGPIO address, so they can be assigned to a number type variable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">led</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">.</span><span class=\"n\">PE17</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">led</span>\n<span class=\"mi\">226</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li><p>pyA64 0.1.0 (21 NOV 2017)</p>\n<blockquote>\n<ul>\n<li>Initial release</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3352144, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2fd03ed59beb10f7e418795fdce73cab", "sha256": "47a203ed3cc73211041041520d30306930d03d765b168903ea2069b9ee0dc4bb"}, "downloads": -1, "filename": "pyA64-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2fd03ed59beb10f7e418795fdce73cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7311, "upload_time": "2017-11-21T13:59:31", "upload_time_iso_8601": "2017-11-21T13:59:31.664499Z", "url": "https://files.pythonhosted.org/packages/29/a8/e9ce35c362e6340713bbbffcf260c4ffca87b404d9811e5d400f33e6c5c8/pyA64-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fd03ed59beb10f7e418795fdce73cab", "sha256": "47a203ed3cc73211041041520d30306930d03d765b168903ea2069b9ee0dc4bb"}, "downloads": -1, "filename": "pyA64-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2fd03ed59beb10f7e418795fdce73cab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7311, "upload_time": "2017-11-21T13:59:31", "upload_time_iso_8601": "2017-11-21T13:59:31.664499Z", "url": "https://files.pythonhosted.org/packages/29/a8/e9ce35c362e6340713bbbffcf260c4ffca87b404d9811e5d400f33e6c5c8/pyA64-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:07 2020"}