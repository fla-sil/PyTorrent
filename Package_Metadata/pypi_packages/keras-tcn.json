{"info": {"author": "Philippe Remy", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Keras TCN\n\n\n[![Downloads](https://pepy.tech/badge/keras-tcn)](https://pepy.tech/project/keras-tcn)\n[![Downloads](https://pepy.tech/badge/keras-tcn/month)](https://pepy.tech/project/keras-tcn)\n```bash\npip install keras-tcn\n```\n\nhttps://arxiv.org/pdf/1803.01271.pdf\n\n*Keras Temporal Convolutional Network*\n\n   * [Keras TCN](#keras-tcn)\n      * [Why Temporal Convolutional Network?](#why-temporal-convolutional-network)\n      * [API](#api)\n         * [Arguments](#arguments)\n         * [Input shape](#input-shape)\n         * [Output shape](#output-shape)\n         * [Supported task types](#supported-task-types)\n         * [Receptive field](#receptive-field)\n         * [Non-causal TCN](#non-causal-tcn)\n      * [Installation (Python 3)](#installation-python-3)\n      * [Run](#run)\n      * [Reproducible results](#reproducible-results)\n      * [Tasks](#tasks)\n         * [Adding Task](#adding-task)\n            * [Explanation](#explanation)\n            * [Implementation results](#implementation-results)\n         * [Copy Memory Task](#copy-memory-task)\n            * [Explanation](#explanation-1)\n            * [Implementation results (first epochs)](#implementation-results-first-epochs)\n         * [Sequential MNIST](#sequential-mnist)\n            * [Explanation](#explanation-2)\n            * [Implementation results](#implementation-results-1)\n      * [Testing](#testing)\n      * [References](#references)\n      * [Related](#related)\n\n## Why Temporal Convolutional Network?\n\n- TCNs exhibit longer memory than recurrent architectures with the same capacity.\n- Constantly performs better than LSTM/GRU architectures on a vast range of tasks (Seq. MNIST, Adding Problem, Copy Memory, Word-level PTB...).\n- Parallelism, flexible receptive field size, stable gradients, low memory requirements for training, variable length inputs...\n\n<p align=\"center\">\n  <img src=\"misc/Dilated_Conv.png\">\n  <b>Visualization of a stack of dilated causal convolutional layers (Wavenet, 2016)</b><br><br>\n</p>\n\n## API\n\nThe usual way is to import the TCN layer and use it inside a Keras model. An example is provided below for a regression task (cf. `tasks/` for other examples):\n\n```python\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import Input, Model\n\nfrom tcn import TCN, tcn_full_summary\n\nbatch_size, timesteps, input_dim = None, 20, 1\n\n\ndef get_x_y(size=1000):\n    import numpy as np\n    pos_indices = np.random.choice(size, size=int(size // 2), replace=False)\n    x_train = np.zeros(shape=(size, timesteps, 1))\n    y_train = np.zeros(shape=(size, 1))\n    x_train[pos_indices, 0] = 1.0\n    y_train[pos_indices, 0] = 1.0\n    return x_train, y_train\n\n\ni = Input(batch_shape=(batch_size, timesteps, input_dim))\n\no = TCN(return_sequences=False)(i)  # The TCN layers are here.\no = Dense(1)(o)\n\nm = Model(inputs=[i], outputs=[o])\nm.compile(optimizer='adam', loss='mse')\n\ntcn_full_summary(m, expand_residual_blocks=False)\n\nx, y = get_x_y()\nm.fit(x, y, epochs=10, validation_split=0.2)\n```\n\nIn the example above, TCNs can also be stacked together, like this:\n\n```python\no = TCN(return_sequences=True)(i)\no = TCN(return_sequences=False)(o)\n```\n\nA ready-to-use TCN model can be used that way (cf. `tasks/` for the full code):\n\n```python\nfrom tcn import compiled_tcn\n\nmodel = compiled_tcn(...)\nmodel.fit(x, y) # Keras model.\n```\n\n### Arguments\n\n`TCN(nb_filters=64, kernel_size=2, nb_stacks=1, dilations=[1, 2, 4, 8, 16, 32], padding='causal', use_skip_connections=True, dropout_rate=0.0, return_sequences=True, activation='linear', kernel_initializer='he_normal', use_batch_norm=False, **kwargs)`\n\n- `nb_filters`: Integer. The number of filters to use in the convolutional layers. Would be similar to `units` for LSTM.\n- `kernel_size`: Integer. The size of the kernel to use in each convolutional layer.\n- `dilations`: List. A dilation list. Example is: [1, 2, 4, 8, 16, 32, 64].\n- `nb_stacks`: Integer. The number of stacks of residual blocks to use.\n- `padding`: String. The padding to use in the convolutions. 'causal' for a causal network (as in the original implementation) and 'same' for a non-causal network.\n- `use_skip_connections`: Boolean. If we want to add skip connections from input to each residual block.\n- `return_sequences`: Boolean. Whether to return the last output in the output sequence, or the full sequence.\n- `dropout_rate`: Float between 0 and 1. Fraction of the input units to drop.\n- `activation`: The activation used in the residual blocks o = activation(x + F(x)).\n- `kernel_initializer`: Initializer for the kernel weights matrix (Conv1D).\n- `use_batch_norm`: Whether to use batch normalization in the residual layers or not.\n- `kwargs`: Any other arguments for configuring parent class Layer. For example \"name=str\", Name of the model. Use unique names when using multiple TCN.\n\n### Input shape\n\n3D tensor with shape `(batch_size, timesteps, input_dim)`.\n\n`timesteps` can be None. This can be useful if each sequence is of a different length: [Multiple Length Sequence Example](tasks/multi_length_sequences.py).\n\n### Output shape\n\n- if `return_sequences=True`: 3D tensor with shape `(batch_size, timesteps, nb_filters)`.\n- if `return_sequences=False`: 2D tensor with shape `(batch_size, nb_filters)`.\n\n### Supported task types\n\n- Regression (Many to one) e.g. adding problem\n- Classification (Many to many) e.g. copy memory task\n- Classification (Many to one) e.g. sequential mnist task\n\nFor a Many to Many regression, a cheap fix for now is to change the [number of units of the final Dense layer](https://github.com/philipperemy/keras-tcn/blob/8151b4a87f906fd856fd1c113c48392d542d0994/tcn/tcn.py#L90).\n\n### Receptive field\n\n- Receptive field = **nb_stacks_of_residuals_blocks * kernel_size * last_dilation**.\n- If a TCN has only one stack of residual blocks with a kernel size of 2 and dilations [1, 2, 4, 8], its receptive field is 2 * 1 * 8 = 16. The image below illustrates it:\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/40159126/41830054-10e56fda-7871-11e8-8591-4fa46680c17f.png\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 1 block</b><br><br>\n</p>\n\n- If the TCN has now 2 stacks of residual blocks, wou would get the situation below, that is, an increase in the receptive field to 32:\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/40159126/41830618-a8f82a8a-7874-11e8-9d4f-2ebb70a31465.jpg\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 2 blocks</b><br><br>\n</p>\n\n\n- If we increased the number of stacks to 3, the size of the receptive field would increase again, such as below:\n\n<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/40159126/41830628-ae6e73d4-7874-11e8-8ecd-cea37efa33f1.jpg\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 3 blocks</b><br><br>\n</p>\n\nThanks to [@alextheseal](https://github.com/alextheseal) for providing such visuals.\n\n### Non-causal TCN\n\nMaking the TCN architecture non-causal allows it to take the future into consideration to do its prediction as shown in the figure below.\n\nHowever, it is not anymore suitable for real-time applications.\n\n<p align=\"center\">\n  <img src=\"misc/Non_Causal.png\">\n  <b>Non-Causal TCN - ks = 3, dilations = [1, 2, 4, 8], 1 block</b><br><br>\n</p>\n\nTo use a non-causal TCN, specify `padding='valid'` or `padding='same'` when initializing the TCN layers.\n\nSpecial thanks to: [@qlemaire22](https://github.com/qlemaire22)\n\n## Installation (Python 3)\n\n```bash\ngit clone git@github.com:philipperemy/keras-tcn.git\ncd keras-tcn\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt # change to tensorflow if you dont have a gpu.\npip install . --upgrade # install it as a package.\n```\n\nNote: Only compatible with Python 3 at the moment. Should be almost compatible with python 2.\n\n## Run\n\nOnce `keras-tcn` is installed as a package, you can take a glimpse of what's possible to do with TCNs. Some tasks examples are  available in the repository for this purpose:\n\n```bash\ncd adding_problem/\npython main.py # run adding problem task\n\ncd copy_memory/\npython main.py # run copy memory task\n\ncd mnist_pixel/\npython main.py # run sequential mnist pixel task\n```\n\n## Reproducible results\n\nReproducible results are possible on (NVIDIA) GPUs using the [tensorflow-determinism](https://github.com/NVIDIA/tensorflow-determinism) library. It was tested with keras-tcn by @lingdoc and he got reproducible results.\n\n## Tasks\n\n### Adding Task\n\nThe task consists of feeding a large array of decimal numbers to the network, along with a boolean array of the same length. The objective is to sum the two decimals where the boolean array contain the two 1s.\n\n#### Explanation\n\n<p align=\"center\">\n  <img src=\"misc/Adding_Task.png\">\n  <b>Adding Problem Task</b><br><br>\n</p>\n\n#### Implementation results\n\nThe model takes time to learn this task. It's symbolized by a very long plateau (could take ~8 epochs on some runs).\n\n```\n200000/200000 [==============================] - 293s 1ms/step - loss: 0.1731 - val_loss: 0.1662\n200000/200000 [==============================] - 289s 1ms/step - loss: 0.1675 - val_loss: 0.1665\n200000/200000 [==============================] - 287s 1ms/step - loss: 0.1670 - val_loss: 0.1665\n200000/200000 [==============================] - 288s 1ms/step - loss: 0.1668 - val_loss: 0.1669\n200000/200000 [==============================] - 285s 1ms/step - loss: 0.1085 - val_loss: 0.0019\n200000/200000 [==============================] - 285s 1ms/step - loss: 0.0011 - val_loss: 4.1667e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 6.0470e-04 - val_loss: 6.7708e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 4.3099e-04 - val_loss: 7.3898e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 3.9102e-04 - val_loss: 1.8727e-04\n200000/200000 [==============================] - 280s 1ms/step - loss: 3.1040e-04 - val_loss: 0.0010\n200000/200000 [==============================] - 281s 1ms/step - loss: 3.1166e-04 - val_loss: 2.2333e-04\n200000/200000 [==============================] - 281s 1ms/step - loss: 2.8046e-04 - val_loss: 1.5194e-04\n```\n\n### Copy Memory Task\n\nThe copy memory consists of a very large array:\n- At the beginning, there's the vector x of length N. This is the vector to copy.\n- At the end, N+1 9s are present. The first 9 is seen as a delimiter.\n- In the middle, only 0s are there.\n\nThe idea is to copy the content of the vector x to the end of the large array. The task is made sufficiently complex by increasing the number of 0s in the middle.\n\n#### Explanation\n\n<p align=\"center\">\n  <img src=\"misc/Copy_Memory_Task.png\">\n  <b>Copy Memory Task</b><br><br>\n</p>\n\n#### Implementation results (first epochs)\n\n```\n30000/30000 [==============================] - 30s 1ms/step - loss: 0.1174 - acc: 0.9586 - val_loss: 0.0370 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 874us/step - loss: 0.0367 - acc: 0.9859 - val_loss: 0.0363 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 852us/step - loss: 0.0361 - acc: 0.9859 - val_loss: 0.0358 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 872us/step - loss: 0.0355 - acc: 0.9859 - val_loss: 0.0349 - val_acc: 0.9859\n30000/30000 [==============================] - 25s 850us/step - loss: 0.0339 - acc: 0.9864 - val_loss: 0.0291 - val_acc: 0.9881\n30000/30000 [==============================] - 26s 856us/step - loss: 0.0235 - acc: 0.9896 - val_loss: 0.0159 - val_acc: 0.9944\n30000/30000 [==============================] - 26s 872us/step - loss: 0.0169 - acc: 0.9929 - val_loss: 0.0125 - val_acc: 0.9966\n```\n\n### Sequential MNIST\n\n#### Explanation\n\nThe idea here is to consider MNIST images as 1-D sequences and feed them to the network. This task is particularly hard because sequences are 28*28 = 784 elements. In order to classify correctly, the network has to remember all the sequence. Usual LSTM are unable to perform well on this task.\n\n<p align=\"center\">\n  <img src=\"misc/Sequential_MNIST_Task.png\">\n  <b>Sequential MNIST</b><br><br>\n</p>\n\n#### Implementation results\n\n```\n60000/60000 [==============================] - 118s 2ms/step - loss: 0.2348 - acc: 0.9265 - val_loss: 0.1308 - val_acc: 0.9579\n60000/60000 [==============================] - 116s 2ms/step - loss: 0.0973 - acc: 0.9698 - val_loss: 0.0645 - val_acc: 0.9798\n[...]\n60000/60000 [==============================] - 112s 2ms/step - loss: 0.0075 - acc: 0.9978 - val_loss: 0.0547 - val_acc: 0.9894\n60000/60000 [==============================] - 111s 2ms/step - loss: 0.0093 - acc: 0.9968 - val_loss: 0.0585 - val_acc: 0.9895\n```\n\n## Testing\n\nTesting is based on Tox.\n\n```\npip install tox\ntox\n```\n\n## References\n- https://github.com/locuslab/TCN/ (TCN for Pytorch)\n- https://arxiv.org/pdf/1803.01271.pdf (An Empirical Evaluation of Generic Convolutional and Recurrent Networks\nfor Sequence Modeling)\n- https://arxiv.org/pdf/1609.03499.pdf (Original Wavenet paper)\n\n## Related\n- https://github.com/Baichenjia/Tensorflow-TCN (Tensorflow Eager implementation of TCNs)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keras-tcn", "package_url": "https://pypi.org/project/keras-tcn/", "platform": "", "project_url": "https://pypi.org/project/keras-tcn/", "project_urls": null, "release_url": "https://pypi.org/project/keras-tcn/3.1.0/", "requires_dist": ["numpy (>=1.18.1)", "keras (>=2.3.1)", "gast (==0.2.2)"], "requires_python": "", "summary": "Keras TCN", "version": "3.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keras TCN</h1>\n<p><a href=\"https://pepy.tech/project/keras-tcn\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe479647a8808fcb6aafb12dd7c821a352f35c1a/68747470733a2f2f706570792e746563682f62616467652f6b657261732d74636e\"></a>\n<a href=\"https://pepy.tech/project/keras-tcn\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0ab15ef9208bf1c0da1694a27068b95ad040a30/68747470733a2f2f706570792e746563682f62616467652f6b657261732d74636e2f6d6f6e7468\"></a></p>\n<pre>pip install keras-tcn\n</pre>\n<p><a href=\"https://arxiv.org/pdf/1803.01271.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1803.01271.pdf</a></p>\n<p><em>Keras Temporal Convolutional Network</em></p>\n<ul>\n<li><a href=\"#keras-tcn\" rel=\"nofollow\">Keras TCN</a>\n<ul>\n<li><a href=\"#why-temporal-convolutional-network\" rel=\"nofollow\">Why Temporal Convolutional Network?</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a>\n<ul>\n<li><a href=\"#arguments\" rel=\"nofollow\">Arguments</a></li>\n<li><a href=\"#input-shape\" rel=\"nofollow\">Input shape</a></li>\n<li><a href=\"#output-shape\" rel=\"nofollow\">Output shape</a></li>\n<li><a href=\"#supported-task-types\" rel=\"nofollow\">Supported task types</a></li>\n<li><a href=\"#receptive-field\" rel=\"nofollow\">Receptive field</a></li>\n<li><a href=\"#non-causal-tcn\" rel=\"nofollow\">Non-causal TCN</a></li>\n</ul>\n</li>\n<li><a href=\"#installation-python-3\" rel=\"nofollow\">Installation (Python 3)</a></li>\n<li><a href=\"#run\" rel=\"nofollow\">Run</a></li>\n<li><a href=\"#reproducible-results\" rel=\"nofollow\">Reproducible results</a></li>\n<li><a href=\"#tasks\" rel=\"nofollow\">Tasks</a>\n<ul>\n<li><a href=\"#adding-task\" rel=\"nofollow\">Adding Task</a>\n<ul>\n<li><a href=\"#explanation\" rel=\"nofollow\">Explanation</a></li>\n<li><a href=\"#implementation-results\" rel=\"nofollow\">Implementation results</a></li>\n</ul>\n</li>\n<li><a href=\"#copy-memory-task\" rel=\"nofollow\">Copy Memory Task</a>\n<ul>\n<li><a href=\"#explanation-1\" rel=\"nofollow\">Explanation</a></li>\n<li><a href=\"#implementation-results-first-epochs\" rel=\"nofollow\">Implementation results (first epochs)</a></li>\n</ul>\n</li>\n<li><a href=\"#sequential-mnist\" rel=\"nofollow\">Sequential MNIST</a>\n<ul>\n<li><a href=\"#explanation-2\" rel=\"nofollow\">Explanation</a></li>\n<li><a href=\"#implementation-results-1\" rel=\"nofollow\">Implementation results</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#references\" rel=\"nofollow\">References</a></li>\n<li><a href=\"#related\" rel=\"nofollow\">Related</a></li>\n</ul>\n</li>\n</ul>\n<h2>Why Temporal Convolutional Network?</h2>\n<ul>\n<li>TCNs exhibit longer memory than recurrent architectures with the same capacity.</li>\n<li>Constantly performs better than LSTM/GRU architectures on a vast range of tasks (Seq. MNIST, Adding Problem, Copy Memory, Word-level PTB...).</li>\n<li>Parallelism, flexible receptive field size, stable gradients, low memory requirements for training, variable length inputs...</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa6feac9ca4f9f5bf1617c52227714fe5d95c496/6d6973632f44696c617465645f436f6e762e706e67\">\n  <b>Visualization of a stack of dilated causal convolutional layers (Wavenet, 2016)</b><br><br>\n</p>\n<h2>API</h2>\n<p>The usual way is to import the TCN layer and use it inside a Keras model. An example is provided below for a regression task (cf. <code>tasks/</code> for other examples):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Dense</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras</span> <span class=\"kn\">import</span> <span class=\"n\">Input</span><span class=\"p\">,</span> <span class=\"n\">Model</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tcn</span> <span class=\"kn\">import</span> <span class=\"n\">TCN</span><span class=\"p\">,</span> <span class=\"n\">tcn_full_summary</span>\n\n<span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">timesteps</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_x_y</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"n\">pos_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">x_train</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">timesteps</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"n\">x_train</span><span class=\"p\">[</span><span class=\"n\">pos_indices</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n    <span class=\"n\">y_train</span><span class=\"p\">[</span><span class=\"n\">pos_indices</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n    <span class=\"k\">return</span> <span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span>\n\n\n<span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">batch_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"n\">timesteps</span><span class=\"p\">,</span> <span class=\"n\">input_dim</span><span class=\"p\">))</span>\n\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">TCN</span><span class=\"p\">(</span><span class=\"n\">return_sequences</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)(</span><span class=\"n\">i</span><span class=\"p\">)</span>  <span class=\"c1\"># The TCN layers are here.</span>\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">o</span><span class=\"p\">])</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'adam'</span><span class=\"p\">,</span> <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'mse'</span><span class=\"p\">)</span>\n\n<span class=\"n\">tcn_full_summary</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">expand_residual_blocks</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">get_x_y</span><span class=\"p\">()</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">validation_split</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</pre>\n<p>In the example above, TCNs can also be stacked together, like this:</p>\n<pre><span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">TCN</span><span class=\"p\">(</span><span class=\"n\">return_sequences</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">TCN</span><span class=\"p\">(</span><span class=\"n\">return_sequences</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</pre>\n<p>A ready-to-use TCN model can be used that way (cf. <code>tasks/</code> for the full code):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tcn</span> <span class=\"kn\">import</span> <span class=\"n\">compiled_tcn</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">compiled_tcn</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"c1\"># Keras model.</span>\n</pre>\n<h3>Arguments</h3>\n<p><code>TCN(nb_filters=64, kernel_size=2, nb_stacks=1, dilations=[1, 2, 4, 8, 16, 32], padding='causal', use_skip_connections=True, dropout_rate=0.0, return_sequences=True, activation='linear', kernel_initializer='he_normal', use_batch_norm=False, **kwargs)</code></p>\n<ul>\n<li><code>nb_filters</code>: Integer. The number of filters to use in the convolutional layers. Would be similar to <code>units</code> for LSTM.</li>\n<li><code>kernel_size</code>: Integer. The size of the kernel to use in each convolutional layer.</li>\n<li><code>dilations</code>: List. A dilation list. Example is: [1, 2, 4, 8, 16, 32, 64].</li>\n<li><code>nb_stacks</code>: Integer. The number of stacks of residual blocks to use.</li>\n<li><code>padding</code>: String. The padding to use in the convolutions. 'causal' for a causal network (as in the original implementation) and 'same' for a non-causal network.</li>\n<li><code>use_skip_connections</code>: Boolean. If we want to add skip connections from input to each residual block.</li>\n<li><code>return_sequences</code>: Boolean. Whether to return the last output in the output sequence, or the full sequence.</li>\n<li><code>dropout_rate</code>: Float between 0 and 1. Fraction of the input units to drop.</li>\n<li><code>activation</code>: The activation used in the residual blocks o = activation(x + F(x)).</li>\n<li><code>kernel_initializer</code>: Initializer for the kernel weights matrix (Conv1D).</li>\n<li><code>use_batch_norm</code>: Whether to use batch normalization in the residual layers or not.</li>\n<li><code>kwargs</code>: Any other arguments for configuring parent class Layer. For example \"name=str\", Name of the model. Use unique names when using multiple TCN.</li>\n</ul>\n<h3>Input shape</h3>\n<p>3D tensor with shape <code>(batch_size, timesteps, input_dim)</code>.</p>\n<p><code>timesteps</code> can be None. This can be useful if each sequence is of a different length: <a href=\"tasks/multi_length_sequences.py\" rel=\"nofollow\">Multiple Length Sequence Example</a>.</p>\n<h3>Output shape</h3>\n<ul>\n<li>if <code>return_sequences=True</code>: 3D tensor with shape <code>(batch_size, timesteps, nb_filters)</code>.</li>\n<li>if <code>return_sequences=False</code>: 2D tensor with shape <code>(batch_size, nb_filters)</code>.</li>\n</ul>\n<h3>Supported task types</h3>\n<ul>\n<li>Regression (Many to one) e.g. adding problem</li>\n<li>Classification (Many to many) e.g. copy memory task</li>\n<li>Classification (Many to one) e.g. sequential mnist task</li>\n</ul>\n<p>For a Many to Many regression, a cheap fix for now is to change the <a href=\"https://github.com/philipperemy/keras-tcn/blob/8151b4a87f906fd856fd1c113c48392d542d0994/tcn/tcn.py#L90\" rel=\"nofollow\">number of units of the final Dense layer</a>.</p>\n<h3>Receptive field</h3>\n<ul>\n<li>Receptive field = <strong>nb_stacks_of_residuals_blocks * kernel_size * last_dilation</strong>.</li>\n<li>If a TCN has only one stack of residual blocks with a kernel size of 2 and dilations [1, 2, 4, 8], its receptive field is 2 * 1 * 8 = 16. The image below illustrates it:</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38fc275c2508b9e5ca4e3190286f90bd6248a3a9/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34303135393132362f34313833303035342d31306535366664612d373837312d313165382d383539312d3466613436363830633137662e706e67\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 1 block</b><br><br>\n</p>\n<ul>\n<li>If the TCN has now 2 stacks of residual blocks, wou would get the situation below, that is, an increase in the receptive field to 32:</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a25c94b38b17216478a904d7a02eb2dbd193380/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34303135393132362f34313833303631382d61386638326138612d373837342d313165382d396434662d3265626237306133313436352e6a7067\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 2 blocks</b><br><br>\n</p>\n<ul>\n<li>If we increased the number of stacks to 3, the size of the receptive field would increase again, such as below:</li>\n</ul>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/213164779da58edadd12f5b88798b5bb3da7b508/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34303135393132362f34313833303632382d61653665373364342d373837342d313165382d386563642d6365613337656661333366312e6a7067\">\n  <b>ks = 2, dilations = [1, 2, 4, 8], 3 blocks</b><br><br>\n</p>\n<p>Thanks to <a href=\"https://github.com/alextheseal\" rel=\"nofollow\">@alextheseal</a> for providing such visuals.</p>\n<h3>Non-causal TCN</h3>\n<p>Making the TCN architecture non-causal allows it to take the future into consideration to do its prediction as shown in the figure below.</p>\n<p>However, it is not anymore suitable for real-time applications.</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3c0d94edd83b3cdaee4d96bff2dc7ab31ef2582/6d6973632f4e6f6e5f43617573616c2e706e67\">\n  <b>Non-Causal TCN - ks = 3, dilations = [1, 2, 4, 8], 1 block</b><br><br>\n</p>\n<p>To use a non-causal TCN, specify <code>padding='valid'</code> or <code>padding='same'</code> when initializing the TCN layers.</p>\n<p>Special thanks to: <a href=\"https://github.com/qlemaire22\" rel=\"nofollow\">@qlemaire22</a></p>\n<h2>Installation (Python 3)</h2>\n<pre>git clone git@github.com:philipperemy/keras-tcn.git\n<span class=\"nb\">cd</span> keras-tcn\nvirtualenv -p python3.6 venv\n<span class=\"nb\">source</span> venv/bin/activate\npip install -r requirements.txt <span class=\"c1\"># change to tensorflow if you dont have a gpu.</span>\npip install . --upgrade <span class=\"c1\"># install it as a package.</span>\n</pre>\n<p>Note: Only compatible with Python 3 at the moment. Should be almost compatible with python 2.</p>\n<h2>Run</h2>\n<p>Once <code>keras-tcn</code> is installed as a package, you can take a glimpse of what's possible to do with TCNs. Some tasks examples are  available in the repository for this purpose:</p>\n<pre><span class=\"nb\">cd</span> adding_problem/\npython main.py <span class=\"c1\"># run adding problem task</span>\n\n<span class=\"nb\">cd</span> copy_memory/\npython main.py <span class=\"c1\"># run copy memory task</span>\n\n<span class=\"nb\">cd</span> mnist_pixel/\npython main.py <span class=\"c1\"># run sequential mnist pixel task</span>\n</pre>\n<h2>Reproducible results</h2>\n<p>Reproducible results are possible on (NVIDIA) GPUs using the <a href=\"https://github.com/NVIDIA/tensorflow-determinism\" rel=\"nofollow\">tensorflow-determinism</a> library. It was tested with keras-tcn by @lingdoc and he got reproducible results.</p>\n<h2>Tasks</h2>\n<h3>Adding Task</h3>\n<p>The task consists of feeding a large array of decimal numbers to the network, along with a boolean array of the same length. The objective is to sum the two decimals where the boolean array contain the two 1s.</p>\n<h4>Explanation</h4>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/093760c4c8bc70dfdf8a37d4a2c9ace002d789d7/6d6973632f416464696e675f5461736b2e706e67\">\n  <b>Adding Problem Task</b><br><br>\n</p>\n<h4>Implementation results</h4>\n<p>The model takes time to learn this task. It's symbolized by a very long plateau (could take ~8 epochs on some runs).</p>\n<pre><code>200000/200000 [==============================] - 293s 1ms/step - loss: 0.1731 - val_loss: 0.1662\n200000/200000 [==============================] - 289s 1ms/step - loss: 0.1675 - val_loss: 0.1665\n200000/200000 [==============================] - 287s 1ms/step - loss: 0.1670 - val_loss: 0.1665\n200000/200000 [==============================] - 288s 1ms/step - loss: 0.1668 - val_loss: 0.1669\n200000/200000 [==============================] - 285s 1ms/step - loss: 0.1085 - val_loss: 0.0019\n200000/200000 [==============================] - 285s 1ms/step - loss: 0.0011 - val_loss: 4.1667e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 6.0470e-04 - val_loss: 6.7708e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 4.3099e-04 - val_loss: 7.3898e-04\n200000/200000 [==============================] - 282s 1ms/step - loss: 3.9102e-04 - val_loss: 1.8727e-04\n200000/200000 [==============================] - 280s 1ms/step - loss: 3.1040e-04 - val_loss: 0.0010\n200000/200000 [==============================] - 281s 1ms/step - loss: 3.1166e-04 - val_loss: 2.2333e-04\n200000/200000 [==============================] - 281s 1ms/step - loss: 2.8046e-04 - val_loss: 1.5194e-04\n</code></pre>\n<h3>Copy Memory Task</h3>\n<p>The copy memory consists of a very large array:</p>\n<ul>\n<li>At the beginning, there's the vector x of length N. This is the vector to copy.</li>\n<li>At the end, N+1 9s are present. The first 9 is seen as a delimiter.</li>\n<li>In the middle, only 0s are there.</li>\n</ul>\n<p>The idea is to copy the content of the vector x to the end of the large array. The task is made sufficiently complex by increasing the number of 0s in the middle.</p>\n<h4>Explanation</h4>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b72ea13234956b7663bef8ac68262fa0c0457db3/6d6973632f436f70795f4d656d6f72795f5461736b2e706e67\">\n  <b>Copy Memory Task</b><br><br>\n</p>\n<h4>Implementation results (first epochs)</h4>\n<pre><code>30000/30000 [==============================] - 30s 1ms/step - loss: 0.1174 - acc: 0.9586 - val_loss: 0.0370 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 874us/step - loss: 0.0367 - acc: 0.9859 - val_loss: 0.0363 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 852us/step - loss: 0.0361 - acc: 0.9859 - val_loss: 0.0358 - val_acc: 0.9859\n30000/30000 [==============================] - 26s 872us/step - loss: 0.0355 - acc: 0.9859 - val_loss: 0.0349 - val_acc: 0.9859\n30000/30000 [==============================] - 25s 850us/step - loss: 0.0339 - acc: 0.9864 - val_loss: 0.0291 - val_acc: 0.9881\n30000/30000 [==============================] - 26s 856us/step - loss: 0.0235 - acc: 0.9896 - val_loss: 0.0159 - val_acc: 0.9944\n30000/30000 [==============================] - 26s 872us/step - loss: 0.0169 - acc: 0.9929 - val_loss: 0.0125 - val_acc: 0.9966\n</code></pre>\n<h3>Sequential MNIST</h3>\n<h4>Explanation</h4>\n<p>The idea here is to consider MNIST images as 1-D sequences and feed them to the network. This task is particularly hard because sequences are 28*28 = 784 elements. In order to classify correctly, the network has to remember all the sequence. Usual LSTM are unable to perform well on this task.</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d968fc323f03116142867eeeaa1e0b55c12445e2/6d6973632f53657175656e7469616c5f4d4e4953545f5461736b2e706e67\">\n  <b>Sequential MNIST</b><br><br>\n</p>\n<h4>Implementation results</h4>\n<pre><code>60000/60000 [==============================] - 118s 2ms/step - loss: 0.2348 - acc: 0.9265 - val_loss: 0.1308 - val_acc: 0.9579\n60000/60000 [==============================] - 116s 2ms/step - loss: 0.0973 - acc: 0.9698 - val_loss: 0.0645 - val_acc: 0.9798\n[...]\n60000/60000 [==============================] - 112s 2ms/step - loss: 0.0075 - acc: 0.9978 - val_loss: 0.0547 - val_acc: 0.9894\n60000/60000 [==============================] - 111s 2ms/step - loss: 0.0093 - acc: 0.9968 - val_loss: 0.0585 - val_acc: 0.9895\n</code></pre>\n<h2>Testing</h2>\n<p>Testing is based on Tox.</p>\n<pre><code>pip install tox\ntox\n</code></pre>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://github.com/locuslab/TCN/\" rel=\"nofollow\">https://github.com/locuslab/TCN/</a> (TCN for Pytorch)</li>\n<li><a href=\"https://arxiv.org/pdf/1803.01271.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1803.01271.pdf</a> (An Empirical Evaluation of Generic Convolutional and Recurrent Networks\nfor Sequence Modeling)</li>\n<li><a href=\"https://arxiv.org/pdf/1609.03499.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1609.03499.pdf</a> (Original Wavenet paper)</li>\n</ul>\n<h2>Related</h2>\n<ul>\n<li><a href=\"https://github.com/Baichenjia/Tensorflow-TCN\" rel=\"nofollow\">https://github.com/Baichenjia/Tensorflow-TCN</a> (Tensorflow Eager implementation of TCNs)</li>\n</ul>\n\n          </div>"}, "last_serial": 7098938, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "1ef22244ccba1a9be3fc54bce665bdad", "sha256": "90a79f050592a031d243ff7746b9cffeb8419a0895c6ab2d01125355867bfab2"}, "downloads": -1, "filename": "keras_tcn-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ef22244ccba1a9be3fc54bce665bdad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3721, "upload_time": "2018-09-28T05:04:13", "upload_time_iso_8601": "2018-09-28T05:04:13.336164Z", "url": "https://files.pythonhosted.org/packages/c0/d4/4cd13df3832c55b1103843764bb1c71398b0d22f00a27d8b1b701f04b51f/keras_tcn-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c976e38da161a20ea6c40a5a2218602", "sha256": "db1fa81a398c2d44423a5c198646472b8b96c54696fb0a7e916b3caf84d3cf3c"}, "downloads": -1, "filename": "keras-tcn-2.1.0.tar.gz", "has_sig": false, "md5_digest": "7c976e38da161a20ea6c40a5a2218602", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6413, "upload_time": "2018-09-28T05:04:14", "upload_time_iso_8601": "2018-09-28T05:04:14.463766Z", "url": "https://files.pythonhosted.org/packages/9a/96/4f0e012b952cf03800219e3b1c1a87389f6d7bac35a4001976c481e583e8/keras-tcn-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "8c2803a43efa7a9691fd1a6830c8dda3", "sha256": "84194d438336d2be946750ee8e7d54e7e28310a1f2c411f478896fe0e8099edd"}, "downloads": -1, "filename": "keras_tcn-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c2803a43efa7a9691fd1a6830c8dda3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7278, "upload_time": "2018-09-28T05:08:52", "upload_time_iso_8601": "2018-09-28T05:08:52.280866Z", "url": "https://files.pythonhosted.org/packages/a7/f8/780b2694b52bd7122b3dad640f79f10f626c7e055f6a24b4e1b07423069c/keras_tcn-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a82db18eccaa6e3ea14a528e78560aeb", "sha256": "ff1a4b34bb6b730d819f20025f752361e00387ce6e0c8d631036cccb8e36406c"}, "downloads": -1, "filename": "keras-tcn-2.1.1.tar.gz", "has_sig": false, "md5_digest": "a82db18eccaa6e3ea14a528e78560aeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7287, "upload_time": "2018-09-28T05:08:53", "upload_time_iso_8601": "2018-09-28T05:08:53.450741Z", "url": "https://files.pythonhosted.org/packages/6c/1e/7286876ee6b154c528fbf4d784cb2dc70a65a65ae27f4866b1f7077d5c0d/keras-tcn-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "c015a10cf5608c517a2b730e627c95da", "sha256": "7235cefc49d93fad4062d30131432d5d400b352323190fce979fe4c60752fd5e"}, "downloads": -1, "filename": "keras_tcn-2.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c015a10cf5608c517a2b730e627c95da", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7299, "upload_time": "2018-09-28T05:11:07", "upload_time_iso_8601": "2018-09-28T05:11:07.438795Z", "url": "https://files.pythonhosted.org/packages/8a/0f/bcb1cc86a29f8a4654ece336067f3fb55cb1abd7a8f9cf5bf9a354242630/keras_tcn-2.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fbdcf3a8bbff41a54ee79ae98d469d6", "sha256": "7dd0765f130db920106175958aa2cb285c2e83ef4f2568dd478efde98308aa43"}, "downloads": -1, "filename": "keras-tcn-2.1.2.tar.gz", "has_sig": false, "md5_digest": "4fbdcf3a8bbff41a54ee79ae98d469d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7321, "upload_time": "2018-09-28T05:11:08", "upload_time_iso_8601": "2018-09-28T05:11:08.777867Z", "url": "https://files.pythonhosted.org/packages/76/e9/e68e45c0780219261deab912238a38cfe465efc7c759322ee26603f42f10/keras-tcn-2.1.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "6f6a9f99ec1f320cad53dacdf7a9d545", "sha256": "dea58a4e7466a8b6c2f981a093177e696f8878b3499b5c5f6811f0df4b79f50d"}, "downloads": -1, "filename": "keras_tcn-2.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f6a9f99ec1f320cad53dacdf7a9d545", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12177, "upload_time": "2018-10-16T05:25:57", "upload_time_iso_8601": "2018-10-16T05:25:57.856032Z", "url": "https://files.pythonhosted.org/packages/54/3b/6ba16c05f999a6fdd9fcea3a3c44f498e88244b924b07e892145761fc3c7/keras_tcn-2.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e35b32c3df99aa23b8ba2745849e9d1f", "sha256": "11dfdb5f96b1e67e573350e54e5638e29b24af8fd9b5feee6347550a9c61c04e"}, "downloads": -1, "filename": "keras-tcn-2.2.3.tar.gz", "has_sig": false, "md5_digest": "e35b32c3df99aa23b8ba2745849e9d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7780, "upload_time": "2018-10-16T05:25:59", "upload_time_iso_8601": "2018-10-16T05:25:59.668611Z", "url": "https://files.pythonhosted.org/packages/7d/2a/c39f747b6748545875c0a790b515d5382be5066b21d780306a894ad4954d/keras-tcn-2.2.3.tar.gz", "yanked": false}], "2.3.3": [{"comment_text": "", "digests": {"md5": "0573dc6ae042271d2dbc9575e058ea35", "sha256": "cbbdc49fb554e25cfba7debbbec72306c5c53595ca77558316434366ad150b51"}, "downloads": -1, "filename": "keras_tcn-2.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0573dc6ae042271d2dbc9575e058ea35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13123, "upload_time": "2018-11-28T01:52:30", "upload_time_iso_8601": "2018-11-28T01:52:30.484517Z", "url": "https://files.pythonhosted.org/packages/cf/07/763107386eeaa137bc1b365a0e4e46daaafa7c9064e03ace2635bfc367b0/keras_tcn-2.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6a4d7ad96585383815caf618c2ba555", "sha256": "8ffbed492358e4bdb161156058207f7c1ee05a842b394ce6fbb02450c39909cb"}, "downloads": -1, "filename": "keras-tcn-2.3.3.tar.gz", "has_sig": false, "md5_digest": "f6a4d7ad96585383815caf618c2ba555", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8538, "upload_time": "2018-11-28T01:52:32", "upload_time_iso_8601": "2018-11-28T01:52:32.458296Z", "url": "https://files.pythonhosted.org/packages/a7/53/74ff6e6ab7eca173fd9736209d57653620156e15a1c7ac3895ec5effbd5b/keras-tcn-2.3.3.tar.gz", "yanked": false}], "2.3.4": [{"comment_text": "", "digests": {"md5": "b7585b63d7012ec883c63b5a703c2ede", "sha256": "e4c06a57bdf92494f08f89b3e1d516f61348d71841397f1d27d1789aef740e0f"}, "downloads": -1, "filename": "keras_tcn-2.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7585b63d7012ec883c63b5a703c2ede", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13138, "upload_time": "2019-01-04T05:20:39", "upload_time_iso_8601": "2019-01-04T05:20:39.492073Z", "url": "https://files.pythonhosted.org/packages/6d/71/b4e58d4033cb7518f54e09d22998c2cde7c12e25816cf434b76fff1eb604/keras_tcn-2.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c015138ce3b53ce4ff9804918af4d45b", "sha256": "f950ceefcd12cfeb5eb1db34bbabef3e198e697263923c1bc2fe44cd7dd721a6"}, "downloads": -1, "filename": "keras-tcn-2.3.4.tar.gz", "has_sig": false, "md5_digest": "c015138ce3b53ce4ff9804918af4d45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8560, "upload_time": "2019-01-04T05:20:40", "upload_time_iso_8601": "2019-01-04T05:20:40.922166Z", "url": "https://files.pythonhosted.org/packages/6f/9e/dfcdf25159d6b3b7116bf0ef8adf14ad4287643407d6729c4be78d63d035/keras-tcn-2.3.4.tar.gz", "yanked": false}], "2.3.5": [{"comment_text": "", "digests": {"md5": "a20abff98ee9b931b94b9ce530d983b1", "sha256": "f383d28d7622013a1d57e576aa1b9b693cd666651d9633488b4be57ef4314c1a"}, "downloads": -1, "filename": "keras_tcn-2.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a20abff98ee9b931b94b9ce530d983b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13099, "upload_time": "2019-01-09T04:41:13", "upload_time_iso_8601": "2019-01-09T04:41:13.198289Z", "url": "https://files.pythonhosted.org/packages/f2/bc/dcbdc24d80229022333150f42ff88ddf4c6793568f711a0d6fc1e83b102e/keras_tcn-2.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "576e8c45ebba9ccc9fb55498aa2dab23", "sha256": "27b8f67bff133d9ebe23a734506c78cf5f80dd1e596e29239bdaf85a9bcc9a03"}, "downloads": -1, "filename": "keras-tcn-2.3.5.tar.gz", "has_sig": false, "md5_digest": "576e8c45ebba9ccc9fb55498aa2dab23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8528, "upload_time": "2019-01-09T04:41:14", "upload_time_iso_8601": "2019-01-09T04:41:14.728550Z", "url": "https://files.pythonhosted.org/packages/6a/d2/14584d066cda39f786ecfea4e8417b5661b7f99e841a9e7154d7dc473606/keras-tcn-2.3.5.tar.gz", "yanked": false}], "2.3.6": [{"comment_text": "", "digests": {"md5": "566f5ec344e5798ce3ed00103653bb3c", "sha256": "4b5e60ee1da3d86cff0f337aeb481fba403c26411bb9f16c8eedc2486c020959"}, "downloads": -1, "filename": "keras_tcn-2.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "566f5ec344e5798ce3ed00103653bb3c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9387, "upload_time": "2019-02-20T03:49:55", "upload_time_iso_8601": "2019-02-20T03:49:55.570782Z", "url": "https://files.pythonhosted.org/packages/24/7c/76ce6e230aceb858b3273242e6e8f0f4e8d14bc4a8d664c63aae6e5f7cef/keras_tcn-2.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b94e15ffa3f9674002a368e2fd7b6869", "sha256": "4edd0239196adaf4f0cc8326f1a9550c499954e307857577df29a6fb3be75e5a"}, "downloads": -1, "filename": "keras-tcn-2.3.6.tar.gz", "has_sig": false, "md5_digest": "b94e15ffa3f9674002a368e2fd7b6869", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8673, "upload_time": "2019-02-20T03:49:57", "upload_time_iso_8601": "2019-02-20T03:49:57.365774Z", "url": "https://files.pythonhosted.org/packages/7c/c0/9df3b04464293597dd10dfc43a2f425c2a474185849ef89d2757c403c0b6/keras-tcn-2.3.6.tar.gz", "yanked": false}], "2.5.6": [{"comment_text": "", "digests": {"md5": "a44c62bb7b95b7af45645c2cfc493792", "sha256": "3399f4c7e2b1f0e5abda6073ae66d53f9b226f811f567e380848c4655a77b0ac"}, "downloads": -1, "filename": "keras_tcn-2.5.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a44c62bb7b95b7af45645c2cfc493792", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8880, "upload_time": "2019-02-24T17:15:12", "upload_time_iso_8601": "2019-02-24T17:15:12.139526Z", "url": "https://files.pythonhosted.org/packages/21/ce/ab513c067157f3b294a611609c29a2f2b2eee84e7cbef2f09772db433029/keras_tcn-2.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6934fb848bed7e7c541f071899e5cec", "sha256": "e5aaaf490105f5f8bd9ec3e4eb654db4487f461d6dc807bb3f4aaf0ca4eebc34"}, "downloads": -1, "filename": "keras-tcn-2.5.6.tar.gz", "has_sig": false, "md5_digest": "b6934fb848bed7e7c541f071899e5cec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8178, "upload_time": "2019-02-24T17:15:14", "upload_time_iso_8601": "2019-02-24T17:15:14.019513Z", "url": "https://files.pythonhosted.org/packages/29/22/ba93a33522e9898ea7376cb78eca8116af31852435704ebe03fa41cd5b5c/keras-tcn-2.5.6.tar.gz", "yanked": false}], "2.5.7": [{"comment_text": "", "digests": {"md5": "92d211eeb808d1bcfdeab117c644866e", "sha256": "3ed1f382af63cc2192a8e646e532a1fb1c78d746e1ac0703e61b3e6e902d3e25"}, "downloads": -1, "filename": "keras_tcn-2.5.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92d211eeb808d1bcfdeab117c644866e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8831, "upload_time": "2019-02-26T16:23:04", "upload_time_iso_8601": "2019-02-26T16:23:04.754445Z", "url": "https://files.pythonhosted.org/packages/42/05/9c8640d47c6e593166ab64b4575982ddb35e1c73ae4e8372ae63fc0e2712/keras_tcn-2.5.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40cc1a05c5937eb6bea6a1a7b43856d4", "sha256": "6ab7a0783e494691fb4a1747400b08f3dee6c0c96a209616ae18e1e8061ecde7"}, "downloads": -1, "filename": "keras-tcn-2.5.7.tar.gz", "has_sig": false, "md5_digest": "40cc1a05c5937eb6bea6a1a7b43856d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8123, "upload_time": "2019-02-26T16:23:06", "upload_time_iso_8601": "2019-02-26T16:23:06.224228Z", "url": "https://files.pythonhosted.org/packages/51/50/0134fe4118520afa977f5c8eb3e821c3e5322dd28aa6aaa144a36a9fc6c7/keras-tcn-2.5.7.tar.gz", "yanked": false}], "2.6.7": [{"comment_text": "", "digests": {"md5": "817694f207e412ab563ac4576afa679a", "sha256": "7f8c04856de85f9ffef2d44d1527e2b58b6cf94bbfdbdaf4aaaf4ae879cc7161"}, "downloads": -1, "filename": "keras_tcn-2.6.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "817694f207e412ab563ac4576afa679a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8935, "upload_time": "2019-03-18T06:00:28", "upload_time_iso_8601": "2019-03-18T06:00:28.839929Z", "url": "https://files.pythonhosted.org/packages/a4/f7/f584a9b82c7c7110165949b3e9f1f6e0859979589eaed2b2bd70747e723a/keras_tcn-2.6.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c3e95752a3f0a713076526d49b30ed5", "sha256": "f04b6009b2f3eefc10adf21fb3a41ec31da6c8154a87dd63970d9490cffdbffe"}, "downloads": -1, "filename": "keras-tcn-2.6.7.tar.gz", "has_sig": false, "md5_digest": "7c3e95752a3f0a713076526d49b30ed5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8255, "upload_time": "2019-03-18T06:00:30", "upload_time_iso_8601": "2019-03-18T06:00:30.399724Z", "url": "https://files.pythonhosted.org/packages/26/87/61ba7d43ebeed15d00377ba9d0a1f1a9bb8a8d08168606c849293e42e046/keras-tcn-2.6.7.tar.gz", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "119d166aed14c3c3b8d6a5c222cd855c", "sha256": "cee47cde41786a90b89cebf45570d4fab34e2bbd6065825e40763964bd8bfadf"}, "downloads": -1, "filename": "keras_tcn-2.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "119d166aed14c3c3b8d6a5c222cd855c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9184, "upload_time": "2019-06-14T02:14:08", "upload_time_iso_8601": "2019-06-14T02:14:08.147274Z", "url": "https://files.pythonhosted.org/packages/9d/40/baf02143f287b290437cd74e417711d188832c207edf33127f2bd3f50e49/keras_tcn-2.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc2ac9389a368dfe80704197c0bfd889", "sha256": "4f8e3b272904d7df1d8b45bfb0f70161a351d268f5025ee4ca756292fd216284"}, "downloads": -1, "filename": "keras-tcn-2.7.0.tar.gz", "has_sig": false, "md5_digest": "fc2ac9389a368dfe80704197c0bfd889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8508, "upload_time": "2019-06-14T02:14:09", "upload_time_iso_8601": "2019-06-14T02:14:09.884861Z", "url": "https://files.pythonhosted.org/packages/d1/2b/39b89d009154143f30ca97a2c29eea9663490d806b788fc2cf6707581994/keras-tcn-2.7.0.tar.gz", "yanked": false}], "2.7.1": [{"comment_text": "", "digests": {"md5": "edb0fa77809fc85dd309ad0128cc7658", "sha256": "3a456ce7cd49ba0c8949fdf7bd2f7fc00d7a87e766cf15e28317beffd59e1a38"}, "downloads": -1, "filename": "keras_tcn-2.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edb0fa77809fc85dd309ad0128cc7658", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9137, "upload_time": "2019-06-20T02:37:53", "upload_time_iso_8601": "2019-06-20T02:37:53.615343Z", "url": "https://files.pythonhosted.org/packages/e0/e0/73ad4b7e4c4c791f02d4e1555a21a65e2b92ce232e916a9ae95c3b7a97a4/keras_tcn-2.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "055e9594c3c51ec790e07cf826164653", "sha256": "ad8c35fe79c61ec0e6e12157add978f5991c7def952d7be1102f5febac5a2e49"}, "downloads": -1, "filename": "keras-tcn-2.7.1.tar.gz", "has_sig": false, "md5_digest": "055e9594c3c51ec790e07cf826164653", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8467, "upload_time": "2019-06-20T02:37:55", "upload_time_iso_8601": "2019-06-20T02:37:55.265215Z", "url": "https://files.pythonhosted.org/packages/97/50/46cd6f8b30e7164ff92f3cbccf7d24fb18f17dfc9a1dcd13f195f2e67efb/keras-tcn-2.7.1.tar.gz", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "b78340f27136978063e706d1dd6cd383", "sha256": "06c049f4bd9c9dea9fd303f4c30991c1818a0ba4ce5adda795bab5b4d7ef35db"}, "downloads": -1, "filename": "keras_tcn-2.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b78340f27136978063e706d1dd6cd383", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9267, "upload_time": "2019-06-28T07:38:20", "upload_time_iso_8601": "2019-06-28T07:38:20.750623Z", "url": "https://files.pythonhosted.org/packages/4d/26/91c55e8ebde1271a40b5ca1e703e2445bf0b1a95a88be6fcf07a84dbe78e/keras_tcn-2.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fe1febd5d692fce00f53733927c96b6", "sha256": "29efb548524107b6b9b795443f202a417ea32a369868de6675bdd50499609733"}, "downloads": -1, "filename": "keras-tcn-2.8.1.tar.gz", "has_sig": false, "md5_digest": "4fe1febd5d692fce00f53733927c96b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8576, "upload_time": "2019-06-28T07:38:22", "upload_time_iso_8601": "2019-06-28T07:38:22.711812Z", "url": "https://files.pythonhosted.org/packages/f5/64/81c1540c5ececc6b57e5fb72fb59be76d3ca98834e4cc8f0f3338f28427f/keras-tcn-2.8.1.tar.gz", "yanked": false}], "2.8.2": [{"comment_text": "", "digests": {"md5": "7729dd67491f0f24e77cdf94ad7ff633", "sha256": "c6b0b8d872fedc59585c100e34455bea3156467e3d9f99f8367987b2175a1e70"}, "downloads": -1, "filename": "keras_tcn-2.8.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7729dd67491f0f24e77cdf94ad7ff633", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9403, "upload_time": "2019-07-12T08:29:17", "upload_time_iso_8601": "2019-07-12T08:29:17.561313Z", "url": "https://files.pythonhosted.org/packages/ea/71/a23ddfcee18342a4c3ce464f99c44e5dad1c637be13c73638d8551d57906/keras_tcn-2.8.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd4558c51393f4a48ad2fed0d97ecd13", "sha256": "c714fdb6353fce2085ecd80e0494e4de18e6be29e2fa928d5e0cdf3b33e4bcc3"}, "downloads": -1, "filename": "keras-tcn-2.8.2.tar.gz", "has_sig": false, "md5_digest": "fd4558c51393f4a48ad2fed0d97ecd13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8663, "upload_time": "2019-07-12T08:29:19", "upload_time_iso_8601": "2019-07-12T08:29:19.214646Z", "url": "https://files.pythonhosted.org/packages/6e/ef/ea92cb3903f7d7f0ca68a15e0dbc38be60b7e1d993f0d85f66e3e1de4db0/keras-tcn-2.8.2.tar.gz", "yanked": false}], "2.8.3": [{"comment_text": "", "digests": {"md5": "48b5284879878ead8f52bff9efe49a92", "sha256": "070850300a9fee29d5511411ae5c12646b364629c9f53d1269caff71e0733dfe"}, "downloads": -1, "filename": "keras_tcn-2.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "48b5284879878ead8f52bff9efe49a92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9449, "upload_time": "2019-08-25T04:42:40", "upload_time_iso_8601": "2019-08-25T04:42:40.382231Z", "url": "https://files.pythonhosted.org/packages/d4/c4/438c86b27ab11a79cc659d8d6878682c4eb80caa0c0b3d620740cef762f5/keras_tcn-2.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e7e0fc1162168e8fee739724530e230", "sha256": "92355f0289fbc2300f0960f43d53d6e8a90b0d4603a9590b16cc952ea45fa6e0"}, "downloads": -1, "filename": "keras-tcn-2.8.3.tar.gz", "has_sig": false, "md5_digest": "1e7e0fc1162168e8fee739724530e230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8663, "upload_time": "2019-08-25T04:42:42", "upload_time_iso_8601": "2019-08-25T04:42:42.506539Z", "url": "https://files.pythonhosted.org/packages/20/16/76cb4568a0dfc07e712545f3e2534412bbf347dce1ef7af8f396a7549c51/keras-tcn-2.8.3.tar.gz", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "d25632105b82b5c3573d94eb62123724", "sha256": "04df4bc2be5651ef5937f1b0485b804200bd8eab3c31c473a93f9123351cbb24"}, "downloads": -1, "filename": "keras_tcn-2.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d25632105b82b5c3573d94eb62123724", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10912, "upload_time": "2019-11-25T10:44:46", "upload_time_iso_8601": "2019-11-25T10:44:46.906299Z", "url": "https://files.pythonhosted.org/packages/2c/5e/c691c04f102c4b9a23f776fdaa468a8deb487fae9e9d5ec087033f30b02a/keras_tcn-2.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c48b2bb14f6eada6c20ae23a8d59080", "sha256": "bf7fead62ae1039b4c0848dda898dae039f0bccb4971ac373590cd79d1be8654"}, "downloads": -1, "filename": "keras-tcn-2.9.0.tar.gz", "has_sig": false, "md5_digest": "8c48b2bb14f6eada6c20ae23a8d59080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10178, "upload_time": "2019-11-25T10:44:49", "upload_time_iso_8601": "2019-11-25T10:44:49.221637Z", "url": "https://files.pythonhosted.org/packages/f4/ba/cca0159b0ab4d5c95dce7b6034e94f49f48431a096cd45df330eee733e38/keras-tcn-2.9.0.tar.gz", "yanked": false}], "2.9.1": [{"comment_text": "", "digests": {"md5": "51c93f25e731591bb17a10dc5fb2aaf4", "sha256": "d674d42309caee86f90abb19282fe5073d85a263287318a573af89fe99428ac7"}, "downloads": -1, "filename": "keras_tcn-2.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "51c93f25e731591bb17a10dc5fb2aaf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10920, "upload_time": "2019-11-28T00:28:55", "upload_time_iso_8601": "2019-11-28T00:28:55.347794Z", "url": "https://files.pythonhosted.org/packages/31/a2/39501b43ce0c5c57b9ff22d8569afb0abc5ee2c7c228fecdf08cb2c8ac7d/keras_tcn-2.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "408265be72ab728b40ca01aa957447c3", "sha256": "35db97f474a2c261a15d8e6f9009d8ee6732581a195602ec800e094b9305ed17"}, "downloads": -1, "filename": "keras-tcn-2.9.1.tar.gz", "has_sig": false, "md5_digest": "408265be72ab728b40ca01aa957447c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10184, "upload_time": "2019-11-28T00:28:59", "upload_time_iso_8601": "2019-11-28T00:28:59.049381Z", "url": "https://files.pythonhosted.org/packages/4d/65/efe47034945beac03ccdd4d381377105271a5515090e3e96b17f4314a479/keras-tcn-2.9.1.tar.gz", "yanked": false}], "2.9.2": [{"comment_text": "", "digests": {"md5": "bdbb7e6fffcf296a74e8ca0be95e62f1", "sha256": "0b9de183692784e4ec1326fbe3193efbfb37bfc614d0bf6b8df9a74b68b64a61"}, "downloads": -1, "filename": "keras_tcn-2.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bdbb7e6fffcf296a74e8ca0be95e62f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10985, "upload_time": "2019-11-28T00:30:03", "upload_time_iso_8601": "2019-11-28T00:30:03.921769Z", "url": "https://files.pythonhosted.org/packages/83/dd/23887178a60cb94f07ee2cd949d9ce98027a14fa3330a3d3634bde5cf691/keras_tcn-2.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c77ab1002fa65eb43a32d9d2e44a8e92", "sha256": "6ab3178bcd2b04899694ad6795d0c437ef4aa73a0033cac71aaa0de6131abff2"}, "downloads": -1, "filename": "keras-tcn-2.9.2.tar.gz", "has_sig": false, "md5_digest": "c77ab1002fa65eb43a32d9d2e44a8e92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10247, "upload_time": "2019-11-28T00:30:08", "upload_time_iso_8601": "2019-11-28T00:30:08.779361Z", "url": "https://files.pythonhosted.org/packages/21/77/3436f3029226118153af165ef7e03cbe1e6c47ab7343b81641d1e34a03d0/keras-tcn-2.9.2.tar.gz", "yanked": false}], "2.9.3": [{"comment_text": "", "digests": {"md5": "086878b47a6da29e08811788e0e71bc0", "sha256": "0e0b914cdcc3ad90906630931f8bdb2bb09afb1fd2cd40a562bbb4795247afe7"}, "downloads": -1, "filename": "keras_tcn-2.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "086878b47a6da29e08811788e0e71bc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11151, "upload_time": "2019-12-03T13:36:49", "upload_time_iso_8601": "2019-12-03T13:36:49.250155Z", "url": "https://files.pythonhosted.org/packages/d0/28/6da8804b87ad49efa835624c458d154b47fea086c4c7fafe6e80c02c8d23/keras_tcn-2.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a94151e98234da8a4335103a36e69d74", "sha256": "ea7df1a241a55601e9a3da61cbedd849e8830b3e3b2bf4cf36ccd37b150d0a48"}, "downloads": -1, "filename": "keras-tcn-2.9.3.tar.gz", "has_sig": false, "md5_digest": "a94151e98234da8a4335103a36e69d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10421, "upload_time": "2019-12-03T13:36:52", "upload_time_iso_8601": "2019-12-03T13:36:52.484190Z", "url": "https://files.pythonhosted.org/packages/fd/cb/9fc5c8091b66b83fbfa625c77231aa14f1e0e76138a1924a90e5e0d34bf2/keras-tcn-2.9.3.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "d0ce54daaebf4e4e5ee9cab04423b4e9", "sha256": "6994775e87b554bb16867c19b43f9ae76e85830de9d621828c9519f27f8601d3"}, "downloads": -1, "filename": "keras_tcn-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d0ce54daaebf4e4e5ee9cab04423b4e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11374, "upload_time": "2020-02-11T08:36:02", "upload_time_iso_8601": "2020-02-11T08:36:02.911082Z", "url": "https://files.pythonhosted.org/packages/8e/c2/d8e0f2da3237da407933aa3dd1915bde081dd1a54a6fe292856cfdf05673/keras_tcn-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb5b022478cf346988fdaaa1cc498609", "sha256": "87642510b8cc14502ebd45c10e87376d7fc40b300af2168d02a7f975e42c2fa9"}, "downloads": -1, "filename": "keras-tcn-3.0.1.tar.gz", "has_sig": false, "md5_digest": "fb5b022478cf346988fdaaa1cc498609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10616, "upload_time": "2020-02-11T08:36:05", "upload_time_iso_8601": "2020-02-11T08:36:05.163002Z", "url": "https://files.pythonhosted.org/packages/f0/0c/37186abd0e48f271c8c10d717c31f1336f5bd05be37fa45c6763f70a5568/keras-tcn-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "040612ee6eae0d3533d87774ce299993", "sha256": "961793e9161dec13a8b63ebcf28d0b28254f166c98d3fcb632aad261bb2e9a12"}, "downloads": -1, "filename": "keras_tcn-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "040612ee6eae0d3533d87774ce299993", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11629, "upload_time": "2020-04-07T11:45:19", "upload_time_iso_8601": "2020-04-07T11:45:19.606728Z", "url": "https://files.pythonhosted.org/packages/61/c8/8b3a81feed86122ece068cfcaf986f5e308bf51ca16616f27940ac440787/keras_tcn-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba41b4c8e5ec5e3641db5209fcf87450", "sha256": "c7544eb6d2ca18fad15f438ba5b506c241ee07610ab891627a2f5c0fe64e15f1"}, "downloads": -1, "filename": "keras-tcn-3.0.2.tar.gz", "has_sig": false, "md5_digest": "ba41b4c8e5ec5e3641db5209fcf87450", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10839, "upload_time": "2020-04-07T11:45:20", "upload_time_iso_8601": "2020-04-07T11:45:20.990808Z", "url": "https://files.pythonhosted.org/packages/01/51/2b4ed9e9117661ab2af2d8fd1acd366d64836129fd42c60c8f28c6889ac7/keras-tcn-3.0.2.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "936173448a63424ba3464ad36acb186b", "sha256": "b104be931c8b227cce9bcb3fd451159aa9f30252dd8b1997555827be8b01a240"}, "downloads": -1, "filename": "keras_tcn-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "936173448a63424ba3464ad36acb186b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11476, "upload_time": "2020-04-25T10:31:43", "upload_time_iso_8601": "2020-04-25T10:31:43.429724Z", "url": "https://files.pythonhosted.org/packages/9f/58/9ec7417f5f58b7942b9bc6204708ca677f4eca902e4547428f468d1ee370/keras_tcn-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2660dfc00c6c7ea197f760b20316ea66", "sha256": "6a296fb978993001ed5348caf0f2665e2b65c22db200f117a459e07e8fe812ff"}, "downloads": -1, "filename": "keras-tcn-3.1.0.tar.gz", "has_sig": false, "md5_digest": "2660dfc00c6c7ea197f760b20316ea66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10693, "upload_time": "2020-04-25T10:31:45", "upload_time_iso_8601": "2020-04-25T10:31:45.165744Z", "url": "https://files.pythonhosted.org/packages/af/ae/2ba81b43c9687a48f75f5a1eb8c5ca5fef275d303e2b43dfaed0c75c7a55/keras-tcn-3.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "936173448a63424ba3464ad36acb186b", "sha256": "b104be931c8b227cce9bcb3fd451159aa9f30252dd8b1997555827be8b01a240"}, "downloads": -1, "filename": "keras_tcn-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "936173448a63424ba3464ad36acb186b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11476, "upload_time": "2020-04-25T10:31:43", "upload_time_iso_8601": "2020-04-25T10:31:43.429724Z", "url": "https://files.pythonhosted.org/packages/9f/58/9ec7417f5f58b7942b9bc6204708ca677f4eca902e4547428f468d1ee370/keras_tcn-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2660dfc00c6c7ea197f760b20316ea66", "sha256": "6a296fb978993001ed5348caf0f2665e2b65c22db200f117a459e07e8fe812ff"}, "downloads": -1, "filename": "keras-tcn-3.1.0.tar.gz", "has_sig": false, "md5_digest": "2660dfc00c6c7ea197f760b20316ea66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10693, "upload_time": "2020-04-25T10:31:45", "upload_time_iso_8601": "2020-04-25T10:31:45.165744Z", "url": "https://files.pythonhosted.org/packages/af/ae/2ba81b43c9687a48f75f5a1eb8c5ca5fef275d303e2b43dfaed0c75c7a55/keras-tcn-3.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:08 2020"}