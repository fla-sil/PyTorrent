{"info": {"author": "Ryan Kelly", "author_email": "ryan@rfk.id.au", "bugtrack_url": null, "classifiers": [], "description": "paranoidsessions:  more comprehensive security checking for Django sessions\n\nThis module implements \"paranoid sessions\" for Django - sessions that work\nconsiderably harder at security than the standard version.  Designed to make\nsession-stealing attacks as hard as possible, the extra measures that can be\nemployed are:\n\n  * HTTP header fingerprinting (e.g. REMOTE_ADDR, HTTP_USER_AGENT)\n  * per-request nonces (with configurable timeout and duplicate window)\n  * periodic cycling of session keys\n  * maintaining a second key for secure connections\n  * marking session keys as \"HttpOnly\"\n\nAs always, there's a tradeoff here - these security measures involve increased\nprocessing per request and more frequent writes to the session store.  You also\nrun the risk of terminating valid sessions that happen to look suspicious.\nBut by adjusting the various settings offered by this module, you should be\nable to find a compromise that's suitable for your project.\n\nTo use this module, simply include it in MIDDLEWARE_CLASSES after the standard\nsession middleware:\n\nMIDDLEWARE_CLASSES = (\n    ...\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'paranoidsessions.ParanoidSessionMiddleware',\n    ...\n)\n\nIn keeping with the name, the default settings of this module are designed\nto maximise security at the expense of performance and user convenience.\nYou'll probably want to adjust them to a compromise that's more suitable for\nyour application, but you should understand the tradeoffs before doing so.\n\nIn particular, the management of per-request nonces must account for the\nasynchronous nature of the web.  Race conditions between multiple requests\nfrom the same session mean that the use of nonces cannot be perfectly serial.\nIf a user sends two requests in quick succession, so that the second request is\nsent before the first response is received, then these requests will validly\nshare a nonce.  This scenario is complicated further by the fact that requests\nmay be handled by different server processes.\n\nTo manage such overlapping requests, this module permits a small window within\nwhich duplicate nonces are treated as valid.  To coordinate nonce generation\nacross multiple server processes, they are built from a pseudo-random stream\nbased on a shared random seed value.  This should be sufficiently unforgeable\nfor most applications - if your attacker is determined enough to compromise\nnonces generated in this manner, you should consider serving the entire site\nover a secure channel!\n\nThe following settings are available to tweak the behaviour of this module:\n\n  PSESSION_CHECK_HEADERS:  List of headers to check on each request.  The\n          session will be cleared if any of these headers vary from those\n          sent when the session was initially created.\n\n          Default:  [\"REMOTE_ADDR\",\"HTTP_X_FORWARDED_FOR\",\"HTTP_USER_AGENT\"]\n\n\n  PSESSION_NONCE_TIMEOUT:  Time (in seconds) after which a new nonce will be\n          generated.  The client must return a valid nonce with each request\n          or the session will be cleared. Setting this to a larger value will\n          decrease security but reduce the frequency of writes to the session\n          store.  Setting it to zero means a new nonce is generated on every\n          request.  Setting it to None will disable the use of nonces entirely.\n\n          Default:  1\n\n\n  PSESSION_NONCE_WINDOW:  Number of nonces prior to the current nonce that will\n          still be accepted as valid.  This corresponds to the number of nonce\n          updates that could be \"in flight\" between the server and client at\n          any given time.  Setting it to zero will break overlapping requests.\n\n          If you need to set it to any more than 1, your site has some serious\n          performance issues.  Not that Django's built-in development server\n          *does* have some serious performance issues; set it to at least 3\n          for your development environment.\n\n          Default:  1\n\n\n  PSESSION_NONCE_WINDOW_TIMEOUT:  Time (in seconds) within which old nonces\n          are accepted.  This window should be as small as possible, but is\n          necessary if users will perform multiple overlapping requests.\n          Setting it to None means the window never times out.\n\n          Default:  1\n\n\n  PSESSION_KEY_TIMEOUT:  Time (in seconds) after which the session key will\n          be cycled.  This should only be needed if nonces are not in use;\n          the difference is that key cycling doesn't require the client to\n          send a separate nonce cookie.  Set it to None to disable key cycling.\n\n          Default:  None\n\n\n  PSESSION_SESSION_KEY:  Session key under which the request-tracking and\n          verification data for this module should be stored.\n\n          Default:  \"PARANOID_SESSION_DATA\"\n\n\n  PSESSION_COOKIE_NAME:  Name of cookie used for the per-request nonce.\n\n          Default:  \"sessionnonce\"\n\n\n  PSESSION_SECURE_COOKIE_NAME:  Name of cookie used for the additional \"secure\n          connections only\" session key.  This additional information is only\n          passed between the server and client over a secure connection; if\n          a sniffer or man-in-the-middle attack compromises all HTTP traffic,\n          they still cannot forge session requests over HTTPS.\n\n          Default:  \"sessionid_https\"\n\n\n  PSESSION_CLEAR_SESSION_FUNCTION:  Function called to clear the session if a\n          potential attack is detected.  An importable name or callable object\n          may be given, taking a request object as its only argument.\n\n          Default:  lambda req: req.session.flush()\n\n\n  PSESSION_REQUEST_FILTER_FUNCTION:  Function to filter requests to be checked.\n          Any requests for which this function returns False will not be\n          subjected to paranoid validation.  This may be helpful for reducing\n          processing overhead on low-risk targets such as media files, but\n          will give an attacker more opportunities to compromise a given nonce.\n\n          Default:  lambda req: True\n\n\nIf you expect a high density of overlapping requests, the default settings of\nthis module are probably too strict and will result in valid user sessions\nbeing terminated.  Consider some of the following adjustments:\n\n    * set NONCE_TIMEOUT to a small positive value e.g. 1 second\n    * increase the NONCE_WINDOW and NONCE_WINDOW_TIMEOUT values\n    * filter out requests to MEDIA_URL to reduce nonce cycling", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rfk/django-paranoid-sessions/tree/master", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-paranoid-sessions", "package_url": "https://pypi.org/project/django-paranoid-sessions/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-paranoid-sessions/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rfk/django-paranoid-sessions/tree/master"}, "release_url": "https://pypi.org/project/django-paranoid-sessions/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "make Django work harder to prevent session-stealing attacks", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            paranoidsessions:  more comprehensive security checking for Django sessions<br><br>This module implements \"paranoid sessions\" for Django - sessions that work<br>considerably harder at security than the standard version.  Designed to make<br>session-stealing attacks as hard as possible, the extra measures that can be<br>employed are:<br><br>  * HTTP header fingerprinting (e.g. REMOTE_ADDR, HTTP_USER_AGENT)<br>  * per-request nonces (with configurable timeout and duplicate window)<br>  * periodic cycling of session keys<br>  * maintaining a second key for secure connections<br>  * marking session keys as \"HttpOnly\"<br><br>As always, there's a tradeoff here - these security measures involve increased<br>processing per request and more frequent writes to the session store.  You also<br>run the risk of terminating valid sessions that happen to look suspicious.<br>But by adjusting the various settings offered by this module, you should be<br>able to find a compromise that's suitable for your project.<br><br>To use this module, simply include it in MIDDLEWARE_CLASSES after the standard<br>session middleware:<br><br>MIDDLEWARE_CLASSES = (<br>    ...<br>    'django.contrib.sessions.middleware.SessionMiddleware',<br>    'paranoidsessions.ParanoidSessionMiddleware',<br>    ...<br>)<br><br>In keeping with the name, the default settings of this module are designed<br>to maximise security at the expense of performance and user convenience.<br>You'll probably want to adjust them to a compromise that's more suitable for<br>your application, but you should understand the tradeoffs before doing so.<br><br>In particular, the management of per-request nonces must account for the<br>asynchronous nature of the web.  Race conditions between multiple requests<br>from the same session mean that the use of nonces cannot be perfectly serial.<br>If a user sends two requests in quick succession, so that the second request is<br>sent before the first response is received, then these requests will validly<br>share a nonce.  This scenario is complicated further by the fact that requests<br>may be handled by different server processes.<br><br>To manage such overlapping requests, this module permits a small window within<br>which duplicate nonces are treated as valid.  To coordinate nonce generation<br>across multiple server processes, they are built from a pseudo-random stream<br>based on a shared random seed value.  This should be sufficiently unforgeable<br>for most applications - if your attacker is determined enough to compromise<br>nonces generated in this manner, you should consider serving the entire site<br>over a secure channel!<br><br>The following settings are available to tweak the behaviour of this module:<br><br>  PSESSION_CHECK_HEADERS:  List of headers to check on each request.  The<br>          session will be cleared if any of these headers vary from those<br>          sent when the session was initially created.<br><br>          Default:  [\"REMOTE_ADDR\",\"HTTP_X_FORWARDED_FOR\",\"HTTP_USER_AGENT\"]<br><br><br>  PSESSION_NONCE_TIMEOUT:  Time (in seconds) after which a new nonce will be<br>          generated.  The client must return a valid nonce with each request<br>          or the session will be cleared. Setting this to a larger value will<br>          decrease security but reduce the frequency of writes to the session<br>          store.  Setting it to zero means a new nonce is generated on every<br>          request.  Setting it to None will disable the use of nonces entirely.<br><br>          Default:  1<br><br><br>  PSESSION_NONCE_WINDOW:  Number of nonces prior to the current nonce that will<br>          still be accepted as valid.  This corresponds to the number of nonce<br>          updates that could be \"in flight\" between the server and client at<br>          any given time.  Setting it to zero will break overlapping requests.<br><br>          If you need to set it to any more than 1, your site has some serious<br>          performance issues.  Not that Django's built-in development server<br>          *does* have some serious performance issues; set it to at least 3<br>          for your development environment.<br><br>          Default:  1<br><br><br>  PSESSION_NONCE_WINDOW_TIMEOUT:  Time (in seconds) within which old nonces<br>          are accepted.  This window should be as small as possible, but is<br>          necessary if users will perform multiple overlapping requests.<br>          Setting it to None means the window never times out.<br><br>          Default:  1<br><br><br>  PSESSION_KEY_TIMEOUT:  Time (in seconds) after which the session key will<br>          be cycled.  This should only be needed if nonces are not in use;<br>          the difference is that key cycling doesn't require the client to<br>          send a separate nonce cookie.  Set it to None to disable key cycling.<br><br>          Default:  None<br><br><br>  PSESSION_SESSION_KEY:  Session key under which the request-tracking and<br>          verification data for this module should be stored.<br><br>          Default:  \"PARANOID_SESSION_DATA\"<br><br><br>  PSESSION_COOKIE_NAME:  Name of cookie used for the per-request nonce.<br><br>          Default:  \"sessionnonce\"<br><br><br>  PSESSION_SECURE_COOKIE_NAME:  Name of cookie used for the additional \"secure<br>          connections only\" session key.  This additional information is only<br>          passed between the server and client over a secure connection; if<br>          a sniffer or man-in-the-middle attack compromises all HTTP traffic,<br>          they still cannot forge session requests over HTTPS.<br><br>          Default:  \"sessionid_https\"<br><br><br>  PSESSION_CLEAR_SESSION_FUNCTION:  Function called to clear the session if a<br>          potential attack is detected.  An importable name or callable object<br>          may be given, taking a request object as its only argument.<br><br>          Default:  lambda req: req.session.flush()<br><br><br>  PSESSION_REQUEST_FILTER_FUNCTION:  Function to filter requests to be checked.<br>          Any requests for which this function returns False will not be<br>          subjected to paranoid validation.  This may be helpful for reducing<br>          processing overhead on low-risk targets such as media files, but<br>          will give an attacker more opportunities to compromise a given nonce.<br><br>          Default:  lambda req: True<br><br><br>If you expect a high density of overlapping requests, the default settings of<br>this module are probably too strict and will result in valid user sessions<br>being terminated.  Consider some of the following adjustments:<br><br>    * set NONCE_TIMEOUT to a small positive value e.g. 1 second<br>    * increase the NONCE_WINDOW and NONCE_WINDOW_TIMEOUT values<br>    * filter out requests to MEDIA_URL to reduce nonce cycling\n          </div>"}, "last_serial": 790256, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "828ab7297c4f4366a47ecb9a2de4adb5", "sha256": "f79d819fa3fe996e7ad8767ff6463e7ae5b58b35baa5334c08fe368aed780a26"}, "downloads": -1, "filename": "django-paranoid-sessions-0.1.0.tar.gz", "has_sig": false, "md5_digest": "828ab7297c4f4366a47ecb9a2de4adb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7962, "upload_time": "2009-08-15T15:45:51", "upload_time_iso_8601": "2009-08-15T15:45:51.814615Z", "url": "https://files.pythonhosted.org/packages/b7/6d/4183dbe07092a2c7c540deec324c2829f517cf95ca61dfcd58ced026137b/django-paranoid-sessions-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f66b99e6f4f9553a5760c9475b39e2d9", "sha256": "1eafe613fbe4e7c68dd342a0654f940ca0f667cca82516ad7c727caf0e41ec7c"}, "downloads": -1, "filename": "django-paranoid-sessions-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f66b99e6f4f9553a5760c9475b39e2d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9158, "upload_time": "2009-08-16T05:09:51", "upload_time_iso_8601": "2009-08-16T05:09:51.227821Z", "url": "https://files.pythonhosted.org/packages/15/1b/3dbc855111436e31b1bed93bf38154d3fd00485211b627b694ad2e9f27b5/django-paranoid-sessions-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f66b99e6f4f9553a5760c9475b39e2d9", "sha256": "1eafe613fbe4e7c68dd342a0654f940ca0f667cca82516ad7c727caf0e41ec7c"}, "downloads": -1, "filename": "django-paranoid-sessions-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f66b99e6f4f9553a5760c9475b39e2d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9158, "upload_time": "2009-08-16T05:09:51", "upload_time_iso_8601": "2009-08-16T05:09:51.227821Z", "url": "https://files.pythonhosted.org/packages/15/1b/3dbc855111436e31b1bed93bf38154d3fd00485211b627b694ad2e9f27b5/django-paranoid-sessions-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:16 2020"}