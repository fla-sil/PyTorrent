{"info": {"author": "Owen Nelson", "author_email": "onelson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*- restructuredtext -*-\n\nmezzanine-mdown\n===============\n\nThis package provides widgets and filters for mezzanine that enable admins\nto use markdown formatting to create their site content, rather than using\nthe tinymce editor to generate html used in *rich content* types, such as \n*rich pages* and *blog posts*.\n\nInstallation\n------------\n\nGet the package\n^^^^^^^^^^^^^^^\n\npip::\n\n    user@home:~$ pip install mezzanine-mdown\n\neasy_install::\n\n    user@home:~$ easy_install mezzanine-mdown\n\n\nPrep the static media\n^^^^^^^^^^^^^^^^^^^^^\n\nUsing the excellent\n`staticfiles <http://pypi.python.org/pypi/django-staticfiles>`_ app, mdown's\nstatic files should get picked up automatically.\n\nIf the staticfiles app is not your style, you'll need to locate the install\nlocation for the ``mdown`` package (usually your python interpreter's\n``site-packages`` directory) and copy/symlink ``mdown/static/mdown`` into your\nproject ``site_media`` directory.\n\n\nConfiguration\n-------------\n\nFirst off, add ``mdown`` to your list of ``INSTALLED_APPS`` in your project settings module.\n\nWith the app installed, you need to make a couple choices. You'll have to\nspecify the ``RICHTEXT_WIDGET_CLASS`` and ``RICHTEXT_FILTER`` values in your\nsettings module.\n\nRICHTEXT_WIDGET_CLASS\n^^^^^^^^^^^^^^^^^^^^^\n\nThis package provides 2 options for this setting.\n\n\n**mdown.forms.WmdWidget**\n    *Activates the WMD rich text editor.* **(recommended)**\n\n**mdown.forms.PlainWidget**\n    *Use a plain Textarea (no rich text editor).*\n\n\nRICHTEXT_FILTER\n^^^^^^^^^^^^^^^\nAgain, there are 2 options for this setting.\n\n**mdown.filters.codehilite**\n    *Renders the content using markdown with the\n    codehilite extension enabled.*\n\n**mdown.filters.plain**\n    *Renders the content using vanilla markdown formatting.*\n\nExtra Steps\n-----------\n\nPygments Styles\n^^^^^^^^^^^^^^^\n\nUsing the management command ``pygments_styles`` you can generate css to \ncolorize code blocks parsed by the codehilite filter.\n\n**Note:** this requires pygments to be installed (use ``pip install pygments``\nor ``easy_install pygments`` to use this feature).\n\nInvoke the command with no args to see a usage message and list of available\ncolor schemes on your system.::\n\n    user@home:~/mysite$ ./manage.py pygments_styles\n    Usage: ./manage.py pygments_styles <scheme_name>\n    Available color schemes:\n      borland\n      bw\n      colorful\n      default\n      ... [ snip ] ...\n\nInvoking with the scheme's name as an argument will print the css to stdout, which you can \nredirect to a file like so: ::\n\n    user@home:~/mysite$ ./manage.py pygment_styles colorful > site_media/css/pygments.css\n\nIn additon to this single scheme method, the command also accepts the ``--all``\nflag, which will generate styles for all available, but with one key\ndifference: each scheme is prefixed with its name as a css class name. This\nis handy during theme development as you can quickly switch pygments schemes\njust by setting the class on the body tag to your choice of scheme without\nhaving to regenerate css files constantly.\n\nOnce you've got a css file generated, simply add it to your site's base\ntemplate to get your code \"pretty\" printed.\n\n\nUpdating Theme Templates\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThemes that were based on the default theme and were created prior to \n**Mezzanine's 0.11.3 release** will most likely not have the ``richtext_filter``\napplied to *rich content*. To correct this, you simply have to update the \ntemplates for these content types so that the filter is used.\n\nFor example, in the default theme, the \n``templates/blog/blog_post_detail.html`` had a line that  was updated from: ::\n\n    {{ blog_post.content|safe }}\n\nto: ::\n\n    {{ blog_post.content|richtext_filter|safe }}\n\nJust ensure that the ``safe`` filter comes after the ``richtext_filter``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/onelson/mezzanine-mdown/", "keywords": "django,mezzanine,markdown,wmd", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mezzanine-mdown", "package_url": "https://pypi.org/project/mezzanine-mdown/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mezzanine-mdown/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/onelson/mezzanine-mdown/"}, "release_url": "https://pypi.org/project/mezzanine-mdown/0.1a3/", "requires_dist": null, "requires_python": null, "summary": "Markdown for RichText content in Mezzanine.", "version": "0.1a3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides widgets and filters for mezzanine that enable admins\nto use markdown formatting to create their site content, rather than using\nthe tinymce editor to generate html used in <em>rich content</em> types, such as\n<em>rich pages</em> and <em>blog posts</em>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"get-the-package\">\n<h3>Get the package</h3>\n<p>pip:</p>\n<pre>user@home:~$ pip install mezzanine-mdown\n</pre>\n<p>easy_install:</p>\n<pre>user@home:~$ easy_install mezzanine-mdown\n</pre>\n</div>\n<div id=\"prep-the-static-media\">\n<h3>Prep the static media</h3>\n<p>Using the excellent\n<a href=\"http://pypi.python.org/pypi/django-staticfiles\" rel=\"nofollow\">staticfiles</a> app, mdown\u2019s\nstatic files should get picked up automatically.</p>\n<p>If the staticfiles app is not your style, you\u2019ll need to locate the install\nlocation for the <tt>mdown</tt> package (usually your python interpreter\u2019s\n<tt><span class=\"pre\">site-packages</span></tt> directory) and copy/symlink <tt>mdown/static/mdown</tt> into your\nproject <tt>site_media</tt> directory.</p>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>First off, add <tt>mdown</tt> to your list of <tt>INSTALLED_APPS</tt> in your project settings module.</p>\n<p>With the app installed, you need to make a couple choices. You\u2019ll have to\nspecify the <tt>RICHTEXT_WIDGET_CLASS</tt> and <tt>RICHTEXT_FILTER</tt> values in your\nsettings module.</p>\n<div id=\"richtext-widget-class\">\n<h3>RICHTEXT_WIDGET_CLASS</h3>\n<p>This package provides 2 options for this setting.</p>\n<dl>\n<dt><strong>mdown.forms.WmdWidget</strong></dt>\n<dd><em>Activates the WMD rich text editor.</em> <strong>(recommended)</strong></dd>\n<dt><strong>mdown.forms.PlainWidget</strong></dt>\n<dd><em>Use a plain Textarea (no rich text editor).</em></dd>\n</dl>\n</div>\n<div id=\"richtext-filter\">\n<h3>RICHTEXT_FILTER</h3>\n<p>Again, there are 2 options for this setting.</p>\n<dl>\n<dt><strong>mdown.filters.codehilite</strong></dt>\n<dd><em>Renders the content using markdown with the\ncodehilite extension enabled.</em></dd>\n<dt><strong>mdown.filters.plain</strong></dt>\n<dd><em>Renders the content using vanilla markdown formatting.</em></dd>\n</dl>\n</div>\n</div>\n<div id=\"extra-steps\">\n<h2>Extra Steps</h2>\n<div id=\"pygments-styles\">\n<h3>Pygments Styles</h3>\n<p>Using the management command <tt>pygments_styles</tt> you can generate css to\ncolorize code blocks parsed by the codehilite filter.</p>\n<p><strong>Note:</strong> this requires pygments to be installed (use <tt>pip install pygments</tt>\nor <tt>easy_install pygments</tt> to use this feature).</p>\n<p>Invoke the command with no args to see a usage message and list of available\ncolor schemes on your system.:</p>\n<pre>user@home:~/mysite$ ./manage.py pygments_styles\nUsage: ./manage.py pygments_styles &lt;scheme_name&gt;\nAvailable color schemes:\n  borland\n  bw\n  colorful\n  default\n  ... [ snip ] ...\n</pre>\n<p>Invoking with the scheme\u2019s name as an argument will print the css to stdout, which you can\nredirect to a file like so:</p>\n<pre>user@home:~/mysite$ ./manage.py pygment_styles colorful &gt; site_media/css/pygments.css\n</pre>\n<p>In additon to this single scheme method, the command also accepts the <tt><span class=\"pre\">--all</span></tt>\nflag, which will generate styles for all available, but with one key\ndifference: each scheme is prefixed with its name as a css class name. This\nis handy during theme development as you can quickly switch pygments schemes\njust by setting the class on the body tag to your choice of scheme without\nhaving to regenerate css files constantly.</p>\n<p>Once you\u2019ve got a css file generated, simply add it to your site\u2019s base\ntemplate to get your code \u201cpretty\u201d printed.</p>\n</div>\n<div id=\"updating-theme-templates\">\n<h3>Updating Theme Templates</h3>\n<p>Themes that were based on the default theme and were created prior to\n<strong>Mezzanine\u2019s 0.11.3 release</strong> will most likely not have the <tt>richtext_filter</tt>\napplied to <em>rich content</em>. To correct this, you simply have to update the\ntemplates for these content types so that the filter is used.</p>\n<p>For example, in the default theme, the\n<tt>templates/blog/blog_post_detail.html</tt> had a line that  was updated from:</p>\n<pre>{{ blog_post.content|safe }}\n</pre>\n<p>to:</p>\n<pre>{{ blog_post.content|richtext_filter|safe }}\n</pre>\n<p>Just ensure that the <tt>safe</tt> filter comes after the <tt>richtext_filter</tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 640477, "releases": {"0.1a": [{"comment_text": "", "digests": {"md5": "9be679ca55905660fe8c0edce6938156", "sha256": "d4eec20e5dbd245650be2d8ba85f635bccbd0684dd8519d148e7d039b4629894"}, "downloads": -1, "filename": "mezzanine-mdown-0.1a.tar.gz", "has_sig": false, "md5_digest": "9be679ca55905660fe8c0edce6938156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59160, "upload_time": "2011-06-14T04:13:40", "upload_time_iso_8601": "2011-06-14T04:13:40.367158Z", "url": "https://files.pythonhosted.org/packages/83/24/b449269a17858af8c69095191b125ea7043d3a10c401753dd8307e73be6d/mezzanine-mdown-0.1a.tar.gz", "yanked": false}], "0.1a1": [{"comment_text": "", "digests": {"md5": "7eee84aeefcf1f654eecce10db4fa862", "sha256": "54f068f9e6ac330c6921022e7c5647316080e548a4fdd0ea21938956afa45a79"}, "downloads": -1, "filename": "mezzanine-mdown-0.1a1.tar.gz", "has_sig": false, "md5_digest": "7eee84aeefcf1f654eecce10db4fa862", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59149, "upload_time": "2011-06-14T04:45:26", "upload_time_iso_8601": "2011-06-14T04:45:26.669987Z", "url": "https://files.pythonhosted.org/packages/9c/d8/6c02d913b2105fd9cc1eb695c46d6e8b6b010016ca9aec70e60488545c91/mezzanine-mdown-0.1a1.tar.gz", "yanked": false}], "0.1a3": [{"comment_text": "", "digests": {"md5": "71e92b52a78c8d360f8640b92eb73779", "sha256": "1daf0bd8173ca9cd444777769a08fe0894543c05f507747b2828b6e0254dee48"}, "downloads": -1, "filename": "mezzanine-mdown-0.1a3.tar.gz", "has_sig": false, "md5_digest": "71e92b52a78c8d360f8640b92eb73779", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58706, "upload_time": "2011-06-14T15:08:23", "upload_time_iso_8601": "2011-06-14T15:08:23.950046Z", "url": "https://files.pythonhosted.org/packages/ba/0c/491485819ac9a5fd4d77d9e2f6d9b4cf2e9a5f3fbd466c0ce2a1a4a7f337/mezzanine-mdown-0.1a3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71e92b52a78c8d360f8640b92eb73779", "sha256": "1daf0bd8173ca9cd444777769a08fe0894543c05f507747b2828b6e0254dee48"}, "downloads": -1, "filename": "mezzanine-mdown-0.1a3.tar.gz", "has_sig": false, "md5_digest": "71e92b52a78c8d360f8640b92eb73779", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58706, "upload_time": "2011-06-14T15:08:23", "upload_time_iso_8601": "2011-06-14T15:08:23.950046Z", "url": "https://files.pythonhosted.org/packages/ba/0c/491485819ac9a5fd4d77d9e2f6d9b4cf2e9a5f3fbd466c0ce2a1a4a7f337/mezzanine-mdown-0.1a3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:33 2020"}