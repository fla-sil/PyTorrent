{"info": {"author": "Yuanhua Huang", "author_email": "yuanhua@ebi.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "=======\ncellSNP\n=======\n\n|PyPI| |Build Status|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/cellSNP.svg\n    :target: https://pypi.org/project/cellSNP\n.. |Build Status| image:: https://travis-ci.org/huangyh09/cellSNP.svg?branch=master\n   :target: https://travis-ci.org/huangyh09/cellSNP\n\ncellSNP aims to pileup the expressed alleles in single-cell or bulk RNA-seq \ndata, which can be directly used for donor deconvolution in multiplexed \nsingle-cell RNA-seq data, particularly with vireo_, which assigns cells to \ndonors and detects doublets, even without genotyping reference.\n\ncellSNP heavily depends on pysam_, a Python interface for samtools and bcftools. \nThis program should give very similar results as samtools/bcftools mpileup. \nAlso, there are two major differences comparing to bcftools mpileup:\n\n1. cellSNP can pileup either the whole genome or a list of positions, with \n   directly splitting into a list of cell barcodes, e.g., for 10x genome. With \n   bcftools, you may need to manipulate the RG tag in the bam file if you want \n   to divide reads into cell barcode groups.\n2. cellSNP uses simple filtering for outputting SNPs, i.e., total UMIs or counts\n   and minor alleles fractions. The idea here is to keep most information of \n   SNPs and the downstream statistical model can take the full use of it.\n\n\nInstallation\n------------\n\ncellSNP is available through `pypi`_. To install, type the following command \nline, and add ``-U`` for upgrading:\n\n.. code-block:: bash\n\n  pip install cellSNP\n\nAlternatively, you can download or clone this repository and type \n``python setup.py install`` to install. In either case, add ``--user`` if you \ndon't have the permission as a root or for your Python environment.\n\nFrom v0.1.0, cellSNP requires pysam>=0.15.2, so make sure you are using \nthe right version of `pysam`. Try `pip uninstall pysam` and then reinstall \n`pip install -U pysam`\n\n\nQuick usage\n-----------\n\n**Note1**, cellSNP now support save data into sparse matrices. When genotyping \nat single cell level (mode 1 or 2), please use `-O OUT_DIR` instead of \n`-o OUT_FILE.vcf.gz`, though the latter is still supported.\n\n**Note2**, by default, cellSNP count UMIs instead of reads. If your bam file \ndoesn't have UMIs, please add ``--UMItag None``.\n\nOnce installed, check all arguments by type ``cellSNP -h`` (see a snapshot_)\nThere are three modes of cellSNP:\n\n* **Mode 1: pileup a list of SNPs for single cells in a big BAM/SAM file**\n\nRequire: a single BAM/SAM file, e.g., from cellranger, a VCF file for \na list of common SNPs. This mode is recommended comparing to mode 2, if a \nlist of common SNP is known, e.g., human (see Candidate SNPs below)\n\n.. code-block:: bash\n\n  cellSNP -s $BAM -b $BARCODE -O $OUT_DIR -R $REGION_VCF -p 20 --minMAF 0.1 --minCOUNT 20\n  \nAs shown in the above command line, we recommend filtering SNPs with <20UMIs  \nor <10% minor alleles for downstream donor deconvolution, by adding \n``--minMAF 0.1 --minCOUNT 20``\n\n\n* **Mode 2: pileup the whole genome for single cells in a big BAM/SAM file**\n\n.. code-block:: bash\n\n  cellSNP -s $BAM -b $BARCODE -O $OUT_DIR -p 22 --minMAF 0.1 --minCOUNT 100\n  \nRecommend filtering SNPs with <100UMIs or <10% minor alleles for saving space\nand speed up inference when pileup whole genome: ``--minMAF 0.1 --minCOUNT 100``\n\nNote, this mode may output false positive SNPs, for example somatic variants or \nfalses caussed by RNA editing. These false SNPs are probably not consistent in \nall cells within one individual, hence confounding the demultiplexing. \nNevertheless, for species, e.g., zebrafish, without a good list of common SNPs, \nthis strategy is still worth a good try, and it does not take much more time \nthan mode 1.\n\n* **Mode 3: pileup a list of SNPs for one or multiple bulk BAM/SAM files**\n\nRequire: one or multiple BAM/SAM files, their according sample ids, and a VCF \nfile for a list of common SNPs.\n\n.. code-block:: bash\n\n  cellSNP -s $BAM1,$BAM2,$BAM3 -I sample_id1,sample_id2,sample_id3 -o $OUT_FILE -R $REGION_VCF -p 20\n  \nSet filtering thresholds according to the downstream analysis. Please add \n``--UMItag None`` if you bam file does not have UMIs, e.g., smart-seq and bulk \nRNA-seq.\n\n\nList of candidate SNPs\n----------------------\n\nA quality list of candidate SNPs (ususally common SNPs) are important for mode 1\nand mode 3. If a list of genotyped SNPs is available, it can be used to pile up.\nAlternatively, for human, common SNPs in population that have been idenetified \nfrom consortiums can also be very good candidates, e.g., gnomAD_ and \n1000_Genome_Project_. For the latter, we have compiled a list of 37 million \ncommon variants with this bash script_ and stored in this folder_.\n\nIn case you want to lift over SNP positions in vcf file from one genome build \nto another, see our `LiftOver_vcf`_ wrap function.\n\n\nFAQ and releases\n----------------\nFor troubleshooting, please have a look of `FAQ.rst`_, and we welcome reporting \nany issue_.\n\nAll releases are included in pypi_. Notes for each release are recorded in\n`release.rst`_.\n\n\n.. _vireo: https://github.com/huangyh09/vireo\n.. _snapshot: https://github.com/huangyh09/cellSNP/blob/master/doc/manual.rst\n.. _pysam: https://github.com/pysam-developers/pysam\n.. _pypi: https://pypi.org/project/cellSNP/\n.. _gnomAD: http://gnomad.broadinstitute.org\n.. _1000_Genome_Project: http://www.internationalgenome.org\n.. _script: https://github.com/huangyh09/cellSNP/blob/master/SNPlist_1Kgenome.sh\n.. _folder: https://sourceforge.net/projects/cellsnp/files/SNPlist/\n.. _LiftOver_vcf: https://github.com/huangyh09/cellSNP/tree/master/liftOver\n.. _release.rst: https://github.com/huangyh09/cellSNP/blob/master/doc/release.rst\n.. _FAQ.rst: https://github.com/huangyh09/cellSNP/blob/master/doc/FAQ.rst\n.. _issue: https://github.com/huangyh09/cellSNP/issues", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/huangyh09/cellSNP", "keywords": "allelic expression,single-cell RNA-seq", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "cellSNP", "package_url": "https://pypi.org/project/cellSNP/", "platform": "", "project_url": "https://pypi.org/project/cellSNP/", "project_urls": {"Homepage": "https://github.com/huangyh09/cellSNP"}, "release_url": "https://pypi.org/project/cellSNP/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "cellSNP - Analysis of expressed alleles in single cells", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/cellSNP\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b252061c176fc04e96ce99b87c123fe9dd72d30c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63656c6c534e502e737667\"></a> <a href=\"https://travis-ci.org/huangyh09/cellSNP\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df42ef75e9bffee5d0cea3223856a0dc65a2343f/68747470733a2f2f7472617669732d63692e6f72672f6875616e67796830392f63656c6c534e502e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>cellSNP aims to pileup the expressed alleles in single-cell or bulk RNA-seq\ndata, which can be directly used for donor deconvolution in multiplexed\nsingle-cell RNA-seq data, particularly with <a href=\"https://github.com/huangyh09/vireo\" rel=\"nofollow\">vireo</a>, which assigns cells to\ndonors and detects doublets, even without genotyping reference.</p>\n<p>cellSNP heavily depends on <a href=\"https://github.com/pysam-developers/pysam\" rel=\"nofollow\">pysam</a>, a Python interface for samtools and bcftools.\nThis program should give very similar results as samtools/bcftools mpileup.\nAlso, there are two major differences comparing to bcftools mpileup:</p>\n<ol>\n<li>cellSNP can pileup either the whole genome or a list of positions, with\ndirectly splitting into a list of cell barcodes, e.g., for 10x genome. With\nbcftools, you may need to manipulate the RG tag in the bam file if you want\nto divide reads into cell barcode groups.</li>\n<li>cellSNP uses simple filtering for outputting SNPs, i.e., total UMIs or counts\nand minor alleles fractions. The idea here is to keep most information of\nSNPs and the downstream statistical model can take the full use of it.</li>\n</ol>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>cellSNP is available through <a href=\"https://pypi.org/project/cellSNP/\" rel=\"nofollow\">pypi</a>. To install, type the following command\nline, and add <tt><span class=\"pre\">-U</span></tt> for upgrading:</p>\n<pre>pip install cellSNP\n</pre>\n<p>Alternatively, you can download or clone this repository and type\n<tt>python setup.py install</tt> to install. In either case, add <tt><span class=\"pre\">--user</span></tt> if you\ndon\u2019t have the permission as a root or for your Python environment.</p>\n<p>From v0.1.0, cellSNP requires pysam&gt;=0.15.2, so make sure you are using\nthe right version of <cite>pysam</cite>. Try <cite>pip uninstall pysam</cite> and then reinstall\n<cite>pip install -U pysam</cite></p>\n</div>\n<div id=\"quick-usage\">\n<h2>Quick usage</h2>\n<p><strong>Note1</strong>, cellSNP now support save data into sparse matrices. When genotyping\nat single cell level (mode 1 or 2), please use <cite>-O OUT_DIR</cite> instead of\n<cite>-o OUT_FILE.vcf.gz</cite>, though the latter is still supported.</p>\n<p><strong>Note2</strong>, by default, cellSNP count UMIs instead of reads. If your bam file\ndoesn\u2019t have UMIs, please add <tt><span class=\"pre\">--UMItag</span> None</tt>.</p>\n<p>Once installed, check all arguments by type <tt>cellSNP <span class=\"pre\">-h</span></tt> (see a <a href=\"https://github.com/huangyh09/cellSNP/blob/master/doc/manual.rst\" rel=\"nofollow\">snapshot</a>)\nThere are three modes of cellSNP:</p>\n<ul>\n<li><strong>Mode 1: pileup a list of SNPs for single cells in a big BAM/SAM file</strong></li>\n</ul>\n<p>Require: a single BAM/SAM file, e.g., from cellranger, a VCF file for\na list of common SNPs. This mode is recommended comparing to mode 2, if a\nlist of common SNP is known, e.g., human (see Candidate SNPs below)</p>\n<pre>cellSNP -s <span class=\"nv\">$BAM</span> -b <span class=\"nv\">$BARCODE</span> -O <span class=\"nv\">$OUT_DIR</span> -R <span class=\"nv\">$REGION_VCF</span> -p <span class=\"m\">20</span> --minMAF <span class=\"m\">0</span>.1 --minCOUNT <span class=\"m\">20</span>\n</pre>\n<p>As shown in the above command line, we recommend filtering SNPs with &lt;20UMIs\nor &lt;10% minor alleles for downstream donor deconvolution, by adding\n<tt><span class=\"pre\">--minMAF</span> 0.1 <span class=\"pre\">--minCOUNT</span> 20</tt></p>\n<ul>\n<li><strong>Mode 2: pileup the whole genome for single cells in a big BAM/SAM file</strong></li>\n</ul>\n<pre>cellSNP -s <span class=\"nv\">$BAM</span> -b <span class=\"nv\">$BARCODE</span> -O <span class=\"nv\">$OUT_DIR</span> -p <span class=\"m\">22</span> --minMAF <span class=\"m\">0</span>.1 --minCOUNT <span class=\"m\">100</span>\n</pre>\n<p>Recommend filtering SNPs with &lt;100UMIs or &lt;10% minor alleles for saving space\nand speed up inference when pileup whole genome: <tt><span class=\"pre\">--minMAF</span> 0.1 <span class=\"pre\">--minCOUNT</span> 100</tt></p>\n<p>Note, this mode may output false positive SNPs, for example somatic variants or\nfalses caussed by RNA editing. These false SNPs are probably not consistent in\nall cells within one individual, hence confounding the demultiplexing.\nNevertheless, for species, e.g., zebrafish, without a good list of common SNPs,\nthis strategy is still worth a good try, and it does not take much more time\nthan mode 1.</p>\n<ul>\n<li><strong>Mode 3: pileup a list of SNPs for one or multiple bulk BAM/SAM files</strong></li>\n</ul>\n<p>Require: one or multiple BAM/SAM files, their according sample ids, and a VCF\nfile for a list of common SNPs.</p>\n<pre>cellSNP -s <span class=\"nv\">$BAM1</span>,<span class=\"nv\">$BAM2</span>,<span class=\"nv\">$BAM3</span> -I sample_id1,sample_id2,sample_id3 -o <span class=\"nv\">$OUT_FILE</span> -R <span class=\"nv\">$REGION_VCF</span> -p <span class=\"m\">20</span>\n</pre>\n<p>Set filtering thresholds according to the downstream analysis. Please add\n<tt><span class=\"pre\">--UMItag</span> None</tt> if you bam file does not have UMIs, e.g., smart-seq and bulk\nRNA-seq.</p>\n</div>\n<div id=\"list-of-candidate-snps\">\n<h2>List of candidate SNPs</h2>\n<p>A quality list of candidate SNPs (ususally common SNPs) are important for mode 1\nand mode 3. If a list of genotyped SNPs is available, it can be used to pile up.\nAlternatively, for human, common SNPs in population that have been idenetified\nfrom consortiums can also be very good candidates, e.g., <a href=\"http://gnomad.broadinstitute.org\" rel=\"nofollow\">gnomAD</a> and\n<a href=\"http://www.internationalgenome.org\" rel=\"nofollow\">1000_Genome_Project</a>. For the latter, we have compiled a list of 37 million\ncommon variants with this bash <a href=\"https://github.com/huangyh09/cellSNP/blob/master/SNPlist_1Kgenome.sh\" rel=\"nofollow\">script</a> and stored in this <a href=\"https://sourceforge.net/projects/cellsnp/files/SNPlist/\" rel=\"nofollow\">folder</a>.</p>\n<p>In case you want to lift over SNP positions in vcf file from one genome build\nto another, see our <a href=\"https://github.com/huangyh09/cellSNP/tree/master/liftOver\" rel=\"nofollow\">LiftOver_vcf</a> wrap function.</p>\n</div>\n<div id=\"faq-and-releases\">\n<h2>FAQ and releases</h2>\n<p>For troubleshooting, please have a look of <a href=\"https://github.com/huangyh09/cellSNP/blob/master/doc/FAQ.rst\" rel=\"nofollow\">FAQ.rst</a>, and we welcome reporting\nany <a href=\"https://github.com/huangyh09/cellSNP/issues\" rel=\"nofollow\">issue</a>.</p>\n<p>All releases are included in <a href=\"https://pypi.org/project/cellSNP/\" rel=\"nofollow\">pypi</a>. Notes for each release are recorded in\n<a href=\"https://github.com/huangyh09/cellSNP/blob/master/doc/release.rst\" rel=\"nofollow\">release.rst</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5929689, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "8c2af55abbb1a81aa02568de6423c447", "sha256": "66e01ede8b68f69bcc6293e05e8345c1e315feda55c3f03399fbf78e9febfff9"}, "downloads": -1, "filename": "cellSNP-0.0.6.tar.gz", "has_sig": false, "md5_digest": "8c2af55abbb1a81aa02568de6423c447", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9855, "upload_time": "2018-09-29T09:19:05", "upload_time_iso_8601": "2018-09-29T09:19:05.169188Z", "url": "https://files.pythonhosted.org/packages/1d/38/44d745500aaaa2b67de42f3e3baee579d3380a0d98d8895d0ba7302dd227/cellSNP-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "88f5ae3784a3bd3a54a343616fb9b204", "sha256": "ad172a748a8a6d7f1283ceffc4760d1edc34ea77d3e2f3185cca88451eaf4e6b"}, "downloads": -1, "filename": "cellSNP-0.0.7.tar.gz", "has_sig": false, "md5_digest": "88f5ae3784a3bd3a54a343616fb9b204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9956, "upload_time": "2018-10-04T21:29:41", "upload_time_iso_8601": "2018-10-04T21:29:41.780442Z", "url": "https://files.pythonhosted.org/packages/5a/76/935ac6240821ea8c2044beefa17f39053f7e4d31da2a8f8e76be0737ba9a/cellSNP-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "af47271e18afac5b319fc172fb124cf1", "sha256": "c83277a0f17f5ba8d4855b975f8e5051638d81fa011ad16422dc890aee0b8bc5"}, "downloads": -1, "filename": "cellSNP-0.0.8.tar.gz", "has_sig": false, "md5_digest": "af47271e18afac5b319fc172fb124cf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10721, "upload_time": "2018-12-21T16:34:47", "upload_time_iso_8601": "2018-12-21T16:34:47.530305Z", "url": "https://files.pythonhosted.org/packages/2d/54/a4c48c9f678e78a9a53b4c3d9cc4440a72ebc8f74ea380b4b47a311baa25/cellSNP-0.0.8.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "66ccd52065ff635ccf928ec6d3ccce8a", "sha256": "ef23e8b6d71854c65a2a74846a7c9e1ce671440cfd2cea377d131a94e5f39a7b"}, "downloads": -1, "filename": "cellSNP-0.1.0.tar.gz", "has_sig": false, "md5_digest": "66ccd52065ff635ccf928ec6d3ccce8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12570, "upload_time": "2019-06-07T09:16:37", "upload_time_iso_8601": "2019-06-07T09:16:37.484654Z", "url": "https://files.pythonhosted.org/packages/ba/dd/d4ef786d1dd6fff7b3f3c4ab9237e1b002d9fbbffdeaebe58feaa5e96597/cellSNP-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a8392dbae8619d58f0f5badc6aa56cb7", "sha256": "49ec2969ae4d448171803227776ffb6698fa856370ec05c7dc30c4b8501cfb51"}, "downloads": -1, "filename": "cellSNP-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a8392dbae8619d58f0f5badc6aa56cb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13730, "upload_time": "2019-06-09T08:33:08", "upload_time_iso_8601": "2019-06-09T08:33:08.067748Z", "url": "https://files.pythonhosted.org/packages/fe/56/90537888977cc4036d316305620a85b8756eda0a25df513a047cca151020/cellSNP-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d0c86f1eb21071fa58e359ad5a6e43f6", "sha256": "864d442798861fdded91b9ff1b3376ed2ae0fdfc6607dd8750ea7d92471f1dfe"}, "downloads": -1, "filename": "cellSNP-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d0c86f1eb21071fa58e359ad5a6e43f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13772, "upload_time": "2019-06-10T14:59:38", "upload_time_iso_8601": "2019-06-10T14:59:38.353555Z", "url": "https://files.pythonhosted.org/packages/02/30/d3944f735f40b6c0c2883810e1673320cdd84cec27658ed2c6762dc13314/cellSNP-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bb119df19ebb08cb9a0ce20371197b80", "sha256": "bdc30f747c88d20f3ab77f0bb39d84c67dc1650904c93a13ad72a80d10f1c735"}, "downloads": -1, "filename": "cellSNP-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bb119df19ebb08cb9a0ce20371197b80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13821, "upload_time": "2019-06-12T12:18:59", "upload_time_iso_8601": "2019-06-12T12:18:59.389146Z", "url": "https://files.pythonhosted.org/packages/47/7b/d220f23bfab8040d35287df7f416a1bcd3f0b39bc04b150691d18af4c7d4/cellSNP-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a5b4cf3b0226c665c1eb2b5f49eddfca", "sha256": "91e4904ef3fd1773ba3c790dc8e6b2987215ccf87d7b130ac21a8ab397c81f6a"}, "downloads": -1, "filename": "cellSNP-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a5b4cf3b0226c665c1eb2b5f49eddfca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13890, "upload_time": "2019-06-24T10:41:30", "upload_time_iso_8601": "2019-06-24T10:41:30.768352Z", "url": "https://files.pythonhosted.org/packages/22/e5/8759d0193a2fd33393497e5f4d083e6d30c40cd3b28da813b86f9234a5e1/cellSNP-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "97e88999f2a36d515d5cd7431f25c92c", "sha256": "550e1009cc2af2dc80dd0ad03981d0f286f74f5c86d470f665ea71ec4ed84d3b"}, "downloads": -1, "filename": "cellSNP-0.1.5.tar.gz", "has_sig": false, "md5_digest": "97e88999f2a36d515d5cd7431f25c92c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15862, "upload_time": "2019-07-02T11:14:32", "upload_time_iso_8601": "2019-07-02T11:14:32.484088Z", "url": "https://files.pythonhosted.org/packages/de/da/9b50a9a95841b7c92c56104a6ac3d836036c207947b8c541ac80120fa9a7/cellSNP-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "d297e9119c40fe3ab058e47c700ed5a7", "sha256": "9efe9d4dc1874e9d3b3c5decbb982b94805ea6da4959b5fec464e45d8e5ef680"}, "downloads": -1, "filename": "cellSNP-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d297e9119c40fe3ab058e47c700ed5a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15217, "upload_time": "2019-07-14T10:28:03", "upload_time_iso_8601": "2019-07-14T10:28:03.641924Z", "url": "https://files.pythonhosted.org/packages/c9/bc/b3413ff8d1fbfaf1178fef647161c06194115b77e586ed0ef2c465dadc3a/cellSNP-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c7fa4ab10763ab4204d1372ba378f2dd", "sha256": "dad0e157da312b347cad55ebbe4a79a4c2a0b9af7dcf7c38be79ca4726f84709"}, "downloads": -1, "filename": "cellSNP-0.1.7.tar.gz", "has_sig": false, "md5_digest": "c7fa4ab10763ab4204d1372ba378f2dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17941, "upload_time": "2019-10-04T18:40:29", "upload_time_iso_8601": "2019-10-04T18:40:29.572912Z", "url": "https://files.pythonhosted.org/packages/89/76/d7b10d81abcc555610ce71a3dc6ef7b38b9cd8b5de3e4b0531c256b2ce2e/cellSNP-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7fa4ab10763ab4204d1372ba378f2dd", "sha256": "dad0e157da312b347cad55ebbe4a79a4c2a0b9af7dcf7c38be79ca4726f84709"}, "downloads": -1, "filename": "cellSNP-0.1.7.tar.gz", "has_sig": false, "md5_digest": "c7fa4ab10763ab4204d1372ba378f2dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17941, "upload_time": "2019-10-04T18:40:29", "upload_time_iso_8601": "2019-10-04T18:40:29.572912Z", "url": "https://files.pythonhosted.org/packages/89/76/d7b10d81abcc555610ce71a3dc6ef7b38b9cd8b5de3e4b0531c256b2ce2e/cellSNP-0.1.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:49 2020"}