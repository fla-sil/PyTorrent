{"info": {"author": "HubbleHQ", "author_email": "dev@hubblehq.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Hubble Shuttle \ud83d\ude80\n\n[![CircleCI build status](https://circleci.com/gh/HubbleHQ/shuttle.svg?style=svg&circle-token=db1939f52993f462688a0a10ffa554b41ef1211b)](https://circleci.com/gh/HubbleHQ/shuttle)\n\n> Note: This project is pre-1.0 release. We are still working on integrating it in production\n> systems here at HubbleHQ, and as a result, the API is not stable and might change before\n> 1.0 release. This also means that not all HTTP features are currently supported (for example,\n> cookies), but we are actively adding support for these.\n\nHubble Shuttle is an abstraction layer that makes it easy to write REST API clients.\n\nIt enbraces convention over configuration, and abstracts a lot of common patterns to simplify\nwriting API clients.\n\nFor example, writing a simple client for a sample user service is as simple as:\n\n```python\nclass UserAPI(ShuttleAPI):\n\n    api_endpoint = \"https://user-service.example.com/\"\n    query = {\n        \"api_key\": \"my_api_key\"\n    }\n\n    def get_user(self, user_id):\n        # Returns a dict object `{ \"id\": 123, ... }`\n        return self.http_get(f\"/users/{user_id}\").data\n```\n\nShuttle will take care of building the full URL of the resource, inject API keys,\nparse the response from the server based on content type, extracts the response based\non content encoding, and handles HTTP and networking errors.\n\n## Installation\n\n```\npip install hubble_shuttle\n```\n\n### Supported Python versions\n\nShuttle is build and tested with Python 3.5, 3.6, 3.7, and 3.8.\n\n## Client-level configuration\n\nCreating an API client only requires you to extend the `ShuttleAPI` class, and provide some configuration\nparameters:\n\n```python\nclass MyClientAPI(ShuttleAPI):\n\n    # The root endpoint for our API.\n    api_endpoint = \"https://myservice/\"\n\n    # Headers to send with every request to the API, for example, authorization headers.\n    headers = {\n      \"Header-Name\": \"header value\"\n    }\n\n    # Query parameters to send with every request to the API, for example, API keys.\n    query = {\n      \"query_param\": \"param value\"\n    }\n\n```\n\n## Making HTTP requests\n\nThe `ShuttleAPI` class provides methods to allow you to make HTTP requests against you API, in\nthe form of `http_X` instance methods, where `X` is the HTTP verb you'd like to use.\n\nA simple GET request can be made like so:\n\n```python\ndef get_user(self, user_id):\n    response = self.http_get(f\"/users/{id}\")\n    return response.data\n```\n\nIf the HTTP server returns a successful (2xx) status code, the `http_X` methods will return a response object. If\nthe server returns a client error (4xx) or server error (5xx), the `http_X` methods will raise a `HTTPError`.\n\nWhen making an individual request, it is possible to override any client-level header or query parameter that\nwas set on the class. For example:\n\n```python\nclass ConflictingHeaderAPI(ShuttleAPI):\n\n    api_endpoint = \"https://user-service.example.com/\"\n    headers = { \"Authorization\": \"Bearer default_api_key\" }\n\n    def get_user_profile(self, user_auth_token):\n        # The request will contain the user_auth_token, overriding the default set at the client level\n        return self.http_get(\"/me\", headers={ \"Authorization\": f\"Bearer {user_auth_token}\" })\n\n```\n\n### Sending a request body\n\nWhen making a POST, PUT, or PATCH request, it is possible to embed a request body. The request\nbody will be automatically encoded based on request content type, if it is set. If the content\ntype isn't explicitely set, `application/x-www-form-urlencoded` is used as a default.\n\n```python\ndef create_user(self):\n    # Sends a POST request to `/users` with body `username=foo&email=foo@example.com`\n    self.http_post(\"/users\", data={\"username\": \"foo\", \"email\": \"foo@example.com\"})\n```\n\nYou can also send the body in another format if you prefer:\n\n```python\ndef create_user(self):\n    # Sends a POST request to `/users` with body `{\"username\":\"foo\",\"email\":\"foo@example.com\"}`\n    self.http_post(\"/users\", content_type=\"application/json\", data={\"username\": \"foo\", \"email\": \"foo@example.com\"})\n```\n\nShuttle supports the following content types for sending a request body:\n* `application/x-www-form-urlencoded` (default)\n* `application/json`\n\nSpecifying an unknown content type will result in a `ValueError` being raised.\n\nIf the API you are contacting always expects the request body to be another content type than the\ndefault `application/x-www-form-urlencoded`, it is possible to change it for a whole client too:\n\n```python\nclass UserAPI(ShuttleAPI):\n\n    request_content_type = \"application/json\"\n\n    def create_user(self):\n        # Sends a POST request to `/users` with body `{\"username\":\"foo\",\"email\":\"foo@example.com\"}`\n        self.http_post(\"/users\", data={\"username\": \"foo\", \"email\": \"foo@example.com\"})\n```\n\n\n### Response format\n\nThe response object contains information returned by the HTTP backend. You can access:\n\n* `data`: the body of the HTTP response, parsed based on its content type. Shuttle supports:\n  * `text/plain`: `response.data` will be a Unicode string, containing the response body.\n  * `application/json`: `response.data` will be a Python dict or array representing the JSON object.\n  * For any other content type, Shuttle will return a binary string containing the raw response body.\n* `status_code`: the status code from the HTTP response.\n\n### Error handling\n\nFor any client error (4xx) or server error (5xx) status code, Shuttle will raise an error of type `HTTPError` instead\nof returning a response object.\n\nDepending on the status code, Shuttle will return a subclass of `HTTPError` to make it easier to respond to specific status\ncodes. For example, returning `None` when the server returns a `404 (Not found)` error is straight-forward:\n\n```python\ndef get_user(self, user_id):\n    try:\n        return self.http_get(f\"/users/{id}\").data\n    except NotFoundError:\n        return None\n```\n\nThe errors class tree is as follows:\n* `HTTPError` (representing either 4xx or 5xx HTTP error)\n  * `HTTPClientError` (representing any type of 4xx error)\n    * `BadRequestError` (400 HTTP error)\n    * `NotFoundError` (404 HTTP error)\n  * `HTTPServerError` (representing any type of 5xx error)\n    * `InternalServerError` (500 HTTP error)\n\nFor non-HTTP error (networking, DNS resolution errors, ...), Shuttle will return an `APIError`.\n\nAll errors are in the `hubble_shuttle.exceptions` module.\n\n## Contributing\n\nPull requests in Github are accepted and the best way to contribute to Shuttle.\n\n### Testing\n\nWe require pull requests to have comprehensive tests coverage, and for all the tests to be passing.\n\nTests are run against all the supported Python versions, using Docker. You can run the test suite using Docker:\n```\n# Builds and sets up the Docker containers\nmake dev-build\n\n# Runs the test suite inside Docker\nmake dev-test\n```\n\n### Releasing\n\nWhen Shuttle is ready for a new release, the steps to follow to publish the new version of the package are:\n* Merge all pull requests that need to be part of the release, and switch to the `master` branch. All releases should be made against `master`.\n* Increase the version number in setup.py. We aim to use semantic versioning as closely as possible.\n* Tag the commit you are packaging Shuttle from in Git, with the following format: `release-VERSION`.\n* Push the tags to Github.\n* Run `make dev-package` to create the distribution artifacts.\n* Upload the distribution artifacts to pip.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HubbleHQ/shuttle", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hubble-shuttle", "package_url": "https://pypi.org/project/hubble-shuttle/", "platform": "", "project_url": "https://pypi.org/project/hubble-shuttle/", "project_urls": {"Homepage": "https://github.com/HubbleHQ/shuttle"}, "release_url": "https://pypi.org/project/hubble-shuttle/0.1.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Hubble's Shuttle", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Hubble Shuttle \ud83d\ude80</h1>\n<p><a href=\"https://circleci.com/gh/HubbleHQ/shuttle\" rel=\"nofollow\"><img alt=\"CircleCI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a75c4b0246f13009240e781d4b1fb8daab4872cd/68747470733a2f2f636972636c6563692e636f6d2f67682f487562626c6548512f73687574746c652e7376673f7374796c653d73766726636972636c652d746f6b656e3d64623139333966353239393366343632363838613061313066666135353462343165663132313162\"></a></p>\n<blockquote>\n<p>Note: This project is pre-1.0 release. We are still working on integrating it in production\nsystems here at HubbleHQ, and as a result, the API is not stable and might change before\n1.0 release. This also means that not all HTTP features are currently supported (for example,\ncookies), but we are actively adding support for these.</p>\n</blockquote>\n<p>Hubble Shuttle is an abstraction layer that makes it easy to write REST API clients.</p>\n<p>It enbraces convention over configuration, and abstracts a lot of common patterns to simplify\nwriting API clients.</p>\n<p>For example, writing a simple client for a sample user service is as simple as:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">ShuttleAPI</span><span class=\"p\">):</span>\n\n    <span class=\"n\">api_endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://user-service.example.com/\"</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_api_key\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Returns a dict object `{ \"id\": 123, ... }`</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"/users/</span><span class=\"si\">{</span><span class=\"n\">user_id</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<p>Shuttle will take care of building the full URL of the resource, inject API keys,\nparse the response from the server based on content type, extracts the response based\non content encoding, and handles HTTP and networking errors.</p>\n<h2>Installation</h2>\n<pre><code>pip install hubble_shuttle\n</code></pre>\n<h3>Supported Python versions</h3>\n<p>Shuttle is build and tested with Python 3.5, 3.6, 3.7, and 3.8.</p>\n<h2>Client-level configuration</h2>\n<p>Creating an API client only requires you to extend the <code>ShuttleAPI</code> class, and provide some configuration\nparameters:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyClientAPI</span><span class=\"p\">(</span><span class=\"n\">ShuttleAPI</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># The root endpoint for our API.</span>\n    <span class=\"n\">api_endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://myservice/\"</span>\n\n    <span class=\"c1\"># Headers to send with every request to the API, for example, authorization headers.</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"Header-Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"header value\"</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># Query parameters to send with every request to the API, for example, API keys.</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"query_param\"</span><span class=\"p\">:</span> <span class=\"s2\">\"param value\"</span>\n    <span class=\"p\">}</span>\n</pre>\n<h2>Making HTTP requests</h2>\n<p>The <code>ShuttleAPI</code> class provides methods to allow you to make HTTP requests against you API, in\nthe form of <code>http_X</code> instance methods, where <code>X</code> is the HTTP verb you'd like to use.</p>\n<p>A simple GET request can be made like so:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"/users/</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</pre>\n<p>If the HTTP server returns a successful (2xx) status code, the <code>http_X</code> methods will return a response object. If\nthe server returns a client error (4xx) or server error (5xx), the <code>http_X</code> methods will raise a <code>HTTPError</code>.</p>\n<p>When making an individual request, it is possible to override any client-level header or query parameter that\nwas set on the class. For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ConflictingHeaderAPI</span><span class=\"p\">(</span><span class=\"n\">ShuttleAPI</span><span class=\"p\">):</span>\n\n    <span class=\"n\">api_endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://user-service.example.com/\"</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"Authorization\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bearer default_api_key\"</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_user_profile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_auth_token</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The request will contain the user_auth_token, overriding the default set at the client level</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_get</span><span class=\"p\">(</span><span class=\"s2\">\"/me\"</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"s2\">\"Authorization\"</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"Bearer </span><span class=\"si\">{</span><span class=\"n\">user_auth_token</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"p\">})</span>\n</pre>\n<h3>Sending a request body</h3>\n<p>When making a POST, PUT, or PATCH request, it is possible to embed a request body. The request\nbody will be automatically encoded based on request content type, if it is set. If the content\ntype isn't explicitely set, <code>application/x-www-form-urlencoded</code> is used as a default.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Sends a POST request to `/users` with body `username=foo&amp;email=foo@example.com`</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_post</span><span class=\"p\">(</span><span class=\"s2\">\"/users\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo@example.com\"</span><span class=\"p\">})</span>\n</pre>\n<p>You can also send the body in another format if you prefer:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Sends a POST request to `/users` with body `{\"username\":\"foo\",\"email\":\"foo@example.com\"}`</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_post</span><span class=\"p\">(</span><span class=\"s2\">\"/users\"</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo@example.com\"</span><span class=\"p\">})</span>\n</pre>\n<p>Shuttle supports the following content types for sending a request body:</p>\n<ul>\n<li><code>application/x-www-form-urlencoded</code> (default)</li>\n<li><code>application/json</code></li>\n</ul>\n<p>Specifying an unknown content type will result in a <code>ValueError</code> being raised.</p>\n<p>If the API you are contacting always expects the request body to be another content type than the\ndefault <code>application/x-www-form-urlencoded</code>, it is possible to change it for a whole client too:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">ShuttleAPI</span><span class=\"p\">):</span>\n\n    <span class=\"n\">request_content_type</span> <span class=\"o\">=</span> <span class=\"s2\">\"application/json\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Sends a POST request to `/users` with body `{\"username\":\"foo\",\"email\":\"foo@example.com\"}`</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_post</span><span class=\"p\">(</span><span class=\"s2\">\"/users\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo@example.com\"</span><span class=\"p\">})</span>\n</pre>\n<h3>Response format</h3>\n<p>The response object contains information returned by the HTTP backend. You can access:</p>\n<ul>\n<li><code>data</code>: the body of the HTTP response, parsed based on its content type. Shuttle supports:\n<ul>\n<li><code>text/plain</code>: <code>response.data</code> will be a Unicode string, containing the response body.</li>\n<li><code>application/json</code>: <code>response.data</code> will be a Python dict or array representing the JSON object.</li>\n<li>For any other content type, Shuttle will return a binary string containing the raw response body.</li>\n</ul>\n</li>\n<li><code>status_code</code>: the status code from the HTTP response.</li>\n</ul>\n<h3>Error handling</h3>\n<p>For any client error (4xx) or server error (5xx) status code, Shuttle will raise an error of type <code>HTTPError</code> instead\nof returning a response object.</p>\n<p>Depending on the status code, Shuttle will return a subclass of <code>HTTPError</code> to make it easier to respond to specific status\ncodes. For example, returning <code>None</code> when the server returns a <code>404 (Not found)</code> error is straight-forward:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http_get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"/users/</span><span class=\"si\">{</span><span class=\"nb\">id</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"k\">except</span> <span class=\"n\">NotFoundError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>\n<p>The errors class tree is as follows:</p>\n<ul>\n<li><code>HTTPError</code> (representing either 4xx or 5xx HTTP error)\n<ul>\n<li><code>HTTPClientError</code> (representing any type of 4xx error)\n<ul>\n<li><code>BadRequestError</code> (400 HTTP error)</li>\n<li><code>NotFoundError</code> (404 HTTP error)</li>\n</ul>\n</li>\n<li><code>HTTPServerError</code> (representing any type of 5xx error)\n<ul>\n<li><code>InternalServerError</code> (500 HTTP error)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>For non-HTTP error (networking, DNS resolution errors, ...), Shuttle will return an <code>APIError</code>.</p>\n<p>All errors are in the <code>hubble_shuttle.exceptions</code> module.</p>\n<h2>Contributing</h2>\n<p>Pull requests in Github are accepted and the best way to contribute to Shuttle.</p>\n<h3>Testing</h3>\n<p>We require pull requests to have comprehensive tests coverage, and for all the tests to be passing.</p>\n<p>Tests are run against all the supported Python versions, using Docker. You can run the test suite using Docker:</p>\n<pre><code># Builds and sets up the Docker containers\nmake dev-build\n\n# Runs the test suite inside Docker\nmake dev-test\n</code></pre>\n<h3>Releasing</h3>\n<p>When Shuttle is ready for a new release, the steps to follow to publish the new version of the package are:</p>\n<ul>\n<li>Merge all pull requests that need to be part of the release, and switch to the <code>master</code> branch. All releases should be made against <code>master</code>.</li>\n<li>Increase the version number in setup.py. We aim to use semantic versioning as closely as possible.</li>\n<li>Tag the commit you are packaging Shuttle from in Git, with the following format: <code>release-VERSION</code>.</li>\n<li>Push the tags to Github.</li>\n<li>Run <code>make dev-package</code> to create the distribution artifacts.</li>\n<li>Upload the distribution artifacts to pip.</li>\n</ul>\n\n          </div>"}, "last_serial": 6778130, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e2a282b5440d89ac96814f4100c0d337", "sha256": "eff71d10b67a584a73f0e5ca81efcf2161de4c482bf41fd36795e6b9f65bdde2"}, "downloads": -1, "filename": "hubble_shuttle-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e2a282b5440d89ac96814f4100c0d337", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10521, "upload_time": "2020-03-06T12:17:39", "upload_time_iso_8601": "2020-03-06T12:17:39.617827Z", "url": "https://files.pythonhosted.org/packages/98/1e/33378d2c6f8d2a3da19d3ade5b8908f5b8aa3a29e7a98d37df8e5013f3fe/hubble_shuttle-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ee841fc03033c7adbe4f0c9aa9a8f2a", "sha256": "3770b13e7223fb8859e082d7535e7877699cd888f7daa3ce42dd4df5a9103d18"}, "downloads": -1, "filename": "hubble_shuttle-0.1.tar.gz", "has_sig": false, "md5_digest": "1ee841fc03033c7adbe4f0c9aa9a8f2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11694, "upload_time": "2020-03-06T12:17:42", "upload_time_iso_8601": "2020-03-06T12:17:42.308619Z", "url": "https://files.pythonhosted.org/packages/c0/60/311d70a16de304134b75a1347369d6e283b4a69c6b1aeee68b1b43fb7d12/hubble_shuttle-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b5a4fe80e1b0af43c2a86a96384db488", "sha256": "723366bff65a6094b0ac747556a2be27253188ec6c609950079d2e335e775222"}, "downloads": -1, "filename": "hubble_shuttle-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b5a4fe80e1b0af43c2a86a96384db488", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10711, "upload_time": "2020-03-06T14:19:01", "upload_time_iso_8601": "2020-03-06T14:19:01.889977Z", "url": "https://files.pythonhosted.org/packages/e7/01/4339bdb4be0f3740c919f3d59b6203cd0abf021f93b450965e35e325a5eb/hubble_shuttle-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "027345e0a8c2e088514ae1e25149df5d", "sha256": "878a02b770d0530d7c1408348d9e21b991993ed421839b1c598870aa99ba15e0"}, "downloads": -1, "filename": "hubble_shuttle-0.1.1.tar.gz", "has_sig": false, "md5_digest": "027345e0a8c2e088514ae1e25149df5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11788, "upload_time": "2020-03-06T14:19:03", "upload_time_iso_8601": "2020-03-06T14:19:03.023501Z", "url": "https://files.pythonhosted.org/packages/e7/4f/20be06abbed190209e13736ceee2a20438023e1e1bac8e956ed12693e40b/hubble_shuttle-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d7c180f80d3d66f6157ec0dffa5756fc", "sha256": "9b96e14f92f0bfbe2e9f1f3f3c97fdff99bffa9b399a0603ceeb0411cc31a024"}, "downloads": -1, "filename": "hubble_shuttle-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d7c180f80d3d66f6157ec0dffa5756fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11394, "upload_time": "2020-03-09T16:09:30", "upload_time_iso_8601": "2020-03-09T16:09:30.840424Z", "url": "https://files.pythonhosted.org/packages/fa/74/32e1e6cc1bd0235eb4356aa7e4edbcad4e49ddcab9f175ad7f8844024e8e/hubble_shuttle-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32dcb778ba32d02fa9bb58fd6f076ae7", "sha256": "56289c3c5172f76ab5a53d59b3f376285422c9bcefef5bac7eb27ec5894292a0"}, "downloads": -1, "filename": "hubble_shuttle-0.1.2.tar.gz", "has_sig": false, "md5_digest": "32dcb778ba32d02fa9bb58fd6f076ae7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12132, "upload_time": "2020-03-09T16:09:32", "upload_time_iso_8601": "2020-03-09T16:09:32.444105Z", "url": "https://files.pythonhosted.org/packages/4f/3a/8a9219cd0208a0b442ec2f72673cf847b7408e8ff045dc22d4a5ed9c57f2/hubble_shuttle-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7c180f80d3d66f6157ec0dffa5756fc", "sha256": "9b96e14f92f0bfbe2e9f1f3f3c97fdff99bffa9b399a0603ceeb0411cc31a024"}, "downloads": -1, "filename": "hubble_shuttle-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d7c180f80d3d66f6157ec0dffa5756fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11394, "upload_time": "2020-03-09T16:09:30", "upload_time_iso_8601": "2020-03-09T16:09:30.840424Z", "url": "https://files.pythonhosted.org/packages/fa/74/32e1e6cc1bd0235eb4356aa7e4edbcad4e49ddcab9f175ad7f8844024e8e/hubble_shuttle-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32dcb778ba32d02fa9bb58fd6f076ae7", "sha256": "56289c3c5172f76ab5a53d59b3f376285422c9bcefef5bac7eb27ec5894292a0"}, "downloads": -1, "filename": "hubble_shuttle-0.1.2.tar.gz", "has_sig": false, "md5_digest": "32dcb778ba32d02fa9bb58fd6f076ae7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12132, "upload_time": "2020-03-09T16:09:32", "upload_time_iso_8601": "2020-03-09T16:09:32.444105Z", "url": "https://files.pythonhosted.org/packages/4f/3a/8a9219cd0208a0b442ec2f72673cf847b7408e8ff045dc22d4a5ed9c57f2/hubble_shuttle-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:59 2020"}