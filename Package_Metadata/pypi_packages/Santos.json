{"info": {"author": "Anderson Marques", "author_email": "andersonoanjo18@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Build Tools"], "description": ".. highlight:: rst\n\nUm pouco de hist\u00f3ria\n====================\nEm 1904, cansado da falta de praticidade do rel\u00f3gio de bolso, o modelo\n\"port\u00e1til\" mais comum de sua \u00e9poca,Santos Dumont reclamou para um de\nseus melhores amigos, o joalheiro franc\u00eas Louis Cartier (fundador da joalheira Cartier).\nEsses rel\u00f3gios, como indica o nome, ficavam guardados no bolso e, em muitos modelos,\neram protegidos por uma tampa, o que obrigava a uma consider\u00e1vel manobra para se ver as\nhoras. Para ele, um homem que passava grande parte do tempo dirigindo m\u00e1quinas voadorasou\ntrabalhando em projetos, isso era um problema grave.\n\nSantos Dumont pediu para que Cartier achasse uma sa\u00edda para essa limita\u00e7\u00e3o. Algum tempo\ndepois, o joalheiro presenteou o aviador com a solu\u00e7\u00e3o que havia encontrado:\nO prot\u00f3tipo de um dos primeiros rel\u00f3gios de pulso masculinos, que recebeu o nome \"Santos\".\nEnt\u00e3o deu o nome do rel\u00f3gio para esta lib.\n\n\nSantos\n========\n\nUm agendador de tarefas simples e eficente.\n\nUm agendador para tarefas que precisam ser executados de forma periodica.\nSantos permite a voc\u00ea rodar func\u00f5es e m\u00e9todos Python periodicamente em\nintervalos pr\u00e9-determinados usando uma sintaxe bem simples.\n\nCaracter\u00edsticas\n---------------\n\n- Uma API simples para agendamenro de tarefas.\n- Sem depend\u00eancia external.\n- teste unit\u00e1rio.\n- Testada no Python 2.7 and 3.4\n\nSobre\n-----\n\nSantos permite que voc\u00ea agende a execu\u00e7\u00e3o da alguma tarefa apenas decorando a\nfun\u00e7\u00e3o ou m\u00e9todo como mostrado nos exemplos abaixo.\nOs testes foram feitos nas vers\u00f5es 2.7 e 3.4 do Python.\n\nOs par\u00e2metros aceitos s\u00e3o: name, seconds, minutes, hour, time_of_the_day, day_of_the_week,\nday_of_the_month.\nO Par\u00e2metro name \u00e9 usado para identificar a thread que ser\u00e1 executada, assim \u00e9 poss\u00edvel dar um stop.\nOs par\u00e2metros seconds, minutes e hour definem que a fun\u00e7\u00e3o ou m\u00e9todo ser\u00e1 executado\nrepetidamente na frequ\u00eancia do valor passado com paramentro, em segundos, minutos e\nhora respectivamente.\nobs: Esses tr\u00eas par\u00e2metros n\u00e3o podem ser combinados, nem entre e nem com os dois abaixo.\n\nO par\u00e2metro time_of_the_day define que a fun\u00e7\u00e3o ou m\u00e9todo ser\u00e1 executada todo dia em um hor\u00e1rio espec\u00edfico,\nque deve ser passado no seguinte formato hh:mm:ss.(hh: 0..23 ; mm: 0..59, ss: 0..59)\n\nO par\u00e2metro day_of_the_week define que a fun\u00e7\u00e3o ser\u00e1 executada repetidamente no dia da semana passado como valor.\nOs valores poss\u00edveis s\u00e3o: Su(Sunday/Domingo), M(Monday/Segunda), Tu(Tuesday/Ter\u00e7a), W(Wednesday/Quarta),\nTh(Thursday/Quinta), F(Friday/Sexta), Sa(Saturday/S\u00e1bado) em mai\u00fasculo. Sendo que este deve ser\ncombinado com o par\u00e2metro time_of_the_day para especificar a hora, minuto e segundo daquele dia da semana.\n\n\nExemplos de uso\n---------------\n\n.. code-block:: bash\n\n    pip install Santos\n\n.. code-block:: python\n\n    from santos import TaskScheduling, stopjobs\n\n    @TaskScheduling(name=\"nome\", seconds=\"30\")\n    def do_something(a):\n        print(\"Print do_something: %s\" % a)\n        import time\n        time.sleep(6)\n        print(\"terminou do_something\")\n\n    do_something()\n    stopjobs.stop(\"nome\")\n\n----------------------------------------------------------------------\n\n    class Teste(object):\n\n        @TaskScheduling(name=\"outronome\", time_of_the_day=\"08:30:00\")\n        def some_function(self, a):\n            print(\"Print some_function: %s\" % a)\n            import time\n            print(\"Fun\u00e7\u00e3o some_function\")\n            time.sleep(10)\n            print(\"terminou some_function\")\n\n    obj = Teste()\n    obj.some_function(\"b\")\n\nVeja ``exemples`` para mais exemplos\n\nMeta\n----\nAnderson Marques - andersonoanjo18@gmail.com\n\nDistribu\u00eddo sobre lincensa MIT. Veja ``LICENSE.txt`` para mais inform\u00e7\u00f5es.\n\nhttps://github.com/anderson89marques/Santos", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anderson89marques/Santos", "keywords": "Santos task schedule setuptools development", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Santos", "package_url": "https://pypi.org/project/Santos/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Santos/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/anderson89marques/Santos"}, "release_url": "https://pypi.org/project/Santos/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A task schedule", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. highlight:: rst<br><br>Um pouco de hist\u00f3ria<br>====================<br>Em 1904, cansado da falta de praticidade do rel\u00f3gio de bolso, o modelo<br>\"port\u00e1til\" mais comum de sua \u00e9poca,Santos Dumont reclamou para um de<br>seus melhores amigos, o joalheiro franc\u00eas Louis Cartier (fundador da joalheira Cartier).<br>Esses rel\u00f3gios, como indica o nome, ficavam guardados no bolso e, em muitos modelos,<br>eram protegidos por uma tampa, o que obrigava a uma consider\u00e1vel manobra para se ver as<br>horas. Para ele, um homem que passava grande parte do tempo dirigindo m\u00e1quinas voadorasou<br>trabalhando em projetos, isso era um problema grave.<br><br>Santos Dumont pediu para que Cartier achasse uma sa\u00edda para essa limita\u00e7\u00e3o. Algum tempo<br>depois, o joalheiro presenteou o aviador com a solu\u00e7\u00e3o que havia encontrado:<br>O prot\u00f3tipo de um dos primeiros rel\u00f3gios de pulso masculinos, que recebeu o nome \"Santos\".<br>Ent\u00e3o deu o nome do rel\u00f3gio para esta lib.<br><br><br>Santos<br>========<br><br>Um agendador de tarefas simples e eficente.<br><br>Um agendador para tarefas que precisam ser executados de forma periodica.<br>Santos permite a voc\u00ea rodar func\u00f5es e m\u00e9todos Python periodicamente em<br>intervalos pr\u00e9-determinados usando uma sintaxe bem simples.<br><br>Caracter\u00edsticas<br>---------------<br><br>- Uma API simples para agendamenro de tarefas.<br>- Sem depend\u00eancia external.<br>- teste unit\u00e1rio.<br>- Testada no Python 2.7 and 3.4<br><br>Sobre<br>-----<br><br>Santos permite que voc\u00ea agende a execu\u00e7\u00e3o da alguma tarefa apenas decorando a<br>fun\u00e7\u00e3o ou m\u00e9todo como mostrado nos exemplos abaixo.<br>Os testes foram feitos nas vers\u00f5es 2.7 e 3.4 do Python.<br><br>Os par\u00e2metros aceitos s\u00e3o: name, seconds, minutes, hour, time_of_the_day, day_of_the_week,<br>day_of_the_month.<br>O Par\u00e2metro name \u00e9 usado para identificar a thread que ser\u00e1 executada, assim \u00e9 poss\u00edvel dar um stop.<br>Os par\u00e2metros seconds, minutes e hour definem que a fun\u00e7\u00e3o ou m\u00e9todo ser\u00e1 executado<br>repetidamente na frequ\u00eancia do valor passado com paramentro, em segundos, minutos e<br>hora respectivamente.<br>obs: Esses tr\u00eas par\u00e2metros n\u00e3o podem ser combinados, nem entre e nem com os dois abaixo.<br><br>O par\u00e2metro time_of_the_day define que a fun\u00e7\u00e3o ou m\u00e9todo ser\u00e1 executada todo dia em um hor\u00e1rio espec\u00edfico,<br>que deve ser passado no seguinte formato hh:mm:ss.(hh: 0..23 ; mm: 0..59, ss: 0..59)<br><br>O par\u00e2metro day_of_the_week define que a fun\u00e7\u00e3o ser\u00e1 executada repetidamente no dia da semana passado como valor.<br>Os valores poss\u00edveis s\u00e3o: Su(Sunday/Domingo), M(Monday/Segunda), Tu(Tuesday/Ter\u00e7a), W(Wednesday/Quarta),<br>Th(Thursday/Quinta), F(Friday/Sexta), Sa(Saturday/S\u00e1bado) em mai\u00fasculo. Sendo que este deve ser<br>combinado com o par\u00e2metro time_of_the_day para especificar a hora, minuto e segundo daquele dia da semana.<br><br><br>Exemplos de uso<br>---------------<br><br>.. code-block:: bash<br><br>    pip install Santos<br><br>.. code-block:: python<br><br>    from santos import TaskScheduling, stopjobs<br><br>    @TaskScheduling(name=\"nome\", seconds=\"30\")<br>    def do_something(a):<br>        print(\"Print do_something: %s\" % a)<br>        import time<br>        time.sleep(6)<br>        print(\"terminou do_something\")<br><br>    do_something()<br>    stopjobs.stop(\"nome\")<br><br>----------------------------------------------------------------------<br><br>    class Teste(object):<br><br>        @TaskScheduling(name=\"outronome\", time_of_the_day=\"08:30:00\")<br>        def some_function(self, a):<br>            print(\"Print some_function: %s\" % a)<br>            import time<br>            print(\"Fun\u00e7\u00e3o some_function\")<br>            time.sleep(10)<br>            print(\"terminou some_function\")<br><br>    obj = Teste()<br>    obj.some_function(\"b\")<br><br>Veja ``exemples`` para mais exemplos<br><br>Meta<br>----<br>Anderson Marques - andersonoanjo18@gmail.com<br><br>Distribu\u00eddo sobre lincensa MIT. Veja ``LICENSE.txt`` para mais inform\u00e7\u00f5es.<br><br>https://github.com/anderson89marques/Santos\n          </div>"}, "last_serial": 1789516, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c392fdd022419c41311c982185584a86", "sha256": "5879c5f38e026e41fc0e794c239489525142905bed18fe3c159068d13b34d08b"}, "downloads": -1, "filename": "Santos-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c392fdd022419c41311c982185584a86", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8787, "upload_time": "2015-10-10T05:46:16", "upload_time_iso_8601": "2015-10-10T05:46:16.846221Z", "url": "https://files.pythonhosted.org/packages/d9/47/9237f09a0515de0e0b27ecec92e40390bc05d5886e8247014989ae01899f/Santos-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd4cb982b0098b68adfdfd5cb70cb559", "sha256": "fa9f83796aab37c6b150ce3d43b645070a877f3b898f97099627e56e7283004f"}, "downloads": -1, "filename": "Santos-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cd4cb982b0098b68adfdfd5cb70cb559", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6896, "upload_time": "2015-10-10T05:46:11", "upload_time_iso_8601": "2015-10-10T05:46:11.114391Z", "url": "https://files.pythonhosted.org/packages/51/6e/9835557250e67a52a16749ff9775c762273fa4cb7f2c45de7736030a19a0/Santos-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4aea0ac9cdc12764f34e6596eed4ac99", "sha256": "ae846552e34408fa57dc156245d36e3e1bfacd2232df16bcb9a2e8eab8c248eb"}, "downloads": -1, "filename": "Santos-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4aea0ac9cdc12764f34e6596eed4ac99", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8870, "upload_time": "2015-10-28T03:44:02", "upload_time_iso_8601": "2015-10-28T03:44:02.979053Z", "url": "https://files.pythonhosted.org/packages/de/8c/990502bfb9765e68ee5aa2bcd68b3fd0d4d7c9b5dd10f2149aa0372ac75a/Santos-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64f594795c7e66bbf9ad8cfe12185ef2", "sha256": "1cb10c7c6fa94ba6c353a7e5bcdec7b3088130fed99e787c750e8490b4b8bddb"}, "downloads": -1, "filename": "Santos-1.0.1.tar.gz", "has_sig": false, "md5_digest": "64f594795c7e66bbf9ad8cfe12185ef2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6984, "upload_time": "2015-10-28T03:43:56", "upload_time_iso_8601": "2015-10-28T03:43:56.392916Z", "url": "https://files.pythonhosted.org/packages/52/e4/a203c4a30c555c570b74c25f0d367735f043cb85c10148764f45d0b637ea/Santos-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4aea0ac9cdc12764f34e6596eed4ac99", "sha256": "ae846552e34408fa57dc156245d36e3e1bfacd2232df16bcb9a2e8eab8c248eb"}, "downloads": -1, "filename": "Santos-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4aea0ac9cdc12764f34e6596eed4ac99", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8870, "upload_time": "2015-10-28T03:44:02", "upload_time_iso_8601": "2015-10-28T03:44:02.979053Z", "url": "https://files.pythonhosted.org/packages/de/8c/990502bfb9765e68ee5aa2bcd68b3fd0d4d7c9b5dd10f2149aa0372ac75a/Santos-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64f594795c7e66bbf9ad8cfe12185ef2", "sha256": "1cb10c7c6fa94ba6c353a7e5bcdec7b3088130fed99e787c750e8490b4b8bddb"}, "downloads": -1, "filename": "Santos-1.0.1.tar.gz", "has_sig": false, "md5_digest": "64f594795c7e66bbf9ad8cfe12185ef2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6984, "upload_time": "2015-10-28T03:43:56", "upload_time_iso_8601": "2015-10-28T03:43:56.392916Z", "url": "https://files.pythonhosted.org/packages/52/e4/a203c4a30c555c570b74c25f0d367735f043cb85c10148764f45d0b637ea/Santos-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:38 2020"}