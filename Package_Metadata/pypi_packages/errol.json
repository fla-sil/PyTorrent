{"info": {"author": "Arnaud Joset", "author_email": "info@agayon.be", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3 :: Only", "Topic :: Communications", "Topic :: Communications :: File Sharing", "Topic :: Internet :: XMPP"], "description": "Errol\n=====\n\nErrol is a file sender that rely on\n`inotify <https://en.wikipedia.org/wiki/Inotify>`__. It can be used to\nwatch a directory and automatically transfers the new files (or modified\nones) with XMPP.\n\nPrerequisites\n-------------\n\nErrol needs the following requirements:\n\n-  A system supporting\n   `inotify <https://en.wikipedia.org/wiki/Inotify>`__ (Linux).\n-  an XMPP (jabber) account supporting the following XEPs: `Stream\n   Management <https://xmpp.org/extensions/xep-0198.html>`__,\n   `Publish-Subscribe <https://xmpp.org/extensions/xep-0060.html>`__,\n   `Multi-User Chat <https://xmpp.org/extensions/xep-0045.html>`__\n-  A pubsub service where the nodes can be set as open. The node name is\n   defined in the configuration file. I personally use\n   `sat_pubsub <https://blog.agayon.be/sat_pubsub.html>`__. A pubsub\n   component developed for the project `Salut \u00e0\n   Toi <https://salut-a-toi.org/>`__.\n-  A Multi-User Chat because not all XMPP accounts support PubSub. For\n   now, some information are still shared through MUC messages. This\n   behavior could change in the future.\n\n| You can use your own XMPP server or choose a XMPP service among the\n  following list.\n| https://conversations.im/compliance/\n\nCreate the pubsub node\n^^^^^^^^^^^^^^^^^^^^^^\n\nThis step is optional if you already have a write access on the pubsub\nnode. The following example use\n`jp <https://blog.agayon.be/sat_jp.html>`__, the Salut \u00e0\u00a0 Toi\ncommand-line interface but\n`slixmpp <https://dev.louiz.org/projects/slixmpp>`__ or\n`sleekxmpp <https://github.com/fritzy/SleekXMPP>`__ can be used.\n\n::\n\n    $ jp pubsub node create -f publish_model open be.agayon.errol:0 -s pubsub.agayon.be -c\n\nThe node name be.agayon.errol:0 is recommended in order to identify the\nfunctionnality.\n\nAs an example, there are the node options on the service\npubsub.agayon.be:\n\n::\n\n    $ jp pubsub node info be.agayon.errol:0 -s pubsub.agayon.be\n    persist_items: True\n    deliver_payloads: True\n    serial_ids: False\n    publish_model: open\n    access_model: open\n    send_last_published_item: on_sub\n\nTests\n~~~~~\n\nYou can test your setup with the examples scripts of\n`slixmpp <https://git.poez.io/slixmpp>`__.\n\n-  `pubsub_client.py <https://git.poez.io/slixmpp/tree/examples/pubsub_client.py>`__\n-  `pubsub_events.py <https://git.poez.io/slixmpp/tree/examples/pubsub_events.py>`__\n-  `s5b_receiver.py <https://git.poez.io/slixmpp/tree/examples/s5b_transfer/s5b_receiver.py>`__\n-  `s5b_sender.py <https://git.poez.io/slixmpp/tree/examples/s5b_transfer/s5b_sender.py>`__\n\nExample:\n\n::\n\n    ./s5b_file_sender.py -j jid@example.org -p pass -r john@example.org -f /path/to/file.txt \n\nSee the scripts for more information.\n\nGetting started with Errol\n--------------------------\n\nFirst you need to clone the repository. Errol needs the following\ndependencies:\n\n-  `slixmpp <https://dev.louiz.org/projects/slixmpp>`__ (python 3 only)\n-  `asyncio <https://docs.python.org/3/library/asyncio.html>`__\n-  `configparser <https://docs.python.org/3/library/configparser.html>`__\n-  `aionotify <https://github.com/rbarrois/aionotify>`__\n\nInstalling\n----------\n\nYou can easily install errol with pip:\n\n.. code:: sh\n\n    $ pip install errol\n\n**git**\n\n::\n\n     $ python3 setup.py install\n\nErrol can easily be installed in a\n`virtualenv <https://virtualenv.pypa.io/en/stable/userguide/>`__.\n\n**Archlinux**\n\n::\n\n    A PKGBUILD will be available soon.\n\nConfiguration\n-------------\n\nYou need to provide information about the XMPP account.\n\n::\n\n    $ cat config.example.ini\n\n    [XMPP]\n    pubsub=pubsub.example.org\n    node=be.agayon.errol:0\n    room=chat@chat.example.org\n    jid=jid@example.org/errol\n    password=pass\n    ressource_receiver=-receiver\n    ressource_sender=-\n    nick_sender=example_sender\n    nick_receiver=example_receiver\n    receiver=jid@example.org/errol-receiver\n    presence_file=/tmp/errol_presence.txt\n\n-  jid : the jabber account\n-  password: the xmpp password\n-  pubsub: the pubsub server (publish activity)\n-  room: the MUC (chatroom) where errol display information.\n-  presence_file: a writable file used to keep track of presences. When\n   receiver is online, the file contains \u20181\u2019 and \u20180\u2019 otherwise.\n\nThe files will be sent by jid@example.org/errol-0 and received by\njid@example.org/errol-receiver . The nicks are the usernames used on the\nMUC.\n\nRunning\n-------\n\nOnce installed, Errol can be launched in a terminal.\n\n::\n\n    $ errol --help\n    usage: errol [-h] [-e EVENTS] [-f FILE] [-d] -p PATH -c COMMAND\n\n    Automatic XMPP file sender and directory watcher\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -e EVENTS, --events EVENTS\n                            Number of events to watch (delete, create modify) in\n                            the directory. Once reached, the program stops.\n      -f FILE, --file FILE  Config file containing XMPP parameters\n      -d, --debug           set logging to DEBUG\n      -p PATH, --path PATH  The path watched.\n      -c COMMAND, --command COMMAND\n                            The executed command: xmpp or watcher\n\n**On device A**\n\nIf you want to watch the directory /tmp/sender, the following command\ncan be used:\n\n::\n\n    $ errol -f config.example.ini -p /tmp/sender -c watcher\n\nAll modified or new files created in the watched location will be sent\nby XMPP.\n\n**On device B**\n\nIf you want to receive the files, you have to launch Errol with the\nfollowing command line.\n\n::\n\n    $ errol -f config.example.ini -p /tmp/receiver -c xmpp\n\nAll the received files will be stored in the directory defined with the\noption \u2018-p\u2019.\n\nLaunch with systemd\n===================\n\nErrol can be launched with systemd. Two unit files are provided to help\nyou:\n\n-  errol_sender.service\n-  errol_watcher.service\n\nFirst, you need to create the config directory and copy the unit files.\n\n::\n\n    $ mkdir -p ~/.config/errol/\n    $ mkdir -p ~/.config/systemd/user/\n    $ cp systemd/environment.sh ~/.config/errol/\n    $ cp systemd/errol_watcher.service ~/.config/systemd/user/\n    $ cp systemd/errol_sender.service ~/.config/systemd/user/\n\nThen, you can edit the environment and the unit files to match your\npreferences and reload the units.\n\n::\n\n    $ systemctl --user daemon-reload\n\nThe units can then be launched and activated at boot:\n\n::\n\n    $  systemctl --user start errol_sender\n    $  systemctl --user start errol_watcher\n    $  systemctl --user enable errol_sender\n    $  systemctl --user enable errol_watcher\n\nIf you encounter some problems, you can read the logs with the following\ncommand:\n\n::\n\n    $ journalctl --user -xe\n    $ systemctl --user status errol_watcher.service\n    $ systemctl --user status errol_sender.service\n\nLicense\n-------\n\nThis project is licensed under the GPLv3 - see the\n`LICENSE.txt <https://gitlab.com/jnanar/errol/blob/master/LICENCE.txt>`__\nfile for details\n\nAcknowledgments\n---------------\n\n-  `Slixmpp <https://github.com/poezio/slixmpp>`__ for their nice\n   library.\n-  French XMPP community (sat@chat.jabberfr.org,\n   jabberfr@chat.jabberfr.org)\n-  Goffi from the `Salut \u00e0 Toi <https://salut-a-toi.org/>`__ project.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/jnanar/errol", "keywords": "xmpp file sharing aionotify", "license": "", "maintainer": "", "maintainer_email": "", "name": "errol", "package_url": "https://pypi.org/project/errol/", "platform": "", "project_url": "https://pypi.org/project/errol/", "project_urls": {"Homepage": "https://gitlab.com/jnanar/errol"}, "release_url": "https://pypi.org/project/errol/1.0.7/", "requires_dist": ["aionotify", "slixmpp"], "requires_python": ">=3.4", "summary": "Errol is a file sender that rely on inotify. It can be used to watch a directory and automatically transfer the new files (or modified ones) with XMPP.", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"errol\">\n<h2>Errol</h2>\n<p>Errol is a file sender that rely on\n<a href=\"https://en.wikipedia.org/wiki/Inotify\" rel=\"nofollow\">inotify</a>. It can be used to\nwatch a directory and automatically transfers the new files (or modified\nones) with XMPP.</p>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<p>Errol needs the following requirements:</p>\n<ul>\n<li>A system supporting\n<a href=\"https://en.wikipedia.org/wiki/Inotify\" rel=\"nofollow\">inotify</a> (Linux).</li>\n<li>an XMPP (jabber) account supporting the following XEPs: <a href=\"https://xmpp.org/extensions/xep-0198.html\" rel=\"nofollow\">Stream\nManagement</a>,\n<a href=\"https://xmpp.org/extensions/xep-0060.html\" rel=\"nofollow\">Publish-Subscribe</a>,\n<a href=\"https://xmpp.org/extensions/xep-0045.html\" rel=\"nofollow\">Multi-User Chat</a></li>\n<li>A pubsub service where the nodes can be set as open. The node name is\ndefined in the configuration file. I personally use\n<a href=\"https://blog.agayon.be/sat_pubsub.html\" rel=\"nofollow\">sat_pubsub</a>. A pubsub\ncomponent developed for the project <a href=\"https://salut-a-toi.org/\" rel=\"nofollow\">Salut \u00e0\nToi</a>.</li>\n<li>A Multi-User Chat because not all XMPP accounts support PubSub. For\nnow, some information are still shared through MUC messages. This\nbehavior could change in the future.</li>\n</ul>\n<div>\n<div>You can use your own XMPP server or choose a XMPP service among the\nfollowing list.</div>\n<div><a href=\"https://conversations.im/compliance/\" rel=\"nofollow\">https://conversations.im/compliance/</a></div>\n</div>\n<div id=\"create-the-pubsub-node\">\n<h4>Create the pubsub node</h4>\n<p>This step is optional if you already have a write access on the pubsub\nnode. The following example use\n<a href=\"https://blog.agayon.be/sat_jp.html\" rel=\"nofollow\">jp</a>, the Salut \u00e0\u00a0 Toi\ncommand-line interface but\n<a href=\"https://dev.louiz.org/projects/slixmpp\" rel=\"nofollow\">slixmpp</a> or\n<a href=\"https://github.com/fritzy/SleekXMPP\" rel=\"nofollow\">sleekxmpp</a> can be used.</p>\n<pre>$ jp pubsub node create -f publish_model open be.agayon.errol:0 -s pubsub.agayon.be -c\n</pre>\n<p>The node name be.agayon.errol:0 is recommended in order to identify the\nfunctionnality.</p>\n<p>As an example, there are the node options on the service\npubsub.agayon.be:</p>\n<pre>$ jp pubsub node info be.agayon.errol:0 -s pubsub.agayon.be\npersist_items: True\ndeliver_payloads: True\nserial_ids: False\npublish_model: open\naccess_model: open\nsend_last_published_item: on_sub\n</pre>\n<div id=\"tests\">\n<h5>Tests</h5>\n<p>You can test your setup with the examples scripts of\n<a href=\"https://git.poez.io/slixmpp\" rel=\"nofollow\">slixmpp</a>.</p>\n<ul>\n<li><a href=\"https://git.poez.io/slixmpp/tree/examples/pubsub_client.py\" rel=\"nofollow\">pubsub_client.py</a></li>\n<li><a href=\"https://git.poez.io/slixmpp/tree/examples/pubsub_events.py\" rel=\"nofollow\">pubsub_events.py</a></li>\n<li><a href=\"https://git.poez.io/slixmpp/tree/examples/s5b_transfer/s5b_receiver.py\" rel=\"nofollow\">s5b_receiver.py</a></li>\n<li><a href=\"https://git.poez.io/slixmpp/tree/examples/s5b_transfer/s5b_sender.py\" rel=\"nofollow\">s5b_sender.py</a></li>\n</ul>\n<p>Example:</p>\n<pre>./s5b_file_sender.py -j jid@example.org -p pass -r john@example.org -f /path/to/file.txt\n</pre>\n<p>See the scripts for more information.</p>\n</div>\n</div>\n</div>\n<div id=\"getting-started-with-errol\">\n<h3>Getting started with Errol</h3>\n<p>First you need to clone the repository. Errol needs the following\ndependencies:</p>\n<ul>\n<li><a href=\"https://dev.louiz.org/projects/slixmpp\" rel=\"nofollow\">slixmpp</a> (python 3 only)</li>\n<li><a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a></li>\n<li><a href=\"https://docs.python.org/3/library/configparser.html\" rel=\"nofollow\">configparser</a></li>\n<li><a href=\"https://github.com/rbarrois/aionotify\" rel=\"nofollow\">aionotify</a></li>\n</ul>\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>You can easily install errol with pip:</p>\n<pre>$ pip install errol\n</pre>\n<p><strong>git</strong></p>\n<pre>$ python3 setup.py install\n</pre>\n<p>Errol can easily be installed in a\n<a href=\"https://virtualenv.pypa.io/en/stable/userguide/\" rel=\"nofollow\">virtualenv</a>.</p>\n<p><strong>Archlinux</strong></p>\n<pre>A PKGBUILD will be available soon.\n</pre>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>You need to provide information about the XMPP account.</p>\n<pre>$ cat config.example.ini\n\n[XMPP]\npubsub=pubsub.example.org\nnode=be.agayon.errol:0\nroom=chat@chat.example.org\njid=jid@example.org/errol\npassword=pass\nressource_receiver=-receiver\nressource_sender=-\nnick_sender=example_sender\nnick_receiver=example_receiver\nreceiver=jid@example.org/errol-receiver\npresence_file=/tmp/errol_presence.txt\n</pre>\n<ul>\n<li>jid : the jabber account</li>\n<li>password: the xmpp password</li>\n<li>pubsub: the pubsub server (publish activity)</li>\n<li>room: the MUC (chatroom) where errol display information.</li>\n<li>presence_file: a writable file used to keep track of presences. When\nreceiver is online, the file contains \u20181\u2019 and \u20180\u2019 otherwise.</li>\n</ul>\n<p>The files will be sent by <a href=\"mailto:jid%40example.org/errol-0\">jid<span>@</span>example<span>.</span>org/errol-0</a> and received by\n<a href=\"mailto:jid%40example.org/errol-receiver\">jid<span>@</span>example<span>.</span>org/errol-receiver</a> . The nicks are the usernames used on the\nMUC.</p>\n</div>\n<div id=\"running\">\n<h3>Running</h3>\n<p>Once installed, Errol can be launched in a terminal.</p>\n<pre>$ errol --help\nusage: errol [-h] [-e EVENTS] [-f FILE] [-d] -p PATH -c COMMAND\n\nAutomatic XMPP file sender and directory watcher\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EVENTS, --events EVENTS\n                        Number of events to watch (delete, create modify) in\n                        the directory. Once reached, the program stops.\n  -f FILE, --file FILE  Config file containing XMPP parameters\n  -d, --debug           set logging to DEBUG\n  -p PATH, --path PATH  The path watched.\n  -c COMMAND, --command COMMAND\n                        The executed command: xmpp or watcher\n</pre>\n<p><strong>On device A</strong></p>\n<p>If you want to watch the directory /tmp/sender, the following command\ncan be used:</p>\n<pre>$ errol -f config.example.ini -p /tmp/sender -c watcher\n</pre>\n<p>All modified or new files created in the watched location will be sent\nby XMPP.</p>\n<p><strong>On device B</strong></p>\n<p>If you want to receive the files, you have to launch Errol with the\nfollowing command line.</p>\n<pre>$ errol -f config.example.ini -p /tmp/receiver -c xmpp\n</pre>\n<p>All the received files will be stored in the directory defined with the\noption \u2018-p\u2019.</p>\n</div>\n</div>\n<div id=\"launch-with-systemd\">\n<h2>Launch with systemd</h2>\n<p>Errol can be launched with systemd. Two unit files are provided to help\nyou:</p>\n<ul>\n<li>errol_sender.service</li>\n<li>errol_watcher.service</li>\n</ul>\n<p>First, you need to create the config directory and copy the unit files.</p>\n<pre>$ mkdir -p ~/.config/errol/\n$ mkdir -p ~/.config/systemd/user/\n$ cp systemd/environment.sh ~/.config/errol/\n$ cp systemd/errol_watcher.service ~/.config/systemd/user/\n$ cp systemd/errol_sender.service ~/.config/systemd/user/\n</pre>\n<p>Then, you can edit the environment and the unit files to match your\npreferences and reload the units.</p>\n<pre>$ systemctl --user daemon-reload\n</pre>\n<p>The units can then be launched and activated at boot:</p>\n<pre>$  systemctl --user start errol_sender\n$  systemctl --user start errol_watcher\n$  systemctl --user enable errol_sender\n$  systemctl --user enable errol_watcher\n</pre>\n<p>If you encounter some problems, you can read the logs with the following\ncommand:</p>\n<pre>$ journalctl --user -xe\n$ systemctl --user status errol_watcher.service\n$ systemctl --user status errol_sender.service\n</pre>\n<div id=\"license\">\n<h3>License</h3>\n<p>This project is licensed under the GPLv3 - see the\n<a href=\"https://gitlab.com/jnanar/errol/blob/master/LICENCE.txt\" rel=\"nofollow\">LICENSE.txt</a>\nfile for details</p>\n</div>\n<div id=\"acknowledgments\">\n<h3>Acknowledgments</h3>\n<ul>\n<li><a href=\"https://github.com/poezio/slixmpp\" rel=\"nofollow\">Slixmpp</a> for their nice\nlibrary.</li>\n<li>French XMPP community (<a href=\"mailto:sat%40chat.jabberfr.org\">sat<span>@</span>chat<span>.</span>jabberfr<span>.</span>org</a>,\n<a href=\"mailto:jabberfr%40chat.jabberfr.org\">jabberfr<span>@</span>chat<span>.</span>jabberfr<span>.</span>org</a>)</li>\n<li>Goffi from the <a href=\"https://salut-a-toi.org/\" rel=\"nofollow\">Salut \u00e0 Toi</a> project.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3659024, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "21add45e3f78ac0d7351d4900d6cd32e", "sha256": "5af7bcdf7b7bf57ccca5976a1dd04c285f2a717cffbef61bc3ed5457d5e5da6f"}, "downloads": -1, "filename": "errol-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "21add45e3f78ac0d7351d4900d6cd32e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 14320, "upload_time": "2017-12-31T10:37:21", "upload_time_iso_8601": "2017-12-31T10:37:21.643836Z", "url": "https://files.pythonhosted.org/packages/ab/27/36ec07c603372cfa8ca23b2f0ba2a992bdbe00ca9d09687e225be939095d/errol-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "2c92cebdec833a149c0ba6caede56186", "sha256": "1873a9cae9a33c7442a2452b0a6fd1cc9dc020ac5e653931ca74d5f560121de2"}, "downloads": -1, "filename": "errol-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2c92cebdec833a149c0ba6caede56186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 14564, "upload_time": "2017-12-31T11:48:28", "upload_time_iso_8601": "2017-12-31T11:48:28.297021Z", "url": "https://files.pythonhosted.org/packages/ee/8e/33e79da0bfd8da28b40cf3375c35d41cc3b57661cc55b1e4ab8cfe2cc3f1/errol-1.0.4-py3-none-any.whl", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "c9bf622ccb6dfe5ef89d52abc9452597", "sha256": "e8da67ec3fd548fee14ec022aa64ed8d8c7d84febc93be975e1688e14c4bdfb8"}, "downloads": -1, "filename": "errol-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c9bf622ccb6dfe5ef89d52abc9452597", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15162, "upload_time": "2018-01-09T14:21:22", "upload_time_iso_8601": "2018-01-09T14:21:22.319038Z", "url": "https://files.pythonhosted.org/packages/a7/8d/dfe7bee186c87c7b4623f6a91b36d73e04e096a30f210f44f0fa080e6f35/errol-1.0.6-py3-none-any.whl", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "2b7fc9dedae9f6309ed0388438c19304", "sha256": "a1f053ffadd67a44fda4005d2f8eefa0f681535b3c5178634461097b50a9dc71"}, "downloads": -1, "filename": "errol-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2b7fc9dedae9f6309ed0388438c19304", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15788, "upload_time": "2018-03-11T14:15:57", "upload_time_iso_8601": "2018-03-11T14:15:57.175825Z", "url": "https://files.pythonhosted.org/packages/aa/b8/3ce31befad0d01b019c5a9381335af9ecebadbec5f51e6ab471f27ff9565/errol-1.0.7-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b7fc9dedae9f6309ed0388438c19304", "sha256": "a1f053ffadd67a44fda4005d2f8eefa0f681535b3c5178634461097b50a9dc71"}, "downloads": -1, "filename": "errol-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2b7fc9dedae9f6309ed0388438c19304", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15788, "upload_time": "2018-03-11T14:15:57", "upload_time_iso_8601": "2018-03-11T14:15:57.175825Z", "url": "https://files.pythonhosted.org/packages/aa/b8/3ce31befad0d01b019c5a9381335af9ecebadbec5f51e6ab471f27ff9565/errol-1.0.7-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:45 2020"}