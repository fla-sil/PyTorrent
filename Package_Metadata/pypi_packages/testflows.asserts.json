{"info": {"author": "Vitaliy Zakaznikov", "author_email": "vzakaznikov@testflows.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "TestFlows - Asserts\n===================\n\n.. image:: https://raw.githubusercontent.com/testflows/TestFlows-ArtWork/master/images/testbug-laptop-testflows.png\n   :width: 100%\n   :alt: test bug\n   :align: center\n\n**The asserts module is still work in progress and is currently under development.\nPlease use it only for reference.**\n\nNo magic, intuitive assertion library with descriptive error messages.\nWorks with Python's `assert statement`_ and is inspired by pytest_\nsupport for assertions and `grappa-py/grappa`_ descriptive error messages.\n\nCurrently supports only Python 3.6 or above.\n\nWhy\n***\n\n* No special assertion methods.\n  Uses the default `assert statement`_.\n* No magic.\n  Assertion statements are not modified and the default AssertionError_\n  class is not overridden.\n* High performance.\n  No extra code is executed if the assertion does not fail unless the assertion has side effects.\n* No external dependencies.\n* Simple and clean API.\n* Compatible with most Python test frameworks.\n\nUsage\n*****\n\nUse **error** for a single assert statement\n\n.. code-block:: python\n\n    from testflows.asserts import error\n\n    assert 1 == 1, error()\n\nor use **errors** context manager to wrap multiple assert statements\n\n.. code-block:: python\n\n    from testflows.asserts import errors\n\n    with errors():\n        assert 1 == 1\n        assert 2 == 2\n\nand if you don't want to abort when an assertion fails and would like to\nkeep going then the **errors** context manager supports soft assertions through it's\n**error** method.\n\n.. code-block:: python\n\n    from testflows.asserts import errors\n\n    with errors() as soft:\n        with soft.error():\n            assert 1 == 2\n        assert 2 == 2\n\nWhen an assertion fails a descriptive error message is produced.\nFor example\n\n    .. code-block:: python\n\n       from testflows.asserts import error\n\n       assert 1 == 2, error()\n\nproduces the following output\n\n    .. code-block:: bash\n\n        AssertionError: Oops! Assertion failed\n\n        The following assertion was not satisfied\n          assert 1 == 2, error()\n\n        Assertion values\n          assert 1 == 2, error()\n                   ^ is = False\n          assert 1 == 2, error()\n          ^ is False\n\n        Where\n          File 't.py', line 3 in '<module>'\n\n        0|\n        1|  from testflows.asserts import error\n        2|\n        3|> assert 1 == 2, error()\n\nHow\n***\n\nThe **asserts** module works similarly to the old implementation of\npytest_ assertions. If the assertion fails, the `assert statement`_ is reinterpreted\nto produce a detailed error message.\n\n  Therefore, if the assertion statement has a side effect it might not\n  work as expected when an assertion fails.\n\nIn the pytest_ framework, this problem_ is solved\nby rewriting the original assertion.\nThe **asserts** module solves this problem_ by explicitly using **values** context manager\nto store the values of the expression that has a side effect.\n\nInstallation\n************\n\n.. code-block:: bash\n\n    $ ./build; ./install\n\n\nwhere\n\n.. code-block:: bash\n\n    $ ./build\n\ncreates a pip installable package in *./dist*, for example\n\n.. code-block:: bash\n\n    $ ls dist/\n    testflows.asserts-4.1.190811.155018.tar.gz\n\nand\n\n.. code-block:: bash\n\n    $ ./install\n\nuses *sudo pip install* command to perform the system-wide installation.\n\nAssertions with side-effects\n****************************\n\nIf assertion has side effects then **values** context manager can be used to\naddress this problem_.\n\nThe example below demonstrates the problem_.\n\n.. code-block:: python\n\n    from testflows.asserts import error\n\n    buf = [1]\n    assert buf.append(2) and buf, error()\n\n\nIn the code above, the assertion fails and the **buf** list is modified twice. Once\nwhen the assertion fails and once when the assertion is reinterpreted when\n**error()** method is evaluated.\n\nThe error message that is produced shows the problem_\n\n.. code-block:: bash\n\n    The following assertion was not satisfied\n      assert buf.append(2) and buf, error()\n\n    Assertion values\n      assert buf.append(2) and buf, error()\n             ^ is [1, 2, 2]\n      assert buf.append(2) and buf, error()\n             ^ is = <built-in method append of list object at 0x7f13d1c41248>\n      assert buf.append(2) and buf, error()\n             ^ is = None\n      assert buf.append(2) and buf, error()\n                               ^ is [1, 2, 2]\n      assert buf.append(2) and buf, error()\n                           ^ is = None\n      assert buf.append(2) and buf, error()\n      ^ is False\n\n    Where\n      File 't.py', line 4 in '<module>'\n\n    1|  from testflows.asserts import error\n    2|\n    3|  buf = [1]\n    4|> assert buf.append(2) and buf, error()\n\nspecifically, the lines below show that value of **buf** is [1,2,2] instead\nof the desired value of [1,2]\n\n.. code-block:: bash\n\n    Assertion values\n      assert buf.append(2) and buf, error()\n             ^ is [1, 2, 2]\n\nIn order to work around this problem_, **values** context manager can be used\nas follows\n\n.. code-block:: python\n\n    from testflows.asserts import values, error\n\n    buf = [1]\n    with values() as that:\n        assert that(buf.append(2)) and buf, error()\n\n\n\nand it will produce the error message\n\n.. code-block:: bash\n\n    The following assertion was not satisfied\n      assert that(buf.append(2)) and buf, error()\n\n    Assertion values\n      assert that(buf.append(2)) and buf, error()\n             ^ is = None\n      assert that(buf.append(2)) and buf, error()\n                                     ^ is [1, 2]\n      assert that(buf.append(2)) and buf, error()\n                                 ^ is = None\n      assert that(buf.append(2)) and buf, error()\n      ^ is False\n\n    Where\n      File 't.py', line 5 in '<module>'\n\n    1|  from testflows.asserts import values, error\n    2|\n    3|  buf = [1]\n    4|  with values() as that:\n    5|>     assert that(buf.append(2)) and buf, error()\n\nthe lines below show that the **buf** list has the expected value of [1,2]\n\n.. code-block:: bash\n\n      assert that(buf.append(2)) and buf, error()\n                                     ^ is [1, 2]\n\nthis is because the expression passed to **that** is not reinterpreted and only the\nresult of the expression is stored and used during the generation of the error message.\n\n  The explicit use of **values** context manager provides a simple solution without\n  any need to rewrite the original assertion statement.\n\n.. _problem: http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\n.. _AssertionError: https://docs.python.org/3/library/exceptions.html#AssertionError\n.. _`assert statement`: https://docs.python.org/3/reference/simple_stmts.html#assert\n.. _`grappa-py/grappa`: https://github.com/grappa-py/grappa\n.. _pytest: https://docs.pytest.org/en/latest/assert.html", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/testflows/testflows-asserts", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "testflows.asserts", "package_url": "https://pypi.org/project/testflows.asserts/", "platform": "", "project_url": "https://pypi.org/project/testflows.asserts/", "project_urls": {"Homepage": "https://github.com/testflows/testflows-asserts"}, "release_url": "https://pypi.org/project/testflows.asserts/5.3.191019.1125113/", "requires_dist": null, "requires_python": ">=3.6", "summary": "TestFlows - Asserts Assertion Library", "version": "5.3.191019.1125113", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"test bug\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30f3e507048567d3753b8231035851cc068a4d64/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74657374666c6f77732f54657374466c6f77732d417274576f726b2f6d61737465722f696d616765732f746573746275672d6c6170746f702d74657374666c6f77732e706e67\" width=\"100%\">\n<p><strong>The asserts module is still work in progress and is currently under development.\nPlease use it only for reference.</strong></p>\n<p>No magic, intuitive assertion library with descriptive error messages.\nWorks with Python\u2019s <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"nofollow\">assert statement</a> and is inspired by <a href=\"https://docs.pytest.org/en/latest/assert.html\" rel=\"nofollow\">pytest</a>\nsupport for assertions and <a href=\"https://github.com/grappa-py/grappa\" rel=\"nofollow\">grappa-py/grappa</a> descriptive error messages.</p>\n<p>Currently supports only Python 3.6 or above.</p>\n<div id=\"why\">\n<h2>Why</h2>\n<ul>\n<li>No special assertion methods.\nUses the default <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"nofollow\">assert statement</a>.</li>\n<li>No magic.\nAssertion statements are not modified and the default <a href=\"https://docs.python.org/3/library/exceptions.html#AssertionError\" rel=\"nofollow\">AssertionError</a>\nclass is not overridden.</li>\n<li>High performance.\nNo extra code is executed if the assertion does not fail unless the assertion has side effects.</li>\n<li>No external dependencies.</li>\n<li>Simple and clean API.</li>\n<li>Compatible with most Python test frameworks.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Use <strong>error</strong> for a single assert statement</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">error</span>\n\n<span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n</pre>\n<p>or use <strong>errors</strong> context manager to wrap multiple assert statements</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">errors</span>\n\n<span class=\"k\">with</span> <span class=\"n\">errors</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<p>and if you don\u2019t want to abort when an assertion fails and would like to\nkeep going then the <strong>errors</strong> context manager supports soft assertions through it\u2019s\n<strong>error</strong> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">errors</span>\n\n<span class=\"k\">with</span> <span class=\"n\">errors</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">soft</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">soft</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">():</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<p>When an assertion fails a descriptive error message is produced.\nFor example</p>\n<blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">error</span>\n\n<span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n</pre>\n</blockquote>\n<p>produces the following output</p>\n<blockquote>\n<pre>AssertionError: Oops! Assertion failed\n\nThe following assertion was not satisfied\n  assert <span class=\"nv\">1</span> <span class=\"o\">==</span> <span class=\"m\">2</span>, error<span class=\"o\">()</span>\n\nAssertion values\n  assert <span class=\"nv\">1</span> <span class=\"o\">==</span> <span class=\"m\">2</span>, error<span class=\"o\">()</span>\n           ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> False\n  assert <span class=\"nv\">1</span> <span class=\"o\">==</span> <span class=\"m\">2</span>, error<span class=\"o\">()</span>\n  ^ is False\n\nWhere\n  File <span class=\"s1\">'t.py'</span>, line <span class=\"m\">3</span> in <span class=\"s1\">'&lt;module&gt;'</span>\n\n<span class=\"m\">0</span><span class=\"p\">|</span>\n<span class=\"m\">1</span><span class=\"p\">|</span>  from testflows.asserts import error\n<span class=\"m\">2</span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"p\">|</span>&gt; assert <span class=\"nv\">1</span> <span class=\"o\">==</span> <span class=\"m\">2</span>, error<span class=\"o\">()</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"how\">\n<h2>How</h2>\n<p>The <strong>asserts</strong> module works similarly to the old implementation of\n<a href=\"https://docs.pytest.org/en/latest/assert.html\" rel=\"nofollow\">pytest</a> assertions. If the assertion fails, the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#assert\" rel=\"nofollow\">assert statement</a> is reinterpreted\nto produce a detailed error message.</p>\n<blockquote>\nTherefore, if the assertion statement has a side effect it might not\nwork as expected when an assertion fails.</blockquote>\n<p>In the <a href=\"https://docs.pytest.org/en/latest/assert.html\" rel=\"nofollow\">pytest</a> framework, this <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a> is solved\nby rewriting the original assertion.\nThe <strong>asserts</strong> module solves this <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a> by explicitly using <strong>values</strong> context manager\nto store the values of the expression that has a side effect.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ ./build<span class=\"p\">;</span> ./install\n</pre>\n<p>where</p>\n<pre>$ ./build\n</pre>\n<p>creates a pip installable package in <em>./dist</em>, for example</p>\n<pre>$ ls dist/\ntestflows.asserts-4.1.190811.155018.tar.gz\n</pre>\n<p>and</p>\n<pre>$ ./install\n</pre>\n<p>uses <em>sudo pip install</em> command to perform the system-wide installation.</p>\n</div>\n<div id=\"assertions-with-side-effects\">\n<h2>Assertions with side-effects</h2>\n<p>If assertion has side effects then <strong>values</strong> context manager can be used to\naddress this <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a>.</p>\n<p>The example below demonstrates the <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">error</span>\n\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n</pre>\n<p>In the code above, the assertion fails and the <strong>buf</strong> list is modified twice. Once\nwhen the assertion fails and once when the assertion is reinterpreted when\n<strong>error()</strong> method is evaluated.</p>\n<p>The error message that is produced shows the <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a></p>\n<pre>The following assertion was not satisfied\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n\nAssertion values\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n         ^ is <span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n         ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> &lt;built-in method append of list object at 0x7f13d1c41248&gt;\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n         ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> None\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n                           ^ is <span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n                       ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> None\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n  ^ is False\n\nWhere\n  File <span class=\"s1\">'t.py'</span>, line <span class=\"m\">4</span> in <span class=\"s1\">'&lt;module&gt;'</span>\n\n<span class=\"m\">1</span><span class=\"p\">|</span>  from testflows.asserts import error\n<span class=\"m\">2</span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"p\">|</span>  <span class=\"nv\">buf</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"m\">4</span><span class=\"p\">|</span>&gt; assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n</pre>\n<p>specifically, the lines below show that value of <strong>buf</strong> is [1,2,2] instead\nof the desired value of [1,2]</p>\n<pre>Assertion values\n  assert buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> and buf, error<span class=\"o\">()</span>\n         ^ is <span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n</pre>\n<p>In order to work around this <a href=\"http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html\" rel=\"nofollow\">problem</a>, <strong>values</strong> context manager can be used\nas follows</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testflows.asserts</span> <span class=\"kn\">import</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">error</span>\n\n<span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">that</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">that</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">buf</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">()</span>\n</pre>\n<p>and it will produce the error message</p>\n<pre>The following assertion was not satisfied\n  assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n\nAssertion values\n  assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n         ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> None\n  assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n                                 ^ is <span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n  assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n                             ^ <span class=\"nv\">is</span> <span class=\"o\">=</span> None\n  assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n  ^ is False\n\nWhere\n  File <span class=\"s1\">'t.py'</span>, line <span class=\"m\">5</span> in <span class=\"s1\">'&lt;module&gt;'</span>\n\n<span class=\"m\">1</span><span class=\"p\">|</span>  from testflows.asserts import values, error\n<span class=\"m\">2</span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"p\">|</span>  <span class=\"nv\">buf</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>\n<span class=\"m\">4</span><span class=\"p\">|</span>  with values<span class=\"o\">()</span> as that:\n<span class=\"m\">5</span><span class=\"p\">|</span>&gt;     assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n</pre>\n<p>the lines below show that the <strong>buf</strong> list has the expected value of [1,2]</p>\n<pre>assert that<span class=\"o\">(</span>buf.append<span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">))</span> and buf, error<span class=\"o\">()</span>\n                               ^ is <span class=\"o\">[</span><span class=\"m\">1</span>, <span class=\"m\">2</span><span class=\"o\">]</span>\n</pre>\n<p>this is because the expression passed to <strong>that</strong> is not reinterpreted and only the\nresult of the expression is stored and used during the generation of the error message.</p>\n<blockquote>\nThe explicit use of <strong>values</strong> context manager provides a simple solution without\nany need to rewrite the original assertion statement.</blockquote>\n</div>\n\n          </div>"}, "last_serial": 5999774, "releases": {"5.2.191016.1221916": [{"comment_text": "", "digests": {"md5": "bfb5ae0d61a3e8dd44e00ecd853c34a3", "sha256": "c62adb9487c4d84f6c988616733e90e01f05572b7ad589c375660b14f9b60e58"}, "downloads": -1, "filename": "testflows.asserts-5.2.191016.1221916.tar.gz", "has_sig": false, "md5_digest": "bfb5ae0d61a3e8dd44e00ecd853c34a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9604, "upload_time": "2019-10-16T22:19:23", "upload_time_iso_8601": "2019-10-16T22:19:23.691491Z", "url": "https://files.pythonhosted.org/packages/13/3e/0694f9682290ece341e165032d7d37e27c411abf1fec55c54e842747c2d5/testflows.asserts-5.2.191016.1221916.tar.gz", "yanked": false}], "5.3.191019.1121011": [{"comment_text": "", "digests": {"md5": "8707a9aac878c06c1f48448aad7822dc", "sha256": "9a41324cd041d35164d81c47dfab9f39f4930aeef801ff8d3329e67d0462277d"}, "downloads": -1, "filename": "testflows.asserts-5.3.191019.1121011.tar.gz", "has_sig": false, "md5_digest": "8707a9aac878c06c1f48448aad7822dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11687, "upload_time": "2019-10-19T12:10:22", "upload_time_iso_8601": "2019-10-19T12:10:22.628055Z", "url": "https://files.pythonhosted.org/packages/68/e2/420636d19de523115544ce4e0d5baddfd12518a0bc8861802404241d1c6f/testflows.asserts-5.3.191019.1121011.tar.gz", "yanked": false}], "5.3.191019.1125113": [{"comment_text": "", "digests": {"md5": "c0c516930f652ba5c22a7e0084ad21f6", "sha256": "ec4db0ba4f09c97c48a254bb1d5b5bbb9a7e7f05213fbc946a0298e90ba46e57"}, "downloads": -1, "filename": "testflows.asserts-5.3.191019.1125113.tar.gz", "has_sig": false, "md5_digest": "c0c516930f652ba5c22a7e0084ad21f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11698, "upload_time": "2019-10-19T12:51:21", "upload_time_iso_8601": "2019-10-19T12:51:21.817748Z", "url": "https://files.pythonhosted.org/packages/7d/89/69111f1d4903e90e746f4036586705b47b43d371e8f0782d1cb1eabbcbb2/testflows.asserts-5.3.191019.1125113.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0c516930f652ba5c22a7e0084ad21f6", "sha256": "ec4db0ba4f09c97c48a254bb1d5b5bbb9a7e7f05213fbc946a0298e90ba46e57"}, "downloads": -1, "filename": "testflows.asserts-5.3.191019.1125113.tar.gz", "has_sig": false, "md5_digest": "c0c516930f652ba5c22a7e0084ad21f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11698, "upload_time": "2019-10-19T12:51:21", "upload_time_iso_8601": "2019-10-19T12:51:21.817748Z", "url": "https://files.pythonhosted.org/packages/7d/89/69111f1d4903e90e746f4036586705b47b43d371e8f0782d1cb1eabbcbb2/testflows.asserts-5.3.191019.1125113.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:35 2020"}