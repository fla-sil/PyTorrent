{"info": {"author": "Florian Wilhelm", "author_email": "Florian.Wilhelm@inovex.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "# sparklet\n\nAdd a short description here!\n\n## Description\n\nA longer description of your project goes here...\n\n## Installation\n\nIn order to set up the necessary environment:\n\n1. create an environment `sparklet` with the help of [conda],\n   ```\n   conda env create -f environment.yaml\n   ```\n2. activate the new environment with\n   ```\n   conda activate sparklet\n   ```\n3. install `sparklet` with:\n   ```\n   python setup.py install # or `develop`\n   ```\n\nOptional and needed only once after `git clone`:\n\n4. install several [pre-commit] git hooks with:\n   ```\n   pre-commit install\n   ```\n   and checkout the configuration under `.pre-commit-config.yaml`.\n   The `-n, --no-verify` flag of `git commit` can be used to deactivate pre-commit hooks temporarily.\n\n5. install [nbstripout] git hooks to remove the output cells of committed notebooks with:\n   ```\n   nbstripout --install --attributes notebooks/.gitattributes\n   ```\n   This is useful to avoid large diffs due to plots in your notebooks.\n   A simple `nbstripout --uninstall` will revert these changes.\n\n\nThen take a look into the `scripts` and `notebooks` folders.\n\n## Dependency Management & Reproducibility\n\n1. Always keep your abstract (unpinned) dependencies updated in `environment.yaml` and eventually\n   in `setup.cfg` if you want to ship and install your package via `pip` later on.\n2. Create concrete dependencies as `environment.lock.yaml` for the exact reproduction of your\n   environment with:\n   ```\n   conda env export -n sparklet -f environment.lock.yaml\n   ```\n   For multi-OS development, consider using `--no-builds` during the export.\n3. Update your current environment with respect to a new `environment.lock.yaml` using:\n   ```\n   conda env update -f environment.lock.yaml --prune\n   ```\n## Project Organization\n\n```\n\u251c\u2500\u2500 AUTHORS.rst             <- List of developers and maintainers.\n\u251c\u2500\u2500 CHANGELOG.rst           <- Changelog to keep track of new features and fixes.\n\u251c\u2500\u2500 LICENSE.txt             <- License as chosen on the command-line.\n\u251c\u2500\u2500 README.md               <- The top-level README for developers.\n\u251c\u2500\u2500 configs                 <- Directory for configurations of model & application.\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external            <- Data from third party sources.\n\u2502   \u251c\u2500\u2500 interim             <- Intermediate data that has been transformed.\n\u2502   \u251c\u2500\u2500 processed           <- The final, canonical data sets for modeling.\n\u2502   \u2514\u2500\u2500 raw                 <- The original, immutable data dump.\n\u251c\u2500\u2500 docs                    <- Directory for Sphinx documentation in rst or md.\n\u251c\u2500\u2500 environment.yaml        <- The conda environment file for reproducibility.\n\u251c\u2500\u2500 models                  <- Trained and serialized models, model predictions,\n\u2502                              or model summaries.\n\u251c\u2500\u2500 notebooks               <- Jupyter notebooks. Naming convention is a number (for\n\u2502                              ordering), the creator's initials and a description,\n\u2502                              e.g. `1.0-fw-initial-data-exploration`.\n\u251c\u2500\u2500 references              <- Data dictionaries, manuals, and all other materials.\n\u251c\u2500\u2500 reports                 <- Generated analysis as HTML, PDF, LaTeX, etc.\n\u2502   \u2514\u2500\u2500 figures             <- Generated plots and figures for reports.\n\u251c\u2500\u2500 scripts                 <- Analysis and production scripts which import the\n\u2502                              actual PYTHON_PKG, e.g. train_model.\n\u251c\u2500\u2500 setup.cfg               <- Declarative configuration of your project.\n\u251c\u2500\u2500 setup.py                <- Use `python setup.py develop` to install for development or\n|                              or create a distribution with `python setup.py bdist_wheel`.\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 sparklet            <- Actual Python package where the main functionality goes.\n\u251c\u2500\u2500 tests                   <- Unit tests which can be run with `py.test`.\n\u251c\u2500\u2500 .coveragerc             <- Configuration for coverage reports of unit tests.\n\u251c\u2500\u2500 .isort.cfg              <- Configuration for git hook that sorts imports.\n\u2514\u2500\u2500 .pre-commit-config.yaml <- Configuration of pre-commit git hooks.\n```\n\n## Note\n\nThis project has been set up using PyScaffold 3.2.3 and the [dsproject extension] 0.4.\nFor details and usage information on PyScaffold see https://pyscaffold.org/.\n\n[conda]: https://docs.conda.io/\n[pre-commit]: https://pre-commit.com/\n[Jupyter]: https://jupyter.org/\n[nbstripout]: https://github.com/kynan/nbstripout\n[Google style]: http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings\n[dsproject extension]: https://github.com/pyscaffold/pyscaffoldext-dsproject", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyscaffold/pyscaffold/", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "sparklet", "package_url": "https://pypi.org/project/sparklet/", "platform": "any", "project_url": "https://pypi.org/project/sparklet/", "project_urls": {"Documentation": "https://pyscaffold.org/", "Homepage": "https://github.com/pyscaffold/pyscaffold/"}, "release_url": "https://pypi.org/project/sparklet/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Add a short description here!", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sparklet</h1>\n<p>Add a short description here!</p>\n<h2>Description</h2>\n<p>A longer description of your project goes here...</p>\n<h2>Installation</h2>\n<p>In order to set up the necessary environment:</p>\n<ol>\n<li>create an environment <code>sparklet</code> with the help of <a href=\"https://docs.conda.io/\" rel=\"nofollow\">conda</a>,\n<pre><code>conda env create -f environment.yaml\n</code></pre>\n</li>\n<li>activate the new environment with\n<pre><code>conda activate sparklet\n</code></pre>\n</li>\n<li>install <code>sparklet</code> with:\n<pre><code>python setup.py install # or `develop`\n</code></pre>\n</li>\n</ol>\n<p>Optional and needed only once after <code>git clone</code>:</p>\n<ol>\n<li>\n<p>install several <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a> git hooks with:</p>\n<pre><code>pre-commit install\n</code></pre>\n<p>and checkout the configuration under <code>.pre-commit-config.yaml</code>.\nThe <code>-n, --no-verify</code> flag of <code>git commit</code> can be used to deactivate pre-commit hooks temporarily.</p>\n</li>\n<li>\n<p>install <a href=\"https://github.com/kynan/nbstripout\" rel=\"nofollow\">nbstripout</a> git hooks to remove the output cells of committed notebooks with:</p>\n<pre><code>nbstripout --install --attributes notebooks/.gitattributes\n</code></pre>\n<p>This is useful to avoid large diffs due to plots in your notebooks.\nA simple <code>nbstripout --uninstall</code> will revert these changes.</p>\n</li>\n</ol>\n<p>Then take a look into the <code>scripts</code> and <code>notebooks</code> folders.</p>\n<h2>Dependency Management &amp; Reproducibility</h2>\n<ol>\n<li>Always keep your abstract (unpinned) dependencies updated in <code>environment.yaml</code> and eventually\nin <code>setup.cfg</code> if you want to ship and install your package via <code>pip</code> later on.</li>\n<li>Create concrete dependencies as <code>environment.lock.yaml</code> for the exact reproduction of your\nenvironment with:\n<pre><code>conda env export -n sparklet -f environment.lock.yaml\n</code></pre>\nFor multi-OS development, consider using <code>--no-builds</code> during the export.</li>\n<li>Update your current environment with respect to a new <code>environment.lock.yaml</code> using:\n<pre><code>conda env update -f environment.lock.yaml --prune\n</code></pre>\n</li>\n</ol>\n<h2>Project Organization</h2>\n<pre><code>\u251c\u2500\u2500 AUTHORS.rst             &lt;- List of developers and maintainers.\n\u251c\u2500\u2500 CHANGELOG.rst           &lt;- Changelog to keep track of new features and fixes.\n\u251c\u2500\u2500 LICENSE.txt             &lt;- License as chosen on the command-line.\n\u251c\u2500\u2500 README.md               &lt;- The top-level README for developers.\n\u251c\u2500\u2500 configs                 &lt;- Directory for configurations of model &amp; application.\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 external            &lt;- Data from third party sources.\n\u2502   \u251c\u2500\u2500 interim             &lt;- Intermediate data that has been transformed.\n\u2502   \u251c\u2500\u2500 processed           &lt;- The final, canonical data sets for modeling.\n\u2502   \u2514\u2500\u2500 raw                 &lt;- The original, immutable data dump.\n\u251c\u2500\u2500 docs                    &lt;- Directory for Sphinx documentation in rst or md.\n\u251c\u2500\u2500 environment.yaml        &lt;- The conda environment file for reproducibility.\n\u251c\u2500\u2500 models                  &lt;- Trained and serialized models, model predictions,\n\u2502                              or model summaries.\n\u251c\u2500\u2500 notebooks               &lt;- Jupyter notebooks. Naming convention is a number (for\n\u2502                              ordering), the creator's initials and a description,\n\u2502                              e.g. `1.0-fw-initial-data-exploration`.\n\u251c\u2500\u2500 references              &lt;- Data dictionaries, manuals, and all other materials.\n\u251c\u2500\u2500 reports                 &lt;- Generated analysis as HTML, PDF, LaTeX, etc.\n\u2502   \u2514\u2500\u2500 figures             &lt;- Generated plots and figures for reports.\n\u251c\u2500\u2500 scripts                 &lt;- Analysis and production scripts which import the\n\u2502                              actual PYTHON_PKG, e.g. train_model.\n\u251c\u2500\u2500 setup.cfg               &lt;- Declarative configuration of your project.\n\u251c\u2500\u2500 setup.py                &lt;- Use `python setup.py develop` to install for development or\n|                              or create a distribution with `python setup.py bdist_wheel`.\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 sparklet            &lt;- Actual Python package where the main functionality goes.\n\u251c\u2500\u2500 tests                   &lt;- Unit tests which can be run with `py.test`.\n\u251c\u2500\u2500 .coveragerc             &lt;- Configuration for coverage reports of unit tests.\n\u251c\u2500\u2500 .isort.cfg              &lt;- Configuration for git hook that sorts imports.\n\u2514\u2500\u2500 .pre-commit-config.yaml &lt;- Configuration of pre-commit git hooks.\n</code></pre>\n<h2>Note</h2>\n<p>This project has been set up using PyScaffold 3.2.3 and the <a href=\"https://github.com/pyscaffold/pyscaffoldext-dsproject\" rel=\"nofollow\">dsproject extension</a> 0.4.\nFor details and usage information on PyScaffold see <a href=\"https://pyscaffold.org/\" rel=\"nofollow\">https://pyscaffold.org/</a>.</p>\n\n          </div>"}, "last_serial": 7038648, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "29adccec95af1665254e2bffdcd9b45b", "sha256": "86fcfd9f06df715608c67c9509ce2f1d87a26a4d7f816037b66b1e10c4b184e6"}, "downloads": -1, "filename": "sparklet-0.0.1.tar.gz", "has_sig": false, "md5_digest": "29adccec95af1665254e2bffdcd9b45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16413, "upload_time": "2020-04-17T08:39:35", "upload_time_iso_8601": "2020-04-17T08:39:35.563894Z", "url": "https://files.pythonhosted.org/packages/12/7f/9ecf85d131783dce7b561a18d9c1a7d6db8e797aea40838ea1d745a1afb5/sparklet-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29adccec95af1665254e2bffdcd9b45b", "sha256": "86fcfd9f06df715608c67c9509ce2f1d87a26a4d7f816037b66b1e10c4b184e6"}, "downloads": -1, "filename": "sparklet-0.0.1.tar.gz", "has_sig": false, "md5_digest": "29adccec95af1665254e2bffdcd9b45b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16413, "upload_time": "2020-04-17T08:39:35", "upload_time_iso_8601": "2020-04-17T08:39:35.563894Z", "url": "https://files.pythonhosted.org/packages/12/7f/9ecf85d131783dce7b561a18d9c1a7d6db8e797aea40838ea1d745a1afb5/sparklet-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:56 2020"}