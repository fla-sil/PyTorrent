{"info": {"author": "Petr Kasalick\u00fd", "author_email": "kasape@atlas.cz", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "Framework :: IPython", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Graphics :: Capture :: Digital Camera", "Topic :: Multimedia :: Video :: Capture", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Visualization", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. WRP Client documentation master file, created by\n   sphinx-quickstart on Tue Jan 28 10:36:49 2020.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWRP Client - Workswell Remote Protocol Client\n=============================================\n\nWelcome to the WRP Client's documentation! WRP Client and `WRP Server <https://github.com/Kasape/wrp-server/>`_ are two parts of a driver that allows to connect to the `Workswell InfraRed Camera <https://www.workswell-thermal-camera.com/workswell-infrared-camera-wic/>`_ using Python. This repository contains the client part, that is written in Python. The second part, `WRP Server <https://github.com/Kasape/wrp-server/>`_, is written in C# because the Workswell company provides and supports access to the cameras only through their C# SDK and not throught any other language. \n\nInstallation\n----------------------\n\nThe simplest way to install WRP client is from the pypi:\n\n.. code-block:: bash\n\n  pip install wrpclient\n\nAlternative method is to build this repository:\n\n.. code-block:: bash\n\n  git clone https://github.com/Kasape/wrpclient.git\n  cd wrpclient\n  python setup.py install\n\nUsage\n----------------------\n\nThis project is implemented using asyncio library. But because using asyncio library can be a little problematic for beginners in Python, there are also synchronous wrappers about the asynchronous ones. First we have to create a instance of Client class and then connect it to the server: \n\n.. code-block:: python\n\n\tfrom datetime import datetime\n\timport wrp_client\n\timport asyncio\n\n\tclient = wrp_client.Client()\n\tSERVER_IP_ADDRESS = \"127.0.0.1\"\n\t# synchronous wrapper for the method (coroutine) \n\t# client.connect_async(ip_adress=SERVER_IP_ADDRESS)\n\tclient.connect(ip_adress=SERVER_IP_ADDRESS, timeout=\"20\")\n\nOnce the client is connected to the server, we can get list of all cameras that was identified by the server.  \n\n.. code-block:: python\n\n\t# get all cameras\n\tall_cameras = client.get_cameras(timeout=\"20\")\n\nOr we can get only one camera identified by the serial number. If the camera is not available, ValueError exception is raised. \nThen we have to open the camera to get frame(s):\n\n.. code-block:: python\n\n\t# find camera with specific serial number\n\tmy_camera = client.get_camera(serial_number=\"ABCDEF\", timeout=\"20\")\n\n\tmy_camera.open(timeout=\"20\")\n\n\t# Return 2D frame (numpy matrix) with dtype np.float32 filled with raw data (decimal values of temperatures)\n\tframe = my_camera.get_frame(timeout=\"20\")\n\nAs you can see, all the functions above have parameter timeout. That is because each function is sending some request and is expecting response from to the server and latence of the server depends on the latence of the cameras. There are also asynchronous versions of these functions for more advanced users. They are named `xxx_async` as shown in case of `client.connect_async`.\n\nYou can also ask camera for the continuous stream of frames:\n\n.. code-block:: python\n\n\tdef callback(frame):\n\t\ttime_str = datetime.now().strftime(\"%Y-%m-%d-%H-%M-%S-%f\")\n\t\tframe_color = cv2.applyColorMap(frame, cv2.COLORMAP_JET)\n\t\tcv2.imwrite(f\"frame-{time_str}.jpg\", frame_color)\n\n\t# give handler for continuous shot that saves colorized images with timestamp suffix\n\tmy_camera.start_continuous_shot(callback)\n\n\t# wait some time to collect images\n\tasyncio.sleep(5)\n\n\tmy_camera.stop_continuous_shot(callback)\n\nIf you want to use the API in IPython enviroment (most common are Jupyter notebooks), you have to install `Nest asyncio <https://pypi.org/project/nest-asyncio/>`_ and run the following code before using wrpclient:\n\n.. code-block:: python\n\n\timport nest_asyncio\n\tnest_asyncio.apply()\n\n\n\nDocumentation\n-------------\nAbove you can find guide for installation and example of usage. The full version of the documentation also containing class and methods description (API) can be found on `ReadTheDocs page <https://wrpclient.readthedocs.io/>`_ or you can build it from a repository with code: \n\n.. code-block:: bash\n\n  git clone https://github.com/Kasape/wrpclient.git\n  cd wrpclient/docs\n  pip install sphinx\n  make html\n\nand open it with your browser on the address ``file://<path_to_repo>/docs/_build/html/index.html``.\n\nLicence\n-------\nThis project has GNU GPLv3 License.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kasape/wrpclient", "keywords": "thermal,infrared,camera,workswell,remote,protocol,client", "license": "GNU GPLv3 License", "maintainer": "", "maintainer_email": "", "name": "wrpclient", "package_url": "https://pypi.org/project/wrpclient/", "platform": "", "project_url": "https://pypi.org/project/wrpclient/", "project_urls": {"Homepage": "https://github.com/Kasape/wrpclient"}, "release_url": "https://pypi.org/project/wrpclient/0.1/", "requires_dist": ["numpy"], "requires_python": ">=3.6", "summary": "Workswell Remote Protocol Client", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Welcome to the WRP Client\u2019s documentation! WRP Client and <a href=\"https://github.com/Kasape/wrp-server/\" rel=\"nofollow\">WRP Server</a> are two parts of a driver that allows to connect to the <a href=\"https://www.workswell-thermal-camera.com/workswell-infrared-camera-wic/\" rel=\"nofollow\">Workswell InfraRed Camera</a> using Python. This repository contains the client part, that is written in Python. The second part, <a href=\"https://github.com/Kasape/wrp-server/\" rel=\"nofollow\">WRP Server</a>, is written in C# because the Workswell company provides and supports access to the cameras only through their C# SDK and not throught any other language.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The simplest way to install WRP client is from the pypi:</p>\n<pre>pip install wrpclient\n</pre>\n<p>Alternative method is to build this repository:</p>\n<pre>git clone https://github.com/Kasape/wrpclient.git\n<span class=\"nb\">cd</span> wrpclient\npython setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This project is implemented using asyncio library. But because using asyncio library can be a little problematic for beginners in Python, there are also synchronous wrappers about the asynchronous ones. First we have to create a instance of Client class and then connect it to the server:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wrp_client</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">wrp_client</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"n\">SERVER_IP_ADDRESS</span> <span class=\"o\">=</span> <span class=\"s2\">\"127.0.0.1\"</span>\n<span class=\"c1\"># synchronous wrapper for the method (coroutine)</span>\n<span class=\"c1\"># client.connect_async(ip_adress=SERVER_IP_ADDRESS)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">ip_adress</span><span class=\"o\">=</span><span class=\"n\">SERVER_IP_ADDRESS</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"s2\">\"20\"</span><span class=\"p\">)</span>\n</pre>\n<p>Once the client is connected to the server, we can get list of all cameras that was identified by the server.</p>\n<pre><span class=\"c1\"># get all cameras</span>\n<span class=\"n\">all_cameras</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_cameras</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"s2\">\"20\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or we can get only one camera identified by the serial number. If the camera is not available, ValueError exception is raised.\nThen we have to open the camera to get frame(s):</p>\n<pre><span class=\"c1\"># find camera with specific serial number</span>\n<span class=\"n\">my_camera</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_camera</span><span class=\"p\">(</span><span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"s2\">\"ABCDEF\"</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"s2\">\"20\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_camera</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"s2\">\"20\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return 2D frame (numpy matrix) with dtype np.float32 filled with raw data (decimal values of temperatures)</span>\n<span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">my_camera</span><span class=\"o\">.</span><span class=\"n\">get_frame</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"s2\">\"20\"</span><span class=\"p\">)</span>\n</pre>\n<p>As you can see, all the functions above have parameter timeout. That is because each function is sending some request and is expecting response from to the server and latence of the server depends on the latence of the cameras. There are also asynchronous versions of these functions for more advanced users. They are named <cite>xxx_async</cite> as shown in case of <cite>client.connect_async</cite>.</p>\n<p>You can also ask camera for the continuous stream of frames:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">):</span>\n        <span class=\"n\">time_str</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">-%H-%M-%S-</span><span class=\"si\">%f</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">frame_color</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">applyColorMap</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLORMAP_JET</span><span class=\"p\">)</span>\n        <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"frame-</span><span class=\"si\">{</span><span class=\"n\">time_str</span><span class=\"si\">}</span><span class=\"s2\">.jpg\"</span><span class=\"p\">,</span> <span class=\"n\">frame_color</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># give handler for continuous shot that saves colorized images with timestamp suffix</span>\n<span class=\"n\">my_camera</span><span class=\"o\">.</span><span class=\"n\">start_continuous_shot</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wait some time to collect images</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_camera</span><span class=\"o\">.</span><span class=\"n\">stop_continuous_shot</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to use the API in IPython enviroment (most common are Jupyter notebooks), you have to install <a href=\"https://pypi.org/project/nest-asyncio/\" rel=\"nofollow\">Nest asyncio</a> and run the following code before using wrpclient:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nest_asyncio</span>\n<span class=\"n\">nest_asyncio</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Above you can find guide for installation and example of usage. The full version of the documentation also containing class and methods description (API) can be found on <a href=\"https://wrpclient.readthedocs.io/\" rel=\"nofollow\">ReadTheDocs page</a> or you can build it from a repository with code:</p>\n<pre>git clone https://github.com/Kasape/wrpclient.git\n<span class=\"nb\">cd</span> wrpclient/docs\npip install sphinx\nmake html\n</pre>\n<p>and open it with your browser on the address <tt><span class=\"pre\">file://&lt;path_to_repo&gt;/docs/_build/html/index.html</span></tt>.</p>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>This project has GNU GPLv3 License.</p>\n</div>\n\n          </div>"}, "last_serial": 6551672, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1e35cc2497b678621d2a08f3e51fa5ab", "sha256": "33ae7f6524e232bc4f6fbe84d505741585cc9e2b476875b50f933a14e29e7d98"}, "downloads": -1, "filename": "wrpclient-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e35cc2497b678621d2a08f3e51fa5ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24731, "upload_time": "2020-01-31T20:32:35", "upload_time_iso_8601": "2020-01-31T20:32:35.729519Z", "url": "https://files.pythonhosted.org/packages/d2/88/aa4ea07276960c125162ab081cb462209c9386661698f8ce1fcc23dd1b74/wrpclient-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f289e5deac83bafd4a7bc734199df24d", "sha256": "3c325fbf2d9d7f289b839ca584def4ffed9f665de1e7bc51f00ea6dfb77723c1"}, "downloads": -1, "filename": "wrpclient-0.1.tar.gz", "has_sig": false, "md5_digest": "f289e5deac83bafd4a7bc734199df24d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24414, "upload_time": "2020-01-31T20:32:37", "upload_time_iso_8601": "2020-01-31T20:32:37.777517Z", "url": "https://files.pythonhosted.org/packages/23/a0/c6c1ed1c5243407f009e6f3a262fc6c20e9994af206ee4794b94346c95f8/wrpclient-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e35cc2497b678621d2a08f3e51fa5ab", "sha256": "33ae7f6524e232bc4f6fbe84d505741585cc9e2b476875b50f933a14e29e7d98"}, "downloads": -1, "filename": "wrpclient-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e35cc2497b678621d2a08f3e51fa5ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24731, "upload_time": "2020-01-31T20:32:35", "upload_time_iso_8601": "2020-01-31T20:32:35.729519Z", "url": "https://files.pythonhosted.org/packages/d2/88/aa4ea07276960c125162ab081cb462209c9386661698f8ce1fcc23dd1b74/wrpclient-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f289e5deac83bafd4a7bc734199df24d", "sha256": "3c325fbf2d9d7f289b839ca584def4ffed9f665de1e7bc51f00ea6dfb77723c1"}, "downloads": -1, "filename": "wrpclient-0.1.tar.gz", "has_sig": false, "md5_digest": "f289e5deac83bafd4a7bc734199df24d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24414, "upload_time": "2020-01-31T20:32:37", "upload_time_iso_8601": "2020-01-31T20:32:37.777517Z", "url": "https://files.pythonhosted.org/packages/23/a0/c6c1ed1c5243407f009e6f3a262fc6c20e9994af206ee4794b94346c95f8/wrpclient-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:13 2020"}