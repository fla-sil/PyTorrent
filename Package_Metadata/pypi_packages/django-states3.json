{"info": {"author": "Ulam Labs", "author_email": "contact@ulam.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Django States\n=============\n\n|Build Status|\n\nDescription\n-----------\n\nState engine for django models. Define a state graph for a model and\nremember the state of each object. State transitions can be logged for\nobjects.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install django-states3\n\nUsage example\n-------------\n\nTo use a state machine, you should add a state field to the model\n\n.. code:: python\n\n    from django_states.fields import StateField\n    from django_states.machine import StateMachine, StateDefinition, StateTransition\n\n    class PurchaseStateMachine(StateMachine):\n       log_transitions = True\n\n       # possible states\n       class initiated(StateDefinition):\n           description = _('Purchase initiated')\n           initial = True\n\n       class paid(StateDefinition):\n           description = _('Purchase paid')\n\n           def handler(self, instance):\n               code_to_execute_when_arriving_in_this_state()\n\n       class shipped(StateDefinition):\n           description = _('Purchase shipped')\n\n       # state transitions\n       class mark_paid(StateTransition):\n           from_state = 'initiated'\n           to_state = 'paid'\n           description = 'Mark this purchase as paid'\n\n       class ship(StateTransition):\n           from_state = 'paid'\n           to_state = 'shipped'\n           description = 'Ship purchase'\n\n           def handler(transition, instance, user):\n               code_to_execute_during_this_transition()\n\n           def has_permission(transition, instance, user):\n               return true_when_user_can_make_this_transition()\n\n    class Purchase(StateModel):\n        purchase_state = StateField(machine=PurchaseStateMachine, default='initiated')\n        ... (other fields for a purchase)\n\nIf ``log_transitions`` is enabled, another model is created. Everything\nshould be compatible with South\\_ for migrations.\n\nNote: If you're creating a ``DataMigration`` in\n`South <http://south.aeracode.org/>`__, remember to use\n``obj.save(no_state_validation=True)``\n\nUsage example:\n\n.. code:: python\n\n   p = Purchase()\n\n   # Will automatically create state object for this purchase, in the\n   # initial state.\n   p.save()\n   p.get_purchase_state_info().make_transition('mark_paid', request.user) # User parameter is optional\n   p.state # Will return 'paid'\n   p.get_purchase_state_info().description # Will return 'Purchase paid'\n\n   # Returns an iterator of possible transitions for this purchase.\n   p.get_purchase_state_info().possible_transitions()\n\n   # Which can be used like this..\n   [x.get_name() for x in p.possible_transitions]\n\nFor better transition control, override:\n\n-  ``has_permission(self, instance, user)``: Check whether this user is\n   allowed to make this transition.\n-  ``handler(self, instance, user)``: Code to run during this\n   transition. When an exception has been raised in here, the transition\n   will not be made.\n\nGet all objects in a certain state::\n\n   Purchase.objects.filter(state='initiated')\n\nValidation\n----------\n\nYou can add a test that needs to pass before a state transition can be\nexecuted. Well, you can add 2: one based on the current user\n(``has_permission``) and one generic (``validate``).\n\nSo on a ``StateTransition``-object you need to specify an extra\n``validate`` function (signature is ``validate(cls, instance)``). This\nshould yield ``TransitionValidationError``, this way you can return\nmultiple errors on that need to pass before the transition can happen.\n\nThe ``has_permission`` function (signature\n``has_permission(transition, instance, user)``) should check whether the\ngiven user is allowed to make the transition. E.g. a super user can\nmoderate all comments while other users can only moderate comments on\ntheir blog-posts.\n\nGroups\n------\n\nSometimes you want to group several states together, since for a certain\nview (or other content) it doesn't really matter which of the states it\nis. We support 2 different state groups, inclusive (only these) or\nexclusive (everything but these):\n\n.. code:: python\n\n  class is_paid(StateGroup):\n      states = ['paid', 'shipped']\n\n  class is_paid(StateGroup):\n      exclude_states = ['initiated']\n\nState graph\n-----------\n\nYou can get a graph of your states by running the ``graph_states``\nmanagement command.\n\n.. code:: sh\n\n   python manage.py graph_states myapp.Purchase.state\n\nThis requires `graphviz <http://graphviz.org>`__ and python bindings for\ngraphviz: ``pygraphviz`` and ``yapgvb``.\n\n.. |Build Status| image:: https://travis-ci.com/ulamlabs/django-states3.svg?branch=master\n   :target: https://travis-ci.com/ulamlabs/django-states3\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ulamlabs/django-states3", "keywords": "", "license": "", "maintainer": "Ulam Labs", "maintainer_email": "contact@ulam.io", "name": "django-states3", "package_url": "https://pypi.org/project/django-states3/", "platform": "", "project_url": "https://pypi.org/project/django-states3/", "project_urls": {"Homepage": "https://github.com/ulamlabs/django-states3", "Repository": "https://github.com/ulamlabs/django-states3"}, "release_url": "https://pypi.org/project/django-states3/3.0.1/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "State machine for django models", "version": "3.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/ulamlabs/django-states3\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ca640085221af02e0d7d30c024d6ac1c4dc913b/68747470733a2f2f7472617669732d63692e636f6d2f756c616d6c6162732f646a616e676f2d737461746573332e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>State engine for django models. Define a state graph for a model and\nremember the state of each object. State transitions can be logged for\nobjects.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-states3\n</pre>\n</div>\n<div id=\"usage-example\">\n<h2>Usage example</h2>\n<p>To use a state machine, you should add a state field to the model</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_states.fields</span> <span class=\"kn\">import</span> <span class=\"n\">StateField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_states.machine</span> <span class=\"kn\">import</span> <span class=\"n\">StateMachine</span><span class=\"p\">,</span> <span class=\"n\">StateDefinition</span><span class=\"p\">,</span> <span class=\"n\">StateTransition</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PurchaseStateMachine</span><span class=\"p\">(</span><span class=\"n\">StateMachine</span><span class=\"p\">):</span>\n   <span class=\"n\">log_transitions</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n   <span class=\"c1\"># possible states</span>\n   <span class=\"k\">class</span> <span class=\"nc\">initiated</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase initiated'</span><span class=\"p\">)</span>\n       <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">paid</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase paid'</span><span class=\"p\">)</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n           <span class=\"n\">code_to_execute_when_arriving_in_this_state</span><span class=\"p\">()</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">shipped</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase shipped'</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># state transitions</span>\n   <span class=\"k\">class</span> <span class=\"nc\">mark_paid</span><span class=\"p\">(</span><span class=\"n\">StateTransition</span><span class=\"p\">):</span>\n       <span class=\"n\">from_state</span> <span class=\"o\">=</span> <span class=\"s1\">'initiated'</span>\n       <span class=\"n\">to_state</span> <span class=\"o\">=</span> <span class=\"s1\">'paid'</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Mark this purchase as paid'</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">ship</span><span class=\"p\">(</span><span class=\"n\">StateTransition</span><span class=\"p\">):</span>\n       <span class=\"n\">from_state</span> <span class=\"o\">=</span> <span class=\"s1\">'paid'</span>\n       <span class=\"n\">to_state</span> <span class=\"o\">=</span> <span class=\"s1\">'shipped'</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Ship purchase'</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">transition</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>\n           <span class=\"n\">code_to_execute_during_this_transition</span><span class=\"p\">()</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">has_permission</span><span class=\"p\">(</span><span class=\"n\">transition</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>\n           <span class=\"k\">return</span> <span class=\"n\">true_when_user_can_make_this_transition</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Purchase</span><span class=\"p\">(</span><span class=\"n\">StateModel</span><span class=\"p\">):</span>\n    <span class=\"n\">purchase_state</span> <span class=\"o\">=</span> <span class=\"n\">StateField</span><span class=\"p\">(</span><span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"n\">PurchaseStateMachine</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'initiated'</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span> <span class=\"p\">(</span><span class=\"n\">other</span> <span class=\"n\">fields</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"n\">purchase</span><span class=\"p\">)</span>\n</pre>\n<p>If <tt>log_transitions</tt> is enabled, another model is created. Everything\nshould be compatible with South_ for migrations.</p>\n<p>Note: If you\u2019re creating a <tt>DataMigration</tt> in\n<a href=\"http://south.aeracode.org/\" rel=\"nofollow\">South</a>, remember to use\n<tt>obj.save(no_state_validation=True)</tt></p>\n<p>Usage example:</p>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Purchase</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Will automatically create state object for this purchase, in the</span>\n<span class=\"c1\"># initial state.</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">make_transition</span><span class=\"p\">(</span><span class=\"s1\">'mark_paid'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"c1\"># User parameter is optional</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"c1\"># Will return 'paid'</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"c1\"># Will return 'Purchase paid'</span>\n\n<span class=\"c1\"># Returns an iterator of possible transitions for this purchase.</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">possible_transitions</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Which can be used like this..</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">possible_transitions</span><span class=\"p\">]</span>\n</pre>\n<p>For better transition control, override:</p>\n<ul>\n<li><tt>has_permission(self, instance, user)</tt>: Check whether this user is\nallowed to make this transition.</li>\n<li><tt>handler(self, instance, user)</tt>: Code to run during this\ntransition. When an exception has been raised in here, the transition\nwill not be made.</li>\n</ul>\n<p>Get all objects in a certain state:</p>\n<pre>Purchase.objects.filter(state='initiated')\n</pre>\n</div>\n<div id=\"validation\">\n<h2>Validation</h2>\n<p>You can add a test that needs to pass before a state transition can be\nexecuted. Well, you can add 2: one based on the current user\n(<tt>has_permission</tt>) and one generic (<tt>validate</tt>).</p>\n<p>So on a <tt>StateTransition</tt>-object you need to specify an extra\n<tt>validate</tt> function (signature is <tt>validate(cls, instance)</tt>). This\nshould yield <tt>TransitionValidationError</tt>, this way you can return\nmultiple errors on that need to pass before the transition can happen.</p>\n<p>The <tt>has_permission</tt> function (signature\n<tt>has_permission(transition, instance, user)</tt>) should check whether the\ngiven user is allowed to make the transition. E.g. a super user can\nmoderate all comments while other users can only moderate comments on\ntheir blog-posts.</p>\n</div>\n<div id=\"groups\">\n<h2>Groups</h2>\n<p>Sometimes you want to group several states together, since for a certain\nview (or other content) it doesn\u2019t really matter which of the states it\nis. We support 2 different state groups, inclusive (only these) or\nexclusive (everything but these):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">is_paid</span><span class=\"p\">(</span><span class=\"n\">StateGroup</span><span class=\"p\">):</span>\n    <span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'paid'</span><span class=\"p\">,</span> <span class=\"s1\">'shipped'</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">is_paid</span><span class=\"p\">(</span><span class=\"n\">StateGroup</span><span class=\"p\">):</span>\n    <span class=\"n\">exclude_states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'initiated'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"state-graph\">\n<h2>State graph</h2>\n<p>You can get a graph of your states by running the <tt>graph_states</tt>\nmanagement command.</p>\n<pre>python manage.py graph_states myapp.Purchase.state\n</pre>\n<p>This requires <a href=\"http://graphviz.org\" rel=\"nofollow\">graphviz</a> and python bindings for\ngraphviz: <tt>pygraphviz</tt> and <tt>yapgvb</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 6246072, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "cb7fe08a4247c740af63332cbd4474db", "sha256": "8bd292c0d956e310b43263949de009f936dd38a9671ea1aea470a9010b32cdb7"}, "downloads": -1, "filename": "django-states3-3.0.0.tar.gz", "has_sig": false, "md5_digest": "cb7fe08a4247c740af63332cbd4474db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19976, "upload_time": "2019-12-02T13:35:46", "upload_time_iso_8601": "2019-12-02T13:35:46.048578Z", "url": "https://files.pythonhosted.org/packages/eb/6b/60050b296f996de1a8810f38cd96b5ad0e5ed38c093c6e4118f6ddcb2a2d/django-states3-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "c01ad718dbdbcfe52b0a58cf172351a7", "sha256": "ca023e305accd280e604639dbaf123877e2d15e7d6e8fab9b486eee9a10ba10d"}, "downloads": -1, "filename": "django_states3-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c01ad718dbdbcfe52b0a58cf172351a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 21210, "upload_time": "2019-12-05T08:18:15", "upload_time_iso_8601": "2019-12-05T08:18:15.148857Z", "url": "https://files.pythonhosted.org/packages/d8/46/ee8b6867be6b74f065e09b5d5f39effd1d4ba3c3639c1ce0a0f4c4852941/django_states3-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74bebe62b08ac65134a582ebf8476aa5", "sha256": "d54901076eb9b7c2b66bb546233edda3dd5dfa0e6004451d492551124729c4db"}, "downloads": -1, "filename": "django-states3-3.0.1.tar.gz", "has_sig": false, "md5_digest": "74bebe62b08ac65134a582ebf8476aa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18332, "upload_time": "2019-12-05T08:18:13", "upload_time_iso_8601": "2019-12-05T08:18:13.700343Z", "url": "https://files.pythonhosted.org/packages/18/f8/4a410ff5ca2e019aa9b5f4e1e562d6aff9e00b637a826a76d842c6430ac6/django-states3-3.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c01ad718dbdbcfe52b0a58cf172351a7", "sha256": "ca023e305accd280e604639dbaf123877e2d15e7d6e8fab9b486eee9a10ba10d"}, "downloads": -1, "filename": "django_states3-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c01ad718dbdbcfe52b0a58cf172351a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 21210, "upload_time": "2019-12-05T08:18:15", "upload_time_iso_8601": "2019-12-05T08:18:15.148857Z", "url": "https://files.pythonhosted.org/packages/d8/46/ee8b6867be6b74f065e09b5d5f39effd1d4ba3c3639c1ce0a0f4c4852941/django_states3-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74bebe62b08ac65134a582ebf8476aa5", "sha256": "d54901076eb9b7c2b66bb546233edda3dd5dfa0e6004451d492551124729c4db"}, "downloads": -1, "filename": "django-states3-3.0.1.tar.gz", "has_sig": false, "md5_digest": "74bebe62b08ac65134a582ebf8476aa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18332, "upload_time": "2019-12-05T08:18:13", "upload_time_iso_8601": "2019-12-05T08:18:13.700343Z", "url": "https://files.pythonhosted.org/packages/18/f8/4a410ff5ca2e019aa9b5f4e1e562d6aff9e00b637a826a76d842c6430ac6/django-states3-3.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:57 2020"}