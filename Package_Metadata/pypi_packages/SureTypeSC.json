{"info": {"author": "Lishan Cai", "author_email": "shanshancai@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# SureTypeSC\nSureTypeSC is implementation of algorithm for regenotyping of single cell data.\n\n## Getting Started\n\n\n\n\n```\npip install SureTypeSC\n```\n\n### Prerequisites\n* python 2 (tested on Python 2.7.5)\n* scikit = v0.19.1 (http://scikit-learn.org/stable/)\n* numpy >= v1.14.1 (http://www.numpy.org/)\n* pandas >= v0.22.0 (https://pandas.pydata.org/)\n* IlluminaBeadArrayFiles >= 1.2.0\n* json_tricks >= v3 (https://pypi.org/project/json_tricks/)\n* tabulate >= v0.8.3(https://pypi.org/project/tabulate/)\n\n### Usage\n\n* create genome studio file (include name,chromosome,position, genotype, gencall score, x raw intensities, x normalized intensities, y raw instensities and y normalized intensities) [format, pandas dataframe]\n\n```\nimport SureTypeSC as sc\n\ndf = sc.basic(\"HumanKaryomap-12v1_A.bpm\",\"HumanKaryomap-12v1_A.egt\",\"Samplesheetr.csv\")\n\n\nParameters:The path of manifest file, the path of cluster file, the path of samplesheet file; \nThe template of sample sheet is in Samplesheetr.csv\n```\n\n* return call rate of all samples over all chromosomes\n\n```\nimport SureTypeSC.genome_library as gl\n\ncall_rate = gl.callrate(df,th=0.01)\n\ncall_rate is the data frame that includes the call rate over all the chromosomes\n\nParameters: df is the pandas data frame from basic function, th is the threshold based on the GenCall score.\n```\n\n\n* return call rate of all samples of one specific chromosome\n\n```\ncall_rate_chrom = gl.callrate_chr(df,chr_name,th=0.01)\n\ncall_rate_chrom is the data frame that includes the call rate of one chromosome\n\nParamters: df is the pandas data frame from basic function; chr_name is the name of selected chromosome ('X'); th is the threshold based on the GenCall score\n```\n\n* return the M and A features of one locus\n\n```\nnc, ab, aa, bb = gl.locus_ma(df,locus_name)\n\nnc, ab, aa and bb are pandas data frame with m and a features\n\nParameters: df is the pandas data frame from basic function; locus_name is the name of one specific locus ('rs3128117')\n```\n\n* return the M and A features of one chromsome of one sample\n\n```\nAM = gl.sample_ma(df,sample_name,chr_name)\n\nA and M features of one chromsome of one sample\n\nParameters: df is the pandas data frame from basic function; sample_name is the name of the sample; chr_name is the name one chromosome\n```\n\n* return pca components of all samples over all chromosomes\n\n```\npcs = gl.pca_samples(df,th=0.01,n=2)\n\npca is the pandas data frame that includes the first component and the second component.\n\nParameters: df is the pandas data frame from basic function; th is the threshold based on the GenCall score; n is the number of components\n\n```\n\n* return pca components of all samples of one specific chromosome\n\n```\npcs_chr = gl.pca_chr(df,chr_name,th=0.01,n=2)\n\npcs_chr is the data frame that includes the first component and the second component of one chromosome\n\nParameters: df is the pandas data frame from basic function; chr_name is the name of the selective chromosome; th is the threshold based on the GenCall score; n is the number of components\n\n```\n\n\n\n* Index rearrangement (set index levels (including name chromosome and position))\n```\ndfs = sc.Data.create_from_frame(df)\n\ndfs is Data type\n```\n\n* The attribute of Data type\n\n```\ndfs.restrict_chromosomes(['1','2']) (The parameters should be a list include the chromosome name)\n\ndfs.apply_NC_threshold_3(0.01,inplace = True) (where 0.01 is the GenCall threshold)\n```\n\n* M,A calculation\n```\ndfs.calculate_transformations_2()\n```\n* Load classifier\n```\nfrom SureTypeSC import loader\n\nclf = loader('clf_30trees_7228_ratio1_lightweight.clf')\n\nclf_2 = loader('clf_GDA_7228_ratio1_58cells.clf') (input should be the path of classifier)\n```\n* predict\n\n```\nresult_rf = clf.predict_decorate(dfs,clftype='rf',inn=['m','a'])  (test is the dataset,clftype is the short for classifier like 'rf' or 'gda'. inn is the input feature)\n\nresult_gda = clf.predict_decorate(result_rf,clftype='gda',inn=['m','a'])\n```\n\n* Train and predict\n\n```\ntrain = sc.Trainer(result_rf,clfname='gda',inner=['m','a'],outer='rf_ratio:1.0_pred')\n\ntrain.train()\n\nresult_end = train.predict_decorate(result_gda,clftype='rf-gda',inn=['m','a'])\n```\n\n\n* save the result\n```\nresult_end.save_complete_table('fulltable.txt',header=False)\n```\n* save the different modes\n\n```\nrecall mode: result_end.save_mode('recall','recall.txt',header=False,ratio=1.0)\n\nstandard mode: result_end.save_mode('standard','st.txt',header=False,ratio=1.0)\n\nprecision mode: result_end.save_mode('precision','precision.txt',header=False,ratio=1.0)\n\ncustomized saving: result_end.scsave('name.txt', header=True, clftype='rf',threshold=0.15)\n```\n\n```\nThe program enriches every sample in the input data by :\n\n| Subcolumn name  | Meaning |\n| ------------- | ------------- |\n| rf_ratio:1_pred  | Random Forest prediction (binary)  |\n| rf_ratio:1_prob  | Random Forest Score for the positive class |\n| gda_ratio:1_prob | Gaussian Discriminant Analysis score for the positive class  | \n| gda_ratio:1_pred | Gaussian Disciminant Analysis prediction (binary) | \n| rf-gda_ratio:1_prob | combined 2-layer RF and GDA - probability score for the positive class | \n| rf-gda_ratio:1_pred | binary prediction of RF-GDA | \n```\n\n\n<!---## Running the program - validation--->\n<!--- Validation procedures are implemented in SureTypeSC.py. To run a validation procedure equivalent to basic configuration, run:--->\n<!---```--->\n<!---python genotyping/SureTypeSC.py config/GM12878_basic_test.conf--->\n<!---```--->\n\n\n### Contact\nIn case of any questions please contact Ivan Vogel (ivogel@sund.ku.dk)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Meiomap/SureTypeSC_2", "keywords": "", "license": "GNU", "maintainer": "", "maintainer_email": "", "name": "SureTypeSC", "package_url": "https://pypi.org/project/SureTypeSC/", "platform": "", "project_url": "https://pypi.org/project/SureTypeSC/", "project_urls": {"Homepage": "https://github.com/Meiomap/SureTypeSC_2"}, "release_url": "https://pypi.org/project/SureTypeSC/0.3.0/", "requires_dist": ["pandas (>=0.22.0)", "tabulate (>=0.8.3)", "scikit-learn (>=0.20.4)", "numpy (>=1.16.4)", "IlluminaBeadArrayFiles", "json-tricks (==3.13.1)"], "requires_python": ">= 2.7.5", "summary": "SureTypeSC - software for improved genotyping in the single cell environment", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SureTypeSC</h1>\n<p>SureTypeSC is implementation of algorithm for regenotyping of single cell data.</p>\n<h2>Getting Started</h2>\n<pre><code>pip install SureTypeSC\n</code></pre>\n<h3>Prerequisites</h3>\n<ul>\n<li>python 2 (tested on Python 2.7.5)</li>\n<li>scikit = v0.19.1 (<a href=\"http://scikit-learn.org/stable/\" rel=\"nofollow\">http://scikit-learn.org/stable/</a>)</li>\n<li>numpy &gt;= v1.14.1 (<a href=\"http://www.numpy.org/\" rel=\"nofollow\">http://www.numpy.org/</a>)</li>\n<li>pandas &gt;= v0.22.0 (<a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">https://pandas.pydata.org/</a>)</li>\n<li>IlluminaBeadArrayFiles &gt;= 1.2.0</li>\n<li>json_tricks &gt;= v3 (<a href=\"https://pypi.org/project/json_tricks/\" rel=\"nofollow\">https://pypi.org/project/json_tricks/</a>)</li>\n<li>tabulate &gt;= v0.8.3(<a href=\"https://pypi.org/project/tabulate/\" rel=\"nofollow\">https://pypi.org/project/tabulate/</a>)</li>\n</ul>\n<h3>Usage</h3>\n<ul>\n<li>create genome studio file (include name,chromosome,position, genotype, gencall score, x raw intensities, x normalized intensities, y raw instensities and y normalized intensities) [format, pandas dataframe]</li>\n</ul>\n<pre><code>import SureTypeSC as sc\n\ndf = sc.basic(\"HumanKaryomap-12v1_A.bpm\",\"HumanKaryomap-12v1_A.egt\",\"Samplesheetr.csv\")\n\n\nParameters:The path of manifest file, the path of cluster file, the path of samplesheet file; \nThe template of sample sheet is in Samplesheetr.csv\n</code></pre>\n<ul>\n<li>return call rate of all samples over all chromosomes</li>\n</ul>\n<pre><code>import SureTypeSC.genome_library as gl\n\ncall_rate = gl.callrate(df,th=0.01)\n\ncall_rate is the data frame that includes the call rate over all the chromosomes\n\nParameters: df is the pandas data frame from basic function, th is the threshold based on the GenCall score.\n</code></pre>\n<ul>\n<li>return call rate of all samples of one specific chromosome</li>\n</ul>\n<pre><code>call_rate_chrom = gl.callrate_chr(df,chr_name,th=0.01)\n\ncall_rate_chrom is the data frame that includes the call rate of one chromosome\n\nParamters: df is the pandas data frame from basic function; chr_name is the name of selected chromosome ('X'); th is the threshold based on the GenCall score\n</code></pre>\n<ul>\n<li>return the M and A features of one locus</li>\n</ul>\n<pre><code>nc, ab, aa, bb = gl.locus_ma(df,locus_name)\n\nnc, ab, aa and bb are pandas data frame with m and a features\n\nParameters: df is the pandas data frame from basic function; locus_name is the name of one specific locus ('rs3128117')\n</code></pre>\n<ul>\n<li>return the M and A features of one chromsome of one sample</li>\n</ul>\n<pre><code>AM = gl.sample_ma(df,sample_name,chr_name)\n\nA and M features of one chromsome of one sample\n\nParameters: df is the pandas data frame from basic function; sample_name is the name of the sample; chr_name is the name one chromosome\n</code></pre>\n<ul>\n<li>return pca components of all samples over all chromosomes</li>\n</ul>\n<pre><code>pcs = gl.pca_samples(df,th=0.01,n=2)\n\npca is the pandas data frame that includes the first component and the second component.\n\nParameters: df is the pandas data frame from basic function; th is the threshold based on the GenCall score; n is the number of components\n\n</code></pre>\n<ul>\n<li>return pca components of all samples of one specific chromosome</li>\n</ul>\n<pre><code>pcs_chr = gl.pca_chr(df,chr_name,th=0.01,n=2)\n\npcs_chr is the data frame that includes the first component and the second component of one chromosome\n\nParameters: df is the pandas data frame from basic function; chr_name is the name of the selective chromosome; th is the threshold based on the GenCall score; n is the number of components\n\n</code></pre>\n<ul>\n<li>Index rearrangement (set index levels (including name chromosome and position))</li>\n</ul>\n<pre><code>dfs = sc.Data.create_from_frame(df)\n\ndfs is Data type\n</code></pre>\n<ul>\n<li>The attribute of Data type</li>\n</ul>\n<pre><code>dfs.restrict_chromosomes(['1','2']) (The parameters should be a list include the chromosome name)\n\ndfs.apply_NC_threshold_3(0.01,inplace = True) (where 0.01 is the GenCall threshold)\n</code></pre>\n<ul>\n<li>M,A calculation</li>\n</ul>\n<pre><code>dfs.calculate_transformations_2()\n</code></pre>\n<ul>\n<li>Load classifier</li>\n</ul>\n<pre><code>from SureTypeSC import loader\n\nclf = loader('clf_30trees_7228_ratio1_lightweight.clf')\n\nclf_2 = loader('clf_GDA_7228_ratio1_58cells.clf') (input should be the path of classifier)\n</code></pre>\n<ul>\n<li>predict</li>\n</ul>\n<pre><code>result_rf = clf.predict_decorate(dfs,clftype='rf',inn=['m','a'])  (test is the dataset,clftype is the short for classifier like 'rf' or 'gda'. inn is the input feature)\n\nresult_gda = clf.predict_decorate(result_rf,clftype='gda',inn=['m','a'])\n</code></pre>\n<ul>\n<li>Train and predict</li>\n</ul>\n<pre><code>train = sc.Trainer(result_rf,clfname='gda',inner=['m','a'],outer='rf_ratio:1.0_pred')\n\ntrain.train()\n\nresult_end = train.predict_decorate(result_gda,clftype='rf-gda',inn=['m','a'])\n</code></pre>\n<ul>\n<li>save the result</li>\n</ul>\n<pre><code>result_end.save_complete_table('fulltable.txt',header=False)\n</code></pre>\n<ul>\n<li>save the different modes</li>\n</ul>\n<pre><code>recall mode: result_end.save_mode('recall','recall.txt',header=False,ratio=1.0)\n\nstandard mode: result_end.save_mode('standard','st.txt',header=False,ratio=1.0)\n\nprecision mode: result_end.save_mode('precision','precision.txt',header=False,ratio=1.0)\n\ncustomized saving: result_end.scsave('name.txt', header=True, clftype='rf',threshold=0.15)\n</code></pre>\n<pre><code>The program enriches every sample in the input data by :\n\n| Subcolumn name  | Meaning |\n| ------------- | ------------- |\n| rf_ratio:1_pred  | Random Forest prediction (binary)  |\n| rf_ratio:1_prob  | Random Forest Score for the positive class |\n| gda_ratio:1_prob | Gaussian Discriminant Analysis score for the positive class  | \n| gda_ratio:1_pred | Gaussian Disciminant Analysis prediction (binary) | \n| rf-gda_ratio:1_prob | combined 2-layer RF and GDA - probability score for the positive class | \n| rf-gda_ratio:1_pred | binary prediction of RF-GDA | \n</code></pre>\n\n\n\n\n\n<h3>Contact</h3>\n<p>In case of any questions please contact Ivan Vogel (<a href=\"mailto:ivogel@sund.ku.dk\">ivogel@sund.ku.dk</a>)</p>\n\n          </div>"}, "last_serial": 6538554, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "d21712a8c49fb9c37655d64826d04160", "sha256": "4a47dbcc6d1e52a39425e61e458588f7fc2dd358b74e98a261f2e0b18c39ebdb"}, "downloads": -1, "filename": "SureTypeSC-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "d21712a8c49fb9c37655d64826d04160", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">= 2.7.5", "size": 46689, "upload_time": "2020-01-29T15:24:42", "upload_time_iso_8601": "2020-01-29T15:24:42.846238Z", "url": "https://files.pythonhosted.org/packages/a8/11/6a15a7cca877d3909efc9429423841aa6150901d215abef28647f3f3eac9/SureTypeSC-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a13e8fe1a19a4f2bd5134036c2f409e", "sha256": "fbc100b23a2d3c837a813eb5abd8a5244330bebb89eff040ed78a42ad1944706"}, "downloads": -1, "filename": "SureTypeSC-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1a13e8fe1a19a4f2bd5134036c2f409e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 2.7.5", "size": 33224, "upload_time": "2020-01-29T15:24:45", "upload_time_iso_8601": "2020-01-29T15:24:45.334647Z", "url": "https://files.pythonhosted.org/packages/53/74/3078e5943a75760378e85463a7cbc0825154300f1ec37298aada9965ad79/SureTypeSC-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d21712a8c49fb9c37655d64826d04160", "sha256": "4a47dbcc6d1e52a39425e61e458588f7fc2dd358b74e98a261f2e0b18c39ebdb"}, "downloads": -1, "filename": "SureTypeSC-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "d21712a8c49fb9c37655d64826d04160", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">= 2.7.5", "size": 46689, "upload_time": "2020-01-29T15:24:42", "upload_time_iso_8601": "2020-01-29T15:24:42.846238Z", "url": "https://files.pythonhosted.org/packages/a8/11/6a15a7cca877d3909efc9429423841aa6150901d215abef28647f3f3eac9/SureTypeSC-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a13e8fe1a19a4f2bd5134036c2f409e", "sha256": "fbc100b23a2d3c837a813eb5abd8a5244330bebb89eff040ed78a42ad1944706"}, "downloads": -1, "filename": "SureTypeSC-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1a13e8fe1a19a4f2bd5134036c2f409e", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 2.7.5", "size": 33224, "upload_time": "2020-01-29T15:24:45", "upload_time_iso_8601": "2020-01-29T15:24:45.334647Z", "url": "https://files.pythonhosted.org/packages/53/74/3078e5943a75760378e85463a7cbc0825154300f1ec37298aada9965ad79/SureTypeSC-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:02 2020"}