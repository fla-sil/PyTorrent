{"info": {"author": "Kyle Hickmann", "author_email": "khickma@tulane.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics"], "description": "###############################################################################\n###############################################################################\n#   Copyright 2014 Kyle S. Hickmann and\n#                  The Administrators of the Tulane Educational Fund\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n###############################################################################\n###############################################################################\n\npyda separates ensemble generation and filtering/analysis into\nseparate class objects. These are then used together in an\nassimilation class object. This allows the user to code the ensemble\ngeneration, assimilation, and filtering/analysis steps\nseparately. Allowing concentration on the element of the assimilation\nprocess they are interested in refining. This also allows a user to\ncode up their particular ensemble generation method and use the\nassimilation and filtering classes we have provided to perform the\nassimilation. If you have written a time-dependent simulation in\npython then pyda will handle the data assimilation problem. There is\nminimal support for visualization and assimilation evaluation as well.\n\nThis package includes:\n     - Classes to generate an ensemble of runs from a simulation\n     - Classes to perform various flavors of Ensemble Kalman filtering\n     - Classes to perform various particle filtering and sequential \n       monte carlo filtering \n     - Classes to control interaction between ensemble generation, data, \n       and analysis for data assimilation\n     - Multiple examples to experiment with data assimilation\n     - Functions to visualize data assimilation process occurring in the exmples\n     - Functions to evaluate effectiveness of data assimilation process\n\n#############################################\n#############################################\nNon-Standard Packages Used:\n\t Numpy and Matplotlib\n#############################################\n\nQUICK START:\n\n      Just run\n      >> python setup.py install\n      \n      Then, from the examples directory, try\n      >> python SIR_enkf1.py\n\nDirectory Structure:\n\npyda1.0/\n\tMANIFEST.in\n\tLICENSE\n\tREADME\n\tsetup.py\n\tez_setup.py\n\texamples/\n\t\tSIR_enkf1.py\n\t\t:\n\t\tdata/\n\t\t    :\n\t\tfigures/\n\t\t       :\n\n\tpyda/\n\t\t__init__.py\n\t\tanalysis_generator/\n\t\t\t__init__.py\n\t\t\tanalysis_generator_class.py\n\t\t\t:\n\t\t\tkf/\n\t\t\t\t__init__.py\n\t\t\t\tenkf1.py\n\t\t\t\t:\n\t\t\tpf/\n\t\t\t\t__init__.py\n\t\t\t\t:\n\t\tassimilation/\n\t\t\t__init__.py\n\t\t\tassimilation_current.py\n\t\t\tdata_assimilation_class.py\n\t\t\t:\n\t\tensemble_generator/\n\t\t\t__init__.py\n\t\t\tensemble_generator_class.py\n\t\t\tSIRensemble.py\n\t\t\t:\n\t\tutilities/\n\t\t\t__init__.py\n\t\t\tepiODElib.py\n\t\t\t:\n\t\t\nDescription:\n------------\n\nexamples directory:\n\t \n\t SIR_enkf1.py, an implementation of ensemble Kalman Filter\n\t data assimilation using pyda. This serves as a basic example\n\t of how the pyda classes are used together with a simulation.\n\npyda directory:\n\t\n\tThis contains class files and helper module files in the\n\tutilities directory.\n\nanalysis_generator:\n\n\tHere classes are defined to implement data assimilation\n\tfilters. The analysis classes are meant to be derived all from\n\tthe AnalysisGeneratorClass defined in\n\tanalysis_generator_class.py. Data assimilation filters are\n\tdivided into Kalman Filter type and Particle Filter type.\n\nkf:\n\n\tAn example of an Ensemble Kalman filter analysis class is\n\tdefined in enkf1.py. Other variants of Kalman filters are to\n\tbe included here.\n\npf:\n\n\tVariants of particle filter and sequential monte carlo\n\tanalysis schemes are meant to be included here.\n\nassimilation:\n\n\tBeyond generating ensembles and producing filtered analysis\n\tensembles data assimilation must control exactly how these\n\tschemes interact with data. In this directory classes that\n\thandle this are included. All data assimilation classes are\n\tmeant to be derived from the DataAssimilationClass defined in\n\tdata_assimilation_class.py. DA_current defined in\n\tassimilation_current.py is an example of such a class.\n\nensemble_generator:\n\n\tThe user must already have software for simulation in place to\n\tuse pyda. If this is the case then an ensemble generator class\n\twill control how the simulation produces forecasts. Classes\n\tare all derived from EnsembleGeneratorClass which is defined\n\tin ensemble_generator_class.py. SIRensemble.py defines a\n\tspecific class to call on SIR epidemic simulation defined in\n\tthe epiODElib.py module under utilities/.\n\nutilities:\n\n\tThis is a directory of helper modules. Currently this contains\n\tepiODEli.py which implements Runge-Kutta solvers for several\n\tdifferential equation based epidemic models. This directory\n\talso contains a basic visualization module AssimilationVis.py\n\twhich uses matplotlib to visualize ensemble and analysis\n\tsolutions.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://hickmank.github.io/pyda", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "pyda", "package_url": "https://pypi.org/project/pyda/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyda/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://hickmank.github.io/pyda"}, "release_url": "https://pypi.org/project/pyda/1.0/", "requires_dist": null, "requires_python": null, "summary": "pyda is a general object-oriented data assimilation package", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ###############################################################################<br>###############################################################################<br>#   Copyright 2014 Kyle S. Hickmann and<br>#                  The Administrators of the Tulane Educational Fund<br>#<br>#   Licensed under the Apache License, Version 2.0 (the \"License\");<br>#   you may not use this file except in compliance with the License.<br>#   You may obtain a copy of the License at<br>#<br>#       http://www.apache.org/licenses/LICENSE-2.0<br>#<br>#   Unless required by applicable law or agreed to in writing, software<br>#   distributed under the License is distributed on an \"AS IS\" BASIS,<br>#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>#   See the License for the specific language governing permissions and<br>#   limitations under the License.<br>###############################################################################<br>###############################################################################<br><br>pyda separates ensemble generation and filtering/analysis into<br>separate class objects. These are then used together in an<br>assimilation class object. This allows the user to code the ensemble<br>generation, assimilation, and filtering/analysis steps<br>separately. Allowing concentration on the element of the assimilation<br>process they are interested in refining. This also allows a user to<br>code up their particular ensemble generation method and use the<br>assimilation and filtering classes we have provided to perform the<br>assimilation. If you have written a time-dependent simulation in<br>python then pyda will handle the data assimilation problem. There is<br>minimal support for visualization and assimilation evaluation as well.<br><br>This package includes:<br>     - Classes to generate an ensemble of runs from a simulation<br>     - Classes to perform various flavors of Ensemble Kalman filtering<br>     - Classes to perform various particle filtering and sequential <br>       monte carlo filtering <br>     - Classes to control interaction between ensemble generation, data, <br>       and analysis for data assimilation<br>     - Multiple examples to experiment with data assimilation<br>     - Functions to visualize data assimilation process occurring in the exmples<br>     - Functions to evaluate effectiveness of data assimilation process<br><br>#############################################<br>#############################################<br>Non-Standard Packages Used:<br>\t Numpy and Matplotlib<br>#############################################<br><br>QUICK START:<br><br>      Just run<br>      &gt;&gt; python setup.py install<br>      <br>      Then, from the examples directory, try<br>      &gt;&gt; python SIR_enkf1.py<br><br>Directory Structure:<br><br>pyda1.0/<br>\tMANIFEST.in<br>\tLICENSE<br>\tREADME<br>\tsetup.py<br>\tez_setup.py<br>\texamples/<br>\t\tSIR_enkf1.py<br>\t\t:<br>\t\tdata/<br>\t\t    :<br>\t\tfigures/<br>\t\t       :<br><br>\tpyda/<br>\t\t__init__.py<br>\t\tanalysis_generator/<br>\t\t\t__init__.py<br>\t\t\tanalysis_generator_class.py<br>\t\t\t:<br>\t\t\tkf/<br>\t\t\t\t__init__.py<br>\t\t\t\tenkf1.py<br>\t\t\t\t:<br>\t\t\tpf/<br>\t\t\t\t__init__.py<br>\t\t\t\t:<br>\t\tassimilation/<br>\t\t\t__init__.py<br>\t\t\tassimilation_current.py<br>\t\t\tdata_assimilation_class.py<br>\t\t\t:<br>\t\tensemble_generator/<br>\t\t\t__init__.py<br>\t\t\tensemble_generator_class.py<br>\t\t\tSIRensemble.py<br>\t\t\t:<br>\t\tutilities/<br>\t\t\t__init__.py<br>\t\t\tepiODElib.py<br>\t\t\t:<br>\t\t<br>Description:<br>------------<br><br>examples directory:<br>\t <br>\t SIR_enkf1.py, an implementation of ensemble Kalman Filter<br>\t data assimilation using pyda. This serves as a basic example<br>\t of how the pyda classes are used together with a simulation.<br><br>pyda directory:<br>\t<br>\tThis contains class files and helper module files in the<br>\tutilities directory.<br><br>analysis_generator:<br><br>\tHere classes are defined to implement data assimilation<br>\tfilters. The analysis classes are meant to be derived all from<br>\tthe AnalysisGeneratorClass defined in<br>\tanalysis_generator_class.py. Data assimilation filters are<br>\tdivided into Kalman Filter type and Particle Filter type.<br><br>kf:<br><br>\tAn example of an Ensemble Kalman filter analysis class is<br>\tdefined in enkf1.py. Other variants of Kalman filters are to<br>\tbe included here.<br><br>pf:<br><br>\tVariants of particle filter and sequential monte carlo<br>\tanalysis schemes are meant to be included here.<br><br>assimilation:<br><br>\tBeyond generating ensembles and producing filtered analysis<br>\tensembles data assimilation must control exactly how these<br>\tschemes interact with data. In this directory classes that<br>\thandle this are included. All data assimilation classes are<br>\tmeant to be derived from the DataAssimilationClass defined in<br>\tdata_assimilation_class.py. DA_current defined in<br>\tassimilation_current.py is an example of such a class.<br><br>ensemble_generator:<br><br>\tThe user must already have software for simulation in place to<br>\tuse pyda. If this is the case then an ensemble generator class<br>\twill control how the simulation produces forecasts. Classes<br>\tare all derived from EnsembleGeneratorClass which is defined<br>\tin ensemble_generator_class.py. SIRensemble.py defines a<br>\tspecific class to call on SIR epidemic simulation defined in<br>\tthe epiODElib.py module under utilities/.<br><br>utilities:<br><br>\tThis is a directory of helper modules. Currently this contains<br>\tepiODEli.py which implements Runge-Kutta solvers for several<br>\tdifferential equation based epidemic models. This directory<br>\talso contains a basic visualization module AssimilationVis.py<br>\twhich uses matplotlib to visualize ensemble and analysis<br>\tsolutions.\n          </div>"}, "last_serial": 1058181, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "725408e96cbd9821107b2812e96caa20", "sha256": "025e5f629e2cda2c74881575e333399e3007611e6ce6ca494145e35f53f7e26b"}, "downloads": -1, "filename": "pyda-1.0.tar.gz", "has_sig": false, "md5_digest": "725408e96cbd9821107b2812e96caa20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1821893, "upload_time": "2014-04-11T19:48:44", "upload_time_iso_8601": "2014-04-11T19:48:44.570298Z", "url": "https://files.pythonhosted.org/packages/14/42/8e6e922f6e43b2b450fd6c1f46cb898200c16689b132bc24a6a026252f7b/pyda-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "725408e96cbd9821107b2812e96caa20", "sha256": "025e5f629e2cda2c74881575e333399e3007611e6ce6ca494145e35f53f7e26b"}, "downloads": -1, "filename": "pyda-1.0.tar.gz", "has_sig": false, "md5_digest": "725408e96cbd9821107b2812e96caa20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1821893, "upload_time": "2014-04-11T19:48:44", "upload_time_iso_8601": "2014-04-11T19:48:44.570298Z", "url": "https://files.pythonhosted.org/packages/14/42/8e6e922f6e43b2b450fd6c1f46cb898200c16689b132bc24a6a026252f7b/pyda-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:30 2020"}