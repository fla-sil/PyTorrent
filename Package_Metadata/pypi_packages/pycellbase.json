{"info": {"author": "Daniel Perez-Gil", "author_email": "dperezgil89@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": ".. contents::\n\nPyCellBase\n==========\n\n- PyCellBase is a Python package that provides programmatic access to the comprehensive RESTful web service API that has been implemented for the `CellBase`_ database, providing an easy, lightweight, fast and intuitive access to it.\n- This package can be used to access to relevant biological information in a user-friendly way without the need of local databases installations.\n- Data is always available by a high-availability cluster and queries have been tuned to ensure a real-time performance.\n- PyCellBase offers the convenience of an object-oriented scripting language and provides the ability to integrate the obtained results into other Python applications.\n- More info about this package in the `Python client`_ section of the `CellBase Wiki`_\n\nInstallation\n------------\n\nCloning\n```````\nPyCellBase can be cloned in your local machine by executing in your terminal::\n\n   $ git clone https://github.com/opencb/cellbase.git\n\nOnce you have downloaded the project you can install the library::\n\n   $ cd cellbase/clients/python\n   $ python setup.py install\n\nPyPI\n````\nPyCellBase is stored in PyPI and can be installed via pip::\n\n   $ pip install pycellbase\n\nREST client library\n-------------------\n\nPyCellBase consumes the RESTful web services provided by `CellBase`_, providing a simple and fast access to the database.\nA series of clients and methods have been implemented to retrieve specific resources from the main features.\n\nGetting started\n```````````````\nThe first step is to import the module and initialize the **CellBaseClient**:\n\n.. code-block:: python\n\n    >>> from pycellbase.cbclient import CellBaseClient\n    >>> cbc = CellBaseClient()\n\nThe second step is to create the **specific client** for the data we want to query (in this example we want to obtain information for a gene):\n\n.. code-block:: python\n\n   >>> gc = cbc.get_gene_client()\n\nAnd now, you can start asking to the CellBase RESTful service by providing a **query ID**:\n\n.. code-block:: python\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1')  # Obtaining TFBS for this gene\n\nResponses are retrieved as **JSON** formatted data. Therefore, fields can be queried by key:\n\n.. code-block:: python\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1')\n    >>> tfbs_responses[0]['result'][0]['tfName']\n    'E2F4'\n\n    >>> transcript_responses = gc.get_transcript('BRCA1')\n    >>> 'Number of transcripts: %d' % (len(transcript_responses[0]['result']))\n    'Number of transcripts: 27'\n\n    >>> for tfbs_response in gc.get_tfbs('BRCA1,BRCA2,LDLR'):\n    ...     print('Number of TFBS for \"%s\": %d' % (tfbs_response['id'], len(tfbs_response['result'])))\n    'Number of TFBS for \"BRCA1\": 175'\n    'Number of TFBS for \"BRCA2\": 43'\n    'Number of TFBS for \"LDLR\": 141'\n\nData can be accessed specifying **comma-separated IDs** or a **list of IDs**:\n\n.. code-block:: python\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1')\n    >>> len(tfbs_responses)\n    1\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1,BRCA2')\n    >>> len(tfbs_responses)\n    2\n\n    >>> tfbs_responses = gc.get_tfbs(['BRCA1', 'BRCA2'])\n    >>> len(tfbs_responses)\n    2\n\nIf there is an available resource in the CellBase Webservices, but there is not an available method in this python package, the CellBaseClient can be used to create the URL of interest and query the RESTful service:\n\n.. code-block:: python\n\n    >>> tfbs_responses = cbc.get(category='feature', subcategory='gene', query_id='BRCA1', resource='tfbs')\n    >>> tfbs_responses[0]['result'][0]['tfName']\n    'E2F4'\n\nOptional **filters and extra options** can be added as key-value parameters (value can be a comma-separated string or a list):\n\n.. code-block:: python\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1')\n    >>> len(res[0]['result'])\n    175\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1', include='name,id')  # Return only name and id\n    >>> len(res[0]['result'])\n    175\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1', include=['name', 'id'])  # Return only name and id\n    >>> len(res[0]['result'])\n    175\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1', **{'include': 'name,id'])  # Return only name and id\n    >>> len(res[0]['result'])\n    175\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1', limit=100)  # Limit to 100 results\n    >>> len(res[0]['result'])\n    100\n\n    >>> tfbs_responses = gc.get_tfbs('BRCA1', skip=100)  # Skip first 100 results\n    >>> len(res[0]['result'])\n    75\n\nWhat can I ask for?\n```````````````````\nThe best way to know which data can be retrieved for each client is either checking out the `RESTful web services`_ section of the CellBase Wiki or the `CellBase web services`_\n\nConfiguration\n`````````````\n\nConfiguration stores the REST services host, API version and species.\n\nGetting the **default configuration**:\n\n.. code-block:: python\n\n    >>> ConfigClient().get_default_configuration()\n    {'version': 'v4',\n     'species': 'hsapiens',\n     'rest': {'hosts': ['http://bioinfo.hpc.cam.ac.uk:80/cellbase']}}\n\n\nShowing the configuration parameters being used at the moment:\n\n.. code-block:: python\n\n    >>> cbc.show_configuration()\n    {'host': 'bioinfo.hpc.cam.ac.uk:80/cellbase',\n     'version': 'v4',\n     'species': 'hsapiens'}\n\nA **custom configuration** can be passed to CellBaseClient using a **ConfigClient object**. JSON and YAML files are supported:\n\n.. code-block:: python\n\n    >>> from pycellbase.cbconfig import ConfigClient\n    >>> from pycellbase.cbclient import CellBaseClient\n\n    >>> cc = ConfigClient('config.json')\n    >>> cbc = CellBaseClient(cc)\n\nA **custom configuration** can also be passed as a dictionary:\n\n.. code-block:: python\n\n    >>> from pycellbase.cbconfig import ConfigClient\n    >>> from pycellbase.cbclient import CellBaseClient\n\n    >>> custom_config = {'rest': {'hosts': ['bioinfo.hpc.cam.ac.uk:80/cellbase']}, 'version': 'v4', 'species': 'hsapiens'}\n    >>> cc = ConfigClient(custom_config)\n    >>> cbc = CellBaseClient(cc)\n\nIf you want to change the configuration **on the fly** you can directly modify the ConfigClient object:\n\n.. code-block:: python\n\n    >>> cc = ConfigClient()\n    >>> cbc = CellBaseClient(cc)\n\n    >>> cbc.show_configuration()['version']\n    'v4'\n    >>> cc.version = 'v3'\n    >>> cbc.show_configuration()['version']\n    'v3'\n\nUse case\n````````\nA use case where PyCellBase is used to obtain multiple kinds of data from different sources can be found in this `Jupyter Notebook`_\n\nCommand-line tools\n------------------\n\nA command-line interface, called cbtools.py, has been implemented with several tools to ease and speed up frequently performed tasks in bioinformatics.\nThese tools make use of the REST client library and offer a further output processing to facilitate its analysis.\n\nID converter\n````````````\n\nThis tool annotates genomic features with all their associated IDs, making use of 74 different sources for human, including most common databases such as Ensembl, NCBI, RefSeq, Reactome, OMIM, PDB, miRBase or UniProt among others.\nIn addition, it supports heterogeneous input files with IDs from different sources.\n\n.. code-block:: bash\n\n    $ cbtools.py xref file_with_ids.vcf > output.txt\n\nHGVS calculator\n```````````````\n\nThis tool annotates variants with their associated HGVS names.\nGiven a variant (in the format \u201cchromosome:position:reference:alternate\u201d), this tool returns all the associated HGVS names for many different types of reference sequence.\n\n.. code-block:: bash\n\n    $ cbtools.py hgvs 19:45411941:T:C\n\nA file with multiple variants can also be used.\n\n.. code-block:: bash\n\n    $ cbtools.py hgvs file_with_variants.txt > output.txt\n\nVCF annotator\n`````````````\n\nThis tool takes a VCF file as input and returns it with its variants annotated with a broad range of information such as consequence types, population frequencies, overlapping sequence repeats, cytobands, gene expression, conservation scores, clinical significance (ClinVar, COSMIC, diseases and drugs), functional scores and more.\n\n.. code-block:: bash\n\n    $ cbtools.py annotation input.vcf > output.vcf\n\n\n\n.. _CellBase: https://github.com/opencb/cellbase\n.. _CellBase Wiki: https://github.com/opencb/cellbase/wiki\n.. _Python client: https://github.com/opencb/cellbase/wiki/Python-client\n.. _RESTful web services: https://github.com/opencb/cellbase/wiki/RESTful-web-services\n.. _CellBase web services: http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/\n.. _Jupyter Notebook: http://nbviewer.jupyter.org/github/opencb/cellbase/blob/develop/clients/python/use_case.ipynb\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opencb/cellbase/tree/develop/clients/python", "keywords": "opencb cellbase bioinformatics database", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "pycellbase", "package_url": "https://pypi.org/project/pycellbase/", "platform": "", "project_url": "https://pypi.org/project/pycellbase/", "project_urls": {"Homepage": "https://github.com/opencb/cellbase/tree/develop/clients/python"}, "release_url": "https://pypi.org/project/pycellbase/4.7.1/", "requires_dist": ["pyyaml", "requests", "retrying"], "requires_python": "", "summary": "Python client for CellBase", "version": "4.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#pycellbase\" id=\"id1\" rel=\"nofollow\">PyCellBase</a><ul>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#cloning\" id=\"id3\" rel=\"nofollow\">Cloning</a></li>\n<li><a href=\"#pypi\" id=\"id4\" rel=\"nofollow\">PyPI</a></li>\n</ul>\n</li>\n<li><a href=\"#rest-client-library\" id=\"id5\" rel=\"nofollow\">REST client library</a><ul>\n<li><a href=\"#getting-started\" id=\"id6\" rel=\"nofollow\">Getting started</a></li>\n<li><a href=\"#what-can-i-ask-for\" id=\"id7\" rel=\"nofollow\">What can I ask for?</a></li>\n<li><a href=\"#configuration\" id=\"id8\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#use-case\" id=\"id9\" rel=\"nofollow\">Use case</a></li>\n</ul>\n</li>\n<li><a href=\"#command-line-tools\" id=\"id10\" rel=\"nofollow\">Command-line tools</a><ul>\n<li><a href=\"#id-converter\" id=\"id11\" rel=\"nofollow\">ID converter</a></li>\n<li><a href=\"#hgvs-calculator\" id=\"id12\" rel=\"nofollow\">HGVS calculator</a></li>\n<li><a href=\"#vcf-annotator\" id=\"id13\" rel=\"nofollow\">VCF annotator</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"pycellbase\">\n<h2><a href=\"#id1\" rel=\"nofollow\">PyCellBase</a></h2>\n<ul>\n<li>PyCellBase is a Python package that provides programmatic access to the comprehensive RESTful web service API that has been implemented for the <a href=\"https://github.com/opencb/cellbase\" rel=\"nofollow\">CellBase</a> database, providing an easy, lightweight, fast and intuitive access to it.</li>\n<li>This package can be used to access to relevant biological information in a user-friendly way without the need of local databases installations.</li>\n<li>Data is always available by a high-availability cluster and queries have been tuned to ensure a real-time performance.</li>\n<li>PyCellBase offers the convenience of an object-oriented scripting language and provides the ability to integrate the obtained results into other Python applications.</li>\n<li>More info about this package in the <a href=\"https://github.com/opencb/cellbase/wiki/Python-client\" rel=\"nofollow\">Python client</a> section of the <a href=\"https://github.com/opencb/cellbase/wiki\" rel=\"nofollow\">CellBase Wiki</a></li>\n</ul>\n<div id=\"installation\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Installation</a></h3>\n<div id=\"cloning\">\n<h4><a href=\"#id3\" rel=\"nofollow\">Cloning</a></h4>\n<p>PyCellBase can be cloned in your local machine by executing in your terminal:</p>\n<pre>$ git clone https://github.com/opencb/cellbase.git\n</pre>\n<p>Once you have downloaded the project you can install the library:</p>\n<pre>$ cd cellbase/clients/python\n$ python setup.py install\n</pre>\n</div>\n<div id=\"pypi\">\n<h4><a href=\"#id4\" rel=\"nofollow\">PyPI</a></h4>\n<p>PyCellBase is stored in PyPI and can be installed via pip:</p>\n<pre>$ pip install pycellbase\n</pre>\n</div>\n</div>\n<div id=\"rest-client-library\">\n<h3><a href=\"#id5\" rel=\"nofollow\">REST client library</a></h3>\n<p>PyCellBase consumes the RESTful web services provided by <a href=\"https://github.com/opencb/cellbase\" rel=\"nofollow\">CellBase</a>, providing a simple and fast access to the database.\nA series of clients and methods have been implemented to retrieve specific resources from the main features.</p>\n<div id=\"getting-started\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Getting started</a></h4>\n<p>The first step is to import the module and initialize the <strong>CellBaseClient</strong>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycellbase.cbclient</span> <span class=\"kn\">import</span> <span class=\"n\">CellBaseClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span> <span class=\"o\">=</span> <span class=\"n\">CellBaseClient</span><span class=\"p\">()</span>\n</pre>\n<p>The second step is to create the <strong>specific client</strong> for the data we want to query (in this example we want to obtain information for a gene):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">gc</span> <span class=\"o\">=</span> <span class=\"n\">cbc</span><span class=\"o\">.</span><span class=\"n\">get_gene_client</span><span class=\"p\">()</span>\n</pre>\n<p>And now, you can start asking to the CellBase RESTful service by providing a <strong>query ID</strong>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">)</span>  <span class=\"c1\"># Obtaining TFBS for this gene</span>\n</pre>\n<p>Responses are retrieved as <strong>JSON</strong> formatted data. Therefore, fields can be queried by key:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'tfName'</span><span class=\"p\">]</span>\n<span class=\"s1\">'E2F4'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">transcript_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_transcript</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'Number of transcripts: </span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">transcript_responses</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">]))</span>\n<span class=\"s1\">'Number of transcripts: 27'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">tfbs_response</span> <span class=\"ow\">in</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1,BRCA2,LDLR'</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of TFBS for \"</span><span class=\"si\">%s</span><span class=\"s1\">\": </span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">tfbs_response</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tfbs_response</span><span class=\"p\">[</span><span class=\"s1\">'result'</span><span class=\"p\">])))</span>\n<span class=\"s1\">'Number of TFBS for \"BRCA1\": 175'</span>\n<span class=\"s1\">'Number of TFBS for \"BRCA2\": 43'</span>\n<span class=\"s1\">'Number of TFBS for \"LDLR\": 141'</span>\n</pre>\n<p>Data can be accessed specifying <strong>comma-separated IDs</strong> or a <strong>list of IDs</strong>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tfbs_responses</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1,BRCA2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tfbs_responses</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">([</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"s1\">'BRCA2'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tfbs_responses</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>If there is an available resource in the CellBase Webservices, but there is not an available method in this python package, the CellBaseClient can be used to create the URL of interest and query the RESTful service:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">cbc</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s1\">'feature'</span><span class=\"p\">,</span> <span class=\"n\">subcategory</span><span class=\"o\">=</span><span class=\"s1\">'gene'</span><span class=\"p\">,</span> <span class=\"n\">query_id</span><span class=\"o\">=</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s1\">'tfbs'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'tfName'</span><span class=\"p\">]</span>\n<span class=\"s1\">'E2F4'</span>\n</pre>\n<p>Optional <strong>filters and extra options</strong> can be added as key-value parameters (value can be a comma-separated string or a list):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">175</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"o\">=</span><span class=\"s1\">'name,id'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return only name and id</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">175</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">])</span>  <span class=\"c1\"># Return only name and id</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">175</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'include'</span><span class=\"p\">:</span> <span class=\"s1\">'name,id'</span><span class=\"p\">])</span>  <span class=\"c1\"># Return only name and id</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">175</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># Limit to 100 results</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">100</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tfbs_responses</span> <span class=\"o\">=</span> <span class=\"n\">gc</span><span class=\"o\">.</span><span class=\"n\">get_tfbs</span><span class=\"p\">(</span><span class=\"s1\">'BRCA1'</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># Skip first 100 results</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'result'</span><span class=\"p\">])</span>\n<span class=\"mi\">75</span>\n</pre>\n</div>\n<div id=\"what-can-i-ask-for\">\n<h4><a href=\"#id7\" rel=\"nofollow\">What can I ask for?</a></h4>\n<p>The best way to know which data can be retrieved for each client is either checking out the <a href=\"https://github.com/opencb/cellbase/wiki/RESTful-web-services\" rel=\"nofollow\">RESTful web services</a> section of the CellBase Wiki or the <a href=\"http://bioinfo.hpc.cam.ac.uk/cellbase/webservices/\" rel=\"nofollow\">CellBase web services</a></p>\n</div>\n<div id=\"configuration\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Configuration</a></h4>\n<p>Configuration stores the REST services host, API version and species.</p>\n<p>Getting the <strong>default configuration</strong>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ConfigClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_default_configuration</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'v4'</span><span class=\"p\">,</span>\n <span class=\"s1\">'species'</span><span class=\"p\">:</span> <span class=\"s1\">'hsapiens'</span><span class=\"p\">,</span>\n <span class=\"s1\">'rest'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'http://bioinfo.hpc.cam.ac.uk:80/cellbase'</span><span class=\"p\">]}}</span>\n</pre>\n<p>Showing the configuration parameters being used at the moment:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span><span class=\"o\">.</span><span class=\"n\">show_configuration</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'bioinfo.hpc.cam.ac.uk:80/cellbase'</span><span class=\"p\">,</span>\n <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'v4'</span><span class=\"p\">,</span>\n <span class=\"s1\">'species'</span><span class=\"p\">:</span> <span class=\"s1\">'hsapiens'</span><span class=\"p\">}</span>\n</pre>\n<p>A <strong>custom configuration</strong> can be passed to CellBaseClient using a <strong>ConfigClient object</strong>. JSON and YAML files are supported:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycellbase.cbconfig</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycellbase.cbclient</span> <span class=\"kn\">import</span> <span class=\"n\">CellBaseClient</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"s1\">'config.json'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span> <span class=\"o\">=</span> <span class=\"n\">CellBaseClient</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n</pre>\n<p>A <strong>custom configuration</strong> can also be passed as a dictionary:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycellbase.cbconfig</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pycellbase.cbclient</span> <span class=\"kn\">import</span> <span class=\"n\">CellBaseClient</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">custom_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'rest'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'hosts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'bioinfo.hpc.cam.ac.uk:80/cellbase'</span><span class=\"p\">]},</span> <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'v4'</span><span class=\"p\">,</span> <span class=\"s1\">'species'</span><span class=\"p\">:</span> <span class=\"s1\">'hsapiens'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">(</span><span class=\"n\">custom_config</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span> <span class=\"o\">=</span> <span class=\"n\">CellBaseClient</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to change the configuration <strong>on the fly</strong> you can directly modify the ConfigClient object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">ConfigClient</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span> <span class=\"o\">=</span> <span class=\"n\">CellBaseClient</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span><span class=\"o\">.</span><span class=\"n\">show_configuration</span><span class=\"p\">()[</span><span class=\"s1\">'version'</span><span class=\"p\">]</span>\n<span class=\"s1\">'v4'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s1\">'v3'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cbc</span><span class=\"o\">.</span><span class=\"n\">show_configuration</span><span class=\"p\">()[</span><span class=\"s1\">'version'</span><span class=\"p\">]</span>\n<span class=\"s1\">'v3'</span>\n</pre>\n</div>\n<div id=\"use-case\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Use case</a></h4>\n<p>A use case where PyCellBase is used to obtain multiple kinds of data from different sources can be found in this <a href=\"http://nbviewer.jupyter.org/github/opencb/cellbase/blob/develop/clients/python/use_case.ipynb\" rel=\"nofollow\">Jupyter Notebook</a></p>\n</div>\n</div>\n<div id=\"command-line-tools\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Command-line tools</a></h3>\n<p>A command-line interface, called cbtools.py, has been implemented with several tools to ease and speed up frequently performed tasks in bioinformatics.\nThese tools make use of the REST client library and offer a further output processing to facilitate its analysis.</p>\n<div id=\"id-converter\">\n<h4><a href=\"#id11\" rel=\"nofollow\">ID converter</a></h4>\n<p>This tool annotates genomic features with all their associated IDs, making use of 74 different sources for human, including most common databases such as Ensembl, NCBI, RefSeq, Reactome, OMIM, PDB, miRBase or UniProt among others.\nIn addition, it supports heterogeneous input files with IDs from different sources.</p>\n<pre>$ cbtools.py xref file_with_ids.vcf &gt; output.txt\n</pre>\n</div>\n<div id=\"hgvs-calculator\">\n<h4><a href=\"#id12\" rel=\"nofollow\">HGVS calculator</a></h4>\n<p>This tool annotates variants with their associated HGVS names.\nGiven a variant (in the format \u201cchromosome:position:reference:alternate\u201d), this tool returns all the associated HGVS names for many different types of reference sequence.</p>\n<pre>$ cbtools.py hgvs <span class=\"m\">19</span>:45411941:T:C\n</pre>\n<p>A file with multiple variants can also be used.</p>\n<pre>$ cbtools.py hgvs file_with_variants.txt &gt; output.txt\n</pre>\n</div>\n<div id=\"vcf-annotator\">\n<h4><a href=\"#id13\" rel=\"nofollow\">VCF annotator</a></h4>\n<p>This tool takes a VCF file as input and returns it with its variants annotated with a broad range of information such as consequence types, population frequencies, overlapping sequence repeats, cytobands, gene expression, conservation scores, clinical significance (ClinVar, COSMIC, diseases and drugs), functional scores and more.</p>\n<pre>$ cbtools.py annotation input.vcf &gt; output.vcf\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4904879, "releases": {"4.5.1": [{"comment_text": "", "digests": {"md5": "2dc3bba734c42290d7112a653030fbd2", "sha256": "21b7c3bd403c22a827c7bef2a4b6e2111d78a1183575be0cf5358b1882b03ef6"}, "downloads": -1, "filename": "pycellbase-4.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dc3bba734c42290d7112a653030fbd2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24992, "upload_time": "2018-05-10T17:18:10", "upload_time_iso_8601": "2018-05-10T17:18:10.490382Z", "url": "https://files.pythonhosted.org/packages/24/cd/48cdca4f50eb7a3a774bf5defe2fdb732b66d76a30fec4c4a39e86c2d50b/pycellbase-4.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73b8d28c1a83cdec5e2ff7adfa7c6b19", "sha256": "0c9798f3cb31904a57f0c8999e1b6b74f830773504ee980d8f50b4e8b4313f90"}, "downloads": -1, "filename": "pycellbase-4.5.1.tar.gz", "has_sig": false, "md5_digest": "73b8d28c1a83cdec5e2ff7adfa7c6b19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22368, "upload_time": "2018-05-10T17:18:12", "upload_time_iso_8601": "2018-05-10T17:18:12.321103Z", "url": "https://files.pythonhosted.org/packages/da/52/db3c08320bf200e50b6999d2c8084a72c8b0a470cd6234d5dcedc67d82f8/pycellbase-4.5.1.tar.gz", "yanked": false}], "4.5.2": [{"comment_text": "", "digests": {"md5": "ae8a5d8883cd44c9cb1b6a3ebf276808", "sha256": "84773b837203fab06c60be68191cdd8ef78ca02cc7afd05cb57260a2b6b63d42"}, "downloads": -1, "filename": "pycellbase-4.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae8a5d8883cd44c9cb1b6a3ebf276808", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25419, "upload_time": "2018-06-13T13:51:48", "upload_time_iso_8601": "2018-06-13T13:51:48.830793Z", "url": "https://files.pythonhosted.org/packages/0f/2f/823d4bea8e0c84cb2c06d6d2dc973969e965fd7191adc75928a5f4879a98/pycellbase-4.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da65b57b4e8fe44b4fc5a1c4fbab7161", "sha256": "42f270dc1aecac4b8c4a30b9ba307636995099dff0d3d9b8420cef04fc5fbb6e"}, "downloads": -1, "filename": "pycellbase-4.5.2.tar.gz", "has_sig": false, "md5_digest": "da65b57b4e8fe44b4fc5a1c4fbab7161", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21379, "upload_time": "2018-06-13T13:51:50", "upload_time_iso_8601": "2018-06-13T13:51:50.176083Z", "url": "https://files.pythonhosted.org/packages/c1/0d/be6c45164b92e7f0a65cf94cec0c3623d3d1ed0194cab359dde0364a7064/pycellbase-4.5.2.tar.gz", "yanked": false}], "4.5.3": [{"comment_text": "", "digests": {"md5": "a5d83f1622d1a4cd9c5b70aa5e02972f", "sha256": "a93aa03772cd9c9440f9bc419aba7108eb5da1948ffe69367260b9a0bce264cf"}, "downloads": -1, "filename": "pycellbase-4.5.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a5d83f1622d1a4cd9c5b70aa5e02972f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27173, "upload_time": "2018-08-12T09:05:23", "upload_time_iso_8601": "2018-08-12T09:05:23.566573Z", "url": "https://files.pythonhosted.org/packages/d0/9b/9fc16cc7af7a5c1145112e60105d8fc5dc3688269fd3aeaa5c154c300e1f/pycellbase-4.5.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a868b0ed14d1f553275f8cfa1942392", "sha256": "61ffb2fbdcee786548a5fcc4fa0ed9d984f17bc2f093d78c2192c4ebac089b61"}, "downloads": -1, "filename": "pycellbase-4.5.3.tar.gz", "has_sig": false, "md5_digest": "5a868b0ed14d1f553275f8cfa1942392", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23951, "upload_time": "2018-08-12T09:05:24", "upload_time_iso_8601": "2018-08-12T09:05:24.959803Z", "url": "https://files.pythonhosted.org/packages/b4/47/0e6ebfae320b5ca36ef86899d53e44e32840dca6a2a74bd555ca8febc799/pycellbase-4.5.3.tar.gz", "yanked": false}], "4.7.1": [{"comment_text": "", "digests": {"md5": "83d33e7a337dd152d472bd59c0752fde", "sha256": "d11f0202eda7a87d60c64b0ad65b380bf864815274bda196c69c55a257140daa"}, "downloads": -1, "filename": "pycellbase-4.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83d33e7a337dd152d472bd59c0752fde", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27356, "upload_time": "2019-03-06T11:17:48", "upload_time_iso_8601": "2019-03-06T11:17:48.506244Z", "url": "https://files.pythonhosted.org/packages/58/4a/a608ab7a5f034e50919497a81730035e7875afee0c7e937410db2c375d3f/pycellbase-4.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f194838faaa8dcf735d51263e9bb10c2", "sha256": "f09ede0372f9d29d9367abeeeef1661fc0f29848c06d98368c8bddb123e94830"}, "downloads": -1, "filename": "pycellbase-4.7.1.tar.gz", "has_sig": false, "md5_digest": "f194838faaa8dcf735d51263e9bb10c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24091, "upload_time": "2019-03-06T11:17:50", "upload_time_iso_8601": "2019-03-06T11:17:50.291363Z", "url": "https://files.pythonhosted.org/packages/ed/4c/33767b858e9f217f38d3bdc3ff3cef2a82e2dbfcd1fa3b43891e2be7500c/pycellbase-4.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83d33e7a337dd152d472bd59c0752fde", "sha256": "d11f0202eda7a87d60c64b0ad65b380bf864815274bda196c69c55a257140daa"}, "downloads": -1, "filename": "pycellbase-4.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "83d33e7a337dd152d472bd59c0752fde", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27356, "upload_time": "2019-03-06T11:17:48", "upload_time_iso_8601": "2019-03-06T11:17:48.506244Z", "url": "https://files.pythonhosted.org/packages/58/4a/a608ab7a5f034e50919497a81730035e7875afee0c7e937410db2c375d3f/pycellbase-4.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f194838faaa8dcf735d51263e9bb10c2", "sha256": "f09ede0372f9d29d9367abeeeef1661fc0f29848c06d98368c8bddb123e94830"}, "downloads": -1, "filename": "pycellbase-4.7.1.tar.gz", "has_sig": false, "md5_digest": "f194838faaa8dcf735d51263e9bb10c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24091, "upload_time": "2019-03-06T11:17:50", "upload_time_iso_8601": "2019-03-06T11:17:50.291363Z", "url": "https://files.pythonhosted.org/packages/ed/4c/33767b858e9f217f38d3bdc3ff3cef2a82e2dbfcd1fa3b43891e2be7500c/pycellbase-4.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:38 2020"}