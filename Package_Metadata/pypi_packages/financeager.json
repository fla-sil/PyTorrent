{"info": {"author": "Philipp Metzner", "author_email": "beth.aleph@yahoo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: End Users/Desktop", "Intended Audience :: Other Audience", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: Unix", "Programming Language :: Python :: 3.5", "Topic :: Database", "Topic :: Office/Business :: Financial", "Topic :: Utilities"], "description": "[![Build Status](https://travis-ci.org/pylipp/financeager.svg?branch=master)](https://travis-ci.org/pylipp/financeager)\n[![Coverage Status](https://coveralls.io/repos/github/pylipp/financeager/badge.svg?branch=master)](https://coveralls.io/github/pylipp/financeager?branch=master)\n\nFINANCEAGER\n===========\n\nAn application (possibly running as Flask webservice) that helps you administering your daily expenses and earnings. Interact via the command line interface.\n\nThe `financeager` backend holds databases (internally referred to as 'periods'). A period contains entries of a certain year.\n\n## Quickstart\n\n![Quickstart](./examples/quickstart.svg)\n\nWho is this for?\n----------------\nYou might be someone who wants to organize finances with a simple software because you're tired of Excel and the like. And you like the command line. And Python.\n\nNOTE\n----\nThe project is actively developed. Expect things to break - e.g. the command line interface, the REST API definitions, ... - before version 1.0.0 is released.\n\n## Installation\n\n### From PyPI package\n\n    pip install --user financeager\n\n### Using pipx\n\nIf you're using Python >= 3.6 and have [`pipx`](https://pipxproject.github.io/pipx/) installed, install `financeager` into an isolated environment via\n\n    pipx install financeager\n\n## Usage\n\nYou can use `financeager` as a client-server or a serverless application (default). The user interacts via the command line interface (CLI).\n\n### Serverless mode\n\nThe user request invoked from the CLI is passed to the backend which opens the appropriate database, processes the request, closes the database and returns a response. All communication happens within a single process, hence the label 'serverless'. The databases are stored in `~/.local/share/financeager`.\n\n### Client-server mode\n\n>   Flask-webservice related functionality will be moved to a dedicated plugin, see #53.\n\nTo run `financeager` as client-server application, start the flask webservice by\n\n    export FLASK_APP=financeager/fflask.py\n    flask run  # --help for more info\n\n>   This does not store data persistently! Specify the environment variable `FINANCEAGER_DATA_DIR`.\n\n>   For production use, you should wrap `app = fflask.create_app(data_dir=...)` in a WSGI or FCGI (see `examples/` directory).\n\nTo communicate with the webservice, the `financeager` configuration has to be adjusted. Create and open the file `~/.config/financeager/config`. If you're on the machine that runs the webservice, put the lines\n\n    [SERVICE]\n    name = flask\n\nIf you're on an actual remote 'client' machine, put\n\n    [SERVICE]\n    name = flask\n\n    [SERVICE:FLASK]\n    host = https://foo.pythonanywhere.com\n    timeout = 10\n    username = foouser\n    password = S3cr3t\n\nThis specifies the timeout for HTTP requests and username/password for basic auth, if required by the server.\n\nIn any case, you're all set up! See the next section about the available client CLI commands and options.\n\n### Command line client\n\n    usage: financeager [-h] [-V] {add,get,remove,update,copy,list,periods} ...\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -V, --version         display version info and exit\n\n    subcommands:\n      {add,get,remove,update,copy,list,periods}\n                            list of available subcommands\n        add                 add an entry to the database\n        get                 show information about single entry\n        remove              remove an entry from the database\n        update              update one or more fields of an database entry\n        copy                copy an entry from one period to another\n        list                list all entries in the period database\n        periods             list all period databases\n\nOn the client side, `financeager` provides the following commands to interact with the backend: `add`, `update`, `remove`, `get`, `list`, `periods`, `copy`.\n\n*Add* earnings (no/positive sign) and expenses (negative sign) to the database:\n\n    > financeager add burgers -19.99 --category Restaurants\n    > financeager add lottery 123.45 --date 03-14\n\nCategory and date can be optionally specified. They default to None and the current day's date, resp. `financeager` will try to derive the entry category from the database if not specified. If several matches are found, the default category is used.\n\n*Add recurrent* entries using the `-t recurrent` flag (`t` for table name) and specify the frequency (yearly, half-yearly, quarterly, bi-monthly, monthly, weekly, daily) with the `-f` flag and optionally start and end date with the `-s` and `-e` flags, resp.\n\n    > financeager add rent -500 -t recurrent -f monthly -s 01-01 -c rent\n\nIf not specified, the start date defaults to the current date and the end date to the last day of the database's year.\n\nDid you make a mistake when adding a new entry? *Update* one or more fields by calling the `update` command with the entry's ID and the respective corrected fields:\n\n    > financeager update 1 --name \"McKing Burgers\" --value -18.59\n\n*Remove* an entry by specifying its ID (visible in the output of the `list` command). This removes the `burgers` entry:\n\n    > financeager remove 1\n\nThis would remove the recurrent rent entries (ID is also 1 because standard and recurrent entries are stored in separate tables):\n\n    > financeager remove 1 --table-name recurrent\n\nShow a side-by-side *overview* of earnings and expenses (filter by date/category/name/value by passing the `--filters` option, e.g. `--filters category=food` to show entries in the categories `food`)\n\n    > financeager list\n\n                   Earnings               |                Expenses\n    Name               Value    Date  ID  | Name               Value    Date  ID\n    Unspecified          123.45           | Rent                1500.00\n      Lottery            123.45 03-14   2 |   Rent January       500.00 01-01   1\n                                          |   Rent February      500.00 02-01   1\n                                          |   Rent March         500.00 03-01   1\n    =============================================================================\n    Total                123.45           | Total               1500.00\n    Difference         -1376.55\n\nIt might be convenient to list entries of the current, or a specific month only (example output is omitted):\n\n    > financeager list --month\n    > financeager list --month January\n    > financeager list --month Dec\n    > financeager list --month 7\n    > financeager list --month 03\n\nThe aforementioned `financeager` commands operate on the default database (named by the current year, e.g. 2017) unless another period is specified by the `--period` flag.\n\n    > financeager add xmas-gifts -42 --date 12-23 --period 2016\n\n*Copy* an entry from one database to another by specifying entry ID and source/destination period:\n\n    > financeager copy 1 --source 2017 --destination 2018\n\nDetailed information is available from\n\n    > financeager --help\n    > financeager <subcommand> --help\n\nYou can turn on printing debug messages to the terminal using the `--verbose` option, e.g.\n\n    > financeager list --verbose\n\nYou can find a log of interactions at `~/.local/share/financeager/log` (on both the client machine and the server).\n\n### More on configuration\n\nBesides specifying the backend to communicate with, you can also configure frontend options: the name of the default category (assigned when omitting the category option when e.g. adding an entry) and the date format (string that `datetime.strptime` understands; note the double percent). The defaults are:\n\n    [FRONTEND]\n    default_category = unspecified\n    date_format = %%m-%%d\n\nThe `financeager` command line client tries to read the configuration from `~/.config/financeager/config`. You can specify a custom path by passing it along with the `-C`/`--config` command line option.\n\n### More Goodies\n\n- `financeager` will store requests if the server is not reachable (the timeout is configurable). The offline backup is restored the next time a connection is established. This feature is only available when running financeager with flask.\n- Command line tab completion is provided by the `argcomplete` package (for bash; limited support for zsh, fish, tcsh). Completion has to be enabled by running `activate-global-python-argcomplete`. Read the [instructions](https://github.com/kislyuk/argcomplete#activating-global-completion) if you want to know more.\n\n### Expansion\n\nWant to use a different database? Should be straightforward by deriving from `Period` and implementing the `_entry()` methods. Modify the `Server` class accordingly to use the new period type.\n\n### Plugin support\n\nThe `financeager` core package can be extended by Python plugins.\nThe supported groups are:\n\n- `financeager.services`\n\n#### All plugin types\n\nFor developing a plugin, create a plugin package containing a `main.py` file:\n\n    from financeager import plugin\n\n    class _Configuration(plugin.PluginConfiguration):\n        \"\"\"Configuration actions specific to the plugin.\"\"\"\n\nand implement the required `PluginConfiguration` methods.\nFinally, specify the entry point for loading the plugin in `setup.py`:\n\n    setup(\n        ...,\n        entry_points={\n            <group_name>: <plugin-name> = <package>.main:main,\n            # e.g.\n            # \"financeager.services\": \"fancy-service = fancy_service.main:main\",\n        },\n    )\n\nThe plugin name can be different from the package name.\nThe package name should be prefixed with `financeager-`.\n\n#### Service plugins\n\nFor developing a service plugin, extend the aforementioned `main.py` file:\n\n    # fancy_service/main.py in the fancy-service package\n    from financeager import plugin, clients\n\n    class _Configuration(plugin.PluginConfiguration):\n        \"\"\"Configuration actions specific to the plugin.\"\"\"\n\n    class _Client(clients.Client):\n        \"\"\"Client to communicate with fancy-service.\"\"\"\n\n    def main():\n        return plugin.ServicePlugin(\n            name=\"fancy-service\",\n            config=_Configuration(),\n            client=_Client,\n        )\n\nProvide a suitable client implementation.\n\nDone! When the plugin is correctly installed, and configured to be used (`name = fancy-service`), `financeager` picks it up automatically. The plugin configuration is applied, and the plugin client created.\n\n## Architecture\n\nThe following diagram sketches the relationship between financeager's modules. See the module docstrings for more information.\n\n          +--------+\n          | plugin |\n          +--------+\n           \u00a6      \u00a6\n           V      V\n    +--------+   +-----------+   +---------+\n    | config |-->|    cli    |<->| offline |\n    +--------+   +-----------+   +---------+\n\n                     \u00a6   \u039b                     +---------+     +---------+\n    [pre-processing] \u00a6   \u00a6  [formatting]  <--  | listing | <-- | entries |\n                     V   \u00a6                     +---------+     +---------+\n\n    +-------------------------------------+\n    |                clients              |\n    +-------------------------------------+\n\n            \u00a6                     \u039b\n            V                     \u00a6\n\n    +--------------+   |   +--------------+\n    | httprequests |   |   |              |     FRONTEND\n    +--------------+   |   |              |\n    ================   |   |              |    ==========\n    +--------------+   |   | localserver  |\n    |    fflask    |   |   |              |     BACKEND\n    +--------------+   |   |              |\n    |  resources   |   |   |              |\n    +--------------+   |   +--------------+\n\n            \u00a6                     \u039b\n            V                     \u00a6\n    +-------------------------------------+\n    |                server               |\n    +-------------------------------------+\n            \u00a6                     \u039b\n            V                     \u00a6\n    +-------------------------------------+\n    |                period               |\n    +-------------------------------------+\n\n## Known bugs\n\n- see [issues](https://github.com/pylipp/financeager/labels/bug)\n- Please. Report. Them.\n\n## Contributing\n\nAlways welcome! Clone the repo\n\n    git clone https://github.com/pylipp/financeager\n    cd financeager\n\nCreate a virtual environment\n\n    python3 -m venv .venv\n    source .venv/bin/activate\n\nInstall development dependencies\n\n    make install\n\nYou're all set for hacking!\nPlease adhere to test-driven development, if possible: When adding a feature, or fixing a bug, try to construct a test first, and subsequently adapt the implementation. Run the tests from the root directory via\n\n    python setup.py test\n\nIf you added a non-cosmetic change (i.e. a change in functionality, e.g. a bug fix or a new feature), please update `Changelog.md` accordingly as well. Check this README whether the content is still up to date.\n\n## Releasing\n\n1. Tag the latest commit on master by incrementing the current version accordingly (scheme `v0.major.minor.patch`).\n1. Run `make release`.\n\nPERSONAL NOTE\n-------------\nThis is a 'sandbox' project of mine. I'm exploring and experimenting with databases, data models, server applications (`Pyro4` and `flask`), frontends (command line, Qt-based GUI), software architecture, programming best practices (cough) and general Python development.\n\nFeel free to browse the project and give feedback (comments, issues, pull requests).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pylipp/financeager", "keywords": "commandline finances", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "financeager", "package_url": "https://pypi.org/project/financeager/", "platform": "", "project_url": "https://pypi.org/project/financeager/", "project_urls": {"Homepage": "https://github.com/pylipp/financeager"}, "release_url": "https://pypi.org/project/financeager/0.23.1.0/", "requires_dist": ["tinydb (==3.2.1)", "python-dateutil (==2.6.0)", "Flask (==1.0.2)", "Flask-RESTful (==0.3.5)", "requests (>=2.20.0)", "marshmallow (==3.3.0)", "argcomplete (==1.11.1)", "twine (>=1.11.0) ; extra == 'develop'", "setuptools (>=38.6.0) ; extra == 'develop'", "wheel (>=0.31.0) ; extra == 'develop'", "coverage (>=4.4.2) ; extra == 'develop'", "pre-commit (==1.14.4) ; extra == 'develop'", "gitlint (==0.12.0) ; extra == 'develop'"], "requires_python": "", "summary": "command line tool for organizing finances", "version": "0.23.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/pylipp/financeager\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9380b2dd842587f0a8865b769433a480f6cd68d9/68747470733a2f2f7472617669732d63692e6f72672f70796c6970702f66696e616e6365616765722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/pylipp/financeager?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e711abcdd0e363bd310a994d1978e45bdc17188f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f70796c6970702f66696e616e6365616765722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>FINANCEAGER</h1>\n<p>An application (possibly running as Flask webservice) that helps you administering your daily expenses and earnings. Interact via the command line interface.</p>\n<p>The <code>financeager</code> backend holds databases (internally referred to as 'periods'). A period contains entries of a certain year.</p>\n<h2>Quickstart</h2>\n<p><img alt=\"Quickstart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5046aa0620053e37ddf64e8ed5567fec8a882e4/2e2f6578616d706c65732f717569636b73746172742e737667\"></p>\n<h2>Who is this for?</h2>\n<p>You might be someone who wants to organize finances with a simple software because you're tired of Excel and the like. And you like the command line. And Python.</p>\n<h2>NOTE</h2>\n<p>The project is actively developed. Expect things to break - e.g. the command line interface, the REST API definitions, ... - before version 1.0.0 is released.</p>\n<h2>Installation</h2>\n<h3>From PyPI package</h3>\n<pre><code>pip install --user financeager\n</code></pre>\n<h3>Using pipx</h3>\n<p>If you're using Python &gt;= 3.6 and have <a href=\"https://pipxproject.github.io/pipx/\" rel=\"nofollow\"><code>pipx</code></a> installed, install <code>financeager</code> into an isolated environment via</p>\n<pre><code>pipx install financeager\n</code></pre>\n<h2>Usage</h2>\n<p>You can use <code>financeager</code> as a client-server or a serverless application (default). The user interacts via the command line interface (CLI).</p>\n<h3>Serverless mode</h3>\n<p>The user request invoked from the CLI is passed to the backend which opens the appropriate database, processes the request, closes the database and returns a response. All communication happens within a single process, hence the label 'serverless'. The databases are stored in <code>~/.local/share/financeager</code>.</p>\n<h3>Client-server mode</h3>\n<blockquote>\n<p>Flask-webservice related functionality will be moved to a dedicated plugin, see #53.</p>\n</blockquote>\n<p>To run <code>financeager</code> as client-server application, start the flask webservice by</p>\n<pre><code>export FLASK_APP=financeager/fflask.py\nflask run  # --help for more info\n</code></pre>\n<blockquote>\n<p>This does not store data persistently! Specify the environment variable <code>FINANCEAGER_DATA_DIR</code>.</p>\n</blockquote>\n<blockquote>\n<p>For production use, you should wrap <code>app = fflask.create_app(data_dir=...)</code> in a WSGI or FCGI (see <code>examples/</code> directory).</p>\n</blockquote>\n<p>To communicate with the webservice, the <code>financeager</code> configuration has to be adjusted. Create and open the file <code>~/.config/financeager/config</code>. If you're on the machine that runs the webservice, put the lines</p>\n<pre><code>[SERVICE]\nname = flask\n</code></pre>\n<p>If you're on an actual remote 'client' machine, put</p>\n<pre><code>[SERVICE]\nname = flask\n\n[SERVICE:FLASK]\nhost = https://foo.pythonanywhere.com\ntimeout = 10\nusername = foouser\npassword = S3cr3t\n</code></pre>\n<p>This specifies the timeout for HTTP requests and username/password for basic auth, if required by the server.</p>\n<p>In any case, you're all set up! See the next section about the available client CLI commands and options.</p>\n<h3>Command line client</h3>\n<pre><code>usage: financeager [-h] [-V] {add,get,remove,update,copy,list,periods} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         display version info and exit\n\nsubcommands:\n  {add,get,remove,update,copy,list,periods}\n                        list of available subcommands\n    add                 add an entry to the database\n    get                 show information about single entry\n    remove              remove an entry from the database\n    update              update one or more fields of an database entry\n    copy                copy an entry from one period to another\n    list                list all entries in the period database\n    periods             list all period databases\n</code></pre>\n<p>On the client side, <code>financeager</code> provides the following commands to interact with the backend: <code>add</code>, <code>update</code>, <code>remove</code>, <code>get</code>, <code>list</code>, <code>periods</code>, <code>copy</code>.</p>\n<p><em>Add</em> earnings (no/positive sign) and expenses (negative sign) to the database:</p>\n<pre><code>&gt; financeager add burgers -19.99 --category Restaurants\n&gt; financeager add lottery 123.45 --date 03-14\n</code></pre>\n<p>Category and date can be optionally specified. They default to None and the current day's date, resp. <code>financeager</code> will try to derive the entry category from the database if not specified. If several matches are found, the default category is used.</p>\n<p><em>Add recurrent</em> entries using the <code>-t recurrent</code> flag (<code>t</code> for table name) and specify the frequency (yearly, half-yearly, quarterly, bi-monthly, monthly, weekly, daily) with the <code>-f</code> flag and optionally start and end date with the <code>-s</code> and <code>-e</code> flags, resp.</p>\n<pre><code>&gt; financeager add rent -500 -t recurrent -f monthly -s 01-01 -c rent\n</code></pre>\n<p>If not specified, the start date defaults to the current date and the end date to the last day of the database's year.</p>\n<p>Did you make a mistake when adding a new entry? <em>Update</em> one or more fields by calling the <code>update</code> command with the entry's ID and the respective corrected fields:</p>\n<pre><code>&gt; financeager update 1 --name \"McKing Burgers\" --value -18.59\n</code></pre>\n<p><em>Remove</em> an entry by specifying its ID (visible in the output of the <code>list</code> command). This removes the <code>burgers</code> entry:</p>\n<pre><code>&gt; financeager remove 1\n</code></pre>\n<p>This would remove the recurrent rent entries (ID is also 1 because standard and recurrent entries are stored in separate tables):</p>\n<pre><code>&gt; financeager remove 1 --table-name recurrent\n</code></pre>\n<p>Show a side-by-side <em>overview</em> of earnings and expenses (filter by date/category/name/value by passing the <code>--filters</code> option, e.g. <code>--filters category=food</code> to show entries in the categories <code>food</code>)</p>\n<pre><code>&gt; financeager list\n\n               Earnings               |                Expenses\nName               Value    Date  ID  | Name               Value    Date  ID\nUnspecified          123.45           | Rent                1500.00\n  Lottery            123.45 03-14   2 |   Rent January       500.00 01-01   1\n                                      |   Rent February      500.00 02-01   1\n                                      |   Rent March         500.00 03-01   1\n=============================================================================\nTotal                123.45           | Total               1500.00\nDifference         -1376.55\n</code></pre>\n<p>It might be convenient to list entries of the current, or a specific month only (example output is omitted):</p>\n<pre><code>&gt; financeager list --month\n&gt; financeager list --month January\n&gt; financeager list --month Dec\n&gt; financeager list --month 7\n&gt; financeager list --month 03\n</code></pre>\n<p>The aforementioned <code>financeager</code> commands operate on the default database (named by the current year, e.g. 2017) unless another period is specified by the <code>--period</code> flag.</p>\n<pre><code>&gt; financeager add xmas-gifts -42 --date 12-23 --period 2016\n</code></pre>\n<p><em>Copy</em> an entry from one database to another by specifying entry ID and source/destination period:</p>\n<pre><code>&gt; financeager copy 1 --source 2017 --destination 2018\n</code></pre>\n<p>Detailed information is available from</p>\n<pre><code>&gt; financeager --help\n&gt; financeager &lt;subcommand&gt; --help\n</code></pre>\n<p>You can turn on printing debug messages to the terminal using the <code>--verbose</code> option, e.g.</p>\n<pre><code>&gt; financeager list --verbose\n</code></pre>\n<p>You can find a log of interactions at <code>~/.local/share/financeager/log</code> (on both the client machine and the server).</p>\n<h3>More on configuration</h3>\n<p>Besides specifying the backend to communicate with, you can also configure frontend options: the name of the default category (assigned when omitting the category option when e.g. adding an entry) and the date format (string that <code>datetime.strptime</code> understands; note the double percent). The defaults are:</p>\n<pre><code>[FRONTEND]\ndefault_category = unspecified\ndate_format = %%m-%%d\n</code></pre>\n<p>The <code>financeager</code> command line client tries to read the configuration from <code>~/.config/financeager/config</code>. You can specify a custom path by passing it along with the <code>-C</code>/<code>--config</code> command line option.</p>\n<h3>More Goodies</h3>\n<ul>\n<li><code>financeager</code> will store requests if the server is not reachable (the timeout is configurable). The offline backup is restored the next time a connection is established. This feature is only available when running financeager with flask.</li>\n<li>Command line tab completion is provided by the <code>argcomplete</code> package (for bash; limited support for zsh, fish, tcsh). Completion has to be enabled by running <code>activate-global-python-argcomplete</code>. Read the <a href=\"https://github.com/kislyuk/argcomplete#activating-global-completion\" rel=\"nofollow\">instructions</a> if you want to know more.</li>\n</ul>\n<h3>Expansion</h3>\n<p>Want to use a different database? Should be straightforward by deriving from <code>Period</code> and implementing the <code>_entry()</code> methods. Modify the <code>Server</code> class accordingly to use the new period type.</p>\n<h3>Plugin support</h3>\n<p>The <code>financeager</code> core package can be extended by Python plugins.\nThe supported groups are:</p>\n<ul>\n<li><code>financeager.services</code></li>\n</ul>\n<h4>All plugin types</h4>\n<p>For developing a plugin, create a plugin package containing a <code>main.py</code> file:</p>\n<pre><code>from financeager import plugin\n\nclass _Configuration(plugin.PluginConfiguration):\n    \"\"\"Configuration actions specific to the plugin.\"\"\"\n</code></pre>\n<p>and implement the required <code>PluginConfiguration</code> methods.\nFinally, specify the entry point for loading the plugin in <code>setup.py</code>:</p>\n<pre><code>setup(\n    ...,\n    entry_points={\n        &lt;group_name&gt;: &lt;plugin-name&gt; = &lt;package&gt;.main:main,\n        # e.g.\n        # \"financeager.services\": \"fancy-service = fancy_service.main:main\",\n    },\n)\n</code></pre>\n<p>The plugin name can be different from the package name.\nThe package name should be prefixed with <code>financeager-</code>.</p>\n<h4>Service plugins</h4>\n<p>For developing a service plugin, extend the aforementioned <code>main.py</code> file:</p>\n<pre><code># fancy_service/main.py in the fancy-service package\nfrom financeager import plugin, clients\n\nclass _Configuration(plugin.PluginConfiguration):\n    \"\"\"Configuration actions specific to the plugin.\"\"\"\n\nclass _Client(clients.Client):\n    \"\"\"Client to communicate with fancy-service.\"\"\"\n\ndef main():\n    return plugin.ServicePlugin(\n        name=\"fancy-service\",\n        config=_Configuration(),\n        client=_Client,\n    )\n</code></pre>\n<p>Provide a suitable client implementation.</p>\n<p>Done! When the plugin is correctly installed, and configured to be used (<code>name = fancy-service</code>), <code>financeager</code> picks it up automatically. The plugin configuration is applied, and the plugin client created.</p>\n<h2>Architecture</h2>\n<p>The following diagram sketches the relationship between financeager's modules. See the module docstrings for more information.</p>\n<pre><code>      +--------+\n      | plugin |\n      +--------+\n       \u00a6      \u00a6\n       V      V\n+--------+   +-----------+   +---------+\n| config |--&gt;|    cli    |&lt;-&gt;| offline |\n+--------+   +-----------+   +---------+\n\n                 \u00a6   \u039b                     +---------+     +---------+\n[pre-processing] \u00a6   \u00a6  [formatting]  &lt;--  | listing | &lt;-- | entries |\n                 V   \u00a6                     +---------+     +---------+\n\n+-------------------------------------+\n|                clients              |\n+-------------------------------------+\n\n        \u00a6                     \u039b\n        V                     \u00a6\n\n+--------------+   |   +--------------+\n| httprequests |   |   |              |     FRONTEND\n+--------------+   |   |              |\n================   |   |              |    ==========\n+--------------+   |   | localserver  |\n|    fflask    |   |   |              |     BACKEND\n+--------------+   |   |              |\n|  resources   |   |   |              |\n+--------------+   |   +--------------+\n\n        \u00a6                     \u039b\n        V                     \u00a6\n+-------------------------------------+\n|                server               |\n+-------------------------------------+\n        \u00a6                     \u039b\n        V                     \u00a6\n+-------------------------------------+\n|                period               |\n+-------------------------------------+\n</code></pre>\n<h2>Known bugs</h2>\n<ul>\n<li>see <a href=\"https://github.com/pylipp/financeager/labels/bug\" rel=\"nofollow\">issues</a></li>\n<li>Please. Report. Them.</li>\n</ul>\n<h2>Contributing</h2>\n<p>Always welcome! Clone the repo</p>\n<pre><code>git clone https://github.com/pylipp/financeager\ncd financeager\n</code></pre>\n<p>Create a virtual environment</p>\n<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>\n<p>Install development dependencies</p>\n<pre><code>make install\n</code></pre>\n<p>You're all set for hacking!\nPlease adhere to test-driven development, if possible: When adding a feature, or fixing a bug, try to construct a test first, and subsequently adapt the implementation. Run the tests from the root directory via</p>\n<pre><code>python setup.py test\n</code></pre>\n<p>If you added a non-cosmetic change (i.e. a change in functionality, e.g. a bug fix or a new feature), please update <code>Changelog.md</code> accordingly as well. Check this README whether the content is still up to date.</p>\n<h2>Releasing</h2>\n<ol>\n<li>Tag the latest commit on master by incrementing the current version accordingly (scheme <code>v0.major.minor.patch</code>).</li>\n<li>Run <code>make release</code>.</li>\n</ol>\n<h2>PERSONAL NOTE</h2>\n<p>This is a 'sandbox' project of mine. I'm exploring and experimenting with databases, data models, server applications (<code>Pyro4</code> and <code>flask</code>), frontends (command line, Qt-based GUI), software architecture, programming best practices (cough) and general Python development.</p>\n<p>Feel free to browse the project and give feedback (comments, issues, pull requests).</p>\n\n          </div>"}, "last_serial": 6756775, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a0415d125ada11aa2f8b2ff14cec8be1", "sha256": "1e86192934a5ebdd5f386b07c11c1042d1e6d5f2a2759799fc566f2d2b7ab74e"}, "downloads": -1, "filename": "financeager-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0415d125ada11aa2f8b2ff14cec8be1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29410, "upload_time": "2018-01-01T23:20:16", "upload_time_iso_8601": "2018-01-01T23:20:16.316503Z", "url": "https://files.pythonhosted.org/packages/aa/84/d9faf5e8c4df9c864c037ce04bd49831ff8c5554798ea3f76b79f4a6ad1c/financeager-0.1-py2.py3-none-any.whl", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "4b213f6c1ec033bbbddcb62eb230da3a", "sha256": "a452d48e6cc8ee23871682b7355647e31a4990937b6a2b4e64b9b9908682d2ff"}, "downloads": -1, "filename": "financeager-0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b213f6c1ec033bbbddcb62eb230da3a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30972, "upload_time": "2018-08-27T22:05:29", "upload_time_iso_8601": "2018-08-27T22:05:29.699119Z", "url": "https://files.pythonhosted.org/packages/33/c0/f5bdac8e1eb2f612cf4c3a88072a4e0afca390d14723940c207369df85ef/financeager-0.10-py2.py3-none-any.whl", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "4c24a19972af44e5aa2d21850a9b742c", "sha256": "31bf4aa04405e5e6fa5909ec2d3ad61a3ac3f90a98f331b1762a844f9920837d"}, "downloads": -1, "filename": "financeager-0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c24a19972af44e5aa2d21850a9b742c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31150, "upload_time": "2018-09-08T19:15:54", "upload_time_iso_8601": "2018-09-08T19:15:54.981240Z", "url": "https://files.pythonhosted.org/packages/e1/ac/2ca7e50250d6b6c6e6b38fb21e5369c01c9e6c7b412935f88f47d208e454/financeager-0.11-py2.py3-none-any.whl", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "287769a8b146e98ecb00b665abc69787", "sha256": "d08ebd37bd31412cc4bc18d4c889fa57690364889ca91845b55d8760d99ac7ae"}, "downloads": -1, "filename": "financeager-0.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "287769a8b146e98ecb00b665abc69787", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34207, "upload_time": "2018-10-10T22:07:14", "upload_time_iso_8601": "2018-10-10T22:07:14.226356Z", "url": "https://files.pythonhosted.org/packages/d6/c1/8194a6dfe6bc991d3b32dff7b66d6e57d8e94e7aacb43378e01e5c42e629/financeager-0.12-py2.py3-none-any.whl", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "275d0486ffe70f722dfa3ad2af7de686", "sha256": "9b41168959acc60abbb48a56e58fc852339612b83e2c9a63a4931e8c38d0482a"}, "downloads": -1, "filename": "financeager-0.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "275d0486ffe70f722dfa3ad2af7de686", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34064, "upload_time": "2019-01-14T21:24:43", "upload_time_iso_8601": "2019-01-14T21:24:43.756261Z", "url": "https://files.pythonhosted.org/packages/ba/36/48a4ad99a791d5efd0caabda73f4eb64997706d533f02b90598364f6c090/financeager-0.13-py2.py3-none-any.whl", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "90b064358c2faf6cbaf609fba1e2f563", "sha256": "cdedaf638dd44947c4c1f123662f1a4b836790fbcc3c69818defac3ac428b074"}, "downloads": -1, "filename": "financeager-0.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90b064358c2faf6cbaf609fba1e2f563", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34065, "upload_time": "2019-01-14T22:20:10", "upload_time_iso_8601": "2019-01-14T22:20:10.909714Z", "url": "https://files.pythonhosted.org/packages/3c/09/5d83d998b86d03a86454c02b82e2706d2dca40d53330bcfbc89c6c6b96b1/financeager-0.14-py2.py3-none-any.whl", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "8aeab3a878dcff03fcc6c7e874735408", "sha256": "94881785937fe9596dc442c766c6c6625a6394d279085f2fcbf88db857129733"}, "downloads": -1, "filename": "financeager-0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8aeab3a878dcff03fcc6c7e874735408", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40138, "upload_time": "2019-01-19T13:21:15", "upload_time_iso_8601": "2019-01-19T13:21:15.705550Z", "url": "https://files.pythonhosted.org/packages/61/19/abd64dd8289b6a3428e71a8ae1664b4fe0e6a5a2cb83d63fd9ad8290d9af/financeager-0.15-py2.py3-none-any.whl", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "a67b8c90bf2bbb957ad0ca19e46dbf14", "sha256": "16ac1acb5b50c1af8f2b05102c6282d6be8b2eae5a9d3b1b84bae5ee8535df26"}, "downloads": -1, "filename": "financeager-0.16-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a67b8c90bf2bbb957ad0ca19e46dbf14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40347, "upload_time": "2019-01-19T16:48:55", "upload_time_iso_8601": "2019-01-19T16:48:55.436389Z", "url": "https://files.pythonhosted.org/packages/8d/fd/d24530b54024a47d3e7e49e434556d69751d7c35cd6ce69247b0fb750ca3/financeager-0.16-py2.py3-none-any.whl", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "326af55f501205aee6d20f4535d24eb1", "sha256": "1ad0aa046dbe88d930cb5ebb47b523c4c8a60eefff98e6dd1f8f913de94ba227"}, "downloads": -1, "filename": "financeager-0.17-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "326af55f501205aee6d20f4535d24eb1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43244, "upload_time": "2019-02-10T21:57:54", "upload_time_iso_8601": "2019-02-10T21:57:54.856146Z", "url": "https://files.pythonhosted.org/packages/1b/12/7c5a1d721fb5ae680ef54b6d24cec10589198f5f900f11505b975e9533fd/financeager-0.17-py2.py3-none-any.whl", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "5f37902a553d2d44d532270b689dce99", "sha256": "e57e80ed527caef768707ed94016883e6129d5715877f8197f3e28cb37b8b4ce"}, "downloads": -1, "filename": "financeager-0.18-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f37902a553d2d44d532270b689dce99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43413, "upload_time": "2019-03-19T21:49:48", "upload_time_iso_8601": "2019-03-19T21:49:48.008316Z", "url": "https://files.pythonhosted.org/packages/39/48/4a22134ed543c32debfa28a5b15cc51b7727229ad44a5b5e2799735541b1/financeager-0.18-py2.py3-none-any.whl", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "52a3b2a77450f700f69c65b858b641cc", "sha256": "9c1ec05586745f46540ea6818426c57291e73959646db1adc6b3ffcec794cae9"}, "downloads": -1, "filename": "financeager-0.19-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "52a3b2a77450f700f69c65b858b641cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43430, "upload_time": "2019-08-15T17:08:51", "upload_time_iso_8601": "2019-08-15T17:08:51.656985Z", "url": "https://files.pythonhosted.org/packages/4e/68/d74a2a41f46c772b12cbeb65da1ce125eb2d23b5f4cd557e279acb01c771/financeager-0.19-py2.py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2d061055b01ca6f7c825470f554b801b", "sha256": "5681a245a98a3461b048717800c8fcadaa4eafbe9973fec84cadfd762df5213c"}, "downloads": -1, "filename": "financeager-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d061055b01ca6f7c825470f554b801b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29433, "upload_time": "2018-01-02T00:21:16", "upload_time_iso_8601": "2018-01-02T00:21:16.487088Z", "url": "https://files.pythonhosted.org/packages/45/ec/c0a50836fa6eea666a05dd10a375a9127152d585b75e5860b4daa30fa9a0/financeager-0.2-py2.py3-none-any.whl", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "d5e63828d70977f6b4fee469c831ea4d", "sha256": "1466f8c0d8fbd8393f5b7e8d4e6d52193d2c7a39f69759cebab8f9c90431eb4d"}, "downloads": -1, "filename": "financeager-0.20-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d5e63828d70977f6b4fee469c831ea4d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43502, "upload_time": "2019-08-15T21:41:35", "upload_time_iso_8601": "2019-08-15T21:41:35.334882Z", "url": "https://files.pythonhosted.org/packages/bf/bc/b41c8a475bac44f78b49cb0c56693d6f3c982508f056f8282c2a08fb2035/financeager-0.20-py2.py3-none-any.whl", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "c1d88d2535c091487c038d4e493b8e4c", "sha256": "35fc9d279be7de55bc45d4a2f1f3ffa391a41b0375e63ac3f2e3efb83944650a"}, "downloads": -1, "filename": "financeager-0.21-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c1d88d2535c091487c038d4e493b8e4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43501, "upload_time": "2019-08-19T18:24:50", "upload_time_iso_8601": "2019-08-19T18:24:50.408219Z", "url": "https://files.pythonhosted.org/packages/63/56/dff07c9697c22e7fde03fec0b7ae47ae1cd0f80511ba7a5746c05a562bb8/financeager-0.21-py2.py3-none-any.whl", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "ec3de96db476a35c99122e4e068184b5", "sha256": "056a2a1abbd66edab21c667a67a8345132386a4a62cf4bf035e40a4b9fba14f7"}, "downloads": -1, "filename": "financeager-0.22-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ec3de96db476a35c99122e4e068184b5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44241, "upload_time": "2019-10-30T18:18:23", "upload_time_iso_8601": "2019-10-30T18:18:23.552422Z", "url": "https://files.pythonhosted.org/packages/45/b4/bc1c2481f75aaee48d30c8960fc8fa7a3276c95b4bb7e435ce62b163921e/financeager-0.22-py2.py3-none-any.whl", "yanked": false}], "0.23.0.0": [{"comment_text": "", "digests": {"md5": "8cf057201488b290a5f1a4e6c4854e3e", "sha256": "03ccdb082e4192f183383cd025647e152057be4dfaf82d29f12d5ca3fc555e93"}, "downloads": -1, "filename": "financeager-0.23.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8cf057201488b290a5f1a4e6c4854e3e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45165, "upload_time": "2019-12-30T20:55:13", "upload_time_iso_8601": "2019-12-30T20:55:13.628251Z", "url": "https://files.pythonhosted.org/packages/8f/e9/fcf133745fa5fd45f5730804e1f1742363d565ab3a6ea1fd931cf2a0ff5c/financeager-0.23.0.0-py2.py3-none-any.whl", "yanked": false}], "0.23.1.0": [{"comment_text": "", "digests": {"md5": "5310c89be49531d671fb03c758683d22", "sha256": "5be4d665190a7e549f0c0caca17bddd627eede9ee715b633472b3010bc42520b"}, "downloads": -1, "filename": "financeager-0.23.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5310c89be49531d671fb03c758683d22", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46568, "upload_time": "2020-03-05T18:16:33", "upload_time_iso_8601": "2020-03-05T18:16:33.309459Z", "url": "https://files.pythonhosted.org/packages/7a/20/b2959cbe0211ef293009aa2c96724b7b48972be6f3cc200dc58348295526/financeager-0.23.1.0-py2.py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "c7606f422c43c6e60226542c6dfd8190", "sha256": "3cc1c0e9a4b0da1705d9140273c9cc2d28faf4f7b991047d48626add0999296c"}, "downloads": -1, "filename": "financeager-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7606f422c43c6e60226542c6dfd8190", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29910, "upload_time": "2018-01-11T21:49:48", "upload_time_iso_8601": "2018-01-11T21:49:48.559099Z", "url": "https://files.pythonhosted.org/packages/dd/6a/d43ebd0c283726ca52a37c284b3d0d3ef1a65e43a6e5fbcb80e128fe0ff9/financeager-0.3-py2.py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c1d9a37e1fc5b886e8d1b4c08489d8aa", "sha256": "48c3f90c4f8cb2783a2bb24ee4e4cbcfed17c041851e067410547c8a3be1eb52"}, "downloads": -1, "filename": "financeager-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c1d9a37e1fc5b886e8d1b4c08489d8aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30178, "upload_time": "2018-01-12T19:03:09", "upload_time_iso_8601": "2018-01-12T19:03:09.972587Z", "url": "https://files.pythonhosted.org/packages/ed/7d/5cb28a113f1ceae0cb65e0640a9b406c6c8d24c81a3ff113da5eb7d190f5/financeager-0.4-py2.py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "c83cf846813f27f6a29a750106a6a4af", "sha256": "6e99d136ecd2646688deabfc16fe6b818458aeedf95b56a26bc801487948be36"}, "downloads": -1, "filename": "financeager-0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c83cf846813f27f6a29a750106a6a4af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30673, "upload_time": "2018-01-12T21:05:07", "upload_time_iso_8601": "2018-01-12T21:05:07.849949Z", "url": "https://files.pythonhosted.org/packages/50/eb/34cbf5da1b0d9b85023a9ff8345c324a763853a7f63ba15be5e24eaf766e/financeager-0.5-py2.py3-none-any.whl", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "800ecfe6311cf19ad1b6a5843a7544a8", "sha256": "4143e9a720b2b83d3479055d16ebb69a6b3c755065e528aa3455ea2a4def9470"}, "downloads": -1, "filename": "financeager-0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "800ecfe6311cf19ad1b6a5843a7544a8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30520, "upload_time": "2018-01-18T08:41:27", "upload_time_iso_8601": "2018-01-18T08:41:27.046598Z", "url": "https://files.pythonhosted.org/packages/23/5c/ceb5560c64d6cf0e26772b7e51159bfb9c4c4b03296fe7b7ef28aa05bbb8/financeager-0.6-py2.py3-none-any.whl", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "b0dd03fc3746161e8db7f4dad5093052", "sha256": "2fbfe587f1a4117ca3370ca83835b4e2600bccba526b431604edcf1c2146de61"}, "downloads": -1, "filename": "financeager-0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0dd03fc3746161e8db7f4dad5093052", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30699, "upload_time": "2018-01-19T18:01:21", "upload_time_iso_8601": "2018-01-19T18:01:21.133301Z", "url": "https://files.pythonhosted.org/packages/71/85/ac1f008054494a589777f370994b335c099841069bb7f0635a5890687e1e/financeager-0.7-py2.py3-none-any.whl", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "64ead0a0c9e41778db017cabcb2b8baa", "sha256": "c65b28588165d44edea3c8aabed03d8f466ca497fd547443333b7c5f377f89f3"}, "downloads": -1, "filename": "financeager-0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "64ead0a0c9e41778db017cabcb2b8baa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31000, "upload_time": "2018-01-26T18:28:45", "upload_time_iso_8601": "2018-01-26T18:28:45.609843Z", "url": "https://files.pythonhosted.org/packages/ad/e5/9be4ae4de6058160e40e2f9c74c9bedeea4befef70ffed757ef3ffa18b4e/financeager-0.8-py2.py3-none-any.whl", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "67194dd5f7131c36c41d9a82d6ede8d5", "sha256": "ef0e0a37c7783ef44f5105094c2a0c6d168739f58d1e50926c87b976399c1910"}, "downloads": -1, "filename": "financeager-0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "67194dd5f7131c36c41d9a82d6ede8d5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31013, "upload_time": "2018-02-11T18:57:05", "upload_time_iso_8601": "2018-02-11T18:57:05.226368Z", "url": "https://files.pythonhosted.org/packages/40/17/c335cf00aa2a8442163f829f78f0177e74f985dc36b6f531c95ad24b0ab2/financeager-0.9-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5310c89be49531d671fb03c758683d22", "sha256": "5be4d665190a7e549f0c0caca17bddd627eede9ee715b633472b3010bc42520b"}, "downloads": -1, "filename": "financeager-0.23.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5310c89be49531d671fb03c758683d22", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 46568, "upload_time": "2020-03-05T18:16:33", "upload_time_iso_8601": "2020-03-05T18:16:33.309459Z", "url": "https://files.pythonhosted.org/packages/7a/20/b2959cbe0211ef293009aa2c96724b7b48972be6f3cc200dc58348295526/financeager-0.23.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:42:27 2020"}