{"info": {"author": "Georg Brandl", "author_email": "georg@python.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": ".. -*- restructuredtext -*-\n\n============================================\nREADME for Karnickel - AST Macros for Python\n============================================\n\n\"it's no ordinary rabbit...\"\n\n\nWhat is it?\n===========\n\nKarnickel is a small library that allows you to use macros (similar to those\nfound in Lisp) in Python code.  In a nutshell, macros allow you to insert code\n(the macro *definition*) at a different point in the code (the macro *call*).\nIt is different from calling functions in that the code is inserted *before* it\nis even compiled.\n\n(\"Karnickel\" is German for \"rabbit\", and there's a vicious killer\nrabbit in \"Monty Python and the Holy Grail\" that is best left alone...)\n\n\nUsing\n=====\n\nUse Python 2.6+.  You can put macros in any module.  Macro definitions are\nPython functions, like this::\n\n   from karnickel import macro\n\n   @macro\n   def macroname(arg1, arg2):\n        ... macro contents ...\n\nOptional arguments are not supported.\n\nIf the contents are a single expression (no ``return``), the macro is an\n*expression macro*.  Otherwise, it is a *block macro*.  If it contains a\nstatement consisting of only ``__body__``, it is a block macro *with body*.\n\nFor using the macros, you must install the import hook::\n\n   import karnickel\n   karnickel.install_hook()\n\n*Then*, you can import modules that use macros like this::\n\n   from module.__macros__ import macro1, macro2\n\nThat is, append ``.__macros__`` to the name of the module that contains the\nmacros.  Only ``from``-imports are supported.\n\nUsage depends on the macro type:\n\n* Expression macros can be used everywhere as expressions.  Arguments are put\n  into the places of macro arguments.\n\n* Block macros without body can only be used as an expression statement --\n  i.e.::\n\n     macroname(arg1, arg2)\n\n* Block macros with body must be used with a ``with`` statement::\n\n     with macroname(arg1, arg2):\n         body\n\n  Arguments are put into the places of macro arguments, and the body is put into\n  the place of ``__body__`` in the macro definition.\n\nProper docs may follow as soon as I can find a decent documentation tool.\n\n\nWhy?\n====\n\nWhy not?  Seriously, this is a demonstration of what you can do with the Python\nAST, especially the standard ``ast`` module, and import hooks.  Besides, it's\nbeen fun.\n\n\nInstalling\n==========\n\nUse ``setup.py``::\n\n   sudo python setup.py install\n\n\nAuthor\n======\n\nGeorg Brandl <georg@python.org>", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/karnickel", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://dev.pocoo.org/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "karnickel", "package_url": "https://pypi.org/project/karnickel/", "platform": "any", "project_url": "https://pypi.org/project/karnickel/", "project_urls": {"Download": "http://pypi.python.org/pypi/karnickel", "Homepage": "http://dev.pocoo.org/"}, "release_url": "https://pypi.org/project/karnickel/0.2/", "requires_dist": null, "requires_python": null, "summary": "Python macros using the AST", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u201cit\u2019s no ordinary rabbit\u2026\u201d</p>\n<div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>Karnickel is a small library that allows you to use macros (similar to those\nfound in Lisp) in Python code.  In a nutshell, macros allow you to insert code\n(the macro <em>definition</em>) at a different point in the code (the macro <em>call</em>).\nIt is different from calling functions in that the code is inserted <em>before</em> it\nis even compiled.</p>\n<p>(\u201cKarnickel\u201d is German for \u201crabbit\u201d, and there\u2019s a vicious killer\nrabbit in \u201cMonty Python and the Holy Grail\u201d that is best left alone\u2026)</p>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>Use Python 2.6+.  You can put macros in any module.  Macro definitions are\nPython functions, like this:</p>\n<pre>from karnickel import macro\n\n@macro\ndef macroname(arg1, arg2):\n     ... macro contents ...\n</pre>\n<p>Optional arguments are not supported.</p>\n<p>If the contents are a single expression (no <tt>return</tt>), the macro is an\n<em>expression macro</em>.  Otherwise, it is a <em>block macro</em>.  If it contains a\nstatement consisting of only <tt>__body__</tt>, it is a block macro <em>with body</em>.</p>\n<p>For using the macros, you must install the import hook:</p>\n<pre>import karnickel\nkarnickel.install_hook()\n</pre>\n<p><em>Then</em>, you can import modules that use macros like this:</p>\n<pre>from module.__macros__ import macro1, macro2\n</pre>\n<p>That is, append <tt>.__macros__</tt> to the name of the module that contains the\nmacros.  Only <tt>from</tt>-imports are supported.</p>\n<p>Usage depends on the macro type:</p>\n<ul>\n<li><p>Expression macros can be used everywhere as expressions.  Arguments are put\ninto the places of macro arguments.</p>\n</li>\n<li><p>Block macros without body can only be used as an expression statement \u2013\ni.e.:</p>\n<pre>macroname(arg1, arg2)\n</pre>\n</li>\n<li><p>Block macros with body must be used with a <tt>with</tt> statement:</p>\n<pre>with macroname(arg1, arg2):\n    body\n</pre>\n<p>Arguments are put into the places of macro arguments, and the body is put into\nthe place of <tt>__body__</tt> in the macro definition.</p>\n</li>\n</ul>\n<p>Proper docs may follow as soon as I can find a decent documentation tool.</p>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>Why not?  Seriously, this is a demonstration of what you can do with the Python\nAST, especially the standard <tt>ast</tt> module, and import hooks.  Besides, it\u2019s\nbeen fun.</p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Use <tt>setup.py</tt>:</p>\n<pre>sudo python setup.py install\n</pre>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Georg Brandl &lt;<a href=\"mailto:georg%40python.org\">georg<span>@</span>python<span>.</span>org</a>&gt;</p>\n</div>\n\n          </div>"}, "last_serial": 793902, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "72119e846376743240a0221e1852a36d", "sha256": "f953c7c44a582af8e7a5bca609d82085f293a03f52d37b2c7df92937f38213c6"}, "downloads": -1, "filename": "karnickel-0.1.tar.gz", "has_sig": false, "md5_digest": "72119e846376743240a0221e1852a36d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7561, "upload_time": "2010-05-01T20:22:50", "upload_time_iso_8601": "2010-05-01T20:22:50.352547Z", "url": "https://files.pythonhosted.org/packages/c4/23/4163b1264650ea723c7eede7812d3eaff846dcce4142f664fbd906ab70d1/karnickel-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5539e0c4c1aa786d3be417d62cb7f055", "sha256": "293a0f467ed287ec8806b33e005bb1e83e2e4e281a60d8e45453c2eeafc41cf3"}, "downloads": -1, "filename": "karnickel-0.2.tar.gz", "has_sig": false, "md5_digest": "5539e0c4c1aa786d3be417d62cb7f055", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8631, "upload_time": "2011-08-16T08:39:16", "upload_time_iso_8601": "2011-08-16T08:39:16.159480Z", "url": "https://files.pythonhosted.org/packages/a5/1a/05854c64bb07feeca077d4120aab9dd1273b3f368831393c86b20751fb2b/karnickel-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5539e0c4c1aa786d3be417d62cb7f055", "sha256": "293a0f467ed287ec8806b33e005bb1e83e2e4e281a60d8e45453c2eeafc41cf3"}, "downloads": -1, "filename": "karnickel-0.2.tar.gz", "has_sig": false, "md5_digest": "5539e0c4c1aa786d3be417d62cb7f055", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8631, "upload_time": "2011-08-16T08:39:16", "upload_time_iso_8601": "2011-08-16T08:39:16.159480Z", "url": "https://files.pythonhosted.org/packages/a5/1a/05854c64bb07feeca077d4120aab9dd1273b3f368831393c86b20751fb2b/karnickel-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:36 2020"}