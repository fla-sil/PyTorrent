{"info": {"author": "Yu Wang", "author_email": "wangyu@alps-lab.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3"], "description": "# ExKaldi Automatic Speech Recognition Toolkit\nExKaldi toolkit is an extension package for Kaldi speech recognition toolkit. \nIt is developed to build an interface between the Kaldi toolkit and deep learning frameworks, \nsuch as PyTorch and Chainer, with Python language and further help users customize speech recognition system easily. \nA set of functions of ExKaldi are implemented by Kaldi, \nand serval Input-Output interfaces are designed to transform their data format so that it is flexible to process speech waveform, \nextract acoustic features, perform speech decoding and even deal with lattices produced by the decoder, with Python. \nBased on this, ExKaldi further provides tools to support training a DNN-based acoustic model, \nand improve their performance by, for example, multiple tasks with different labels. \nWith jointing Kaldi and deep learning frameworks, \nintegrated solutions are presented in ExKaldi from feature extracting to decoding to put up a customized speech recognition system quickly. \n\n## Start with ExKaldi\n\n1. Install Kaldi ASR toolkit. Download the Kaldi ASR toolkit firstly.\n```\ngit clone https://github.com/kaldi-asr/kaldi.git kaldi --origin upstream\n```\nAnd follow these three tutorial files to install and compile it.\n```\nless kaldi/INSTALL\nless kaldi/tools/INSTALL\nless kaldi/src/INSTALL\n```\n\n2. Install ExKaldi toolkit from PyPi library.\n```\npip install exkaldi\n```\nYou can also clone the ExKaldi source code from our github project, then make it a pypi package and install it.\n```\ngit clone https://github.com/wangyu09/exkaldi.git\ncd exkaldi\npython setup.py sdist bdist_wheel\ncd ..\npip install exkaldi/dist/*\n```\n\n3. We prepared some example programs to show how to use ExKaldi to train a coustic model and build a ASR system.\nPlease download them from https://github.com/wangyu09/exkaldi/examplecode (or clone the ExKaldi source code). \nFramework, Chainer or Pytorch, is expected in you machine. Concerning Chainer framework, know more about it from https://chainer.org/ .\nYou can install it directly by runing:\n```\npip install chainer\n```\n\n4. Taking a Chainer DNN model based on TIMIT corpus example. Before this, fmllr feature file, alignment file and decoding graph are required.\nRun the follow scipts to obtain them respectively. Please prepare TIMIT corpus in advance.\n```\ncd kaldi/egs/timit/s5\n```\nModify the TIMIT path, cmd and path cofigure. Then run script up to Karel's DNN.\n```\n./run.sh\nlocal/nnet/run_dnn.sh\n```\nThen get alignment data. It will be label to train DNN model.\n```\nsteps/nnet/align.sh --nj 4 data-fmllr-tri3/train data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali\nsteps/nnet/align.sh --nj 4 data-fmllr-tri3/dev data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali_dev\nsteps/nnet/align.sh --nj 4 data-fmllr-tri3/test data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali_test\n```\n\n5. After finishing all work above, run the example python program. You can adjust more configure.\n```\npython TIMIT_DNN_fmllr_chainer.py -TIMITROOT <your path>\n```\nResults will be save in output directory.\n\n\n## Concepts and Usage\nThe core functions in ExKaldi tool are performed with using \"subprocess\" to run shell cmd of Kaldi tools. \nBased on this, we designed a series of classes and approaches to use them in a flexible way and it is more familiar for python programmer. \nExKaldi toolkit of current version mainly consists of one part which implements Kaldi functions such as processing feature and lattice, \nand another part which supports training DNN-based acoustic model with deep learning framework such as Chainer and Pytorch, \nand the other part which simply allows user record their voice from microphone and recognize it with their customized ASR system. \n\n_-----------------------------------------------< ExKaldi API >-----------------------------------------------------_\n\n- [Core](#kaldiark)\n    - [class: KaldiArk](#kaldiark)\n    - [class: KaldiDict](#kaldidict)\n    - [class: KaldiLattice](#kaldilatticelatnonehmmnonewordsymbolnone)\n    - [function: load](#loadfilenameother-parameters)\n    - [function: save](#savedataother-parameters)\n    - [function: concat](#concatdatasaxis)\n    - [function: cut](#cutdatamaxFrames)\n    - [function: normalize](#normalizedatastdtruealpha10beta00epsilon1e-6axis0)\n    - [function: merge](#mergedatakeepdimfalsesortfalse)\n    - [function: remerge](#remergematrixuttLens)\n    - [function: sort](#sortdatabyframereversefalse)\n    - [function: splice](#splicedataleft4rightNone)\n    - [function: compute_mfcc](#compute_mfccwavfileother-parameters)\n    - [function: compute_fbank](#compute_fbankwavfileother-parameters)\n    - [function: compute_plp](#compute_plpwavfileother-parameters)\n    - [function: compute_spectrogram](#compute_spectrogramwavfileother-parameters)\n    - [function: use_cmvn](#use_cmvnfeatother-parameters)\n    - [function: compute_cmvn_stats](#compute_cmvn_statsfeatoutfileother-parameters)\n    - [function: use_cmvn_sliding](#use_cmvn_slidingfeatother-parameters)\n    - [function: add_delta](#add_deltafeatother-parameters)\n    - [function: load_ali](#load_alialifilehmmother-parameters)\n    - [function: load_lat](#load_latlatfilehmmwordsymbol)\n    - [function: analyze_counts](#analyze_countsalifileoutfileother-parameters)\n    - [function: decompress](#decompressdata)\n    - [function: decode_lattice](#decode_latticeamphmmhclgwordsymbolother-parameters)\n    - [function: run_shell_cmd](#run_shell_cmdcmdother-parameters)\n    - [function: get_kaldi_path](#get_kaldi_path)\n    - [function: get_env](#get_env)\n    - [function: set_kaldi_path](#set_kaldi_pathpath)\n    - [function: check_config](#check_confignameconfignone)\n    - [function: split_file](#split_filefilepathother-parameters)\n    - [function: pad_sequence](#pad_sequencedataother-parameters)\n    - [function: unpack_padded_sequence](#unpack_padded_sequencedatalengthsother-parameters)\n    - [function: wer](#werrefhypother-parameters)\n    - [function: accuracy](#accuracyrefhypother-parameters)\n    - [function: edit_distance](#edit_distancerefhypother-parameters)\n    - [function: log_softmax](#log_softmaxdataother-parameters_)\n    - [class: DataIterator](#dataiteratorscpfilesprocessfuncbatchsizechunksautootherargsnoneshufflefalseretaindata00)\n    - [class: Supporter](#supporteroutdirresult)\n\n### KaldiArk()   \n\n< class description >  \n\n**KaldiArk** is a subclass of **bytes**. It maks a object who holds the Kaldi ark data in a binary type. **KaldiArk** and **KaldiDict** object have almost the same attributes and functions, and they can do some mixed operations such as \"+\" and \"concat\" and so on.   Moreover, force-alignment can also be held by KaldiArk and KaldiDict in ExKaldi tool, and we defined it as int32 data type.  \n\n< Attributes >  \n\n`.lens`   \nreturn a tuple: ( the numbers of all utterances, the utterance ID and its frames of each utterance ).  \n\n`.dim`    \nreturn an int number: the dimensions of data.  \n\n`.dtype`    \nreturn a str: data type such as 'float32'. \n\n`.utts`    \nreturn a list: all utterance names.  \n\n`.array`    \nreturn a KaldiDict object: transform binary ark data to numpy arrar format.  \n\n< Methods >    \n\n`.to_dtype(dtype)`    \nchange data dtype and return a new KaldiArk object.  \n\n`.check_format()`    \ncheck whether data has a correct Kaldi ark format. If had, return True. Or raise error.  \n\n`.save(fileName,chunks=1,outScpFile=False)`   \nsave as .ark (and scp) file. If chunks>1, split it averagely and save them.  \n\n`__add__` \nreturn a new KaldiArk object: use < + > operator to plus another KaldiArk object or KaldiDict object.  \n\n`.splice(left,right=None)`  \nreturn a KaldiArk object. Splice front-behind frames. if right is None, we define right = left.  \n\n`.select(left,dims,retain=False)`  \nreturn KaldiArk object(s): select data according to dims. < dims > should be an int or string like \"1,5-20\".\nIf retain ==  True, return both selected data and non-selected data, or return only selected data.\n\n`.subset(nHead=0,chunks=1,uttList=None)`  \nif nhead > 0, return a KaldiArk object which only has start-n utterances.  \nif chunks > 1, return list whose members are KaldiArk objects.  \nif uttList != None, select utterances if utterance id appeared.\nonly one of these three options will works by order.   \n\n### KaldiDict() \n\n< class description >  \n\n**KaldiDict** is a subclass of **dict**. It generates a object who holds the Kaldi ark data in NumPy array type. \nIts keys are the utterance IDs and the values are data. **KaldiDict** can also do some mixed operations with **KaldiArk** such as \"+\" and \"concat\" and so on.  \nNote that **KaldiDict** has a part of functions which **KaldiArk** dosen't have.\n\n< Attributes >  \n\n`.lens`    \nreturn a tuple: ( the numbers of all utterances, the utterance ID and its frames of each utterance ).  \n\n`.dim`   \nreturn an int number: the dimensions of data.  \n\n`.dtype`    \nreturn a str: data type such as 'float32'. \n\n`.utts`   \nreturn a list: all utterance names.  \n\n`.ark`   \nreturn a KaldiArk object: transform numpy array data into Kaldi's binary format.  \n\n`.target`   \nIf it is alignment data, return the target classes that is maximum value+1.  \n\n< Methods >    \n\n`.to_dtype(dtype)`    \nchange data dtype and return a new KaldiArk object.  \n\n`.check_format()`    \ncheck whether data has a correct Kaldi ark format. If had, return True. Or raise error.  \n\n`.save(fileName,chunks=1)`  \nsave as .npy file. If chunks>1, split it averagely and save them.  \n\n`__add__`  \nreturn a new KaldiDict object: use < + > operator to plus another KaldiArk object or KaldiDict object.  \n\n`.concat(others,axis=1)`    \nreturn a KaldiDict object. If any member has a dtype of float, the result will be float type, or it will be int type.  \nIt only returns the concat results whose utterance IDs appeared in all members.\nIf axis is 1 and some utterance only has 1 dimension or 1 frame, it will be concat to all frames of others.\n\n`.splice(left,right=None)`    \nreturn a KaldiDict object. Splice front-behind frames. if right is None, we define right = left.\nThis result is kind of different from KaidiArk().splice() function.\n\n`.select(left,dims,retain=False)`  \nreturn KaldiDict object(s): select data according to dims. < dims > should be an int or string like \"1,5-20\".\nIf retain ==  True, return both selected data and non-selected data, or return only selected data.\n\n`.subset(nHead=0,chunks=1,uttList=None)`    \nif nhead > 0, return a KaldiArk object which only has start-n utterances.  \nif chunks > 1, return list whose members are KaldiArk objects.  \nif uttList != None, select utterances if utterance id appeared.\nonly one of these three options will works by order.   \n\n`.sort(by='frame',reverse=False)`\nreturn a KaldiDict object: sort data by utterance IDs or the length of utterances.\nif reverse == True, do descending order.\n\n`.merge(keepDim=False,sortFrame=False)`    \nreturn a tuple. if keepDim == True, the first member is list whose content are NumPy arrays with 2-dimensions of all utterances, and if keepDim == False, \nit is a integrated NumPy array with 3-dimensions of all utterances. \nthe second member is utterance IDs and their respective frame length. \nif sortFrame == True , it will sort all utterances by length with ascending order before merging.\n\n`.remerge(matrix,uttLens)`    \nIf self has not any data, do not return, or return a new KaldiDict object: this is a inverse operation of .merge function.\n\n`.normalize(std=True,alpha=1.0,beta=0.0,epsilon=1e-6,axis=0)`\nReturn a KaldiDict object. if std == True, do _alpha*(x-mean)/(std+epsilon)+belta_, or do _alpha*(x-mean)+belta_.\n\n`.cut(maxFrames)`    \nreturn a KaldiDict object: traverse all utterances, and if one is longer than 1.25*maxFrames, cut it with a threshold length of maxFrames.\n\n`.tuple_value(others,sort=False)`    \nTuple the utterance of the same ID from different objects. Return a list whose members are tuple: (utterance IDs, the utterances of others)\n\n### KaldiLattice(lat=None,hmm=None,wordSymbol=None) \n\n< class description >\n\n**KaldiLattice** holds the lattice and its related file path: HMM file and WordSymbol file. ExKaldi.decode_lattice function will return a KaldiLattice object. \nAslo, you can define a empty KaldiLattice object and load its data later.\n\n< init Parameters >\n\n`lat` _expected Kaldi's lattice binary data or lattice file path which is compressed-gz file_        \n`hmm` _HMM file path_  \n`wordSymbol` _word to int ID file path_\n\n< Attributes >  \n\n`.value`    \nreturn binary data of lattice.\n\n`.model`    \nreturn HMM file path.\n\n`.lexicon`    \nreturn word-to-id file path.\n\n< Methods >  \n\n`.load(latFile,hmm,wordSymbol)`        \nload lattice. < latFile > can be file path or binary data. < hmm > and < wordSymbol > are expected as file path.\n\n`.get_1best(lmwt=1,maxLmwt=None,acwt=1.0,outFile=None,phoneSymbol=None)`   \nIf maxLmwt != None, return Python dict object: its keys are the lmwt value and values are the 1best words output collected in a list. Or only return a list.\nIf < outFile > is file name, the 1best words output will be save as file and values of returned dict will be changed for these files' path.\nIf < phoneSymbol > is not None, will return phones outputs of 1best words. \n\n`.get_nbest(n,acwt=1.0,outFile=None,outAliFile=None,requireCost=False)`   \nIf < outFile > is not None, output results as file and if < requireCost > == True, lm cost and ac cost will be also returned as files. In this way, return a list whose members are path of these files. If < outFile > is None, also return a list but its members are n best words and their respective ac cost and lm cost.\nIf < outAliFile > is not None, fore-alignment file will be reserved. \n\n`.scale(acwt=1,inAcwt=1,ac2lm=0,lmwt=1,lm2ac=0)`  \nsacle lattice and return a new scaled KaldiLattice object.\n\n`.add_penalty(penalty=0)`  \nadd words insertion penalty and return a new KaldiLattice object.\n\n`.save(fileName,copyFile=False)`\nsave lattice as .gz file. If < copyFile > is True, will copy HMM file and wordSymbol file to the same directory as saved lattice file. \n\n`__add__`  \nadd another lattice. Note that it is just a simple addtional operation to intergrat several lattices as a big one.\n\n### load(fileName,_**other parameters_) \n\n< function description >\n\nLoad Kaldi ark feat file, Kaldi scp feat file, KaldiArk ark file, or KaldiDict npy file. \nReturn KaldiArk or KaldiDict object.\n\n< Parameters >  \n\n`filePath` _file path with a suffix '.ark' or '.scp' or '.npy'_\n`useSuffix`  _when file has another suffix, you can declare it, default = None_\n\n### save(data,_**other parameters_)\n\n< function description >\n\nIt is the same as .save method of KaldiArk or KaldiDict. \n< data > is expected as KaldiArk or KaldiDict object.\n\n< Parameters >  \n\n`data` _KaldiArk, KaldiDict, or KaldiLattice object_\n`*params`  _If data is KaldiArk, or KaldiDict object, params should be filename and chunks, If KaldiLattice, fileName and copyFile shou be given_\n\n### concat(datas,axis)\n\n< function description >\n\nreturn a KaldiDict object. It is the same as .concat method of KaldiDict. \n< datas > is expected as KaldiArk or KaldiDict object(s).\n\n### cut(data,maxFrames)\n\n< function description >\n\nreturn KaldiDict object. It is he same as .cut method of KaldiDict. \n< data > is expected as KaldiArk or KaldiDict object.\n\n### normalize(data,std=True,alpha=1.0,beta=0.0,epsilon=1e-6,axis=0)\n\n< function description >\n\nreturn KaldiDict object. It is he same as .normalize method of KaldiDict. \n< data > is expected as KaldiArk or KaldiDict object.\n\n### merge(data,keepDim=False,sort=False)\n\n< function description >\n\nIt is the same as .merge method of KaldiDict. \n< data > is expected as KaldiArk or KaldiDict object(s).\n\n### remerge(matrix,uttLens)\n\n< function description >\n\nreturn a kaldiDict object.It is the same as .remerge method of KaldiDict. \n\n### sort(data,by='frame',reverse=False)\n\n< function description >\n\nreturn a KaldiDict object. It is the same as .sort method of KaldiDict. \n< data > is expected as KaldiArk or KaldiDict object(s).\n\n### splice(data,left=4,right=None)\n\n< function description >\n\nreturn KaldiArk or KaldiDict object. It is the same as .splice method of KaldiArk or KaldiDict. \n< datas > is expected as KaldiArk or KaldiDict object.\n\n### compute_mfcc(wavFile,_**other parameters_)\n\n< function >\n\nCompute mfcc feature. Return KaldiArk object or file path if < asFile > is True. We provide some common options, \nIf you want to use more options, set < config > = your-configure but note that if you do this, these usual configures we provided will be ignored. \nYou can use ExKaldi.check_config('compute_mfcc') function to get configure information you could set. \nAlso run shell command \"compute-mfcc-feats\" to check their meaning. \n\n< Parameters >  \n\n`wavFile`   _WAV file or scp file, you can declare its type by using point useSuffix_  \n`rate`   _sampling rate, default = 16000_  \n`frameWidth`   _stride windows width, milliseconds, default = 25_  \n`frameShift`   _stride windows width, milliseconds, default = 10_  \n`melBins`   _numbers of mel bins, default = 23_  \n`featDim`   _dimendionality of mfcc feature, default = 13_  \n`windowType`   _window function, default = 'povey'_  \n`useSuffix`   _when file is a scp file but without 'scp' suffix, you can declare its file suffix, or error will be raised, default = None_  \n`config`   _another configure setting method_  \n`asFile`   _if it is True, save result as file and return file path. Or return KaldiArk, default = False_  \n\n### compute_fbank(wavFile,_**other parameters_)\n\n< function >\n\nCompute fbank feature. Return KaldiArk object or file path if < outFile > is True. We provide some common options, \nIf you want to use more options, set < config > = your-configure but note that if you do this, these usual configures we provided will be ignored. \nYou can use ExKaldi.check_config('compute_fbank') function to get configure information you could set. \nAlso run shell command \"compute-fbank-feats\" to check their meaning. \n\n< Parameters >  \n\n`wavFile`   _WAV file or scp file, you can declare its type by using point useSuffix_  \n`rate`   _sampling rate, default = 16000_  \n`frameWidth`   _stride windows width, milliseconds, default = 25_  \n`frameShift`   _stride windows width, milliseconds, default = 10_  \n`melBins`   _numbers of mel bins, default = 23_  \n`windowType`   _window function, default = 'povey'_  \n`useSuffix`   _when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None_  \n`config`   _another configure setting method_  \n`asFile`   _if it is true, save result as file and return file path. Or return KaldiArk, default = False_  \n\n\n### compute_plp(wavFile,_**other parameters_)  \n\n< function >\n\nCompute plp feature. Return KaldiArk object or file path if < outFile > is True. We provide some common options, \nIf you want to use more options, set < config > = your-configure but note that if you do this, these usual configures we provided will be ignored. \nYou can use ExKaldi.check_config('compute_plp') function to get configure information you could set. \nAlso run shell command \"compute-plp-feats\" to check their meaning. \n\n< Parameters >  \n\n`wavFile`   _WAV file or scp file, you can declare its type by using point useSuffix_  \n`rate`   _sample rate, default = 16000_  \n`frameWidth`   _stride windows width, milliseconds, default = 25_  \n`frameShift`   _stride windows width, milliseconds, default = 10_  \n`melBins`   _numbers of mel bins, default = 23_  \n`featDim`   _dimendionality of mfcc feature, default = 13_  \n`windowType`   _window function, default = 'povey'_  \n`useSuffix`   _when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None_  \n`config`   _another configure setting method_  \n`asFile`   _if it is True, save result as file and return file path, or return KaldiArk, default = False_  \n\n\n### compute_spectrogram(wavFile,_**other parameters_) \n\n< function description>\n\nCompute spectrogram feature. Return KaldiArk object or file path if < outFile > is True. We provide some common options, \nIf you want to use more options, set < config > = your-configure but note that if you do this, these usual configures we provided will be ignored. \nYou can use ExKaldi.check_config('compute_spectrogram') function to get configure information you could set. \nAlso run shell command \"compute-spectrogram-feats\" to check their meaning. \n\n< Parameters >  \n\n`wavFile`   _WAV file or scp file, you can declare its type by using point useSuffix_  \n`rate`   _sample rate, default = 16000_  \n`frameWidth`   _stride windows width, milliseconds, default = 25_  \n`frameShift`   _stride windows width, milliseconds, default = 10_  \n`windowType`   _window function, default = 'povey'_  \n`useSuffix`   _when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None_  \n`config`   _another configure setting method_  \n`asFile`   _if it is True, save result as file and return file path, or return KaldiArk, default = False_  \n\n\n### use_cmvn(feat,_**other parameters_) \n\n< function description >\n\nApply CMVN to feature. Return KaldiArk object or file path if < outFile > is not None. If < cmvnStatFile >  are None, first compute the CMVN state. But < utt2spkFile > and < spk2uttFile > are expected at the same time if they were not None.\n\n< Parameters >  \n\n`feat` _KaldiArk or KaldiDict object_\n`cmvnStatFile`   _if None compute it firstly, default = None_  \n`spk2uttFile`   _if None compute cmvn state whin each utterance, default = None_  \n`utt2spkFile`   _if None and spk2uttFile != None, raise error, default = None_  \n`outFile`   _if it is a file name, save result as file and return file path, or return KaldiArk, default = False_  \n\n\n### compute_cmvn_stats(feat,outFile,_**other parameters_) \n\n< function description >\n\nCompute CMVN state and save it as file. Return cmvn file path.   \n\n< Parameters >  \n\n`feat` _KaldiArk or KaldiDict object_\n`spk2uttFile`   _if None, compute cmvn state whin each utterance, default = None_  \n`outFile`   _file path name_  \n\n\n### use_cmvn_sliding(feat,_**other parameters_) \n\n< function description >\n\nApply sliding CMVN to feature. Return KaldiArk object. \n\n< Parameters >  \n\n`feat` _KaldiArk or KaldiDict object_  \n`windowsSize`   _sliding windows width, frames, if None, set it to cover all frames at one time, default = None_   \n`std`   _if False, only apply mean, default = False_  \n\n\n### add_delta(feat,_**other parameters_) \n\n< function description >\n\nAdd n-orders delta to feature. Return KaldiArk object or file path if < outFile > is not None.\n\n< Parameters >  \n\n`feat` _KaldiArk or KaldiDict object_ \n`order`   _the times of delta, default = 2_ \n`outFile`   _if it is a file name, save result as file and return file path, or return KaldiArk, default = False_  \n\n### load_ali(aliFile,hmm,_**other parameters_) \n\n< function description >\n\nGet alignment from ali file. Return a KaldiDict object.\n\n< Parameters >  \n\n`aliFile` _kaldi alignment file path_\n`hmm`   _HMM file path_ \n`returnPhoneme`   _if True, return phoneme IDs, or return pdf IDs, default = False_\n\n### load_lat(latFile,hmm,wordSymbol) \n\n< function description >\n\nGet alignment from ali file. Return a KaldiDict object.\nThe same as KaldiLattice().load() method.\n\n### analyze_counts(aliFile,outFile,_**other parameters_) \n\n< function description >\n\nGet statistical information of pdf IDs or phoneme IDs from ali file.\n\n< Parameters >  \n\n`aliFile` _Kaldi alignment file path_\n`outFile` _outFile path_ \n`countPhone`   _if True, count statistical value of phoneme IDs, or count pdf IDs, default = False_\n`hmm` _if None, find HMM file automatically, default = None_\n`dim` _if None, compute dimension automatically, default = None_\n\n### decompress(data) \n\n< function description >\n\nDecompress feature data. Feat are expected KaldiArk object whose data type is \"CM\", that is kaldi compressed ark data. Return a KaldiArk object. \nThis function is a cover of kaldi-io-for-python tools. For more information about it, please access to https://github.com/vesis84/kaldi-io-for-python/blob/master/kaldi_io/kaldi_io.py \n\n< Parameters >  \n\n`data` _the binary data of kaldi compressed feature_\n\n### decode_lattice(amp,hmm,hclg,wordSymbol,_**other parameters_) \n\n< function description >\n\nDecode by generating lattice from acoustic probability. Return a KaldiLattice object or file path if < outFile > is not None. \nWe provide some usual options, but if you want use more, set < config > = your-configure. Note that if you do this, these usual configures we provided will be ignored. \nYou can use ExKaldi.check_config('decode-lattice') function to get configure information you could set. \nAlso run shell command \"latgen-faster-mapped\" to look their meaning.\n\n< Parameters >  \n\n`amp` _acoustic model log-like probability, it should be a KaldiArk object_    \n`hmm`   _HMM file path_    \n`hclg`   _HCLG file path_    \n`wordSymbol`   _word-to-int-ID file path_    \n`minActive`   _minimum active, default=200_    \n`maxMem`   _maximum memory, default=50000000_    \n`maxActive`   _maximum active, default=7000_    \n`beam`   _beam, default=10_  \n`latBeam`   _lattice beam, default=8_  \n`acwt`   _acoustic model weight, default=1_  \n`config`   _another configure setting method_    \n`maxThreads`   _the numbers of decode thread, default=1_      \n`outFile`   _if it is a file name, save result as file and return file path, or return KaldiLattice object, default = False_    \n\n### run_shell_cmd(cmd,_**other parameters_) \n\n< function description >\n\nWe provided a basic way to run shell command. Return binary string (out,err).\n\n< Parameters >  \n\n`cmd` _shell command, string_  \n`inputs`   _inputs data, string, default=None_  \n\n### get_kaldi_path() \n\n< function description >\n\nreturn Kaldi toolkit root path if Kaldi has been found or set up, or return None.\nIt is a initialized action implemented automatically when importing ExKaldi toolkit.\n\n### get_env() \n\n< function description >\n\nreturn the current environment which exkaldi is running at.\n\n### set_kaldi_path(path) \n\n< function description >\n\nset kaldi root path manually. If another Kaldi had already been running rightly. replace it. \n\n### check_config(name,config=None) \n\n< function description >\n\nGet default configure if < config > is None, or check if given < config > has a right format. This function will read \"conf\" file which is located in \"./\", so if there is not, it will raise error. Also you can change the content of \"conf\" file with expected format.\n\n< Parameters >  \n\n`name` _object name you want to check. such as \"compute_mfcc\"_     \n`config` _if none, return defalut configure, or chenk the format of configure and return True if correct_  \n\n### split_file(filePath,_**other parameters_) \n\n< function description >\n\nSplit a large scp file into n smaller files. The splited files will be put at the same folder as original file and return their paths as a list.\n\n< Parameters >  \n\n`filePath` _scp file path_       \n`chunks` _expected numbers, must be larger than 1, default=2_    \n\n### pad_sequence(data,_**other parameters_) \n\n< function description >\n\nPad a batch sequences in order to train sequential neural network model such as RNN, LSTM.\nNot that the first dimension of padded data is sequence.\n\n< Parameters >  \n\n`data` _a list whose members are batch of sequences_       \n`shuffle` _If True, pad each sequence by randomly deciding its start position, Or start position is 0. default=False_\n`pad` _padded value, default=0_   \n\n### unpack_padded_sequence(data,lengths,_**other parameters_) \n\n< function description >\n\nIt is a reverse operation of ExKaldi.pad_sequence function. \n\n< Parameters >  \n\n`data` _NumPy array which the first dimension is expected as sequence or batch size_       \n`lengths` _It should has the same format of the lengths-output of pad_sequence function_\n`batchSizeDim` _assign the dimension that batch size is. default=1_   \n\n### wer(ref,hyp,_**other parameters_) \n\n< function description >\n\nCompute WER (word error rate) score between prediction result and reference text. \nReturn a Python dict object with score information like: {'WER':0,'allWords':10,'ins':0,'del':0,'sub':0,'SER':0,'wrongSentences':0,'allSentences':1,'missedSentences':0}\nBoth < hyp > and < ref > can be text file or list object. \n\n< Parameters >  \n\n`hyp` _prediction result file or result-list which obtained from KaldiLattice.get_1best_words function_       \n`ref` _reference text file or result-like-list_     \n`mode` _score mode, default=present_  \n`ignore` _ignore some symbol such as \"sil\", default=None_  \n\n### accuracy(ref,hyp,_**other parameters_) \n\n< function description >\n\nCompute one-one match score. for example predict is (1,2,3,4), and label is (1,2,2,4), the score will be 0.75.\nBoth < ref > and < hyp > will be flattened before scoring. \n\n< Parameters >  \n\n`ref` _iterative object such as list, tuple or flattened NumPy array_       \n`hyp` _iterative object like ref_     \n`ignore` _ignore some symbol such as padded 0, default=None_  \n`mode` _if mode == all, compute one-one matching score. if present, compute appearing score. default=all_  \n\n### edit_distance(ref,hyp,_**other parameters_) \n\n< function description >\n\nCompute edit distance score between two objects.\nBoth < ref > and < hyp > will be flattened before scoring.\n\n< Parameters >  \n\n`ref` _iterative object such as list, tuple or flattened NumPy array_       \n`hyp` _iterative object like ref_  \n`ignore` _ignore some symbol, default=None_  \n\n### log_softmax(data,**other parameters_) \n\n< function description >\n\nCompute the log-softmax value of a NumPy array data.\n\n< Parameters >  \n\n`data` _NumPy array_       \n`axis` _demension, default=1_ \n\n### DataIterator(scpFiles,processFunc,batchSize,chunks='auto',otherArgs=None,shuffle=False,retainData=0.0)\n\n< class description >\n\nData iterator used to train a neural network model. It will split the scp file into n chunks then manage and load them into momery alternately with parallel thread. \nIt will shuffle the original scp file and split again while new epoch.\n\n< init Parameters >\n\n`scpFiles` _scp file(s)_ \n`processFunc` _function to process data from scp file to iterative data format, data ierator itself and scp file name will be introduced into defautly_    \n`batchSize` _mini batch size_      \n`chunks` _chunk number. if chunks=='auto', compute the chunks automatically. default=\"auto\"_    \n`otherArgs` _introduce other parameters into process function_      \n`shuffle` _shuffle batch data, default=False_         \n`retainData` _if > 0 , will reserve a part of data as valid data, default=0.0_    \n\n< Attributes >\n\n`.batchSize`    \nreturn mini batch size value.\n\n`.chunks`    \nreturn the number of chunks.\n\n`.chunk`    \nreturn the index of current chunk.\n\n`.epoch`    \nreturn the index of current epoch.\n\n`.isNewEpoch`    \nIf finishing iterating all data of current epoch, return True. Or return False\n\n`.isNewChunk`    \nIf finishing iterating all data of current chunk, return True. Or return False\n\n`.currentEpochPosition`    \nReturn the index position of current iteration corresponding to entire epoch.\n\n`.epochProgress`    \nReturn the progress of current epoch.\n\n`.chunkProgress`    \nReturn the progress of current chunk.\n\n< Methods >  \n\n`.next()`        \nReturn a batch of data. it is a list object.\n\n`.get_retained_data(processFunc=None,batchSize=None,chunks='auto',otherArgs=None,shuffle=False,retainData=0.0)`        \nReturn a new DataIterator object if data was retained before. Or raise error.\nIf these parameters are None, use the same value with main iterator.\n\n### Supporter(outDir='Result')\n\n< class description >\n\nSupporter is a class to help to manage training information such as the change of loss and plot them to log file and standard output. \n\n< init Parameters >\n\n`outDir` _out floder, model and log file will be saved here, default=\"Result\"_\n\n< Attributes >\n\n`finalArch`   \n_return the last saved model path_  \n\n< Methods >\n\n`send_report(x)`   \nSend information and these information will be retained untill count the statistics.\n\n`collect_report(keys=None,plot=True)`   \nDo the statistics of retaining information which are reported since from last statistics. The result will be saved in outDir/log file. \nIf < keys > is not None, only collect the data in keys. If < plot > is True, print the statistics result to standard output.\n\n`save_arch(saveFunc,archs,byKey=None,byMax=True)`   \nSave model. < saveFunc > is expected and < arch > will be introduced into this function with a format (new name, object). \nIf you use < byKey > and set < byMax >, model will be saved only while meeting the condition. \n\n`judge(key,condition,threshold,byDeltaRate=False)`   \nAcording to the value reported before, judge whether condition is right. \nIf < byDeltaRate > is True, use 1-order delta to judge. Or use value itself.\n\n`dump(keepItems=False,fromLogFile=None)`   \nReturn training information of each epoch reported. If < fromLogFile > is not None, read these information from file.\nIf < keepitems > is True, return information by name of items.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wangyu09/exkaldi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "exkaldi", "package_url": "https://pypi.org/project/exkaldi/", "platform": "", "project_url": "https://pypi.org/project/exkaldi/", "project_urls": {"Homepage": "https://github.com/wangyu09/exkaldi"}, "release_url": "https://pypi.org/project/exkaldi/0.1.1/", "requires_dist": ["numpy (>=1.16)", "PyAudio (>=0.2)"], "requires_python": "", "summary": "ExKaldi Automatic Speech Recognition Toolkit", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ExKaldi Automatic Speech Recognition Toolkit</h1>\n<p>ExKaldi toolkit is an extension package for Kaldi speech recognition toolkit.\nIt is developed to build an interface between the Kaldi toolkit and deep learning frameworks,\nsuch as PyTorch and Chainer, with Python language and further help users customize speech recognition system easily.\nA set of functions of ExKaldi are implemented by Kaldi,\nand serval Input-Output interfaces are designed to transform their data format so that it is flexible to process speech waveform,\nextract acoustic features, perform speech decoding and even deal with lattices produced by the decoder, with Python.\nBased on this, ExKaldi further provides tools to support training a DNN-based acoustic model,\nand improve their performance by, for example, multiple tasks with different labels.\nWith jointing Kaldi and deep learning frameworks,\nintegrated solutions are presented in ExKaldi from feature extracting to decoding to put up a customized speech recognition system quickly.</p>\n<h2>Start with ExKaldi</h2>\n<ol>\n<li>Install Kaldi ASR toolkit. Download the Kaldi ASR toolkit firstly.</li>\n</ol>\n<pre><code>git clone https://github.com/kaldi-asr/kaldi.git kaldi --origin upstream\n</code></pre>\n<p>And follow these three tutorial files to install and compile it.</p>\n<pre><code>less kaldi/INSTALL\nless kaldi/tools/INSTALL\nless kaldi/src/INSTALL\n</code></pre>\n<ol>\n<li>Install ExKaldi toolkit from PyPi library.</li>\n</ol>\n<pre><code>pip install exkaldi\n</code></pre>\n<p>You can also clone the ExKaldi source code from our github project, then make it a pypi package and install it.</p>\n<pre><code>git clone https://github.com/wangyu09/exkaldi.git\ncd exkaldi\npython setup.py sdist bdist_wheel\ncd ..\npip install exkaldi/dist/*\n</code></pre>\n<ol>\n<li>We prepared some example programs to show how to use ExKaldi to train a coustic model and build a ASR system.\nPlease download them from <a href=\"https://github.com/wangyu09/exkaldi/examplecode\" rel=\"nofollow\">https://github.com/wangyu09/exkaldi/examplecode</a> (or clone the ExKaldi source code).\nFramework, Chainer or Pytorch, is expected in you machine. Concerning Chainer framework, know more about it from <a href=\"https://chainer.org/\" rel=\"nofollow\">https://chainer.org/</a> .\nYou can install it directly by runing:</li>\n</ol>\n<pre><code>pip install chainer\n</code></pre>\n<ol>\n<li>Taking a Chainer DNN model based on TIMIT corpus example. Before this, fmllr feature file, alignment file and decoding graph are required.\nRun the follow scipts to obtain them respectively. Please prepare TIMIT corpus in advance.</li>\n</ol>\n<pre><code>cd kaldi/egs/timit/s5\n</code></pre>\n<p>Modify the TIMIT path, cmd and path cofigure. Then run script up to Karel's DNN.</p>\n<pre><code>./run.sh\nlocal/nnet/run_dnn.sh\n</code></pre>\n<p>Then get alignment data. It will be label to train DNN model.</p>\n<pre><code>steps/nnet/align.sh --nj 4 data-fmllr-tri3/train data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali\nsteps/nnet/align.sh --nj 4 data-fmllr-tri3/dev data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali_dev\nsteps/nnet/align.sh --nj 4 data-fmllr-tri3/test data/lang exp/dnn4_pretrain-dbn_dnn exp/dnn4_pretrain-dbn_dnn_ali_test\n</code></pre>\n<ol>\n<li>After finishing all work above, run the example python program. You can adjust more configure.</li>\n</ol>\n<pre><code>python TIMIT_DNN_fmllr_chainer.py -TIMITROOT &lt;your path&gt;\n</code></pre>\n<p>Results will be save in output directory.</p>\n<h2>Concepts and Usage</h2>\n<p>The core functions in ExKaldi tool are performed with using \"subprocess\" to run shell cmd of Kaldi tools.\nBased on this, we designed a series of classes and approaches to use them in a flexible way and it is more familiar for python programmer.\nExKaldi toolkit of current version mainly consists of one part which implements Kaldi functions such as processing feature and lattice,\nand another part which supports training DNN-based acoustic model with deep learning framework such as Chainer and Pytorch,\nand the other part which simply allows user record their voice from microphone and recognize it with their customized ASR system.</p>\n<p><em>-----------------------------------------------&lt; ExKaldi API &gt;-----------------------------------------------------</em></p>\n<ul>\n<li><a href=\"#kaldiark\" rel=\"nofollow\">Core</a>\n<ul>\n<li><a href=\"#kaldiark\" rel=\"nofollow\">class: KaldiArk</a></li>\n<li><a href=\"#kaldidict\" rel=\"nofollow\">class: KaldiDict</a></li>\n<li><a href=\"#kaldilatticelatnonehmmnonewordsymbolnone\" rel=\"nofollow\">class: KaldiLattice</a></li>\n<li><a href=\"#loadfilenameother-parameters\" rel=\"nofollow\">function: load</a></li>\n<li><a href=\"#savedataother-parameters\" rel=\"nofollow\">function: save</a></li>\n<li><a href=\"#concatdatasaxis\" rel=\"nofollow\">function: concat</a></li>\n<li><a href=\"#cutdatamaxFrames\" rel=\"nofollow\">function: cut</a></li>\n<li><a href=\"#normalizedatastdtruealpha10beta00epsilon1e-6axis0\" rel=\"nofollow\">function: normalize</a></li>\n<li><a href=\"#mergedatakeepdimfalsesortfalse\" rel=\"nofollow\">function: merge</a></li>\n<li><a href=\"#remergematrixuttLens\" rel=\"nofollow\">function: remerge</a></li>\n<li><a href=\"#sortdatabyframereversefalse\" rel=\"nofollow\">function: sort</a></li>\n<li><a href=\"#splicedataleft4rightNone\" rel=\"nofollow\">function: splice</a></li>\n<li><a href=\"#compute_mfccwavfileother-parameters\" rel=\"nofollow\">function: compute_mfcc</a></li>\n<li><a href=\"#compute_fbankwavfileother-parameters\" rel=\"nofollow\">function: compute_fbank</a></li>\n<li><a href=\"#compute_plpwavfileother-parameters\" rel=\"nofollow\">function: compute_plp</a></li>\n<li><a href=\"#compute_spectrogramwavfileother-parameters\" rel=\"nofollow\">function: compute_spectrogram</a></li>\n<li><a href=\"#use_cmvnfeatother-parameters\" rel=\"nofollow\">function: use_cmvn</a></li>\n<li><a href=\"#compute_cmvn_statsfeatoutfileother-parameters\" rel=\"nofollow\">function: compute_cmvn_stats</a></li>\n<li><a href=\"#use_cmvn_slidingfeatother-parameters\" rel=\"nofollow\">function: use_cmvn_sliding</a></li>\n<li><a href=\"#add_deltafeatother-parameters\" rel=\"nofollow\">function: add_delta</a></li>\n<li><a href=\"#load_alialifilehmmother-parameters\" rel=\"nofollow\">function: load_ali</a></li>\n<li><a href=\"#load_latlatfilehmmwordsymbol\" rel=\"nofollow\">function: load_lat</a></li>\n<li><a href=\"#analyze_countsalifileoutfileother-parameters\" rel=\"nofollow\">function: analyze_counts</a></li>\n<li><a href=\"#decompressdata\" rel=\"nofollow\">function: decompress</a></li>\n<li><a href=\"#decode_latticeamphmmhclgwordsymbolother-parameters\" rel=\"nofollow\">function: decode_lattice</a></li>\n<li><a href=\"#run_shell_cmdcmdother-parameters\" rel=\"nofollow\">function: run_shell_cmd</a></li>\n<li><a href=\"#get_kaldi_path\" rel=\"nofollow\">function: get_kaldi_path</a></li>\n<li><a href=\"#get_env\" rel=\"nofollow\">function: get_env</a></li>\n<li><a href=\"#set_kaldi_pathpath\" rel=\"nofollow\">function: set_kaldi_path</a></li>\n<li><a href=\"#check_confignameconfignone\" rel=\"nofollow\">function: check_config</a></li>\n<li><a href=\"#split_filefilepathother-parameters\" rel=\"nofollow\">function: split_file</a></li>\n<li><a href=\"#pad_sequencedataother-parameters\" rel=\"nofollow\">function: pad_sequence</a></li>\n<li><a href=\"#unpack_padded_sequencedatalengthsother-parameters\" rel=\"nofollow\">function: unpack_padded_sequence</a></li>\n<li><a href=\"#werrefhypother-parameters\" rel=\"nofollow\">function: wer</a></li>\n<li><a href=\"#accuracyrefhypother-parameters\" rel=\"nofollow\">function: accuracy</a></li>\n<li><a href=\"#edit_distancerefhypother-parameters\" rel=\"nofollow\">function: edit_distance</a></li>\n<li><a href=\"#log_softmaxdataother-parameters_\" rel=\"nofollow\">function: log_softmax</a></li>\n<li><a href=\"#dataiteratorscpfilesprocessfuncbatchsizechunksautootherargsnoneshufflefalseretaindata00\" rel=\"nofollow\">class: DataIterator</a></li>\n<li><a href=\"#supporteroutdirresult\" rel=\"nofollow\">class: Supporter</a></li>\n</ul>\n</li>\n</ul>\n<h3>KaldiArk()</h3>\n<p>&lt; class description &gt;</p>\n<p><strong>KaldiArk</strong> is a subclass of <strong>bytes</strong>. It maks a object who holds the Kaldi ark data in a binary type. <strong>KaldiArk</strong> and <strong>KaldiDict</strong> object have almost the same attributes and functions, and they can do some mixed operations such as \"+\" and \"concat\" and so on.   Moreover, force-alignment can also be held by KaldiArk and KaldiDict in ExKaldi tool, and we defined it as int32 data type.</p>\n<p>&lt; Attributes &gt;</p>\n<p><code>.lens</code><br>\nreturn a tuple: ( the numbers of all utterances, the utterance ID and its frames of each utterance ).</p>\n<p><code>.dim</code><br>\nreturn an int number: the dimensions of data.</p>\n<p><code>.dtype</code><br>\nreturn a str: data type such as 'float32'.</p>\n<p><code>.utts</code><br>\nreturn a list: all utterance names.</p>\n<p><code>.array</code><br>\nreturn a KaldiDict object: transform binary ark data to numpy arrar format.</p>\n<p>&lt; Methods &gt;</p>\n<p><code>.to_dtype(dtype)</code><br>\nchange data dtype and return a new KaldiArk object.</p>\n<p><code>.check_format()</code><br>\ncheck whether data has a correct Kaldi ark format. If had, return True. Or raise error.</p>\n<p><code>.save(fileName,chunks=1,outScpFile=False)</code><br>\nsave as .ark (and scp) file. If chunks&gt;1, split it averagely and save them.</p>\n<p><code>__add__</code>\nreturn a new KaldiArk object: use &lt; + &gt; operator to plus another KaldiArk object or KaldiDict object.</p>\n<p><code>.splice(left,right=None)</code><br>\nreturn a KaldiArk object. Splice front-behind frames. if right is None, we define right = left.</p>\n<p><code>.select(left,dims,retain=False)</code><br>\nreturn KaldiArk object(s): select data according to dims. &lt; dims &gt; should be an int or string like \"1,5-20\".\nIf retain ==  True, return both selected data and non-selected data, or return only selected data.</p>\n<p><code>.subset(nHead=0,chunks=1,uttList=None)</code><br>\nif nhead &gt; 0, return a KaldiArk object which only has start-n utterances.<br>\nif chunks &gt; 1, return list whose members are KaldiArk objects.<br>\nif uttList != None, select utterances if utterance id appeared.\nonly one of these three options will works by order.</p>\n<h3>KaldiDict()</h3>\n<p>&lt; class description &gt;</p>\n<p><strong>KaldiDict</strong> is a subclass of <strong>dict</strong>. It generates a object who holds the Kaldi ark data in NumPy array type.\nIts keys are the utterance IDs and the values are data. <strong>KaldiDict</strong> can also do some mixed operations with <strong>KaldiArk</strong> such as \"+\" and \"concat\" and so on.<br>\nNote that <strong>KaldiDict</strong> has a part of functions which <strong>KaldiArk</strong> dosen't have.</p>\n<p>&lt; Attributes &gt;</p>\n<p><code>.lens</code><br>\nreturn a tuple: ( the numbers of all utterances, the utterance ID and its frames of each utterance ).</p>\n<p><code>.dim</code><br>\nreturn an int number: the dimensions of data.</p>\n<p><code>.dtype</code><br>\nreturn a str: data type such as 'float32'.</p>\n<p><code>.utts</code><br>\nreturn a list: all utterance names.</p>\n<p><code>.ark</code><br>\nreturn a KaldiArk object: transform numpy array data into Kaldi's binary format.</p>\n<p><code>.target</code><br>\nIf it is alignment data, return the target classes that is maximum value+1.</p>\n<p>&lt; Methods &gt;</p>\n<p><code>.to_dtype(dtype)</code><br>\nchange data dtype and return a new KaldiArk object.</p>\n<p><code>.check_format()</code><br>\ncheck whether data has a correct Kaldi ark format. If had, return True. Or raise error.</p>\n<p><code>.save(fileName,chunks=1)</code><br>\nsave as .npy file. If chunks&gt;1, split it averagely and save them.</p>\n<p><code>__add__</code><br>\nreturn a new KaldiDict object: use &lt; + &gt; operator to plus another KaldiArk object or KaldiDict object.</p>\n<p><code>.concat(others,axis=1)</code><br>\nreturn a KaldiDict object. If any member has a dtype of float, the result will be float type, or it will be int type.<br>\nIt only returns the concat results whose utterance IDs appeared in all members.\nIf axis is 1 and some utterance only has 1 dimension or 1 frame, it will be concat to all frames of others.</p>\n<p><code>.splice(left,right=None)</code><br>\nreturn a KaldiDict object. Splice front-behind frames. if right is None, we define right = left.\nThis result is kind of different from KaidiArk().splice() function.</p>\n<p><code>.select(left,dims,retain=False)</code><br>\nreturn KaldiDict object(s): select data according to dims. &lt; dims &gt; should be an int or string like \"1,5-20\".\nIf retain ==  True, return both selected data and non-selected data, or return only selected data.</p>\n<p><code>.subset(nHead=0,chunks=1,uttList=None)</code><br>\nif nhead &gt; 0, return a KaldiArk object which only has start-n utterances.<br>\nif chunks &gt; 1, return list whose members are KaldiArk objects.<br>\nif uttList != None, select utterances if utterance id appeared.\nonly one of these three options will works by order.</p>\n<p><code>.sort(by='frame',reverse=False)</code>\nreturn a KaldiDict object: sort data by utterance IDs or the length of utterances.\nif reverse == True, do descending order.</p>\n<p><code>.merge(keepDim=False,sortFrame=False)</code><br>\nreturn a tuple. if keepDim == True, the first member is list whose content are NumPy arrays with 2-dimensions of all utterances, and if keepDim == False,\nit is a integrated NumPy array with 3-dimensions of all utterances.\nthe second member is utterance IDs and their respective frame length.\nif sortFrame == True , it will sort all utterances by length with ascending order before merging.</p>\n<p><code>.remerge(matrix,uttLens)</code><br>\nIf self has not any data, do not return, or return a new KaldiDict object: this is a inverse operation of .merge function.</p>\n<p><code>.normalize(std=True,alpha=1.0,beta=0.0,epsilon=1e-6,axis=0)</code>\nReturn a KaldiDict object. if std == True, do <em>alpha*(x-mean)/(std+epsilon)+belta</em>, or do <em>alpha*(x-mean)+belta</em>.</p>\n<p><code>.cut(maxFrames)</code><br>\nreturn a KaldiDict object: traverse all utterances, and if one is longer than 1.25*maxFrames, cut it with a threshold length of maxFrames.</p>\n<p><code>.tuple_value(others,sort=False)</code><br>\nTuple the utterance of the same ID from different objects. Return a list whose members are tuple: (utterance IDs, the utterances of others)</p>\n<h3>KaldiLattice(lat=None,hmm=None,wordSymbol=None)</h3>\n<p>&lt; class description &gt;</p>\n<p><strong>KaldiLattice</strong> holds the lattice and its related file path: HMM file and WordSymbol file. ExKaldi.decode_lattice function will return a KaldiLattice object.\nAslo, you can define a empty KaldiLattice object and load its data later.</p>\n<p>&lt; init Parameters &gt;</p>\n<p><code>lat</code> <em>expected Kaldi's lattice binary data or lattice file path which is compressed-gz file</em><br>\n<code>hmm</code> <em>HMM file path</em><br>\n<code>wordSymbol</code> <em>word to int ID file path</em></p>\n<p>&lt; Attributes &gt;</p>\n<p><code>.value</code><br>\nreturn binary data of lattice.</p>\n<p><code>.model</code><br>\nreturn HMM file path.</p>\n<p><code>.lexicon</code><br>\nreturn word-to-id file path.</p>\n<p>&lt; Methods &gt;</p>\n<p><code>.load(latFile,hmm,wordSymbol)</code><br>\nload lattice. &lt; latFile &gt; can be file path or binary data. &lt; hmm &gt; and &lt; wordSymbol &gt; are expected as file path.</p>\n<p><code>.get_1best(lmwt=1,maxLmwt=None,acwt=1.0,outFile=None,phoneSymbol=None)</code><br>\nIf maxLmwt != None, return Python dict object: its keys are the lmwt value and values are the 1best words output collected in a list. Or only return a list.\nIf &lt; outFile &gt; is file name, the 1best words output will be save as file and values of returned dict will be changed for these files' path.\nIf &lt; phoneSymbol &gt; is not None, will return phones outputs of 1best words.</p>\n<p><code>.get_nbest(n,acwt=1.0,outFile=None,outAliFile=None,requireCost=False)</code><br>\nIf &lt; outFile &gt; is not None, output results as file and if &lt; requireCost &gt; == True, lm cost and ac cost will be also returned as files. In this way, return a list whose members are path of these files. If &lt; outFile &gt; is None, also return a list but its members are n best words and their respective ac cost and lm cost.\nIf &lt; outAliFile &gt; is not None, fore-alignment file will be reserved.</p>\n<p><code>.scale(acwt=1,inAcwt=1,ac2lm=0,lmwt=1,lm2ac=0)</code><br>\nsacle lattice and return a new scaled KaldiLattice object.</p>\n<p><code>.add_penalty(penalty=0)</code><br>\nadd words insertion penalty and return a new KaldiLattice object.</p>\n<p><code>.save(fileName,copyFile=False)</code>\nsave lattice as .gz file. If &lt; copyFile &gt; is True, will copy HMM file and wordSymbol file to the same directory as saved lattice file.</p>\n<p><code>__add__</code><br>\nadd another lattice. Note that it is just a simple addtional operation to intergrat several lattices as a big one.</p>\n<h3>load(fileName,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Load Kaldi ark feat file, Kaldi scp feat file, KaldiArk ark file, or KaldiDict npy file.\nReturn KaldiArk or KaldiDict object.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>filePath</code> <em>file path with a suffix '.ark' or '.scp' or '.npy'</em>\n<code>useSuffix</code>  <em>when file has another suffix, you can declare it, default = None</em></p>\n<h3>save(data,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>It is the same as .save method of KaldiArk or KaldiDict.\n&lt; data &gt; is expected as KaldiArk or KaldiDict object.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>data</code> <em>KaldiArk, KaldiDict, or KaldiLattice object</em>\n<code>*params</code>  <em>If data is KaldiArk, or KaldiDict object, params should be filename and chunks, If KaldiLattice, fileName and copyFile shou be given</em></p>\n<h3>concat(datas,axis)</h3>\n<p>&lt; function description &gt;</p>\n<p>return a KaldiDict object. It is the same as .concat method of KaldiDict.\n&lt; datas &gt; is expected as KaldiArk or KaldiDict object(s).</p>\n<h3>cut(data,maxFrames)</h3>\n<p>&lt; function description &gt;</p>\n<p>return KaldiDict object. It is he same as .cut method of KaldiDict.\n&lt; data &gt; is expected as KaldiArk or KaldiDict object.</p>\n<h3>normalize(data,std=True,alpha=1.0,beta=0.0,epsilon=1e-6,axis=0)</h3>\n<p>&lt; function description &gt;</p>\n<p>return KaldiDict object. It is he same as .normalize method of KaldiDict.\n&lt; data &gt; is expected as KaldiArk or KaldiDict object.</p>\n<h3>merge(data,keepDim=False,sort=False)</h3>\n<p>&lt; function description &gt;</p>\n<p>It is the same as .merge method of KaldiDict.\n&lt; data &gt; is expected as KaldiArk or KaldiDict object(s).</p>\n<h3>remerge(matrix,uttLens)</h3>\n<p>&lt; function description &gt;</p>\n<p>return a kaldiDict object.It is the same as .remerge method of KaldiDict.</p>\n<h3>sort(data,by='frame',reverse=False)</h3>\n<p>&lt; function description &gt;</p>\n<p>return a KaldiDict object. It is the same as .sort method of KaldiDict.\n&lt; data &gt; is expected as KaldiArk or KaldiDict object(s).</p>\n<h3>splice(data,left=4,right=None)</h3>\n<p>&lt; function description &gt;</p>\n<p>return KaldiArk or KaldiDict object. It is the same as .splice method of KaldiArk or KaldiDict.\n&lt; datas &gt; is expected as KaldiArk or KaldiDict object.</p>\n<h3>compute_mfcc(wavFile,<em>**other parameters</em>)</h3>\n<p>&lt; function &gt;</p>\n<p>Compute mfcc feature. Return KaldiArk object or file path if &lt; asFile &gt; is True. We provide some common options,\nIf you want to use more options, set &lt; config &gt; = your-configure but note that if you do this, these usual configures we provided will be ignored.\nYou can use ExKaldi.check_config('compute_mfcc') function to get configure information you could set.\nAlso run shell command \"compute-mfcc-feats\" to check their meaning.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>wavFile</code>   <em>WAV file or scp file, you can declare its type by using point useSuffix</em><br>\n<code>rate</code>   <em>sampling rate, default = 16000</em><br>\n<code>frameWidth</code>   <em>stride windows width, milliseconds, default = 25</em><br>\n<code>frameShift</code>   <em>stride windows width, milliseconds, default = 10</em><br>\n<code>melBins</code>   <em>numbers of mel bins, default = 23</em><br>\n<code>featDim</code>   <em>dimendionality of mfcc feature, default = 13</em><br>\n<code>windowType</code>   <em>window function, default = 'povey'</em><br>\n<code>useSuffix</code>   <em>when file is a scp file but without 'scp' suffix, you can declare its file suffix, or error will be raised, default = None</em><br>\n<code>config</code>   <em>another configure setting method</em><br>\n<code>asFile</code>   <em>if it is True, save result as file and return file path. Or return KaldiArk, default = False</em></p>\n<h3>compute_fbank(wavFile,<em>**other parameters</em>)</h3>\n<p>&lt; function &gt;</p>\n<p>Compute fbank feature. Return KaldiArk object or file path if &lt; outFile &gt; is True. We provide some common options,\nIf you want to use more options, set &lt; config &gt; = your-configure but note that if you do this, these usual configures we provided will be ignored.\nYou can use ExKaldi.check_config('compute_fbank') function to get configure information you could set.\nAlso run shell command \"compute-fbank-feats\" to check their meaning.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>wavFile</code>   <em>WAV file or scp file, you can declare its type by using point useSuffix</em><br>\n<code>rate</code>   <em>sampling rate, default = 16000</em><br>\n<code>frameWidth</code>   <em>stride windows width, milliseconds, default = 25</em><br>\n<code>frameShift</code>   <em>stride windows width, milliseconds, default = 10</em><br>\n<code>melBins</code>   <em>numbers of mel bins, default = 23</em><br>\n<code>windowType</code>   <em>window function, default = 'povey'</em><br>\n<code>useSuffix</code>   <em>when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None</em><br>\n<code>config</code>   <em>another configure setting method</em><br>\n<code>asFile</code>   <em>if it is true, save result as file and return file path. Or return KaldiArk, default = False</em></p>\n<h3>compute_plp(wavFile,<em>**other parameters</em>)</h3>\n<p>&lt; function &gt;</p>\n<p>Compute plp feature. Return KaldiArk object or file path if &lt; outFile &gt; is True. We provide some common options,\nIf you want to use more options, set &lt; config &gt; = your-configure but note that if you do this, these usual configures we provided will be ignored.\nYou can use ExKaldi.check_config('compute_plp') function to get configure information you could set.\nAlso run shell command \"compute-plp-feats\" to check their meaning.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>wavFile</code>   <em>WAV file or scp file, you can declare its type by using point useSuffix</em><br>\n<code>rate</code>   <em>sample rate, default = 16000</em><br>\n<code>frameWidth</code>   <em>stride windows width, milliseconds, default = 25</em><br>\n<code>frameShift</code>   <em>stride windows width, milliseconds, default = 10</em><br>\n<code>melBins</code>   <em>numbers of mel bins, default = 23</em><br>\n<code>featDim</code>   <em>dimendionality of mfcc feature, default = 13</em><br>\n<code>windowType</code>   <em>window function, default = 'povey'</em><br>\n<code>useSuffix</code>   <em>when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None</em><br>\n<code>config</code>   <em>another configure setting method</em><br>\n<code>asFile</code>   <em>if it is True, save result as file and return file path, or return KaldiArk, default = False</em></p>\n<h3>compute_spectrogram(wavFile,<em>**other parameters</em>)</h3>\n<p>&lt; function description&gt;</p>\n<p>Compute spectrogram feature. Return KaldiArk object or file path if &lt; outFile &gt; is True. We provide some common options,\nIf you want to use more options, set &lt; config &gt; = your-configure but note that if you do this, these usual configures we provided will be ignored.\nYou can use ExKaldi.check_config('compute_spectrogram') function to get configure information you could set.\nAlso run shell command \"compute-spectrogram-feats\" to check their meaning.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>wavFile</code>   <em>WAV file or scp file, you can declare its type by using point useSuffix</em><br>\n<code>rate</code>   <em>sample rate, default = 16000</em><br>\n<code>frameWidth</code>   <em>stride windows width, milliseconds, default = 25</em><br>\n<code>frameShift</code>   <em>stride windows width, milliseconds, default = 10</em><br>\n<code>windowType</code>   <em>window function, default = 'povey'</em><br>\n<code>useSuffix</code>   <em>when file is a scp file but withou 'scp' suffix, you can declare its file suffix, default = None</em><br>\n<code>config</code>   <em>another configure setting method</em><br>\n<code>asFile</code>   <em>if it is True, save result as file and return file path, or return KaldiArk, default = False</em></p>\n<h3>use_cmvn(feat,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Apply CMVN to feature. Return KaldiArk object or file path if &lt; outFile &gt; is not None. If &lt; cmvnStatFile &gt;  are None, first compute the CMVN state. But &lt; utt2spkFile &gt; and &lt; spk2uttFile &gt; are expected at the same time if they were not None.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>feat</code> <em>KaldiArk or KaldiDict object</em>\n<code>cmvnStatFile</code>   <em>if None compute it firstly, default = None</em><br>\n<code>spk2uttFile</code>   <em>if None compute cmvn state whin each utterance, default = None</em><br>\n<code>utt2spkFile</code>   <em>if None and spk2uttFile != None, raise error, default = None</em><br>\n<code>outFile</code>   <em>if it is a file name, save result as file and return file path, or return KaldiArk, default = False</em></p>\n<h3>compute_cmvn_stats(feat,outFile,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Compute CMVN state and save it as file. Return cmvn file path.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>feat</code> <em>KaldiArk or KaldiDict object</em>\n<code>spk2uttFile</code>   <em>if None, compute cmvn state whin each utterance, default = None</em><br>\n<code>outFile</code>   <em>file path name</em></p>\n<h3>use_cmvn_sliding(feat,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Apply sliding CMVN to feature. Return KaldiArk object.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>feat</code> <em>KaldiArk or KaldiDict object</em><br>\n<code>windowsSize</code>   <em>sliding windows width, frames, if None, set it to cover all frames at one time, default = None</em><br>\n<code>std</code>   <em>if False, only apply mean, default = False</em></p>\n<h3>add_delta(feat,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Add n-orders delta to feature. Return KaldiArk object or file path if &lt; outFile &gt; is not None.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>feat</code> <em>KaldiArk or KaldiDict object</em>\n<code>order</code>   <em>the times of delta, default = 2</em>\n<code>outFile</code>   <em>if it is a file name, save result as file and return file path, or return KaldiArk, default = False</em></p>\n<h3>load_ali(aliFile,hmm,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Get alignment from ali file. Return a KaldiDict object.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>aliFile</code> <em>kaldi alignment file path</em>\n<code>hmm</code>   <em>HMM file path</em>\n<code>returnPhoneme</code>   <em>if True, return phoneme IDs, or return pdf IDs, default = False</em></p>\n<h3>load_lat(latFile,hmm,wordSymbol)</h3>\n<p>&lt; function description &gt;</p>\n<p>Get alignment from ali file. Return a KaldiDict object.\nThe same as KaldiLattice().load() method.</p>\n<h3>analyze_counts(aliFile,outFile,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Get statistical information of pdf IDs or phoneme IDs from ali file.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>aliFile</code> <em>Kaldi alignment file path</em>\n<code>outFile</code> <em>outFile path</em>\n<code>countPhone</code>   <em>if True, count statistical value of phoneme IDs, or count pdf IDs, default = False</em>\n<code>hmm</code> <em>if None, find HMM file automatically, default = None</em>\n<code>dim</code> <em>if None, compute dimension automatically, default = None</em></p>\n<h3>decompress(data)</h3>\n<p>&lt; function description &gt;</p>\n<p>Decompress feature data. Feat are expected KaldiArk object whose data type is \"CM\", that is kaldi compressed ark data. Return a KaldiArk object.\nThis function is a cover of kaldi-io-for-python tools. For more information about it, please access to <a href=\"https://github.com/vesis84/kaldi-io-for-python/blob/master/kaldi_io/kaldi_io.py\" rel=\"nofollow\">https://github.com/vesis84/kaldi-io-for-python/blob/master/kaldi_io/kaldi_io.py</a></p>\n<p>&lt; Parameters &gt;</p>\n<p><code>data</code> <em>the binary data of kaldi compressed feature</em></p>\n<h3>decode_lattice(amp,hmm,hclg,wordSymbol,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Decode by generating lattice from acoustic probability. Return a KaldiLattice object or file path if &lt; outFile &gt; is not None.\nWe provide some usual options, but if you want use more, set &lt; config &gt; = your-configure. Note that if you do this, these usual configures we provided will be ignored.\nYou can use ExKaldi.check_config('decode-lattice') function to get configure information you could set.\nAlso run shell command \"latgen-faster-mapped\" to look their meaning.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>amp</code> <em>acoustic model log-like probability, it should be a KaldiArk object</em><br>\n<code>hmm</code>   <em>HMM file path</em><br>\n<code>hclg</code>   <em>HCLG file path</em><br>\n<code>wordSymbol</code>   <em>word-to-int-ID file path</em><br>\n<code>minActive</code>   <em>minimum active, default=200</em><br>\n<code>maxMem</code>   <em>maximum memory, default=50000000</em><br>\n<code>maxActive</code>   <em>maximum active, default=7000</em><br>\n<code>beam</code>   <em>beam, default=10</em><br>\n<code>latBeam</code>   <em>lattice beam, default=8</em><br>\n<code>acwt</code>   <em>acoustic model weight, default=1</em><br>\n<code>config</code>   <em>another configure setting method</em><br>\n<code>maxThreads</code>   <em>the numbers of decode thread, default=1</em><br>\n<code>outFile</code>   <em>if it is a file name, save result as file and return file path, or return KaldiLattice object, default = False</em></p>\n<h3>run_shell_cmd(cmd,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>We provided a basic way to run shell command. Return binary string (out,err).</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>cmd</code> <em>shell command, string</em><br>\n<code>inputs</code>   <em>inputs data, string, default=None</em></p>\n<h3>get_kaldi_path()</h3>\n<p>&lt; function description &gt;</p>\n<p>return Kaldi toolkit root path if Kaldi has been found or set up, or return None.\nIt is a initialized action implemented automatically when importing ExKaldi toolkit.</p>\n<h3>get_env()</h3>\n<p>&lt; function description &gt;</p>\n<p>return the current environment which exkaldi is running at.</p>\n<h3>set_kaldi_path(path)</h3>\n<p>&lt; function description &gt;</p>\n<p>set kaldi root path manually. If another Kaldi had already been running rightly. replace it.</p>\n<h3>check_config(name,config=None)</h3>\n<p>&lt; function description &gt;</p>\n<p>Get default configure if &lt; config &gt; is None, or check if given &lt; config &gt; has a right format. This function will read \"conf\" file which is located in \"./\", so if there is not, it will raise error. Also you can change the content of \"conf\" file with expected format.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>name</code> <em>object name you want to check. such as \"compute_mfcc\"</em><br>\n<code>config</code> <em>if none, return defalut configure, or chenk the format of configure and return True if correct</em></p>\n<h3>split_file(filePath,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Split a large scp file into n smaller files. The splited files will be put at the same folder as original file and return their paths as a list.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>filePath</code> <em>scp file path</em><br>\n<code>chunks</code> <em>expected numbers, must be larger than 1, default=2</em></p>\n<h3>pad_sequence(data,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Pad a batch sequences in order to train sequential neural network model such as RNN, LSTM.\nNot that the first dimension of padded data is sequence.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>data</code> <em>a list whose members are batch of sequences</em><br>\n<code>shuffle</code> <em>If True, pad each sequence by randomly deciding its start position, Or start position is 0. default=False</em>\n<code>pad</code> <em>padded value, default=0</em></p>\n<h3>unpack_padded_sequence(data,lengths,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>It is a reverse operation of ExKaldi.pad_sequence function.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>data</code> <em>NumPy array which the first dimension is expected as sequence or batch size</em><br>\n<code>lengths</code> <em>It should has the same format of the lengths-output of pad_sequence function</em>\n<code>batchSizeDim</code> <em>assign the dimension that batch size is. default=1</em></p>\n<h3>wer(ref,hyp,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Compute WER (word error rate) score between prediction result and reference text.\nReturn a Python dict object with score information like: {'WER':0,'allWords':10,'ins':0,'del':0,'sub':0,'SER':0,'wrongSentences':0,'allSentences':1,'missedSentences':0}\nBoth &lt; hyp &gt; and &lt; ref &gt; can be text file or list object.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>hyp</code> <em>prediction result file or result-list which obtained from KaldiLattice.get_1best_words function</em><br>\n<code>ref</code> <em>reference text file or result-like-list</em><br>\n<code>mode</code> <em>score mode, default=present</em><br>\n<code>ignore</code> <em>ignore some symbol such as \"sil\", default=None</em></p>\n<h3>accuracy(ref,hyp,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Compute one-one match score. for example predict is (1,2,3,4), and label is (1,2,2,4), the score will be 0.75.\nBoth &lt; ref &gt; and &lt; hyp &gt; will be flattened before scoring.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>ref</code> <em>iterative object such as list, tuple or flattened NumPy array</em><br>\n<code>hyp</code> <em>iterative object like ref</em><br>\n<code>ignore</code> <em>ignore some symbol such as padded 0, default=None</em><br>\n<code>mode</code> <em>if mode == all, compute one-one matching score. if present, compute appearing score. default=all</em></p>\n<h3>edit_distance(ref,hyp,<em>**other parameters</em>)</h3>\n<p>&lt; function description &gt;</p>\n<p>Compute edit distance score between two objects.\nBoth &lt; ref &gt; and &lt; hyp &gt; will be flattened before scoring.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>ref</code> <em>iterative object such as list, tuple or flattened NumPy array</em><br>\n<code>hyp</code> <em>iterative object like ref</em><br>\n<code>ignore</code> <em>ignore some symbol, default=None</em></p>\n<h3>log_softmax(data,**other parameters_)</h3>\n<p>&lt; function description &gt;</p>\n<p>Compute the log-softmax value of a NumPy array data.</p>\n<p>&lt; Parameters &gt;</p>\n<p><code>data</code> <em>NumPy array</em><br>\n<code>axis</code> <em>demension, default=1</em></p>\n<h3>DataIterator(scpFiles,processFunc,batchSize,chunks='auto',otherArgs=None,shuffle=False,retainData=0.0)</h3>\n<p>&lt; class description &gt;</p>\n<p>Data iterator used to train a neural network model. It will split the scp file into n chunks then manage and load them into momery alternately with parallel thread.\nIt will shuffle the original scp file and split again while new epoch.</p>\n<p>&lt; init Parameters &gt;</p>\n<p><code>scpFiles</code> <em>scp file(s)</em>\n<code>processFunc</code> <em>function to process data from scp file to iterative data format, data ierator itself and scp file name will be introduced into defautly</em><br>\n<code>batchSize</code> <em>mini batch size</em><br>\n<code>chunks</code> <em>chunk number. if chunks=='auto', compute the chunks automatically. default=\"auto\"</em><br>\n<code>otherArgs</code> <em>introduce other parameters into process function</em><br>\n<code>shuffle</code> <em>shuffle batch data, default=False</em><br>\n<code>retainData</code> <em>if &gt; 0 , will reserve a part of data as valid data, default=0.0</em></p>\n<p>&lt; Attributes &gt;</p>\n<p><code>.batchSize</code><br>\nreturn mini batch size value.</p>\n<p><code>.chunks</code><br>\nreturn the number of chunks.</p>\n<p><code>.chunk</code><br>\nreturn the index of current chunk.</p>\n<p><code>.epoch</code><br>\nreturn the index of current epoch.</p>\n<p><code>.isNewEpoch</code><br>\nIf finishing iterating all data of current epoch, return True. Or return False</p>\n<p><code>.isNewChunk</code><br>\nIf finishing iterating all data of current chunk, return True. Or return False</p>\n<p><code>.currentEpochPosition</code><br>\nReturn the index position of current iteration corresponding to entire epoch.</p>\n<p><code>.epochProgress</code><br>\nReturn the progress of current epoch.</p>\n<p><code>.chunkProgress</code><br>\nReturn the progress of current chunk.</p>\n<p>&lt; Methods &gt;</p>\n<p><code>.next()</code><br>\nReturn a batch of data. it is a list object.</p>\n<p><code>.get_retained_data(processFunc=None,batchSize=None,chunks='auto',otherArgs=None,shuffle=False,retainData=0.0)</code><br>\nReturn a new DataIterator object if data was retained before. Or raise error.\nIf these parameters are None, use the same value with main iterator.</p>\n<h3>Supporter(outDir='Result')</h3>\n<p>&lt; class description &gt;</p>\n<p>Supporter is a class to help to manage training information such as the change of loss and plot them to log file and standard output.</p>\n<p>&lt; init Parameters &gt;</p>\n<p><code>outDir</code> <em>out floder, model and log file will be saved here, default=\"Result\"</em></p>\n<p>&lt; Attributes &gt;</p>\n<p><code>finalArch</code><br>\n<em>return the last saved model path</em></p>\n<p>&lt; Methods &gt;</p>\n<p><code>send_report(x)</code><br>\nSend information and these information will be retained untill count the statistics.</p>\n<p><code>collect_report(keys=None,plot=True)</code><br>\nDo the statistics of retaining information which are reported since from last statistics. The result will be saved in outDir/log file.\nIf &lt; keys &gt; is not None, only collect the data in keys. If &lt; plot &gt; is True, print the statistics result to standard output.</p>\n<p><code>save_arch(saveFunc,archs,byKey=None,byMax=True)</code><br>\nSave model. &lt; saveFunc &gt; is expected and &lt; arch &gt; will be introduced into this function with a format (new name, object).\nIf you use &lt; byKey &gt; and set &lt; byMax &gt;, model will be saved only while meeting the condition.</p>\n<p><code>judge(key,condition,threshold,byDeltaRate=False)</code><br>\nAcording to the value reported before, judge whether condition is right.\nIf &lt; byDeltaRate &gt; is True, use 1-order delta to judge. Or use value itself.</p>\n<p><code>dump(keepItems=False,fromLogFile=None)</code><br>\nReturn training information of each epoch reported. If &lt; fromLogFile &gt; is not None, read these information from file.\nIf &lt; keepitems &gt; is True, return information by name of items.</p>\n\n          </div>"}, "last_serial": 6245732, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "326e2a281b8cd85e7e7c00a56a2e29d8", "sha256": "c22ec3a5a7cad5b2e9f784b81a2a09308e7c57e5070d97c7b9527ff5018a7188"}, "downloads": -1, "filename": "exkaldi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "326e2a281b8cd85e7e7c00a56a2e29d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50505, "upload_time": "2019-12-05T06:34:12", "upload_time_iso_8601": "2019-12-05T06:34:12.127089Z", "url": "https://files.pythonhosted.org/packages/3c/25/4b3439b97186cb6a6fb7ea1b802c6b63846efd7f048b8e1d2aa3d5cadb69/exkaldi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "804bb995eebc8b8a4de6dd823d538000", "sha256": "d7473f94d6d799f7e631b045fd8a441482a736e7ec35bb78381bdda96957b8a3"}, "downloads": -1, "filename": "exkaldi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "804bb995eebc8b8a4de6dd823d538000", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61622, "upload_time": "2019-12-05T06:34:14", "upload_time_iso_8601": "2019-12-05T06:34:14.488246Z", "url": "https://files.pythonhosted.org/packages/f2/d5/037f73f0d772693f178569b515e3cd8caa89bd18765c23fff0a02d9355d4/exkaldi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "326e2a281b8cd85e7e7c00a56a2e29d8", "sha256": "c22ec3a5a7cad5b2e9f784b81a2a09308e7c57e5070d97c7b9527ff5018a7188"}, "downloads": -1, "filename": "exkaldi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "326e2a281b8cd85e7e7c00a56a2e29d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50505, "upload_time": "2019-12-05T06:34:12", "upload_time_iso_8601": "2019-12-05T06:34:12.127089Z", "url": "https://files.pythonhosted.org/packages/3c/25/4b3439b97186cb6a6fb7ea1b802c6b63846efd7f048b8e1d2aa3d5cadb69/exkaldi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "804bb995eebc8b8a4de6dd823d538000", "sha256": "d7473f94d6d799f7e631b045fd8a441482a736e7ec35bb78381bdda96957b8a3"}, "downloads": -1, "filename": "exkaldi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "804bb995eebc8b8a4de6dd823d538000", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61622, "upload_time": "2019-12-05T06:34:14", "upload_time_iso_8601": "2019-12-05T06:34:14.488246Z", "url": "https://files.pythonhosted.org/packages/f2/d5/037f73f0d772693f178569b515e3cd8caa89bd18765c23fff0a02d9355d4/exkaldi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:46 2020"}