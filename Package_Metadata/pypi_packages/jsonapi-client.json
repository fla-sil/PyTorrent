{"info": {"author": "Tuomas Airaksinen", "author_email": "tuomas.airaksinen@qvantel.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://travis-ci.org/qvantel/jsonapi-client.svg?branch=master\n   :target: https://travis-ci.org/qvantel/jsonapi-client\n\n.. image:: https://coveralls.io/repos/github/qvantel/jsonapi-client/badge.svg\n   :target: https://coveralls.io/github/qvantel/jsonapi-client\n\n.. image:: https://img.shields.io/pypi/v/jsonapi-client.svg\n   :target: https://pypi.python.org/pypi/jsonapi-client\n\n.. image:: https://img.shields.io/pypi/pyversions/jsonapi-client.svg\n   :target: https://pypi.python.org/pypi/jsonapi-client\n\n.. image:: https://img.shields.io/badge/licence-BSD%203--clause-blue.svg\n   :target: https://github.com/qvantel/jsonapi-client/blob/master/LICENSE.txt\n\n==========================\nJSON API client for Python\n==========================\n\nIntroduction\n============\n\nPackage repository: https://github.com/qvantel/jsonapi-client\n\nThis Python (3.6+) library provides easy-to-use, pythonic, ORM-like access to\nJSON API ( http://jsonapi.org )\n\n - Optional asyncio implementation\n - Optional model schema definition and validation (=> easy reads even without schema)\n - Resource caching within session\n\n\nInstallation\n============\n\nFrom Pypi::\n\n    pip install jsonapi-client\n\nOr from sources::\n\n    ./setup.py install\n\n\nUsage\n=====\n\nClient session\n--------------\n\n.. code-block:: python\n\n   from jsonapi_client import Session, Filter, ResourceTuple\n\n   s = Session('http://localhost:8080/')\n   # To start session in async mode\n   s = Session('http://localhost:8080/', enable_async=True)\n\n   # You can also pass extra arguments that are passed directly to requests or aiohttp methods,\n   # such as authentication object\n   s = Session('http://localhost:8080/',\n               request_kwargs=dict(auth=HTTPBasicAuth('user', 'password'))\n\n\n   # You can also use Session as a context manager. Changes are committed in the end\n   # and session is closed.\n   with Session(...) as s:\n       your code\n\n   # Or with enable_async=True\n   async with Session(..., enable_async=True):\n       your code\n\n   # If you are not using context manager, you need to close session manually\n   s.close()\n\n   # Again, don't forget to await in the AsyncIO mode\n   await s.close()\n\n   # Fetching documents\n   documents = s.get('resource_type')\n   # Or if you want only 1, then\n   documents = s.get('resource_type', 'id_of_document')\n\n   # AsyncIO the same but remember to await:\n   documents = await s.get('resource_type')\n\nFiltering and including\n-----------------------\n\n.. code-block:: python\n\n   # You need first to specify your filter instance.\n   # - filtering with two criteria (and)\n   filter = Filter(attribute='something', attribute2='something_else')\n   # - filtering some-dict.some-attr == 'something'\n   filter = Filter(some_dict__some_attr='something'))\n\n   # Same thing goes for including.\n   # - including two fields\n   include = Inclusion('related_field', 'other_related_field')\n\n   # Custom syntax for request parameters.\n   # If you have different URL schema for filtering or other GET parameters,\n   # you can implement your own Modifier class (derive it from Modifier and\n   # reimplement appended_query).\n   modifier = Modifier('filter[post]=1&filter[author]=2')\n\n   # All above classes subclass Modifier and can be added to concatenate\n   # parameters\n   modifier_sum = filter + include + modifier\n\n   # Now fetch your document\n   filtered = s.get('resource_type', modifier_sum) # AsyncIO with await\n\n   # To access resources included in document:\n   r1 = document.resources[0]  # first ResourceObject of document.\n   r2 = document.resource      # if there is only 1 resource we can use this\n\nPagination\n----------\n\n.. code-block:: python\n\n   # Pagination links can be accessed via Document object.\n   next_doc = document.links.next.fetch()\n   # AsyncIO\n   next_doc = await document.links.next.fetch()\n\n   # Iteration through results (uses pagination):\n   for r in s.iterate('resource_type'):\n       print(r)\n\n   # AsyncIO:\n   async for r in s.iterate('resource_type'):\n       print(r)\n\nResource attribute and relationship access\n------------------------------------------\n\n.. code-block:: python\n\n   # - attribute access\n   attr1 = r1.some_attr\n   nested_attr = r1.some_dict.some_attr\n   #   Attributes can always also be accessed via __getitem__:\n   nested_attr = r1['some-dict']['some-attr']\n\n   # If there is namespace collision, you can also access attributes via .fields proxy\n   # (both attributes and relationships)\n   attr2 = r1.fields.some_attr\n\n   # - relationship access.\n   #   * Sync, this gives directly ResourceObject\n   rel = r1.some_relation\n   attr3 = r1.some_relation.some_attr  # Relationship attribute can be accessed directly\n\n   #   * AsyncIO, this gives Relationship object instead because we anyway need to\n   #     call asynchronous fetch function.\n   rel = r1.some_relation\n   #     To access ResourceObject you need to first fetch content\n   await r1.some_relation.fetch()\n   #     and then you can access associated resourceobject\n   res = r1.some_relation.resource\n   attr3 = res.some_attr  # Attribute access through ResourceObject\n\n   # If you need to access relatinoship object itself (with sync API), you can do it via\n   # .relationships proxy. For example, if you are interested in links or metadata\n   # provided within relationship, or intend to manipulate relationship.\n   rel_obj = r1.relationships.relation_name\n\nResource updating\n-----------------\n\n.. code-block:: python\n\n   # Updating / patching existing resources\n   r1.some_attr = 'something else'\n   # Patching element in nested json\n   r1.some_dict.some_dict.some_attr = 'something else'\n\n   # change relationships, to-many. Accepts also iterable of ResourceObjects/\n   # ResourceIdentifiers/ResourceTuples\n   r1.comments = ['1', '2']\n   # or if resource type is not known or can have multiple types of resources\n   r1.comments_or_people = [ResourceTuple('1', 'comments'), ResourceTuple('2', 'people')]\n   # or if you want to add some resources you can\n   r1.comments_or_people += [ResourceTuple('1', 'people')]\n   r1.commit()\n\n   # change to-one relationships\n   r1.author = '3'  # accepts also ResourceObjects/ResourceIdentifiers/ResourceTuple\n   # or resource type is not known (via schema etc.)\n   r1.author = ResourceTuple('3', 'people')\n\n   # Committing changes (PATCH request)\n   r1.commit(meta={'some_meta': 'data'})  # Resource committing supports optional meta data\n   # AsyncIO\n   await r1.commit(meta={'some_meta': 'data'})\n\n\nCreating new resources\n----------------------\n\n\n.. code-block:: python\n\n   # Creating new resources. Schema must be given. Accepts dictionary of schema models\n   # (key is model name and value is schema as json-schema.org).\n\n   models_as_jsonschema = {\n       'articles': {'properties': {\n           'title': {'type': 'string'},\n           'author': {'relation': 'to-one', 'resource': ['people']},\n           'comments': {'relation': 'to-many', 'resource': ['comments']},\n       }},\n       'people': {'properties': {\n           'first-name': {'type': 'string'},\n           'last-name': {'type': 'string'},\n           'twitter': {'type': ['null', 'string']},\n       }},\n       'comments': {'properties': {\n           'body': {'type': 'string'},\n        'author': {'relation': 'to-one', 'resource': ['people']}\n    }}\n   }\n   # If you type schema by hand, it could be more convenient to type it as yml in a file\n   # instead\n\n   s = Session('http://localhost:8080/', schema=models_as_jsonschema)\n   a = s.create('articles') # Creates empty ResourceObject of 'articles' type\n   a.title = 'Test title'\n\n   # Validates and performs POST request, and finally updates resource based on server response\n   a.commit(meta={'some_meta': 'data'})\n   # Or with AsyncIO, remember to await\n   await a.commit(meta={'some_meta': 'data'})\n\n   # Commit metadata could be also saved in advance:\n   a.commit_metadata = {'some_meta': 'data'}\n   # You can also commit all changed resources in session by\n   s.commit()\n   # or with AsyncIO\n   await s.commit()\n\n   # Another example of resource creation, setting attributes and relationships & committing:\n   # If you have underscores in your field names, you can pass them in fields keyword argument as\n   # a dictionary:\n   cust1 = s.create_and_commit('articles',\n                               attribute='1',\n                               dict_object__attribute='2',\n                               to_one_relationship='3',\n                               to_many_relationship=['1', '2'],\n                               fields={'some_field_with_underscore': '1'}\n                               )\n\n   # Async:\n   cust1 = await s.create_and_commit('articles',\n                                     attribute='1',\n                                     dict_object__attribute='2',\n                                     to_one_relationship='3',\n                                     to_many_relationship=['1', '2'],\n                                     fields={'some_field_with_underscore': '1'}\n                                     )\n\nDeleting resources\n------------------\n\n.. code-block:: python\n\n    # Delete resource\n    cust1.delete() # Mark to be deleted\n    cust1.commit() # Actually delete\n\n\nCredits\n=======\n\n- Work was supported by Qvantel (http://qvantel.com).\n- Author and package maintainer: Tuomas Airaksinen (https://github.com/tuomas2/).\n\n\nLicense\n=======\n\nCopyright (c) 2017, Qvantel\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n - Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n - Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n - Neither the name of the Qvantel nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL QVANTEL BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nCHANGELOG\n=========\n\n\n0.9.9 (2020-03-12)\n------------------\n\n- Adapt to aiohttp>3.0\n- Workaround a weird bug\n- Fix deprecation warnings\n- Prevent AttributeDict() from modifying its input\n- #24: Fix error handling of server response\n\n\n0.9.8 (2020-02-14)\n------------------\n\n- #25: Fix for fetching resources without attributes\n- Stop following next when there are no more items\n- Fix build\n- Use custom_url logic for all request methods\n- #27: Await close on async sessions\n- Add apk libffi-dev dependency\n- Fix pytest.raise exception validation e.value\n- Added .venv, .vscode, .pytest_cache to .gitignore\n- Add support for extra headers as request_kwargs\n\n\n0.9.7 (2019-02-01)\n------------------\n\n- Support __getitem__ in Meta\n- Handle empty relationship data list\n- Allow returning link to relationship as an iterator\n- Fix handling null one-to-one-relationship\n- Don't explicitly quote filter values\n- Include support\n\n0.9.6 (2017-06-26)\n------------------\n\n - When creating new resources, use default value specified in\n   jsonschema, when available.\n\n\n0.9.5 (2017-06-16)\n------------------\n\n - Change Session.create_and_commit signature similarly as Session.create\n\n0.9.4 (2017-06-16)\n------------------\n\n - Remove ? from filenames (illegal in Windows)\n - Pass event loop aiohttp's ClientSession\n - Return resource from .commit if return status is 202\n - Support underscores in field names in Session.create() through fields keyword argument.\n - Add support for extra arguments such as authentication object\n - AsyncIO support for context manager usage of Session\n\n\n0.9.3 (2017-04-03)\n------------------\n\n - Added aiohttp to install requirements\n\n\n0.9.2 (2017-04-03)\n------------------\n\n - Github release.\n\n\n0.9.1 (2017-03-23)\n------------------\n\n - Fix async content_type checking\n - Use Python 3's new typing.NamedTuple instead of collections.NamedTuple\n - Make included resources available from Document\n - ResourceObject.json property\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qvantel/jsonapi-client", "keywords": "JSONAPI JSON API client", "license": "BSD-3", "maintainer": "", "maintainer_email": "", "name": "jsonapi-client", "package_url": "https://pypi.org/project/jsonapi-client/", "platform": "", "project_url": "https://pypi.org/project/jsonapi-client/", "project_urls": {"Homepage": "https://github.com/qvantel/jsonapi-client"}, "release_url": "https://pypi.org/project/jsonapi-client/0.9.9/", "requires_dist": ["requests", "jsonschema", "aiohttp"], "requires_python": "", "summary": "Comprehensive, yet easy-to-use, pythonic, ORM-like access to JSON API services", "version": "0.9.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/qvantel/jsonapi-client\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/qvantel/jsonapi-client.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/676601c45b81222dae438feeb94fce5577520317/68747470733a2f2f7472617669732d63692e6f72672f7176616e74656c2f6a736f6e6170692d636c69656e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/qvantel/jsonapi-client\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/qvantel/jsonapi-client/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34736e0d5dfc6816fb69cc6a7b67c56db227b2ee/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7176616e74656c2f6a736f6e6170692d636c69656e742f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonapi-client\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/jsonapi-client.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81bb65a558beb79410d16d29d5f01801fdc32baf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e6170692d636c69656e742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/jsonapi-client\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/jsonapi-client.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec71fd2c5322ce0f7f0500cebf5a51dfab0e4981/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a736f6e6170692d636c69656e742e737667\"></a>\n<a href=\"https://github.com/qvantel/jsonapi-client/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/licence-BSD%203--clause-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dd9e3edea91c272bba48371c4382c006c5944c5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e63652d425344253230332d2d636c617573652d626c75652e737667\"></a>\n<div id=\"json-api-client-for-python\">\n<h2>JSON API client for Python</h2>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Package repository: <a href=\"https://github.com/qvantel/jsonapi-client\" rel=\"nofollow\">https://github.com/qvantel/jsonapi-client</a></p>\n<p>This Python (3.6+) library provides easy-to-use, pythonic, ORM-like access to\nJSON API ( <a href=\"http://jsonapi.org\" rel=\"nofollow\">http://jsonapi.org</a> )</p>\n<blockquote>\n<ul>\n<li>Optional asyncio implementation</li>\n<li>Optional model schema definition and validation (=&gt; easy reads even without schema)</li>\n<li>Resource caching within session</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>From Pypi:</p>\n<pre>pip install jsonapi-client\n</pre>\n<p>Or from sources:</p>\n<pre>./setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"client-session\">\n<h4>Client session</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonapi_client</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span><span class=\"p\">,</span> <span class=\"n\">Filter</span><span class=\"p\">,</span> <span class=\"n\">ResourceTuple</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080/'</span><span class=\"p\">)</span>\n<span class=\"c1\"># To start session in async mode</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080/'</span><span class=\"p\">,</span> <span class=\"n\">enable_async</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can also pass extra arguments that are passed directly to requests or aiohttp methods,</span>\n<span class=\"c1\"># such as authentication object</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080/'</span><span class=\"p\">,</span>\n            <span class=\"n\">request_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"o\">=</span><span class=\"n\">HTTPBasicAuth</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># You can also use Session as a context manager. Changes are committed in the end</span>\n<span class=\"c1\"># and session is closed.</span>\n<span class=\"k\">with</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"n\">your</span> <span class=\"n\">code</span>\n\n<span class=\"c1\"># Or with enable_async=True</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">enable_async</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">your</span> <span class=\"n\">code</span>\n\n<span class=\"c1\"># If you are not using context manager, you need to close session manually</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Again, don't forget to await in the AsyncIO mode</span>\n<span class=\"k\">await</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Fetching documents</span>\n<span class=\"n\">documents</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or if you want only 1, then</span>\n<span class=\"n\">documents</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">,</span> <span class=\"s1\">'id_of_document'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># AsyncIO the same but remember to await:</span>\n<span class=\"n\">documents</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"filtering-and-including\">\n<h4>Filtering and including</h4>\n<pre><span class=\"c1\"># You need first to specify your filter instance.</span>\n<span class=\"c1\"># - filtering with two criteria (and)</span>\n<span class=\"nb\">filter</span> <span class=\"o\">=</span> <span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"n\">attribute2</span><span class=\"o\">=</span><span class=\"s1\">'something_else'</span><span class=\"p\">)</span>\n<span class=\"c1\"># - filtering some-dict.some-attr == 'something'</span>\n<span class=\"nb\">filter</span> <span class=\"o\">=</span> <span class=\"n\">Filter</span><span class=\"p\">(</span><span class=\"n\">some_dict__some_attr</span><span class=\"o\">=</span><span class=\"s1\">'something'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Same thing goes for including.</span>\n<span class=\"c1\"># - including two fields</span>\n<span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"n\">Inclusion</span><span class=\"p\">(</span><span class=\"s1\">'related_field'</span><span class=\"p\">,</span> <span class=\"s1\">'other_related_field'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Custom syntax for request parameters.</span>\n<span class=\"c1\"># If you have different URL schema for filtering or other GET parameters,</span>\n<span class=\"c1\"># you can implement your own Modifier class (derive it from Modifier and</span>\n<span class=\"c1\"># reimplement appended_query).</span>\n<span class=\"n\">modifier</span> <span class=\"o\">=</span> <span class=\"n\">Modifier</span><span class=\"p\">(</span><span class=\"s1\">'filter[post]=1&amp;filter[author]=2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All above classes subclass Modifier and can be added to concatenate</span>\n<span class=\"c1\"># parameters</span>\n<span class=\"n\">modifier_sum</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span> <span class=\"o\">+</span> <span class=\"n\">include</span> <span class=\"o\">+</span> <span class=\"n\">modifier</span>\n\n<span class=\"c1\"># Now fetch your document</span>\n<span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">,</span> <span class=\"n\">modifier_sum</span><span class=\"p\">)</span> <span class=\"c1\"># AsyncIO with await</span>\n\n<span class=\"c1\"># To access resources included in document:</span>\n<span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># first ResourceObject of document.</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">resource</span>      <span class=\"c1\"># if there is only 1 resource we can use this</span>\n</pre>\n</div>\n<div id=\"pagination\">\n<h4>Pagination</h4>\n<pre><span class=\"c1\"># Pagination links can be accessed via Document object.</span>\n<span class=\"n\">next_doc</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">links</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\"># AsyncIO</span>\n<span class=\"n\">next_doc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">links</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Iteration through results (uses pagination):</span>\n<span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># AsyncIO:</span>\n<span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"s1\">'resource_type'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"resource-attribute-and-relationship-access\">\n<h4>Resource attribute and relationship access</h4>\n<pre><span class=\"c1\"># - attribute access</span>\n<span class=\"n\">attr1</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_attr</span>\n<span class=\"n\">nested_attr</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_dict</span><span class=\"o\">.</span><span class=\"n\">some_attr</span>\n<span class=\"c1\">#   Attributes can always also be accessed via __getitem__:</span>\n<span class=\"n\">nested_attr</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"p\">[</span><span class=\"s1\">'some-dict'</span><span class=\"p\">][</span><span class=\"s1\">'some-attr'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># If there is namespace collision, you can also access attributes via .fields proxy</span>\n<span class=\"c1\"># (both attributes and relationships)</span>\n<span class=\"n\">attr2</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">some_attr</span>\n\n<span class=\"c1\"># - relationship access.</span>\n<span class=\"c1\">#   * Sync, this gives directly ResourceObject</span>\n<span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_relation</span>\n<span class=\"n\">attr3</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_relation</span><span class=\"o\">.</span><span class=\"n\">some_attr</span>  <span class=\"c1\"># Relationship attribute can be accessed directly</span>\n\n<span class=\"c1\">#   * AsyncIO, this gives Relationship object instead because we anyway need to</span>\n<span class=\"c1\">#     call asynchronous fetch function.</span>\n<span class=\"n\">rel</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_relation</span>\n<span class=\"c1\">#     To access ResourceObject you need to first fetch content</span>\n<span class=\"k\">await</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_relation</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n<span class=\"c1\">#     and then you can access associated resourceobject</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_relation</span><span class=\"o\">.</span><span class=\"n\">resource</span>\n<span class=\"n\">attr3</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">some_attr</span>  <span class=\"c1\"># Attribute access through ResourceObject</span>\n\n<span class=\"c1\"># If you need to access relatinoship object itself (with sync API), you can do it via</span>\n<span class=\"c1\"># .relationships proxy. For example, if you are interested in links or metadata</span>\n<span class=\"c1\"># provided within relationship, or intend to manipulate relationship.</span>\n<span class=\"n\">rel_obj</span> <span class=\"o\">=</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">relationships</span><span class=\"o\">.</span><span class=\"n\">relation_name</span>\n</pre>\n</div>\n<div id=\"resource-updating\">\n<h4>Resource updating</h4>\n<pre><span class=\"c1\"># Updating / patching existing resources</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_attr</span> <span class=\"o\">=</span> <span class=\"s1\">'something else'</span>\n<span class=\"c1\"># Patching element in nested json</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">some_dict</span><span class=\"o\">.</span><span class=\"n\">some_dict</span><span class=\"o\">.</span><span class=\"n\">some_attr</span> <span class=\"o\">=</span> <span class=\"s1\">'something else'</span>\n\n<span class=\"c1\"># change relationships, to-many. Accepts also iterable of ResourceObjects/</span>\n<span class=\"c1\"># ResourceIdentifiers/ResourceTuples</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">]</span>\n<span class=\"c1\"># or if resource type is not known or can have multiple types of resources</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">comments_or_people</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ResourceTuple</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'comments'</span><span class=\"p\">),</span> <span class=\"n\">ResourceTuple</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'people'</span><span class=\"p\">)]</span>\n<span class=\"c1\"># or if you want to add some resources you can</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">comments_or_people</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">ResourceTuple</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'people'</span><span class=\"p\">)]</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># change to-one relationships</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s1\">'3'</span>  <span class=\"c1\"># accepts also ResourceObjects/ResourceIdentifiers/ResourceTuple</span>\n<span class=\"c1\"># or resource type is not known (via schema etc.)</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">ResourceTuple</span><span class=\"p\">(</span><span class=\"s1\">'3'</span><span class=\"p\">,</span> <span class=\"s1\">'people'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Committing changes (PATCH request)</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_meta'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">})</span>  <span class=\"c1\"># Resource committing supports optional meta data</span>\n<span class=\"c1\"># AsyncIO</span>\n<span class=\"k\">await</span> <span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_meta'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"creating-new-resources\">\n<h4>Creating new resources</h4>\n<pre><span class=\"c1\"># Creating new resources. Schema must be given. Accepts dictionary of schema models</span>\n<span class=\"c1\"># (key is model name and value is schema as json-schema.org).</span>\n\n<span class=\"n\">models_as_jsonschema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'articles'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'relation'</span><span class=\"p\">:</span> <span class=\"s1\">'to-one'</span><span class=\"p\">,</span> <span class=\"s1\">'resource'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'people'</span><span class=\"p\">]},</span>\n        <span class=\"s1\">'comments'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'relation'</span><span class=\"p\">:</span> <span class=\"s1\">'to-many'</span><span class=\"p\">,</span> <span class=\"s1\">'resource'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'comments'</span><span class=\"p\">]},</span>\n    <span class=\"p\">}},</span>\n    <span class=\"s1\">'people'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first-name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'last-name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'twitter'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'null'</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">]},</span>\n    <span class=\"p\">}},</span>\n    <span class=\"s1\">'comments'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n     <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'relation'</span><span class=\"p\">:</span> <span class=\"s1\">'to-one'</span><span class=\"p\">,</span> <span class=\"s1\">'resource'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'people'</span><span class=\"p\">]}</span>\n <span class=\"p\">}}</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># If you type schema by hand, it could be more convenient to type it as yml in a file</span>\n<span class=\"c1\"># instead</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080/'</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">models_as_jsonschema</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">)</span> <span class=\"c1\"># Creates empty ResourceObject of 'articles' type</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Test title'</span>\n\n<span class=\"c1\"># Validates and performs POST request, and finally updates resource based on server response</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_meta'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">})</span>\n<span class=\"c1\"># Or with AsyncIO, remember to await</span>\n<span class=\"k\">await</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_meta'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Commit metadata could be also saved in advance:</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">commit_metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'some_meta'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">}</span>\n<span class=\"c1\"># You can also commit all changed resources in session by</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"c1\"># or with AsyncIO</span>\n<span class=\"k\">await</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Another example of resource creation, setting attributes and relationships &amp; committing:</span>\n<span class=\"c1\"># If you have underscores in your field names, you can pass them in fields keyword argument as</span>\n<span class=\"c1\"># a dictionary:</span>\n<span class=\"n\">cust1</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">create_and_commit</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">,</span>\n                            <span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span>\n                            <span class=\"n\">dict_object__attribute</span><span class=\"o\">=</span><span class=\"s1\">'2'</span><span class=\"p\">,</span>\n                            <span class=\"n\">to_one_relationship</span><span class=\"o\">=</span><span class=\"s1\">'3'</span><span class=\"p\">,</span>\n                            <span class=\"n\">to_many_relationship</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">],</span>\n                            <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_field_with_underscore'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">}</span>\n                            <span class=\"p\">)</span>\n\n<span class=\"c1\"># Async:</span>\n<span class=\"n\">cust1</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">create_and_commit</span><span class=\"p\">(</span><span class=\"s1\">'articles'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">dict_object__attribute</span><span class=\"o\">=</span><span class=\"s1\">'2'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">to_one_relationship</span><span class=\"o\">=</span><span class=\"s1\">'3'</span><span class=\"p\">,</span>\n                                  <span class=\"n\">to_many_relationship</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">],</span>\n                                  <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'some_field_with_underscore'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">}</span>\n                                  <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"deleting-resources\">\n<h4>Deleting resources</h4>\n<pre><span class=\"c1\"># Delete resource</span>\n<span class=\"n\">cust1</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span> <span class=\"c1\"># Mark to be deleted</span>\n<span class=\"n\">cust1</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span> <span class=\"c1\"># Actually delete</span>\n</pre>\n</div>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li>Work was supported by Qvantel (<a href=\"http://qvantel.com\" rel=\"nofollow\">http://qvantel.com</a>).</li>\n<li>Author and package maintainer: Tuomas Airaksinen (<a href=\"https://github.com/tuomas2/\" rel=\"nofollow\">https://github.com/tuomas2/</a>).</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Copyright (c) 2017, Qvantel</p>\n<p>All rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n<blockquote>\n<ul>\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</li>\n<li>Neither the name of the Qvantel nor the\nnames of its contributors may be used to endorse or promote products\nderived from this software without specific prior written permission.</li>\n</ul>\n</blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS IS\u201d AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL QVANTEL BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n<div id=\"changelog\">\n<h3>CHANGELOG</h3>\n<div id=\"id1\">\n<h4>0.9.9 (2020-03-12)</h4>\n<ul>\n<li>Adapt to aiohttp&gt;3.0</li>\n<li>Workaround a weird bug</li>\n<li>Fix deprecation warnings</li>\n<li>Prevent AttributeDict() from modifying its input</li>\n<li>#24: Fix error handling of server response</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>0.9.8 (2020-02-14)</h4>\n<ul>\n<li>#25: Fix for fetching resources without attributes</li>\n<li>Stop following next when there are no more items</li>\n<li>Fix build</li>\n<li>Use custom_url logic for all request methods</li>\n<li>#27: Await close on async sessions</li>\n<li>Add apk libffi-dev dependency</li>\n<li>Fix pytest.raise exception validation e.value</li>\n<li>Added .venv, .vscode, .pytest_cache to .gitignore</li>\n<li>Add support for extra headers as request_kwargs</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>0.9.7 (2019-02-01)</h4>\n<ul>\n<li>Support __getitem__ in Meta</li>\n<li>Handle empty relationship data list</li>\n<li>Allow returning link to relationship as an iterator</li>\n<li>Fix handling null one-to-one-relationship</li>\n<li>Don\u2019t explicitly quote filter values</li>\n<li>Include support</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>0.9.6 (2017-06-26)</h4>\n<blockquote>\n<ul>\n<li>When creating new resources, use default value specified in\njsonschema, when available.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h4>0.9.5 (2017-06-16)</h4>\n<blockquote>\n<ul>\n<li>Change Session.create_and_commit signature similarly as Session.create</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h4>0.9.4 (2017-06-16)</h4>\n<blockquote>\n<ul>\n<li>Remove ? from filenames (illegal in Windows)</li>\n<li>Pass event loop aiohttp\u2019s ClientSession</li>\n<li>Return resource from .commit if return status is 202</li>\n<li>Support underscores in field names in Session.create() through fields keyword argument.</li>\n<li>Add support for extra arguments such as authentication object</li>\n<li>AsyncIO support for context manager usage of Session</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h4>0.9.3 (2017-04-03)</h4>\n<blockquote>\n<ul>\n<li>Added aiohttp to install requirements</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id8\">\n<h4>0.9.2 (2017-04-03)</h4>\n<blockquote>\n<ul>\n<li>Github release.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h4>0.9.1 (2017-03-23)</h4>\n<blockquote>\n<ul>\n<li>Fix async content_type checking</li>\n<li>Use Python 3\u2019s new typing.NamedTuple instead of collections.NamedTuple</li>\n<li>Make included resources available from Document</li>\n<li>ResourceObject.json property</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6798532, "releases": {"0.9.2": [{"comment_text": "", "digests": {"md5": "759d5501191fbee0a9f995e3b1ac4429", "sha256": "179042890d0e0337d87d3df7dbd9ad23ffd95530ccc3e07f0632f20e2b3bc550"}, "downloads": -1, "filename": "jsonapi_client-0.9.2.tar.gz", "has_sig": false, "md5_digest": "759d5501191fbee0a9f995e3b1ac4429", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32553, "upload_time": "2017-04-03T11:34:38", "upload_time_iso_8601": "2017-04-03T11:34:38.907550Z", "url": "https://files.pythonhosted.org/packages/15/82/4111867d5a23b673b04714ef579d0064c76e214e6ec0239235bba4513340/jsonapi_client-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "697274a45f6489421246855acf28f720", "sha256": "8add02356e032798c29bf9ab29da252164d23bd1c6b20c42b567f5f1d2ebeed9"}, "downloads": -1, "filename": "jsonapi_client-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "697274a45f6489421246855acf28f720", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35648, "upload_time": "2017-04-04T09:18:54", "upload_time_iso_8601": "2017-04-04T09:18:54.283042Z", "url": "https://files.pythonhosted.org/packages/92/04/a85a25636e2c9a9f762c67b4c705f9ba726a6e913cd4b0ac80d6f9043151/jsonapi_client-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fceee02284d7e158eb3bff30a868add", "sha256": "9441d1c135593e5a3657eff0bd5548d0707a7fc2c584c900e0b45b3b301f2f67"}, "downloads": -1, "filename": "jsonapi_client-0.9.3.tar.gz", "has_sig": false, "md5_digest": "2fceee02284d7e158eb3bff30a868add", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32848, "upload_time": "2017-04-04T09:00:44", "upload_time_iso_8601": "2017-04-04T09:00:44.839278Z", "url": "https://files.pythonhosted.org/packages/cd/67/158edecbf314dbbffb15e3b1f9f4131e2680d2c82d96cc5e781a65a6d348/jsonapi_client-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "fd55a6e13adf2304f6773ecb49a1f3ba", "sha256": "2fe10034d6ecc1296d44798036c73a1f6537e2c854d77c6553a1493ff4246a36"}, "downloads": -1, "filename": "jsonapi_client-0.9.4.tar.gz", "has_sig": false, "md5_digest": "fd55a6e13adf2304f6773ecb49a1f3ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33894, "upload_time": "2017-06-16T07:55:34", "upload_time_iso_8601": "2017-06-16T07:55:34.743772Z", "url": "https://files.pythonhosted.org/packages/dd/d8/38563c66845aecf43ea8bb2c1462eaa84facfc5f25485275387c2e847c89/jsonapi_client-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "527ab2b3d280a01d2b09a85eca0e0edf", "sha256": "7374e24681ddb48870f0abf838136a6b87e53bc0b953cb32962e5d50cb469750"}, "downloads": -1, "filename": "jsonapi_client-0.9.5.tar.gz", "has_sig": false, "md5_digest": "527ab2b3d280a01d2b09a85eca0e0edf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33929, "upload_time": "2017-06-16T09:35:00", "upload_time_iso_8601": "2017-06-16T09:35:00.597521Z", "url": "https://files.pythonhosted.org/packages/fd/07/39c0d54ea9952434a71c99f97c8d2ecbb6c7853cdc65ca7abad12ed9979b/jsonapi_client-0.9.5.tar.gz", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "388f9d817a496a5fd6a3feb3e99a7428", "sha256": "c680e6ba43f0c48ff8dd824eef35af49602a358532311daef943222aecf09dbe"}, "downloads": -1, "filename": "jsonapi_client-0.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "388f9d817a496a5fd6a3feb3e99a7428", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36563, "upload_time": "2017-06-26T14:26:14", "upload_time_iso_8601": "2017-06-26T14:26:14.609826Z", "url": "https://files.pythonhosted.org/packages/5c/64/2ae754d0afe358a75d16999aeb7741a6134192fffa0c8b60b4855acd2e80/jsonapi_client-0.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6c2d4ae128b5f6ab3c2439b0745b06e", "sha256": "b0039367b09238cccdff38e02250c81de19a8cd8d112da56543b9effc4770758"}, "downloads": -1, "filename": "jsonapi_client-0.9.6.tar.gz", "has_sig": false, "md5_digest": "d6c2d4ae128b5f6ab3c2439b0745b06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34135, "upload_time": "2017-06-26T14:26:16", "upload_time_iso_8601": "2017-06-26T14:26:16.078954Z", "url": "https://files.pythonhosted.org/packages/86/89/54c0eddd8b430c1ca6476a6e560093eb2d3fb2058dac36ccb7d964305878/jsonapi_client-0.9.6.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "00b3d0c0ff2f22de7690c69ebeb3d76c", "sha256": "3aae9ce3a0bb6fb439d2c38e5fb8cf5ef2c5fd5ec8b6948a4d8e3b670ebc39aa"}, "downloads": -1, "filename": "jsonapi_client-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "00b3d0c0ff2f22de7690c69ebeb3d76c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37590, "upload_time": "2019-02-01T14:22:07", "upload_time_iso_8601": "2019-02-01T14:22:07.754262Z", "url": "https://files.pythonhosted.org/packages/8c/7e/878cc58f8acc6c9ab923df471d6400f7a0fe10a33b779311d50b605f9f12/jsonapi_client-0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ca1f64ef5b6858e5cfbb6636a3069b7", "sha256": "484276d0c76dfe7dcc7397cd4fde5780b740d27a9fc8812b9e2b6eac1357e8e3"}, "downloads": -1, "filename": "jsonapi_client-0.9.7.tar.gz", "has_sig": false, "md5_digest": "7ca1f64ef5b6858e5cfbb6636a3069b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38598, "upload_time": "2019-02-01T14:22:10", "upload_time_iso_8601": "2019-02-01T14:22:10.951156Z", "url": "https://files.pythonhosted.org/packages/e7/fd/5c8cca0ccc0ac37d36574400477aaf791fbeb8072e3614b27590671e318d/jsonapi_client-0.9.7.tar.gz", "yanked": false}], "0.9.7.dev0": [{"comment_text": "", "digests": {"md5": "25060a8747f73212dfa23574bf5f97c1", "sha256": "bca5b7d27f6567563eeab165f5d1597f26a89e2c62db33915e0db6564645bbc0"}, "downloads": -1, "filename": "jsonapi_client-0.9.7.dev0-py3.6.egg", "has_sig": false, "md5_digest": "25060a8747f73212dfa23574bf5f97c1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 73077, "upload_time": "2019-02-01T14:22:09", "upload_time_iso_8601": "2019-02-01T14:22:09.695536Z", "url": "https://files.pythonhosted.org/packages/2e/e2/07116d0a3946204e95d907c0369df9a01cb119ad7e16048f3a02cbc32277/jsonapi_client-0.9.7.dev0-py3.6.egg", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "3dbc52c2d09fade672f2c80990a90e6c", "sha256": "f3f1ca75d15df3e85f23555ebb9b4aa7d929c734edbffda9b2ada9bb19fb905d"}, "downloads": -1, "filename": "jsonapi_client-0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "3dbc52c2d09fade672f2c80990a90e6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33749, "upload_time": "2020-02-14T21:01:56", "upload_time_iso_8601": "2020-02-14T21:01:56.029418Z", "url": "https://files.pythonhosted.org/packages/50/41/b00480827c26084f334d34c583731a14ae6a2fa33720aee25c5f704043ec/jsonapi_client-0.9.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0800037ff0389802037b4ce2c62d69e3", "sha256": "65ed8305ba72eda6cd19f7530df4006713cb005c705cf0731c0eab85e7fee01a"}, "downloads": -1, "filename": "jsonapi_client-0.9.8.tar.gz", "has_sig": false, "md5_digest": "0800037ff0389802037b4ce2c62d69e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40039, "upload_time": "2020-02-14T21:01:58", "upload_time_iso_8601": "2020-02-14T21:01:58.066785Z", "url": "https://files.pythonhosted.org/packages/36/6d/7965514b64098718fecb232f241fc87edd6a0aba8ef274188febe441811f/jsonapi_client-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "4530b42eefcb04fc1ae88e08e8bcd885", "sha256": "6d9aa3d6f0146c03b2a169cec8554c6be268f750d89c32a0f43cf85a4105912f"}, "downloads": -1, "filename": "jsonapi_client-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4530b42eefcb04fc1ae88e08e8bcd885", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33989, "upload_time": "2020-03-12T10:24:17", "upload_time_iso_8601": "2020-03-12T10:24:17.431281Z", "url": "https://files.pythonhosted.org/packages/55/a5/8dc66076d41bad206914326dd18212e3815ceeed201cbd04b0f1244be037/jsonapi_client-0.9.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be0a4f1b400a403b037146a304b291c5", "sha256": "348bb9efb5f98421f865f8258dae5aa781552a5910351ff578f084292e659cd1"}, "downloads": -1, "filename": "jsonapi_client-0.9.9.tar.gz", "has_sig": false, "md5_digest": "be0a4f1b400a403b037146a304b291c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40882, "upload_time": "2020-03-12T10:24:19", "upload_time_iso_8601": "2020-03-12T10:24:19.174777Z", "url": "https://files.pythonhosted.org/packages/8e/b0/c0ff1c3c9716c84bdf32e676ea836e8db9a3c137fbefb2cf228fb7c4de1c/jsonapi_client-0.9.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4530b42eefcb04fc1ae88e08e8bcd885", "sha256": "6d9aa3d6f0146c03b2a169cec8554c6be268f750d89c32a0f43cf85a4105912f"}, "downloads": -1, "filename": "jsonapi_client-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4530b42eefcb04fc1ae88e08e8bcd885", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33989, "upload_time": "2020-03-12T10:24:17", "upload_time_iso_8601": "2020-03-12T10:24:17.431281Z", "url": "https://files.pythonhosted.org/packages/55/a5/8dc66076d41bad206914326dd18212e3815ceeed201cbd04b0f1244be037/jsonapi_client-0.9.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be0a4f1b400a403b037146a304b291c5", "sha256": "348bb9efb5f98421f865f8258dae5aa781552a5910351ff578f084292e659cd1"}, "downloads": -1, "filename": "jsonapi_client-0.9.9.tar.gz", "has_sig": false, "md5_digest": "be0a4f1b400a403b037146a304b291c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40882, "upload_time": "2020-03-12T10:24:19", "upload_time_iso_8601": "2020-03-12T10:24:19.174777Z", "url": "https://files.pythonhosted.org/packages/8e/b0/c0ff1c3c9716c84bdf32e676ea836e8db9a3c137fbefb2cf228fb7c4de1c/jsonapi_client-0.9.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:54 2020"}