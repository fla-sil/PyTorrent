{"info": {"author": "David Read", "author_email": "david.read@hackneyworkshop.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3"], "description": ".. You should enable this project on travis-ci.org and coveralls.io to make\n   these badges work. The necessary Travis and Coverage config files have been\n   generated for you.\n\n.. image:: https://travis-ci.org/davidread/ckanext-subscribe.svg?branch=master\n    :target: https://travis-ci.org/davidread/ckanext-subscribe\n\n.. image:: https://coveralls.io/repos/github/davidread/ckanext-subscribe/badge.svg?branch=master\n  :target: https://coveralls.io/github/davidread/ckanext-subscribe?branch=master\n\n.. image:: https://img.shields.io/pypi/v/ckanext-subscribe.svg\n    :target: https://pypi.org/project/ckanext-subscribe/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/ckanext-subscribe.svg\n    :target: https://pypi.org/project/ckanext-subscribe/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/status/ckanext-subscribe.svg\n    :target: https://pypi.org/project/ckanext-subscribe/\n    :alt: Development Status\n\n.. image:: https://img.shields.io/pypi/l/ckanext-subscribe.svg\n    :target: https://pypi.org/project/ckanext-subscribe/\n    :alt: License\n\n=================\nckanext-subscribe\n=================\n\nCKAN extension that allows users to subscribe to dataset/organization/group\nupdates WITHOUT requiring them to login.\n\nThis feature is complementary to CKAN's existing \"Follow\" feature, which allows\nlogged in users to subscribe to get update emails. Log-in can be a barrier to\ncasual interest in say a handful of datasets. Generating and storing a password\nis a burden on the user, and for casual use just using temporary email links,\nas in this extension, is more appropriate.\n\n.. image:: doc/sign-up.png\n\nMore screenshots: https://github.com/davidread/ckanext-subscribe/tree/master/doc\n\n------------\nRequirements\n------------\n\nCompatibility with core CKAN versions:\n\n=============== =============\nCKAN version    Compatibility\n=============== =============\n2.6 and earlier no\n2.7             yes\n2.8             yes\n2.9             not yet\n=============== =============\n\n------------\nInstallation\n------------\n\n.. Add any additional install steps to the list below.\n   For example installing any non-Python dependencies or adding any required\n   config settings.\n\nTo install ckanext-subscribe:\n\n1. Activate your CKAN virtual environment, for example::\n\n     . /usr/lib/ckan/default/bin/activate\n\n2. Install the ckanext-subscribe Python package into your virtual environment::\n\n     pip install ckanext-subscribe\n\n3. Add ``subscribe`` to the ``ckan.plugins`` setting in your CKAN\n   configuration file (by default the config file is located at\n   ``/etc/ckan/default/production.ini``).\n\n4. Make sure that ``ckan.site_url`` is set correctly in the ``[app:main]``\n   section of your CKAN configuration file. This is used to generate links in\n   the bodies of the notification emails. For example::\n\n    ckan.site_url = https://example.com\n\n5. Make sure that ``smtp.mail_from`` is set correctly in the ``[app:main]``\n   section of your CKAN configuration file. This is the email address that\n   CKAN's email notifications will appear to come from. For example::\n\n    smtp.mail_from = info@example.com\n\n   This is combined with your ``ckan.site_title`` to form the ``From:`` header\n   of the email that are sent, for example::\n\n    From: Sunnyville Open Data <info@example.com>\n\n   If you would like to use an alternate reply address, such as a \"no-reply\"\n   address, set ``smtp.reply_to`` in the ``[app:main]``\n   section of your CKAN configuration file. For example::\n\n    smtp.reply_to = noreply@example.com\n\n6. If you do not have an SMTP server running locally on the machine that hosts\n   your CKAN instance, you can change the ``email-settings`` to send email via\n   an external SMTP server. For example, these settings in the ``[app:main]``\n   section of your configuration file will send emails using a gmail account\n   (not recommended for production websites!)::\n\n    smtp.server = smtp.gmail.com:587\n    smtp.starttls = True\n    smtp.user = your_username@gmail.com\n    smtp.password = your_gmail_password\n    smtp.mail_from = your_username@gmail.com\n\n7. Initialize the subscribe tables in the database::\n\n     paster --plugin=ckanext-subscribe subscribe initdb\n\n8. Restart CKAN. For example if you've deployed CKAN with Apache on Ubuntu::\n\n     sudo service apache2 reload\n\n9. You need to run the 'send-any-notifications' command regularly. You can see\n   it running on the command-line::\n\n     paster --plugin=ckanext-subscribe subscribe send-any-notifications -c /etc/ckan/default/production.ini\n\n   However instead you'll probably want a cron job setup to run it every minute\n   or so. We're going to edit the cron table. On a development machine, just do\n   this for your user::\n\n     crontab -e\n\n   Or a production machine use the 'ckan' user, instead of checking for notifications on the\n   command-line, create CRON job. To do so, edit the cron table with the\n   following command (it may ask you to choose an editor)::\n\n     sudo crontab -e -u ckan\n\n   Paste this line into your crontab, again replacing the paths to paster and the ini file with yours::\n\n     # m h  dom mon dow   command\n       * *  *   *   *     /usr/lib/ckan/default/bin/paster --plugin=ckanext-subscribe subscribe send-any-notifications --config=/etc/ckan/default/production.ini\n\n   This particular example will check for notifications every minute.\n\n   Also in this cron you will likely see it also running a paster command for\n   `/api/action/send_email_notifications`. This is similar but separate\n   functionality, that core CKAN uses to send emails to users that have created\n   user accounts e.g. for the 'follower' functionality. There's more about this\n   here: https://docs.ckan.org/en/2.8/maintaining/email-notifications.html\n\n---------------\nConfig settings\n---------------\n\n::\n\n  # Email notifications older than this time period will not be sent.\n  # So, after a pause in the sending of emails, when it restarts, it will not\n  # notify about activity which is:\n  # * older than this period, for immediate subscriptions\n  # * older than this period + 1 day, for daily subscriptions\n  # * older than this period + 1 week, for weekly subscriptions\n  # Accepted formats: \u20182 days\u2019, \u201814 days\u2019, \u20184:35:00\u2019 (hours, minutes, seconds),\n  #                  \u20187 days, 3:23:34\u2019, etc.\n  # See also: https://docs.ckan.org/en/2.8/maintaining/configuration.html#ckan-email-notifications-since\n  # (optional, default: \u20182 days\u2019)\n  ckan.email_notifications_since = 24:00:00\n\n  # The time that daily and weekly notification subscriptions are sent (UTC\n  # timezone)\n  ckanext.subscribe.daily_and_weekly_notification_time = 09:00\n\n  # The day of the week that weekly notification subscriptions are sent\n  ckanext.subscribe.weekly_notification_day = friday\n\n\n---------------\nTroubleshooting\n---------------\n\n**Notification emails not being sent**\n\n1. Check your cron schedule is working::\n\n     tail -f /var/log/syslog | grep subscribe\n\n   You should see messages every minute::\n\n     Jan 10 15:24:01 ip-172-30-3-71 CRON[29231]: (ubuntu) CMD (/usr/lib/ckan/default/bin/paster --plugin=ckanext-subscribe subscribe run --config=/etc/ckan/default/production.ini)\n\n2. Create a test activity for a dataset/group/org you are subscribed to::\n\n     paster --plugin=ckanext-subscribe subscribe create-test-activity mydataset --config=/etc/ckan/default/production.ini\n\n   The log of the cron-activated paster command itself is not currently stored anywhere, so it's best to test it on the commandline::\n\n     paster --plugin=ckanext-subscribe subscribe send-any-notifications --config=/etc/ckan/default/production.ini\n\n   You should see emails being sent to subscribers of that dataset::\n\n     2020-01-06 16:30:40,591 DEBUG [ckanext.subscribe.notification] send_any_immediate_notifications\n     2020-01-06 16:30:40,628 DEBUG [ckanext.subscribe.notification] sending 1 emails (immediate frequency)\n     2020-01-06 16:30:42,116 INFO  [ckanext.subscribe.mailer] Sent email to david.read@hackneyworkshop.com\n\n3. Clean up all test activity afterwards::\n\n     paster --plugin=ckanext-subscribe subscribe delete-test-activity --config=/etc/ckan/default/production.ini\n\n\n**NameError: global name 'Subscription' is not defined**\n\nYou need to initialize the subscribe tables in the database.  See\n'Installation' section above to do this.\n\n\n**KeyError: \"Action 'subscribe_signup' not found\"**\n\nYou need to enable the `subscribe` plugin in your CKAN config. See\n'Installation' section above to do this.\n\n\n**ProgrammingError: (ProgrammingError) relation \"subscription\" does not exist**\n\nYou're running the tests with `--reset-db` and this extension doesn't work with\nthat. Instead, if you need to wipe the tables before running tests, do it this\nway::\n\n    sudo -u postgres psql ckan_test -c 'drop table if exists subscription; drop table if exists subscribe_login_code; drop table if exists subscribe;'\n\nor simply::\n\n    sudo -u postgres dropdb ckan_test\n    sudo -u postgres createdb -O ckan_default ckan_test -E utf-8\n    paster --plugin=ckan db init -c ../ckan/test-core.ini\n\n\n----------------------\nDeveloper installation\n----------------------\n\nTo install ckanext-subscribe for development, activate your CKAN virtualenv and\ndo::\n\n    git clone https://github.com/davidread/ckanext-subscribe.git\n    cd ckanext-subscribe\n    python setup.py develop\n    pip install -r dev-requirements.txt\n\nNow continue Installation steps from step 3\n\n\n-----\nTests\n-----\n\nTo run the tests, do::\n\n    nosetests --nologcapture --with-pylons=test.ini\n\nTo run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (``pip install coverage``) then run::\n\n    nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.subscribe --cover-inclusive --cover-erase --cover-tests\n\n\n--------------------------------------------\nReleasing a new version of ckanext-subscribe\n--------------------------------------------\n\nckanext-subscribe should be available on PyPI as https://pypi.org/project/ckanext-subscribe.\nTo publish a new version to PyPI follow these steps:\n\n1. Update the version number in the ``setup.py`` file.\n   See `PEP 440 <http://legacy.python.org/dev/peps/pep-0440/#public-version-identifiers>`_\n   for how to choose version numbers.\n\n2. Make sure you have the latest version of necessary packages::\n\n       pip install --upgrade setuptools wheel twine\n\n3. Create a source and binary distributions of the new version::\n\n       python setup.py sdist bdist_wheel && twine check dist/*\n\n   Fix any errors you get.\n\n4. Upload the source distribution to PyPI::\n\n       twine upload dist/*\n\n5. Commit any outstanding changes::\n\n       git commit -a\n       git push\n\n6. Tag the new release of the project on GitHub with the version number from\n   the ``setup.py`` file. For example if the version number in ``setup.py`` is\n   0.0.1 then do::\n\n       git tag 0.0.1\n       git push --tags\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davidread/ckanext-subscribe", "keywords": "CKAN email subscription notifications", "license": "AGPL", "maintainer": "", "maintainer_email": "", "name": "ckanext-subscribe", "package_url": "https://pypi.org/project/ckanext-subscribe/", "platform": "", "project_url": "https://pypi.org/project/ckanext-subscribe/", "project_urls": {"Homepage": "https://github.com/davidread/ckanext-subscribe"}, "release_url": "https://pypi.org/project/ckanext-subscribe/1.0.1/", "requires_dist": ["enum34"], "requires_python": "", "summary": "CKAN extension that allows users to subscribe to updates WITHOUT requiring loginn", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/davidread/ckanext-subscribe\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/davidread/ckanext-subscribe.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bace94ec7d2e18943f3ef95f0509c15b25e6ba59/68747470733a2f2f7472617669732d63692e6f72672f6461766964726561642f636b616e6578742d7375627363726962652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/davidread/ckanext-subscribe?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/davidread/ckanext-subscribe/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92b4b5a00f8ec47f21d569c09e8ebedd43b6fa53/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6461766964726561642f636b616e6578742d7375627363726962652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/ckanext-subscribe/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f26b9556ffb4b4a9de829002f5072443188c085d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636b616e6578742d7375627363726962652e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-subscribe/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e13c7e3fc74d6162b6fc5e9f68206d366b4b8ae4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636b616e6578742d7375627363726962652e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-subscribe/\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f8e42c4da6e6e5015fd7cd217b89670beff6bbb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f636b616e6578742d7375627363726962652e737667\"></a>\n<a href=\"https://pypi.org/project/ckanext-subscribe/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f58f60346c22db0ae73ef0ef3e4a864fcd95ea48/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636b616e6578742d7375627363726962652e737667\"></a>\n<div id=\"ckanext-subscribe\">\n<h2>ckanext-subscribe</h2>\n<p>CKAN extension that allows users to subscribe to dataset/organization/group\nupdates WITHOUT requiring them to login.</p>\n<p>This feature is complementary to CKAN\u2019s existing \u201cFollow\u201d feature, which allows\nlogged in users to subscribe to get update emails. Log-in can be a barrier to\ncasual interest in say a handful of datasets. Generating and storing a password\nis a burden on the user, and for casual use just using temporary email links,\nas in this extension, is more appropriate.</p>\n<img alt=\"doc/sign-up.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e996bcb48b794290bfbc566e73daf5b666fb41e/646f632f7369676e2d75702e706e67\">\n<p>More screenshots: <a href=\"https://github.com/davidread/ckanext-subscribe/tree/master/doc\" rel=\"nofollow\">https://github.com/davidread/ckanext-subscribe/tree/master/doc</a></p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Compatibility with core CKAN versions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>CKAN version</th>\n<th>Compatibility</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>2.6 and earlier</td>\n<td>no</td>\n</tr>\n<tr><td>2.7</td>\n<td>yes</td>\n</tr>\n<tr><td>2.8</td>\n<td>yes</td>\n</tr>\n<tr><td>2.9</td>\n<td>not yet</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install ckanext-subscribe:</p>\n<ol>\n<li><p>Activate your CKAN virtual environment, for example:</p>\n<pre>. /usr/lib/ckan/default/bin/activate\n</pre>\n</li>\n<li><p>Install the ckanext-subscribe Python package into your virtual environment:</p>\n<pre>pip install ckanext-subscribe\n</pre>\n</li>\n<li><p>Add <tt>subscribe</tt> to the <tt>ckan.plugins</tt> setting in your CKAN\nconfiguration file (by default the config file is located at\n<tt>/etc/ckan/default/production.ini</tt>).</p>\n</li>\n<li><p>Make sure that <tt>ckan.site_url</tt> is set correctly in the <tt>[app:main]</tt>\nsection of your CKAN configuration file. This is used to generate links in\nthe bodies of the notification emails. For example:</p>\n<pre>ckan.site_url = https://example.com\n</pre>\n</li>\n<li><p>Make sure that <tt>smtp.mail_from</tt> is set correctly in the <tt>[app:main]</tt>\nsection of your CKAN configuration file. This is the email address that\nCKAN\u2019s email notifications will appear to come from. For example:</p>\n<pre>smtp.mail_from = info@example.com\n</pre>\n<p>This is combined with your <tt>ckan.site_title</tt> to form the <tt>From:</tt> header\nof the email that are sent, for example:</p>\n<pre>From: Sunnyville Open Data &lt;info@example.com&gt;\n</pre>\n<p>If you would like to use an alternate reply address, such as a \u201cno-reply\u201d\naddress, set <tt>smtp.reply_to</tt> in the <tt>[app:main]</tt>\nsection of your CKAN configuration file. For example:</p>\n<pre>smtp.reply_to = noreply@example.com\n</pre>\n</li>\n<li><p>If you do not have an SMTP server running locally on the machine that hosts\nyour CKAN instance, you can change the <tt><span class=\"pre\">email-settings</span></tt> to send email via\nan external SMTP server. For example, these settings in the <tt>[app:main]</tt>\nsection of your configuration file will send emails using a gmail account\n(not recommended for production websites!):</p>\n<pre>smtp.server = smtp.gmail.com:587\nsmtp.starttls = True\nsmtp.user = your_username@gmail.com\nsmtp.password = your_gmail_password\nsmtp.mail_from = your_username@gmail.com\n</pre>\n</li>\n<li><p>Initialize the subscribe tables in the database:</p>\n<pre>paster --plugin=ckanext-subscribe subscribe initdb\n</pre>\n</li>\n<li><p>Restart CKAN. For example if you\u2019ve deployed CKAN with Apache on Ubuntu:</p>\n<pre>sudo service apache2 reload\n</pre>\n</li>\n<li><p>You need to run the \u2018send-any-notifications\u2019 command regularly. You can see\nit running on the command-line:</p>\n<pre>paster --plugin=ckanext-subscribe subscribe send-any-notifications -c /etc/ckan/default/production.ini\n</pre>\n<p>However instead you\u2019ll probably want a cron job setup to run it every minute\nor so. We\u2019re going to edit the cron table. On a development machine, just do\nthis for your user:</p>\n<pre>crontab -e\n</pre>\n<p>Or a production machine use the \u2018ckan\u2019 user, instead of checking for notifications on the\ncommand-line, create CRON job. To do so, edit the cron table with the\nfollowing command (it may ask you to choose an editor):</p>\n<pre>sudo crontab -e -u ckan\n</pre>\n<p>Paste this line into your crontab, again replacing the paths to paster and the ini file with yours:</p>\n<pre># m h  dom mon dow   command\n  * *  *   *   *     /usr/lib/ckan/default/bin/paster --plugin=ckanext-subscribe subscribe send-any-notifications --config=/etc/ckan/default/production.ini\n</pre>\n<p>This particular example will check for notifications every minute.</p>\n<p>Also in this cron you will likely see it also running a paster command for\n<cite>/api/action/send_email_notifications</cite>. This is similar but separate\nfunctionality, that core CKAN uses to send emails to users that have created\nuser accounts e.g. for the \u2018follower\u2019 functionality. There\u2019s more about this\nhere: <a href=\"https://docs.ckan.org/en/2.8/maintaining/email-notifications.html\" rel=\"nofollow\">https://docs.ckan.org/en/2.8/maintaining/email-notifications.html</a></p>\n</li>\n</ol>\n</div>\n<div id=\"config-settings\">\n<h3>Config settings</h3>\n<pre># Email notifications older than this time period will not be sent.\n# So, after a pause in the sending of emails, when it restarts, it will not\n# notify about activity which is:\n# * older than this period, for immediate subscriptions\n# * older than this period + 1 day, for daily subscriptions\n# * older than this period + 1 week, for weekly subscriptions\n# Accepted formats: \u20182 days\u2019, \u201814 days\u2019, \u20184:35:00\u2019 (hours, minutes, seconds),\n#                  \u20187 days, 3:23:34\u2019, etc.\n# See also: https://docs.ckan.org/en/2.8/maintaining/configuration.html#ckan-email-notifications-since\n# (optional, default: \u20182 days\u2019)\nckan.email_notifications_since = 24:00:00\n\n# The time that daily and weekly notification subscriptions are sent (UTC\n# timezone)\nckanext.subscribe.daily_and_weekly_notification_time = 09:00\n\n# The day of the week that weekly notification subscriptions are sent\nckanext.subscribe.weekly_notification_day = friday\n</pre>\n</div>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<p><strong>Notification emails not being sent</strong></p>\n<ol>\n<li><p>Check your cron schedule is working:</p>\n<pre>tail -f /var/log/syslog | grep subscribe\n</pre>\n<p>You should see messages every minute:</p>\n<pre>Jan 10 15:24:01 ip-172-30-3-71 CRON[29231]: (ubuntu) CMD (/usr/lib/ckan/default/bin/paster --plugin=ckanext-subscribe subscribe run --config=/etc/ckan/default/production.ini)\n</pre>\n</li>\n<li><p>Create a test activity for a dataset/group/org you are subscribed to:</p>\n<pre>paster --plugin=ckanext-subscribe subscribe create-test-activity mydataset --config=/etc/ckan/default/production.ini\n</pre>\n<p>The log of the cron-activated paster command itself is not currently stored anywhere, so it\u2019s best to test it on the commandline:</p>\n<pre>paster --plugin=ckanext-subscribe subscribe send-any-notifications --config=/etc/ckan/default/production.ini\n</pre>\n<p>You should see emails being sent to subscribers of that dataset:</p>\n<pre>2020-01-06 16:30:40,591 DEBUG [ckanext.subscribe.notification] send_any_immediate_notifications\n2020-01-06 16:30:40,628 DEBUG [ckanext.subscribe.notification] sending 1 emails (immediate frequency)\n2020-01-06 16:30:42,116 INFO  [ckanext.subscribe.mailer] Sent email to david.read@hackneyworkshop.com\n</pre>\n</li>\n<li><p>Clean up all test activity afterwards:</p>\n<pre>paster --plugin=ckanext-subscribe subscribe delete-test-activity --config=/etc/ckan/default/production.ini\n</pre>\n</li>\n</ol>\n<p><strong>NameError: global name \u2018Subscription\u2019 is not defined</strong></p>\n<p>You need to initialize the subscribe tables in the database.  See\n\u2018Installation\u2019 section above to do this.</p>\n<p><strong>KeyError: \u201cAction \u2018subscribe_signup\u2019 not found\u201d</strong></p>\n<p>You need to enable the <cite>subscribe</cite> plugin in your CKAN config. See\n\u2018Installation\u2019 section above to do this.</p>\n<p><strong>ProgrammingError: (ProgrammingError) relation \u201csubscription\u201d does not exist</strong></p>\n<p>You\u2019re running the tests with <cite>\u2013reset-db</cite> and this extension doesn\u2019t work with\nthat. Instead, if you need to wipe the tables before running tests, do it this\nway:</p>\n<pre>sudo -u postgres psql ckan_test -c 'drop table if exists subscription; drop table if exists subscribe_login_code; drop table if exists subscribe;'\n</pre>\n<p>or simply:</p>\n<pre>sudo -u postgres dropdb ckan_test\nsudo -u postgres createdb -O ckan_default ckan_test -E utf-8\npaster --plugin=ckan db init -c ../ckan/test-core.ini\n</pre>\n</div>\n<div id=\"developer-installation\">\n<h3>Developer installation</h3>\n<p>To install ckanext-subscribe for development, activate your CKAN virtualenv and\ndo:</p>\n<pre>git clone https://github.com/davidread/ckanext-subscribe.git\ncd ckanext-subscribe\npython setup.py develop\npip install -r dev-requirements.txt\n</pre>\n<p>Now continue Installation steps from step 3</p>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>To run the tests, do:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini\n</pre>\n<p>To run the tests and produce a coverage report, first make sure you have\ncoverage installed in your virtualenv (<tt>pip install coverage</tt>) then run:</p>\n<pre>nosetests --nologcapture --with-pylons=test.ini --with-coverage --cover-package=ckanext.subscribe --cover-inclusive --cover-erase --cover-tests\n</pre>\n</div>\n<div id=\"releasing-a-new-version-of-ckanext-subscribe\">\n<h3>Releasing a new version of ckanext-subscribe</h3>\n<p>ckanext-subscribe should be available on PyPI as <a href=\"https://pypi.org/project/ckanext-subscribe\" rel=\"nofollow\">https://pypi.org/project/ckanext-subscribe</a>.\nTo publish a new version to PyPI follow these steps:</p>\n<ol>\n<li><p>Update the version number in the <tt>setup.py</tt> file.\nSee <a href=\"http://legacy.python.org/dev/peps/pep-0440/#public-version-identifiers\" rel=\"nofollow\">PEP 440</a>\nfor how to choose version numbers.</p>\n</li>\n<li><p>Make sure you have the latest version of necessary packages:</p>\n<pre>pip install --upgrade setuptools wheel twine\n</pre>\n</li>\n<li><p>Create a source and binary distributions of the new version:</p>\n<pre>python setup.py sdist bdist_wheel &amp;&amp; twine check dist/*\n</pre>\n<p>Fix any errors you get.</p>\n</li>\n<li><p>Upload the source distribution to PyPI:</p>\n<pre>twine upload dist/*\n</pre>\n</li>\n<li><p>Commit any outstanding changes:</p>\n<pre>git commit -a\ngit push\n</pre>\n</li>\n<li><p>Tag the new release of the project on GitHub with the version number from\nthe <tt>setup.py</tt> file. For example if the version number in <tt>setup.py</tt> is\n0.0.1 then do:</p>\n<pre>git tag 0.0.1\ngit push --tags\n</pre>\n</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6630808, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "573cf799531b0861cb5cccf9ec2e7a54", "sha256": "d5698859232f482fdf3e9f027e76717176c67217f559925184b3ca758cf6327a"}, "downloads": -1, "filename": "ckanext_subscribe-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "573cf799531b0861cb5cccf9ec2e7a54", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56768, "upload_time": "2020-02-07T23:07:53", "upload_time_iso_8601": "2020-02-07T23:07:53.216001Z", "url": "https://files.pythonhosted.org/packages/74/35/b054d9da048b2cb34cf7d658a0a5974b9ea502df9b6cd2c683c9a68c5eb8/ckanext_subscribe-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "609ca5b83dd6d8207732f904a9e12b6f", "sha256": "afeae9f21b16d933e4834d87cc3a82ab4a86e8bc913181e7be8dfd7f615d999c"}, "downloads": -1, "filename": "ckanext-subscribe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "609ca5b83dd6d8207732f904a9e12b6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50062, "upload_time": "2020-02-07T23:07:56", "upload_time_iso_8601": "2020-02-07T23:07:56.018988Z", "url": "https://files.pythonhosted.org/packages/e2/c2/24a081f418cb076cedd72d29f28f3e00a0b119d0814c1dafca455e4bdac1/ckanext-subscribe-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4a42b404b13b2177dd2d21dca0e9345f", "sha256": "cf85174fd438aa009b7e077f3a86fe812d031ba13f9e292ca9d4e8d8c839be8e"}, "downloads": -1, "filename": "ckanext_subscribe-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4a42b404b13b2177dd2d21dca0e9345f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56843, "upload_time": "2020-02-14T13:16:04", "upload_time_iso_8601": "2020-02-14T13:16:04.585556Z", "url": "https://files.pythonhosted.org/packages/ba/17/d3f78325e2619dada6d34725f01f2ebadf28a6fc691f631c952a8a1b06d2/ckanext_subscribe-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca7c7d6ee449c529de6a69707d579981", "sha256": "f28d22ec7378f7b204b2f60c626aa94874c54df772353ec76fde0cb1d18510d0"}, "downloads": -1, "filename": "ckanext-subscribe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ca7c7d6ee449c529de6a69707d579981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50140, "upload_time": "2020-02-14T13:16:07", "upload_time_iso_8601": "2020-02-14T13:16:07.158787Z", "url": "https://files.pythonhosted.org/packages/f0/34/8b0b6f9dac735e05ed3d9b9db6dd0f732d59a535e1994f98aa45f300b6dd/ckanext-subscribe-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a42b404b13b2177dd2d21dca0e9345f", "sha256": "cf85174fd438aa009b7e077f3a86fe812d031ba13f9e292ca9d4e8d8c839be8e"}, "downloads": -1, "filename": "ckanext_subscribe-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "4a42b404b13b2177dd2d21dca0e9345f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 56843, "upload_time": "2020-02-14T13:16:04", "upload_time_iso_8601": "2020-02-14T13:16:04.585556Z", "url": "https://files.pythonhosted.org/packages/ba/17/d3f78325e2619dada6d34725f01f2ebadf28a6fc691f631c952a8a1b06d2/ckanext_subscribe-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca7c7d6ee449c529de6a69707d579981", "sha256": "f28d22ec7378f7b204b2f60c626aa94874c54df772353ec76fde0cb1d18510d0"}, "downloads": -1, "filename": "ckanext-subscribe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ca7c7d6ee449c529de6a69707d579981", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50140, "upload_time": "2020-02-14T13:16:07", "upload_time_iso_8601": "2020-02-14T13:16:07.158787Z", "url": "https://files.pythonhosted.org/packages/f0/34/8b0b6f9dac735e05ed3d9b9db6dd0f732d59a535e1994f98aa45f300b6dd/ckanext-subscribe-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:13 2020"}