{"info": {"author": "bmcorser", "author_email": "bmcorser@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "expr\n==========\n\n.. figure:: https://raw.githubusercontent.com/bmcorser/expr/master/expr.png\n   :alt: expr\n\nCreate simple visualisations of mathematical operations on `small datasets`_\nby rendering an `expression graph`_, show your friends or serialise it for later.\n\n.. _`expression graph`: https://code.google.com/p/pydot/\n.. _`small datasets`: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\n\nContents\n--------\n\n- `Usage`_\n\n    * `Starting out`_\n    * `Less verbosity`_\n    * `Involving pandas`_\n    * `Serialising`_\n\n- `Known issues`_\n- `Also`_\n\nUsage\n~~~~~\n\nExamples follow using the Python interactive shell\n\nStarting out\n^^^^^^^^^^^^\n\nImport some things from the module\n\n.. code:: python\n\n    from expr import Expr, NumExpr\n\nConstruct an expression\n\n.. code:: python\n\n    expr = Expr(\n        operation_name='+',\n        arguments=[\n            NumExpr(number=1),\n            Expr(\n                operation_name='/',\n                arguments=[\n                    NumExpr(number=2),\n                    NumExpr(number=3),\n                ]\n            )\n        ]\n    )\n\nGet an answer\n\n.. code:: python\n\n    >> expr.resolve()\n    1.6666666666666665\n\nDraw a graph\n\n.. code:: python\n\n    >> graph = expr.graph()\n    >> graph.write_png('example.png')\n    True\n\n``example.png``\n\n.. figure:: https://raw.githubusercontent.com/bmcorser/expr/master/example.png\n   :alt: example\n\n\nLess verbosity\n^^^^^^^^^^^^^^\n\nImport things using ``as`` to save your typing fingers by aliasing those\ncharacters away. In Python we don't really need to care if functions specify\nkeyword or positional signatures, so let's not bother with those wordy\nkeywords, hey.\n\n.. code:: python\n\n    >>> from expr import Expr as E, NumExpr as N\n    >>> expr = E('/', [N(22), N(7)])\n    >>> expr.resolve()\n    3.142857142857143\n    >>> expr.graph().write_png('pi.png')\n    True\n\n``pi.png``\n\n.. figure:: https://raw.githubusercontent.com/bmcorser/expr/master/pi.png\n   :alt: pi\n\n\nInvolving pandas\n^^^^^^^^^^^^^^^^\n\nWe can create expressions that involve more than just numbers ...\n\n.. code:: python\n\n    >>> import pandas\n    >>> from expr import (\n    ...     Expr as E,\n    ...     NumExpr as N,\n    ...     DataFrameExpr as D,\n    ... )\n\nCreate some stupid datasets\n\n.. code:: python\n\n    >>> def two_by_four():\n    ...     data = [(n + 1, n + 1) for n in range(4)]\n    ...     return pandas.DataFrame.from_records(data=data, columns=['a', 'b'])\n\n    >>> df_A = two_by_four()\n    >>> df_B = two_by_four()\n    >>> df_A\n       a  b\n    0  1  1\n    1  2  2\n    2  3  3\n    3  4  4\n\nCreate the expression object, the ``DataFrameExpr`` object (aliased here\nas ``D``) takes an optional argument ``name`` which will be used as a label if\npresent, otherwise an automatically generated label will applied.\n\n.. code:: python\n\n    >>> expr = E('*', [N(3), E('+', [D(df_A, 'A'), D(df_B, 'B')])])\n    >>> expr.graph().write_png('dataframe.png')\n    True\n    >>> expr.resolve()\n        0   1\n    0   6   6\n    1  12  12\n    2  18  18\n    3  24  24\n\n``dataframe.png``\n\n.. figure:: https://raw.githubusercontent.com/bmcorser/expr/master/dataframe.png\n   :alt: dataframe\n\nSerialising\n~~~~~~~~~~~\n\nLet's serialise the above example using JSON, any arguments passed to the\n``serialise`` method are used when the serialiser function is applied.\n\n.. code:: python\n\n    >>> import json\n    >>> print(expr.serialise(json.dumps, indent=4))\n    {\n        \"__type__\": \"Expr\",\n        \"operation_name\": \"*\",\n        \"arguments\": [\n            {\n                \"__type__\": \"NumExpr\",\n                \"number\": 3.0\n            },\n            {\n                \"__type__\": \"Expr\",\n                \"operation_name\": \"+\",\n                \"arguments\": [\n                    {\n                        \"__type__\": \"DataFrameExpr\",\n                        \"name\": \"A\",\n                        \"dataframe\": {\n                            \"a\": {\n                                \"0\": 1,\n                                \"1\": 2,\n                                \"2\": 3,\n                                \"3\": 4\n                            },\n                            \"b\": {\n                                \"0\": 1,\n                                \"1\": 2,\n                                \"2\": 3,\n                                \"3\": 4\n                            }\n                        }\n                    },\n                    {\n                        \"__type__\": \"DataFrameExpr\",\n                        \"name\": \"B\",\n                        \"dataframe\": {\n                            \"a\": {\n                                \"0\": 1,\n                                \"1\": 2,\n                                \"2\": 3,\n                                \"3\": 4\n                            },\n                            \"b\": {\n                                \"0\": 1,\n                                \"1\": 2,\n                                \"2\": 3,\n                                \"3\": 4\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n\nGetting funccy\n^^^^^^^^^^^^^^\n\nThe final expression provided in this package is ``FuncExpr``, which applies\narbitrary functions to the arguments supplied (which should be objects\nimplementing a ``resolve`` method). Keywords are also applied, probably for\nspecifying options, which do not have to be expression objects.  A contrived\nexample of ``FuncExpr`` use follows.\n\nDo some smart imports\n\n.. code:: python\n\n    import pandas\n    from expr import (\n        Expr as E,\n        NumExpr as N,\n        DataFrameExpr as D,\n        FuncExpr as F,\n    )\n\nDefine a factory function for creating ``DataFrame`` objects\n\n.. code:: python\n\n    def x_by_y(x, y, columns=False):\n        data = [[a + b for b in range(x)] for a in range(y)]\n        if columns is False:\n            columns = [chr(97 + c) for c in range(x)]\n        return pandas.DataFrame.from_records(data=data, columns=columns)\n\nCrank out some df's for later use\n\n.. code:: python\n\n    df_A = x_by_y(3, 4)\n    df_B = x_by_y(3, 4)\n    df_C = x_by_y(3, 4)\n\nNow set up out expression and look at its graph\n\n.. code:: python\n\n    expr = E('+',\n        [\n            E('*',\n                [\n                    N(3),\n                    F('pandas.concat',\n                        [\n                            D(x_by_y(1, 4, ['a'])),\n                            D(x_by_y(1, 4, ['b'])),\n                            D(x_by_y(1, 4, ['c'])),\n                        ], axis=1\n                    )\n                ]\n            ),\n            D(x_by_y(3, 4))\n        ]\n    )\n    G = expr.graph()\n    G.write_png('func.png')\n\n``func.png``\n\n.. figure:: https://raw.githubusercontent.com/bmcorser/expr/master/func.png\n   :alt: func\n\nCrazy ish\n^^^^^^^^^\n\nWhy not very clumsily visualise a call stack for your audience's pleasure?\n\n\nKnown Issues\n~~~~~~~~~~~~\n\nIf you like YAML, serialising ``pandas`` objects, may_ be problematic_, but\nJSON should be fine.\n\n.. _may: http://pyyaml.org/ticket/254\n.. _problematic: http://pyyaml.org/ticket/192\n\nAlso\n~~~~\n\nColours courtesy of clrs.cc_\n\n.. _clrs.cc: http://clrs.cc", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bmcorser/expr", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "expr", "package_url": "https://pypi.org/project/expr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/expr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bmcorser/expr"}, "release_url": "https://pypi.org/project/expr/0.0.1h/", "requires_dist": null, "requires_python": null, "summary": "Draw little expression graphs; made to be hacked on.", "version": "0.0.1h", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"expr\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4c9097aeca33637420246c11d570b45e67b09c2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626d636f727365722f657870722f6d61737465722f657870722e706e67\">\n</div>\n<p>Create simple visualisations of mathematical operations on <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" rel=\"nofollow\">small datasets</a>\nby rendering an <a href=\"https://code.google.com/p/pydot/\" rel=\"nofollow\">expression graph</a>, show your friends or serialise it for later.</p>\n<div id=\"contents\">\n<h2>Contents</h2>\n<ul>\n<li><p><a href=\"#usage\" rel=\"nofollow\">Usage</a></p>\n<blockquote>\n<ul>\n<li><a href=\"#starting-out\" rel=\"nofollow\">Starting out</a></li>\n<li><a href=\"#less-verbosity\" rel=\"nofollow\">Less verbosity</a></li>\n<li><a href=\"#involving-pandas\" rel=\"nofollow\">Involving pandas</a></li>\n<li><a href=\"#serialising\" rel=\"nofollow\">Serialising</a></li>\n</ul>\n</blockquote>\n</li>\n<li><p><a href=\"#known-issues\" rel=\"nofollow\">Known issues</a></p>\n</li>\n<li><p><a href=\"#also\" rel=\"nofollow\">Also</a></p>\n</li>\n</ul>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Examples follow using the Python interactive shell</p>\n<div id=\"starting-out\">\n<h4>Starting out</h4>\n<p>Import some things from the module</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">expr</span> <span class=\"kn\">import</span> <span class=\"n\">Expr</span><span class=\"p\">,</span> <span class=\"n\">NumExpr</span>\n</pre>\n<p>Construct an expression</p>\n<pre><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">Expr</span><span class=\"p\">(</span>\n    <span class=\"n\">operation_name</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span>\n    <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">NumExpr</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n        <span class=\"n\">Expr</span><span class=\"p\">(</span>\n            <span class=\"n\">operation_name</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">,</span>\n            <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">NumExpr</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                <span class=\"n\">NumExpr</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Get an answer</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span>\n<span class=\"mf\">1.6666666666666665</span>\n</pre>\n<p>Draw a graph</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">write_png</span><span class=\"p\">(</span><span class=\"s1\">'example.png'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p><tt>example.png</tt></p>\n<div>\n<img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71d45aefe07df61b996c605407eb3a5099d51072/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626d636f727365722f657870722f6d61737465722f6578616d706c652e706e67\">\n</div>\n</div>\n<div id=\"less-verbosity\">\n<h4>Less verbosity</h4>\n<p>Import things using <tt>as</tt> to save your typing fingers by aliasing those\ncharacters away. In Python we don\u2019t really need to care if functions specify\nkeyword or positional signatures, so let\u2019s not bother with those wordy\nkeywords, hey.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">expr</span> <span class=\"kn\">import</span> <span class=\"n\">Expr</span> <span class=\"k\">as</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">NumExpr</span> <span class=\"k\">as</span> <span class=\"n\">N</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">E</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span>\n<span class=\"mf\">3.142857142857143</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write_png</span><span class=\"p\">(</span><span class=\"s1\">'pi.png'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p><tt>pi.png</tt></p>\n<div>\n<img alt=\"pi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82a3763c641f0b63e1fd98aa3a73e66f00022c73/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626d636f727365722f657870722f6d61737465722f70692e706e67\">\n</div>\n</div>\n<div id=\"involving-pandas\">\n<h4>Involving pandas</h4>\n<p>We can create expressions that involve more than just numbers \u2026</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">expr</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">Expr</span> <span class=\"k\">as</span> <span class=\"n\">E</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">NumExpr</span> <span class=\"k\">as</span> <span class=\"n\">N</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">DataFrameExpr</span> <span class=\"k\">as</span> <span class=\"n\">D</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n</pre>\n<p>Create some stupid datasets</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">two_by_four</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_records</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_A</span> <span class=\"o\">=</span> <span class=\"n\">two_by_four</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_B</span> <span class=\"o\">=</span> <span class=\"n\">two_by_four</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df_A</span>\n   <span class=\"n\">a</span>  <span class=\"n\">b</span>\n<span class=\"mi\">0</span>  <span class=\"mi\">1</span>  <span class=\"mi\">1</span>\n<span class=\"mi\">1</span>  <span class=\"mi\">2</span>  <span class=\"mi\">2</span>\n<span class=\"mi\">2</span>  <span class=\"mi\">3</span>  <span class=\"mi\">3</span>\n<span class=\"mi\">3</span>  <span class=\"mi\">4</span>  <span class=\"mi\">4</span>\n</pre>\n<p>Create the expression object, the <tt>DataFrameExpr</tt> object (aliased here\nas <tt>D</tt>) takes an optional argument <tt>name</tt> which will be used as a label if\npresent, otherwise an automatically generated label will applied.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">E</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">E</span><span class=\"p\">(</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">df_A</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">),</span> <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">df_B</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">)])])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write_png</span><span class=\"p\">(</span><span class=\"s1\">'dataframe.png'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span>\n    <span class=\"mi\">0</span>   <span class=\"mi\">1</span>\n<span class=\"mi\">0</span>   <span class=\"mi\">6</span>   <span class=\"mi\">6</span>\n<span class=\"mi\">1</span>  <span class=\"mi\">12</span>  <span class=\"mi\">12</span>\n<span class=\"mi\">2</span>  <span class=\"mi\">18</span>  <span class=\"mi\">18</span>\n<span class=\"mi\">3</span>  <span class=\"mi\">24</span>  <span class=\"mi\">24</span>\n</pre>\n<p><tt>dataframe.png</tt></p>\n<div>\n<img alt=\"dataframe\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8bcca84194cae3be5b6f15837f3725599508594/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626d636f727365722f657870722f6d61737465722f646174616672616d652e706e67\">\n</div>\n</div>\n</div>\n<div id=\"serialising\">\n<h3>Serialising</h3>\n<p>Let\u2019s serialise the above example using JSON, any arguments passed to the\n<tt>serialise</tt> method are used when the serialiser function is applied.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">serialise</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"__type__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Expr\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"operation_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"arguments\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"__type__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NumExpr\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"number\"</span><span class=\"p\">:</span> <span class=\"mf\">3.0</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"__type__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Expr\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"operation_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"arguments\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"__type__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DataFrameExpr\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"dataframe\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"0\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"1\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"2\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"3\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"0\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"1\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"2\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"3\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"__type__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DataFrameExpr\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"dataframe\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"0\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"1\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"2\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"3\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"0\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"1\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"2\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"3\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"getting-funccy\">\n<h4>Getting funccy</h4>\n<p>The final expression provided in this package is <tt>FuncExpr</tt>, which applies\narbitrary functions to the arguments supplied (which should be objects\nimplementing a <tt>resolve</tt> method). Keywords are also applied, probably for\nspecifying options, which do not have to be expression objects.  A contrived\nexample of <tt>FuncExpr</tt> use follows.</p>\n<p>Do some smart imports</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">expr</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Expr</span> <span class=\"k\">as</span> <span class=\"n\">E</span><span class=\"p\">,</span>\n    <span class=\"n\">NumExpr</span> <span class=\"k\">as</span> <span class=\"n\">N</span><span class=\"p\">,</span>\n    <span class=\"n\">DataFrameExpr</span> <span class=\"k\">as</span> <span class=\"n\">D</span><span class=\"p\">,</span>\n    <span class=\"n\">FuncExpr</span> <span class=\"k\">as</span> <span class=\"n\">F</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Define a factory function for creating <tt>DataFrame</tt> objects</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">x_by_y</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"n\">columns</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n        <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">97</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">from_records</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n</pre>\n<p>Crank out some df\u2019s for later use</p>\n<pre><span class=\"n\">df_A</span> <span class=\"o\">=</span> <span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">df_B</span> <span class=\"o\">=</span> <span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">df_C</span> <span class=\"o\">=</span> <span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p>Now set up out expression and look at its graph</p>\n<pre><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">E</span><span class=\"p\">(</span><span class=\"s1\">'+'</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">E</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">N</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s1\">'pandas.concat'</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])),</span>\n                        <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">])),</span>\n                        <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">])),</span>\n                    <span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">x_by_y</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span>\n<span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">write_png</span><span class=\"p\">(</span><span class=\"s1\">'func.png'</span><span class=\"p\">)</span>\n</pre>\n<p><tt>func.png</tt></p>\n<div>\n<img alt=\"func\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60c948720526a7f01401ea3f7cd29aedd449d145/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626d636f727365722f657870722f6d61737465722f66756e632e706e67\">\n</div>\n</div>\n<div id=\"crazy-ish\">\n<h4>Crazy ish</h4>\n<p>Why not very clumsily visualise a call stack for your audience\u2019s pleasure?</p>\n</div>\n</div>\n<div id=\"known-issues\">\n<h3>Known Issues</h3>\n<p>If you like YAML, serialising <tt>pandas</tt> objects, <a href=\"http://pyyaml.org/ticket/254\" rel=\"nofollow\">may</a> be <a href=\"http://pyyaml.org/ticket/192\" rel=\"nofollow\">problematic</a>, but\nJSON should be fine.</p>\n</div>\n<div id=\"also\">\n<h3>Also</h3>\n<p>Colours courtesy of <a href=\"http://clrs.cc\" rel=\"nofollow\">clrs.cc</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1242937, "releases": {"0.0.1e": [{"comment_text": "", "digests": {"md5": "ef940f4dc925bd55b554ada1083b8fa5", "sha256": "6071d41306185fb6f87a2a25da06fc43176c3268da0a98e835d0b516c4d7e8bd"}, "downloads": -1, "filename": "expr-0.0.1e.tar.gz", "has_sig": false, "md5_digest": "ef940f4dc925bd55b554ada1083b8fa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4894, "upload_time": "2014-09-29T00:35:37", "upload_time_iso_8601": "2014-09-29T00:35:37.327781Z", "url": "https://files.pythonhosted.org/packages/90/5d/fb1e06f3e23de2b85078e07ae36fd056469df98d2b83c50234dba0029678/expr-0.0.1e.tar.gz", "yanked": false}], "0.0.1f": [{"comment_text": "", "digests": {"md5": "78a821aa6790f0e5e0709bcbead0b6a8", "sha256": "a0890a9022c886652aa21bf014e9ab0c63cb964fdc895acfbb29915e9e3e8bc5"}, "downloads": -1, "filename": "expr-0.0.1f.tar.gz", "has_sig": false, "md5_digest": "78a821aa6790f0e5e0709bcbead0b6a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4929, "upload_time": "2014-09-29T06:10:32", "upload_time_iso_8601": "2014-09-29T06:10:32.170757Z", "url": "https://files.pythonhosted.org/packages/31/98/f988dbdda015d54a1bd9436406c86b59e7270ddc3e736736503cd955e74a/expr-0.0.1f.tar.gz", "yanked": false}], "0.0.1g": [{"comment_text": "", "digests": {"md5": "b87b63469b250fa3a4a3b2c14a202504", "sha256": "e716783a62d02b0a86a8c1596acae730ed3ec78bfae6d6018a8d8240519d7646"}, "downloads": -1, "filename": "expr-0.0.1g.tar.gz", "has_sig": false, "md5_digest": "b87b63469b250fa3a4a3b2c14a202504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5353, "upload_time": "2014-09-29T06:27:52", "upload_time_iso_8601": "2014-09-29T06:27:52.130251Z", "url": "https://files.pythonhosted.org/packages/8d/c7/5c44702f14de6cdc5638d960320a78ff9dcc521103237c3ca1458e0003c6/expr-0.0.1g.tar.gz", "yanked": false}], "0.0.1h": [{"comment_text": "", "digests": {"md5": "654bd5c0eca933e190d27f0d4209017f", "sha256": "6b99490b24bf91e63b3fb12dba679b3092b467fcce5ba62efc6c4e839059a805"}, "downloads": -1, "filename": "expr-0.0.1h.tar.gz", "has_sig": false, "md5_digest": "654bd5c0eca933e190d27f0d4209017f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6546, "upload_time": "2014-09-30T10:43:39", "upload_time_iso_8601": "2014-09-30T10:43:39.612908Z", "url": "https://files.pythonhosted.org/packages/2b/cd/89c913fd7faf9e277def5cc1d5926c9cadd9f9e0318dc021b9755c6800a9/expr-0.0.1h.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "654bd5c0eca933e190d27f0d4209017f", "sha256": "6b99490b24bf91e63b3fb12dba679b3092b467fcce5ba62efc6c4e839059a805"}, "downloads": -1, "filename": "expr-0.0.1h.tar.gz", "has_sig": false, "md5_digest": "654bd5c0eca933e190d27f0d4209017f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6546, "upload_time": "2014-09-30T10:43:39", "upload_time_iso_8601": "2014-09-30T10:43:39.612908Z", "url": "https://files.pythonhosted.org/packages/2b/cd/89c913fd7faf9e277def5cc1d5926c9cadd9f9e0318dc021b9755c6800a9/expr-0.0.1h.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:36 2020"}