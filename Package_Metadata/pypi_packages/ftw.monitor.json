{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.3", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\n``ftw.monitor`` automatically starts a `zc.monitor <https://pypi.org/project/zc.monitor/>`_ server on instance boot.\n\nThis monitor server supports a ``health_check`` command that can be used as\na TCP health check in HAProxy or service monitoring framworks.\n\n``ftw.monitor`` is an alternative to `collective.monitor <https://pypi.org/project/collective.monitor/>`_\nor `five.z2monitor <https://pypi.org/project/five.z2monitor/>`_ in that it\ncompletly relies on **autoconfiguration**. No product-config or ZCML is needed,\nthe monitor port will always be picked automatically based on the instance's base port:\n\n``monitor_port = instance_port + 80``\n\nIn addition, ``ftw.monitor`` also provides a ``perf_metrics`` command that\nallows to interrogate an instance for performance related metrics.\n\n\n.. contents:: Table of Contents\n\n\nCompatibility\n-------------\n\nPlone 4.3.x\n\n\nInstallation\n============\n\n- Add the package to your buildout configuration:\n\n.. code:: ini\n\n    [instance]\n    eggs +=\n        ...\n        ftw.monitor\n\nUsage\n=====\n\nOnce ``ftw.monitor`` is included in your instance(s) eggs, it will\nautomatically start a monitor server upon instance boot:\n\n.. code::\n\n    INFO ZServer HTTP server started at Mon May  6 14:53:08 2019\n        Hostname: 0.0.0.0\n        Port: 8080\n\n    ...\n\n    INFO zc.ngi.async.server listening on ('', 8160)\n\n\nThe monitor server port is derived from the instance's port:\n\n``monitor_port = instance_port + 80``\n\nThe monitor server can be inspected and tested using **netcat**:\n\n.. code:: sh\n\n    $ echo 'help' | nc -i 1 localhost 8160\n\n    Supported commands:\n      dbinfo -- Get database statistics\n      health_check -- Check whether the instance is alive and ready to serve requests.\n      help -- Get help about server commands\n      interactive -- Turn on monitor's interactive mode\n      monitor -- Get general process info\n      perf_metrics -- Get performance related metrics\n      quit -- Quit the monitor\n      zeocache -- Get ZEO client cache statistics\n      zeostatus -- Get ZEO client status information\n\nAlternatively, a ``bin/instance monitor <cmd>`` script is provided that\nessentially does the same thing (sending the given command to the respective\nmonitor port and displaying the response):\n\n.. code:: sh\n\n    $ bin/instance monitor help\n\n\nHealth Check\n------------\n\nThe ``health_check`` command provided by ``ftw.monitor`` allows to check\nwhether a Zope instance is alive and ready to serve requests.\n\nIf so, it will respond with ``OK\\n``:\n\n.. code:: sh\n\n    $ echo 'health_check' | nc -i 1 localhost 8160\n\n    OK\n\n\nWhile a warmup is in progress (see below), the ``health_check`` will\nrespond with an according message.\n\n\nWarmup\n------\n\nBecause health checks and instance warmup are tricky to deal with separately,\n``ftw.monitor`` also provides a mechanism for warming up Plone sites.\n\nA ``@@warmup`` view is provided on both the **Plone site root** as well as\n**Zope application root** levels which will warm up either that specific\nPlone site, or all Plone sites in that Zope instance.\n\nThe warmup view will look for an ``IWarmupPerformer`` multiadapter that adapts\na Plone site and request, and will execute the necessary actions to warm up\nthat Plone site.\n\nThere is a default ``IWarmupPerformer`` implementation in ``ftw.monitor``\nwhich will load catalog BTrees and forward index BTrees of the most used\ncatalog indexes (``allowedRolesAndUsers`` and ``object_provides``).\n\nWhile the warmup is in progress, the ``health_check`` command will not yet\nindicate the instance as being healthy:\n\n.. code:: sh\n\n    $ echo 'health_check' | nc -i 1 localhost 8160\n\n    Warmup in progress\n\n\nAutomatic Warmup\n----------------\n\nBy default, ``ftw.monitor`` will automatically warm up a booting instance, by\nsending a request to the `@@warmup` view. The instance will be considered\nhealthy (by the ``health_check`` command) once the warmup has been performed\nsuccessfully.\n\nIf this behavior is not desired, automatic warmup can be disabled by setting\nthe ``FTW_MONITOR_AUTOWARMUP`` environment variable to ``0`` before starting\nthe instance(s):\n\n.. code:: bash\n\n    export FTW_MONITOR_AUTOWARMUP=0\n\n\nPerformance Metrics\n-------------------\n\nThe ``perf_metrics`` command can be used to query an instance for various\nmetrics that are related to performance.\n\nSyntax: ``perf_metrics [dbname] [sampling-interval]``\n\nYou can pass a database name, where \"-\" is an alias for the ``main`` database,\nwhich is the default. The sampling interval (specified in seconds)\ndefaults to 5m, and affects DB statistics retrieved from the ZODB\nActivityMonitor, specifically ``loads``, ``stores`` and ``connections``.\n\nThe maximum history length (and therefore sampling interval) configured in\nthe ActivityMonitor is 3600s in a stock installation.     \n\nThe command will return the metrics as a JSON encoded string\n(*whitespace added for clarity*).\n\n.. code:: json\n\n    {\n        \"instance\": {\n            \"uptime\": 39\n        },\n        \"cache\": {\n            \"size\": 3212,\n            \"ngsize\": 1438,\n            \"max_size\": 30000\n        },\n        \"db\": {\n            \"loads\": 1114,\n            \"stores\": 28,\n            \"connections\": 459,\n            \"conflicts\": 7,\n            \"unresolved_conflicts\": 3,\n            \"total_objs\": 13336,\n            \"size_in_bytes\": 5796849\n        },\n        \"memory\": {\n            \"rss\": 312422400,\n            \"uss\": 298905600,\n            \"pss\": 310822823\n        }\n    }\n\n**instance**\n\n- ``uptime`` - Time since instance start (in seconds)\n\n**cache**\n\n- ``size`` - Number of objects in cache\n- ``ngsize`` - Number of non-ghost objects in cache\n- ``max_size`` - Cache size (in number of objects)\n\n**db**\n\n- ``loads`` - Number of object loads in sampling interval\n- ``stores`` - Number of object stores in sampling interval\n- ``connections`` - Number of connections in sampling interval\n- ``conflicts`` - Total number of conflicts since instance start\n- ``unresolved_conflicts`` - Total number of unresolved conflicts since instance start\n- ``total_objs`` - Total number of objects in the storage \n- ``size_in_bytes`` - Size of the storage in bytes (so FileStorage's ``Data.fs``, usually. Excludes BlobStorage)\n\n.. note::\n    - loads, stores and connections are cumulative across all connections in the pool of that instance.\n    - total_objs and size_in_bytes may or may not be reported correctly when using ``RelStorage``, depending on the SQL adapter\n\n**memory**\n\n- ``rss`` - RSS (Resident Set Size) in bytes\n- ``uss`` - USS (`Unique Set Size`_) in bytes\n- ``pss`` - PSS (Proportional Set Size) in bytes (Linux only, ``-1`` on other platforms)\n\n\nHAProxy example\n---------------\n\nThe following is an example of how to use the ``health_check`` command as\na HAProxy TCP health check:\n\n\n.. code:: sh\n\n    backend plone03\n        # ...\n        option tcp-check\n        tcp-check connect\n        tcp-check send health_check\\r\\n\n        tcp-check expect string OK\n\n        server plone0301 127.0.0.1:10301 cookie p01 check port 10381 inter 10s downinter 15s maxconn 5 rise 1 slowstart 60s\n        server plone0302 127.0.0.1:10302 cookie p02 check port 10382 inter 10s downinter 15s maxconn 5 rise 1 slowstart 60s\n        server maintenance 127.0.0.1:10319 backup\n\nNote in particular that ``option tcp-check`` changes all health checks for\nthis backend to TCP mode. So the ``maintenance`` server in this example,\nwhich is an HTTP server, needs to have health checks turned off.\n\n\nSwitching to ftw.monitor\n------------------------\n\nIn order to switch to ``ftw.monitor`` for health monitoring, the following\nsteps are necessary:\n\n- Configure your zope instance to only use one ZServer thread. ``ftw.monitor``\n  is intended for use in setups with one thread per instance.\n  Example using buildout and ``plone.recipe.zope2instance``:\n\n  .. code:: ini\n  \n      [instance0]\n      zserver-threads = 1\n\n- Remove any ``HttpOk`` plugins from your supervisor configuration. With only\n  one thread per instance, that approach to service monitoring can't work\n  any more, and *must* be disabled.\n\n  If you're extending from ``production.cfg`` and/or ``zeoclients/<n>.cfg``\n  from ``ftw-buildouts``, you can get rid of the ``HttpOk`` supervisor plugins\n  like this (after extending from one of these configs):\n\n  .. code:: ini\n  \n      [supervisor]\n      eventlisteners-httpok =\n\n- Remove ``collective.warmup`` (if present). Since ``ftw.monitor`` includes\n  its own auto-warmup logic, the use of ``collective.warmup`` is unnecessary\n  (or even detrimental).\n\n  If you're extending from ``warmup.cfg`` from\n  ``ftw-buildouts``, you can neutralize  ``collective.warmup`` with a section\n  like this (after extending from ``warmup.cfg``):\n\n  .. code:: ini\n  \n      [buildout]\n      warmup-parts =\n      warmup-eggs =\n      warmup-instance-env-vars =\n\n- Change your HAProxy health checks to TCP checks instead of HTTP. See the\n  section above for an example of an appropriate HAProxy configuration.\n\n\n\nDevelopment\n===========\n\n1. Fork this repo\n2. Clone your fork\n3. Shell: ``ln -s development.cfg buildout.cfg``\n4. Shell: ``python bootstrap.py``\n5. Shell: ``bin/buildout``\n\nRun ``bin/test`` to test your changes.\n\nOr start an instance by running ``bin/instance fg``.\n\n\nLinks\n=====\n\n- Github: https://github.com/4teamwork/ftw.monitor\n- Issues: https://github.com/4teamwork/ftw.monitor/issues\n- Pypi: http://pypi.python.org/pypi/ftw.monitor\n\n\nCopyright\n=========\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.monitor`` is licensed under GNU General Public License, version 2.\n\n.. _`Unique Set Size`: https://psutil.readthedocs.io/en/latest/#psutil.Process.memory_full_info\n\nChangelog\n=========\n\n\n1.1.0 (2020-04-30)\n------------------\n\n- Add `perf_metrics` command to get various performance related metrics.\n  [lgraf]\n\n\n1.0.0 (2019-11-18)\n------------------\n\n- Initial implementation.\n  [lgraf]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.monitor", "keywords": "ftw monitor", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.monitor", "package_url": "https://pypi.org/project/ftw.monitor/", "platform": "", "project_url": "https://pypi.org/project/ftw.monitor/", "project_urls": {"Homepage": "https://github.com/4teamwork/ftw.monitor"}, "release_url": "https://pypi.org/project/ftw.monitor/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "ftw.monitor", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Introduction</a></h2>\n<p><tt>ftw.monitor</tt> automatically starts a <a href=\"https://pypi.org/project/zc.monitor/\" rel=\"nofollow\">zc.monitor</a> server on instance boot.</p>\n<p>This monitor server supports a <tt>health_check</tt> command that can be used as\na TCP health check in HAProxy or service monitoring framworks.</p>\n<p><tt>ftw.monitor</tt> is an alternative to <a href=\"https://pypi.org/project/collective.monitor/\" rel=\"nofollow\">collective.monitor</a>\nor <a href=\"https://pypi.org/project/five.z2monitor/\" rel=\"nofollow\">five.z2monitor</a> in that it\ncompletly relies on <strong>autoconfiguration</strong>. No product-config or ZCML is needed,\nthe monitor port will always be picked automatically based on the instance\u2019s base port:</p>\n<p><tt>monitor_port = instance_port + 80</tt></p>\n<p>In addition, <tt>ftw.monitor</tt> also provides a <tt>perf_metrics</tt> command that\nallows to interrogate an instance for performance related metrics.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id3\" rel=\"nofollow\">Introduction</a><ul>\n<li><a href=\"#compatibility\" id=\"id4\" rel=\"nofollow\">Compatibility</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#health-check\" id=\"id7\" rel=\"nofollow\">Health Check</a></li>\n<li><a href=\"#warmup\" id=\"id8\" rel=\"nofollow\">Warmup</a></li>\n<li><a href=\"#automatic-warmup\" id=\"id9\" rel=\"nofollow\">Automatic Warmup</a></li>\n<li><a href=\"#performance-metrics\" id=\"id10\" rel=\"nofollow\">Performance Metrics</a></li>\n<li><a href=\"#haproxy-example\" id=\"id11\" rel=\"nofollow\">HAProxy example</a></li>\n<li><a href=\"#switching-to-ftw-monitor\" id=\"id12\" rel=\"nofollow\">Switching to ftw.monitor</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" id=\"id13\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#links\" id=\"id14\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#copyright\" id=\"id15\" rel=\"nofollow\">Copyright</a></li>\n<li><a href=\"#changelog\" id=\"id16\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id17\" rel=\"nofollow\">1.1.0 (2020-04-30)</a></li>\n<li><a href=\"#id2\" id=\"id18\" rel=\"nofollow\">1.0.0 (2019-11-18)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"compatibility\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Compatibility</a></h3>\n<p>Plone 4.3.x</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Installation</a></h2>\n<ul>\n<li>Add the package to your buildout configuration:</li>\n</ul>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">eggs +</span><span class=\"o\">=</span><span class=\"s\">\n    ...\n    ftw.monitor</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<p>Once <tt>ftw.monitor</tt> is included in your instance(s) eggs, it will\nautomatically start a monitor server upon instance boot:</p>\n<pre>INFO ZServer HTTP server started at Mon May  6 14:53:08 2019\n    Hostname: 0.0.0.0\n    Port: 8080\n\n...\n\nINFO zc.ngi.async.server listening on ('', 8160)\n</pre>\n<p>The monitor server port is derived from the instance\u2019s port:</p>\n<p><tt>monitor_port = instance_port + 80</tt></p>\n<p>The monitor server can be inspected and tested using <strong>netcat</strong>:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'help'</span> <span class=\"p\">|</span> nc -i <span class=\"m\">1</span> localhost <span class=\"m\">8160</span>\n\nSupported commands:\n  dbinfo -- Get database statistics\n  health_check -- Check whether the instance is alive and ready to serve requests.\n  <span class=\"nb\">help</span> -- Get <span class=\"nb\">help</span> about server commands\n  interactive -- Turn on monitor<span class=\"err\">'</span>s interactive mode\n  monitor -- Get general process info\n  perf_metrics -- Get performance related metrics\n  quit -- Quit the monitor\n  zeocache -- Get ZEO client cache statistics\n  zeostatus -- Get ZEO client status information\n</pre>\n<p>Alternatively, a <tt>bin/instance monitor &lt;cmd&gt;</tt> script is provided that\nessentially does the same thing (sending the given command to the respective\nmonitor port and displaying the response):</p>\n<pre>$ bin/instance monitor <span class=\"nb\">help</span>\n</pre>\n<div id=\"health-check\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Health Check</a></h3>\n<p>The <tt>health_check</tt> command provided by <tt>ftw.monitor</tt> allows to check\nwhether a Zope instance is alive and ready to serve requests.</p>\n<p>If so, it will respond with <tt>OK\\n</tt>:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'health_check'</span> <span class=\"p\">|</span> nc -i <span class=\"m\">1</span> localhost <span class=\"m\">8160</span>\n\nOK\n</pre>\n<p>While a warmup is in progress (see below), the <tt>health_check</tt> will\nrespond with an according message.</p>\n</div>\n<div id=\"warmup\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Warmup</a></h3>\n<p>Because health checks and instance warmup are tricky to deal with separately,\n<tt>ftw.monitor</tt> also provides a mechanism for warming up Plone sites.</p>\n<p>A <tt>@@warmup</tt> view is provided on both the <strong>Plone site root</strong> as well as\n<strong>Zope application root</strong> levels which will warm up either that specific\nPlone site, or all Plone sites in that Zope instance.</p>\n<p>The warmup view will look for an <tt>IWarmupPerformer</tt> multiadapter that adapts\na Plone site and request, and will execute the necessary actions to warm up\nthat Plone site.</p>\n<p>There is a default <tt>IWarmupPerformer</tt> implementation in <tt>ftw.monitor</tt>\nwhich will load catalog BTrees and forward index BTrees of the most used\ncatalog indexes (<tt>allowedRolesAndUsers</tt> and <tt>object_provides</tt>).</p>\n<p>While the warmup is in progress, the <tt>health_check</tt> command will not yet\nindicate the instance as being healthy:</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s1\">'health_check'</span> <span class=\"p\">|</span> nc -i <span class=\"m\">1</span> localhost <span class=\"m\">8160</span>\n\nWarmup in progress\n</pre>\n</div>\n<div id=\"automatic-warmup\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Automatic Warmup</a></h3>\n<p>By default, <tt>ftw.monitor</tt> will automatically warm up a booting instance, by\nsending a request to the <cite>@@warmup</cite> view. The instance will be considered\nhealthy (by the <tt>health_check</tt> command) once the warmup has been performed\nsuccessfully.</p>\n<p>If this behavior is not desired, automatic warmup can be disabled by setting\nthe <tt>FTW_MONITOR_AUTOWARMUP</tt> environment variable to <tt>0</tt> before starting\nthe instance(s):</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">FTW_MONITOR_AUTOWARMUP</span><span class=\"o\">=</span><span class=\"m\">0</span>\n</pre>\n</div>\n<div id=\"performance-metrics\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Performance Metrics</a></h3>\n<p>The <tt>perf_metrics</tt> command can be used to query an instance for various\nmetrics that are related to performance.</p>\n<p>Syntax: <tt>perf_metrics [dbname] <span class=\"pre\">[sampling-interval]</span></tt></p>\n<p>You can pass a database name, where \u201c-\u201d is an alias for the <tt>main</tt> database,\nwhich is the default. The sampling interval (specified in seconds)\ndefaults to 5m, and affects DB statistics retrieved from the ZODB\nActivityMonitor, specifically <tt>loads</tt>, <tt>stores</tt> and <tt>connections</tt>.</p>\n<p>The maximum history length (and therefore sampling interval) configured in\nthe ActivityMonitor is 3600s in a stock installation.</p>\n<p>The command will return the metrics as a JSON encoded string\n(<em>whitespace added for clarity</em>).</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"instance\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"uptime\"</span><span class=\"p\">:</span> <span class=\"mi\">39</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"cache\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">3212</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"ngsize\"</span><span class=\"p\">:</span> <span class=\"mi\">1438</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"max_size\"</span><span class=\"p\">:</span> <span class=\"mi\">30000</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"db\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"loads\"</span><span class=\"p\">:</span> <span class=\"mi\">1114</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"stores\"</span><span class=\"p\">:</span> <span class=\"mi\">28</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"connections\"</span><span class=\"p\">:</span> <span class=\"mi\">459</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"conflicts\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"unresolved_conflicts\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"total_objs\"</span><span class=\"p\">:</span> <span class=\"mi\">13336</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"size_in_bytes\"</span><span class=\"p\">:</span> <span class=\"mi\">5796849</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"memory\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"rss\"</span><span class=\"p\">:</span> <span class=\"mi\">312422400</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"uss\"</span><span class=\"p\">:</span> <span class=\"mi\">298905600</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"pss\"</span><span class=\"p\">:</span> <span class=\"mi\">310822823</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>instance</strong></p>\n<ul>\n<li><tt>uptime</tt> - Time since instance start (in seconds)</li>\n</ul>\n<p><strong>cache</strong></p>\n<ul>\n<li><tt>size</tt> - Number of objects in cache</li>\n<li><tt>ngsize</tt> - Number of non-ghost objects in cache</li>\n<li><tt>max_size</tt> - Cache size (in number of objects)</li>\n</ul>\n<p><strong>db</strong></p>\n<ul>\n<li><tt>loads</tt> - Number of object loads in sampling interval</li>\n<li><tt>stores</tt> - Number of object stores in sampling interval</li>\n<li><tt>connections</tt> - Number of connections in sampling interval</li>\n<li><tt>conflicts</tt> - Total number of conflicts since instance start</li>\n<li><tt>unresolved_conflicts</tt> - Total number of unresolved conflicts since instance start</li>\n<li><tt>total_objs</tt> - Total number of objects in the storage</li>\n<li><tt>size_in_bytes</tt> - Size of the storage in bytes (so FileStorage\u2019s <tt>Data.fs</tt>, usually. Excludes BlobStorage)</li>\n</ul>\n<div>\n<p>Note</p>\n<ul>\n<li>loads, stores and connections are cumulative across all connections in the pool of that instance.</li>\n<li>total_objs and size_in_bytes may or may not be reported correctly when using <tt>RelStorage</tt>, depending on the SQL adapter</li>\n</ul>\n</div>\n<p><strong>memory</strong></p>\n<ul>\n<li><tt>rss</tt> - RSS (Resident Set Size) in bytes</li>\n<li><tt>uss</tt> - USS (<a href=\"https://psutil.readthedocs.io/en/latest/#psutil.Process.memory_full_info\" rel=\"nofollow\">Unique Set Size</a>) in bytes</li>\n<li><tt>pss</tt> - PSS (Proportional Set Size) in bytes (Linux only, <tt><span class=\"pre\">-1</span></tt> on other platforms)</li>\n</ul>\n</div>\n<div id=\"haproxy-example\">\n<h3><a href=\"#id11\" rel=\"nofollow\">HAProxy example</a></h3>\n<p>The following is an example of how to use the <tt>health_check</tt> command as\na HAProxy TCP health check:</p>\n<pre>backend plone03\n    <span class=\"c1\"># ...\n</span>    option tcp-check\n    tcp-check connect\n    tcp-check send health_check<span class=\"se\">\\r\\n</span>\n    tcp-check expect string OK\n\n    server plone0301 <span class=\"m\">127</span>.0.0.1:10301 cookie p01 check port <span class=\"m\">10381</span> inter 10s downinter 15s maxconn <span class=\"m\">5</span> rise <span class=\"m\">1</span> slowstart 60s\n    server plone0302 <span class=\"m\">127</span>.0.0.1:10302 cookie p02 check port <span class=\"m\">10382</span> inter 10s downinter 15s maxconn <span class=\"m\">5</span> rise <span class=\"m\">1</span> slowstart 60s\n    server maintenance <span class=\"m\">127</span>.0.0.1:10319 backup\n</pre>\n<p>Note in particular that <tt>option <span class=\"pre\">tcp-check</span></tt> changes all health checks for\nthis backend to TCP mode. So the <tt>maintenance</tt> server in this example,\nwhich is an HTTP server, needs to have health checks turned off.</p>\n</div>\n<div id=\"switching-to-ftw-monitor\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Switching to ftw.monitor</a></h3>\n<p>In order to switch to <tt>ftw.monitor</tt> for health monitoring, the following\nsteps are necessary:</p>\n<ul>\n<li><p>Configure your zope instance to only use one ZServer thread. <tt>ftw.monitor</tt>\nis intended for use in setups with one thread per instance.\nExample using buildout and <tt>plone.recipe.zope2instance</tt>:</p>\n<pre><span class=\"k\">[instance0]</span>\n<span class=\"na\">zserver-threads</span> <span class=\"o\">=</span> <span class=\"s\">1</span>\n</pre>\n</li>\n<li><p>Remove any <tt>HttpOk</tt> plugins from your supervisor configuration. With only\none thread per instance, that approach to service monitoring can\u2019t work\nany more, and <em>must</em> be disabled.</p>\n<p>If you\u2019re extending from <tt>production.cfg</tt> and/or <tt><span class=\"pre\">zeoclients/&lt;n&gt;.cfg</span></tt>\nfrom <tt><span class=\"pre\">ftw-buildouts</span></tt>, you can get rid of the <tt>HttpOk</tt> supervisor plugins\nlike this (after extending from one of these configs):</p>\n<pre><span class=\"k\">[supervisor]</span>\n<span class=\"na\">eventlisteners-httpok</span> <span class=\"o\">=</span>\n</pre>\n</li>\n<li><p>Remove <tt>collective.warmup</tt> (if present). Since <tt>ftw.monitor</tt> includes\nits own auto-warmup logic, the use of <tt>collective.warmup</tt> is unnecessary\n(or even detrimental).</p>\n<p>If you\u2019re extending from <tt>warmup.cfg</tt> from\n<tt><span class=\"pre\">ftw-buildouts</span></tt>, you can neutralize  <tt>collective.warmup</tt> with a section\nlike this (after extending from <tt>warmup.cfg</tt>):</p>\n<pre><span class=\"k\">[buildout]</span>\n<span class=\"na\">warmup-parts</span> <span class=\"o\">=</span>\n<span class=\"na\">warmup-eggs</span> <span class=\"o\">=</span>\n<span class=\"na\">warmup-instance-env-vars</span> <span class=\"o\">=</span>\n</pre>\n</li>\n<li><p>Change your HAProxy health checks to TCP checks instead of HTTP. See the\nsection above for an example of an appropriate HAProxy configuration.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"development\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Development</a></h2>\n<ol>\n<li>Fork this repo</li>\n<li>Clone your fork</li>\n<li>Shell: <tt>ln <span class=\"pre\">-s</span> development.cfg buildout.cfg</tt></li>\n<li>Shell: <tt>python bootstrap.py</tt></li>\n<li>Shell: <tt>bin/buildout</tt></li>\n</ol>\n<p>Run <tt>bin/test</tt> to test your changes.</p>\n<p>Or start an instance by running <tt>bin/instance fg</tt>.</p>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Links</a></h2>\n<ul>\n<li>Github: <a href=\"https://github.com/4teamwork/ftw.monitor\" rel=\"nofollow\">https://github.com/4teamwork/ftw.monitor</a></li>\n<li>Issues: <a href=\"https://github.com/4teamwork/ftw.monitor/issues\" rel=\"nofollow\">https://github.com/4teamwork/ftw.monitor/issues</a></li>\n<li>Pypi: <a href=\"http://pypi.python.org/pypi/ftw.monitor\" rel=\"nofollow\">http://pypi.python.org/pypi/ftw.monitor</a></li>\n</ul>\n</div>\n<div id=\"copyright\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Copyright</a></h2>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.monitor</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id17\" rel=\"nofollow\">1.1.0 (2020-04-30)</a></h3>\n<ul>\n<li>Add <cite>perf_metrics</cite> command to get various performance related metrics.\n[lgraf]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id18\" rel=\"nofollow\">1.0.0 (2019-11-18)</a></h3>\n<ul>\n<li>Initial implementation.\n[lgraf]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7136861, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e24781ea7ad648476c9352b3a2cedd9e", "sha256": "8702df4ffe7569bc7ed53a161bde47a73e3a5d3de22bf54a9d897acee8b017ae"}, "downloads": -1, "filename": "ftw.monitor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e24781ea7ad648476c9352b3a2cedd9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20803, "upload_time": "2019-11-18T13:27:51", "upload_time_iso_8601": "2019-11-18T13:27:51.105468Z", "url": "https://files.pythonhosted.org/packages/a5/a5/f54844a24b6225c304d5d54422cf06d2d531d16b44caf0f8e7aa0ad05c1d/ftw.monitor-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0b5939670c7ee961be3038b505237098", "sha256": "caf43f309b387794f7c1984771e04b98798b20579b59d15f264105bda71f89df"}, "downloads": -1, "filename": "ftw.monitor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0b5939670c7ee961be3038b505237098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24813, "upload_time": "2020-04-30T12:11:54", "upload_time_iso_8601": "2020-04-30T12:11:54.642376Z", "url": "https://files.pythonhosted.org/packages/1b/9d/d4e7a54b9c87a55f6abe944f9545eb3895f8cb97f83e19bf03e4a865e515/ftw.monitor-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b5939670c7ee961be3038b505237098", "sha256": "caf43f309b387794f7c1984771e04b98798b20579b59d15f264105bda71f89df"}, "downloads": -1, "filename": "ftw.monitor-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0b5939670c7ee961be3038b505237098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24813, "upload_time": "2020-04-30T12:11:54", "upload_time_iso_8601": "2020-04-30T12:11:54.642376Z", "url": "https://files.pythonhosted.org/packages/1b/9d/d4e7a54b9c87a55f6abe944f9545eb3895f8cb97f83e19bf03e4a865e515/ftw.monitor-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:53 2020"}