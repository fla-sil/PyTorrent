{"info": {"author": "a.s.akulov", "author_email": "a.c.akulov@mail.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# py-loading-screen\n\nModule for Python - animated loading screen\nUsed modules:\n  1. asyncio\n  2. math\n  3. time.sleep\n  4. PyQt5.QtCore, PyQt5.QtWidgets, PyQt5.QtGui\n\nTested on python: 3.7.4, windows: x32, x64\n\n**Installing:**\n\n    $ pip install py-loading-screen\n\n**import:**\n\n    $ from pyLoadingScreen import LoadingScreen\n\nIf by some reason you have not python interpreter - you can see compiled demo-application (windows): 'example\\compiled'\n\n    LoadingScreen(PyQt5.QtWidgets.QFrame)\n\n# **Params:**\n\n    texts = ['Loading', 'Loading.', 'Loading..', 'Loading...'],\n    textUpdateDelay = 0.75,\n\n    parentWidget = None,\n    windowSize = (350, 350),\n    mainStyleSheet = \"background-color: black; color: rgb(80, 0, 255);\",\n    mainFrameWidth = 3,\n    textLabelStyleSheet = \"background-color: black; color: white; font: bold 18px;\",\n\n    animationType = \"RoundRobin\",       # Animation types available: \"RoundRobin\", \"RibbonDance\"\n    animationDetail\u0420\u040eoefficient = 20,\n    animationRGBColor = (255, 0, 0),\n    animationColorRainbow = True,\n    animationColorRainbowStep = 2,\n    animationColorRainbowMinValues = (0, 0, 0),\n    animationColorRainbowMaxValues = (255, 255, 255),\n    animationLineWidth = 3,\n    animationScale = 0.95,\n    animationCountStepsPerRound = 1440\n\n\n# **Notes:**\n\n    1. I recommend running this in a new thread. Anyway, you need to create instance of LoadingScreen at main thread, then start worker function in any thread.\n        If you want to start in new 'clear' thread - use 'worker' function, else if you wont to create task with asyncio - use 'worker_asyncio' coroutine.\n\n        !!! Variable with LoadingScreen instance must exist all time while script is running !!!\n\n        - New thread start full example:\n        \"\n            from pyLoadingScreen import LoadingScreen\n            from threading import Thread\n            from PyQt5 import QtWidgets\n\n            app = QtWidgets.QApplication([])\n            screen = LoadingScreen()\n\n            thread = Thread(target=screen.worker)\n            thread.start()\n\n            app.exec()\n         \"\n        - Asyncio create task example (in this case, you still can\u0432\u0402\u2122t use main thread for loop, becouse it will be busy by app.exec() loop (see above)):\n        \"\n            ...\n            self.screen = LoadingScreen()\n            loop = asyncio.get_event_loop()\n            asyncio.gather(self.screen.worker_async(), loop=loop)\n            ...\n        \"\n\n    2. To stop work use 'exit' attribute of LoadingScreen instance or create attribute 'exit_' in 'worker' or 'worker_async' function.\n        Work is stop after some time after signal to exit. You can check LoadingScreen instance state by 'isRunning' attribute.\n        Example:\n        \"\n            from pyLoadingScreen import LoadingScreen\n            from threading import Thread\n            from PyQt5 import QtWidgets\n            from time import sleep\n\n            def kill_after_5_seconds(screenInstance: object):\n                sleep(5)\n                screenInstance.exit = True\n                screenInstance.worker.__dict__['exit_'] = True\n                        # Equivalent to 'self.screen.exit = True'\n                screenInstance.worker_async.__dict__['exit_'] = True\n                        # Equivalent to 'self.screen.exit = True',\n                        # but in this case - it will not take any effect,\n                        # because 'worker' is using instead ('thread = Thread(target=screen.worker)')\n\n                while True:\n                    if screenInstance.isRunning:\n                        print(\"LoadingScreen is still running\")\n                    else:\n                        print(\"LoadingScreen is not running now!\")\n                        print()\n                        input(\"Press ENTER to exit.\")\n                        break\n\n            app = QtWidgets.QApplication([])\n            screen = LoadingScreen()\n\n            thread = Thread(target=screen.worker)\n            thread.start()\n\n            threadMonitoring = Thread(target=kill_after_5_seconds, args=(screen,))\n            threadMonitoring.start()\n\n            app.exec()\n        \"\n\n\n    3. If you set parentWidget - don't forget add LoadingScreen to parentWidget's layout!\n        Example:\n        \"\n            ...\n            self.screen = LoadingScreen(parentWidget=self.ui.myParentWidget)\n            self.ui.myParentWidget.layout().addWidget(self.screen)\n            ...\n        \"\n    4. If animationColorRainbow == True, then param 'animationRGBColor' ignored\n\n    5. If animationColorRainbow == False, then params ignored:\n        animationColorRainbowStep,\n        animationColorRainbowMinValues,\n        animationColorRainbowMaxValues\n\n    6. animationCountStepsPerRound - speed of rotation. animationCountStepsPerRound increases - rotation speed decreases\n\n    7. By some reason i can't create instance of LoadingScreen in Spyder (Anaconda, Python 3.7.4), but in outer program this work fine.\n\n\n# **Versions:**\n\n## **v1.1.6:**\n\n+ Bug fixes\n+ Description has been supplemented\n\n\n## **v1.1.5:**\n\n+ Restyled \"RibbonDance\" animation.\n\n\n## **v1.1.4:**\n\n+ Added 2nd animation type - \"RibbonDance\". Now available 2 animation types: \"RoundRobin\" (default) and \"RibbonDance\"\n+ Added selection of animation type in example application\n+ Improved animation quality by using float type coordinates instead of integer type\n+ Renamed param \"animationFacesCount\" to \"animationDetail\u0420\u040eoefficient\"\n\n\n## **v1.0.3:**\n+ Bug fixes\n\n\n## **v1.0.2:**\n+ Release on PyPI, now module is available using pip: 'pip install py-loading-screen'\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/a-s-akulov/py-loading-screen/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-loading-screen", "package_url": "https://pypi.org/project/py-loading-screen/", "platform": "", "project_url": "https://pypi.org/project/py-loading-screen/", "project_urls": {"Homepage": "https://github.com/a-s-akulov/py-loading-screen/"}, "release_url": "https://pypi.org/project/py-loading-screen/1.1.6/", "requires_dist": ["PyQt5 (>=5.0.0)"], "requires_python": ">=3.0", "summary": "Animated loading screen", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-loading-screen</h1>\n<p>Module for Python - animated loading screen\nUsed modules:</p>\n<ol>\n<li>asyncio</li>\n<li>math</li>\n<li>time.sleep</li>\n<li>PyQt5.QtCore, PyQt5.QtWidgets, PyQt5.QtGui</li>\n</ol>\n<p>Tested on python: 3.7.4, windows: x32, x64</p>\n<p><strong>Installing:</strong></p>\n<pre><code>$ pip install py-loading-screen\n</code></pre>\n<p><strong>import:</strong></p>\n<pre><code>$ from pyLoadingScreen import LoadingScreen\n</code></pre>\n<p>If by some reason you have not python interpreter - you can see compiled demo-application (windows): 'example\\compiled'</p>\n<pre><code>LoadingScreen(PyQt5.QtWidgets.QFrame)\n</code></pre>\n<h1><strong>Params:</strong></h1>\n<pre><code>texts = ['Loading', 'Loading.', 'Loading..', 'Loading...'],\ntextUpdateDelay = 0.75,\n\nparentWidget = None,\nwindowSize = (350, 350),\nmainStyleSheet = \"background-color: black; color: rgb(80, 0, 255);\",\nmainFrameWidth = 3,\ntextLabelStyleSheet = \"background-color: black; color: white; font: bold 18px;\",\n\nanimationType = \"RoundRobin\",       # Animation types available: \"RoundRobin\", \"RibbonDance\"\nanimationDetail\u0420\u040eoefficient = 20,\nanimationRGBColor = (255, 0, 0),\nanimationColorRainbow = True,\nanimationColorRainbowStep = 2,\nanimationColorRainbowMinValues = (0, 0, 0),\nanimationColorRainbowMaxValues = (255, 255, 255),\nanimationLineWidth = 3,\nanimationScale = 0.95,\nanimationCountStepsPerRound = 1440\n</code></pre>\n<h1><strong>Notes:</strong></h1>\n<pre><code>1. I recommend running this in a new thread. Anyway, you need to create instance of LoadingScreen at main thread, then start worker function in any thread.\n    If you want to start in new 'clear' thread - use 'worker' function, else if you wont to create task with asyncio - use 'worker_asyncio' coroutine.\n\n    !!! Variable with LoadingScreen instance must exist all time while script is running !!!\n\n    - New thread start full example:\n    \"\n        from pyLoadingScreen import LoadingScreen\n        from threading import Thread\n        from PyQt5 import QtWidgets\n\n        app = QtWidgets.QApplication([])\n        screen = LoadingScreen()\n\n        thread = Thread(target=screen.worker)\n        thread.start()\n\n        app.exec()\n     \"\n    - Asyncio create task example (in this case, you still can\u0432\u0402\u2122t use main thread for loop, becouse it will be busy by app.exec() loop (see above)):\n    \"\n        ...\n        self.screen = LoadingScreen()\n        loop = asyncio.get_event_loop()\n        asyncio.gather(self.screen.worker_async(), loop=loop)\n        ...\n    \"\n\n2. To stop work use 'exit' attribute of LoadingScreen instance or create attribute 'exit_' in 'worker' or 'worker_async' function.\n    Work is stop after some time after signal to exit. You can check LoadingScreen instance state by 'isRunning' attribute.\n    Example:\n    \"\n        from pyLoadingScreen import LoadingScreen\n        from threading import Thread\n        from PyQt5 import QtWidgets\n        from time import sleep\n\n        def kill_after_5_seconds(screenInstance: object):\n            sleep(5)\n            screenInstance.exit = True\n            screenInstance.worker.__dict__['exit_'] = True\n                    # Equivalent to 'self.screen.exit = True'\n            screenInstance.worker_async.__dict__['exit_'] = True\n                    # Equivalent to 'self.screen.exit = True',\n                    # but in this case - it will not take any effect,\n                    # because 'worker' is using instead ('thread = Thread(target=screen.worker)')\n\n            while True:\n                if screenInstance.isRunning:\n                    print(\"LoadingScreen is still running\")\n                else:\n                    print(\"LoadingScreen is not running now!\")\n                    print()\n                    input(\"Press ENTER to exit.\")\n                    break\n\n        app = QtWidgets.QApplication([])\n        screen = LoadingScreen()\n\n        thread = Thread(target=screen.worker)\n        thread.start()\n\n        threadMonitoring = Thread(target=kill_after_5_seconds, args=(screen,))\n        threadMonitoring.start()\n\n        app.exec()\n    \"\n\n\n3. If you set parentWidget - don't forget add LoadingScreen to parentWidget's layout!\n    Example:\n    \"\n        ...\n        self.screen = LoadingScreen(parentWidget=self.ui.myParentWidget)\n        self.ui.myParentWidget.layout().addWidget(self.screen)\n        ...\n    \"\n4. If animationColorRainbow == True, then param 'animationRGBColor' ignored\n\n5. If animationColorRainbow == False, then params ignored:\n    animationColorRainbowStep,\n    animationColorRainbowMinValues,\n    animationColorRainbowMaxValues\n\n6. animationCountStepsPerRound - speed of rotation. animationCountStepsPerRound increases - rotation speed decreases\n\n7. By some reason i can't create instance of LoadingScreen in Spyder (Anaconda, Python 3.7.4), but in outer program this work fine.\n</code></pre>\n<h1><strong>Versions:</strong></h1>\n<h2><strong>v1.1.6:</strong></h2>\n<ul>\n<li>Bug fixes</li>\n<li>Description has been supplemented</li>\n</ul>\n<h2><strong>v1.1.5:</strong></h2>\n<ul>\n<li>Restyled \"RibbonDance\" animation.</li>\n</ul>\n<h2><strong>v1.1.4:</strong></h2>\n<ul>\n<li>Added 2nd animation type - \"RibbonDance\". Now available 2 animation types: \"RoundRobin\" (default) and \"RibbonDance\"</li>\n<li>Added selection of animation type in example application</li>\n<li>Improved animation quality by using float type coordinates instead of integer type</li>\n<li>Renamed param \"animationFacesCount\" to \"animationDetail\u0420\u040eoefficient\"</li>\n</ul>\n<h2><strong>v1.0.3:</strong></h2>\n<ul>\n<li>Bug fixes</li>\n</ul>\n<h2><strong>v1.0.2:</strong></h2>\n<ul>\n<li>Release on PyPI, now module is available using pip: 'pip install py-loading-screen'</li>\n</ul>\n\n          </div>"}, "last_serial": 6887092, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "10d7123c2d417260cd367beb15e8daeb", "sha256": "37f9111cc63e6d33c21fc7ebe4966ee694391fea70d0174dca7a6ca69a87ac3b"}, "downloads": -1, "filename": "py_loading_screen-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10d7123c2d417260cd367beb15e8daeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19593, "upload_time": "2020-03-20T09:05:19", "upload_time_iso_8601": "2020-03-20T09:05:19.738606Z", "url": "https://files.pythonhosted.org/packages/76/3c/6fe8c39aebb09e4f8249b0560e2d4c0905135c5860d64d13661abc682944/py_loading_screen-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c43b822000b17867a441adca7eeb1a63", "sha256": "af68673bb794e67817dbdd82e04a2d18e3025a4131d4d172e866633fd473ad43"}, "downloads": -1, "filename": "py-loading-screen-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c43b822000b17867a441adca7eeb1a63", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6358, "upload_time": "2020-03-20T09:05:22", "upload_time_iso_8601": "2020-03-20T09:05:22.028868Z", "url": "https://files.pythonhosted.org/packages/d6/10/3f39724119d1e0229579e1904d386f9dac9701190e820982aefa8f0623b5/py-loading-screen-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "07f5a017f8d659efc90e6ec9d0150a84", "sha256": "e7ed01003ca37fcd22e3d98bab611a483bc538afd639e7d81b89ccd064e9422f"}, "downloads": -1, "filename": "py_loading_screen-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "07f5a017f8d659efc90e6ec9d0150a84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19652, "upload_time": "2020-03-20T09:30:22", "upload_time_iso_8601": "2020-03-20T09:30:22.022728Z", "url": "https://files.pythonhosted.org/packages/3a/a3/95ad388bae3af41caabcf22c8ee35bae374e4cf468390f32cab6d48f1551/py_loading_screen-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15b6509a8a10e39f01c8c5ae22983c52", "sha256": "eb881e72b3cb2751036cdce890d5c9c9e1b41e9b2a37970338fb5978762745a9"}, "downloads": -1, "filename": "py-loading-screen-1.0.2.tar.gz", "has_sig": false, "md5_digest": "15b6509a8a10e39f01c8c5ae22983c52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6385, "upload_time": "2020-03-20T09:30:22", "upload_time_iso_8601": "2020-03-20T09:30:22.899613Z", "url": "https://files.pythonhosted.org/packages/4b/08/6bc8d9e92204f5d5656fb5602e129482839249db5d6eccbad1c37b052b48/py-loading-screen-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ffd6c8f5c4e7e479de658ecf27f19894", "sha256": "4f1a7b5bc986acb299d7fc22e3fa8fb989c627ebdbc303cecaca5b6ca9568cf6"}, "downloads": -1, "filename": "py_loading_screen-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd6c8f5c4e7e479de658ecf27f19894", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 19730, "upload_time": "2020-03-23T13:11:25", "upload_time_iso_8601": "2020-03-23T13:11:25.204967Z", "url": "https://files.pythonhosted.org/packages/79/a4/a6d4250bb9c15c44534ece30819a429148325e9ec5918c511c51826c8625/py_loading_screen-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1c5cee80746a56739ed8ab379acd9f2", "sha256": "bf490d9f2ead1571e917b864787eac50d12e8fd7c46a0c68918749d573495eab"}, "downloads": -1, "filename": "py-loading-screen-1.0.3.tar.gz", "has_sig": false, "md5_digest": "c1c5cee80746a56739ed8ab379acd9f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6465, "upload_time": "2020-03-23T13:11:26", "upload_time_iso_8601": "2020-03-23T13:11:26.337236Z", "url": "https://files.pythonhosted.org/packages/d3/0e/d42fd3d56cd5e6d14633a5b259394b1e638715cd246dd8cee6f1b387424d/py-loading-screen-1.0.3.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "7aa3ee8bbab684604ee7ff3c1915c0fd", "sha256": "fe7f698970c36609a76bbf579e0af2d25b8c7ec2fd46c79553e601583d25c707"}, "downloads": -1, "filename": "py_loading_screen-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7aa3ee8bbab684604ee7ff3c1915c0fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21191, "upload_time": "2020-03-25T11:40:03", "upload_time_iso_8601": "2020-03-25T11:40:03.164497Z", "url": "https://files.pythonhosted.org/packages/15/1a/f85f83580f40ad44fc2c950bafb94368de273c273d18ca5f4a9ac4ed67c4/py_loading_screen-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4156de2d0395d7c683d632c59f088381", "sha256": "3b8335a282b887bcfede15f63b9489a49141a42b4292135f16159ddd94c50324"}, "downloads": -1, "filename": "py-loading-screen-1.1.3.tar.gz", "has_sig": false, "md5_digest": "4156de2d0395d7c683d632c59f088381", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8258, "upload_time": "2020-03-25T11:40:04", "upload_time_iso_8601": "2020-03-25T11:40:04.028078Z", "url": "https://files.pythonhosted.org/packages/db/4a/c8041d0ecc93f0bbd5b9dc1db3978c853bd7ff52db8d2f6974eb814cfedf/py-loading-screen-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "baa13da35d08fb3f93235398a9b85aa1", "sha256": "9df065176e9510bc879b2750d8ae75e727d45b92b3ebd6c45eed6ba6075e1d44"}, "downloads": -1, "filename": "py_loading_screen-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "baa13da35d08fb3f93235398a9b85aa1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21211, "upload_time": "2020-03-25T12:25:10", "upload_time_iso_8601": "2020-03-25T12:25:10.085169Z", "url": "https://files.pythonhosted.org/packages/74/cb/a57232ba09f839d52ff9d343554626fb706b89ba0d28156b2ce9868d5269/py_loading_screen-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2092508e97f7adf64c9c6f0a27dd5d7c", "sha256": "b96df4426f602e83ec546a649a3cf4f8ca19188608319c617baa2eb205ed8f38"}, "downloads": -1, "filename": "py-loading-screen-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2092508e97f7adf64c9c6f0a27dd5d7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8284, "upload_time": "2020-03-25T12:25:11", "upload_time_iso_8601": "2020-03-25T12:25:11.213303Z", "url": "https://files.pythonhosted.org/packages/28/b4/0f732448f01785a0ce8d7739d3cfe0f672b50e3592269189f4a58a57f934/py-loading-screen-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "f8abfd0cd5601348f108adaf3bccad03", "sha256": "d9cdadd366fce65d21e035bbe0bce40aeda9c9452bf4489ba76c597a9e683206"}, "downloads": -1, "filename": "py_loading_screen-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f8abfd0cd5601348f108adaf3bccad03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21432, "upload_time": "2020-03-25T14:08:25", "upload_time_iso_8601": "2020-03-25T14:08:25.962275Z", "url": "https://files.pythonhosted.org/packages/bf/97/67d0f7eb1f4f38338f65f8aa8f97a35f65e66edaa57ca3478d4f3fb4d53a/py_loading_screen-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c94f3f1b816f6b3b4cc81e69d831216f", "sha256": "8530c52bb185b706a32d2ad6d5c614cfe63f96984d13354397ca3b71fd03b66f"}, "downloads": -1, "filename": "py-loading-screen-1.1.5.tar.gz", "has_sig": false, "md5_digest": "c94f3f1b816f6b3b4cc81e69d831216f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8522, "upload_time": "2020-03-25T14:08:27", "upload_time_iso_8601": "2020-03-25T14:08:27.069165Z", "url": "https://files.pythonhosted.org/packages/9b/ef/8a951a5e15b84169a62c69f411b6b04ab3010eb88873f883826bc487409a/py-loading-screen-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "c6baf50556ce7339f3a00444bda33e04", "sha256": "891a31082dbe66626467be87407e7b282c35e0b873290773faa03ba5bbcfb638"}, "downloads": -1, "filename": "py_loading_screen-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c6baf50556ce7339f3a00444bda33e04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21029, "upload_time": "2020-03-26T07:41:00", "upload_time_iso_8601": "2020-03-26T07:41:00.633083Z", "url": "https://files.pythonhosted.org/packages/6a/34/bd00a327b551cafab726cd67f539cdd45fa2eaf5d85258d52aa44887d980/py_loading_screen-1.1.6-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6baf50556ce7339f3a00444bda33e04", "sha256": "891a31082dbe66626467be87407e7b282c35e0b873290773faa03ba5bbcfb638"}, "downloads": -1, "filename": "py_loading_screen-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c6baf50556ce7339f3a00444bda33e04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 21029, "upload_time": "2020-03-26T07:41:00", "upload_time_iso_8601": "2020-03-26T07:41:00.633083Z", "url": "https://files.pythonhosted.org/packages/6a/34/bd00a327b551cafab726cd67f539cdd45fa2eaf5d85258d52aa44887d980/py_loading_screen-1.1.6-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:02:55 2020"}