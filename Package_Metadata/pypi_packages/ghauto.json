{"info": {"author": "Slack Tester", "author_email": "mrslackit@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Library: ghauto\n\nThis is a tool for Slack API handling.\n\nSource documentation of api is available [here](https://api.slack.com/)\n\n\n# Installation\n\n```sh\npip install ghauto\n```\n\n# Usage\n\n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    channel = slack.get_channels_api().create('new_order')\n\n    if channel:\n        print('Yupi!')\n```\n\n# Interface\n\n## Channels\n\nSlack API wrapper that is handling channels category\n\n[API reference](https://api.slack.com/methods#channels)\n\n### Usage \n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    channels_api = slack.get_channels_api()\n```\n### Available methods\n#### list()\nLists all channels in a Slack team.\nChannels depends on token so if you want to list users use user token\ninstead of SlackApi admin token\n\nSlack API : [channels.list](https://api.slack.com/methods/channels.list)\n\n```\nArgs:\n    limit: optional page length ( default: 1000 )\n    cursor: optional message list cursor for pagination\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channels :py:class:`typing.Dict`\n    with two keys: channels (list of channels) and cursor for pagination\n    when success\n```\n\n#### create()\nCreate new channel with desired name\n\nSlack API : [channels.create](https://api.slack.com/methods/channels.create)\n```\nArgs:\n    channel: channel name, can only contain lowercase letters, numbers,\n        hyphens, and underscores, and must be 21 characters or less\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channel info as :py:class:`typing.Dict`\n    when success\n```            \n\n#### onboard()\nInvite users to all the channels available in token scope except general\n\nSlack API : Not available\n```\nArgs:\n    users_ids: :py:class:`typing.List` of slack user ids\n    cursor: pagination cursor for retry etc.\n    invite_token: optional auth token that will overwrite SlackApi token\n        used for channel invitation\nReturns:\n    boolean success status\n```\n\n#### invite()\nInvite user to the channel\n\nSlack API : [channels.invite](https://api.slack.com/methods/channels.invite)\n```\nArgs:\n    channel: Slack channel id like CXJSD234G\n    user: Slack user id like UXS65F48\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channel info as :py:class:`typing.Dict`\n    when success\n```\n\n#### info()\nGet channel info by channel id\n\nSlack API : [channels.info](https://api.slack.com/methods/channels.info)\n```\nArgs:\n    channel_id: Slack channel id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if channel_id not found or channel info\n    as :py:class:`typing.Dict` when success\n```\n\n#### channel_info()\nFind channel info by channel name\n\nSlack API : Not available\n```\nArgs:\n    channel_name: Slack channel name\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if channel_name is not found or channel info\n    as :py:class:`typing.Dict` when success\n```\n\n#### history()\nFetches history of messages and events from a channel.\n\nSlack API : [channels.history](https://api.slack.com/methods/channels.history)\n```\nArgs:\n    channel: Slack channel id like CXJSF234X\n    count: number of messages per page\n    latest: End of time range\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if error occurred or number of removed messages\n```\n\n#### clear_history()\nChannel history cleaner\nReads history and removes messages one by one\n\nSlack API : Not available\n```\nArgs:\n    channel_name: Slack channel name\n    chat: Chat api handler\nReturns:\n    Number of removed messages\n```\n\n## Groups\n\nSlack API wrapper that is handling groups category\n\n[API reference](https://api.slack.com/methods#groups)\n\n### Usage \n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    channels_api = slack.get_groups_api()\n```\n### Available methods\n#### list()\nLists all groups aka private channel in a Slack team.\nGroups depends on token so if you want to list users use user token\ninstead of SlackApi admin token\n\nSlack API : [groups.list](https://api.slack.com/methods/groups.list)\n\n```\nArgs:\n    limit: optional page length ( default: 1000 )\n    cursor: optional message list cursor for pagination\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channels :py:class:`typing.Dict`\n    with two keys: groups (list of groups) and cursor for pagination\n    when success\n```\n\n#### create()\nCreate new group with desired name\n\nSlack API : [groups.create](https://api.slack.com/methods/groups.create)\n```\nArgs:\n    group: group name, can only contain lowercase letters, numbers,\n        hyphens, and underscores, and must be 21 characters or less\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or group info as :py:class:`typing.Dict`\n    when success\n```            \n\n#### onboard()\nInvite users to all the groups available in token scope except general\n\nSlack API : Not available\n```\nArgs:\n    users_ids: :py:class:`typing.List` of slack user ids\n    cursor: pagination cursor for retry etc.\n    invite_token: optional auth token that will overwrite SlackApi token\n        used for group invitation\nReturns:\n    boolean success status\n```\n\n#### invite()\nInvite user to the group\n\nSlack API : [groups.invite](https://api.slack.com/methods/groups.invite)\n```\nArgs:\n    group: Slack group id like GXJSD234G\n    user: Slack user id like UXS65F48\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or group info as :py:class:`typing.Dict`\n    when success\n```\n\n#### info()\nGet group info by group id\n\nSlack API : [groups.info](https://api.slack.com/methods/groups.info)\n```\nArgs:\n    group_id: Slack group id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if group_id not found or group info\n    as :py:class:`typing.Dict` when success\n```\n\n#### group_info()\nFind group info by group name\n\nSlack API : Not available\n```\nArgs:\n    group_name: Slack channel name\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if group_name is not found or channel info\n    as :py:class:`typing.Dict` when success\n```\n\n#### history()\nFetches history of messages and events from a group.\n\nSlack API : [groups.history](https://api.slack.com/methods/groups.history)\n```\nArgs:\n    group: Slack group id like GXJSD234G\n    count: number of messages per page\n    latest: End of time range\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if error occurred or number of removed messages\n```\n\n#### clear_history()\nGroup history cleaner\nReads history and removes messages one by one\n\nSlack API : Not available\n```\nArgs:\n    group_name: Slack group name\n    chat: chat api handler\nReturns:\n    Number of removed messages\n```\n\n## Users\n\nSlack API wrapper that is handling users category\n\n[API reference](https://api.slack.com/methods#users)\n\n### Usage \n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    users_api = slack.get_users_api()\n```\n### Available methods\n\n#### info()\nGets information about the user\n\nSlack API : [users.info](https://api.slack.com/methods/users.info)\n```\nArgs:\n    user: Slack user id like UXS65F48\n    locale: should response contain locale info\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or user info as :py:class:`typing.Dict`\n    when success\n```\n\n#### validate_name()\nValidate users name field\n\nSlack API : This method is not documented\n```\nArgs:\n    name: name to be validated\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or boolean validity result\n```\n\n#### invite()\nInvite user to the workspace\n\nSlack API : This method is not documented\n```\nArgs:\n    email: account email,\n    firstname: account first name\n    lastname: account last name\n    channels: comma separated list of channels (id's) to be invited,\n    restricted: restrict to guest that can use multiple channels\n    ultra_restricted: restrict to guest that can use single channel\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or boolean validity result\n```\n\n## Chat\n\nSlack API wrapper that is handling chat category\n\n[API reference](https://api.slack.com/methods#chat)\n\n### Usage \n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    chat_api = slack.get_chat_api()\n```\n### Available methods\n\n#### delete()\nDeletes a message\n\nSlack API : [chat.delete](https://api.slack.com/methods/chat.delete)\n```\nArgs:\n    channel: Slack channel id like CXJSD234G\n    ts: Message id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    boolean operation status\n```\n\n## Signup\n\nSlack API wrapper that is handling signup category\n\nThis category is not documented in Slack doc \n\n### Usage \n```python\n    from ghauto.client import SlackClient\n\n    slack = SlackClient(slack_token='xoxp-...')\n    chat_api = slack.get_signup_api()\n```\n### Available methods\n\n#### create_user()\nCreate a user with invitation code\n\nThis method is not documented in Slack doc\n\n```\nArgs:\n    code: invitation code\n    username: user name that wil be used fo real and display name\n    passwd: user password to be set\n    locale: locale for user\n    tos: TOS key to be accepted\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or user info as :py:class:`typing.Dict`\n    when success\n```\n\n# Deployment how to\n\nAvailable [here](https://packaging.python.org/tutorials/packaging-projects/)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ghauto", "package_url": "https://pypi.org/project/ghauto/", "platform": "", "project_url": "https://pypi.org/project/ghauto/", "project_urls": null, "release_url": "https://pypi.org/project/ghauto/0.1.0/", "requires_dist": ["requests (>=2.9.11)", "typing (>=3.5.3.0)", "responses (>=0.9.0)"], "requires_python": "", "summary": "Slack API wrapper", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Library: ghauto</h1>\n<p>This is a tool for Slack API handling.</p>\n<p>Source documentation of api is available <a href=\"https://api.slack.com/\" rel=\"nofollow\">here</a></p>\n<h1>Installation</h1>\n<pre>pip install ghauto\n</pre>\n<h1>Usage</h1>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_channels_api</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'new_order'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">channel</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Yupi!'</span><span class=\"p\">)</span>\n</pre>\n<h1>Interface</h1>\n<h2>Channels</h2>\n<p>Slack API wrapper that is handling channels category</p>\n<p><a href=\"https://api.slack.com/methods#channels\" rel=\"nofollow\">API reference</a></p>\n<h3>Usage</h3>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">channels_api</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_channels_api</span><span class=\"p\">()</span>\n</pre>\n<h3>Available methods</h3>\n<h4>list()</h4>\n<p>Lists all channels in a Slack team.\nChannels depends on token so if you want to list users use user token\ninstead of SlackApi admin token</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/channels.list\" rel=\"nofollow\">channels.list</a></p>\n<pre><code>Args:\n    limit: optional page length ( default: 1000 )\n    cursor: optional message list cursor for pagination\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channels :py:class:`typing.Dict`\n    with two keys: channels (list of channels) and cursor for pagination\n    when success\n</code></pre>\n<h4>create()</h4>\n<p>Create new channel with desired name</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/channels.create\" rel=\"nofollow\">channels.create</a></p>\n<pre><code>Args:\n    channel: channel name, can only contain lowercase letters, numbers,\n        hyphens, and underscores, and must be 21 characters or less\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channel info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h4>onboard()</h4>\n<p>Invite users to all the channels available in token scope except general</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    users_ids: :py:class:`typing.List` of slack user ids\n    cursor: pagination cursor for retry etc.\n    invite_token: optional auth token that will overwrite SlackApi token\n        used for channel invitation\nReturns:\n    boolean success status\n</code></pre>\n<h4>invite()</h4>\n<p>Invite user to the channel</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/channels.invite\" rel=\"nofollow\">channels.invite</a></p>\n<pre><code>Args:\n    channel: Slack channel id like CXJSD234G\n    user: Slack user id like UXS65F48\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channel info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h4>info()</h4>\n<p>Get channel info by channel id</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/channels.info\" rel=\"nofollow\">channels.info</a></p>\n<pre><code>Args:\n    channel_id: Slack channel id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if channel_id not found or channel info\n    as :py:class:`typing.Dict` when success\n</code></pre>\n<h4>channel_info()</h4>\n<p>Find channel info by channel name</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    channel_name: Slack channel name\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if channel_name is not found or channel info\n    as :py:class:`typing.Dict` when success\n</code></pre>\n<h4>history()</h4>\n<p>Fetches history of messages and events from a channel.</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/channels.history\" rel=\"nofollow\">channels.history</a></p>\n<pre><code>Args:\n    channel: Slack channel id like CXJSF234X\n    count: number of messages per page\n    latest: End of time range\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if error occurred or number of removed messages\n</code></pre>\n<h4>clear_history()</h4>\n<p>Channel history cleaner\nReads history and removes messages one by one</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    channel_name: Slack channel name\n    chat: Chat api handler\nReturns:\n    Number of removed messages\n</code></pre>\n<h2>Groups</h2>\n<p>Slack API wrapper that is handling groups category</p>\n<p><a href=\"https://api.slack.com/methods#groups\" rel=\"nofollow\">API reference</a></p>\n<h3>Usage</h3>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">channels_api</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_groups_api</span><span class=\"p\">()</span>\n</pre>\n<h3>Available methods</h3>\n<h4>list()</h4>\n<p>Lists all groups aka private channel in a Slack team.\nGroups depends on token so if you want to list users use user token\ninstead of SlackApi admin token</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/groups.list\" rel=\"nofollow\">groups.list</a></p>\n<pre><code>Args:\n    limit: optional page length ( default: 1000 )\n    cursor: optional message list cursor for pagination\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or channels :py:class:`typing.Dict`\n    with two keys: groups (list of groups) and cursor for pagination\n    when success\n</code></pre>\n<h4>create()</h4>\n<p>Create new group with desired name</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/groups.create\" rel=\"nofollow\">groups.create</a></p>\n<pre><code>Args:\n    group: group name, can only contain lowercase letters, numbers,\n        hyphens, and underscores, and must be 21 characters or less\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or group info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h4>onboard()</h4>\n<p>Invite users to all the groups available in token scope except general</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    users_ids: :py:class:`typing.List` of slack user ids\n    cursor: pagination cursor for retry etc.\n    invite_token: optional auth token that will overwrite SlackApi token\n        used for group invitation\nReturns:\n    boolean success status\n</code></pre>\n<h4>invite()</h4>\n<p>Invite user to the group</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/groups.invite\" rel=\"nofollow\">groups.invite</a></p>\n<pre><code>Args:\n    group: Slack group id like GXJSD234G\n    user: Slack user id like UXS65F48\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or group info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h4>info()</h4>\n<p>Get group info by group id</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/groups.info\" rel=\"nofollow\">groups.info</a></p>\n<pre><code>Args:\n    group_id: Slack group id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if group_id not found or group info\n    as :py:class:`typing.Dict` when success\n</code></pre>\n<h4>group_info()</h4>\n<p>Find group info by group name</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    group_name: Slack channel name\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if group_name is not found or channel info\n    as :py:class:`typing.Dict` when success\n</code></pre>\n<h4>history()</h4>\n<p>Fetches history of messages and events from a group.</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/groups.history\" rel=\"nofollow\">groups.history</a></p>\n<pre><code>Args:\n    group: Slack group id like GXJSD234G\n    count: number of messages per page\n    latest: End of time range\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if error occurred or number of removed messages\n</code></pre>\n<h4>clear_history()</h4>\n<p>Group history cleaner\nReads history and removes messages one by one</p>\n<p>Slack API : Not available</p>\n<pre><code>Args:\n    group_name: Slack group name\n    chat: chat api handler\nReturns:\n    Number of removed messages\n</code></pre>\n<h2>Users</h2>\n<p>Slack API wrapper that is handling users category</p>\n<p><a href=\"https://api.slack.com/methods#users\" rel=\"nofollow\">API reference</a></p>\n<h3>Usage</h3>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">users_api</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_users_api</span><span class=\"p\">()</span>\n</pre>\n<h3>Available methods</h3>\n<h4>info()</h4>\n<p>Gets information about the user</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/users.info\" rel=\"nofollow\">users.info</a></p>\n<pre><code>Args:\n    user: Slack user id like UXS65F48\n    locale: should response contain locale info\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or user info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h4>validate_name()</h4>\n<p>Validate users name field</p>\n<p>Slack API : This method is not documented</p>\n<pre><code>Args:\n    name: name to be validated\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or boolean validity result\n</code></pre>\n<h4>invite()</h4>\n<p>Invite user to the workspace</p>\n<p>Slack API : This method is not documented</p>\n<pre><code>Args:\n    email: account email,\n    firstname: account first name\n    lastname: account last name\n    channels: comma separated list of channels (id's) to be invited,\n    restricted: restrict to guest that can use multiple channels\n    ultra_restricted: restrict to guest that can use single channel\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or boolean validity result\n</code></pre>\n<h2>Chat</h2>\n<p>Slack API wrapper that is handling chat category</p>\n<p><a href=\"https://api.slack.com/methods#chat\" rel=\"nofollow\">API reference</a></p>\n<h3>Usage</h3>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">chat_api</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_chat_api</span><span class=\"p\">()</span>\n</pre>\n<h3>Available methods</h3>\n<h4>delete()</h4>\n<p>Deletes a message</p>\n<p>Slack API : <a href=\"https://api.slack.com/methods/chat.delete\" rel=\"nofollow\">chat.delete</a></p>\n<pre><code>Args:\n    channel: Slack channel id like CXJSD234G\n    ts: Message id\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    boolean operation status\n</code></pre>\n<h2>Signup</h2>\n<p>Slack API wrapper that is handling signup category</p>\n<p>This category is not documented in Slack doc</p>\n<h3>Usage</h3>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">ghauto.client</span> <span class=\"kn\">import</span> <span class=\"n\">SlackClient</span>\n\n    <span class=\"n\">slack</span> <span class=\"o\">=</span> <span class=\"n\">SlackClient</span><span class=\"p\">(</span><span class=\"n\">slack_token</span><span class=\"o\">=</span><span class=\"s1\">'xoxp-...'</span><span class=\"p\">)</span>\n    <span class=\"n\">chat_api</span> <span class=\"o\">=</span> <span class=\"n\">slack</span><span class=\"o\">.</span><span class=\"n\">get_signup_api</span><span class=\"p\">()</span>\n</pre>\n<h3>Available methods</h3>\n<h4>create_user()</h4>\n<p>Create a user with invitation code</p>\n<p>This method is not documented in Slack doc</p>\n<pre><code>Args:\n    code: invitation code\n    username: user name that wil be used fo real and display name\n    passwd: user password to be set\n    locale: locale for user\n    tos: TOS key to be accepted\n    token: optional auth token that will overwrite SlackApi token\nReturns:\n    None if data is invalid or user info as :py:class:`typing.Dict`\n    when success\n</code></pre>\n<h1>Deployment how to</h1>\n<p>Available <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">here</a></p>\n\n          </div>"}, "last_serial": 6178930, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f483d5ecb0c91acfddca2f6eb514072c", "sha256": "6008a3d4a05ce2b876d75bb11bc07a40be8d60cb5503416b33c5f751f906473a"}, "downloads": -1, "filename": "ghauto-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f483d5ecb0c91acfddca2f6eb514072c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14321, "upload_time": "2019-11-22T05:17:05", "upload_time_iso_8601": "2019-11-22T05:17:05.913032Z", "url": "https://files.pythonhosted.org/packages/82/6d/a6d038b7bc5ccfb43d6cb6b177cb5e407a45b0332ee8dd1b60c69012d974/ghauto-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f12166e5b7dd3795688cd2dbe114df49", "sha256": "1ef9011531b0fa43450492501a4b88403a38497716e7116cecd50456b8ce00e8"}, "downloads": -1, "filename": "ghauto-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f12166e5b7dd3795688cd2dbe114df49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10336, "upload_time": "2019-11-22T05:17:08", "upload_time_iso_8601": "2019-11-22T05:17:08.326579Z", "url": "https://files.pythonhosted.org/packages/c1/82/ef5127bf1426e1e7bb60968fb32b2e74a5ad3a164e396646d4148dd822f0/ghauto-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f483d5ecb0c91acfddca2f6eb514072c", "sha256": "6008a3d4a05ce2b876d75bb11bc07a40be8d60cb5503416b33c5f751f906473a"}, "downloads": -1, "filename": "ghauto-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f483d5ecb0c91acfddca2f6eb514072c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14321, "upload_time": "2019-11-22T05:17:05", "upload_time_iso_8601": "2019-11-22T05:17:05.913032Z", "url": "https://files.pythonhosted.org/packages/82/6d/a6d038b7bc5ccfb43d6cb6b177cb5e407a45b0332ee8dd1b60c69012d974/ghauto-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f12166e5b7dd3795688cd2dbe114df49", "sha256": "1ef9011531b0fa43450492501a4b88403a38497716e7116cecd50456b8ce00e8"}, "downloads": -1, "filename": "ghauto-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f12166e5b7dd3795688cd2dbe114df49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10336, "upload_time": "2019-11-22T05:17:08", "upload_time_iso_8601": "2019-11-22T05:17:08.326579Z", "url": "https://files.pythonhosted.org/packages/c1/82/ef5127bf1426e1e7bb60968fb32b2e74a5ad3a164e396646d4148dd822f0/ghauto-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:34 2020"}