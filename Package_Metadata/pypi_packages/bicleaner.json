{"info": {"author": "Prompsit Language Engineering", "author_email": "info@prompsit.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: Linguistic"], "description": "\n# bicleaner\n\n![License](https://img.shields.io/badge/License-GPLv3-blue.svg)\n\n\nBicleaner (bicleaner-classify) is a tool in Python that aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0). Sentence pairs considered very noisy are scored with 0.\n\nAlthough a training tool (bicleaner-train) is provided, you may want to use the available ready-to-use language packages. \nPlease, visit https://github.com/bitextor/bicleaner-data/releases/latest to download the latest language packages.\nVisit our [Wiki](https://github.com/bitextor/bicleaner/wiki/How-to-train-your-Bicleaner) for a detailed example on Bicleaner training.\n\n## Citation \n\nIf you find Bicleaner useful, please consider citing the following paper:\n\n> V. M. S\u00e1nchez-Cartagena, M. Ba\u00f1\u00f3n, S. Ortiz-Rojas and G. Ram\u00edrez-S\u00e1nchez,\\\n> \"[Prompsit's submission to WMT 2018 Parallel Corpus Filtering shared task](http://www.statmt.org/wmt18/pdf/WMT116.pdf)\",\\\n>in *Proceedings of the Third Conference on Machine Translation, Volume 2: Shared Task Papers*.\\\n>Brussels, Belgium: Association for Computational Linguistics, October 2018\n\n```latex\n@InProceedings{prompsit:2018:WMT,\n  author    = { V\\'{i}ctor M. S\\'{a}nchez-Cartagena and Marta Ba{\\~n}\\'{o}n and Sergio Ortiz-Rojas and Gema Ram\\'{i}rez-S\\'{a}nchez},\n  title     = {Prompsit's submission to WMT 2018 Parallel Corpus Filtering shared task},\n  booktitle = {Proceedings of the Third Conference on Machine Translation, Volume 2: Shared Task Papers},\n  month     = {October},\n  year      = {2018},\n  address   = {Brussels, Belgium},\n  publisher = {Association for Computational Linguistics}\n}\n```\n\n## Installation & Requirements\n\nBicleaner works with Python and can be instaled with `pip`:\n\n```bash\npython3.7 -m pip install bicleaner\n```\n\nBicleaner requires the [KenLM](https://github.com/kpu/kenlm) Python bindings with support for 7-gram language models. You can easily install\nthem by running the following commands:\n\n```bash\ngit clone https://github.com/kpu/kenlm\ncd kenlm\npython3.7 -m pip install . --install-option=\"--max_order 7\"\nmkdir -p build && cd build\ncmake .. -DKENLM_MAX_ORDER=7 -DCMAKE_INSTALL_PREFIX:PATH=/your/prefix/path\nmake -j all install\n```  \nThe remaining extra modules required by Bicleaner will be automatically downloaded and installed/upgraded (if required) with the first command.\n\nAfter installation, four binary files (`bicleaner-train`,  `bicleaner-train-lite`, `bicleaner-classify` and `bicleaner-classify-lite`) will be located in your `python/installation/prefix/bin` directory. This is usually `$HOME/.local/bin` or `/usr/local/bin/`.\n\n## Cleaning\n\n`bicleaner-classify` aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0). Sentence pairs considered very noisy are scored with 0.\n\nBy default, the input file  (the parallel corpus to be classified) must contain at least four columns, being:\n\n* col1: URL 1\n* col2: URL 2\n* col3: Source sentence\n* col4: Target sentence\n\nbut the source and target sentences column index can be customized by using the `--scol`and `--tcol` flags.\n\nAny extra columns will be ignored.\n\nThe generated output file will contain the same lines and columns that the original input file had, \nadding an extra column containing the Bicleaner classifier score.\n\nThis tool can be run with\n\n```bash\nbicleaner-classify [-h]\n                   [-S SOURCE_TOKENISER_PATH]\n                   [-T TARGET_TOKENISER_PATH] \n                   [--scol SCOL]\n                   [--tcol TCOL] \n                   [--tmp_dir TMP_DIR]\n                   [-b BLOCK_SIZE] \n                   [-p PROCESSES] \n                   [-d DISCARDED_TUS]\n                   [--threshold THRESHOLD]\n                   [--lm_threshold LM_THRESHOLD] \n                   [--score_only]\n                   [--disable_hardrules]\n                   [--disable_lm_filter]\n                   [-q] \n                   [--debug] \n                   [--logfile LOGFILE] \n                   [-v]\n                   input \n                   [output] \n                   metadata\n```\n\n### Parameters\n\n* positional arguments:\n  * input: Tab-separated files to be classified  (line format: URL1 URL2 SOURCE_SENTENCE TARGET_SENTENCE [EXTRA_COLUMNS], tab-separated). When input is -, reads standard input.\n  * output: Output of the classification (default: standard output). When output is -, writes standard input.\n  * metadata: Training metadata (YAML file), generated by `bicleaner-train` or [downloaded](https://github.com/bitextor/bicleaner-data/releases/latest) as a part of a language pack. You just need to untar the language pack for the pair of languages of the file you want to clean. The tar file contains a YAML metadata file.  \n* optional arguments:\n  * -h, --help: show this help message and exit\n* Optional:\n  * -S SL_TOKENIZER_PATH: Source language tokenizer absolute path. If not given, Moses tokenizer is used.\n  * -T TL_TOKENIZER_PATH: Target language tokenizer absolute path. If not given, Moses tokenizer is used.\n  * --scol SCOL           Source sentence column (starting in 1) (default: 3)\n  * --tcol TCOL           Target sentence column (starting in 1) (default: 4)\n  * --tmp_dir TMP_DIR: Temporary directory where creating the temporary files of this program (default: default system temp dir, defined by the environment variable TMPDIR in Unix)\n  * -b BLOCK_SIZE, --block_size BLOCK_SIZE Sentence pairs per block (default: 10000)\n  * -p PROCESSES, --processes PROCESSES: Number of processes to use (default: all CPUs minus one)\n  * -d DISCARDED_TUS, --discarded_tus DISCARDED_TUS: TSV file with discarded TUs. Discarded TUs by the classifier are written in this file in TSV file. (default: None)\n  * --threshold THRESHOLD: Threshold for classifier. If accuracy histogram is present in metadata, the interval for max value will be given as a default instead the current default. (default: 0.5)\n * --lm_threshold LM_THRESHOLD: Threshold for language model fluency scoring. All sentence pairs whose LM fluency score falls below the threshold are removed (classifier score set to 0), unless the option --keep_lm_result is set. (default: 0.5)\n  * --score_only: Only output one column which is the bicleaner score (default: False)\n  * --disable_hardrules: Disables the bicleaner_hardrules filtering (only bicleaner_classify is applied) (default: False)\n\n* Logging:\n  * -q, --quiet: Silent logging mode (default: False)\n  * --debug: Debug logging mode (default: False)\n  * --logfile LOGFILE: Store log to a file (default: <_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>)\n  * -v, --version: show version of this script and exit\n\n### Example\n\n```bash\nbicleaner-classify  \\\n        corpus.en-es.raw  \\\n        corpus.en-es.classifed  \\\n        training.en-es.yaml \n```\n\nThis will read the \"corpus.en-es.raw\" file, \nclassify it with the classifier indicated in the \"training.en-es.yaml\" metadata file,\nwriting the result of the classification in the \"corpus.en-es.classified\" file.\nEach line of the new file will contain the same content as the input file, adding a column with the score given by the Bicleaner classifier.\n\n### Automatic test\n\nWe included a small test corpus and a script to check that your Bicleaner classifier is working as expected. \nIn order to use it, just run:\n\n```bash\npython3.7 -m pytest -s tests/bicleaner_test.py\n```\n\nThis will download the required language pack, classify the provided test corpus, and check the resulting classification scores. If everything went as expected, the output will be \"1 passed in XX.XX seconds\".  All downloaded data will be removed at the end of the testing session.\n\n## Training classifiers\n\nIn case you need to train a new classifier (i.e. because it is not available in the language packs provided at [bicleaner-data](https://github.com/bitextor/bicleaner-data/releases/latest)), you can use `bicleaner-train` .\n`bicleaner-train` is a Python3 tool that allows you to train a classifier which predicts \nwhether a pair of sentences are mutual translations or not and discards too noisy sentence pairs. Visit our [Wiki](https://github.com/bitextor/bicleaner/wiki/How-to-train-your-Bicleaner) for a detailed example on Bicleaner training.\n\n### Requirements \n\nIn order to train a new classifier, you must provide:\n* A clean parallel corpus (100k pairs of sentences is the recommended size)\n* SL-to-TL and TL-to-SL gzipped probabilistic bilingual dictionaries. You can check their format by downloading any of the available language packs\n   * The SL-to-TL probabilistic bilingual dictionary must contain one entry per line. Each entry must contain the following 3 fields, split by space, in this order: TL word, SL word, probability.\n   * The TL-to-SL probabilistic bilingual dictionary must contain one entry per line. Each entry must contain the following 3 fields, split by space, in this order: SL word, TL word, probability.\n   * We recommend filtering out entries with a very low probability: removing those with a probability 10 times lower than the maximum translation probability for each word speeds up the process and does not decrease accuracy.\n   * Prior to inferring the probabilistic dictionaries, sentences must be tokenizer with the Moses tokenizer (with the `-a` flag) and lowercased.\n   * You can uses Moses and MGIZA++ to obtain probabilistic dictionaries from a parallel corpus.\n\nOptionally, if you want the classifier to include an improved fluency filter based on language models, you must also provide:\n* A monolingual corpus made ONLY of noisy sentences in the SL (100k sentences is the recommended size)\n* A monolingual corpus made ONLY of noisy sentences in the TL (100k sentences is the recommended size)\n\nIf not provided, since Bicleaner `0.13`, noisy corpora is produced synthetically from the training corpus.\n\nMoreover, **`lmplz`, the command to train a KenLM language model must be in `PATH`**. See https://github.com/kpu/kenlm for instructions about its compilation and installation.\n\nIn principle, if you want to use Bicleaner to clean a partially noisy corpus, it could be difficult to find a corpus made solely of noisy sentences. Fortunately, there are two options available with Bicleaner: \n\n### Extracting noisy sentences from an existing corpus with heuristic rules\n\nGiven a parallel corpus, you use `bicleaner-hardrules` to extract some of its noisiest sentences using heuristic rules by running the following command:\n\n```bash\n  bicleaner-hardrules [-h]\n                      [--annotated_output]\n                      -s SOURCE_LANG \n                      -t TARGET_LANG\n                      [--tmp_dir TMP_DIR]\n                      [-b BLOCK_SIZE]\n                      [-p PROCESSES]\n                      [--\n                      _lang_ident]\n                      [--scol SCOL]\n                      [--tcol TCOL]\n                      [--disable_lm_filter] \n                      [--metadata METADATA]\n                      [--lm_threshold LM_THRESHOLD]\n                      [-q] \n                      [--debug]\n                      [--logfile LOGFILE]\n                      [input]\n                      [output]\n```\n\nwhere `INPUT_FILE` contains a sentence-aligned parallel corpus, with a sentence pair per line. Sentences are split by tab. `OUTPUT_FILE` will contain all the input sentences, with an extra score column with `0` (if the sentence is noisy and should be discarded) or `1` (if the sentence is ok). When the `--annotated_output` flag is in use, `OUTPUT_FILE` will contain another extra column, specifying the heuristic rule applied to decide discarding each sentence (or `keep`, if the sentence is ok and should not be discarded). If the `--disable_lang_ident` flag is in use, rules that require language identification are not used. '--scol' and '--tcol' allow to indicate which columns contains source and target in the input file (default: `1`and `2`, respectively).\n\nIn order to use the LM filtering, you must provide the `--metadata` (it is: the .yaml file generated by Bicleaner training).\nTo disable LM filtering, just use the  `--disable_lm_filter` flag.\n\nYou can then obtain the monolingual noisy corpora by \"cutting\" the appropriate columns (after running `bicleaner-hardrules` with the `--annotated_output` flag). Asuming scol=1 and tcol=2, and no more columns in the input corpus (so the hardrules score is the 3rd column in the output):\n\n```bash\ncat OUTPUT_FILE | awk -F'\\t' '{if ($3 == 0) print $1 }' > MONOLINGUAL_NOISY.SOURCE_LANG\ncat OUTPUT_FILE | awk -F'\\t' '{if ($3 == 0) print $2 }' > MONOLINGUAL_NOISY.TARGET_LANG\n```\n\n### Building synthetic noisy sentences\n\n```bash\ncat TRAINING_CORPUS | cut -f1 | python3.7 bicleaner/utils/shuffle.py - > MONOLINGUAL_NOISY.SOURCE_LANG\ncat TRAINING_CORPUS | cut -f2 | python3.7 bicleaner/utils/shuffle.py - > MONOLINGUAL_NOISY.TARGET_LANG\n```\n\nSince `0.13`, if no noisy corpora is provided, it's produced by Bicleaner training itself, so it has become an optional parameter.\n\n### Parameters\n\nIt can be used as follows. Note that the parameters `--noisy_examples_file_sl`, `--noisy_examples_file_tl`, `--lm_file_sl`, `--lm_file_tl`, are mandatory if you want to enable improved fluency filter based on language models (recommended).\n\n\n```bash\n bicleaner-train [-h]\n                 -m METADATA              \n                 -c CLASSIFIER \n                 -s SOURCE_LANG \n                 -t TARGET_LANG \n                 -d SOURCE_TO_TARGET_DICTIONARY \n                 -D TARGET_TO_SOURCE_DICTIONARY               \n                 [-S SOURCE_TOKENISER_PATH]\n                 [-T TARGET_TOKENISER_PATH]\n                 [--normalize_by_length]\n                 [--treat_oovs]\n                 [--qmax_limit QMAX_LIMIT]\n                 [--disable_features_quest]\n                 [-g GOOD_EXAMPLES]\n                 [-w WRONG_EXAMPLES]\n                 [--good_test_examples GOOD_TEST_EXAMPLES]\n                 [--wrong_test_examples WRONG_TEST_EXAMPLES]\n                 [--classifier_type {svm,nn,nn1,adaboost,random_forest}]\n                 [--dump_features DUMP_FEATURES]\n                 [-b BLOCK_SIZE]\n                 [-p PROCESSES]\n                 [--wrong_examples_file WRONG_EXAMPLES_FILE]\n                 [--features_version FEATURES_VERSION]\n                 [--disable_lang_ident]\n                 [--noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL]\n                 [--noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL]\n                 [--lm_dev_size LM_DEV_SIZE]\n                 [--lm_file_sl LM_FILE_SL]\n                 [--lm_file_tl LM_FILE_TL]\n                 [--lm_training_file_sl LM_TRAINING_FILE_SL]\n                 [--lm_training_file_tl LM_TRAINING_FILE_TL]\n                 [--lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL]\n                 [--lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL]\n                 [-q]\n                 [--debug]\n                 [--logfile LOGFILE]\n                 [input]\n\n```                          \n\n* positional arguments:\n  * input: Tab-separated bilingual input file (default: Standard input)(line format: SOURCE_SENTENCE TARGET_SENTENCE, tab-separated)\n* optional arguments:\n  * -h, --help: show this help message and exit\n* Mandatory:\n  * -m METADATA, --metadata METADATA: Output training metadata (YAML file) that will be created after training.\n  * -c CLASSIFIER, --classifier CLASSIFIER: Classifier data file that will be created after training. \n  * -s SOURCE_LANG, --source_lang SOURCE_LANG: Source language code \n  * -t TARGET_LANG, --target_lang TARGET_LANG: Target language code\n  * -d SOURCE_TO_TARGET_DICTIONARY, --source_dictionary SOURCE_TO_TARGET_DICTIONARY: SL-to-TL gzipped probabilistic dictionary \n  * -D TARGET_TO_SOURCE_DICTIONARY, --target_dictionary TARGET_TO_SOURCE_DICTIONARY: TL-to-SL gzipped probabilistic dictionary\n* Options:\n  * -S SL_TOKENIZER_PATH: Source language tokenizer absolute path. If not given, Moses tokenizer is used.\n  * -T TL_TOKENIZER_PATH: Target language tokenizer absolute path. If not given, Moses tokenizer is used.  \n  * --normalize_by_length: Normalize by length in qmax dict feature \n  * --treat_oovs: Special treatment for OOVs in qmax dict feature\n  * --qmax_limit: Number of max target words to be taken into account, sorted by length (default: 20)\n  * --disable_features_quest: Disable less important features \n  * -g GOOD_EXAMPLES, --good_examples GOOD_EXAMPLES: Number of good examples (default: 50000)\n  * -w WRONG_EXAMPLES, --wrong_examples WRONG_EXAMPLES: Number of wrong examples (default: 50000)\n  * --good_test_examples GOOD_TEST_EXAMPLES: Number of good test examples (default: 2000)\n  * --wrong_test_examples WRONG_TEST_EXAMPLES: Number of wrong test examples (default: 2000)\n  * --classifier_type {svm,nn,nn1,adaboost,random_forest}: Classifier type (default: random_forest)\n  * --dump_features DUMP_FEATURES: Dump training features to file (default: None)\n  * -b BLOCK_SIZE, --block_size BLOCK_SIZE: Sentence pairs per block (default: 10000)\n  * -p PROCESSES, --processes PROCESSES: Number of process to use (default: all CPUs minus one)\n  * --wrong_examples_file WRONG_EXAMPLES_FILE: File with wrong examples extracted to replace the synthetic examples from method used by default (default: None)\n  * --features_version FEATURES_VERSION: Version of the feature (default: extracted from the features.py file)\n  * --disable_lang_ident: Don't apply features that use language detecting (default: False). Useful when the language in use is too similar to other languages, making the automatic identification of language not realiable.\n  * --noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL: File with noisy text in the SL. These are used to estimate the perplexity of noisy text. (Optional)\n  * --noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL: File with noisy text in the TL. These are used to estimate the perplexity of noisy text. (Optional)\n  * --lm_dev_size SIZE:  Number of sentences to be removed from clean text before training LMs. These are used to estimate the perplexity of clean text. (default: 2000)\n  * --lm_file_sl LM_FILE_SL: Output file with the created SL language model. This file should be placed in the same directory as the YAML training metadata, as they are usually distributed together.\n  * --lm_file_tl LM_FILE_TL: Output file with the created TL language model. This file should be placed in the same directory as the YAML training metadata, as they are usually distributed together.\n  * --lm_training_file_sl LM_TRAINING_FILE_SL: SL text from which the SL LM is trained. If this parameter is not specified, SL LM is trained from the SL side of the input file, after removing --lm_dev_size sentences.\n  * --lm_training_file_tl LM_TRAINING_FILE_TL: TL text from which the TL LM is trained. If this parameter is not specified, TL LM is trained from the TL side of the input file, after removing --lm_dev_size sentences.\n  * --lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL: File with clean text in the SL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_sl and both files must not have common sentences. This option replaces --lm_dev_size.\n  * --lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL: File with clean text in the TL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_tl and both files must not have common sentences. This option replaces --lm_dev_size.\"\n* Logging:\n  * -q, --quiet: Silent logging mode (default: False)\n  * --debug: Debug logging mode (default: False)\n  * --logfile LOGFILE: Store log to a file (default: <_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>)\n\n### Example\n\n```bash\nbicleaner-train \\\n          corpus.en-cs.train\\\n          --treat_oovs \\\n          --normalize_by_length \\\n          -s en \\\n          -t cs \\\n          -d dict-en-cs.gz \\\n          -D dict-cs-en.gz \\\n          -b  1000 \\\n          -c en-cs.classifier \\\n          -g 50000 \\\n          -w 50000 \\\n          -m training.en-cs.yaml \\\n          --classifier_type random_forest\n```\n\nThis will train a Random Forest classifier for English-Czech using the corpus corpus.en-cs.train and the probabilistic dictionaries `dict-en-cs.gz` and `dict-cs-en.gz`. \nThis training will use 50000 good and 50000 bad examples, and a block size of 1000 sentences.\nThe classifier data will be stored in `en-cs.classifier`, with the metadata in `training.en-cs.yaml`. The improved fluency language model filter will not be included.\n\nThe generated .yaml file provides the following information, that is useful to get a sense on how good or bad was the training  (and is also a needed input file for classifying):\n\n```yml\nclassifier: en-cs.classifier\nclassifier_type: random_forest\nsource_lang: en\ntarget_lang: cs\nsource_dictionary: dict-en-cs.gz\ntarget_dictionary: dict-cs-en.gz\nnormalize_by_length: True\ntreat_oovs: True\nqmax_limit: 20\ndisable_features_quest: True\ngood_examples: 50000\nwrong_examples: 50000\ngood_test_examples: 10000\nwrong_test_examples: 10000\ngood_test_histogram: [0, 7, 39, 45, 112, 172, 514, 2199, 6912, 0]\nwrong_test_histogram: [14, 4548, 4551, 747, 118, 18, 3, 1, 0, 0]\nprecision_histogram: [0.5000000, 0.5003502, 0.6475925, 0.9181810, 0.9860683, 0.9977594, 0.9995846, 0.9998903, 1.0000000, nan]\nrecall_histogram: [1.0000000, 1.0000000, 0.9993000, 0.9954000, 0.9909000, 0.9797000, 0.9625000, 0.9111000, 0.6912000, 0.0000000]\naccuracy_histogram: [0.5000000, 0.5007000, 0.7277500, 0.9533500, 0.9884500, 0.9887500, 0.9810500, 0.9555000, 0.8456000, 0.5000000]\nlength_ratio: 1.0111087\nfeatures_version: 3\nsource_lm: en-cs.model.en\ntarget_lm: en-cs.model.cs\nlm_type: CHARACTER\nclean_mean_perp: -1.0744755342473238\nclean_stddev_perp: 0.18368996884800565\nnoisy_mean_perp: -3.655791900929066\nnoisy_stddev_perp: 0.9989343799121657\ndisable_lang_ident: False\n\n```\n\n## Lite versions\n\nAlthough `bicleaner-train` and `bicleaner-classify` make use of parallelization  by distributing workload to the available cores, some users might prefer to implement their own parallelization strategies. For that reason, single-thread versions of Bicleaner scripts are provided: `bicleaner-train-lite` and `bicleaner-classify-lite`. The usage is exactly the same as for the full versions, but omitting the blocksize (-b) and processes (-p) parameter.\n\n___\n\n![Connecting Europe Facility](https://www.paracrawl.eu/images/logo_en_cef273x39.png)\n\nAll documents and software contained in this repository reflect only the authors' view. The Innovation and Networks Executive Agency of the European Union is not responsible for any use that may be made of the information it contains.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bitextor/bicleaner", "keywords": "", "license": "GNU General Public License v3.0", "maintainer": "Marta Ba\u00f1\u00f3n", "maintainer_email": "mbanon@prompsit.com", "name": "bicleaner", "package_url": "https://pypi.org/project/bicleaner/", "platform": "", "project_url": "https://pypi.org/project/bicleaner/", "project_urls": {"Bicleaner on GitHub": "https://github.com/bitextor/bicleaner", "Bicrawler & Bicleaner": "https://bicrawler.com", "Homepage": "https://github.com/bitextor/bicleaner", "Paracrawl": "https://paracrawl.eu/", "Prompsit Language Engineering": "http://www.prompsit.com"}, "release_url": "https://pypi.org/project/bicleaner/0.13/", "requires_dist": ["mosestokenizer (==1.0.0)", "pycld2 (==0.31)", "regex (==2019.08.19)", "scikit-learn (==0.22.1)", "PyYAML (==5.1.2)", "numpy (>=1.18.1)", "scipy (==1.4.1)", "pytest (==5.1.2)", "toolwrapper (==0.4.1)", "joblib (==0.14.1)"], "requires_python": "", "summary": "Parallel corpus classifier, indicating the likelihood of a pair of sentences being mutual translations or not", "version": "0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bicleaner</h1>\n<p><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></p>\n<p>Bicleaner (bicleaner-classify) is a tool in Python that aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0). Sentence pairs considered very noisy are scored with 0.</p>\n<p>Although a training tool (bicleaner-train) is provided, you may want to use the available ready-to-use language packages.\nPlease, visit <a href=\"https://github.com/bitextor/bicleaner-data/releases/latest\" rel=\"nofollow\">https://github.com/bitextor/bicleaner-data/releases/latest</a> to download the latest language packages.\nVisit our <a href=\"https://github.com/bitextor/bicleaner/wiki/How-to-train-your-Bicleaner\" rel=\"nofollow\">Wiki</a> for a detailed example on Bicleaner training.</p>\n<h2>Citation</h2>\n<p>If you find Bicleaner useful, please consider citing the following paper:</p>\n<blockquote>\n<p>V. M. S\u00e1nchez-Cartagena, M. Ba\u00f1\u00f3n, S. Ortiz-Rojas and G. Ram\u00edrez-S\u00e1nchez,<br>\n\"<a href=\"http://www.statmt.org/wmt18/pdf/WMT116.pdf\" rel=\"nofollow\">Prompsit's submission to WMT 2018 Parallel Corpus Filtering shared task</a>\",<br>\nin <em>Proceedings of the Third Conference on Machine Translation, Volume 2: Shared Task Papers</em>.<br>\nBrussels, Belgium: Association for Computational Linguistics, October 2018</p>\n</blockquote>\n<pre>@InProceedings<span class=\"nb\">{</span>prompsit:2018:WMT,\n  author    = <span class=\"nb\">{</span> V<span class=\"k\">\\'</span><span class=\"nb\">{</span>i<span class=\"nb\">}</span>ctor M. S<span class=\"k\">\\'</span><span class=\"nb\">{</span>a<span class=\"nb\">}</span>nchez-Cartagena and Marta Ba<span class=\"nb\">{</span><span class=\"k\">\\~</span>n<span class=\"nb\">}</span><span class=\"k\">\\'</span><span class=\"nb\">{</span>o<span class=\"nb\">}</span>n and Sergio Ortiz-Rojas and Gema Ram<span class=\"k\">\\'</span><span class=\"nb\">{</span>i<span class=\"nb\">}</span>rez-S<span class=\"k\">\\'</span><span class=\"nb\">{</span>a<span class=\"nb\">}</span>nchez<span class=\"nb\">}</span>,\n  title     = <span class=\"nb\">{</span>Prompsit's submission to WMT 2018 Parallel Corpus Filtering shared task<span class=\"nb\">}</span>,\n  booktitle = <span class=\"nb\">{</span>Proceedings of the Third Conference on Machine Translation, Volume 2: Shared Task Papers<span class=\"nb\">}</span>,\n  month     = <span class=\"nb\">{</span>October<span class=\"nb\">}</span>,\n  year      = <span class=\"nb\">{</span>2018<span class=\"nb\">}</span>,\n  address   = <span class=\"nb\">{</span>Brussels, Belgium<span class=\"nb\">}</span>,\n  publisher = <span class=\"nb\">{</span>Association for Computational Linguistics<span class=\"nb\">}</span>\n<span class=\"nb\">}</span>\n</pre>\n<h2>Installation &amp; Requirements</h2>\n<p>Bicleaner works with Python and can be instaled with <code>pip</code>:</p>\n<pre>python3.7 -m pip install bicleaner\n</pre>\n<p>Bicleaner requires the <a href=\"https://github.com/kpu/kenlm\" rel=\"nofollow\">KenLM</a> Python bindings with support for 7-gram language models. You can easily install\nthem by running the following commands:</p>\n<pre>git clone https://github.com/kpu/kenlm\n<span class=\"nb\">cd</span> kenlm\npython3.7 -m pip install . --install-option<span class=\"o\">=</span><span class=\"s2\">\"--max_order 7\"</span>\nmkdir -p build <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> build\ncmake .. -DKENLM_MAX_ORDER<span class=\"o\">=</span><span class=\"m\">7</span> -DCMAKE_INSTALL_PREFIX:PATH<span class=\"o\">=</span>/your/prefix/path\nmake -j all install\n</pre>\n<p>The remaining extra modules required by Bicleaner will be automatically downloaded and installed/upgraded (if required) with the first command.</p>\n<p>After installation, four binary files (<code>bicleaner-train</code>,  <code>bicleaner-train-lite</code>, <code>bicleaner-classify</code> and <code>bicleaner-classify-lite</code>) will be located in your <code>python/installation/prefix/bin</code> directory. This is usually <code>$HOME/.local/bin</code> or <code>/usr/local/bin/</code>.</p>\n<h2>Cleaning</h2>\n<p><code>bicleaner-classify</code> aims at detecting noisy sentence pairs in a parallel corpus. It\nindicates the likelihood of a pair of sentences being mutual translations (with a value near to 1) or not (with a value near to 0). Sentence pairs considered very noisy are scored with 0.</p>\n<p>By default, the input file  (the parallel corpus to be classified) must contain at least four columns, being:</p>\n<ul>\n<li>col1: URL 1</li>\n<li>col2: URL 2</li>\n<li>col3: Source sentence</li>\n<li>col4: Target sentence</li>\n</ul>\n<p>but the source and target sentences column index can be customized by using the <code>--scol</code>and <code>--tcol</code> flags.</p>\n<p>Any extra columns will be ignored.</p>\n<p>The generated output file will contain the same lines and columns that the original input file had,\nadding an extra column containing the Bicleaner classifier score.</p>\n<p>This tool can be run with</p>\n<pre>bicleaner-classify <span class=\"o\">[</span>-h<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>-S SOURCE_TOKENISER_PATH<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>-T TARGET_TOKENISER_PATH<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>--scol SCOL<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--tcol TCOL<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>--tmp_dir TMP_DIR<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>-b BLOCK_SIZE<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>-p PROCESSES<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>-d DISCARDED_TUS<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--threshold THRESHOLD<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--lm_threshold LM_THRESHOLD<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>--score_only<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--disable_hardrules<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>--disable_lm_filter<span class=\"o\">]</span>\n                   <span class=\"o\">[</span>-q<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>--debug<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>--logfile LOGFILE<span class=\"o\">]</span> \n                   <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n                   input \n                   <span class=\"o\">[</span>output<span class=\"o\">]</span> \n                   metadata\n</pre>\n<h3>Parameters</h3>\n<ul>\n<li>\n<p>positional arguments:</p>\n<ul>\n<li>input: Tab-separated files to be classified  (line format: URL1 URL2 SOURCE_SENTENCE TARGET_SENTENCE [EXTRA_COLUMNS], tab-separated). When input is -, reads standard input.</li>\n<li>output: Output of the classification (default: standard output). When output is -, writes standard input.</li>\n<li>metadata: Training metadata (YAML file), generated by <code>bicleaner-train</code> or <a href=\"https://github.com/bitextor/bicleaner-data/releases/latest\" rel=\"nofollow\">downloaded</a> as a part of a language pack. You just need to untar the language pack for the pair of languages of the file you want to clean. The tar file contains a YAML metadata file.</li>\n</ul>\n</li>\n<li>\n<p>optional arguments:</p>\n<ul>\n<li>-h, --help: show this help message and exit</li>\n</ul>\n</li>\n<li>\n<p>Optional:</p>\n<ul>\n<li>-S SL_TOKENIZER_PATH: Source language tokenizer absolute path. If not given, Moses tokenizer is used.</li>\n<li>-T TL_TOKENIZER_PATH: Target language tokenizer absolute path. If not given, Moses tokenizer is used.</li>\n<li>--scol SCOL           Source sentence column (starting in 1) (default: 3)</li>\n<li>--tcol TCOL           Target sentence column (starting in 1) (default: 4)</li>\n<li>--tmp_dir TMP_DIR: Temporary directory where creating the temporary files of this program (default: default system temp dir, defined by the environment variable TMPDIR in Unix)</li>\n<li>-b BLOCK_SIZE, --block_size BLOCK_SIZE Sentence pairs per block (default: 10000)</li>\n<li>-p PROCESSES, --processes PROCESSES: Number of processes to use (default: all CPUs minus one)</li>\n<li>-d DISCARDED_TUS, --discarded_tus DISCARDED_TUS: TSV file with discarded TUs. Discarded TUs by the classifier are written in this file in TSV file. (default: None)</li>\n<li>--threshold THRESHOLD: Threshold for classifier. If accuracy histogram is present in metadata, the interval for max value will be given as a default instead the current default. (default: 0.5)</li>\n</ul>\n</li>\n<li>\n<p>--lm_threshold LM_THRESHOLD: Threshold for language model fluency scoring. All sentence pairs whose LM fluency score falls below the threshold are removed (classifier score set to 0), unless the option --keep_lm_result is set. (default: 0.5)</p>\n</li>\n<li>\n<p>--score_only: Only output one column which is the bicleaner score (default: False)</p>\n</li>\n<li>\n<p>--disable_hardrules: Disables the bicleaner_hardrules filtering (only bicleaner_classify is applied) (default: False)</p>\n</li>\n<li>\n<p>Logging:</p>\n<ul>\n<li>-q, --quiet: Silent logging mode (default: False)</li>\n<li>--debug: Debug logging mode (default: False)</li>\n<li>--logfile LOGFILE: Store log to a file (default: &lt;_io.TextIOWrapper name='&lt;stderr&gt;' mode='w' encoding='UTF-8'&gt;)</li>\n<li>-v, --version: show version of this script and exit</li>\n</ul>\n</li>\n</ul>\n<h3>Example</h3>\n<pre>bicleaner-classify  <span class=\"se\">\\</span>\n        corpus.en-es.raw  <span class=\"se\">\\</span>\n        corpus.en-es.classifed  <span class=\"se\">\\</span>\n        training.en-es.yaml \n</pre>\n<p>This will read the \"corpus.en-es.raw\" file,\nclassify it with the classifier indicated in the \"training.en-es.yaml\" metadata file,\nwriting the result of the classification in the \"corpus.en-es.classified\" file.\nEach line of the new file will contain the same content as the input file, adding a column with the score given by the Bicleaner classifier.</p>\n<h3>Automatic test</h3>\n<p>We included a small test corpus and a script to check that your Bicleaner classifier is working as expected.\nIn order to use it, just run:</p>\n<pre>python3.7 -m pytest -s tests/bicleaner_test.py\n</pre>\n<p>This will download the required language pack, classify the provided test corpus, and check the resulting classification scores. If everything went as expected, the output will be \"1 passed in XX.XX seconds\".  All downloaded data will be removed at the end of the testing session.</p>\n<h2>Training classifiers</h2>\n<p>In case you need to train a new classifier (i.e. because it is not available in the language packs provided at <a href=\"https://github.com/bitextor/bicleaner-data/releases/latest\" rel=\"nofollow\">bicleaner-data</a>), you can use <code>bicleaner-train</code> .\n<code>bicleaner-train</code> is a Python3 tool that allows you to train a classifier which predicts\nwhether a pair of sentences are mutual translations or not and discards too noisy sentence pairs. Visit our <a href=\"https://github.com/bitextor/bicleaner/wiki/How-to-train-your-Bicleaner\" rel=\"nofollow\">Wiki</a> for a detailed example on Bicleaner training.</p>\n<h3>Requirements</h3>\n<p>In order to train a new classifier, you must provide:</p>\n<ul>\n<li>A clean parallel corpus (100k pairs of sentences is the recommended size)</li>\n<li>SL-to-TL and TL-to-SL gzipped probabilistic bilingual dictionaries. You can check their format by downloading any of the available language packs\n<ul>\n<li>The SL-to-TL probabilistic bilingual dictionary must contain one entry per line. Each entry must contain the following 3 fields, split by space, in this order: TL word, SL word, probability.</li>\n<li>The TL-to-SL probabilistic bilingual dictionary must contain one entry per line. Each entry must contain the following 3 fields, split by space, in this order: SL word, TL word, probability.</li>\n<li>We recommend filtering out entries with a very low probability: removing those with a probability 10 times lower than the maximum translation probability for each word speeds up the process and does not decrease accuracy.</li>\n<li>Prior to inferring the probabilistic dictionaries, sentences must be tokenizer with the Moses tokenizer (with the <code>-a</code> flag) and lowercased.</li>\n<li>You can uses Moses and MGIZA++ to obtain probabilistic dictionaries from a parallel corpus.</li>\n</ul>\n</li>\n</ul>\n<p>Optionally, if you want the classifier to include an improved fluency filter based on language models, you must also provide:</p>\n<ul>\n<li>A monolingual corpus made ONLY of noisy sentences in the SL (100k sentences is the recommended size)</li>\n<li>A monolingual corpus made ONLY of noisy sentences in the TL (100k sentences is the recommended size)</li>\n</ul>\n<p>If not provided, since Bicleaner <code>0.13</code>, noisy corpora is produced synthetically from the training corpus.</p>\n<p>Moreover, <strong><code>lmplz</code>, the command to train a KenLM language model must be in <code>PATH</code></strong>. See <a href=\"https://github.com/kpu/kenlm\" rel=\"nofollow\">https://github.com/kpu/kenlm</a> for instructions about its compilation and installation.</p>\n<p>In principle, if you want to use Bicleaner to clean a partially noisy corpus, it could be difficult to find a corpus made solely of noisy sentences. Fortunately, there are two options available with Bicleaner:</p>\n<h3>Extracting noisy sentences from an existing corpus with heuristic rules</h3>\n<p>Given a parallel corpus, you use <code>bicleaner-hardrules</code> to extract some of its noisiest sentences using heuristic rules by running the following command:</p>\n<pre>  bicleaner-hardrules <span class=\"o\">[</span>-h<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--annotated_output<span class=\"o\">]</span>\n                      -s SOURCE_LANG \n                      -t TARGET_LANG\n                      <span class=\"o\">[</span>--tmp_dir TMP_DIR<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>-b BLOCK_SIZE<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>-p PROCESSES<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--\n                      _lang_ident<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--scol SCOL<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--tcol TCOL<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--disable_lm_filter<span class=\"o\">]</span> \n                      <span class=\"o\">[</span>--metadata METADATA<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--lm_threshold LM_THRESHOLD<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>-q<span class=\"o\">]</span> \n                      <span class=\"o\">[</span>--debug<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>--logfile LOGFILE<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>input<span class=\"o\">]</span>\n                      <span class=\"o\">[</span>output<span class=\"o\">]</span>\n</pre>\n<p>where <code>INPUT_FILE</code> contains a sentence-aligned parallel corpus, with a sentence pair per line. Sentences are split by tab. <code>OUTPUT_FILE</code> will contain all the input sentences, with an extra score column with <code>0</code> (if the sentence is noisy and should be discarded) or <code>1</code> (if the sentence is ok). When the <code>--annotated_output</code> flag is in use, <code>OUTPUT_FILE</code> will contain another extra column, specifying the heuristic rule applied to decide discarding each sentence (or <code>keep</code>, if the sentence is ok and should not be discarded). If the <code>--disable_lang_ident</code> flag is in use, rules that require language identification are not used. '--scol' and '--tcol' allow to indicate which columns contains source and target in the input file (default: <code>1</code>and <code>2</code>, respectively).</p>\n<p>In order to use the LM filtering, you must provide the <code>--metadata</code> (it is: the .yaml file generated by Bicleaner training).\nTo disable LM filtering, just use the  <code>--disable_lm_filter</code> flag.</p>\n<p>You can then obtain the monolingual noisy corpora by \"cutting\" the appropriate columns (after running <code>bicleaner-hardrules</code> with the <code>--annotated_output</code> flag). Asuming scol=1 and tcol=2, and no more columns in the input corpus (so the hardrules score is the 3rd column in the output):</p>\n<pre>cat OUTPUT_FILE <span class=\"p\">|</span> awk -F<span class=\"s1\">'\\t'</span> <span class=\"s1\">'{if ($3 == 0) print $1 }'</span> &gt; MONOLINGUAL_NOISY.SOURCE_LANG\ncat OUTPUT_FILE <span class=\"p\">|</span> awk -F<span class=\"s1\">'\\t'</span> <span class=\"s1\">'{if ($3 == 0) print $2 }'</span> &gt; MONOLINGUAL_NOISY.TARGET_LANG\n</pre>\n<h3>Building synthetic noisy sentences</h3>\n<pre>cat TRAINING_CORPUS <span class=\"p\">|</span> cut -f1 <span class=\"p\">|</span> python3.7 bicleaner/utils/shuffle.py - &gt; MONOLINGUAL_NOISY.SOURCE_LANG\ncat TRAINING_CORPUS <span class=\"p\">|</span> cut -f2 <span class=\"p\">|</span> python3.7 bicleaner/utils/shuffle.py - &gt; MONOLINGUAL_NOISY.TARGET_LANG\n</pre>\n<p>Since <code>0.13</code>, if no noisy corpora is provided, it's produced by Bicleaner training itself, so it has become an optional parameter.</p>\n<h3>Parameters</h3>\n<p>It can be used as follows. Note that the parameters <code>--noisy_examples_file_sl</code>, <code>--noisy_examples_file_tl</code>, <code>--lm_file_sl</code>, <code>--lm_file_tl</code>, are mandatory if you want to enable improved fluency filter based on language models (recommended).</p>\n<pre> bicleaner-train <span class=\"o\">[</span>-h<span class=\"o\">]</span>\n                 -m METADATA              \n                 -c CLASSIFIER \n                 -s SOURCE_LANG \n                 -t TARGET_LANG \n                 -d SOURCE_TO_TARGET_DICTIONARY \n                 -D TARGET_TO_SOURCE_DICTIONARY               \n                 <span class=\"o\">[</span>-S SOURCE_TOKENISER_PATH<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-T TARGET_TOKENISER_PATH<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--normalize_by_length<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--treat_oovs<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--qmax_limit QMAX_LIMIT<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--disable_features_quest<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-g GOOD_EXAMPLES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-w WRONG_EXAMPLES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--good_test_examples GOOD_TEST_EXAMPLES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--wrong_test_examples WRONG_TEST_EXAMPLES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--classifier_type <span class=\"o\">{</span>svm,nn,nn1,adaboost,random_forest<span class=\"o\">}]</span>\n                 <span class=\"o\">[</span>--dump_features DUMP_FEATURES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-b BLOCK_SIZE<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-p PROCESSES<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--wrong_examples_file WRONG_EXAMPLES_FILE<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--features_version FEATURES_VERSION<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--disable_lang_ident<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_dev_size LM_DEV_SIZE<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_file_sl LM_FILE_SL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_file_tl LM_FILE_TL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_training_file_sl LM_TRAINING_FILE_SL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_training_file_tl LM_TRAINING_FILE_TL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-q<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--debug<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--logfile LOGFILE<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>input<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>positional arguments:\n<ul>\n<li>input: Tab-separated bilingual input file (default: Standard input)(line format: SOURCE_SENTENCE TARGET_SENTENCE, tab-separated)</li>\n</ul>\n</li>\n<li>optional arguments:\n<ul>\n<li>-h, --help: show this help message and exit</li>\n</ul>\n</li>\n<li>Mandatory:\n<ul>\n<li>-m METADATA, --metadata METADATA: Output training metadata (YAML file) that will be created after training.</li>\n<li>-c CLASSIFIER, --classifier CLASSIFIER: Classifier data file that will be created after training.</li>\n<li>-s SOURCE_LANG, --source_lang SOURCE_LANG: Source language code</li>\n<li>-t TARGET_LANG, --target_lang TARGET_LANG: Target language code</li>\n<li>-d SOURCE_TO_TARGET_DICTIONARY, --source_dictionary SOURCE_TO_TARGET_DICTIONARY: SL-to-TL gzipped probabilistic dictionary</li>\n<li>-D TARGET_TO_SOURCE_DICTIONARY, --target_dictionary TARGET_TO_SOURCE_DICTIONARY: TL-to-SL gzipped probabilistic dictionary</li>\n</ul>\n</li>\n<li>Options:\n<ul>\n<li>-S SL_TOKENIZER_PATH: Source language tokenizer absolute path. If not given, Moses tokenizer is used.</li>\n<li>-T TL_TOKENIZER_PATH: Target language tokenizer absolute path. If not given, Moses tokenizer is used.</li>\n<li>--normalize_by_length: Normalize by length in qmax dict feature</li>\n<li>--treat_oovs: Special treatment for OOVs in qmax dict feature</li>\n<li>--qmax_limit: Number of max target words to be taken into account, sorted by length (default: 20)</li>\n<li>--disable_features_quest: Disable less important features</li>\n<li>-g GOOD_EXAMPLES, --good_examples GOOD_EXAMPLES: Number of good examples (default: 50000)</li>\n<li>-w WRONG_EXAMPLES, --wrong_examples WRONG_EXAMPLES: Number of wrong examples (default: 50000)</li>\n<li>--good_test_examples GOOD_TEST_EXAMPLES: Number of good test examples (default: 2000)</li>\n<li>--wrong_test_examples WRONG_TEST_EXAMPLES: Number of wrong test examples (default: 2000)</li>\n<li>--classifier_type {svm,nn,nn1,adaboost,random_forest}: Classifier type (default: random_forest)</li>\n<li>--dump_features DUMP_FEATURES: Dump training features to file (default: None)</li>\n<li>-b BLOCK_SIZE, --block_size BLOCK_SIZE: Sentence pairs per block (default: 10000)</li>\n<li>-p PROCESSES, --processes PROCESSES: Number of process to use (default: all CPUs minus one)</li>\n<li>--wrong_examples_file WRONG_EXAMPLES_FILE: File with wrong examples extracted to replace the synthetic examples from method used by default (default: None)</li>\n<li>--features_version FEATURES_VERSION: Version of the feature (default: extracted from the features.py file)</li>\n<li>--disable_lang_ident: Don't apply features that use language detecting (default: False). Useful when the language in use is too similar to other languages, making the automatic identification of language not realiable.</li>\n<li>--noisy_examples_file_sl NOISY_EXAMPLES_FILE_SL: File with noisy text in the SL. These are used to estimate the perplexity of noisy text. (Optional)</li>\n<li>--noisy_examples_file_tl NOISY_EXAMPLES_FILE_TL: File with noisy text in the TL. These are used to estimate the perplexity of noisy text. (Optional)</li>\n<li>--lm_dev_size SIZE:  Number of sentences to be removed from clean text before training LMs. These are used to estimate the perplexity of clean text. (default: 2000)</li>\n<li>--lm_file_sl LM_FILE_SL: Output file with the created SL language model. This file should be placed in the same directory as the YAML training metadata, as they are usually distributed together.</li>\n<li>--lm_file_tl LM_FILE_TL: Output file with the created TL language model. This file should be placed in the same directory as the YAML training metadata, as they are usually distributed together.</li>\n<li>--lm_training_file_sl LM_TRAINING_FILE_SL: SL text from which the SL LM is trained. If this parameter is not specified, SL LM is trained from the SL side of the input file, after removing --lm_dev_size sentences.</li>\n<li>--lm_training_file_tl LM_TRAINING_FILE_TL: TL text from which the TL LM is trained. If this parameter is not specified, TL LM is trained from the TL side of the input file, after removing --lm_dev_size sentences.</li>\n<li>--lm_clean_examples_file_sl LM_CLEAN_EXAMPLES_FILE_SL: File with clean text in the SL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_sl and both files must not have common sentences. This option replaces --lm_dev_size.</li>\n<li>--lm_clean_examples_file_tl LM_CLEAN_EXAMPLES_FILE_TL: File with clean text in the TL. Used to estimate the perplexity of clean text. This option must be used together with --lm_training_file_tl and both files must not have common sentences. This option replaces --lm_dev_size.\"</li>\n</ul>\n</li>\n<li>Logging:\n<ul>\n<li>-q, --quiet: Silent logging mode (default: False)</li>\n<li>--debug: Debug logging mode (default: False)</li>\n<li>--logfile LOGFILE: Store log to a file (default: &lt;_io.TextIOWrapper name='&lt;stderr&gt;' mode='w' encoding='UTF-8'&gt;)</li>\n</ul>\n</li>\n</ul>\n<h3>Example</h3>\n<pre>bicleaner-train <span class=\"se\">\\</span>\n          corpus.en-cs.train<span class=\"se\">\\</span>\n          --treat_oovs <span class=\"se\">\\</span>\n          --normalize_by_length <span class=\"se\">\\</span>\n          -s en <span class=\"se\">\\</span>\n          -t cs <span class=\"se\">\\</span>\n          -d dict-en-cs.gz <span class=\"se\">\\</span>\n          -D dict-cs-en.gz <span class=\"se\">\\</span>\n          -b  <span class=\"m\">1000</span> <span class=\"se\">\\</span>\n          -c en-cs.classifier <span class=\"se\">\\</span>\n          -g <span class=\"m\">50000</span> <span class=\"se\">\\</span>\n          -w <span class=\"m\">50000</span> <span class=\"se\">\\</span>\n          -m training.en-cs.yaml <span class=\"se\">\\</span>\n          --classifier_type random_forest\n</pre>\n<p>This will train a Random Forest classifier for English-Czech using the corpus corpus.en-cs.train and the probabilistic dictionaries <code>dict-en-cs.gz</code> and <code>dict-cs-en.gz</code>.\nThis training will use 50000 good and 50000 bad examples, and a block size of 1000 sentences.\nThe classifier data will be stored in <code>en-cs.classifier</code>, with the metadata in <code>training.en-cs.yaml</code>. The improved fluency language model filter will not be included.</p>\n<p>The generated .yaml file provides the following information, that is useful to get a sense on how good or bad was the training  (and is also a needed input file for classifying):</p>\n<pre>classifier: en-cs.classifier\nclassifier_type: random_forest\nsource_lang: en\ntarget_lang: cs\nsource_dictionary: dict-en-cs.gz\ntarget_dictionary: dict-cs-en.gz\nnormalize_by_length: True\ntreat_oovs: True\nqmax_limit: 20\ndisable_features_quest: True\ngood_examples: 50000\nwrong_examples: 50000\ngood_test_examples: 10000\nwrong_test_examples: 10000\ngood_test_histogram: [0, 7, 39, 45, 112, 172, 514, 2199, 6912, 0]\nwrong_test_histogram: [14, 4548, 4551, 747, 118, 18, 3, 1, 0, 0]\nprecision_histogram: [0.5000000, 0.5003502, 0.6475925, 0.9181810, 0.9860683, 0.9977594, 0.9995846, 0.9998903, 1.0000000, nan]\nrecall_histogram: [1.0000000, 1.0000000, 0.9993000, 0.9954000, 0.9909000, 0.9797000, 0.9625000, 0.9111000, 0.6912000, 0.0000000]\naccuracy_histogram: [0.5000000, 0.5007000, 0.7277500, 0.9533500, 0.9884500, 0.9887500, 0.9810500, 0.9555000, 0.8456000, 0.5000000]\nlength_ratio: 1.0111087\nfeatures_version: 3\nsource_lm: en-cs.model.en\ntarget_lm: en-cs.model.cs\nlm_type: CHARACTER\nclean_mean_perp: -1.0744755342473238\nclean_stddev_perp: 0.18368996884800565\nnoisy_mean_perp: -3.655791900929066\nnoisy_stddev_perp: 0.9989343799121657\ndisable_lang_ident: False\n</pre>\n<h2>Lite versions</h2>\n<p>Although <code>bicleaner-train</code> and <code>bicleaner-classify</code> make use of parallelization  by distributing workload to the available cores, some users might prefer to implement their own parallelization strategies. For that reason, single-thread versions of Bicleaner scripts are provided: <code>bicleaner-train-lite</code> and <code>bicleaner-classify-lite</code>. The usage is exactly the same as for the full versions, but omitting the blocksize (-b) and processes (-p) parameter.</p>\n<hr>\n<p><img alt=\"Connecting Europe Facility\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ead23052ff95c35e69b047db4222a3b5b9b3ec21/68747470733a2f2f7777772e70617261637261776c2e65752f696d616765732f6c6f676f5f656e5f6365663237337833392e706e67\"></p>\n<p>All documents and software contained in this repository reflect only the authors' view. The Innovation and Networks Executive Agency of the European Union is not responsible for any use that may be made of the information it contains.</p>\n\n          </div>"}, "last_serial": 6711722, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "179d6aba4023d8c2c5d9e4e8f5eb0918", "sha256": "9a171b828330af0a11663b1e831058a3474db8b971857148517383566b8fc415"}, "downloads": -1, "filename": "bicleaner-0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "179d6aba4023d8c2c5d9e4e8f5eb0918", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38480, "upload_time": "2018-10-03T15:31:09", "upload_time_iso_8601": "2018-10-03T15:31:09.352063Z", "url": "https://files.pythonhosted.org/packages/61/dc/14cf93cce25caa2ab6035709061f669a0cfdbabeb5f0157e62730b443d16/bicleaner-0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25429d029ddc1e795aeb7375c5287cb3", "sha256": "8a4d58062a32e5c10b74044773cbf4a96721d400bdb75bfb4349cb8079e5b4a6"}, "downloads": -1, "filename": "bicleaner-0.10.tar.gz", "has_sig": false, "md5_digest": "25429d029ddc1e795aeb7375c5287cb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24486, "upload_time": "2018-10-03T15:31:11", "upload_time_iso_8601": "2018-10-03T15:31:11.019456Z", "url": "https://files.pythonhosted.org/packages/35/d9/fa693daeef2d028a87c7458316f2bef59978fcb2eb8309315f9ccd635a57/bicleaner-0.10.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "f59d8a5ecca0ad36a4e93be60069b682", "sha256": "e79bb9dc97d64f8ecfc93b0ddfacc09c325688289e4dd257ffce78b1f5a601e5"}, "downloads": -1, "filename": "bicleaner-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f59d8a5ecca0ad36a4e93be60069b682", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38382, "upload_time": "2018-10-03T16:02:29", "upload_time_iso_8601": "2018-10-03T16:02:29.701003Z", "url": "https://files.pythonhosted.org/packages/13/43/a7fec6b6493f6da76bf206280d6cbfbc107b7c42528805178584926471b7/bicleaner-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49960bc80bc67cd4e7f6a9eb9de2d0f5", "sha256": "179deb12827cbdfe5a361151c2cf22aa81204151f295ff6d92da3407c2b7196b"}, "downloads": -1, "filename": "bicleaner-0.10.1.tar.gz", "has_sig": false, "md5_digest": "49960bc80bc67cd4e7f6a9eb9de2d0f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24315, "upload_time": "2018-10-03T16:02:31", "upload_time_iso_8601": "2018-10-03T16:02:31.209719Z", "url": "https://files.pythonhosted.org/packages/8e/ea/c32e6c7b5d8d7ec460e8ec15cd987046b9de2a657ba85ec2d03d5ee9f159/bicleaner-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "7eb7ceb30411f6c1efcfa47ff08f4b35", "sha256": "bb30df9b83f1c634f45c19cf414548d6df1834ccd591b6717d0844603fdaf6a5"}, "downloads": -1, "filename": "bicleaner-0.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7eb7ceb30411f6c1efcfa47ff08f4b35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38421, "upload_time": "2018-10-03T16:12:51", "upload_time_iso_8601": "2018-10-03T16:12:51.794498Z", "url": "https://files.pythonhosted.org/packages/eb/16/42c46ca018c94b08b95621a968f47fa89989ebd9555522e9b7cb4a6930af/bicleaner-0.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4d51e12cdf4bc0575face0f89ed3999", "sha256": "6cd7e03b3dca1410f6317188450b1f39e058a7425683069ba9167462ca493b11"}, "downloads": -1, "filename": "bicleaner-0.10.2.tar.gz", "has_sig": false, "md5_digest": "b4d51e12cdf4bc0575face0f89ed3999", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24316, "upload_time": "2018-10-03T16:12:52", "upload_time_iso_8601": "2018-10-03T16:12:52.923486Z", "url": "https://files.pythonhosted.org/packages/b1/80/7ec2838fcc5c4c4f1dec8764280b4c006732cfe7de392f51ea81dc69821f/bicleaner-0.10.2.tar.gz", "yanked": false}], "0.10.3": [{"comment_text": "", "digests": {"md5": "c298043e21bcc7e088dfde5b9157958e", "sha256": "9bd1dd549f64eb60cf92a9cb81f013b0ccba9628900e503e3661af1dbcd5573b"}, "downloads": -1, "filename": "bicleaner-0.10.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c298043e21bcc7e088dfde5b9157958e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38537, "upload_time": "2018-10-03T16:29:56", "upload_time_iso_8601": "2018-10-03T16:29:56.537699Z", "url": "https://files.pythonhosted.org/packages/61/68/6832a60bdc6f8332bf9864e23ad5c3712987801404e34ae896b32860cfab/bicleaner-0.10.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93f0b1b2448a4481b72851e1b8398251", "sha256": "97aafcd6d02b1a930ae79eb5d778d23e2bafa20fcb8aa0db05419024293bb9d1"}, "downloads": -1, "filename": "bicleaner-0.10.3.tar.gz", "has_sig": false, "md5_digest": "93f0b1b2448a4481b72851e1b8398251", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24486, "upload_time": "2018-10-03T16:29:57", "upload_time_iso_8601": "2018-10-03T16:29:57.868669Z", "url": "https://files.pythonhosted.org/packages/c0/0b/aa099f68fa995c0456d5cdd581295860e340f4220aa8678f4501187140db/bicleaner-0.10.3.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "4b148e7186228969c7477a02a03cc9c1", "sha256": "2174dc6cc832fb4f2910589e216c508e86ef77280f8f7bd07528d4ae4b3be35a"}, "downloads": -1, "filename": "bicleaner-0.10.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4b148e7186228969c7477a02a03cc9c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38760, "upload_time": "2018-10-17T11:51:33", "upload_time_iso_8601": "2018-10-17T11:51:33.538318Z", "url": "https://files.pythonhosted.org/packages/ab/ea/923ffd8c7a86c6bfc5ee6544c2a30e830ca4d03c71c567b7de13781e266d/bicleaner-0.10.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00b14ed7ed4284136e3a51da4cfc3782", "sha256": "df922d8ca9c5250c28a6ba368538854de5ac4cc175fad9271ce9d6fbff352057"}, "downloads": -1, "filename": "bicleaner-0.10.4.tar.gz", "has_sig": false, "md5_digest": "00b14ed7ed4284136e3a51da4cfc3782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24924, "upload_time": "2018-10-17T11:51:35", "upload_time_iso_8601": "2018-10-17T11:51:35.304765Z", "url": "https://files.pythonhosted.org/packages/d2/98/fd3f669072d9b97a12b712b2f4a56bfd3ce2174367157882bff41e4f62b4/bicleaner-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "6280503474c8bd09dd72f1f7d95fbaf8", "sha256": "8bd4bcc7caa7bba53c10c7acff81c5989690ce306ce270f3bdeb2635cf578876"}, "downloads": -1, "filename": "bicleaner-0.10.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6280503474c8bd09dd72f1f7d95fbaf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41789, "upload_time": "2018-11-07T12:43:52", "upload_time_iso_8601": "2018-11-07T12:43:52.202332Z", "url": "https://files.pythonhosted.org/packages/3d/f5/f3511dd09ed47fce7e61a1552ee237622bf4a5e46df93f184360f976bb06/bicleaner-0.10.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a25032aafe9659c797bd104abbe60ce", "sha256": "b4407250d510855cb140774307d8be716937ac28128116bf5273b420eb3ebf67"}, "downloads": -1, "filename": "bicleaner-0.10.5.tar.gz", "has_sig": false, "md5_digest": "8a25032aafe9659c797bd104abbe60ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26261, "upload_time": "2018-11-07T12:43:53", "upload_time_iso_8601": "2018-11-07T12:43:53.815144Z", "url": "https://files.pythonhosted.org/packages/fc/8f/631e0b2fc6abf175ec06355d8dbdb258f30b87de0d9ea94dc9282e8c0fd0/bicleaner-0.10.5.tar.gz", "yanked": false}], "0.10.6": [{"comment_text": "", "digests": {"md5": "20b39f4be07395f609e2d0d443f8d2d7", "sha256": "6937f07d5bf4afb90251edf73f733856423e66ea1f920815b2f3853cc362f205"}, "downloads": -1, "filename": "bicleaner-0.10.6-py3-none-any.whl", "has_sig": false, "md5_digest": "20b39f4be07395f609e2d0d443f8d2d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41972, "upload_time": "2018-11-19T08:48:12", "upload_time_iso_8601": "2018-11-19T08:48:12.914038Z", "url": "https://files.pythonhosted.org/packages/0d/f4/4a145a6b0dd8baa6ba364111f7c59d5d9e0bcfb9497d86d7145655d0ec17/bicleaner-0.10.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5862ceca347fd83381d510f838ac65d8", "sha256": "601e125bb3147377a1ad2c4fe75c9f33d044933468694b4285d185d72a394a1b"}, "downloads": -1, "filename": "bicleaner-0.10.6.tar.gz", "has_sig": false, "md5_digest": "5862ceca347fd83381d510f838ac65d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26447, "upload_time": "2018-11-19T08:48:14", "upload_time_iso_8601": "2018-11-19T08:48:14.861429Z", "url": "https://files.pythonhosted.org/packages/24/c0/a5a766c50afc40d3807918244d3521a4efafe3b3f7ed23f400241d26ef9e/bicleaner-0.10.6.tar.gz", "yanked": false}], "0.10.7": [{"comment_text": "", "digests": {"md5": "5d52d4c5c8aecc70c3d794d0d09d453e", "sha256": "1b437785884c98a73e929ef795d79832724704d1218f4cf77ad03a94e4e6ba29"}, "downloads": -1, "filename": "bicleaner-0.10.7-py3-none-any.whl", "has_sig": false, "md5_digest": "5d52d4c5c8aecc70c3d794d0d09d453e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47148, "upload_time": "2018-12-14T18:31:13", "upload_time_iso_8601": "2018-12-14T18:31:13.455571Z", "url": "https://files.pythonhosted.org/packages/1d/d8/e60a40a50740f1181ceec8ad0dd862bc72afb70edcda59e8796fb99a7059/bicleaner-0.10.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f984bd551f256b4741712364553a84f", "sha256": "82c583c678f1670671e1d51502b5078175f7284989e6459a6615608d836d7421"}, "downloads": -1, "filename": "bicleaner-0.10.7.tar.gz", "has_sig": false, "md5_digest": "1f984bd551f256b4741712364553a84f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30115, "upload_time": "2018-12-14T18:31:15", "upload_time_iso_8601": "2018-12-14T18:31:15.170110Z", "url": "https://files.pythonhosted.org/packages/9e/a1/ff938eeb8ebabd41f8da4fad59e2e3ce7c1eb956e815850dd306136062ec/bicleaner-0.10.7.tar.gz", "yanked": false}], "0.10.7.1": [{"comment_text": "", "digests": {"md5": "002e918ae3bd727e684616c5a6e5d2cd", "sha256": "ccc5f799284cbf06a6556d1c3687e3488cf8736b3d1365d76b1221069848d038"}, "downloads": -1, "filename": "bicleaner-0.10.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "002e918ae3bd727e684616c5a6e5d2cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47123, "upload_time": "2018-12-15T18:33:11", "upload_time_iso_8601": "2018-12-15T18:33:11.181834Z", "url": "https://files.pythonhosted.org/packages/73/96/cf9d0100cb6fe60b87aa8af2c34f28d6f4fbc0bc713e8f45de1a81a1cda4/bicleaner-0.10.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7e5d93a3a06cb73d5550a7527a6a19", "sha256": "ce1e775992e6f29a3886ac7e473fa54b0881fb278564cc4a43ccbb78e9dd67af"}, "downloads": -1, "filename": "bicleaner-0.10.7.1.tar.gz", "has_sig": false, "md5_digest": "3d7e5d93a3a06cb73d5550a7527a6a19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30041, "upload_time": "2018-12-15T18:33:12", "upload_time_iso_8601": "2018-12-15T18:33:12.908806Z", "url": "https://files.pythonhosted.org/packages/22/75/396f8a1eda99fb8cb608fecabc6acf6d4afca37e26bfd9c3ea1a77a18281/bicleaner-0.10.7.1.tar.gz", "yanked": false}], "0.10.8": [{"comment_text": "", "digests": {"md5": "09474e0773b08a7dbcf899b46e396023", "sha256": "41f3623e5f707970e0ff0adc624b40ff43b04a2bf4044ea65e213b7839d6b249"}, "downloads": -1, "filename": "bicleaner-0.10.8-py3-none-any.whl", "has_sig": false, "md5_digest": "09474e0773b08a7dbcf899b46e396023", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47877, "upload_time": "2018-12-21T17:28:02", "upload_time_iso_8601": "2018-12-21T17:28:02.927800Z", "url": "https://files.pythonhosted.org/packages/62/2e/455318132ec744e7cc452f249111de59824485ee73bf2103be68c030765d/bicleaner-0.10.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e8a25607fe4fb6af6c00b401ebbd484", "sha256": "e57b3ceed2b2e671afca32bc4fa12b990adef2c7b8f971cf43b8f1108ccf7503"}, "downloads": -1, "filename": "bicleaner-0.10.8.tar.gz", "has_sig": false, "md5_digest": "9e8a25607fe4fb6af6c00b401ebbd484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30950, "upload_time": "2018-12-21T17:28:04", "upload_time_iso_8601": "2018-12-21T17:28:04.838530Z", "url": "https://files.pythonhosted.org/packages/6c/91/24b9154b015901ec5268092e123c222ef6dd56c297e29975feb99bbacd7d/bicleaner-0.10.8.tar.gz", "yanked": false}], "0.10.9": [{"comment_text": "", "digests": {"md5": "7a394664e0a4e1325524efc460149e9c", "sha256": "c4acbfdd290f8054bde173bb512f20dab7cd8cdddbcfa23a9c169e9b53f99e93"}, "downloads": -1, "filename": "bicleaner-0.10.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7a394664e0a4e1325524efc460149e9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48129, "upload_time": "2019-01-28T11:37:42", "upload_time_iso_8601": "2019-01-28T11:37:42.136414Z", "url": "https://files.pythonhosted.org/packages/d7/79/ab75365fa3f5e86ec6ea33646865dfbb644b214f0e43402c917c86946839/bicleaner-0.10.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d0a2eba8e4b093e5d5e39d1d4564ae3", "sha256": "3b7df6e496cfc8990491f1d82340339d894903512d7a4ae03a30feca4e020d88"}, "downloads": -1, "filename": "bicleaner-0.10.9.tar.gz", "has_sig": false, "md5_digest": "7d0a2eba8e4b093e5d5e39d1d4564ae3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31187, "upload_time": "2019-01-28T11:37:44", "upload_time_iso_8601": "2019-01-28T11:37:44.028728Z", "url": "https://files.pythonhosted.org/packages/67/71/ecb7a4770d4a2536f269598a6611a05f8ddd0eb746751c1b0aaf211eace3/bicleaner-0.10.9.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "f9e09cff53d2c51401e2eecb7408c84d", "sha256": "20b59c9a721c24d011c880016c20bba6059803b7e28a371fb719d224d15ecc27"}, "downloads": -1, "filename": "bicleaner-0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "f9e09cff53d2c51401e2eecb7408c84d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 55464, "upload_time": "2019-02-12T11:28:21", "upload_time_iso_8601": "2019-02-12T11:28:21.115992Z", "url": "https://files.pythonhosted.org/packages/89/70/99224fd705f2c982bb7786e1f892c6d7c9b4b82b94ff72e8e6602598bf2e/bicleaner-0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3adb54b732f8e7247c835b4f8f4b0bd", "sha256": "0a36d2fa182f120947052d2819f3c7fc2dfb83e179fc81bd17e2cca1e1cfd252"}, "downloads": -1, "filename": "bicleaner-0.11.tar.gz", "has_sig": false, "md5_digest": "f3adb54b732f8e7247c835b4f8f4b0bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39306, "upload_time": "2019-02-12T11:28:23", "upload_time_iso_8601": "2019-02-12T11:28:23.447889Z", "url": "https://files.pythonhosted.org/packages/49/af/288a39aae0748107114b3a1a01b911ab42a8ba71ad8bfece8d5c45cd5a85/bicleaner-0.11.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "b7f0dfebea2319543627f3e14f654493", "sha256": "a34f714767cd042215fd72b659eac97db55d291c79926949b40abfd91cb6323d"}, "downloads": -1, "filename": "bicleaner-0.11.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7f0dfebea2319543627f3e14f654493", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56027, "upload_time": "2019-02-12T12:20:00", "upload_time_iso_8601": "2019-02-12T12:20:00.552340Z", "url": "https://files.pythonhosted.org/packages/33/43/53cb749ae635576a5367db19c5c28d3e2e958f8b47ee39fcece58363e4ae/bicleaner-0.11.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b728b4a80ce98a88f041e19414f3ef10", "sha256": "c0a1580849177316831db646d854378164987c25b69741490beb01bf60d9a60c"}, "downloads": -1, "filename": "bicleaner-0.11.1.tar.gz", "has_sig": false, "md5_digest": "b728b4a80ce98a88f041e19414f3ef10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39510, "upload_time": "2019-02-12T12:20:02", "upload_time_iso_8601": "2019-02-12T12:20:02.128945Z", "url": "https://files.pythonhosted.org/packages/66/52/43e1e5c1ae2f941a0b02a3e57c1d2795ce842eb063308ab987dd494b9492/bicleaner-0.11.1.tar.gz", "yanked": false}], "0.11.2": [{"comment_text": "", "digests": {"md5": "836564d14c39271afccb8ff49d4a4cad", "sha256": "6b1f576d9487055434b1fa0314da3094198663135e9942df8141105516ff9db8"}, "downloads": -1, "filename": "bicleaner-0.11.2-py3-none-any.whl", "has_sig": false, "md5_digest": "836564d14c39271afccb8ff49d4a4cad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56029, "upload_time": "2019-02-16T10:12:57", "upload_time_iso_8601": "2019-02-16T10:12:57.035434Z", "url": "https://files.pythonhosted.org/packages/bb/88/7b98c3b791220a7b0b6b4c73d9c0a35957b8ac475956a7a56aa5d897712f/bicleaner-0.11.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fb25ea2815ae46379850da4f2253523", "sha256": "10271d553b98f444e499584bcd76d233ea4dd2debfc7f8b1786b27a5c63c6a19"}, "downloads": -1, "filename": "bicleaner-0.11.2.tar.gz", "has_sig": false, "md5_digest": "2fb25ea2815ae46379850da4f2253523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39528, "upload_time": "2019-02-16T10:12:58", "upload_time_iso_8601": "2019-02-16T10:12:58.732737Z", "url": "https://files.pythonhosted.org/packages/67/07/7b12ca86adbda8f52cab6eed5fad20c55828b3c8a3e198318ba285f27817/bicleaner-0.11.2.tar.gz", "yanked": false}], "0.11.3": [{"comment_text": "", "digests": {"md5": "f69b9720fa15178256ee880888060617", "sha256": "34c26c2b59dff98ec650c1ab6bf17af23b94ba5e60a28153b2031861c948acd8"}, "downloads": -1, "filename": "bicleaner-0.11.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f69b9720fa15178256ee880888060617", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56598, "upload_time": "2019-02-28T18:29:00", "upload_time_iso_8601": "2019-02-28T18:29:00.742417Z", "url": "https://files.pythonhosted.org/packages/68/1a/c80ff9e237ac5c6f76836fd8b5c555000b9681ef8e6a09de5499cae7aa3a/bicleaner-0.11.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3ec7fed8ca758af670755bec0a2ae82", "sha256": "7bd63d7417731d843f2e6be631ce412eee46616c79979fb9d9fcd38767a8502b"}, "downloads": -1, "filename": "bicleaner-0.11.3.tar.gz", "has_sig": false, "md5_digest": "c3ec7fed8ca758af670755bec0a2ae82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40320, "upload_time": "2019-02-28T18:29:02", "upload_time_iso_8601": "2019-02-28T18:29:02.835733Z", "url": "https://files.pythonhosted.org/packages/c7/a3/1cb6f97d59ba092b81457937ae3221ba1730105a7e855c4e97d5e6ed15e5/bicleaner-0.11.3.tar.gz", "yanked": false}], "0.11.4": [{"comment_text": "", "digests": {"md5": "a97b39100bfa82b9853daeecb2c35709", "sha256": "ace6f70568f1a502df03570a59bb17c3c76273077991837e806dcc87c214cb1c"}, "downloads": -1, "filename": "bicleaner-0.11.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a97b39100bfa82b9853daeecb2c35709", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56607, "upload_time": "2019-03-01T11:51:21", "upload_time_iso_8601": "2019-03-01T11:51:21.664552Z", "url": "https://files.pythonhosted.org/packages/22/21/4e8c51a5719f8db8263c442fe6c78c846f7b04705207ee10036b4242952f/bicleaner-0.11.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eccb1edba3445be50071624bbe212c8", "sha256": "d3fbb82de26ff1531c967a18ff9cd32afee429f41158fbc869dbb9ca60b8c7fb"}, "downloads": -1, "filename": "bicleaner-0.11.4.tar.gz", "has_sig": false, "md5_digest": "2eccb1edba3445be50071624bbe212c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40342, "upload_time": "2019-03-01T11:51:23", "upload_time_iso_8601": "2019-03-01T11:51:23.090269Z", "url": "https://files.pythonhosted.org/packages/38/59/bb063af11af952aeb829ff823d6541cd3a6a5650a3c65b04ed7ad881f9f9/bicleaner-0.11.4.tar.gz", "yanked": false}], "0.11.5": [{"comment_text": "", "digests": {"md5": "e1442b7301822c7a69947c62b4e6de29", "sha256": "84cdd4e4d3047791c3f44c921f35e48a4505bd5dc7b0dcbe59becdf76717e6d8"}, "downloads": -1, "filename": "bicleaner-0.11.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e1442b7301822c7a69947c62b4e6de29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56649, "upload_time": "2019-03-04T16:12:50", "upload_time_iso_8601": "2019-03-04T16:12:50.811927Z", "url": "https://files.pythonhosted.org/packages/36/d7/8556c030ef8e8e3751624460a38968dda61be4cc8581dd0071676a3cb417/bicleaner-0.11.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7c8a897269d22ee90fce5a87ac660c0", "sha256": "76202b850052502a476dd7fb5b1f0a877d4786452a0e3c5f10fb4e3238965235"}, "downloads": -1, "filename": "bicleaner-0.11.5.tar.gz", "has_sig": false, "md5_digest": "f7c8a897269d22ee90fce5a87ac660c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40378, "upload_time": "2019-03-04T16:12:52", "upload_time_iso_8601": "2019-03-04T16:12:52.673759Z", "url": "https://files.pythonhosted.org/packages/46/ca/bf17117a1122784ff4c048c0497223d980e2069defaeb00cd9ebe2993ba0/bicleaner-0.11.5.tar.gz", "yanked": false}], "0.11.6": [{"comment_text": "", "digests": {"md5": "8107f3db87f2431266e97e6271eeff72", "sha256": "7970f9bd1d2f0a9fe063892b636d467800a083d49ebf84a1e828cf0e087fd01f"}, "downloads": -1, "filename": "bicleaner-0.11.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8107f3db87f2431266e97e6271eeff72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56650, "upload_time": "2019-03-05T10:33:53", "upload_time_iso_8601": "2019-03-05T10:33:53.600352Z", "url": "https://files.pythonhosted.org/packages/f3/bb/a849e153033515ea4917aedc70c748f180b0a8ad1c6c5aabd9cbaac93e88/bicleaner-0.11.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b879b25c5168ba04b602fd7ef45f26e3", "sha256": "9f53483c59509bfeaef4d08b94c6b7cacbec05e89bef486b5b9ded00251c543c"}, "downloads": -1, "filename": "bicleaner-0.11.6.tar.gz", "has_sig": false, "md5_digest": "b879b25c5168ba04b602fd7ef45f26e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40373, "upload_time": "2019-03-05T10:33:55", "upload_time_iso_8601": "2019-03-05T10:33:55.733402Z", "url": "https://files.pythonhosted.org/packages/47/63/496186d52b2f67319fb38cd22daf6be07fa6648811b175e5268526641dc1/bicleaner-0.11.6.tar.gz", "yanked": false}], "0.11.7": [{"comment_text": "", "digests": {"md5": "d39c84b59cc78171bbd2455aacfc8133", "sha256": "576cc5445d2aec175c68fa047d480480c1b3d3de897a27a7c51945f5fdd6f18e"}, "downloads": -1, "filename": "bicleaner-0.11.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d39c84b59cc78171bbd2455aacfc8133", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 56655, "upload_time": "2019-03-06T13:52:22", "upload_time_iso_8601": "2019-03-06T13:52:22.203020Z", "url": "https://files.pythonhosted.org/packages/df/43/f1795dd2e1b80b87502747201e5fdcd0287f93b1706f939398028d29153a/bicleaner-0.11.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8738b71d6b8a4866ef79f620e3ef42d7", "sha256": "11f45bc46fac6e042643a0180baeb6bfaeb1b186991a4feada834afec7c41e1e"}, "downloads": -1, "filename": "bicleaner-0.11.7.tar.gz", "has_sig": false, "md5_digest": "8738b71d6b8a4866ef79f620e3ef42d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40383, "upload_time": "2019-03-06T13:52:24", "upload_time_iso_8601": "2019-03-06T13:52:24.162850Z", "url": "https://files.pythonhosted.org/packages/12/ad/4d447360efbfe83b0fb3e2eaec65f2d5a9b3b0d02be9902a19ba242500e8/bicleaner-0.11.7.tar.gz", "yanked": false}], "0.11.8": [{"comment_text": "", "digests": {"md5": "f8970606e6a3e9717d69b1b84df8af2b", "sha256": "e871f5eca8a5bcb1e97730ec31415373e230f9ebe2f1900a35b3acb87844d459"}, "downloads": -1, "filename": "bicleaner-0.11.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f8970606e6a3e9717d69b1b84df8af2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57115, "upload_time": "2019-03-12T17:05:03", "upload_time_iso_8601": "2019-03-12T17:05:03.724277Z", "url": "https://files.pythonhosted.org/packages/2d/61/2a0f85fdc3b6f71223ee1ded8b1d4189a20dd26450c5440ab6456a125f67/bicleaner-0.11.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf6884d0d79968347cdfa95d651b5996", "sha256": "2d6a95c8b376bc763fa613ecf9e2fb4e7a8569a41e8c2dd46cad6a1a97ae722a"}, "downloads": -1, "filename": "bicleaner-0.11.8.tar.gz", "has_sig": false, "md5_digest": "bf6884d0d79968347cdfa95d651b5996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41471, "upload_time": "2019-03-12T17:05:05", "upload_time_iso_8601": "2019-03-12T17:05:05.694569Z", "url": "https://files.pythonhosted.org/packages/c8/62/9de8f241a5c3d4325ff418903634bc71cb51feb16e72d5ba6878419518a3/bicleaner-0.11.8.tar.gz", "yanked": false}], "0.11.9": [{"comment_text": "", "digests": {"md5": "53009df3da1da728de7d9728b90b6176", "sha256": "c69f5cdb047fe5cfc589e354d38375962eb7571451c716ec43f913f4593a84b5"}, "downloads": -1, "filename": "bicleaner-0.11.9-py3-none-any.whl", "has_sig": false, "md5_digest": "53009df3da1da728de7d9728b90b6176", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 57617, "upload_time": "2019-03-26T10:05:33", "upload_time_iso_8601": "2019-03-26T10:05:33.200210Z", "url": "https://files.pythonhosted.org/packages/2f/98/e910734678e7861662c575aa023dffe08af8a0a142e72a7ef2ede165d0ad/bicleaner-0.11.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53048f1c06b646de9da4eecd77191beb", "sha256": "12dea06e3512c4f09f08f749200112f608eb8adf68820ad0f3ae301bf4e105d6"}, "downloads": -1, "filename": "bicleaner-0.11.9.tar.gz", "has_sig": false, "md5_digest": "53048f1c06b646de9da4eecd77191beb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42319, "upload_time": "2019-03-26T10:05:35", "upload_time_iso_8601": "2019-03-26T10:05:35.313049Z", "url": "https://files.pythonhosted.org/packages/92/6d/4954962c8cde975b8b4d3bd7ed2af993eee08c14b4fddf9cee805c0d476f/bicleaner-0.11.9.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "1ac78da48f03db42e497ed6d941c1952", "sha256": "46acaeb403072657d88405d09630016ce940273216ac61e277bd401ac41ae42d"}, "downloads": -1, "filename": "bicleaner-0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "1ac78da48f03db42e497ed6d941c1952", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 60163, "upload_time": "2019-10-21T12:22:03", "upload_time_iso_8601": "2019-10-21T12:22:03.622782Z", "url": "https://files.pythonhosted.org/packages/96/a5/7f4d271b6f192e16b0e7e1f505b2badd2fd5d944de4c97a07b2ecb0ade71/bicleaner-0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ce881a00f4cdeea3a5eababa5e3eb93", "sha256": "e2ef9e1a4fd388dbab8d9165ad57e3871a82eb377dc0c690d76958cd01694ad6"}, "downloads": -1, "filename": "bicleaner-0.12.tar.gz", "has_sig": false, "md5_digest": "1ce881a00f4cdeea3a5eababa5e3eb93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41223, "upload_time": "2019-10-21T12:22:06", "upload_time_iso_8601": "2019-10-21T12:22:06.219520Z", "url": "https://files.pythonhosted.org/packages/3c/a6/7bfdb4d089a55dd6d7dd5f2ce3524b89a49b13891ba6448d779678a7776e/bicleaner-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "4d4a4931550aae35aaac2437a66b0e9f", "sha256": "f0afa351927cd8608bd5830e8f972dd6deefdeb485d9de0cdde5ecc84c26f4c6"}, "downloads": -1, "filename": "bicleaner-0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "4d4a4931550aae35aaac2437a66b0e9f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 62519, "upload_time": "2020-02-27T15:53:24", "upload_time_iso_8601": "2020-02-27T15:53:24.694032Z", "url": "https://files.pythonhosted.org/packages/b5/fb/c9922dcfc4ed8e8b560a1558e3633354e8a555ba56b953bb14fccca250f9/bicleaner-0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fec7af62b4a27ef8a0b067706a30809e", "sha256": "4aaaaae90674190f0e121d3ea9c5e16a3bb52d416aaf907674ad67dc948f8acc"}, "downloads": -1, "filename": "bicleaner-0.13.tar.gz", "has_sig": false, "md5_digest": "fec7af62b4a27ef8a0b067706a30809e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43149, "upload_time": "2020-02-27T15:53:28", "upload_time_iso_8601": "2020-02-27T15:53:28.109584Z", "url": "https://files.pythonhosted.org/packages/f9/8e/6c2c483fa99593599aa74d3af3ab23674d065c286da205aaca4c09c9a00b/bicleaner-0.13.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "2475b5924b169b0b5dff149095d006eb", "sha256": "6c749e57bc4b63d650b9b53748bf832a47c9b66b7971c95c319f4cf7ce32aaeb"}, "downloads": -1, "filename": "bicleaner-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2475b5924b169b0b5dff149095d006eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38605, "upload_time": "2018-10-02T15:25:05", "upload_time_iso_8601": "2018-10-02T15:25:05.637048Z", "url": "https://files.pythonhosted.org/packages/49/65/454f5503080a7baaa6fb625e6e26a5fd8690d658edd13e31b89968cc82f8/bicleaner-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f4c24063b6afd8924d6fa7764144c76", "sha256": "f9d9b8087b53aa05b2866f6b361dc8d88ce77b9138cfa00cf88ee3788c6b6fd4"}, "downloads": -1, "filename": "bicleaner-0.9.tar.gz", "has_sig": false, "md5_digest": "2f4c24063b6afd8924d6fa7764144c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24609, "upload_time": "2018-10-02T15:25:07", "upload_time_iso_8601": "2018-10-02T15:25:07.045387Z", "url": "https://files.pythonhosted.org/packages/6d/14/3eb257049a154e4a8c665650d50eef168ab8c0c5b6d03a705d46eaee84c6/bicleaner-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d4a4931550aae35aaac2437a66b0e9f", "sha256": "f0afa351927cd8608bd5830e8f972dd6deefdeb485d9de0cdde5ecc84c26f4c6"}, "downloads": -1, "filename": "bicleaner-0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "4d4a4931550aae35aaac2437a66b0e9f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 62519, "upload_time": "2020-02-27T15:53:24", "upload_time_iso_8601": "2020-02-27T15:53:24.694032Z", "url": "https://files.pythonhosted.org/packages/b5/fb/c9922dcfc4ed8e8b560a1558e3633354e8a555ba56b953bb14fccca250f9/bicleaner-0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fec7af62b4a27ef8a0b067706a30809e", "sha256": "4aaaaae90674190f0e121d3ea9c5e16a3bb52d416aaf907674ad67dc948f8acc"}, "downloads": -1, "filename": "bicleaner-0.13.tar.gz", "has_sig": false, "md5_digest": "fec7af62b4a27ef8a0b067706a30809e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43149, "upload_time": "2020-02-27T15:53:28", "upload_time_iso_8601": "2020-02-27T15:53:28.109584Z", "url": "https://files.pythonhosted.org/packages/f9/8e/6c2c483fa99593599aa74d3af3ab23674d065c286da205aaca4c09c9a00b/bicleaner-0.13.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:36 2020"}