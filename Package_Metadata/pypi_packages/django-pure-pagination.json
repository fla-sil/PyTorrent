{"info": {"author": "James Pacileo", "author_email": "jamespacileo@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======================\ndjango-pure-pagination\n======================\n\n.. image:: https://travis-ci.org/hovel/django-pure-pagination.svg?branch=master\n    :target: https://travis-ci.org/hovel/django-pure-pagination\n\nDescription\n======================\n\n:Author:\n    James Pacileo `@ignighted <http://twitter.com/ignighted>`_\n\n:Version:\n    0.3.0\n\n:Description:\n    django-pure-pagination provides advanced pagination features and is fully compatible with existing code based on Django's core pagination module. (aka no need to rewrite code!)\n\n:Requirements:\n    Django 1.7+\n\n:Contributors:\n    `juandecarrion (Juande Carrion) <https://github.com/juandecarrion>`_, `twidi (St\u00e9phane Angel) <https://github.com/twidi>`_, `bebraw (Juho Veps\u00e4l\u00e4inen) <https://github.com/bebraw>`_, `lampslave () <https://github.com/lampslave>`_, `GeyseR (Sergey Fursov) <https://github.com/GeyseR>`_, `zeus (Pavel Zhukov) <https://github.com/zeus>`_\n\n\nIntroduction\n============\n\nThe django app offers advanced pagination features without forcing major code changes within an existing project.\n\nDjango-pure-pagination is based upon Django's core pagination module and is therefore compatible with the existing api.\n\n`Documentation for Django core pagination module <http://docs.djangoproject.com/en/dev/topics/pagination/>`_\n\nFeatures\n--------\n\n1. Uses same API as **django.core.pagination** and therefore is fully compatible with existing code.\n\n2. Has dynamic query string creation, which takes into consideration existing GET parameters.\n\n3. Out-of-the-box html rendering of the pagination\n\n4. Additional methods make it easier to render more advanced pagination templates.\n\n\nInstallation\n------------\n\nInstall package from PYPI:\n\n::\n\n    pip install django-pure-pagination\n\nor clone and install from repository:\n\n::\n\n    git clone git@github.com:jamespacileo/django-pure-pagination.git\n    cd django-pure-pagination\n    python setup.py install\n\nAdd `pure_pagination` to INSTALLED_APPS\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'pure_pagination',\n    )\n\nFinally substitute **from django.core.paginator import Paginator** with **from pure_pagination import Paginator**\n\nSettings\n--------\n\nA few settings can be set within settings.py\n\n::\n\n    PAGINATION_SETTINGS = {\n        'PAGE_RANGE_DISPLAYED': 10,\n        'MARGIN_PAGES_DISPLAYED': 2,\n\n        'SHOW_FIRST_PAGE_WHEN_INVALID': True,\n    }\n\n**PAGE_RANGE_DISPLAYED** is the number of pages neighbouring the current page which will be displayed (default is 10)\n\n**MARGIN_PAGES_DISPLAYED** is the number of pages neighbouring the first and last page which will be displayed (default is 2)\n\nSet **SHOW_FIRST_PAGE_WHEN_INVALID** to True when you want to just show first page when provided invalid page instead of 404 error\n\n.. image:: http://i.imgur.com/LCqrt.gif\n\nUsage example\n-------------\n\nFollowing is a simple example for **function based views**. For generic class-based views, see bellow.\n\nview file: **views.py**\n\n::\n\n    # views.py\n    from django.shortcuts import render_to_response\n\n    from pure_pagination import Paginator, EmptyPage, PageNotAnInteger\n\n\n    def index(request):\n\n        try:\n            page = request.GET.get('page', 1)\n        except PageNotAnInteger:\n            page = 1\n\n        objects = ['john', 'edward', 'josh', 'frank']\n\n        # Provide Paginator with the request object for complete querystring generation\n\n        p = Paginator(objects, request=request)\n\n        people = p.page(page)\n\n        return render_to_response('index.html', {\n            'people': people,\n        }\n\n\ntemplate file: **index.html**\n\n::\n\n    {# index.html #}\n    {% extends 'base.html' %}\n\n    {% block content %}\n\n    {% for person in people.object_list %}\n        <div>\n            First name: {{ person }}\n        </div>\n    {% endfor %}\n\n    {# The following renders the pagination html #}\n    <div id=\"pagination\">\n        {{ people.render }}\n    </div>\n\n    {% endblock %}\n\n\nUsage\n-----\n\nThere a few different way you can make use of the features introduced within django-pure-pagination.\n\nEasiest way to render the pagination is to call the render method i.e. **{{ page.render }}**\n\nAlternatively you can access the Page object low level methods yourself\n\n**Special note:** **page_obj** and **current_page** both point to the page object within the template.\n\n::\n\n    {% load i18n %}\n    <div class=\"pagination\">\n        {% if page_obj.has_previous %}\n            <a href=\"?{{ page_obj.previous_page_number.querystring }}\" class=\"prev\">&lsaquo;&lsaquo; {% trans \"previous\" %}</a>\n        {% else %}\n            <span class=\"disabled prev\">&lsaquo;&lsaquo; {% trans \"previous\" %}</span>\n        {% endif %}\n        {% for page in page_obj.pages %}\n            {% if page %}\n                {% ifequal page page_obj.number %}\n                    <span class=\"current page\">{{ page }}</span>\n                {% else %}\n                    <a href=\"?{{ page.querystring }}\" class=\"page\">{{ page }}</a>\n                {% endifequal %}\n            {% else %}\n                ...\n            {% endif %}\n        {% endfor %}\n        {% if page_obj.has_next %}\n            <a href=\"?{{ page_obj.next_page_number.querystring }}\" class=\"next\">{% trans \"next\" %} &rsaquo;&rsaquo;</a>\n        {% else %}\n            <span class=\"disabled next\">{% trans \"next\" %} &rsaquo;&rsaquo;</span>\n        {% endif %}\n    </div>\n\nGeneric Class-Based Views\n-------------------------\n\nDocumentation for Django generic class-based views on https://docs.djangoproject.com/en/dev/ref/class-based-views/\n\n\nview file:\n\n* **views.py**\n\n    ::\n\n        # views.py\n        from django.views.generic import ListView\n\n        from pure_pagination.mixins import PaginationMixin\n\n        from my_app.models import MyModel\n\n\n        class MyModelListView(PaginationMixin, ListView):\n            # Important, this tells the ListView class we are paginating\n            paginate_by = 10\n\n            # Replace it for your model or use the queryset attribute instead\n            object = MyModel\n\ntemplate files:\n\nNote that the Django generic-based list view will include the object **page_obj** in the context. More information on https://docs.djangoproject.com/en/dev/ref/generic-views/#list-detail-generic-views\n\n* **_pagination.html**\n\n    ::\n\n        {% load i18n %}\n        <div class=\"pagination\">\n            {% if page_obj.has_previous %}\n                <a href=\"?{{ page_obj.previous_page_number.querystring }}\" class=\"prev\">&lsaquo;&lsaquo; {% trans \"previous\" %}</a>\n            {% else %}\n                <span class=\"disabled prev\">&lsaquo;&lsaquo; {% trans \"previous\" %}</span>\n            {% endif %}\n            {% for page in page_obj.pages %}\n                {% if page %}\n                    {% ifequal page page_obj.number %}\n                        <span class=\"current page\">{{ page }}</span>\n                    {% else %}\n                        <a href=\"?{{ page.querystring }}\" class=\"page\">{{ page }}</a>\n                    {% endifequal %}\n                {% else %}\n                    ...\n                {% endif %}\n            {% endfor %}\n            {% if page_obj.has_next %}\n                <a href=\"?{{ page_obj.next_page_number.querystring }}\" class=\"next\">{% trans \"next\" %} &rsaquo;&rsaquo;</a>\n            {% else %}\n                <span class=\"disabled next\">{% trans \"next\" %} &rsaquo;&rsaquo;</span>\n            {% endif %}\n        </div>\n\n*  **my_app/myobject_list.html**\n\n    ::\n\n        {# my_app/myobject_list.html #}\n        {% extends 'base.html' %}\n\n        {% block content %}\n\n        {% for object in object_list %}\n            <div>\n                First name: {{ object.first_name }}\n            </div>\n        {% endfor %}\n\n        {# The following renders the pagination html #}\n        {% include \"_pagination.html\" %}\n\n        {% endblock %}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamespacileo/django-pure-pagination/", "keywords": "pagination,django", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-pure-pagination", "package_url": "https://pypi.org/project/django-pure-pagination/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pure-pagination/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jamespacileo/django-pure-pagination/"}, "release_url": "https://pypi.org/project/django-pure-pagination/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "django-pure-pagination provides advanced pagination features\n                   and is fully compatible with existing code based on Django's\n                   core \n                   pagination module. (aka no need to rewrite code!)", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/hovel/django-pure-pagination\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/hovel/django-pure-pagination.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5faf2c72a415dce42f99e7498d9a8f7acdc5a3f7/68747470733a2f2f7472617669732d63692e6f72672f686f76656c2f646a616e676f2d707572652d706167696e6174696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"description\">\n<h2>Description</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th><td>James Pacileo <a href=\"http://twitter.com/ignighted\" rel=\"nofollow\">@ignighted</a></td>\n</tr>\n<tr><th>Version:</th><td>0.3.0</td>\n</tr>\n<tr><th>Description:</th><td>django-pure-pagination provides advanced pagination features and is fully compatible with existing code based on Django\u2019s core pagination module. (aka no need to rewrite code!)</td>\n</tr>\n<tr><th>Requirements:</th><td>Django 1.7+</td>\n</tr>\n<tr><th>Contributors:</th><td><a href=\"https://github.com/juandecarrion\" rel=\"nofollow\">juandecarrion (Juande Carrion)</a>, <a href=\"https://github.com/twidi\" rel=\"nofollow\">twidi (St\u00e9phane Angel)</a>, <a href=\"https://github.com/bebraw\" rel=\"nofollow\">bebraw (Juho Veps\u00e4l\u00e4inen)</a>, <a href=\"https://github.com/lampslave\" rel=\"nofollow\">lampslave ()</a>, <a href=\"https://github.com/GeyseR\" rel=\"nofollow\">GeyseR (Sergey Fursov)</a>, <a href=\"https://github.com/zeus\" rel=\"nofollow\">zeus (Pavel Zhukov)</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The django app offers advanced pagination features without forcing major code changes within an existing project.</p>\n<p>Django-pure-pagination is based upon Django\u2019s core pagination module and is therefore compatible with the existing api.</p>\n<p><a href=\"http://docs.djangoproject.com/en/dev/topics/pagination/\" rel=\"nofollow\">Documentation for Django core pagination module</a></p>\n<div id=\"features\">\n<h3>Features</h3>\n<ol>\n<li>Uses same API as <strong>django.core.pagination</strong> and therefore is fully compatible with existing code.</li>\n<li>Has dynamic query string creation, which takes into consideration existing GET parameters.</li>\n<li>Out-of-the-box html rendering of the pagination</li>\n<li>Additional methods make it easier to render more advanced pagination templates.</li>\n</ol>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install package from PYPI:</p>\n<pre>pip install django-pure-pagination\n</pre>\n<p>or clone and install from repository:</p>\n<pre>git clone git@github.com:jamespacileo/django-pure-pagination.git\ncd django-pure-pagination\npython setup.py install\n</pre>\n<p>Add <cite>pure_pagination</cite> to INSTALLED_APPS</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'pure_pagination',\n)\n</pre>\n<p>Finally substitute <strong>from django.core.paginator import Paginator</strong> with <strong>from pure_pagination import Paginator</strong></p>\n</div>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>A few settings can be set within settings.py</p>\n<pre>PAGINATION_SETTINGS = {\n    'PAGE_RANGE_DISPLAYED': 10,\n    'MARGIN_PAGES_DISPLAYED': 2,\n\n    'SHOW_FIRST_PAGE_WHEN_INVALID': True,\n}\n</pre>\n<p><strong>PAGE_RANGE_DISPLAYED</strong> is the number of pages neighbouring the current page which will be displayed (default is 10)</p>\n<p><strong>MARGIN_PAGES_DISPLAYED</strong> is the number of pages neighbouring the first and last page which will be displayed (default is 2)</p>\n<p>Set <strong>SHOW_FIRST_PAGE_WHEN_INVALID</strong> to True when you want to just show first page when provided invalid page instead of 404 error</p>\n<img alt=\"http://i.imgur.com/LCqrt.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a8d65214df0e0c6a7b20111309bed58f2ebd604/687474703a2f2f692e696d6775722e636f6d2f4c437172742e676966\">\n</div>\n<div id=\"usage-example\">\n<h3>Usage example</h3>\n<p>Following is a simple example for <strong>function based views</strong>. For generic class-based views, see bellow.</p>\n<p>view file: <strong>views.py</strong></p>\n<pre># views.py\nfrom django.shortcuts import render_to_response\n\nfrom pure_pagination import Paginator, EmptyPage, PageNotAnInteger\n\n\ndef index(request):\n\n    try:\n        page = request.GET.get('page', 1)\n    except PageNotAnInteger:\n        page = 1\n\n    objects = ['john', 'edward', 'josh', 'frank']\n\n    # Provide Paginator with the request object for complete querystring generation\n\n    p = Paginator(objects, request=request)\n\n    people = p.page(page)\n\n    return render_to_response('index.html', {\n        'people': people,\n    }\n</pre>\n<p>template file: <strong>index.html</strong></p>\n<pre>{# index.html #}\n{% extends 'base.html' %}\n\n{% block content %}\n\n{% for person in people.object_list %}\n    &lt;div&gt;\n        First name: {{ person }}\n    &lt;/div&gt;\n{% endfor %}\n\n{# The following renders the pagination html #}\n&lt;div id=\"pagination\"&gt;\n    {{ people.render }}\n&lt;/div&gt;\n\n{% endblock %}\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>There a few different way you can make use of the features introduced within django-pure-pagination.</p>\n<p>Easiest way to render the pagination is to call the render method i.e. <strong>{{ page.render }}</strong></p>\n<p>Alternatively you can access the Page object low level methods yourself</p>\n<p><strong>Special note:</strong> <strong>page_obj</strong> and <strong>current_page</strong> both point to the page object within the template.</p>\n<pre>{% load i18n %}\n&lt;div class=\"pagination\"&gt;\n    {% if page_obj.has_previous %}\n        &lt;a href=\"?{{ page_obj.previous_page_number.querystring }}\" class=\"prev\"&gt;&amp;lsaquo;&amp;lsaquo; {% trans \"previous\" %}&lt;/a&gt;\n    {% else %}\n        &lt;span class=\"disabled prev\"&gt;&amp;lsaquo;&amp;lsaquo; {% trans \"previous\" %}&lt;/span&gt;\n    {% endif %}\n    {% for page in page_obj.pages %}\n        {% if page %}\n            {% ifequal page page_obj.number %}\n                &lt;span class=\"current page\"&gt;{{ page }}&lt;/span&gt;\n            {% else %}\n                &lt;a href=\"?{{ page.querystring }}\" class=\"page\"&gt;{{ page }}&lt;/a&gt;\n            {% endifequal %}\n        {% else %}\n            ...\n        {% endif %}\n    {% endfor %}\n    {% if page_obj.has_next %}\n        &lt;a href=\"?{{ page_obj.next_page_number.querystring }}\" class=\"next\"&gt;{% trans \"next\" %} &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;\n    {% else %}\n        &lt;span class=\"disabled next\"&gt;{% trans \"next\" %} &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;\n    {% endif %}\n&lt;/div&gt;\n</pre>\n</div>\n<div id=\"generic-class-based-views\">\n<h3>Generic Class-Based Views</h3>\n<p>Documentation for Django generic class-based views on <a href=\"https://docs.djangoproject.com/en/dev/ref/class-based-views/\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/class-based-views/</a></p>\n<p>view file:</p>\n<ul>\n<li><p><strong>views.py</strong></p>\n<blockquote>\n<pre># views.py\nfrom django.views.generic import ListView\n\nfrom pure_pagination.mixins import PaginationMixin\n\nfrom my_app.models import MyModel\n\n\nclass MyModelListView(PaginationMixin, ListView):\n    # Important, this tells the ListView class we are paginating\n    paginate_by = 10\n\n    # Replace it for your model or use the queryset attribute instead\n    object = MyModel\n</pre>\n</blockquote>\n</li>\n</ul>\n<p>template files:</p>\n<p>Note that the Django generic-based list view will include the object <strong>page_obj</strong> in the context. More information on <a href=\"https://docs.djangoproject.com/en/dev/ref/generic-views/#list-detail-generic-views\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/generic-views/#list-detail-generic-views</a></p>\n<ul>\n<li><p><strong>_pagination.html</strong></p>\n<blockquote>\n<pre>{% load i18n %}\n&lt;div class=\"pagination\"&gt;\n    {% if page_obj.has_previous %}\n        &lt;a href=\"?{{ page_obj.previous_page_number.querystring }}\" class=\"prev\"&gt;&amp;lsaquo;&amp;lsaquo; {% trans \"previous\" %}&lt;/a&gt;\n    {% else %}\n        &lt;span class=\"disabled prev\"&gt;&amp;lsaquo;&amp;lsaquo; {% trans \"previous\" %}&lt;/span&gt;\n    {% endif %}\n    {% for page in page_obj.pages %}\n        {% if page %}\n            {% ifequal page page_obj.number %}\n                &lt;span class=\"current page\"&gt;{{ page }}&lt;/span&gt;\n            {% else %}\n                &lt;a href=\"?{{ page.querystring }}\" class=\"page\"&gt;{{ page }}&lt;/a&gt;\n            {% endifequal %}\n        {% else %}\n            ...\n        {% endif %}\n    {% endfor %}\n    {% if page_obj.has_next %}\n        &lt;a href=\"?{{ page_obj.next_page_number.querystring }}\" class=\"next\"&gt;{% trans \"next\" %} &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;\n    {% else %}\n        &lt;span class=\"disabled next\"&gt;{% trans \"next\" %} &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;\n    {% endif %}\n&lt;/div&gt;\n</pre>\n</blockquote>\n</li>\n<li><p><strong>my_app/myobject_list.html</strong></p>\n<blockquote>\n<pre>{# my_app/myobject_list.html #}\n{% extends 'base.html' %}\n\n{% block content %}\n\n{% for object in object_list %}\n    &lt;div&gt;\n        First name: {{ object.first_name }}\n    &lt;/div&gt;\n{% endfor %}\n\n{# The following renders the pagination html #}\n{% include \"_pagination.html\" %}\n\n{% endblock %}\n</pre>\n</blockquote>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1878363, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f6ed83aabec370e72850498689711979", "sha256": "5f3fc2ad65861fdfa12d577196885954f7f6be0d00fd3dc08a9edb7dbf01b138"}, "downloads": -1, "filename": "django-pure-pagination-0.1.zip", "has_sig": false, "md5_digest": "f6ed83aabec370e72850498689711979", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11937, "upload_time": "2011-04-19T16:35:11", "upload_time_iso_8601": "2011-04-19T16:35:11.760134Z", "url": "https://files.pythonhosted.org/packages/5c/b0/81821a2e2f935be5d66b1e0f1a10c362113149acc22316c79765f446d5a2/django-pure-pagination-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7b9b58c7252f76684ecd6b47343c9805", "sha256": "cf2d1694aedb03cc743f1378ae4ce41ff1e40d6b7aefe198f128dcb888780913"}, "downloads": -1, "filename": "django-pure-pagination-0.2.zip", "has_sig": false, "md5_digest": "7b9b58c7252f76684ecd6b47343c9805", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13925, "upload_time": "2012-06-24T03:08:29", "upload_time_iso_8601": "2012-06-24T03:08:29.000920Z", "url": "https://files.pythonhosted.org/packages/3d/fa/f692f57f07c60f72cbece99121fbd3073c0ccb396b6858d4e70728d85cc0/django-pure-pagination-0.2.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "143613cf47d58e8d344d638e0efeaffc", "sha256": "c2f5005e7c53e31b7fcad80d18dc8a4c6f1f59cc1ec45c4d5029dd7ff9a37c9a"}, "downloads": -1, "filename": "django-pure-pagination-0.2.1.zip", "has_sig": false, "md5_digest": "143613cf47d58e8d344d638e0efeaffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16552, "upload_time": "2012-06-24T03:12:53", "upload_time_iso_8601": "2012-06-24T03:12:53.291184Z", "url": "https://files.pythonhosted.org/packages/98/7b/f5e5d3782555d1ff567d913c4257314a0c7d8cd851f12612dfe054a9155d/django-pure-pagination-0.2.1.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "df040d86369f3f0dd5156ca9fe3cc46b", "sha256": "02b42561b8afb09f1fb6ac6dc81db13374f5f748640f31c8160a374274b54713"}, "downloads": -1, "filename": "django-pure-pagination-0.3.0.tar.gz", "has_sig": false, "md5_digest": "df040d86369f3f0dd5156ca9fe3cc46b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10857, "upload_time": "2015-12-26T22:50:50", "upload_time_iso_8601": "2015-12-26T22:50:50.607612Z", "url": "https://files.pythonhosted.org/packages/55/43/50c475f408d3350cec340855970a5ce02ea12f5a53d520315f200b4847a1/django-pure-pagination-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df040d86369f3f0dd5156ca9fe3cc46b", "sha256": "02b42561b8afb09f1fb6ac6dc81db13374f5f748640f31c8160a374274b54713"}, "downloads": -1, "filename": "django-pure-pagination-0.3.0.tar.gz", "has_sig": false, "md5_digest": "df040d86369f3f0dd5156ca9fe3cc46b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10857, "upload_time": "2015-12-26T22:50:50", "upload_time_iso_8601": "2015-12-26T22:50:50.607612Z", "url": "https://files.pythonhosted.org/packages/55/43/50c475f408d3350cec340855970a5ce02ea12f5a53d520315f200b4847a1/django-pure-pagination-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:36 2020"}