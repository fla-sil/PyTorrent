{"info": {"author": "Marius Pachitariu and Carsen Stringer", "author_email": "stringerc@janelia.hhmi.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Cellpose <img src=\"cellpose/logo/logo.png\" width=\"250\" title=\"cellpose\" alt=\"cellpose\" align=\"right\" vspace = \"50\">\n\nA generalist algorithm for cell and nucleus segmentation. \n\nThis code was written by Carsen Stringer and Marius Pachitariu. To learn about Cellpose, read the [paper](https://t.co/4HFsxDezAP?amp=1) or watch the [talk](https://t.co/JChCsTD0SK?amp=1). For support, please open an [issue](https://github.com/MouseLand/cellpose/issues). \n\nYou can quickly try out Cellpose on the [website](http://www.cellpose.org) first (some features disabled). If you want to improve Cellpose for yourself and for everyone else, please consider contributing manual segmentations for a few of your images via the built-in GUI interface (see instructions below). \n\n### Detailed documentation at [www.cellpose.org/docs](http://www.cellpose.org/static/docs/index.html).\n\n## System requirements\n\nLinux, Windows and Mac OS are supported for running the code. For running the graphical interface you will need a Mac OS later than Yosemite. At least 8GB of RAM is required to run the software. 16GB-32GB may be required for larger images and 3D volumes. The software has been heavily tested on Windows 10 and Ubuntu 18.04 and less well-tested on Mac OS. Please open an issue if you have problems with installation.\n\n## Installation\n\nThis process should take less than 5 minutes.\n\n### (Option 1) Standard install in base environment\n\n1. Install an [Anaconda](https://www.anaconda.com/download/) distribution of Python -- Choose **Python 3.7** and your operating system. Note you might need to use an anaconda prompt if you did not add anaconda to the path. \n2. From your base environment in an anaconda prompt/command prompt, run\n~~~~\npip install cellpose[gui]\n~~~~\n\nIf you want to install without the GUI dependencies, run `pip install cellpose`.\n\n### (Option 2) Install in a new environment\n\nAlternatively you can use the included environment file (if you'd like a cellpose-specific environment). This environment file includes all the dependencies for using the GUI. Using the environment file is **recommended** if you have problems with *option 1*. Please follow these instructions:\n\n1. Download the [`environment.yml`](https://github.com/MouseLand/cellpose/blob/master/environment.yml?raw=true) file from the repository. You can do this by cloning the repository, or copy-pasting the text from the file into a text document on your local computer.\n2. Open an anaconda prompt / command prompt with `conda` for **python 3** in the path\n3. Change directories to where the `environment.yml` is and run `conda env create -f environment.yml`\n4. To activate this new environment, run `conda activate cellpose`\n5. You should see `(cellpose)` on the left side of the terminal line. Now run `python -m cellpose` and you're all set.\n\nTo upgrade cellpose (package [here](https://pypi.org/project/cellpose/)), run the following in the environment:\n~~~~\npip install cellpose --upgrade\n~~~~\n\nIf you have an older `cellpose` environment you can remove it with `conda env remove -n cellpose` before creating a new one.\n\nNote you will always have to run **conda activate cellpose** before you run cellpose. If you want to run jupyter notebooks in this environment, then also `conda install jupyter`.\n\n### Common issues\n\nIf you receive the error: `Illegal instruction (core dumped)`, then likely mxnet does not recognize your MKL version. Please uninstall and reinstall mxnet without mkl:\n~~~~\npip uninstall mxnet-mkl\npip uninstall mxnet\npip install mxnet==1.4.0\n~~~~\n\n**MAC OS ISSUE**: You may have an issue on Mac with the latest *opencv-python* library (package name *cv2*). Downgrade it with the command\n~~~~\npip install opencv-python==3.4.5.20\n~~~~\n\nIf you receive the error: `No module named PyQt5.sip`, then try uninstalling and reinstalling pyqt5\n~~~~\npip uninstall pyqt5 pyqt5-tools\npip install pyqt5 pyqt5-tools pyqt5.sip\n~~~~\n\nIf you receive an error associated with **matplotlib**, try upgrading it:\n~~~~\npip install matplotlib --upgrade\n~~~~\n\n\nIf you receive the error: `ImportError: _arpack DLL load failed`, then try uninstalling and reinstalling scipy\n~~~~\npip uninstall scipy\npip install scipy\n~~~~\n\nIf you are having issues with the graphical interface, make sure you have **python 3.7** and not python 3.8 installed.\n\n**CUDA version**\n\nIf you plan on running many images, you may want to install a GPU version of *mxnet*. I recommend using CUDA 10.0 or greater. Follow the instructions [here](https://mxnet.apache.org/get_started?).\n\nBefore installing the GPU version, remove the CPU version:\n~~~\npip uninstall mxnet-mkl\npip uninstall mxnet\n~~~\n\nWhen upgrading cellpose, you will want to ignore dependencies (so that mxnet-mkl does not install):\n~~~\npip install --no-deps cellpose --upgrade\n~~~\n\n### Installation of github version\n\nFollow steps from above to install the dependencies. In the github repository, run `pip install -e .` and the github version will be installed. If you want to go back to the pip version of cellpose, then say `pip install cellpose`.\n\n## Running cellpose\n\nThe quickest way to start is to open the GUI from a command line terminal. You might need to open an anaconda prompt if you did not add anaconda to the path:\n~~~~\npython -m cellpose\n~~~~\n\nThe first time cellpose runs it downloads the latest available trained model weights from the website.\n\nYou can now **drag and drop** any images (*.tif, *.png, *.jpg, *.gif) into the GUI and run Cellpose, and/or manually segment them. When the GUI is processing, you will see the progress bar fill up and during this time you cannot click on anything in the GUI. For more information about what the GUI is doing you can look at the terminal/prompt you opened the GUI with. For example data, see [website](http://www.cellpose.org) or this google drive [folder](https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z). For best accuracy and runtime performance, resize images so cells are less than 100 pixels across. \n\n### Step-by-step demo\n\n1. Download the google drive [folder](https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z) and unzip it. These are a subset of the test images from the paper.\n2. Start the GUI with `python -m cellpose`.\n3. Drag an image from the folder into the GUI.\n4. Set the model (in demo all are `cyto`) and the channel you want to segment (in demo all are `green`). Optionally set the second channel if you are segmenting `cyto` and have an available nucleus channel.\n5. Click the `calibrate` button to estimate the size of the objects in the image. Alternatively you can set the `cell diameter` by hand and press ENTER. You will see the size you set as a red disk at the bottom left of the image.\n6. Click the `run segmentation` button. If MASKS ON is checked, you should see masks drawn on the image.\n7. Now you can click the LEFT/RIGHT arrow keys to move through the folder and segment another image.\n\nOn the demo images each of these steps should run in less than a few seconds on a standard laptop or desktop (with mkl working).\n\n### 3D segmentation\n\nFor multi-channel, multi-Z tiff's, the expected format is Z x channels x Ly x Lx.\n\n## Contributing training data\n\nWe are very excited about receiving community contributions to the training data and re-training the cytoplasm model to make it better. Please follow these guidelines:\n\n1. Run cellpose on your data to see how well it does. Try varying the diameter, which can change results a little. \n2. If there are relatively few mistakes, it won't help much to contribute labelled data. \n3. If there are consistent mistakes, your data is likely very different from anything in the training set, and you should expect major improvements from contributing even just a few manually segmented images.\n4. For images that you contribute, the cells should be at least 10 pixels in diameter, and there should be **at least** several dozens of cells per image, ideally ~100. If your images are too small, consider combining multiple images into a single big one and then manually segmenting that. If they are too big, consider splitting them into smaller crops. \n5. For the manual segmentation, please try to outline the boundaries of the cell, so that everything (membrane, cytoplasm, nucleus) is inside the boundaries. Do not just outline the cytoplasm and exclude the membrane, because that would be inconsistent with our own labelling and we wouldn't be able to use that. \n6. Do not use the results of the algorithm in any way to do contributed manual segmentations. This can reinforce a vicious circle of mistakes, and compromise the dataset for further algorithm development. \n\nIf you are having problems with the nucleus model, please open an issue before contributing data. Nucleus images are generally much less diverse, and we think the current training dataset already covers a very large set of modalities. \n\n\n## Using the GUI\n\nThe GUI serves two main functions:\n\n1. Running the segmentation algorithm.\n2. Manually labelling data.\n\nMain GUI mouse controls (works in all views):\n\n- Pan  = left-click  + drag  \n- Zoom = scroll wheel\n- Full view = double left-click\n- Select mask = left-click on mask\n- Delete mask = Ctrl + left-click\n- Start draw mask = right-click\n- End draw mask = right-click, or return to circle at beginning\n\nOverlaps in masks are NOT allowed. If you draw a mask on top of another mask, it is cropped so that it doesn't overlap with the old mask. Masks in 2D should be single strokes (if *single_stroke* is checked). \n\nIf you want to draw masks in 3D, then you can turn *single_stroke* option off and draw a stroke on each plane with the cell and then press ENTER. 3D labelling will fill in unlabelled z-planes so that you do not have to as densely label.\n\n!NOTE!: The GUI automatically saves after you draw a mask but NOT after segmentation and NOT after 3D mask drawing (too slow). Save in the file menu or with Ctrl+S. The output file is in the same folder as the loaded image with `_seg.npy` appended.\n\n| Keyboard shortcuts  | Description                                                                    |\n| ------------------- | ------------------------------------------------------------------------------ |\n| CTRL+H              | help                                                           |\n| CTRL+Z              | undo previously drawn mask/stroke                              |\n| CTRL+0              | clear all masks                                                |\n| CTRL+L              | load image (can alternatively drag and drop image)             |\n| CTRL+S              | SAVE MASKS IN IMAGE to `_seg.npy` file                      |\n| CTRL+P              | load `_seg.npy` file (note: it will load automatically with image if it exists) |\n| CTRL+M              | load masks file (must be same size as image with 0 for NO mask, and 1,2,3... for masks)|\n| CTRL+N              | load numpy stack (NOT WORKING ATM)                             |\n| A/D or LEFT/RIGHT   | cycle through images in current directory                      |\n| W/S or UP/DOWN      | change color (RGB/gray/red/green/blue)                         |\n| PAGE-UP / PAGE-DOWN | change to flows and cell prob views (if segmentation computed) |\n| , / .               | increase / decrease brush size for drawing masks               |\n| X                   | turn masks ON or OFF                                           |\n| Z                   | toggle outlines ON or OFF                                      |\n| C                   | cycle through labels for image type (saved to `_seg.npy`)   |\n\n**Segmentation options**\n\nSIZE: you can manually enter the approximate diameter for your cells, or press \"calibrate\" to let the model estimate it. The size is represented by a disk at the bottom of the view window (can turn this disk off by unchecking \"scale disk on\").\n\nuse GPU: if you have installed the cuda version of mxnet, then you can activate this, but it won't give huge speedups when running single images in the GUI.\n\nMODEL: there is a *cytoplasm* model and a *nuclei* model, choose what you want to segment\n\nCHAN TO SEG: this is the channel in which the cytoplasm or nuclei exist\n\nCHAN2 (OPT): if *cytoplasm* model is chosen, then choose the nuclear channel for this option\n\n\n### In a notebook\n\nSee [run_cellpose.ipynb](notebooks/run_cellpose.ipynb).\n\n### From the command line\n\nRun `python -m cellpose` and specify parameters as below. For instance to run on a folder with images where cytoplasm is green and nucleus is blue and save the output as a png:\n~~~\npython -m cellpose --dir ~/images_cyto/test/ --pretrained_model cyto --chan 2 --chan2 3 --save_png\n~~~\n\nYou can specify the diameter for all the images or set to 0 if you want the algorithm to estimate it on an image by image basis. Here is how to run on nuclear data (grayscale) where the diameter is automatically estimated:\n~~~\npython -m cellpose --dir ~/images_nuclei/test/ --pretrained_model nuclei --diameter 0. --save_png\n~~~\n\n**Training**\n\nThe same channel settings apply for training models. Cellpose expects the labelled masks (0=no mask, 1,2...=masks) in a separate file, e.g:\n~~~\nwells_000.tif\nwells_000_masks.tif\n~~~\n\nIf you use the --img_filter option (`--img_filter img` in this case):\n~~~\nwells_000_img.tif\nwells_000_masks.tif\n~~~\n\nTo train on cytoplasmic images (green cyto and red nuclei) starting with a pretrained model from cellpose (cyto or nuclei):\n~~~\npython -m cellpose --train --dir ~/images_cyto/train/ --test_dir ~/images_cyto/test/ --pretrained_model cyto --chan 2 --chan2 1\n~~~\n\nYou can train from scratch as well:\n~~~\npython -m cellpose --train --dir ~/images_nuclei/train/ --pretrained_model None\n~~~\n\nYou can specify the full path to a pretrained model to use:\n~~~\npython -m cellpose --dir ~/images_cyto/test/ --pretrained_model ~/images_cyto/test/model/cellpose_35_0 --save_png\n~~~\n\nParameters:\n~~~\nusage: __main__.py [-h] [--train] [--dir DIR] [--img_filter IMG_FILTER]\n                   [--use_gpu] [--do_3D] [--pretrained_model PRETRAINED_MODEL]\n                   [--chan CHAN] [--chan2 CHAN2] [--all_channels]\n                   [--diameter DIAMETER] [--flow_threshold FLOW_THRESHOLD]\n                   [--cellprob_threshold CELLPROB_THRESHOLD] [--save_png]\n                   [--mask_filter MASK_FILTER] [--test_dir TEST_DIR]\n                   [--learning_rate LEARNING_RATE] [--n_epochs N_EPOCHS]\n                   [--batch_size BATCH_SIZE]\n\ncellpose parameters\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --train               train network using images in dir (not yet\n                        implemented)\n  --dir DIR             folder containing data to run or train on\n  --img_filter IMG_FILTER\n                        end string for images to run on\n  --use_gpu             use gpu if mxnet with cuda installed\n  --do_3D               process images as 3D stacks of images (nplanes x nchan\n                        x Ly x Lx\n  --pretrained_model PRETRAINED_MODEL\n                        model to use\n  --chan CHAN           channel to segment; 0: GRAY, 1: RED, 2: GREEN, 3: BLUE\n  --chan2 CHAN2         nuclear channel (if cyto, optional); 0: NONE, 1: RED,\n                        2: GREEN, 3: BLUE\n  --all_channels        use all channels in image if using own model and\n                        images with special channels\n  --diameter DIAMETER   cell diameter, if 0 cellpose will estimate for each\n                        image\n  --flow_threshold FLOW_THRESHOLD\n                        flow error threshold, 0 turns off this optional QC\n                        step\n  --cellprob_threshold CELLPROB_THRESHOLD\n                        cell probability threshold, centered at 0.0\n  --save_png            save masks as png\n  --mask_filter MASK_FILTER\n                        end string for masks to run on\n  --test_dir TEST_DIR   folder containing test data (optional)\n  --learning_rate LEARNING_RATE\n                        learning rate\n  --n_epochs N_EPOCHS   number of epochs\n  --batch_size BATCH_SIZE\n                        batch size\n~~~\n\n## Outputs\n\n`*_seg.npy` files have the following fields:\n\n- *filename* : filename of image\n- *img* : image with chosen channels (nchan x Ly x Lx) (if not multiplane)\n- *masks* : masks (0 = NO masks; 1,2,... = mask labels)\n- *colors* : colors for masks\n- *outlines* : outlines of masks (0 = NO outline; 1,2,... = outline labels)\n- *chan_choose* : channels that you chose in GUI (0=gray/none, 1=red, 2=green, 3=blue)\n- *ismanual* : element *k* = whether or not mask *k* was manually drawn or computed by the cellpose algorithm\n- *flows* : flows[0] is XY flow in RGB, flows[1] is the cell probability in range 0-255 instead of 0.0 to 1.0, flows[2] is Z flow in range 0-255 (if it exists)\n- *est_diam* : estimated diameter (if run on command line)\n- *zdraw* : for each mask, which planes were manually labelled (planes in between manually drawn have interpolated masks)\n\n## Dependencies\ncellpose relies on the following excellent packages (which are automatically installed with conda/pip if missing):\n- [mxnet_mkl](https://mxnet.apache.org/)\n- [pyqtgraph](http://pyqtgraph.org/)\n- [PyQt5](http://pyqt.sourceforge.net/Docs/PyQt5/)\n- [numpy](http://www.numpy.org/) (>=1.16.0)\n- [numba](http://numba.pydata.org/numba-doc/latest/user/5minguide.html)\n- [scipy](https://www.scipy.org/)\n- [scikit-image](https://scikit-image.org/)\n- [natsort](https://natsort.readthedocs.io/en/master/)\n- [matplotlib](https://matplotlib.org/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MouseLand/cellpose", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "cellpose", "package_url": "https://pypi.org/project/cellpose/", "platform": "", "project_url": "https://pypi.org/project/cellpose/", "project_urls": {"Homepage": "https://github.com/MouseLand/cellpose"}, "release_url": "https://pypi.org/project/cellpose/0.0.2.1/", "requires_dist": ["numpy", "scipy", "natsort", "Pillow (<=7.0.0)", "tqdm", "numba", "scikit-image", "matplotlib", "mxnet-mkl", "opencv-python", "pyqtgraph ; extra == 'gui'", "PyQt5 ; extra == 'gui'", "google-cloud-storage ; extra == 'gui'"], "requires_python": "", "summary": "anatomical segmentation algorithm", "version": "0.0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cellpose <img align=\"right\" alt=\"cellpose\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30ea310b16a19a90d631471cc390b370ffbbd76d/63656c6c706f73652f6c6f676f2f6c6f676f2e706e67\" width=\"250\"></h1>\n<p>A generalist algorithm for cell and nucleus segmentation.</p>\n<p>This code was written by Carsen Stringer and Marius Pachitariu. To learn about Cellpose, read the <a href=\"https://t.co/4HFsxDezAP?amp=1\" rel=\"nofollow\">paper</a> or watch the <a href=\"https://t.co/JChCsTD0SK?amp=1\" rel=\"nofollow\">talk</a>. For support, please open an <a href=\"https://github.com/MouseLand/cellpose/issues\" rel=\"nofollow\">issue</a>.</p>\n<p>You can quickly try out Cellpose on the <a href=\"http://www.cellpose.org\" rel=\"nofollow\">website</a> first (some features disabled). If you want to improve Cellpose for yourself and for everyone else, please consider contributing manual segmentations for a few of your images via the built-in GUI interface (see instructions below).</p>\n<h3>Detailed documentation at <a href=\"http://www.cellpose.org/static/docs/index.html\" rel=\"nofollow\">www.cellpose.org/docs</a>.</h3>\n<h2>System requirements</h2>\n<p>Linux, Windows and Mac OS are supported for running the code. For running the graphical interface you will need a Mac OS later than Yosemite. At least 8GB of RAM is required to run the software. 16GB-32GB may be required for larger images and 3D volumes. The software has been heavily tested on Windows 10 and Ubuntu 18.04 and less well-tested on Mac OS. Please open an issue if you have problems with installation.</p>\n<h2>Installation</h2>\n<p>This process should take less than 5 minutes.</p>\n<h3>(Option 1) Standard install in base environment</h3>\n<ol>\n<li>Install an <a href=\"https://www.anaconda.com/download/\" rel=\"nofollow\">Anaconda</a> distribution of Python -- Choose <strong>Python 3.7</strong> and your operating system. Note you might need to use an anaconda prompt if you did not add anaconda to the path.</li>\n<li>From your base environment in an anaconda prompt/command prompt, run</li>\n</ol>\n<pre><code>pip install cellpose[gui]\n</code></pre>\n<p>If you want to install without the GUI dependencies, run <code>pip install cellpose</code>.</p>\n<h3>(Option 2) Install in a new environment</h3>\n<p>Alternatively you can use the included environment file (if you'd like a cellpose-specific environment). This environment file includes all the dependencies for using the GUI. Using the environment file is <strong>recommended</strong> if you have problems with <em>option 1</em>. Please follow these instructions:</p>\n<ol>\n<li>Download the <a href=\"https://github.com/MouseLand/cellpose/blob/master/environment.yml?raw=true\" rel=\"nofollow\"><code>environment.yml</code></a> file from the repository. You can do this by cloning the repository, or copy-pasting the text from the file into a text document on your local computer.</li>\n<li>Open an anaconda prompt / command prompt with <code>conda</code> for <strong>python 3</strong> in the path</li>\n<li>Change directories to where the <code>environment.yml</code> is and run <code>conda env create -f environment.yml</code></li>\n<li>To activate this new environment, run <code>conda activate cellpose</code></li>\n<li>You should see <code>(cellpose)</code> on the left side of the terminal line. Now run <code>python -m cellpose</code> and you're all set.</li>\n</ol>\n<p>To upgrade cellpose (package <a href=\"https://pypi.org/project/cellpose/\" rel=\"nofollow\">here</a>), run the following in the environment:</p>\n<pre><code>pip install cellpose --upgrade\n</code></pre>\n<p>If you have an older <code>cellpose</code> environment you can remove it with <code>conda env remove -n cellpose</code> before creating a new one.</p>\n<p>Note you will always have to run <strong>conda activate cellpose</strong> before you run cellpose. If you want to run jupyter notebooks in this environment, then also <code>conda install jupyter</code>.</p>\n<h3>Common issues</h3>\n<p>If you receive the error: <code>Illegal instruction (core dumped)</code>, then likely mxnet does not recognize your MKL version. Please uninstall and reinstall mxnet without mkl:</p>\n<pre><code>pip uninstall mxnet-mkl\npip uninstall mxnet\npip install mxnet==1.4.0\n</code></pre>\n<p><strong>MAC OS ISSUE</strong>: You may have an issue on Mac with the latest <em>opencv-python</em> library (package name <em>cv2</em>). Downgrade it with the command</p>\n<pre><code>pip install opencv-python==3.4.5.20\n</code></pre>\n<p>If you receive the error: <code>No module named PyQt5.sip</code>, then try uninstalling and reinstalling pyqt5</p>\n<pre><code>pip uninstall pyqt5 pyqt5-tools\npip install pyqt5 pyqt5-tools pyqt5.sip\n</code></pre>\n<p>If you receive an error associated with <strong>matplotlib</strong>, try upgrading it:</p>\n<pre><code>pip install matplotlib --upgrade\n</code></pre>\n<p>If you receive the error: <code>ImportError: _arpack DLL load failed</code>, then try uninstalling and reinstalling scipy</p>\n<pre><code>pip uninstall scipy\npip install scipy\n</code></pre>\n<p>If you are having issues with the graphical interface, make sure you have <strong>python 3.7</strong> and not python 3.8 installed.</p>\n<p><strong>CUDA version</strong></p>\n<p>If you plan on running many images, you may want to install a GPU version of <em>mxnet</em>. I recommend using CUDA 10.0 or greater. Follow the instructions <a href=\"https://mxnet.apache.org/get_started?\" rel=\"nofollow\">here</a>.</p>\n<p>Before installing the GPU version, remove the CPU version:</p>\n<pre><code>pip uninstall mxnet-mkl\npip uninstall mxnet\n</code></pre>\n<p>When upgrading cellpose, you will want to ignore dependencies (so that mxnet-mkl does not install):</p>\n<pre><code>pip install --no-deps cellpose --upgrade\n</code></pre>\n<h3>Installation of github version</h3>\n<p>Follow steps from above to install the dependencies. In the github repository, run <code>pip install -e .</code> and the github version will be installed. If you want to go back to the pip version of cellpose, then say <code>pip install cellpose</code>.</p>\n<h2>Running cellpose</h2>\n<p>The quickest way to start is to open the GUI from a command line terminal. You might need to open an anaconda prompt if you did not add anaconda to the path:</p>\n<pre><code>python -m cellpose\n</code></pre>\n<p>The first time cellpose runs it downloads the latest available trained model weights from the website.</p>\n<p>You can now <strong>drag and drop</strong> any images (*.tif, *.png, *.jpg, *.gif) into the GUI and run Cellpose, and/or manually segment them. When the GUI is processing, you will see the progress bar fill up and during this time you cannot click on anything in the GUI. For more information about what the GUI is doing you can look at the terminal/prompt you opened the GUI with. For example data, see <a href=\"http://www.cellpose.org\" rel=\"nofollow\">website</a> or this google drive <a href=\"https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z\" rel=\"nofollow\">folder</a>. For best accuracy and runtime performance, resize images so cells are less than 100 pixels across.</p>\n<h3>Step-by-step demo</h3>\n<ol>\n<li>Download the google drive <a href=\"https://drive.google.com/open?id=18syVlaix8cIlrnNF20pEWKMWUsKx9R9z\" rel=\"nofollow\">folder</a> and unzip it. These are a subset of the test images from the paper.</li>\n<li>Start the GUI with <code>python -m cellpose</code>.</li>\n<li>Drag an image from the folder into the GUI.</li>\n<li>Set the model (in demo all are <code>cyto</code>) and the channel you want to segment (in demo all are <code>green</code>). Optionally set the second channel if you are segmenting <code>cyto</code> and have an available nucleus channel.</li>\n<li>Click the <code>calibrate</code> button to estimate the size of the objects in the image. Alternatively you can set the <code>cell diameter</code> by hand and press ENTER. You will see the size you set as a red disk at the bottom left of the image.</li>\n<li>Click the <code>run segmentation</code> button. If MASKS ON is checked, you should see masks drawn on the image.</li>\n<li>Now you can click the LEFT/RIGHT arrow keys to move through the folder and segment another image.</li>\n</ol>\n<p>On the demo images each of these steps should run in less than a few seconds on a standard laptop or desktop (with mkl working).</p>\n<h3>3D segmentation</h3>\n<p>For multi-channel, multi-Z tiff's, the expected format is Z x channels x Ly x Lx.</p>\n<h2>Contributing training data</h2>\n<p>We are very excited about receiving community contributions to the training data and re-training the cytoplasm model to make it better. Please follow these guidelines:</p>\n<ol>\n<li>Run cellpose on your data to see how well it does. Try varying the diameter, which can change results a little.</li>\n<li>If there are relatively few mistakes, it won't help much to contribute labelled data.</li>\n<li>If there are consistent mistakes, your data is likely very different from anything in the training set, and you should expect major improvements from contributing even just a few manually segmented images.</li>\n<li>For images that you contribute, the cells should be at least 10 pixels in diameter, and there should be <strong>at least</strong> several dozens of cells per image, ideally ~100. If your images are too small, consider combining multiple images into a single big one and then manually segmenting that. If they are too big, consider splitting them into smaller crops.</li>\n<li>For the manual segmentation, please try to outline the boundaries of the cell, so that everything (membrane, cytoplasm, nucleus) is inside the boundaries. Do not just outline the cytoplasm and exclude the membrane, because that would be inconsistent with our own labelling and we wouldn't be able to use that.</li>\n<li>Do not use the results of the algorithm in any way to do contributed manual segmentations. This can reinforce a vicious circle of mistakes, and compromise the dataset for further algorithm development.</li>\n</ol>\n<p>If you are having problems with the nucleus model, please open an issue before contributing data. Nucleus images are generally much less diverse, and we think the current training dataset already covers a very large set of modalities.</p>\n<h2>Using the GUI</h2>\n<p>The GUI serves two main functions:</p>\n<ol>\n<li>Running the segmentation algorithm.</li>\n<li>Manually labelling data.</li>\n</ol>\n<p>Main GUI mouse controls (works in all views):</p>\n<ul>\n<li>Pan  = left-click  + drag</li>\n<li>Zoom = scroll wheel</li>\n<li>Full view = double left-click</li>\n<li>Select mask = left-click on mask</li>\n<li>Delete mask = Ctrl + left-click</li>\n<li>Start draw mask = right-click</li>\n<li>End draw mask = right-click, or return to circle at beginning</li>\n</ul>\n<p>Overlaps in masks are NOT allowed. If you draw a mask on top of another mask, it is cropped so that it doesn't overlap with the old mask. Masks in 2D should be single strokes (if <em>single_stroke</em> is checked).</p>\n<p>If you want to draw masks in 3D, then you can turn <em>single_stroke</em> option off and draw a stroke on each plane with the cell and then press ENTER. 3D labelling will fill in unlabelled z-planes so that you do not have to as densely label.</p>\n<p>!NOTE!: The GUI automatically saves after you draw a mask but NOT after segmentation and NOT after 3D mask drawing (too slow). Save in the file menu or with Ctrl+S. The output file is in the same folder as the loaded image with <code>_seg.npy</code> appended.</p>\n<table>\n<thead>\n<tr>\n<th>Keyboard shortcuts</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CTRL+H</td>\n<td>help</td>\n</tr>\n<tr>\n<td>CTRL+Z</td>\n<td>undo previously drawn mask/stroke</td>\n</tr>\n<tr>\n<td>CTRL+0</td>\n<td>clear all masks</td>\n</tr>\n<tr>\n<td>CTRL+L</td>\n<td>load image (can alternatively drag and drop image)</td>\n</tr>\n<tr>\n<td>CTRL+S</td>\n<td>SAVE MASKS IN IMAGE to <code>_seg.npy</code> file</td>\n</tr>\n<tr>\n<td>CTRL+P</td>\n<td>load <code>_seg.npy</code> file (note: it will load automatically with image if it exists)</td>\n</tr>\n<tr>\n<td>CTRL+M</td>\n<td>load masks file (must be same size as image with 0 for NO mask, and 1,2,3... for masks)</td>\n</tr>\n<tr>\n<td>CTRL+N</td>\n<td>load numpy stack (NOT WORKING ATM)</td>\n</tr>\n<tr>\n<td>A/D or LEFT/RIGHT</td>\n<td>cycle through images in current directory</td>\n</tr>\n<tr>\n<td>W/S or UP/DOWN</td>\n<td>change color (RGB/gray/red/green/blue)</td>\n</tr>\n<tr>\n<td>PAGE-UP / PAGE-DOWN</td>\n<td>change to flows and cell prob views (if segmentation computed)</td>\n</tr>\n<tr>\n<td>, / .</td>\n<td>increase / decrease brush size for drawing masks</td>\n</tr>\n<tr>\n<td>X</td>\n<td>turn masks ON or OFF</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>toggle outlines ON or OFF</td>\n</tr>\n<tr>\n<td>C</td>\n<td>cycle through labels for image type (saved to <code>_seg.npy</code>)</td>\n</tr></tbody></table>\n<p><strong>Segmentation options</strong></p>\n<p>SIZE: you can manually enter the approximate diameter for your cells, or press \"calibrate\" to let the model estimate it. The size is represented by a disk at the bottom of the view window (can turn this disk off by unchecking \"scale disk on\").</p>\n<p>use GPU: if you have installed the cuda version of mxnet, then you can activate this, but it won't give huge speedups when running single images in the GUI.</p>\n<p>MODEL: there is a <em>cytoplasm</em> model and a <em>nuclei</em> model, choose what you want to segment</p>\n<p>CHAN TO SEG: this is the channel in which the cytoplasm or nuclei exist</p>\n<p>CHAN2 (OPT): if <em>cytoplasm</em> model is chosen, then choose the nuclear channel for this option</p>\n<h3>In a notebook</h3>\n<p>See <a href=\"notebooks/run_cellpose.ipynb\" rel=\"nofollow\">run_cellpose.ipynb</a>.</p>\n<h3>From the command line</h3>\n<p>Run <code>python -m cellpose</code> and specify parameters as below. For instance to run on a folder with images where cytoplasm is green and nucleus is blue and save the output as a png:</p>\n<pre><code>python -m cellpose --dir ~/images_cyto/test/ --pretrained_model cyto --chan 2 --chan2 3 --save_png\n</code></pre>\n<p>You can specify the diameter for all the images or set to 0 if you want the algorithm to estimate it on an image by image basis. Here is how to run on nuclear data (grayscale) where the diameter is automatically estimated:</p>\n<pre><code>python -m cellpose --dir ~/images_nuclei/test/ --pretrained_model nuclei --diameter 0. --save_png\n</code></pre>\n<p><strong>Training</strong></p>\n<p>The same channel settings apply for training models. Cellpose expects the labelled masks (0=no mask, 1,2...=masks) in a separate file, e.g:</p>\n<pre><code>wells_000.tif\nwells_000_masks.tif\n</code></pre>\n<p>If you use the --img_filter option (<code>--img_filter img</code> in this case):</p>\n<pre><code>wells_000_img.tif\nwells_000_masks.tif\n</code></pre>\n<p>To train on cytoplasmic images (green cyto and red nuclei) starting with a pretrained model from cellpose (cyto or nuclei):</p>\n<pre><code>python -m cellpose --train --dir ~/images_cyto/train/ --test_dir ~/images_cyto/test/ --pretrained_model cyto --chan 2 --chan2 1\n</code></pre>\n<p>You can train from scratch as well:</p>\n<pre><code>python -m cellpose --train --dir ~/images_nuclei/train/ --pretrained_model None\n</code></pre>\n<p>You can specify the full path to a pretrained model to use:</p>\n<pre><code>python -m cellpose --dir ~/images_cyto/test/ --pretrained_model ~/images_cyto/test/model/cellpose_35_0 --save_png\n</code></pre>\n<p>Parameters:</p>\n<pre><code>usage: __main__.py [-h] [--train] [--dir DIR] [--img_filter IMG_FILTER]\n                   [--use_gpu] [--do_3D] [--pretrained_model PRETRAINED_MODEL]\n                   [--chan CHAN] [--chan2 CHAN2] [--all_channels]\n                   [--diameter DIAMETER] [--flow_threshold FLOW_THRESHOLD]\n                   [--cellprob_threshold CELLPROB_THRESHOLD] [--save_png]\n                   [--mask_filter MASK_FILTER] [--test_dir TEST_DIR]\n                   [--learning_rate LEARNING_RATE] [--n_epochs N_EPOCHS]\n                   [--batch_size BATCH_SIZE]\n\ncellpose parameters\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --train               train network using images in dir (not yet\n                        implemented)\n  --dir DIR             folder containing data to run or train on\n  --img_filter IMG_FILTER\n                        end string for images to run on\n  --use_gpu             use gpu if mxnet with cuda installed\n  --do_3D               process images as 3D stacks of images (nplanes x nchan\n                        x Ly x Lx\n  --pretrained_model PRETRAINED_MODEL\n                        model to use\n  --chan CHAN           channel to segment; 0: GRAY, 1: RED, 2: GREEN, 3: BLUE\n  --chan2 CHAN2         nuclear channel (if cyto, optional); 0: NONE, 1: RED,\n                        2: GREEN, 3: BLUE\n  --all_channels        use all channels in image if using own model and\n                        images with special channels\n  --diameter DIAMETER   cell diameter, if 0 cellpose will estimate for each\n                        image\n  --flow_threshold FLOW_THRESHOLD\n                        flow error threshold, 0 turns off this optional QC\n                        step\n  --cellprob_threshold CELLPROB_THRESHOLD\n                        cell probability threshold, centered at 0.0\n  --save_png            save masks as png\n  --mask_filter MASK_FILTER\n                        end string for masks to run on\n  --test_dir TEST_DIR   folder containing test data (optional)\n  --learning_rate LEARNING_RATE\n                        learning rate\n  --n_epochs N_EPOCHS   number of epochs\n  --batch_size BATCH_SIZE\n                        batch size\n</code></pre>\n<h2>Outputs</h2>\n<p><code>*_seg.npy</code> files have the following fields:</p>\n<ul>\n<li><em>filename</em> : filename of image</li>\n<li><em>img</em> : image with chosen channels (nchan x Ly x Lx) (if not multiplane)</li>\n<li><em>masks</em> : masks (0 = NO masks; 1,2,... = mask labels)</li>\n<li><em>colors</em> : colors for masks</li>\n<li><em>outlines</em> : outlines of masks (0 = NO outline; 1,2,... = outline labels)</li>\n<li><em>chan_choose</em> : channels that you chose in GUI (0=gray/none, 1=red, 2=green, 3=blue)</li>\n<li><em>ismanual</em> : element <em>k</em> = whether or not mask <em>k</em> was manually drawn or computed by the cellpose algorithm</li>\n<li><em>flows</em> : flows[0] is XY flow in RGB, flows[1] is the cell probability in range 0-255 instead of 0.0 to 1.0, flows[2] is Z flow in range 0-255 (if it exists)</li>\n<li><em>est_diam</em> : estimated diameter (if run on command line)</li>\n<li><em>zdraw</em> : for each mask, which planes were manually labelled (planes in between manually drawn have interpolated masks)</li>\n</ul>\n<h2>Dependencies</h2>\n<p>cellpose relies on the following excellent packages (which are automatically installed with conda/pip if missing):</p>\n<ul>\n<li><a href=\"https://mxnet.apache.org/\" rel=\"nofollow\">mxnet_mkl</a></li>\n<li><a href=\"http://pyqtgraph.org/\" rel=\"nofollow\">pyqtgraph</a></li>\n<li><a href=\"http://pyqt.sourceforge.net/Docs/PyQt5/\" rel=\"nofollow\">PyQt5</a></li>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a> (&gt;=1.16.0)</li>\n<li><a href=\"http://numba.pydata.org/numba-doc/latest/user/5minguide.html\" rel=\"nofollow\">numba</a></li>\n<li><a href=\"https://www.scipy.org/\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"https://scikit-image.org/\" rel=\"nofollow\">scikit-image</a></li>\n<li><a href=\"https://natsort.readthedocs.io/en/master/\" rel=\"nofollow\">natsort</a></li>\n<li><a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7145582, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "d7a523cb210264a87170765fa3f47ab0", "sha256": "6982831d1ca103be7d362341dbfb44bec2ce76aaea80bce4e6229523fa638997"}, "downloads": -1, "filename": "cellpose-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7a523cb210264a87170765fa3f47ab0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702393, "upload_time": "2020-01-29T11:51:56", "upload_time_iso_8601": "2020-01-29T11:51:56.978376Z", "url": "https://files.pythonhosted.org/packages/35/95/b65187d6a6352af1729c82974fcf00dc8b555c1a88d633ba2c7906258eb5/cellpose-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e88419c09d544f9a3dcd649f3eecfbe", "sha256": "c54ebfc66754d3818dcacf5a45ae5981c947475595b892a731586b2eed28451a"}, "downloads": -1, "filename": "cellpose-0.0.0.tar.gz", "has_sig": false, "md5_digest": "2e88419c09d544f9a3dcd649f3eecfbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24699372, "upload_time": "2020-01-29T11:52:02", "upload_time_iso_8601": "2020-01-29T11:52:02.751028Z", "url": "https://files.pythonhosted.org/packages/86/b2/fee4160bed72816d5f9b91cbd2b30ef76a6b81153a1e4f66431da1c3e1b2/cellpose-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "a8d8621d02b4637aa48692feb51ebc52", "sha256": "b841f55f92749dc5a09d21f2a3042dee987620da1ac64a1d7c0fee253afd53df"}, "downloads": -1, "filename": "cellpose-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a8d8621d02b4637aa48692feb51ebc52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702385, "upload_time": "2020-01-29T12:09:36", "upload_time_iso_8601": "2020-01-29T12:09:36.670990Z", "url": "https://files.pythonhosted.org/packages/69/2f/3a30aa4100d11ca8aabd1ad30f65280b4b86a191d11520d4214dbcb930be/cellpose-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a3569f84ab75b0ca42600eb7b747c79", "sha256": "0f716f400cedaf63bc641ceb80b126888c48a8bace8f130701cd68ff594cb75d"}, "downloads": -1, "filename": "cellpose-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1a3569f84ab75b0ca42600eb7b747c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24699389, "upload_time": "2020-01-29T12:09:41", "upload_time_iso_8601": "2020-01-29T12:09:41.621159Z", "url": "https://files.pythonhosted.org/packages/86/b3/7c5227824d8b07add3b458533dc74fa618ad34c786fe1210ba99b30ecd44/cellpose-0.0.1.tar.gz", "yanked": false}], "0.0.1.1": [{"comment_text": "", "digests": {"md5": "36cb7cebfd9c2002d54acbeee9205eb2", "sha256": "313df3b0bce12c7f71189e20c756773085830842aefdab3bcc6ce90211acc0e9"}, "downloads": -1, "filename": "cellpose-0.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "36cb7cebfd9c2002d54acbeee9205eb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702446, "upload_time": "2020-01-29T12:18:57", "upload_time_iso_8601": "2020-01-29T12:18:57.436340Z", "url": "https://files.pythonhosted.org/packages/ca/45/cac746021993689fb9f63f9ece8d5a423d4cbef96f7eaa1239549a0e852a/cellpose-0.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "449c55b5794ab6ac28f20f0a295b2b56", "sha256": "d540dfd397c2366340a1dd83732e9e0d446362ca106df39b094a810b009da34a"}, "downloads": -1, "filename": "cellpose-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "449c55b5794ab6ac28f20f0a295b2b56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24701377, "upload_time": "2020-01-29T12:19:02", "upload_time_iso_8601": "2020-01-29T12:19:02.141353Z", "url": "https://files.pythonhosted.org/packages/41/c5/901d48ef24526ed6b1fb1277ef837fc69dd8cef0912a8a5e0145f5fbe06c/cellpose-0.0.1.1.tar.gz", "yanked": false}], "0.0.1.10": [{"comment_text": "", "digests": {"md5": "e35686c2141bc807edd57b51173b4d03", "sha256": "3420850efb9b0547928a20dd2d18857c384e782e07486bd49ae3526f51e4f5f9"}, "downloads": -1, "filename": "cellpose-0.0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "e35686c2141bc807edd57b51173b4d03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144933, "upload_time": "2020-02-03T03:08:57", "upload_time_iso_8601": "2020-02-03T03:08:57.317932Z", "url": "https://files.pythonhosted.org/packages/21/61/a6ad5d3683f33b5a9ca22f53a249314c37e731bbf74e6b6eda945c6db04e/cellpose-0.0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cd36c4db86ef6c1f455adc771751ad4", "sha256": "c7ca8993435f37341d7769ecfe3313859d08d77d0c4a003af29ca581d7af77dd"}, "downloads": -1, "filename": "cellpose-0.0.1.10.tar.gz", "has_sig": false, "md5_digest": "1cd36c4db86ef6c1f455adc771751ad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144940, "upload_time": "2020-02-03T03:08:59", "upload_time_iso_8601": "2020-02-03T03:08:59.167613Z", "url": "https://files.pythonhosted.org/packages/75/95/14170358c95d13e7abc0924c52b7c31bc0fc1e82894005d6c9384e496798/cellpose-0.0.1.10.tar.gz", "yanked": false}], "0.0.1.11": [{"comment_text": "", "digests": {"md5": "baaf0f2c6b8d88fffe4b6b51ba143069", "sha256": "2d3bf1be7c8ea2534e43026ad9a5e8dffad927df863dda74ed1db1c30984ef8b"}, "downloads": -1, "filename": "cellpose-0.0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "baaf0f2c6b8d88fffe4b6b51ba143069", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144751, "upload_time": "2020-02-03T03:35:54", "upload_time_iso_8601": "2020-02-03T03:35:54.927720Z", "url": "https://files.pythonhosted.org/packages/35/ff/33e42caa13074ad28abcecd45c6f78961198e607ac8de55932190c84ab70/cellpose-0.0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d784c5113dbfbda0bc7d1d9531c126f7", "sha256": "143320363dd4bbc4473899c52effd1af35dae4195daf0ce6cb771316918ac43d"}, "downloads": -1, "filename": "cellpose-0.0.1.11.tar.gz", "has_sig": false, "md5_digest": "d784c5113dbfbda0bc7d1d9531c126f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144562, "upload_time": "2020-02-03T03:35:56", "upload_time_iso_8601": "2020-02-03T03:35:56.740430Z", "url": "https://files.pythonhosted.org/packages/d9/f0/da6cb3a607cac11af69ce8b27a779045c74d6da79aae5dfc9d4fae6c14a4/cellpose-0.0.1.11.tar.gz", "yanked": false}], "0.0.1.12": [{"comment_text": "", "digests": {"md5": "fcca1e44852c2a4c9896a917b3387940", "sha256": "974fe6588fb9e24c12f90b832b1ad7558489c3be358e29a7af5623de320e411b"}, "downloads": -1, "filename": "cellpose-0.0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "fcca1e44852c2a4c9896a917b3387940", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144749, "upload_time": "2020-02-03T03:59:51", "upload_time_iso_8601": "2020-02-03T03:59:51.619865Z", "url": "https://files.pythonhosted.org/packages/ce/ca/ab16ca586efb324ca58cf2574bab6c9a0e7217225332d75152e464ec6fa2/cellpose-0.0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "063578abc264522fd83f147b6f40647b", "sha256": "dbe0fcbdb212d58a1e3316b8a7f2854901cabbd854c9262659177013c1c57e67"}, "downloads": -1, "filename": "cellpose-0.0.1.12.tar.gz", "has_sig": false, "md5_digest": "063578abc264522fd83f147b6f40647b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144552, "upload_time": "2020-02-03T03:59:53", "upload_time_iso_8601": "2020-02-03T03:59:53.062153Z", "url": "https://files.pythonhosted.org/packages/c2/96/96257eadd11a7f0390f2b5d6394e755c03811e237a3305517d15a134c361/cellpose-0.0.1.12.tar.gz", "yanked": false}], "0.0.1.13": [{"comment_text": "", "digests": {"md5": "c9266c7f72760bd1c712b51622b1a477", "sha256": "0129b2948aa1a6c8c6c2e0da54b7cb3abd258bc5a32a467552775b7ee817e5b9"}, "downloads": -1, "filename": "cellpose-0.0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "c9266c7f72760bd1c712b51622b1a477", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144752, "upload_time": "2020-02-03T14:26:35", "upload_time_iso_8601": "2020-02-03T14:26:35.314174Z", "url": "https://files.pythonhosted.org/packages/06/62/6887802025441bac210acd547462eab650a95c7d0d81f3f6a360ac2831cc/cellpose-0.0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84d1d8b7369eb49465f86c4f9b257b7a", "sha256": "10cef3e9380865c9320e0fa3534fbcd35d9df09b18e146fed4243936a56e0669"}, "downloads": -1, "filename": "cellpose-0.0.1.13.tar.gz", "has_sig": false, "md5_digest": "84d1d8b7369eb49465f86c4f9b257b7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144568, "upload_time": "2020-02-03T14:26:36", "upload_time_iso_8601": "2020-02-03T14:26:36.744390Z", "url": "https://files.pythonhosted.org/packages/56/69/11e1804eb6f0dd67363d6b7b3144a031e94a265f2de9db8a59fc6520e8d5/cellpose-0.0.1.13.tar.gz", "yanked": false}], "0.0.1.14": [{"comment_text": "", "digests": {"md5": "5928914689c40778da3f768493a9f9e5", "sha256": "84e2231c0b01edbfcbe45a2a820670510f4d583edbd5f9eb3f2c8b1eeed832e7"}, "downloads": -1, "filename": "cellpose-0.0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "5928914689c40778da3f768493a9f9e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144765, "upload_time": "2020-02-03T14:36:59", "upload_time_iso_8601": "2020-02-03T14:36:59.304550Z", "url": "https://files.pythonhosted.org/packages/5e/f3/ee1640ee877fe987357e17a2fdd4fd1f559f4c87e8de6052260028cd7a88/cellpose-0.0.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5619824c88c77a1f0bacd13cdda3e4a", "sha256": "da6ba77d0ad76706a34c969857c8932a4aed83e6dfec58aaecceb168465378b0"}, "downloads": -1, "filename": "cellpose-0.0.1.14.tar.gz", "has_sig": false, "md5_digest": "d5619824c88c77a1f0bacd13cdda3e4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144564, "upload_time": "2020-02-03T14:37:01", "upload_time_iso_8601": "2020-02-03T14:37:01.163141Z", "url": "https://files.pythonhosted.org/packages/f7/91/c2691ef99646f0a5a9c93b3dcc9434eedf29071afd4cf848f3333d4fdd4b/cellpose-0.0.1.14.tar.gz", "yanked": false}], "0.0.1.15": [{"comment_text": "", "digests": {"md5": "36645fd43eef235a8f1194be27ba6127", "sha256": "4567e2af32731ba052db10af451a3cf716918c1ecc8264483da1ff0d7971416a"}, "downloads": -1, "filename": "cellpose-0.0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "36645fd43eef235a8f1194be27ba6127", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144861, "upload_time": "2020-02-03T15:30:33", "upload_time_iso_8601": "2020-02-03T15:30:33.672642Z", "url": "https://files.pythonhosted.org/packages/55/85/de66b0fed2555d3d12bd9423023d51bf93e243289f1a699dc5cf915b058f/cellpose-0.0.1.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "743dcacde67504eedfa211c71be0ea2b", "sha256": "3e3b372f9ea65ccab76af45bc6a107eb409d1db6c50d7cafe58fcd2bb5f752f8"}, "downloads": -1, "filename": "cellpose-0.0.1.15.tar.gz", "has_sig": false, "md5_digest": "743dcacde67504eedfa211c71be0ea2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144669, "upload_time": "2020-02-03T15:30:35", "upload_time_iso_8601": "2020-02-03T15:30:35.180661Z", "url": "https://files.pythonhosted.org/packages/2b/47/78ad9601502b706af9db0f185a1bb6e578bc26d8fa0402d1c78dc9297407/cellpose-0.0.1.15.tar.gz", "yanked": false}], "0.0.1.16": [{"comment_text": "", "digests": {"md5": "30e93a0fa50e25b2f8edbdc3685e2557", "sha256": "868298b49e1b8771311d2a04bdf760695ef676ddc6958aef29f1b3ba1d35807d"}, "downloads": -1, "filename": "cellpose-0.0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "30e93a0fa50e25b2f8edbdc3685e2557", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144986, "upload_time": "2020-02-03T20:08:00", "upload_time_iso_8601": "2020-02-03T20:08:00.102010Z", "url": "https://files.pythonhosted.org/packages/ca/f2/8f1711cc0e993c111d0df7f0798f21515dee4743cf3a2e1caf305b293392/cellpose-0.0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da97558ede928b4cc935e7b74762ffdc", "sha256": "bfcaae432bb2fb942670eb97346e74b1bff973754e350255d258ba67c7b6a706"}, "downloads": -1, "filename": "cellpose-0.0.1.16.tar.gz", "has_sig": false, "md5_digest": "da97558ede928b4cc935e7b74762ffdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144904, "upload_time": "2020-02-03T20:08:01", "upload_time_iso_8601": "2020-02-03T20:08:01.591811Z", "url": "https://files.pythonhosted.org/packages/62/34/488ca626cebbb569aca269f4e16e59fb23aa5b84aa2848c64b744860e7a9/cellpose-0.0.1.16.tar.gz", "yanked": false}], "0.0.1.17": [{"comment_text": "", "digests": {"md5": "eacb66cbf2a186632f29ad69ed245474", "sha256": "e620f18f17fb2570a0f0753ce32b13bddf7b806a4638651bebdccc2020a6162b"}, "downloads": -1, "filename": "cellpose-0.0.1.17-py3-none-any.whl", "has_sig": false, "md5_digest": "eacb66cbf2a186632f29ad69ed245474", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145231, "upload_time": "2020-02-03T23:47:09", "upload_time_iso_8601": "2020-02-03T23:47:09.174614Z", "url": "https://files.pythonhosted.org/packages/6f/61/a6284b22ed59185e3a777d8d72694b50a093f483c1344eda754b442df7be/cellpose-0.0.1.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caefaf41741a991dc9d0963e5285dc95", "sha256": "d25c6e16f02993ba9562b8f8d176f552b01267893df3506f76377d402abe369d"}, "downloads": -1, "filename": "cellpose-0.0.1.17.tar.gz", "has_sig": false, "md5_digest": "caefaf41741a991dc9d0963e5285dc95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145287, "upload_time": "2020-02-03T23:47:10", "upload_time_iso_8601": "2020-02-03T23:47:10.552696Z", "url": "https://files.pythonhosted.org/packages/22/9d/635d78ecc68d876c58826c5ca64cb47715475e5cf87bb592b4992888b6e5/cellpose-0.0.1.17.tar.gz", "yanked": false}], "0.0.1.18": [{"comment_text": "", "digests": {"md5": "143680279d2b57c982c828c30b7f1583", "sha256": "28a25b5d5d67ab380b4da9e79a3f39af7ed5749905031b60fa07a383f4d63723"}, "downloads": -1, "filename": "cellpose-0.0.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "143680279d2b57c982c828c30b7f1583", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145688, "upload_time": "2020-02-04T15:06:26", "upload_time_iso_8601": "2020-02-04T15:06:26.062597Z", "url": "https://files.pythonhosted.org/packages/0c/c4/ae0dab2dfafe6ac193a6693c45f30995f4182903a9e541687fd76fac8b09/cellpose-0.0.1.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3726d2ca51634b9b81ec14d911c701ed", "sha256": "7aece5def183f726d6244aea0052bae659f5d063d1f38e3a9f40956f1e8d4e91"}, "downloads": -1, "filename": "cellpose-0.0.1.18.tar.gz", "has_sig": false, "md5_digest": "3726d2ca51634b9b81ec14d911c701ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146349, "upload_time": "2020-02-04T15:06:27", "upload_time_iso_8601": "2020-02-04T15:06:27.610812Z", "url": "https://files.pythonhosted.org/packages/9e/49/76ce115e9ec4621f9278eeca9cd357f814558ddd141ba0437a7e9a9c3542/cellpose-0.0.1.18.tar.gz", "yanked": false}], "0.0.1.19": [{"comment_text": "", "digests": {"md5": "222b6906d90d81a0abb9c5dc96a9bd2c", "sha256": "7a88a2188689126b42c50446e17f8eb308a2a204295309f17aae3fb275f47ac2"}, "downloads": -1, "filename": "cellpose-0.0.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "222b6906d90d81a0abb9c5dc96a9bd2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145779, "upload_time": "2020-02-05T02:51:11", "upload_time_iso_8601": "2020-02-05T02:51:11.037634Z", "url": "https://files.pythonhosted.org/packages/06/94/9dac56995a0e497e60de5d9ccdd5ae2aa4840b1e6425e67718f652615857/cellpose-0.0.1.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb42159b94bb5e8d1723bc659a26731e", "sha256": "f2aed10462221e7b2cdc54fedf90e907dd14731e344f7b6cfcc9423ad685ab32"}, "downloads": -1, "filename": "cellpose-0.0.1.19.tar.gz", "has_sig": false, "md5_digest": "bb42159b94bb5e8d1723bc659a26731e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146198, "upload_time": "2020-02-05T02:51:12", "upload_time_iso_8601": "2020-02-05T02:51:12.918037Z", "url": "https://files.pythonhosted.org/packages/86/be/e2f10c0bccac5b9f7d4ffce415e7c76556b59178e1681968b90c2bb6878f/cellpose-0.0.1.19.tar.gz", "yanked": false}], "0.0.1.2": [{"comment_text": "", "digests": {"md5": "040ec4f54e9e1932dc91816101f6efd4", "sha256": "896525b8820be8b07eac5715bc4d96e90910d5d9f3896a8c589dfff95040d0be"}, "downloads": -1, "filename": "cellpose-0.0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "040ec4f54e9e1932dc91816101f6efd4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702435, "upload_time": "2020-01-29T12:33:32", "upload_time_iso_8601": "2020-01-29T12:33:32.485949Z", "url": "https://files.pythonhosted.org/packages/36/70/c51ea8eb33ed457cc04ad3a9c0c722bfdb61522c92573a145b8c0329c337/cellpose-0.0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84fed77afe737dbb7009b4f2fc2ed418", "sha256": "cd57552724ab01fc280655efa72e464affde8597afaf387e159d0d47de93a15d"}, "downloads": -1, "filename": "cellpose-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "84fed77afe737dbb7009b4f2fc2ed418", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24701377, "upload_time": "2020-01-29T12:33:37", "upload_time_iso_8601": "2020-01-29T12:33:37.839163Z", "url": "https://files.pythonhosted.org/packages/44/1c/23d0847987bb3fdb03b25ab486c9a5ede7977154c8716016012fb70bb3a8/cellpose-0.0.1.2.tar.gz", "yanked": false}], "0.0.1.20": [{"comment_text": "", "digests": {"md5": "57ae95d4d50cf25ebfd590d42c1c286e", "sha256": "e90f5b1bc9e2b3f72e6a8008b627c70c66a663360558039370d2d64b462bc6f5"}, "downloads": -1, "filename": "cellpose-0.0.1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "57ae95d4d50cf25ebfd590d42c1c286e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145866, "upload_time": "2020-02-05T18:00:41", "upload_time_iso_8601": "2020-02-05T18:00:41.783587Z", "url": "https://files.pythonhosted.org/packages/92/0b/72df7005e0e2b6884638279bd0a9f44c6b9b7edd79a73835b1509fa68e52/cellpose-0.0.1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c4b16a508862ed19bea8c1183378d6", "sha256": "7d648817b3e4e10354d8118c6a8c3a21ff8a52b8cc39a0730b8bb39173606096"}, "downloads": -1, "filename": "cellpose-0.0.1.20.tar.gz", "has_sig": false, "md5_digest": "a6c4b16a508862ed19bea8c1183378d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146394, "upload_time": "2020-02-05T18:00:43", "upload_time_iso_8601": "2020-02-05T18:00:43.698779Z", "url": "https://files.pythonhosted.org/packages/59/85/26b14d14c20dd71deda2ccc9bb2033ce3ad793a9df7f168c61d63891bec8/cellpose-0.0.1.20.tar.gz", "yanked": false}], "0.0.1.21": [{"comment_text": "", "digests": {"md5": "9a483e4354fe59586c74b5757080e7b7", "sha256": "d94c18012c820ce97e2e390f6d094293f0d5459b99b87a0b36e189aa17862b30"}, "downloads": -1, "filename": "cellpose-0.0.1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "9a483e4354fe59586c74b5757080e7b7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 146012, "upload_time": "2020-02-06T15:06:37", "upload_time_iso_8601": "2020-02-06T15:06:37.818848Z", "url": "https://files.pythonhosted.org/packages/87/1a/4b96081369352c9d379ff99472b478b9119c7d8d4e9eabb7027146b49cdc/cellpose-0.0.1.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a4d9137bfa3816cf916f3bed41ac34e", "sha256": "ce2f23a089c58c837f83b13f87bc41bac806921e5913ec567bc08cbbb42e54b5"}, "downloads": -1, "filename": "cellpose-0.0.1.21.tar.gz", "has_sig": false, "md5_digest": "2a4d9137bfa3816cf916f3bed41ac34e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146595, "upload_time": "2020-02-06T15:06:39", "upload_time_iso_8601": "2020-02-06T15:06:39.667350Z", "url": "https://files.pythonhosted.org/packages/5c/76/93b3c4608ee9fdc3cc793d896bf95df17e5a554135eba9b24aa380e5d283/cellpose-0.0.1.21.tar.gz", "yanked": false}], "0.0.1.22": [{"comment_text": "", "digests": {"md5": "67b893acdb1702cd14f0a48437e110ad", "sha256": "82ab711c219b53e6bf00b61f14aeae249ef9278c4c170d1a35ab508c938c0649"}, "downloads": -1, "filename": "cellpose-0.0.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "67b893acdb1702cd14f0a48437e110ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 146017, "upload_time": "2020-02-06T16:02:27", "upload_time_iso_8601": "2020-02-06T16:02:27.498782Z", "url": "https://files.pythonhosted.org/packages/29/8e/edbd705fbbe7dbead24435f6421eb56a83e458257344b621c488d3a42724/cellpose-0.0.1.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c66a75b3f60a1842e5091de5ba4a52d5", "sha256": "4bcd802ec3331228f6609d03130fb292029cd836e3f5878ae1596d45ea3f6c96"}, "downloads": -1, "filename": "cellpose-0.0.1.22.tar.gz", "has_sig": false, "md5_digest": "c66a75b3f60a1842e5091de5ba4a52d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146649, "upload_time": "2020-02-06T16:02:28", "upload_time_iso_8601": "2020-02-06T16:02:28.991233Z", "url": "https://files.pythonhosted.org/packages/76/c1/5ffbf677ed817a266bac4a6c633ec0c89addb0bd3a4e75a35305a32ab82d/cellpose-0.0.1.22.tar.gz", "yanked": false}], "0.0.1.23": [{"comment_text": "", "digests": {"md5": "d60f2f9d6b940b4880261b9acc7453dd", "sha256": "a31aee8b2d0b17a7844373ef07a213b27d6646ef65e2f84fd1876239d867b1d1"}, "downloads": -1, "filename": "cellpose-0.0.1.23-py3-none-any.whl", "has_sig": false, "md5_digest": "d60f2f9d6b940b4880261b9acc7453dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140476, "upload_time": "2020-03-07T15:37:56", "upload_time_iso_8601": "2020-03-07T15:37:56.629335Z", "url": "https://files.pythonhosted.org/packages/77/9a/9d86bcd5dbbe68e88d2db9f56996975c0af9060d03614e22e92ade4c0b9e/cellpose-0.0.1.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e7fbf10f72e1da21820b6cd70680fd1", "sha256": "06ce43a2c67b9af57b92f67142ec43cd687966612fa23ceb8d001c3d6cb38809"}, "downloads": -1, "filename": "cellpose-0.0.1.23.tar.gz", "has_sig": false, "md5_digest": "2e7fbf10f72e1da21820b6cd70680fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144602, "upload_time": "2020-03-07T15:37:57", "upload_time_iso_8601": "2020-03-07T15:37:57.915719Z", "url": "https://files.pythonhosted.org/packages/85/be/9875c430f0d83ca5feede9a3f3979128e0b64c27bfdefbc6bcc2949c71d9/cellpose-0.0.1.23.tar.gz", "yanked": false}], "0.0.1.24": [{"comment_text": "", "digests": {"md5": "37a5da33db7538dc9ff13a7c089efe29", "sha256": "90f59873737262d5889a42f5994f14ca546f7d8ecb81d9435511b0b78b2adc78"}, "downloads": -1, "filename": "cellpose-0.0.1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "37a5da33db7538dc9ff13a7c089efe29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 91292, "upload_time": "2020-04-02T15:44:43", "upload_time_iso_8601": "2020-04-02T15:44:43.806735Z", "url": "https://files.pythonhosted.org/packages/ba/7a/d3bac0eefca9be6ab60958bd4079b1f84edda79af3ef51d83fb4cc085fc3/cellpose-0.0.1.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d15a2429d9c0292c2d45be2fc5639f5d", "sha256": "de63bcfc628036e80ff20349776ac94916eb6eb6c81261463327885a714b12b9"}, "downloads": -1, "filename": "cellpose-0.0.1.24.tar.gz", "has_sig": false, "md5_digest": "d15a2429d9c0292c2d45be2fc5639f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94637, "upload_time": "2020-04-02T15:44:45", "upload_time_iso_8601": "2020-04-02T15:44:45.627136Z", "url": "https://files.pythonhosted.org/packages/55/12/79cfd74ab9e9ee5658e2008f8006d36c7b4e23d5fe4e8dd3c1b44d3df832/cellpose-0.0.1.24.tar.gz", "yanked": false}], "0.0.1.25": [{"comment_text": "", "digests": {"md5": "fd80952d0f6be47dfc462097b305e167", "sha256": "3394be2eeaedbe75b879ea3c09b0b7e2c087e5ab0ec7ba0accadca260fc82370"}, "downloads": -1, "filename": "cellpose-0.0.1.25-py3-none-any.whl", "has_sig": false, "md5_digest": "fd80952d0f6be47dfc462097b305e167", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 91311, "upload_time": "2020-04-02T16:06:05", "upload_time_iso_8601": "2020-04-02T16:06:05.518833Z", "url": "https://files.pythonhosted.org/packages/c0/ef/622f0a42eb390a0dd8aab3131071e7bd5231687bcaff825aad6c436daf97/cellpose-0.0.1.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "921d0600ddab6c088f165ca2500849a4", "sha256": "be1c283b7112873a636ad72fd287ffe3e0de3633fb0c872c341656289dd17437"}, "downloads": -1, "filename": "cellpose-0.0.1.25.tar.gz", "has_sig": false, "md5_digest": "921d0600ddab6c088f165ca2500849a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94647, "upload_time": "2020-04-02T16:06:07", "upload_time_iso_8601": "2020-04-02T16:06:07.139443Z", "url": "https://files.pythonhosted.org/packages/15/02/260858eb352629e94c112e82768f39903638af5ee1979848e7318b5427e3/cellpose-0.0.1.25.tar.gz", "yanked": false}], "0.0.1.4": [{"comment_text": "", "digests": {"md5": "1151948a9b036f651a59714062169e39", "sha256": "d607b92f0265462670ca953a3f2c5d09f2ecdd4398ad08fbac789bc7b2f2f3d1"}, "downloads": -1, "filename": "cellpose-0.0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1151948a9b036f651a59714062169e39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702532, "upload_time": "2020-01-29T15:15:09", "upload_time_iso_8601": "2020-01-29T15:15:09.992132Z", "url": "https://files.pythonhosted.org/packages/cc/30/5e4a0accb4612c83f0b645c4852849854c7254ccaeed638add405966cfc0/cellpose-0.0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e8d5b1ec6e19849bc349d3f951aec47", "sha256": "1f7f5979c26466e5d471c4f63131071d4c4c52a083508c648f97886bd8d59951"}, "downloads": -1, "filename": "cellpose-0.0.1.4.tar.gz", "has_sig": false, "md5_digest": "5e8d5b1ec6e19849bc349d3f951aec47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24702359, "upload_time": "2020-01-29T15:15:14", "upload_time_iso_8601": "2020-01-29T15:15:14.374778Z", "url": "https://files.pythonhosted.org/packages/6b/d4/3c7257142c60abba7c5508ac5967e63a56dec6758e738f86415acb880f66/cellpose-0.0.1.4.tar.gz", "yanked": false}], "0.0.1.5": [{"comment_text": "", "digests": {"md5": "95e4f81144baef9f808caa1ded0ff55b", "sha256": "a52f14ed637f17795273bf22d41bffe79cbdcf02de4be298b58a53b55b03d3e4"}, "downloads": -1, "filename": "cellpose-0.0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "95e4f81144baef9f808caa1ded0ff55b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702551, "upload_time": "2020-01-29T17:02:03", "upload_time_iso_8601": "2020-01-29T17:02:03.377145Z", "url": "https://files.pythonhosted.org/packages/33/13/38c34b2e542e904a01c03470c9b6d2628d7119e9d29d31508fa21fdef3a1/cellpose-0.0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec9659b703be62d03ba600959f59870c", "sha256": "db1f64bbc5f59e6fa23e1c3ad79e63ae4c379e7e9a762a5ad2b2412ef8540592"}, "downloads": -1, "filename": "cellpose-0.0.1.5.tar.gz", "has_sig": false, "md5_digest": "ec9659b703be62d03ba600959f59870c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24699550, "upload_time": "2020-01-29T17:02:07", "upload_time_iso_8601": "2020-01-29T17:02:07.996276Z", "url": "https://files.pythonhosted.org/packages/2b/36/908a46f955834ad1745ca5e9ab6dcd2965d69476543e84faf6c01ed4730b/cellpose-0.0.1.5.tar.gz", "yanked": false}], "0.0.1.6": [{"comment_text": "", "digests": {"md5": "659c949a5960e21043ae6379afa5bf93", "sha256": "b24d237cd88ac9dd72f32bf05ae124b5e7d794227a3df757d3e379d253c9c6b3"}, "downloads": -1, "filename": "cellpose-0.0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "659c949a5960e21043ae6379afa5bf93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24702566, "upload_time": "2020-01-29T19:33:44", "upload_time_iso_8601": "2020-01-29T19:33:44.762820Z", "url": "https://files.pythonhosted.org/packages/2f/0b/67783a095d45479a754fa55bf6c550d33f7fa475d62717d8c8e56cbee6d2/cellpose-0.0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd2e25cdeb33200ef6a3b9c3c90c6635", "sha256": "81c5ef01c6f11be04706a84e3446b273c3bea6ae6d73b7e7a05325c6aea3e752"}, "downloads": -1, "filename": "cellpose-0.0.1.6.tar.gz", "has_sig": false, "md5_digest": "bd2e25cdeb33200ef6a3b9c3c90c6635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24699499, "upload_time": "2020-01-29T19:33:50", "upload_time_iso_8601": "2020-01-29T19:33:50.222036Z", "url": "https://files.pythonhosted.org/packages/bc/42/50bd31d4008d4c26d50219c945fdfb61fe8858d1a235d6ad249eb1e2e373/cellpose-0.0.1.6.tar.gz", "yanked": false}], "0.0.1.7": [{"comment_text": "", "digests": {"md5": "f7fff4e2d319f8026874fd0d652c20b6", "sha256": "fd6e7efafa48f40d6edb0b1ce382cf59562bab065fd96540120447ddff234868"}, "downloads": -1, "filename": "cellpose-0.0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f7fff4e2d319f8026874fd0d652c20b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156211, "upload_time": "2020-01-29T22:06:57", "upload_time_iso_8601": "2020-01-29T22:06:57.632661Z", "url": "https://files.pythonhosted.org/packages/ed/ba/1d22314adce87d29ce1c95f1463040531e3c569542fe52ab887ef2f1aa24/cellpose-0.0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25f6277a76c4c1d15e91dcb95427baaa", "sha256": "6cac9fae9084fb9b5256d278fe57e6c225c64ff4914b1b22cac8ab3adc9fbb61"}, "downloads": -1, "filename": "cellpose-0.0.1.7.tar.gz", "has_sig": false, "md5_digest": "25f6277a76c4c1d15e91dcb95427baaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153382, "upload_time": "2020-01-29T22:06:59", "upload_time_iso_8601": "2020-01-29T22:06:59.787320Z", "url": "https://files.pythonhosted.org/packages/ec/b0/45c8baad328dab4f7fa5cf52f4505ebf4e5a5a9e6bbbc60435a005ece936/cellpose-0.0.1.7.tar.gz", "yanked": false}], "0.0.1.8": [{"comment_text": "", "digests": {"md5": "c7e4801b8fbc7bb91ceb5065413a731c", "sha256": "76d23c1bb019f28ca218b194893795ce282ebc741fedb5f0734b30fbb4f31ef2"}, "downloads": -1, "filename": "cellpose-0.0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "c7e4801b8fbc7bb91ceb5065413a731c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 157423, "upload_time": "2020-01-30T19:55:32", "upload_time_iso_8601": "2020-01-30T19:55:32.487160Z", "url": "https://files.pythonhosted.org/packages/be/13/617acf4cf141e573e2943ea501736dc4ac2fe809efc7363612a6b0478e4e/cellpose-0.0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8452931ab2ccf963d0a0c51959ce22c4", "sha256": "2b4025a5cde52d2c5d1d028ec3c15361675aaec8d06852cf31e07df64297fe39"}, "downloads": -1, "filename": "cellpose-0.0.1.8.tar.gz", "has_sig": false, "md5_digest": "8452931ab2ccf963d0a0c51959ce22c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154798, "upload_time": "2020-01-30T19:55:34", "upload_time_iso_8601": "2020-01-30T19:55:34.523720Z", "url": "https://files.pythonhosted.org/packages/08/67/feb89e9d7c4baac69b2be9d68f2fcffdf2df84aa01ee1a0d1e973f7e25af/cellpose-0.0.1.8.tar.gz", "yanked": false}], "0.0.1.9": [{"comment_text": "", "digests": {"md5": "1ad8edb7b1c3bfbbfc03f463c03b3ae0", "sha256": "43761d42af85c2f8f742a4562529fc951ed0a7246288944c1574cb3ba485d1ff"}, "downloads": -1, "filename": "cellpose-0.0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "1ad8edb7b1c3bfbbfc03f463c03b3ae0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 157513, "upload_time": "2020-01-30T23:44:46", "upload_time_iso_8601": "2020-01-30T23:44:46.132289Z", "url": "https://files.pythonhosted.org/packages/ea/29/18a585e42baf6b1b414c3f4aa898f937f84d7e4328ff52054af2b756fa82/cellpose-0.0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc176743462820db74ee5e9d1f0667e4", "sha256": "a087709058c2c89ffd9cce5abe7c1f75ca325c6cc8eed7bf6e366b63ef2dab87"}, "downloads": -1, "filename": "cellpose-0.0.1.9.tar.gz", "has_sig": false, "md5_digest": "bc176743462820db74ee5e9d1f0667e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154919, "upload_time": "2020-01-30T23:44:47", "upload_time_iso_8601": "2020-01-30T23:44:47.797179Z", "url": "https://files.pythonhosted.org/packages/17/39/7ae39bb5483272856d0686811885737db90ef0c763c7e2a0599d83cf99f6/cellpose-0.0.1.9.tar.gz", "yanked": false}], "0.0.2.0": [{"comment_text": "", "digests": {"md5": "36369559cf34d9fb6ef645e8b4e08582", "sha256": "2e3232b8d1d7cb6a957a0307a8418ce795f4d9fd07b8d69494981b0be19ad059"}, "downloads": -1, "filename": "cellpose-0.0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36369559cf34d9fb6ef645e8b4e08582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 91964, "upload_time": "2020-04-09T17:28:21", "upload_time_iso_8601": "2020-04-09T17:28:21.063294Z", "url": "https://files.pythonhosted.org/packages/08/f4/7b9b9d4a2514ac57dc9b2ce0ccd58f8685b197253cabef24463b34813df1/cellpose-0.0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "936be811ecb7426016e7227448de623e", "sha256": "6c56177fe63634fd619a45cfee86488e3a5b3b62451dac40063f66791977aad3"}, "downloads": -1, "filename": "cellpose-0.0.2.0.tar.gz", "has_sig": false, "md5_digest": "936be811ecb7426016e7227448de623e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95992, "upload_time": "2020-04-09T17:28:22", "upload_time_iso_8601": "2020-04-09T17:28:22.616529Z", "url": "https://files.pythonhosted.org/packages/0d/05/2a7744b177b3d99e48339b0e78584daed8344710ac6014e2e65515ce9c5c/cellpose-0.0.2.0.tar.gz", "yanked": false}], "0.0.2.1": [{"comment_text": "", "digests": {"md5": "1f78dae3018345298d0843206c7c92dc", "sha256": "2c4b31b4604a6148f1a21947926519138f324d26cf30b5bd815640120c96523b"}, "downloads": -1, "filename": "cellpose-0.0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1f78dae3018345298d0843206c7c92dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99321, "upload_time": "2020-05-01T14:57:57", "upload_time_iso_8601": "2020-05-01T14:57:57.886746Z", "url": "https://files.pythonhosted.org/packages/0a/d5/003cebf5e2fc1340acb0138f139dc0ffd50f9bd396f0775b831be737881a/cellpose-0.0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "012977f93b65fd513e4903486c25e5cd", "sha256": "2235676fd76a3a2b9f027a291b4f7f952a4591dac4ba7e12070d10b3b48aede6"}, "downloads": -1, "filename": "cellpose-0.0.2.1.tar.gz", "has_sig": false, "md5_digest": "012977f93b65fd513e4903486c25e5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99936, "upload_time": "2020-05-01T14:57:59", "upload_time_iso_8601": "2020-05-01T14:57:59.187913Z", "url": "https://files.pythonhosted.org/packages/9b/2e/e933cc231351fa26be1f8a958ee05712ae64a5e1c398f04e10a80dda3676/cellpose-0.0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f78dae3018345298d0843206c7c92dc", "sha256": "2c4b31b4604a6148f1a21947926519138f324d26cf30b5bd815640120c96523b"}, "downloads": -1, "filename": "cellpose-0.0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1f78dae3018345298d0843206c7c92dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99321, "upload_time": "2020-05-01T14:57:57", "upload_time_iso_8601": "2020-05-01T14:57:57.886746Z", "url": "https://files.pythonhosted.org/packages/0a/d5/003cebf5e2fc1340acb0138f139dc0ffd50f9bd396f0775b831be737881a/cellpose-0.0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "012977f93b65fd513e4903486c25e5cd", "sha256": "2235676fd76a3a2b9f027a291b4f7f952a4591dac4ba7e12070d10b3b48aede6"}, "downloads": -1, "filename": "cellpose-0.0.2.1.tar.gz", "has_sig": false, "md5_digest": "012977f93b65fd513e4903486c25e5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99936, "upload_time": "2020-05-01T14:57:59", "upload_time_iso_8601": "2020-05-01T14:57:59.187913Z", "url": "https://files.pythonhosted.org/packages/9b/2e/e933cc231351fa26be1f8a958ee05712ae64a5e1c398f04e10a80dda3676/cellpose-0.0.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:49 2020"}