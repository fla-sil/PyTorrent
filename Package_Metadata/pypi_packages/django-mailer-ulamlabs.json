{"info": {"author": "Pinax Team", "author_email": "developers@pinaxproject.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3"], "description": "=====\nUsage\n=====\n\nFirst, add \"mailer\" to your ``INSTALLED_APPS`` in your settings.py.\nRun ``./manage.py migrate`` to install models.\n\nUsing EMAIL_BACKEND\n===================\n\nThis is the preferred and easiest way to use django-mailer.\n\nTo automatically switch all your mail to use django-mailer, first set\nEMAIL_BACKEND::\n\n    EMAIL_BACKEND = \"mailer.backend.DbBackend\"\n\nIf you were previously using a non-default EMAIL_BACKEND, you need to configure\nthe MAILER_EMAIL_BACKEND setting, so that django-mailer knows how to actually send\nthe mail::\n\n    MAILER_EMAIL_BACKEND = \"your.actual.EmailBackend\"\n\nNow, just use the normal `Django mail functions\n<https://docs.djangoproject.com/en/dev/topics/email/>`_ for sending email. These\nfunctions will store mail on a queue in the database, which must be sent as\nbelow.\n\nExplicitly putting mail on the queue\n====================================\n\nIf you don't want to send all email through django-mailer, you can send mail\nusing ``mailer.send_mail``, which has the same signature as Django's\n``send_mail`` function.\n\nYou can also do the following::\n\n    # favour django-mailer but fall back to django.core.mail\n    from django.conf import settings\n\n    if \"mailer\" in settings.INSTALLED_APPS:\n        from mailer import send_mail\n    else:\n        from django.core.mail import send_mail\n\nand then just call send_mail like you normally would in Django::\n\n    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)\n\nThere is also a convenience function ``mailer.send_html_mail`` for creating HTML\n(this function is **not** in Django)::\n\n    send_html_mail(subject, message_plaintext, message_html, settings.DEFAULT_FROM_EMAIL, recipients)\n\nAdditionally you can send all the admins as specified in the ``ADMIN``\nsetting by calling::\n\n    mail_admins(subject, message_body)\n\nor all managers as defined in the ``MANAGERS`` setting by calling::\n\n    mail_managers(subject, message_body)\n\nClear queue with command extensions\n===================================\n\nWith mailer in your INSTALLED_APPS, there will be three new manage.py commands\nyou can run:\n\n* ``send_mail`` will clear the current message queue. If there are any\n  failures, they will be marked deferred and will not be attempted again by\n  ``send_mail``.\n\n* ``retry_deferred`` will move any deferred mail back into the normal queue\n  (so it will be attempted again on the next ``send_mail``).\n\n* ``purge_mail_log`` will remove old successful message logs from the database, to prevent it from filling up your database\n\n\nYou may want to set these up via cron to run regularly::\n\n\n    *       * * * * (/path/to/your/python /path/to/your/manage.py send_mail >> ~/cron_mail.log 2>&1)\n    0,20,40 * * * * (/path/to/your/python /path/to/your/manage.py retry_deferred >> ~/cron_mail_deferred.log 2>&1)\n    0 0 * * * (/path/to/your/python /path/to/your/manage.py purge_mail_log 7 >> ~/cron_mail_purge.log 2>&1)\n\nFor use in Pinax, for example, that might look like::\n\n    * * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py send_mail >> $PINAX/cron_mail.log 2>&1)\n    0,20,40 * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py retry_deferred >> $PINAX/cron_mail_deferred.log 2>&1)\n    0 0 * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py purge_mail_log 7 >> $PINAX/cron_mail_purge.log 2>&1)\n\nThis attempts to send mail every minute with a retry on failure every 20\nminutes, and purges the mail log for entries older than 7 days.\n\n``manage.py send_mail`` uses a lock file in case clearing the queue takes\nlonger than the interval between calling ``manage.py send_mail``.\n\nNote that if your project lives inside a virtualenv, you also have to execute\nthis command from the virtualenv. The same, naturally, applies also if you're\nexecuting it with cron. The `Pinax documentation`_ explains that in more\ndetails.\n\n.. _pinax documentation: http://pinaxproject.com/docs/dev/deployment.html#sending-mail-and-notices\n\nControlling the delivery process\n================================\n\nIf you wish to have a finer control over the delivery process, which defaults\nto deliver everything in the queue, you can use the following 3 variables\n(default values shown)::\n\n    MAILER_EMAIL_MAX_BATCH = None  # integer or None\n    MAILER_EMAIL_MAX_DEFERRED = None  # integer or None\n    MAILER_EMAIL_THROTTLE = 0  # passed to time.sleep()\n\nThese control how many emails are sent successfully before stopping the\ncurrent run `MAILER_EMAIL_MAX_BATCH`, after how many failed/deferred emails\nshould it stop `MAILER_EMAIL_MAX_DEFERRED` and how much time to wait between\neach email `MAILER_EMAIL_THROTTLE`.\n\nUnprocessed emails will be evaluated in the following delivery iterations.\n\nOther settings\n==============\n\nIf you need to be able to control where django-mailer puts its lock file (used\nto ensure mail is not sent twice), you can set ``MAILER_LOCK_PATH`` to a full\nabsolute path to the file to be used as a lock. The extension \".lock\" will be\nadded. The process running ``send_mail`` needs to have permissions to create and\ndelete this file, and others in the same directory. With the default value of\n``None`` django-mailer will use a path in current working directory.\nChange log\n==========\n\nUnreleased\n----------\n\n1.2.2\n-----\n\n* Django 1.10 support.\n* Fixed reprs for Message and MessageLog.\n\n1.2.1\n-----\n\n* More helpful admin for Message and MessageLog\n* Handle exceptions from really old Django versions\n\n1.2.0\n-----\n\n* Save the ``Message-ID`` header on ``Message`` explicitly to enable finding\n  emails using this identifier.\n\n  This includes a database schema migration.\n\n\n1.1.0\n-----\n\n* Deprecated calling ``send_mail`` and ``send_html_mail`` using ``priority``\n  kwargs ``\"high\"``, ``\"medium\"``, and ``\"low\"``. Instead you should use\n  ``PRIORITY_HIGH``, ``PRIORITY_MEDIUM`` and ``PRIORITY_LOW`` from\n  ``mailer.models``.\n\n* Fixed bug with migrations for Django 1.7, which wanted to create a migration\n  to 'fix' the EmailField length back down to 75 instead of 254.\n\n\n1.0.1\n-----\n\n* Included migrations - for both South and Django 1.7 native migrations.\n\n  Note:\n\n  * If you use South, you will need at least South 1.0\n  * You will need to use '--fake' or '--fake-initial' on existing installations.\n\n  These migrations were supposed to be in 1.0.0 but were omitted due to a\n  packaging error.\n\n1.0.0\n-----\n\n* Throttling of email sending\n* Django 1.8 support\n* Admin tweaks and improvements\n* Various other fixes, especially from Renato Alves <alves.rjc@gmail.com> - thank you!\n\n0.1.0\n-----\n\n* First PyPI version\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pinax/django-mailer/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-mailer-ulamlabs", "package_url": "https://pypi.org/project/django-mailer-ulamlabs/", "platform": "", "project_url": "https://pypi.org/project/django-mailer-ulamlabs/", "project_urls": {"Homepage": "http://github.com/pinax/django-mailer/"}, "release_url": "https://pypi.org/project/django-mailer-ulamlabs/1.2.4/", "requires_dist": null, "requires_python": "", "summary": "A reusable Django app for queuing the sending of email", "version": "1.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>First, add \u201cmailer\u201d to your <tt>INSTALLED_APPS</tt> in your settings.py.\nRun <tt>./manage.py migrate</tt> to install models.</p>\n<div id=\"using-email-backend\">\n<h2>Using EMAIL_BACKEND</h2>\n<p>This is the preferred and easiest way to use django-mailer.</p>\n<p>To automatically switch all your mail to use django-mailer, first set\nEMAIL_BACKEND:</p>\n<pre>EMAIL_BACKEND = \"mailer.backend.DbBackend\"\n</pre>\n<p>If you were previously using a non-default EMAIL_BACKEND, you need to configure\nthe MAILER_EMAIL_BACKEND setting, so that django-mailer knows how to actually send\nthe mail:</p>\n<pre>MAILER_EMAIL_BACKEND = \"your.actual.EmailBackend\"\n</pre>\n<p>Now, just use the normal <a href=\"https://docs.djangoproject.com/en/dev/topics/email/\" rel=\"nofollow\">Django mail functions</a> for sending email. These\nfunctions will store mail on a queue in the database, which must be sent as\nbelow.</p>\n</div>\n<div id=\"explicitly-putting-mail-on-the-queue\">\n<h2>Explicitly putting mail on the queue</h2>\n<p>If you don\u2019t want to send all email through django-mailer, you can send mail\nusing <tt>mailer.send_mail</tt>, which has the same signature as Django\u2019s\n<tt>send_mail</tt> function.</p>\n<p>You can also do the following:</p>\n<pre># favour django-mailer but fall back to django.core.mail\nfrom django.conf import settings\n\nif \"mailer\" in settings.INSTALLED_APPS:\n    from mailer import send_mail\nelse:\n    from django.core.mail import send_mail\n</pre>\n<p>and then just call send_mail like you normally would in Django:</p>\n<pre>send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)\n</pre>\n<p>There is also a convenience function <tt>mailer.send_html_mail</tt> for creating HTML\n(this function is <strong>not</strong> in Django):</p>\n<pre>send_html_mail(subject, message_plaintext, message_html, settings.DEFAULT_FROM_EMAIL, recipients)\n</pre>\n<p>Additionally you can send all the admins as specified in the <tt>ADMIN</tt>\nsetting by calling:</p>\n<pre>mail_admins(subject, message_body)\n</pre>\n<p>or all managers as defined in the <tt>MANAGERS</tt> setting by calling:</p>\n<pre>mail_managers(subject, message_body)\n</pre>\n</div>\n<div id=\"clear-queue-with-command-extensions\">\n<h2>Clear queue with command extensions</h2>\n<p>With mailer in your INSTALLED_APPS, there will be three new manage.py commands\nyou can run:</p>\n<ul>\n<li><tt>send_mail</tt> will clear the current message queue. If there are any\nfailures, they will be marked deferred and will not be attempted again by\n<tt>send_mail</tt>.</li>\n<li><tt>retry_deferred</tt> will move any deferred mail back into the normal queue\n(so it will be attempted again on the next <tt>send_mail</tt>).</li>\n<li><tt>purge_mail_log</tt> will remove old successful message logs from the database, to prevent it from filling up your database</li>\n</ul>\n<p>You may want to set these up via cron to run regularly:</p>\n<pre>*       * * * * (/path/to/your/python /path/to/your/manage.py send_mail &gt;&gt; ~/cron_mail.log 2&gt;&amp;1)\n0,20,40 * * * * (/path/to/your/python /path/to/your/manage.py retry_deferred &gt;&gt; ~/cron_mail_deferred.log 2&gt;&amp;1)\n0 0 * * * (/path/to/your/python /path/to/your/manage.py purge_mail_log 7 &gt;&gt; ~/cron_mail_purge.log 2&gt;&amp;1)\n</pre>\n<p>For use in Pinax, for example, that might look like:</p>\n<pre>* * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py send_mail &gt;&gt; $PINAX/cron_mail.log 2&gt;&amp;1)\n0,20,40 * * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py retry_deferred &gt;&gt; $PINAX/cron_mail_deferred.log 2&gt;&amp;1)\n0 0 * * * (cd $PINAX; /usr/local/bin/python2.5 manage.py purge_mail_log 7 &gt;&gt; $PINAX/cron_mail_purge.log 2&gt;&amp;1)\n</pre>\n<p>This attempts to send mail every minute with a retry on failure every 20\nminutes, and purges the mail log for entries older than 7 days.</p>\n<p><tt>manage.py send_mail</tt> uses a lock file in case clearing the queue takes\nlonger than the interval between calling <tt>manage.py send_mail</tt>.</p>\n<p>Note that if your project lives inside a virtualenv, you also have to execute\nthis command from the virtualenv. The same, naturally, applies also if you\u2019re\nexecuting it with cron. The <a href=\"http://pinaxproject.com/docs/dev/deployment.html#sending-mail-and-notices\" rel=\"nofollow\">Pinax documentation</a> explains that in more\ndetails.</p>\n</div>\n<div id=\"controlling-the-delivery-process\">\n<h2>Controlling the delivery process</h2>\n<p>If you wish to have a finer control over the delivery process, which defaults\nto deliver everything in the queue, you can use the following 3 variables\n(default values shown):</p>\n<pre>MAILER_EMAIL_MAX_BATCH = None  # integer or None\nMAILER_EMAIL_MAX_DEFERRED = None  # integer or None\nMAILER_EMAIL_THROTTLE = 0  # passed to time.sleep()\n</pre>\n<p>These control how many emails are sent successfully before stopping the\ncurrent run <cite>MAILER_EMAIL_MAX_BATCH</cite>, after how many failed/deferred emails\nshould it stop <cite>MAILER_EMAIL_MAX_DEFERRED</cite> and how much time to wait between\neach email <cite>MAILER_EMAIL_THROTTLE</cite>.</p>\n<p>Unprocessed emails will be evaluated in the following delivery iterations.</p>\n</div>\n<div id=\"other-settings\">\n<h2>Other settings</h2>\n<p>If you need to be able to control where django-mailer puts its lock file (used\nto ensure mail is not sent twice), you can set <tt>MAILER_LOCK_PATH</tt> to a full\nabsolute path to the file to be used as a lock. The extension \u201c.lock\u201d will be\nadded. The process running <tt>send_mail</tt> needs to have permissions to create and\ndelete this file, and others in the same directory. With the default value of\n<tt>None</tt> django-mailer will use a path in current working directory.\nChange log\n==========</p>\n<div id=\"unreleased\">\n<h3>Unreleased</h3>\n</div>\n<div id=\"id1\">\n<h3>1.2.2</h3>\n<ul>\n<li>Django 1.10 support.</li>\n<li>Fixed reprs for Message and MessageLog.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.2.1</h3>\n<ul>\n<li>More helpful admin for Message and MessageLog</li>\n<li>Handle exceptions from really old Django versions</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.2.0</h3>\n<ul>\n<li><p>Save the <tt><span class=\"pre\">Message-ID</span></tt> header on <tt>Message</tt> explicitly to enable finding\nemails using this identifier.</p>\n<p>This includes a database schema migration.</p>\n</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.1.0</h3>\n<ul>\n<li>Deprecated calling <tt>send_mail</tt> and <tt>send_html_mail</tt> using <tt>priority</tt>\nkwargs <tt>\"high\"</tt>, <tt>\"medium\"</tt>, and <tt>\"low\"</tt>. Instead you should use\n<tt>PRIORITY_HIGH</tt>, <tt>PRIORITY_MEDIUM</tt> and <tt>PRIORITY_LOW</tt> from\n<tt>mailer.models</tt>.</li>\n<li>Fixed bug with migrations for Django 1.7, which wanted to create a migration\nto \u2018fix\u2019 the EmailField length back down to 75 instead of 254.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0.1</h3>\n<ul>\n<li><p>Included migrations - for both South and Django 1.7 native migrations.</p>\n<p>Note:</p>\n<ul>\n<li>If you use South, you will need at least South 1.0</li>\n<li>You will need to use \u2018\u2013fake\u2019 or \u2018\u2013fake-initial\u2019 on existing installations.</li>\n</ul>\n<p>These migrations were supposed to be in 1.0.0 but were omitted due to a\npackaging error.</p>\n</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.0.0</h3>\n<ul>\n<li>Throttling of email sending</li>\n<li>Django 1.8 support</li>\n<li>Admin tweaks and improvements</li>\n<li>Various other fixes, especially from Renato Alves &lt;<a href=\"mailto:alves.rjc%40gmail.com\">alves<span>.</span>rjc<span>@</span>gmail<span>.</span>com</a>&gt; - thank you!</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.0</h3>\n<ul>\n<li>First PyPI version</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3583436, "releases": {"1.2.3": [{"comment_text": "", "digests": {"md5": "ec21b3fc8ba1b0e7066ff2fe27a2f6b9", "sha256": "883e16878b1d0dad43e06ec834155e6042700e27cfac7b4a2b24b75affc1c013"}, "downloads": -1, "filename": "django-mailer-ulamlabs-1.2.3.tar.gz", "has_sig": false, "md5_digest": "ec21b3fc8ba1b0e7066ff2fe27a2f6b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22831, "upload_time": "2017-08-28T06:34:46", "upload_time_iso_8601": "2017-08-28T06:34:46.435345Z", "url": "https://files.pythonhosted.org/packages/13/17/1494561fbbc8245952f14c879e063ced0d10e0acb4ddf18d5c7c8027bc36/django-mailer-ulamlabs-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "fc0d84dff2555cd3dbbf430620021462", "sha256": "ab47dcddcbd981608e1c546c0c9d3bd4d859e12277bf3910e61bf39a699484de"}, "downloads": -1, "filename": "django-mailer-ulamlabs-1.2.4.tar.gz", "has_sig": false, "md5_digest": "fc0d84dff2555cd3dbbf430620021462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22856, "upload_time": "2018-02-15T06:20:20", "upload_time_iso_8601": "2018-02-15T06:20:20.130909Z", "url": "https://files.pythonhosted.org/packages/49/55/77fa482ac7bdf1aa1b42d3d18d5ee3b9e7d26defc638c324f93889f97987/django-mailer-ulamlabs-1.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc0d84dff2555cd3dbbf430620021462", "sha256": "ab47dcddcbd981608e1c546c0c9d3bd4d859e12277bf3910e61bf39a699484de"}, "downloads": -1, "filename": "django-mailer-ulamlabs-1.2.4.tar.gz", "has_sig": false, "md5_digest": "fc0d84dff2555cd3dbbf430620021462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22856, "upload_time": "2018-02-15T06:20:20", "upload_time_iso_8601": "2018-02-15T06:20:20.130909Z", "url": "https://files.pythonhosted.org/packages/49/55/77fa482ac7bdf1aa1b42d3d18d5ee3b9e7d26defc638c324f93889f97987/django-mailer-ulamlabs-1.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:14 2020"}