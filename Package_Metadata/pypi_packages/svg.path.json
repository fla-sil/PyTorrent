{"info": {"author": "Lennart Regebro", "author_email": "regebro@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Multimedia :: Graphics"], "description": "svg.path\n========\n\nsvg.path is a collection of objects that implement the different path\ncommands in SVG, and a parser for SVG path definitions.\n\n\nUsage\n-----\n\nThere are four path segment objects, ``Line``, ``Arc``, ``CubicBezier`` and\n``QuadraticBezier``.`There is also a ``Path`` object that acts as a\ncollection of the path segment objects.\n\nAll coordinate values for these classes are given as ``complex`` values,\nwhere the ``.real`` part represents the X coordinate, and the ``.imag`` part\nrepresentes the Y coordinate::\n\n    >>> from svg.path import Path, Line, Arc, CubicBezier, QuadraticBezier, Close\n\nAll of these objects have a ``.point()`` function which will return the\ncoordinates of a point on the path, where the point is given as a floating\npoint value where ``0.0`` is the start of the path and ``1.0`` is end end.\n\nYou can calculate the length of a Path or it's segments with the\n``.length()`` function. For CubicBezier and Arc segments this is done by\ngeometric approximation and for this reason **may be very slow**. You can\nmake it faster by passing in an ``error`` option to the method. If you\ndon't pass in error, it defaults to ``1e-12``::\n\n    >>> CubicBezier(300+100j, 100+100j, 200+200j, 200+300j).length(error=1e-5)\n    297.2208145656899\n\nCubicBezier and Arc also has a ``min_depth`` option that specifies the\nminimum recursion depth. This is set to 5 by default, resulting in using a\nminimum of 32 segments for the calculation. Setting it to 0 is a bad idea for\nCubicBeziers, as they may become approximated to a straight line.\n\n``Line.length()`` and ``QuadraticBezier.length()`` also takes these\nparameters, but they are ignored.\n\nCubicBezier and QuadraticBezier also has ``is_smooth_from(previous)``\nmethods, that check if the segment is a \"smooth\" segment compared to the\ngiven segment.\n\nThere is also a ``parse_path()`` function that will take an SVG path definition\nand return a ``Path`` object::\n\n    >>> from svg.path import parse_path\n    >>> parse_path('M 100 100 L 300 100')\n    Path(Move(to=(100+100j)), Line(start=(100+100j), end=(300+100j)))\n\n\nClasses\n.......\n\nThese are the SVG path segment classes. See the `SVG specifications\n<http://www.w3.org/TR/SVG/paths.html>`_ for more information on what each\nparameter means.\n\n* ``Line(start, end)``\n\n* ``Arc(start, radius, rotation, arc, sweep, end)``\n\n* ``QuadraticBezier(start, control, end)``\n\n* ``CubicBezier(start, control1, control2, end)``\n\nIn addition to that, there is the ``Path`` class, which is instantiated\nwith a sequence of path segments:\n\n* ``Path(*segments)``\n\nThe ``Path`` class is a mutable sequence, so it behaves like a list.\nYou can add to it and replace path segments etc::\n\n    >>> path = Path(Line(100+100j,300+100j), Line(100+100j,300+100j))\n    >>> path.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n    >>> path[0] = Line(200+100j,300+100j)\n    >>> del path[1]\n\nThe path object also has a ``d()`` method that will return the\nSVG representation of the Path segments::\n\n    >>> path.d()\n    'M 200,100 L 300,100 Q 200,200 200,300'\n\n\nExamples\n........\n\nThis SVG path example draws a triangle::\n\n\n    >>> path1 = parse_path('M 100 100 L 300 100 L 200 300 z')\n\nYou can format SVG paths in many different ways, all valid paths should be\naccepted::\n\n    >>> path2 = parse_path('M100,100L300,100L200,300z')\n\nAnd these paths should be equal::\n\n    >>> path1 == path2\n    True\n\nYou can also build a path from objects::\n\n    >>> path3 = Path(Line(100+100j,300+100j), Line(300+100j, 200+300j), Line(200+300j, 100+100j))\n\nAnd it should again be equal to the first path::\n\n    >>> path1 == path2\n    True\n\nPaths are mutable sequences, you can slice and append::\n\n    >>> path1.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n    >>> len(path1[2:]) == 3\n    True\n\nNote that there is no protection against you creating paths that are invalid.\nYou can for example have a Close command that doesn't end at the path start::\n\n    >>> wrong = Path(Line(100+100j,200+100j), Close(200+300j, 0))\n\n\nFuture features\n---------------\n\n* Reversing paths. They should then reasonably be drawn \"backwards\" meaning each\n  path segment also needs to be reversed.\n\n* Mathematical transformations might make sense.\n\n* Verifying that paths are correct, or protection against creating incorrect paths.\n\n\nLicense\n-------\n\nThis module is under a MIT License.\n\nContributors\n============\n\nLennart Regebro <regebro@gmail.com>, Original Author\n\nJustin Gruenberg implemented the Quadradic Bezier calculations and\nprovided suggestions and feedback about the d() function.\n\nMichiel Schallig suggested calculating length by recursive straight-line\napproximations, which enables you to choose between accuracy or speed.\nSteve Schwarz added an error argument to make that choice an argument.\n\nClayJarCom speeded up `point()` calculations for paths.\n\nThanks also to bug fixers Martin R, abcjjy, Daniel Stender, MTician,\nblokhin and jaraco, and thanks to tatarize for help with investigating\nthe subpath issues.\n\nChangelog\n=========\n\n\n4.0.2 (2019-11-04)\n------------------\n\n- A solution for the setup.cfg [Alex Gr\u00f6nholm]\n\n\n4.0.1 (2019-11-03)\n------------------\n\n- The pure setup.cfg config didn't work. All the tests pass fine,\n  but when installing the package somewhere else, nothing gets installed.\n  So I'm reverting that change for now.\n\n\n4.0 (2019-11-02)\n----------------\n\n- Moved all the information from setup.py into setup.cfg.\n\n- Added a Close() command which is different from a Line() command in\n  no way at all, to simplify the handling of closepath commands and subpaths.\n\n- Path()'s no longer have a `closed` attribute.\n\n- Now fully supports the SVG 1.1 \"F.6.2 Out-of-range parameters\" list.\n\n- Uses circular maths to calculate the length of circular arcs,\n  more accurate and much faster.\n\n\n3.1 (2019-10-25)\n----------------\n\n- The Move null command was not imported into ``__init__.py`` [blokhin]\n- #41: Switched from ``pkg_resource``-style namespace\n  package for ``svg`` to a `pkgutil style\n  <https://packaging.python.org/guides/packaging-namespace-packages/#pkgutil-style-namespace-packages>`_\n  namespace package.\n- A faster ``point()`` implementation for paths. [ClayJarCom]\n- Dropped support for Python 2.6 and Python 3.3.\n- Added support for Python 3.7 and 3.8.\n\n\n3.0 (2018-08-14)\n----------------\n\n- Dropped support for Python 3.1 and 3.2. It still works, but it may stop.\n  Added support for Python 3.6. Dropped support for Jython, it's not\n  supported by Travis, and hasn't seen  a release in over a year.\n\n- #33: Move commands are now preserved when parsed.\n\n- Subpaths are no longer merged even if they are joined.\n\n- #30: Arcs where the endpoint is the same as the start point caused a crash.\n  The SVG specs say that it instead should be the equavalent of skipping\n  that section, which now is the case.\n\n\n2.2 (2016-10-15)\n----------------\n\n- Don't add a line when closing a path if it's not needed.\n\n\n2.1.1 (2016-02-28)\n------------------\n\n- #18: QuadraticBeziers could get a DivideByZero error under certain\n  circumstances. [MTician]\n\n- Accept an error parameter to Path.point() to be able to\n  control error vs performance setting. [saschwarz]\n\n- #25: Arc's could create a MathDomain error under certain circumstances.\n\n- #17: Set last_command always.\n\n\n2.0.1 (2015-10-17)\n------------------\n\n- #20: The doctext for the closed() setter was incorrect.\n\n- #19: Fixed so tests didn't use relative paths. [danstender]\n\n\n2.0 (2015-05-15)\n----------------\n\n- Nothing changed yet.\n\n\n2.0b1 (2014-11-06)\n------------------\n\n- Added a Path.d() function to generate the Path's d attribute.\n\n- Added is_smooth_from() on QubicBezier and QuadradicBezier.\n\n- Path()'s now have a .closed property.\n\n- Fixed the representation so it's parseable.\n\n- The calculations for CubicBezier and Arc segments are now recursive,\n  and will end when a specific accuracy has been achieved.\n  This is somewhat faster for Arcs and somewhat slower for CubicBezier.\n  However, you can now specify an accuracy, so if you want faster but\n  looser calculations, you can have that.\n\n- 't' segments (smooth, relative QuadraticBeziers) whose previous segment was\n  not a QuadraticBezier would get an incorrect control point.\n\n\n1.2 (2014-11-01)\n----------------\n\n- New Quadradic Bezier implementation. [Justin Gruenberg]\n\n- Solved issue #6: Z close path behavior. [abcjjy]\n\n\n1.1 (2013-10-19)\n----------------\n\n- Floats with negative exponents work again.\n\n- New tokenizer that is around 20 times faster.\n\n\n1.0 (2013-05-28)\n----------------\n\n- Solved issue #2: Paths with negative values and no spaces didn't work.\n  [regebro]\n\n\n1.0b1 (2013-02-03)\n------------------\n\n- Original release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/regebro/svg.path", "keywords": "svg,path,maths", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "svg.path", "package_url": "https://pypi.org/project/svg.path/", "platform": "", "project_url": "https://pypi.org/project/svg.path/", "project_urls": {"Homepage": "https://github.com/regebro/svg.path"}, "release_url": "https://pypi.org/project/svg.path/4.0.2/", "requires_dist": null, "requires_python": "", "summary": "SVG path objects and parser", "version": "4.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"svg-path\">\n<h2>svg.path</h2>\n<p>svg.path is a collection of objects that implement the different path\ncommands in SVG, and a parser for SVG path definitions.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>There are four path segment objects, <tt>Line</tt>, <tt>Arc</tt>, <tt>CubicBezier</tt> and\n<tt>QuadraticBezier</tt>.`There is also a <tt>Path</tt> object that acts as a\ncollection of the path segment objects.</p>\n<p>All coordinate values for these classes are given as <tt>complex</tt> values,\nwhere the <tt>.real</tt> part represents the X coordinate, and the <tt>.imag</tt> part\nrepresentes the Y coordinate:</p>\n<pre>&gt;&gt;&gt; from svg.path import Path, Line, Arc, CubicBezier, QuadraticBezier, Close\n</pre>\n<p>All of these objects have a <tt>.point()</tt> function which will return the\ncoordinates of a point on the path, where the point is given as a floating\npoint value where <tt>0.0</tt> is the start of the path and <tt>1.0</tt> is end end.</p>\n<p>You can calculate the length of a Path or it\u2019s segments with the\n<tt>.length()</tt> function. For CubicBezier and Arc segments this is done by\ngeometric approximation and for this reason <strong>may be very slow</strong>. You can\nmake it faster by passing in an <tt>error</tt> option to the method. If you\ndon\u2019t pass in error, it defaults to <tt><span class=\"pre\">1e-12</span></tt>:</p>\n<pre>&gt;&gt;&gt; CubicBezier(300+100j, 100+100j, 200+200j, 200+300j).length(error=1e-5)\n297.2208145656899\n</pre>\n<p>CubicBezier and Arc also has a <tt>min_depth</tt> option that specifies the\nminimum recursion depth. This is set to 5 by default, resulting in using a\nminimum of 32 segments for the calculation. Setting it to 0 is a bad idea for\nCubicBeziers, as they may become approximated to a straight line.</p>\n<p><tt>Line.length()</tt> and <tt>QuadraticBezier.length()</tt> also takes these\nparameters, but they are ignored.</p>\n<p>CubicBezier and QuadraticBezier also has <tt>is_smooth_from(previous)</tt>\nmethods, that check if the segment is a \u201csmooth\u201d segment compared to the\ngiven segment.</p>\n<p>There is also a <tt>parse_path()</tt> function that will take an SVG path definition\nand return a <tt>Path</tt> object:</p>\n<pre>&gt;&gt;&gt; from svg.path import parse_path\n&gt;&gt;&gt; parse_path('M 100 100 L 300 100')\nPath(Move(to=(100+100j)), Line(start=(100+100j), end=(300+100j)))\n</pre>\n<div id=\"classes\">\n<h4>Classes</h4>\n<p>These are the SVG path segment classes. See the <a href=\"http://www.w3.org/TR/SVG/paths.html\" rel=\"nofollow\">SVG specifications</a> for more information on what each\nparameter means.</p>\n<ul>\n<li><tt>Line(start, end)</tt></li>\n<li><tt>Arc(start, radius, rotation, arc, sweep, end)</tt></li>\n<li><tt>QuadraticBezier(start, control, end)</tt></li>\n<li><tt>CubicBezier(start, control1, control2, end)</tt></li>\n</ul>\n<p>In addition to that, there is the <tt>Path</tt> class, which is instantiated\nwith a sequence of path segments:</p>\n<ul>\n<li><tt><span class=\"pre\">Path(*segments)</span></tt></li>\n</ul>\n<p>The <tt>Path</tt> class is a mutable sequence, so it behaves like a list.\nYou can add to it and replace path segments etc:</p>\n<pre>&gt;&gt;&gt; path = Path(Line(100+100j,300+100j), Line(100+100j,300+100j))\n&gt;&gt;&gt; path.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n&gt;&gt;&gt; path[0] = Line(200+100j,300+100j)\n&gt;&gt;&gt; del path[1]\n</pre>\n<p>The path object also has a <tt>d()</tt> method that will return the\nSVG representation of the Path segments:</p>\n<pre>&gt;&gt;&gt; path.d()\n'M 200,100 L 300,100 Q 200,200 200,300'\n</pre>\n</div>\n<div id=\"examples\">\n<h4>Examples</h4>\n<p>This SVG path example draws a triangle:</p>\n<pre>&gt;&gt;&gt; path1 = parse_path('M 100 100 L 300 100 L 200 300 z')\n</pre>\n<p>You can format SVG paths in many different ways, all valid paths should be\naccepted:</p>\n<pre>&gt;&gt;&gt; path2 = parse_path('M100,100L300,100L200,300z')\n</pre>\n<p>And these paths should be equal:</p>\n<pre>&gt;&gt;&gt; path1 == path2\nTrue\n</pre>\n<p>You can also build a path from objects:</p>\n<pre>&gt;&gt;&gt; path3 = Path(Line(100+100j,300+100j), Line(300+100j, 200+300j), Line(200+300j, 100+100j))\n</pre>\n<p>And it should again be equal to the first path:</p>\n<pre>&gt;&gt;&gt; path1 == path2\nTrue\n</pre>\n<p>Paths are mutable sequences, you can slice and append:</p>\n<pre>&gt;&gt;&gt; path1.append(QuadraticBezier(300+100j, 200+200j, 200+300j))\n&gt;&gt;&gt; len(path1[2:]) == 3\nTrue\n</pre>\n<p>Note that there is no protection against you creating paths that are invalid.\nYou can for example have a Close command that doesn\u2019t end at the path start:</p>\n<pre>&gt;&gt;&gt; wrong = Path(Line(100+100j,200+100j), Close(200+300j, 0))\n</pre>\n</div>\n</div>\n<div id=\"future-features\">\n<h3>Future features</h3>\n<ul>\n<li>Reversing paths. They should then reasonably be drawn \u201cbackwards\u201d meaning each\npath segment also needs to be reversed.</li>\n<li>Mathematical transformations might make sense.</li>\n<li>Verifying that paths are correct, or protection against creating incorrect paths.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This module is under a MIT License.</p>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p>Lennart Regebro &lt;<a href=\"mailto:regebro%40gmail.com\">regebro<span>@</span>gmail<span>.</span>com</a>&gt;, Original Author</p>\n<p>Justin Gruenberg implemented the Quadradic Bezier calculations and\nprovided suggestions and feedback about the d() function.</p>\n<p>Michiel Schallig suggested calculating length by recursive straight-line\napproximations, which enables you to choose between accuracy or speed.\nSteve Schwarz added an error argument to make that choice an argument.</p>\n<p>ClayJarCom speeded up <cite>point()</cite> calculations for paths.</p>\n<p>Thanks also to bug fixers Martin R, abcjjy, Daniel Stender, MTician,\nblokhin and jaraco, and thanks to tatarize for help with investigating\nthe subpath issues.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>4.0.2 (2019-11-04)</h3>\n<ul>\n<li>A solution for the setup.cfg [Alex Gr\u00f6nholm]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>4.0.1 (2019-11-03)</h3>\n<ul>\n<li>The pure setup.cfg config didn\u2019t work. All the tests pass fine,\nbut when installing the package somewhere else, nothing gets installed.\nSo I\u2019m reverting that change for now.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>4.0 (2019-11-02)</h3>\n<ul>\n<li>Moved all the information from setup.py into setup.cfg.</li>\n<li>Added a Close() command which is different from a Line() command in\nno way at all, to simplify the handling of closepath commands and subpaths.</li>\n<li>Path()\u2019s no longer have a <cite>closed</cite> attribute.</li>\n<li>Now fully supports the SVG 1.1 \u201cF.6.2 Out-of-range parameters\u201d list.</li>\n<li>Uses circular maths to calculate the length of circular arcs,\nmore accurate and much faster.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>3.1 (2019-10-25)</h3>\n<ul>\n<li>The Move null command was not imported into <tt>__init__.py</tt> [blokhin]</li>\n<li>#41: Switched from <tt>pkg_resource</tt>-style namespace\npackage for <tt>svg</tt> to a <a href=\"https://packaging.python.org/guides/packaging-namespace-packages/#pkgutil-style-namespace-packages\" rel=\"nofollow\">pkgutil style</a>\nnamespace package.</li>\n<li>A faster <tt>point()</tt> implementation for paths. [ClayJarCom]</li>\n<li>Dropped support for Python 2.6 and Python 3.3.</li>\n<li>Added support for Python 3.7 and 3.8.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>3.0 (2018-08-14)</h3>\n<ul>\n<li>Dropped support for Python 3.1 and 3.2. It still works, but it may stop.\nAdded support for Python 3.6. Dropped support for Jython, it\u2019s not\nsupported by Travis, and hasn\u2019t seen  a release in over a year.</li>\n<li>#33: Move commands are now preserved when parsed.</li>\n<li>Subpaths are no longer merged even if they are joined.</li>\n<li>#30: Arcs where the endpoint is the same as the start point caused a crash.\nThe SVG specs say that it instead should be the equavalent of skipping\nthat section, which now is the case.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>2.2 (2016-10-15)</h3>\n<ul>\n<li>Don\u2019t add a line when closing a path if it\u2019s not needed.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.1.1 (2016-02-28)</h3>\n<ul>\n<li>#18: QuadraticBeziers could get a DivideByZero error under certain\ncircumstances. [MTician]</li>\n<li>Accept an error parameter to Path.point() to be able to\ncontrol error vs performance setting. [saschwarz]</li>\n<li>#25: Arc\u2019s could create a MathDomain error under certain circumstances.</li>\n<li>#17: Set last_command always.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>2.0.1 (2015-10-17)</h3>\n<ul>\n<li>#20: The doctext for the closed() setter was incorrect.</li>\n<li>#19: Fixed so tests didn\u2019t use relative paths. [danstender]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>2.0 (2015-05-15)</h3>\n<ul>\n<li>Nothing changed yet.</li>\n</ul>\n</div>\n<div id=\"b1-2014-11-06\">\n<h3>2.0b1 (2014-11-06)</h3>\n<ul>\n<li>Added a Path.d() function to generate the Path\u2019s d attribute.</li>\n<li>Added is_smooth_from() on QubicBezier and QuadradicBezier.</li>\n<li>Path()\u2019s now have a .closed property.</li>\n<li>Fixed the representation so it\u2019s parseable.</li>\n<li>The calculations for CubicBezier and Arc segments are now recursive,\nand will end when a specific accuracy has been achieved.\nThis is somewhat faster for Arcs and somewhat slower for CubicBezier.\nHowever, you can now specify an accuracy, so if you want faster but\nlooser calculations, you can have that.</li>\n<li>\u2018t\u2019 segments (smooth, relative QuadraticBeziers) whose previous segment was\nnot a QuadraticBezier would get an incorrect control point.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.2 (2014-11-01)</h3>\n<ul>\n<li>New Quadradic Bezier implementation. [Justin Gruenberg]</li>\n<li>Solved issue #6: Z close path behavior. [abcjjy]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.1 (2013-10-19)</h3>\n<ul>\n<li>Floats with negative exponents work again.</li>\n<li>New tokenizer that is around 20 times faster.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.0 (2013-05-28)</h3>\n<ul>\n<li>Solved issue #2: Paths with negative values and no spaces didn\u2019t work.\n[regebro]</li>\n</ul>\n</div>\n<div id=\"b1-2013-02-03\">\n<h3>1.0b1 (2013-02-03)</h3>\n<ul>\n<li>Original release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6074437, "releases": {"2.1.1": [{"comment_text": "", "digests": {"md5": "487a6429e495c9d2f8baaf15d9d0d216", "sha256": "c4acf1c17e1e3370fcc610ead8ff6ecbbd49f0f676a27335e76d1ddce21dfa14"}, "downloads": -1, "filename": "svg.path-2.1.1.tar.gz", "has_sig": false, "md5_digest": "487a6429e495c9d2f8baaf15d9d0d216", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19278, "upload_time": "2016-02-29T02:41:14", "upload_time_iso_8601": "2016-02-29T02:41:14.050665Z", "url": "https://files.pythonhosted.org/packages/f0/8f/8121e7c7ad116249343e7ad781fe2ca0f7a111741d1d99998901258433ec/svg.path-2.1.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "4dc43f859480918316fb62a45ed881d7", "sha256": "bc7b75606e76f910bf0045d09a5f8415aaafff3cedd0a3ce9f0d474fe2007722"}, "downloads": -1, "filename": "svg.path-2.2.tar.gz", "has_sig": false, "md5_digest": "4dc43f859480918316fb62a45ed881d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19352, "upload_time": "2016-10-15T10:01:15", "upload_time_iso_8601": "2016-10-15T10:01:15.070940Z", "url": "https://files.pythonhosted.org/packages/1d/6c/cf484a95b895a7acd3989082501c67c8f43b6f91181f2a0b7aa634d1df6f/svg.path-2.2.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "eac6dda9e8b806f73d73bf894b553f49", "sha256": "a4ef1da33f6dffc57f17cef1cbc674991fd2fd9d3c472e36f9c1e34ee5d63f01"}, "downloads": -1, "filename": "svg.path-3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eac6dda9e8b806f73d73bf894b553f49", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23636, "upload_time": "2018-08-14T14:31:47", "upload_time_iso_8601": "2018-08-14T14:31:47.398750Z", "url": "https://files.pythonhosted.org/packages/50/2f/618c5b6804e6dda90f024f0bc2d14ffc3db00221a818ee35da478427015d/svg.path-3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13c080a8ce70cc6445c40e7191cf281d", "sha256": "7b568f90f67fd25413c8da9f8bc9f9f8ab089425c20fa03330e97e77d13880ee"}, "downloads": -1, "filename": "svg.path-3.0.tar.gz", "has_sig": false, "md5_digest": "13c080a8ce70cc6445c40e7191cf281d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18456, "upload_time": "2018-08-14T14:31:49", "upload_time_iso_8601": "2018-08-14T14:31:49.273902Z", "url": "https://files.pythonhosted.org/packages/5a/7f/7a601000fc400024f76e660569b0b97f98787279daff079f0dbfa89293ba/svg.path-3.0.tar.gz", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "6685925d42446f5921f04fea25f70927", "sha256": "4275af160112bd8e6c8b6b8e3e20e3643c217f4e6d8d14d388ddec574b7ce613"}, "downloads": -1, "filename": "svg.path-3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6685925d42446f5921f04fea25f70927", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20195, "upload_time": "2019-10-25T06:07:15", "upload_time_iso_8601": "2019-10-25T06:07:15.273281Z", "url": "https://files.pythonhosted.org/packages/1b/ac/2be25a18a0354d62e1c8352a545ac66655a137fab25bf2c0750c095a20d3/svg.path-3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f1362cb44076cbb3a8e1689c1e966bd", "sha256": "640c97cf4ae2d460a6e17984ea82936768d501f95aaf73638cf31beb3f2b20e6"}, "downloads": -1, "filename": "svg.path-3.1.tar.gz", "has_sig": false, "md5_digest": "3f1362cb44076cbb3a8e1689c1e966bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21911, "upload_time": "2019-10-25T06:07:17", "upload_time_iso_8601": "2019-10-25T06:07:17.398501Z", "url": "https://files.pythonhosted.org/packages/6e/a3/827c27420e89857f191a0128569944ba2ef2a4d6b59768f14cb0d1f69d74/svg.path-3.1.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "cab2e9eb5b82247b047190457e6666dd", "sha256": "92a17fa63cec3d0c6967d22d48dee40708631e11644982e7a6fc772c9145fa5a"}, "downloads": -1, "filename": "svg.path-4.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cab2e9eb5b82247b047190457e6666dd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21031, "upload_time": "2019-11-03T11:23:13", "upload_time_iso_8601": "2019-11-03T11:23:13.277001Z", "url": "https://files.pythonhosted.org/packages/4d/28/3f712ce1042ac694dcf26ce9443d9a88ce3aab98b1e688e4a9ca1e4c3d85/svg.path-4.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff404d333f1f91e45f0c800f7f8bed6f", "sha256": "1e4035f8629c039432f3f80a973b676334be4712ddc4d8efcdd00489211134e1"}, "downloads": -1, "filename": "svg.path-4.0.1.tar.gz", "has_sig": false, "md5_digest": "ff404d333f1f91e45f0c800f7f8bed6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22927, "upload_time": "2019-11-03T11:23:15", "upload_time_iso_8601": "2019-11-03T11:23:15.198512Z", "url": "https://files.pythonhosted.org/packages/5a/f9/3c7b4d6f4ea50c83316c6eb1cf24cb266517bd7ee213d25d6d563d5547d9/svg.path-4.0.1.tar.gz", "yanked": false}], "4.0.2": [{"comment_text": "", "digests": {"md5": "f6f83fc641aa02c769340b4bfd176227", "sha256": "52bd79036e4958c97abd5af8f31938bce35f1e5f3720729f928e0a0c5c661603"}, "downloads": -1, "filename": "svg.path-4.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6f83fc641aa02c769340b4bfd176227", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21079, "upload_time": "2019-11-04T11:22:55", "upload_time_iso_8601": "2019-11-04T11:22:55.198779Z", "url": "https://files.pythonhosted.org/packages/d7/e4/0595a7d576ff26ab780ae8c30080f4e0bfc5c47d4402f02a925da85995e2/svg.path-4.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cab31fef7811e997812a8b50522d51e", "sha256": "4bd627ec6526cd5da14f3c6a51205d930187db2d8992aed626825492c033b195"}, "downloads": -1, "filename": "svg.path-4.0.2.tar.gz", "has_sig": false, "md5_digest": "2cab31fef7811e997812a8b50522d51e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22880, "upload_time": "2019-11-04T11:22:57", "upload_time_iso_8601": "2019-11-04T11:22:57.184015Z", "url": "https://files.pythonhosted.org/packages/63/f9/56781c02bb69f96f0af1644aaabf065bea6cb0e67ffe2b3ca100847f3f82/svg.path-4.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6f83fc641aa02c769340b4bfd176227", "sha256": "52bd79036e4958c97abd5af8f31938bce35f1e5f3720729f928e0a0c5c661603"}, "downloads": -1, "filename": "svg.path-4.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6f83fc641aa02c769340b4bfd176227", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21079, "upload_time": "2019-11-04T11:22:55", "upload_time_iso_8601": "2019-11-04T11:22:55.198779Z", "url": "https://files.pythonhosted.org/packages/d7/e4/0595a7d576ff26ab780ae8c30080f4e0bfc5c47d4402f02a925da85995e2/svg.path-4.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cab31fef7811e997812a8b50522d51e", "sha256": "4bd627ec6526cd5da14f3c6a51205d930187db2d8992aed626825492c033b195"}, "downloads": -1, "filename": "svg.path-4.0.2.tar.gz", "has_sig": false, "md5_digest": "2cab31fef7811e997812a8b50522d51e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22880, "upload_time": "2019-11-04T11:22:57", "upload_time_iso_8601": "2019-11-04T11:22:57.184015Z", "url": "https://files.pythonhosted.org/packages/63/f9/56781c02bb69f96f0af1644aaabf065bea6cb0e67ffe2b3ca100847f3f82/svg.path-4.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:51 2020"}