{"info": {"author": "Steve Lacy, Dmitrii Vlasov", "author_email": "yablokoff.tlt@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "minimongo\n=========\n\n:Info: Minimal database Model management for MongoDB.\n:Author: Steve Lacy, Dmitrii Vlasov <yablokoff.tlt@gmail.com>\n\n\nAbout\n-----\n\n``minimongo`` is a lightweight, schemaless, Pythonic Object-Oriented\ninterface to MongoDB.\n\nIt provides a very thin, dynamicly typed (schema-less) object management\nlayer with simple consistency for any data stored in any MongoDB collection.\n``minimongo`` directly calls the existing pymongo_ query syntax.\n\n``minimongo`` can easily layer on top of existing MongoDB collections, and\nwill work properly with almost any existing schema, even from third party\napplications.\n\n\nInstallation\n------------\n\nIf you have `setuptools <http://peak.telecommunity.com/DevCenter/setuptools>`_\nyou can use ``easy_install -U minimongo``. Otherwise, you can download the\nsource from `GitHub <http://github.com/yablokoff/minimongo>`_ and run ``python\nsetup.py install``.\n\n\nDependencies\n============\n- pymongo_ 2.1+\n- `sphinx <http://sphinx.pocoo.org>`_ (optional -- for documentation generation)\n\n\nExample\n-------\n\nHere's a very brief example of creating an object, querying for it, modifying\na field, and then saving it back again::\n\n    from minimongo import Model, Index\n\n    class Foo(Model):\n        class Meta:\n            # Here, we specify the database and collection names.\n            # A connection to your DB is automatically created.\n            database = \"minimongo\"\n            collection = \"rocks\"\n\n            # Now, we programatically declare what indices we want.\n            # The arguments to the Index constructor are identical to\n            # the args to pymongo\"s ensure_index function.\n            indices = (\n                Index(\"a\"),\n            )\n\n\n    if __name__ == \"__main__\":\n        # Create & save an object, and return a local in-memory copy of it:\n        foo = Foo({\"x\": 1, \"y\": 2}).save()\n\n        # Find that object again, loading it into memory:\n        foo = Foo.collection.find_one({\"x\": 1})\n\n        # Change a field value, and save it back to the DB.\n        foo.other = \"some data\"\n        foo.save()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/yablokoff/minimongo", "keywords": "mongo,mongodb,pymongo,orm", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "mimimongo", "package_url": "https://pypi.org/project/mimimongo/", "platform": "any", "project_url": "https://pypi.org/project/mimimongo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/yablokoff/minimongo"}, "release_url": "https://pypi.org/project/mimimongo/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Minimal database Model management for MongoDB", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            minimongo<br>=========<br><br>:Info: Minimal database Model management for MongoDB.<br>:Author: Steve Lacy, Dmitrii Vlasov &lt;yablokoff.tlt@gmail.com&gt;<br><br><br>About<br>-----<br><br>``minimongo`` is a lightweight, schemaless, Pythonic Object-Oriented<br>interface to MongoDB.<br><br>It provides a very thin, dynamicly typed (schema-less) object management<br>layer with simple consistency for any data stored in any MongoDB collection.<br>``minimongo`` directly calls the existing pymongo_ query syntax.<br><br>``minimongo`` can easily layer on top of existing MongoDB collections, and<br>will work properly with almost any existing schema, even from third party<br>applications.<br><br><br>Installation<br>------------<br><br>If you have `setuptools &lt;http://peak.telecommunity.com/DevCenter/setuptools&gt;`_<br>you can use ``easy_install -U minimongo``. Otherwise, you can download the<br>source from `GitHub &lt;http://github.com/yablokoff/minimongo&gt;`_ and run ``python<br>setup.py install``.<br><br><br>Dependencies<br>============<br>- pymongo_ 2.1+<br>- `sphinx &lt;http://sphinx.pocoo.org&gt;`_ (optional -- for documentation generation)<br><br><br>Example<br>-------<br><br>Here's a very brief example of creating an object, querying for it, modifying<br>a field, and then saving it back again::<br><br>    from minimongo import Model, Index<br><br>    class Foo(Model):<br>        class Meta:<br>            # Here, we specify the database and collection names.<br>            # A connection to your DB is automatically created.<br>            database = \"minimongo\"<br>            collection = \"rocks\"<br><br>            # Now, we programatically declare what indices we want.<br>            # The arguments to the Index constructor are identical to<br>            # the args to pymongo\"s ensure_index function.<br>            indices = (<br>                Index(\"a\"),<br>            )<br><br><br>    if __name__ == \"__main__\":<br>        # Create &amp; save an object, and return a local in-memory copy of it:<br>        foo = Foo({\"x\": 1, \"y\": 2}).save()<br><br>        # Find that object again, loading it into memory:<br>        foo = Foo.collection.find_one({\"x\": 1})<br><br>        # Change a field value, and save it back to the DB.<br>        foo.other = \"some data\"<br>        foo.save()\n          </div>"}, "last_serial": 794790, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "27548ac5b9e7cc2634fcf813d718b0b0", "sha256": "eb64bcea521c0a8032c6b8280e75fbd64598a6178be96752fe5748a24052195c"}, "downloads": -1, "filename": "mimimongo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "27548ac5b9e7cc2634fcf813d718b0b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15018, "upload_time": "2012-05-01T12:20:19", "upload_time_iso_8601": "2012-05-01T12:20:19.359485Z", "url": "https://files.pythonhosted.org/packages/ab/c3/4c1d26e43995ee1e35144db90bb3e35821e6bc5a38931ff52afd7ab21a18/mimimongo-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1f2576e0e75281f661163aae46656cb9", "sha256": "cf8f36999c3fcb811a673463b3d09a76e3fcf3c65de8f5d4f657581b8b2dca26"}, "downloads": -1, "filename": "mimimongo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1f2576e0e75281f661163aae46656cb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15023, "upload_time": "2012-05-01T12:31:31", "upload_time_iso_8601": "2012-05-01T12:31:31.736346Z", "url": "https://files.pythonhosted.org/packages/51/19/33be3f7cf76f491610b8cd77f1cf3226d31d5fba474420aa5ba78ce13b03/mimimongo-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e1348c5ba7a041c314bf639993693770", "sha256": "bde8c80092672e89c277481454b3ab640eaf01104ce4a8092f0235acc0c06af9"}, "downloads": -1, "filename": "mimimongo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e1348c5ba7a041c314bf639993693770", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14507, "upload_time": "2012-05-01T13:03:18", "upload_time_iso_8601": "2012-05-01T13:03:18.136581Z", "url": "https://files.pythonhosted.org/packages/5b/e7/64f1a7c72b4e435bc6b35d448e44fdcd1290d0633e3b6a0c58a4ade32696/mimimongo-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1348c5ba7a041c314bf639993693770", "sha256": "bde8c80092672e89c277481454b3ab640eaf01104ce4a8092f0235acc0c06af9"}, "downloads": -1, "filename": "mimimongo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e1348c5ba7a041c314bf639993693770", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14507, "upload_time": "2012-05-01T13:03:18", "upload_time_iso_8601": "2012-05-01T13:03:18.136581Z", "url": "https://files.pythonhosted.org/packages/5b/e7/64f1a7c72b4e435bc6b35d448e44fdcd1290d0633e3b6a0c58a4ade32696/mimimongo-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:36 2020"}