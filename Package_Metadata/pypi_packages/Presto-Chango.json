{"info": {"author": "Prayag Savsani", "author_email": "prayag.s@ahduni.edu.in", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Sound/Audio :: Analysis"], "description": "# Music Identification Through Audio Fingerprinting\n<a href=\"https://pypi.org/project/Presto-Chango/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/Presto-Chango\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/Presto-Chango\">\n<img alt=\"PyPI - License\" src=\"https://img.shields.io/pypi/l/Presto-Chango\">\n<br>\nIdentifies a song from a small recording (say 30 seconds). The song has to be a part of your created database, of course.\n\nThis project is essentially a simplified version of what Shazam does.\n## The Idea\nThe flowchart on the right describes the series of steps.\n<img src=\"https://github.com/yashrajkakkad/presto-chango/blob/master/flowchart.png?raw=true\" align=\"right\" height=\"440\">\n\n\nBelow is a brief summary. For detailed explanation with analysis, check out our [Report](https://drive.google.com/open?id=1xbEC75FN3AIidWBd8bckgi4QeNJDdN-b).\n\nWe decimate the audio signal by a factor of 4 after passing it through a low pass filter (to smartly avoid [aliasing](https://en.wikipedia.org/wiki/Aliasing)). Thereafter, the signal is converted to frequency domain using the famous Fast Fourier Transform.\n\nWe take small chunks of the sample (roughly 0.3 seconds) and take the peak frequencies along a logarithmic scale. Those values are then associated with a hash value. We do so for all the songs and hence create a database.\n\nWe perform similar steps for the recorded sample. The answer is the song with the highest number of matches for a particular offset value.\n\n## Requirements\n- Python 3+.\n- pip (package installer for Python). See [here](https://pip.pypa.io/en/stable/installing/) for installation.\n- ffmpeg. See [here](https://github.com/adaptlearning/adapt_authoring/wiki/Installing-FFmpeg) for installation.\n- PortAudio. Only for Linux/OSX users. Check your distribution's repos for latest builds. Instead you can also build it from source, see [here](http://www.portaudio.com/download.html).\n\n## Installation\n- Install using pip (preferred in a virtual environment).\n```sh\npip install Presto-Chango\n```\n\n## Usage\n- On the first run, create your database by specifying the location of your songs directory.\n```sh\npresto-chango create-db <songs-directory>\n```\n- Identify a song by either recording in real time or using a pre-recorded sample.\n```sh\n# Record in real time\npresto-chango identify\n\n# Use a pre-recorded sample\npresto-chango identify --file=samples/sample1.wav\n```\n- The algorithm returns the top five matches and the number of offsets that matched for each of them. Example\n```sh\n$ presto-chango identify --file=\"samples/sample_GAY.wav\"\n  Loading database\n  .\n  .\n  .\n  Database loaded\n\n  Processing...\n\n  Results:\n  Kane Brown - Good as You (Official Music Video)_mS3TeZEp_PE.wav 41\n  Katy Perry - Never Really Over (Official)_aEb5gNsmGJ8.wav 39\n  Ed Sheeran - Perfect (Official Music Video)_2Vv-BfVoq4g.wav 37\n  Cody Johnson - On My Way To You (Official Music Video)_RKUENGsDXBA.wav 24\n  Jason Aldean - Rearview Town_WEUUvntknTI.wav 23\n```\n\n## Building the source code\n- Clone the repository\n```sh\ngit clone https://github.com/yashrajkakkad/presto-chango.git\ncd presto-chango\n```\n- Create a virtual environment\n```sh\npython -m venv venv\nsource venv/bin/activate\n```\n- Install the package. The `--editable` flag makes it so that we don't have to reinstall everytime we make some change.\n```sh\npip install --editable .\n```\n\n## Testing\nYou can run the tester code if you're too lazy to record songs. It will cut random 30 second samples from songs and run the algorithm.\n```sh\npython tester.py\n```\n\n## References\n- [How does Shazam work | Coding Geek](http://coding-geek.com/how-shazam-works/)\n- [Creating Shazam in Java](https://royvanrijn.com/blog/2010/06/creating-shazam-in-java/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yashrajkakkad/presto-chango", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Presto-Chango", "package_url": "https://pypi.org/project/Presto-Chango/", "platform": "", "project_url": "https://pypi.org/project/Presto-Chango/", "project_urls": {"Homepage": "https://github.com/yashrajkakkad/presto-chango"}, "release_url": "https://pypi.org/project/Presto-Chango/1.0.2/", "requires_dist": ["Click", "scipy", "numpy", "scikit-image", "matplotlib", "pydub", "pyaudio", "appdirs"], "requires_python": "", "summary": "Music identification through audio fingerprinting", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Music Identification Through Audio Fingerprinting</h1>\n<p><a href=\"https://pypi.org/project/Presto-Chango/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f967cbbdea064b737890d9582c13aff41e34b9e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f50726573746f2d4368616e676f\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/442ca22c336e07626c64a20818dc759d6cc7758a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f50726573746f2d4368616e676f\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eb11921c43f33b8a7ac8e66fc4a6ed79d1abb4a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f50726573746f2d4368616e676f\">\n<br>\nIdentifies a song from a small recording (say 30 seconds). The song has to be a part of your created database, of course.</p>\n<p>This project is essentially a simplified version of what Shazam does.</p>\n<h2>The Idea</h2>\n<p>The flowchart on the right describes the series of steps.\n<img align=\"right\" height=\"440\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d000e0ab26294987dd33cdc757052b2ea2d5bab7/68747470733a2f2f6769746875622e636f6d2f7961736872616a6b616b6b61642f70726573746f2d6368616e676f2f626c6f622f6d61737465722f666c6f7763686172742e706e673f7261773d74727565\"></p>\n<p>Below is a brief summary. For detailed explanation with analysis, check out our <a href=\"https://drive.google.com/open?id=1xbEC75FN3AIidWBd8bckgi4QeNJDdN-b\" rel=\"nofollow\">Report</a>.</p>\n<p>We decimate the audio signal by a factor of 4 after passing it through a low pass filter (to smartly avoid <a href=\"https://en.wikipedia.org/wiki/Aliasing\" rel=\"nofollow\">aliasing</a>). Thereafter, the signal is converted to frequency domain using the famous Fast Fourier Transform.</p>\n<p>We take small chunks of the sample (roughly 0.3 seconds) and take the peak frequencies along a logarithmic scale. Those values are then associated with a hash value. We do so for all the songs and hence create a database.</p>\n<p>We perform similar steps for the recorded sample. The answer is the song with the highest number of matches for a particular offset value.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3+.</li>\n<li>pip (package installer for Python). See <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">here</a> for installation.</li>\n<li>ffmpeg. See <a href=\"https://github.com/adaptlearning/adapt_authoring/wiki/Installing-FFmpeg\" rel=\"nofollow\">here</a> for installation.</li>\n<li>PortAudio. Only for Linux/OSX users. Check your distribution's repos for latest builds. Instead you can also build it from source, see <a href=\"http://www.portaudio.com/download.html\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Install using pip (preferred in a virtual environment).</li>\n</ul>\n<pre>pip install Presto-Chango\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>On the first run, create your database by specifying the location of your songs directory.</li>\n</ul>\n<pre>presto-chango create-db &lt;songs-directory&gt;\n</pre>\n<ul>\n<li>Identify a song by either recording in real time or using a pre-recorded sample.</li>\n</ul>\n<pre><span class=\"c1\"># Record in real time</span>\npresto-chango identify\n\n<span class=\"c1\"># Use a pre-recorded sample</span>\npresto-chango identify --file<span class=\"o\">=</span>samples/sample1.wav\n</pre>\n<ul>\n<li>The algorithm returns the top five matches and the number of offsets that matched for each of them. Example</li>\n</ul>\n<pre>$ presto-chango identify --file<span class=\"o\">=</span><span class=\"s2\">\"samples/sample_GAY.wav\"</span>\n  Loading database\n  .\n  .\n  .\n  Database loaded\n\n  Processing...\n\n  Results:\n  Kane Brown - Good as You <span class=\"o\">(</span>Official Music Video<span class=\"o\">)</span>_mS3TeZEp_PE.wav <span class=\"m\">41</span>\n  Katy Perry - Never Really Over <span class=\"o\">(</span>Official<span class=\"o\">)</span>_aEb5gNsmGJ8.wav <span class=\"m\">39</span>\n  Ed Sheeran - Perfect <span class=\"o\">(</span>Official Music Video<span class=\"o\">)</span>_2Vv-BfVoq4g.wav <span class=\"m\">37</span>\n  Cody Johnson - On My Way To You <span class=\"o\">(</span>Official Music Video<span class=\"o\">)</span>_RKUENGsDXBA.wav <span class=\"m\">24</span>\n  Jason Aldean - Rearview Town_WEUUvntknTI.wav <span class=\"m\">23</span>\n</pre>\n<h2>Building the source code</h2>\n<ul>\n<li>Clone the repository</li>\n</ul>\n<pre>git clone https://github.com/yashrajkakkad/presto-chango.git\n<span class=\"nb\">cd</span> presto-chango\n</pre>\n<ul>\n<li>Create a virtual environment</li>\n</ul>\n<pre>python -m venv venv\n<span class=\"nb\">source</span> venv/bin/activate\n</pre>\n<ul>\n<li>Install the package. The <code>--editable</code> flag makes it so that we don't have to reinstall everytime we make some change.</li>\n</ul>\n<pre>pip install --editable .\n</pre>\n<h2>Testing</h2>\n<p>You can run the tester code if you're too lazy to record songs. It will cut random 30 second samples from songs and run the algorithm.</p>\n<pre>python tester.py\n</pre>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://coding-geek.com/how-shazam-works/\" rel=\"nofollow\">How does Shazam work | Coding Geek</a></li>\n<li><a href=\"https://royvanrijn.com/blog/2010/06/creating-shazam-in-java/\" rel=\"nofollow\">Creating Shazam in Java</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6378273, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d16d68ae1f3aa385fd298cd505b451a1", "sha256": "bb95a99d9a56f3197274fbeb9917569aab7af27d661b09d6e39f551e9a5546c2"}, "downloads": -1, "filename": "Presto_Chango-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d16d68ae1f3aa385fd298cd505b451a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11535, "upload_time": "2019-12-30T19:51:30", "upload_time_iso_8601": "2019-12-30T19:51:30.521186Z", "url": "https://files.pythonhosted.org/packages/f1/16/7bed1632a2def45e7e1399f9b322fe24096e420fea904e0596d871bd312c/Presto_Chango-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1c361f6049ce2bfb32fcdac6ece31fb", "sha256": "590964954e699aaa0223940fd75a880cee8f7648e4be8473aeb1b97e6d129a53"}, "downloads": -1, "filename": "Presto Chango-1.0.tar.gz", "has_sig": false, "md5_digest": "f1c361f6049ce2bfb32fcdac6ece31fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9556, "upload_time": "2019-12-30T19:51:32", "upload_time_iso_8601": "2019-12-30T19:51:32.836621Z", "url": "https://files.pythonhosted.org/packages/ff/00/df18f3352813ab0bf1af08a26d99e03fd0968307f47d9aee51e7287c886b/Presto%20Chango-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8215272f1b91ef96ffcef2d71d4d2144", "sha256": "95fa1a283c5a08deb82bc1d5ccc72b5e88d3169c5f85e50ff91ff120a06f4720"}, "downloads": -1, "filename": "Presto_Chango-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8215272f1b91ef96ffcef2d71d4d2144", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11875, "upload_time": "2019-12-31T06:05:24", "upload_time_iso_8601": "2019-12-31T06:05:24.251843Z", "url": "https://files.pythonhosted.org/packages/82/c3/e279a7f162d4385bdafb47e6e92280a46cf346500af153d7a58cde704882/Presto_Chango-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dafef6518391db530fda74c9b203dffc", "sha256": "2c74592f7e8d6ac952d1b6b0ed82250345655751a02fe23ec4bdb47c5e7437ea"}, "downloads": -1, "filename": "Presto Chango-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dafef6518391db530fda74c9b203dffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9727, "upload_time": "2019-12-31T06:05:55", "upload_time_iso_8601": "2019-12-31T06:05:55.587730Z", "url": "https://files.pythonhosted.org/packages/4a/00/b87ff6ac5f06eecf4acedd22e38231d7775ba33b233160507793931025c9/Presto%20Chango-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6f9f9c1a2662d409b1156351334c529f", "sha256": "68660c7d95d9f527c5c235a7bd2bd76eab45848bff39f2f6ff319e956719e825"}, "downloads": -1, "filename": "Presto_Chango-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9f9c1a2662d409b1156351334c529f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11884, "upload_time": "2019-12-31T06:14:12", "upload_time_iso_8601": "2019-12-31T06:14:12.187142Z", "url": "https://files.pythonhosted.org/packages/47/f5/ec2b90fccabd0cebcb9ba94ed9d6ffc359ef1ff0f686ad17af83a00e28b0/Presto_Chango-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84895ab884ad9013b9f04365a4e79c15", "sha256": "c140138bc54fffe88ffba2d217bd661b85969f111b28fc17ed819a499216ed42"}, "downloads": -1, "filename": "Presto Chango-1.0.2.tar.gz", "has_sig": false, "md5_digest": "84895ab884ad9013b9f04365a4e79c15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9753, "upload_time": "2019-12-31T06:14:13", "upload_time_iso_8601": "2019-12-31T06:14:13.657667Z", "url": "https://files.pythonhosted.org/packages/2d/6b/dfe3d7bf8af627a0dfacc00fea0fc1083ce50c3ba164c66626acecad261b/Presto%20Chango-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f9f9c1a2662d409b1156351334c529f", "sha256": "68660c7d95d9f527c5c235a7bd2bd76eab45848bff39f2f6ff319e956719e825"}, "downloads": -1, "filename": "Presto_Chango-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9f9c1a2662d409b1156351334c529f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11884, "upload_time": "2019-12-31T06:14:12", "upload_time_iso_8601": "2019-12-31T06:14:12.187142Z", "url": "https://files.pythonhosted.org/packages/47/f5/ec2b90fccabd0cebcb9ba94ed9d6ffc359ef1ff0f686ad17af83a00e28b0/Presto_Chango-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84895ab884ad9013b9f04365a4e79c15", "sha256": "c140138bc54fffe88ffba2d217bd661b85969f111b28fc17ed819a499216ed42"}, "downloads": -1, "filename": "Presto Chango-1.0.2.tar.gz", "has_sig": false, "md5_digest": "84895ab884ad9013b9f04365a4e79c15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9753, "upload_time": "2019-12-31T06:14:13", "upload_time_iso_8601": "2019-12-31T06:14:13.657667Z", "url": "https://files.pythonhosted.org/packages/2d/6b/dfe3d7bf8af627a0dfacc00fea0fc1083ce50c3ba164c66626acecad261b/Presto%20Chango-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:45 2020"}