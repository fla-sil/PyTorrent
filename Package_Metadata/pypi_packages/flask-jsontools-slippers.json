{"info": {"author": "Mark Vartanyan", "author_email": "kolypto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "|Build Status|\n\nFlask JsonTools\n===============\n\nJSON API tools for Flask\n\nTable of Contents\n=================\n\n-  View Utilities\n\n   -  @jsonapi\n\n      -  JsonResponse\n      -  make\\_json\\_response()\n\n-  FlaskJsonClient\n-  Class-Based Views\n\n   -  MethodView\n   -  RestfulView\n\nView Utilities\n==============\n\n@jsonapi\n--------\n\nDecorate a view function that talks JSON.\n\nSuch function can return:\n\n-  tuples of ``(response, status[, headers])``: to set custom status\n   code and optionally - headers\n-  Instances of ```JsonResponse`` <#jsonresponse>`__\n-  The result of helper function\n   ```make_json_response`` <#make_json_response>`__\n\nExample:\n\n.. code:: python\n\n    from flask.ext.jsontools import jsonapi\n\n    @app.route('/users')\n    @jsonapi\n    def list_users():\n        return [\n            {'id': 1, 'login': 'kolypto'},\n            #...\n        ]\n\n    @app.route('/user/<int:id>', methods=['DELETE'])\n    def delete_user(id):\n        return {'error': 'Access denied'}, 403\n\nJsonResponse\n~~~~~~~~~~~~\n\nExtends\n```flask.Request`` <http://flask.pocoo.org/docs/api/#incoming-request-data>`__\nand encodes the response with JSON. Views decorated with\n```@jsonapi`` <#jsonapi>`__ return these objects.\n\nArguments:\n\n-  ``response``: response data\n-  ``status``: status code. Optional, defaults to 200\n-  ``headers``: additional headers dict. Optional.\n-  ``**kwargs``: additional argumets for\n   ```Response`` <http://flask.pocoo.org/docs/api/#response-objects>`__\n\nMethods:\n\n-  ``preprocess_response_data(response)``: Override to get custom\n   response behavior.\n-  ``get_json()``: Get the original response data.\n-  ``__getitem__(key)``: Get an item from the response data\n\nThe extra methods allows to reuse views:\n\n.. code:: python\n\n    from flask.ext.jsontools import jsonapi\n\n    @app.route('/user', methods=['GET'])\n    @jsonapi\n    def list_users():\n        return [ { 1: 'first', 2: 'second' } ]\n\n    @app.route('/user/<int:id>', methods=['GET'])\n    @jsonapi\n    def get_user(id):\n        return list_users().get_json()[id]  # Long form\n        return list_users()[id]  # Shortcut\n\nmake\\_json\\_response()\n~~~~~~~~~~~~~~~~~~~~~~\n\nHelper function that actually preprocesses view return value into\n```JsonResponse`` <#jsonresponse>`__.\n\nAccepts ``rv`` as any of:\n\n-  tuple of ``(response, status[, headers])``\n-  Object to encode as JSON\n\nFlaskJsonClient\n===============\n\nFlaskJsonClient is a JSON-aware test client: it can post JSON and parse\nJSON responses into ```JsonResponse`` <#jsonresponse>`__.\n\n.. code:: python\n\n    from myapplication import Application\n    from flask.ext.jsontools import FlaskJsonClient\n\n    def JsonTest(unittest.TestCase):\n        def setUp(self):\n            self.app = Application(__name__)\n            self.app.test_client_class = FlaskJsonClient\n\n        def testCreateUser(self):\n            with self.app.test_client() as c:\n                rv = c.post('/user/', json={'name': 'kolypto'})\n                # rv is JsonResponse\n                rv.status_code\n                rv.get_json()['user']  # Long form for the previous\n                rv['user']  # Shortcut for the previous\n\nFormatting Utils\n================\n\nDynamicJSONEncoder\n------------------\n\nIn python, de-facto standard for encoding objects of custom classes is\nthe ``__json__()`` method which returns the representation of the\nobject.\n\n``DynamicJSONEncoder`` is the implementation of this protocol: if an\nobject has the ``__json__()`` method, its result if used for the\nrepresentation.\n\nYou'll definitely want to subclass it to support other types, e.g. dates\nand times:\n\n.. code:: python\n\n    from flask.ext.jsontools import DynamicJSONEncoder\n\n    class ApiJSONEncoder(DynamicJSONEncoder):\n        def default(self, o):\n            # Custom formats\n            if isinstance(o, datetime.datetime):\n                return o.isoformat(' ')\n            if isinstance(o, datetime.date):\n                return o.isoformat()\n            if isinstance(o, set):\n                return list(o)\n\n            # Fallback\n            return super(DynamicJSONEncoder, self).default(o)\n\nNow, just install the encoder to your Flask:\n\n.. code:: python\n\n    from flask import Flask\n\n    app = Flask(__name__)\n    app.json_encoder = DynamicJSONEncoder\n\nJsonSerializableBase\n--------------------\n\nSerializing SqlAlchemy models to JSON is a headache: if an attribute is\npresent on an instance, this does not mean it's loaded from the\ndatabase.\n\n``JsonSerializableBase`` is a mixin for SqlAlchemy Declarative Base that\nadds a magic ``__json__()`` method, compatible with\n```DynamicJSONEncoder`` <#dynamicjsonencoder>`__. When serializing, it\nmakes sure that entity serialization will *never* issue additional\nrequests.\n\nExample:\n\n.. code:: python\n\n    from sqlalchemy.ext.declarative import declarative_base\n    from flask.ext.jsontools import JsonSerializableBase\n\n    Base = declarative_base(cls=(JsonSerializableBase,))\n\n    class User(Base):\n        #...\n\nNow, you can safely respond with SqlAlchemy models in your JSON views,\nand jsontools will handle the rest :)\n\nClass-Based Views\n=================\n\nModule ``flask.ext.jsontools.views`` contains a couple of classes that\nallow to build class-based views which dispatch to different methods.\n\nIn contrast to\n`MethodView <http://flask.pocoo.org/docs/api/#flask.views.MethodView>`__,\nthis gives much higher flexibility.\n\nMethodView\n----------\n\nUsing ``MethodView`` class for methods, decorate them with\n``@methodview()``, which takes the following arguments:\n\n-  ``methods=()``: Iterable of HTTP methods to use with this method.\n-  ``ifnset=None``: Conditional matching. List of route parameter names\n   that should *not* be set for this method to match.\n-  ``ifset=None``: Conditional matching. List of route parameter names\n   that should be set for this method to match.\n\nThis allows to map HTTP methods to class methods, and in addition define\nwhen individual methods should match.\n\nQuick example:\n\n.. code:: python\n\n    from flask.ext.jsontools import jsonapi, MethodView, methodview\n\n    class UserView(MethodView):\n        # Canonical way to specify decorators for class-based views\n        decorators = (jsonapi, )\n\n        @methodview\n        def list(self):\n            \"\"\" List users \"\"\"\n            return db.query(User).all()\n\n        @methodview\n        def get(self, user_id):\n            \"\"\" Load a user by id \"\"\"\n            return db.query(User).get(user_id)\n\n    userview = CrudView.as_view('user')\n    app.add_url_rule('/user/', view_func=userview)\n    app.add_url_rule('/user/<int:user_id>', view_func=userview)\n\nNow, ``GET`` HTTP method is routed to two different methods depending on\nconditions. Keep defining more methods to get good routing :)\n\nTo simplify the last step of creating the view, there's a helper:\n\n.. code:: python\n\n    UserView.route_as_view(app, 'user', ('/user/', '/user/<int:user_id>'))\n\nRestfulView\n-----------\n\nSince ``MethodView`` is mostly useful to expose APIs over collections of\nentities, there is a RESTful helper which automatically decorates some\nspecial methods with ``@methodview``.\n\n+---------------+---------------+-------------+\n| View method   | HTTP method   | URL         |\n+===============+===============+=============+\n| list()        | GET           | ``/``       |\n+---------------+---------------+-------------+\n| create()      | POST          | ``/``       |\n+---------------+---------------+-------------+\n| get()         | GET           | ``/<pk>``   |\n+---------------+---------------+-------------+\n| replace()     | PUT           | ``/<pk>``   |\n+---------------+---------------+-------------+\n| update()      | POST          | ``/<pk>``   |\n+---------------+---------------+-------------+\n| delete()      | DELETE        | ``/<pk>``   |\n+---------------+---------------+-------------+\n\nBy subclassing ``RestfulView`` and implementing some of these methods,\nyou'll get a complete API endpoint with a single class.\n\nIt's also required to define the list of primary key fields by defining\nthe ``primary_key`` property:\n\n.. code:: python\n\n    from flask.ext.jsontools import jsonapi, RestfulView\n\n    class User(RestfulView):\n        decorators = (jsonapi, )\n        primary_key = ('id',)\n\n        #region Operation on the collection\n\n        def list():\n            return db.query(User).all()\n\n        def create():\n            db.save(user)\n            return user\n\n        #endregion\n\n        #region Operation on entities\n\n        def get(id):\n            return db.query(User).get(id)\n\n        def replace(id):\n            db.save(user, id)\n\n        def update(id):\n            db.save(user)\n\n        def delete(id):\n            db.delete(user)\n\n        #endregion\n\nWhen a class like this is defined, its metaclass goes through the\nmethods and decorates them with ``@methodview``. This way, ``list()``\ngets ``@methodview('GET', ifnset=('id',))``, and ``get()`` gets\n``@methodview('GET', ifset=('id',))``.\n\n.. |Build Status| image:: https://api.travis-ci.org/kolypto/py-flask-jsontools.png?branch=master\n   :target: https://travis-ci.org/kolypto/py-flask-jsontools\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slippers/py-flask-jsontools", "keywords": "flask,json,sqlalchemy", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "flask-jsontools-slippers", "package_url": "https://pypi.org/project/flask-jsontools-slippers/", "platform": "any", "project_url": "https://pypi.org/project/flask-jsontools-slippers/", "project_urls": {"Homepage": "https://github.com/slippers/py-flask-jsontools"}, "release_url": "https://pypi.org/project/flask-jsontools-slippers/0.1.6/", "requires_dist": ["click (==6.7)", "flask (==0.12.1)", "itsdangerous (==0.24)", "jinja2 (==2.9.6)", "markupsafe (==1.0)", "werkzeug (==0.12.1)"], "requires_python": "", "summary": "JSON API tools for Flask", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kolypto/py-flask-jsontools\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1df28e6375a99b92c0eea61d6a156d479fccdac0/68747470733a2f2f6170692e7472617669732d63692e6f72672f6b6f6c7970746f2f70792d666c61736b2d6a736f6e746f6f6c732e706e673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"flask-jsontools\">\n<h2>Flask JsonTools</h2>\n<p>JSON API tools for Flask</p>\n</div>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<ul>\n<li>View Utilities<ul>\n<li>@jsonapi<ul>\n<li>JsonResponse</li>\n<li>make_json_response()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>FlaskJsonClient</li>\n<li>Class-Based Views<ul>\n<li>MethodView</li>\n<li>RestfulView</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"view-utilities\">\n<h2>View Utilities</h2>\n<h2 id=\"jsonapi\"><span class=\"section-subtitle\">@jsonapi</span></h2>\n<p>Decorate a view function that talks JSON.</p>\n<p>Such function can return:</p>\n<ul>\n<li>tuples of <tt>(response, status[, headers])</tt>: to set custom status\ncode and optionally - headers</li>\n<li>Instances of <tt>`JsonResponse</tt> &lt;#jsonresponse&gt;`__</li>\n<li>The result of helper function\n<tt>`make_json_response</tt> &lt;#make_json_response&gt;`__</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">jsonapi</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/users'</span><span class=\"p\">)</span>\n<span class=\"nd\">@jsonapi</span>\n<span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'login'</span><span class=\"p\">:</span> <span class=\"s1\">'kolypto'</span><span class=\"p\">},</span>\n        <span class=\"c1\">#...</span>\n    <span class=\"p\">]</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/user/&lt;int:id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'DELETE'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_user</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'Access denied'</span><span class=\"p\">},</span> <span class=\"mi\">403</span>\n</pre>\n<div id=\"jsonresponse\">\n<h3>JsonResponse</h3>\n<p>Extends\n<tt>`flask.Request</tt> &lt;<a href=\"http://flask.pocoo.org/docs/api/#incoming-request-data\" rel=\"nofollow\">http://flask.pocoo.org/docs/api/#incoming-request-data</a>&gt;`__\nand encodes the response with JSON. Views decorated with\n<tt>`@jsonapi</tt> &lt;#jsonapi&gt;`__ return these objects.</p>\n<p>Arguments:</p>\n<ul>\n<li><tt>response</tt>: response data</li>\n<li><tt>status</tt>: status code. Optional, defaults to 200</li>\n<li><tt>headers</tt>: additional headers dict. Optional.</li>\n<li><tt>**kwargs</tt>: additional argumets for\n<tt>`Response</tt> &lt;<a href=\"http://flask.pocoo.org/docs/api/#response-objects\" rel=\"nofollow\">http://flask.pocoo.org/docs/api/#response-objects</a>&gt;`__</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>preprocess_response_data(response)</tt>: Override to get custom\nresponse behavior.</li>\n<li><tt>get_json()</tt>: Get the original response data.</li>\n<li><tt>__getitem__(key)</tt>: Get an item from the response data</li>\n</ul>\n<p>The extra methods allows to reuse views:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">jsonapi</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/user'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"nd\">@jsonapi</span>\n<span class=\"k\">def</span> <span class=\"nf\">list_users</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'second'</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/user/&lt;int:id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"nd\">@jsonapi</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">list_users</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_json</span><span class=\"p\">()[</span><span class=\"nb\">id</span><span class=\"p\">]</span>  <span class=\"c1\"># Long form</span>\n    <span class=\"k\">return</span> <span class=\"n\">list_users</span><span class=\"p\">()[</span><span class=\"nb\">id</span><span class=\"p\">]</span>  <span class=\"c1\"># Shortcut</span>\n</pre>\n</div>\n<div id=\"make-json-response\">\n<h3>make_json_response()</h3>\n<p>Helper function that actually preprocesses view return value into\n<tt>`JsonResponse</tt> &lt;#jsonresponse&gt;`__.</p>\n<p>Accepts <tt>rv</tt> as any of:</p>\n<ul>\n<li>tuple of <tt>(response, status[, headers])</tt></li>\n<li>Object to encode as JSON</li>\n</ul>\n</div>\n</div>\n<div id=\"flaskjsonclient\">\n<h2>FlaskJsonClient</h2>\n<p>FlaskJsonClient is a JSON-aware test client: it can post JSON and parse\nJSON responses into <tt>`JsonResponse</tt> &lt;#jsonresponse&gt;`__.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">myapplication</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskJsonClient</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">JsonTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client_class</span> <span class=\"o\">=</span> <span class=\"n\">FlaskJsonClient</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">testCreateUser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">test_client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n            <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/user/'</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'kolypto'</span><span class=\"p\">})</span>\n            <span class=\"c1\"># rv is JsonResponse</span>\n            <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n            <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">get_json</span><span class=\"p\">()[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span>  <span class=\"c1\"># Long form for the previous</span>\n            <span class=\"n\">rv</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span>  <span class=\"c1\"># Shortcut for the previous</span>\n</pre>\n</div>\n<div id=\"formatting-utils\">\n<h2>Formatting Utils</h2>\n<div id=\"dynamicjsonencoder\">\n<h3>DynamicJSONEncoder</h3>\n<p>In python, de-facto standard for encoding objects of custom classes is\nthe <tt>__json__()</tt> method which returns the representation of the\nobject.</p>\n<p><tt>DynamicJSONEncoder</tt> is the implementation of this protocol: if an\nobject has the <tt>__json__()</tt> method, its result if used for the\nrepresentation.</p>\n<p>You\u2019ll definitely want to subclass it to support other types, e.g. dates\nand times:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">DynamicJSONEncoder</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ApiJSONEncoder</span><span class=\"p\">(</span><span class=\"n\">DynamicJSONEncoder</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Custom formats</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Fallback</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">DynamicJSONEncoder</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</pre>\n<p>Now, just install the encoder to your Flask:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">json_encoder</span> <span class=\"o\">=</span> <span class=\"n\">DynamicJSONEncoder</span>\n</pre>\n</div>\n<div id=\"jsonserializablebase\">\n<h3>JsonSerializableBase</h3>\n<p>Serializing SqlAlchemy models to JSON is a headache: if an attribute is\npresent on an instance, this does not mean it\u2019s loaded from the\ndatabase.</p>\n<p><tt>JsonSerializableBase</tt> is a mixin for SqlAlchemy Declarative Base that\nadds a magic <tt>__json__()</tt> method, compatible with\n<tt>`DynamicJSONEncoder</tt> &lt;#dynamicjsonencoder&gt;`__. When serializing, it\nmakes sure that entity serialization will <em>never</em> issue additional\nrequests.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.ext.declarative</span> <span class=\"kn\">import</span> <span class=\"n\">declarative_base</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">JsonSerializableBase</span>\n\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">declarative_base</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">JsonSerializableBase</span><span class=\"p\">,))</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"c1\">#...</span>\n</pre>\n<p>Now, you can safely respond with SqlAlchemy models in your JSON views,\nand jsontools will handle the rest :)</p>\n</div>\n</div>\n<div id=\"class-based-views\">\n<h2>Class-Based Views</h2>\n<p>Module <tt>flask.ext.jsontools.views</tt> contains a couple of classes that\nallow to build class-based views which dispatch to different methods.</p>\n<p>In contrast to\n<a href=\"http://flask.pocoo.org/docs/api/#flask.views.MethodView\" rel=\"nofollow\">MethodView</a>,\nthis gives much higher flexibility.</p>\n<div id=\"methodview\">\n<h3>MethodView</h3>\n<p>Using <tt>MethodView</tt> class for methods, decorate them with\n<tt>@methodview()</tt>, which takes the following arguments:</p>\n<ul>\n<li><tt><span class=\"pre\">methods=()</span></tt>: Iterable of HTTP methods to use with this method.</li>\n<li><tt>ifnset=None</tt>: Conditional matching. List of route parameter names\nthat should <em>not</em> be set for this method to match.</li>\n<li><tt>ifset=None</tt>: Conditional matching. List of route parameter names\nthat should be set for this method to match.</li>\n</ul>\n<p>This allows to map HTTP methods to class methods, and in addition define\nwhen individual methods should match.</p>\n<p>Quick example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">jsonapi</span><span class=\"p\">,</span> <span class=\"n\">MethodView</span><span class=\"p\">,</span> <span class=\"n\">methodview</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserView</span><span class=\"p\">(</span><span class=\"n\">MethodView</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Canonical way to specify decorators for class-based views</span>\n    <span class=\"n\">decorators</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jsonapi</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n\n    <span class=\"nd\">@methodview</span>\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" List users \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@methodview</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Load a user by id \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n\n<span class=\"n\">userview</span> <span class=\"o\">=</span> <span class=\"n\">CrudView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_url_rule</span><span class=\"p\">(</span><span class=\"s1\">'/user/'</span><span class=\"p\">,</span> <span class=\"n\">view_func</span><span class=\"o\">=</span><span class=\"n\">userview</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_url_rule</span><span class=\"p\">(</span><span class=\"s1\">'/user/&lt;int:user_id&gt;'</span><span class=\"p\">,</span> <span class=\"n\">view_func</span><span class=\"o\">=</span><span class=\"n\">userview</span><span class=\"p\">)</span>\n</pre>\n<p>Now, <tt>GET</tt> HTTP method is routed to two different methods depending on\nconditions. Keep defining more methods to get good routing :)</p>\n<p>To simplify the last step of creating the view, there\u2019s a helper:</p>\n<pre><span class=\"n\">UserView</span><span class=\"o\">.</span><span class=\"n\">route_as_view</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'/user/'</span><span class=\"p\">,</span> <span class=\"s1\">'/user/&lt;int:user_id&gt;'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"restfulview\">\n<h3>RestfulView</h3>\n<p>Since <tt>MethodView</tt> is mostly useful to expose APIs over collections of\nentities, there is a RESTful helper which automatically decorates some\nspecial methods with <tt>@methodview</tt>.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>View method</th>\n<th>HTTP method</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>list()</td>\n<td>GET</td>\n<td><tt>/</tt></td>\n</tr>\n<tr><td>create()</td>\n<td>POST</td>\n<td><tt>/</tt></td>\n</tr>\n<tr><td>get()</td>\n<td>GET</td>\n<td><tt>/&lt;pk&gt;</tt></td>\n</tr>\n<tr><td>replace()</td>\n<td>PUT</td>\n<td><tt>/&lt;pk&gt;</tt></td>\n</tr>\n<tr><td>update()</td>\n<td>POST</td>\n<td><tt>/&lt;pk&gt;</tt></td>\n</tr>\n<tr><td>delete()</td>\n<td>DELETE</td>\n<td><tt>/&lt;pk&gt;</tt></td>\n</tr>\n</tbody>\n</table>\n<p>By subclassing <tt>RestfulView</tt> and implementing some of these methods,\nyou\u2019ll get a complete API endpoint with a single class.</p>\n<p>It\u2019s also required to define the list of primary key fields by defining\nthe <tt>primary_key</tt> property:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.jsontools</span> <span class=\"kn\">import</span> <span class=\"n\">jsonapi</span><span class=\"p\">,</span> <span class=\"n\">RestfulView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">RestfulView</span><span class=\"p\">):</span>\n    <span class=\"n\">decorators</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jsonapi</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n    <span class=\"n\">primary_key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,)</span>\n\n    <span class=\"c1\">#region Operation on the collection</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">():</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n\n    <span class=\"c1\">#endregion</span>\n\n    <span class=\"c1\">#region Operation on entities</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">replace</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#endregion</span>\n</pre>\n<p>When a class like this is defined, its metaclass goes through the\nmethods and decorates them with <tt>@methodview</tt>. This way, <tt>list()</tt>\ngets <tt><span class=\"pre\">@methodview('GET',</span> <span class=\"pre\">ifnset=('id',))</span></tt>, and <tt>get()</tt> gets\n<tt><span class=\"pre\">@methodview('GET',</span> <span class=\"pre\">ifset=('id',))</span></tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2899098, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "624d6da47fb8895f70a40060b782e25e", "sha256": "1a538418ebcaa0b2140a7eadae982158db92f84aec49dc2f48f5fb7533bd69f1"}, "downloads": -1, "filename": "flask_jsontools_slippers-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "624d6da47fb8895f70a40060b782e25e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20520, "upload_time": "2017-05-25T21:06:21", "upload_time_iso_8601": "2017-05-25T21:06:21.139955Z", "url": "https://files.pythonhosted.org/packages/6c/1d/12f5448d3543ab0dd0e90428aa6f8164ef79996a0e543ef7c4cc00bfd487/flask_jsontools_slippers-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fff1744de8106955cba1123e4e75897a", "sha256": "63717b875c7159ca4de6aec31bf203ccf8137edaaf0e5851f61093bfb231057b"}, "downloads": -1, "filename": "flask_jsontools_slippers-0.1.6.tar.gz", "has_sig": false, "md5_digest": "fff1744de8106955cba1123e4e75897a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19041, "upload_time": "2017-05-25T21:06:22", "upload_time_iso_8601": "2017-05-25T21:06:22.606445Z", "url": "https://files.pythonhosted.org/packages/3b/a7/154125c246c593bf4f6788a226fc82d1f45573c81a5130d5ae40376b05c8/flask_jsontools_slippers-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "624d6da47fb8895f70a40060b782e25e", "sha256": "1a538418ebcaa0b2140a7eadae982158db92f84aec49dc2f48f5fb7533bd69f1"}, "downloads": -1, "filename": "flask_jsontools_slippers-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "624d6da47fb8895f70a40060b782e25e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20520, "upload_time": "2017-05-25T21:06:21", "upload_time_iso_8601": "2017-05-25T21:06:21.139955Z", "url": "https://files.pythonhosted.org/packages/6c/1d/12f5448d3543ab0dd0e90428aa6f8164ef79996a0e543ef7c4cc00bfd487/flask_jsontools_slippers-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fff1744de8106955cba1123e4e75897a", "sha256": "63717b875c7159ca4de6aec31bf203ccf8137edaaf0e5851f61093bfb231057b"}, "downloads": -1, "filename": "flask_jsontools_slippers-0.1.6.tar.gz", "has_sig": false, "md5_digest": "fff1744de8106955cba1123e4e75897a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19041, "upload_time": "2017-05-25T21:06:22", "upload_time_iso_8601": "2017-05-25T21:06:22.606445Z", "url": "https://files.pythonhosted.org/packages/3b/a7/154125c246c593bf4f6788a226fc82d1f45573c81a5130d5ae40376b05c8/flask_jsontools_slippers-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:43 2020"}