{"info": {"author": "RocketReach", "author_email": "engineering@rocketreach.co", "bugtrack_url": null, "classifiers": [], "description": "# Getting Started\nThis is a simple Python binding for the RocketReach API (https://rocketreach.co/api).\n\n## Requirements\nPython 3.4+.\n\n## Installation\nYou can install this package using pip:\n\n```\n$ pip install rocketreach\n```\n\n## Testing\nIncludes a simple driver file, `main.py` which accepts 3 required arguments:\n 1. `-i <input csv>`\n 1. `-o <output csv>`\n 1. `-k <api key>`\n \n The input csv is a 2 column csv with name (column 1) and company (column 2).\n The script loads the csv and does a lookup on each row, writing the results to\n output csv. \n \n **Note that this will overwrite the output file if it exists**\n \n **Note this may charge the account associated with the API Key for any lookups incurred.**\n\nA sample csv is included in the sample directory. You can run it by\n```bash\n$ ./main.py -i sample/sample01.csv -o sample01_lookup_output.csv -k <YOUR API KEY HERE>\n```\n\n\n## Setup\nSign up for RocketReach at https://rocketreach.co/signup.\n\nDocumentation for the API and python bindings available at the official API documentation page: https://rocketreach.co/api.\n\n# Usage\n\n## Configuration\n\nProvide your api key and environment to get started. The default environment, production is usually sufficient to get started.\nIf you want to use the test key, leave the API key parameter blank or `None` and set the environment to Sandbox.\n\n```\nimport rocketreach\n\nconfig = rocketreach.GatewayConfig(None, rocketreach.GatewayEnvironment.sandbox)\nrr = rocketreach.Gateway(config)\nresult = rr.account.get()\nif result.is_success:\n    print(result.account)\n```\n\nOr use the short-hand arguments and use the default `GatewayConfig`:\n\n```\nimport rocketreach\nrr = rocketreach.Gateway(api_key='my-api-key')\n```\n\n## Searches\n\nAfter configuring your gateway perform RocketReach searches:\n\n```\nimport rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\ns = rr.person.search().filter(current_employer='Acme', current_title='CEO')\nresult = s.execute()\nfor person in result.people:\n    print(person)\n```\n\nTo paginate search queries, call the `params()` method and provide a `start` and/or `size`:\n```\nimport rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\ns = rr.person.search().filter(current_employer='Acme', current_title='CEO')\ns = s.params(start=11, size=25)\nresult = s.execute()\nfor person in result.people:\n    print(person)\n```\n\n## Lookups\n\nTo lookup a person, provide an `id` or `linkedin_url`. Note that not all people will have an `id`, so be sure\nto allow the flexibility to use either attribute. At least one is garuanteed to exist. After a succesful lookup,\na person is gauranteed to have an `id` which can be used to check the lookup progress via the `checkStatus()` method.\n\nBy default, the `lookup` method is blocking and will add the person to your account's lookups as well\nas poll `checkStatus` until the lookup has completed.\n```\nimport rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\nresult = rr.person.lookup(person_id=123)\nprint(result.person)\nresult = rr.person.lookup(linkedin_url='https://www.linkedin.com/in/john-doe-example')\nprint(result.person)\n```\n\n## Check Status\n\nIf you prefer not to block on lookups, pass `block=False` and use the `checkStatus` method manually.\nNote that RocketReach does not block the lookup API endpoint, instead the system will mark the lookup as\nadded to your account and will begin searching for contact information in the background. The system may\nfinish the lookup inline in some instances, but in the majority of cases the person status will be incomplete.\nUsing `checkStatus` is the easiest way to find when the person's contact information has been found.\n\nWhen calling `checkStatus` keep in mind that tight loops are best avoided, and may result in a rate limiting\nerror, indicated by a 429 status code. If a request fails with that status code, you can check the error\nmessage to see how long to wait for your next request -- usually just a few seconds.\n\n```\nimport rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\nresult = rr.person.lookup(person_id=123, block=False)\nwhile result.status != PersonLookupStatus.complete:\n    result = rr.person.check_status([result.person.id])\n    if not result.is_success and result.response.status_code == 429:\n        time.sleep(1)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://rocketreach.co", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rocketreach", "package_url": "https://pypi.org/project/rocketreach/", "platform": "", "project_url": "https://pypi.org/project/rocketreach/", "project_urls": {"Documentation": "https://rocketreach.co/api", "Homepage": "https://rocketreach.co", "Source Code": "https://github.com/rocketreach/rocketreach_python"}, "release_url": "https://pypi.org/project/rocketreach/2.1.0/", "requires_dist": null, "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Python bindings for RocketReach API", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Getting Started</h1>\n<p>This is a simple Python binding for the RocketReach API (<a href=\"https://rocketreach.co/api\" rel=\"nofollow\">https://rocketreach.co/api</a>).</p>\n<h2>Requirements</h2>\n<p>Python 3.4+.</p>\n<h2>Installation</h2>\n<p>You can install this package using pip:</p>\n<pre><code>$ pip install rocketreach\n</code></pre>\n<h2>Testing</h2>\n<p>Includes a simple driver file, <code>main.py</code> which accepts 3 required arguments:</p>\n<ol>\n<li><code>-i &lt;input csv&gt;</code></li>\n<li><code>-o &lt;output csv&gt;</code></li>\n<li><code>-k &lt;api key&gt;</code></li>\n</ol>\n<p>The input csv is a 2 column csv with name (column 1) and company (column 2).\nThe script loads the csv and does a lookup on each row, writing the results to\noutput csv.</p>\n<p><strong>Note that this will overwrite the output file if it exists</strong></p>\n<p><strong>Note this may charge the account associated with the API Key for any lookups incurred.</strong></p>\n<p>A sample csv is included in the sample directory. You can run it by</p>\n<pre>$ ./main.py -i sample/sample01.csv -o sample01_lookup_output.csv -k &lt;YOUR API KEY HERE&gt;\n</pre>\n<h2>Setup</h2>\n<p>Sign up for RocketReach at <a href=\"https://rocketreach.co/signup\" rel=\"nofollow\">https://rocketreach.co/signup</a>.</p>\n<p>Documentation for the API and python bindings available at the official API documentation page: <a href=\"https://rocketreach.co/api\" rel=\"nofollow\">https://rocketreach.co/api</a>.</p>\n<h1>Usage</h1>\n<h2>Configuration</h2>\n<p>Provide your api key and environment to get started. The default environment, production is usually sufficient to get started.\nIf you want to use the test key, leave the API key parameter blank or <code>None</code> and set the environment to Sandbox.</p>\n<pre><code>import rocketreach\n\nconfig = rocketreach.GatewayConfig(None, rocketreach.GatewayEnvironment.sandbox)\nrr = rocketreach.Gateway(config)\nresult = rr.account.get()\nif result.is_success:\n    print(result.account)\n</code></pre>\n<p>Or use the short-hand arguments and use the default <code>GatewayConfig</code>:</p>\n<pre><code>import rocketreach\nrr = rocketreach.Gateway(api_key='my-api-key')\n</code></pre>\n<h2>Searches</h2>\n<p>After configuring your gateway perform RocketReach searches:</p>\n<pre><code>import rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\ns = rr.person.search().filter(current_employer='Acme', current_title='CEO')\nresult = s.execute()\nfor person in result.people:\n    print(person)\n</code></pre>\n<p>To paginate search queries, call the <code>params()</code> method and provide a <code>start</code> and/or <code>size</code>:</p>\n<pre><code>import rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\ns = rr.person.search().filter(current_employer='Acme', current_title='CEO')\ns = s.params(start=11, size=25)\nresult = s.execute()\nfor person in result.people:\n    print(person)\n</code></pre>\n<h2>Lookups</h2>\n<p>To lookup a person, provide an <code>id</code> or <code>linkedin_url</code>. Note that not all people will have an <code>id</code>, so be sure\nto allow the flexibility to use either attribute. At least one is garuanteed to exist. After a succesful lookup,\na person is gauranteed to have an <code>id</code> which can be used to check the lookup progress via the <code>checkStatus()</code> method.</p>\n<p>By default, the <code>lookup</code> method is blocking and will add the person to your account's lookups as well\nas poll <code>checkStatus</code> until the lookup has completed.</p>\n<pre><code>import rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\nresult = rr.person.lookup(person_id=123)\nprint(result.person)\nresult = rr.person.lookup(linkedin_url='https://www.linkedin.com/in/john-doe-example')\nprint(result.person)\n</code></pre>\n<h2>Check Status</h2>\n<p>If you prefer not to block on lookups, pass <code>block=False</code> and use the <code>checkStatus</code> method manually.\nNote that RocketReach does not block the lookup API endpoint, instead the system will mark the lookup as\nadded to your account and will begin searching for contact information in the background. The system may\nfinish the lookup inline in some instances, but in the majority of cases the person status will be incomplete.\nUsing <code>checkStatus</code> is the easiest way to find when the person's contact information has been found.</p>\n<p>When calling <code>checkStatus</code> keep in mind that tight loops are best avoided, and may result in a rate limiting\nerror, indicated by a 429 status code. If a request fails with that status code, you can check the error\nmessage to see how long to wait for your next request -- usually just a few seconds.</p>\n<pre><code>import rocketreach\n\nrr = rocketreach.Gateway(rocketreach.GatewayConfig('api-key'))\nresult = rr.person.lookup(person_id=123, block=False)\nwhile result.status != PersonLookupStatus.complete:\n    result = rr.person.check_status([result.person.id])\n    if not result.is_success and result.response.status_code == 429:\n        time.sleep(1)\n</code></pre>\n\n          </div>"}, "last_serial": 6807824, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "335aee0e2aaf9a976849f578f0aa426b", "sha256": "263567b5b26b9d2b71b80cee7508e00e2fd7586ac6597d5ec7ac3914c2c63c49"}, "downloads": -1, "filename": "rocketreach-2.0.1.tar.gz", "has_sig": false, "md5_digest": "335aee0e2aaf9a976849f578f0aa426b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 7637, "upload_time": "2019-11-28T05:42:37", "upload_time_iso_8601": "2019-11-28T05:42:37.815814Z", "url": "https://files.pythonhosted.org/packages/3f/00/7e7bc3ac9c9aacd6488b42655372398d3a72b4b2091a3db96da5932775f4/rocketreach-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "ae5fa360bfd44f70890c4681e235df8e", "sha256": "0d9a6017b523c17fb04931490ca3f253171b56a46f22d07324af5d9addcea8de"}, "downloads": -1, "filename": "rocketreach-2.0.2.tar.gz", "has_sig": false, "md5_digest": "ae5fa360bfd44f70890c4681e235df8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 7656, "upload_time": "2019-11-28T06:23:47", "upload_time_iso_8601": "2019-11-28T06:23:47.655802Z", "url": "https://files.pythonhosted.org/packages/6f/36/9018763f1359f98b44cb86ff0970b1d96f89de611d9b589047542ed4bc02/rocketreach-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "cfa6a136499e36cf501b4cfacce0625f", "sha256": "cf0f932d4ec0dab9ed60227119ad60e1b07941a8d8c75dfc7c15060b4384d82b"}, "downloads": -1, "filename": "rocketreach-2.0.3.tar.gz", "has_sig": false, "md5_digest": "cfa6a136499e36cf501b4cfacce0625f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8622, "upload_time": "2019-11-28T18:51:39", "upload_time_iso_8601": "2019-11-28T18:51:39.699063Z", "url": "https://files.pythonhosted.org/packages/df/97/b8ba621a5457a9f5632080451bb79ab0fddc416838108738b3eace1a39d3/rocketreach-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "eabbf00e17aff39af7f78d54f935ee21", "sha256": "85509b22f8d47e9888b91b71a15d37294986cedc3744922a3e3915c6d0b3e9a4"}, "downloads": -1, "filename": "rocketreach-2.0.4.tar.gz", "has_sig": false, "md5_digest": "eabbf00e17aff39af7f78d54f935ee21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8669, "upload_time": "2019-11-28T19:28:36", "upload_time_iso_8601": "2019-11-28T19:28:36.256983Z", "url": "https://files.pythonhosted.org/packages/a5/da/1cb693088cbe8f786c155ec7911b8150207306181e4b0ecb89ae04491e4d/rocketreach-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "637ba0a54a4f68f81365121692af24fb", "sha256": "22e3c72ae7904fee2516849369e84867df76b9230fd39c615851faeacb85fa0f"}, "downloads": -1, "filename": "rocketreach-2.0.5-py3.6.egg", "has_sig": false, "md5_digest": "637ba0a54a4f68f81365121692af24fb", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9589, "upload_time": "2020-03-13T18:28:00", "upload_time_iso_8601": "2020-03-13T18:28:00.871260Z", "url": "https://files.pythonhosted.org/packages/f7/40/6885b5764fe4150050b254b37d9a1a383d5f01e7e1612b8668ec8b7da269/rocketreach-2.0.5-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8607ea4a913c12c443ead7688797b3e0", "sha256": "0203e1f69622bef26e38329e83edd360ed6720a456195e21c3ea3973beb73490"}, "downloads": -1, "filename": "rocketreach-2.0.5.tar.gz", "has_sig": false, "md5_digest": "8607ea4a913c12c443ead7688797b3e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8599, "upload_time": "2019-12-04T01:31:10", "upload_time_iso_8601": "2019-12-04T01:31:10.302454Z", "url": "https://files.pythonhosted.org/packages/42/b9/88775eef37b7c186f7f061ff3166892fb317fa5df471a9bf61d636c94012/rocketreach-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "b8c74143ab8c0221ab15d28d4d50aed3", "sha256": "a65754dd88833570a03a3155481b08db74782a5c739bf047e1b34a5d3a66291d"}, "downloads": -1, "filename": "rocketreach-2.0.6-py3.6.egg", "has_sig": false, "md5_digest": "b8c74143ab8c0221ab15d28d4d50aed3", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9589, "upload_time": "2020-03-13T18:28:01", "upload_time_iso_8601": "2020-03-13T18:28:01.961694Z", "url": "https://files.pythonhosted.org/packages/40/19/1faa2612ba68f92f50b7659538596d9b2ef0450bc8904ad610d15bdb2d74/rocketreach-2.0.6-py3.6.egg", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "0364954423afc2181eb1f528e8e8ed94", "sha256": "228da133961341bc1c85971b35d3e3a5b881294ddd20edd9b9be8e983c10c24b"}, "downloads": -1, "filename": "rocketreach-2.1.0-py3.6.egg", "has_sig": false, "md5_digest": "0364954423afc2181eb1f528e8e8ed94", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9719, "upload_time": "2020-03-13T18:28:03", "upload_time_iso_8601": "2020-03-13T18:28:03.030579Z", "url": "https://files.pythonhosted.org/packages/40/e1/5c716ccf81571845ceaeaae91db79ea9e5c25b04c0f10ece6eccb3967495/rocketreach-2.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcf823cc2ab3d8d482d8cccf2db725e4", "sha256": "a8c3cdc0a10cec3bef3b600661519696a7c508884c2e32f9aacacada83dcd820"}, "downloads": -1, "filename": "rocketreach-2.1.0.tar.gz", "has_sig": false, "md5_digest": "dcf823cc2ab3d8d482d8cccf2db725e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8254, "upload_time": "2020-03-13T18:28:04", "upload_time_iso_8601": "2020-03-13T18:28:04.190379Z", "url": "https://files.pythonhosted.org/packages/20/9d/5ba988d0b2f94a19fb8f86ae87ef1a2eb79b3fd7da7cce00998b7051d57f/rocketreach-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0364954423afc2181eb1f528e8e8ed94", "sha256": "228da133961341bc1c85971b35d3e3a5b881294ddd20edd9b9be8e983c10c24b"}, "downloads": -1, "filename": "rocketreach-2.1.0-py3.6.egg", "has_sig": false, "md5_digest": "0364954423afc2181eb1f528e8e8ed94", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9719, "upload_time": "2020-03-13T18:28:03", "upload_time_iso_8601": "2020-03-13T18:28:03.030579Z", "url": "https://files.pythonhosted.org/packages/40/e1/5c716ccf81571845ceaeaae91db79ea9e5c25b04c0f10ece6eccb3967495/rocketreach-2.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcf823cc2ab3d8d482d8cccf2db725e4", "sha256": "a8c3cdc0a10cec3bef3b600661519696a7c508884c2e32f9aacacada83dcd820"}, "downloads": -1, "filename": "rocketreach-2.1.0.tar.gz", "has_sig": false, "md5_digest": "dcf823cc2ab3d8d482d8cccf2db725e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 8254, "upload_time": "2020-03-13T18:28:04", "upload_time_iso_8601": "2020-03-13T18:28:04.190379Z", "url": "https://files.pythonhosted.org/packages/20/9d/5ba988d0b2f94a19fb8f86ae87ef1a2eb79b3fd7da7cce00998b7051d57f/rocketreach-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:33 2020"}