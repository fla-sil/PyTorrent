{"info": {"author": "Alexey Kachayev", "author_email": "kachayev@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Fn.py: enjoy FP in Python\n=========================\n\nDespite the fact that Python is not pure-functional programming\nlanguage, it's multi-paradigm PL and it gives you enough freedom to take\ncredits from functional programming approach. There are theoretical and\npractical advantages to the functional style:\n\n-  Formal provability\n-  Modularity\n-  Composability\n-  Ease of debugging and testing\n\n``Fn.py`` library provides you with missing \"batteries\" to get maximum\nfrom functional approach even in mostly-imperative program.\n\nMore about functional approach from my Pycon UA 2012 talks: `Functional\nProgramming with\nPython <http://kachayev.github.com/talks/uapycon2012/index.html>`_.\n\nScala-style lambdas definition\n------------------------------\n\n.. code-block:: python\n\n    from fn import _\n    from fn.op import zipwith\n    from itertools import repeat\n\n    assert list(map(_ * 2, range(5))) == [0,2,4,6,8]\n    assert list(filter(_ < 10, [9,10,11])) == [9]\n    assert list(zipwith(_ + _)([0,1,2], repeat(10))) == [10,11,12]\n\nMore examples of using ``_`` you can find in `test\ncases <https://github.com/kachayev/fn.py/blob/master/tests.py>`_\ndeclaration (attributes resolving, method calling, slicing).\n\n**Attention!** If you work in interactive python shell, your should remember that ``_`` means \"latest output\" and you'll get unpredictable results. In this case, you can do something like ``from fn import _ as X`` (and then write functions like ``X * 2``).\n\nIf you are not sure, what your function is going to do, you can print it:\n\n.. code-block:: python\n\n    from fn import _\n\n    print (_ + 2) # \"(x1) => (x1 + 2)\"\n    print (_ + _ * _) # \"(x1, x2, x3) => (x1 + (x2 * x3))\"\n\n``_`` will fail with ``ArityError`` (``TypeError`` subclass) on inaccurate number of passed arguments. This is one more restrictions to ensure that you did everything right: \n\n.. code-block:: python\n\n    >>> from fn import _\n    >>> (_ + _)(1)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"fn/underscore.py\", line 82, in __call__\n        raise ArityError(self, self._arity, len(args))\n    fn.underscore.ArityError: (_ + _) expected 2 arguments, got 1\n\n\nPersistent data structures\n--------------------------\n\n**Attention:** Persistent data structures are under active development.\n\nPersistent data structure is a data structure that always preserves the previous version of itself when it is modified (more formal information on `Wikipedia <http://goo.gl/8VveOH>`_). Each operation with such data structure yields a new updated structure instead of in-place modification (all previous versions are potentially available or GC-ed when possible).\n\nLets take a quick look:\n\n.. code-block:: python\n\n    >>> from fn.immutable import SkewHeap\n    >>> s1 = SkewHeap(10)\n    >>> s2 = s1.insert(20)\n    >>> s2\n    <fn.immutable.heap.SkewHeap object at 0x10b14c050>\n    >>> s3 = s2.insert(30)\n    >>> s3\n    <fn.immutable.heap.SkewHeap object at 0x10b14c158> # <-- other object\n    >>> s3.extract()\n    (10, <fn.immutable.heap.SkewHeap object at 0x10b14c050>)\n    >>> s3.extract() # <-- s3 isn't changed\n    (10, <fn.immutable.heap.SkewHeap object at 0x10b11c052>)\n\nIf you think I'm totally crazy and it will work despairingly slow, just give it 5 minutes. Relax, take a deep breath and read about few techniques that make persistent data structures fast and efficient: `structural sharing <http://en.wikipedia.org/wiki/Persistent_data_structure#Examples_of_persistent_data_structures>`_ and `path copying <http://en.wikipedia.org/wiki/Persistent_data_structure#Path_Copying>`_.\n\nTo see how it works in \"pictures\", you can check great slides from Zach Allaun's talk (StrangeLoop 2013): `\"Functional Vectors, Maps And Sets In Julia\" <http://goo.gl/Cp1Qsq>`_.\n\nAnd, if you are brave enough, go and read:\n\n- Chris Okasaki, \"Purely Functional Data Structures\" (`Amazon <http://goo.gl/c7ptkk>`_)\n- Fethi Rabhi and Guy Lapalme, \"Algorithms: A Functional Programming Approach\" (`Amazon <http://goo.gl/00BxTO>`_)\n\nAvailable immutable data structures in ``fn.immutable`` module:\n\n- ``LinkedList``: most \"obvious\" persistent data structure, used as building block for other list-based structures (stack, queue)\n- ``Stack``: wraps linked list implementation with well-known pop/push API\n- ``Queue``: uses two linked lists and lazy copy to provide O(1) enqueue and dequeue operations\n- ``Deque`` (in progress): `\"Confluently Persistent Deques via Data\n  Structural Bootstrapping\" <http://goo.gl/vVTzx3>`_\n- ``Deque`` based on ``FingerTree`` data structure (see more information below)\n- ``Vector``: O(log32(n)) access to elements by index (which is near-O(1) for reasonable vector size), implementation is based on ``BitmappedTrie``, almost drop-in replacement for built-in Python ``list``\n- ``SkewHeap``: self-adjusting heap implemented as a binary tree with specific branching model, uses heap merge as basic operation, more information - `\"Self-adjusting heaps\" <http://goo.gl/R1PZME>`_\n- ``PairingHeap``: `\"The Pairing-Heap: A New Form of Self-Adjusting Heap\" <http://goo.gl/aiVtPH>`_\n- ``Dict`` (in progress): persistent hash map implementation based on ``BitmappedTrie``\n- ``FingerTree`` (in progress): `\"Finger Trees: A Simple General-purpose Data Structure\" <http://goo.gl/Bzo0df>`_\n\nUse appropriate doc strings to get more information about each data structure as well as sample code.\n\nTo get more clear vision of how persistent heaps work (``SkewHeap`` and ``PairingHeap``), you can look at slides from my talk `\"Union-based heaps\" <http://goo.gl/VMgdG2>`_ (with analyzed data structures definitions in Python and Haskell).\n\n**Note.** Most functional languages use persistent data structures as basic building blocks, well-known examples are Clojure, Haskell and Scala. Clojure community puts much effort to popularize programming based on the idea of data immutability. There are few amazing talk given by Rich Hickey (creator of Clojure), you can check them to find answers on both questions \"How?\" and \"Why?\":\n\n- `\"The Value of Values\" <http://goo.gl/137UG5>`_\n- `\"Persistent Data Structures and Managed References\" <http://goo.gl/M3vZ7E>`_\n\nStreams and infinite sequences declaration\n------------------------------------------\n\nLazy-evaluated Scala-style streams. Basic idea: evaluate each new\nelement \"on demand\" and share calculated elements between all created\niterators. ``Stream`` object supports ``<<`` operator that means pushing\nnew elements when it's necessary.\n\nSimplest cases:\n\n.. code-block:: python\n\n    from fn import Stream\n\n    s = Stream() << [1,2,3,4,5]\n    assert list(s) == [1,2,3,4,5]\n    assert s[1] == 2\n    assert list(s[0:2]) == [1,2]\n\n    s = Stream() << range(6) << [6,7]\n    assert list(s) == [0,1,2,3,4,5,6,7]\n\n    def gen():\n        yield 1\n        yield 2\n        yield 3\n\n    s = Stream() << gen << (4,5)\n    assert list(s) == [1,2,3,4,5]\n\nLazy-evaluated stream is useful for infinite sequences, i.e. fibonacci\nsequence can be calculated as:\n\n.. code-block:: python\n\n    from fn import Stream\n    from fn.iters import take, drop, map\n    from operator import add\n\n    f = Stream()\n    fib = f << [0, 1] << map(add, f, drop(1, f))\n\n    assert list(take(10, fib)) == [0,1,1,2,3,5,8,13,21,34]\n    assert fib[20] == 6765\n    assert list(fib[30:35]) == [832040,1346269,2178309,3524578,5702887]\n\nTrampolines decorator\n---------------------\n\n``fn.recur.tco`` is a workaround for dealing with TCO without heavy stack utilization. Let's start from simple example of recursive factorial calculation:\n\n.. code-block:: python\n\n    def fact(n):\n        if n == 0: return 1\n        return n * fact(n-1)\n\nThis variant works, but it's really ugly. Why? It will utilize memory too heavy cause of recursive storing all previous values to calculate final result. If you will execute this function with big ``n`` (more then ``sys.getrecursionlimit()``) CPython will fail with \n\n.. code-block:: python\n\n    >>> import sys\n    >>> fact(sys.getrecursionlimit() * 2)\n    ... many many lines of stacktrace ...\n    RuntimeError: maximum recursion depth exceeded\n\nWhich is good, cause it prevents you from terrible mistakes in your code.\n\nHow can we optimize this solution? Answer is simple, lets transform function to use tail call:\n\n.. code-block:: python\n\n    def fact(n, acc=1):\n        if n == 0: return acc\n        return fact(n-1, acc*n)\n\nWhy this variant is better? Cause you don't need to remember previous values to calculate final result. More about `tail call optimization <http://en.wikipedia.org/wiki/Tail_call>`_ on Wikipedia. But... Python interpreter will execute this function the same way as previous one, so you won't win anything.\n\n``fn.recur.tco`` gives you mechanism to write \"optimized a bit\" tail call recursion (using \"trampoline\" approach):\n\n.. code-block:: python\n\n    from fn import recur\n\n    @recur.tco\n    def fact(n, acc=1):\n        if n == 0: return False, acc\n        return True, (n-1, acc*n)\n\n``@recur.tco`` is a decorator that execute your function in ``while`` loop and check output: \n\n- ``(False, result)`` means that we finished \n- ``(True, args, kwargs)`` means that we need to call function again with other arguments\n- ``(func, args, kwargs)`` to switch function to be executed inside while loop\n\nThe last variant is really useful, when you need to switch callable inside evaluation loop. Good example for such situation is recursive detection if given number is odd or even:\n\n.. code-block:: python\n\n    >>> from fn import recur\n    >>> @recur.tco\n    ... def even(x):\n    ...     if x == 0: return False, True\n    ...     return odd, (x-1,)\n    ... \n    >>> @recur.tco\n    ... def odd(x):\n    ...     if x == 0: return False, False\n    ...     return even, (x-1,)\n    ... \n    >>> print even(100000)\n    True\n\n**Attention:** be careful with mutable/immutable data structures processing.\n\nItertools recipes\n-----------------\n\n``fn.uniform`` provides you with \"unification\"\nof lazy functionality for few functions to work the same way in Python\n2+/3+:\n\n-  ``map`` (returns ``itertools.imap`` in Python 2+)\n-  ``filter`` (returns ``itertools.ifilter`` in Python 2+)\n-  ``reduce`` (returns ``functools.reduce`` in Python 3+)\n-  ``zip`` (returns ``itertools.izip`` in Python 2+)\n-  ``range`` (returns ``xrange`` in Python 2+)\n-  ``filterfalse`` (returns ``itertools.ifilterfalse`` in Python 2+)\n-  ``zip_longest`` (returns ``itertools.izip_longest`` in Python 2+)\n-  ``accumulate`` (backported to Python < 3.3)\n\n``fn.iters`` is high-level recipes to work with iterators. Most\nof them taken from `Python\ndocs <http://docs.python.org/2.7/library/itertools.html#itertools.product>`_\nand adopted to work both with Python 2+/3+. Such recipes as ``drop``,\n``takelast``, ``droplast``, ``splitat``, ``splitby`` I have already\nsubmitted as `docs patch <http://bugs.python.org/issue16774>`_ which is\nreview status just now.\n\n-  ``take``, ``drop``\n-  ``takelast``, ``droplast``\n-  ``head`` (alias: ``first``), ``tail`` (alias: ``rest``)\n-  ``second``, ``ffirst``\n-  ``compact``, ``reject``\n-  ``iterate``\n-  ``consume``\n-  ``nth``\n-  ``padnone``, ``ncycles``\n-  ``repeatfunc``\n-  ``grouper``, ``powerset``, ``pairwise``\n-  ``roundrobin``\n-  ``partition``, ``splitat``, ``splitby``\n-  ``flatten``\n-  ``iter_except``\n\nMore information about use cases you can find in docstrings for each\nfunction in `source\ncode <https://github.com/kachayev/fn.py/blob/master/fn/iters.py>`__ and\nin `test\ncases <https://github.com/kachayev/fn.py/blob/master/tests.py>`_.\n\nHigh-level operations with functions\n------------------------------------\n\n``fn.F`` is a useful function wrapper to provide easy-to-use partial\napplication and functions composition.\n\n.. code-block:: python\n\n    from fn import F, _\n    from operator import add, mul\n\n    # F(f, *args) means partial application \n    # same as functools.partial but returns fn.F instance\n    assert F(add, 1)(10) == 11\n\n    # F << F means functions composition,\n    # so (F(f) << g)(x) == f(g(x))\n    f = F(add, 1) << F(mul, 100)\n    assert list(map(f, [0, 1, 2])) == [1, 101, 201]\n    assert list(map(F() << str << (_ ** 2) << (_ + 1), range(3))) == [\"1\", \"4\", \"9\"]\n\nIt also give you move readable in many cases \"pipe\" notation to deal with functions composition:\n\n.. code-block:: python\n\n    from fn import F, _\n    from fn.iters import filter, range\n\n    func = F() >> (filter, _ < 6) >> sum\n    assert func(range(10)) == 15\n\nYou can find more examples for compositions usage in ``fn._``\nimplementation `source\ncode <https://github.com/kachayev/fn.py/blob/master/fn/underscore.py>`__.\n\n``fn.op.apply`` executes given function with given positional arguments\nin list (or any other iterable). ``fn.op.flip`` returns you function\nthat will reverse arguments order before apply.\n\n.. code-block:: python\n\n    from fn.op import apply, flip\n    from operator import add, sub\n\n    assert apply(add, [1, 2]) == 3\n    assert flip(sub)(20,10) == -10\n    assert list(map(apply, [add, mul], [(1,2), (10,20)])) == [3, 200]\n\n``fn.op.foldl`` and ``fn.op.foldr`` are folding operators. Each accepts function with arity 2 and returns function that can be used to reduce iterable to scalar: from left-to-right and from right-to-left in case of ``foldl`` and ``foldr`` respectively. \n\n.. code-block:: python\n\n    from fn import op, _\n\n    folder = op.foldr(_ * _, 1)\n    assert 6 == op.foldl(_ + _)([1,2,3])\n    assert 6 == folder([1,2,3])\n\nUse case specific for right-side folding is:\n\n.. code-block:: python\n    \n    from fn.op import foldr, call \n\n    assert 100 == foldr(call, 0 )([lambda s: s**2, lambda k: k+10])\n    assert 400 == foldr(call, 10)([lambda s: s**2, lambda k: k+10])\n\n\nFunction currying\n-----------------\n\n``fn.func.curried`` is a decorator for building curried functions, for example:\n\n.. code-block:: python\n\n    >>> from fn.func import curried\n    >>> @curried\n    ... def sum5(a, b, c, d, e):\n    ...     return a + b + c + d + e\n    ...\n    >>> sum5(1)(2)(3)(4)(5)\n    15\n    >>> sum5(1, 2, 3)(4, 5)\n    15\n\n\nFunctional style for error-handling\n-----------------------------------\n\n``fn.monad.Option`` represents optional values, each instance of ``Option`` can be either instance of ``Full`` or ``Empty``. It provides you with simple way to write long computation sequences and get rid of many ``if/else`` blocks. See usage examples below. \n\nAssume that you have ``Request`` class that gives you parameter value by its name. To get uppercase notation for non-empty striped value:\n\n.. code-block:: python\n\n    class Request(dict):\n        def parameter(self, name):\n            return self.get(name, None)\n\n    r = Request(testing=\"Fixed\", empty=\"   \")\n    param = r.parameter(\"testing\")\n    if param is None:\n        fixed = \"\"\n    else:\n        param = param.strip()\n        if len(param) == 0:\n            fixed = \"\"\n        else:\n            fixed = param.upper()\n\n\nHmm, looks ugly.. Update code with ``fn.monad.Option``:\n\n.. code-block:: python\n\n    from operator import methodcaller\n    from fn.monad import optionable\n\n    class Request(dict):\n        @optionable\n        def parameter(self, name):\n            return self.get(name, None)\n\n    r = Request(testing=\"Fixed\", empty=\"   \")\n    fixed = r.parameter(\"testing\")\n             .map(methodcaller(\"strip\"))\n             .filter(len)\n             .map(methodcaller(\"upper\"))\n             .get_or(\"\")\n\n``fn.monad.Option.or_call`` is good method for trying several variant to end computation. I.e. use have ``Request`` class with optional attributes ``type``, ``mimetype``, ``url``. You need to evaluate \"request type\" using at least one attribute:\n\n.. code-block:: python\n\n    from fn.monad import Option\n\n    request = dict(url=\"face.png\", mimetype=\"PNG\")\n    tp = Option \\\n            .from_value(request.get(\"type\", None)) \\ # check \"type\" key first\n            .or_call(from_mimetype, request) \\ # or.. check \"mimetype\" key\n            .or_call(from_extension, request) \\ # or... get \"url\" and check extension\n            .get_or(\"application/undefined\")\n\n\nInstallation\n------------\n\nTo install ``fn.py``, simply:\n\n.. code-block:: console\n\n    $ pip install fn\n\nOr, if you absolutely must:\n\n.. code-block:: console\n\n    $ easy_install fn\n\nYou can also build library from source\n\n.. code-block:: console\n\n    $ git clone https://github.com/kachayev/fn.py.git\n    $ cd fn.py\n    $ python setup.py install\n\nWork in progress\n----------------\n\n\"Roadmap\":\n\n- ``fn.monad.Either`` to deal with error logging \n-  C-accelerator for most modules\n\nIdeas to think about:\n\n-  Scala-style for-yield loop to simplify long map/filter blocks\n\nContribute\n----------\n\n1. Check for open issues or open a fresh issue to start a discussion\n   around a feature idea or a bug.\n2. Fork the repository on Github to start making your changes to the\n   master branch (or branch off of it).\n3. Write a test which shows that the bug was fixed or that the feature\n   works as expected.\n\nHow to find me\n--------------\n\n- Twitter: `@kachayev <https://twitter.com/kachayev>`_\n- Email: kachayev <at> gmail.com\n\n\nHistory\n=======\n\n06.04.2013\n----------\n\n- added initial origin param to ``fn.Stream``\n- ``monad.Option`` is flatten by default, Full(Empty) -> Empty, Empty(Full) -> Empty\n- added ``op.unfold`` operator \n\n31.03.2013\n----------\n\n- added example of using tail call optimization with changing callable\n\n16.02.2013\n----------\n\n- fixed @23 about flipping of underscore function\n- added special uniform module\n- fixed @22 (underscore functions representation)\n- adjustments to unary operators processing in underscore\n\n02.02.2013\n----------\n\n- prelimitary implementation of ``recur.tco`` to deal with recursive functions\n- ``iters.flatten`` is reimplemented to work with different iterators\n\n27.01.2013\n----------\n\n- ``iters.accumulate`` - backported version for Python < 3.3\n- first implementation for ``monad.Option`` with tests and README samples\n\n23.01.2013\n----------\n\n- ``fn.Stream`` slice is another ``fn.Stream``\n- ``fn.Stream`` got new public method ``cursor`` to get position on next evaluated element\n\n21.01.2013\n----------\n\n- Update documentation with special ``fn._`` use cases for interactive shells\n- Move ``zipwith`` from ``fn.iters`` to ``fn.op``\n- ``fn._`` dump to string\n\n18.01.2013\n----------\n\n-  Added 22 itertools recipes to ``fn.iters``\n-  Documentation is converted to RST\n\n17.01.2013\n----------\n\n-  Unit tests coverage for ``fn.stream.Stream``\n-  ``_StreamIterator`` works fine both in Python 2/3\n\n16.01.2013\n----------\n\n-  Finished underscore module functionality\n-  Test cases for all implemented modules/functions\n-  Update in Readme file with several fixes\n-  Get rid of F.flip classmethod in pref. for simple building blocks\n-  Optimized version for fn.op.flip operator\n\n14.01.2013\n----------\n\n-  Simplest ``Stream`` implementation\n-  Code samples for streams, labdas (``_``) and functions compositions\n-  Plan, contribute section in readme file\n\n13.01.2013\n----------\n\n-  Full list of ideas on paper\n-  Repository is created\n-  Initial commit", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kachayev/fn.py", "keywords": null, "license": "Copyright 2013 Alexey Kachayev\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", "maintainer": null, "maintainer_email": null, "name": "fn", "package_url": "https://pypi.org/project/fn/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fn/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kachayev/fn.py"}, "release_url": "https://pypi.org/project/fn/0.4.3/", "requires_dist": null, "requires_python": null, "summary": "Implementation of missing features to enjoy functional programming in Python", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Fn.py: enjoy FP in Python<br>=========================<br><br>Despite the fact that Python is not pure-functional programming<br>language, it's multi-paradigm PL and it gives you enough freedom to take<br>credits from functional programming approach. There are theoretical and<br>practical advantages to the functional style:<br><br>-  Formal provability<br>-  Modularity<br>-  Composability<br>-  Ease of debugging and testing<br><br>``Fn.py`` library provides you with missing \"batteries\" to get maximum<br>from functional approach even in mostly-imperative program.<br><br>More about functional approach from my Pycon UA 2012 talks: `Functional<br>Programming with<br>Python &lt;http://kachayev.github.com/talks/uapycon2012/index.html&gt;`_.<br><br>Scala-style lambdas definition<br>------------------------------<br><br>.. code-block:: python<br><br>    from fn import _<br>    from fn.op import zipwith<br>    from itertools import repeat<br><br>    assert list(map(_ * 2, range(5))) == [0,2,4,6,8]<br>    assert list(filter(_ &lt; 10, [9,10,11])) == [9]<br>    assert list(zipwith(_ + _)([0,1,2], repeat(10))) == [10,11,12]<br><br>More examples of using ``_`` you can find in `test<br>cases &lt;https://github.com/kachayev/fn.py/blob/master/tests.py&gt;`_<br>declaration (attributes resolving, method calling, slicing).<br><br>**Attention!** If you work in interactive python shell, your should remember that ``_`` means \"latest output\" and you'll get unpredictable results. In this case, you can do something like ``from fn import _ as X`` (and then write functions like ``X * 2``).<br><br>If you are not sure, what your function is going to do, you can print it:<br><br>.. code-block:: python<br><br>    from fn import _<br><br>    print (_ + 2) # \"(x1) =&gt; (x1 + 2)\"<br>    print (_ + _ * _) # \"(x1, x2, x3) =&gt; (x1 + (x2 * x3))\"<br><br>``_`` will fail with ``ArityError`` (``TypeError`` subclass) on inaccurate number of passed arguments. This is one more restrictions to ensure that you did everything right: <br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; from fn import _<br>    &gt;&gt;&gt; (_ + _)(1)<br>    Traceback (most recent call last):<br>      File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;<br>      File \"fn/underscore.py\", line 82, in __call__<br>        raise ArityError(self, self._arity, len(args))<br>    fn.underscore.ArityError: (_ + _) expected 2 arguments, got 1<br><br><br>Persistent data structures<br>--------------------------<br><br>**Attention:** Persistent data structures are under active development.<br><br>Persistent data structure is a data structure that always preserves the previous version of itself when it is modified (more formal information on `Wikipedia &lt;http://goo.gl/8VveOH&gt;`_). Each operation with such data structure yields a new updated structure instead of in-place modification (all previous versions are potentially available or GC-ed when possible).<br><br>Lets take a quick look:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; from fn.immutable import SkewHeap<br>    &gt;&gt;&gt; s1 = SkewHeap(10)<br>    &gt;&gt;&gt; s2 = s1.insert(20)<br>    &gt;&gt;&gt; s2<br>    &lt;fn.immutable.heap.SkewHeap object at 0x10b14c050&gt;<br>    &gt;&gt;&gt; s3 = s2.insert(30)<br>    &gt;&gt;&gt; s3<br>    &lt;fn.immutable.heap.SkewHeap object at 0x10b14c158&gt; # &lt;-- other object<br>    &gt;&gt;&gt; s3.extract()<br>    (10, &lt;fn.immutable.heap.SkewHeap object at 0x10b14c050&gt;)<br>    &gt;&gt;&gt; s3.extract() # &lt;-- s3 isn't changed<br>    (10, &lt;fn.immutable.heap.SkewHeap object at 0x10b11c052&gt;)<br><br>If you think I'm totally crazy and it will work despairingly slow, just give it 5 minutes. Relax, take a deep breath and read about few techniques that make persistent data structures fast and efficient: `structural sharing &lt;http://en.wikipedia.org/wiki/Persistent_data_structure#Examples_of_persistent_data_structures&gt;`_ and `path copying &lt;http://en.wikipedia.org/wiki/Persistent_data_structure#Path_Copying&gt;`_.<br><br>To see how it works in \"pictures\", you can check great slides from Zach Allaun's talk (StrangeLoop 2013): `\"Functional Vectors, Maps And Sets In Julia\" &lt;http://goo.gl/Cp1Qsq&gt;`_.<br><br>And, if you are brave enough, go and read:<br><br>- Chris Okasaki, \"Purely Functional Data Structures\" (`Amazon &lt;http://goo.gl/c7ptkk&gt;`_)<br>- Fethi Rabhi and Guy Lapalme, \"Algorithms: A Functional Programming Approach\" (`Amazon &lt;http://goo.gl/00BxTO&gt;`_)<br><br>Available immutable data structures in ``fn.immutable`` module:<br><br>- ``LinkedList``: most \"obvious\" persistent data structure, used as building block for other list-based structures (stack, queue)<br>- ``Stack``: wraps linked list implementation with well-known pop/push API<br>- ``Queue``: uses two linked lists and lazy copy to provide O(1) enqueue and dequeue operations<br>- ``Deque`` (in progress): `\"Confluently Persistent Deques via Data<br>  Structural Bootstrapping\" &lt;http://goo.gl/vVTzx3&gt;`_<br>- ``Deque`` based on ``FingerTree`` data structure (see more information below)<br>- ``Vector``: O(log32(n)) access to elements by index (which is near-O(1) for reasonable vector size), implementation is based on ``BitmappedTrie``, almost drop-in replacement for built-in Python ``list``<br>- ``SkewHeap``: self-adjusting heap implemented as a binary tree with specific branching model, uses heap merge as basic operation, more information - `\"Self-adjusting heaps\" &lt;http://goo.gl/R1PZME&gt;`_<br>- ``PairingHeap``: `\"The Pairing-Heap: A New Form of Self-Adjusting Heap\" &lt;http://goo.gl/aiVtPH&gt;`_<br>- ``Dict`` (in progress): persistent hash map implementation based on ``BitmappedTrie``<br>- ``FingerTree`` (in progress): `\"Finger Trees: A Simple General-purpose Data Structure\" &lt;http://goo.gl/Bzo0df&gt;`_<br><br>Use appropriate doc strings to get more information about each data structure as well as sample code.<br><br>To get more clear vision of how persistent heaps work (``SkewHeap`` and ``PairingHeap``), you can look at slides from my talk `\"Union-based heaps\" &lt;http://goo.gl/VMgdG2&gt;`_ (with analyzed data structures definitions in Python and Haskell).<br><br>**Note.** Most functional languages use persistent data structures as basic building blocks, well-known examples are Clojure, Haskell and Scala. Clojure community puts much effort to popularize programming based on the idea of data immutability. There are few amazing talk given by Rich Hickey (creator of Clojure), you can check them to find answers on both questions \"How?\" and \"Why?\":<br><br>- `\"The Value of Values\" &lt;http://goo.gl/137UG5&gt;`_<br>- `\"Persistent Data Structures and Managed References\" &lt;http://goo.gl/M3vZ7E&gt;`_<br><br>Streams and infinite sequences declaration<br>------------------------------------------<br><br>Lazy-evaluated Scala-style streams. Basic idea: evaluate each new<br>element \"on demand\" and share calculated elements between all created<br>iterators. ``Stream`` object supports ``&lt;&lt;`` operator that means pushing<br>new elements when it's necessary.<br><br>Simplest cases:<br><br>.. code-block:: python<br><br>    from fn import Stream<br><br>    s = Stream() &lt;&lt; [1,2,3,4,5]<br>    assert list(s) == [1,2,3,4,5]<br>    assert s[1] == 2<br>    assert list(s[0:2]) == [1,2]<br><br>    s = Stream() &lt;&lt; range(6) &lt;&lt; [6,7]<br>    assert list(s) == [0,1,2,3,4,5,6,7]<br><br>    def gen():<br>        yield 1<br>        yield 2<br>        yield 3<br><br>    s = Stream() &lt;&lt; gen &lt;&lt; (4,5)<br>    assert list(s) == [1,2,3,4,5]<br><br>Lazy-evaluated stream is useful for infinite sequences, i.e. fibonacci<br>sequence can be calculated as:<br><br>.. code-block:: python<br><br>    from fn import Stream<br>    from fn.iters import take, drop, map<br>    from operator import add<br><br>    f = Stream()<br>    fib = f &lt;&lt; [0, 1] &lt;&lt; map(add, f, drop(1, f))<br><br>    assert list(take(10, fib)) == [0,1,1,2,3,5,8,13,21,34]<br>    assert fib[20] == 6765<br>    assert list(fib[30:35]) == [832040,1346269,2178309,3524578,5702887]<br><br>Trampolines decorator<br>---------------------<br><br>``fn.recur.tco`` is a workaround for dealing with TCO without heavy stack utilization. Let's start from simple example of recursive factorial calculation:<br><br>.. code-block:: python<br><br>    def fact(n):<br>        if n == 0: return 1<br>        return n * fact(n-1)<br><br>This variant works, but it's really ugly. Why? It will utilize memory too heavy cause of recursive storing all previous values to calculate final result. If you will execute this function with big ``n`` (more then ``sys.getrecursionlimit()``) CPython will fail with <br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; import sys<br>    &gt;&gt;&gt; fact(sys.getrecursionlimit() * 2)<br>    ... many many lines of stacktrace ...<br>    RuntimeError: maximum recursion depth exceeded<br><br>Which is good, cause it prevents you from terrible mistakes in your code.<br><br>How can we optimize this solution? Answer is simple, lets transform function to use tail call:<br><br>.. code-block:: python<br><br>    def fact(n, acc=1):<br>        if n == 0: return acc<br>        return fact(n-1, acc*n)<br><br>Why this variant is better? Cause you don't need to remember previous values to calculate final result. More about `tail call optimization &lt;http://en.wikipedia.org/wiki/Tail_call&gt;`_ on Wikipedia. But... Python interpreter will execute this function the same way as previous one, so you won't win anything.<br><br>``fn.recur.tco`` gives you mechanism to write \"optimized a bit\" tail call recursion (using \"trampoline\" approach):<br><br>.. code-block:: python<br><br>    from fn import recur<br><br>    @recur.tco<br>    def fact(n, acc=1):<br>        if n == 0: return False, acc<br>        return True, (n-1, acc*n)<br><br>``@recur.tco`` is a decorator that execute your function in ``while`` loop and check output: <br><br>- ``(False, result)`` means that we finished <br>- ``(True, args, kwargs)`` means that we need to call function again with other arguments<br>- ``(func, args, kwargs)`` to switch function to be executed inside while loop<br><br>The last variant is really useful, when you need to switch callable inside evaluation loop. Good example for such situation is recursive detection if given number is odd or even:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; from fn import recur<br>    &gt;&gt;&gt; @recur.tco<br>    ... def even(x):<br>    ...     if x == 0: return False, True<br>    ...     return odd, (x-1,)<br>    ... <br>    &gt;&gt;&gt; @recur.tco<br>    ... def odd(x):<br>    ...     if x == 0: return False, False<br>    ...     return even, (x-1,)<br>    ... <br>    &gt;&gt;&gt; print even(100000)<br>    True<br><br>**Attention:** be careful with mutable/immutable data structures processing.<br><br>Itertools recipes<br>-----------------<br><br>``fn.uniform`` provides you with \"unification\"<br>of lazy functionality for few functions to work the same way in Python<br>2+/3+:<br><br>-  ``map`` (returns ``itertools.imap`` in Python 2+)<br>-  ``filter`` (returns ``itertools.ifilter`` in Python 2+)<br>-  ``reduce`` (returns ``functools.reduce`` in Python 3+)<br>-  ``zip`` (returns ``itertools.izip`` in Python 2+)<br>-  ``range`` (returns ``xrange`` in Python 2+)<br>-  ``filterfalse`` (returns ``itertools.ifilterfalse`` in Python 2+)<br>-  ``zip_longest`` (returns ``itertools.izip_longest`` in Python 2+)<br>-  ``accumulate`` (backported to Python &lt; 3.3)<br><br>``fn.iters`` is high-level recipes to work with iterators. Most<br>of them taken from `Python<br>docs &lt;http://docs.python.org/2.7/library/itertools.html#itertools.product&gt;`_<br>and adopted to work both with Python 2+/3+. Such recipes as ``drop``,<br>``takelast``, ``droplast``, ``splitat``, ``splitby`` I have already<br>submitted as `docs patch &lt;http://bugs.python.org/issue16774&gt;`_ which is<br>review status just now.<br><br>-  ``take``, ``drop``<br>-  ``takelast``, ``droplast``<br>-  ``head`` (alias: ``first``), ``tail`` (alias: ``rest``)<br>-  ``second``, ``ffirst``<br>-  ``compact``, ``reject``<br>-  ``iterate``<br>-  ``consume``<br>-  ``nth``<br>-  ``padnone``, ``ncycles``<br>-  ``repeatfunc``<br>-  ``grouper``, ``powerset``, ``pairwise``<br>-  ``roundrobin``<br>-  ``partition``, ``splitat``, ``splitby``<br>-  ``flatten``<br>-  ``iter_except``<br><br>More information about use cases you can find in docstrings for each<br>function in `source<br>code &lt;https://github.com/kachayev/fn.py/blob/master/fn/iters.py&gt;`__ and<br>in `test<br>cases &lt;https://github.com/kachayev/fn.py/blob/master/tests.py&gt;`_.<br><br>High-level operations with functions<br>------------------------------------<br><br>``fn.F`` is a useful function wrapper to provide easy-to-use partial<br>application and functions composition.<br><br>.. code-block:: python<br><br>    from fn import F, _<br>    from operator import add, mul<br><br>    # F(f, *args) means partial application <br>    # same as functools.partial but returns fn.F instance<br>    assert F(add, 1)(10) == 11<br><br>    # F &lt;&lt; F means functions composition,<br>    # so (F(f) &lt;&lt; g)(x) == f(g(x))<br>    f = F(add, 1) &lt;&lt; F(mul, 100)<br>    assert list(map(f, [0, 1, 2])) == [1, 101, 201]<br>    assert list(map(F() &lt;&lt; str &lt;&lt; (_ ** 2) &lt;&lt; (_ + 1), range(3))) == [\"1\", \"4\", \"9\"]<br><br>It also give you move readable in many cases \"pipe\" notation to deal with functions composition:<br><br>.. code-block:: python<br><br>    from fn import F, _<br>    from fn.iters import filter, range<br><br>    func = F() &gt;&gt; (filter, _ &lt; 6) &gt;&gt; sum<br>    assert func(range(10)) == 15<br><br>You can find more examples for compositions usage in ``fn._``<br>implementation `source<br>code &lt;https://github.com/kachayev/fn.py/blob/master/fn/underscore.py&gt;`__.<br><br>``fn.op.apply`` executes given function with given positional arguments<br>in list (or any other iterable). ``fn.op.flip`` returns you function<br>that will reverse arguments order before apply.<br><br>.. code-block:: python<br><br>    from fn.op import apply, flip<br>    from operator import add, sub<br><br>    assert apply(add, [1, 2]) == 3<br>    assert flip(sub)(20,10) == -10<br>    assert list(map(apply, [add, mul], [(1,2), (10,20)])) == [3, 200]<br><br>``fn.op.foldl`` and ``fn.op.foldr`` are folding operators. Each accepts function with arity 2 and returns function that can be used to reduce iterable to scalar: from left-to-right and from right-to-left in case of ``foldl`` and ``foldr`` respectively. <br><br>.. code-block:: python<br><br>    from fn import op, _<br><br>    folder = op.foldr(_ * _, 1)<br>    assert 6 == op.foldl(_ + _)([1,2,3])<br>    assert 6 == folder([1,2,3])<br><br>Use case specific for right-side folding is:<br><br>.. code-block:: python<br>    <br>    from fn.op import foldr, call <br><br>    assert 100 == foldr(call, 0 )([lambda s: s**2, lambda k: k+10])<br>    assert 400 == foldr(call, 10)([lambda s: s**2, lambda k: k+10])<br><br><br>Function currying<br>-----------------<br><br>``fn.func.curried`` is a decorator for building curried functions, for example:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; from fn.func import curried<br>    &gt;&gt;&gt; @curried<br>    ... def sum5(a, b, c, d, e):<br>    ...     return a + b + c + d + e<br>    ...<br>    &gt;&gt;&gt; sum5(1)(2)(3)(4)(5)<br>    15<br>    &gt;&gt;&gt; sum5(1, 2, 3)(4, 5)<br>    15<br><br><br>Functional style for error-handling<br>-----------------------------------<br><br>``fn.monad.Option`` represents optional values, each instance of ``Option`` can be either instance of ``Full`` or ``Empty``. It provides you with simple way to write long computation sequences and get rid of many ``if/else`` blocks. See usage examples below. <br><br>Assume that you have ``Request`` class that gives you parameter value by its name. To get uppercase notation for non-empty striped value:<br><br>.. code-block:: python<br><br>    class Request(dict):<br>        def parameter(self, name):<br>            return self.get(name, None)<br><br>    r = Request(testing=\"Fixed\", empty=\"   \")<br>    param = r.parameter(\"testing\")<br>    if param is None:<br>        fixed = \"\"<br>    else:<br>        param = param.strip()<br>        if len(param) == 0:<br>            fixed = \"\"<br>        else:<br>            fixed = param.upper()<br><br><br>Hmm, looks ugly.. Update code with ``fn.monad.Option``:<br><br>.. code-block:: python<br><br>    from operator import methodcaller<br>    from fn.monad import optionable<br><br>    class Request(dict):<br>        @optionable<br>        def parameter(self, name):<br>            return self.get(name, None)<br><br>    r = Request(testing=\"Fixed\", empty=\"   \")<br>    fixed = r.parameter(\"testing\")<br>             .map(methodcaller(\"strip\"))<br>             .filter(len)<br>             .map(methodcaller(\"upper\"))<br>             .get_or(\"\")<br><br>``fn.monad.Option.or_call`` is good method for trying several variant to end computation. I.e. use have ``Request`` class with optional attributes ``type``, ``mimetype``, ``url``. You need to evaluate \"request type\" using at least one attribute:<br><br>.. code-block:: python<br><br>    from fn.monad import Option<br><br>    request = dict(url=\"face.png\", mimetype=\"PNG\")<br>    tp = Option \\<br>            .from_value(request.get(\"type\", None)) \\ # check \"type\" key first<br>            .or_call(from_mimetype, request) \\ # or.. check \"mimetype\" key<br>            .or_call(from_extension, request) \\ # or... get \"url\" and check extension<br>            .get_or(\"application/undefined\")<br><br><br>Installation<br>------------<br><br>To install ``fn.py``, simply:<br><br>.. code-block:: console<br><br>    $ pip install fn<br><br>Or, if you absolutely must:<br><br>.. code-block:: console<br><br>    $ easy_install fn<br><br>You can also build library from source<br><br>.. code-block:: console<br><br>    $ git clone https://github.com/kachayev/fn.py.git<br>    $ cd fn.py<br>    $ python setup.py install<br><br>Work in progress<br>----------------<br><br>\"Roadmap\":<br><br>- ``fn.monad.Either`` to deal with error logging <br>-  C-accelerator for most modules<br><br>Ideas to think about:<br><br>-  Scala-style for-yield loop to simplify long map/filter blocks<br><br>Contribute<br>----------<br><br>1. Check for open issues or open a fresh issue to start a discussion<br>   around a feature idea or a bug.<br>2. Fork the repository on Github to start making your changes to the<br>   master branch (or branch off of it).<br>3. Write a test which shows that the bug was fixed or that the feature<br>   works as expected.<br><br>How to find me<br>--------------<br><br>- Twitter: `@kachayev &lt;https://twitter.com/kachayev&gt;`_<br>- Email: kachayev &lt;at&gt; gmail.com<br><br><br>History<br>=======<br><br>06.04.2013<br>----------<br><br>- added initial origin param to ``fn.Stream``<br>- ``monad.Option`` is flatten by default, Full(Empty) -&gt; Empty, Empty(Full) -&gt; Empty<br>- added ``op.unfold`` operator <br><br>31.03.2013<br>----------<br><br>- added example of using tail call optimization with changing callable<br><br>16.02.2013<br>----------<br><br>- fixed @23 about flipping of underscore function<br>- added special uniform module<br>- fixed @22 (underscore functions representation)<br>- adjustments to unary operators processing in underscore<br><br>02.02.2013<br>----------<br><br>- prelimitary implementation of ``recur.tco`` to deal with recursive functions<br>- ``iters.flatten`` is reimplemented to work with different iterators<br><br>27.01.2013<br>----------<br><br>- ``iters.accumulate`` - backported version for Python &lt; 3.3<br>- first implementation for ``monad.Option`` with tests and README samples<br><br>23.01.2013<br>----------<br><br>- ``fn.Stream`` slice is another ``fn.Stream``<br>- ``fn.Stream`` got new public method ``cursor`` to get position on next evaluated element<br><br>21.01.2013<br>----------<br><br>- Update documentation with special ``fn._`` use cases for interactive shells<br>- Move ``zipwith`` from ``fn.iters`` to ``fn.op``<br>- ``fn._`` dump to string<br><br>18.01.2013<br>----------<br><br>-  Added 22 itertools recipes to ``fn.iters``<br>-  Documentation is converted to RST<br><br>17.01.2013<br>----------<br><br>-  Unit tests coverage for ``fn.stream.Stream``<br>-  ``_StreamIterator`` works fine both in Python 2/3<br><br>16.01.2013<br>----------<br><br>-  Finished underscore module functionality<br>-  Test cases for all implemented modules/functions<br>-  Update in Readme file with several fixes<br>-  Get rid of F.flip classmethod in pref. for simple building blocks<br>-  Optimized version for fn.op.flip operator<br><br>14.01.2013<br>----------<br><br>-  Simplest ``Stream`` implementation<br>-  Code samples for streams, labdas (``_``) and functions compositions<br>-  Plan, contribute section in readme file<br><br>13.01.2013<br>----------<br><br>-  Full list of ideas on paper<br>-  Repository is created<br>-  Initial commit\n          </div>"}, "last_serial": 1183840, "releases": {"0.1.12": [{"comment_text": "", "digests": {"md5": "b88d5fa98845dbe1c8ca3b5fdb9507bb", "sha256": "24656b5a1dfb09d24d0ea2de18eb120d61bb0ab78e86742f9cd4e189782209b5"}, "downloads": -1, "filename": "fn-0.1.12.tar.gz", "has_sig": false, "md5_digest": "b88d5fa98845dbe1c8ca3b5fdb9507bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11796, "upload_time": "2013-01-18T21:31:50", "upload_time_iso_8601": "2013-01-18T21:31:50.173867Z", "url": "https://files.pythonhosted.org/packages/18/9b/a4d40aac4a7818480e6bfa6a9bb1d176c194586e60fc43a6e4aff514e7ab/fn-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "919ec8f93b539aca1198f9cf418a8b9b", "sha256": "1ee8689743d3a062de11ef8bcb40c0b48ed6e524a9618877b147ee4e8162b3a4"}, "downloads": -1, "filename": "fn-0.1.13.tar.gz", "has_sig": false, "md5_digest": "919ec8f93b539aca1198f9cf418a8b9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11826, "upload_time": "2013-01-18T22:08:43", "upload_time_iso_8601": "2013-01-18T22:08:43.279141Z", "url": "https://files.pythonhosted.org/packages/00/77/b473b496df750bc953b54e2210eecdbe9ed9260745512ed3fe7bdd2ea4ef/fn-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "f29f29b5f2f8afce04c43364fb2c5c3b", "sha256": "4574db4ab5a1eb42169b371e03ad29ffb121dbef306cd9b87075e9e3d8603887"}, "downloads": -1, "filename": "fn-0.1.14.tar.gz", "has_sig": false, "md5_digest": "f29f29b5f2f8afce04c43364fb2c5c3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11850, "upload_time": "2013-01-18T22:25:29", "upload_time_iso_8601": "2013-01-18T22:25:29.216676Z", "url": "https://files.pythonhosted.org/packages/cc/77/70ae9409b04dd8e4be080e0f3a4fb6e8ceff988224d8d0c86f08195d350f/fn-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "2a3a505eaba835f22021eeb30b1dfc75", "sha256": "b2f889f2e13b9d50097a880a434bb74dcb19a82f6aa0cf07f4ee80614c2f0074"}, "downloads": -1, "filename": "fn-0.1.15.tar.gz", "has_sig": false, "md5_digest": "2a3a505eaba835f22021eeb30b1dfc75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12049, "upload_time": "2013-01-21T08:00:52", "upload_time_iso_8601": "2013-01-21T08:00:52.264533Z", "url": "https://files.pythonhosted.org/packages/29/af/c6f56b2286de2e205e65a4fe259c66e3784f4bbe51f1bdab0b08d4687bec/fn-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "e2e16bf8d13f7e9aea644511089325e1", "sha256": "2a655ef4ca3cc64a006ad2df908010ad88f853686ecc055a4618505c5b7da105"}, "downloads": -1, "filename": "fn-0.1.16.tar.gz", "has_sig": false, "md5_digest": "e2e16bf8d13f7e9aea644511089325e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13047, "upload_time": "2013-01-21T22:12:41", "upload_time_iso_8601": "2013-01-21T22:12:41.844523Z", "url": "https://files.pythonhosted.org/packages/b9/3f/ee7c6d6fd0e90a5151b1d4f9e23d22617cea3dc1a710bba9b92642c3aa14/fn-0.1.16.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "343cfab17a08d88cdbddc53a83c0e19c", "sha256": "7956925479967976dbbd642e62328ee1d5ae86b008aacbed0a97afdcbfb823da"}, "downloads": -1, "filename": "fn-0.1.18.tar.gz", "has_sig": false, "md5_digest": "343cfab17a08d88cdbddc53a83c0e19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13293, "upload_time": "2013-01-23T16:33:42", "upload_time_iso_8601": "2013-01-23T16:33:42.488300Z", "url": "https://files.pythonhosted.org/packages/2c/d8/be3dfa62b90653f31d521dca4912737472b8133e06cf534eef533217f8eb/fn-0.1.18.tar.gz", "yanked": false}], "0.1.19": [{"comment_text": "", "digests": {"md5": "fef9f95bb0a76cdb97d66233132fea1f", "sha256": "fd24e92b6440a142cb1ae9326f2e579ec27748bec7b66f9bf33bc30d5ccc299a"}, "downloads": -1, "filename": "fn-0.1.19.tar.gz", "has_sig": false, "md5_digest": "fef9f95bb0a76cdb97d66233132fea1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13899, "upload_time": "2013-01-24T22:26:21", "upload_time_iso_8601": "2013-01-24T22:26:21.755429Z", "url": "https://files.pythonhosted.org/packages/c0/2d/c9f0097b9408b7a5a7e78875d872400e052038243a0cfef728022ad1648a/fn-0.1.19.tar.gz", "yanked": false}], "0.1.20": [{"comment_text": "", "digests": {"md5": "f07170fa3591f288906ed131cfc2b778", "sha256": "e40813741ccdc1aa7b87e2c79bfee1a8d77dca02ba52fc9fdf18e1a0b64bc445"}, "downloads": -1, "filename": "fn-0.1.20.tar.gz", "has_sig": false, "md5_digest": "f07170fa3591f288906ed131cfc2b778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14256, "upload_time": "2013-01-27T20:38:03", "upload_time_iso_8601": "2013-01-27T20:38:03.641351Z", "url": "https://files.pythonhosted.org/packages/46/03/e602844d102e6f8e2d31ac429fcf451c4296be68d2d501a5839436ccaa94/fn-0.1.20.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ae8c57c53526e9e9c8590d103922834d", "sha256": "67914614a9343f7cdf4e6ee972dabfa80892f13e61f8f1386d31210726dddb8d"}, "downloads": -1, "filename": "fn-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ae8c57c53526e9e9c8590d103922834d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16109, "upload_time": "2013-01-29T15:51:11", "upload_time_iso_8601": "2013-01-29T15:51:11.368333Z", "url": "https://files.pythonhosted.org/packages/ce/44/a62d8b17c100bc1a984810a5d05051786abb5cc6b73c358d378a2ea22896/fn-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "78bb7afb657af9be56328ee6b94d9050", "sha256": "82b04540b9e5b4fe61aebb7d0bf41026ef531c05d206af19cf6856cce00fb79b"}, "downloads": -1, "filename": "fn-0.2.10.tar.gz", "has_sig": false, "md5_digest": "78bb7afb657af9be56328ee6b94d9050", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20221, "upload_time": "2013-02-16T13:19:43", "upload_time_iso_8601": "2013-02-16T13:19:43.074385Z", "url": "https://files.pythonhosted.org/packages/36/b3/776398bd841a1ba155bf39fa51a65a4bb548f3978f9c9381c75b6ea7f9e1/fn-0.2.10.tar.gz", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "8dea8c19eb1c0889169a169f178c39c6", "sha256": "3deac6a31f4be0c551a32167e44fc25a0ab31ee760260a0080eb4054a954ab5f"}, "downloads": -1, "filename": "fn-0.2.11.tar.gz", "has_sig": false, "md5_digest": "8dea8c19eb1c0889169a169f178c39c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20483, "upload_time": "2013-02-16T23:18:45", "upload_time_iso_8601": "2013-02-16T23:18:45.928168Z", "url": "https://files.pythonhosted.org/packages/f6/3d/d926dcaaec15028860cae321abc304ce199e0936ce5c7a4a5e5b1b7a462f/fn-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "ad8b6942fd1c5b59ee6c79b28b4a7ff3", "sha256": "e24885fa733573b56a96694a60a907aa4d8d469de00d7baa622ed1ef06b90f40"}, "downloads": -1, "filename": "fn-0.2.12.tar.gz", "has_sig": false, "md5_digest": "ad8b6942fd1c5b59ee6c79b28b4a7ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20752, "upload_time": "2013-03-31T21:21:34", "upload_time_iso_8601": "2013-03-31T21:21:34.921407Z", "url": "https://files.pythonhosted.org/packages/a6/6a/2da4511d12a263ad7afd9e3d0e75ce585c74e16d05564c63d8b9858ade8d/fn-0.2.12.tar.gz", "yanked": false}], "0.2.13": [{"comment_text": "", "digests": {"md5": "351e19d43ae5ef3ca08e24629a1bd097", "sha256": "f101ef7455b50ab7376b8655762c34ccb8d17e1f49dc3da0e225e7d3beb86a93"}, "downloads": -1, "filename": "fn-0.2.13.tar.gz", "has_sig": false, "md5_digest": "351e19d43ae5ef3ca08e24629a1bd097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21764, "upload_time": "2013-11-11T19:12:29", "upload_time_iso_8601": "2013-11-11T19:12:29.446322Z", "url": "https://files.pythonhosted.org/packages/c7/76/f924a50aa2f81f3c351aafb6fde6d616e8e2b2e4cd7bd1c84c74d47d1cf2/fn-0.2.13.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "1b1bceff1bec4dcdf4cfd802d22b711f", "sha256": "917bc09c4068d01b239576f2da02151f2ff3c223fb0f0dda6bd6915e76b9fe43"}, "downloads": -1, "filename": "fn-0.2.4.tar.gz", "has_sig": false, "md5_digest": "1b1bceff1bec4dcdf4cfd802d22b711f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18042, "upload_time": "2013-02-02T12:56:46", "upload_time_iso_8601": "2013-02-02T12:56:46.081010Z", "url": "https://files.pythonhosted.org/packages/ca/97/be3a76d2ff99a84ef7d4bc21fbf6b11be74c23d67bbdb359abbbfd6dc63b/fn-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "4f58a68bc53b1d9af044c00115ba5c49", "sha256": "47f162dc16380c166b9145166fe50397c45fa050a7b947b47f829ebd3aa8c8b3"}, "downloads": -1, "filename": "fn-0.2.5.tar.gz", "has_sig": false, "md5_digest": "4f58a68bc53b1d9af044c00115ba5c49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18439, "upload_time": "2013-02-05T15:57:38", "upload_time_iso_8601": "2013-02-05T15:57:38.274419Z", "url": "https://files.pythonhosted.org/packages/58/f6/9d9bbc59101b99f2aa39931bb45cae22dcfafcb30a09426387e3505fae3c/fn-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "f83db86b3598d24a3860728e5e9fb1c4", "sha256": "42c1584ca848c290c2a9bc771044baf1389f39ea03053f5b8a8cdc522e7d9105"}, "downloads": -1, "filename": "fn-0.2.6.tar.gz", "has_sig": false, "md5_digest": "f83db86b3598d24a3860728e5e9fb1c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18573, "upload_time": "2013-02-09T14:31:06", "upload_time_iso_8601": "2013-02-09T14:31:06.405261Z", "url": "https://files.pythonhosted.org/packages/5c/40/32d188cd45c05000e49f7e5e387fac6469ec270fe175344823b93870cea0/fn-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "b966c11cd970e366bbc6604cbb1f3642", "sha256": "555f769da2a380ba02c00b49ec1a93d184d704c721132b11dfc0ccc36cb3afe1"}, "downloads": -1, "filename": "fn-0.2.7.tar.gz", "has_sig": false, "md5_digest": "b966c11cd970e366bbc6604cbb1f3642", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19111, "upload_time": "2013-02-10T17:37:28", "upload_time_iso_8601": "2013-02-10T17:37:28.223616Z", "url": "https://files.pythonhosted.org/packages/85/f7/f1e6aa4a7e075debb285ac85259613ab3f29eabc168f051eb60b8757d3de/fn-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "49edf5daf1882b572487941387c95446", "sha256": "9cc4cc4ee429919b10e1fa19b539b1858286297c128319d327b05977bdce52d1"}, "downloads": -1, "filename": "fn-0.2.8.tar.gz", "has_sig": false, "md5_digest": "49edf5daf1882b572487941387c95446", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19134, "upload_time": "2013-02-13T22:13:29", "upload_time_iso_8601": "2013-02-13T22:13:29.564853Z", "url": "https://files.pythonhosted.org/packages/17/d8/93b132ea7d3aa954976693f31289ec4659fe7c2b8a7c98674cdcc1fdaf27/fn-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "8732827b99492f1de35ad377a5aa6e48", "sha256": "eed74c7f0adb03a7118e58a63c024af411462aadf546446d130c5f54a1b9c8a3"}, "downloads": -1, "filename": "fn-0.2.9.tar.gz", "has_sig": false, "md5_digest": "8732827b99492f1de35ad377a5aa6e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19195, "upload_time": "2013-02-14T10:36:06", "upload_time_iso_8601": "2013-02-14T10:36:06.623113Z", "url": "https://files.pythonhosted.org/packages/72/ba/9243bad35bb2396474c2bf1cda2b065b5e770ccf4265f6715b09799479a5/fn-0.2.9.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "757108fd7e1ac574ee32e7993740d4a3", "sha256": "f8cd80cdabf15367a2f07e7a9951fdc013d7200412743d85b88f2c896c95bada"}, "downloads": -1, "filename": "fn-0.4.3.tar.gz", "has_sig": false, "md5_digest": "757108fd7e1ac574ee32e7993740d4a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38634, "upload_time": "2014-08-08T11:02:13", "upload_time_iso_8601": "2014-08-08T11:02:13.890249Z", "url": "https://files.pythonhosted.org/packages/a2/32/9d184dc2e8225af558e155a3865d610df8533d5d48a2ed5943bf8a30a137/fn-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "757108fd7e1ac574ee32e7993740d4a3", "sha256": "f8cd80cdabf15367a2f07e7a9951fdc013d7200412743d85b88f2c896c95bada"}, "downloads": -1, "filename": "fn-0.4.3.tar.gz", "has_sig": false, "md5_digest": "757108fd7e1ac574ee32e7993740d4a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38634, "upload_time": "2014-08-08T11:02:13", "upload_time_iso_8601": "2014-08-08T11:02:13.890249Z", "url": "https://files.pythonhosted.org/packages/a2/32/9d184dc2e8225af558e155a3865d610df8533d5d48a2ed5943bf8a30a137/fn-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:16 2020"}