{"info": {"author": "Niko Pasanen", "author_email": "niko@pasanen.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows :: Windows 10", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: System :: Shells"], "description": "![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/np-8/pathtub)&nbsp;![PyPI](https://img.shields.io/pypi/v/pathtub)&nbsp;![PyPI - Downloads](https://img.shields.io/pypi/dm/pathtub)&nbsp;![GitHub](https://img.shields.io/github/license/np-8/pathtub)\n\n## \ud83d\udec1 pathtub\n\nReading and editing [Windows PATH variables](docs/path_variables.md) and ensuring python finds your DLLs.\n\n\n   &nbsp;&nbsp;&nbsp;&nbsp;\u2705 **Ensuring** that a folder exists in Path. <br>\n   &nbsp;&nbsp;&nbsp;&nbsp;\ud83d\udd17 **Ensuring** that DLL(s) are found by python. <br>\n   &nbsp;&nbsp;&nbsp;&nbsp;\ud83e\uddfd **Cleaning** the PATH (duplicates, removed folders, sorting) <br>\n   &nbsp;&nbsp;&nbsp;&nbsp;\u270f\ufe0f **Adding** or **removing** folders to/from Path (temporary or permanently) <br>\n\n\n\n## Installing\n```\npip install pathtub\n```\n\n\n## Usage\n\n- [Ensuring folder is in PATH](#-ensuring-folder-is-in-path)\n- [Ensuring that DLL(s) are found](#%f0%9f%94%97-ensuring-that-dlls-are-found)\n- [Cleaning PATH](#-cleaning-path)\n- [Rest of the docs](#rest-of-the-docs)\n  - [Getting path variables](docs/rest_of_the_docs.md#getting-path-variables)\n  - [Adding permanently to PATH](docs/rest_of_the_docs.md#adding-permanently-to-path-user)\n  - [Removing permanently from PATH](docs/rest_of_the_docs.md#removing-permanently-from-path-user)\n  - [Checking if folder is in PATH](docs/rest_of_the_docs.md#checking-if-folder-is-in-path)\n  \n\n\n### \u2705 Ensuring folder is in PATH\n```python\nfrom pathtub import ensure\nfolder_to_add = r'C:\\something to add to path\\folder'\n# 1) Check Process PATH\n# 2) Add to Process PATH if not found\n# 3) Add also to User PATH (permanent), if 2) happens\nensure(folder_to_add, permanent=True)\n```\n#### What is ensure()?\n`ensure(folder)`  checks if `folder` is in Process PATH<br>\n- If `folder` is in Process PATH, does nothing\n- If `folder` is not in Process PATH, adds it to Process PATH\n- If `folder` is not in Process PATH **and** `permanent=True`, adds *also* to the User PATH or System PATH, depending on the `permanent_mode`. \n  \n\u26a0\ufe0f If you want to ensure a *DLL folder* is visible to python, use `ensure_dll` instead. \n\n\n### \ud83d\udd17 **Ensuring** that DLL(s) are found \n```python\nfrom pathtub import ensure_dll\ndll_folder = r'C:\\path to\\libusb-1.0.21\\MS32\\dll'\nensure_dll(dll_folder)\n```\n- `ensure_dll()` is for making sure that python finds needed DLL's (and the DLL's find their dependencies, if any.)\n- You may use `ensure_dll` and `forget_dll` for adding and removing dll folder to/from search path.\n- See also: [Example of using ensure_dll and forget_dll](docs/dll_paths.md)\n\n\n\n\n### \ud83e\uddfd Cleaning PATH\n```python\nfrom pathtub import clean\n# Default parameter values shown\nclean(sort=True, remove_non_existent=True, remove_user_duplicates=True)\n```\n### What does it do\n- Removes duplicates and empty entries (`;;`) from the \"User PATH\" and \"System PATH\" (trailing backslash neglected when comparing two folders). Editing \"System PATH\" needs that python is executed with Admin rights.\n- Sorts PATH(s) alphabetically (optional, enabled by default). Controlled with the `sort` parameter.\n- Removes folders from PATH(s) that do not exist on the filesystem (optional, enabled by default). Controlled with the `remove_non_existent` -parameter.\n- Removing from \"User PATH\" the entries that are in the \"System PATH\" (optional, enabled by default). Controlled with the `remove_user_duplicates`-parameter.\n\n#### Screenshots of User PATH before and after clean:\n   ![User PATH](img/user-before-after-clean.png)  \n\n\n- For more detailed example, see [Full example of pathtub.clean](docs/example_clean.md)\n- Full documentation of `clean()` is in the source code ([pathtools.py](pathtub/pathtools.py)).\n\n### Rest of the docs\nDid not find what you were looking for? See the [Rest of the docs](docs/rest_of_the_docs.md).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/np-8/pathtub", "keywords": "PATH,Windows,winpath,powershell", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pathtub", "package_url": "https://pypi.org/project/pathtub/", "platform": "", "project_url": "https://pypi.org/project/pathtub/", "project_urls": {"Homepage": "https://github.com/np-8/pathtub"}, "release_url": "https://pypi.org/project/pathtub/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "Reading and editing Windows PATH.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"GitHub tag (latest by date)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bd9279761ce72c90388eba24d838e0c1cc3b60b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f6e702d382f70617468747562\">\u00a0<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fcec861ae3d9511b19388a39df20624cce366dce/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70617468747562\">\u00a0<img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8b8dd507edfa7a1f9c2c7d23388f75b071a0075/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f70617468747562\">\u00a0<img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/941d9f9a9276ce19b7a5264f9a030c7a104abaa2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e702d382f70617468747562\"></p>\n<h2>\ud83d\udec1 pathtub</h2>\n<p>Reading and editing <a href=\"docs/path_variables.md\" rel=\"nofollow\">Windows PATH variables</a> and ensuring python finds your DLLs.</p>\n<p>\u00a0\u00a0\u00a0\u00a0\u2705 <strong>Ensuring</strong> that a folder exists in Path. <br>\n\u00a0\u00a0\u00a0\u00a0\ud83d\udd17 <strong>Ensuring</strong> that DLL(s) are found by python. <br>\n\u00a0\u00a0\u00a0\u00a0\ud83e\uddfd <strong>Cleaning</strong> the PATH (duplicates, removed folders, sorting) <br>\n\u00a0\u00a0\u00a0\u00a0\u270f\ufe0f <strong>Adding</strong> or <strong>removing</strong> folders to/from Path (temporary or permanently) <br></p>\n<h2>Installing</h2>\n<pre><code>pip install pathtub\n</code></pre>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"#-ensuring-folder-is-in-path\" rel=\"nofollow\">Ensuring folder is in PATH</a></li>\n<li><a href=\"#%f0%9f%94%97-ensuring-that-dlls-are-found\" rel=\"nofollow\">Ensuring that DLL(s) are found</a></li>\n<li><a href=\"#-cleaning-path\" rel=\"nofollow\">Cleaning PATH</a></li>\n<li><a href=\"#rest-of-the-docs\" rel=\"nofollow\">Rest of the docs</a>\n<ul>\n<li><a href=\"docs/rest_of_the_docs.md#getting-path-variables\" rel=\"nofollow\">Getting path variables</a></li>\n<li><a href=\"docs/rest_of_the_docs.md#adding-permanently-to-path-user\" rel=\"nofollow\">Adding permanently to PATH</a></li>\n<li><a href=\"docs/rest_of_the_docs.md#removing-permanently-from-path-user\" rel=\"nofollow\">Removing permanently from PATH</a></li>\n<li><a href=\"docs/rest_of_the_docs.md#checking-if-folder-is-in-path\" rel=\"nofollow\">Checking if folder is in PATH</a></li>\n</ul>\n</li>\n</ul>\n<h3>\u2705 Ensuring folder is in PATH</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathtub</span> <span class=\"kn\">import</span> <span class=\"n\">ensure</span>\n<span class=\"n\">folder_to_add</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'C:\\something to add to path\\folder'</span>\n<span class=\"c1\"># 1) Check Process PATH</span>\n<span class=\"c1\"># 2) Add to Process PATH if not found</span>\n<span class=\"c1\"># 3) Add also to User PATH (permanent), if 2) happens</span>\n<span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"n\">folder_to_add</span><span class=\"p\">,</span> <span class=\"n\">permanent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>What is ensure()?</h4>\n<p><code>ensure(folder)</code>  checks if <code>folder</code> is in Process PATH<br></p>\n<ul>\n<li>If <code>folder</code> is in Process PATH, does nothing</li>\n<li>If <code>folder</code> is not in Process PATH, adds it to Process PATH</li>\n<li>If <code>folder</code> is not in Process PATH <strong>and</strong> <code>permanent=True</code>, adds <em>also</em> to the User PATH or System PATH, depending on the <code>permanent_mode</code>.</li>\n</ul>\n<p>\u26a0\ufe0f If you want to ensure a <em>DLL folder</em> is visible to python, use <code>ensure_dll</code> instead.</p>\n<h3>\ud83d\udd17 <strong>Ensuring</strong> that DLL(s) are found</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathtub</span> <span class=\"kn\">import</span> <span class=\"n\">ensure_dll</span>\n<span class=\"n\">dll_folder</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'C:\\path to\\libusb-1.0.21\\MS32\\dll'</span>\n<span class=\"n\">ensure_dll</span><span class=\"p\">(</span><span class=\"n\">dll_folder</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>ensure_dll()</code> is for making sure that python finds needed DLL's (and the DLL's find their dependencies, if any.)</li>\n<li>You may use <code>ensure_dll</code> and <code>forget_dll</code> for adding and removing dll folder to/from search path.</li>\n<li>See also: <a href=\"docs/dll_paths.md\" rel=\"nofollow\">Example of using ensure_dll and forget_dll</a></li>\n</ul>\n<h3>\ud83e\uddfd Cleaning PATH</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathtub</span> <span class=\"kn\">import</span> <span class=\"n\">clean</span>\n<span class=\"c1\"># Default parameter values shown</span>\n<span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_non_existent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">remove_user_duplicates</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>What does it do</h3>\n<ul>\n<li>Removes duplicates and empty entries (<code>;;</code>) from the \"User PATH\" and \"System PATH\" (trailing backslash neglected when comparing two folders). Editing \"System PATH\" needs that python is executed with Admin rights.</li>\n<li>Sorts PATH(s) alphabetically (optional, enabled by default). Controlled with the <code>sort</code> parameter.</li>\n<li>Removes folders from PATH(s) that do not exist on the filesystem (optional, enabled by default). Controlled with the <code>remove_non_existent</code> -parameter.</li>\n<li>Removing from \"User PATH\" the entries that are in the \"System PATH\" (optional, enabled by default). Controlled with the <code>remove_user_duplicates</code>-parameter.</li>\n</ul>\n<h4>Screenshots of User PATH before and after clean:</h4>\n<p><img alt=\"User PATH\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7850df403c5daeb386e50a5b1dcfeb5fb40cd4b5/696d672f757365722d6265666f72652d61667465722d636c65616e2e706e67\"></p>\n<ul>\n<li>For more detailed example, see <a href=\"docs/example_clean.md\" rel=\"nofollow\">Full example of pathtub.clean</a></li>\n<li>Full documentation of <code>clean()</code> is in the source code (<a href=\"pathtub/pathtools.py\" rel=\"nofollow\">pathtools.py</a>).</li>\n</ul>\n<h3>Rest of the docs</h3>\n<p>Did not find what you were looking for? See the <a href=\"docs/rest_of_the_docs.md\" rel=\"nofollow\">Rest of the docs</a>.</p>\n\n          </div>"}, "last_serial": 7005355, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "af8022b22da28731b0b25837b1cafacf", "sha256": "e2c1b268cc9a1ca379b2ea08aafa6bf8df12771686284fc76798acbbb77633d4"}, "downloads": -1, "filename": "pathtub-1.0.0.tar.gz", "has_sig": false, "md5_digest": "af8022b22da28731b0b25837b1cafacf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4188, "upload_time": "2020-04-10T17:33:08", "upload_time_iso_8601": "2020-04-10T17:33:08.194765Z", "url": "https://files.pythonhosted.org/packages/e5/eb/34d5c0152f77c050f5279a2e26d86f379a7cab3885918f5fcc733838f0d0/pathtub-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e8de33b3738a87ec87ab44497ebbbba6", "sha256": "8b8fb42e498e8954eab3fd234a73f7532bf5dd0830d8b9a0655e9bf5b9de7c42"}, "downloads": -1, "filename": "pathtub-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e8de33b3738a87ec87ab44497ebbbba6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4727, "upload_time": "2020-04-10T20:41:19", "upload_time_iso_8601": "2020-04-10T20:41:19.713955Z", "url": "https://files.pythonhosted.org/packages/e1/09/1fac55278e1621997222bad330518d230048d64ef470d036c9c79de2c355/pathtub-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bad04396ea83938736a786738cb7817d", "sha256": "a36d6095ef5639d79be8b85a0b5d1261b18b99be469253fd4c4e350c65977be4"}, "downloads": -1, "filename": "pathtub-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bad04396ea83938736a786738cb7817d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6307, "upload_time": "2020-04-11T17:56:06", "upload_time_iso_8601": "2020-04-11T17:56:06.272090Z", "url": "https://files.pythonhosted.org/packages/01/67/125dba04489c3a62998d3731a03e982266dcd0f7a66609f5e27ce7ccbc28/pathtub-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "472eec58c001fa179c40993ec2a00913", "sha256": "8caa35aedd5f6bf7bed6201b91d45f1f40357b8de7d2c489166840680f1fb64b"}, "downloads": -1, "filename": "pathtub-1.1.1.tar.gz", "has_sig": false, "md5_digest": "472eec58c001fa179c40993ec2a00913", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6506, "upload_time": "2020-04-11T18:15:41", "upload_time_iso_8601": "2020-04-11T18:15:41.047069Z", "url": "https://files.pythonhosted.org/packages/ee/43/70dbf5daf54a0707c7f4b2ffe4ae42db3b12abe01f3bde8a4cd83c48a40e/pathtub-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "8792e4e6e98414caf7367c9bcd43fb26", "sha256": "7ebeb1a9afcb2a548deeb4302e839be7574b02bafcf405022d4fa0fb06c07d7b"}, "downloads": -1, "filename": "pathtub-1.1.2.tar.gz", "has_sig": false, "md5_digest": "8792e4e6e98414caf7367c9bcd43fb26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8152, "upload_time": "2020-04-12T16:31:03", "upload_time_iso_8601": "2020-04-12T16:31:03.148814Z", "url": "https://files.pythonhosted.org/packages/6f/f8/14a84ce834fee7c2712bdd5f10e622027ce6b57773da8bde6c0ca4295136/pathtub-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8792e4e6e98414caf7367c9bcd43fb26", "sha256": "7ebeb1a9afcb2a548deeb4302e839be7574b02bafcf405022d4fa0fb06c07d7b"}, "downloads": -1, "filename": "pathtub-1.1.2.tar.gz", "has_sig": false, "md5_digest": "8792e4e6e98414caf7367c9bcd43fb26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8152, "upload_time": "2020-04-12T16:31:03", "upload_time_iso_8601": "2020-04-12T16:31:03.148814Z", "url": "https://files.pythonhosted.org/packages/6f/f8/14a84ce834fee7c2712bdd5f10e622027ce6b57773da8bde6c0ca4295136/pathtub-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:50 2020"}