{"info": {"author": "Tim Savannah", "author_email": "kata198@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving", "Topic :: System :: Networking", "Topic :: Utilities"], "description": "NetFetch\n========\n\nNetworked file storage and retrieval with optional password protection and compression using Redis.\n\n\nFiles are stored with a key of originating hostname and an absolute path to filename.\n\n\nFiles may be stored with a password, in which they are encrypted and the same password must be used to retrieve the data.\n\n\n**Storage**\n\n\nStore files using *netFetchPut*.\n\n        Usage: netFetchPut (options) [absolute filename]\n\n                  Stores a given file in NetFetch, optionally password\\-protecting it as well.\n\n\n                Options:\n\n\n                        \\-\\-password                 Prompt for password on storing this file\n\n\n                        \\-\\-password\\-file=fname      Read password from a given filename instead of tty. Implies \\-\\-password.\n\n\n\n                        \\-\\-no\\-preserve              Do not store owner/group/mode information\n\n\n                        \\-\\-config=/path/x.txt       Use provided config for redis. Default is to look in /etc/netfetch.cfg\n\n\n                        \\-\\-compress(=mode)          Compress the file data for storage (and decompress after fetch).\n\n                                                                           Default compression mode is lzma.\n\n                                                                           Use just --compress for this default mode.\n\n                                                                           You can specify an alternate mode by appending =MODE after --compress.\n\n                                                                           Supported modes are: 'lzma' (aka xz)   'gzip'   'bzip2'\n\n\n\n        Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded\n\n          to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves\n\n          to the same absolute location. It is safest to just specify an absolute path yourself.\n\n\n        Example: netFetchPut /Data/myfile.db\n\n\n**Retrieval**\n\nRetrieve files using *netFetchGet*\n\n        Usage: netFetchGet (options) [hostname] [filename] [output filename]\n\n                Downloads a file uploaded from hostname, given an absolute filename.\n\n                If \"output filename\" is \"\\-\\-\", output will be to stdout.\n\n\n                Options:\n\n\n                        \\-\\-password                  Prompts for password. If file is encrypted, a password must be provided.\n\n\n                        \\-\\-password\\-file=fname       Read password from a given filename instead of tty. Implies \\-\\-password.\n\n\n\n                        \\-\\-no\\-preserve               Do not apply stored attributes (owner/group/mode)\n\n\n                        \\-\\-config=/path/config.cfg   Use provided config for redis. Default is to look in /etc/netfetch.cfg\n\n\n        Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded\n\n          to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves\n\n          to the same absolute location. It is safest to just specify an absolute path yourself.\n\n\n        Example: netFetchGet filestore01 /Data/myfile.db\n\n**Delete**\n\nDelete files using *netFetchDelete*\n\n        Usage: netFetchDelete (options) [hostname] [filename]\n\n          Deletes a NetFetch file off of provided hostname.\n\n\n\n                Options:\n\n\n                  --config=/path/config.cfg   Use provided config for redis. Default is to look in ~/.netfetch.cfg then /etc/netfetch.cfg\n\n\n\n                Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded\n\n                  to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves\n\n                  to the same absolute location. It is safest to just specify an absolute path yourself.\n\n\n         Example: netFetchDelete filestore01 /Data/myfile.db\n\n\nConfiguration\n-------------\n\nThe Redis server on which to connect is specified by a config file. The applications will check first $HOME/.netfetch.cfg, then /etc/netfetch.cfg if a \\-\\-config=/path/to/netfetch.cfg is not provided.\n\n\nExample Configuration:\n\n        [redis]\n\n        host=127.0.0.1\n\n        port=6379\n\n        db=1\n\n\nCompression\n-----------\n\nStarting with version 3.0, NetFetch supports compression. This is provided during netFetchPut by the \"--compress\" flag.\n\nThe default compression mode is lzma ( aka \"lz\" ). To use a different compression mode, specify \"--compress=MODE\" where MODE is one of lzma/xz , gzip/gz , bzip2/bz2 .\n\nCompression only need be specified on Put, Get will automatically detect which mode and decompress the results.\n\nBackwards Incompatible Changes\n------------------------------\n\nVersion 3.0 requires IndexedRedis > 5.0.0 and < 7.0.0. If you must use a version less-than 5.0.0, use version 2.0.3.\n\nThe data format used by 3.0 is compatible with version 2.0 data format, but has dropped support for 1.x format. Everything henceforth should be forward-compatible with all future versions.\n\n\nVersion 2.0 updated the storage format to a much more efficient form (directly stores instead of base64\\-encoding/decoding). This makes everything much faster and take up less space, but is incompatible with versions prior to 2.0. To fetch/put a file using the old format, use \"\\-\\-old\\-format\" with netFetchGet/netFetchPut.\n\n\nTo Migrate, fetch any files using \"\\-\\-old\\-format\", and then store them back without that flag. There is not an automatic util, because of encryption.\n\nVersion 2.0 also depends on IndexedRedis of at least version 2.9.0\n\n\nAPI\n---\n\nCan be found  http://htmlpreview.github.io/?https://github.com/kata198/NetFetch/blob/master/doc/NetFetch.html .", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kata198/NetFetch", "keywords": "NetFetch,redis,file,storage,retrieval,put,get, network,password,encrypt,netFetchPut,netFetchGet,server", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "NetFetch", "package_url": "https://pypi.org/project/NetFetch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/NetFetch/", "project_urls": {"Homepage": "https://github.com/kata198/NetFetch"}, "release_url": "https://pypi.org/project/NetFetch/3.0.3/", "requires_dist": null, "requires_python": null, "summary": "Networked file storage and retrieval with optional password protection and compression using Redis", "version": "3.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Networked file storage and retrieval with optional password protection and compression using Redis.</p>\n<p>Files are stored with a key of originating hostname and an absolute path to filename.</p>\n<p>Files may be stored with a password, in which they are encrypted and the same password must be used to retrieve the data.</p>\n<p><strong>Storage</strong></p>\n<p>Store files using <em>netFetchPut</em>.</p>\n<blockquote>\n<p>Usage: netFetchPut (options) [absolute filename]</p>\n<blockquote>\n<blockquote>\nStores a given file in NetFetch, optionally password-protecting it as well.</blockquote>\n<p>Options:</p>\n<blockquote>\n<p>\u2013password                 Prompt for password on storing this file</p>\n<p>\u2013password-file=fname      Read password from a given filename instead of tty. Implies \u2013password.</p>\n<p>\u2013no-preserve              Do not store owner/group/mode information</p>\n<p>\u2013config=/path/x.txt       Use provided config for redis. Default is to look in /etc/netfetch.cfg</p>\n<p>\u2013compress(=mode)          Compress the file data for storage (and decompress after fetch).</p>\n<blockquote>\n<p>Default compression mode is lzma.</p>\n<p>Use just \u2013compress for this default mode.</p>\n<p>You can specify an alternate mode by appending =MODE after \u2013compress.</p>\n<p>Supported modes are: \u2018lzma\u2019 (aka xz)   \u2018gzip\u2019   \u2018bzip2\u2019</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded</p>\n<blockquote>\n<p>to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves</p>\n<p>to the same absolute location. It is safest to just specify an absolute path yourself.</p>\n</blockquote>\n<p>Example: netFetchPut /Data/myfile.db</p>\n</blockquote>\n<p><strong>Retrieval</strong></p>\n<p>Retrieve files using <em>netFetchGet</em></p>\n<blockquote>\n<p>Usage: netFetchGet (options) [hostname] [filename] [output filename]</p>\n<blockquote>\n<p>Downloads a file uploaded from hostname, given an absolute filename.</p>\n<p>If \u201coutput filename\u201d is \u201c\u2013\u201d, output will be to stdout.</p>\n<p>Options:</p>\n<blockquote>\n<p>\u2013password                  Prompts for password. If file is encrypted, a password must be provided.</p>\n<p>\u2013password-file=fname       Read password from a given filename instead of tty. Implies \u2013password.</p>\n<p>\u2013no-preserve               Do not apply stored attributes (owner/group/mode)</p>\n<p>\u2013config=/path/config.cfg   Use provided config for redis. Default is to look in /etc/netfetch.cfg</p>\n</blockquote>\n</blockquote>\n<p>Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded</p>\n<blockquote>\n<p>to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves</p>\n<p>to the same absolute location. It is safest to just specify an absolute path yourself.</p>\n</blockquote>\n<p>Example: netFetchGet filestore01 /Data/myfile.db</p>\n</blockquote>\n<p><strong>Delete</strong></p>\n<p>Delete files using <em>netFetchDelete</em></p>\n<blockquote>\n<p>Usage: netFetchDelete (options) [hostname] [filename]</p>\n<blockquote>\n<blockquote>\n<p>Deletes a NetFetch file off of provided hostname.</p>\n<blockquote>\n<p>Options:</p>\n<blockquote>\n\u2013config=/path/config.cfg   Use provided config for redis. Default is to look in ~/.netfetch.cfg then /etc/netfetch.cfg</blockquote>\n<p>Provided filename is treated as an absolute path. You can use a relative path, but it will be expanded</p>\n<blockquote>\n<p>to absolute for storage. Upon fetch, you can use the same relative path, so long as it resolves</p>\n<p>to the same absolute location. It is safest to just specify an absolute path yourself.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Example: netFetchDelete filestore01 /Data/myfile.db</p>\n</blockquote>\n</blockquote>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The Redis server on which to connect is specified by a config file. The applications will check first $HOME/.netfetch.cfg, then /etc/netfetch.cfg if a \u2013config=/path/to/netfetch.cfg is not provided.</p>\n<p>Example Configuration:</p>\n<blockquote>\n<p>[redis]</p>\n<p>host=127.0.0.1</p>\n<p>port=6379</p>\n<p>db=1</p>\n</blockquote>\n</div>\n<div id=\"compression\">\n<h2>Compression</h2>\n<p>Starting with version 3.0, NetFetch supports compression. This is provided during netFetchPut by the \u201c\u2013compress\u201d flag.</p>\n<p>The default compression mode is lzma ( aka \u201clz\u201d ). To use a different compression mode, specify \u201c\u2013compress=MODE\u201d where MODE is one of lzma/xz , gzip/gz , bzip2/bz2 .</p>\n<p>Compression only need be specified on Put, Get will automatically detect which mode and decompress the results.</p>\n</div>\n<div id=\"backwards-incompatible-changes\">\n<h2>Backwards Incompatible Changes</h2>\n<p>Version 3.0 requires IndexedRedis &gt; 5.0.0 and &lt; 7.0.0. If you must use a version less-than 5.0.0, use version 2.0.3.</p>\n<p>The data format used by 3.0 is compatible with version 2.0 data format, but has dropped support for 1.x format. Everything henceforth should be forward-compatible with all future versions.</p>\n<p>Version 2.0 updated the storage format to a much more efficient form (directly stores instead of base64-encoding/decoding). This makes everything much faster and take up less space, but is incompatible with versions prior to 2.0. To fetch/put a file using the old format, use \u201c\u2013old-format\u201d with netFetchGet/netFetchPut.</p>\n<p>To Migrate, fetch any files using \u201c\u2013old-format\u201d, and then store them back without that flag. There is not an automatic util, because of encryption.</p>\n<p>Version 2.0 also depends on IndexedRedis of at least version 2.9.0</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Can be found  <a href=\"http://htmlpreview.github.io/?https://github.com/kata198/NetFetch/blob/master/doc/NetFetch.html\" rel=\"nofollow\">http://htmlpreview.github.io/?https://github.com/kata198/NetFetch/blob/master/doc/NetFetch.html</a> .</p>\n</div>\n\n          </div>"}, "last_serial": 2872088, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5bbc8502f27fd45d3f50c7535be0a6af", "sha256": "79adb34bfc8d0bb6854e166c2e8f0e7d52f6ab77820d11a05de1c8c8455aecca"}, "downloads": -1, "filename": "NetFetch-1.0.tar.gz", "has_sig": false, "md5_digest": "5bbc8502f27fd45d3f50c7535be0a6af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27252, "upload_time": "2015-10-04T05:33:42", "upload_time_iso_8601": "2015-10-04T05:33:42.193719Z", "url": "https://files.pythonhosted.org/packages/98/f9/ff3fb2dbab0f2cf2a5c59a7fe11820d92631d8b634f8f17d064267ccfe7c/NetFetch-1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "83d3cd5de870eb4c943d56a5c893d6a1", "sha256": "e2f05dda916e8ca57a03df6450a6dcd53c747ef08f27317e8ea045bb3ceb35b5"}, "downloads": -1, "filename": "NetFetch-1.0.0.tar.gz", "has_sig": false, "md5_digest": "83d3cd5de870eb4c943d56a5c893d6a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27252, "upload_time": "2015-10-04T05:35:20", "upload_time_iso_8601": "2015-10-04T05:35:20.461874Z", "url": "https://files.pythonhosted.org/packages/95/86/6adf9dc5e197f0cbafe8b4eab058df01bee17ef3b583c603d9defd03fd05/NetFetch-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "8efe427c0a9dc1e4e2fa802f31171a51", "sha256": "86c21c032f7d953577fc690b23faa5cd3c9bc77bc435ee6513b85210f3aab7d1"}, "downloads": -1, "filename": "NetFetch-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8efe427c0a9dc1e4e2fa802f31171a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28116, "upload_time": "2015-12-28T23:28:22", "upload_time_iso_8601": "2015-12-28T23:28:22.387138Z", "url": "https://files.pythonhosted.org/packages/fd/7b/a7e95af8339ab5eab31d14930d2003c62a10f996bf05ba79cb723f88581e/NetFetch-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "e08b59adc7c225e5ba8793a1179d6208", "sha256": "64ff5b676b1acf459df3bba33ad74b502219d9cc663f77a105447186da4ec2f6"}, "downloads": -1, "filename": "NetFetch-2.0.1.tar.gz", "has_sig": false, "md5_digest": "e08b59adc7c225e5ba8793a1179d6208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28142, "upload_time": "2015-12-28T23:32:46", "upload_time_iso_8601": "2015-12-28T23:32:46.522075Z", "url": "https://files.pythonhosted.org/packages/64/0c/4a2917ab2a2d98620f2f664c76ab7ffa9b060d03c6878af1720adc3c6530/NetFetch-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "57192850ffbdfe99435d8ee68519d2e4", "sha256": "e1d14ba6bb634f335c500b244e6e09fdebeda8edf51e4108d5c736d0a95e836f"}, "downloads": -1, "filename": "NetFetch-2.0.2.tar.gz", "has_sig": false, "md5_digest": "57192850ffbdfe99435d8ee68519d2e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27190, "upload_time": "2015-12-29T17:34:23", "upload_time_iso_8601": "2015-12-29T17:34:23.360490Z", "url": "https://files.pythonhosted.org/packages/5b/f6/d16ffd43d95d2d64396804746b0d060c2b69e9f08af15df29a6e6515670a/NetFetch-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "0e10272a0d6a6413473fda7114a5ff49", "sha256": "91566e57941fdb0dca9d325af93cfb1b006abea152c631a77c0e9b1a4aa25bf5"}, "downloads": -1, "filename": "NetFetch-2.0.3.tar.gz", "has_sig": false, "md5_digest": "0e10272a0d6a6413473fda7114a5ff49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28171, "upload_time": "2017-05-13T19:50:14", "upload_time_iso_8601": "2017-05-13T19:50:14.847238Z", "url": "https://files.pythonhosted.org/packages/15/23/50ef4e91718071c2d77c889c1f508e77c54fa537901707468305a31afe14/NetFetch-2.0.3.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "6459fb857fcc25b3cecdf765d6521a33", "sha256": "33a924c90093af498bfde2f9037d4267fbe94c3e9715606548ca0da23ae0d9ba"}, "downloads": -1, "filename": "NetFetch-3.0.3.tar.gz", "has_sig": false, "md5_digest": "6459fb857fcc25b3cecdf765d6521a33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60717, "upload_time": "2017-05-13T20:58:41", "upload_time_iso_8601": "2017-05-13T20:58:41.487247Z", "url": "https://files.pythonhosted.org/packages/e2/78/7458e0175c127ca8e0b51845d945ec11c128ae384427db234133feef6d19/NetFetch-3.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6459fb857fcc25b3cecdf765d6521a33", "sha256": "33a924c90093af498bfde2f9037d4267fbe94c3e9715606548ca0da23ae0d9ba"}, "downloads": -1, "filename": "NetFetch-3.0.3.tar.gz", "has_sig": false, "md5_digest": "6459fb857fcc25b3cecdf765d6521a33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60717, "upload_time": "2017-05-13T20:58:41", "upload_time_iso_8601": "2017-05-13T20:58:41.487247Z", "url": "https://files.pythonhosted.org/packages/e2/78/7458e0175c127ca8e0b51845d945ec11c128ae384427db234133feef6d19/NetFetch-3.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:59 2020"}