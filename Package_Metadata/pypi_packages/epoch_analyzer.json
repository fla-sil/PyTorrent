{"info": {"author": "Martin van Wingerden", "author_email": "martinvw@mtin.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: System :: Filesystems", "Topic :: Terminals", "Topic :: Utilities"], "description": "=============================\nWelcome to the Epoch Analyzer\n=============================\n\n.. image:: https://travis-ci.org/martinvw/epoch-analyzer.png?branch=master\n    :target: https://travis-ci.org/martinvw/epoch-analyzer\n\n.. image:: https://coveralls.io/repos/martinvw/epoch-analyzer/badge.png?branch=master\n  :target: https://coveralls.io/r/martinvw/epoch-analyzer?branch=master\n\nA python module to analyze numbers to determine on which epoch they might be based and in what unit they might be expressed.\n\nInstallation\n------------\n\n1. Install using pip:\n\n   ``pip install epoch_analyzer``\n\n   for windows:\n\n   ``py -m pip install epoch_analyzer``\n\n   Alternatively, you can download or clone this repo and call ``pip install -e .``.\n\nUsage in Python\n---------------\n\nImport the EpochTester from the package epoch_analyzer\n\n``from epoch_analyzer import EpochTester``\n\nIf you desire you can pass a min_date and max_date which are used for reference.\n\nGiven the resulting object you can call test or convert, for either testing numbers for a probable format or (batch) converting lists of numbers to dates.\n\nUsage EpochTester.test\n----------------------\n\nYou can pass one number, an iterable list of numbers (for example a counter) to this method.\n\nFor each number one test conversion is performed, it then check which format matches most of the values, a counter object is returned. By calling most_common on that object, the items can be iterated in order starting at the most likely options.\n\n\n.. code-block:: python\n\n  from epoch_analyzer import EpochTester\n\n  tester = EpochTester()\n  results = tester.test({12345435, 2999663906})\n\n  for match, occurrence in results.most_common():\n        print(\"\\t%s:\\t%d%%\" % (match, occurrence))\n\n\nUsage EpochTester.convert\n-------------------------\n\nIf you have an unknown type and want conversion to all plausible options you can use this method. If you already know the format its better to fetch a convertor and use that, see alse the option described below.\n\n.. code-block:: python\n\n  from epoch_analyzer import EpochTester\n\n  tester = EpochTester()\n  results = tester.convert({12345435, 2999663906})\n\n  for input, matches in results.items():\n    print(\"%d: #%d matches\" % (input, len(matches)))\n\n    for label, result in matches:\n      print(\"\\t%s:\\t%s%%\" % (label, result))\n\nOutput:\n\n.. code-block:: sh\n\n  2999663906: #1 matches\n  \t 4-Bytes bit-based timestamp since 1970:\t2014-11-05 19:52:34%\n  12345435: #0 matches\n\n\nUsage for specific conversions\n------------------------------\n\nIf you know with which epoch you are working and you are converting single numbers than the conversion is quite simple. In that case you don't have to use the convert method but you just request the specific convertor and use that, see the following example.\n\n.. code-block:: python\n\n  from epoch_analyzer import EpochTester\n\n  convertor = EpochTester().get_convertor('4-Bytes bit-based timestamp since 1970')\n\n  print(convertor.convert_to_date(2999663906)) # prints '2014-11-05 19:52:34'\n\n\nUsage from the command line\n---------------------------\n\nWhen the module is correctly installed, the command `epoch` should be available from your path. There are a lot of options, which are listed when calling the command without any arguments.\n\nSome examples:\n\nJust convert a single value:\n\n``epoch 1394543556``\n\nOutput:\n\n.. code-block:: sh\n\n  For input 1394543556:\n    Number Of Seconds Since Unix Epoch (2014-03-11 13:12:36)\n\n\nConvert a list of timestamp from a file and output them to a file as unix timestamp.\n\n``epoch -f input.txt -u > output-timestamps.txt``\n\nMake a summary of the matches from a list of timestamps from a file.\n\n``epoch -f input.txt --summary``\n\nOutput:\n\n.. code-block:: sh\n\n  Summary for 5 inputs:\n  \t1.\tNumber Of Seconds Since Unix Epoch:\t40%\n  \t2.\tNumber Of Minutes Since Mac OSX Epoch:\t40%\n  \t3.\tNumber Of Mili Seconds Since Unix Epoch:\t20%\n\nSupply a minimum (which is in this case out-of-range for this unixtime):\n\n``epoch --min 2014-12-01 1394543556``\n\nOutput:\n\n.. code-block:: sh\n\n  For input 1394543556:\n    No matching pattern was found\n\nA space separated hexadecimal input is supported:\n\n``epoch \"aa bb\" --hex``\n\nOutput (Note that big and little endian are both tested):\n\n.. code-block:: sh\n\n  For input 48042:\n  \tNo matching pattern was found\n  For input 43707:\n  \tNo matching pattern was found\n\n\nUsage from the command line: scanning binary files\n--------------------------------------------------\n\nWhen the module is correctly installed (note that termcolor is a prerequisite), the command `epoch_scan` should be available from your path. There are a lot of options, which are listed when calling the command without any arguments.\n\nThe table width is required to make columns and spot patterns. If your data has a fixed table width its most of the time easy to detect by just resizing your hex editor until you see clear columns of repeating or similair data being displayed. Compare the following two examples:\n\n.. code-block::\n\n   \u00aa..!B....tI.v..:r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ........\n   .w\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ......\n   ...w\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ....\n   .....w\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B ..\n   .......w\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B \n   .........w\n   \n.. code-block::\n\n   \u00aa..!B....tI.v..:r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n   \u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n   \u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n   \u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n   \u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n\nSome examples:\n\nScan for epoch values in the file above:\n\n``epoch_scan -t 44 raw.log``\n\nOutput:\n\n.. code-block:: sh\n\n    Sample picked from offset: 4\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (big end.)      22282752        =>   1970-05-10 00:08:00    4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (little end.)   1677722196      =>   None                   4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (little end.)   -1441202176     =>   2012-08-12 16:00:00    4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (little end.)   1109458944      =>   1986-08-16 16:00:00    4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (big end.)      -1441791967     =>   2012-08-08 00:00:33    4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (little end.)   1109458960      =>   1986-08-16 16:00:16    4-Bytes bit-based timestamp since 1970 [0.900000]\n    44036102 01540200 64000019 AA000021 42200005 00000000 00000077 AA100021 42100001 07744901 77000539      (little end.)   117506064       =>   None                   4-Bytes bit-based timestamp since 1970 [0.900000]\n    \nThe outputs shows a random sample from the file. Each match is highlighted (blue for big endian, green for little endian). The bytes are shown in capital hex and displayed in groups of 4 bytes. To aid the interpretation of the results, both the numeric value and the converted value are shown for the matching format.\n\nOther options which might be helpfull are:\n\n* using a fixed sample -s\n* defining a --min or --max if you expect a specific period\n* limit the number of items to process -c", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/martinvw/epoch-analyzer/tarball/v0.4", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/martinvw/epoch-analyzer", "keywords": "datetime,timestamp,epoch", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "epoch_analyzer", "package_url": "https://pypi.org/project/epoch_analyzer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/epoch_analyzer/", "project_urls": {"Download": "https://github.com/martinvw/epoch-analyzer/tarball/v0.4", "Homepage": "https://github.com/martinvw/epoch-analyzer"}, "release_url": "https://pypi.org/project/epoch_analyzer/0.4/", "requires_dist": null, "requires_python": null, "summary": "Utility detect probable date/time formats given a numeric input.", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/martinvw/epoch-analyzer\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/martinvw/epoch-analyzer.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c103e537033f8883e91a8db044b0da8f644a7297/68747470733a2f2f7472617669732d63692e6f72672f6d617274696e76772f65706f63682d616e616c797a65722e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/martinvw/epoch-analyzer?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/martinvw/epoch-analyzer/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1348922041bb4cb4a1b38b69728be8b6ccbab249/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d617274696e76772f65706f63682d616e616c797a65722f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>A python module to analyze numbers to determine on which epoch they might be based and in what unit they might be expressed.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install using pip:</p>\n<p><tt>pip install epoch_analyzer</tt></p>\n<p>for windows:</p>\n<p><tt>py <span class=\"pre\">-m</span> pip install epoch_analyzer</tt></p>\n<p>Alternatively, you can download or clone this repo and call <tt>pip install <span class=\"pre\">-e</span> .</tt>.</p>\n</li>\n</ol>\n</div>\n<div id=\"usage-in-python\">\n<h2>Usage in Python</h2>\n<p>Import the EpochTester from the package epoch_analyzer</p>\n<p><tt>from epoch_analyzer import EpochTester</tt></p>\n<p>If you desire you can pass a min_date and max_date which are used for reference.</p>\n<p>Given the resulting object you can call test or convert, for either testing numbers for a probable format or (batch) converting lists of numbers to dates.</p>\n</div>\n<div id=\"usage-epochtester-test\">\n<h2>Usage EpochTester.test</h2>\n<p>You can pass one number, an iterable list of numbers (for example a counter) to this method.</p>\n<p>For each number one test conversion is performed, it then check which format matches most of the values, a counter object is returned. By calling most_common on that object, the items can be iterated in order starting at the most likely options.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">epoch_analyzer</span> <span class=\"kn\">import</span> <span class=\"n\">EpochTester</span>\n\n<span class=\"n\">tester</span> <span class=\"o\">=</span> <span class=\"n\">EpochTester</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">tester</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">({</span><span class=\"mi\">12345435</span><span class=\"p\">,</span> <span class=\"mi\">2999663906</span><span class=\"p\">})</span>\n\n<span class=\"k\">for</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">occurrence</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">():</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"se\">\\t</span><span class=\"si\">%d%%</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">occurrence</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"usage-epochtester-convert\">\n<h2>Usage EpochTester.convert</h2>\n<p>If you have an unknown type and want conversion to all plausible options you can use this method. If you already know the format its better to fetch a convertor and use that, see alse the option described below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">epoch_analyzer</span> <span class=\"kn\">import</span> <span class=\"n\">EpochTester</span>\n\n<span class=\"n\">tester</span> <span class=\"o\">=</span> <span class=\"n\">EpochTester</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">tester</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">({</span><span class=\"mi\">12345435</span><span class=\"p\">,</span> <span class=\"mi\">2999663906</span><span class=\"p\">})</span>\n\n<span class=\"k\">for</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">matches</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\">: #</span><span class=\"si\">%d</span><span class=\"s2\"> matches\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)))</span>\n\n  <span class=\"k\">for</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\t</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"se\">\\t</span><span class=\"si\">%s%%</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"m\">2999663906</span>: <span class=\"c1\">#1 matches\n</span>       <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span>:        <span class=\"m\">2014</span>-11-05 <span class=\"m\">19</span>:52:34%\n<span class=\"m\">12345435</span>: <span class=\"c1\">#0 matches</span>\n</pre>\n</div>\n<div id=\"usage-for-specific-conversions\">\n<h2>Usage for specific conversions</h2>\n<p>If you know with which epoch you are working and you are converting single numbers than the conversion is quite simple. In that case you don\u2019t have to use the convert method but you just request the specific convertor and use that, see the following example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">epoch_analyzer</span> <span class=\"kn\">import</span> <span class=\"n\">EpochTester</span>\n\n<span class=\"n\">convertor</span> <span class=\"o\">=</span> <span class=\"n\">EpochTester</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_convertor</span><span class=\"p\">(</span><span class=\"s1\">'4-Bytes bit-based timestamp since 1970'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">convertor</span><span class=\"o\">.</span><span class=\"n\">convert_to_date</span><span class=\"p\">(</span><span class=\"mi\">2999663906</span><span class=\"p\">))</span> <span class=\"c1\"># prints '2014-11-05 19:52:34'</span>\n</pre>\n</div>\n<div id=\"usage-from-the-command-line\">\n<h2>Usage from the command line</h2>\n<p>When the module is correctly installed, the command <cite>epoch</cite> should be available from your path. There are a lot of options, which are listed when calling the command without any arguments.</p>\n<p>Some examples:</p>\n<p>Just convert a single value:</p>\n<p><tt>epoch 1394543556</tt></p>\n<p>Output:</p>\n<pre>For input <span class=\"m\">1394543556</span>:\n  Number Of Seconds Since Unix Epoch <span class=\"o\">(</span><span class=\"m\">2014</span>-03-11 <span class=\"m\">13</span>:12:36<span class=\"o\">)</span>\n</pre>\n<p>Convert a list of timestamp from a file and output them to a file as unix timestamp.</p>\n<p><tt>epoch <span class=\"pre\">-f</span> input.txt <span class=\"pre\">-u</span> &gt; <span class=\"pre\">output-timestamps.txt</span></tt></p>\n<p>Make a summary of the matches from a list of timestamps from a file.</p>\n<p><tt>epoch <span class=\"pre\">-f</span> input.txt <span class=\"pre\">--summary</span></tt></p>\n<p>Output:</p>\n<pre>Summary <span class=\"k\">for</span> <span class=\"m\">5</span> inputs:\n      <span class=\"m\">1</span>.      Number Of Seconds Since Unix Epoch:     <span class=\"m\">40</span>%\n      <span class=\"m\">2</span>.      Number Of Minutes Since Mac OSX Epoch:  <span class=\"m\">40</span>%\n      <span class=\"m\">3</span>.      Number Of Mili Seconds Since Unix Epoch:        <span class=\"m\">20</span>%\n</pre>\n<p>Supply a minimum (which is in this case out-of-range for this unixtime):</p>\n<p><tt>epoch <span class=\"pre\">--min</span> <span class=\"pre\">2014-12-01</span> 1394543556</tt></p>\n<p>Output:</p>\n<pre>For input <span class=\"m\">1394543556</span>:\n  No matching pattern was found\n</pre>\n<p>A space separated hexadecimal input is supported:</p>\n<p><tt>epoch \"aa bb\" <span class=\"pre\">--hex</span></tt></p>\n<p>Output (Note that big and little endian are both tested):</p>\n<pre>For input <span class=\"m\">48042</span>:\n      No matching pattern was found\nFor input <span class=\"m\">43707</span>:\n      No matching pattern was found\n</pre>\n</div>\n<div id=\"usage-from-the-command-line-scanning-binary-files\">\n<h2>Usage from the command line: scanning binary files</h2>\n<p>When the module is correctly installed (note that termcolor is a prerequisite), the command <cite>epoch_scan</cite> should be available from your path. There are a lot of options, which are listed when calling the command without any arguments.</p>\n<p>The table width is required to make columns and spot patterns. If your data has a fixed table width its most of the time easy to detect by just resizing your hex editor until you see clear columns of repeating or similair data being displayed. Compare the following two examples:</p>\n<pre>\u00aa..!B....tI.v..:r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ........\n.w\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ......\n...w\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B ....\n.....w\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B ..\n.......w\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B\n.........w\n</pre>\n<pre>\u00aa..!B....tI.v..:r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n\u00aa..!B....tI.w..9r.#..gd.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n\u00aa..!B....tI.w..9q.\"..id.....l...._..2..9D.a..T..d...\u00aa..!B .........w\n</pre>\n<p>Some examples:</p>\n<p>Scan for epoch values in the file above:</p>\n<p><tt>epoch_scan <span class=\"pre\">-t</span> 44 raw.log</tt></p>\n<p>Output:</p>\n<pre>Sample picked from offset: <span class=\"m\">4</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>big end.<span class=\"o\">)</span>      <span class=\"nv\">22282752</span>        <span class=\"o\">=</span>&gt;   <span class=\"m\">1970</span>-05-10 <span class=\"m\">00</span>:08:00    <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>little end.<span class=\"o\">)</span>   <span class=\"nv\">1677722196</span>      <span class=\"o\">=</span>&gt;   None                   <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>little end.<span class=\"o\">)</span>   -1441202176     <span class=\"o\">=</span>&gt;   <span class=\"m\">2012</span>-08-12 <span class=\"m\">16</span>:00:00    <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>little end.<span class=\"o\">)</span>   <span class=\"nv\">1109458944</span>      <span class=\"o\">=</span>&gt;   <span class=\"m\">1986</span>-08-16 <span class=\"m\">16</span>:00:00    <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>big end.<span class=\"o\">)</span>      -1441791967     <span class=\"o\">=</span>&gt;   <span class=\"m\">2012</span>-08-08 <span class=\"m\">00</span>:00:33    <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>little end.<span class=\"o\">)</span>   <span class=\"nv\">1109458960</span>      <span class=\"o\">=</span>&gt;   <span class=\"m\">1986</span>-08-16 <span class=\"m\">16</span>:00:16    <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n<span class=\"m\">44036102</span> <span class=\"m\">01540200</span> <span class=\"m\">64000019</span> AA000021 <span class=\"m\">42200005</span> <span class=\"m\">00000000</span> <span class=\"m\">00000077</span> AA100021 <span class=\"m\">42100001</span> <span class=\"m\">07744901</span> <span class=\"m\">77000539</span>      <span class=\"o\">(</span>little end.<span class=\"o\">)</span>   <span class=\"nv\">117506064</span>       <span class=\"o\">=</span>&gt;   None                   <span class=\"m\">4</span>-Bytes bit-based timestamp since <span class=\"m\">1970</span> <span class=\"o\">[</span><span class=\"m\">0</span>.900000<span class=\"o\">]</span>\n</pre>\n<p>The outputs shows a random sample from the file. Each match is highlighted (blue for big endian, green for little endian). The bytes are shown in capital hex and displayed in groups of 4 bytes. To aid the interpretation of the results, both the numeric value and the converted value are shown for the matching format.</p>\n<p>Other options which might be helpfull are:</p>\n<ul>\n<li>using a fixed sample -s</li>\n<li>defining a \u2013min or \u2013max if you expect a specific period</li>\n<li>limit the number of items to process -c</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2070170, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "17e4c5d1ee72b381633bd95d8ad2bc4b", "sha256": "1b41a12add570a7b4f849095dddfd1a548aa8ae0882158ec2641ac04679a98e4"}, "downloads": -1, "filename": "epoch_analyzer-0.1.tar.gz", "has_sig": false, "md5_digest": "17e4c5d1ee72b381633bd95d8ad2bc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6323, "upload_time": "2015-04-28T12:50:05", "upload_time_iso_8601": "2015-04-28T12:50:05.261928Z", "url": "https://files.pythonhosted.org/packages/2d/1d/409805d93b14bc1a84456170bb89e637739694e4fd0c8ee89056d808a477/epoch_analyzer-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f2c16e2a9e9f9dc489fd9ae755b25409", "sha256": "0c7464ac49a2b7102d537e4b00fa2a369b10187e0dbf668f60a9b6333001fe83"}, "downloads": -1, "filename": "epoch-analyzer-0.2.tar.gz", "has_sig": false, "md5_digest": "f2c16e2a9e9f9dc489fd9ae755b25409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7383, "upload_time": "2015-06-08T09:16:24", "upload_time_iso_8601": "2015-06-08T09:16:24.660329Z", "url": "https://files.pythonhosted.org/packages/52/23/5c398d271d54eced0e0aed605c26c2d6c7b5fbde0bf445080834d4f25e4e/epoch-analyzer-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "c0529e52391f9a02482e9511323489b1", "sha256": "a7c7eb478be2e273aa2e9a6c2268ab0d6f2b17c2af5fb8ff3c8ed66ecfff0349"}, "downloads": -1, "filename": "epoch_analyzer-0.3.tar.gz", "has_sig": false, "md5_digest": "c0529e52391f9a02482e9511323489b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8988, "upload_time": "2015-06-17T07:53:20", "upload_time_iso_8601": "2015-06-17T07:53:20.446907Z", "url": "https://files.pythonhosted.org/packages/ec/41/eb347b74def4d835907af98f46397aeede4b925565bf0c6f08d71d67625d/epoch_analyzer-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c86d85b51121ac819c2dd27ba219524d", "sha256": "42f9179666f087df6b8afbf2f04a41626f2630797278804447c02d8a303affbe"}, "downloads": -1, "filename": "epoch_analyzer-0.4.tar.gz", "has_sig": false, "md5_digest": "c86d85b51121ac819c2dd27ba219524d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12145, "upload_time": "2016-04-18T20:02:19", "upload_time_iso_8601": "2016-04-18T20:02:19.432574Z", "url": "https://files.pythonhosted.org/packages/51/5a/aea0eb847362a74cad9fb72a6e36868e93a2d3235786ba242e7a62e37e82/epoch_analyzer-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c86d85b51121ac819c2dd27ba219524d", "sha256": "42f9179666f087df6b8afbf2f04a41626f2630797278804447c02d8a303affbe"}, "downloads": -1, "filename": "epoch_analyzer-0.4.tar.gz", "has_sig": false, "md5_digest": "c86d85b51121ac819c2dd27ba219524d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12145, "upload_time": "2016-04-18T20:02:19", "upload_time_iso_8601": "2016-04-18T20:02:19.432574Z", "url": "https://files.pythonhosted.org/packages/51/5a/aea0eb847362a74cad9fb72a6e36868e93a2d3235786ba242e7a62e37e82/epoch_analyzer-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:56 2020"}