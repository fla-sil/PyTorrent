{"info": {"author": "Keiron O'Shea", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# DIMEpy: Direct Infusion MEtablomics processing in python\n\n[![Project Status: Active - The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/0.1.0/active.svg)](http://www.repostatus.org/#active)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/DIMEpy.svg)\n![PyPI](https://img.shields.io/pypi/v/DIMEpy.svg)\n![PyPI - License](https://img.shields.io/pypi/l/DIMEpy.svg)\n![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3340120.svg)\n![PyPI - Status](https://img.shields.io/pypi/status/DIMEpy.svg)\n[![Documentation Status](https://readthedocs.org/projects/dimepy/badge/?version=latest)](https://dimepy.readthedocs.io/en/latest/?badge=latest)\n[![Downloads](https://pepy.tech/badge/dimepy)](https://pepy.tech/project/dimepy)\n[![Build Status](https://travis-ci.org/AberystwythSystemsBiology/DIMEpy.svg?branch=master)](https://travis-ci.org/AberystwythSystemsBiology/DIMEpy)\n\nPython package for the high-throughput nontargeted metabolite fingerprinting of nominal mass direct injection mass spectrometry directly from mzML files.\n\nThis work is very much inspired by the methods detailed in [High-throughput, nontargeted metabolite fingerprinting using nominal mass flow injection electrospray mass spectrometry (Beckmann, et al, 2008)](https://www.nature.com/articles/nprot.2007.500). \n\n## Features\n\n- Loading mass spectrometry files from mzML.\n  - Support for polarity switching.\n  - MAD-estimated infusion profiling.\n- Assay-wide outlier spectrum detection.\n- Spurious peak elimination.\n- Spectrum export for direct dissemination using Metaboanalyst.\n- Spectral binning.\n- Value imputation.\n- Spectral normalisation.\n  - including TIC, median, mean...\n- Spectral transformation.\n  - including log10, cube, nlog, log2, glog, sqrt, ihs...\n- Export to array for statistical analysis in Metaboanalyst.\n\n## Installation\n\nDIMEpy requires Python 3+ and is unfortunately not compatible with Python 2. If you are still using Python 2, a clever workaround is to install Python 3 and use that instead.\n\nYou can install it through ```pypi``` using ```pip```:\n\n```\npip install dimepy\n```\n\nIf you want the 'bleeding edge' version this, you can also install directly from this repository using ```git``` - but beware of dragons:\n\n```\npip install git+https://www.github.com/AberystwythSystemsBiology/DIMEpy\n```\n\n## Usage\n\nTo use the package, type the following into your Python console:\n\n```python\n>>> import dimepy\n```\n\nAt the moment, this pipeline only supports mzML files. You can easily convert proprietary formats to mzML using [ProteoWizard](http://www.proteowizard.org/download.html).\n\n### Loading a single file\n\nIf you are only going to load in a single file for fingerprint matrix estimation, then just create a new spectrum object. If the sample belongs to a characteristic, it is recommend that you also pass it through when instantiating a new ```Spectrum``` object.\n\n```python\n>>> filepath = \"/file/to/file.mzML\"\n>>> spec = dimepy.Spectrum(filepath, identifier=\"example\", stratification=\"class_one\")\n/file/to/file.mzML\n```\n\nBy default the Spectrum object doesn't set a snr estimator. It is **strongly recommended** that you set a signal to noise estimation method when instantiating the Spectrum object.\n\nIf your experimental protocol makes use of mixed-polarity scanning, then please ensure that you limit the scan ranges to best match what polarity you're interested in analysing:\n\n```python\n>>> spec.limit_polarity(\"negative\")\n```\n\n\nIf you are using FIE-MS it is strongly recommended that you use just the infusion profile to generate your mass spectrum. For example, if your scan profiles look like this:\n\n```\n        |        _\n      T |       / \\\n      I |      /   \\_\n      C |_____/       \\_________________\n        0     0.5     1     1.5     2 [min]\n```\n\nThen it is fair to assume that the infusion occured during the scans ranging from 30 seconds to 1 minute. The ```limit_infusion()``` method does this by estimating the median absolute deviation (MAD) of total ion counts (TIC) before limiting the profile to the range between the time range in which whatever multiple of MAD has been estimated:\n\n```python\n>>> spec.limit_infusion(2) # 2 times the MAD.\n```\n\nNow, we are free to load in the scans to generate a base mass_spectrum:\n\n```python\n>>> spec.load_scans()\n```\n\nYou should now be able to access the generated mass spectrum using the ```masses``` and ```intensities``` attributes:\n\n```python\n>>> spec.masses\narray([ ... ])\n>>> spec.intensities\narray([ ... ])\n```\n\n### Working with multiple files\n\nA more realistic pipeline would be to use multiple mass-spectrum files. This is where things really start to get interesting. The ```SpectrumList``` object facilitates this through the use of the ```append``` method:\n\n```python\n>>> speclist = dimepy.SpectrumList()\n>>> speclist.append(spec)\n```\n\nYou can make use of an iterator to recursively generate ```Spectrum``` objects, or do it manually if you want.\n\nIf you're only using this pipeline to extract mass spectrum for Metabolanalyst, then you can now simply call the ```_to_csv``` method:\n\n```python\n>>> speclist.to_csv(\"/path/to/output.csv\", output_type=\"metaboanalyst\")\n```\n\nThat being said, this pipeline contains many of the preprocessing methods found in Metaboanalyst - so it may be easier for you to just use ours.\n\nAs a diagnostic measure, the TIC can provide an estimation of factos that may adversely affect the overal intensity count of a run. As a rule, it is common to remove spectrum in which the TIC deviates 2/3 times from the median-absolute deviation. We can do this by calling the ```detect_outliers``` method:\n\n```python\n>>> speclist.detect_outliers(thresh = 2, verbose=True)\nDetected Outliers: outlier_one;outlier_two \n```\n\nA common first step in the analysis of mass-spectrometry data is to bin the data to a given mass-to-ion value. To do this for all ```Spectrum``` held within our ```SpectrumList``` object, simply apply the ```bin``` method:\n\n```python\n>>> speclist.bin(0.25) # binning our data to a bin width of 0.25 m/z\n```\n\nIn FIE-MS null values should concern no more than 3% of the total number of identified bins. However, imputation is required to streamline the analysis process (as most multivariate techniques are unable to accomodate missing data points). To perform value imputation, just use ```value_imputate```:\n\n```python\n>>> speclist.value_imputate()\n```\n\nNow transforming and normalisating the the spectrum objects in an samples independent fashion can be done using the following:\n\n```python\n>>> speclist.transform()\n>>> speclist.normalise()\n```\n\nOnce completed, you are now free to export the data to a data matrix:\n\n```python\n>>> speclist.to_csv(\"/path/to/proc_metabo.csv\", output_type=\"matrix\")\n```\n\nThis should give you something akin to:\n\n| Sample ID | M0 | M1 | M2 | M3 |... |\n|-----------|----|----|----|----|----|\n| Sample 1 | 213 | 634 | 3213 | 546 | ... |\n| Sample 2 | 132 | 34 | 713 | 6546 |... |\n| Sample 3 | 1337  | 42 | 69 | 420 | ... |\n\n## Bug reporting and feature suggestions\n\nPlease report all bugs or feature suggestions to the [issues tracker](https://github.com/AberystwythSystemsBiology/DIMEpy/issues). **Please do not email me directly** as I'm struggling to keep track of what needs to be fixed. \n\nWe welcome all sorts of contribution, so please be as candid as you want(!)\n\n## Documentation\n\nDocumentation for the project can be found on its [readthedocs page](https://dimepy.readthedocs.io/en/latest/).\n\n## Contributors\n\n* **Lead Developer:** Keiron O'Shea (keo7@aber.ac.uk)\n* **Developer:** Rob Bolton (rab26@aber.ac.uk)\n* **Project Supervisor:** Chuan Lu (cul@aber.ac.uk)\n* **Project Supervisor:** Luis AJ Mur (lum@aber.ac.uk)\n* **Methods Expert:** Manfred Beckmann (meb@aber.ac.uk)\n\n## License\n\nDIMEpy is licensed under the [GNU General Public License v3.0](https://raw.githubusercontent.com/AberystwythSystemsBiology/DIMEpy/master/LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AberystwythSystemsBiology/DIMEpy", "keywords": "metabolomics,omics,processing", "license": "", "maintainer": "", "maintainer_email": "", "name": "DIMEpy", "package_url": "https://pypi.org/project/DIMEpy/", "platform": "", "project_url": "https://pypi.org/project/DIMEpy/", "project_urls": {"Homepage": "https://github.com/AberystwythSystemsBiology/DIMEpy"}, "release_url": "https://pypi.org/project/DIMEpy/1.0.0/", "requires_dist": ["numpy (==1.16.0)", "pymzml (==2.3.1)", "scipy (==1.3.0)"], "requires_python": ">= 3.2", "summary": "Python package for the high-throughput nontargeted metabolite fingerprinting of nominal mass direct injection mass spectrometry.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DIMEpy: Direct Infusion MEtablomics processing in python</h1>\n<p><a href=\"http://www.repostatus.org/#active\" rel=\"nofollow\"><img alt=\"Project Status: Active - The project has reached a stable, usable state and is being actively developed.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f0f93c8aa4f0a74b813cf9cedf23f6c1edc9bf/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f302e312e302f6163746976652e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/854e35ae52e01115f84edbaf737fada1b4de414c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f44494d4570792e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0f1ff250ae3d36fa154048291b26be7c79b7fef/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f44494d4570792e737667\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c35540b2a08339ce7e276bdb1716d7d92e6f584/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f44494d4570792e737667\">\n<img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c25c045cee1dc5a19417560746c0becfa27cd514/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333334303132302e737667\">\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0ee2cf6a7e6e7ba275d7137eab4a50b24c660dd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f44494d4570792e737667\">\n<a href=\"https://dimepy.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29add1de62228fd36ce0870e5d1d5c3956628899/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f64696d6570792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pepy.tech/project/dimepy\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11da3ef7d7674551cc443a45bd072122b07fb842/68747470733a2f2f706570792e746563682f62616467652f64696d657079\"></a>\n<a href=\"https://travis-ci.org/AberystwythSystemsBiology/DIMEpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6ce5ae19f3d1380e7de9c207e37fe11ecc76eb3/68747470733a2f2f7472617669732d63692e6f72672f416265727973747779746853797374656d7342696f6c6f67792f44494d4570792e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Python package for the high-throughput nontargeted metabolite fingerprinting of nominal mass direct injection mass spectrometry directly from mzML files.</p>\n<p>This work is very much inspired by the methods detailed in <a href=\"https://www.nature.com/articles/nprot.2007.500\" rel=\"nofollow\">High-throughput, nontargeted metabolite fingerprinting using nominal mass flow injection electrospray mass spectrometry (Beckmann, et al, 2008)</a>.</p>\n<h2>Features</h2>\n<ul>\n<li>Loading mass spectrometry files from mzML.\n<ul>\n<li>Support for polarity switching.</li>\n<li>MAD-estimated infusion profiling.</li>\n</ul>\n</li>\n<li>Assay-wide outlier spectrum detection.</li>\n<li>Spurious peak elimination.</li>\n<li>Spectrum export for direct dissemination using Metaboanalyst.</li>\n<li>Spectral binning.</li>\n<li>Value imputation.</li>\n<li>Spectral normalisation.\n<ul>\n<li>including TIC, median, mean...</li>\n</ul>\n</li>\n<li>Spectral transformation.\n<ul>\n<li>including log10, cube, nlog, log2, glog, sqrt, ihs...</li>\n</ul>\n</li>\n<li>Export to array for statistical analysis in Metaboanalyst.</li>\n</ul>\n<h2>Installation</h2>\n<p>DIMEpy requires Python 3+ and is unfortunately not compatible with Python 2. If you are still using Python 2, a clever workaround is to install Python 3 and use that instead.</p>\n<p>You can install it through <code>pypi</code> using <code>pip</code>:</p>\n<pre><code>pip install dimepy\n</code></pre>\n<p>If you want the 'bleeding edge' version this, you can also install directly from this repository using <code>git</code> - but beware of dragons:</p>\n<pre><code>pip install git+https://www.github.com/AberystwythSystemsBiology/DIMEpy\n</code></pre>\n<h2>Usage</h2>\n<p>To use the package, type the following into your Python console:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">dimepy</span>\n</pre>\n<p>At the moment, this pipeline only supports mzML files. You can easily convert proprietary formats to mzML using <a href=\"http://www.proteowizard.org/download.html\" rel=\"nofollow\">ProteoWizard</a>.</p>\n<h3>Loading a single file</h3>\n<p>If you are only going to load in a single file for fingerprint matrix estimation, then just create a new spectrum object. If the sample belongs to a characteristic, it is recommend that you also pass it through when instantiating a new <code>Spectrum</code> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"s2\">\"/file/to/file.mzML\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">dimepy</span><span class=\"o\">.</span><span class=\"n\">Spectrum</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"n\">stratification</span><span class=\"o\">=</span><span class=\"s2\">\"class_one\"</span><span class=\"p\">)</span>\n<span class=\"o\">/</span><span class=\"n\">file</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">mzML</span>\n</pre>\n<p>By default the Spectrum object doesn't set a snr estimator. It is <strong>strongly recommended</strong> that you set a signal to noise estimation method when instantiating the Spectrum object.</p>\n<p>If your experimental protocol makes use of mixed-polarity scanning, then please ensure that you limit the scan ranges to best match what polarity you're interested in analysing:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">limit_polarity</span><span class=\"p\">(</span><span class=\"s2\">\"negative\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you are using FIE-MS it is strongly recommended that you use just the infusion profile to generate your mass spectrum. For example, if your scan profiles look like this:</p>\n<pre><code>        |        _\n      T |       / \\\n      I |      /   \\_\n      C |_____/       \\_________________\n        0     0.5     1     1.5     2 [min]\n</code></pre>\n<p>Then it is fair to assume that the infusion occured during the scans ranging from 30 seconds to 1 minute. The <code>limit_infusion()</code> method does this by estimating the median absolute deviation (MAD) of total ion counts (TIC) before limiting the profile to the range between the time range in which whatever multiple of MAD has been estimated:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">limit_infusion</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># 2 times the MAD.</span>\n</pre>\n<p>Now, we are free to load in the scans to generate a base mass_spectrum:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">load_scans</span><span class=\"p\">()</span>\n</pre>\n<p>You should now be able to access the generated mass spectrum using the <code>masses</code> and <code>intensities</code> attributes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">masses</span>\n<span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"o\">...</span> <span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">intensities</span>\n<span class=\"n\">array</span><span class=\"p\">([</span> <span class=\"o\">...</span> <span class=\"p\">])</span>\n</pre>\n<h3>Working with multiple files</h3>\n<p>A more realistic pipeline would be to use multiple mass-spectrum files. This is where things really start to get interesting. The <code>SpectrumList</code> object facilitates this through the use of the <code>append</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span> <span class=\"o\">=</span> <span class=\"n\">dimepy</span><span class=\"o\">.</span><span class=\"n\">SpectrumList</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"p\">)</span>\n</pre>\n<p>You can make use of an iterator to recursively generate <code>Spectrum</code> objects, or do it manually if you want.</p>\n<p>If you're only using this pipeline to extract mass spectrum for Metabolanalyst, then you can now simply call the <code>_to_csv</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/output.csv\"</span><span class=\"p\">,</span> <span class=\"n\">output_type</span><span class=\"o\">=</span><span class=\"s2\">\"metaboanalyst\"</span><span class=\"p\">)</span>\n</pre>\n<p>That being said, this pipeline contains many of the preprocessing methods found in Metaboanalyst - so it may be easier for you to just use ours.</p>\n<p>As a diagnostic measure, the TIC can provide an estimation of factos that may adversely affect the overal intensity count of a run. As a rule, it is common to remove spectrum in which the TIC deviates 2/3 times from the median-absolute deviation. We can do this by calling the <code>detect_outliers</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">detect_outliers</span><span class=\"p\">(</span><span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Detected</span> <span class=\"n\">Outliers</span><span class=\"p\">:</span> <span class=\"n\">outlier_one</span><span class=\"p\">;</span><span class=\"n\">outlier_two</span> \n</pre>\n<p>A common first step in the analysis of mass-spectrometry data is to bin the data to a given mass-to-ion value. To do this for all <code>Spectrum</code> held within our <code>SpectrumList</code> object, simply apply the <code>bin</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">(</span><span class=\"mf\">0.25</span><span class=\"p\">)</span> <span class=\"c1\"># binning our data to a bin width of 0.25 m/z</span>\n</pre>\n<p>In FIE-MS null values should concern no more than 3% of the total number of identified bins. However, imputation is required to streamline the analysis process (as most multivariate techniques are unable to accomodate missing data points). To perform value imputation, just use <code>value_imputate</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">value_imputate</span><span class=\"p\">()</span>\n</pre>\n<p>Now transforming and normalisating the the spectrum objects in an samples independent fashion can be done using the following:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">normalise</span><span class=\"p\">()</span>\n</pre>\n<p>Once completed, you are now free to export the data to a data matrix:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">speclist</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/proc_metabo.csv\"</span><span class=\"p\">,</span> <span class=\"n\">output_type</span><span class=\"o\">=</span><span class=\"s2\">\"matrix\"</span><span class=\"p\">)</span>\n</pre>\n<p>This should give you something akin to:</p>\n<table>\n<thead>\n<tr>\n<th>Sample ID</th>\n<th>M0</th>\n<th>M1</th>\n<th>M2</th>\n<th>M3</th>\n<th>...</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sample 1</td>\n<td>213</td>\n<td>634</td>\n<td>3213</td>\n<td>546</td>\n<td>...</td>\n</tr>\n<tr>\n<td>Sample 2</td>\n<td>132</td>\n<td>34</td>\n<td>713</td>\n<td>6546</td>\n<td>...</td>\n</tr>\n<tr>\n<td>Sample 3</td>\n<td>1337</td>\n<td>42</td>\n<td>69</td>\n<td>420</td>\n<td>...</td>\n</tr></tbody></table>\n<h2>Bug reporting and feature suggestions</h2>\n<p>Please report all bugs or feature suggestions to the <a href=\"https://github.com/AberystwythSystemsBiology/DIMEpy/issues\" rel=\"nofollow\">issues tracker</a>. <strong>Please do not email me directly</strong> as I'm struggling to keep track of what needs to be fixed.</p>\n<p>We welcome all sorts of contribution, so please be as candid as you want(!)</p>\n<h2>Documentation</h2>\n<p>Documentation for the project can be found on its <a href=\"https://dimepy.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs page</a>.</p>\n<h2>Contributors</h2>\n<ul>\n<li><strong>Lead Developer:</strong> Keiron O'Shea (<a href=\"mailto:keo7@aber.ac.uk\">keo7@aber.ac.uk</a>)</li>\n<li><strong>Developer:</strong> Rob Bolton (<a href=\"mailto:rab26@aber.ac.uk\">rab26@aber.ac.uk</a>)</li>\n<li><strong>Project Supervisor:</strong> Chuan Lu (<a href=\"mailto:cul@aber.ac.uk\">cul@aber.ac.uk</a>)</li>\n<li><strong>Project Supervisor:</strong> Luis AJ Mur (<a href=\"mailto:lum@aber.ac.uk\">lum@aber.ac.uk</a>)</li>\n<li><strong>Methods Expert:</strong> Manfred Beckmann (<a href=\"mailto:meb@aber.ac.uk\">meb@aber.ac.uk</a>)</li>\n</ul>\n<h2>License</h2>\n<p>DIMEpy is licensed under the <a href=\"https://raw.githubusercontent.com/AberystwythSystemsBiology/DIMEpy/master/LICENSE\" rel=\"nofollow\">GNU General Public License v3.0</a>.</p>\n\n          </div>"}, "last_serial": 5635118, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "50aa4be3d85366a1f6eede354e304b2d", "sha256": "a3f06b1a2ba0fe72d3f864727e7cbdb57874932d43d1f61da4f58c43469ad73f"}, "downloads": -1, "filename": "dimepy-0.0.6.tar.gz", "has_sig": false, "md5_digest": "50aa4be3d85366a1f6eede354e304b2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5730, "upload_time": "2018-05-15T14:55:23", "upload_time_iso_8601": "2018-05-15T14:55:23.398624Z", "url": "https://files.pythonhosted.org/packages/91/6b/09a93fd80870d0657d9d23c2750e30b5ae7a0217b35edd53b3dbe528e9d7/dimepy-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "215fa80ef0df8e2baabdb842bf508ff9", "sha256": "034541631088db4648c9807681e92cdce5ade3994df0b8e1f9c8bf4c955ef78b"}, "downloads": -1, "filename": "dimepy-0.0.7.tar.gz", "has_sig": false, "md5_digest": "215fa80ef0df8e2baabdb842bf508ff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7348, "upload_time": "2018-05-21T12:25:51", "upload_time_iso_8601": "2018-05-21T12:25:51.632886Z", "url": "https://files.pythonhosted.org/packages/ac/7a/569e647ef5b07231d89bf32b80ca70674bedb60355d0b9209b9d2afe15fc/dimepy-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "6b5826d0bb3e5e8223a11ff5610d08b3", "sha256": "40c50362fb39bbf2c46414dfad3b971c8bb20afc38138546277bf09217df690c"}, "downloads": -1, "filename": "dimepy-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6b5826d0bb3e5e8223a11ff5610d08b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8463, "upload_time": "2018-05-21T13:18:36", "upload_time_iso_8601": "2018-05-21T13:18:36.857998Z", "url": "https://files.pythonhosted.org/packages/99/11/2381736d3f775abe82e69cc4b488ec3923df17407284ddc5e4316e5e408b/dimepy-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "89e661bed4772d0d012ac28e5a8c4826", "sha256": "5d0936701fe06a2c8626f31b234e35796a29626bcc570f86ff1151ecc9c066cb"}, "downloads": -1, "filename": "dimepy-0.0.9.tar.gz", "has_sig": false, "md5_digest": "89e661bed4772d0d012ac28e5a8c4826", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8541, "upload_time": "2018-05-21T13:20:16", "upload_time_iso_8601": "2018-05-21T13:20:16.220000Z", "url": "https://files.pythonhosted.org/packages/2a/cc/9b7fcbbfd73b7a30a196565140f46b3e36d7223007f07084b1edfb5a0233/dimepy-0.0.9.tar.gz", "yanked": false}], "0.0.9.1": [{"comment_text": "", "digests": {"md5": "bcbd88cc211af2480318c25e48fc2ebe", "sha256": "95cb8865dcc822dd907a3e4584adc9125fca67b78024507afed8f49065af8ab9"}, "downloads": -1, "filename": "dimepy-0.0.9.1.tar.gz", "has_sig": false, "md5_digest": "bcbd88cc211af2480318c25e48fc2ebe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15944, "upload_time": "2018-05-21T13:50:45", "upload_time_iso_8601": "2018-05-21T13:50:45.632592Z", "url": "https://files.pythonhosted.org/packages/08/84/553246b7de9a8891ce93cb1a7234b725512684ae364d3d0e0ea65e6b0240/dimepy-0.0.9.1.tar.gz", "yanked": false}], "0.0.9.2": [{"comment_text": "", "digests": {"md5": "744d6fc3dfc1a10ffeb110efc5da1957", "sha256": "42b71d075de4068396f352cfbaa4129a030fa48058f26bb51c7a45d3b670b6b0"}, "downloads": -1, "filename": "dimepy-0.0.9.2.tar.gz", "has_sig": false, "md5_digest": "744d6fc3dfc1a10ffeb110efc5da1957", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15958, "upload_time": "2018-05-21T14:39:54", "upload_time_iso_8601": "2018-05-21T14:39:54.119756Z", "url": "https://files.pythonhosted.org/packages/6c/46/c2930bb022f8906a41577c46f45c9b59670f755d41006f09eb142e1b2083/dimepy-0.0.9.2.tar.gz", "yanked": false}], "0.0.9.3": [{"comment_text": "", "digests": {"md5": "0d503024fe5193bccf1b62e5a2d5c95c", "sha256": "75a3cf8ee6a5d25af3aed618e95ecf49ecdb087d2488ea5605e0319cff8bd1ef"}, "downloads": -1, "filename": "dimepy-0.0.9.3.tar.gz", "has_sig": false, "md5_digest": "0d503024fe5193bccf1b62e5a2d5c95c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15337, "upload_time": "2018-05-21T15:59:59", "upload_time_iso_8601": "2018-05-21T15:59:59.831496Z", "url": "https://files.pythonhosted.org/packages/33/25/77fd48069d00eae9f2afcd57cc08b7fe921b86c663a73abeb6f6cbb9520f/dimepy-0.0.9.3.tar.gz", "yanked": false}], "0.0.9.5": [{"comment_text": "", "digests": {"md5": "9b7a79cce509fb65bdca6f9f945e088c", "sha256": "d6381d419df02e02ce391b3a1dee69426a9c4a7b2f7d9d0a8aba758a91f92532"}, "downloads": -1, "filename": "dimepy-0.0.9.5.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9b7a79cce509fb65bdca6f9f945e088c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16707, "upload_time": "2018-05-21T16:45:04", "upload_time_iso_8601": "2018-05-21T16:45:04.340606Z", "url": "https://files.pythonhosted.org/packages/57/44/6e034ac9a01f3673afea40101d85a2dec6baf832dfa555b4bb7d0e2b4ab3/dimepy-0.0.9.5.linux-x86_64.tar.gz", "yanked": false}], "0.0.9.5b0": [{"comment_text": "", "digests": {"md5": "1b5b246d1414222d72338c98b551f8fe", "sha256": "52effc63aca81828698f94824e661ec2a355af3cff97d48b149a94bf02855ef6"}, "downloads": -1, "filename": "dimepy-0.0.9.5b0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "1b5b246d1414222d72338c98b551f8fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16672, "upload_time": "2018-05-21T16:45:33", "upload_time_iso_8601": "2018-05-21T16:45:33.150124Z", "url": "https://files.pythonhosted.org/packages/5a/23/e40a5767577a6b81318d172a1aced6d450804a5305eb55ad2b81fd2208c5/dimepy-0.0.9.5b0.linux-x86_64.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e08325307fb3e2e73f7ec4e7f997be44", "sha256": "ff1358504256a6ec492957333554c665589e464a1a720c96b9abdae79da09c59"}, "downloads": -1, "filename": "dimepy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e08325307fb3e2e73f7ec4e7f997be44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17196, "upload_time": "2018-06-04T08:54:56", "upload_time_iso_8601": "2018-06-04T08:54:56.664675Z", "url": "https://files.pythonhosted.org/packages/5c/16/086ab75b1e3b50c8f9c39042406f72ac02de91a39d29ef62110918d1c5a6/dimepy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8c1df3b6794cf44b348012b46c4ed545", "sha256": "0a3884c21f39f514fdcc96e539128324f6d597b8f3ada10eb008c1f1fd7ba554"}, "downloads": -1, "filename": "dimepy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8c1df3b6794cf44b348012b46c4ed545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17219, "upload_time": "2018-06-05T14:12:51", "upload_time_iso_8601": "2018-06-05T14:12:51.179680Z", "url": "https://files.pythonhosted.org/packages/90/dd/1005728903d3c3deb588af01b832dafe63878701dd25c1108f23f9c75f99/dimepy-0.1.2.tar.gz", "yanked": false}], "0.9.999": [{"comment_text": "", "digests": {"md5": "471c02de14d536b28f40f8ec60b5fcc1", "sha256": "e6827366cfcaf983006b8e48e29b38676d85cbd41cbd315d77abe2f1dd00e866"}, "downloads": -1, "filename": "dimepy-0.9.999.tar.gz", "has_sig": false, "md5_digest": "471c02de14d536b28f40f8ec60b5fcc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14884, "upload_time": "2019-07-17T22:12:38", "upload_time_iso_8601": "2019-07-17T22:12:38.098049Z", "url": "https://files.pythonhosted.org/packages/95/c0/23a3b201b143136dbc055cc22c13bbadf4eb7f3ee2593747000bae06dc0d/dimepy-0.9.999.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "6f4b68966c6227e87acd1ad6f341863a", "sha256": "5093a7a8590980a96e4c4eecebae666e710c750fdaf2a188df80a1927bf7bf8d"}, "downloads": -1, "filename": "DIMEpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f4b68966c6227e87acd1ad6f341863a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.2", "size": 27930, "upload_time": "2019-08-05T16:00:44", "upload_time_iso_8601": "2019-08-05T16:00:44.197900Z", "url": "https://files.pythonhosted.org/packages/cd/a0/8574ef882f3a34e26d7008908f9b0cf0f57d9d88d0390847cd0ef066bd12/DIMEpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcd661989b4dd22bc6082e619ce51120", "sha256": "6f91f5ea4cd678fe76c006d2941501c433f39b4d7e543212acdd0542377779fe"}, "downloads": -1, "filename": "DIMEpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bcd661989b4dd22bc6082e619ce51120", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.2", "size": 27182, "upload_time": "2019-08-05T16:00:45", "upload_time_iso_8601": "2019-08-05T16:00:45.893856Z", "url": "https://files.pythonhosted.org/packages/dd/25/69855babac9a0546ae7447c90a309a0921dd7a5d7720bcbb903beeeb9f58/DIMEpy-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f4b68966c6227e87acd1ad6f341863a", "sha256": "5093a7a8590980a96e4c4eecebae666e710c750fdaf2a188df80a1927bf7bf8d"}, "downloads": -1, "filename": "DIMEpy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f4b68966c6227e87acd1ad6f341863a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.2", "size": 27930, "upload_time": "2019-08-05T16:00:44", "upload_time_iso_8601": "2019-08-05T16:00:44.197900Z", "url": "https://files.pythonhosted.org/packages/cd/a0/8574ef882f3a34e26d7008908f9b0cf0f57d9d88d0390847cd0ef066bd12/DIMEpy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcd661989b4dd22bc6082e619ce51120", "sha256": "6f91f5ea4cd678fe76c006d2941501c433f39b4d7e543212acdd0542377779fe"}, "downloads": -1, "filename": "DIMEpy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bcd661989b4dd22bc6082e619ce51120", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.2", "size": 27182, "upload_time": "2019-08-05T16:00:45", "upload_time_iso_8601": "2019-08-05T16:00:45.893856Z", "url": "https://files.pythonhosted.org/packages/dd/25/69855babac9a0546ae7447c90a309a0921dd7a5d7720bcbb903beeeb9f58/DIMEpy-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:21 2020"}