{"info": {"author": "Vladimir Khramov", "author_email": "hr.vlad@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "=================\ndjango-cryptocoin\n=================\n\nDjango-cryptocoin is a Django app to organize accepting bitcoin, litecoin, novacoin and other cryptocoins, which support JSON-RPC commands getnewaddress and getreceivedbyaddress.\n\nQuick Start\n===========\n\n1. Install using pip `pip install django-cryptocoin`\n\n2. Add `'django-cryptocoin',` to INSTALLED_APPS in your `settings.py`\n\n3. Run `python manage.py migrate`\n\n4. Set settings similarly as https://github.com/quantum13/django-crypto-paid-chat/blob/master/cryptochat/settings_local.py-example\n\n5. Add command `python manage.py check_incomings` to cron with interval 1 minute\n\n6. Add relation to CryptoOrder to your order model::\n\n    crypto_order = models.OneToOneField(CryptoOrder, related_name='order')\n\n7. Add handler to payment end signal (delivery digital content, sending email, etc)::\n\n    @receiver(after_pay_confirmation)\n    def after_pay(sender, **kwargs):\n        pass\n\n8. After sending form with order we need create instance of CryptoOrder and redirect to process view. Example::\n\n        if form.is_valid():\n            crypto_order = CryptoOrder(\n                currency='btc',\n                amount=0.1,#price\n                date=timezone.now(),#time of invoice\n                redirect_to=reverse('home')#view to redirect after payment\n            )\n            crypto_order.save()\n            form.instance.crypto_order = crypto_order\n            form.save()\n            return redirect('cryptocoin-order-process', addr=crypto_order.addr)\n\nAfter confirmation of transaction sended signal `after_pay_confirmation` which handler described above.\n\nExample\n=======\n\nhttps://github.com/quantum13/django-crypto-paid-chat\n\nTested cryptocoins\n==================\n\n- Bitcoin\n- Litecoin\n- Novacoin\n- Emercoin\n\nOptions\n=======\n\nCRYPTO_COINS\n------------\nDict with supported crypto currencies. Default::\n\n    {\n        'btc': 'Bitcoin',\n        'ltc': 'Litecoin',\n        'nvc': 'Novacoin',\n    }\n\nCONNECTION_STRING\n-----------------\nConnection strings for JSON-RPC commands to coin clients. Default::\n\n    {\n        'btc': 'your_bitcoin_addr_to_send_btc',\n        'ltc': 'your_litecoin_addr_to_send_ltc',\n        'nvc': 'your_novacoin_addr_to_send_nvc',\n    }\n\nCONFIRMATIONS\n-------------\nNetwork confirmations count for each crypto currency. Default::\n\n    {\n        'btc': 1,\n        'ltc': 1,\n        'nvc': 1,\n    }\n\nPROCESS_TEMPLATE\n----------------\nTemplate for process view. You can use own site template for this page. For example if you have base template `base.html` with block `content` you can create `process.html` in your template folder and paste this code::\n\n    {% extends 'base.html' %}\n\n    {% block content %}\n        {% include 'django_cryptocoin/process.html' %}\n    {% endblock %}\n\nINVOICE_TIME\n------------\nHow many seconds app will wait for payment. If you set big value, exchange rate to USD can change significantly. Default `900` seconds/\n\nGENERATED_ADDRESSES_ACCOUNT\n---------------------------\nAccount for generated addresses in your wallet. Default `django_cryptocoin`.\n\nCURRENCY_PAIRS\n--------------\nCurrency pairs for which will retrieved exchange rates from btc-e.com. To retrieve this rates run command `python manage.py get_exchange_rates`. Than you can get this rates with function `ExchangeRate.get_exchange_rate(from_currency, to_currency)`. Default::\n\n    ['btc_usd', 'btc_rur', 'btc_eur', 'ltc_usd', 'ltc_rur', 'nvc_usd']\n\n\n\nDonate\n======\n\n- BTC: 1JrV8GW9HWRHWvJNQ14fExAkfgxawAY4oq\n- LTC: LiHkeymborDtpqUh3ExYT9CXJkyucDH4Cc\n- NVC: 4U5F4GQin6QkTpbd5k9si3f4iSkn2o3v9x", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quantum13/django-cryptocoin", "keywords": null, "license": "BSD (3-Clause) License", "maintainer": null, "maintainer_email": null, "name": "django-cryptocoin", "package_url": "https://pypi.org/project/django-cryptocoin/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-cryptocoin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/quantum13/django-cryptocoin"}, "release_url": "https://pypi.org/project/django-cryptocoin/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A Django app to organize accepting bitcoin, litecoin, novacoin and other cryptocoins.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-cryptocoin is a Django app to organize accepting bitcoin, litecoin, novacoin and other cryptocoins, which support JSON-RPC commands getnewaddress and getreceivedbyaddress.</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<ol>\n<li><p>Install using pip <cite>pip install django-cryptocoin</cite></p>\n</li>\n<li><p>Add <cite>\u2018django-cryptocoin\u2019,</cite> to INSTALLED_APPS in your <cite>settings.py</cite></p>\n</li>\n<li><p>Run <cite>python manage.py migrate</cite></p>\n</li>\n<li><p>Set settings similarly as <a href=\"https://github.com/quantum13/django-crypto-paid-chat/blob/master/cryptochat/settings_local.py-example\" rel=\"nofollow\">https://github.com/quantum13/django-crypto-paid-chat/blob/master/cryptochat/settings_local.py-example</a></p>\n</li>\n<li><p>Add command <cite>python manage.py check_incomings</cite> to cron with interval 1 minute</p>\n</li>\n<li><p>Add relation to CryptoOrder to your order model:</p>\n<pre>crypto_order = models.OneToOneField(CryptoOrder, related_name='order')\n</pre>\n</li>\n<li><p>Add handler to payment end signal (delivery digital content, sending email, etc):</p>\n<pre>@receiver(after_pay_confirmation)\ndef after_pay(sender, **kwargs):\n    pass\n</pre>\n</li>\n<li><p>After sending form with order we need create instance of CryptoOrder and redirect to process view. Example:</p>\n<pre>if form.is_valid():\n    crypto_order = CryptoOrder(\n        currency='btc',\n        amount=0.1,#price\n        date=timezone.now(),#time of invoice\n        redirect_to=reverse('home')#view to redirect after payment\n    )\n    crypto_order.save()\n    form.instance.crypto_order = crypto_order\n    form.save()\n    return redirect('cryptocoin-order-process', addr=crypto_order.addr)\n</pre>\n</li>\n</ol>\n<p>After confirmation of transaction sended signal <cite>after_pay_confirmation</cite> which handler described above.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p><a href=\"https://github.com/quantum13/django-crypto-paid-chat\" rel=\"nofollow\">https://github.com/quantum13/django-crypto-paid-chat</a></p>\n</div>\n<div id=\"tested-cryptocoins\">\n<h2>Tested cryptocoins</h2>\n<ul>\n<li>Bitcoin</li>\n<li>Litecoin</li>\n<li>Novacoin</li>\n<li>Emercoin</li>\n</ul>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<div id=\"crypto-coins\">\n<h3>CRYPTO_COINS</h3>\n<p>Dict with supported crypto currencies. Default:</p>\n<pre>{\n    'btc': 'Bitcoin',\n    'ltc': 'Litecoin',\n    'nvc': 'Novacoin',\n}\n</pre>\n</div>\n<div id=\"connection-string\">\n<h3>CONNECTION_STRING</h3>\n<p>Connection strings for JSON-RPC commands to coin clients. Default:</p>\n<pre>{\n    'btc': 'your_bitcoin_addr_to_send_btc',\n    'ltc': 'your_litecoin_addr_to_send_ltc',\n    'nvc': 'your_novacoin_addr_to_send_nvc',\n}\n</pre>\n</div>\n<div id=\"confirmations\">\n<h3>CONFIRMATIONS</h3>\n<p>Network confirmations count for each crypto currency. Default:</p>\n<pre>{\n    'btc': 1,\n    'ltc': 1,\n    'nvc': 1,\n}\n</pre>\n</div>\n<div id=\"process-template\">\n<h3>PROCESS_TEMPLATE</h3>\n<p>Template for process view. You can use own site template for this page. For example if you have base template <cite>base.html</cite> with block <cite>content</cite> you can create <cite>process.html</cite> in your template folder and paste this code:</p>\n<pre>{% extends 'base.html' %}\n\n{% block content %}\n    {% include 'django_cryptocoin/process.html' %}\n{% endblock %}\n</pre>\n</div>\n<div id=\"invoice-time\">\n<h3>INVOICE_TIME</h3>\n<p>How many seconds app will wait for payment. If you set big value, exchange rate to USD can change significantly. Default <cite>900</cite> seconds/</p>\n</div>\n<div id=\"generated-addresses-account\">\n<h3>GENERATED_ADDRESSES_ACCOUNT</h3>\n<p>Account for generated addresses in your wallet. Default <cite>django_cryptocoin</cite>.</p>\n</div>\n<div id=\"currency-pairs\">\n<h3>CURRENCY_PAIRS</h3>\n<p>Currency pairs for which will retrieved exchange rates from btc-e.com. To retrieve this rates run command <cite>python manage.py get_exchange_rates</cite>. Than you can get this rates with function <cite>ExchangeRate.get_exchange_rate(from_currency, to_currency)</cite>. Default:</p>\n<pre>['btc_usd', 'btc_rur', 'btc_eur', 'ltc_usd', 'ltc_rur', 'nvc_usd']\n</pre>\n</div>\n</div>\n<div id=\"donate\">\n<h2>Donate</h2>\n<ul>\n<li>BTC: 1JrV8GW9HWRHWvJNQ14fExAkfgxawAY4oq</li>\n<li>LTC: LiHkeymborDtpqUh3ExYT9CXJkyucDH4Cc</li>\n<li>NVC: 4U5F4GQin6QkTpbd5k9si3f4iSkn2o3v9x</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 965249, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cdaa703cfe0e61f6ca186606a0800444", "sha256": "d5ed7b77caafa426926c4b50456c210f90537babd243c348074e3675c14dfd2c"}, "downloads": -1, "filename": "django-cryptocoin-0.1.zip", "has_sig": false, "md5_digest": "cdaa703cfe0e61f6ca186606a0800444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13825, "upload_time": "2014-01-09T05:32:55", "upload_time_iso_8601": "2014-01-09T05:32:55.036163Z", "url": "https://files.pythonhosted.org/packages/70/1b/c5523fb2cc8d85ff3e8143bb08b477b67c313978acf91dd045500115868d/django-cryptocoin-0.1.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "25f92fc5cbe7e2fe9427bc6613e6f272", "sha256": "a26f92785d6e6daa3d2b05b8e36daf3878fcd34c75a32c1cdb595a9881f01c54"}, "downloads": -1, "filename": "django-cryptocoin-0.1.1.zip", "has_sig": false, "md5_digest": "25f92fc5cbe7e2fe9427bc6613e6f272", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16328, "upload_time": "2014-01-09T07:03:18", "upload_time_iso_8601": "2014-01-09T07:03:18.620011Z", "url": "https://files.pythonhosted.org/packages/7f/6e/4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818/django-cryptocoin-0.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25f92fc5cbe7e2fe9427bc6613e6f272", "sha256": "a26f92785d6e6daa3d2b05b8e36daf3878fcd34c75a32c1cdb595a9881f01c54"}, "downloads": -1, "filename": "django-cryptocoin-0.1.1.zip", "has_sig": false, "md5_digest": "25f92fc5cbe7e2fe9427bc6613e6f272", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16328, "upload_time": "2014-01-09T07:03:18", "upload_time_iso_8601": "2014-01-09T07:03:18.620011Z", "url": "https://files.pythonhosted.org/packages/7f/6e/4bbcd2d2b0f15242527a59052b183f48491f463188eee7f5d8d06099b818/django-cryptocoin-0.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:36:46 2020"}