{"info": {"author": "Werner Robitza", "author_email": "werner.robitza@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Video"], "description": "h26x-extractor\n==============\n\nAuthor: Werner Robitza, with contributions from @chemag\n\nExtracts NAL units from H.264 bitstreams and decodes their type and\ncontent, if supported.\n\n**Note:** This is not a replacement for a proper tool like\n`h264bitstream <https://github.com/aizvorski/h264bitstream>`__.\n``h26x-extractor`` is not fast and not robust, but rather a playground\nfor parsing bitstreams. Use with caution!\n\nInstallation\n============\n\nVia pip:\n\n::\n\n   pip3 install h26x-extractor\n\nStatus\n======\n\nCurrently supported:\n\n-  Parsing of H.264 bitstreams\n-  Parsing of NALU\n-  Parsing of AUD\n-  Parsing of CodedSliceIDR\n-  Parsing of CodedSliceNonIDR\n-  Parsing of SPS\n-  Parsing of PPS\n\nCurrently planned:\n\n-  Parsing of SEI\n-  Parsing of VUI\n-  Parsing of H.265 bitstreams\n\nUsage\n=====\n\n::\n\n   h26x-extractor [options] <input-file>...\n\nYou can pass the ``-v`` flag to enable verbose output, e.g.\u00a0the\nfollowing. You will get, for each NAL unit:\n\n-  The bye position range\n-  The offset from the start of the stream\n-  The overall length including start code\n-  The type (also translated in plaintext)\n-  Its content in raw bytes, encoded as hex\n-  Its RBSP content\n-  A table with its content decoded, if supported\n\nExample:\n\n::\n\n   NALU bytepos:   [0, 28]\n   NALU offset:    0 Bytes\n   NALU length:    29 Bytes (including start code)\n   NALU type:      7 (Sequence parameter set)\n   NALU bytes:     0x0000000167f4000d919b28283f6022000003000200000300641e28532c\n   NALU RBSP:      0xf4000d919b28283f602200000002000000641e28532c\n\n   SPS (payload size: 22.0 Bytes)\n   +--------------------------------------+---------+\n   | field                                | value   |\n   +======================================+=========+\n   | constraint_set0_flag                 | 0       |\n   +--------------------------------------+---------+\n   | constraint_set1_flag                 | 0       |\n   +--------------------------------------+---------+\n   ....\n\nProgrammatic usage\n==================\n\nYou can also use this library in your code, e.g.:\n\n::\n\n   from h26x_extractor.h26x_parser import H26xParser\n\n   H26xParser.set_callback(\"nalu\", do_something)\n   H26xParser.parse()\n   def do_something(bytes):\n     # do something with the NALU bytes\n\nValid callbacks are:\n\n-  ``sps``\n-  ``pps``\n-  ``slice``\n-  ``aud``\n-  ``nalu``\n\nRaw data for all callbacks includes the RBSP.\n\nYou can also call the ``nalutypes`` classes to decode the individual\nfields, e.g.\u00a0``nalutypes.SPS``.\n\nLicense\n=======\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2020 Werner Robitza\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nChangelog\n=========\n\nv0.4 (2020-04-12)\n-----------------\n\n-  Bump version to 0.4.\n\n-  Update release script.\n\n-  Update readme.\n\n-  H26x_extractor: add deeper slice_header parsing (#4)\n\n   Includes:\n\n   -  passing the SPS and PPS NALUs to CodedSliceIDR and\n      CodedSliceNonIDR (which need them to go further)\n   -  adding an optional concept of order in the verbose printing, so\n      that NALU parameters are printed in the order they are parsed\n   -  implementing ordering in SPS, PPS, and CodedSliceIDR NALUs\n   -  fix on the SPS parser based on profile_idc values, per 2016-02\n      standard (Section 7.3.2.1.1, page 44). Note in particular that the\n      if loop does not include value 144\n   -  fix minor type\n      (s/slice_gropu_change_rate_minus1/slice_group_change_rate_minus1/)\n\n   Tested:\n\n   ::\n\n      $ h26x-extractor -v file.264\n      ...\n      SPS (payload size: 21.0 Bytes)\n      +--------------------------------------+---------+\n      | field                                | value   |\n      +======================================+=========+\n      | profile_idc                          | 66      |\n      +--------------------------------------+---------+\n      | constraint_set0_flag                 | 1       |\n      +--------------------------------------+---------+\n      | constraint_set1_flag                 | 1       |\n      +--------------------------------------+---------+\n      | constraint_set2_flag                 | 0       |\n      +--------------------------------------+---------+\n      | constraint_set3_flag                 | 0       |\n      +--------------------------------------+---------+\n      ...\n      NALU type:  5 (Coded slice of an IDR picture)\n      NALU bytes: 0x000000016588841afffffc2f14000416fd78e06380de6a1306bb224a722233e54ffa7cb9526c188ed1189699e7c6fd1a2307f757de5c3fca2f3d22b7fc667ccb6ff6b6a8dabb515b59fe53f8a7d83a8beb6ff17988adbfde818bdf2dafc5e7a2b5fde4a0bca4156137f8ceadff19bd5bfe233e152fbefbefbe2fab6dfe...\n      NALU RBSP:  0x88841afffffc2f14000416fd78e06380de6a1306bb224a722233e54ffa7cb9526c188ed1189699e7c6fd1a2307f757de5c3fca2f3d22b7fc667ccb6ff6b6a8dabb515b59fe53f8a7d83a8beb6ff17988adbfde818bdf2dafc5e7a2b5fde4a0bca4156137f8ceadff19bd5bfe233e152fbefbefbe2fab6dfed6d62d6ad7...\n\n      CodedSliceIDR (payload size: 4538.0 Bytes)\n      +----------------------+---------+\n      | field                | value   |\n      +======================+=========+\n      | first_mb_in_slice    | 0       |\n      +----------------------+---------+\n      | slice_type           | 7       |\n      +----------------------+---------+\n      | slice_type_clear     | I       |\n      +----------------------+---------+\n      | pic_parameter_set_id | 0       |\n      +----------------------+---------+\n      | frame_num            | 0       |\n      +----------------------+---------+\n      | idr_pic_id           | 0       |\n      ...\n\n-  Fix offset-by-one (#3)\n\n   -  h26x-extractor: add a simple parsing test\n\n   Needed to refactor the parser constructor in order to allow testing\n   binary blobs.\n\n   Tested:\n\n   Before the AUD fix patch:\n\n   ::\n\n      $ ./tests/simple_parsing.py\n\n      ========================================================================================================\n\n      NALU bytepos: [0, 5]\n      NALU offset:  0 Bytes\n      NALU length:  6 Bytes (including start code)\n      NALU type:  9 (Access unit delimiter)\n      NALU bytes: 0x000000010910\n      NALU RBSP:\n\n      E\n      ======================================================================\n      ERROR: testAUDParser (__main__.ParsingTest)\n      Simple AUD parsing.\n      ----------------------------------------------------------------------\n      Traceback (most recent call last):\n        File \"./tests/simple_parsing.py\", line 17, in testAUDParser\n          ex.parse()\n        File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/h26x_parser.py\", line 209, in parse\n          aud = nalutypes.AUD(rbsp_payload, self.verbose)\n        File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/nalutypes.py\", line 120, in __init__\n          self.primary_pic_type = self.s.read('uint:3')\n        File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 3902, in read\n          value, self._pos = self._readtoken(name, self._pos, length)\n        File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 2016, in _readtoken\n          \"Tried to read {0} bits when only {1} available.\".format(int(length), self.length - pos))\n      bitstring.ReadError: Reading off the end of the data. Tried to read 3 bits when only 0 available.\n\n      ----------------------------------------------------------------------\n      Ran 1 test in 0.003s\n\n      FAILED (errors=1)\n\n   After the AUD fix patch:\n\n   ::\n\n      $ ./tests/simple_parsing.py\n\n      ========================================================================================================\n\n      NALU bytepos: [0, 5]\n      NALU offset:  0 Bytes\n      NALU length:  6 Bytes (including start code)\n      NALU type:  9 (Access unit delimiter)\n      NALU bytes: 0x000000010910\n      NALU RBSP:  0x10\n\n      AUD (payload size: 1.0 Bytes)\n      +------------------+---------+\n      | field            |   value |\n      +==================+=========+\n      | primary_pic_type |       0 |\n      +------------------+---------+\n      .\n      ----------------------------------------------------------------------\n      Ran 1 test in 0.001s\n\n      OK\n\n   -  h26x_extractor: fix offset-by-1 in NALU parser\n\n   Tested:\n\n   Before the AUD fix patch:\n\n   ::\n\n      $ ./tests/simple_parsing.py\n\n      ========================================================================================================\n\n      NALU bytepos: [0, 5]\n      NALU offset:  0 Bytes\n      NALU length:  6 Bytes (including start code)\n      NALU type:  9 (Access unit delimiter)\n      NALU bytes: 0x000000010910\n      NALU RBSP:\n\n      E\n      ======================================================================\n      ERROR: testAUDParser (__main__.ParsingTest)\n      Simple AUD parsing.\n      ----------------------------------------------------------------------\n      Traceback (most recent call last):\n        File \"./tests/simple_parsing.py\", line 17, in testAUDParser\n          ex.parse()\n        File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/h26x_parser.py\", line 209, in parse\n          aud = nalutypes.AUD(rbsp_payload, self.verbose)\n        File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/nalutypes.py\", line 120, in __init__\n          self.primary_pic_type = self.s.read('uint:3')\n        File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 3902, in read\n          value, self._pos = self._readtoken(name, self._pos, length)\n        File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 2016, in _readtoken\n          \"Tried to read {0} bits when only {1} available.\".format(int(length), self.length - pos))\n      bitstring.ReadError: Reading off the end of the data. Tried to read 3 bits when only 0 available.\n\n      ----------------------------------------------------------------------\n      Ran 1 test in 0.003s\n\n      FAILED (errors=1)\n\n   After the AUD fix patch:\n\n   ::\n\n      $ ./tests/simple_parsing.py\n\n      ========================================================================================================\n\n      NALU bytepos: [0, 5]\n      NALU offset:  0 Bytes\n      NALU length:  6 Bytes (including start code)\n      NALU type:  9 (Access unit delimiter)\n      NALU bytes: 0x000000010910\n      NALU RBSP:  0x10\n\n      AUD (payload size: 1.0 Bytes)\n      +------------------+---------+\n      | field            |   value |\n      +==================+=========+\n      | primary_pic_type |       0 |\n      +------------------+---------+\n      .\n      ----------------------------------------------------------------------\n      Ran 1 test in 0.001s\n\n      OK\n\nv0.3 (2020-03-15)\n-----------------\n\n-  Bump version to 0.3.\n\n-  Add release script.\n\n-  Python 3.7 and 3.8.\n\n-  Rename changelog.\n\nv0.2 (2017-08-02)\n-----------------\n\n-  Many updates.\n\nv0.1 (2017-07-17)\n-----------------\n\n-  Initial commit.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/slhck/h26x-extractor", "keywords": "video,h264", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "h26x-extractor", "package_url": "https://pypi.org/project/h26x-extractor/", "platform": "", "project_url": "https://pypi.org/project/h26x-extractor/", "project_urls": {"Homepage": "https://github.com/slhck/h26x-extractor"}, "release_url": "https://pypi.org/project/h26x-extractor/0.4/", "requires_dist": ["docopt", "tabulate", "bitstring"], "requires_python": "", "summary": "Extract NAL units from H.264 bitstreams", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"h26x-extractor\">\n<h2>h26x-extractor</h2>\n<p>Author: Werner Robitza, with contributions from @chemag</p>\n<p>Extracts NAL units from H.264 bitstreams and decodes their type and\ncontent, if supported.</p>\n<p><strong>Note:</strong> This is not a replacement for a proper tool like\n<a href=\"https://github.com/aizvorski/h264bitstream\" rel=\"nofollow\">h264bitstream</a>.\n<tt><span class=\"pre\">h26x-extractor</span></tt> is not fast and not robust, but rather a playground\nfor parsing bitstreams. Use with caution!</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Via pip:</p>\n<pre>pip3 install h26x-extractor\n</pre>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Currently supported:</p>\n<ul>\n<li>Parsing of H.264 bitstreams</li>\n<li>Parsing of NALU</li>\n<li>Parsing of AUD</li>\n<li>Parsing of CodedSliceIDR</li>\n<li>Parsing of CodedSliceNonIDR</li>\n<li>Parsing of SPS</li>\n<li>Parsing of PPS</li>\n</ul>\n<p>Currently planned:</p>\n<ul>\n<li>Parsing of SEI</li>\n<li>Parsing of VUI</li>\n<li>Parsing of H.265 bitstreams</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>h26x-extractor [options] &lt;input-file&gt;...\n</pre>\n<p>You can pass the <tt><span class=\"pre\">-v</span></tt> flag to enable verbose output, e.g.\u00a0the\nfollowing. You will get, for each NAL unit:</p>\n<ul>\n<li>The bye position range</li>\n<li>The offset from the start of the stream</li>\n<li>The overall length including start code</li>\n<li>The type (also translated in plaintext)</li>\n<li>Its content in raw bytes, encoded as hex</li>\n<li>Its RBSP content</li>\n<li>A table with its content decoded, if supported</li>\n</ul>\n<p>Example:</p>\n<pre>NALU bytepos:   [0, 28]\nNALU offset:    0 Bytes\nNALU length:    29 Bytes (including start code)\nNALU type:      7 (Sequence parameter set)\nNALU bytes:     0x0000000167f4000d919b28283f6022000003000200000300641e28532c\nNALU RBSP:      0xf4000d919b28283f602200000002000000641e28532c\n\nSPS (payload size: 22.0 Bytes)\n+--------------------------------------+---------+\n| field                                | value   |\n+======================================+=========+\n| constraint_set0_flag                 | 0       |\n+--------------------------------------+---------+\n| constraint_set1_flag                 | 0       |\n+--------------------------------------+---------+\n....\n</pre>\n</div>\n<div id=\"programmatic-usage\">\n<h2>Programmatic usage</h2>\n<p>You can also use this library in your code, e.g.:</p>\n<pre>from h26x_extractor.h26x_parser import H26xParser\n\nH26xParser.set_callback(\"nalu\", do_something)\nH26xParser.parse()\ndef do_something(bytes):\n  # do something with the NALU bytes\n</pre>\n<p>Valid callbacks are:</p>\n<ul>\n<li><tt>sps</tt></li>\n<li><tt>pps</tt></li>\n<li><tt>slice</tt></li>\n<li><tt>aud</tt></li>\n<li><tt>nalu</tt></li>\n</ul>\n<p>Raw data for all callbacks includes the RBSP.</p>\n<p>You can also call the <tt>nalutypes</tt> classes to decode the individual\nfields, e.g.\u00a0<tt>nalutypes.SPS</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2017-2020 Werner Robitza</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\u201cSoftware\u201d), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v0-4-2020-04-12\">\n<h3>v0.4 (2020-04-12)</h3>\n<ul>\n<li><p>Bump version to 0.4.</p>\n</li>\n<li><p>Update release script.</p>\n</li>\n<li><p>Update readme.</p>\n</li>\n<li><p>H26x_extractor: add deeper slice_header parsing (#4)</p>\n<p>Includes:</p>\n<ul>\n<li>passing the SPS and PPS NALUs to CodedSliceIDR and\nCodedSliceNonIDR (which need them to go further)</li>\n<li>adding an optional concept of order in the verbose printing, so\nthat NALU parameters are printed in the order they are parsed</li>\n<li>implementing ordering in SPS, PPS, and CodedSliceIDR NALUs</li>\n<li>fix on the SPS parser based on profile_idc values, per 2016-02\nstandard (Section 7.3.2.1.1, page 44). Note in particular that the\nif loop does not include value 144</li>\n<li>fix minor type\n(s/slice_gropu_change_rate_minus1/slice_group_change_rate_minus1/)</li>\n</ul>\n<p>Tested:</p>\n<pre>$ h26x-extractor -v file.264\n...\nSPS (payload size: 21.0 Bytes)\n+--------------------------------------+---------+\n| field                                | value   |\n+======================================+=========+\n| profile_idc                          | 66      |\n+--------------------------------------+---------+\n| constraint_set0_flag                 | 1       |\n+--------------------------------------+---------+\n| constraint_set1_flag                 | 1       |\n+--------------------------------------+---------+\n| constraint_set2_flag                 | 0       |\n+--------------------------------------+---------+\n| constraint_set3_flag                 | 0       |\n+--------------------------------------+---------+\n...\nNALU type:  5 (Coded slice of an IDR picture)\nNALU bytes: 0x000000016588841afffffc2f14000416fd78e06380de6a1306bb224a722233e54ffa7cb9526c188ed1189699e7c6fd1a2307f757de5c3fca2f3d22b7fc667ccb6ff6b6a8dabb515b59fe53f8a7d83a8beb6ff17988adbfde818bdf2dafc5e7a2b5fde4a0bca4156137f8ceadff19bd5bfe233e152fbefbefbe2fab6dfe...\nNALU RBSP:  0x88841afffffc2f14000416fd78e06380de6a1306bb224a722233e54ffa7cb9526c188ed1189699e7c6fd1a2307f757de5c3fca2f3d22b7fc667ccb6ff6b6a8dabb515b59fe53f8a7d83a8beb6ff17988adbfde818bdf2dafc5e7a2b5fde4a0bca4156137f8ceadff19bd5bfe233e152fbefbefbe2fab6dfed6d62d6ad7...\n\nCodedSliceIDR (payload size: 4538.0 Bytes)\n+----------------------+---------+\n| field                | value   |\n+======================+=========+\n| first_mb_in_slice    | 0       |\n+----------------------+---------+\n| slice_type           | 7       |\n+----------------------+---------+\n| slice_type_clear     | I       |\n+----------------------+---------+\n| pic_parameter_set_id | 0       |\n+----------------------+---------+\n| frame_num            | 0       |\n+----------------------+---------+\n| idr_pic_id           | 0       |\n...\n</pre>\n</li>\n<li><p>Fix offset-by-one (#3)</p>\n<ul>\n<li>h26x-extractor: add a simple parsing test</li>\n</ul>\n<p>Needed to refactor the parser constructor in order to allow testing\nbinary blobs.</p>\n<p>Tested:</p>\n<p>Before the AUD fix patch:</p>\n<pre>$ ./tests/simple_parsing.py\n\n========================================================================================================\n\nNALU bytepos: [0, 5]\nNALU offset:  0 Bytes\nNALU length:  6 Bytes (including start code)\nNALU type:  9 (Access unit delimiter)\nNALU bytes: 0x000000010910\nNALU RBSP:\n\nE\n======================================================================\nERROR: testAUDParser (__main__.ParsingTest)\nSimple AUD parsing.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"./tests/simple_parsing.py\", line 17, in testAUDParser\n    ex.parse()\n  File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/h26x_parser.py\", line 209, in parse\n    aud = nalutypes.AUD(rbsp_payload, self.verbose)\n  File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/nalutypes.py\", line 120, in __init__\n    self.primary_pic_type = self.s.read('uint:3')\n  File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 3902, in read\n    value, self._pos = self._readtoken(name, self._pos, length)\n  File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 2016, in _readtoken\n    \"Tried to read {0} bits when only {1} available.\".format(int(length), self.length - pos))\nbitstring.ReadError: Reading off the end of the data. Tried to read 3 bits when only 0 available.\n\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nFAILED (errors=1)\n</pre>\n<p>After the AUD fix patch:</p>\n<pre>$ ./tests/simple_parsing.py\n\n========================================================================================================\n\nNALU bytepos: [0, 5]\nNALU offset:  0 Bytes\nNALU length:  6 Bytes (including start code)\nNALU type:  9 (Access unit delimiter)\nNALU bytes: 0x000000010910\nNALU RBSP:  0x10\n\nAUD (payload size: 1.0 Bytes)\n+------------------+---------+\n| field            |   value |\n+==================+=========+\n| primary_pic_type |       0 |\n+------------------+---------+\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n</pre>\n<ul>\n<li>h26x_extractor: fix offset-by-1 in NALU parser</li>\n</ul>\n<p>Tested:</p>\n<p>Before the AUD fix patch:</p>\n<pre>$ ./tests/simple_parsing.py\n\n========================================================================================================\n\nNALU bytepos: [0, 5]\nNALU offset:  0 Bytes\nNALU length:  6 Bytes (including start code)\nNALU type:  9 (Access unit delimiter)\nNALU bytes: 0x000000010910\nNALU RBSP:\n\nE\n======================================================================\nERROR: testAUDParser (__main__.ParsingTest)\nSimple AUD parsing.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"./tests/simple_parsing.py\", line 17, in testAUDParser\n    ex.parse()\n  File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/h26x_parser.py\", line 209, in parse\n    aud = nalutypes.AUD(rbsp_payload, self.verbose)\n  File \"/usr/local/lib/python3.7/site-packages/h26x_extractor-0.3-py3.7.egg/h26x_extractor/nalutypes.py\", line 120, in __init__\n    self.primary_pic_type = self.s.read('uint:3')\n  File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 3902, in read\n    value, self._pos = self._readtoken(name, self._pos, length)\n  File \"/usr/lib/python3.7/site-packages/bitstring.py\", line 2016, in _readtoken\n    \"Tried to read {0} bits when only {1} available.\".format(int(length), self.length - pos))\nbitstring.ReadError: Reading off the end of the data. Tried to read 3 bits when only 0 available.\n\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nFAILED (errors=1)\n</pre>\n<p>After the AUD fix patch:</p>\n<pre>$ ./tests/simple_parsing.py\n\n========================================================================================================\n\nNALU bytepos: [0, 5]\nNALU offset:  0 Bytes\nNALU length:  6 Bytes (including start code)\nNALU type:  9 (Access unit delimiter)\nNALU bytes: 0x000000010910\nNALU RBSP:  0x10\n\nAUD (payload size: 1.0 Bytes)\n+------------------+---------+\n| field            |   value |\n+==================+=========+\n| primary_pic_type |       0 |\n+------------------+---------+\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"v0-3-2020-03-15\">\n<h3>v0.3 (2020-03-15)</h3>\n<ul>\n<li>Bump version to 0.3.</li>\n<li>Add release script.</li>\n<li>Python 3.7 and 3.8.</li>\n<li>Rename changelog.</li>\n</ul>\n</div>\n<div id=\"v0-2-2017-08-02\">\n<h3>v0.2 (2017-08-02)</h3>\n<ul>\n<li>Many updates.</li>\n</ul>\n</div>\n<div id=\"v0-1-2017-07-17\">\n<h3>v0.1 (2017-07-17)</h3>\n<ul>\n<li>Initial commit.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7005620, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "7f76e3408c1e9cd1f9071a5e6c5322bf", "sha256": "bf72d62746a3f7504a45f3f46c0c872b7bedb8e95b6c94674991b17d99007142"}, "downloads": -1, "filename": "h26x_extractor-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f76e3408c1e9cd1f9071a5e6c5322bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11056, "upload_time": "2020-03-15T15:59:34", "upload_time_iso_8601": "2020-03-15T15:59:34.742935Z", "url": "https://files.pythonhosted.org/packages/fd/5f/082050ce66e409ff085bb065ec37962b5f224ad703ccf7a069a79235a20e/h26x_extractor-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dc359c14a0d09257906e9779cde9b96", "sha256": "54f61f1bff359e6dab83858b7a7f86d1c4eb4c5116db8493b1c7f77a8dea207d"}, "downloads": -1, "filename": "h26x-extractor-0.3.tar.gz", "has_sig": false, "md5_digest": "9dc359c14a0d09257906e9779cde9b96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10911, "upload_time": "2020-03-15T15:59:36", "upload_time_iso_8601": "2020-03-15T15:59:36.874156Z", "url": "https://files.pythonhosted.org/packages/f8/f5/6e6f5dd286efd9015051ddb6b611e150da9afae7b8c795ce7115fc337f5e/h26x-extractor-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "56f3e17fcabf2269aef2680182286202", "sha256": "8f30ea447d4f4a4c515256575ce8e835891cbc024c65e27fda75aac233afc35a"}, "downloads": -1, "filename": "h26x_extractor-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56f3e17fcabf2269aef2680182286202", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13024, "upload_time": "2020-04-12T18:03:21", "upload_time_iso_8601": "2020-04-12T18:03:21.686961Z", "url": "https://files.pythonhosted.org/packages/5e/52/d1c1a5306c7b0ada4816e9ea4de921fe22481212437f15cc87434e085bde/h26x_extractor-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "161fa446eb8c719c95f2e7452eea90e2", "sha256": "d79b2466f5c734ed6ccc7b34d803e5c80c44c305516687cd1f8634d389d043f9"}, "downloads": -1, "filename": "h26x-extractor-0.4.tar.gz", "has_sig": false, "md5_digest": "161fa446eb8c719c95f2e7452eea90e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14555, "upload_time": "2020-04-12T18:03:27", "upload_time_iso_8601": "2020-04-12T18:03:27.019383Z", "url": "https://files.pythonhosted.org/packages/09/24/763061718b86e1de1cc85216f5fce852af959aa0e4595d05ac27b9f8d5a5/h26x-extractor-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56f3e17fcabf2269aef2680182286202", "sha256": "8f30ea447d4f4a4c515256575ce8e835891cbc024c65e27fda75aac233afc35a"}, "downloads": -1, "filename": "h26x_extractor-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56f3e17fcabf2269aef2680182286202", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13024, "upload_time": "2020-04-12T18:03:21", "upload_time_iso_8601": "2020-04-12T18:03:21.686961Z", "url": "https://files.pythonhosted.org/packages/5e/52/d1c1a5306c7b0ada4816e9ea4de921fe22481212437f15cc87434e085bde/h26x_extractor-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "161fa446eb8c719c95f2e7452eea90e2", "sha256": "d79b2466f5c734ed6ccc7b34d803e5c80c44c305516687cd1f8634d389d043f9"}, "downloads": -1, "filename": "h26x-extractor-0.4.tar.gz", "has_sig": false, "md5_digest": "161fa446eb8c719c95f2e7452eea90e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14555, "upload_time": "2020-04-12T18:03:27", "upload_time_iso_8601": "2020-04-12T18:03:27.019383Z", "url": "https://files.pythonhosted.org/packages/09/24/763061718b86e1de1cc85216f5fce852af959aa0e4595d05ac27b9f8d5a5/h26x-extractor-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:56 2020"}