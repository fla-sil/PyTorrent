{"info": {"author": "", "author_email": "edgeml@microsoft.com", "bugtrack_url": null, "classifiers": [], "description": "## Edge Machine Learning: Pytorch Library \n\nThis package includes PyTorch implementations of following algorithms and training\ntechniques developed as part of EdgeML. The PyTorch graphs for the forward/backward\npass of these algorithms are packaged as `edgeml_pytorch.graph` and the trainers\nfor these algorithms are in `edgeml_pytorch.trainer`. \n\n1. [Bonsai](https://github.com/microsoft/EdgeML/docs/publications/Bonsai.pdf): `edgeml_pytorch.graph.bonsai` implements\n   the Bonsai prediction graph. The three-phase training routine for Bonsai is decoupled\n   from the forward graph to facilitate a plug and play behaviour wherein Bonsai can be\n   combined with or used as a final layer classifier for other architectures (RNNs, CNNs).\n   See `edgeml_pytorch.trainer.bonsaiTrainer` for 3-phase training.  \n2. [ProtoNN](https://github.com/microsoft/EdgeML/docs/publications/ProtoNN.pdf): `edgeml_pytorch.graph.protoNN` implements the\n   ProtoNN prediction functions. The training routine for ProtoNN is decoupled from the forward\n   graph to facilitate a plug and play behaviour wherein ProtoNN can be combined with or used\n   as a final layer classifier for other architectures (RNNs, CNNs). The training routine is\n   implemented in `edgeml_pytorch.trainer.protoNNTrainer`.\n3. [FastRNN & FastGRNN](https://github.com/microsoft/EdgeML/docs/publications/FastGRNN.pdf): `edgeml_pytorch.graph.rnn` provides\n    various RNN cells --- including new cells `FastRNNCell` and `FastGRNNCell` as well as \n    `UGRNNCell`, `GRUCell`, and `LSTMCell` --- with features like low-rank parameterisation\n    of weight matrices and custom non-linearities. Akin to Bonsai and ProtoNN, the three-phase\n    training routine for FastRNN and FastGRNN is decoupled from the custom cells to enable plug and\n    play behaviour of the custom RNN cells in other architectures (NMT, Encoder-Decoder etc.).\n    Additionally, numerically equivalent CUDA-based implementations `FastRNNCUDACell` and \n    `FastGRNNCUDACell` are provided for faster training. `edgeml_pytorch.graph.rnn`.\n    `edgeml_pytorch.graph.rnn.Fast(G)RNN(CUDA)` provides unrolled RNNs equivalent to `nn.LSTM` and `nn.GRU`.\n    `edgeml_pytorch.trainer.fastmodel` presents a sample multi-layer RNN + multi-class classifier model.\n4. [S-RNN](https://github.com/microsoft/EdgeML/docs/publications/SRNN.pdf): `edgeml_pytorch.graph.rnn.SRNN2` implements a \n    2 layer SRNN network which can be instantied with a choice of RNN cell. The training\n    routine for SRNN is in `edgeml_pytorch.trainer.srnnTrainer`.\n\nUsage directions and examples notebooks for this package are provided [here](https://github.com/microsoft/EdgeML/examples/pytorch).\n\n\n## Installation\n\nIt is highly recommended that EdgeML be installed in a virtual environment. \nPlease create a new virtual environment using your environment manager\n ([virtualenv](https://virtualenv.pypa.io/en/stable/userguide/#usage) or\n  [Anaconda](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands)).\nMake sure the new environment is active before running the below mentioned commands.\n\nUse pip to install requirements before installing the `edgeml_pytorch` library.\nDetails for cpu based installation and gpu based installation provided below.\n\n### CPU\n\n``` \npip install -r requirements-cpu.txt\npip install -e .\n```\n\nTested on Python3.6 with >= PyTorch 1.1.0.\n\n### GPU\n\nInstall appropriate CUDA and cuDNN [Tested with >= CUDA 8.1 and cuDNN >= 6.1]\n\n```\npip install -r requirements-gpu.txt\npip install -e .\n```\n\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Microsoft/EdgeML", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "edgeml-pytorch", "package_url": "https://pypi.org/project/edgeml-pytorch/", "platform": "", "project_url": "https://pypi.org/project/edgeml-pytorch/", "project_urls": {"Homepage": "https://github.com/Microsoft/EdgeML"}, "release_url": "https://pypi.org/project/edgeml-pytorch/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "PyTorch code for ML algorithms for edge devices developed at Microsoft Research India.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Edge Machine Learning: Pytorch Library</h2>\n<p>This package includes PyTorch implementations of following algorithms and training\ntechniques developed as part of EdgeML. The PyTorch graphs for the forward/backward\npass of these algorithms are packaged as <code>edgeml_pytorch.graph</code> and the trainers\nfor these algorithms are in <code>edgeml_pytorch.trainer</code>.</p>\n<ol>\n<li><a href=\"https://github.com/microsoft/EdgeML/docs/publications/Bonsai.pdf\" rel=\"nofollow\">Bonsai</a>: <code>edgeml_pytorch.graph.bonsai</code> implements\nthe Bonsai prediction graph. The three-phase training routine for Bonsai is decoupled\nfrom the forward graph to facilitate a plug and play behaviour wherein Bonsai can be\ncombined with or used as a final layer classifier for other architectures (RNNs, CNNs).\nSee <code>edgeml_pytorch.trainer.bonsaiTrainer</code> for 3-phase training.</li>\n<li><a href=\"https://github.com/microsoft/EdgeML/docs/publications/ProtoNN.pdf\" rel=\"nofollow\">ProtoNN</a>: <code>edgeml_pytorch.graph.protoNN</code> implements the\nProtoNN prediction functions. The training routine for ProtoNN is decoupled from the forward\ngraph to facilitate a plug and play behaviour wherein ProtoNN can be combined with or used\nas a final layer classifier for other architectures (RNNs, CNNs). The training routine is\nimplemented in <code>edgeml_pytorch.trainer.protoNNTrainer</code>.</li>\n<li><a href=\"https://github.com/microsoft/EdgeML/docs/publications/FastGRNN.pdf\" rel=\"nofollow\">FastRNN &amp; FastGRNN</a>: <code>edgeml_pytorch.graph.rnn</code> provides\nvarious RNN cells --- including new cells <code>FastRNNCell</code> and <code>FastGRNNCell</code> as well as\n<code>UGRNNCell</code>, <code>GRUCell</code>, and <code>LSTMCell</code> --- with features like low-rank parameterisation\nof weight matrices and custom non-linearities. Akin to Bonsai and ProtoNN, the three-phase\ntraining routine for FastRNN and FastGRNN is decoupled from the custom cells to enable plug and\nplay behaviour of the custom RNN cells in other architectures (NMT, Encoder-Decoder etc.).\nAdditionally, numerically equivalent CUDA-based implementations <code>FastRNNCUDACell</code> and\n<code>FastGRNNCUDACell</code> are provided for faster training. <code>edgeml_pytorch.graph.rnn</code>.\n<code>edgeml_pytorch.graph.rnn.Fast(G)RNN(CUDA)</code> provides unrolled RNNs equivalent to <code>nn.LSTM</code> and <code>nn.GRU</code>.\n<code>edgeml_pytorch.trainer.fastmodel</code> presents a sample multi-layer RNN + multi-class classifier model.</li>\n<li><a href=\"https://github.com/microsoft/EdgeML/docs/publications/SRNN.pdf\" rel=\"nofollow\">S-RNN</a>: <code>edgeml_pytorch.graph.rnn.SRNN2</code> implements a\n2 layer SRNN network which can be instantied with a choice of RNN cell. The training\nroutine for SRNN is in <code>edgeml_pytorch.trainer.srnnTrainer</code>.</li>\n</ol>\n<p>Usage directions and examples notebooks for this package are provided <a href=\"https://github.com/microsoft/EdgeML/examples/pytorch\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>It is highly recommended that EdgeML be installed in a virtual environment.\nPlease create a new virtual environment using your environment manager\n(<a href=\"https://virtualenv.pypa.io/en/stable/userguide/#usage\" rel=\"nofollow\">virtualenv</a> or\n<a href=\"https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands\" rel=\"nofollow\">Anaconda</a>).\nMake sure the new environment is active before running the below mentioned commands.</p>\n<p>Use pip to install requirements before installing the <code>edgeml_pytorch</code> library.\nDetails for cpu based installation and gpu based installation provided below.</p>\n<h3>CPU</h3>\n<pre><code>pip install -r requirements-cpu.txt\npip install -e .\n</code></pre>\n<p>Tested on Python3.6 with &gt;= PyTorch 1.1.0.</p>\n<h3>GPU</h3>\n<p>Install appropriate CUDA and cuDNN [Tested with &gt;= CUDA 8.1 and cuDNN &gt;= 6.1]</p>\n<pre><code>pip install -r requirements-gpu.txt\npip install -e .\n</code></pre>\n<p>Copyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the MIT license.</p>\n\n          </div>"}, "last_serial": 6089527, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "f538a040ac0754b63937884ac406cfa3", "sha256": "0c96f13bc8dbad30127077f0d9cd0056f94ad3f1391e9daedd807cced6fc0da8"}, "downloads": -1, "filename": "edgeml_pytorch-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f538a040ac0754b63937884ac406cfa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29800, "upload_time": "2019-11-06T20:50:36", "upload_time_iso_8601": "2019-11-06T20:50:36.054722Z", "url": "https://files.pythonhosted.org/packages/06/ba/3033a65e13abf2d31444a3963b36d1edab6ebb65954a94124404dadc69fb/edgeml_pytorch-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b52c98e053e9819b45fc87836d4427d5", "sha256": "12bc86fb187c18e08a8c46fbd5f65b3e48d443e4704fc06965a88a0dac575155"}, "downloads": -1, "filename": "edgeml_pytorch-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b52c98e053e9819b45fc87836d4427d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24893, "upload_time": "2019-11-06T20:50:38", "upload_time_iso_8601": "2019-11-06T20:50:38.394693Z", "url": "https://files.pythonhosted.org/packages/97/e2/869ead89db008df4b5dfc007fed6d009f09749a903ee5fce05f1defeef62/edgeml_pytorch-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f538a040ac0754b63937884ac406cfa3", "sha256": "0c96f13bc8dbad30127077f0d9cd0056f94ad3f1391e9daedd807cced6fc0da8"}, "downloads": -1, "filename": "edgeml_pytorch-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f538a040ac0754b63937884ac406cfa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29800, "upload_time": "2019-11-06T20:50:36", "upload_time_iso_8601": "2019-11-06T20:50:36.054722Z", "url": "https://files.pythonhosted.org/packages/06/ba/3033a65e13abf2d31444a3963b36d1edab6ebb65954a94124404dadc69fb/edgeml_pytorch-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b52c98e053e9819b45fc87836d4427d5", "sha256": "12bc86fb187c18e08a8c46fbd5f65b3e48d443e4704fc06965a88a0dac575155"}, "downloads": -1, "filename": "edgeml_pytorch-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b52c98e053e9819b45fc87836d4427d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24893, "upload_time": "2019-11-06T20:50:38", "upload_time_iso_8601": "2019-11-06T20:50:38.394693Z", "url": "https://files.pythonhosted.org/packages/97/e2/869ead89db008df4b5dfc007fed6d009f09749a903ee5fce05f1defeef62/edgeml_pytorch-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:46 2020"}