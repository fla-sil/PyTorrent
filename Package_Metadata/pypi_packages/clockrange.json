{"info": {"author": "Cristiano Cortezia", "author_email": "cristiano.cortezia@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "[![CircleCI](https://circleci.com/gh/ccortezia/clockrange.svg?style=svg)](https://circleci.com/gh/ccortezia/clockrange)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/d78ce1d72bb1d0b594b8/test_coverage)](https://codeclimate.com/github/ccortezia/clockrange/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/d78ce1d72bb1d0b594b8/maintainability)](https://codeclimate.com/github/ccortezia/clockrange/maintainability)\n\n# clockrange\n\nA clock-like periodic sequence generator\n\n## Installation\n\n```shell\npip install clockrange\n```\n\n## Getting Started\n\n`ClockRange` provides clock-like sequences according to the given specification:\n\n```python\nfrom clockrange import ClockRange\n\n# A typical 24h microsecond-granular clock.\nclock = ClockRange((24, 60, 60, 1000, 1000))\n\n# How many microseconds until the clock completes a full cycle?\nlen(clock)\n\n# How does the clock look like when 150000 microseconds have passed?\nclock[150000]\n```\n\nSee more examples below.\n\n## Examples\n\n`ClockRange` accepts different specification formats:\n\n```python\n# These are equivalent:\nClockRange((3, 60))\nClockRange(([0, 1, 2], 60))\nClockRange((range(3), 60))\nClockRange((range(0, 3, 1), 60))\n\n# These result in .counters being different from .rendered:\nClockRange(([\"A\", \"B\", \"Z\"], 60))\nClockRange((range(4, 10, 2), 60))\n```\n\n`ClockRange` instances support random item access with O(1) runtime performance:\n\n```python\nclock = ClockRange((24, 60, 60))\nclock[0] # ClockState(counters=(0, 0, 0), cycles=0, rendered=(0, 0, 0))\nclock[1] # ClockState(counters=(0, 0, 1), cycles=0, rendered=(0, 0, 1))\nclock[86400] # ClockState(counters=(0, 0, 0), cycles=1, rendered=(0, 0, 0))\n```\n\n`ClockRange.__len__` provides the cycle length:\n\n```python\nassert len(ClockRange((12,))) == 12\nassert len(ClockRange((10, 10))) == 100\nassert len(ClockRange((24, 60, 60))) == 86400\n```\n\n`ClockRange` instances can be iterated on:\n\n```python\nclock = ClockRange((24, 60, 60))\nit = iter(clock)\nnext(it) # ClockState(counters=(0, 0, 0), cycles=0, rendered=(0, 0, 0))\nnext(it) # ClockState(counters=(0, 0, 1), cycles=0, rendered=(0, 0, 1))\n```\n\n`ClockRange` iterators never get exhausted, so loop control needs to be performed manually:\n\n```python\nfor state in ClockRange((24, 60, 60):\n    if state.cycle == 1:\n        break\n```\n\n## Contributing\n\nTo run the test suite locally, clone and setup the repository for local development:\n\n```shell\npipenv install\npytest --cov-report=html\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ccortezia/clockrange/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "clockrange", "package_url": "https://pypi.org/project/clockrange/", "platform": "", "project_url": "https://pypi.org/project/clockrange/", "project_urls": {"Homepage": "https://github.com/ccortezia/clockrange/"}, "release_url": "https://pypi.org/project/clockrange/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A clock-like periodic sequence generator", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/ccortezia/clockrange\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fd6cbb15ea785d5015613d9906984596a673d41/68747470733a2f2f636972636c6563692e636f6d2f67682f63636f7274657a69612f636c6f636b72616e67652e7376673f7374796c653d737667\"></a>\n<a href=\"https://codeclimate.com/github/ccortezia/clockrange/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4b06af85d2815ac06082f97ce8e73e81468553b/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f64373863653164373262623164306235393462382f746573745f636f766572616765\"></a>\n<a href=\"https://codeclimate.com/github/ccortezia/clockrange/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb2d5b826b696f0739d76d5af71a8735deee6cfc/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f64373863653164373262623164306235393462382f6d61696e7461696e6162696c697479\"></a></p>\n<h1>clockrange</h1>\n<p>A clock-like periodic sequence generator</p>\n<h2>Installation</h2>\n<pre>pip install clockrange\n</pre>\n<h2>Getting Started</h2>\n<p><code>ClockRange</code> provides clock-like sequences according to the given specification:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clockrange</span> <span class=\"kn\">import</span> <span class=\"n\">ClockRange</span>\n\n<span class=\"c1\"># A typical 24h microsecond-granular clock.</span>\n<span class=\"n\">clock</span> <span class=\"o\">=</span> <span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># How many microseconds until the clock completes a full cycle?</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clock</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># How does the clock look like when 150000 microseconds have passed?</span>\n<span class=\"n\">clock</span><span class=\"p\">[</span><span class=\"mi\">150000</span><span class=\"p\">]</span>\n</pre>\n<p>See more examples below.</p>\n<h2>Examples</h2>\n<p><code>ClockRange</code> accepts different specification formats:</p>\n<pre><span class=\"c1\"># These are equivalent:</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">(([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># These result in .counters being different from .rendered:</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">(([</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Z\"</span><span class=\"p\">],</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n</pre>\n<p><code>ClockRange</code> instances support random item access with O(1) runtime performance:</p>\n<pre><span class=\"n\">clock</span> <span class=\"o\">=</span> <span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">clock</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># ClockState(counters=(0, 0, 0), cycles=0, rendered=(0, 0, 0))</span>\n<span class=\"n\">clock</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># ClockState(counters=(0, 0, 1), cycles=0, rendered=(0, 0, 1))</span>\n<span class=\"n\">clock</span><span class=\"p\">[</span><span class=\"mi\">86400</span><span class=\"p\">]</span> <span class=\"c1\"># ClockState(counters=(0, 0, 0), cycles=1, rendered=(0, 0, 0))</span>\n</pre>\n<p><code>ClockRange.__len__</code> provides the cycle length:</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">12</span><span class=\"p\">,)))</span> <span class=\"o\">==</span> <span class=\"mi\">12</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)))</span> <span class=\"o\">==</span> <span class=\"mi\">86400</span>\n</pre>\n<p><code>ClockRange</code> instances can be iterated on:</p>\n<pre><span class=\"n\">clock</span> <span class=\"o\">=</span> <span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n<span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">clock</span><span class=\"p\">)</span>\n<span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span> <span class=\"c1\"># ClockState(counters=(0, 0, 0), cycles=0, rendered=(0, 0, 0))</span>\n<span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span> <span class=\"c1\"># ClockState(counters=(0, 0, 1), cycles=0, rendered=(0, 0, 1))</span>\n</pre>\n<p><code>ClockRange</code> iterators never get exhausted, so loop control needs to be performed manually:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">state</span> <span class=\"ow\">in</span> <span class=\"n\">ClockRange</span><span class=\"p\">((</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">cycle</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n</pre>\n<h2>Contributing</h2>\n<p>To run the test suite locally, clone and setup the repository for local development:</p>\n<pre>pipenv install\npytest --cov-report<span class=\"o\">=</span>html\n</pre>\n\n          </div>"}, "last_serial": 5900204, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "eb6caabdb1a64268fb1230579a31bc5d", "sha256": "0151204e8f65129f8bcc5ab745d19ba79372d0c318bd7a1194d59eff9caf17fd"}, "downloads": -1, "filename": "clockrange-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eb6caabdb1a64268fb1230579a31bc5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2877, "upload_time": "2019-09-28T17:53:05", "upload_time_iso_8601": "2019-09-28T17:53:05.810776Z", "url": "https://files.pythonhosted.org/packages/83/93/3c95254af283d1431b3abcd38be0a202bb8c349b3b872bb06fdc8ae0d841/clockrange-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1520fc4c06d6d6ac61ab758fae6449f0", "sha256": "04ebb0b4f23b5ca71570a4ca7e807c131d1b8001941f422ab6a49587589ebf89"}, "downloads": -1, "filename": "clockrange-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1520fc4c06d6d6ac61ab758fae6449f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2518, "upload_time": "2019-09-28T17:53:10", "upload_time_iso_8601": "2019-09-28T17:53:10.910784Z", "url": "https://files.pythonhosted.org/packages/0e/df/8adc4d061d166f51b0cd69270cf40366e38676076e00e535485338df0e9d/clockrange-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb6caabdb1a64268fb1230579a31bc5d", "sha256": "0151204e8f65129f8bcc5ab745d19ba79372d0c318bd7a1194d59eff9caf17fd"}, "downloads": -1, "filename": "clockrange-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eb6caabdb1a64268fb1230579a31bc5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2877, "upload_time": "2019-09-28T17:53:05", "upload_time_iso_8601": "2019-09-28T17:53:05.810776Z", "url": "https://files.pythonhosted.org/packages/83/93/3c95254af283d1431b3abcd38be0a202bb8c349b3b872bb06fdc8ae0d841/clockrange-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1520fc4c06d6d6ac61ab758fae6449f0", "sha256": "04ebb0b4f23b5ca71570a4ca7e807c131d1b8001941f422ab6a49587589ebf89"}, "downloads": -1, "filename": "clockrange-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1520fc4c06d6d6ac61ab758fae6449f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2518, "upload_time": "2019-09-28T17:53:10", "upload_time_iso_8601": "2019-09-28T17:53:10.910784Z", "url": "https://files.pythonhosted.org/packages/0e/df/8adc4d061d166f51b0cd69270cf40366e38676076e00e535485338df0e9d/clockrange-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:54 2020"}