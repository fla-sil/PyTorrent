{"info": {"author": "righ", "author_email": "righ.m9@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Software Development"], "description": ".. image:: https://badge.fury.io/py/d2a.svg\n  :target: https://badge.fury.io/py/d2a\n\n.. image:: https://github.com/walkframe/d2a/workflows/master/badge.svg\n  :target: https://github.com/walkframe/d2a/actions\n\n\n\nRequirements\n============\n- Python: 3.5 or later.\n\n  - Tested with 3.5, 3.8\n\n- Django: 1.11, 2.x, 3.x\n\n  - Tested with 1.11.27, 2.2.9, 3.0.1, 3.0.3\n\n- SQLAlchemy: 1.1 or later.\n\n  - Tested with 1.1.0, 1.3.12\n\nInstallation\n============\n\n.. code:: bash\n\n  $ pip install d2a\n\nUsage\n=====\n\nAuto loading\n------------\nJust add `d2a` to ``settings.INSTALLED_APPS``.\n\n.. code-block:: python\n\n  INSTALLED_APPS = [\n      'django.contrib.admin',\n      'django.contrib.auth',\n      'django.contrib.contenttypes',\n      'django.contrib.sessions',\n      'django.contrib.messages',\n      'django.contrib.staticfiles',\n\n      # top or here\n      'd2a',\n\n      # example apps\n      'books',\n      'sales',\n  ]\n\n.. warning::\n\n  Put it before apps you made as you can.\n  Because it expects to register alchemy model before the other ``apps.py``.\n\nThen `models_sqla` (default) in all apps will be imported as a module.\n\n.. code:: python\n\n  >>> from books import models_sqla\n  >>> models_sqla.  # tab completion\n  models_sqla.Author(            models_sqla.BookCategory(      models_sqla.CategoryRelation(  models_sqla.transfer(\n  models_sqla.Book(              models_sqla.Category(          models_sqla.models\n\n  >>> models_sqla.Book\n  <class 'd2a.book'>\n\n  >>> models_sqla.Book.  # tab completion\n  models_sqla.Book.author       models_sqla.Book.content      models_sqla.Book.metadata     models_sqla.Book.tags\n  models_sqla.Book.author_id    models_sqla.Book.description  models_sqla.Book.mro(         models_sqla.Book.title\n  models_sqla.Book.category     models_sqla.Book.id           models_sqla.Book.price\n  # SQL Expression schema\n  >>> models_sqla.Book.__table__\n  Table(\n    'book', MetaData(bind=None), \n    Column('id', UUID(), table=<book>, primary_key=True, nullable=False, default=ColumnDefault(<function uuid4 at 0x7f3cebe7e598>)), \n    Column('price', JSON(astext_type=Text()), table=<book>, nullable=False), \n    Column('title', VARCHAR(length=255), table=<book>, nullable=False), \n    Column('description', TEXT(), table=<book>),\n    Column('author_id', INTEGER(), ForeignKey('author.id'), table=<book>), \n    Column('content', BYTEA(), table=<book>, nullable=False), \n    Column('tags', ARRAY(VARCHAR()), table=<book>, nullable=False), \n    schema=None\n  )\n\nAlso it can extract model declared implicitly depending on m2m field.\n(in this case, `BookCategory`)\n\n.. note::\n\n  You can set configrations to ``settings.py``.\n\n  Example:\n\n  .. code-block:: python\n\n    # This variable can be omitted.\n    D2A_CONFIG = {\n        'AUTOLOAD': { # optional\n            # module name: It can be used different module name from `models_sqla`.\n            'module': 'modelsa',  # optional, default: 'models_sqla'\n            # waiting seconds during autoloading\n            'seconds': 5,  # default: 1\n            # transfer function's args after 'exports' arg.\n            'option': {  # optional\n                'db_type': 'postgresql',  # default: 'default'\n                'back_type': 'backref',  # default: 'backref'\n                'as_table': True,  # default: False\n                'name_formatter': str.upper,  # default: get_camelcase\n            }\n        },\n        # converting rules for customized fields\n        'ALIASES': {  # optional\n            # Evaluates ExtendedImageField as ImageField\n            ExtendedImageField: models.ImageField,\n        },\n    }\n\n\nPer models module\n-----------------\nIf you want to create a module manually, create a `models_sqla.py` in the apps.\n\nWrite like the following to it:\n\n.. code-block:: python3\n\n  from d2a import transfer\n  from . import models\n  transfer(models, globals())\n\n`models_sqla.py` exists, auto module creation will be omitted.\n\nAnd if you create every `models_sqla.py` manually,\nit is unnecessary to set `d2a` to ``settings.INSTALLED_APPS``.\n\nExample:\n\n- `project_postgresql/books/models_sqla.py <https://github.com/walkframe/d2a/blob/master/project_postgresql/books/models_sqla.py>`_\n- You can omit specifying `db_type`, then it automatically detects a database type from ``settings.DATABASES['default']``.\n\n  - Now `postgresql`, `mysql` and `oracle` are allowed,\n    the other types will be converted to the following types as ``default`` type: \n    `sqlalchemy/types.py <https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/types.py>`_\n\nPer model\n---------\nIf you just want to convert one model, you should use `declare` function.\n\n.. code:: python\n\n  >>> from d2a import declare\n  >>> from sales.models import Sales\n  >>> sales = declare(Sales)\n  >>> sales\n  <class 'd2a.sales'>\n\n  >>> sales.__table__\n  Table(\n    'sales', MetaData(bind=None), \n    Column('id', BIGINT(), table=<sales>, primary_key=True, nullable=False), \n    Column('book_id', UUID(), ForeignKey('book.id'), table=<sales>, nullable=False), \n    Column('sold', TIMESTAMP(), table=<sales>, nullable=False), \n    Column('reservation', INTERVAL(), table=<sales>), \n    Column('source', INET(), table=<sales>), \n    schema=None\n  )\n\n  >>> sales.\n  sales.book         sales.id           sales.mro(         sales.sold\n  sales.book_id      sales.metadata     sales.reservation  sales.source\n\n\nCustom fields\n-------------\nIf you are using customized field (not built-in),\nyou can register the field as the other field using `alias` or `alias_dict` method.\n\n.. code:: python\n\n  from django.db.models import ImageField\n\n  class ExtendedImageField(ImageField):\n      \"\"\"something customizing\"\"\"\n\n  from d2a import alias\n  alias(ExtendedImageField, ImageField)\n\n  # or\n  alias_dict({\n      ExtendedImageField: ImageField,\n  })\n\n\n.. note::\n\n  Before 2.1.x d2a maps ``django.contrib.postgres.fields.JSONField`` to ``JSON`` by mistake. It should have mapped it to ``JSONB``.\n\n  Since 2.2.0 the mapping is fixed.\n\n  If you want to use ``JSON`` type as before, then you are able to map some 3rd-party jsonfield to ``JSON`` as follows:\n\n  .. code-block:: python3\n\n    from jsonfield import JSONField  # e.g. https://github.com/dmkoch/django-jsonfield\n    import d2a\n\n    d2a.alias(JSONField, d2a.JSONType)\n\n  Or add to ``settings.D2A_CONFIG['ALIASES']``.\n\n\nQuerying shortcut\n------------------\nExpression\n~~~~~~~~~~~~~~~~~~\nThere are two functions.\n\n:query_expression: To retrieve `SELECT` results, and returns a list containing record.\n:execute_expression: To execute `INSERT`, `DELETE`, `UPDATE` statements, and returns num of records having been affected.\n\n.. code-block:: python3\n\n  >>> from sqlalchemy import (\n  ...     select,\n  ...     insert,\n  ... )\n\n  >>> from d2a import query_expression, execute_expression\n\n  # if you try on `project_mysql` demo, you should write ``from books.modelsa import Author``\n  >>> from books.models_sqla import Author\n\n  >>> AuthorTable = Author.__table__\n\n  >>> records = [\n  ...     {'name': 'a', 'age': 10},\n  ...     {'name': 'b', 'age': 30},\n  ...     {'name': 'c', 'age': 20},\n  ... ]\n\n  >>> # insert\n  >>> stmt = insert(AuthorTable).values(records)\n  >>> execute_expression(stmt)\n  3\n\n  >>> # select\n  >>> stmt = select([\n  ...     AuthorTable.c.id,\n  ...     AuthorTable.c.name,\n  ...     AuthorTable.c.age,\n  ... ]).select_from(AuthorTable).order_by(AuthorTable.c.age)\n\n  >>> query_expression(stmt)\n  [\n    OrderedDict([('id', 12), ('name', 'a'), ('age', 10)]),\n    OrderedDict([('id', 14), ('name', 'c'), ('age', 20)]),\n    OrderedDict([('id', 13), ('name', 'b'), ('age', 30)])\n  ]\n\n  >>> # record as tuple\n  >>> query_expression(stmt, as_col_dict=False)\n  [(12, 'a', 10), (14, 'c', 20), (13, 'b', 30)]\n\n  >>> query_expression(stmt, as_col_dict=False, debug={'printer': print, 'show_explain': True, 'sql_format': True})\n  ====================================================================================================\n  SELECT author.id,\n         author.name,\n         author.age\n  FROM author\n  ORDER BY author.age\n  ====================================================================================================\n  Sort  (cost=16.39..16.74 rows=140 width=522) (actual time=0.027..0.028 rows=18 loops=1)\n    Sort Key: age\n    Sort Method: quicksort  Memory: 25kB\n    ->  Seq Scan on author  (cost=0.00..11.40 rows=140 width=522) (actual time=0.007..0.009 rows=18 loops=1)\n  Planning time: 0.072 ms\n  Execution time: 0.047 ms\n  [(12, 'a', 10), (14, 'c', 20), (13, 'b', 30)]\n\n.. note::\n\n  I added argument of ``query_expression()`` to see debugging information.\n\n  Specify options as dict type like the following:\n\n  .. code-block:: python3\n\n    query_expression(stmt, debug={  # all options can be skipped.\n        'show_sql': True, # if showing the sql query or not.\n        'show_explain': False, # if showing explain for the sql query or not.\n        'sql_format': False, # if formatting the sql query or not.\n        'sql_reindent': True, # if setting indent the sql query or not.\n        'sql_keyword_case': 'upper', # A rule converting reserved words.\n        'explain_prefix': depends on the database type. unless you specify it, an appropriate prefix will be automatically used.\n        'printer': logger.debug, # printing method, if you use python3, then try `print` function.\n        'delimiter': '=' * 100, # characters dividing debug informations.\n        'database': 'default' # django database\n    })\n\n  Default is ``{}`` (An empty dict means disabling debug.)\n\nORM\n~~~~~~~~~~~~~~~~~~\nThere is a function named `make_session` for ORM mode.\n\n.. code-block:: python3\n\n  >>> from d2a import make_session\n  >>> from books.models_sqla import Author\n\n  >>> with make_session() as session:\n  ...     # it commits and flushes automatically when the scope exits.\n  ...     a = Author()\n  ...     a.name = 'righ'\n  ...     a.age = 30\n  ...     session.add(a)\n  ...\n  >>> with make_session() as session:\n  ...     # when the session was rolled back or causes some exception in the context,\n  ...     # it won't register records in the session.\n  ...     a = Author()\n  ...     a.name = 'teruhiko'\n  ...     a.age = 85\n  ...     session.add(a)\n  ...     session.rollback()\n  ...\n  >>> with make_session() as session:\n  ...     session.query(Author.name, Author.age).all()\n  ...\n  [('righ', 30)]\n\nIt receives the following arguments:\n\n:engine: engine object or database-type (**string**) (default: None). When it is omitted, it guesses database type and gets an engine automatically.\n:autoflush: It is the same as `sessionmaker <https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker>`__ (default: True)\n:autocommit:  It is the same as `sessionmaker <https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker>`__ (default: False)\n:expire_on_commit: It is the same as `sessionmaker <https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker>`__ (default: True)\n:info: It is the same as `sessionmaker <https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker>`__ (default: None)\n\nAll arguments can be omitted.\n\n.. warning::\n\n  Supported auto-detecting db types are the following:\n\n  - PostgreSQL\n  - MySQL\n  - Oracle\n\nDemo\n============\n\nstart up environment\n--------------------\n\n.. code-block:: shell\n\n  $ git clone git@github.com:walkframe/d2a.git\n  $ cd d2a\n  $ docker-compose up\n\npreparation\n--------------------\n\n.. code-block:: shell \n\n  $ docker exec -it d2a_app /bin/bash\n  # python -m venv venv # only first time\n  # source venv/bin/activate\n  (venv) # cd project_postgresql/ # (or mysql)\n  (venv) project_postgresql # ./manage.py migrate\n\nexecute\n------------\n\n.. code-block:: shell\n\n  (venv) project_postgresql # ./manage.py shell\n\n.. code-block:: python\n\n  >>> from books import models_sqla\n  >>> book = models_sqla.Book()\n  >>> author = models_sqla.Author()\n  >>> book.author = author\n  >>> author.books\n  [<d2a.book object at 0x7f3cec539358>]\n  # And do something you want to do ;)\n\n\nLinks\n=====\n- https://github.com/walkframe/d2a\n- https://pypi.org/project/d2a/\n\nHistory\n=======\n:2.2.x:\n\n  - :2020-01-03: Release\n    :2020-02-13: dealt with failing CI\n\n  - Supported the following fields:\n\n    - `PositiveBigIntegerField`\n    - `SmallAutoField`\n\n  - Dropped support for the following versions:\n\n    - Python: `< 3.5.0`.\n    - SQLAlchemy: `< 1.1.0`.\n\n  - ``d2a.make_engine`` can receive all ``create_engine`` arguments now.\n  - Remapped django JSONField to JSONB (it was ``JSON`` before)\n  - Migrated to GitHub Actions from CircleCI.\n\n\n:2.1.x:\n\n  - Changed: \n\n    - **Warning:** Changed arg name ``as_dict`` to ``as_col_dict``\n\n  - Added:\n\n    :as_row_list: \n\n      If result set being list type or not.\n\n      default is ``True``.\n\n    :dict_method:\n\n      A method making row to dict.\n      You got to be able to change the method to ``dict()``.\n\n      default is ``collections.OrderedDict``.\n\n    :debug:\n\n      If showing debug information or not. specify options dict.\n\n:2.0.x:\n\n  - Added a shortcut function for executing in ORM mode.\n  - Added two shortcut functions for executing in EXPRESSION mode.\n\n:1.1.x:\n\n  - (2019-02-17)\n  - Added a function to load all models automatically.\n\n:1.0.2:\n\n  - (2018-07-10)\n  - Improved a little.\n\n:1.0.1:\n\n  - (2018-07-06)\n  - Fixed a bug, that it will be provided `None` even though it's not specified `default` argument.\n\n:1.0.0:\n\n  - (2018-07-05)\n  - Fixed bugs.\n  - Added unit tests.\n\n:0.0.6:\n\n  - Fixed a bug that abstract models become the targets.\n  - Deleted `install_requires`.\n\n:0.0.5:\n\n  - added alias method.\n\n:0.0.4:\n\n  - fixed bugs.\n\n:0.0.3:\n\n  - it got easy to declare custom field.\n  - transfer method can define secondary table.\n\n:0.0.2:\n\n  - it supported m2m field.\n  - it limited django version less than `1.9`.\n\n:0.0.1: first release (2017-12-27)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/walkframe/d2a", "keywords": "django,sqlalchemy,alchemy,model,mapping,decralation,table,schema,expression,orm,convert", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "d2a", "package_url": "https://pypi.org/project/d2a/", "platform": "", "project_url": "https://pypi.org/project/d2a/", "project_urls": {"Homepage": "https://github.com/walkframe/d2a"}, "release_url": "https://pypi.org/project/d2a/2.2.2/", "requires_dist": null, "requires_python": "", "summary": "It converts django models to sqlalchemy orm/expression objects.", "version": "2.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/d2a\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/d2a.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4534581ee6ddf97d2d30eb580d2b5b77026af62b/68747470733a2f2f62616467652e667572792e696f2f70792f6432612e737667\"></a>\n<a href=\"https://github.com/walkframe/d2a/actions\" rel=\"nofollow\"><img alt=\"https://github.com/walkframe/d2a/workflows/master/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df94c3d00a0be3117fa3e921ee9e477ea92b752a/68747470733a2f2f6769746875622e636f6d2f77616c6b6672616d652f6432612f776f726b666c6f77732f6d61737465722f62616467652e737667\"></a>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python: 3.5 or later.<ul>\n<li>Tested with 3.5, 3.8</li>\n</ul>\n</li>\n<li>Django: 1.11, 2.x, 3.x<ul>\n<li>Tested with 1.11.27, 2.2.9, 3.0.1, 3.0.3</li>\n</ul>\n</li>\n<li>SQLAlchemy: 1.1 or later.<ul>\n<li>Tested with 1.1.0, 1.3.12</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install d2a\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"auto-loading\">\n<h3>Auto loading</h3>\n<p>Just add <cite>d2a</cite> to <tt>settings.INSTALLED_APPS</tt>.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># top or here</span>\n    <span class=\"s1\">'d2a'</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># example apps</span>\n    <span class=\"s1\">'books'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sales'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<div>\n<p>Warning</p>\n<p>Put it before apps you made as you can.\nBecause it expects to register alchemy model before the other <tt>apps.py</tt>.</p>\n</div>\n<p>Then <cite>models_sqla</cite> (default) in all apps will be imported as a module.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">books</span> <span class=\"kn\">import</span> <span class=\"n\">models_sqla</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span>  <span class=\"c1\"># tab completion</span>\n<span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Author</span><span class=\"p\">(</span>            <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">BookCategory</span><span class=\"p\">(</span>      <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">CategoryRelation</span><span class=\"p\">(</span>  <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"p\">(</span>\n<span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"p\">(</span>              <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Category</span><span class=\"p\">(</span>          <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">models</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">d2a</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"s1\">'&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span>  <span class=\"c1\"># tab completion</span>\n<span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">author</span>       <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">content</span>      <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">metadata</span>     <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n<span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">author_id</span>    <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">description</span>  <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">mro</span><span class=\"p\">(</span>         <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">category</span>     <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">id</span>           <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">price</span>\n<span class=\"c1\"># SQL Expression schema</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">__table__</span>\n<span class=\"n\">Table</span><span class=\"p\">(</span>\n  <span class=\"s1\">'book'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">UUID</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">ColumnDefault</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">uuid4</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f3cebe7e598</span><span class=\"o\">&gt;</span><span class=\"p\">)),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'price'</span><span class=\"p\">,</span> <span class=\"n\">JSON</span><span class=\"p\">(</span><span class=\"n\">astext_type</span><span class=\"o\">=</span><span class=\"n\">Text</span><span class=\"p\">()),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"n\">VARCHAR</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'description'</span><span class=\"p\">,</span> <span class=\"n\">TEXT</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'author_id'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER</span><span class=\"p\">(),</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'author.id'</span><span class=\"p\">),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">,</span> <span class=\"n\">BYTEA</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'tags'</span><span class=\"p\">,</span> <span class=\"n\">ARRAY</span><span class=\"p\">(</span><span class=\"n\">VARCHAR</span><span class=\"p\">()),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">book</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Also it can extract model declared implicitly depending on m2m field.\n(in this case, <cite>BookCategory</cite>)</p>\n<div>\n<p>Note</p>\n<p>You can set configrations to <tt>settings.py</tt>.</p>\n<p>Example:</p>\n<pre><span class=\"c1\"># This variable can be omitted.</span>\n<span class=\"n\">D2A_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'AUTOLOAD'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># optional</span>\n        <span class=\"c1\"># module name: It can be used different module name from `models_sqla`.</span>\n        <span class=\"s1\">'module'</span><span class=\"p\">:</span> <span class=\"s1\">'modelsa'</span><span class=\"p\">,</span>  <span class=\"c1\"># optional, default: 'models_sqla'</span>\n        <span class=\"c1\"># waiting seconds during autoloading</span>\n        <span class=\"s1\">'seconds'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"c1\"># default: 1</span>\n        <span class=\"c1\"># transfer function's args after 'exports' arg.</span>\n        <span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># optional</span>\n            <span class=\"s1\">'db_type'</span><span class=\"p\">:</span> <span class=\"s1\">'postgresql'</span><span class=\"p\">,</span>  <span class=\"c1\"># default: 'default'</span>\n            <span class=\"s1\">'back_type'</span><span class=\"p\">:</span> <span class=\"s1\">'backref'</span><span class=\"p\">,</span>  <span class=\"c1\"># default: 'backref'</span>\n            <span class=\"s1\">'as_table'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># default: False</span>\n            <span class=\"s1\">'name_formatter'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span>  <span class=\"c1\"># default: get_camelcase</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># converting rules for customized fields</span>\n    <span class=\"s1\">'ALIASES'</span><span class=\"p\">:</span> <span class=\"p\">{</span>  <span class=\"c1\"># optional</span>\n        <span class=\"c1\"># Evaluates ExtendedImageField as ImageField</span>\n        <span class=\"n\">ExtendedImageField</span><span class=\"p\">:</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"per-models-module\">\n<h3>Per models module</h3>\n<p>If you want to create a module manually, create a <cite>models_sqla.py</cite> in the apps.</p>\n<p>Write like the following to it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">d2a</span> <span class=\"kn\">import</span> <span class=\"n\">transfer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">())</span>\n</pre>\n<p><cite>models_sqla.py</cite> exists, auto module creation will be omitted.</p>\n<p>And if you create every <cite>models_sqla.py</cite> manually,\nit is unnecessary to set <cite>d2a</cite> to <tt>settings.INSTALLED_APPS</tt>.</p>\n<p>Example:</p>\n<ul>\n<li><a href=\"https://github.com/walkframe/d2a/blob/master/project_postgresql/books/models_sqla.py\" rel=\"nofollow\">project_postgresql/books/models_sqla.py</a></li>\n<li>You can omit specifying <cite>db_type</cite>, then it automatically detects a database type from <tt><span class=\"pre\">settings.DATABASES['default']</span></tt>.<ul>\n<li>Now <cite>postgresql</cite>, <cite>mysql</cite> and <cite>oracle</cite> are allowed,\nthe other types will be converted to the following types as <tt>default</tt> type:\n<a href=\"https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/types.py\" rel=\"nofollow\">sqlalchemy/types.py</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"per-model\">\n<h3>Per model</h3>\n<p>If you just want to convert one model, you should use <cite>declare</cite> function.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">d2a</span> <span class=\"kn\">import</span> <span class=\"n\">declare</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sales.models</span> <span class=\"kn\">import</span> <span class=\"n\">Sales</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sales</span> <span class=\"o\">=</span> <span class=\"n\">declare</span><span class=\"p\">(</span><span class=\"n\">Sales</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sales</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">d2a</span><span class=\"o\">.</span><span class=\"n\">sales</span><span class=\"s1\">'&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">__table__</span>\n<span class=\"n\">Table</span><span class=\"p\">(</span>\n  <span class=\"s1\">'sales'</span><span class=\"p\">,</span> <span class=\"n\">MetaData</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">BIGINT</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">sales</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'book_id'</span><span class=\"p\">,</span> <span class=\"n\">UUID</span><span class=\"p\">(),</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'book.id'</span><span class=\"p\">),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">sales</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'sold'</span><span class=\"p\">,</span> <span class=\"n\">TIMESTAMP</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">sales</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">nullable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'reservation'</span><span class=\"p\">,</span> <span class=\"n\">INTERVAL</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">sales</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n  <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'source'</span><span class=\"p\">,</span> <span class=\"n\">INET</span><span class=\"p\">(),</span> <span class=\"n\">table</span><span class=\"o\">=&lt;</span><span class=\"n\">sales</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n  <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sales</span><span class=\"o\">.</span>\n<span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">book</span>         <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">id</span>           <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">mro</span><span class=\"p\">(</span>         <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">sold</span>\n<span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">book_id</span>      <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">metadata</span>     <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">reservation</span>  <span class=\"n\">sales</span><span class=\"o\">.</span><span class=\"n\">source</span>\n</pre>\n</div>\n<div id=\"custom-fields\">\n<h3>Custom fields</h3>\n<p>If you are using customized field (not built-in),\nyou can register the field as the other field using <cite>alias</cite> or <cite>alias_dict</cite> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">ImageField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExtendedImageField</span><span class=\"p\">(</span><span class=\"n\">ImageField</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"something customizing\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">d2a</span> <span class=\"kn\">import</span> <span class=\"n\">alias</span>\n<span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"n\">ExtendedImageField</span><span class=\"p\">,</span> <span class=\"n\">ImageField</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or</span>\n<span class=\"n\">alias_dict</span><span class=\"p\">({</span>\n    <span class=\"n\">ExtendedImageField</span><span class=\"p\">:</span> <span class=\"n\">ImageField</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<div>\n<p>Note</p>\n<p>Before 2.1.x d2a maps <tt>django.contrib.postgres.fields.JSONField</tt> to <tt>JSON</tt> by mistake. It should have mapped it to <tt>JSONB</tt>.</p>\n<p>Since 2.2.0 the mapping is fixed.</p>\n<p>If you want to use <tt>JSON</tt> type as before, then you are able to map some 3rd-party jsonfield to <tt>JSON</tt> as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonfield</span> <span class=\"kn\">import</span> <span class=\"n\">JSONField</span>  <span class=\"c1\"># e.g. https://github.com/dmkoch/django-jsonfield</span>\n<span class=\"kn\">import</span> <span class=\"nn\">d2a</span>\n\n<span class=\"n\">d2a</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"n\">JSONField</span><span class=\"p\">,</span> <span class=\"n\">d2a</span><span class=\"o\">.</span><span class=\"n\">JSONType</span><span class=\"p\">)</span>\n</pre>\n<p>Or add to <tt><span class=\"pre\">settings.D2A_CONFIG['ALIASES']</span></tt>.</p>\n</div>\n</div>\n<div id=\"querying-shortcut\">\n<h3>Querying shortcut</h3>\n<div id=\"expression\">\n<h4>Expression</h4>\n<p>There are two functions.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>query_expression:</th></tr>\n<tr><td>\u00a0</td><td>To retrieve <cite>SELECT</cite> results, and returns a list containing record.</td>\n</tr>\n<tr><th>execute_expression:</th></tr>\n<tr><td>\u00a0</td><td>To execute <cite>INSERT</cite>, <cite>DELETE</cite>, <cite>UPDATE</cite> statements, and returns num of records having been affected.</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">select</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">insert</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">d2a</span> <span class=\"kn\">import</span> <span class=\"n\">query_expression</span><span class=\"p\">,</span> <span class=\"n\">execute_expression</span>\n\n<span class=\"c1\"># if you try on `project_mysql` demo, you should write ``from books.modelsa import Author``</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">books.models_sqla</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">AuthorTable</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">__table__</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># insert</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">AuthorTable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">execute_expression</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># select</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">([</span>\n<span class=\"o\">...</span>     <span class=\"n\">AuthorTable</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">AuthorTable</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">AuthorTable</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">select_from</span><span class=\"p\">(</span><span class=\"n\">AuthorTable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">AuthorTable</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query_expression</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">)</span>\n<span class=\"p\">[</span>\n  <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]),</span>\n  <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]),</span>\n  <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)])</span>\n<span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># record as tuple</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query_expression</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">,</span> <span class=\"n\">as_col_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query_expression</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">,</span> <span class=\"n\">as_col_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'printer'</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">,</span> <span class=\"s1\">'show_explain'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'sql_format'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"o\">====================================================================================================</span>\n<span class=\"n\">SELECT</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n       <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n       <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">age</span>\n<span class=\"n\">FROM</span> <span class=\"n\">author</span>\n<span class=\"n\">ORDER</span> <span class=\"n\">BY</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">age</span>\n<span class=\"o\">====================================================================================================</span>\n<span class=\"n\">Sort</span>  <span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mf\">16.39</span><span class=\"o\">..</span><span class=\"mf\">16.74</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">140</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">522</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">actual</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mf\">0.027</span><span class=\"o\">..</span><span class=\"mf\">0.028</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">18</span> <span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"n\">Sort</span> <span class=\"n\">Key</span><span class=\"p\">:</span> <span class=\"n\">age</span>\n  <span class=\"n\">Sort</span> <span class=\"n\">Method</span><span class=\"p\">:</span> <span class=\"n\">quicksort</span>  <span class=\"n\">Memory</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"n\">kB</span>\n  <span class=\"o\">-&gt;</span>  <span class=\"n\">Seq</span> <span class=\"n\">Scan</span> <span class=\"n\">on</span> <span class=\"n\">author</span>  <span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"o\">=</span><span class=\"mf\">0.00</span><span class=\"o\">..</span><span class=\"mf\">11.40</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">140</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">522</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">actual</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mf\">0.007</span><span class=\"o\">..</span><span class=\"mf\">0.009</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">18</span> <span class=\"n\">loops</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Planning</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.072</span> <span class=\"n\">ms</span>\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.047</span> <span class=\"n\">ms</span>\n<span class=\"p\">[(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n</pre>\n<div>\n<p>Note</p>\n<p>I added argument of <tt>query_expression()</tt> to see debugging information.</p>\n<p>Specify options as dict type like the following:</p>\n<pre><span class=\"n\">query_expression</span><span class=\"p\">(</span><span class=\"n\">stmt</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"p\">{</span>  <span class=\"c1\"># all options can be skipped.</span>\n    <span class=\"s1\">'show_sql'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># if showing the sql query or not.</span>\n    <span class=\"s1\">'show_explain'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># if showing explain for the sql query or not.</span>\n    <span class=\"s1\">'sql_format'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># if formatting the sql query or not.</span>\n    <span class=\"s1\">'sql_reindent'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># if setting indent the sql query or not.</span>\n    <span class=\"s1\">'sql_keyword_case'</span><span class=\"p\">:</span> <span class=\"s1\">'upper'</span><span class=\"p\">,</span> <span class=\"c1\"># A rule converting reserved words.</span>\n    <span class=\"s1\">'explain_prefix'</span><span class=\"p\">:</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">database</span> <span class=\"nb\">type</span><span class=\"o\">.</span> <span class=\"n\">unless</span> <span class=\"n\">you</span> <span class=\"n\">specify</span> <span class=\"n\">it</span><span class=\"p\">,</span> <span class=\"n\">an</span> <span class=\"n\">appropriate</span> <span class=\"n\">prefix</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">automatically</span> <span class=\"n\">used</span><span class=\"o\">.</span>\n    <span class=\"s1\">'printer'</span><span class=\"p\">:</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">,</span> <span class=\"c1\"># printing method, if you use python3, then try `print` function.</span>\n    <span class=\"s1\">'delimiter'</span><span class=\"p\">:</span> <span class=\"s1\">'='</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"c1\"># characters dividing debug informations.</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'default'</span> <span class=\"c1\"># django database</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Default is <tt>{}</tt> (An empty dict means disabling debug.)</p>\n</div>\n</div>\n<div id=\"orm\">\n<h4>ORM</h4>\n<p>There is a function named <cite>make_session</cite> for ORM mode.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">d2a</span> <span class=\"kn\">import</span> <span class=\"n\">make_session</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">books.models_sqla</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">make_session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># it commits and flushes automatically when the scope exits.</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'righ'</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">make_session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># when the session was rolled back or causes some exception in the context,</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># it won't register records in the session.</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'teruhiko'</span>\n<span class=\"o\">...</span>     <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">85</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">make_session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"p\">[(</span><span class=\"s1\">'righ'</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n</pre>\n<p>It receives the following arguments:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>engine:</th><td>engine object or database-type (<strong>string</strong>) (default: None). When it is omitted, it guesses database type and gets an engine automatically.</td>\n</tr>\n<tr><th>autoflush:</th><td>It is the same as <a href=\"https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker\" rel=\"nofollow\">sessionmaker</a> (default: True)</td>\n</tr>\n<tr><th>autocommit:</th><td>It is the same as <a href=\"https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker\" rel=\"nofollow\">sessionmaker</a> (default: False)</td>\n</tr>\n<tr><th>expire_on_commit:</th></tr>\n<tr><td>\u00a0</td><td>It is the same as <a href=\"https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker\" rel=\"nofollow\">sessionmaker</a> (default: True)</td>\n</tr>\n<tr><th>info:</th><td>It is the same as <a href=\"https://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker\" rel=\"nofollow\">sessionmaker</a> (default: None)</td>\n</tr>\n</tbody>\n</table>\n<p>All arguments can be omitted.</p>\n<div>\n<p>Warning</p>\n<p>Supported auto-detecting db types are the following:</p>\n<ul>\n<li>PostgreSQL</li>\n<li>MySQL</li>\n<li>Oracle</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div id=\"demo\">\n<h2>Demo</h2>\n<div id=\"start-up-environment\">\n<h3>start up environment</h3>\n<pre>$ git clone git@github.com:walkframe/d2a.git\n$ <span class=\"nb\">cd</span> d2a\n$ docker-compose up\n</pre>\n</div>\n<div id=\"preparation\">\n<h3>preparation</h3>\n<pre>$ docker <span class=\"nb\">exec</span> -it d2a_app /bin/bash\n<span class=\"c1\"># python -m venv venv # only first time\n# source venv/bin/activate\n</span><span class=\"o\">(</span>venv<span class=\"o\">)</span> <span class=\"c1\"># cd project_postgresql/ # (or mysql)\n</span><span class=\"o\">(</span>venv<span class=\"o\">)</span> project_postgresql <span class=\"c1\"># ./manage.py migrate</span>\n</pre>\n</div>\n<div id=\"execute\">\n<h3>execute</h3>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> project_postgresql <span class=\"c1\"># ./manage.py shell</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">books</span> <span class=\"kn\">import</span> <span class=\"n\">models_sqla</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Book</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models_sqla</span><span class=\"o\">.</span><span class=\"n\">Author</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">author</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">books</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">d2a</span><span class=\"o\">.</span><span class=\"n\">book</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f3cec539358</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"c1\"># And do something you want to do ;)</span>\n</pre>\n</div>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/walkframe/d2a\" rel=\"nofollow\">https://github.com/walkframe/d2a</a></li>\n<li><a href=\"https://pypi.org/project/d2a/\" rel=\"nofollow\">https://pypi.org/project/d2a/</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>2.2.x:</th><td><ul>\n<li><table>\n<col>\n<col>\n<tbody>\n<tr><th>2020-01-03:</th><td>Release</td>\n</tr>\n<tr><th>2020-02-13:</th><td>dealt with failing CI</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>Supported the following fields:<ul>\n<li><cite>PositiveBigIntegerField</cite></li>\n<li><cite>SmallAutoField</cite></li>\n</ul>\n</li>\n<li>Dropped support for the following versions:<ul>\n<li>Python: <cite>&lt; 3.5.0</cite>.</li>\n<li>SQLAlchemy: <cite>&lt; 1.1.0</cite>.</li>\n</ul>\n</li>\n<li><tt>d2a.make_engine</tt> can receive all <tt>create_engine</tt> arguments now.</li>\n<li>Remapped django JSONField to JSONB (it was <tt>JSON</tt> before)</li>\n<li>Migrated to GitHub Actions from CircleCI.</li>\n</ul>\n</td>\n</tr>\n<tr><th>2.1.x:</th><td><ul>\n<li><p>Changed:</p>\n<ul>\n<li><strong>Warning:</strong> Changed arg name <tt>as_dict</tt> to <tt>as_col_dict</tt></li>\n</ul>\n</li>\n<li><p>Added:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>as_row_list:</th><td><p>If result set being list type or not.</p>\n<p>default is <tt>True</tt>.</p>\n</td>\n</tr>\n<tr><th>dict_method:</th><td><p>A method making row to dict.\nYou got to be able to change the method to <tt>dict()</tt>.</p>\n<p>default is <tt>collections.OrderedDict</tt>.</p>\n</td>\n</tr>\n<tr><th>debug:</th><td><p>If showing debug information or not. specify options dict.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</td>\n</tr>\n<tr><th>2.0.x:</th><td><ul>\n<li>Added a shortcut function for executing in ORM mode.</li>\n<li>Added two shortcut functions for executing in EXPRESSION mode.</li>\n</ul>\n</td>\n</tr>\n<tr><th>1.1.x:</th><td><ul>\n<li>(2019-02-17)</li>\n<li>Added a function to load all models automatically.</li>\n</ul>\n</td>\n</tr>\n<tr><th>1.0.2:</th><td><ul>\n<li>(2018-07-10)</li>\n<li>Improved a little.</li>\n</ul>\n</td>\n</tr>\n<tr><th>1.0.1:</th><td><ul>\n<li>(2018-07-06)</li>\n<li>Fixed a bug, that it will be provided <cite>None</cite> even though it\u2019s not specified <cite>default</cite> argument.</li>\n</ul>\n</td>\n</tr>\n<tr><th>1.0.0:</th><td><ul>\n<li>(2018-07-05)</li>\n<li>Fixed bugs.</li>\n<li>Added unit tests.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.6:</th><td><ul>\n<li>Fixed a bug that abstract models become the targets.</li>\n<li>Deleted <cite>install_requires</cite>.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.5:</th><td><ul>\n<li>added alias method.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.4:</th><td><ul>\n<li>fixed bugs.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.3:</th><td><ul>\n<li>it got easy to declare custom field.</li>\n<li>transfer method can define secondary table.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.2:</th><td><ul>\n<li>it supported m2m field.</li>\n<li>it limited django version less than <cite>1.9</cite>.</li>\n</ul>\n</td>\n</tr>\n<tr><th>0.0.1:</th><td><p>first release (2017-12-27)</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6623772, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "09af9cacdfeed27979c2db7155c779ba", "sha256": "a9434c4df9bb7b0a2e0c4bf5ace98b16e13ecaa02f307e17f451651d714c2bc4"}, "downloads": -1, "filename": "d2a-0.0.1.tar.gz", "has_sig": false, "md5_digest": "09af9cacdfeed27979c2db7155c779ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3548, "upload_time": "2017-12-27T13:44:04", "upload_time_iso_8601": "2017-12-27T13:44:04.688368Z", "url": "https://files.pythonhosted.org/packages/af/bb/9b26bb08740863018c459944dbbf9b9fb291af9b043b348dc1af3c6f7785/d2a-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dec7d15ebc7229922d89492c5f7ff1d8", "sha256": "a30cafcaea2d4ff4745a3c6995395dc1ba0509e66aaf7cb89f9ea5b61989f994"}, "downloads": -1, "filename": "d2a-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dec7d15ebc7229922d89492c5f7ff1d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4471, "upload_time": "2017-12-29T04:42:54", "upload_time_iso_8601": "2017-12-29T04:42:54.330902Z", "url": "https://files.pythonhosted.org/packages/30/86/22e2ff732e12f03eaced88d463d15d11a63e9888ffb2c416e8710806fcd4/d2a-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ad7dd1e71e3025b245f8bec5b8fd90cf", "sha256": "f8851d74825532089cee660fb5f5ecf4b86bf7f347c4a56968ec4e476125d39f"}, "downloads": -1, "filename": "d2a-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ad7dd1e71e3025b245f8bec5b8fd90cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4960, "upload_time": "2018-01-04T16:50:03", "upload_time_iso_8601": "2018-01-04T16:50:03.073924Z", "url": "https://files.pythonhosted.org/packages/29/8c/4f50618a751b5e09ef0b61203f19baf08e67490d351e1fd85912d4fd18a8/d2a-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "93a85f14154c8fc40faca87322c8ee50", "sha256": "977ff69ba23888a69834afd6c99d9dbc027c5102fd1632751df16c53cae2327c"}, "downloads": -1, "filename": "d2a-0.0.4.tar.gz", "has_sig": false, "md5_digest": "93a85f14154c8fc40faca87322c8ee50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5075, "upload_time": "2018-01-09T14:23:43", "upload_time_iso_8601": "2018-01-09T14:23:43.802688Z", "url": "https://files.pythonhosted.org/packages/24/f9/807a5e9b72603ed9104468729b0450815f0ba5bd2d683d447ec2936941ef/d2a-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3da1fcb9be44ba7546561a2315455324", "sha256": "93533fbda6af0fe692d5dd1dc70284a8cf6439bd5152d566378ba83d6520e698"}, "downloads": -1, "filename": "d2a-0.0.5.tar.gz", "has_sig": false, "md5_digest": "3da1fcb9be44ba7546561a2315455324", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5349, "upload_time": "2018-02-06T06:39:03", "upload_time_iso_8601": "2018-02-06T06:39:03.155300Z", "url": "https://files.pythonhosted.org/packages/d4/b8/2bde4b7b21641ec86f3579acb4e0f8d30a6fce33e94689a3998c5a97efd2/d2a-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "1faf046778d7edab65395aa7762df8af", "sha256": "be253c4db3057fe85885451c419fc86b9834ca084cfab8ae007fdf96cb3e9c9e"}, "downloads": -1, "filename": "d2a-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1faf046778d7edab65395aa7762df8af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5370, "upload_time": "2018-02-09T03:26:16", "upload_time_iso_8601": "2018-02-09T03:26:16.896970Z", "url": "https://files.pythonhosted.org/packages/73/08/299e89e5e3430aa0a40bd09a622c655b234c989165cbb8c93142f0d89769/d2a-0.0.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1e12f3ab9ee3c932b988e2ad3b4a2ebe", "sha256": "19e7688f804055ee7ca2d66f73cd283f4d9b0232ea17d568feaf99786d0b77a4"}, "downloads": -1, "filename": "d2a-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1e12f3ab9ee3c932b988e2ad3b4a2ebe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7683, "upload_time": "2018-07-05T12:09:06", "upload_time_iso_8601": "2018-07-05T12:09:06.751442Z", "url": "https://files.pythonhosted.org/packages/94/f9/2730c171025076855a878741771e966292d14fc8a77a4ba856f97ba451fd/d2a-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5051936c71879b9c20a980f8adef291d", "sha256": "eead52338ae7ec30ab890d745ff476c6fc0d7659781260708c015a295486873f"}, "downloads": -1, "filename": "d2a-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5051936c71879b9c20a980f8adef291d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7843, "upload_time": "2018-07-06T08:08:17", "upload_time_iso_8601": "2018-07-06T08:08:17.594134Z", "url": "https://files.pythonhosted.org/packages/43/67/fae883b7f762f3426c4de9afde6c94401f11f2e0cd559c1b5f6fceac0438/d2a-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bce7447477bc74c0e6cadb6b94047e97", "sha256": "5f49aa331c96b80d7818021275a5bbb2d6199f53274546c453977499c5d8052c"}, "downloads": -1, "filename": "d2a-1.0.2.tar.gz", "has_sig": false, "md5_digest": "bce7447477bc74c0e6cadb6b94047e97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9426, "upload_time": "2018-07-10T15:13:52", "upload_time_iso_8601": "2018-07-10T15:13:52.128106Z", "url": "https://files.pythonhosted.org/packages/11/88/4a2dd11e8f3a15ae8d68a9b13cba305d1c8d7c6f2353a77c872f93c3883a/d2a-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a4e52845cb15a41b95b5f8092aa81cd6", "sha256": "a200379bcb26730b76b728a3d48fe934719a84a5d9100f35b3140902209ec43d"}, "downloads": -1, "filename": "d2a-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4e52845cb15a41b95b5f8092aa81cd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9084, "upload_time": "2019-02-17T10:09:55", "upload_time_iso_8601": "2019-02-17T10:09:55.157035Z", "url": "https://files.pythonhosted.org/packages/a3/45/3affb96a8c19b7ef18cf9f70f21ac163c97023c77ced26023d0fd8f37fc6/d2a-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d2fa4bddcaf7657f319ee297ef465db", "sha256": "f43e512a6566b014a93eab5fcad55ad17b793a872ec20a0571abb2bf1b7bc3c4"}, "downloads": -1, "filename": "d2a-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3d2fa4bddcaf7657f319ee297ef465db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8406, "upload_time": "2019-02-17T10:09:59", "upload_time_iso_8601": "2019-02-17T10:09:59.435886Z", "url": "https://files.pythonhosted.org/packages/aa/48/1d9ba229c06e0c64ab8bf3bc406bc96b1167b25249fd094f71c1bac3fb6b/d2a-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "9239e38a62398d6e4842bd9e9204d02c", "sha256": "a6b3f539befda5ba869eeb8e31601605e66c035fb10cdb570db2faf75c0772b6"}, "downloads": -1, "filename": "d2a-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9239e38a62398d6e4842bd9e9204d02c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9171, "upload_time": "2019-02-20T14:12:39", "upload_time_iso_8601": "2019-02-20T14:12:39.040195Z", "url": "https://files.pythonhosted.org/packages/60/9d/5dd1974f89355c21d45107ede0b1db29ee8734660a1148f1b7f8da71dc18/d2a-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfa6315703f536f919bc6f78fc49993f", "sha256": "ed0541c855b7a26351e29f6c99f4bb2fe2192e3461a3ca9b8e390a4809d2485c"}, "downloads": -1, "filename": "d2a-1.1.1.tar.gz", "has_sig": false, "md5_digest": "cfa6315703f536f919bc6f78fc49993f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8519, "upload_time": "2019-02-20T14:12:44", "upload_time_iso_8601": "2019-02-20T14:12:44.071067Z", "url": "https://files.pythonhosted.org/packages/6b/90/aa6955543cbc9680e591ee087c5eb0fb2dc17f2e079227b1187f9cb10950/d2a-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "038b02c29ff12663ed7301398c380c86", "sha256": "92e6ac8f206e5ef5c7a2368d8190da03fa14b5dfa9ded65ad367f464a50f14ad"}, "downloads": -1, "filename": "d2a-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "038b02c29ff12663ed7301398c380c86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9464, "upload_time": "2019-02-21T15:35:19", "upload_time_iso_8601": "2019-02-21T15:35:19.786363Z", "url": "https://files.pythonhosted.org/packages/85/56/ef8b9da9e779cefce965b700901598f87f79e4c0e3589733f20f9f084391/d2a-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cec2fe6a6712bfe6ec9eac4c50dbfe67", "sha256": "01754d2ab644694b142e9ea48afd27a57fadd53e469a96c55ab60792e0c1d73e"}, "downloads": -1, "filename": "d2a-1.1.2.tar.gz", "has_sig": false, "md5_digest": "cec2fe6a6712bfe6ec9eac4c50dbfe67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8795, "upload_time": "2019-02-21T15:35:27", "upload_time_iso_8601": "2019-02-21T15:35:27.057839Z", "url": "https://files.pythonhosted.org/packages/f7/a2/74c9f8231703a32e07a581c7cf6501a26d61954c63108315be0c61220882/d2a-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "be237d4a348ebc8f8554e08a588d852f", "sha256": "3cb316eb61207b026c13f21c200ac8f7e38d8d4fad7035f23d2e61d111929da1"}, "downloads": -1, "filename": "d2a-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "be237d4a348ebc8f8554e08a588d852f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9465, "upload_time": "2019-02-21T15:38:02", "upload_time_iso_8601": "2019-02-21T15:38:02.408722Z", "url": "https://files.pythonhosted.org/packages/2e/12/0a25566a0dfd06febc62f35564bddf9c368f99602ad770b66538f1a9bf38/d2a-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0ff0f5205d89a55bbf43dfd3ccac6b7", "sha256": "080734a1ec05b1079f5e89f142ca434b971b5b6c0b314d355951a0d8dae535b4"}, "downloads": -1, "filename": "d2a-1.1.3.tar.gz", "has_sig": false, "md5_digest": "b0ff0f5205d89a55bbf43dfd3ccac6b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8794, "upload_time": "2019-02-21T15:38:10", "upload_time_iso_8601": "2019-02-21T15:38:10.532384Z", "url": "https://files.pythonhosted.org/packages/67/8e/46fe9536ff4ae817dd555e01d5c0fb96b3fe1c7b43ff9df57ae5ed788dae/d2a-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "97d9dcb8266465482b1aefc9e5247cc6", "sha256": "5159e2123a0e1cc7cb5e0ef450661d50f5f5cfb886c0c44a0aa7771d9718292a"}, "downloads": -1, "filename": "d2a-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "97d9dcb8266465482b1aefc9e5247cc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9647, "upload_time": "2019-02-28T15:20:50", "upload_time_iso_8601": "2019-02-28T15:20:50.880422Z", "url": "https://files.pythonhosted.org/packages/b5/e4/4c596a4c96383f534b833446e37e5d29cfbc1140b230254daace36c3661c/d2a-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ee180927630d931897554a58f1acf53", "sha256": "25cefb3ced28a17476f1d742118961166a89d57876d4dcd2b1f26ce8f0d2ea8c"}, "downloads": -1, "filename": "d2a-1.1.4.tar.gz", "has_sig": false, "md5_digest": "6ee180927630d931897554a58f1acf53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8943, "upload_time": "2019-02-28T15:20:59", "upload_time_iso_8601": "2019-02-28T15:20:59.364990Z", "url": "https://files.pythonhosted.org/packages/34/c2/e41d3574161721d778c17396e7850fccad1a37632718b49c370787359692/d2a-1.1.4.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "09097e8ca9699a568a2d712d3d9cefb6", "sha256": "ac7eb11b238c211ece6da8bad5907b6e933730253917cc4595bdbb239eba6712"}, "downloads": -1, "filename": "d2a-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "09097e8ca9699a568a2d712d3d9cefb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12260, "upload_time": "2019-03-20T09:12:40", "upload_time_iso_8601": "2019-03-20T09:12:40.471212Z", "url": "https://files.pythonhosted.org/packages/28/d7/5faa28e8593030959d47de79b62dbb92ddf789095814ba34c13ef63cca3e/d2a-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27a396510119c74cbe4bdb0f77070c3a", "sha256": "a6a53009df6f2e27a1f60069518ab23543aff5dc67903f618350f4200bc1a75c"}, "downloads": -1, "filename": "d2a-2.0.0.tar.gz", "has_sig": false, "md5_digest": "27a396510119c74cbe4bdb0f77070c3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14947, "upload_time": "2019-03-20T09:12:42", "upload_time_iso_8601": "2019-03-20T09:12:42.660761Z", "url": "https://files.pythonhosted.org/packages/8c/0d/607b8120f7e02b0c72310e227908285b48d9db6c4000379877ddac6e0b86/d2a-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e6d942503138b5ebf5c1bc8ea6b755ff", "sha256": "d7a74e325be7399b8b35cedc84f79d6f735c0da91223ed7391966d92b11bf342"}, "downloads": -1, "filename": "d2a-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6d942503138b5ebf5c1bc8ea6b755ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13935, "upload_time": "2019-04-24T12:24:26", "upload_time_iso_8601": "2019-04-24T12:24:26.613094Z", "url": "https://files.pythonhosted.org/packages/94/70/a86430ae508c7d6f37e253a18a507af74c3171abefa57c11011a4199c26b/d2a-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c0faa2ab3a09abe28ec8e7261cb04e9", "sha256": "932627f2776d86bca8db7852a9db2729026556faa545c33243bbb7f39e2a33ad"}, "downloads": -1, "filename": "d2a-2.1.0.tar.gz", "has_sig": false, "md5_digest": "7c0faa2ab3a09abe28ec8e7261cb04e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17335, "upload_time": "2019-04-24T12:24:33", "upload_time_iso_8601": "2019-04-24T12:24:33.846042Z", "url": "https://files.pythonhosted.org/packages/18/d4/cd021b34e76c5ac1492d332244f5617caacbaec0e0b6533ac2e4c0f70f54/d2a-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "3c1416a4146815d9d1bbe0743ee21580", "sha256": "fe1abc5e244972d6d2d0f9f314f4bd242631231502e40cc7ce6c8b99bdad65db"}, "downloads": -1, "filename": "d2a-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c1416a4146815d9d1bbe0743ee21580", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13938, "upload_time": "2019-05-05T02:10:19", "upload_time_iso_8601": "2019-05-05T02:10:19.185703Z", "url": "https://files.pythonhosted.org/packages/39/fe/e93b90aca9146fe5ce6d3169bc5c9c9722092a651244ebcb0b9124f74190/d2a-2.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6d5e2737db29ef4c17979ff4ca8aca9", "sha256": "1b8b0952b754c9faef10bcb3bc4e0cfb2c2f70c30fabcb5d5bc5836bf65ccaf7"}, "downloads": -1, "filename": "d2a-2.1.1.tar.gz", "has_sig": false, "md5_digest": "c6d5e2737db29ef4c17979ff4ca8aca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17350, "upload_time": "2019-05-05T02:10:27", "upload_time_iso_8601": "2019-05-05T02:10:27.901694Z", "url": "https://files.pythonhosted.org/packages/3b/de/24132bbb6ff955c850f2dbfca48f46e3e9d24f338282b6f3a2731aff8342/d2a-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "1d9191e0b6f4b0cf9ac23beb9a7c5836", "sha256": "fdc7c3ed9b7c0dab5913ee8e58c44622fa91ca907fb8fff621fadc17b15eabe9"}, "downloads": -1, "filename": "d2a-2.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1d9191e0b6f4b0cf9ac23beb9a7c5836", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13936, "upload_time": "2019-06-15T04:01:59", "upload_time_iso_8601": "2019-06-15T04:01:59.086690Z", "url": "https://files.pythonhosted.org/packages/a0/8a/03012b16b9df6ff5151b6c4de6ed3a1a99d68bac68ec7b9ed5e67de75ad6/d2a-2.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47b36946fda5ed807086af457fc96032", "sha256": "68805eb15d1ef153ebde346febe2d76eff9746fd9ceed43ed5cbc803f4e5a4ee"}, "downloads": -1, "filename": "d2a-2.1.2.tar.gz", "has_sig": false, "md5_digest": "47b36946fda5ed807086af457fc96032", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17359, "upload_time": "2019-06-15T04:02:01", "upload_time_iso_8601": "2019-06-15T04:02:01.615110Z", "url": "https://files.pythonhosted.org/packages/b9/99/2a5da750b79cc14b591270430bfa87a61caae1cf5ac67c9b7f5039d058da/d2a-2.1.2.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "36114c5aafda1de4c44cd002ece6ad5e", "sha256": "35c4b28f3107e05438c15eaa2856c6683b4fc241126e983f77462a7b3bf04109"}, "downloads": -1, "filename": "d2a-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "36114c5aafda1de4c44cd002ece6ad5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14423, "upload_time": "2020-01-03T02:00:59", "upload_time_iso_8601": "2020-01-03T02:00:59.441410Z", "url": "https://files.pythonhosted.org/packages/b6/ea/659ccdd9c9ea2256245156499281dce9eaed7a49ba9e5425dfc358ad2146/d2a-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a260c5aa0afed679d06b82cca42b74fd", "sha256": "30852d0550036d797c7ce0cd65803ef2fa4719d08fbc80761399a11171fa8c64"}, "downloads": -1, "filename": "d2a-2.2.0.tar.gz", "has_sig": false, "md5_digest": "a260c5aa0afed679d06b82cca42b74fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18377, "upload_time": "2020-01-03T02:01:01", "upload_time_iso_8601": "2020-01-03T02:01:01.540325Z", "url": "https://files.pythonhosted.org/packages/d9/f3/d9d837bbc3041b6b8581a0cba1a254b35e1b211c7ecc7453e9b3eb4f7313/d2a-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "5d044306962ad3bf052cfecc6001ca95", "sha256": "2b8c0e779a320bfa7f5d1f2101ab1abd17930deb649b0a32c20ccfc2918307be"}, "downloads": -1, "filename": "d2a-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5d044306962ad3bf052cfecc6001ca95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14422, "upload_time": "2020-01-03T07:31:47", "upload_time_iso_8601": "2020-01-03T07:31:47.519414Z", "url": "https://files.pythonhosted.org/packages/93/33/57bb32c6f0c424e16854edf9b4de5a2fea391f0de710cc05b169f4d805b1/d2a-2.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00687500e0bcf09dd3fbf81d9e282c37", "sha256": "b2f3502ee73986a32bbfcea327a89925d3ad68597dd72f25df1d78120352b51b"}, "downloads": -1, "filename": "d2a-2.2.1.tar.gz", "has_sig": false, "md5_digest": "00687500e0bcf09dd3fbf81d9e282c37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18373, "upload_time": "2020-01-03T07:31:50", "upload_time_iso_8601": "2020-01-03T07:31:50.334786Z", "url": "https://files.pythonhosted.org/packages/14/9b/77b814efe8c030ca252574dd45cc92dbf73efa00c22ee27a284fa7e24999/d2a-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "b7d90e47871317526875424e60b17b09", "sha256": "b1bed9ded4113bd5d3a1ad1212961a7ec830a569247c25a6f6188acaccc06a86"}, "downloads": -1, "filename": "d2a-2.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "b7d90e47871317526875424e60b17b09", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14438, "upload_time": "2020-02-13T14:33:05", "upload_time_iso_8601": "2020-02-13T14:33:05.319599Z", "url": "https://files.pythonhosted.org/packages/15/e1/6c770cc21c1399ee65368e4575629e1742bd5e6f6869e137eda546b81934/d2a-2.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02eda5f0a650c0be90b9de546e0644bc", "sha256": "cf51234c5430d711a9b5bc7a8d12f59e508b4b2eba372387611639cb54dd039b"}, "downloads": -1, "filename": "d2a-2.2.2.tar.gz", "has_sig": false, "md5_digest": "02eda5f0a650c0be90b9de546e0644bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14136, "upload_time": "2020-02-13T14:33:09", "upload_time_iso_8601": "2020-02-13T14:33:09.318781Z", "url": "https://files.pythonhosted.org/packages/66/45/b67fc4d784df52b17ac8ac794dbd5fc015c4bbc9a0d01fe3ef43cc014811/d2a-2.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7d90e47871317526875424e60b17b09", "sha256": "b1bed9ded4113bd5d3a1ad1212961a7ec830a569247c25a6f6188acaccc06a86"}, "downloads": -1, "filename": "d2a-2.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "b7d90e47871317526875424e60b17b09", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 14438, "upload_time": "2020-02-13T14:33:05", "upload_time_iso_8601": "2020-02-13T14:33:05.319599Z", "url": "https://files.pythonhosted.org/packages/15/e1/6c770cc21c1399ee65368e4575629e1742bd5e6f6869e137eda546b81934/d2a-2.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02eda5f0a650c0be90b9de546e0644bc", "sha256": "cf51234c5430d711a9b5bc7a8d12f59e508b4b2eba372387611639cb54dd039b"}, "downloads": -1, "filename": "d2a-2.2.2.tar.gz", "has_sig": false, "md5_digest": "02eda5f0a650c0be90b9de546e0644bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14136, "upload_time": "2020-02-13T14:33:09", "upload_time_iso_8601": "2020-02-13T14:33:09.318781Z", "url": "https://files.pythonhosted.org/packages/66/45/b67fc4d784df52b17ac8ac794dbd5fc015c4bbc9a0d01fe3ef43cc014811/d2a-2.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:00 2020"}