{"info": {"author": "Gordon McCreight", "author_email": "gordon@mccreight.com", "bugtrack_url": null, "classifiers": [], "description": "=======\nFacture\n=======\n\n--------\nOverview\n--------\n\nFacture is FAC-tories that generate partition-isolated fix-TURE data, ideal for\nelaborating scenarios.\n\n------------\nInstallation\n------------\n\n``pip install facturedata``\n\n--------------------------------------------------\nHow is this different from factories and fixtures?\n--------------------------------------------------\n\nOriginally this tool was created to generate the test data for a database\nthat had very high overhead per-insert.  Using traditional data factories and\nindividual transactions with rollback would not work; batching the inserts was\nnecessary.\n\nFixtures alone could solve this problem, but it's really hard to enumerate and\nmanage the joins in a large number of scenarios in fixtures effectively.  The\nprimary advantage that factories have is their ease of use in testing\nindividual scenarios without needing to understand other scenarios or manage a\ncorpus of shared data.  Carefully paritioning inserted data so the data is\nunambiguously owned by a scenario can provide the same benefit as factories,\nwhere it becomes easy to understand the data associated with individual\nscenarios.\n\n----------\nHow to Use\n----------\n\nThere is a fair amount of configuration that goes into setting facture up, but\nhere is a quick inline example data group that shows how foreign keys work::\n\n    'group': 'facture_group_shawshank_redemption',\n    'offset': 100,\n    'data': [\n        ['actors a_mf', {'attrs': {'first_name': 'Morgan', 'last_name': 'Freeman'}}],\n        ['actors a_tr', {'attrs': {'first_name': 'Tim', 'last_name': 'Robbins'}}],\n        ['films f', {'attrs': {'name': 'Shawshank Redemption', 'year': '1994'}}],\n        ['roles r1', {'refs': {'actor_id': '.a_mf.id', 'film_id': '.f.id'}}],\n        ['roles r1', {'refs': {'actor_id': '.a_tr.id', 'film_id': '.f.id'}}]\n    ]\n\nFor a deeper dive I recommend that you look at this example:\nhttps://github.com/gmccreight/facture/tree/master/tests/examples/sql_inject_target\n\nCopy the ``factureconf.py`` there to the directory you will be running ``facture``\nin.  Look at the ``facture_json`` target section in the ``original.sql`` file\nand copy it into a file of your own choosing.  Update the ``conf_targets``\nsection of your newly created ``factureconf.py`` file to point to the file\nwhere you put the ``facture_json``.\n\nRun::\n\n    facture\n\nYour target file should now be filled in with some generated data.  You're off\nto the races!\n\n-------------------\nAdditional benefits\n-------------------\n\n* \"compile\"-time factory configuration consistency checks.  Checks for many\n  typos, join issues, etc.\n\n* Materializes the output into your version-controlled files, unrolling the\n  complexity.  Because the fixtures that we generate are automatically created,\n  we can put a lot of effort into making the generated data comprehensible (and\n  lineage-providing).  This means we annotate all generated data with the column names, \n  and the scenario name.  It's also extremely easy to see what the effects of\n  any change you make is, since it's all laid out for you.\n\n* Code as configuration.  The configuration files are written in Python, so you have\n  the full power of the language.\n\n* Easy to reason about each scenario in complete isolation because of data partitioning\n\n* Plays well with others... can be introduced into existing fixtures.  Integrates\n  with how you do things, doesn't try to take over completely.  Can target\n  files or sections within files.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/facturedata/", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "facturedata", "package_url": "https://pypi.org/project/facturedata/", "platform": "", "project_url": "https://pypi.org/project/facturedata/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/facturedata/"}, "release_url": "https://pypi.org/project/facturedata/0.2.02/", "requires_dist": null, "requires_python": "", "summary": "Factories that create fixtures", "version": "0.2.02", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>Facture is FAC-tories that generate partition-isolated fix-TURE data, ideal for\nelaborating scenarios.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install facturedata</tt></p>\n</div>\n<div id=\"how-is-this-different-from-factories-and-fixtures\">\n<h2>How is this different from factories and fixtures?</h2>\n<p>Originally this tool was created to generate the test data for a database\nthat had very high overhead per-insert.  Using traditional data factories and\nindividual transactions with rollback would not work; batching the inserts was\nnecessary.</p>\n<p>Fixtures alone could solve this problem, but it\u2019s really hard to enumerate and\nmanage the joins in a large number of scenarios in fixtures effectively.  The\nprimary advantage that factories have is their ease of use in testing\nindividual scenarios without needing to understand other scenarios or manage a\ncorpus of shared data.  Carefully paritioning inserted data so the data is\nunambiguously owned by a scenario can provide the same benefit as factories,\nwhere it becomes easy to understand the data associated with individual\nscenarios.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<p>There is a fair amount of configuration that goes into setting facture up, but\nhere is a quick inline example data group that shows how foreign keys work:</p>\n<pre>'group': 'facture_group_shawshank_redemption',\n'offset': 100,\n'data': [\n    ['actors a_mf', {'attrs': {'first_name': 'Morgan', 'last_name': 'Freeman'}}],\n    ['actors a_tr', {'attrs': {'first_name': 'Tim', 'last_name': 'Robbins'}}],\n    ['films f', {'attrs': {'name': 'Shawshank Redemption', 'year': '1994'}}],\n    ['roles r1', {'refs': {'actor_id': '.a_mf.id', 'film_id': '.f.id'}}],\n    ['roles r1', {'refs': {'actor_id': '.a_tr.id', 'film_id': '.f.id'}}]\n]\n</pre>\n<p>For a deeper dive I recommend that you look at this example:\n<a href=\"https://github.com/gmccreight/facture/tree/master/tests/examples/sql_inject_target\" rel=\"nofollow\">https://github.com/gmccreight/facture/tree/master/tests/examples/sql_inject_target</a></p>\n<p>Copy the <tt>factureconf.py</tt> there to the directory you will be running <tt>facture</tt>\nin.  Look at the <tt>facture_json</tt> target section in the <tt>original.sql</tt> file\nand copy it into a file of your own choosing.  Update the <tt>conf_targets</tt>\nsection of your newly created <tt>factureconf.py</tt> file to point to the file\nwhere you put the <tt>facture_json</tt>.</p>\n<p>Run:</p>\n<pre>facture\n</pre>\n<p>Your target file should now be filled in with some generated data.  You\u2019re off\nto the races!</p>\n</div>\n<div id=\"additional-benefits\">\n<h2>Additional benefits</h2>\n<ul>\n<li>\u201ccompile\u201d-time factory configuration consistency checks.  Checks for many\ntypos, join issues, etc.</li>\n<li>Materializes the output into your version-controlled files, unrolling the\ncomplexity.  Because the fixtures that we generate are automatically created,\nwe can put a lot of effort into making the generated data comprehensible (and\nlineage-providing).  This means we annotate all generated data with the column names,\nand the scenario name.  It\u2019s also extremely easy to see what the effects of\nany change you make is, since it\u2019s all laid out for you.</li>\n<li>Code as configuration.  The configuration files are written in Python, so you have\nthe full power of the language.</li>\n<li>Easy to reason about each scenario in complete isolation because of data partitioning</li>\n<li>Plays well with others\u2026 can be introduced into existing fixtures.  Integrates\nwith how you do things, doesn\u2019t try to take over completely.  Can target\nfiles or sections within files.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6764782, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "c49562bc75b11e67187e7b2b94bf9556", "sha256": "1b5b063cfe28e19a85068ae18274030ecaf7244ddccd275a2aba3575c02e94d8"}, "downloads": -1, "filename": "facturedata-0.1.10.tar.gz", "has_sig": false, "md5_digest": "c49562bc75b11e67187e7b2b94bf9556", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8003, "upload_time": "2019-04-14T01:10:04", "upload_time_iso_8601": "2019-04-14T01:10:04.567590Z", "url": "https://files.pythonhosted.org/packages/8e/5d/3f8d8252ec293ddf72d9d429b82d49a19d143afc56b175843e3083e36aec/facturedata-0.1.10.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "a70eba3c266a729c7bad45f79f404415", "sha256": "53a2b76c5e42240b175709b29aa1b780b38c1ddb9ceead8bbc6b946f0af28793"}, "downloads": -1, "filename": "facturedata-0.1.12.tar.gz", "has_sig": false, "md5_digest": "a70eba3c266a729c7bad45f79f404415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8062, "upload_time": "2019-12-14T18:09:32", "upload_time_iso_8601": "2019-12-14T18:09:32.015748Z", "url": "https://files.pythonhosted.org/packages/ce/c0/4a345d11f08d17480e2a0da12e36a5e36d51208180dfed48aca258f6cc66/facturedata-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "c76cb90185b39caa9561a4714b22ce6f", "sha256": "84925ea5e0045629bff630b498eeef9be0c1bbc47fcf575f4a095468f73074e3"}, "downloads": -1, "filename": "facturedata-0.1.13.tar.gz", "has_sig": false, "md5_digest": "c76cb90185b39caa9561a4714b22ce6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8475, "upload_time": "2019-12-17T21:50:44", "upload_time_iso_8601": "2019-12-17T21:50:44.749200Z", "url": "https://files.pythonhosted.org/packages/a7/be/5106ba8749c0747ae264af7b00d1a500cd2b7e4afe5128a9530adb22e649/facturedata-0.1.13.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "c8636cd4576a900088e81857626d21fd", "sha256": "7cba229b497b20a4d72afc58cf03eeab2721d2e32b6238be1a11e038944c0f23"}, "downloads": -1, "filename": "facturedata-0.1.8.tar.gz", "has_sig": false, "md5_digest": "c8636cd4576a900088e81857626d21fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7847, "upload_time": "2019-04-13T22:09:50", "upload_time_iso_8601": "2019-04-13T22:09:50.207825Z", "url": "https://files.pythonhosted.org/packages/6e/e2/2145ede8ff4a6bbe53bae4657c0b10ff15257b06ea731aa2d92d326a9bd0/facturedata-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "a7a7bb2e44c56cc4f98f3bd05cd013a5", "sha256": "3f3514885ecd3816ccc699ad8f5026387fd23f10801c51bcd80cb779a63cc2b4"}, "downloads": -1, "filename": "facturedata-0.1.9.tar.gz", "has_sig": false, "md5_digest": "a7a7bb2e44c56cc4f98f3bd05cd013a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7950, "upload_time": "2019-04-14T00:43:36", "upload_time_iso_8601": "2019-04-14T00:43:36.467147Z", "url": "https://files.pythonhosted.org/packages/06/b9/ca1515d85be6ac71b8950342bbe97204a53a8f8d30ebc66c568bcb33649a/facturedata-0.1.9.tar.gz", "yanked": false}], "0.2.01": [{"comment_text": "", "digests": {"md5": "6259952991d7468734de0f15078ceb81", "sha256": "3ea3147f310f9dd0de5986a6be41b411b10ade6e22d8fd11cd40b7f6bc662d7f"}, "downloads": -1, "filename": "facturedata-0.2.01.tar.gz", "has_sig": false, "md5_digest": "6259952991d7468734de0f15078ceb81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8835, "upload_time": "2020-01-08T18:19:23", "upload_time_iso_8601": "2020-01-08T18:19:23.139964Z", "url": "https://files.pythonhosted.org/packages/58/f2/9d6c0223d381dd833ba94857bec716d7a400d4972deb1e3bfefe6384b7fc/facturedata-0.2.01.tar.gz", "yanked": false}], "0.2.02": [{"comment_text": "", "digests": {"md5": "50064029659793946d676ea5cf028f86", "sha256": "b11c2e6856d597bf83003606de17542b43a36b51909b912bfd728f6fef304840"}, "downloads": -1, "filename": "facturedata-0.2.02.tar.gz", "has_sig": false, "md5_digest": "50064029659793946d676ea5cf028f86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9228, "upload_time": "2020-03-06T21:26:13", "upload_time_iso_8601": "2020-03-06T21:26:13.988457Z", "url": "https://files.pythonhosted.org/packages/1b/b6/38723eba2c01984364daa07d835b4a489db01033a2c6a22d14f574b70e38/facturedata-0.2.02.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50064029659793946d676ea5cf028f86", "sha256": "b11c2e6856d597bf83003606de17542b43a36b51909b912bfd728f6fef304840"}, "downloads": -1, "filename": "facturedata-0.2.02.tar.gz", "has_sig": false, "md5_digest": "50064029659793946d676ea5cf028f86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9228, "upload_time": "2020-03-06T21:26:13", "upload_time_iso_8601": "2020-03-06T21:26:13.988457Z", "url": "https://files.pythonhosted.org/packages/1b/b6/38723eba2c01984364daa07d835b4a489db01033a2c6a22d14f574b70e38/facturedata-0.2.02.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}