{"info": {"author": "Rostislav Duda, Joonas Keski-Rahkonen, Janne Solanp\u00e4\u00e4", "author_email": "rostislav.duda@tuni.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Boost Software License 1.0 (BSL-1.0)", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Physics"], "description": "[![pypi license](https://img.shields.io/pypi/l/tinie?color=blue)](https://pypi.org/project/tinie/)\n[![pypi version](https://img.shields.io/pypi/v/tinie)](https://pypi.org/project/tinie)\n[![Python implementation](https://img.shields.io/pypi/implementation/tinie.svg)](https://pypi.org/project/tinie/)\n[![Python versions](https://img.shields.io/pypi/pyversions/tinie.svg)](https://pypi.org/project/tinie/)\n[![Python wheel](https://img.shields.io/pypi/wheel/tinie.svg)](https://pypi.org/project/tinie/)\n\nTransport In a Non-Interacting Equilibrium simulation framework (TINIE)\n======================================================================\n\n\nOverview\n--------\nWe present to you a code that calculates conductance and electric current\nrunning through 2D cavities, quantum dots or potential wells with arbitrarily\nplaced reservoirs in a perpendicular and constant magnetic field. The code can\nbe used in a wide range of calculations involving 2D electron transport. The\nmain difference between this code and its competitors is the fact that TINIE\ndoes not need to be provided with free parameters. The code is parallelized \nwith `mpi4py`, allowing for computational tasks distribution across multiple \nprocessors. \n\n\nInstallation\n------------\nThe code is a Python package (written using Python 3.6). Installation of the \npackage is as easy as typing  `python3 setup.py install`. Thorough unit testing \nfor the package has been  implemented and can be launched via `python3 setup.py test`. \nThe package has scripts with a parser user interface, which need to be given \nappropriate permissions prior to their execution. To that end, the following commands \nmust be run from the git root repository: \n```bash \n$ source dev_setup.sh\n$ scripts/tinie_prepare -dE 1e-7 ...\n$ scripts/tinie -i \"transport_equilibrium/test_files/preptinie_test.h5\" -dw\n$ 1e-5 ...\n```\n\n\nPackage Functionality\n---------------------\nThis package contains tools that could be used to calculate coupling of a\nspecific system that contains a central region (2DEG) and some leads.  After\nthe coupling is calculated one could proceed to calculate transmission\ncoefficients and partial currents in the leads. All the calculations are\nperformed in Hartee atomic units. After installing the package, a simple test\nrun can be launched from the git root directory as follows:\n```bash\n$ scripts/tinie_prepare\n$ scripts/tinie\n```\n\nPackage Structure\n-----------------\nThe code is written using object-oriented programming, and its functionality\ncan be shortly described in the following way: first, `Lead`, and `Center`\nobjects are created and passed as inputs for the `Coupling` object and then all\nof them are passed into a `SystemDump` object, which calculates all the\ncouplings and Hamiltonians and dumps the data into an hdf5 file. `SystemFetch`\nis then used to read the data from that hdf5 file. That data is passed into the\n`Calculator` interface, where `SelfEnergy` interface calculates the\nself-energies $`\\Sigma_{L}(\\omega)`$ and rate operators $`\\Gamma_{L}(\\omega)`$\nusing the `Coupling` and the eigenenergies of the `Lead`. \n\nAfter that, `SelfEnergy` for all the leads and the eigenenergies of the\n`Center` are passed into the `GreenFunction` interface that evaluates the\nadvanced ($`G^{A}(\\omega)`$) and retarded ($`G^{R}(\\omega)`$) Green's\nfunctions, finalizing the initialization of the `Calculator`. From there the\ncode is able to compute the transmission matrix\n$`\\mathcal{T}_{\\alpha\\beta}(\\omega)=\\mathrm{Tr}[G^{R}(\\omega)\\Gamma_{\\beta}(\\omega)G^{A}(\\omega)\\Gamma_{\\alpha}(\\omega)]`$\nand the partial currents \n```math\ni_{\\alpha\\beta}=2\\int_{\\omega}\\mathrm{d}\\omega\\frac{1}{2\\pi}[f(\\omega-V_{\\alpha}-\\mu)-f(\\omega-V_{\\beta}-\\mu)]\\mathcal{T}_{\\alpha\\beta}(\\omega)\n``` \nin the lead, where $`f(E)`$ is the Fermi-Dirac energy distribution. Furthermore, \nit is then  possible to compute other transport properties, such as conductance \nat a specific temperature. Additionally, we include the possibility of computing\ndensity of states and local density of states.\n\nModular structure of the code allows for the implementation of your own custom\ntype of conducting channel (\"lead\"), quantum dot (\"central region\") and\ncoupling via implementation of a class that inherits from `Lead`, `Center` or\n`Coupling`. The details of how exactly the classes should be implemented will\nbe explained in the sections to follow.\n\nExample: Usage of TINIE with ITP2D\n----------------------------------\nTo better demonstrate how TINIE is used, we will show it by means of an example \nproblem. We will compute transport properties of a quantum-dot system with two \nleads in a magnetic field. Specifically, we shall procure the information about \nthe central region from ITP2D, a Schr\u00f6dinger equation eigensolver that \ninterfaces with TINIE. The following workflow is typical for most transport \nproblems solved with TINIE:\n\n**Step 0:** computation of the Hamiltonian and wavefunctions of the central \nregion. We may obtain this information from any eigensolver of our choosing, \nprovided that it is TINIE-compatible. Quantum dot may be modeled by a \nradial harmonic potential of form $`V(r)=\\frac{1}{2}\\omega_{0}\\Vert r \\Vert^{2}`$. \nSolving the first 25 states of this model with magnetic field strength $`B=1.0`$ is \ndone in ITP2D as follows:\n```bash\n$ ./itp2d -v -n 20 -l 12 -s 100 -p \"harmonic(1)\" -B 1.0 -o ITP2D_FILE_PATH\n```\nHere the central region occupies a $`[-6,6]`$ region in both x- and y-directions \nand is centered at the origin. More information about usage of ITP2D can be \nfound on its [bitbucket page](https://bitbucket.org/luukko/itp2d/src/master/).\n\n**Step 1:** the transport system preparation step. In this step, the coupling \nmatrices for the leads are computed. Suppose we wish to compute overlap \ncoupling between the central region and the leads and we want to vary the probe \nenergy within each lead in range $`[0.0,2.0]`$ with energy spacing of \n$`\\Delta E = 0.001`$. In this case, the first 5 states of the central region are \nsufficient for the calculation. Our leads are such that:\n* Lead 0 is confined to region $`[-10.0,-4.0]`$ in $`x`$-direction, $`[-5.0,5.0]`$ \nin $`y`$-direction and connects to the lead from the left;\n* Lead 1 is confined to region $`[4.0,10.0]`$ in $`x`$-direction, $`[-5.0,5.0]`$ \nin $`y`$-direction and connects to the lead from the right.\n\nBoth leads in this case have harmonic potential of strength $`\\omega=1.0`$ in \n$`y`$-direction, and particle-in-a-box potential in $`x`$-direction. This \ninformation is sufficient for us to commence the system preparation. For that, \n`tinie_prepare` script is used as follows:\n```bash\n$ tinie_prepare -dE 1e-3 -B 1.0 -ctr \"itp2d(ITP2D_FILE_PATH,(0,4))\" -l 2 -ld \"finharm(left,1.0,dir)\" \"finharm(right,1.0,dir)\" -xlim \"[-10.0,-4.0]\" \"[4.0,10.0]\" -ylim \"[-5.0,5.0]\" \"[-5.0,5.0]\" -Elim \"[0.0,2.0]\" \"[0.0,2.0]\" -cpl \"overlap()\" \"overlap()\" -o TINIE_PREPARE_FILE_PATH\n```\nThis produces the PREPTINIEFile that contains the information about the \ncoupling of the transport system which can be reused for different transport \ncalculations of the next step.\n\n**Step 2:** the transport calculation step. This is where the real fun begins, \nthe steps before are in a sense just a preparation. To compute various \ntransport properties of the system, such as transmission, conductance and \ncurrent, we fix temperature of the system $`T=1.0`$, chemical potential $`\\mu=1.0`$ \nand fix bias voltages in the leads to be $`V_{0}=0.5`$ in Lead 0 and $`V_{1}=1.5`$. \nMoreover, we adjust the energy spacing of probe electrons to \n$`\\Delta\\omega=0.01`$ and set the Green's function boundary parameter to \n$`\\eta=0.1`$. With this information we can use `tinie` script as follows:\n```bash\n$ tinie -i TINIE_PREPARE_FILE_PATH -dw 1e-2 -eta 1e-1 -T 1.0 -mu 1.0 -V 0.5 1.5 -o TINIE_FILE_PATH\n```\nThis produces the TINIEFile that contains all the above mentioned transport \nquantities and more, with detailed description of its contents outlined in the \nsections below.\n\nIn addition to the transport properties, we can compute local and standard \ndensity of states (LDOS/DOS) of the system via the `tinie_dos` script. To that \nend, in addition to the parameters specified above, user would want to \nspecify the energies at which LDOS should be evaluated, as well as the \nlocation of the file with the central region wavefunctions. We then use the \nscript as follows:\n```bash\n$ tinie_dos -i TINIE_PREPARE_FILE_PATH -psi ITP2D_FILE_PATH --wf-range 0 4 -w 1.0 2.0 3.0 -dw 1e-2 -eta 1e-1 -T 1.0 -mu 1.0 -V 0.5 1.5 -o TINIE_DOS_FILE_PATH\n```\nHere, we evaluated LDOS at probe energies $`\\omega\\in\\{1.0,2.0,3.0\\}`$. Results \nof this calculation are stored in TINIEDOSFile, with details about its contents \navailable in sections below.\n\n**Step 3:** visualizing the results. To that end, one can use the `tinie_draw` \nscript. Suppose we want to plot transmission, conductance, total current and \nDOS of the system in the energy range $`[0.0,5.0]`$, as well as LDOS at probe \nenergy $`\\omega=1.0`$. We then use the following command:\n```bash\n$ tinie_draw -i TINIE_FILE_PATH -idos TINIE_DOS_FILE_PATH -E 0.0 5.0 --ldos-E 1.0 --transmission --conductance --total-currents --dos --ldos -o FIGURE_PATH\n```\nThis will produce beautiful LaTeX-rendered plots of the aforementioned \nquantities. Below we show the example plots of conductance, DOS and LDOS \nproduced by the script:\n\n|Conductance                         |DOS                         | LDOS                          |\n|:----------------------------------:|:--------------------------:|:-----------------------------:|\n|![](example_figures/conductance.png)|![](example_figures/dos.png)|![](example_figures/ldos.png)  |\n\nQuantum transport calculations in two-dimensional systems have never been as \neasy!\n\nCurrently Implemented System Classes\n------------------------------------\nAs of now, the following system classes are implemented:\n* `Center` objects, located in `transport_calculator/systems/central_region`\n    * `Itp2dCenter`: itp2d-compatible interface.\n    * `CustomCenter`: container for a custom predefined central region \n      Hamiltonian $`\\mathbf{H}^{C}`$.\n* `Lead` objects, located in `transport_calculator/systems/leads`. Note that\n  wavefunction normalization has been omitted for the sake of compactness of\n  the expression. Wavefunctions in the code are all normalized.\n    * `FiniteHarmonicLead`: lead described by a wavefunction\n      $`\\psi^{L}_{k,l}(x,q)=\\cos(k(x-x^{L}_{max})+\\frac{\\pi}{2})e^{-\\frac{1}{2}q^2}H_{l}(q)`$,\n      where $`H_{l}(q)`$ is the the Hermite polynomial of order $`l`$,\n      $`q=\\sqrt{\\omega_{c0}y-\\frac{l}{B}\\frac{\\omega^{2}_{c}}{\\omega^{2}_{c0}}}`$,\n      $`\\omega_{c}=B,\\omega^2_{c0}=\\omega^2_0+\\omega^2_c`$, with $`\\omega_0`$\n      being the frequency of quantum harmonic oscillator and $`B`$ being\n      magnetic field strength. The formula is provided in Hartee atomic units.\n      $`x`$ and $`y`$ coordinate wavefunctions are interchangeable depending on\n      the lead alignment.\n    * `BoxLead`: particle in a box lead describe by wavefunction\n      $`\\psi^{L}_{k,l}(x,y)=\\sin(\\frac{k\\pi}{L_{x}}(x-x^L_{max}))\\sin(\\frac{l\\pi}{L_{y}}(y-y^L_{max}))`$,\n      where $`L_{x}`$ and $`L_{y}`$ are the length and width of the box\n      correspondingly and $`k,l \\in \\mathbb{Z}_{+}\\setminus \\{0\\}`$.\n    * `CustomLead`: container for a custom predefined lead region Hamiltonian\n      $`\\mathbf{H}^{L}`$.\n* `Coupling` objects, located in `transport_calculator/systems/couplings`\n    * `OverlapCoupling`: strong coupling of the type\n      $`\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\Omega}\\mathrm{d}\\mathbf{r}\\psi^{*}_{L,i}(\\mathbf{r})\\Delta\\psi_{C,j}(\\mathbf{r})`$,\n      where $`\\psi_{L,i}`$ is the $`i`$th eigenfunction of the lead and\n      $`\\psi_{C,j}`$ i\n      s the $`j`$th eigenfunction of the central region and\n      $`\\Omega`$ is the overlap region of the lead and the quantum-dot.\n    * `TightBindingCoupling`: weak coupling between non-overlapping lead and\n      central regions of the type\n      $`\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\Omega_{L}}\\mathrm{d}\\mathbf{r'}\\psi^{*}_{L,i}(\\mathbf{r'})\\int_{\\Omega_{C}}\\mathrm{d}\\mathbf{r}\\frac{\\psi_{C,j}(\\mathbf{r})}{||\\mathbf{r'}-\\mathbf{r}||^2}e^{-i\\theta}`$,\n      where $`\\theta=-\\frac{B}{2}(x'-x)(y'-y)`$, $`\\Omega_{L}`$ is the lead\n      region to be coupled and $`\\Omega_{C}`$ is the central region to be\n      coupled.\n    * `OneLayerCoupling`: weak coupling between the boundaries of a\n      non-overlapping lead and central regions of the type\n      $`\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\partial\n      \\Omega_{L}}\\mathrm{d}\\mathbf{r'}\\psi^{*}_{L,i}(\\mathbf{r'})\\int_{\\partial\n      \\Omega_{C}}\\mathrm{d}\\mathbf{r}\\frac{\\psi_{C,j}(\\mathbf{r})}{||\\mathbf{r'}-\\mathbf{r}||^2}e^{-i\\theta}`$.\n    * `CustomCoupling`: container for custom predefined coupling matrix\n      $`\\mathbf{V}`$. Compatible only with `CustomCenter` and `CustomLead`\n      objects.\n\nThe implementational details of these elements can be checked in the source\ncode, which is rich with insightful and helpful comments.\n\nAdding Your Own Custom System Classes\n-------------------------------------\nAs it has been mentioned before, the code has been designed in such a way as to\nallow as much freedom in expansion as possible. In particular, you can\nintroduce additional types of central regions, lead regions and coupling\nmethods. All you have to do is to create your own class file in the\ncorresponding folder in `tinie/systems` and make sure that the\nclass you are creating inherits from one of the basic abstract classes\n(`Center`, `Lead` or `Coupling`). Below you can find a list of functions you\nwould have to implement (correctly) in order for your custom class to be fully\nintegrated into the transport scheme:\n\n* `Center` region:\n    * `__init__(*attrs)`: initializer\n    * `get_type_specific_parameters()`: retrieves child-specific extra\n      parameters\n    * `get_energies()`: retrieves central region Hamiltonian $`\\mathbf{H}^{C}`$\n    * `get_potential()`: retrieves potential energy values in the central\n      region\n    * `get_state(n)`: retrieves $`n`$th wavefunction \n    * `get_states()`: retrieves all wavefunctions on the grid\n    * `get_number_of_states()`: retrieves the number of states in the central\n      region\n    * `get_sliced_state(n, width, side)`: retrieves $`n`$th wavefunction on a \n      grid slice\n    * `get_sliced_states(width, side)`: retrieves all wavefunctions on a\n      grid slice\n    * `get_boundary_state(n, side)`: retrieves nth wavefunction evaluated on \n      some boundary\n    * `get_coordinate_ranges()`: retrieves x and y coordinate ranges\n    * `get_coordinates()`: retrieves the coordinate meshes\n    * `get_slice_coordinates(width, side)`: retrieves the sliced\n      coordinate meshes\n    * `get_boundary_coordinates(side)`: retrieves the boundary coordinate\n      range\n* `Lead` region:\n    * `__init__(*attrs)`: initializer\n    * `set_magnetic_field_strength(B)`: sets magnetic field strength\n    * `set_energy_spacing(delta_E)`: sets lead energy spacing\n    * `get_type_specific_parameters()`: retrieves child-specific extra\n      parameters\n    * `get_energies()`: retrieves lead region Hamiltonian $`\\mathbf{H}^{L}`$\n    * `get_state_point(x, y, n)`: evaluates the $`n`$th state wavefunction at\n      a single point $`(x, y)`$\n    * `get_state(x_points, y_points, n, mode)`: retrieves the $`n`$th\n      state wavefunction on a custom/discretized grid\n    * `get_number_of_states()`: retrieves the number of states in the lead\n      region\n    * `get_boundary_state(n, num_boundary_points)`: retrieves $`n`$th wavefunction \n      evaluated on the lead boundary\n    * `get_boundary(num_boundary_points)`: retrieves the boundary grid\n      with specified discretization\n* `Coupling` region:\n    * `__init__(Center_object, Lead_object, *attrs)`: initializer, sets the\n      center and lead objects ready for the coupling matrix calculations\n    * `get_coupling_matrix_element(i, j)`: retrieves coupling matrix element \n     $`\\mathbf{V}_{ij}`$, that is, the coupling between $`i`$th lead state and\n     $`j`$th central state\n    * `get_coupling_matrix()`: retrieves the coupling matrix $`\\mathbf{V}`$\n\nDetails about the input/output parameter types can be found in the source code.\nUpon implementing all of these functions correctly for the corresponding custom\nobject and extending the parser interface accordingly, the code extension will\nbe fully consistent with the original code!\n\nScripts Included in the Package\n-------------------------------\ntinie includes a few scripts that should ease the usage of the software:\n\n## scripts/tinie_prepare\nThis script prepares the coupling system and saves it in a tinie_prepare hdf5 file, \nwhich contains the following attributes and datasets:\n\n|                 Attribute | Description                            |\n|--------------------------:|----------------------------------------|\n| \"type\"                    | File type, must be \"PREPTINIEFile\"     |\n| \"center/type\"             | Type of the central region             |\n| \"center/num_states\"       | Number of states in the central region |\n| \"center/parameters\"       | Type-dependent parameters of the central region |\n| \"leads/num_leads\"         | Number of leads                        |\n| \"leads/lead_n/type\"       | Type of the lead $`n`$                    |\n| \"leads/lead_n/num_states\" | Number of states in lead $`n`$ |\n| \"leads/lead_n/energy_spacing\" | Energy spacing in lead $`n`$   |\n| \"leads/lead_n/parameters\" | Type-dependent parameters of lead $`n`$|\n| \"couplings/num_couplings\" | Number of couplings                    |\n| \"couplings/coupling_n/type\"   | Type of coupling between lead $`n`$ and the central region|\n\n|                       Dataset | Description                                                  |\n|------------------------------:|--------------------------------------------------------------|\n| \"center/hamiltonian\"          | Hamiltonian of the central region                            |\n| \"center/potential\"            | Potential energy values in the central region                |\n| \"leads/lead_n/hamiltonian\"    | Hamiltonian of the lead region $`n`$                              |\n| \"leads/lead_n/x_axis_limits\"  | x-axis limits of lead $`n`$    |\n| \"leads/lead_n/y_axis_limits\"  | y-axis limits of lead $`n`$    |\n| \"leads/lead_n/energy_limits\"  | Energy limits of lead $`n`$    |\n| \"couplings/coupling_n/coupling_matrix\" | Coupling matrix between lead $`n`$ and the central region   |\n\nSome of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the simulation parameters are adjusted via a parser user \ninterface, which takes the following arguments (type `scripts/preptinie --help` \nif you ever feel lost!):\n\n|                  Argument | Description                                                                                    |\n|--------------------------:|------------------------------------------------------------------------------------------------|\n| `-dE`,`--delta-E`         | Lead energy spacing                                                                            |\n| `-B`                      | Magnetic field strength                                                                        |\n| `-xlim`,`--x-axis-limits` | x-axis limits of each lead, typed in form `[x_min_0, x_max_0] [x_min_1, x_max_1] ...`          |\n| `-ylim`,`--y-axis-limits` | y-axis limits of each lead, typed in form `[y_min_0, y_max_0] [y_min_1, y_max_1] ...`          |\n| `-Elim`,`--energy-limits` | Energy limits of each lead, typed in form `[E_min_0, E_max_0] [E_min_1, E_max_1] ...`          |\n| `-ctr`,`--center-type`         | Central region type, typed in form `\"ctr_type(*ctr_params)\"`                                   |\n| `-l`,`--lead-number`      | Number of leads                                                                                |\n| `-ld`,`--lead-types`      | Lead region types, typed in form `\"ld0_type(*ld0_params)\" \"ld1_type(*ld1_params)\" ...`         |\n| `-cpl`,`--coupling-types` | Coupling region types, typed in form `\"cpl0_type(*cpl0_params)\" \"cpl1_type(*cpl1_params)\" ...` |\n| `-o`, `--output-file`     | Path, where preptinie file is saved                                                            |\n\n## scripts/tinie\nThis script reads the preptinie hdf5 file, performs the transport calculation\nand saves the results in a tinie hdf5 with the following attributes and datasets:\n\n|                      Attribute | Description                                   |\n|-------------------------------:|-----------------------------------------------|\n| \"type\"                         | File type, must be \"TINIEFile\"                |\n| \"evaluated_chemical_potential\" | Chemical potential $`\\mu`$ of the system     |\n| \"evaluated_bias_voltage\"       | Bias voltage in the leads of the system       |\n| \"evaluated_temperature\"        | Temperature of the system                     |\n| \"omega_spacing\"                | Probe energy spacing                          |\n| \"lead_energy_spacing\"          | Lead energy spacing                           |\n| \"eta\"                          | Small number eta used in the Green's function |\n| \"number_of_couplings\"          | Number of couplings in the system             |\n\n|                            Dataset | Description                                              |\n|-----------------------------------:|----------------------------------------------------------|\n| \"partial_currents\"                 | Matrix of partial currents between each lead             |\n| \"total_currents\"                   | Total currents in each lead                              |\n| \"omega_dependent_partial_currents\" | Energy profile of the partial current matrix             |\n| \"omega_dependent_total_currents\"   | Energy profile of the total currents                     |\n| \"transmission\"                     | Transmission matrix as a function of probe energy        |\n| \"transmission_error\"               | Imaginary component of transmission                      |\n| \"conductance\"                      | System conductance matrix values                         |\n\nSome of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the transport calculation parameters are adjusted via a parser user\ninterface, which takes the following arguments (type `scripts/tinie --help` if\nyou ever feel lost!):\n\n|              Argument | Description                                                                         |\n|----------------------:|-------------------------------------------------------------------------------------|\n| `-dw`,`--delta-omega` | Probe energy spacing                                                                |\n| `-eta`                | Small imaginary constant used in calculating Green's function                       |\n| `-mu`,`--chem-pot`    | Chemical potential, at which system is evaluated                                    |\n| `-V`,`--lead-bias`    | Lead biases, at which system is evaluated, typed in form `V_0 V_1 ...`              |\n| `-T`,`--temperature`  | Temperature, at which system is evaluated                                           |\n| `-i`,`--input-file`   | Path, from which preptinie file is read                                             |\n| `-o`, `--output-file` | Path, where tinie file is saved                                                     |\n| `--wide-band`, `--no-wide-band`   | Boolean flags user can specify if he wishes to use wide band approximation methods (or not)  |\n| `-S`,`--self-energy`  | Path, from which the array of custom self energies is read                          |\n| `-G`,`--rate-operator`| Path, from which the array of rate operators is read                                |\n\nNote that if you wish to use the wide band approximation approach you must specify either self energies or rate \noperators or both!\n\n## scripts/tinie_dos\nThis scripts reads the preptinie hdf5 file and the file containing the eigenfunctions of the central region,\ncomputes DOS/LDOS and saves the results in dostinie hdf5 file with the following attributes and datasets:\n\n|                      Attribute | Description                                   |\n|-------------------------------:|-----------------------------------------------|\n| \"type\"                         | File type, must be \"TINIEDOSFile\"             |\n\n|                            Dataset | Description                                              |\n|-----------------------------------:|----------------------------------------------------------|\n| \"dos\"                              | Density of states values                                 |\n| \"ldos\"                             | Local density of states values                           |\n| \"x\"                                | x-axis values of the system central region               |\n| \"y\"                                | y-axis values of the system central region               |\n| \"omega_dos\"                        | Energies at which DOS was evaluated                      |\n| \"omega_ldos\"                       | Energies at which LDOS was evaluated                     |\n\nSome of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the DOS/LDOS calculation parameters are adjusted via a parser user\ninterface, which takes the following arguments (type `scripts/dostinie --help` if\nyou ever feel lost!):\n\n|                  Argument | Description                                                                                    |\n|--------------------------:|------------------------------------------------------------------------------------------------|\n| `-w`, `--omega-ldos`      | Probe energies, at which LDOS should be evaluated                                              |\n| `-dw`,`--delta-omega`     | Probe energy spacing                                                                           |\n| `-eta`                    | Small imaginary constant used in calculating Green's function                                  |\n| `-mu`,`--chem-pot`        | Chemical potential, at which system is evaluated                                               |\n| `-V`,`--lead-bias`        | Lead biases, at which system is evaluated, typed in form `V_0 V_1 ...`                         |\n| `-T`,`--temperature`      | Temperature, at which system is evaluated                                                      |\n| `-i`, `--input-file`      | Path from which preptinie file is read                                                         |\n| `-psi`, `--wf-file`       | Path from which central region wavefunctions are read                                          |\n| `--wf-range`              | Range of the wavefunctions to read from the wavefunction file                                  |\n| `-o`,`--output-file`      | Path where the dostinie file is saved                                                          |\n| `--dos`, `--no-dos`       | Boolean, decides if DOS is computed                                                            |\n| `--ldos`, `--no-ldos`     | Boolean, decides if LDOS is computed                                                           |\n\n\n## scripts/tinie_draw\nThis script reads data from the tinie hdf file, makes pretty\ntransmission/backsacttering/current/density of states plots and saves them.\nThis script has a parser user interface, where you can specify the following\nplot arguments:\n\n|                        Argument | Description                                                   |\n|--------------------------------:|---------------------------------------------------------------|\n| `-i`,`--input-file`             | Path from which tinie file is read                            |\n| `-idos`, `--input-dos-file`     | Path from which dostinie  file is read                        |\n| `-o`,`--output-file`            | Path where the plots are saved                                |\n| `-E`, `--energy-rangs`          | Range of energies over which to draw the plot                 |\n| `--transmission`, `--no-transmission`     | Boolean, decides if transmission is plotted                   |\n| `--backscattering`, `--no-backscattering`   | Boolean, decides if backscattering is plotted                 |\n| `--partial-currents`, `--no-partial-currents` | Boolean, decides if partial currents are plotted              |\n| `--total-currents`, `--no-total-currents`   | Boolean, decides if total currents are plotted                |\n| `--dos`, `--no-dos`             | Boolean, decides if density of states is plotted              |\n| `--ldos`, `--no-ldos`             | Boolean, decides if local density of states is plotted              |\n| `--norm-ldos`, `--no-norm-ldos`   | Boolean, decides if LDOS will be normalized by 1 or not      |\n| `--ldos-E`                        | Evaluate LDOS at probe energy closest to the one specified   |\n| `--ldos-idx`                      | Evaluate LDOS at an index corresponding to a probe energy     |\n| `--stability`, `--no-stability`          | Boolean, decides if the numerical stability tests are plotted |\n\n\n## scripts/make_system_files\nThis script generates custom Hamiltonians or coupling matrices and saves them\nin a .npy file to be passed on as arguments for\n`CustomCenter`/`CustomLead`/`CustomCoupling` objects. They can also be used to \ngenerate custom self-energy/rate operators for the wide-band approximation.\nRun the script, follow the instructions and the rest is history.\n\nNaturally, these scripts provide only some of the basic functionality \nextensions. Additional scripts/code modifications may be added based on the \nuser's end goals.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/compphys/qcad/tinie", "keywords": "numerics quantum transport physics", "license": "Boost Software License 1.0", "maintainer": "", "maintainer_email": "", "name": "tinie", "package_url": "https://pypi.org/project/tinie/", "platform": "", "project_url": "https://pypi.org/project/tinie/", "project_urls": {"Homepage": "https://gitlab.com/compphys/qcad/tinie"}, "release_url": "https://pypi.org/project/tinie/1.0.1/", "requires_dist": ["numpy", "scipy", "mpi4py", "progressbar2", "findiff", "matplotlib", "h5py", "vegas"], "requires_python": ">=3.6", "summary": "A non-interacting equilibrium 2D quantum transport simulation framework", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/tinie/\" rel=\"nofollow\"><img alt=\"pypi license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c66abceb67b0797bf5c8f08808c4d64d42f041a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f74696e69653f636f6c6f723d626c7565\"></a>\n<a href=\"https://pypi.org/project/tinie\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69d61e5e3c8eaa5db04a53961c70cd23b1e6a01c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696e6965\"></a>\n<a href=\"https://pypi.org/project/tinie/\" rel=\"nofollow\"><img alt=\"Python implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c144d18f240bff23ab27c984173d375e7c09a87/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f74696e69652e737667\"></a>\n<a href=\"https://pypi.org/project/tinie/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4ba899098d2d9b94c61bcf3b5b479118ba6e10f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74696e69652e737667\"></a>\n<a href=\"https://pypi.org/project/tinie/\" rel=\"nofollow\"><img alt=\"Python wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddedf742207885afa39c661c5f8a119a8ae2fa5d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f74696e69652e737667\"></a></p>\n<h1>Transport In a Non-Interacting Equilibrium simulation framework (TINIE)</h1>\n<h2>Overview</h2>\n<p>We present to you a code that calculates conductance and electric current\nrunning through 2D cavities, quantum dots or potential wells with arbitrarily\nplaced reservoirs in a perpendicular and constant magnetic field. The code can\nbe used in a wide range of calculations involving 2D electron transport. The\nmain difference between this code and its competitors is the fact that TINIE\ndoes not need to be provided with free parameters. The code is parallelized\nwith <code>mpi4py</code>, allowing for computational tasks distribution across multiple\nprocessors.</p>\n<h2>Installation</h2>\n<p>The code is a Python package (written using Python 3.6). Installation of the\npackage is as easy as typing  <code>python3 setup.py install</code>. Thorough unit testing\nfor the package has been  implemented and can be launched via <code>python3 setup.py test</code>.\nThe package has scripts with a parser user interface, which need to be given\nappropriate permissions prior to their execution. To that end, the following commands\nmust be run from the git root repository:</p>\n<pre>$ <span class=\"nb\">source</span> dev_setup.sh\n$ scripts/tinie_prepare -dE 1e-7 ...\n$ scripts/tinie -i <span class=\"s2\">\"transport_equilibrium/test_files/preptinie_test.h5\"</span> -dw\n$ 1e-5 ...\n</pre>\n<h2>Package Functionality</h2>\n<p>This package contains tools that could be used to calculate coupling of a\nspecific system that contains a central region (2DEG) and some leads.  After\nthe coupling is calculated one could proceed to calculate transmission\ncoefficients and partial currents in the leads. All the calculations are\nperformed in Hartee atomic units. After installing the package, a simple test\nrun can be launched from the git root directory as follows:</p>\n<pre>$ scripts/tinie_prepare\n$ scripts/tinie\n</pre>\n<h2>Package Structure</h2>\n<p>The code is written using object-oriented programming, and its functionality\ncan be shortly described in the following way: first, <code>Lead</code>, and <code>Center</code>\nobjects are created and passed as inputs for the <code>Coupling</code> object and then all\nof them are passed into a <code>SystemDump</code> object, which calculates all the\ncouplings and Hamiltonians and dumps the data into an hdf5 file. <code>SystemFetch</code>\nis then used to read the data from that hdf5 file. That data is passed into the\n<code>Calculator</code> interface, where <code>SelfEnergy</code> interface calculates the\nself-energies $<code>\\Sigma_{L}(\\omega)</code>$ and rate operators $<code>\\Gamma_{L}(\\omega)</code>$\nusing the <code>Coupling</code> and the eigenenergies of the <code>Lead</code>.</p>\n<p>After that, <code>SelfEnergy</code> for all the leads and the eigenenergies of the\n<code>Center</code> are passed into the <code>GreenFunction</code> interface that evaluates the\nadvanced ($<code>G^{A}(\\omega)</code>$) and retarded ($<code>G^{R}(\\omega)</code>$) Green's\nfunctions, finalizing the initialization of the <code>Calculator</code>. From there the\ncode is able to compute the transmission matrix\n$<code>\\mathcal{T}_{\\alpha\\beta}(\\omega)=\\mathrm{Tr}[G^{R}(\\omega)\\Gamma_{\\beta}(\\omega)G^{A}(\\omega)\\Gamma_{\\alpha}(\\omega)]</code>$\nand the partial currents</p>\n<pre>i_{\\alpha\\beta}=2\\int_{\\omega}\\mathrm{d}\\omega\\frac{1}{2\\pi}[f(\\omega-V_{\\alpha}-\\mu)-f(\\omega-V_{\\beta}-\\mu)]\\mathcal{T}_{\\alpha\\beta}(\\omega)\n</pre>\n<p>in the lead, where $<code>f(E)</code>$ is the Fermi-Dirac energy distribution. Furthermore,\nit is then  possible to compute other transport properties, such as conductance\nat a specific temperature. Additionally, we include the possibility of computing\ndensity of states and local density of states.</p>\n<p>Modular structure of the code allows for the implementation of your own custom\ntype of conducting channel (\"lead\"), quantum dot (\"central region\") and\ncoupling via implementation of a class that inherits from <code>Lead</code>, <code>Center</code> or\n<code>Coupling</code>. The details of how exactly the classes should be implemented will\nbe explained in the sections to follow.</p>\n<h2>Example: Usage of TINIE with ITP2D</h2>\n<p>To better demonstrate how TINIE is used, we will show it by means of an example\nproblem. We will compute transport properties of a quantum-dot system with two\nleads in a magnetic field. Specifically, we shall procure the information about\nthe central region from ITP2D, a Schr\u00f6dinger equation eigensolver that\ninterfaces with TINIE. The following workflow is typical for most transport\nproblems solved with TINIE:</p>\n<p><strong>Step 0:</strong> computation of the Hamiltonian and wavefunctions of the central\nregion. We may obtain this information from any eigensolver of our choosing,\nprovided that it is TINIE-compatible. Quantum dot may be modeled by a\nradial harmonic potential of form $<code>V(r)=\\frac{1}{2}\\omega_{0}\\Vert r \\Vert^{2}</code>$.\nSolving the first 25 states of this model with magnetic field strength $<code>B=1.0</code>$ is\ndone in ITP2D as follows:</p>\n<pre>$ ./itp2d -v -n <span class=\"m\">20</span> -l <span class=\"m\">12</span> -s <span class=\"m\">100</span> -p <span class=\"s2\">\"harmonic(1)\"</span> -B <span class=\"m\">1</span>.0 -o ITP2D_FILE_PATH\n</pre>\n<p>Here the central region occupies a $<code>[-6,6]</code>$ region in both x- and y-directions\nand is centered at the origin. More information about usage of ITP2D can be\nfound on its <a href=\"https://bitbucket.org/luukko/itp2d/src/master/\" rel=\"nofollow\">bitbucket page</a>.</p>\n<p><strong>Step 1:</strong> the transport system preparation step. In this step, the coupling\nmatrices for the leads are computed. Suppose we wish to compute overlap\ncoupling between the central region and the leads and we want to vary the probe\nenergy within each lead in range $<code>[0.0,2.0]</code>$ with energy spacing of\n$<code>\\Delta E = 0.001</code>$. In this case, the first 5 states of the central region are\nsufficient for the calculation. Our leads are such that:</p>\n<ul>\n<li>Lead 0 is confined to region $<code>[-10.0,-4.0]</code>$ in $<code>x</code>$-direction, $<code>[-5.0,5.0]</code>$\nin $<code>y</code>$-direction and connects to the lead from the left;</li>\n<li>Lead 1 is confined to region $<code>[4.0,10.0]</code>$ in $<code>x</code>$-direction, $<code>[-5.0,5.0]</code>$\nin $<code>y</code>$-direction and connects to the lead from the right.</li>\n</ul>\n<p>Both leads in this case have harmonic potential of strength $<code>\\omega=1.0</code>$ in\n$<code>y</code>$-direction, and particle-in-a-box potential in $<code>x</code>$-direction. This\ninformation is sufficient for us to commence the system preparation. For that,\n<code>tinie_prepare</code> script is used as follows:</p>\n<pre>$ tinie_prepare -dE 1e-3 -B <span class=\"m\">1</span>.0 -ctr <span class=\"s2\">\"itp2d(ITP2D_FILE_PATH,(0,4))\"</span> -l <span class=\"m\">2</span> -ld <span class=\"s2\">\"finharm(left,1.0,dir)\"</span> <span class=\"s2\">\"finharm(right,1.0,dir)\"</span> -xlim <span class=\"s2\">\"[-10.0,-4.0]\"</span> <span class=\"s2\">\"[4.0,10.0]\"</span> -ylim <span class=\"s2\">\"[-5.0,5.0]\"</span> <span class=\"s2\">\"[-5.0,5.0]\"</span> -Elim <span class=\"s2\">\"[0.0,2.0]\"</span> <span class=\"s2\">\"[0.0,2.0]\"</span> -cpl <span class=\"s2\">\"overlap()\"</span> <span class=\"s2\">\"overlap()\"</span> -o TINIE_PREPARE_FILE_PATH\n</pre>\n<p>This produces the PREPTINIEFile that contains the information about the\ncoupling of the transport system which can be reused for different transport\ncalculations of the next step.</p>\n<p><strong>Step 2:</strong> the transport calculation step. This is where the real fun begins,\nthe steps before are in a sense just a preparation. To compute various\ntransport properties of the system, such as transmission, conductance and\ncurrent, we fix temperature of the system $<code>T=1.0</code>$, chemical potential $<code>\\mu=1.0</code>$\nand fix bias voltages in the leads to be $<code>V_{0}=0.5</code>$ in Lead 0 and $<code>V_{1}=1.5</code>$.\nMoreover, we adjust the energy spacing of probe electrons to\n$<code>\\Delta\\omega=0.01</code>$ and set the Green's function boundary parameter to\n$<code>\\eta=0.1</code>$. With this information we can use <code>tinie</code> script as follows:</p>\n<pre>$ tinie -i TINIE_PREPARE_FILE_PATH -dw 1e-2 -eta 1e-1 -T <span class=\"m\">1</span>.0 -mu <span class=\"m\">1</span>.0 -V <span class=\"m\">0</span>.5 <span class=\"m\">1</span>.5 -o TINIE_FILE_PATH\n</pre>\n<p>This produces the TINIEFile that contains all the above mentioned transport\nquantities and more, with detailed description of its contents outlined in the\nsections below.</p>\n<p>In addition to the transport properties, we can compute local and standard\ndensity of states (LDOS/DOS) of the system via the <code>tinie_dos</code> script. To that\nend, in addition to the parameters specified above, user would want to\nspecify the energies at which LDOS should be evaluated, as well as the\nlocation of the file with the central region wavefunctions. We then use the\nscript as follows:</p>\n<pre>$ tinie_dos -i TINIE_PREPARE_FILE_PATH -psi ITP2D_FILE_PATH --wf-range <span class=\"m\">0</span> <span class=\"m\">4</span> -w <span class=\"m\">1</span>.0 <span class=\"m\">2</span>.0 <span class=\"m\">3</span>.0 -dw 1e-2 -eta 1e-1 -T <span class=\"m\">1</span>.0 -mu <span class=\"m\">1</span>.0 -V <span class=\"m\">0</span>.5 <span class=\"m\">1</span>.5 -o TINIE_DOS_FILE_PATH\n</pre>\n<p>Here, we evaluated LDOS at probe energies $<code>\\omega\\in\\{1.0,2.0,3.0\\}</code>$. Results\nof this calculation are stored in TINIEDOSFile, with details about its contents\navailable in sections below.</p>\n<p><strong>Step 3:</strong> visualizing the results. To that end, one can use the <code>tinie_draw</code>\nscript. Suppose we want to plot transmission, conductance, total current and\nDOS of the system in the energy range $<code>[0.0,5.0]</code>$, as well as LDOS at probe\nenergy $<code>\\omega=1.0</code>$. We then use the following command:</p>\n<pre>$ tinie_draw -i TINIE_FILE_PATH -idos TINIE_DOS_FILE_PATH -E <span class=\"m\">0</span>.0 <span class=\"m\">5</span>.0 --ldos-E <span class=\"m\">1</span>.0 --transmission --conductance --total-currents --dos --ldos -o FIGURE_PATH\n</pre>\n<p>This will produce beautiful LaTeX-rendered plots of the aforementioned\nquantities. Below we show the example plots of conductance, DOS and LDOS\nproduced by the script:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Conductance</th>\n<th align=\"center\">DOS</th>\n<th align=\"center\">LDOS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1996eb2df14fe650b69d4a1a87ed16b25ef542e1/6578616d706c655f666967757265732f636f6e64756374616e63652e706e67\"></td>\n<td align=\"center\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ac4f28a458582b6cf564db75f2ee549e2981b55/6578616d706c655f666967757265732f646f732e706e67\"></td>\n<td align=\"center\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08144d541973c3e6aff1280586ea9840db3eedf4/6578616d706c655f666967757265732f6c646f732e706e67\"></td>\n</tr></tbody></table>\n<p>Quantum transport calculations in two-dimensional systems have never been as\neasy!</p>\n<h2>Currently Implemented System Classes</h2>\n<p>As of now, the following system classes are implemented:</p>\n<ul>\n<li><code>Center</code> objects, located in <code>transport_calculator/systems/central_region</code>\n<ul>\n<li><code>Itp2dCenter</code>: itp2d-compatible interface.</li>\n<li><code>CustomCenter</code>: container for a custom predefined central region\nHamiltonian $<code>\\mathbf{H}^{C}</code>$.</li>\n</ul>\n</li>\n<li><code>Lead</code> objects, located in <code>transport_calculator/systems/leads</code>. Note that\nwavefunction normalization has been omitted for the sake of compactness of\nthe expression. Wavefunctions in the code are all normalized.\n<ul>\n<li><code>FiniteHarmonicLead</code>: lead described by a wavefunction\n$<code>\\psi^{L}_{k,l}(x,q)=\\cos(k(x-x^{L}_{max})+\\frac{\\pi}{2})e^{-\\frac{1}{2}q^2}H_{l}(q)</code>$,\nwhere $<code>H_{l}(q)</code>$ is the the Hermite polynomial of order $<code>l</code>$,\n$<code>q=\\sqrt{\\omega_{c0}y-\\frac{l}{B}\\frac{\\omega^{2}_{c}}{\\omega^{2}_{c0}}}</code>$,\n$<code>\\omega_{c}=B,\\omega^2_{c0}=\\omega^2_0+\\omega^2_c</code>$, with $<code>\\omega_0</code>$\nbeing the frequency of quantum harmonic oscillator and $<code>B</code>$ being\nmagnetic field strength. The formula is provided in Hartee atomic units.\n$<code>x</code>$ and $<code>y</code>$ coordinate wavefunctions are interchangeable depending on\nthe lead alignment.</li>\n<li><code>BoxLead</code>: particle in a box lead describe by wavefunction\n$<code>\\psi^{L}_{k,l}(x,y)=\\sin(\\frac{k\\pi}{L_{x}}(x-x^L_{max}))\\sin(\\frac{l\\pi}{L_{y}}(y-y^L_{max}))</code>$,\nwhere $<code>L_{x}</code>$ and $<code>L_{y}</code>$ are the length and width of the box\ncorrespondingly and $<code>k,l \\in \\mathbb{Z}_{+}\\setminus \\{0\\}</code>$.</li>\n<li><code>CustomLead</code>: container for a custom predefined lead region Hamiltonian\n$<code>\\mathbf{H}^{L}</code>$.</li>\n</ul>\n</li>\n<li><code>Coupling</code> objects, located in <code>transport_calculator/systems/couplings</code>\n<ul>\n<li><code>OverlapCoupling</code>: strong coupling of the type\n$<code>\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\Omega}\\mathrm{d}\\mathbf{r}\\psi^{*}_{L,i}(\\mathbf{r})\\Delta\\psi_{C,j}(\\mathbf{r})</code>$,\nwhere $<code>\\psi_{L,i}</code>$ is the $<code>i</code>$th eigenfunction of the lead and\n$<code>\\psi_{C,j}</code>$ i\ns the $<code>j</code>$th eigenfunction of the central region and\n$<code>\\Omega</code>$ is the overlap region of the lead and the quantum-dot.</li>\n<li><code>TightBindingCoupling</code>: weak coupling between non-overlapping lead and\ncentral regions of the type\n$<code>\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\Omega_{L}}\\mathrm{d}\\mathbf{r'}\\psi^{*}_{L,i}(\\mathbf{r'})\\int_{\\Omega_{C}}\\mathrm{d}\\mathbf{r}\\frac{\\psi_{C,j}(\\mathbf{r})}{||\\mathbf{r'}-\\mathbf{r}||^2}e^{-i\\theta}</code>$,\nwhere $<code>\\theta=-\\frac{B}{2}(x'-x)(y'-y)</code>$, $<code>\\Omega_{L}</code>$ is the lead\nregion to be coupled and $<code>\\Omega_{C}</code>$ is the central region to be\ncoupled.</li>\n<li><code>OneLayerCoupling</code>: weak coupling between the boundaries of a\nnon-overlapping lead and central regions of the type\n$<code>\\mathbf{V}_{ij}=-\\frac{1}{2}\\int_{\\partial \\Omega_{L}}\\mathrm{d}\\mathbf{r'}\\psi^{*}_{L,i}(\\mathbf{r'})\\int_{\\partial \\Omega_{C}}\\mathrm{d}\\mathbf{r}\\frac{\\psi_{C,j}(\\mathbf{r})}{||\\mathbf{r'}-\\mathbf{r}||^2}e^{-i\\theta}</code>$.</li>\n<li><code>CustomCoupling</code>: container for custom predefined coupling matrix\n$<code>\\mathbf{V}</code>$. Compatible only with <code>CustomCenter</code> and <code>CustomLead</code>\nobjects.</li>\n</ul>\n</li>\n</ul>\n<p>The implementational details of these elements can be checked in the source\ncode, which is rich with insightful and helpful comments.</p>\n<h2>Adding Your Own Custom System Classes</h2>\n<p>As it has been mentioned before, the code has been designed in such a way as to\nallow as much freedom in expansion as possible. In particular, you can\nintroduce additional types of central regions, lead regions and coupling\nmethods. All you have to do is to create your own class file in the\ncorresponding folder in <code>tinie/systems</code> and make sure that the\nclass you are creating inherits from one of the basic abstract classes\n(<code>Center</code>, <code>Lead</code> or <code>Coupling</code>). Below you can find a list of functions you\nwould have to implement (correctly) in order for your custom class to be fully\nintegrated into the transport scheme:</p>\n<ul>\n<li><code>Center</code> region:\n<ul>\n<li><code>__init__(*attrs)</code>: initializer</li>\n<li><code>get_type_specific_parameters()</code>: retrieves child-specific extra\nparameters</li>\n<li><code>get_energies()</code>: retrieves central region Hamiltonian $<code>\\mathbf{H}^{C}</code>$</li>\n<li><code>get_potential()</code>: retrieves potential energy values in the central\nregion</li>\n<li><code>get_state(n)</code>: retrieves $<code>n</code>$th wavefunction</li>\n<li><code>get_states()</code>: retrieves all wavefunctions on the grid</li>\n<li><code>get_number_of_states()</code>: retrieves the number of states in the central\nregion</li>\n<li><code>get_sliced_state(n, width, side)</code>: retrieves $<code>n</code>$th wavefunction on a\ngrid slice</li>\n<li><code>get_sliced_states(width, side)</code>: retrieves all wavefunctions on a\ngrid slice</li>\n<li><code>get_boundary_state(n, side)</code>: retrieves nth wavefunction evaluated on\nsome boundary</li>\n<li><code>get_coordinate_ranges()</code>: retrieves x and y coordinate ranges</li>\n<li><code>get_coordinates()</code>: retrieves the coordinate meshes</li>\n<li><code>get_slice_coordinates(width, side)</code>: retrieves the sliced\ncoordinate meshes</li>\n<li><code>get_boundary_coordinates(side)</code>: retrieves the boundary coordinate\nrange</li>\n</ul>\n</li>\n<li><code>Lead</code> region:\n<ul>\n<li><code>__init__(*attrs)</code>: initializer</li>\n<li><code>set_magnetic_field_strength(B)</code>: sets magnetic field strength</li>\n<li><code>set_energy_spacing(delta_E)</code>: sets lead energy spacing</li>\n<li><code>get_type_specific_parameters()</code>: retrieves child-specific extra\nparameters</li>\n<li><code>get_energies()</code>: retrieves lead region Hamiltonian $<code>\\mathbf{H}^{L}</code>$</li>\n<li><code>get_state_point(x, y, n)</code>: evaluates the $<code>n</code>$th state wavefunction at\na single point $<code>(x, y)</code>$</li>\n<li><code>get_state(x_points, y_points, n, mode)</code>: retrieves the $<code>n</code>$th\nstate wavefunction on a custom/discretized grid</li>\n<li><code>get_number_of_states()</code>: retrieves the number of states in the lead\nregion</li>\n<li><code>get_boundary_state(n, num_boundary_points)</code>: retrieves $<code>n</code>$th wavefunction\nevaluated on the lead boundary</li>\n<li><code>get_boundary(num_boundary_points)</code>: retrieves the boundary grid\nwith specified discretization</li>\n</ul>\n</li>\n<li><code>Coupling</code> region:\n<ul>\n<li><code>__init__(Center_object, Lead_object, *attrs)</code>: initializer, sets the\ncenter and lead objects ready for the coupling matrix calculations</li>\n<li><code>get_coupling_matrix_element(i, j)</code>: retrieves coupling matrix element\n$<code>\\mathbf{V}_{ij}</code>$, that is, the coupling between $<code>i</code>$th lead state and\n$<code>j</code>$th central state</li>\n<li><code>get_coupling_matrix()</code>: retrieves the coupling matrix $<code>\\mathbf{V}</code>$</li>\n</ul>\n</li>\n</ul>\n<p>Details about the input/output parameter types can be found in the source code.\nUpon implementing all of these functions correctly for the corresponding custom\nobject and extending the parser interface accordingly, the code extension will\nbe fully consistent with the original code!</p>\n<h2>Scripts Included in the Package</h2>\n<p>tinie includes a few scripts that should ease the usage of the software:</p>\n<h2>scripts/tinie_prepare</h2>\n<p>This script prepares the coupling system and saves it in a tinie_prepare hdf5 file,\nwhich contains the following attributes and datasets:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"type\"</td>\n<td>File type, must be \"PREPTINIEFile\"</td>\n</tr>\n<tr>\n<td align=\"right\">\"center/type\"</td>\n<td>Type of the central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"center/num_states\"</td>\n<td>Number of states in the central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"center/parameters\"</td>\n<td>Type-dependent parameters of the central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/num_leads\"</td>\n<td>Number of leads</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/type\"</td>\n<td>Type of the lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/num_states\"</td>\n<td>Number of states in lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/energy_spacing\"</td>\n<td>Energy spacing in lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/parameters\"</td>\n<td>Type-dependent parameters of lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"couplings/num_couplings\"</td>\n<td>Number of couplings</td>\n</tr>\n<tr>\n<td align=\"right\">\"couplings/coupling_n/type\"</td>\n<td>Type of coupling between lead $<code>n</code>$ and the central region</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Dataset</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"center/hamiltonian\"</td>\n<td>Hamiltonian of the central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"center/potential\"</td>\n<td>Potential energy values in the central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/hamiltonian\"</td>\n<td>Hamiltonian of the lead region $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/x_axis_limits\"</td>\n<td>x-axis limits of lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/y_axis_limits\"</td>\n<td>y-axis limits of lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"leads/lead_n/energy_limits\"</td>\n<td>Energy limits of lead $<code>n</code>$</td>\n</tr>\n<tr>\n<td align=\"right\">\"couplings/coupling_n/coupling_matrix\"</td>\n<td>Coupling matrix between lead $<code>n</code>$ and the central region</td>\n</tr></tbody></table>\n<p>Some of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the simulation parameters are adjusted via a parser user\ninterface, which takes the following arguments (type <code>scripts/preptinie --help</code>\nif you ever feel lost!):</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>-dE</code>,<code>--delta-E</code></td>\n<td>Lead energy spacing</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-B</code></td>\n<td>Magnetic field strength</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-xlim</code>,<code>--x-axis-limits</code></td>\n<td>x-axis limits of each lead, typed in form <code>[x_min_0, x_max_0] [x_min_1, x_max_1] ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-ylim</code>,<code>--y-axis-limits</code></td>\n<td>y-axis limits of each lead, typed in form <code>[y_min_0, y_max_0] [y_min_1, y_max_1] ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-Elim</code>,<code>--energy-limits</code></td>\n<td>Energy limits of each lead, typed in form <code>[E_min_0, E_max_0] [E_min_1, E_max_1] ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-ctr</code>,<code>--center-type</code></td>\n<td>Central region type, typed in form <code>\"ctr_type(*ctr_params)\"</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-l</code>,<code>--lead-number</code></td>\n<td>Number of leads</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-ld</code>,<code>--lead-types</code></td>\n<td>Lead region types, typed in form <code>\"ld0_type(*ld0_params)\" \"ld1_type(*ld1_params)\" ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-cpl</code>,<code>--coupling-types</code></td>\n<td>Coupling region types, typed in form <code>\"cpl0_type(*cpl0_params)\" \"cpl1_type(*cpl1_params)\" ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-o</code>, <code>--output-file</code></td>\n<td>Path, where preptinie file is saved</td>\n</tr></tbody></table>\n<h2>scripts/tinie</h2>\n<p>This script reads the preptinie hdf5 file, performs the transport calculation\nand saves the results in a tinie hdf5 with the following attributes and datasets:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"type\"</td>\n<td>File type, must be \"TINIEFile\"</td>\n</tr>\n<tr>\n<td align=\"right\">\"evaluated_chemical_potential\"</td>\n<td>Chemical potential $<code>\\mu</code>$ of the system</td>\n</tr>\n<tr>\n<td align=\"right\">\"evaluated_bias_voltage\"</td>\n<td>Bias voltage in the leads of the system</td>\n</tr>\n<tr>\n<td align=\"right\">\"evaluated_temperature\"</td>\n<td>Temperature of the system</td>\n</tr>\n<tr>\n<td align=\"right\">\"omega_spacing\"</td>\n<td>Probe energy spacing</td>\n</tr>\n<tr>\n<td align=\"right\">\"lead_energy_spacing\"</td>\n<td>Lead energy spacing</td>\n</tr>\n<tr>\n<td align=\"right\">\"eta\"</td>\n<td>Small number eta used in the Green's function</td>\n</tr>\n<tr>\n<td align=\"right\">\"number_of_couplings\"</td>\n<td>Number of couplings in the system</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Dataset</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"partial_currents\"</td>\n<td>Matrix of partial currents between each lead</td>\n</tr>\n<tr>\n<td align=\"right\">\"total_currents\"</td>\n<td>Total currents in each lead</td>\n</tr>\n<tr>\n<td align=\"right\">\"omega_dependent_partial_currents\"</td>\n<td>Energy profile of the partial current matrix</td>\n</tr>\n<tr>\n<td align=\"right\">\"omega_dependent_total_currents\"</td>\n<td>Energy profile of the total currents</td>\n</tr>\n<tr>\n<td align=\"right\">\"transmission\"</td>\n<td>Transmission matrix as a function of probe energy</td>\n</tr>\n<tr>\n<td align=\"right\">\"transmission_error\"</td>\n<td>Imaginary component of transmission</td>\n</tr>\n<tr>\n<td align=\"right\">\"conductance\"</td>\n<td>System conductance matrix values</td>\n</tr></tbody></table>\n<p>Some of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the transport calculation parameters are adjusted via a parser user\ninterface, which takes the following arguments (type <code>scripts/tinie --help</code> if\nyou ever feel lost!):</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>-dw</code>,<code>--delta-omega</code></td>\n<td>Probe energy spacing</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-eta</code></td>\n<td>Small imaginary constant used in calculating Green's function</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-mu</code>,<code>--chem-pot</code></td>\n<td>Chemical potential, at which system is evaluated</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-V</code>,<code>--lead-bias</code></td>\n<td>Lead biases, at which system is evaluated, typed in form <code>V_0 V_1 ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-T</code>,<code>--temperature</code></td>\n<td>Temperature, at which system is evaluated</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-i</code>,<code>--input-file</code></td>\n<td>Path, from which preptinie file is read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-o</code>, <code>--output-file</code></td>\n<td>Path, where tinie file is saved</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--wide-band</code>, <code>--no-wide-band</code></td>\n<td>Boolean flags user can specify if he wishes to use wide band approximation methods (or not)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-S</code>,<code>--self-energy</code></td>\n<td>Path, from which the array of custom self energies is read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-G</code>,<code>--rate-operator</code></td>\n<td>Path, from which the array of rate operators is read</td>\n</tr></tbody></table>\n<p>Note that if you wish to use the wide band approximation approach you must specify either self energies or rate\noperators or both!</p>\n<h2>scripts/tinie_dos</h2>\n<p>This scripts reads the preptinie hdf5 file and the file containing the eigenfunctions of the central region,\ncomputes DOS/LDOS and saves the results in dostinie hdf5 file with the following attributes and datasets:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"type\"</td>\n<td>File type, must be \"TINIEDOSFile\"</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Dataset</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">\"dos\"</td>\n<td>Density of states values</td>\n</tr>\n<tr>\n<td align=\"right\">\"ldos\"</td>\n<td>Local density of states values</td>\n</tr>\n<tr>\n<td align=\"right\">\"x\"</td>\n<td>x-axis values of the system central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"y\"</td>\n<td>y-axis values of the system central region</td>\n</tr>\n<tr>\n<td align=\"right\">\"omega_dos\"</td>\n<td>Energies at which DOS was evaluated</td>\n</tr>\n<tr>\n<td align=\"right\">\"omega_ldos\"</td>\n<td>Energies at which LDOS was evaluated</td>\n</tr></tbody></table>\n<p>Some of these datasets are stored in chunked/compressed format for more data-intensive\nsimulations. All the DOS/LDOS calculation parameters are adjusted via a parser user\ninterface, which takes the following arguments (type <code>scripts/dostinie --help</code> if\nyou ever feel lost!):</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>-w</code>, <code>--omega-ldos</code></td>\n<td>Probe energies, at which LDOS should be evaluated</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-dw</code>,<code>--delta-omega</code></td>\n<td>Probe energy spacing</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-eta</code></td>\n<td>Small imaginary constant used in calculating Green's function</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-mu</code>,<code>--chem-pot</code></td>\n<td>Chemical potential, at which system is evaluated</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-V</code>,<code>--lead-bias</code></td>\n<td>Lead biases, at which system is evaluated, typed in form <code>V_0 V_1 ...</code></td>\n</tr>\n<tr>\n<td align=\"right\"><code>-T</code>,<code>--temperature</code></td>\n<td>Temperature, at which system is evaluated</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-i</code>, <code>--input-file</code></td>\n<td>Path from which preptinie file is read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-psi</code>, <code>--wf-file</code></td>\n<td>Path from which central region wavefunctions are read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--wf-range</code></td>\n<td>Range of the wavefunctions to read from the wavefunction file</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-o</code>,<code>--output-file</code></td>\n<td>Path where the dostinie file is saved</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--dos</code>, <code>--no-dos</code></td>\n<td>Boolean, decides if DOS is computed</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--ldos</code>, <code>--no-ldos</code></td>\n<td>Boolean, decides if LDOS is computed</td>\n</tr></tbody></table>\n<h2>scripts/tinie_draw</h2>\n<p>This script reads data from the tinie hdf file, makes pretty\ntransmission/backsacttering/current/density of states plots and saves them.\nThis script has a parser user interface, where you can specify the following\nplot arguments:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>-i</code>,<code>--input-file</code></td>\n<td>Path from which tinie file is read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-idos</code>, <code>--input-dos-file</code></td>\n<td>Path from which dostinie  file is read</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-o</code>,<code>--output-file</code></td>\n<td>Path where the plots are saved</td>\n</tr>\n<tr>\n<td align=\"right\"><code>-E</code>, <code>--energy-rangs</code></td>\n<td>Range of energies over which to draw the plot</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--transmission</code>, <code>--no-transmission</code></td>\n<td>Boolean, decides if transmission is plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--backscattering</code>, <code>--no-backscattering</code></td>\n<td>Boolean, decides if backscattering is plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--partial-currents</code>, <code>--no-partial-currents</code></td>\n<td>Boolean, decides if partial currents are plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--total-currents</code>, <code>--no-total-currents</code></td>\n<td>Boolean, decides if total currents are plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--dos</code>, <code>--no-dos</code></td>\n<td>Boolean, decides if density of states is plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--ldos</code>, <code>--no-ldos</code></td>\n<td>Boolean, decides if local density of states is plotted</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--norm-ldos</code>, <code>--no-norm-ldos</code></td>\n<td>Boolean, decides if LDOS will be normalized by 1 or not</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--ldos-E</code></td>\n<td>Evaluate LDOS at probe energy closest to the one specified</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--ldos-idx</code></td>\n<td>Evaluate LDOS at an index corresponding to a probe energy</td>\n</tr>\n<tr>\n<td align=\"right\"><code>--stability</code>, <code>--no-stability</code></td>\n<td>Boolean, decides if the numerical stability tests are plotted</td>\n</tr></tbody></table>\n<h2>scripts/make_system_files</h2>\n<p>This script generates custom Hamiltonians or coupling matrices and saves them\nin a .npy file to be passed on as arguments for\n<code>CustomCenter</code>/<code>CustomLead</code>/<code>CustomCoupling</code> objects. They can also be used to\ngenerate custom self-energy/rate operators for the wide-band approximation.\nRun the script, follow the instructions and the rest is history.</p>\n<p>Naturally, these scripts provide only some of the basic functionality\nextensions. Additional scripts/code modifications may be added based on the\nuser's end goals.</p>\n\n          </div>"}, "last_serial": 6472624, "releases": {"0.9.5": [{"comment_text": "", "digests": {"md5": "cfa2e150be9dda82f67ac0d872b81380", "sha256": "711263a369981ac1664121b784b75adaa63ced73fdb436ebfc570ea47dc0fb6b"}, "downloads": -1, "filename": "tinie-0.9.5.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "cfa2e150be9dda82f67ac0d872b81380", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16488797, "upload_time": "2020-01-17T11:29:14", "upload_time_iso_8601": "2020-01-17T11:29:14.967617Z", "url": "https://files.pythonhosted.org/packages/29/88/c084c6bc48cd4f37f5c5d400b4351186e1811475a2416c577ac2185a8763/tinie-0.9.5.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "36c933d0f7d51e4369b9176076f2276d", "sha256": "7bf74d132434b6e84d6a6b0f5b00ba47f384d30317cd93bcd87f995fa329d0a3"}, "downloads": -1, "filename": "tinie-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "36c933d0f7d51e4369b9176076f2276d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16452968, "upload_time": "2020-01-17T11:29:09", "upload_time_iso_8601": "2020-01-17T11:29:09.483442Z", "url": "https://files.pythonhosted.org/packages/40/06/3b18be8cac5d8aa33b7cf9e9cda6cf3d92ac0d588e1d77c71b5fd61cc3be/tinie-0.9.5-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "aacabc5472f3a372dbdc33fb81d66566", "sha256": "5bfffe7730fc85696744951b0090d97be7ee840453886768436bf0973680fd3b"}, "downloads": -1, "filename": "tinie-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aacabc5472f3a372dbdc33fb81d66566", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16454793, "upload_time": "2020-01-17T11:48:03", "upload_time_iso_8601": "2020-01-17T11:48:03.196647Z", "url": "https://files.pythonhosted.org/packages/6a/51/15a7a1b678f9e06df319a171d8b24906bbf1c0287d90b919a48f74e5b3d0/tinie-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "279f95152386c4f2e35fc0f6fe231e57", "sha256": "29f45070b8a448b16596100cae6e767b7583f39d7f9b7665e40a0e23c5117f31"}, "downloads": -1, "filename": "tinie-1.0.0.tar.gz", "has_sig": false, "md5_digest": "279f95152386c4f2e35fc0f6fe231e57", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16442749, "upload_time": "2020-01-17T11:48:07", "upload_time_iso_8601": "2020-01-17T11:48:07.987702Z", "url": "https://files.pythonhosted.org/packages/81/d8/3ff6c2febfdafa43687578435b1536d140a6e41ca0c4d2d5097010f3b1c8/tinie-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a15947c3340d4548093fd80ebf50f236", "sha256": "c0f96d093591fbf6db490e9bcf2891569b61fcacae14b9f029ac4188e0d3ee6c"}, "downloads": -1, "filename": "tinie-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a15947c3340d4548093fd80ebf50f236", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16454745, "upload_time": "2020-01-17T11:53:05", "upload_time_iso_8601": "2020-01-17T11:53:05.657433Z", "url": "https://files.pythonhosted.org/packages/2e/84/7036d80463566e80442825680f9c60f33df13e166a19ce0c981b50944406/tinie-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51e0ad3928668eb1942de45aed712dc7", "sha256": "aa5bf6101059dd9ae7d2da0eaa3982136024c3124e26c2a9e42979c2e1088ec6"}, "downloads": -1, "filename": "tinie-1.0.1.tar.gz", "has_sig": false, "md5_digest": "51e0ad3928668eb1942de45aed712dc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16442045, "upload_time": "2020-01-17T11:53:13", "upload_time_iso_8601": "2020-01-17T11:53:13.184823Z", "url": "https://files.pythonhosted.org/packages/dc/fa/4b8b3ab6dd699a802dd50e0cbf46d93c5bdf883a05da74056750d90524c0/tinie-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a15947c3340d4548093fd80ebf50f236", "sha256": "c0f96d093591fbf6db490e9bcf2891569b61fcacae14b9f029ac4188e0d3ee6c"}, "downloads": -1, "filename": "tinie-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a15947c3340d4548093fd80ebf50f236", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16454745, "upload_time": "2020-01-17T11:53:05", "upload_time_iso_8601": "2020-01-17T11:53:05.657433Z", "url": "https://files.pythonhosted.org/packages/2e/84/7036d80463566e80442825680f9c60f33df13e166a19ce0c981b50944406/tinie-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51e0ad3928668eb1942de45aed712dc7", "sha256": "aa5bf6101059dd9ae7d2da0eaa3982136024c3124e26c2a9e42979c2e1088ec6"}, "downloads": -1, "filename": "tinie-1.0.1.tar.gz", "has_sig": false, "md5_digest": "51e0ad3928668eb1942de45aed712dc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16442045, "upload_time": "2020-01-17T11:53:13", "upload_time_iso_8601": "2020-01-17T11:53:13.184823Z", "url": "https://files.pythonhosted.org/packages/dc/fa/4b8b3ab6dd699a802dd50e0cbf46d93c5bdf883a05da74056750d90524c0/tinie-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:11 2020"}