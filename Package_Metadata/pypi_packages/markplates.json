{"info": {"author": "Jim Anderson", "author_email": "jima.coding@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# ![license_markplates](https://raw.githubusercontent.com/jima80525/markplates/master/license_markplates.jpg)\n\n# MarkPlates\n\n> A templating utility for keeping code included in Markdown documents in sync with the original source.\n\n[![CircleCI](https://circleci.com/gh/jima80525/markplates.svg?style=svg)](https://circleci.com/gh/jima80525/markplates) ![black](https://img.shields.io/badge/code%20style-black-000000.svg) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![pyup.io](https://pyup.io/repos/github/jima80525/markplates/shield.svg)](https://pyup.io/account/repos/github/jima80525/markplates/) [![PyPI version](https://badge.fury.io/py/markplates.svg)](https://badge.fury.io/py/markplates) [![Coverage Status](https://coveralls.io/repos/github/jima80525/markplates/badge.svg?branch=master)](https://coveralls.io/github/jima80525/markplates?branch=master)\n\nThe problem I hope to solve is to simplify keeping external files up to date with markdown documents that contain them. This happens to me frequently when an editor makes a suggestion to an article that will modify the underlying code it is quoting.\n\n## Installing\n\nYou can download and install the latest version of MarkPlates from the PyPI with this command:\n\n```bash\n$ pip install --upgrade markplates\n```\n\nMarkPlates is currently tested against Python 3.6 and Python 3.7.\n\n## Usage\n\nRunning `markplates` is as simple as handing it a file:\n\n```bash\n$ markplates template.mdt\n```\n\nThis will process the template in `template.mdt`, filling it in with data specified in the template.\n\nThe `examples` directory has the `simple.mdt` template:\n\n```markdown\n# Sample MarkPlates Template\n{{ set_path(\"./examples\") }}\n\nThis is an example of importing an entire file (minus the first line):\n{{ import_source(\"testfile.py\") }}\n\nWhile this silly example imports some of the lines from the file, demonstrating ranges:\n{{ import_source(\"testfile.py\", [5, \"2\", 3, \"8-$\", ]) }}\n\n{{ import_repl(\n\"\"\"\ndef func(x):\n    if x:\n        print(x)\n\nfunc(True)\nfunc(False) \"\"\") }}\n```\n\nThis demonstrates setting the path and pulling in some of the lines of a file. You can also examine the `README.mdt` file in this library which is used to create this `README.md`.\n\nTo use on your own project create a markdown document with special tags to indicate a `markplates` function call.  The delimiter for these tags is `{{` function goes here `}}`.\n\n> **Note:** if you need to add `{{` characters which should not be processed as a template, you can put them in a `{{ '' }}`  block to escape them. Template processing is done with `Jinja2` so Markplates uses the same escape sequences.\n\n`Markplates` supports these functions:\n\n*  `set_path(\"path/to/source/files\")`\n* `import_source(\"source_file_name\", [list of line number ranges])`\n* `import_function(\"source_file_name\", \"function_name\")`\n* `import_repl(\"code to run in repl\")`\n\n### `set_path()`\n\nThe `set_path()` function allows you to specify the base directory to use when searching for source files.  Each call to this function will apply from that point in the template down.\n\nThe path must be included in single or double qoutes. If not specified, the path defaults to \".\", the current directory.\n\nExamples:\n\n\n```\n{{set_path(\".\")}}  #sets path to the default\n{{set_path(\"/home/user/my/project\")}} # points the path to your project\n```\n\nThe `set_path()` command is not required as all other functions will take full paths to files.\n\n### `import_source()`\n\nThe `import_source()` function will pull in the contents of a source file.  Optional line number ranges can be specified (see description below). The filename must be in quotes.\n\nIf no line number ranges are specified, the first line of the file will be omitted.  This is to prevent the `#!/usr/bin/env python` line from cluttering the markdown article. If you want to include the first line, use the range: `1-$`.\n\nExamples:\n\n```\n{{import_source(\"__main__.py\")}} # includes all but line 1 from `__main__.py` file\n{{import_source(\"__main__.py\", [\"1-$\",])}} # imports all lines from `__main__.py`\n{{import_source(\"__main__.py\", [1, \"3\", \"5-$\"])}} # imports all lines except lines 2 and 4 from `__main__.py`\n```\n\n`MarkPlates` will display an error message to `stderr` if a file is not found.\n\n### `import_function()`\n\nThe `inport_function` function will search the source file and include only the specified function. If there are multiple functions with the same name in the source_file, only the first will be included (and you shouldn't have multiple functions with the same name anyway!).\n\nWhitespace following the function will not be included.\n\nExamples:\n\n```\n{{import_function(\"__main__.py\", \"condense_ranges\")}} # imports the function named `condense_ranges` from `__main__.py`\n```\n\n`MarkPlates` handles nested functions, included any functions nested in the specified function.\n\n### `import_repl()`\n\nThe `import_repl` function takes the input parameter and splits it into separate lines.  Each line of the input will be run in a REPL with the `stdout` and `stderr` captured to insert into the final output. The result should appear similar to a copy-paste from running the same commands manually.\n\nThere is an exception, however.  Blank input lines are used for spacing and will not display the `>>>` prompt one would normally see in the REPL.\n\nExample:\n\n```\n{{import_repl(\n\"\"\"\ndef func(x):\n    if x:\n        print(x)\n\nfunc(True)\nfunc(False) \"\"\") }}\n```\n\n\nOutput:\n```\n>>> def func(x):\n...     if x:\n...         print(x)\n\n>>> func(True)\nTrue\n>>> func(False)\n\n```\n\n### Line Number Ranges\n\nLine number ranges allow you to specify which lines you want to include from the source file.   Ranges can be in the following form:\n\n* 3 or \"3\" : an integer adds just that line from the input\n\n* \"5-7\" : a range adds lines between start and end inclusive (so 5, 6, 7)\n\n* \"10-$\" : an unlimited range includes start line to the end of the file\n\n> **Note:** LINE NUMBERING STARTS AT 1!\n\n## Features to Come\n\nI'd like to add:\n\n* Capturing the results of a shell command and inserting into the file\n* Copying the resultant Markdown file to the clipboard\n* Running `black` over the included Python source\n* Windows and Mac testing/support\n\n## Interested?\n\nLet me know!  If you're interested in the results or would like to help out, please raise an issue and I'll be in touch!\n\n## Release History\n\n* 1.1.0 Added `import_repl` functionality\n\n* 1.0.0 Initial release\n\nLicense plate graphic thanks to [ACME License Maker](https://www.acme.com/licensemaker/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jima80525/markplates", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "markplates", "package_url": "https://pypi.org/project/markplates/", "platform": "", "project_url": "https://pypi.org/project/markplates/", "project_urls": {"Homepage": "https://github.com/jima80525/markplates"}, "release_url": "https://pypi.org/project/markplates/1.1.1/", "requires_dist": ["Click", "Jinja2"], "requires_python": ">=3.6.0", "summary": "Inject code snippets into your Markdown docs", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"license_markplates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e900f051ed85c474e72625a3b625aff9912bea17/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6a696d6138303532352f6d61726b706c617465732f6d61737465722f6c6963656e73655f6d61726b706c617465732e6a7067\"></h1>\n<h1>MarkPlates</h1>\n<blockquote>\n<p>A templating utility for keeping code included in Markdown documents in sync with the original source.</p>\n</blockquote>\n<p><a href=\"https://circleci.com/gh/jima80525/markplates\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79c23100eaa3d6b68327f2067bfa9dccb77db389/68747470733a2f2f636972636c6563692e636f6d2f67682f6a696d6138303532352f6d61726b706c617465732e7376673f7374796c653d737667\"></a> <img alt=\"black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a> <a href=\"https://pyup.io/account/repos/github/jima80525/markplates/\" rel=\"nofollow\"><img alt=\"pyup.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dad4f0acd253364bc49a17c676bde531a4b1b353/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6a696d6138303532352f6d61726b706c617465732f736869656c642e737667\"></a> <a href=\"https://badge.fury.io/py/markplates\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0233c556e2ffc0b91ba7e8b6fbab17affce1155a/68747470733a2f2f62616467652e667572792e696f2f70792f6d61726b706c617465732e737667\"></a> <a href=\"https://coveralls.io/github/jima80525/markplates?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/405dd06719acd6ecb5d297b030ad6ffbb83e0bf5/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a696d6138303532352f6d61726b706c617465732f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>The problem I hope to solve is to simplify keeping external files up to date with markdown documents that contain them. This happens to me frequently when an editor makes a suggestion to an article that will modify the underlying code it is quoting.</p>\n<h2>Installing</h2>\n<p>You can download and install the latest version of MarkPlates from the PyPI with this command:</p>\n<pre>$ pip install --upgrade markplates\n</pre>\n<p>MarkPlates is currently tested against Python 3.6 and Python 3.7.</p>\n<h2>Usage</h2>\n<p>Running <code>markplates</code> is as simple as handing it a file:</p>\n<pre>$ markplates template.mdt\n</pre>\n<p>This will process the template in <code>template.mdt</code>, filling it in with data specified in the template.</p>\n<p>The <code>examples</code> directory has the <code>simple.mdt</code> template:</p>\n<pre># Sample MarkPlates Template\n{{ set_path(\"./examples\") }}\n\nThis is an example of importing an entire file (minus the first line):\n{{ import_source(\"testfile.py\") }}\n\nWhile this silly example imports some of the lines from the file, demonstrating ranges:\n{{ import_source(\"testfile.py\", [5, \"2\", 3, \"8-$\", ]) }}\n\n{{ import_repl(\n\"\"\"\ndef func(x):\n    if x:\n        print(x)\n\nfunc(True)\nfunc(False) \"\"\") }}\n</pre>\n<p>This demonstrates setting the path and pulling in some of the lines of a file. You can also examine the <code>README.mdt</code> file in this library which is used to create this <code>README.md</code>.</p>\n<p>To use on your own project create a markdown document with special tags to indicate a <code>markplates</code> function call.  The delimiter for these tags is <code>{{</code> function goes here <code>}}</code>.</p>\n<blockquote>\n<p><strong>Note:</strong> if you need to add <code>{{</code> characters which should not be processed as a template, you can put them in a <code>{{ '' }}</code>  block to escape them. Template processing is done with <code>Jinja2</code> so Markplates uses the same escape sequences.</p>\n</blockquote>\n<p><code>Markplates</code> supports these functions:</p>\n<ul>\n<li><code>set_path(\"path/to/source/files\")</code></li>\n<li><code>import_source(\"source_file_name\", [list of line number ranges])</code></li>\n<li><code>import_function(\"source_file_name\", \"function_name\")</code></li>\n<li><code>import_repl(\"code to run in repl\")</code></li>\n</ul>\n<h3><code>set_path()</code></h3>\n<p>The <code>set_path()</code> function allows you to specify the base directory to use when searching for source files.  Each call to this function will apply from that point in the template down.</p>\n<p>The path must be included in single or double qoutes. If not specified, the path defaults to \".\", the current directory.</p>\n<p>Examples:</p>\n<pre><code>{{set_path(\".\")}}  #sets path to the default\n{{set_path(\"/home/user/my/project\")}} # points the path to your project\n</code></pre>\n<p>The <code>set_path()</code> command is not required as all other functions will take full paths to files.</p>\n<h3><code>import_source()</code></h3>\n<p>The <code>import_source()</code> function will pull in the contents of a source file.  Optional line number ranges can be specified (see description below). The filename must be in quotes.</p>\n<p>If no line number ranges are specified, the first line of the file will be omitted.  This is to prevent the <code>#!/usr/bin/env python</code> line from cluttering the markdown article. If you want to include the first line, use the range: <code>1-$</code>.</p>\n<p>Examples:</p>\n<pre><code>{{import_source(\"__main__.py\")}} # includes all but line 1 from `__main__.py` file\n{{import_source(\"__main__.py\", [\"1-$\",])}} # imports all lines from `__main__.py`\n{{import_source(\"__main__.py\", [1, \"3\", \"5-$\"])}} # imports all lines except lines 2 and 4 from `__main__.py`\n</code></pre>\n<p><code>MarkPlates</code> will display an error message to <code>stderr</code> if a file is not found.</p>\n<h3><code>import_function()</code></h3>\n<p>The <code>inport_function</code> function will search the source file and include only the specified function. If there are multiple functions with the same name in the source_file, only the first will be included (and you shouldn't have multiple functions with the same name anyway!).</p>\n<p>Whitespace following the function will not be included.</p>\n<p>Examples:</p>\n<pre><code>{{import_function(\"__main__.py\", \"condense_ranges\")}} # imports the function named `condense_ranges` from `__main__.py`\n</code></pre>\n<p><code>MarkPlates</code> handles nested functions, included any functions nested in the specified function.</p>\n<h3><code>import_repl()</code></h3>\n<p>The <code>import_repl</code> function takes the input parameter and splits it into separate lines.  Each line of the input will be run in a REPL with the <code>stdout</code> and <code>stderr</code> captured to insert into the final output. The result should appear similar to a copy-paste from running the same commands manually.</p>\n<p>There is an exception, however.  Blank input lines are used for spacing and will not display the <code>&gt;&gt;&gt;</code> prompt one would normally see in the REPL.</p>\n<p>Example:</p>\n<pre><code>{{import_repl(\n\"\"\"\ndef func(x):\n    if x:\n        print(x)\n\nfunc(True)\nfunc(False) \"\"\") }}\n</code></pre>\n<p>Output:</p>\n<pre><code>&gt;&gt;&gt; def func(x):\n...     if x:\n...         print(x)\n\n&gt;&gt;&gt; func(True)\nTrue\n&gt;&gt;&gt; func(False)\n\n</code></pre>\n<h3>Line Number Ranges</h3>\n<p>Line number ranges allow you to specify which lines you want to include from the source file.   Ranges can be in the following form:</p>\n<ul>\n<li>\n<p>3 or \"3\" : an integer adds just that line from the input</p>\n</li>\n<li>\n<p>\"5-7\" : a range adds lines between start and end inclusive (so 5, 6, 7)</p>\n</li>\n<li>\n<p>\"10-$\" : an unlimited range includes start line to the end of the file</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> LINE NUMBERING STARTS AT 1!</p>\n</blockquote>\n<h2>Features to Come</h2>\n<p>I'd like to add:</p>\n<ul>\n<li>Capturing the results of a shell command and inserting into the file</li>\n<li>Copying the resultant Markdown file to the clipboard</li>\n<li>Running <code>black</code> over the included Python source</li>\n<li>Windows and Mac testing/support</li>\n</ul>\n<h2>Interested?</h2>\n<p>Let me know!  If you're interested in the results or would like to help out, please raise an issue and I'll be in touch!</p>\n<h2>Release History</h2>\n<ul>\n<li>\n<p>1.1.0 Added <code>import_repl</code> functionality</p>\n</li>\n<li>\n<p>1.0.0 Initial release</p>\n</li>\n</ul>\n<p>License plate graphic thanks to <a href=\"https://www.acme.com/licensemaker/\" rel=\"nofollow\">ACME License Maker</a></p>\n\n          </div>"}, "last_serial": 5200173, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0fb16fe0c3f7db84b5575ef9004ff578", "sha256": "43acbd3349a78bffd9955d7cd65330b31f83574a9ead31cc43fa310ade7b15d1"}, "downloads": -1, "filename": "markplates-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fb16fe0c3f7db84b5575ef9004ff578", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6804, "upload_time": "2019-04-04T01:55:58", "upload_time_iso_8601": "2019-04-04T01:55:58.308563Z", "url": "https://files.pythonhosted.org/packages/b9/1b/328cb3e878522eae028e773c960dd467ba3b5dea698ebd105940493038ee/markplates-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec99fa20413154a6b5e7043ba1b87531", "sha256": "fe7616b05a72eddba11b7d9db372c3e4361703cae5644bc7ea540eaa90a7260b"}, "downloads": -1, "filename": "markplates-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ec99fa20413154a6b5e7043ba1b87531", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5542, "upload_time": "2019-04-04T01:56:00", "upload_time_iso_8601": "2019-04-04T01:56:00.294335Z", "url": "https://files.pythonhosted.org/packages/8c/c1/23f82cd3278ceb6131bc9d9de90674bf1f8c370f0c84f7459b9cccab93ad/markplates-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c654c31a28dd74d81e5a5cce0ce71e21", "sha256": "8485899eebd3d6e1a715ae89d2bfd6c0529252138f3e7760ac89251345117cd8"}, "downloads": -1, "filename": "markplates-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c654c31a28dd74d81e5a5cce0ce71e21", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 7586, "upload_time": "2019-04-27T14:27:26", "upload_time_iso_8601": "2019-04-27T14:27:26.766875Z", "url": "https://files.pythonhosted.org/packages/15/89/82a50470f31a9cef49ff961876db8d221c6e536f9364c102a603ac766388/markplates-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6f69dd136396637c6bf80942f6f740e", "sha256": "421335357f78c86b049162e1a8e272cbbb072c1de073d93c7de7c1556bac9c3f"}, "downloads": -1, "filename": "markplates-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a6f69dd136396637c6bf80942f6f740e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6436, "upload_time": "2019-04-27T14:27:31", "upload_time_iso_8601": "2019-04-27T14:27:31.006892Z", "url": "https://files.pythonhosted.org/packages/14/aa/6ccb33e5cb507bd60eb8249db97dd9fcf4954ba0cb1cbd68ef77f84bbae1/markplates-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "cf39831aeb14130705307a54404c3a01", "sha256": "ed607df36b7a7180de2330307342426832173a9f39b9b98ca6cb9c0860a81439"}, "downloads": -1, "filename": "markplates-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cf39831aeb14130705307a54404c3a01", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 7690, "upload_time": "2019-04-28T17:25:55", "upload_time_iso_8601": "2019-04-28T17:25:55.947866Z", "url": "https://files.pythonhosted.org/packages/09/42/ff4fdfda5ae7f29ef73df6f06d72d042c124c83485fcfe8983f404e46aaa/markplates-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa25214b609de1a294c4245a2c8c812e", "sha256": "13ac284c1a59a0551cb3a5d9b6604242176e1234d53c5cc09538f85d598d943e"}, "downloads": -1, "filename": "markplates-1.1.1.tar.gz", "has_sig": false, "md5_digest": "fa25214b609de1a294c4245a2c8c812e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6542, "upload_time": "2019-04-28T17:25:59", "upload_time_iso_8601": "2019-04-28T17:25:59.450487Z", "url": "https://files.pythonhosted.org/packages/cd/03/ab812e4ced00080d741aa266b04a37fb143cf780db62132090e6d6afdf2f/markplates-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cf39831aeb14130705307a54404c3a01", "sha256": "ed607df36b7a7180de2330307342426832173a9f39b9b98ca6cb9c0860a81439"}, "downloads": -1, "filename": "markplates-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cf39831aeb14130705307a54404c3a01", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 7690, "upload_time": "2019-04-28T17:25:55", "upload_time_iso_8601": "2019-04-28T17:25:55.947866Z", "url": "https://files.pythonhosted.org/packages/09/42/ff4fdfda5ae7f29ef73df6f06d72d042c124c83485fcfe8983f404e46aaa/markplates-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa25214b609de1a294c4245a2c8c812e", "sha256": "13ac284c1a59a0551cb3a5d9b6604242176e1234d53c5cc09538f85d598d943e"}, "downloads": -1, "filename": "markplates-1.1.1.tar.gz", "has_sig": false, "md5_digest": "fa25214b609de1a294c4245a2c8c812e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6542, "upload_time": "2019-04-28T17:25:59", "upload_time_iso_8601": "2019-04-28T17:25:59.450487Z", "url": "https://files.pythonhosted.org/packages/cd/03/ab812e4ced00080d741aa266b04a37fb143cf780db62132090e6d6afdf2f/markplates-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:40 2020"}