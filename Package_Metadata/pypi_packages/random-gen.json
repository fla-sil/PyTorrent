{"info": {"author": "hp310780", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# random-gen #\n\n![Python application](https://github.com/hp310780/random-gen/workflows/Python%20application/badge.svg)\n\nA random number generator that will randomly generate numbers from a given input list and probability distribution.\nE.g.\n```python\n>> from random_gen import RandomGen\n>> \n>> r = RandomGen((1,2,3), (0.5,0.1,0.4)) # input number list, probability distribution\n>> generated_numbers = [r.next_num() for _ in range(0, 11)] \n>>\n>> import collections\n>> collections.Counter(generated_numbers) # See distribution of numbers generated\nCounter({1: 7, 2: 1, 3: 3})\n```\nAs you can see, the distribution of numbers is roughly in line with the probability distribution passed to RandomGen.\nThis implementation is taken from cpython random.choices() - https://github.com/python/cpython/blob/master/Lib/random.py#L397\nand optimised for known cumulative weights and k.\n\nThis works by using the cumulative probabilities of the random number list. Randomly generated probabilities (using `random.random`)\nare multiplied by the total sum of the probabilities. This probability is then inserted into the list of cumulative\nprobabilities using `bisect.bisect` and that insert position used to return the relative random number (from the input `random_nums`). \nAs the probability has been proportioned along the probability distribution (because it's multiplied\nby the total sum of the probabilities) it is more likely to return numbers that have a larger probability.\n\n\n## Prerequisites ##\n* Python 3.6\n\n## Running ##\n```python\n>> from random_gen import RandomGen\n>> random_nums = (1,2,3)\n>> probabilities = (0.5, 0.1, 0.4)\n>> r = RandomGen(random_nums, probabilities)\n>> r.next_num()\n1\n```\n\n## Tests ##\n* To run the tests: `pytest tests/test_random_gen.py`\n\n## How to make RandomGen more 'pythonic' ##\nWe could subclass the standard Python `Generator` class and use the dunder methods to provide `next_num` through \n`__next__` or simply provide a generator function called `random_gen` which yields each result when called.  \nI would also advise using `random.choices` directly rather than wrapped in a class if the use cases are less than ~10000\ninputs (otherwise performance suffers). This would be simpler and more readable.\n\n## Performance ##\n| # input numbers provided | # output numbers generated | speed (secs) | function calls | memory consumption for next_num (mb) |\n| :---: | :---: | :---: | :---:| :---: |\n|100                      | 100                        |    0.005    | 304              |           11                         | \n|1000                     | 1000                       |    0.002    | 3004             |           11                         | \n|10000                    | 10000                      |    0.018    | 30004            |           12.4                       | \n|100000                   | 100000                     |    0.172    | 300004           |           33                         | \n|100000                   | 1000000                    |    1.95     | 3000004          |           199                        | \n\n\n## Further Optimisations ##\n* Memory consumption needs investigation. Is there an alternative efficient method for bisecting the cumulative probability array \nwithout using a list?\n* Arrays/efficient storage for large sets of numbers if needed.\n* Investigate performance of bisect.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hp310780/random-gen", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "random-gen", "package_url": "https://pypi.org/project/random-gen/", "platform": "", "project_url": "https://pypi.org/project/random-gen/", "project_urls": {"Homepage": "https://github.com/hp310780/random-gen"}, "release_url": "https://pypi.org/project/random-gen/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Module to generate random numbers along a probability distribution", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>random-gen</h1>\n<p><img alt=\"Python application\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8696ddf8bda93481ff5324df3b4adb375a056ab3/68747470733a2f2f6769746875622e636f6d2f68703331303738302f72616e646f6d2d67656e2f776f726b666c6f77732f507974686f6e2532306170706c69636174696f6e2f62616467652e737667\"></p>\n<p>A random number generator that will randomly generate numbers from a given input list and probability distribution.\nE.g.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">random_gen</span> <span class=\"kn\">import</span> <span class=\"n\">RandomGen</span>\n<span class=\"o\">&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RandomGen</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span><span class=\"mf\">0.1</span><span class=\"p\">,</span><span class=\"mf\">0.4</span><span class=\"p\">))</span> <span class=\"c1\"># input number list, probability distribution</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">generated_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">next_num</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)]</span> \n<span class=\"o\">&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">generated_numbers</span><span class=\"p\">)</span> <span class=\"c1\"># See distribution of numbers generated</span>\n<span class=\"n\">Counter</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n</pre>\n<p>As you can see, the distribution of numbers is roughly in line with the probability distribution passed to RandomGen.\nThis implementation is taken from cpython random.choices() - <a href=\"https://github.com/python/cpython/blob/master/Lib/random.py#L397\" rel=\"nofollow\">https://github.com/python/cpython/blob/master/Lib/random.py#L397</a>\nand optimised for known cumulative weights and k.</p>\n<p>This works by using the cumulative probabilities of the random number list. Randomly generated probabilities (using <code>random.random</code>)\nare multiplied by the total sum of the probabilities. This probability is then inserted into the list of cumulative\nprobabilities using <code>bisect.bisect</code> and that insert position used to return the relative random number (from the input <code>random_nums</code>).\nAs the probability has been proportioned along the probability distribution (because it's multiplied\nby the total sum of the probabilities) it is more likely to return numbers that have a larger probability.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Python 3.6</li>\n</ul>\n<h2>Running</h2>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">random_gen</span> <span class=\"kn\">import</span> <span class=\"n\">RandomGen</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">random_nums</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">probabilities</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">RandomGen</span><span class=\"p\">(</span><span class=\"n\">random_nums</span><span class=\"p\">,</span> <span class=\"n\">probabilities</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">next_num</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span>\n</pre>\n<h2>Tests</h2>\n<ul>\n<li>To run the tests: <code>pytest tests/test_random_gen.py</code></li>\n</ul>\n<h2>How to make RandomGen more 'pythonic'</h2>\n<p>We could subclass the standard Python <code>Generator</code> class and use the dunder methods to provide <code>next_num</code> through\n<code>__next__</code> or simply provide a generator function called <code>random_gen</code> which yields each result when called.<br>\nI would also advise using <code>random.choices</code> directly rather than wrapped in a class if the use cases are less than ~10000\ninputs (otherwise performance suffers). This would be simpler and more readable.</p>\n<h2>Performance</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"># input numbers provided</th>\n<th align=\"center\"># output numbers generated</th>\n<th align=\"center\">speed (secs)</th>\n<th align=\"center\">function calls</th>\n<th align=\"center\">memory consumption for next_num (mb)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">100</td>\n<td align=\"center\">100</td>\n<td align=\"center\">0.005</td>\n<td align=\"center\">304</td>\n<td align=\"center\">11</td>\n</tr>\n<tr>\n<td align=\"center\">1000</td>\n<td align=\"center\">1000</td>\n<td align=\"center\">0.002</td>\n<td align=\"center\">3004</td>\n<td align=\"center\">11</td>\n</tr>\n<tr>\n<td align=\"center\">10000</td>\n<td align=\"center\">10000</td>\n<td align=\"center\">0.018</td>\n<td align=\"center\">30004</td>\n<td align=\"center\">12.4</td>\n</tr>\n<tr>\n<td align=\"center\">100000</td>\n<td align=\"center\">100000</td>\n<td align=\"center\">0.172</td>\n<td align=\"center\">300004</td>\n<td align=\"center\">33</td>\n</tr>\n<tr>\n<td align=\"center\">100000</td>\n<td align=\"center\">1000000</td>\n<td align=\"center\">1.95</td>\n<td align=\"center\">3000004</td>\n<td align=\"center\">199</td>\n</tr></tbody></table>\n<h2>Further Optimisations</h2>\n<ul>\n<li>Memory consumption needs investigation. Is there an alternative efficient method for bisecting the cumulative probability array\nwithout using a list?</li>\n<li>Arrays/efficient storage for large sets of numbers if needed.</li>\n<li>Investigate performance of bisect.</li>\n</ul>\n\n          </div>"}, "last_serial": 7032814, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9b5c5ba3091768a2c9d4175fcaf099bd", "sha256": "6aa60c9558312137f59fdf4d56fb3794a2bdcabb71cdfb5eca618e8b9252c989"}, "downloads": -1, "filename": "random_gen-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b5c5ba3091768a2c9d4175fcaf099bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4063, "upload_time": "2020-04-16T15:08:51", "upload_time_iso_8601": "2020-04-16T15:08:51.801460Z", "url": "https://files.pythonhosted.org/packages/e1/23/341787e7619d598617ce0688dc793a4cb9421d7a22fd64205631daf3774d/random_gen-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f917ffb018760002934d8dac6979731", "sha256": "add65bf702881bf9e9793dae11b7bf47305ee15b6e058087a69b1559aa826aaa"}, "downloads": -1, "filename": "random-gen-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5f917ffb018760002934d8dac6979731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3164, "upload_time": "2020-04-16T15:08:53", "upload_time_iso_8601": "2020-04-16T15:08:53.699276Z", "url": "https://files.pythonhosted.org/packages/3a/31/6404cd183f095791a5971c4d8905c39bcf953a78ca431a3cb979619b255e/random-gen-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9b5c5ba3091768a2c9d4175fcaf099bd", "sha256": "6aa60c9558312137f59fdf4d56fb3794a2bdcabb71cdfb5eca618e8b9252c989"}, "downloads": -1, "filename": "random_gen-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b5c5ba3091768a2c9d4175fcaf099bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4063, "upload_time": "2020-04-16T15:08:51", "upload_time_iso_8601": "2020-04-16T15:08:51.801460Z", "url": "https://files.pythonhosted.org/packages/e1/23/341787e7619d598617ce0688dc793a4cb9421d7a22fd64205631daf3774d/random_gen-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f917ffb018760002934d8dac6979731", "sha256": "add65bf702881bf9e9793dae11b7bf47305ee15b6e058087a69b1559aa826aaa"}, "downloads": -1, "filename": "random-gen-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5f917ffb018760002934d8dac6979731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3164, "upload_time": "2020-04-16T15:08:53", "upload_time_iso_8601": "2020-04-16T15:08:53.699276Z", "url": "https://files.pythonhosted.org/packages/3a/31/6404cd183f095791a5971c4d8905c39bcf953a78ca431a3cb979619b255e/random-gen-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:38 2020"}