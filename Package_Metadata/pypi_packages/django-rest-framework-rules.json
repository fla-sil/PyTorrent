{"info": {"author": "Pablo Escodebar", "author_email": "escodebar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "django-rest-framework-rules\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``django-rest-framework-rules`` aims to seamlessly integrate ``rules`` -  a tiny but powerful app providing object-level permissions - into the Django REST framework.\n\nParts of the original `django-rules documentation`_ were used to improve the reading experience of this document.\n\nTable of Contents\n=================\n\n- `Requirements`_\n- `Run tests`_\n- `How to install`_\n- `Using rest_framework_rules`_\n\n  - `PermissionRequiredMixin with the APIView and GenericAPIView`_\n  - `PermissionRequiredMixin with the ViewSet and GenericViewSet`_\n  - `permission_required decorator with APIView and ViewSet methods`_\n  - `using list_route and detail_route decorator with the PermissionRequiredMixin`_\n\n- `Changelog`_\n- `Licence`_\n\nRequirements\n============\n\nThis package was made to be used with ``Django``, ``django-rules`` and the ``django-rest-framework``.\n\nBuild status\n============\n\n.. image:: https://travis-ci.org/escodebar/django-rest-framework-rules.svg?branch=master\n\nRun tests\n=========\n\n.. code:: bash\n\n    $ git clone http://github.com/escodebar/django-rest-framework-rules.git\n    $ cd django-rest-framework-rules\n    $ python3 -m venv . && source bin/activate\n    $ pip install -r requirements_test.txt\n    $ (django-rest-framework-rules) ./runtests.sh\n\nHow to install\n==============\n\nUsing pip:\n\n.. code:: bash\n\n    $ pip install django-rest-framework-rules\n\nUsing rest_framework_rules\n==========================\n\n``rest_framework_rules`` aims to integrate ``rules`` permission system into the Django REST framework.\n\n    ``rules`` is based on the idea that you maintain a dict-like object that maps string keys used as identifiers of some kind, to callables, called *predicates*.\n    Predicates can do pretty much anything with the given arguments, but must always return True if the condition they check is true, False otherwise.\n    (Read more about rules in the `django-rules documentation - Using Rules`_.)\n\nFor a better illustration of the usage of ``rest_framework_rules`` let's assume the following setup:\nWe are proud owners of an app (climb-app!) which allows routesetters to advertise their newly created routes / boulders.\nThe climbers can use the app to review the routes / boulders and propose solutions for these.\n\nGiven such an application, one could think of the following permissions:\n\nRoutesetters may\n- create new boulders\n- retrieve boulders' details\n- update their boulders\n- delete their boulders\n- retrieve their boulders' reviews\n- retrieve their boulders' solutions\n\nClimbers may\n- retrieve boulders' details\n- create boulder reviews\n- retrieve boulders' reviews\n- update their reviews\n- delete their reviews\n- create a boulder solution\n- retrieve boulders' solutions\n- update their boulder solutions\n- delete their boulder solutions\n\nLet's define some predicates and the beforementioned permissions (this code usually resides in ``rules.py`` in your application folder).\n\n.. code:: python\n\n    from climb_app.models import Climber, RouteSetter\n    import rules\n    \n    @rules.predicate\n    def is_a_climber(user):\n        return Climber.objects.filter(user=user).exists()\n\n    @rules.predicate\n    def is_a_routesetter(user):\n        return RouteSetter.objects.filter(user=user).exists()\n\n    @rules.predicate\n    def is_related_to_routesetters_boulder(user, content=None):\n        if content is None or not hasattr(content, 'boulder'):\n            return False\n        return content.boulder.routesetter == user\n\n    @rules.predicate\n    def object_is_none(user, obj=None):\n        return obj is None\n\n    @rules.predicate\n    def is_author(user, content):\n        if not hasattr(content, 'author'):\n            return False\n        return content.author == user\n\n    rules.add_perm('climb_app.create_boulder', is_a_routesetter)\n    rules.add_perm('climb_app.retrieve_boulder', is_a_climber | is_a_routesetter & is_author)\n    rules.add_perm('climb_app.update_boulder', is_a_routesetter & is_author)\n    rules.add_perm('climb_app.delete_boulder', is_a_routesetter & is_author)\n    rules.add_perm('climb_app.retrieve_reviews', is_a_routesetter)\n    rules.add_perm('climb_app.retrieve_climbers', is_a_routesetter)\n\n    rules.add_perm('climb_app.create_climber_content', is_a_climber)\n    rules.add_perm('climb_app.retrieve_climber_content',\n                   (is_a_climber |\n                    is_a_routesetter & is_related_to_routesetters_boulder |\n                    is_a_routesetter & object_is_none))\n    rules.add_perm('climb_app.update_climber_content', is_a_climber & is_author)\n    rules.add_perm('climb_app.delete_climber_content', is_a_climber & is_author)\n\nPermissionRequiredMixin with the APIView and GenericAPIView\n-----------------------------------------------------------\n\nThe ``PermissionRequiredMixin`` allows to define a required permission name (``permission_required``).\nThis permission name (or list of such) is needed by the request's user to access the methods of the view.\n\nI could think of the following use case within climb-app!\nLet's allow climbers to *check* boulders once they were able to solve them.\n(This is basically adding a solution without data.)\n\n.. code:: python\n\n    from climb_app.models import Boulder, Solution\n    from rest_framework.response import Response\n    from rest_framework.views import APIView\n    from rest_framework_rules.mixins import PermissionRequiredMixin\n\n    class CheckmarkBoulderView(PermissionRequiredMixin, APIView):\n        permission_required = 'climb_app.create_climber_content'\n\n        def get(self, request, *args, **kwargs):\n            solution, created = Solution.objects.get_or_create(\n                user=request.user,\n                boulder=Boulder.objects.get(pk=kwargs.get('boulder_pk')),\n            )\n            if created:\n                return Response(status=204)\n            return Response(status=304)\n\nWhen used with a ``GenericAPIView``, the ``PermissionRequiredMixin`` allows to define an ``object_permission_required`` (defaults to ``permission_required`` if not set).\nThis permission (or list of permissions) is required by the request's user to call the ``get_object`` method of the view.\n\nIn the context of climb-app! this could be used with the views for retrieving and updating boulder reviews:\n\n.. code:: python\n\n    from climb_app.models import Review\n    from climb_app.serializer import ReviewSerializer\n    from rest_framework.generics import GenericAPIView\n    from rest_framework.response import Response\n    from rest_framework_rules.mixins import PermissionRequiredMixin\n\n    class RetrieveReviewView(PermissionRequiredMixin, GenericAPIView):\n        permission_required = 'climb_app.retrieve_climber_content'\n        queryset = Review.objects.all()\n\n        def get(self, request, *args, **kwargs):\n            review = self.get_object()\n            serializer = ReviewSerializer(review)\n            return Response(data=serializer.data)\n\n    class CreateOrUpdateReviewView(PermissionRequiredMixin, GenericAPIView):\n        object_permission_required = 'climb_app.update_climber_content'\n        permission_required = 'climb_app.create_climber_content'\n        queryset = Review.objects.all()\n\n        def post(self, request, *args, **kwargs):\n            solution, created = Review.objects.get_or_create(\n                user=request.user,\n                boulder=Boulder.objects.get(pk=kwargs.get('boulder_pk')),\n            )\n            if created:\n                return Response(status=204)\n            return Response(status=304)\n\n        def put(self, request, *args, **kwargs):\n            review = self.get_object()\n            # update review...\n            return Response(status=204)\n\nPermissionRequiredMixin with the ViewSet and GenericViewSet\n-----------------------------------------------------------\n\nThe ``PermissionRequiredMixin`` can be used as well with ``ViewSet`` and ``GenericViewSet``.\nThe user need to have the ``permission_required`` to call actions of a viewset and ``object_permission_required`` (which defaults to ``permission_required`` if not set) to call ``get_object``.\n\nLet's use this in climb app! to allow routesetters to create, delete boulders and list the reviews of their boulders.\n\n.. code:: python\n\n    from climb_app.models import Boulder, Review\n    from climb_app.serializers import BoulderSerializer, ReviewSerializer\n    from rest_framework.response import Response\n    from rest_framework.viewsets import GenericViewSet, ViewSet\n    from rest_framework_rules.mixins import PermissionRequiredMixin\n\n    class ReviewViewSet(PermissionRequiredMixin, ViewSet):\n        permission_required = 'climb_app.retrieve_reviews'\n\n        def list(self, request):\n            queryset = Review.objects.filter(boulder__author=request.user)\n            serializer = ReviewSerializer(queryset, many=True)\n            return Response(serializer.data)\n\n    class BoulderViewSet(PermissionRequiredMixin, GenericViewSet):\n        object_permission_required = 'climb_app.delete_boulder'\n        permission_required = 'climb_app.create_boulder'\n\n        def create(self, request, *args, **kwargs):\n            # create boulders...\n            return Response(status=204)\n\n        def destroy(self, request, *args, **kwargs):\n            instance = self.get_object()\n            instance.delete()\n            return Response(status=204)\n\npermission_required decorator with APIView and ViewSet methods\n--------------------------------------------------------------\n\nPermissions can be set using the ``permission_required`` decorator.\nThe required permission(s) is passed as first argument to the decorator.\nThe decorator also has an optional ``fn`` argument, which is either the context object itself or a callable returning the context object.\nThe arguments passed to the context object callable are the same as the ones of the decorated method.\n\n.. code:: python\n\n    from climb_app.models import Boulder, Solution\n    from rest_framework.response import Response\n    from rest_framework.views import APIView\n    from rest_framework_rules.decorators import permission_required\n\n    class CheckmarkBoulderView(APIView):\n\n        @permission_required('climb_app.create_climber_content')\n        def get(self, request, *args, **kwargs):\n            solution, created = Solution.objects.get_or_create(\n                user=request.user,\n                boulder=Boulder.objects.get(pk=kwargs.get('boulder_pk')),\n            )\n            if created:\n                return Response(status=204)\n            return Response(status=304)\n\n\n    class BoulderViewSet(ViewSet):\n\n        @permission_required('climb_app.access_method')\n        def create(self, request):\n            # create boulder...\n            return Response(status=204)\n\n        @permission_required(\n            'someapp.access_method',\n            fn=lambda request, pk: Boulder.objects.get(pk=pk))\n        def destroy(self, request, pk):\n            boulder = Boulder.objects.get(pk=pk)\n            boulder.delete()\n            return Response(status=204)\n\n\nusing list_route and detail_route decorator with the PermissionRequiredMixin\n----------------------------------------------------------------------------\n\n``rest_framework`` provides the decorators ``list_route`` and ``detail_route`` to define custom routes in viewsets.\nThese can be used as well with ``django-rest-framework-rules`` under the condition, that the ``ViewSet`` is mixed with the ``PermissionRequiredMixin``.\n\nLet's add some custom routes to the ``BoulderViewSet`` defined in climb-app! to allow routesetter to retrieve all reviews of a boulder and list all climbers which have solved the routesetter's boulders.\n\n.. code:: python\n\n    from rest_framework.decorators import list_route, detail_route\n    from rest_framework.response import Response\n    from rest_framework.viewsets import ViewSet\n    from rest_framework_rules.mixins import PermissionRequiredMixin\n\n    class BoulderViewSet(PermissionRequiredMixin, GenericViewSet):\n        object_permission_required = 'climb_app.delete_boulder'\n        permission_required = 'climb_app.create_boulder'\n\n        def create(self, request, *args, **kwargs):\n            # create boulders...\n            return Response(status=204)\n\n        def destroy(self, request, *args, **kwargs):\n            instance = self.get_object()\n            instance.delete()\n            return Response(status=204)\n\n        @detail_route(methods=['get'], permission_required='climb_app.retrieve_reviews')\n        def reviews(self, request, pk):\n            boulder = self.get_object()\n            queryset = (Review.objects\n                        .filter(boulder=boulder)\n                        .order_by('created'))\n            serializer = ReviewSerializer(queryset=queryset, many=True)\n            return Response(serializer.data)\n\n        @list_route(methods=['get'], permission_required='climb_app.retrieve_climbers')\n        def climbers(self, request):\n            queryset = Climber.objects.filter(solution__boulder__author=request.user).distinct()\n            serializer = ClimberSerializer(queryset=queryset, many=True)\n            return Response(serializer.data)\n\nChangelog\n=========\n\n``v1.0.0`` - 2018/05/15\n    - Dropped python 2.7 support.\n\n``v0.1.1`` - 2017/11/17\n    - Improve README and package setup.\n\n``v0.1.0`` - 2017/11/13\n    - Implemented PermissionRequiredMdddixin, permission_required decorator and the django rest framework integration tests.\n\n``v0.0.1`` - 2017/10/30\n    - Forked from https://github.com/dfunckt/django-rules\n\n\nLicence\n=======\n\n``django-rest-framework-rules`` is distributed under the MIT licence.\n\nCopyright (c) 2017 Pablo Escodebar\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n.. _django-rules documentation: https://github.com/dfunckt/django-rules/blob/7688fdac68e7de6832f28f7b96ebf1f98f32f3c8/README.rst\n.. _django-rules documentation - Using Rules: https://github.com/dfunckt/django-rules/blob/7688fdac68e7de6832f28f7b96ebf1f98f32f3c8/README.rst#using-rules\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/escodebar/django-rest-framework-rules/archive/v1.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/escodebar/django-rest-framework-rules", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-rest-framework-rules", "package_url": "https://pypi.org/project/django-rest-framework-rules/", "platform": "", "project_url": "https://pypi.org/project/django-rest-framework-rules/", "project_urls": {"Download": "https://github.com/escodebar/django-rest-framework-rules/archive/v1.0.0.tar.gz", "Homepage": "https://github.com/escodebar/django-rest-framework-rules"}, "release_url": "https://pypi.org/project/django-rest-framework-rules/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Django REST framework integration for django-rules", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">django-rest-framework-rules</span></tt> aims to seamlessly integrate <tt>rules</tt> -  a tiny but powerful app providing object-level permissions - into the Django REST framework.</p>\n<p>Parts of the original <a href=\"https://github.com/dfunckt/django-rules/blob/7688fdac68e7de6832f28f7b96ebf1f98f32f3c8/README.rst\" rel=\"nofollow\">django-rules documentation</a> were used to improve the reading experience of this document.</p>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#run-tests\" rel=\"nofollow\">Run tests</a></li>\n<li><a href=\"#how-to-install\" rel=\"nofollow\">How to install</a></li>\n<li><a href=\"#using-rest-framework-rules\" rel=\"nofollow\">Using rest_framework_rules</a><ul>\n<li><a href=\"#permissionrequiredmixin-with-the-apiview-and-genericapiview\" rel=\"nofollow\">PermissionRequiredMixin with the APIView and GenericAPIView</a></li>\n<li><a href=\"#permissionrequiredmixin-with-the-viewset-and-genericviewset\" rel=\"nofollow\">PermissionRequiredMixin with the ViewSet and GenericViewSet</a></li>\n<li><a href=\"#permission-required-decorator-with-apiview-and-viewset-methods\" rel=\"nofollow\">permission_required decorator with APIView and ViewSet methods</a></li>\n<li><a href=\"#using-list-route-and-detail-route-decorator-with-the-permissionrequiredmixin\" rel=\"nofollow\">using list_route and detail_route decorator with the PermissionRequiredMixin</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#licence\" rel=\"nofollow\">Licence</a></li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>This package was made to be used with <tt>Django</tt>, <tt><span class=\"pre\">django-rules</span></tt> and the <tt><span class=\"pre\">django-rest-framework</span></tt>.</p>\n</div>\n<div id=\"build-status\">\n<h2>Build status</h2>\n<img alt=\"https://travis-ci.org/escodebar/django-rest-framework-rules.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0330bb664a37f152bede083ac31f594631f35094/68747470733a2f2f7472617669732d63692e6f72672f6573636f64656261722f646a616e676f2d726573742d6672616d65776f726b2d72756c65732e7376673f6272616e63683d6d6173746572\">\n</div>\n<div id=\"run-tests\">\n<h2>Run tests</h2>\n<pre>$ git clone http://github.com/escodebar/django-rest-framework-rules.git\n$ <span class=\"nb\">cd</span> django-rest-framework-rules\n$ python3 -m venv . <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">source</span> bin/activate\n$ pip install -r requirements_test.txt\n$ <span class=\"o\">(</span>django-rest-framework-rules<span class=\"o\">)</span> ./runtests.sh\n</pre>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>Using pip:</p>\n<pre>$ pip install django-rest-framework-rules\n</pre>\n</div>\n<div id=\"using-rest-framework-rules\">\n<h2>Using rest_framework_rules</h2>\n<p><tt>rest_framework_rules</tt> aims to integrate <tt>rules</tt> permission system into the Django REST framework.</p>\n<blockquote>\n<tt>rules</tt> is based on the idea that you maintain a dict-like object that maps string keys used as identifiers of some kind, to callables, called <em>predicates</em>.\nPredicates can do pretty much anything with the given arguments, but must always return True if the condition they check is true, False otherwise.\n(Read more about rules in the <a href=\"https://github.com/dfunckt/django-rules/blob/7688fdac68e7de6832f28f7b96ebf1f98f32f3c8/README.rst#using-rules\" rel=\"nofollow\">django-rules documentation - Using Rules</a>.)</blockquote>\n<p>For a better illustration of the usage of <tt>rest_framework_rules</tt> let\u2019s assume the following setup:\nWe are proud owners of an app (climb-app!) which allows routesetters to advertise their newly created routes / boulders.\nThe climbers can use the app to review the routes / boulders and propose solutions for these.</p>\n<p>Given such an application, one could think of the following permissions:</p>\n<p>Routesetters may\n- create new boulders\n- retrieve boulders\u2019 details\n- update their boulders\n- delete their boulders\n- retrieve their boulders\u2019 reviews\n- retrieve their boulders\u2019 solutions</p>\n<p>Climbers may\n- retrieve boulders\u2019 details\n- create boulder reviews\n- retrieve boulders\u2019 reviews\n- update their reviews\n- delete their reviews\n- create a boulder solution\n- retrieve boulders\u2019 solutions\n- update their boulder solutions\n- delete their boulder solutions</p>\n<p>Let\u2019s define some predicates and the beforementioned permissions (this code usually resides in <tt>rules.py</tt> in your application folder).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climb_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Climber</span><span class=\"p\">,</span> <span class=\"n\">RouteSetter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rules</span>\n\n<span class=\"nd\">@rules</span><span class=\"o\">.</span><span class=\"n\">predicate</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_a_climber</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Climber</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@rules</span><span class=\"o\">.</span><span class=\"n\">predicate</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_a_routesetter</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">RouteSetter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@rules</span><span class=\"o\">.</span><span class=\"n\">predicate</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_related_to_routesetters_boulder</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">content</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"s1\">'boulder'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">boulder</span><span class=\"o\">.</span><span class=\"n\">routesetter</span> <span class=\"o\">==</span> <span class=\"n\">user</span>\n\n<span class=\"nd\">@rules</span><span class=\"o\">.</span><span class=\"n\">predicate</span>\n<span class=\"k\">def</span> <span class=\"nf\">object_is_none</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n<span class=\"nd\">@rules</span><span class=\"o\">.</span><span class=\"n\">predicate</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_author</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">==</span> <span class=\"n\">user</span>\n\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.create_boulder'</span><span class=\"p\">,</span> <span class=\"n\">is_a_routesetter</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.retrieve_boulder'</span><span class=\"p\">,</span> <span class=\"n\">is_a_climber</span> <span class=\"o\">|</span> <span class=\"n\">is_a_routesetter</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_author</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.update_boulder'</span><span class=\"p\">,</span> <span class=\"n\">is_a_routesetter</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_author</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.delete_boulder'</span><span class=\"p\">,</span> <span class=\"n\">is_a_routesetter</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_author</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.retrieve_reviews'</span><span class=\"p\">,</span> <span class=\"n\">is_a_routesetter</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.retrieve_climbers'</span><span class=\"p\">,</span> <span class=\"n\">is_a_routesetter</span><span class=\"p\">)</span>\n\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.create_climber_content'</span><span class=\"p\">,</span> <span class=\"n\">is_a_climber</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.retrieve_climber_content'</span><span class=\"p\">,</span>\n               <span class=\"p\">(</span><span class=\"n\">is_a_climber</span> <span class=\"o\">|</span>\n                <span class=\"n\">is_a_routesetter</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_related_to_routesetters_boulder</span> <span class=\"o\">|</span>\n                <span class=\"n\">is_a_routesetter</span> <span class=\"o\">&amp;</span> <span class=\"n\">object_is_none</span><span class=\"p\">))</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.update_climber_content'</span><span class=\"p\">,</span> <span class=\"n\">is_a_climber</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_author</span><span class=\"p\">)</span>\n<span class=\"n\">rules</span><span class=\"o\">.</span><span class=\"n\">add_perm</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.delete_climber_content'</span><span class=\"p\">,</span> <span class=\"n\">is_a_climber</span> <span class=\"o\">&amp;</span> <span class=\"n\">is_author</span><span class=\"p\">)</span>\n</pre>\n<div id=\"permissionrequiredmixin-with-the-apiview-and-genericapiview\">\n<h3>PermissionRequiredMixin with the APIView and GenericAPIView</h3>\n<p>The <tt>PermissionRequiredMixin</tt> allows to define a required permission name (<tt>permission_required</tt>).\nThis permission name (or list of such) is needed by the request\u2019s user to access the methods of the view.</p>\n<p>I could think of the following use case within climb-app!\nLet\u2019s allow climbers to <em>check</em> boulders once they were able to solve them.\n(This is basically adding a solution without data.)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climb_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Boulder</span><span class=\"p\">,</span> <span class=\"n\">Solution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_rules.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionRequiredMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CheckmarkBoulderView</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.create_climber_content'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Solution</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n            <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">boulder</span><span class=\"o\">=</span><span class=\"n\">Boulder</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'boulder_pk'</span><span class=\"p\">)),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">created</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">304</span><span class=\"p\">)</span>\n</pre>\n<p>When used with a <tt>GenericAPIView</tt>, the <tt>PermissionRequiredMixin</tt> allows to define an <tt>object_permission_required</tt> (defaults to <tt>permission_required</tt> if not set).\nThis permission (or list of permissions) is required by the request\u2019s user to call the <tt>get_object</tt> method of the view.</p>\n<p>In the context of climb-app! this could be used with the views for retrieving and updating boulder reviews:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climb_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Review</span>\n<span class=\"kn\">from</span> <span class=\"nn\">climb_app.serializer</span> <span class=\"kn\">import</span> <span class=\"n\">ReviewSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.generics</span> <span class=\"kn\">import</span> <span class=\"n\">GenericAPIView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_rules.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionRequiredMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RetrieveReviewView</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.retrieve_climber_content'</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Review</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">review</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">ReviewSerializer</span><span class=\"p\">(</span><span class=\"n\">review</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CreateOrUpdateReviewView</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericAPIView</span><span class=\"p\">):</span>\n    <span class=\"n\">object_permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.update_climber_content'</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.create_climber_content'</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Review</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Review</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n            <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">boulder</span><span class=\"o\">=</span><span class=\"n\">Boulder</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'boulder_pk'</span><span class=\"p\">)),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">created</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">304</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">review</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"c1\"># update review...</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"permissionrequiredmixin-with-the-viewset-and-genericviewset\">\n<h3>PermissionRequiredMixin with the ViewSet and GenericViewSet</h3>\n<p>The <tt>PermissionRequiredMixin</tt> can be used as well with <tt>ViewSet</tt> and <tt>GenericViewSet</tt>.\nThe user need to have the <tt>permission_required</tt> to call actions of a viewset and <tt>object_permission_required</tt> (which defaults to <tt>permission_required</tt> if not set) to call <tt>get_object</tt>.</p>\n<p>Let\u2019s use this in climb app! to allow routesetters to create, delete boulders and list the reviews of their boulders.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climb_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Boulder</span><span class=\"p\">,</span> <span class=\"n\">Review</span>\n<span class=\"kn\">from</span> <span class=\"nn\">climb_app.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">BoulderSerializer</span><span class=\"p\">,</span> <span class=\"n\">ReviewSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">GenericViewSet</span><span class=\"p\">,</span> <span class=\"n\">ViewSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_rules.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionRequiredMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ReviewViewSet</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">ViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.retrieve_reviews'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Review</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">boulder__author</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">ReviewSerializer</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BoulderViewSet</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">object_permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.delete_boulder'</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.create_boulder'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create boulders...</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">destroy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"permission-required-decorator-with-apiview-and-viewset-methods\">\n<h3>permission_required decorator with APIView and ViewSet methods</h3>\n<p>Permissions can be set using the <tt>permission_required</tt> decorator.\nThe required permission(s) is passed as first argument to the decorator.\nThe decorator also has an optional <tt>fn</tt> argument, which is either the context object itself or a callable returning the context object.\nThe arguments passed to the context object callable are the same as the ones of the decorated method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climb_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Boulder</span><span class=\"p\">,</span> <span class=\"n\">Solution</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.views</span> <span class=\"kn\">import</span> <span class=\"n\">APIView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_rules.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">permission_required</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CheckmarkBoulderView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@permission_required</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.create_climber_content'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">solution</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Solution</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n            <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">boulder</span><span class=\"o\">=</span><span class=\"n\">Boulder</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'boulder_pk'</span><span class=\"p\">)),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">created</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">304</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BoulderViewSet</span><span class=\"p\">(</span><span class=\"n\">ViewSet</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@permission_required</span><span class=\"p\">(</span><span class=\"s1\">'climb_app.access_method'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create boulder...</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@permission_required</span><span class=\"p\">(</span>\n        <span class=\"s1\">'someapp.access_method'</span><span class=\"p\">,</span>\n        <span class=\"n\">fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"n\">Boulder</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">destroy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">boulder</span> <span class=\"o\">=</span> <span class=\"n\">Boulder</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"n\">boulder</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-list-route-and-detail-route-decorator-with-the-permissionrequiredmixin\">\n<h3>using list_route and detail_route decorator with the PermissionRequiredMixin</h3>\n<p><tt>rest_framework</tt> provides the decorators <tt>list_route</tt> and <tt>detail_route</tt> to define custom routes in viewsets.\nThese can be used as well with <tt><span class=\"pre\">django-rest-framework-rules</span></tt> under the condition, that the <tt>ViewSet</tt> is mixed with the <tt>PermissionRequiredMixin</tt>.</p>\n<p>Let\u2019s add some custom routes to the <tt>BoulderViewSet</tt> defined in climb-app! to allow routesetter to retrieve all reviews of a boulder and list all climbers which have solved the routesetter\u2019s boulders.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rest_framework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">list_route</span><span class=\"p\">,</span> <span class=\"n\">detail_route</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.response</span> <span class=\"kn\">import</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework.viewsets</span> <span class=\"kn\">import</span> <span class=\"n\">ViewSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework_rules.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionRequiredMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BoulderViewSet</span><span class=\"p\">(</span><span class=\"n\">PermissionRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">object_permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.delete_boulder'</span>\n    <span class=\"n\">permission_required</span> <span class=\"o\">=</span> <span class=\"s1\">'climb_app.create_boulder'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># create boulders...</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">destroy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">204</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@detail_route</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'get'</span><span class=\"p\">],</span> <span class=\"n\">permission_required</span><span class=\"o\">=</span><span class=\"s1\">'climb_app.retrieve_reviews'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reviews</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">boulder</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Review</span><span class=\"o\">.</span><span class=\"n\">objects</span>\n                    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">boulder</span><span class=\"o\">=</span><span class=\"n\">boulder</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'created'</span><span class=\"p\">))</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">ReviewSerializer</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@list_route</span><span class=\"p\">(</span><span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'get'</span><span class=\"p\">],</span> <span class=\"n\">permission_required</span><span class=\"o\">=</span><span class=\"s1\">'climb_app.retrieve_climbers'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">climbers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Climber</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">solution__boulder__author</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">ClimberSerializer</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<dl>\n<dt><tt>v1.0.0</tt> - 2018/05/15</dt>\n<dd><ul>\n<li>Dropped python 2.7 support.</li>\n</ul>\n</dd>\n<dt><tt>v0.1.1</tt> - 2017/11/17</dt>\n<dd><ul>\n<li>Improve README and package setup.</li>\n</ul>\n</dd>\n<dt><tt>v0.1.0</tt> - 2017/11/13</dt>\n<dd><ul>\n<li>Implemented PermissionRequiredMdddixin, permission_required decorator and the django rest framework integration tests.</li>\n</ul>\n</dd>\n<dt><tt>v0.0.1</tt> - 2017/10/30</dt>\n<dd><ul>\n<li>Forked from <a href=\"https://github.com/dfunckt/django-rules\" rel=\"nofollow\">https://github.com/dfunckt/django-rules</a></li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p><tt><span class=\"pre\">django-rest-framework-rules</span></tt> is distributed under the MIT licence.</p>\n<p>Copyright (c) 2017 Pablo Escodebar</p>\n<p>Permission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \u201cSoftware\u201d), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:</p>\n<p>The above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 3872451, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f82eb37ad725c94bec18912a91cb057a", "sha256": "4acbc2fdb4a5e563f7c074244b55e176d096a6d6da85b43b4d730c23428fe73f"}, "downloads": -1, "filename": "django-rest-framework-rules-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f82eb37ad725c94bec18912a91cb057a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, >=3.5.*, <4", "size": 15935, "upload_time": "2017-11-23T20:37:42", "upload_time_iso_8601": "2017-11-23T20:37:42.533085Z", "url": "https://files.pythonhosted.org/packages/1c/05/d73a8ef12684645661461687469e3a600107733ea519feeee51d3c4e821c/django-rest-framework-rules-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "727a984cdec9107df56436f1cc975289", "sha256": "c592306f5125bb0fdf990bc694d0f39f6f6a447de5636b4567d59987372eb2f7"}, "downloads": -1, "filename": "django_rest_framework_rules-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "727a984cdec9107df56436f1cc975289", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, >=3.5.*, <4", "size": 11419, "upload_time": "2017-11-23T20:37:40", "upload_time_iso_8601": "2017-11-23T20:37:40.069158Z", "url": "https://files.pythonhosted.org/packages/97/67/18c121512f74d65fa386ca56a844df4b72c091565c96413b83553def5b1d/django_rest_framework_rules-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81f5be95abf809bd9e38b60116acf0e9", "sha256": "c20923f0ccb9f083b81e1a8dbf078fdfbd01ee8b572a21b22d12d07cef07a885"}, "downloads": -1, "filename": "django-rest-framework-rules-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81f5be95abf809bd9e38b60116acf0e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, >=3.5.*, <4", "size": 15940, "upload_time": "2017-11-23T20:37:44", "upload_time_iso_8601": "2017-11-23T20:37:44.543809Z", "url": "https://files.pythonhosted.org/packages/cc/41/8ab136e5d38197de8bb8ccca2221c5b98b7c3fc142e083a54ac4590c32c4/django-rest-framework-rules-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "8364d46fa1fe48c7f137ddb6673d53a5", "sha256": "a789bd15fcdf9f15ac8c9f999102c148a8c91f7feeb6bc9aec537ea675bcd36a"}, "downloads": -1, "filename": "django-rest-framework-rules-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8364d46fa1fe48c7f137ddb6673d53a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16061, "upload_time": "2018-05-17T14:00:30", "upload_time_iso_8601": "2018-05-17T14:00:30.609016Z", "url": "https://files.pythonhosted.org/packages/82/7c/f700cd29e46cd04f9ff9017f29bbf5e865b1c5f3f5464274d5d2ef3aa759/django-rest-framework-rules-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8364d46fa1fe48c7f137ddb6673d53a5", "sha256": "a789bd15fcdf9f15ac8c9f999102c148a8c91f7feeb6bc9aec537ea675bcd36a"}, "downloads": -1, "filename": "django-rest-framework-rules-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8364d46fa1fe48c7f137ddb6673d53a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16061, "upload_time": "2018-05-17T14:00:30", "upload_time_iso_8601": "2018-05-17T14:00:30.609016Z", "url": "https://files.pythonhosted.org/packages/82/7c/f700cd29e46cd04f9ff9017f29bbf5e865b1c5f3f5464274d5d2ef3aa759/django-rest-framework-rules-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:04 2020"}