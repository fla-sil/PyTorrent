{"info": {"author": "Wilhelm Fritsche", "author_email": "wilhelm.fritsche@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Community Learning\n> Ziel ist es mit diesem kleine PoC aufzuzeigen wie mit Hilfe von Federated Learning bessere Prognose erzielt werden k\u00f6nnen. \n\n\nHier ein Auszug von der Kaggle Website\n> In this competition, you are provided with 1.5 years of customers behavior data from Santander bank to predict what new products customers will purchase. The data starts at 2015-01-28 and has monthly records of products a customer has, such as \"credit card\", \"savings account\", etc. You will predict what additional products a customer will get in the last month, 2016-06-28, in addition to what they already have at 2016-05-28. These products are the columns named: ind_(xyz)_ult1, which are the columns #25 - #48 in the training data. You will predict what a customer will buy in addition to what they already had at 2016-05-28. \n\n## Installation\n\n## Vorgehen PoC\n\nUm den Usecase m\u00f6glichst realistisch zu gestalten, gehen wir wie folgt vor:\n\n\n**Variante 1:**\n1. **Daten bereitstellen und bereinigen**: Hierzu werden wir das Datenset so aufteilen, dass je ein Datenset pro Bank entsteht. Dazu werden wir ein geografisches Attribut hernehmen. Danach werden die Daten nochmals im Verh\u00e4ltnis 80/20 aufgeteilt in ein Train- und Testset (`data_bank1_train`, `data_bank1_test`, `data_bank2_train`, `data_bank2_test`). \n2. **Baseline Modelle trainiern:** Pro Bank werden wir einen GradientBoost Algorithmus trainieren mit deren Default-Einstellungen. Dadurch erhaltne wir 2 Modelle (`model_bank1` und `model_bank2`)\n3. **Ensemble Predictions:** In diesem Schritt werden wir die Resultate von model_bank1 und model_bank2 kombinieren. \n - `model_bank1` und `model_bank2` wird mit den `data_bank1_test` gef\u00fcttert und eine gemeinsame Prediction erstellt.\n - `model_bank1` und `model_bank2` wird mit den `data_bank2_test` gef\u00fcttert und eine gemeinsame Prediction erstellt.\n4. **Auswertung:**: Um festzustellen ob das Ensemble eine Mehrwert bringt werden folgende Resultate verglichen.\n - `model_bank1(data_bank1_test)` vs `ensemble(model_bank1(data_bank1_test), model_bank2(data_bank1_test)`\n - `model_bank2(data_bank2_test)` vs `ensemble(mdoel_bank2(data_bank1_test), model_bank2(data_bank2_test)`\n\n## How to use\n\nFill me in please! Don't forget code examples:\n\n```\n1+1\n```\n\n\n\n\n    2\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WFR/community_learning", "keywords": "federated learning", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "community-learning", "package_url": "https://pypi.org/project/community-learning/", "platform": "", "project_url": "https://pypi.org/project/community-learning/", "project_urls": {"Homepage": "https://github.com/WFR/community_learning"}, "release_url": "https://pypi.org/project/community-learning/0.0.2/", "requires_dist": ["jupyter", "jupyter-contrib-nbextensions", "gdown", "pandas"], "requires_python": ">=3.6", "summary": "A poc for learning in a community.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Community Learning</h1>\n<blockquote>\n<p>Ziel ist es mit diesem kleine PoC aufzuzeigen wie mit Hilfe von Federated Learning bessere Prognose erzielt werden k\u00f6nnen.</p>\n</blockquote>\n<p>Hier ein Auszug von der Kaggle Website</p>\n<blockquote>\n<p>In this competition, you are provided with 1.5 years of customers behavior data from Santander bank to predict what new products customers will purchase. The data starts at 2015-01-28 and has monthly records of products a customer has, such as \"credit card\", \"savings account\", etc. You will predict what additional products a customer will get in the last month, 2016-06-28, in addition to what they already have at 2016-05-28. These products are the columns named: ind_(xyz)_ult1, which are the columns #25 - #48 in the training data. You will predict what a customer will buy in addition to what they already had at 2016-05-28.</p>\n</blockquote>\n<h2>Installation</h2>\n<h2>Vorgehen PoC</h2>\n<p>Um den Usecase m\u00f6glichst realistisch zu gestalten, gehen wir wie folgt vor:</p>\n<p><strong>Variante 1:</strong></p>\n<ol>\n<li><strong>Daten bereitstellen und bereinigen</strong>: Hierzu werden wir das Datenset so aufteilen, dass je ein Datenset pro Bank entsteht. Dazu werden wir ein geografisches Attribut hernehmen. Danach werden die Daten nochmals im Verh\u00e4ltnis 80/20 aufgeteilt in ein Train- und Testset (<code>data_bank1_train</code>, <code>data_bank1_test</code>, <code>data_bank2_train</code>, <code>data_bank2_test</code>).</li>\n<li><strong>Baseline Modelle trainiern:</strong> Pro Bank werden wir einen GradientBoost Algorithmus trainieren mit deren Default-Einstellungen. Dadurch erhaltne wir 2 Modelle (<code>model_bank1</code> und <code>model_bank2</code>)</li>\n<li><strong>Ensemble Predictions:</strong> In diesem Schritt werden wir die Resultate von model_bank1 und model_bank2 kombinieren.</li>\n</ol>\n<ul>\n<li><code>model_bank1</code> und <code>model_bank2</code> wird mit den <code>data_bank1_test</code> gef\u00fcttert und eine gemeinsame Prediction erstellt.</li>\n<li><code>model_bank1</code> und <code>model_bank2</code> wird mit den <code>data_bank2_test</code> gef\u00fcttert und eine gemeinsame Prediction erstellt.</li>\n</ul>\n<ol>\n<li><strong>Auswertung:</strong>: Um festzustellen ob das Ensemble eine Mehrwert bringt werden folgende Resultate verglichen.</li>\n</ol>\n<ul>\n<li><code>model_bank1(data_bank1_test)</code> vs <code>ensemble(model_bank1(data_bank1_test), model_bank2(data_bank1_test)</code></li>\n<li><code>model_bank2(data_bank2_test)</code> vs <code>ensemble(mdoel_bank2(data_bank1_test), model_bank2(data_bank2_test)</code></li>\n</ul>\n<h2>How to use</h2>\n<p>Fill me in please! Don't forget code examples:</p>\n<pre><code>1+1\n</code></pre>\n<pre><code>2\n</code></pre>\n\n          </div>"}, "last_serial": 6833494, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5dc0ddadc3992cfa515ec231542eac99", "sha256": "b1f974ddfdbeeeb0aa586238c6bdc8ad28311ff6eace58eceb3c6acda4370370"}, "downloads": -1, "filename": "community_learning-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5dc0ddadc3992cfa515ec231542eac99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7701, "upload_time": "2020-03-18T05:39:46", "upload_time_iso_8601": "2020-03-18T05:39:46.488072Z", "url": "https://files.pythonhosted.org/packages/fc/f5/a232e809c710e2b37523fff8e19e819195abe143916235ff1393879032dd/community_learning-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01da56695a9784069daba526bfab4b65", "sha256": "b479b0e3ce876dbd80c11cee9037ff080b0da7dc02a46d9531b666086b0d6c73"}, "downloads": -1, "filename": "community_learning-0.0.1.tar.gz", "has_sig": false, "md5_digest": "01da56695a9784069daba526bfab4b65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9070, "upload_time": "2020-03-18T05:39:48", "upload_time_iso_8601": "2020-03-18T05:39:48.869972Z", "url": "https://files.pythonhosted.org/packages/16/cb/c09edbfe7d675af7fe7198f07a2cc2fbe0d54a5d899d0be3b09d113f536a/community_learning-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "67c252401fe95696f23c283be0448914", "sha256": "df7536616f35cb12b21957b7410991f151be5547d30ee9fe9827ca62bdbb2495"}, "downloads": -1, "filename": "community_learning-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "67c252401fe95696f23c283be0448914", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9503, "upload_time": "2020-03-18T05:45:58", "upload_time_iso_8601": "2020-03-18T05:45:58.694887Z", "url": "https://files.pythonhosted.org/packages/46/83/8448202da5ea6b9584b551990154d25f887607f09239529cfcb297c2dff5/community_learning-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4c9428009a48762c1805dfbb483dae4", "sha256": "4aabe91d1ec4c9e9dc0f36f95a8e39985151fa0f6329e86d3942500d98b09e6d"}, "downloads": -1, "filename": "community_learning-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b4c9428009a48762c1805dfbb483dae4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10384, "upload_time": "2020-03-18T05:45:59", "upload_time_iso_8601": "2020-03-18T05:45:59.850797Z", "url": "https://files.pythonhosted.org/packages/75/67/aa1d70b58e34d3b9aa8ebcaf76464d4831361a570acb26b24542eef6d069/community_learning-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67c252401fe95696f23c283be0448914", "sha256": "df7536616f35cb12b21957b7410991f151be5547d30ee9fe9827ca62bdbb2495"}, "downloads": -1, "filename": "community_learning-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "67c252401fe95696f23c283be0448914", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9503, "upload_time": "2020-03-18T05:45:58", "upload_time_iso_8601": "2020-03-18T05:45:58.694887Z", "url": "https://files.pythonhosted.org/packages/46/83/8448202da5ea6b9584b551990154d25f887607f09239529cfcb297c2dff5/community_learning-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4c9428009a48762c1805dfbb483dae4", "sha256": "4aabe91d1ec4c9e9dc0f36f95a8e39985151fa0f6329e86d3942500d98b09e6d"}, "downloads": -1, "filename": "community_learning-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b4c9428009a48762c1805dfbb483dae4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10384, "upload_time": "2020-03-18T05:45:59", "upload_time_iso_8601": "2020-03-18T05:45:59.850797Z", "url": "https://files.pythonhosted.org/packages/75/67/aa1d70b58e34d3b9aa8ebcaf76464d4831361a570acb26b24542eef6d069/community_learning-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:19 2020"}