{"info": {"author": "BennyPopp", "author_email": "author@example.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# RandomShapeletClassifier\n\nWhat? \nClassifying timeseries or any other ordered data using shapelets\nA shapelet is a subsequence of a series (i.e. a sample from the complete series)\n\nHow? \nThe trick is to identify shapelets that are representative of a class of timeseries. \nIn the old days, people used to\n1) calculate each possible shapelet of a timeseries\n2) check for each shapelet if it is representative of the timeseries (by checking how often a somewhat similar pattern occurs in the same series) \n3) check if the most representative shapelets of a series can also be found in other timeseries. \n4) If so: these series probably belong to the same class (the degree depends on how often a similar shapelet can be found in a different timeseries or how similar on average a set of shapelets is to shapelets found in other series) \n\nThis is computationally expensive and takes ages. LAME!\n\nIn the \"randomized\" approach, we \n1) sample n shapelets of varying length from random timeseries (ideally n is >> number of series) \n2) we calculate the highest correlation of each shapelet with each timeseries S (we compare each shapelet with each subsample of the same length from all S) \n3) the highest correlation between a shapelet and a timeseries becomes a \"feature\". So for each series S we eventually have n features. Each feature descibes the correlation between S and each of the n shapelets. \n4) We can now use these features for a standard classification model \n\nATTENTION!\n\nNormally the data you put into a classifier would be of shape(N observations x F features) \nYour labels would be of shape (N x 1) \n\nIn this case we classify timeseries (so usually the column-entries). \nSo your original data is most likely of shape(N observations x S series). \nThe idea is to classify the series and not the single observations. \nSo your labels need to be provided in the shape(Sx1).  \n\nSo what the code does is to first transform the data from (NxS) to (Sxn). The classification output will be of shape(Sx1) \nN = length of the timeseries\nS = number of timeseries in the dataset\nn = number of shapelets\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "RandomShapelets", "package_url": "https://pypi.org/project/RandomShapelets/", "platform": "", "project_url": "https://pypi.org/project/RandomShapelets/", "project_urls": null, "release_url": "https://pypi.org/project/RandomShapelets/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "A small package for time series classification", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RandomShapeletClassifier</h1>\n<p>What?\nClassifying timeseries or any other ordered data using shapelets\nA shapelet is a subsequence of a series (i.e. a sample from the complete series)</p>\n<p>How?\nThe trick is to identify shapelets that are representative of a class of timeseries.\nIn the old days, people used to</p>\n<ol>\n<li>calculate each possible shapelet of a timeseries</li>\n<li>check for each shapelet if it is representative of the timeseries (by checking how often a somewhat similar pattern occurs in the same series)</li>\n<li>check if the most representative shapelets of a series can also be found in other timeseries.</li>\n<li>If so: these series probably belong to the same class (the degree depends on how often a similar shapelet can be found in a different timeseries or how similar on average a set of shapelets is to shapelets found in other series)</li>\n</ol>\n<p>This is computationally expensive and takes ages. LAME!</p>\n<p>In the \"randomized\" approach, we</p>\n<ol>\n<li>sample n shapelets of varying length from random timeseries (ideally n is &gt;&gt; number of series)</li>\n<li>we calculate the highest correlation of each shapelet with each timeseries S (we compare each shapelet with each subsample of the same length from all S)</li>\n<li>the highest correlation between a shapelet and a timeseries becomes a \"feature\". So for each series S we eventually have n features. Each feature descibes the correlation between S and each of the n shapelets.</li>\n<li>We can now use these features for a standard classification model</li>\n</ol>\n<p>ATTENTION!</p>\n<p>Normally the data you put into a classifier would be of shape(N observations x F features)\nYour labels would be of shape (N x 1)</p>\n<p>In this case we classify timeseries (so usually the column-entries).\nSo your original data is most likely of shape(N observations x S series).\nThe idea is to classify the series and not the single observations.\nSo your labels need to be provided in the shape(Sx1).</p>\n<p>So what the code does is to first transform the data from (NxS) to (Sxn). The classification output will be of shape(Sx1)\nN = length of the timeseries\nS = number of timeseries in the dataset\nn = number of shapelets</p>\n\n          </div>"}, "last_serial": 4802342, "releases": {"0.0.9": [{"comment_text": "", "digests": {"md5": "0fead82d12bbb21e613bb31d61949175", "sha256": "9047b5e7ccab3b949805935865dce1075eae272b382aaed46e780e2aa647992e"}, "downloads": -1, "filename": "RandomShapelets-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0fead82d12bbb21e613bb31d61949175", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7663, "upload_time": "2019-02-10T15:16:36", "upload_time_iso_8601": "2019-02-10T15:16:36.121762Z", "url": "https://files.pythonhosted.org/packages/da/e2/fc8b942ae6475e5467b2606e749657f24712f11212fc7cb754bbcdb40d8c/RandomShapelets-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "494799121cfb20ed288a54acc78007d8", "sha256": "1c513bcfcc4225cf2a1e2105e1e073e2c1070b57b1d0caf54d6d2647c5062cd5"}, "downloads": -1, "filename": "RandomShapelets-0.0.9.tar.gz", "has_sig": false, "md5_digest": "494799121cfb20ed288a54acc78007d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4630, "upload_time": "2019-02-10T15:16:37", "upload_time_iso_8601": "2019-02-10T15:16:37.561665Z", "url": "https://files.pythonhosted.org/packages/c2/99/c819fb3bcb351d85a59b108d595dd3d167b40a1a069dfd95dfb5607da8ba/RandomShapelets-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fead82d12bbb21e613bb31d61949175", "sha256": "9047b5e7ccab3b949805935865dce1075eae272b382aaed46e780e2aa647992e"}, "downloads": -1, "filename": "RandomShapelets-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "0fead82d12bbb21e613bb31d61949175", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7663, "upload_time": "2019-02-10T15:16:36", "upload_time_iso_8601": "2019-02-10T15:16:36.121762Z", "url": "https://files.pythonhosted.org/packages/da/e2/fc8b942ae6475e5467b2606e749657f24712f11212fc7cb754bbcdb40d8c/RandomShapelets-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "494799121cfb20ed288a54acc78007d8", "sha256": "1c513bcfcc4225cf2a1e2105e1e073e2c1070b57b1d0caf54d6d2647c5062cd5"}, "downloads": -1, "filename": "RandomShapelets-0.0.9.tar.gz", "has_sig": false, "md5_digest": "494799121cfb20ed288a54acc78007d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4630, "upload_time": "2019-02-10T15:16:37", "upload_time_iso_8601": "2019-02-10T15:16:37.561665Z", "url": "https://files.pythonhosted.org/packages/c2/99/c819fb3bcb351d85a59b108d595dd3d167b40a1a069dfd95dfb5607da8ba/RandomShapelets-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:36 2020"}