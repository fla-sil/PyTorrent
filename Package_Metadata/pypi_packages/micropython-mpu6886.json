{"info": {"author": "Mika Tuupola", "author_email": "tuupola@appelsiini.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: Implementation :: MicroPython"], "description": "# [WIP] MicroPython MPU-6886 I2C driver\n\nThe MPU-6886 is a 6-axis motion tracking device that combines a 3-axis gyroscope and a 3-axis accelerometer.\n\n## Usage\n\nSimple test with never ending loop.\n\n```python\nimport utime\nfrom machine import I2C, Pin\nfrom mpu6886 import MPU6886\n\ni2c = I2C(scl=Pin(22), sda=Pin(21))\nsensor = MPU6886(i2c)\n\nprint(\"MPU6886 id: \" + hex(sensor.whoami))\n\nwhile True:\n    print(sensor.acceleration)\n    print(sensor.gyro)\n    print(sensor.temperature)\n\n    utime.sleep_ms(1000)\n```\n\nBy default the library returns 3-tuple of X, Y, Z axis values for acceleration and gyroscope. Default units are `m/s^2`, `rad/s` and `\u00b0C`. It is possible to also get acceleration values in `g` and gyro values `deg/s`. See the example below.\n\n```python\nimport utime\nfrom machine import I2C, Pin\nfrom mpu6886 import MPU6886, SF_G, SF_DEG_S\n\ni2c = I2C(scl=Pin(22), sda=Pin(21))\nsensor2 = MPU6886(i2c, accel_sf=SF_G, gyro_sf=SF_DEG_S)\n\nprint(\"MPU6886 id: \" + hex(sensor.whoami))\n\nwhile True:\n    print(sensor.acceleration)\n    print(sensor.gyro)\n    print(sensor.temperature)\n\n    utime.sleep_ms(1000)\n```\n\nMore realistic example usage with timer. If you get `OSError: 26` or `i2c driver install error` after soft reboot do a hard reboot.\n\n```python\nimport micropython\nfrom machine import I2C, Pin, Timer\nfrom mpu6886 import MPU6886\n\nmicropython.alloc_emergency_exception_buf(100)\n\ni2c = I2C(scl=Pin(22), sda=Pin(21))\nsensor = MPU6886(i2c)\n\ndef read_sensor(timer):\n    print(sensor.acceleration)\n    print(sensor.gyro)\n    print(sensor.temperature)\n\nprint(\"MPU6886 id: \" + hex(sensor.whoami))\n\ntimer_0 = Timer(0)\ntimer_0.init(period=1000, mode=Timer.PERIODIC, callback=read_sensor)\n```\n\n## Gyro Calibration\n\nTODO\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.txt) for more information.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tuupola/micropython-mpu6886", "keywords": "accelerometer,gyro,micropython,i2c", "license": "MIT", "maintainer": "Mika Tuupola", "maintainer_email": "tuupola@appelsiini.net", "name": "micropython-mpu6886", "package_url": "https://pypi.org/project/micropython-mpu6886/", "platform": "", "project_url": "https://pypi.org/project/micropython-mpu6886/", "project_urls": {"Homepage": "https://github.com/tuupola/micropython-mpu6886"}, "release_url": "https://pypi.org/project/micropython-mpu6886/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "MicroPython I2C driver for MPU6886 6-axis motion tracking device", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>[WIP] MicroPython MPU-6886 I2C driver</h1>\n<p>The MPU-6886 is a 6-axis motion tracking device that combines a 3-axis gyroscope and a 3-axis accelerometer.</p>\n<h2>Usage</h2>\n<p>Simple test with never ending loop.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">utime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">I2C</span><span class=\"p\">,</span> <span class=\"n\">Pin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu6886</span> <span class=\"kn\">import</span> <span class=\"n\">MPU6886</span>\n\n<span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">scl</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"n\">sda</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">MPU6886</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MPU6886 id: \"</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">whoami</span><span class=\"p\">))</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">acceleration</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">gyro</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">)</span>\n\n    <span class=\"n\">utime</span><span class=\"o\">.</span><span class=\"n\">sleep_ms</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>By default the library returns 3-tuple of X, Y, Z axis values for acceleration and gyroscope. Default units are <code>m/s^2</code>, <code>rad/s</code> and <code>\u00b0C</code>. It is possible to also get acceleration values in <code>g</code> and gyro values <code>deg/s</code>. See the example below.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">utime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">I2C</span><span class=\"p\">,</span> <span class=\"n\">Pin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu6886</span> <span class=\"kn\">import</span> <span class=\"n\">MPU6886</span><span class=\"p\">,</span> <span class=\"n\">SF_G</span><span class=\"p\">,</span> <span class=\"n\">SF_DEG_S</span>\n\n<span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">scl</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"n\">sda</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"n\">sensor2</span> <span class=\"o\">=</span> <span class=\"n\">MPU6886</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"n\">accel_sf</span><span class=\"o\">=</span><span class=\"n\">SF_G</span><span class=\"p\">,</span> <span class=\"n\">gyro_sf</span><span class=\"o\">=</span><span class=\"n\">SF_DEG_S</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MPU6886 id: \"</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">whoami</span><span class=\"p\">))</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">acceleration</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">gyro</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">)</span>\n\n    <span class=\"n\">utime</span><span class=\"o\">.</span><span class=\"n\">sleep_ms</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n</pre>\n<p>More realistic example usage with timer. If you get <code>OSError: 26</code> or <code>i2c driver install error</code> after soft reboot do a hard reboot.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">micropython</span>\n<span class=\"kn\">from</span> <span class=\"nn\">machine</span> <span class=\"kn\">import</span> <span class=\"n\">I2C</span><span class=\"p\">,</span> <span class=\"n\">Pin</span><span class=\"p\">,</span> <span class=\"n\">Timer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpu6886</span> <span class=\"kn\">import</span> <span class=\"n\">MPU6886</span>\n\n<span class=\"n\">micropython</span><span class=\"o\">.</span><span class=\"n\">alloc_emergency_exception_buf</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">scl</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">),</span> <span class=\"n\">sda</span><span class=\"o\">=</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">MPU6886</span><span class=\"p\">(</span><span class=\"n\">i2c</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_sensor</span><span class=\"p\">(</span><span class=\"n\">timer</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">acceleration</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">gyro</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MPU6886 id: \"</span> <span class=\"o\">+</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">whoami</span><span class=\"p\">))</span>\n\n<span class=\"n\">timer_0</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">timer_0</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">period</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">Timer</span><span class=\"o\">.</span><span class=\"n\">PERIODIC</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">read_sensor</span><span class=\"p\">)</span>\n</pre>\n<h2>Gyro Calibration</h2>\n<p>TODO</p>\n<h2>License</h2>\n<p>The MIT License (MIT). Please see <a href=\"LICENSE.txt\" rel=\"nofollow\">License File</a> for more information.</p>\n\n          </div>"}, "last_serial": 6873130, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4baa7e830aa9e1f373fd33e117b3d287", "sha256": "b391276ffcb25571157b83af50652980e1490beddf0628becf196903498777c5"}, "downloads": -1, "filename": "micropython-mpu6886-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4baa7e830aa9e1f373fd33e117b3d287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4275, "upload_time": "2020-03-24T13:46:13", "upload_time_iso_8601": "2020-03-24T13:46:13.231240Z", "url": "https://files.pythonhosted.org/packages/ef/68/8f5b887b17623fa05684fd6c796646cc4ca32c98acafdce66413e6c48360/micropython-mpu6886-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4baa7e830aa9e1f373fd33e117b3d287", "sha256": "b391276ffcb25571157b83af50652980e1490beddf0628becf196903498777c5"}, "downloads": -1, "filename": "micropython-mpu6886-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4baa7e830aa9e1f373fd33e117b3d287", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4275, "upload_time": "2020-03-24T13:46:13", "upload_time_iso_8601": "2020-03-24T13:46:13.231240Z", "url": "https://files.pythonhosted.org/packages/ef/68/8f5b887b17623fa05684fd6c796646cc4ca32c98acafdce66413e6c48360/micropython-mpu6886-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:04 2020"}