{"info": {"author": "Todd Carlson", "author_email": "none@notset.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "========\npactor\n========\n\n\n\nA minimalist actor framework in Python.\n\n* Free software: MIT license\n\nInstallation\n============\n\n::\n\n    pip install pactor\n\n\nRunning the Example\n===================\n\nClone the repo locally, then run the following commands::\n\n    pipenv install\n    pipenv run python -m pactor\n\nTo exit, press q.\n\nDocumentation\n=============\n\nThe actor model is a computational model that is useful for concurrent execution.  See: https://en.wikipedia.org/wiki/Actor_model.\n\npactor is a minimalist implementation of the actor model in Python, using multiprocessing.\n\nThe actor model stipulates that actors only interact with each other through messaging.  pactor implements that\nrestriction by building a proxy around an actor class and converting method calls into messages.\n\nTo wrap a pickleable class as an Actor, simply create an Actor with an instance of the target class, as follows:\n\n.. code-block:: python\n\n    class MyActor:\n        def __init__(self, name):\n            self.name = name\n\n        def some_method(self):\n            ...\n\n    actor_instance = Actor(MyActor())\n\n\nThe Actor class provides a couple of key capabilities:\n    | **.proxy**\n    | A proxy object that has methods that mirror those on the wrapped class.  Calling a method on the proxy will generate a message to the actor process with the provided parameters.\n    |\n    | **.close()**\n    | Signals that the actor process should discontinue processing messages and terminate.\n    |\n    | **.join()**\n    | Blocks the calling thread until the actor process terminates.\n    |\n\nAdditionally, the actor class itself is enhanced with an enqueue method that can be used to send messages to itself.\n\nConsider this simple example of a Monitor:\n\n.. code-block:: python\n\n    class Monitor:\n        def __init__(self, name, aggregator):\n            self.name = name\n            self.aggregator = aggregator\n            self.status = 0\n\n        def read_status(self):\n            self.status = fetch_status()\n            self.aggregator.update_status(self.name, self.status)\n            self.enqueue(self.read_status) # queue up another read\n\n\n\nAnd an Aggregator:\n\n.. code-block:: python\n\n    class Aggregator:\n        def update_status(self, target_name, status):\n            print('Status update for %s: %s' % (target_name, status))\n\nThese could be used as follows:\n\n.. code-block:: python\n\n    def main():\n        aggregator = Actor(Aggregator('aggregator'))\n        primary_mon = Actor(Monitor('primary', aggregator.proxy))\n        secondary_mon = Actor(Monitor('secondary', aggregator.proxy))\n\n        primary_mon.read_status()\n        secondary_mon.read_status()\n\n        aggregator.join()\n\nThis simple example highlights several critical points:\n\n* Each Actor class will actually run in a separate process\n* One Actor can be passed to another Actor using the .proxy member\n* Invoking a method on an Actor proxy does not directly invoke that method on the calling thread, but instead is wrapped as a message and passed to the actor process.\n\nDevelopment\n===========\n\nTo run the all tests run::\n\n    tox\n\n\n\nChangelog\n=========\n\n0.0.1 (2019-12-10)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rtoddcarlson/pactor", "keywords": "actor", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pactor", "package_url": "https://pypi.org/project/pactor/", "platform": "", "project_url": "https://pypi.org/project/pactor/", "project_urls": {"Documentation": "https://github.com/rtoddcarlson/pactor", "Homepage": "https://github.com/rtoddcarlson/pactor", "Issue Tracker": "https://github.com/rtoddcarlson/pactor/issues"}, "release_url": "https://pypi.org/project/pactor/0.1.0/", "requires_dist": null, "requires_python": ">=3.6.*", "summary": "A minimalist actor framework in Python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A minimalist actor framework in Python.</p>\n<ul>\n<li>Free software: MIT license</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pactor\n</pre>\n</div>\n<div id=\"running-the-example\">\n<h2>Running the Example</h2>\n<p>Clone the repo locally, then run the following commands:</p>\n<pre>pipenv install\npipenv run python -m pactor\n</pre>\n<p>To exit, press q.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The actor model is a computational model that is useful for concurrent execution.  See: <a href=\"https://en.wikipedia.org/wiki/Actor_model\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Actor_model</a>.</p>\n<p>pactor is a minimalist implementation of the actor model in Python, using multiprocessing.</p>\n<p>The actor model stipulates that actors only interact with each other through messaging.  pactor implements that\nrestriction by building a proxy around an actor class and converting method calls into messages.</p>\n<p>To wrap a pickleable class as an Actor, simply create an Actor with an instance of the target class, as follows:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyActor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n<span class=\"n\">actor_instance</span> <span class=\"o\">=</span> <span class=\"n\">Actor</span><span class=\"p\">(</span><span class=\"n\">MyActor</span><span class=\"p\">())</span>\n</pre>\n<dl>\n<dt>The Actor class provides a couple of key capabilities:</dt>\n<dd><div>\n<div><strong>.proxy</strong></div>\n<div>A proxy object that has methods that mirror those on the wrapped class.  Calling a method on the proxy will generate a message to the actor process with the provided parameters.</div>\n<div><br></div>\n<div><strong>.close()</strong></div>\n<div>Signals that the actor process should discontinue processing messages and terminate.</div>\n<div><br></div>\n<div><strong>.join()</strong></div>\n<div>Blocks the calling thread until the actor process terminates.</div>\n<div><br></div>\n</div>\n</dd>\n</dl>\n<p>Additionally, the actor class itself is enhanced with an enqueue method that can be used to send messages to itself.</p>\n<p>Consider this simple example of a Monitor:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Monitor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">aggregator</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aggregator</span> <span class=\"o\">=</span> <span class=\"n\">aggregator</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">read_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">fetch_status</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">update_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_status</span><span class=\"p\">)</span> <span class=\"c1\"># queue up another read</span>\n</pre>\n<p>And an Aggregator:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Aggregator</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Status update for </span><span class=\"si\">%s</span><span class=\"s1\">: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">))</span>\n</pre>\n<p>These could be used as follows:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">aggregator</span> <span class=\"o\">=</span> <span class=\"n\">Actor</span><span class=\"p\">(</span><span class=\"n\">Aggregator</span><span class=\"p\">(</span><span class=\"s1\">'aggregator'</span><span class=\"p\">))</span>\n    <span class=\"n\">primary_mon</span> <span class=\"o\">=</span> <span class=\"n\">Actor</span><span class=\"p\">(</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"s1\">'primary'</span><span class=\"p\">,</span> <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">proxy</span><span class=\"p\">))</span>\n    <span class=\"n\">secondary_mon</span> <span class=\"o\">=</span> <span class=\"n\">Actor</span><span class=\"p\">(</span><span class=\"n\">Monitor</span><span class=\"p\">(</span><span class=\"s1\">'secondary'</span><span class=\"p\">,</span> <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">proxy</span><span class=\"p\">))</span>\n\n    <span class=\"n\">primary_mon</span><span class=\"o\">.</span><span class=\"n\">read_status</span><span class=\"p\">()</span>\n    <span class=\"n\">secondary_mon</span><span class=\"o\">.</span><span class=\"n\">read_status</span><span class=\"p\">()</span>\n\n    <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n</pre>\n<p>This simple example highlights several critical points:</p>\n<ul>\n<li>Each Actor class will actually run in a separate process</li>\n<li>One Actor can be passed to another Actor using the .proxy member</li>\n<li>Invoking a method on an Actor proxy does not directly invoke that method on the calling thread, but instead is wrapped as a message and passed to the actor process.</li>\n</ul>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To run the all tests run:</p>\n<pre>tox\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.0.1 (2019-12-10)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6274075, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "42d0a3df913ff39e0e2a31233411c966", "sha256": "97db34f4cb564aa2fb20d32b5c9c124da6d4f007f1a87a4fe73f86de741ae53e"}, "downloads": -1, "filename": "pactor-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42d0a3df913ff39e0e2a31233411c966", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.*", "size": 7716, "upload_time": "2019-12-10T17:22:21", "upload_time_iso_8601": "2019-12-10T17:22:21.960887Z", "url": "https://files.pythonhosted.org/packages/68/1f/474d22afa0319eaa250d30c68a4d0fc783aa4839f94bf65d4d3d9c6974bb/pactor-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35cd11bfa986da330b09465b529e0438", "sha256": "a3a9619a1e4916c2b9c0980481573f6284f8a856c340b65dbe7849c71b9172ed"}, "downloads": -1, "filename": "pactor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "35cd11bfa986da330b09465b529e0438", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 15671, "upload_time": "2019-12-10T17:22:24", "upload_time_iso_8601": "2019-12-10T17:22:24.137950Z", "url": "https://files.pythonhosted.org/packages/0e/06/14be9e063657c53beaed10d77270579b8052fe5be33feb06c3dfa6cf34a4/pactor-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42d0a3df913ff39e0e2a31233411c966", "sha256": "97db34f4cb564aa2fb20d32b5c9c124da6d4f007f1a87a4fe73f86de741ae53e"}, "downloads": -1, "filename": "pactor-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42d0a3df913ff39e0e2a31233411c966", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.*", "size": 7716, "upload_time": "2019-12-10T17:22:21", "upload_time_iso_8601": "2019-12-10T17:22:21.960887Z", "url": "https://files.pythonhosted.org/packages/68/1f/474d22afa0319eaa250d30c68a4d0fc783aa4839f94bf65d4d3d9c6974bb/pactor-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35cd11bfa986da330b09465b529e0438", "sha256": "a3a9619a1e4916c2b9c0980481573f6284f8a856c340b65dbe7849c71b9172ed"}, "downloads": -1, "filename": "pactor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "35cd11bfa986da330b09465b529e0438", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 15671, "upload_time": "2019-12-10T17:22:24", "upload_time_iso_8601": "2019-12-10T17:22:24.137950Z", "url": "https://files.pythonhosted.org/packages/0e/06/14be9e063657c53beaed10d77270579b8052fe5be33feb06c3dfa6cf34a4/pactor-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:01 2020"}