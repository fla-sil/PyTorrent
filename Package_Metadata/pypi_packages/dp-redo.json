{"info": {"author": "Shengqiu Li", "author_email": "lishengqiu.hit@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# dp-redo\n\nA python variant of the [redo](http://cr.yp.to/redo.html) build system, with which You Can (Not) Redo.\n\n## Example\n\nLet's say we have a build process where we read `test.c` and generate `test.o`:\n\n```python\nimport os, sys\nsource_tree = os.path.dirname(os.path.abspath(sys.argv[0]))\n\ndef test():\n    source = os.path.join(source_tree, \"test.c\")\n\n    # The simplest compiler \ud83d\ude01\n    os.system(\"cat {} > {}\".format(source, \"test.o\"))\n\nif __name__ == \"__main__\":\n    test()\n```\n\n`test` will be run every time no matter whether `test.c` gets an update or not, which wastes much time. Now let's add some magic:\n\n```python\nfrom dp_redo import *\nimport os, sys\n\nsource_tree = os.path.dirname(os.path.abspath(sys.argv[0]))\n\n@do(\"test.o\")\ndef test(target_name, target_base_name, output_path):\n    redo_ifchange(\"test.c\")\n    source = os.path.join(source_tree, \"test.c\")\n    os.system(\"cat {} > {}\".format(source, output_path))\n\nif __name__ == \"__main__\":\n    redo_ifchange(test)\n```\n\nIf you run it multiple times:\n\n```\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> python ..\\test2.py\nRedoing target: test\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> python ..\\test2.py\nSkipping target test: it's up to date.\n```\n\nFantastic, isn't it? If you changed `test.c`, modified the `test` method itself, or deleted `test.o`, `test` will be executed again:\n\n```\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> python ..\\test2.py\nRedoing target: test. Reason: It's python code has changed\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> python ..\\test2.py\nRedoing target: test. Reason: The target file doesn't exist\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> python ..\\test2.py\nRedoing target: test. Reason: test.c has been modified\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build> \n```\n\n---\n\nA target method can also depend on another method, which is rather simple:\n\n```python\nfrom dp_redo import *\nimport os, sys\n\nsource_tree = os.path.dirname(os.path.abspath(sys.argv[0]))\n\n@do(\"test2.o\")\ndef test2(target_name, target_base_name, output_path):\n    os.system(\"echo test2 > \" + output_path)\n\n@do(\"test.o\")\ndef test(target_name, target_base_name, output_path):\n    redo_ifchange(test2, \"test.c\")\n    source = os.path.join(source_tree, \"test.c\")\n    os.system(\"cat {} > {}\".format(source, output_path))\n\nif __name__ == \"__main__\":\n    redo_ifchange(test)\n```\n\n---\n\nWhat makes redo more interesting is that, you can call `redo_ifchange` to add dependencies at any time, even after your compilation:\n\n```python\nfrom dp_redo import *\nimport os, sys, re\n\nsource_tree = os.path.dirname(os.path.abspath(sys.argv[0]))\n\n@do(\"test2.o\")\ndef test2(target_name, target_base_name, output_path):\n    print(\"In test2\")\n    os.system(\"echo test2 > \" + output_path)\n\n@do(\"test.o\")\ndef test(target_name, target_base_name, output_path):\n    redo_ifchange(test2)\n    source = os.path.join(source_tree, \"test.c\")\n    os.system(\"gcc -M -MF test.c.dep -o {} {}\".format(output_path, source))\n\n    # Dependent headers given by gcc\n    deps = open('test.c.dep', 'r').read().split(\": \")[1].strip().split(\"\\\\\\n\")\n    redo_ifchange(*deps)\n\nif __name__ == \"__main__\":\n    redo_ifchange(test)\n```\n\nNow when any headers are changed, the build process will be run again.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dontpanic92/dp-redo", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dp-redo", "package_url": "https://pypi.org/project/dp-redo/", "platform": "", "project_url": "https://pypi.org/project/dp-redo/", "project_urls": {"Homepage": "https://github.com/dontpanic92/dp-redo"}, "release_url": "https://pypi.org/project/dp-redo/3.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python variant of the redo build system, with which You Can (Not) Redo.", "version": "3.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dp-redo</h1>\n<p>A python variant of the <a href=\"http://cr.yp.to/redo.html\" rel=\"nofollow\">redo</a> build system, with which You Can (Not) Redo.</p>\n<h2>Example</h2>\n<p>Let's say we have a build process where we read <code>test.c</code> and generate <code>test.o</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span>\n<span class=\"n\">source_tree</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">source_tree</span><span class=\"p\">,</span> <span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The simplest compiler \ud83d\ude01</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"cat </span><span class=\"si\">{}</span><span class=\"s2\"> &gt; </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"s2\">\"test.o\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">test</span><span class=\"p\">()</span>\n</pre>\n<p><code>test</code> will be run every time no matter whether <code>test.c</code> gets an update or not, which wastes much time. Now let's add some magic:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dp_redo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">source_tree</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"nd\">@do</span><span class=\"p\">(</span><span class=\"s2\">\"test.o\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">target_base_name</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">source_tree</span><span class=\"p\">,</span> <span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"cat </span><span class=\"si\">{}</span><span class=\"s2\"> &gt; </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n</pre>\n<p>If you run it multiple times:</p>\n<pre><code>PS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; python ..\\test2.py\nRedoing target: test\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; python ..\\test2.py\nSkipping target test: it's up to date.\n</code></pre>\n<p>Fantastic, isn't it? If you changed <code>test.c</code>, modified the <code>test</code> method itself, or deleted <code>test.o</code>, <code>test</code> will be executed again:</p>\n<pre><code>PS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; python ..\\test2.py\nRedoing target: test. Reason: It's python code has changed\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; python ..\\test2.py\nRedoing target: test. Reason: The target file doesn't exist\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; python ..\\test2.py\nRedoing target: test. Reason: test.c has been modified\nPS C:\\Users\\lishengq\\source\\repos\\dp-redo\\build&gt; \n</code></pre>\n<hr>\n<p>A target method can also depend on another method, which is rather simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dp_redo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span>\n\n<span class=\"n\">source_tree</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"nd\">@do</span><span class=\"p\">(</span><span class=\"s2\">\"test2.o\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test2</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">target_base_name</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"echo test2 &gt; \"</span> <span class=\"o\">+</span> <span class=\"n\">output_path</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@do</span><span class=\"p\">(</span><span class=\"s2\">\"test.o\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">target_base_name</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"p\">,</span> <span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">source_tree</span><span class=\"p\">,</span> <span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"cat </span><span class=\"si\">{}</span><span class=\"s2\"> &gt; </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<p>What makes redo more interesting is that, you can call <code>redo_ifchange</code> to add dependencies at any time, even after your compilation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dp_redo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">source_tree</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"nd\">@do</span><span class=\"p\">(</span><span class=\"s2\">\"test2.o\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test2</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">target_base_name</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"In test2\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"echo test2 &gt; \"</span> <span class=\"o\">+</span> <span class=\"n\">output_path</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@do</span><span class=\"p\">(</span><span class=\"s2\">\"test.o\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">target_name</span><span class=\"p\">,</span> <span class=\"n\">target_base_name</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"p\">):</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"n\">test2</span><span class=\"p\">)</span>\n    <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">source_tree</span><span class=\"p\">,</span> <span class=\"s2\">\"test.c\"</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">\"gcc -M -MF test.c.dep -o </span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Dependent headers given by gcc</span>\n    <span class=\"n\">deps</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test.c.dep'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\": \"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\\\\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">deps</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">redo_ifchange</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n</pre>\n<p>Now when any headers are changed, the build process will be run again.</p>\n\n          </div>"}, "last_serial": 6261061, "releases": {"3.0.0": [{"comment_text": "", "digests": {"md5": "3f60fe2a8dee660f9e05face6e398638", "sha256": "42672415978e1af423b73ce5daf1648a5f3652c17a20b99ef4311fcd1204dd9a"}, "downloads": -1, "filename": "dp_redo-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f60fe2a8dee660f9e05face6e398638", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5623, "upload_time": "2019-12-07T12:47:18", "upload_time_iso_8601": "2019-12-07T12:47:18.279049Z", "url": "https://files.pythonhosted.org/packages/a0/a3/63bb0c79788c21655ff0b8b20b87fa6fc92344d6f01999d01ad8b283c64b/dp_redo-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "746b1f39a041da647c8708c919bca9f8", "sha256": "ea81aa65f307e6d5b2c7908db27f87938ef2357615ba3722628af35e6305a2f3"}, "downloads": -1, "filename": "dp-redo-3.0.0.tar.gz", "has_sig": false, "md5_digest": "746b1f39a041da647c8708c919bca9f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4166, "upload_time": "2019-12-07T12:47:20", "upload_time_iso_8601": "2019-12-07T12:47:20.701101Z", "url": "https://files.pythonhosted.org/packages/4d/9e/908e27e7d56c646e61740f64a51ac585a832fece9cc89933cdb42a7126d6/dp-redo-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "bf6a21b41f8ef39a9f962dd058cf9e9a", "sha256": "40754fa30a350cd6af1747d48325e2c241a409f52b5c485606a98cd267fe8246"}, "downloads": -1, "filename": "dp_redo-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf6a21b41f8ef39a9f962dd058cf9e9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5843, "upload_time": "2019-12-07T16:56:18", "upload_time_iso_8601": "2019-12-07T16:56:18.269783Z", "url": "https://files.pythonhosted.org/packages/34/bd/b5b4f9959c75e7e8cf2fa8a519417024fdff7a8c2611d4dabdd02418f5c6/dp_redo-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16a8f1669cc392e8d05a0e61526eb309", "sha256": "15a375587c7282a2e6c557f89b8db9cb539ec35d0132fd631a5f4aa1e2b71c4b"}, "downloads": -1, "filename": "dp-redo-3.0.1.tar.gz", "has_sig": false, "md5_digest": "16a8f1669cc392e8d05a0e61526eb309", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4373, "upload_time": "2019-12-07T16:56:19", "upload_time_iso_8601": "2019-12-07T16:56:19.991802Z", "url": "https://files.pythonhosted.org/packages/2d/99/a1ab0db122582d8fbd96852519587025567689b1cadeb686573335c8bccb/dp-redo-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "87ec5988a1313fe3940e81bd80c21402", "sha256": "3ed211679688c9eecb9b78c4aa456fbff834b0003fec16dfd9083dda37b0f7f1"}, "downloads": -1, "filename": "dp_redo-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87ec5988a1313fe3940e81bd80c21402", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5851, "upload_time": "2019-12-08T10:22:40", "upload_time_iso_8601": "2019-12-08T10:22:40.789986Z", "url": "https://files.pythonhosted.org/packages/4f/95/ee1906ce136e525c0cd45603fe49d0566ed5250ddab2c36d5b4effa49158/dp_redo-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1909dd39d127822401068f39f849a4a", "sha256": "da1dc0d5196163c245e59b5e8f714d40766df2b8e5d12a6a8fe832b6592c7255"}, "downloads": -1, "filename": "dp-redo-3.0.2.tar.gz", "has_sig": false, "md5_digest": "b1909dd39d127822401068f39f849a4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4372, "upload_time": "2019-12-08T10:22:42", "upload_time_iso_8601": "2019-12-08T10:22:42.513765Z", "url": "https://files.pythonhosted.org/packages/63/1b/616ace3564c7a074a3863d6e18b2e0764ae7cbf15905efaf1bd12175966b/dp-redo-3.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87ec5988a1313fe3940e81bd80c21402", "sha256": "3ed211679688c9eecb9b78c4aa456fbff834b0003fec16dfd9083dda37b0f7f1"}, "downloads": -1, "filename": "dp_redo-3.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87ec5988a1313fe3940e81bd80c21402", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5851, "upload_time": "2019-12-08T10:22:40", "upload_time_iso_8601": "2019-12-08T10:22:40.789986Z", "url": "https://files.pythonhosted.org/packages/4f/95/ee1906ce136e525c0cd45603fe49d0566ed5250ddab2c36d5b4effa49158/dp_redo-3.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1909dd39d127822401068f39f849a4a", "sha256": "da1dc0d5196163c245e59b5e8f714d40766df2b8e5d12a6a8fe832b6592c7255"}, "downloads": -1, "filename": "dp-redo-3.0.2.tar.gz", "has_sig": false, "md5_digest": "b1909dd39d127822401068f39f849a4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4372, "upload_time": "2019-12-08T10:22:42", "upload_time_iso_8601": "2019-12-08T10:22:42.513765Z", "url": "https://files.pythonhosted.org/packages/63/1b/616ace3564c7a074a3863d6e18b2e0764ae7cbf15905efaf1bd12175966b/dp-redo-3.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:00 2020"}