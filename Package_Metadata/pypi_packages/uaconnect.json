{"info": {"author": "Airship Customer Engineering", "author_email": "customer-engineering@airship.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Topic :: Software Development :: Libraries"], "description": "About\n=====\n\n``uaconnect`` is the official Python library for using the `Airship Real-Time Data Streaming\n<https://docs.airship.com/api/connect/>`_ API (formerly known as Connect).\n\nQuestions\n=========\n\nThe best place to ask questions or report a problem is our support site:\nhttp://support.airship.com/\n\nRequirements\n============\n\nTested on Python 2.7 and 3.5, and should work with 3.3+.\n\nFor tests, ``uaconnect`` also needs `Mock <https://github.com/testing-cabal/mock>`_.\n\nRunning Tests\n=============\n\nTo run tests, run:\n\n    $ python -m unittest discover\n\nUsage\n=====\n\nSee the `Real-Time Data Streaming Getting Started Guide\n<https://docs.airship.com/tutorials/getting-started/data-streaming/>`_, as\nwell as the `Real-Time Data Streaming API docs\n<https://docs.airship.com/api/connect/>`_ for more details.\n\nBasic usage\n-----------\n\nTo use the library, instantiate a ``Consumer`` object with the application key,\naccess token, and an offset recorder. You can then open the connection, and\nstart reading events.\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.Consumer(\n    ...     'application_key', 'access_token',\n    ...     uaconnect.FileRecorder('.offset'))\n    >>> consumer.connect()\n    >>> for event in consumer.read():\n    ...     if event is None:\n    ...        continue\n    >>>     print(\"Got event: {}\".format(event))\n    >>>     consumer.ack(event)\n\n\nOffset recorders\n----------------\n\nOffset recorders inherit from the abstract base class ``uaconnect.Recorder``,\nimplementing ``read_offset`` and ``write_offset`` methods. One recorder is\nincluded in the library, ``FileRecorder``, which stores the offest on disk. In\nthe ``uaconnect.ext.redisrecorder`` package there is an example implementation\nof using an Redis instance to store the offset.\n\n`ack` calls should be placed depending on whether in a failure scenario your\napp wishes to possibly replay an already handled event, or risk dropping one.\nFor the latter, call ``ack`` as soon as the event is read; for the former, call\n``ack`` only after the event has been fully handled.\n\nAdvanced options when connecting\n================================\n\nAirship Real-Time Data Streaming supports a variety of `options when connecting\n<https://docs.airship.com/api/connect/#operation/api/events/post/requestbody>`_\nto make sure that you're only consuming the data that you want. ``uaconnect``\nmakes it easy to use these connection parameters and filters.\n\nSpecifying offsets\n------------------\n\nOne of the advantages of Airship Real-Time Data Streaming is that you can resume from a\nspecific place in the RTDS stream. This is done by specifying the ``offset``\nthat's associated with the event. While ``uaconnect`` automatically tracks\noffsets for you with ``uaconnect.FileRecorder``, you can also explicitly set an\noffset.\n\n    >>> import uaconnect\n    >>> recorder = uaconnect.FileRecorder(\".offset\") # or wherever you would like the file to exist\n    >>> recorder.write_offset(\"8865499359\") # a randomly chosen offset\n    >>> recorder.read_offset()\n    '8865499359'\n\nAn alternative here is to just write the offset explicitly into the file, or\nwhatever ``Recorder`` subclass you're using to track offsets.\n\n    $ cat .offset\n    886549935\n\nNow, the next time you connect, it will pick up from that last offset.\n\nIf you'd like to manually set the offset for a connection to a known value\ninstead of the recorder's offset, set ``resume_offset`` like so:\n\n    >>> consumer.connect(resume_offset='123456789')\n\nUsing filters\n-------------\n\nFilters are a powerful way of filtering what specific information you'd like to\nsee from the RTDS stream. You can filter by event type, device type, latency\non an event, or even specific devices or notifications.\n\nFor a complete list of filters, and their descriptions, check out `the\ndocumentation <https://docs.airship.com/api/connect/#schemas/filters>`_.\n\nHere's a brief example on how to use filters with ``uaconnect``:\n\n    >>> import uaconnect\n    >>> consumer = uaconnect.Consumer(\n    ...     'application_key', 'access_token',\n    ...     uaconnect.FileRecorder('.offset'))\n    >>> f = uaconnect.Filter()\n    >>> f.types(\"PUSH_BODY\", \"SEND\") # only receive PUSH_BODY and SEND events.\n    >>> consumer.add_filter(f)\n    >>> consumer.connect()\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://airship.com/", "keywords": "", "license": "Apache v2", "maintainer": "", "maintainer_email": "", "name": "uaconnect", "package_url": "https://pypi.org/project/uaconnect/", "platform": "", "project_url": "https://pypi.org/project/uaconnect/", "project_urls": {"Homepage": "https://airship.com/"}, "release_url": "https://pypi.org/project/uaconnect/0.3/", "requires_dist": null, "requires_python": "", "summary": "Python package for using Airship Real-Time Data Streaming", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p><tt>uaconnect</tt> is the official Python library for using the <a href=\"https://docs.airship.com/api/connect/\" rel=\"nofollow\">Airship Real-Time Data Streaming</a> API (formerly known as Connect).</p>\n</div>\n<div id=\"questions\">\n<h2>Questions</h2>\n<p>The best place to ask questions or report a problem is our support site:\n<a href=\"http://support.airship.com/\" rel=\"nofollow\">http://support.airship.com/</a></p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Tested on Python 2.7 and 3.5, and should work with 3.3+.</p>\n<p>For tests, <tt>uaconnect</tt> also needs <a href=\"https://github.com/testing-cabal/mock\" rel=\"nofollow\">Mock</a>.</p>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>To run tests, run:</p>\n<blockquote>\n$ python -m unittest discover</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>See the <a href=\"https://docs.airship.com/tutorials/getting-started/data-streaming/\" rel=\"nofollow\">Real-Time Data Streaming Getting Started Guide</a>, as\nwell as the <a href=\"https://docs.airship.com/api/connect/\" rel=\"nofollow\">Real-Time Data Streaming API docs</a> for more details.</p>\n<div id=\"basic-usage\">\n<h3>Basic usage</h3>\n<p>To use the library, instantiate a <tt>Consumer</tt> object with the application key,\naccess token, and an offset recorder. You can then open the connection, and\nstart reading events.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import uaconnect\n&gt;&gt;&gt; consumer = uaconnect.Consumer(\n...     'application_key', 'access_token',\n...     uaconnect.FileRecorder('.offset'))\n&gt;&gt;&gt; consumer.connect()\n&gt;&gt;&gt; for event in consumer.read():\n...     if event is None:\n...        continue\n&gt;&gt;&gt;     print(\"Got event: {}\".format(event))\n&gt;&gt;&gt;     consumer.ack(event)\n</pre>\n</blockquote>\n</div>\n<div id=\"offset-recorders\">\n<h3>Offset recorders</h3>\n<p>Offset recorders inherit from the abstract base class <tt>uaconnect.Recorder</tt>,\nimplementing <tt>read_offset</tt> and <tt>write_offset</tt> methods. One recorder is\nincluded in the library, <tt>FileRecorder</tt>, which stores the offest on disk. In\nthe <tt>uaconnect.ext.redisrecorder</tt> package there is an example implementation\nof using an Redis instance to store the offset.</p>\n<p><cite>ack</cite> calls should be placed depending on whether in a failure scenario your\napp wishes to possibly replay an already handled event, or risk dropping one.\nFor the latter, call <tt>ack</tt> as soon as the event is read; for the former, call\n<tt>ack</tt> only after the event has been fully handled.</p>\n</div>\n</div>\n<div id=\"advanced-options-when-connecting\">\n<h2>Advanced options when connecting</h2>\n<p>Airship Real-Time Data Streaming supports a variety of <a href=\"https://docs.airship.com/api/connect/#operation/api/events/post/requestbody\" rel=\"nofollow\">options when connecting</a>\nto make sure that you\u2019re only consuming the data that you want. <tt>uaconnect</tt>\nmakes it easy to use these connection parameters and filters.</p>\n<div id=\"specifying-offsets\">\n<h3>Specifying offsets</h3>\n<p>One of the advantages of Airship Real-Time Data Streaming is that you can resume from a\nspecific place in the RTDS stream. This is done by specifying the <tt>offset</tt>\nthat\u2019s associated with the event. While <tt>uaconnect</tt> automatically tracks\noffsets for you with <tt>uaconnect.FileRecorder</tt>, you can also explicitly set an\noffset.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import uaconnect\n&gt;&gt;&gt; recorder = uaconnect.FileRecorder(\".offset\") # or wherever you would like the file to exist\n&gt;&gt;&gt; recorder.write_offset(\"8865499359\") # a randomly chosen offset\n&gt;&gt;&gt; recorder.read_offset()\n'8865499359'\n</pre>\n</blockquote>\n<p>An alternative here is to just write the offset explicitly into the file, or\nwhatever <tt>Recorder</tt> subclass you\u2019re using to track offsets.</p>\n<blockquote>\n$ cat .offset\n886549935</blockquote>\n<p>Now, the next time you connect, it will pick up from that last offset.</p>\n<p>If you\u2019d like to manually set the offset for a connection to a known value\ninstead of the recorder\u2019s offset, set <tt>resume_offset</tt> like so:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; consumer.connect(resume_offset='123456789')\n</pre>\n</blockquote>\n</div>\n<div id=\"using-filters\">\n<h3>Using filters</h3>\n<p>Filters are a powerful way of filtering what specific information you\u2019d like to\nsee from the RTDS stream. You can filter by event type, device type, latency\non an event, or even specific devices or notifications.</p>\n<p>For a complete list of filters, and their descriptions, check out <a href=\"https://docs.airship.com/api/connect/#schemas/filters\" rel=\"nofollow\">the\ndocumentation</a>.</p>\n<p>Here\u2019s a brief example on how to use filters with <tt>uaconnect</tt>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import uaconnect\n&gt;&gt;&gt; consumer = uaconnect.Consumer(\n...     'application_key', 'access_token',\n...     uaconnect.FileRecorder('.offset'))\n&gt;&gt;&gt; f = uaconnect.Filter()\n&gt;&gt;&gt; f.types(\"PUSH_BODY\", \"SEND\") # only receive PUSH_BODY and SEND events.\n&gt;&gt;&gt; consumer.add_filter(f)\n&gt;&gt;&gt; consumer.connect()\n</pre>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6750360, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "597abe46365f9d38b73a1ff0fbdb7a35", "sha256": "8b6e0386593e3415d5d69d2ae93c009b34b11101945ce3f5cb34bd4ef3bfcea7"}, "downloads": -1, "filename": "uaconnect-0.1.tar.gz", "has_sig": false, "md5_digest": "597abe46365f9d38b73a1ff0fbdb7a35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6102, "upload_time": "2015-11-16T19:45:30", "upload_time_iso_8601": "2015-11-16T19:45:30.491317Z", "url": "https://files.pythonhosted.org/packages/3a/fe/a8a152170ed543c3f01b0b2e2f1c33537ae88273dcea3335f9c5763e3a0a/uaconnect-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2937fbba91d51b48e04dc116ed876492", "sha256": "20b3c60160ac374e935c18f6290e6e4e489f3557f83ee37d0b5f66b9ecc5e6b4"}, "downloads": -1, "filename": "uaconnect-0.2.tar.gz", "has_sig": false, "md5_digest": "2937fbba91d51b48e04dc116ed876492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7501, "upload_time": "2016-08-01T21:48:49", "upload_time_iso_8601": "2016-08-01T21:48:49.679011Z", "url": "https://files.pythonhosted.org/packages/9e/a4/d00936a90cb7db80dd0f0c141b4a0cd36ddf1a5c2886d57d4114260841a1/uaconnect-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8785168e59032178280e46292b807a08", "sha256": "24ee3133ae1466bc0174cde563a0d47bb35da9f2747070743e242666e21b9385"}, "downloads": -1, "filename": "uaconnect-0.3.tar.gz", "has_sig": false, "md5_digest": "8785168e59032178280e46292b807a08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8652, "upload_time": "2020-03-04T20:33:48", "upload_time_iso_8601": "2020-03-04T20:33:48.327811Z", "url": "https://files.pythonhosted.org/packages/71/df/113d7f5933a477c990ecfb362283ef245cf9d8de2a1f58065a3bf2d31b28/uaconnect-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8785168e59032178280e46292b807a08", "sha256": "24ee3133ae1466bc0174cde563a0d47bb35da9f2747070743e242666e21b9385"}, "downloads": -1, "filename": "uaconnect-0.3.tar.gz", "has_sig": false, "md5_digest": "8785168e59032178280e46292b807a08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8652, "upload_time": "2020-03-04T20:33:48", "upload_time_iso_8601": "2020-03-04T20:33:48.327811Z", "url": "https://files.pythonhosted.org/packages/71/df/113d7f5933a477c990ecfb362283ef245cf9d8de2a1f58065a3bf2d31b28/uaconnect-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:30 2020"}