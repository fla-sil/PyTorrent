{"info": {"author": "OGB Team", "author_email": "ogb@cs.stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "<p align=\"center\">\n  <img width=\"40%\" src=\"https://snap-stanford.github.io/ogb-web/assets/img/OGB_rectangle.png\" />\n</p>\n\n--------------------------------------------------------------------------------\n\n[![PyPI](https://img.shields.io/pypi/v/ogb)](https://pypi.org/project/ogb/)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/snap-stanford/ogb/blob/master/LICENSE)\n\n## Overview\n\nThe Open Graph Benchmark (OGB) is a collection of benchmark datasets, data loaders, and evaluators for graph machine learning. Datasets cover a variety of graph machine learning tasks and real-world applications.\nThe OGB data loaders are fully compatible with popular graph deep learning frameworks, including [PyTorch Geometric](https://pytorch-geometric.readthedocs.io/en/latest/) and [Deep Graph Library (DGL)](https://www.dgl.ai/). They provide automatic dataset downloading, standardized dataset splits, and unified performance evaluation.\n\n<p align=\"center\">\n  <img width=\"80%\" src=\"https://snap-stanford.github.io/ogb-web/assets/img/ogb_overview.png\" />\n</p>\n\nOGB aims to provide graph datasets that cover important graph machine learning tasks, diverse dataset scale, and rich domains.\n\n**Graph ML Tasks:** We cover three fundamental graph machine learning tasks: prediction at the level of nodes, links, and graphs.\n\n**Diverse scale:** Small-scale graph datasets can be processed within a single GPU, while medium- and large-scale graphs might require multiple GPUs or clever sampling/partition techniques.\n\n**Rich domains:** Graph datasets come from diverse domains ranging from scientific ones to social/information networks, and also include heterogeneous knowledge graphs. \n\n<p align=\"center\">\n  <img width=\"70%\" src=\"https://snap-stanford.github.io/ogb-web/assets/img/dataset_overview.png\" />\n</p>\n\nOGB is an on-going effort, and we are planning to increase our coverage in the future.\n\n## Installation\nYou can install OGB using Python's package manager `pip`.\n**If you have previously installed ogb, please make sure you update the version to 1.1.1\\*.**\n\n#### Requirements\n - Python>=3.5\n - PyTorch>=1.2\n - DGL>=0.4.1 or torch-geometric>=1.3.1\n - Numpy>=1.16.0\n - pandas>=0.24.0\n - urllib3>=1.24.0\n - scikit-learn>=0.20.0\n\n#### Pip install\nThe recommended way to install OGB is using Python's package manager pip:\n```bash\npip install ogb\n```\n\n```bash\npython -c \"import ogb; print(ogb.__version__)\"\n# This should print \"1.1.1\". Otherwise, please update the version by\npip install -U ogb\n```\n\n\n#### From source\nYou can also install OGB from source. This is recommended if you want to contribute to OGB.\n```bash\ngit clone https://github.com/snap-stanford/ogb\ncd ogb\npython setup.py install\n```\n\n## Example\nWe highlight two key features of OGB, namely, (1) easy-to-use data loaders, and (2) standardized evaluators.\n#### (1) Data loaders\nWe prepare easy-to-use PyTorch Geometric and DGL data loaders. We handle dataset downloading as well as standardized dataset splitting.\nBelow, on PyTorch Geometric, we see that a few lines of code is sufficient to prepare and split the dataset! Needless to say, you can enjoy the same convenience for DGL!\n```python\nfrom ogb.graphproppred import PygGraphPropPredDataset\nfrom torch_geometric.data import DataLoader\n\ndataset = PygGraphPropPredDataset(name = \"ogbg-molhiv\")\n\nsplit_idx = dataset.get_idx_split() \ntrain_loader = DataLoader(dataset[split_idx[\"train\"]], batch_size=32, shuffle=True)\nvalid_loader = DataLoader(dataset[split_idx[\"valid\"]], batch_size=32, shuffle=False)\ntest_loader = DataLoader(dataset[split_idx[\"test\"]], batch_size=32, shuffle=False)\n```\n\n#### (2) Evaluators\nWe also prepare standardized evaluators for easy evaluation and comparison of different methods. The evaluator takes `input_dict` (a dictionary whose format is specified in `evaluator.expected_input_format`) as input, and returns a dictionary storing the performance metric appropriate for the given dataset.\nThe standardized evaluation protocol allows researchers to reliably compare their methods.\n```python\nfrom ogb.graphproppred import Evaluator\n\nevaluator = Evaluator(name = \"ogbg-molhiv\")\n# You can learn the input and output format specification of the evaluator as follows.\n# print(evaluator.expected_input_format) \n# print(evaluator.expected_output_format) \ninput_dict = {\"y_true\": y_true, \"y_pred\": y_pred}\nresult_dict = evaluator.eval(input_dict) # E.g., {\"rocauc\": 0.7321}\n```\n\n## Citing OGB\nIf you use OGB datasets in your work, please cite our paper (Bibtex below).\n```\n@article{hu2019ogb,\n  title={Open Graph Benchmark: Datasets for Machine Learning on Graphs},\n  author={Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta, Jure Leskovec},\n  journal={arXiv preprint arXiv:2005.00687},\n  year={2020}\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/snap-stanford/ogb", "keywords": "pytorch,graph machine learning,graph representation learning,graph neural networks", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ogb", "package_url": "https://pypi.org/project/ogb/", "platform": "", "project_url": "https://pypi.org/project/ogb/", "project_urls": {"Homepage": "https://github.com/snap-stanford/ogb"}, "release_url": "https://pypi.org/project/ogb/1.1.1/", "requires_dist": ["torch (>=1.2.0)", "numpy (>=1.16.0)", "tqdm (>=4.29.0)", "scikit-learn (>=0.20.0)", "pandas (>=0.24.0)", "six (>=1.12.0)", "urllib3 (>=1.24.0)"], "requires_python": "", "summary": "Open Graph Benchmark", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bbedf1e61f9dc2e75e0effdcd3eebd35045ec3b/68747470733a2f2f736e61702d7374616e666f72642e6769746875622e696f2f6f67622d7765622f6173736574732f696d672f4f47425f72656374616e676c652e706e67\" width=\"40%\">\n</p>\n<hr>\n<p><a href=\"https://pypi.org/project/ogb/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c57dac7878c6f434078627464fe32c2f20159038/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f6762\"></a>\n<a href=\"https://github.com/snap-stanford/ogb/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<h2>Overview</h2>\n<p>The Open Graph Benchmark (OGB) is a collection of benchmark datasets, data loaders, and evaluators for graph machine learning. Datasets cover a variety of graph machine learning tasks and real-world applications.\nThe OGB data loaders are fully compatible with popular graph deep learning frameworks, including <a href=\"https://pytorch-geometric.readthedocs.io/en/latest/\" rel=\"nofollow\">PyTorch Geometric</a> and <a href=\"https://www.dgl.ai/\" rel=\"nofollow\">Deep Graph Library (DGL)</a>. They provide automatic dataset downloading, standardized dataset splits, and unified performance evaluation.</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a25a588a2c4c35214a2683fadd45bd96a1ad733/68747470733a2f2f736e61702d7374616e666f72642e6769746875622e696f2f6f67622d7765622f6173736574732f696d672f6f67625f6f766572766965772e706e67\" width=\"80%\">\n</p>\n<p>OGB aims to provide graph datasets that cover important graph machine learning tasks, diverse dataset scale, and rich domains.</p>\n<p><strong>Graph ML Tasks:</strong> We cover three fundamental graph machine learning tasks: prediction at the level of nodes, links, and graphs.</p>\n<p><strong>Diverse scale:</strong> Small-scale graph datasets can be processed within a single GPU, while medium- and large-scale graphs might require multiple GPUs or clever sampling/partition techniques.</p>\n<p><strong>Rich domains:</strong> Graph datasets come from diverse domains ranging from scientific ones to social/information networks, and also include heterogeneous knowledge graphs.</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19c95b198f4db8395005926bd00d03b6ef61f777/68747470733a2f2f736e61702d7374616e666f72642e6769746875622e696f2f6f67622d7765622f6173736574732f696d672f646174617365745f6f766572766965772e706e67\" width=\"70%\">\n</p>\n<p>OGB is an on-going effort, and we are planning to increase our coverage in the future.</p>\n<h2>Installation</h2>\n<p>You can install OGB using Python's package manager <code>pip</code>.\n<strong>If you have previously installed ogb, please make sure you update the version to 1.1.1*.</strong></p>\n<h4>Requirements</h4>\n<ul>\n<li>Python&gt;=3.5</li>\n<li>PyTorch&gt;=1.2</li>\n<li>DGL&gt;=0.4.1 or torch-geometric&gt;=1.3.1</li>\n<li>Numpy&gt;=1.16.0</li>\n<li>pandas&gt;=0.24.0</li>\n<li>urllib3&gt;=1.24.0</li>\n<li>scikit-learn&gt;=0.20.0</li>\n</ul>\n<h4>Pip install</h4>\n<p>The recommended way to install OGB is using Python's package manager pip:</p>\n<pre>pip install ogb\n</pre>\n<pre>python -c <span class=\"s2\">\"import ogb; print(ogb.__version__)\"</span>\n<span class=\"c1\"># This should print \"1.1.1\". Otherwise, please update the version by</span>\npip install -U ogb\n</pre>\n<h4>From source</h4>\n<p>You can also install OGB from source. This is recommended if you want to contribute to OGB.</p>\n<pre>git clone https://github.com/snap-stanford/ogb\n<span class=\"nb\">cd</span> ogb\npython setup.py install\n</pre>\n<h2>Example</h2>\n<p>We highlight two key features of OGB, namely, (1) easy-to-use data loaders, and (2) standardized evaluators.</p>\n<h4>(1) Data loaders</h4>\n<p>We prepare easy-to-use PyTorch Geometric and DGL data loaders. We handle dataset downloading as well as standardized dataset splitting.\nBelow, on PyTorch Geometric, we see that a few lines of code is sufficient to prepare and split the dataset! Needless to say, you can enjoy the same convenience for DGL!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ogb.graphproppred</span> <span class=\"kn\">import</span> <span class=\"n\">PygGraphPropPredDataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">torch_geometric.data</span> <span class=\"kn\">import</span> <span class=\"n\">DataLoader</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">PygGraphPropPredDataset</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"ogbg-molhiv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">split_idx</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">get_idx_split</span><span class=\"p\">()</span> \n<span class=\"n\">train_loader</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"n\">split_idx</span><span class=\"p\">[</span><span class=\"s2\">\"train\"</span><span class=\"p\">]],</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">valid_loader</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"n\">split_idx</span><span class=\"p\">[</span><span class=\"s2\">\"valid\"</span><span class=\"p\">]],</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">DataLoader</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">[</span><span class=\"n\">split_idx</span><span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">]],</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h4>(2) Evaluators</h4>\n<p>We also prepare standardized evaluators for easy evaluation and comparison of different methods. The evaluator takes <code>input_dict</code> (a dictionary whose format is specified in <code>evaluator.expected_input_format</code>) as input, and returns a dictionary storing the performance metric appropriate for the given dataset.\nThe standardized evaluation protocol allows researchers to reliably compare their methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ogb.graphproppred</span> <span class=\"kn\">import</span> <span class=\"n\">Evaluator</span>\n\n<span class=\"n\">evaluator</span> <span class=\"o\">=</span> <span class=\"n\">Evaluator</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"ogbg-molhiv\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># You can learn the input and output format specification of the evaluator as follows.</span>\n<span class=\"c1\"># print(evaluator.expected_input_format) </span>\n<span class=\"c1\"># print(evaluator.expected_output_format) </span>\n<span class=\"n\">input_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"y_true\"</span><span class=\"p\">:</span> <span class=\"n\">y_true</span><span class=\"p\">,</span> <span class=\"s2\">\"y_pred\"</span><span class=\"p\">:</span> <span class=\"n\">y_pred</span><span class=\"p\">}</span>\n<span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"n\">evaluator</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">input_dict</span><span class=\"p\">)</span> <span class=\"c1\"># E.g., {\"rocauc\": 0.7321}</span>\n</pre>\n<h2>Citing OGB</h2>\n<p>If you use OGB datasets in your work, please cite our paper (Bibtex below).</p>\n<pre><code>@article{hu2019ogb,\n  title={Open Graph Benchmark: Datasets for Machine Learning on Graphs},\n  author={Weihua Hu, Matthias Fey, Marinka Zitnik, Yuxiao Dong, Hongyu Ren, Bowen Liu, Michele Catasta, Jure Leskovec},\n  journal={arXiv preprint arXiv:2005.00687},\n  year={2020}\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7168734, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bbbc93d1c11f6406b87bd27bbb8392d2", "sha256": "7ad98096caca88e9814ff4bc5d913b16f50121e2c4a6021d52ead5efce4e3d93"}, "downloads": -1, "filename": "ogb-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbbc93d1c11f6406b87bd27bbb8392d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26344, "upload_time": "2019-12-13T09:28:51", "upload_time_iso_8601": "2019-12-13T09:28:51.674210Z", "url": "https://files.pythonhosted.org/packages/fd/c3/7ac364366134044f518b96ff4b2a3f49f050430faff6c188a4322abd86f5/ogb-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f06491c262c377ae0389ba2b6cfe113", "sha256": "44fbe7d4a4e7b0ddf03789749cd43848b3b6c26024d1b505512c40ab14381c47"}, "downloads": -1, "filename": "ogb-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f06491c262c377ae0389ba2b6cfe113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14605, "upload_time": "2019-12-13T09:28:54", "upload_time_iso_8601": "2019-12-13T09:28:54.442628Z", "url": "https://files.pythonhosted.org/packages/d6/fa/30cdd69d2059b11ebd260e5e2722c20f38c2f88f7c62ca69230c21ff3244/ogb-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "879042398c85b7908e4b6d31b67e0192", "sha256": "bb70b7b28206d6791968493051c9b3c5f4972d34cc1463b8afb3d13bfd741788"}, "downloads": -1, "filename": "ogb-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "879042398c85b7908e4b6d31b67e0192", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34561, "upload_time": "2020-03-15T03:34:48", "upload_time_iso_8601": "2020-03-15T03:34:48.700427Z", "url": "https://files.pythonhosted.org/packages/9e/24/af060a35d581f1bf4d8b6a6be028e52647803b761177aeef5f1b66672a25/ogb-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "767610e4278c995c42d765b2e8b70057", "sha256": "6796f14ddf729f2dd772f470420294849f0064e13a3cb68552f3e957ef6d19b1"}, "downloads": -1, "filename": "ogb-1.0.0.tar.gz", "has_sig": false, "md5_digest": "767610e4278c995c42d765b2e8b70057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19969, "upload_time": "2020-03-15T03:34:50", "upload_time_iso_8601": "2020-03-15T03:34:50.097441Z", "url": "https://files.pythonhosted.org/packages/92/cb/0e713a45a7f0635ed98066629b4117247cad09af89320ae029ce293f9ae1/ogb-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8f20e7cfc95c63eb4435f6f2ae3ca7fb", "sha256": "17b9f4bf4d33e553794eec7ba48cb3611da7f15541f9b9acf9f62fb82362868f"}, "downloads": -1, "filename": "ogb-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8f20e7cfc95c63eb4435f6f2ae3ca7fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19891, "upload_time": "2020-03-23T09:21:03", "upload_time_iso_8601": "2020-03-23T09:21:03.308730Z", "url": "https://files.pythonhosted.org/packages/85/7e/ffda5d9089200fd5a003f814fdad4c33834983e46fd4ef39336b50419a6f/ogb-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a7c61dab029fefe25d2f1b18c5355025", "sha256": "a0fe1aa4037cbf9da7992eab12f042df9858c42dca37320da25c988d4780058c"}, "downloads": -1, "filename": "ogb-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7c61dab029fefe25d2f1b18c5355025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37444, "upload_time": "2020-05-01T22:04:08", "upload_time_iso_8601": "2020-05-01T22:04:08.720198Z", "url": "https://files.pythonhosted.org/packages/16/bd/c886989b14d29fe89601fa6fdccec3a98dbeecee02541a613f348cf26351/ogb-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6ce3e35fe9a17591b49ace265ec0704", "sha256": "01c454e9c1f7e1058e17626238551c7e5a98ec780615fda0ed802dd40ca2adf5"}, "downloads": -1, "filename": "ogb-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f6ce3e35fe9a17591b49ace265ec0704", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23322, "upload_time": "2020-05-01T22:04:10", "upload_time_iso_8601": "2020-05-01T22:04:10.138122Z", "url": "https://files.pythonhosted.org/packages/a7/e3/ce6ab5482cd5bb41d22461d73c7a09b12b8e71bd9b3a34a9e522f7a7f89e/ogb-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "11f9f9c98d5bd48ba1bc5206d4b8d244", "sha256": "159cccae252040319730093f79eacfd9c0353443fb0e5cb8f43d50eef907d2fd"}, "downloads": -1, "filename": "ogb-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "11f9f9c98d5bd48ba1bc5206d4b8d244", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39489, "upload_time": "2020-05-05T00:45:25", "upload_time_iso_8601": "2020-05-05T00:45:25.501976Z", "url": "https://files.pythonhosted.org/packages/ba/8b/2d14458635bba4fbdb95d56ac35e0f62161aa90e521eb3687c3c4c8b9ced/ogb-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c36785857e2f0cc550fca31dfb75fe0f", "sha256": "be2d1127566fa37a2ea6e6bb6aab74e874839985bb2712e241d67ef4c92a3cb4"}, "downloads": -1, "filename": "ogb-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c36785857e2f0cc550fca31dfb75fe0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24657, "upload_time": "2020-05-05T00:45:26", "upload_time_iso_8601": "2020-05-05T00:45:26.823783Z", "url": "https://files.pythonhosted.org/packages/51/97/61861b8a8a31ea4db5945dac5acc83d906516faf36d6699ba4bb6cb164cb/ogb-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11f9f9c98d5bd48ba1bc5206d4b8d244", "sha256": "159cccae252040319730093f79eacfd9c0353443fb0e5cb8f43d50eef907d2fd"}, "downloads": -1, "filename": "ogb-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "11f9f9c98d5bd48ba1bc5206d4b8d244", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39489, "upload_time": "2020-05-05T00:45:25", "upload_time_iso_8601": "2020-05-05T00:45:25.501976Z", "url": "https://files.pythonhosted.org/packages/ba/8b/2d14458635bba4fbdb95d56ac35e0f62161aa90e521eb3687c3c4c8b9ced/ogb-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c36785857e2f0cc550fca31dfb75fe0f", "sha256": "be2d1127566fa37a2ea6e6bb6aab74e874839985bb2712e241d67ef4c92a3cb4"}, "downloads": -1, "filename": "ogb-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c36785857e2f0cc550fca31dfb75fe0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24657, "upload_time": "2020-05-05T00:45:26", "upload_time_iso_8601": "2020-05-05T00:45:26.823783Z", "url": "https://files.pythonhosted.org/packages/51/97/61861b8a8a31ea4db5945dac5acc83d906516faf36d6699ba4bb6cb164cb/ogb-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:54 2020"}