{"info": {"author": "Netlandish Inc.", "author_email": "hello@netlandish.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. |nlshield| image:: https://img.shields.io/badge/100%25-Netlandish-blue.svg?style=square-flat\n              :target: https://www.netlandish.com\n\n================================\ndjango-json-settings2 |nlshield|\n================================\n:Info: Simple application to store Django settings in a json file.\n:Version: 0.1.0\n:Author: Team Netlandish (https://www.netlandish.com)\n\nPython / Django Support\n=======================\n\n* Python 3.6+ for Django versions 1.11+\n\nTruthfully, this app is so simple it will probably work with previous \nversion of Python and Django but we can't promise that.\n\nWhy?\n====\n\nI know, right? Who needs another way to store settings outside of the \nstandard Django ``settings.py`` setup.\n\nNone of the existing ways actually fit our typical Django deployment \nsetup in a way that was satisfactory. This method allows us to store \nsettings externally and in a way that fits our needs. Maybe it'll \nfit yours too.\n\nAlso, there is already a ``django-json-settings`` app and while that app \nvery well may be perfect for your project, it isn't a good fit for ours.\n\nWe created this app years ago and simply tuned it slowly as needed. It's \nvery simple yet flexible enough to work within virtually any workflow.\n\nThis app is really nothing more than helper functins wrapped on top \nof standard ``json`` module ops.\n\nOthers\n======\n\nThere are several other options to store settings outside of the typical\nDjango ``settings.py`` file. Here are a few:\n\n* https://github.com/isotoma/django-json-settings\n* https://github.com/theskumar/python-dotenv\n\nThere's dozens of others. Pick the one that best suits your needs.\n\nUsage\n=====\n\nSaving Settings\n---------------\n\nYou're going to need to save your desired settings to a json file \nfirst. There's a simple helper function, and management command, \nincluded to help.\n\nFor instance, say you want to create a simple setting for your ``SECRET_KEY`` \nvariable::\n\n    $ python\n    >>> settings_to_save = ['SECRET_KEY']\n    >>> from json_settings2 import write_settings_from_django\n    >>> write_settings_from_django(*settings_to_save)\n    >>> exit()\n    $ cat .settings.json\n    {\n        \"SECRET_KEY\": \"SUPER SECRET KEY IS HERE! COOOOOOOLLLLL!\"\n    }\n    $\n\nThe ``write_settings_from_django`` function takes a few optional variables:\n\n* settings_vars = Positional args giving every Django setting to save\n* filename = Filename of the json settings file. Defaults to ``.settings.json``\n* directory = Directory in which to save ``filename``. Defaults to ``.``.\n* indent = Indentation level for the json output. Set to ``None`` for the most \n           compact file. Defaults to ``4``.\n* force = If ``directory``/``filename`` exists, overwrite it. \n          Defaults to ``False``\n\nYou can also just use the management command. This requires that you place\n``json_settings2`` in your ``INSTALLED_APPS`` setting::\n\n    $ python manage.py write_json_settings SECRET_KEY\n\nYou can add as many settings as you'd like too::\n\n    $ python manage.py write_json_settings SECRET_KEY DATABASES STATIC_URL\n\nTo see the options, simply::\n\n    $ python manage.py help write_json_settings\n\nLoading Settings\n----------------\n\nThe easiest way is to store all your default and local settings in \n``settings.py`` and load the json settings at the end. It's pretty \nstraight forward. Let's see an example::\n\n    $ cat settings.py\n    import os\n    from json_settings2 import load_settings\n\n    DEBUG = True\n    STATIC_URL = '/static/'\n    ... LOTS OF OTHERS SETTINGS HERE ...\n\n    SETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))\n    load_settings(globals(), directory=SETTINGS_DIR, depth=3)\n\nEssentially this will tell the function to look for the settings file \nstarting in the same directory as ``settings.py`` and if not found, \nlook up to 3 levels higher in the directory tree. So let's say the \npath if your ``settings.py`` file is ``/home/user/app/current/code/settings.py``\n\nThe ``load_settings`` function will search the following paths for \n``.settings.json``:\n\n* ``/home/user/app/current/code/``\n* ``/home/user/app/current/``\n* ``/home/user/app/``\n* ``/home/user/``\n\nUseful if you want to store your settings outside of the code deployment \ndirectories, which is often the case.\n\nThe ``load_settings`` function takes the following variables:\n\n* current_settings - Dictionary that will be updated with found settings. \n                     Generally you'd pass in ``globals()``.\n* filename - Name of json file with settings. Defaults to ``.settings.json``\n* directory - Path of the directory where ``filename`` lives. Defaults to ``.``.\n* depth - Number of parent directories to scan for ``filename``. Defaults to ``0``.\n* store = Store settings into the ``current_settings`` dict. Defaults to ``True``.\n\nIf ``store`` is set to ``False`` then the ``current_settings`` dict will not \nbe altered.\n\nThe function will always return the pythonic representation of what was found \nin the json settings file.\n\n**Note on directory** - By default, the ``directory`` variable above is \nset to ``.`` - meaning current directory. This usually means the directory\nwhere you started the Python interpreter or are running ``manage.py`` from.\nThis is usually NOT what you want. It's best practice to always set the \nexpected directory to avoid troubleshooting headaches.\n\nWhat Is Used As a Setting?\n--------------------------\n\nWhen calling ``load_settings`` you can include extra data in your json \nsettings file that is useful for other puposes in your code but is not \nsomething you want cluttering your ``django.conf.settings`` object.\n\nOnly keys that are stored in all capital letters will be stored\nto the ``current_settings`` dict. So if your json settings has options \nthat are not all caps, they will only be returned as part of the loaded \njson data.\n\nIn other words, say you ``load_settings`` on the following data::\n\n    {\n        \"SeCreT_Key\": \"This will not be saved in Django settings.\",\n        \"SECRET_KEY\": \"This WILL be saved in Django settings.\",\n        \"secret_key\": :This will not be saved in Django settings.\"\n    }\n\nYour ``SECRET_KEY`` setting will be set to ``This WILL be saved in Django settings.``\n\nWhere To Load Settings?\n-----------------------\n\nNormally you can place it at the bottom of the ``settings.py`` file. \nHowever, there are often times that you need those settings to guide \nthe values of other settings.\n\nThere is nothing stopping you from loading your json settings from \nanywhere in the process. It's up to you. Just remember that if you \nload your settings and then set a duplicate variable AFTER loading \nthe json settings, the duplicate variable will have the final say.\n\nFor example::\n\n    $ cat .setting.json\n    {\n        \"STATIC_URL\": \"/my/cool/static/url/\"\n    }\n    $ cat settings.py\n    import os\n    from json_settings2 import load_settings\n\n    SETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))\n    load_settings(globals(), directory=SETTINGS_DIR, depth=3)\n\n    DEBUG = True\n    STATIC_URL = '/static/'\n    ... LOTS OF OTHERS SETTINGS HERE ...\n\nThe value of your ``STATIC_URL`` setting will be set to ``/static/`` when \nyou might be expecting it to be ``/my/cool/static/url/``. Just a heads up.\n\nCopyright & Warranty\n====================\nAll documentation, libraries, and sample code are\nCopyright 2019 Netlandish Inc. <hello@netlandish.com>. The library and\nsample code are made available to you under the terms of the BSD license\nwhich is contained in the included file, BSD-LICENSE.\n\n\n==================\nCommercial Support\n==================\n\nThis software, and lots of other software like it, has been built in support of many of\nNetlandish's own projects, and the projects of our clients. We would love to help you\non your next project so get in touch by dropping us a note at hello@netlandish.com.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/netlandish/django-json-settings2/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-json-settings2", "package_url": "https://pypi.org/project/django-json-settings2/", "platform": "any", "project_url": "https://pypi.org/project/django-json-settings2/", "project_urls": {"Homepage": "https://bitbucket.org/netlandish/django-json-settings2/"}, "release_url": "https://pypi.org/project/django-json-settings2/0.1/", "requires_dist": null, "requires_python": "", "summary": "Set, and save, Django settings to json formatted files.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-json-settings2-nlshield\">\n<h2>django-json-settings2 <a href=\"https://www.netlandish.com\" rel=\"nofollow\"><img alt=\"nlshield\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ce359948d1e89dc00a6f5d51100e32d34bfe6f4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f3130302532352d4e65746c616e646973682d626c75652e7376673f7374796c653d7371756172652d666c6174\"></a></h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Info:</th><td>Simple application to store Django settings in a json file.</td>\n</tr>\n<tr><th>Version:</th><td>0.1.0</td>\n</tr>\n<tr><th>Author:</th><td>Team Netlandish (<a href=\"https://www.netlandish.com\" rel=\"nofollow\">https://www.netlandish.com</a>)</td>\n</tr>\n</tbody>\n</table>\n<div id=\"python-django-support\">\n<h3>Python / Django Support</h3>\n<ul>\n<li>Python 3.6+ for Django versions 1.11+</li>\n</ul>\n<p>Truthfully, this app is so simple it will probably work with previous\nversion of Python and Django but we can\u2019t promise that.</p>\n</div>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>I know, right? Who needs another way to store settings outside of the\nstandard Django <tt>settings.py</tt> setup.</p>\n<p>None of the existing ways actually fit our typical Django deployment\nsetup in a way that was satisfactory. This method allows us to store\nsettings externally and in a way that fits our needs. Maybe it\u2019ll\nfit yours too.</p>\n<p>Also, there is already a <tt><span class=\"pre\">django-json-settings</span></tt> app and while that app\nvery well may be perfect for your project, it isn\u2019t a good fit for ours.</p>\n<p>We created this app years ago and simply tuned it slowly as needed. It\u2019s\nvery simple yet flexible enough to work within virtually any workflow.</p>\n<p>This app is really nothing more than helper functins wrapped on top\nof standard <tt>json</tt> module ops.</p>\n</div>\n<div id=\"others\">\n<h3>Others</h3>\n<p>There are several other options to store settings outside of the typical\nDjango <tt>settings.py</tt> file. Here are a few:</p>\n<ul>\n<li><a href=\"https://github.com/isotoma/django-json-settings\" rel=\"nofollow\">https://github.com/isotoma/django-json-settings</a></li>\n<li><a href=\"https://github.com/theskumar/python-dotenv\" rel=\"nofollow\">https://github.com/theskumar/python-dotenv</a></li>\n</ul>\n<p>There\u2019s dozens of others. Pick the one that best suits your needs.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"saving-settings\">\n<h4>Saving Settings</h4>\n<p>You\u2019re going to need to save your desired settings to a json file\nfirst. There\u2019s a simple helper function, and management command,\nincluded to help.</p>\n<p>For instance, say you want to create a simple setting for your <tt>SECRET_KEY</tt>\nvariable:</p>\n<pre>$ python\n&gt;&gt;&gt; settings_to_save = ['SECRET_KEY']\n&gt;&gt;&gt; from json_settings2 import write_settings_from_django\n&gt;&gt;&gt; write_settings_from_django(*settings_to_save)\n&gt;&gt;&gt; exit()\n$ cat .settings.json\n{\n    \"SECRET_KEY\": \"SUPER SECRET KEY IS HERE! COOOOOOOLLLLL!\"\n}\n$\n</pre>\n<p>The <tt>write_settings_from_django</tt> function takes a few optional variables:</p>\n<ul>\n<li>settings_vars = Positional args giving every Django setting to save</li>\n<li>filename = Filename of the json settings file. Defaults to <tt>.settings.json</tt></li>\n<li>directory = Directory in which to save <tt>filename</tt>. Defaults to <tt>.</tt>.</li>\n<li><dl>\n<dt>indent = Indentation level for the json output. Set to <tt>None</tt> for the most</dt>\n<dd>compact file. Defaults to <tt>4</tt>.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>force = If <tt>directory</tt>/<tt>filename</tt> exists, overwrite it.</dt>\n<dd>Defaults to <tt>False</tt></dd>\n</dl>\n</li>\n</ul>\n<p>You can also just use the management command. This requires that you place\n<tt>json_settings2</tt> in your <tt>INSTALLED_APPS</tt> setting:</p>\n<pre>$ python manage.py write_json_settings SECRET_KEY\n</pre>\n<p>You can add as many settings as you\u2019d like too:</p>\n<pre>$ python manage.py write_json_settings SECRET_KEY DATABASES STATIC_URL\n</pre>\n<p>To see the options, simply:</p>\n<pre>$ python manage.py help write_json_settings\n</pre>\n</div>\n<div id=\"loading-settings\">\n<h4>Loading Settings</h4>\n<p>The easiest way is to store all your default and local settings in\n<tt>settings.py</tt> and load the json settings at the end. It\u2019s pretty\nstraight forward. Let\u2019s see an example:</p>\n<pre>$ cat settings.py\nimport os\nfrom json_settings2 import load_settings\n\nDEBUG = True\nSTATIC_URL = '/static/'\n... LOTS OF OTHERS SETTINGS HERE ...\n\nSETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))\nload_settings(globals(), directory=SETTINGS_DIR, depth=3)\n</pre>\n<p>Essentially this will tell the function to look for the settings file\nstarting in the same directory as <tt>settings.py</tt> and if not found,\nlook up to 3 levels higher in the directory tree. So let\u2019s say the\npath if your <tt>settings.py</tt> file is <tt>/home/user/app/current/code/settings.py</tt></p>\n<p>The <tt>load_settings</tt> function will search the following paths for\n<tt>.settings.json</tt>:</p>\n<ul>\n<li><tt>/home/user/app/current/code/</tt></li>\n<li><tt>/home/user/app/current/</tt></li>\n<li><tt>/home/user/app/</tt></li>\n<li><tt>/home/user/</tt></li>\n</ul>\n<p>Useful if you want to store your settings outside of the code deployment\ndirectories, which is often the case.</p>\n<p>The <tt>load_settings</tt> function takes the following variables:</p>\n<ul>\n<li><dl>\n<dt>current_settings - Dictionary that will be updated with found settings.</dt>\n<dd>Generally you\u2019d pass in <tt>globals()</tt>.</dd>\n</dl>\n</li>\n<li>filename - Name of json file with settings. Defaults to <tt>.settings.json</tt></li>\n<li>directory - Path of the directory where <tt>filename</tt> lives. Defaults to <tt>.</tt>.</li>\n<li>depth - Number of parent directories to scan for <tt>filename</tt>. Defaults to <tt>0</tt>.</li>\n<li>store = Store settings into the <tt>current_settings</tt> dict. Defaults to <tt>True</tt>.</li>\n</ul>\n<p>If <tt>store</tt> is set to <tt>False</tt> then the <tt>current_settings</tt> dict will not\nbe altered.</p>\n<p>The function will always return the pythonic representation of what was found\nin the json settings file.</p>\n<p><strong>Note on directory</strong> - By default, the <tt>directory</tt> variable above is\nset to <tt>.</tt> - meaning current directory. This usually means the directory\nwhere you started the Python interpreter or are running <tt>manage.py</tt> from.\nThis is usually NOT what you want. It\u2019s best practice to always set the\nexpected directory to avoid troubleshooting headaches.</p>\n</div>\n<div id=\"what-is-used-as-a-setting\">\n<h4>What Is Used As a Setting?</h4>\n<p>When calling <tt>load_settings</tt> you can include extra data in your json\nsettings file that is useful for other puposes in your code but is not\nsomething you want cluttering your <tt>django.conf.settings</tt> object.</p>\n<p>Only keys that are stored in all capital letters will be stored\nto the <tt>current_settings</tt> dict. So if your json settings has options\nthat are not all caps, they will only be returned as part of the loaded\njson data.</p>\n<p>In other words, say you <tt>load_settings</tt> on the following data:</p>\n<pre>{\n    \"SeCreT_Key\": \"This will not be saved in Django settings.\",\n    \"SECRET_KEY\": \"This WILL be saved in Django settings.\",\n    \"secret_key\": :This will not be saved in Django settings.\"\n}\n</pre>\n<p>Your <tt>SECRET_KEY</tt> setting will be set to <tt>This WILL be saved in Django settings.</tt></p>\n</div>\n<div id=\"where-to-load-settings\">\n<h4>Where To Load Settings?</h4>\n<p>Normally you can place it at the bottom of the <tt>settings.py</tt> file.\nHowever, there are often times that you need those settings to guide\nthe values of other settings.</p>\n<p>There is nothing stopping you from loading your json settings from\nanywhere in the process. It\u2019s up to you. Just remember that if you\nload your settings and then set a duplicate variable AFTER loading\nthe json settings, the duplicate variable will have the final say.</p>\n<p>For example:</p>\n<pre>$ cat .setting.json\n{\n    \"STATIC_URL\": \"/my/cool/static/url/\"\n}\n$ cat settings.py\nimport os\nfrom json_settings2 import load_settings\n\nSETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))\nload_settings(globals(), directory=SETTINGS_DIR, depth=3)\n\nDEBUG = True\nSTATIC_URL = '/static/'\n... LOTS OF OTHERS SETTINGS HERE ...\n</pre>\n<p>The value of your <tt>STATIC_URL</tt> setting will be set to <tt>/static/</tt> when\nyou might be expecting it to be <tt>/my/cool/static/url/</tt>. Just a heads up.</p>\n</div>\n</div>\n<div id=\"copyright-warranty\">\n<h3>Copyright &amp; Warranty</h3>\n<p>All documentation, libraries, and sample code are\nCopyright 2019 Netlandish Inc. &lt;<a href=\"mailto:hello%40netlandish.com\">hello<span>@</span>netlandish<span>.</span>com</a>&gt;. The library and\nsample code are made available to you under the terms of the BSD license\nwhich is contained in the included file, BSD-LICENSE.</p>\n</div>\n</div>\n<div id=\"commercial-support\">\n<h2>Commercial Support</h2>\n<p>This software, and lots of other software like it, has been built in support of many of\nNetlandish\u2019s own projects, and the projects of our clients. We would love to help you\non your next project so get in touch by dropping us a note at <a href=\"mailto:hello%40netlandish.com\">hello<span>@</span>netlandish<span>.</span>com</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5299551, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4235370622c584c704ac22254f480fc6", "sha256": "249c47774c515977d65730a926c8ac35f79930f6a8e9ded56501e048088bb770"}, "downloads": -1, "filename": "django-json-settings2-0.1.tar.gz", "has_sig": false, "md5_digest": "4235370622c584c704ac22254f480fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7450, "upload_time": "2019-05-21T20:02:47", "upload_time_iso_8601": "2019-05-21T20:02:47.113846Z", "url": "https://files.pythonhosted.org/packages/5f/fc/d62554ce5538d8ee78b6c4c32a8732ba2bc6693294242951daa43329166e/django-json-settings2-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4235370622c584c704ac22254f480fc6", "sha256": "249c47774c515977d65730a926c8ac35f79930f6a8e9ded56501e048088bb770"}, "downloads": -1, "filename": "django-json-settings2-0.1.tar.gz", "has_sig": false, "md5_digest": "4235370622c584c704ac22254f480fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7450, "upload_time": "2019-05-21T20:02:47", "upload_time_iso_8601": "2019-05-21T20:02:47.113846Z", "url": "https://files.pythonhosted.org/packages/5f/fc/d62554ce5538d8ee78b6c4c32a8732ba2bc6693294242951daa43329166e/django-json-settings2-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:28 2020"}