{"info": {"author": "Hiromu Ochiai", "author_email": "otiai10@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "- [dataviper](#dataviper)\n- [Example](#example)\n- [Why?](#why)\n- [Data Sources](#data-sources)\n- [APIs](#apis)\n  - [`profile`](#profile)\n  - [`pivot`](#pivot)\n  - [`joinability`](#joinability)\n- [Issues and TODOs](#issues-and-todos)\n\n---\n\n# dataviper\n\n[![PyPI version](https://badge.fury.io/py/dataviper.svg)](https://badge.fury.io/py/dataviper)\n[![GitHub Action](https://github.com/otiai10/dataviper/workflows/Python%20package/badge.svg)](https://github.com/otiai10/dataviper/actions)\n[![codecov](https://codecov.io/gh/otiai10/dataviper/branch/master/graph/badge.svg)](https://codecov.io/gh/otiai10/dataviper)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](./dockerfiles/setup.Python3.6.Dockerfile)\n\n`dataviper` is a SQL-based tool to get the basic data preparation done in easy way, with doing\n\n- Create \"Data Profile\" report of a table\n- One-hot encode for \"Categorical Columns\" and create a \"one-hot\" table\n- Check \"Joinability\" between 2 tables\n- // TODO: and more\n\n# Example\n\n```sh\npip install dataviper\n```\n\nYour `main.py` will look like this\n\n```python\nfrom dataviper import Client\nfrom dataviper.source import MySQL\n\nclient = Client(source=MySQL({\n    'host': 'localhost',\n    'user': 'root',\n    'password': 'xxxxxx',\n    'database': 'your_database'\n}))\n\nwith client.connect():\n    profile = client.profile('Your_Table')\n    profile.to_excel()\n```\n\n```sh\npython3 main.py\n# Then you will get 'profile_Your_Table.xlsx' \ud83e\udd17\n```\n\n![image](https://user-images.githubusercontent.com/931554/79642622-00b70900-819f-11ea-89ff-524c9c93ceea.png)\n\n# Why?\n\nIt's known that \"Data Profiling\" needs to be done with scanning all the rows in a table. If you try to do this naively by `pandas` or any libraries which internally use `pandas`, it's not avoidable to use bunch of memory of your local machine and freeze your work.\n\n`dataviper` is a SQL-based Data Profiling tool, which simply and dynamically generates SQLs and lets the database machine do the annoying calculation.\n\nWith `dataviper`, you don't have to have massive local computer. All you need are a stable network and reachable SQL db.\n\n# Data Sources\n\nYou can choose your data source from\n\n- [ ] SQL Server\n    - [x] `profile`\n    - [x] `pivot`\n    - [x] `joinability`\n    - [ ] `histogram`\n- [ ] MySQL\n    - [x] `profile`\n    - [ ] `pivot`\n    - [ ] `joinability`\n    - [ ] `histogram`\n- [ ] PostgreSQL\n- [ ] CSV\n    - [x] `profile`\n    - [ ] `pivot`\n    - [ ] `joinability`\n    - [ ] `histogram`\n- [ ] Excel\n\n# APIs\n\n## `profile`\n\nCreate \"Data Profile\" excel file of a specified table.\n\nWhen you have `Sales` table like this\n\n| id | region | sales_type | price | rep_id |\n|:---:|:--------:|:----------:|:---------:|:-------:|\n| 1 | jp | phone | 240 | 115723 |\n| 2 | us | web | 90 |    125901 |\n| 3 | jp | web | 560 |     8003 |\n| 4 | us | shop | 920 |  182234 |\n| 5 | jp | NULL | 90 |    92231 |\n| 6 | us | shop | 180 |  100425 |\n| 7 | us | shop | 70 |    52934 |\n\ndo\n\n```python\nwith client.connect() as conn:\n    table_name = 'Sales'\n    profile = client.profile(table_name, example_count=3)\n    profile.to_excel()\n```\n\nthen you will get `profile_Sales.xlsx` file with\n\n| column_name | data_type | null_count | null_% | unique_count | unique_% | min | max | avg | std | example_top_3 | example_last_3 |\n|:-----------:|:----------:|:----------:|:------:|:------------:|:-------:|:---:|:---:|:----:|:---:|:------------:|:--------------:|\n| id         | bigint  | 0 | 0     | 7 | 100.00 | 1 | 7 | 4.0 | 2.0 | [1,2,3]         | [5,6,7]          |\n| region     | varchar | 0 | 0     | 2 | 28.57  |   |   |     |     | [jp,us,jp]      | [jp,us,us]       |\n| sales_type | varchar | 1 | 14.28 | 3 | 42.85  |   |   |     |     | [phone,web,web] | [None,shop,shop] |\n| price      | int     | 0 | 0     | 6 | 85.71  | 70 | 920 | 307.1428 | 295.379 | [240,90,560] | [90,180,70] |\n| rep_id     | int     | 0 | 0     | 7 | 100.00 | 8003 |182234 | 96778.7142 | 51195.79065 | [115723,125901,8003] | [92231,100425,52934] |\n\n## `pivot`\n\nSpread categorical columns to N binary columns.\n\nWhen you have `Sales` table like above, do\n\n```python\nwith client.connect() as conn:\n    table_name = 'Sales'\n    key = 'id'\n    categorical_columns = ['region', 'sales_type']\n    profile = client.get_schema(table_name)\n    client.pivot(profile, key, categorical_columns)\n```\n\nthen you will get `Sales_PIVOT_YYYYmmddHHMM` table with\n\n| id | region_jp | region_us | sales_type_phone | sales_type_web | sales_type_shop |\n|:--:|:---------:|:---------:|:----------------:|:--------------:|:---------------:|\n| 1  |  1        | 0         | 1                | 0              | 0               |\n| 2  |  0        | 1         | 0                | 1              | 0               |\n| 3  |  1        | 0         | 0                | 1              | 0               |\n| 4  |  0        | 1         | 0                | 0              | 1               |\n| 5  |  1        | 0         | 0                | 0              | 0               |\n| 6  |  0        | 1         | 0                | 0              | 1               |\n| 7  |  0        | 1         | 0                | 0              | 1               |\n\n## `joinability`\n\nCount how much 2 tables can be joined.\n\nWhen you have `Sales` table like above, and `Reps` table like this\n\n| id     | name    | tenure |\n|:------:|:-------:|:------:|\n| 8003   | Hiromu  | 9      |\n| 8972   | Ochiai  | 6      |\n| 52934  | Taro    | 1      |\n| 92231  | otiai10 | 2      |\n| 100425 | Hanako  | 7      |\n| 125901 | Chika   | 3      |\n| 182234 | Mary    | 5      |\n| 199621 | Jack    | 1      |\n\ndo\n\n```python\nwith client.connect() as conn:\n    report = client.joinability(on={'Sales': 'rep_id', 'Reps': 'id'})\n    report.to_excel()\n```\n\nthen you will get `join_Sales_Reps.xlsx` file with\n\n| table | key      | total | match | match_% | drop | drop_% |\n|:------:|:-------:|:------:|:-----:|:------:|:-----:|:------:|\n| Sales | [rep_id] | 7 | 6 | 85.714 | 1 | 14.285 |\n| Reps  | [id]     | 8 | 6 | 75.00 | 2 | 25.00 |\n\n# Issues and TODOs\n\n- https://github.com/otiai10/dataviper/issues", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/otiai10/dataviper", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dataviper", "package_url": "https://pypi.org/project/dataviper/", "platform": "", "project_url": "https://pypi.org/project/dataviper/", "project_urls": {"Homepage": "https://github.com/otiai10/dataviper"}, "release_url": "https://pypi.org/project/dataviper/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "A simple Data Quality Assessment Tool based on SQL", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li><a href=\"#dataviper\" rel=\"nofollow\">dataviper</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#why\" rel=\"nofollow\">Why?</a></li>\n<li><a href=\"#data-sources\" rel=\"nofollow\">Data Sources</a></li>\n<li><a href=\"#apis\" rel=\"nofollow\">APIs</a>\n<ul>\n<li><a href=\"#profile\" rel=\"nofollow\"><code>profile</code></a></li>\n<li><a href=\"#pivot\" rel=\"nofollow\"><code>pivot</code></a></li>\n<li><a href=\"#joinability\" rel=\"nofollow\"><code>joinability</code></a></li>\n</ul>\n</li>\n<li><a href=\"#issues-and-todos\" rel=\"nofollow\">Issues and TODOs</a></li>\n</ul>\n<hr>\n<h1>dataviper</h1>\n<p><a href=\"https://badge.fury.io/py/dataviper\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/760ca4b4c00669421006c4624cc8c28dcd7a1afd/68747470733a2f2f62616467652e667572792e696f2f70792f6461746176697065722e737667\"></a>\n<a href=\"https://github.com/otiai10/dataviper/actions\" rel=\"nofollow\"><img alt=\"GitHub Action\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15cf8f278fa0295676b1b303b55d2dd0baa27c59/68747470733a2f2f6769746875622e636f6d2f6f7469616931302f6461746176697065722f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/otiai10/dataviper\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/144bd21f29f7c4ecfffb343660964aec05d6ea73/68747470733a2f2f636f6465636f762e696f2f67682f6f7469616931302f6461746176697065722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"./dockerfiles/setup.Python3.6.Dockerfile\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a></p>\n<p><code>dataviper</code> is a SQL-based tool to get the basic data preparation done in easy way, with doing</p>\n<ul>\n<li>Create \"Data Profile\" report of a table</li>\n<li>One-hot encode for \"Categorical Columns\" and create a \"one-hot\" table</li>\n<li>Check \"Joinability\" between 2 tables</li>\n<li>// TODO: and more</li>\n</ul>\n<h1>Example</h1>\n<pre>pip install dataviper\n</pre>\n<p>Your <code>main.py</code> will look like this</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataviper</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataviper.source</span> <span class=\"kn\">import</span> <span class=\"n\">MySQL</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">MySQL</span><span class=\"p\">({</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'root'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'xxxxxx'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'your_database'</span>\n<span class=\"p\">}))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">():</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"s1\">'Your_Table'</span><span class=\"p\">)</span>\n    <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">to_excel</span><span class=\"p\">()</span>\n</pre>\n<pre>python3 main.py\n<span class=\"c1\"># Then you will get 'profile_Your_Table.xlsx' \ud83e\udd17</span>\n</pre>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36472c87218c9e049c4665b1889b7d1c69599eb8/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3933313535342f37393634323632322d30306237303930302d383139662d313165612d383966662d3532346339633933636565612e706e67\"></p>\n<h1>Why?</h1>\n<p>It's known that \"Data Profiling\" needs to be done with scanning all the rows in a table. If you try to do this naively by <code>pandas</code> or any libraries which internally use <code>pandas</code>, it's not avoidable to use bunch of memory of your local machine and freeze your work.</p>\n<p><code>dataviper</code> is a SQL-based Data Profiling tool, which simply and dynamically generates SQLs and lets the database machine do the annoying calculation.</p>\n<p>With <code>dataviper</code>, you don't have to have massive local computer. All you need are a stable network and reachable SQL db.</p>\n<h1>Data Sources</h1>\n<p>You can choose your data source from</p>\n<ul>\n<li>[ ] SQL Server\n<ul>\n<li>[x] <code>profile</code></li>\n<li>[x] <code>pivot</code></li>\n<li>[x] <code>joinability</code></li>\n<li>[ ] <code>histogram</code></li>\n</ul>\n</li>\n<li>[ ] MySQL\n<ul>\n<li>[x] <code>profile</code></li>\n<li>[ ] <code>pivot</code></li>\n<li>[ ] <code>joinability</code></li>\n<li>[ ] <code>histogram</code></li>\n</ul>\n</li>\n<li>[ ] PostgreSQL</li>\n<li>[ ] CSV\n<ul>\n<li>[x] <code>profile</code></li>\n<li>[ ] <code>pivot</code></li>\n<li>[ ] <code>joinability</code></li>\n<li>[ ] <code>histogram</code></li>\n</ul>\n</li>\n<li>[ ] Excel</li>\n</ul>\n<h1>APIs</h1>\n<h2><code>profile</code></h2>\n<p>Create \"Data Profile\" excel file of a specified table.</p>\n<p>When you have <code>Sales</code> table like this</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">region</th>\n<th align=\"center\">sales_type</th>\n<th align=\"center\">price</th>\n<th align=\"center\">rep_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">jp</td>\n<td align=\"center\">phone</td>\n<td align=\"center\">240</td>\n<td align=\"center\">115723</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">us</td>\n<td align=\"center\">web</td>\n<td align=\"center\">90</td>\n<td align=\"center\">125901</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">jp</td>\n<td align=\"center\">web</td>\n<td align=\"center\">560</td>\n<td align=\"center\">8003</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">us</td>\n<td align=\"center\">shop</td>\n<td align=\"center\">920</td>\n<td align=\"center\">182234</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">jp</td>\n<td align=\"center\">NULL</td>\n<td align=\"center\">90</td>\n<td align=\"center\">92231</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">us</td>\n<td align=\"center\">shop</td>\n<td align=\"center\">180</td>\n<td align=\"center\">100425</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">us</td>\n<td align=\"center\">shop</td>\n<td align=\"center\">70</td>\n<td align=\"center\">52934</td>\n</tr></tbody></table>\n<p>do</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Sales'</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"p\">,</span> <span class=\"n\">example_count</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">to_excel</span><span class=\"p\">()</span>\n</pre>\n<p>then you will get <code>profile_Sales.xlsx</code> file with</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">column_name</th>\n<th align=\"center\">data_type</th>\n<th align=\"center\">null_count</th>\n<th align=\"center\">null_%</th>\n<th align=\"center\">unique_count</th>\n<th align=\"center\">unique_%</th>\n<th align=\"center\">min</th>\n<th align=\"center\">max</th>\n<th align=\"center\">avg</th>\n<th align=\"center\">std</th>\n<th align=\"center\">example_top_3</th>\n<th align=\"center\">example_last_3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">id</td>\n<td align=\"center\">bigint</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">7</td>\n<td align=\"center\">100.00</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">4.0</td>\n<td align=\"center\">2.0</td>\n<td align=\"center\">[1,2,3]</td>\n<td align=\"center\">[5,6,7]</td>\n</tr>\n<tr>\n<td align=\"center\">region</td>\n<td align=\"center\">varchar</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n<td align=\"center\">28.57</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">[jp,us,jp]</td>\n<td align=\"center\">[jp,us,us]</td>\n</tr>\n<tr>\n<td align=\"center\">sales_type</td>\n<td align=\"center\">varchar</td>\n<td align=\"center\">1</td>\n<td align=\"center\">14.28</td>\n<td align=\"center\">3</td>\n<td align=\"center\">42.85</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">[phone,web,web]</td>\n<td align=\"center\">[None,shop,shop]</td>\n</tr>\n<tr>\n<td align=\"center\">price</td>\n<td align=\"center\">int</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">6</td>\n<td align=\"center\">85.71</td>\n<td align=\"center\">70</td>\n<td align=\"center\">920</td>\n<td align=\"center\">307.1428</td>\n<td align=\"center\">295.379</td>\n<td align=\"center\">[240,90,560]</td>\n<td align=\"center\">[90,180,70]</td>\n</tr>\n<tr>\n<td align=\"center\">rep_id</td>\n<td align=\"center\">int</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">7</td>\n<td align=\"center\">100.00</td>\n<td align=\"center\">8003</td>\n<td align=\"center\">182234</td>\n<td align=\"center\">96778.7142</td>\n<td align=\"center\">51195.79065</td>\n<td align=\"center\">[115723,125901,8003]</td>\n<td align=\"center\">[92231,100425,52934]</td>\n</tr></tbody></table>\n<h2><code>pivot</code></h2>\n<p>Spread categorical columns to N binary columns.</p>\n<p>When you have <code>Sales</code> table like above, do</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">table_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Sales'</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">'id'</span>\n    <span class=\"n\">categorical_columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'region'</span><span class=\"p\">,</span> <span class=\"s1\">'sales_type'</span><span class=\"p\">]</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_schema</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">pivot</span><span class=\"p\">(</span><span class=\"n\">profile</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">categorical_columns</span><span class=\"p\">)</span>\n</pre>\n<p>then you will get <code>Sales_PIVOT_YYYYmmddHHMM</code> table with</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">region_jp</th>\n<th align=\"center\">region_us</th>\n<th align=\"center\">sales_type_phone</th>\n<th align=\"center\">sales_type_web</th>\n<th align=\"center\">sales_type_shop</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr></tbody></table>\n<h2><code>joinability</code></h2>\n<p>Count how much 2 tables can be joined.</p>\n<p>When you have <code>Sales</code> table like above, and <code>Reps</code> table like this</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">id</th>\n<th align=\"center\">name</th>\n<th align=\"center\">tenure</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">8003</td>\n<td align=\"center\">Hiromu</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">8972</td>\n<td align=\"center\">Ochiai</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">52934</td>\n<td align=\"center\">Taro</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">92231</td>\n<td align=\"center\">otiai10</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">100425</td>\n<td align=\"center\">Hanako</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td align=\"center\">125901</td>\n<td align=\"center\">Chika</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">182234</td>\n<td align=\"center\">Mary</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">199621</td>\n<td align=\"center\">Jack</td>\n<td align=\"center\">1</td>\n</tr></tbody></table>\n<p>do</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">joinability</span><span class=\"p\">(</span><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Sales'</span><span class=\"p\">:</span> <span class=\"s1\">'rep_id'</span><span class=\"p\">,</span> <span class=\"s1\">'Reps'</span><span class=\"p\">:</span> <span class=\"s1\">'id'</span><span class=\"p\">})</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">to_excel</span><span class=\"p\">()</span>\n</pre>\n<p>then you will get <code>join_Sales_Reps.xlsx</code> file with</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">table</th>\n<th align=\"center\">key</th>\n<th align=\"center\">total</th>\n<th align=\"center\">match</th>\n<th align=\"center\">match_%</th>\n<th align=\"center\">drop</th>\n<th align=\"center\">drop_%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Sales</td>\n<td align=\"center\">[rep_id]</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">85.714</td>\n<td align=\"center\">1</td>\n<td align=\"center\">14.285</td>\n</tr>\n<tr>\n<td align=\"center\">Reps</td>\n<td align=\"center\">[id]</td>\n<td align=\"center\">8</td>\n<td align=\"center\">6</td>\n<td align=\"center\">75.00</td>\n<td align=\"center\">2</td>\n<td align=\"center\">25.00</td>\n</tr></tbody></table>\n<h1>Issues and TODOs</h1>\n<ul>\n<li><a href=\"https://github.com/otiai10/dataviper/issues\" rel=\"nofollow\">https://github.com/otiai10/dataviper/issues</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7051529, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "bc272815a34e04a8914c5a76348d56ee", "sha256": "ccf47fc84ca46373fd9da979a5e7e02c6ca1204f1e6d812db9f96e330a0ded6b"}, "downloads": -1, "filename": "dataviper-0.1.5.tar.gz", "has_sig": false, "md5_digest": "bc272815a34e04a8914c5a76348d56ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14041, "upload_time": "2020-04-18T10:15:46", "upload_time_iso_8601": "2020-04-18T10:15:46.718605Z", "url": "https://files.pythonhosted.org/packages/37/6f/ea58a280fa3b9b9a9680cb7faadd10f25ec6c4272771c4d542b038758655/dataviper-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "9d3ad8b2927f1d3080921422b49a43aa", "sha256": "85d09c1d484b5bf756d9022936916739e7bb2527f19bff59237e3efb161856da"}, "downloads": -1, "filename": "dataviper-0.1.6.tar.gz", "has_sig": false, "md5_digest": "9d3ad8b2927f1d3080921422b49a43aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15158, "upload_time": "2020-04-18T16:22:12", "upload_time_iso_8601": "2020-04-18T16:22:12.991113Z", "url": "https://files.pythonhosted.org/packages/7d/43/dc95550b6fbcd7da16d7a65a8ab65f06755f749c3bcb47d82a204ef8fe60/dataviper-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "40afb0831bfecba043f5099001bb6c7d", "sha256": "e124f9b64e754f43b5aef7b4c5c04633dd7fe0a8be52ff96889e4b25f87cec3a"}, "downloads": -1, "filename": "dataviper-0.1.7.tar.gz", "has_sig": false, "md5_digest": "40afb0831bfecba043f5099001bb6c7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14869, "upload_time": "2020-04-19T05:20:13", "upload_time_iso_8601": "2020-04-19T05:20:13.665403Z", "url": "https://files.pythonhosted.org/packages/00/8d/9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25/dataviper-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "40afb0831bfecba043f5099001bb6c7d", "sha256": "e124f9b64e754f43b5aef7b4c5c04633dd7fe0a8be52ff96889e4b25f87cec3a"}, "downloads": -1, "filename": "dataviper-0.1.7.tar.gz", "has_sig": false, "md5_digest": "40afb0831bfecba043f5099001bb6c7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14869, "upload_time": "2020-04-19T05:20:13", "upload_time_iso_8601": "2020-04-19T05:20:13.665403Z", "url": "https://files.pythonhosted.org/packages/00/8d/9adb64b7157d2e742ccdd125f7c00dec54b00881cb1a01669fba2fc41b25/dataviper-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:07 2020"}