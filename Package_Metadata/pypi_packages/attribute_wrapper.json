{"info": {"author": "Bystroushaak", "author_email": "bystrousak@kitakitsune.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "AttributeWrapper\n================\n\n.. image:: https://badge.fury.io/py/attribute_wrapper.png\n    :target: http://badge.fury.io/py/attribute_wrapper\n\n.. image:: https://pypip.in/d/attribute_wrapper/badge.png\n        :target: https://crate.io/packages/attribute_wrapper?version=latest\n\nThis wrapper maps attribute calls to HTTP API. The package provides similar\nfunctionality as `Tortilla <https://github.com/redodo/tortilla>`_, but it is\nimplemented in smaller and simpler code.\n\nThis simplicity gives you ability to subclass and modify functionality as you\nneed.\n\nExamples\n--------\nBasic access\n++++++++++++\n\n.. code-block:: python\n\n    from attribute_wrapper import HTTPWrapper\n\n    r = HTTPWrapper(\"http://kitakitsune.org\")\n    data = r.get()\n\nThis will download content of http://kitakitsune.org and return it as string. The ``.get()`` call determines the HTTP method, which is used to perform the request.\n\nAttribute path composition\n++++++++++++++++++++++++++\nThe dot attribute access notation is used to compose the path of required HTTP resource. For example::\n\n    r.raw.get()\n\nis translated to GET request for http://kitakitsune.org/raw.\n\nSpecial characters\n++++++++++++++++++\nThe dot notation in python is restricted only to A-Z, a-z, 0-9 and _, which may be sometimes too much restricting. Thats why the ``GenericWrapper`` has the attribute ``.specials``, which contains mappings of special sequences to URL characters.\n\nThe ``.specials`` table is at this moment implemented by following structure:\n\n.. code-block:: python\n\n    {\n        \"__dot__\": \".\",\n        \"__slash__\": \"/\",\n        \"__dash__\": \"-\",\n    }\n\nWhich means that URL containing this substrings will be translated as expected:\n\n.. code-block:: python\n\n    r.raw.doctene_knihy__dot__txt.get()\n\nis translated to http://kitakitsune.org/raw/doctene_knihy.txt\n\nThis functionality can be changed by replacing ``.specials`` dictionary table with something else, or with blank dictionary to disable it.\n\nUnderscore method\n+++++++++++++++++\nMore complicated paths should be handled using ``_`` method::\n\n    r._(\"compl?icated/$path/\").get()\n\nwhich is translated to http://kitakitsune.org/compl?icated/$path/.\n\nAutomatic suffix\n++++++++++++++++\nIf you work with API, which expects that each file ends with suffix like ``.json`` or ``.html``, you can modify the ``.suffix`` attribute or add ``suffix`` parameter when you are instancing the class:\n\n.. code-block:: python\n\n    r = HTTPWrapper(\"http://kitakitsune.org\", suffix=\".txt\")\n\n    # this will return content of the http://kitakitsune.org, because the suffix\n    # is ignored in root of the path\n    r.get()\n\n    # this will return http://kitakitsune.org/raw/doctene_knihy.txt\n    r.raw.doctene_knihy.get()\n\nParameters\n++++++++++\nThe method handling call at last attribute accepts keyword parameters, which are sent to server as form data:\n\n.. code-block:: python\n\n    r.post(something=\"else\")\n\nThis will send ``{\"something\": \"else\"}`` dictionary as POST data to server.\n\nJSONWrapper\n+++++++++++\nAs example subclass, there is also ``JSONWrapper``, which translates all parameters to JSON and send it as HTTP **body** to server. This may be specially useful with some of the REST API.\n\nSubclassing\n-----------\nThe code is actually really simple (138 lines!) and it should be (at least I think) easy to understand. If you need some new functionality, you can just simply subclass the ``GenericWrapper`` class and rewrite the ``.download_handler()`` method to reflect your needs.\n\nFor example - the ``JSONWrapper`` is implemented in few lines of code:\n\n.. code-block:: python\n\n    import json\n\n    class JSONWrapper(GenericWrapper):\n        def download_handler(self, method, url, data):\n            if data:\n                data = json.dumps(data)\n\n            headers = {\n                'content-type': 'application/json'\n            }\n\n            resp = requests.request(method, url, headers=headers, data=data)\n\n            # handle http errors\n            resp.raise_for_status()\n\n            return json.loads(resp.text)\n\nYour code\n+++++++++\nFeel free to send pull request with you own classes (don't forget to document it). I would like to make this package useful and I will gladly incorporate your code, so you don't need to create your own package.\n\nInstallation\n------------\nThe code is hosted at `PYPI <https://pypi.python.org/pypi/attribute_wrapper>`_,\nand you can easily install it using the following command:\n\n.. code-block:: bash\n\n    sudo pip install attribute_wrapper\n\nTesting\n-------\nThis project uses `py.test <http://pytest.org/latest/>`_ for testing. Just run\n``py.test`` from the root of the project::\n\n    bystrousak:/h/D/c0d3z/python/libs/attribute_wrapper,0$ py.test\n    ============================= test session starts ==============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.23 -- pytest-2.6.0\n    collected 8 items \n\n    tests/test_wrapper.py ........\n\n    =========================== 8 passed in 0.12 seconds ===========================\n\n\nChangelog\n=========\n\n0.2.0\n-----\n    - Added full test coverage.\n    - Added ValueError exception when calling the root object without method.\n    - Fixed some typos in comments.\n    - Added testing section to README.rst.\n    - Added special underscore method ``GenericWrapper._(path)`` for complicated paths.\n\n0.1.2\n-----\n    - Added handling of HTTP errors.\n\n0.1.1\n-----\n    - Fixed package metadata problems.\n\n0.1.0\n-----\n    - Project created.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Bystroushaak/attribute_wrapper", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "attribute_wrapper", "package_url": "https://pypi.org/project/attribute_wrapper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/attribute_wrapper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Bystroushaak/attribute_wrapper"}, "release_url": "https://pypi.org/project/attribute_wrapper/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Class wrapper, which maps attribute calls to HTTP API.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"attributewrapper\">\n<h2>AttributeWrapper</h2>\n<a href=\"http://badge.fury.io/py/attribute_wrapper\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/attribute_wrapper.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c87f780c714e31c167ac803c9fde51c89427ac2b/68747470733a2f2f62616467652e667572792e696f2f70792f6174747269627574655f777261707065722e706e67\"></a>\n<a href=\"https://crate.io/packages/attribute_wrapper?version=latest\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/attribute_wrapper/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f38f379328f3cd0d1c166df94e70336f15afb9d9/68747470733a2f2f70797069702e696e2f642f6174747269627574655f777261707065722f62616467652e706e67\"></a>\n<p>This wrapper maps attribute calls to HTTP API. The package provides similar\nfunctionality as <a href=\"https://github.com/redodo/tortilla\" rel=\"nofollow\">Tortilla</a>, but it is\nimplemented in smaller and simpler code.</p>\n<p>This simplicity gives you ability to subclass and modify functionality as you\nneed.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"basic-access\">\n<h4>Basic access</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">attribute_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPWrapper</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">HTTPWrapper</span><span class=\"p\">(</span><span class=\"s2\">\"http://kitakitsune.org\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>This will download content of <a href=\"http://kitakitsune.org\" rel=\"nofollow\">http://kitakitsune.org</a> and return it as string. The <tt>.get()</tt> call determines the HTTP method, which is used to perform the request.</p>\n</div>\n<div id=\"attribute-path-composition\">\n<h4>Attribute path composition</h4>\n<p>The dot attribute access notation is used to compose the path of required HTTP resource. For example:</p>\n<pre>r.raw.get()\n</pre>\n<p>is translated to GET request for <a href=\"http://kitakitsune.org/raw\" rel=\"nofollow\">http://kitakitsune.org/raw</a>.</p>\n</div>\n<div id=\"special-characters\">\n<h4>Special characters</h4>\n<p>The dot notation in python is restricted only to A-Z, a-z, 0-9 and _, which may be sometimes too much restricting. Thats why the <tt>GenericWrapper</tt> has the attribute <tt>.specials</tt>, which contains mappings of special sequences to URL characters.</p>\n<p>The <tt>.specials</tt> table is at this moment implemented by following structure:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"__dot__\"</span><span class=\"p\">:</span> <span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"__slash__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"__dash__\"</span><span class=\"p\">:</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Which means that URL containing this substrings will be translated as expected:</p>\n<pre><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">doctene_knihy__dot__txt</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>is translated to <a href=\"http://kitakitsune.org/raw/doctene_knihy.txt\" rel=\"nofollow\">http://kitakitsune.org/raw/doctene_knihy.txt</a></p>\n<p>This functionality can be changed by replacing <tt>.specials</tt> dictionary table with something else, or with blank dictionary to disable it.</p>\n</div>\n<div id=\"underscore-method\">\n<h4>Underscore method</h4>\n<p>More complicated paths should be handled using <tt>_</tt> method:</p>\n<pre>r._(\"compl?icated/$path/\").get()\n</pre>\n<p>which is translated to <a href=\"http://kitakitsune.org/compl?icated/%24path/\" rel=\"nofollow\">http://kitakitsune.org/compl?icated/$path/</a>.</p>\n</div>\n<div id=\"automatic-suffix\">\n<h4>Automatic suffix</h4>\n<p>If you work with API, which expects that each file ends with suffix like <tt>.json</tt> or <tt>.html</tt>, you can modify the <tt>.suffix</tt> attribute or add <tt>suffix</tt> parameter when you are instancing the class:</p>\n<pre><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">HTTPWrapper</span><span class=\"p\">(</span><span class=\"s2\">\"http://kitakitsune.org\"</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s2\">\".txt\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this will return content of the http://kitakitsune.org, because the suffix</span>\n<span class=\"c1\"># is ignored in root of the path</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># this will return http://kitakitsune.org/raw/doctene_knihy.txt</span>\n<span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"o\">.</span><span class=\"n\">doctene_knihy</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<p>The method handling call at last attribute accepts keyword parameters, which are sent to server as form data:</p>\n<pre><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">something</span><span class=\"o\">=</span><span class=\"s2\">\"else\"</span><span class=\"p\">)</span>\n</pre>\n<p>This will send <tt>{\"something\": \"else\"}</tt> dictionary as POST data to server.</p>\n</div>\n<div id=\"jsonwrapper\">\n<h4>JSONWrapper</h4>\n<p>As example subclass, there is also <tt>JSONWrapper</tt>, which translates all parameters to JSON and send it as HTTP <strong>body</strong> to server. This may be specially useful with some of the REST API.</p>\n</div>\n</div>\n<div id=\"subclassing\">\n<h3>Subclassing</h3>\n<p>The code is actually really simple (138 lines!) and it should be (at least I think) easy to understand. If you need some new functionality, you can just simply subclass the <tt>GenericWrapper</tt> class and rewrite the <tt>.download_handler()</tt> method to reflect your needs.</p>\n<p>For example - the <tt>JSONWrapper</tt> is implemented in few lines of code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONWrapper</span><span class=\"p\">(</span><span class=\"n\">GenericWrapper</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">download_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># handle http errors</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">raise_for_status</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<div id=\"your-code\">\n<h4>Your code</h4>\n<p>Feel free to send pull request with you own classes (don\u2019t forget to document it). I would like to make this package useful and I will gladly incorporate your code, so you don\u2019t need to create your own package.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>The code is hosted at <a href=\"https://pypi.python.org/pypi/attribute_wrapper\" rel=\"nofollow\">PYPI</a>,\nand you can easily install it using the following command:</p>\n<pre>sudo pip install attribute_wrapper\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>This project uses <a href=\"http://pytest.org/latest/\" rel=\"nofollow\">py.test</a> for testing. Just run\n<tt>py.test</tt> from the root of the project:</p>\n<pre>bystrousak:/h/D/c0d3z/python/libs/attribute_wrapper,0$ py.test\n============================= test session starts ==============================\nplatform linux2 -- Python 2.7.6 -- py-1.4.23 -- pytest-2.6.0\ncollected 8 items\n\ntests/test_wrapper.py ........\n\n=========================== 8 passed in 0.12 seconds ===========================\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.2.0</h3>\n<blockquote>\n<ul>\n<li>Added full test coverage.</li>\n<li>Added ValueError exception when calling the root object without method.</li>\n<li>Fixed some typos in comments.</li>\n<li>Added testing section to README.rst.</li>\n<li>Added special underscore method <tt>GenericWrapper._(path)</tt> for complicated paths.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3>0.1.2</h3>\n<blockquote>\n<ul>\n<li>Added handling of HTTP errors.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3>0.1.1</h3>\n<blockquote>\n<ul>\n<li>Fixed package metadata problems.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3>0.1.0</h3>\n<blockquote>\n<ul>\n<li>Project created.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1404652, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ef9173b13d1dd24f1a09308e5c2c0200", "sha256": "08b108c2b0bdaa74735b60a7664c1326bc60d89f8e4ca7d9019c1868053e1551"}, "downloads": -1, "filename": "attribute_wrapper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ef9173b13d1dd24f1a09308e5c2c0200", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5021, "upload_time": "2015-01-24T10:29:41", "upload_time_iso_8601": "2015-01-24T10:29:41.242694Z", "url": "https://files.pythonhosted.org/packages/ba/5f/368a8031974edeaae8938cfe870ba5a9816e7d636e54a8c1d5e8e8046dc3/attribute_wrapper-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "27764f6fc5ffccd92c4c789a13ca6037", "sha256": "f525809253be1e1f350425aa1274a086514a9b45a427b26fef17cf6480af57ac"}, "downloads": -1, "filename": "attribute_wrapper-0.1.1.tar.gz", "has_sig": false, "md5_digest": "27764f6fc5ffccd92c4c789a13ca6037", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5798, "upload_time": "2015-01-24T10:35:54", "upload_time_iso_8601": "2015-01-24T10:35:54.579775Z", "url": "https://files.pythonhosted.org/packages/2a/43/379eff627ffe825175cf3cb49a4162e2e93a5ea886bcfc135e6b3bf91010/attribute_wrapper-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b9d8d7d8e9bdbaff22e5f07f28a137f4", "sha256": "0fa37b32853e406dcb5cd24f147bce94457bd4bd125d15d078d1e0d4cd2d39b5"}, "downloads": -1, "filename": "attribute_wrapper-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b9d8d7d8e9bdbaff22e5f07f28a137f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5932, "upload_time": "2015-01-24T13:19:30", "upload_time_iso_8601": "2015-01-24T13:19:30.903251Z", "url": "https://files.pythonhosted.org/packages/15/2a/c3c20ccfe8ac3898129dc1df94ecc2641287f5cea424aa6e8e6256e16cbf/attribute_wrapper-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6fbd164c0b8f8e1039eab2dff29d95bc", "sha256": "7f85b990fdbc7f90fb9a4eea39727987c0ba1d659dc8b5f6f7b4219617d00442"}, "downloads": -1, "filename": "attribute_wrapper-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6fbd164c0b8f8e1039eab2dff29d95bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6459, "upload_time": "2015-01-31T23:50:19", "upload_time_iso_8601": "2015-01-31T23:50:19.465324Z", "url": "https://files.pythonhosted.org/packages/6d/07/69dac0de458ef6a5706d4a6e47a56baced2f2d5ec05cca9d55f975214d0c/attribute_wrapper-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fbd164c0b8f8e1039eab2dff29d95bc", "sha256": "7f85b990fdbc7f90fb9a4eea39727987c0ba1d659dc8b5f6f7b4219617d00442"}, "downloads": -1, "filename": "attribute_wrapper-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6fbd164c0b8f8e1039eab2dff29d95bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6459, "upload_time": "2015-01-31T23:50:19", "upload_time_iso_8601": "2015-01-31T23:50:19.465324Z", "url": "https://files.pythonhosted.org/packages/6d/07/69dac0de458ef6a5706d4a6e47a56baced2f2d5ec05cca9d55f975214d0c/attribute_wrapper-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:30 2020"}