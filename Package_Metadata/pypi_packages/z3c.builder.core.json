{"info": {"author": "Paul Carduner, Stephan Richter, and hopefully others...", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": [], "description": "======================================\nThe Zope 3 Community's Project Builder\n======================================\n\nz3c.builder is a tool that helps you jump start development of a Zope\n3 application by generating all the boiler plate code and\nconfiguration for you.\n\nGoals\n-----\n\n * Easy to use\n * Easy to extend\n * More or less complete\n\n\nBrainstorming\n-------------\n\nThe easiest thing to tackle is just generating all the files that are\nneeded without necessarily any customizable contents.  A minimal eggs\nand buildout based project would have a directory structure like this::\n\n  package-name/\n    bootstrap.py\n    buildout.cfg\n    setup.py\n    README.txt\n    CHANGES.txt\n    src/\n      namespace-package/\n        __init__.py\n        package/\n          __init__.py\n\nEach section of this directory structure can be further configured ad\ninfinitum.  The tricky part is deciding when enough is enough.  Let's\nconsider each of these sections and what they offer.\n\nbootstrap.py\n~~~~~~~~~~~~\n\nThis is brain dead simple.  There is a standard file that everyone\nuses and we just need to copy it in.  I don't think there is any\npotential customization points.\n\n\nbuildout.cfg\n~~~~~~~~~~~~\n\nThere are pretty much an infinite number of generic customizations you\ncan make to a buildout.cfg file.  Here are some of the ones we might\nwant to support out of the box:\n\n  - Creation of multiple buildout.cfg files, for different uses\n    (developers, production, minimal?)\n\n  - kgs hookup, with support for using a remote extends buildout\n    option, or downloading a versions.cfg file upon project creation.\n\n  - Some typically used and useful parts:\n    - tests\n    - coverage\n    - python interpreter\n    - ctags\n    - documentation generators\n\n    (note that some of these parts require additional files to be\n     added to the src tree in order to make sense)\n\n  - Zope Server setup.\n    This bleeds into all the zope 3 configuration that we might\n    want to do and also paster setup.  This would include basically\n    anything you can configure in zope.conf files.\n\nsetup.py\n~~~~~~~~\n\nThis is relatively straight forward.  There are the obvious keyword\narguments that are passed to the setup() command that we'll want to\nconfigure. There are however some slightly more interesting peices:\n\n  - long_description: Since this is what becomes the python page,\n    we'll want to hook up the boiler plate code for using a\n    combination of README.txt, CHANGES.txt and others to generate the\n    full long description.  This shouldn't be that hard.\n\n  - classifiers: It's always a pain in the ass to remember what all\n    the different classifiers can be and how they should be\n    formatted.\n\n  - extras_requires: we may want to configure what extras_requires\n    sections there are.  Typically we would have a test and an app\n    section. There might also be a docs section and others.\n\n  - entry_points: this is where it gets a bit trickier.  Paster has\n    it's own entry point boiler plate code that you need.  We may also\n    want to configure any number of additonal command line script\n    entry points.\n\nREADME.txt\n~~~~~~~~~~\n\nJust a simple file dump with maybe some configurable initial content.\n\nCHANGES.txt\n~~~~~~~~~~~\n\nAnother simple file dump with an example of the change log format that\nwe've standardized on.\n\nOther Python Files\n~~~~~~~~~~~~~~~~~~\n\nThe rest of the files are just for mkaing proper python modules and\nshould be brain dead simple.\n\nConclusion\n~~~~~~~~~~\n\nI think starting by making a project builder for simple egg/buildout\nbased projects is a good starting point.  It's an atainable and useful\ngoal which will give us the experience we need to tackle the more\ncomplex task of zope boiler plate.\n\n\n=======\nCHANGES\n=======\n\nVersion 0.1.0 (2009-03-27)\n--------------------------\n\n- Initial Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/z3c.builder.core", "keywords": "zope3 project builder", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.builder.core", "package_url": "https://pypi.org/project/z3c.builder.core/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.builder.core/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/z3c.builder.core"}, "release_url": "https://pypi.org/project/z3c.builder.core/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A utility to help jump start Zope 3 projects", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"the-zope-3-community-s-project-builder\">\n<h2>The Zope 3 Community\u2019s Project Builder</h2>\n<p>z3c.builder is a tool that helps you jump start development of a Zope\n3 application by generating all the boiler plate code and\nconfiguration for you.</p>\n<div id=\"goals\">\n<h3>Goals</h3>\n<blockquote>\n<ul>\n<li>Easy to use</li>\n<li>Easy to extend</li>\n<li>More or less complete</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"brainstorming\">\n<h3>Brainstorming</h3>\n<p>The easiest thing to tackle is just generating all the files that are\nneeded without necessarily any customizable contents.  A minimal eggs\nand buildout based project would have a directory structure like this:</p>\n<pre>package-name/\n  bootstrap.py\n  buildout.cfg\n  setup.py\n  README.txt\n  CHANGES.txt\n  src/\n    namespace-package/\n      __init__.py\n      package/\n        __init__.py\n</pre>\n<p>Each section of this directory structure can be further configured ad\ninfinitum.  The tricky part is deciding when enough is enough.  Let\u2019s\nconsider each of these sections and what they offer.</p>\n<div id=\"bootstrap-py\">\n<h4>bootstrap.py</h4>\n<p>This is brain dead simple.  There is a standard file that everyone\nuses and we just need to copy it in.  I don\u2019t think there is any\npotential customization points.</p>\n</div>\n<div id=\"buildout-cfg\">\n<h4>buildout.cfg</h4>\n<p>There are pretty much an infinite number of generic customizations you\ncan make to a buildout.cfg file.  Here are some of the ones we might\nwant to support out of the box:</p>\n<blockquote>\n<ul>\n<li><p>Creation of multiple buildout.cfg files, for different uses\n(developers, production, minimal?)</p>\n</li>\n<li><p>kgs hookup, with support for using a remote extends buildout\noption, or downloading a versions.cfg file upon project creation.</p>\n</li>\n<li><p>Some typically used and useful parts:\n- tests\n- coverage\n- python interpreter\n- ctags\n- documentation generators</p>\n<dl>\n<dt>(note that some of these parts require additional files to be</dt>\n<dd><p>added to the src tree in order to make sense)</p>\n</dd>\n</dl>\n</li>\n<li><p>Zope Server setup.\nThis bleeds into all the zope 3 configuration that we might\nwant to do and also paster setup.  This would include basically\nanything you can configure in zope.conf files.</p>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"setup-py\">\n<h4>setup.py</h4>\n<p>This is relatively straight forward.  There are the obvious keyword\narguments that are passed to the setup() command that we\u2019ll want to\nconfigure. There are however some slightly more interesting peices:</p>\n<blockquote>\n<ul>\n<li>long_description: Since this is what becomes the python page,\nwe\u2019ll want to hook up the boiler plate code for using a\ncombination of README.txt, CHANGES.txt and others to generate the\nfull long description.  This shouldn\u2019t be that hard.</li>\n<li>classifiers: It\u2019s always a pain in the ass to remember what all\nthe different classifiers can be and how they should be\nformatted.</li>\n<li>extras_requires: we may want to configure what extras_requires\nsections there are.  Typically we would have a test and an app\nsection. There might also be a docs section and others.</li>\n<li>entry_points: this is where it gets a bit trickier.  Paster has\nit\u2019s own entry point boiler plate code that you need.  We may also\nwant to configure any number of additonal command line script\nentry points.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"readme-txt\">\n<h4>README.txt</h4>\n<p>Just a simple file dump with maybe some configurable initial content.</p>\n</div>\n<div id=\"changes-txt\">\n<h4>CHANGES.txt</h4>\n<p>Another simple file dump with an example of the change log format that\nwe\u2019ve standardized on.</p>\n</div>\n<div id=\"other-python-files\">\n<h4>Other Python Files</h4>\n<p>The rest of the files are just for mkaing proper python modules and\nshould be brain dead simple.</p>\n</div>\n<div id=\"conclusion\">\n<h4>Conclusion</h4>\n<p>I think starting by making a project builder for simple egg/buildout\nbased projects is a good starting point.  It\u2019s an atainable and useful\ngoal which will give us the experience we need to tackle the more\ncomplex task of zope boiler plate.</p>\n</div>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<h2 id=\"version-0-1-0-2009-03-27\"><span class=\"section-subtitle\">Version 0.1.0 (2009-03-27)</span></h2>\n<ul>\n<li>Initial Release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 802002, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1173c363f489d47f050fb104bf515b54", "sha256": "dc272ef0194ec5ca00769bce0f637ec6fadee4eb29667337ea5d9f9e1325a9b4"}, "downloads": -1, "filename": "z3c.builder.core-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1173c363f489d47f050fb104bf515b54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140915, "upload_time": "2009-03-27T11:39:49", "upload_time_iso_8601": "2009-03-27T11:39:49.557022Z", "url": "https://files.pythonhosted.org/packages/28/5c/5a6467ba246fd1c93964808306b11a2f2fa191c5381a092079936c3bb785/z3c.builder.core-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1173c363f489d47f050fb104bf515b54", "sha256": "dc272ef0194ec5ca00769bce0f637ec6fadee4eb29667337ea5d9f9e1325a9b4"}, "downloads": -1, "filename": "z3c.builder.core-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1173c363f489d47f050fb104bf515b54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140915, "upload_time": "2009-03-27T11:39:49", "upload_time_iso_8601": "2009-03-27T11:39:49.557022Z", "url": "https://files.pythonhosted.org/packages/28/5c/5a6467ba246fd1c93964808306b11a2f2fa191c5381a092079936c3bb785/z3c.builder.core-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:08 2020"}