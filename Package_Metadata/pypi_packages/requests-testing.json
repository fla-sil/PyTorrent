{"info": {"author": "Pertsev Alexey", "author_email": "oeermanz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "Requests-testing\n================\n\n.. image:: https://travis-ci.org/a-pertsev/requests-testing.svg?branch=master\n    :target: https://travis-ci.org/a-pertsev/requests-testing\n\nA utility library for mocking out the `requests` Python library.\n\nStarting with requests-testing\n------------------------------\n\nHere is a simple example:\n\n.. code-block:: python\n\n    import requests\n    import requests_testing\n\n\n    @requests_testing.activate\n    def example():\n        requests_testing.add(request={'url': 'http://example.com'}, response={'body': 'ok'})\n        resp = requests.get('http://example.com')\n\n        assert resp.text == 'ok'\n        assert len(requests_testing.calls) == 1\n        assert requests_testing.calls[0].request.url == 'http://example.com/'\n\nIf your attempts to fetch a url which doesn't hit a match, ``ConnectionError`` will raise:\n\n.. code-block:: python\n\n    import requests\n    import requests_testing\n\n    from requests.exceptions import ConnectionError\n\n    @responses.activate\n    def test_error():\n        with pytest.raises(ConnectionError):\n            requests.get('http://example.com')\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/a-pertsev/requests-testing", "keywords": "requests mock testing", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "requests-testing", "package_url": "https://pypi.org/project/requests-testing/", "platform": "", "project_url": "https://pypi.org/project/requests-testing/", "project_urls": {"Homepage": "https://github.com/a-pertsev/requests-testing"}, "release_url": "https://pypi.org/project/requests-testing/0.2.0/", "requires_dist": ["requests (>=2.0)", "cookies", "six", "mock", "pytest; extra == 'tests'", "coverage (<5.0.0,>=3.7.1); extra == 'tests'", "pytest-cov; extra == 'tests'", "pytest-localserver; extra == 'tests'", "flake8; extra == 'tests'", "idna; extra == 'tests'"], "requires_python": "", "summary": "A utility library for mocking out the `requests` Python library.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/a-pertsev/requests-testing\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/a-pertsev/requests-testing.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c805c62c9c240ce8957b762ce6d1318a80f161a/68747470733a2f2f7472617669732d63692e6f72672f612d706572747365762f72657175657374732d74657374696e672e7376673f6272616e63683d6d6173746572\"></a>\n<p>A utility library for mocking out the <cite>requests</cite> Python library.</p>\n<div id=\"starting-with-requests-testing\">\n<h2>Starting with requests-testing</h2>\n<p>Here is a simple example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests_testing</span>\n\n\n<span class=\"nd\">@requests_testing</span><span class=\"o\">.</span><span class=\"n\">activate</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">requests_testing</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://example.com'</span><span class=\"p\">},</span> <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'ok'</span><span class=\"p\">})</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'ok'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">requests_testing</span><span class=\"o\">.</span><span class=\"n\">calls</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests_testing</span><span class=\"o\">.</span><span class=\"n\">calls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">==</span> <span class=\"s1\">'http://example.com/'</span>\n</pre>\n<p>If your attempts to fetch a url which doesn\u2019t hit a match, <tt>ConnectionError</tt> will raise:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests_testing</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">requests.exceptions</span> <span class=\"kn\">import</span> <span class=\"ne\">ConnectionError</span>\n\n<span class=\"nd\">@responses</span><span class=\"o\">.</span><span class=\"n\">activate</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_error</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ConnectionError</span><span class=\"p\">):</span>\n        <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com'</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3360441, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "b921b3ed0d929c11a17e4ee4efab064e", "sha256": "99045f6505469ad84ffc75fbd74bfa690e8aebca45b3c98a79d2cde7d3b481dc"}, "downloads": -1, "filename": "requests_testing-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b921b3ed0d929c11a17e4ee4efab064e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6847, "upload_time": "2017-11-24T10:25:04", "upload_time_iso_8601": "2017-11-24T10:25:04.403474Z", "url": "https://files.pythonhosted.org/packages/55/8a/3bf69679e02faa7ef03d3072251dc0f6c6c6de44602bed9a41a1173cbe29/requests_testing-0.2.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b921b3ed0d929c11a17e4ee4efab064e", "sha256": "99045f6505469ad84ffc75fbd74bfa690e8aebca45b3c98a79d2cde7d3b481dc"}, "downloads": -1, "filename": "requests_testing-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b921b3ed0d929c11a17e4ee4efab064e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6847, "upload_time": "2017-11-24T10:25:04", "upload_time_iso_8601": "2017-11-24T10:25:04.403474Z", "url": "https://files.pythonhosted.org/packages/55/8a/3bf69679e02faa7ef03d3072251dc0f6c6c6de44602bed9a41a1173cbe29/requests_testing-0.2.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:04:00 2020"}