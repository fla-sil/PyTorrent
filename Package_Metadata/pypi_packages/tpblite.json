{"info": {"author": "Matt Lyon", "author_email": "matthewlyon18@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Browsers", "Topic :: Internet :: WWW/HTTP :: Indexing/Search", "Topic :: Utilities"], "description": "Unofficial Lightweight Python API for ThePirateBay\n\nInstallation\n=============\n```sh\n$ pip install tpblite\n```\n\nDependencies:\n - BeautifulSoup\n - purl\n\nUsage\n==========\n\n```python\nfrom tpblite import TPB\n\n# Create a TPB object with a domain name\nt = TPB('https://thepiratebay.org')\n\n# Or create a TPB object with default domain\nt = TPB()\n```\n## Search\n```python\n# Quick search for torrents, returns a Torrents object\ntorrents = t.search('public domain')\n\n# See how many torrents were found\nprint('There were {0} torrents found.'.format(len(torrents))\n\n# Iterate through list of torrents and print info for Torrent object\nfor torrent in torrents:\n    print(torrent)\n\n# Customize your search\nfrom tpblite import CATEGORIES, ORDERS\ntorrents = t.search('public domain', page=2, order=ORDERS.NAME.DEC, category=CATEGORIES.VIDEO.MOVIES)\n\n# Get the most seeded torrent based on a filter\ntorrent = torrents.getBestTorrent(min_seeds=30, min_filesize='500 MiB', max_filesize='4 GiB')\n\n# Or select a particular torrent by indexing\ntorrent = torrents[3]\n\n# Get the magnet link for a torrent\nprint(torrent.magnetlink)\n```\n## Browse\n```python\n# You can browse all of the torrents from a single category\ntorrents = t.browse(category=CATEGORIES.VIDEOS)\n# Customize the page number and sort order\ntorrents = t.browse(category=CATEGORIES.VIDEO.MOVIES, page=1, order=ORDERS.UPLOADED.DES)\n```\n\n## Categories and Sort Order\n```python\n# To print all available categories, use the classmethod printOptions\nCATEGORIES.printOptions()\n# Or just a subset of categories, like VIDEOS\nCATEGORIES.VIDEO.printOptions()\n# Similarly for the sort order\nORDERS.printOptions()\n```\n\n## Torrents object\nThe search function returns a `Torrents` object, which is a *list-like* collection of the torrents found.\n\nYou can also iterate over the `Torrents` object just by calling it in a for loop (see example above).\n\nYou can see how many `Torrent` objects your query has returned, by using the `len()` function\n\n## Torrent object\n`Torrent` objects represent each torrent found in the `Torrents` class, they have the following attributes\n### Attributes\n- `Torrent.title` - The name of the torrent (str)\n- `Torrent.seeds` - The number of seeders (int)\n- `Torrent.leeches` - The number of leechers (int)\n- `Torrent.upload_date` - Date the torrent was uploaded (str)\n- `Torrent.uploader` - Name of user who uploaded torrent (str)\n- `Torrent.filesize` - The filesize in *iB format, eg. 5 GiB (str)\n- `Torrent.byte_size` - The filesize in bytes of the torrent (int)\n- `Torrent.magnetlink` - magnetlink of the torrent (str)\n\n\nExample Workflow\n==========\n\nWith a commandline torrent client such as [aria2](https://aria2.github.io/), you can automate search and downloading of torrents like so:\n```python\nimport subprocess\nfrom tpblite import TPB\n\nt = TPB()\ntorrents = t.search('GIMP 2.10.8')\ntorrent = torrents.getBestTorrent()\nsubprocess.call(['aria2c', torrent.magnetlink])\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/mattlyon93/tpb-lite/archive/v0.3.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattlyon93/tpb-lite", "keywords": "ThePirateBay,PirateBay,torrent", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "tpblite", "package_url": "https://pypi.org/project/tpblite/", "platform": "", "project_url": "https://pypi.org/project/tpblite/", "project_urls": {"Download": "https://github.com/mattlyon93/tpb-lite/archive/v0.3.0.tar.gz", "Homepage": "https://github.com/mattlyon93/tpb-lite"}, "release_url": "https://pypi.org/project/tpblite/0.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The Unofficial Pirate Bay Lightweight Python API", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Unofficial Lightweight Python API for ThePirateBay</p>\n<h1>Installation</h1>\n<pre>$ pip install tpblite\n</pre>\n<p>Dependencies:</p>\n<ul>\n<li>BeautifulSoup</li>\n<li>purl</li>\n</ul>\n<h1>Usage</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tpblite</span> <span class=\"kn\">import</span> <span class=\"n\">TPB</span>\n\n<span class=\"c1\"># Create a TPB object with a domain name</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">TPB</span><span class=\"p\">(</span><span class=\"s1\">'https://thepiratebay.org'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or create a TPB object with default domain</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">TPB</span><span class=\"p\">()</span>\n</pre>\n<h2>Search</h2>\n<pre><span class=\"c1\"># Quick search for torrents, returns a Torrents object</span>\n<span class=\"n\">torrents</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'public domain'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># See how many torrents were found</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'There were </span><span class=\"si\">{0}</span><span class=\"s1\"> torrents found.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">torrents</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Iterate through list of torrents and print info for Torrent object</span>\n<span class=\"k\">for</span> <span class=\"n\">torrent</span> <span class=\"ow\">in</span> <span class=\"n\">torrents</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">torrent</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Customize your search</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tpblite</span> <span class=\"kn\">import</span> <span class=\"n\">CATEGORIES</span><span class=\"p\">,</span> <span class=\"n\">ORDERS</span>\n<span class=\"n\">torrents</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'public domain'</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"n\">ORDERS</span><span class=\"o\">.</span><span class=\"n\">NAME</span><span class=\"o\">.</span><span class=\"n\">DEC</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">CATEGORIES</span><span class=\"o\">.</span><span class=\"n\">VIDEO</span><span class=\"o\">.</span><span class=\"n\">MOVIES</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the most seeded torrent based on a filter</span>\n<span class=\"n\">torrent</span> <span class=\"o\">=</span> <span class=\"n\">torrents</span><span class=\"o\">.</span><span class=\"n\">getBestTorrent</span><span class=\"p\">(</span><span class=\"n\">min_seeds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">min_filesize</span><span class=\"o\">=</span><span class=\"s1\">'500 MiB'</span><span class=\"p\">,</span> <span class=\"n\">max_filesize</span><span class=\"o\">=</span><span class=\"s1\">'4 GiB'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or select a particular torrent by indexing</span>\n<span class=\"n\">torrent</span> <span class=\"o\">=</span> <span class=\"n\">torrents</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get the magnet link for a torrent</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">torrent</span><span class=\"o\">.</span><span class=\"n\">magnetlink</span><span class=\"p\">)</span>\n</pre>\n<h2>Browse</h2>\n<pre><span class=\"c1\"># You can browse all of the torrents from a single category</span>\n<span class=\"n\">torrents</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">browse</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">CATEGORIES</span><span class=\"o\">.</span><span class=\"n\">VIDEOS</span><span class=\"p\">)</span>\n<span class=\"c1\"># Customize the page number and sort order</span>\n<span class=\"n\">torrents</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">browse</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">CATEGORIES</span><span class=\"o\">.</span><span class=\"n\">VIDEO</span><span class=\"o\">.</span><span class=\"n\">MOVIES</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"n\">ORDERS</span><span class=\"o\">.</span><span class=\"n\">UPLOADED</span><span class=\"o\">.</span><span class=\"n\">DES</span><span class=\"p\">)</span>\n</pre>\n<h2>Categories and Sort Order</h2>\n<pre><span class=\"c1\"># To print all available categories, use the classmethod printOptions</span>\n<span class=\"n\">CATEGORIES</span><span class=\"o\">.</span><span class=\"n\">printOptions</span><span class=\"p\">()</span>\n<span class=\"c1\"># Or just a subset of categories, like VIDEOS</span>\n<span class=\"n\">CATEGORIES</span><span class=\"o\">.</span><span class=\"n\">VIDEO</span><span class=\"o\">.</span><span class=\"n\">printOptions</span><span class=\"p\">()</span>\n<span class=\"c1\"># Similarly for the sort order</span>\n<span class=\"n\">ORDERS</span><span class=\"o\">.</span><span class=\"n\">printOptions</span><span class=\"p\">()</span>\n</pre>\n<h2>Torrents object</h2>\n<p>The search function returns a <code>Torrents</code> object, which is a <em>list-like</em> collection of the torrents found.</p>\n<p>You can also iterate over the <code>Torrents</code> object just by calling it in a for loop (see example above).</p>\n<p>You can see how many <code>Torrent</code> objects your query has returned, by using the <code>len()</code> function</p>\n<h2>Torrent object</h2>\n<p><code>Torrent</code> objects represent each torrent found in the <code>Torrents</code> class, they have the following attributes</p>\n<h3>Attributes</h3>\n<ul>\n<li><code>Torrent.title</code> - The name of the torrent (str)</li>\n<li><code>Torrent.seeds</code> - The number of seeders (int)</li>\n<li><code>Torrent.leeches</code> - The number of leechers (int)</li>\n<li><code>Torrent.upload_date</code> - Date the torrent was uploaded (str)</li>\n<li><code>Torrent.uploader</code> - Name of user who uploaded torrent (str)</li>\n<li><code>Torrent.filesize</code> - The filesize in *iB format, eg. 5 GiB (str)</li>\n<li><code>Torrent.byte_size</code> - The filesize in bytes of the torrent (int)</li>\n<li><code>Torrent.magnetlink</code> - magnetlink of the torrent (str)</li>\n</ul>\n<h1>Example Workflow</h1>\n<p>With a commandline torrent client such as <a href=\"https://aria2.github.io/\" rel=\"nofollow\">aria2</a>, you can automate search and downloading of torrents like so:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tpblite</span> <span class=\"kn\">import</span> <span class=\"n\">TPB</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">TPB</span><span class=\"p\">()</span>\n<span class=\"n\">torrents</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'GIMP 2.10.8'</span><span class=\"p\">)</span>\n<span class=\"n\">torrent</span> <span class=\"o\">=</span> <span class=\"n\">torrents</span><span class=\"o\">.</span><span class=\"n\">getBestTorrent</span><span class=\"p\">()</span>\n<span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">([</span><span class=\"s1\">'aria2c'</span><span class=\"p\">,</span> <span class=\"n\">torrent</span><span class=\"o\">.</span><span class=\"n\">magnetlink</span><span class=\"p\">])</span>\n</pre>\n\n          </div>"}, "last_serial": 6359232, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "8ec7e4e8993f449966fc84f67398c1b9", "sha256": "d6a3a9c76d51315f3bc8e52f3be3178d96b4ee83f7df9a726849fbcc936228cc"}, "downloads": -1, "filename": "tpblite-0.2.2.tar.gz", "has_sig": false, "md5_digest": "8ec7e4e8993f449966fc84f67398c1b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5631, "upload_time": "2019-12-19T09:04:08", "upload_time_iso_8601": "2019-12-19T09:04:08.966846Z", "url": "https://files.pythonhosted.org/packages/f5/41/75354842f715245402e9e667eea804c1d82cac9975f44f17706e9be21d83/tpblite-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5b9330a7cc4d58c1ebd6ac9131c3a9ff", "sha256": "cec720bd52e5d1f4c6a07a0a499bde44d11cd13eb597b2422db860ffc48013c6"}, "downloads": -1, "filename": "tpblite-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5b9330a7cc4d58c1ebd6ac9131c3a9ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5994, "upload_time": "2019-12-19T10:27:54", "upload_time_iso_8601": "2019-12-19T10:27:54.602011Z", "url": "https://files.pythonhosted.org/packages/75/7b/fd477d5103d7aac0f7421897c6b0123dc225f24242ca21b94b68227e6246/tpblite-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "270b06bd57cf110c3a7797bfb97383e4", "sha256": "0ac6afa0c81ab164705611ac877d5061c2780b8252d277a73ffaaf8d843aff09"}, "downloads": -1, "filename": "tpblite-0.2.4.tar.gz", "has_sig": false, "md5_digest": "270b06bd57cf110c3a7797bfb97383e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5983, "upload_time": "2019-12-21T11:21:13", "upload_time_iso_8601": "2019-12-21T11:21:13.334504Z", "url": "https://files.pythonhosted.org/packages/e2/a4/1fbf3b57208b2576a07bfa6f2bed62e7a20aa13f6bb64f89cbac27df8723/tpblite-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4eeb4ed06e3ddbf937799f96e7957e8d", "sha256": "7c279b3eaeeeb2e813d5a0d7a5ee92bcfefce6da67b27f09f256cc635c503c1c"}, "downloads": -1, "filename": "tpblite-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4eeb4ed06e3ddbf937799f96e7957e8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6400, "upload_time": "2019-12-25T18:05:41", "upload_time_iso_8601": "2019-12-25T18:05:41.226166Z", "url": "https://files.pythonhosted.org/packages/a0/78/218c74344d5e57b69c2301ad39e69c0167684540bf03b8f2f982bae0a287/tpblite-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eeb4ed06e3ddbf937799f96e7957e8d", "sha256": "7c279b3eaeeeb2e813d5a0d7a5ee92bcfefce6da67b27f09f256cc635c503c1c"}, "downloads": -1, "filename": "tpblite-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4eeb4ed06e3ddbf937799f96e7957e8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6400, "upload_time": "2019-12-25T18:05:41", "upload_time_iso_8601": "2019-12-25T18:05:41.226166Z", "url": "https://files.pythonhosted.org/packages/a0/78/218c74344d5e57b69c2301ad39e69c0167684540bf03b8f2f982bae0a287/tpblite-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:16 2020"}