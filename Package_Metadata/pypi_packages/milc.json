{"info": {"author": "skullydazed", "author_email": "skullydazed@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "# MILC - An Opinionated Batteries-Included Python 3 CLI Framework\n\nMILC is a framework for writing CLI applications in Python 3. It gives you\nall the features users expect from a modern CLI tool out of the box:\n\n* CLI Argument Parsing, with or without subcommands\n* Automatic tab-completion support through [argcomplete](https://github.com/kislyuk/argcomplete)\n* Configuration file which can be overridden by CLI options\n* ANSI color support- even on Windows- with [colorama](https://github.com/tartley/colorama)\n* Logging to stderr and/or a file, with ANSI colors\n* Easy method for printing to stdout with ANSI colors\n* Labeling log output with colored emoji to easily distinguish message types\n* Thread safety\n\n# Documentation\n\nFull documentation is on the web: <https://milc.clueboard.co/>\n\n## Short Example\n\n```python\nfrom milc import MILC\n\ncli = MILC('My useful CLI tool.')\n\n@cli.argument('-c', '--comma', help='comma in output', default=True, action='store_boolean')\n@cli.argument('-n', '--name', help='Name to greet', default='World')\n@cli.entrypoint\ndef main(cli):\n    comma = ',' if cli.config.general.comma else ''\n    cli.log.info('Hello%s %s!', comma, cli.config.general.name)\n\nif __name__ == '__main__':\n    cli.run()\n```\n\n### Output\n\n```\n$ ./hello\n\u2139 Hello, World!\n$ ./hello --no-color\nINFO Hello, World!\n$ ./hello --no-comma\n\u2139 Hello World!\n$ ./hello -h\nusage: hello [-h] [-V] [-v] [--datetime-fmt GENERAL_DATETIME_FMT]\n             [--log-fmt GENERAL_LOG_FMT] [--log-file-fmt GENERAL_LOG_FILE_FMT]\n             [--log-file GENERAL_LOG_FILE] [--color] [--no-color]\n             [--config-file GENERAL_CONFIG_FILE] [--save-config]\n             [-n GENERAL_NAME] [-c] [--no-comma]\n\nGreet a user.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         Display the version and exit\n  -v, --verbose         Make the logging more verbose\n  --datetime-fmt GENERAL_DATETIME_FMT\n                        Format string for datetimes\n  --log-fmt GENERAL_LOG_FMT\n                        Format string for printed log output\n  --log-file-fmt GENERAL_LOG_FILE_FMT\n                        Format string for log file.\n  --log-file GENERAL_LOG_FILE\n                        File to write log messages to\n  --color               Enable color in output\n  --no-color            Disable color in output\n  --config-file GENERAL_CONFIG_FILE\n                        The config file to read and/or write\n  --save-config         Save the running configuration to the config file\n  -n GENERAL_NAME, --name GENERAL_NAME\n                        Name to greet\n  -c, --comma           Enable comma in output\n  --no-comma            Disable comma in output\n```\n\n# Why MILC?\n\nBecause life is too short to integrate this stuff yourself, and writing\ngood CLIs with comprehensive functionality is harder than it needs to be.\n\nMost of the other CLI frameworks are missing a piece of the puzzle. Maybe\nthey have argument parsing but no config file story. Maybe they have a\ngood story around arguments and config but don't handle logging at all.\nYou know that you're doing the same integration work that almost everyone\nelse is doing in their own app. Why do we duplicate so much effort?\n\nMILC is my answer to that. It implements a common set of CLI tools that\npretty much every project I have ever worked on either needed or would\nhave benefited from. Included in MILC are answers to problems you didn't\nknow you have:\n\n* Config file saving and parsing\n* Automatically overriding config options with CLI arguments\n* Automatic verbose (-v) support\n* Automatic log support\n* Built-in flags for formatting log messages and log date formats\n* Support for boolean arguments (define --foo and get --no-foo for free)\n* Battle tested and used by hundreds of users every single day\n\nYou may not use all of these features yourself, but you will have users\nwho are very glad these options are available when they need them.\n\n# Contributing\n\nContributions are welcome! You don't need to open an issue first, if\nyou've developed a new feature or fixed a bug in MILC simply open\na PR and we'll review it.\n\nPlease follow this checklist before submitting a PR:\n\n* [ ] Format your code: `yapf -i -r .`\n* [ ] Generate docs: `./generate_docs`\n* [ ] Add any new doc files to `docs/_summary.md`\n* [ ] Run tests: `./ci_tests`\n\n# FAQ\n\n## Why add_argument() instead of parsing function signatures?\n\nBecause I believe in writing good CLI tools.\n\nBefore writing MILC I saw variations of the same story over and over. \"I\nstarted with {Click,Docopt,Whatever} but after a while I ended up just\ngoing back to argparse.\" In pretty much every case as the complexity of\ntheir program grew they needed to do things argparse made easy and their\nframework made hard.\n\nMILC attempts to solve this by embracing the complexity of argparse. It\nhandles the drudgery of setting up argparse for you, but gives you an\nelegant means to control that complexity when you need to. When your\nCLI framework relies on parsing function signatures you are necessarily\nlimited in what you can do. Function annotations make this a little\nbetter but they are not a full solution to the problem.\n\nIf you care about writing good CLI tools (and I hope you do) you will want\nmore control over the behavior of your program than Click or Docopt give you.\n\n## Why Not Some Other CLI Framework Instead?\n\nWhenever you release a new framework the first question you'll be asked is\nwhy you didn't just use one of the existing options instead.\n\nAs I surveyed the other tools I found that most of them only solve part of\nthe problem, not the whole problem. Those that solve the whole problem are\nvery hard to use or get started with, or are otherwise very heavyweight. I\nwanted a comprehensive framework that was easy to get started with.\n\nBelow is a list of the existing tools I have looked at and why I feel they\ndon't fill the same need as MILC.\n\n| Name | Argument Parsing | Config File | Logging | Subcommands | Subcommand Config |\n|------|------------------|-------------|---------|-------------|-------------------|\n| MILC | \u2714 | \u2714 | \u2714 | \u2714 | \u2714 |\n| [Argparse](#Argparse) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| ConfigParser | \u2716 | \u2714 | \u2716 | \u2714 | \u2716 |\n| logging | \u2716 | \u2716 | \u2714 | \u2716 | \u2716 |\n| [Cement](#Cement) | \u2714 | \u2714 | \u2714 | \u2714 | \u2714 |\n| [Cliar](#Cliar) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Click](#Click) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Clize](#Clize) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Cogs](#Cogs) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Defopt](#Defopt) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Docopt](#Docopt) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Fire](#Fire) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n| [Plac](#Plac) | \u2714 | \u2716 | \u2716 | \u2714 | \u2716 |\n\nNote: This list was compiled in 2018. In 2020 I edited the list to remove\ndead projects but I not go searching for new projects. The time for justifying\nMILC's existence has passed.\n\n### Argparse\n\nThe built-in argparse module is amazing- MILC uses it under the hood. Using\nit directly as an end-user is complicated and error-prone however. The common\npatterns mean you end up putting the definition of CLI arguments in a\ndifferent place from the code that uses those arguments.\n\n### Cement\n\n<https://builtoncement.com/>\n\nCement is a very heavy MVC framework for building CLI tools. It includes all\nthe functionality MILC provides and then some. If you're looking for an\nMVC framework for your tool this is the one to pick.\n\nIf you are looking for an MVC framework MILC probably isn't what you want.\nUse Cement instead.\n\n### Cliar\n\n<https://moigagoo.github.io/cliar/>\n\nThis is an interesting library. The author makes some good points about\nmagic and DSL's. But it requires you to write a class for your CLI. Classes\nare good, but not every tool should be a class.\n\nCliar does not support a configuration file or logging.\n\n### Click\n\n<https://github.com/pallets/click>\n\nYou'd have to be a fool or incredibly sure of yourself to compete against one\nof Armin Ronacher's projects. :)\n\nClick is great, and I borrowed the decorator concept from Flask before I saw\nClick had done the same thing. It terms of how you use it there are a lot of\nsimilarities between Click and MILC.\n\nWhere Click and MILC part ways is in the underlying implementation. MILC\nuses the recommended and built-in Python modules whenever possible. Under the\nhood MILC is just argparse, logging, ConfigParser, and other standard modules\nabstracted just enough to make the right thing easy. Click on the other hand\nuses optparser, which has been deprecated in favor of argparser, and handles\na lot of functionality itself rather than dispatching to included Python\nmodules.\n\nMILC does not insist upon a UTF-8 environment for Python 3 the way Click\ndoes. I understand Click's stance here but I'm hoping that the ecosystem has\ndeveloped enough by now to make it no longer necessary. Time will tell if\nmy opinion changes or not.\n\nWhether you should use Click or MILC depends on the tradeoff you want to\nmake. Would you rather use the Python modules everyone's already familiar with\nor dive into a world of custom code that attempts to make everything cleaner\noverall? Do you want one cohesive system or do you want to pull together\ndisparate plugins and modules to build the functionality you need?\n\nClick does not support a configuration file or logging out of the box, but\nthere are [plugins](https://github.com/click-contrib) you can get to add this\nand other functionality to Click.\n\n### Clize\n\n<https://github.com/epsy/clize>\n\nClize has a nice approach with lots of mature and advanced functionality.\n\nClize uses function annotation to work, which may or may not fit with how you\nwork. It also has a lot of arbitrary restrictions due to annotations, for\nexample alt functions don't work with argument aliases.\n\nClize does not support a configuration file or logging.\n\n### Cogs\n\n<https://github.com/prometheusresearch/cogs>\n\nCogs seems interesting, but has its own dedicated CLI tool named `cogs`. You\ndon't create scripts directly but instead create Python functions that `cogs`\nwill call. This is not a paradigm that I want to use.\n\nCogs does not include config file support.\n\n### defopt\n\n<https://github.com/evanunderscore/defopt>\n\nDefopt is a great tool for turning functions into CLIs. Had I found this\nearlier I may not have written MILC at all. But I have written MILC, and\nthere's some things I'm still not sure about. For example, I don't see a way\nto have script handle both subcommand and non-subcommand operation.\n\nDefopt does not support a configuration file or logging.\n\n### docopt\n\n<https://github.com/docopt/docopt>\n\nDocopt has a large following, and some interesting ideas. But if you are\nsomeone who does not like the idea of using comments to define behavior you\nwill not enjoy working with docopt.\n\nDocopt has poor error handling. You have to do your own argument validation,\nand even when Docopt knows the passed arguments are invalid it does not return\na useful error message to the user.\n\nDocopt does not support config files.\n\n### Fire\n\n<https://github.com/google/python-fire>\n\nFire is an interesting idea- turn any class into a CLI. Unfortunately this\nis useful more as a tool for introspection than building a good CLI.\n\nFire does not support a configuration file or logging.\n\n### Plac\n\n<https://github.com/micheles/plac>\n\nI like his idea about scaling down, and it's part of what drove me. But I\ndon't want to go without functionality to scale down. MILC's idea of scaling\ndown is working well for small programs.\n\nPlac does not support a configuration file or logging.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://milc.clueboard.co/", "keywords": "", "license": "MIT License", "maintainer": "skullydazed", "maintainer_email": "skullydazed@gmail.com", "name": "milc", "package_url": "https://pypi.org/project/milc/", "platform": "", "project_url": "https://pypi.org/project/milc/", "project_urls": {"Homepage": "https://milc.clueboard.co/"}, "release_url": "https://pypi.org/project/milc/1.0.7/", "requires_dist": ["appdirs", "argcomplete", "colorama"], "requires_python": "", "summary": "Opinionated Batteries-Included Python 3 CLI Framework.", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MILC - An Opinionated Batteries-Included Python 3 CLI Framework</h1>\n<p>MILC is a framework for writing CLI applications in Python 3. It gives you\nall the features users expect from a modern CLI tool out of the box:</p>\n<ul>\n<li>CLI Argument Parsing, with or without subcommands</li>\n<li>Automatic tab-completion support through <a href=\"https://github.com/kislyuk/argcomplete\" rel=\"nofollow\">argcomplete</a></li>\n<li>Configuration file which can be overridden by CLI options</li>\n<li>ANSI color support- even on Windows- with <a href=\"https://github.com/tartley/colorama\" rel=\"nofollow\">colorama</a></li>\n<li>Logging to stderr and/or a file, with ANSI colors</li>\n<li>Easy method for printing to stdout with ANSI colors</li>\n<li>Labeling log output with colored emoji to easily distinguish message types</li>\n<li>Thread safety</li>\n</ul>\n<h1>Documentation</h1>\n<p>Full documentation is on the web: <a href=\"https://milc.clueboard.co/\" rel=\"nofollow\">https://milc.clueboard.co/</a></p>\n<h2>Short Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">milc</span> <span class=\"kn\">import</span> <span class=\"n\">MILC</span>\n\n<span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">MILC</span><span class=\"p\">(</span><span class=\"s1\">'My useful CLI tool.'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"s1\">'--comma'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'comma in output'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_boolean'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"p\">(</span><span class=\"s1\">'-n'</span><span class=\"p\">,</span> <span class=\"s1\">'--name'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Name to greet'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'World'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cli</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">cli</span><span class=\"p\">):</span>\n    <span class=\"n\">comma</span> <span class=\"o\">=</span> <span class=\"s1\">','</span> <span class=\"k\">if</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">general</span><span class=\"o\">.</span><span class=\"n\">comma</span> <span class=\"k\">else</span> <span class=\"s1\">''</span>\n    <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Hello</span><span class=\"si\">%s</span><span class=\"s1\"> </span><span class=\"si\">%s</span><span class=\"s1\">!'</span><span class=\"p\">,</span> <span class=\"n\">comma</span><span class=\"p\">,</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">general</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Output</h3>\n<pre><code>$ ./hello\n\u2139 Hello, World!\n$ ./hello --no-color\nINFO Hello, World!\n$ ./hello --no-comma\n\u2139 Hello World!\n$ ./hello -h\nusage: hello [-h] [-V] [-v] [--datetime-fmt GENERAL_DATETIME_FMT]\n             [--log-fmt GENERAL_LOG_FMT] [--log-file-fmt GENERAL_LOG_FILE_FMT]\n             [--log-file GENERAL_LOG_FILE] [--color] [--no-color]\n             [--config-file GENERAL_CONFIG_FILE] [--save-config]\n             [-n GENERAL_NAME] [-c] [--no-comma]\n\nGreet a user.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         Display the version and exit\n  -v, --verbose         Make the logging more verbose\n  --datetime-fmt GENERAL_DATETIME_FMT\n                        Format string for datetimes\n  --log-fmt GENERAL_LOG_FMT\n                        Format string for printed log output\n  --log-file-fmt GENERAL_LOG_FILE_FMT\n                        Format string for log file.\n  --log-file GENERAL_LOG_FILE\n                        File to write log messages to\n  --color               Enable color in output\n  --no-color            Disable color in output\n  --config-file GENERAL_CONFIG_FILE\n                        The config file to read and/or write\n  --save-config         Save the running configuration to the config file\n  -n GENERAL_NAME, --name GENERAL_NAME\n                        Name to greet\n  -c, --comma           Enable comma in output\n  --no-comma            Disable comma in output\n</code></pre>\n<h1>Why MILC?</h1>\n<p>Because life is too short to integrate this stuff yourself, and writing\ngood CLIs with comprehensive functionality is harder than it needs to be.</p>\n<p>Most of the other CLI frameworks are missing a piece of the puzzle. Maybe\nthey have argument parsing but no config file story. Maybe they have a\ngood story around arguments and config but don't handle logging at all.\nYou know that you're doing the same integration work that almost everyone\nelse is doing in their own app. Why do we duplicate so much effort?</p>\n<p>MILC is my answer to that. It implements a common set of CLI tools that\npretty much every project I have ever worked on either needed or would\nhave benefited from. Included in MILC are answers to problems you didn't\nknow you have:</p>\n<ul>\n<li>Config file saving and parsing</li>\n<li>Automatically overriding config options with CLI arguments</li>\n<li>Automatic verbose (-v) support</li>\n<li>Automatic log support</li>\n<li>Built-in flags for formatting log messages and log date formats</li>\n<li>Support for boolean arguments (define --foo and get --no-foo for free)</li>\n<li>Battle tested and used by hundreds of users every single day</li>\n</ul>\n<p>You may not use all of these features yourself, but you will have users\nwho are very glad these options are available when they need them.</p>\n<h1>Contributing</h1>\n<p>Contributions are welcome! You don't need to open an issue first, if\nyou've developed a new feature or fixed a bug in MILC simply open\na PR and we'll review it.</p>\n<p>Please follow this checklist before submitting a PR:</p>\n<ul>\n<li>[ ] Format your code: <code>yapf -i -r .</code></li>\n<li>[ ] Generate docs: <code>./generate_docs</code></li>\n<li>[ ] Add any new doc files to <code>docs/_summary.md</code></li>\n<li>[ ] Run tests: <code>./ci_tests</code></li>\n</ul>\n<h1>FAQ</h1>\n<h2>Why add_argument() instead of parsing function signatures?</h2>\n<p>Because I believe in writing good CLI tools.</p>\n<p>Before writing MILC I saw variations of the same story over and over. \"I\nstarted with {Click,Docopt,Whatever} but after a while I ended up just\ngoing back to argparse.\" In pretty much every case as the complexity of\ntheir program grew they needed to do things argparse made easy and their\nframework made hard.</p>\n<p>MILC attempts to solve this by embracing the complexity of argparse. It\nhandles the drudgery of setting up argparse for you, but gives you an\nelegant means to control that complexity when you need to. When your\nCLI framework relies on parsing function signatures you are necessarily\nlimited in what you can do. Function annotations make this a little\nbetter but they are not a full solution to the problem.</p>\n<p>If you care about writing good CLI tools (and I hope you do) you will want\nmore control over the behavior of your program than Click or Docopt give you.</p>\n<h2>Why Not Some Other CLI Framework Instead?</h2>\n<p>Whenever you release a new framework the first question you'll be asked is\nwhy you didn't just use one of the existing options instead.</p>\n<p>As I surveyed the other tools I found that most of them only solve part of\nthe problem, not the whole problem. Those that solve the whole problem are\nvery hard to use or get started with, or are otherwise very heavyweight. I\nwanted a comprehensive framework that was easy to get started with.</p>\n<p>Below is a list of the existing tools I have looked at and why I feel they\ndon't fill the same need as MILC.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Argument Parsing</th>\n<th>Config File</th>\n<th>Logging</th>\n<th>Subcommands</th>\n<th>Subcommand Config</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MILC</td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n</tr>\n<tr>\n<td><a href=\"#Argparse\" rel=\"nofollow\">Argparse</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td>ConfigParser</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td>logging</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Cement\" rel=\"nofollow\">Cement</a></td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n<td>\u2714</td>\n</tr>\n<tr>\n<td><a href=\"#Cliar\" rel=\"nofollow\">Cliar</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Click\" rel=\"nofollow\">Click</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Clize\" rel=\"nofollow\">Clize</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Cogs\" rel=\"nofollow\">Cogs</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Defopt\" rel=\"nofollow\">Defopt</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Docopt\" rel=\"nofollow\">Docopt</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Fire\" rel=\"nofollow\">Fire</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr>\n<tr>\n<td><a href=\"#Plac\" rel=\"nofollow\">Plac</a></td>\n<td>\u2714</td>\n<td>\u2716</td>\n<td>\u2716</td>\n<td>\u2714</td>\n<td>\u2716</td>\n</tr></tbody></table>\n<p>Note: This list was compiled in 2018. In 2020 I edited the list to remove\ndead projects but I not go searching for new projects. The time for justifying\nMILC's existence has passed.</p>\n<h3>Argparse</h3>\n<p>The built-in argparse module is amazing- MILC uses it under the hood. Using\nit directly as an end-user is complicated and error-prone however. The common\npatterns mean you end up putting the definition of CLI arguments in a\ndifferent place from the code that uses those arguments.</p>\n<h3>Cement</h3>\n<p><a href=\"https://builtoncement.com/\" rel=\"nofollow\">https://builtoncement.com/</a></p>\n<p>Cement is a very heavy MVC framework for building CLI tools. It includes all\nthe functionality MILC provides and then some. If you're looking for an\nMVC framework for your tool this is the one to pick.</p>\n<p>If you are looking for an MVC framework MILC probably isn't what you want.\nUse Cement instead.</p>\n<h3>Cliar</h3>\n<p><a href=\"https://moigagoo.github.io/cliar/\" rel=\"nofollow\">https://moigagoo.github.io/cliar/</a></p>\n<p>This is an interesting library. The author makes some good points about\nmagic and DSL's. But it requires you to write a class for your CLI. Classes\nare good, but not every tool should be a class.</p>\n<p>Cliar does not support a configuration file or logging.</p>\n<h3>Click</h3>\n<p><a href=\"https://github.com/pallets/click\" rel=\"nofollow\">https://github.com/pallets/click</a></p>\n<p>You'd have to be a fool or incredibly sure of yourself to compete against one\nof Armin Ronacher's projects. :)</p>\n<p>Click is great, and I borrowed the decorator concept from Flask before I saw\nClick had done the same thing. It terms of how you use it there are a lot of\nsimilarities between Click and MILC.</p>\n<p>Where Click and MILC part ways is in the underlying implementation. MILC\nuses the recommended and built-in Python modules whenever possible. Under the\nhood MILC is just argparse, logging, ConfigParser, and other standard modules\nabstracted just enough to make the right thing easy. Click on the other hand\nuses optparser, which has been deprecated in favor of argparser, and handles\na lot of functionality itself rather than dispatching to included Python\nmodules.</p>\n<p>MILC does not insist upon a UTF-8 environment for Python 3 the way Click\ndoes. I understand Click's stance here but I'm hoping that the ecosystem has\ndeveloped enough by now to make it no longer necessary. Time will tell if\nmy opinion changes or not.</p>\n<p>Whether you should use Click or MILC depends on the tradeoff you want to\nmake. Would you rather use the Python modules everyone's already familiar with\nor dive into a world of custom code that attempts to make everything cleaner\noverall? Do you want one cohesive system or do you want to pull together\ndisparate plugins and modules to build the functionality you need?</p>\n<p>Click does not support a configuration file or logging out of the box, but\nthere are <a href=\"https://github.com/click-contrib\" rel=\"nofollow\">plugins</a> you can get to add this\nand other functionality to Click.</p>\n<h3>Clize</h3>\n<p><a href=\"https://github.com/epsy/clize\" rel=\"nofollow\">https://github.com/epsy/clize</a></p>\n<p>Clize has a nice approach with lots of mature and advanced functionality.</p>\n<p>Clize uses function annotation to work, which may or may not fit with how you\nwork. It also has a lot of arbitrary restrictions due to annotations, for\nexample alt functions don't work with argument aliases.</p>\n<p>Clize does not support a configuration file or logging.</p>\n<h3>Cogs</h3>\n<p><a href=\"https://github.com/prometheusresearch/cogs\" rel=\"nofollow\">https://github.com/prometheusresearch/cogs</a></p>\n<p>Cogs seems interesting, but has its own dedicated CLI tool named <code>cogs</code>. You\ndon't create scripts directly but instead create Python functions that <code>cogs</code>\nwill call. This is not a paradigm that I want to use.</p>\n<p>Cogs does not include config file support.</p>\n<h3>defopt</h3>\n<p><a href=\"https://github.com/evanunderscore/defopt\" rel=\"nofollow\">https://github.com/evanunderscore/defopt</a></p>\n<p>Defopt is a great tool for turning functions into CLIs. Had I found this\nearlier I may not have written MILC at all. But I have written MILC, and\nthere's some things I'm still not sure about. For example, I don't see a way\nto have script handle both subcommand and non-subcommand operation.</p>\n<p>Defopt does not support a configuration file or logging.</p>\n<h3>docopt</h3>\n<p><a href=\"https://github.com/docopt/docopt\" rel=\"nofollow\">https://github.com/docopt/docopt</a></p>\n<p>Docopt has a large following, and some interesting ideas. But if you are\nsomeone who does not like the idea of using comments to define behavior you\nwill not enjoy working with docopt.</p>\n<p>Docopt has poor error handling. You have to do your own argument validation,\nand even when Docopt knows the passed arguments are invalid it does not return\na useful error message to the user.</p>\n<p>Docopt does not support config files.</p>\n<h3>Fire</h3>\n<p><a href=\"https://github.com/google/python-fire\" rel=\"nofollow\">https://github.com/google/python-fire</a></p>\n<p>Fire is an interesting idea- turn any class into a CLI. Unfortunately this\nis useful more as a tool for introspection than building a good CLI.</p>\n<p>Fire does not support a configuration file or logging.</p>\n<h3>Plac</h3>\n<p><a href=\"https://github.com/micheles/plac\" rel=\"nofollow\">https://github.com/micheles/plac</a></p>\n<p>I like his idea about scaling down, and it's part of what drove me. But I\ndon't want to go without functionality to scale down. MILC's idea of scaling\ndown is working well for small programs.</p>\n<p>Plac does not support a configuration file or logging.</p>\n\n          </div>"}, "last_serial": 7126348, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e6fe3ecd2f8f635971bd337ebae3ce9a", "sha256": "7f5d8155008be191a1d6ba8262ecdd943713c9976299f7894dad8941fb43e46f"}, "downloads": -1, "filename": "milc-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e6fe3ecd2f8f635971bd337ebae3ce9a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18992, "upload_time": "2020-03-24T04:18:48", "upload_time_iso_8601": "2020-03-24T04:18:48.573976Z", "url": "https://files.pythonhosted.org/packages/3a/fe/0c366e7053506128ed28cff0d0301fd0c0e3d20cb28cfb262c427d2eeaa0/milc-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce8b4e33cf1aabdc5ca8bb732a5e42d7", "sha256": "f8e919225465d31936ac28afd5f5632ffc96ce0429a4f2f88786cf84394aacb5"}, "downloads": -1, "filename": "milc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ce8b4e33cf1aabdc5ca8bb732a5e42d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22832, "upload_time": "2020-03-24T04:18:51", "upload_time_iso_8601": "2020-03-24T04:18:51.513800Z", "url": "https://files.pythonhosted.org/packages/6e/3d/7b57dce102e55c0401292cdff68a9155496f9e4ea97bd43b0f4c8ec851b8/milc-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4b63970927347e5461f7600fe85cf1b8", "sha256": "51d58362af91af291d583d0dd962d0e32f35f0a35ec26f4e4c6f2f91b7b3767a"}, "downloads": -1, "filename": "milc-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b63970927347e5461f7600fe85cf1b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18994, "upload_time": "2020-03-24T04:35:24", "upload_time_iso_8601": "2020-03-24T04:35:24.633957Z", "url": "https://files.pythonhosted.org/packages/f1/21/8bca7096fb500d252c493d964163aa81aaef4814e4d978ccd84740a155f3/milc-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8501f21763c7f454d6c4da69559d43a0", "sha256": "35288465b80cfab2196414c33bf2bc094b4363511f0e07f81234c9869a48ab6c"}, "downloads": -1, "filename": "milc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8501f21763c7f454d6c4da69559d43a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22817, "upload_time": "2020-03-24T04:35:26", "upload_time_iso_8601": "2020-03-24T04:35:26.716120Z", "url": "https://files.pythonhosted.org/packages/94/d1/c3a78bcac870411ad3944f2c3b1abedfd6fb7c76c03e76cf239545969e0f/milc-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1f535b63a26a0c785acb030aee56cc40", "sha256": "510e0b037496143a682138a6a527acbeb03ef9ca363ab95f7bb6f1b73c3803e8"}, "downloads": -1, "filename": "milc-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1f535b63a26a0c785acb030aee56cc40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19013, "upload_time": "2020-03-24T20:39:56", "upload_time_iso_8601": "2020-03-24T20:39:56.171025Z", "url": "https://files.pythonhosted.org/packages/9c/7b/6876236719da1e1b5f7e860cfae56346860a6082ec75cf5747ab82838322/milc-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1bab32c3962c38d77f7814ad55de2e0", "sha256": "2458376951746b7da63b447019fef5393e169347012f01636fe6f656d442677e"}, "downloads": -1, "filename": "milc-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f1bab32c3962c38d77f7814ad55de2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22815, "upload_time": "2020-03-24T20:39:57", "upload_time_iso_8601": "2020-03-24T20:39:57.788972Z", "url": "https://files.pythonhosted.org/packages/4a/37/c114b423fd169d9478573625bf8df3c32039e5ac9da4f17e6206154d957a/milc-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a1a512f1880e5384041c796eb772516e", "sha256": "b9ad90b1f997b01cec5cd2b7e4a307cc77875a67c5d4f912f22ff15dbff29bd2"}, "downloads": -1, "filename": "milc-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a1a512f1880e5384041c796eb772516e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21972, "upload_time": "2020-03-30T15:47:30", "upload_time_iso_8601": "2020-03-30T15:47:30.989449Z", "url": "https://files.pythonhosted.org/packages/6e/61/98dec4fc51d0357d3bdf6679f21b850622af16b4a450d18347cb9ed2ad96/milc-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5dde339ae189ee8361b7ef735b700946", "sha256": "895e90f11c1d5f142248d2b6b80aa8db6dbefa496e0cf8e73daa6eea90f0169e"}, "downloads": -1, "filename": "milc-1.0.3.tar.gz", "has_sig": false, "md5_digest": "5dde339ae189ee8361b7ef735b700946", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24580, "upload_time": "2020-03-30T15:47:32", "upload_time_iso_8601": "2020-03-30T15:47:32.777093Z", "url": "https://files.pythonhosted.org/packages/1b/33/2ba997ae3859841739a4f8f6a819fee45583ce996b398a46b514bfef0b54/milc-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7092855837fd3db83b9958cf29dcf5a5", "sha256": "fa6f3eab575cd3c52667dda5e814ff373605625f909d585f31fd8524e66b1d8c"}, "downloads": -1, "filename": "milc-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7092855837fd3db83b9958cf29dcf5a5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22085, "upload_time": "2020-04-15T19:06:05", "upload_time_iso_8601": "2020-04-15T19:06:05.823433Z", "url": "https://files.pythonhosted.org/packages/81/18/6561abf05d80855d15fd93ba228af843a2dd310280e570911429c65ffc3c/milc-1.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb36b90dda48f5ceccd88c432c48390f", "sha256": "fa73dbd263cd7bf42a94c231e1d5861cbb445df99f886e4fb689ad663926c15c"}, "downloads": -1, "filename": "milc-1.0.4.tar.gz", "has_sig": false, "md5_digest": "fb36b90dda48f5ceccd88c432c48390f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24714, "upload_time": "2020-04-15T19:06:07", "upload_time_iso_8601": "2020-04-15T19:06:07.376155Z", "url": "https://files.pythonhosted.org/packages/fa/1b/602debb2082d6501fdb9799255cfc947e411fbe5867f2939a332a1e67160/milc-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "1bdad0074e9c2073c1454efc9f27c132", "sha256": "1d15698850e97dc621f5ca4de33d60b3dc073f7adc5eed8993ff52ab5ae8d280"}, "downloads": -1, "filename": "milc-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1bdad0074e9c2073c1454efc9f27c132", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22082, "upload_time": "2020-04-29T05:55:53", "upload_time_iso_8601": "2020-04-29T05:55:53.670586Z", "url": "https://files.pythonhosted.org/packages/3e/2a/20ebcd9effe690b446593c1ccf63d6f320102dc76c73c194e1af4e914cb5/milc-1.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f46d0aca5142d7b3bda7fe589335aa1", "sha256": "acd5d2c9912bdd6df345687beda01800b5eb55f98bbd4ca6062639426638e3ba"}, "downloads": -1, "filename": "milc-1.0.5.tar.gz", "has_sig": false, "md5_digest": "7f46d0aca5142d7b3bda7fe589335aa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24708, "upload_time": "2020-04-29T05:55:55", "upload_time_iso_8601": "2020-04-29T05:55:55.185155Z", "url": "https://files.pythonhosted.org/packages/64/40/c5dc401e1e9f85df99e38db4d5f495b45e350f6bf9d8d23269446d6a9ca2/milc-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "51eee96cc14985ad1266c197c6152824", "sha256": "a3af2ee115c5dc327f38e48eb837da7dd319eba92711cd79fb243b7bb1735725"}, "downloads": -1, "filename": "milc-1.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51eee96cc14985ad1266c197c6152824", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22258, "upload_time": "2020-04-29T05:57:10", "upload_time_iso_8601": "2020-04-29T05:57:10.244421Z", "url": "https://files.pythonhosted.org/packages/7a/74/c0aa573cd37f83c47849e9dec8580a35dbdabe0a8f03eeab25130b48e077/milc-1.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69dc14d12d5f90608f5e74f2ece2cc19", "sha256": "283666afa166aad1543c18ef600d8f5bddab155a41069a6c4aa5eb30ec23d5f6"}, "downloads": -1, "filename": "milc-1.0.6.tar.gz", "has_sig": false, "md5_digest": "69dc14d12d5f90608f5e74f2ece2cc19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24901, "upload_time": "2020-04-29T05:57:11", "upload_time_iso_8601": "2020-04-29T05:57:11.319145Z", "url": "https://files.pythonhosted.org/packages/b6/fa/4a6c25df274e5e38956851ce2746a9a446bd833d3508102c0e49666a74f3/milc-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "5ffe1411eeac3e0849a8f09602eeeda1", "sha256": "6fdab8b8f2f9553f4b4ff744fd0682affcef5972c9b2d8a51a8871c0cf5d5080"}, "downloads": -1, "filename": "milc-1.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ffe1411eeac3e0849a8f09602eeeda1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22202, "upload_time": "2020-04-29T06:23:26", "upload_time_iso_8601": "2020-04-29T06:23:26.083523Z", "url": "https://files.pythonhosted.org/packages/98/07/11fa6ef2790390f78f4332b590c3c125932387597ac6ea3f9516b6987b81/milc-1.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2dc47f529aabb1cf365fe1fe3ad4ea3", "sha256": "a5c9cee370b733196345df1377a237779df95003c870ecf3ea6bea6a659a2a26"}, "downloads": -1, "filename": "milc-1.0.7.tar.gz", "has_sig": false, "md5_digest": "b2dc47f529aabb1cf365fe1fe3ad4ea3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24834, "upload_time": "2020-04-29T06:23:27", "upload_time_iso_8601": "2020-04-29T06:23:27.894193Z", "url": "https://files.pythonhosted.org/packages/09/7d/3682123c07593d5c0c340fe821c6d52592f1f4be8f05a488ea39519ea71e/milc-1.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5ffe1411eeac3e0849a8f09602eeeda1", "sha256": "6fdab8b8f2f9553f4b4ff744fd0682affcef5972c9b2d8a51a8871c0cf5d5080"}, "downloads": -1, "filename": "milc-1.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ffe1411eeac3e0849a8f09602eeeda1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22202, "upload_time": "2020-04-29T06:23:26", "upload_time_iso_8601": "2020-04-29T06:23:26.083523Z", "url": "https://files.pythonhosted.org/packages/98/07/11fa6ef2790390f78f4332b590c3c125932387597ac6ea3f9516b6987b81/milc-1.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2dc47f529aabb1cf365fe1fe3ad4ea3", "sha256": "a5c9cee370b733196345df1377a237779df95003c870ecf3ea6bea6a659a2a26"}, "downloads": -1, "filename": "milc-1.0.7.tar.gz", "has_sig": false, "md5_digest": "b2dc47f529aabb1cf365fe1fe3ad4ea3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24834, "upload_time": "2020-04-29T06:23:27", "upload_time_iso_8601": "2020-04-29T06:23:27.894193Z", "url": "https://files.pythonhosted.org/packages/09/7d/3682123c07593d5c0c340fe821c6d52592f1f4be8f05a488ea39519ea71e/milc-1.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:39 2020"}