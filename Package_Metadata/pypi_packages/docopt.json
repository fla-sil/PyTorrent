{"info": {"author": "Vladimir Keleshev", "author_email": "vladimir@keleshev.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Utilities"], "description": "``docopt`` creates *beautiful* command-line interfaces\n======================================================================\n\nVideo introduction to **docopt**: `PyCon UK 2012: Create *beautiful*\ncommand-line interfaces with Python <http://youtu.be/pXhcPJK5cMc>`_\n\n    New in version 0.6.1:\n\n    - Fix issue `#85 <https://github.com/docopt/docopt/issues/85>`_\n      which caused improper handling of ``[options]`` shortcut\n      if it was present several times.\n\n    New in version 0.6.0:\n\n    - New argument ``options_first``, disallows interspersing options\n      and arguments.  If you supply ``options_first=True`` to\n      ``docopt``, it will interpret all arguments as positional\n      arguments after first positional argument.\n\n    - If option with argument could be repeated, its default value\n      will be interpreted as space-separated list. E.g. with\n      ``[default: ./here ./there]`` will be interpreted as\n      ``['./here', './there']``.\n\n    Breaking changes:\n\n    - Meaning of ``[options]`` shortcut slightly changed. Previously\n      it ment *\"any known option\"*. Now it means *\"any option not in\n      usage-pattern\"*.  This avoids the situation when an option is\n      allowed to be repeated unintentionaly.\n\n    - ``argv`` is ``None`` by default, not ``sys.argv[1:]``.\n      This allows ``docopt`` to always use the *latest* ``sys.argv``,\n      not ``sys.argv`` during import time.\n\nIsn't it awesome how ``optparse`` and ``argparse`` generate help\nmessages based on your code?!\n\n*Hell no!*  You know what's awesome?  It's when the option parser *is*\ngenerated based on the beautiful help message that you write yourself!\nThis way you don't need to write this stupid repeatable parser-code,\nand instead can write only the help message--*the way you want it*.\n\n**docopt** helps you create most beautiful command-line interfaces\n*easily*:\n\n.. code:: python\n\n    \"\"\"Naval Fate.\n\n    Usage:\n      naval_fate.py ship new <name>...\n      naval_fate.py ship <name> move <x> <y> [--speed=<kn>]\n      naval_fate.py ship shoot <x> <y>\n      naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]\n      naval_fate.py (-h | --help)\n      naval_fate.py --version\n\n    Options:\n      -h --help     Show this screen.\n      --version     Show version.\n      --speed=<kn>  Speed in knots [default: 10].\n      --moored      Moored (anchored) mine.\n      --drifting    Drifting mine.\n\n    \"\"\"\n    from docopt import docopt\n\n\n    if __name__ == '__main__':\n        arguments = docopt(__doc__, version='Naval Fate 2.0')\n        print(arguments)\n\nBeat that! The option parser is generated based on the docstring above\nthat is passed to ``docopt`` function.  ``docopt`` parses the usage\npattern (``\"Usage: ...\"``) and option descriptions (lines starting\nwith dash \"``-``\") and ensures that the program invocation matches the\nusage pattern; it parses options, arguments and commands based on\nthat. The basic idea is that *a good help message has all necessary\ninformation in it to make a parser*.\n\nAlso, `PEP 257 <http://www.python.org/dev/peps/pep-0257/>`_ recommends\nputting help message in the module docstrings.\n\nInstallation\n======================================================================\n\nUse `pip <http://pip-installer.org>`_ or easy_install::\n\n    pip install docopt==0.6.2\n\nAlternatively, you can just drop ``docopt.py`` file into your\nproject--it is self-contained.\n\n**docopt** is tested with Python 2.5, 2.6, 2.7, 3.2, 3.3 and PyPy.\n\nAPI\n======================================================================\n\n.. code:: python\n\n    from docopt import docopt\n\n.. code:: python\n\n    docopt(doc, argv=None, help=True, version=None, options_first=False)\n\n``docopt`` takes 1 required and 4 optional arguments:\n\n- ``doc`` could be a module docstring (``__doc__``) or some other\n  string that contains a **help message** that will be parsed to\n  create the option parser.  The simple rules of how to write such a\n  help message are given in next sections.  Here is a quick example of\n  such a string:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n\n    \"\"\"\n\n- ``argv`` is an optional argument vector; by default ``docopt`` uses\n  the argument vector passed to your program (``sys.argv[1:]``).\n  Alternatively you can supply a list of strings like ``['--verbose',\n  '-o', 'hai.txt']``.\n\n- ``help``, by default ``True``, specifies whether the parser should\n  automatically print the help message (supplied as ``doc``) and\n  terminate, in case ``-h`` or ``--help`` option is encountered\n  (options should exist in usage pattern, more on that below). If you\n  want to handle ``-h`` or ``--help`` options manually (as other\n  options), set ``help=False``.\n\n- ``version``, by default ``None``, is an optional argument that\n  specifies the version of your program. If supplied, then, (assuming\n  ``--version`` option is mentioned in usage pattern) when parser\n  encounters the ``--version`` option, it will print the supplied\n  version and terminate.  ``version`` could be any printable object,\n  but most likely a string, e.g. ``\"2.1.0rc1\"``.\n\n    Note, when ``docopt`` is set to automatically handle ``-h``,\n    ``--help`` and ``--version`` options, you still need to mention\n    them in usage pattern for this to work. Also, for your users to\n    know about them.\n\n- ``options_first``, by default ``False``.  If set to ``True`` will\n  disallow mixing options and positional argument.  I.e. after first\n  positional argument, all arguments will be interpreted as positional\n  even if the look like options.  This can be used for strict\n  compatibility with POSIX, or if you want to dispatch your arguments\n  to other programs.\n\nThe **return** value is a simple dictionary with options, arguments\nand commands as keys, spelled exactly like in your help message.  Long\nversions of options are given priority. For example, if you invoke the\ntop example as::\n\n    naval_fate.py ship Guardian move 100 150 --speed=15\n\nthe return dictionary will be:\n\n.. code:: python\n\n    {'--drifting': False,    'mine': False,\n     '--help': False,        'move': True,\n     '--moored': False,      'new': False,\n     '--speed': '15',        'remove': False,\n     '--version': False,     'set': False,\n     '<name>': ['Guardian'], 'ship': True,\n     '<x>': '100',           'shoot': False,\n     '<y>': '150'}\n\nHelp message format\n======================================================================\n\nHelp message consists of 2 parts:\n\n- Usage pattern, e.g.::\n\n    Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n- Option descriptions, e.g.::\n\n    -h --help    show this\n    -s --sorted  sorted output\n    -o FILE      specify output file [default: ./test.txt]\n    --quiet      print less text\n    --verbose    print more text\n\nTheir format is described below; other text is ignored.\n\nUsage pattern format\n----------------------------------------------------------------------\n\n**Usage pattern** is a substring of ``doc`` that starts with\n``usage:`` (case *insensitive*) and ends with a *visibly* empty line.\nMinimum example:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py\n\n    \"\"\"\n\nThe first word after ``usage:`` is interpreted as your program's name.\nYou can specify your program's name several times to signify several\nexclusive patterns:\n\n.. code:: python\n\n    \"\"\"Usage: my_program.py FILE\n              my_program.py COUNT FILE\n\n    \"\"\"\n\nEach pattern can consist of the following elements:\n\n- **<arguments>**, **ARGUMENTS**. Arguments are specified as either\n  upper-case words, e.g. ``my_program.py CONTENT-PATH`` or words\n  surrounded by angular brackets: ``my_program.py <content-path>``.\n- **--options**.  Options are words started with dash (``-``), e.g.\n  ``--output``, ``-o``.  You can \"stack\" several of one-letter\n  options, e.g. ``-oiv`` which will be the same as ``-o -i -v``. The\n  options can have arguments, e.g.  ``--input=FILE`` or ``-i FILE`` or\n  even ``-iFILE``. However it is important that you specify option\n  descriptions if you want for option to have an argument, a default\n  value, or specify synonymous short/long versions of option (see next\n  section on option descriptions).\n- **commands** are words that do *not* follow the described above\n  conventions of ``--options`` or ``<arguments>`` or ``ARGUMENTS``,\n  plus two special commands: dash \"``-``\" and double dash \"``--``\"\n  (see below).\n\nUse the following constructs to specify patterns:\n\n- **[ ]** (brackets) **optional** elements.  e.g.: ``my_program.py\n  [-hvqo FILE]``\n- **( )** (parens) **required** elements.  All elements that are *not*\n  put in **[ ]** are also required, e.g.: ``my_program.py\n  --path=<path> <file>...`` is the same as ``my_program.py\n  (--path=<path> <file>...)``.  (Note, \"required options\" might be not\n  a good idea for your users).\n- **|** (pipe) **mutualy exclusive** elements. Group them using **(\n  )** if one of the mutually exclusive elements is required:\n  ``my_program.py (--clockwise | --counter-clockwise) TIME``. Group\n  them using **[ ]** if none of the mutually-exclusive elements are\n  required: ``my_program.py [--left | --right]``.\n- **...** (ellipsis) **one or more** elements. To specify that\n  arbitrary number of repeating elements could be accepted, use\n  ellipsis (``...``), e.g.  ``my_program.py FILE ...`` means one or\n  more ``FILE``-s are accepted.  If you want to accept zero or more\n  elements, use brackets, e.g.: ``my_program.py [FILE ...]``. Ellipsis\n  works as a unary operator on the expression to the left.\n- **[options]** (case sensitive) shortcut for any options.  You can\n  use it if you want to specify that the usage pattern could be\n  provided with any options defined below in the option-descriptions\n  and do not want to enumerate them all in usage-pattern.  -\n  \"``[--]``\". Double dash \"``--``\" is used by convention to separate\n  positional arguments that can be mistaken for options. In order to\n  support this convention add \"``[--]``\" to you usage patterns.  -\n  \"``[-]``\". Single dash \"``-``\" is used by convention to signify that\n  ``stdin`` is used instead of a file. To support this add \"``[-]``\"\n  to you usage patterns. \"``-``\" act as a normal command.\n\nIf your pattern allows to match argument-less option (a flag) several\ntimes::\n\n    Usage: my_program.py [-v | -vv | -vvv]\n\nthen number of occurences of the option will be counted. I.e.\n``args['-v']`` will be ``2`` if program was invoked as ``my_program\n-vv``. Same works for commands.\n\nIf your usage patterns allows to match same-named option with argument\nor positional argument several times, the matched arguments will be\ncollected into a list::\n\n    Usage: my_program.py <file> <file> --path=<path>...\n\nI.e. invoked with ``my_program.py file1 file2 --path=./here\n--path=./there`` the returned dict will contain ``args['<file>'] ==\n['file1', 'file2']`` and ``args['--path'] == ['./here', './there']``.\n\n\nOption descriptions format\n----------------------------------------------------------------------\n\n**Option descriptions** consist of a list of options that you put\nbelow your usage patterns.\n\nIt is necessary to list option descriptions in order to specify:\n\n- synonymous short and long options,\n- if an option has an argument,\n- if option's argument has a default value.\n\nThe rules are as follows:\n\n- Every line in ``doc`` that starts with ``-`` or ``--`` (not counting\n  spaces) is treated as an option description, e.g.::\n\n    Options:\n      --verbose   # GOOD\n      -o FILE     # GOOD\n    Other: --bad  # BAD, line does not start with dash \"-\"\n\n- To specify that option has an argument, put a word describing that\n  argument after space (or equals \"``=``\" sign) as shown below. Follow\n  either <angular-brackets> or UPPER-CASE convention for options'\n  arguments.  You can use comma if you want to separate options. In\n  the example below, both lines are valid, however you are recommended\n  to stick to a single style.::\n\n    -o FILE --output=FILE       # without comma, with \"=\" sign\n    -i <file>, --input <file>   # with comma, wihtout \"=\" sing\n\n- Use two spaces to separate options with their informal description::\n\n    --verbose More text.   # BAD, will be treated as if verbose option had\n                           # an argument \"More\", so use 2 spaces instead\n    -q        Quit.        # GOOD\n    -o FILE   Output file. # GOOD\n    --stdout  Use stdout.  # GOOD, 2 spaces\n\n- If you want to set a default value for an option with an argument,\n  put it into the option-description, in form ``[default:\n  <my-default-value>]``::\n\n    --coefficient=K  The K coefficient [default: 2.95]\n    --output=FILE    Output file [default: test.txt]\n    --directory=DIR  Some directory [default: ./]\n\n- If the option is not repeatable, the value inside ``[default: ...]``\n  will be interpeted as string.  If it *is* repeatable, it will be\n  splited into a list on whitespace::\n\n    Usage: my_program.py [--repeatable=<arg> --repeatable=<arg>]\n                         [--another-repeatable=<arg>]...\n                         [--not-repeatable=<arg>]\n\n    # will be ['./here', './there']\n    --repeatable=<arg>          [default: ./here ./there]\n\n    # will be ['./here']\n    --another-repeatable=<arg>  [default: ./here]\n\n    # will be './here ./there', because it is not repeatable\n    --not-repeatable=<arg>      [default: ./here ./there]\n\nExamples\n----------------------------------------------------------------------\n\nWe have an extensive list of `examples\n<https://github.com/docopt/docopt/tree/master/examples>`_ which cover\nevery aspect of functionality of **docopt**.  Try them out, read the\nsource if in doubt.\n\nSubparsers, multi-level help and *huge* applications (like git)\n----------------------------------------------------------------------\n\nIf you want to split your usage-pattern into several, implement\nmulti-level help (whith separate help-screen for each subcommand),\nwant to interface with existing scripts that don't use **docopt**, or\nyou're building the next \"git\", you will need the new ``options_first``\nparameter (described in API section above). To get you started quickly\nwe implemented a subset of git command-line interface as an example:\n`examples/git\n<https://github.com/docopt/docopt/tree/master/examples/git>`_\n\n\nData validation\n----------------------------------------------------------------------\n\n**docopt** does one thing and does it well: it implements your\ncommand-line interface.  However it does not validate the input data.\nOn the other hand there are libraries like `python schema\n<https://github.com/halst/schema>`_ which make validating data a\nbreeze.  Take a look at `validation_example.py\n<https://github.com/docopt/docopt/tree/master/examples/validation_example.py>`_\nwhich uses **schema** to validate data and report an error to the\nuser.\n\nDevelopment\n======================================================================\n\nWe would *love* to hear what you think about **docopt** on our `issues\npage <http://github.com/docopt/docopt/issues>`_\n\nMake pull requrests, report bugs, suggest ideas and discuss\n**docopt**. You can also drop a line directly to\n<vladimir@keleshev.com>.\n\nPorting ``docopt`` to other languages\n======================================================================\n\nWe think **docopt** is so good, we want to share it beyond the Python\ncommunity!\n\nThe follosing ports are available:\n\n- `Ruby port <http://github.com/docopt/docopt.rb>`_\n- `CoffeeScript port <http://github.com/docopt/docopt.coffee>`_\n- `Lua port <http://github.com/docopt/docopt.lua>`_\n- `PHP port <http://github.com/docopt/docopt.php>`_\n\nBut you can always create a port for your favorite language!  You are\nencouraged to use the Python version as a reference implementation.  A\nLanguage-agnostic test suite is bundled with `Python implementation\n<http://github.com/docopt/docopt>`_.\n\nPorting discussion is on `issues page\n<http://github.com/docopt/docopt/issues>`_.\n\nChangelog\n======================================================================\n\n**docopt** follows `semantic versioning <http://semver.org>`_.  The\nfirst release with stable API will be 1.0.0 (soon).  Until then, you\nare encouraged to specify explicitly the version in your dependency\ntools, e.g.::\n\n    pip install docopt==0.6.2\n\n- 0.6.2 `Wheel <http://pythonwheels.com/>`_ support.\n- 0.6.1 Bugfix release.\n- 0.6.0 ``options_first`` parameter.\n  **Breaking changes**: Corrected ``[options]`` meaning.\n  ``argv`` defaults to ``None``.\n- 0.5.0 Repeated options/commands are counted or accumulated into a\n  list.\n- 0.4.2 Bugfix release.\n- 0.4.0 Option descriptions become optional,\n  support for \"``--``\" and \"``-``\" commands.\n- 0.3.0 Support for (sub)commands like `git remote add`.\n  Introduce ``[options]`` shortcut for any options.\n  **Breaking changes**: ``docopt`` returns dictionary.\n- 0.2.0 Usage pattern matching. Positional arguments parsing based on\n  usage patterns.\n  **Breaking changes**: ``docopt`` returns namespace (for arguments),\n  not list. Usage pattern is formalized.\n- 0.1.0 Initial release. Options-parsing only (based on options\n  description).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://docopt.org", "keywords": "option arguments parsing optparse argparse getopt", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "docopt", "package_url": "https://pypi.org/project/docopt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/docopt/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://docopt.org"}, "release_url": "https://pypi.org/project/docopt/0.6.2/", "requires_dist": null, "requires_python": null, "summary": "Pythonic argument parser, that will make you smile", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"docopt-creates-beautiful-command-line-interfaces\">\n<h2><tt>docopt</tt> creates <em>beautiful</em> command-line interfaces</h2>\n<p>Video introduction to <strong>docopt</strong>: <a href=\"http://youtu.be/pXhcPJK5cMc\" rel=\"nofollow\">PyCon UK 2012: Create *beautiful*\ncommand-line interfaces with Python</a></p>\n<blockquote>\n<p>New in version 0.6.1:</p>\n<ul>\n<li>Fix issue <a href=\"https://github.com/docopt/docopt/issues/85\" rel=\"nofollow\">#85</a>\nwhich caused improper handling of <tt>[options]</tt> shortcut\nif it was present several times.</li>\n</ul>\n<p>New in version 0.6.0:</p>\n<ul>\n<li>New argument <tt>options_first</tt>, disallows interspersing options\nand arguments.  If you supply <tt>options_first=True</tt> to\n<tt>docopt</tt>, it will interpret all arguments as positional\narguments after first positional argument.</li>\n<li>If option with argument could be repeated, its default value\nwill be interpreted as space-separated list. E.g. with\n<tt>[default: ./here ./there]</tt> will be interpreted as\n<tt><span class=\"pre\">['./here',</span> <span class=\"pre\">'./there']</span></tt>.</li>\n</ul>\n<p>Breaking changes:</p>\n<ul>\n<li>Meaning of <tt>[options]</tt> shortcut slightly changed. Previously\nit ment <em>\u201cany known option\u201d</em>. Now it means <em>\u201cany option not in\nusage-pattern\u201d</em>.  This avoids the situation when an option is\nallowed to be repeated unintentionaly.</li>\n<li><tt>argv</tt> is <tt>None</tt> by default, not <tt>sys.argv[1:]</tt>.\nThis allows <tt>docopt</tt> to always use the <em>latest</em> <tt>sys.argv</tt>,\nnot <tt>sys.argv</tt> during import time.</li>\n</ul>\n</blockquote>\n<p>Isn\u2019t it awesome how <tt>optparse</tt> and <tt>argparse</tt> generate help\nmessages based on your code?!</p>\n<p><em>Hell no!</em>  You know what\u2019s awesome?  It\u2019s when the option parser <em>is</em>\ngenerated based on the beautiful help message that you write yourself!\nThis way you don\u2019t need to write this stupid repeatable parser-code,\nand instead can write only the help message\u2013<em>the way you want it</em>.</p>\n<p><strong>docopt</strong> helps you create most beautiful command-line interfaces\n<em>easily</em>:</p>\n<pre><span class=\"sd\">\"\"\"Naval Fate.\n\nUsage:\n  naval_fate.py ship new &lt;name&gt;...\n  naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]\n  naval_fate.py ship shoot &lt;x&gt; &lt;y&gt;\n  naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored | --drifting]\n  naval_fate.py (-h | --help)\n  naval_fate.py --version\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n  --speed=&lt;kn&gt;  Speed in knots [default: 10].\n  --moored      Moored (anchored) mine.\n  --drifting    Drifting mine.\n\n\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">docopt</span> <span class=\"kn\">import</span> <span class=\"n\">docopt</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"n\">docopt</span><span class=\"p\">(</span><span class=\"vm\">__doc__</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'Naval Fate 2.0'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n</pre>\n<p>Beat that! The option parser is generated based on the docstring above\nthat is passed to <tt>docopt</tt> function.  <tt>docopt</tt> parses the usage\npattern (<tt>\"Usage: <span class=\"pre\">...\"</span></tt>) and option descriptions (lines starting\nwith dash \u201c<tt>-</tt>\u201c) and ensures that the program invocation matches the\nusage pattern; it parses options, arguments and commands based on\nthat. The basic idea is that <em>a good help message has all necessary\ninformation in it to make a parser</em>.</p>\n<p>Also, <a href=\"http://www.python.org/dev/peps/pep-0257/\" rel=\"nofollow\">PEP 257</a> recommends\nputting help message in the module docstrings.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <a href=\"http://pip-installer.org\" rel=\"nofollow\">pip</a> or easy_install:</p>\n<pre>pip install docopt==0.6.2\n</pre>\n<p>Alternatively, you can just drop <tt>docopt.py</tt> file into your\nproject\u2013it is self-contained.</p>\n<p><strong>docopt</strong> is tested with Python 2.5, 2.6, 2.7, 3.2, 3.3 and PyPy.</p>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docopt</span> <span class=\"kn\">import</span> <span class=\"n\">docopt</span>\n</pre>\n<pre><span class=\"n\">docopt</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">options_first</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p><tt>docopt</tt> takes 1 required and 4 optional arguments:</p>\n<ul>\n<li><tt>doc</tt> could be a module docstring (<tt>__doc__</tt>) or some other\nstring that contains a <strong>help message</strong> that will be parsed to\ncreate the option parser.  The simple rules of how to write such a\nhelp message are given in next sections.  Here is a quick example of\nsuch a string:</li>\n</ul>\n<pre><span class=\"sd\">\"\"\"Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n\n-h --help    show this\n-s --sorted  sorted output\n-o FILE      specify output file [default: ./test.txt]\n--quiet      print less text\n--verbose    print more text\n\n\"\"\"</span>\n</pre>\n<ul>\n<li><p><tt>argv</tt> is an optional argument vector; by default <tt>docopt</tt> uses\nthe argument vector passed to your program (<tt>sys.argv[1:]</tt>).\nAlternatively you can supply a list of strings like <tt><span class=\"pre\">['--verbose',</span>\n<span class=\"pre\">'-o',</span> 'hai.txt']</tt>.</p>\n</li>\n<li><p><tt>help</tt>, by default <tt>True</tt>, specifies whether the parser should\nautomatically print the help message (supplied as <tt>doc</tt>) and\nterminate, in case <tt><span class=\"pre\">-h</span></tt> or <tt><span class=\"pre\">--help</span></tt> option is encountered\n(options should exist in usage pattern, more on that below). If you\nwant to handle <tt><span class=\"pre\">-h</span></tt> or <tt><span class=\"pre\">--help</span></tt> options manually (as other\noptions), set <tt>help=False</tt>.</p>\n</li>\n<li><p><tt>version</tt>, by default <tt>None</tt>, is an optional argument that\nspecifies the version of your program. If supplied, then, (assuming\n<tt><span class=\"pre\">--version</span></tt> option is mentioned in usage pattern) when parser\nencounters the <tt><span class=\"pre\">--version</span></tt> option, it will print the supplied\nversion and terminate.  <tt>version</tt> could be any printable object,\nbut most likely a string, e.g. <tt>\"2.1.0rc1\"</tt>.</p>\n<blockquote>\n<p>Note, when <tt>docopt</tt> is set to automatically handle <tt><span class=\"pre\">-h</span></tt>,\n<tt><span class=\"pre\">--help</span></tt> and <tt><span class=\"pre\">--version</span></tt> options, you still need to mention\nthem in usage pattern for this to work. Also, for your users to\nknow about them.</p>\n</blockquote>\n</li>\n<li><p><tt>options_first</tt>, by default <tt>False</tt>.  If set to <tt>True</tt> will\ndisallow mixing options and positional argument.  I.e. after first\npositional argument, all arguments will be interpreted as positional\neven if the look like options.  This can be used for strict\ncompatibility with POSIX, or if you want to dispatch your arguments\nto other programs.</p>\n</li>\n</ul>\n<p>The <strong>return</strong> value is a simple dictionary with options, arguments\nand commands as keys, spelled exactly like in your help message.  Long\nversions of options are given priority. For example, if you invoke the\ntop example as:</p>\n<pre>naval_fate.py ship Guardian move 100 150 --speed=15\n</pre>\n<p>the return dictionary will be:</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'--drifting'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>    <span class=\"s1\">'mine'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'--help'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>        <span class=\"s1\">'move'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'--moored'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>      <span class=\"s1\">'new'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'--speed'</span><span class=\"p\">:</span> <span class=\"s1\">'15'</span><span class=\"p\">,</span>        <span class=\"s1\">'remove'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'--version'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>     <span class=\"s1\">'set'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'&lt;name&gt;'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Guardian'</span><span class=\"p\">],</span> <span class=\"s1\">'ship'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n <span class=\"s1\">'&lt;x&gt;'</span><span class=\"p\">:</span> <span class=\"s1\">'100'</span><span class=\"p\">,</span>           <span class=\"s1\">'shoot'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n <span class=\"s1\">'&lt;y&gt;'</span><span class=\"p\">:</span> <span class=\"s1\">'150'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"help-message-format\">\n<h2>Help message format</h2>\n<p>Help message consists of 2 parts:</p>\n<ul>\n<li><p>Usage pattern, e.g.:</p>\n<pre>Usage: my_program.py [-hso FILE] [--quiet | --verbose] [INPUT ...]\n</pre>\n</li>\n<li><p>Option descriptions, e.g.:</p>\n<pre>-h --help    show this\n-s --sorted  sorted output\n-o FILE      specify output file [default: ./test.txt]\n--quiet      print less text\n--verbose    print more text\n</pre>\n</li>\n</ul>\n<p>Their format is described below; other text is ignored.</p>\n<div id=\"usage-pattern-format\">\n<h3>Usage pattern format</h3>\n<p><strong>Usage pattern</strong> is a substring of <tt>doc</tt> that starts with\n<tt>usage:</tt> (case <em>insensitive</em>) and ends with a <em>visibly</em> empty line.\nMinimum example:</p>\n<pre><span class=\"sd\">\"\"\"Usage: my_program.py\n\n\"\"\"</span>\n</pre>\n<p>The first word after <tt>usage:</tt> is interpreted as your program\u2019s name.\nYou can specify your program\u2019s name several times to signify several\nexclusive patterns:</p>\n<pre><span class=\"sd\">\"\"\"Usage: my_program.py FILE\n          my_program.py COUNT FILE\n\n\"\"\"</span>\n</pre>\n<p>Each pattern can consist of the following elements:</p>\n<ul>\n<li><strong>&lt;arguments&gt;</strong>, <strong>ARGUMENTS</strong>. Arguments are specified as either\nupper-case words, e.g. <tt>my_program.py <span class=\"pre\">CONTENT-PATH</span></tt> or words\nsurrounded by angular brackets: <tt>my_program.py <span class=\"pre\">&lt;content-path&gt;</span></tt>.</li>\n<li><strong>\u2013options</strong>.  Options are words started with dash (<tt>-</tt>), e.g.\n<tt><span class=\"pre\">--output</span></tt>, <tt><span class=\"pre\">-o</span></tt>.  You can \u201cstack\u201d several of one-letter\noptions, e.g. <tt><span class=\"pre\">-oiv</span></tt> which will be the same as <tt><span class=\"pre\">-o</span> <span class=\"pre\">-i</span> <span class=\"pre\">-v</span></tt>. The\noptions can have arguments, e.g.  <tt><span class=\"pre\">--input=FILE</span></tt> or <tt><span class=\"pre\">-i</span> FILE</tt> or\neven <tt><span class=\"pre\">-iFILE</span></tt>. However it is important that you specify option\ndescriptions if you want for option to have an argument, a default\nvalue, or specify synonymous short/long versions of option (see next\nsection on option descriptions).</li>\n<li><strong>commands</strong> are words that do <em>not</em> follow the described above\nconventions of <tt><span class=\"pre\">--options</span></tt> or <tt>&lt;arguments&gt;</tt> or <tt>ARGUMENTS</tt>,\nplus two special commands: dash \u201c<tt>-</tt>\u201d and double dash \u201c<tt><span class=\"pre\">--</span></tt>\u201d\n(see below).</li>\n</ul>\n<p>Use the following constructs to specify patterns:</p>\n<ul>\n<li><strong>[ ]</strong> (brackets) <strong>optional</strong> elements.  e.g.: <tt>my_program.py\n<span class=\"pre\">[-hvqo</span> FILE]</tt></li>\n<li><strong>( )</strong> (parens) <strong>required</strong> elements.  All elements that are <em>not</em>\nput in <strong>[ ]</strong> are also required, e.g.: <tt>my_program.py\n<span class=\"pre\">--path=&lt;path&gt;</span> <span class=\"pre\">&lt;file&gt;...</span></tt> is the same as <tt>my_program.py\n<span class=\"pre\">(--path=&lt;path&gt;</span> <span class=\"pre\">&lt;file&gt;...)</span></tt>.  (Note, \u201crequired options\u201d might be not\na good idea for your users).</li>\n<li><strong>|</strong> (pipe) <strong>mutualy exclusive</strong> elements. Group them using <strong>(\n)</strong> if one of the mutually exclusive elements is required:\n<tt>my_program.py <span class=\"pre\">(--clockwise</span> | <span class=\"pre\">--counter-clockwise)</span> TIME</tt>. Group\nthem using <strong>[ ]</strong> if none of the mutually-exclusive elements are\nrequired: <tt>my_program.py <span class=\"pre\">[--left</span> | <span class=\"pre\">--right]</span></tt>.</li>\n<li><strong>\u2026</strong> (ellipsis) <strong>one or more</strong> elements. To specify that\narbitrary number of repeating elements could be accepted, use\nellipsis (<tt>...</tt>), e.g.  <tt>my_program.py FILE ...</tt> means one or\nmore <tt>FILE</tt>-s are accepted.  If you want to accept zero or more\nelements, use brackets, e.g.: <tt>my_program.py [FILE <span class=\"pre\">...]</span></tt>. Ellipsis\nworks as a unary operator on the expression to the left.</li>\n<li><strong>[options]</strong> (case sensitive) shortcut for any options.  You can\nuse it if you want to specify that the usage pattern could be\nprovided with any options defined below in the option-descriptions\nand do not want to enumerate them all in usage-pattern.  -\n\u201c<tt><span class=\"pre\">[--]</span></tt>\u201d. Double dash \u201c<tt><span class=\"pre\">--</span></tt>\u201d is used by convention to separate\npositional arguments that can be mistaken for options. In order to\nsupport this convention add \u201c<tt><span class=\"pre\">[--]</span></tt>\u201d to you usage patterns.  -\n\u201c<tt><span class=\"pre\">[-]</span></tt>\u201d. Single dash \u201c<tt>-</tt>\u201d is used by convention to signify that\n<tt>stdin</tt> is used instead of a file. To support this add \u201c<tt><span class=\"pre\">[-]</span></tt>\u201d\nto you usage patterns. \u201c<tt>-</tt>\u201d act as a normal command.</li>\n</ul>\n<p>If your pattern allows to match argument-less option (a flag) several\ntimes:</p>\n<pre>Usage: my_program.py [-v | -vv | -vvv]\n</pre>\n<p>then number of occurences of the option will be counted. I.e.\n<tt><span class=\"pre\">args['-v']</span></tt> will be <tt>2</tt> if program was invoked as <tt>my_program\n<span class=\"pre\">-vv</span></tt>. Same works for commands.</p>\n<p>If your usage patterns allows to match same-named option with argument\nor positional argument several times, the matched arguments will be\ncollected into a list:</p>\n<pre>Usage: my_program.py &lt;file&gt; &lt;file&gt; --path=&lt;path&gt;...\n</pre>\n<p>I.e. invoked with <tt>my_program.py file1 file2 <span class=\"pre\">--path=./here</span>\n<span class=\"pre\">--path=./there</span></tt> the returned dict will contain <tt><span class=\"pre\">args['&lt;file&gt;']</span> ==\n['file1', 'file2']</tt> and <tt><span class=\"pre\">args['--path']</span> == <span class=\"pre\">['./here',</span> <span class=\"pre\">'./there']</span></tt>.</p>\n</div>\n<div id=\"option-descriptions-format\">\n<h3>Option descriptions format</h3>\n<p><strong>Option descriptions</strong> consist of a list of options that you put\nbelow your usage patterns.</p>\n<p>It is necessary to list option descriptions in order to specify:</p>\n<ul>\n<li>synonymous short and long options,</li>\n<li>if an option has an argument,</li>\n<li>if option\u2019s argument has a default value.</li>\n</ul>\n<p>The rules are as follows:</p>\n<ul>\n<li><p>Every line in <tt>doc</tt> that starts with <tt>-</tt> or <tt><span class=\"pre\">--</span></tt> (not counting\nspaces) is treated as an option description, e.g.:</p>\n<pre>Options:\n  --verbose   # GOOD\n  -o FILE     # GOOD\nOther: --bad  # BAD, line does not start with dash \"-\"\n</pre>\n</li>\n<li><p>To specify that option has an argument, put a word describing that\nargument after space (or equals \u201c<tt>=</tt>\u201d sign) as shown below. Follow\neither &lt;angular-brackets&gt; or UPPER-CASE convention for options\u2019\narguments.  You can use comma if you want to separate options. In\nthe example below, both lines are valid, however you are recommended\nto stick to a single style.:</p>\n<pre>-o FILE --output=FILE       # without comma, with \"=\" sign\n-i &lt;file&gt;, --input &lt;file&gt;   # with comma, wihtout \"=\" sing\n</pre>\n</li>\n<li><p>Use two spaces to separate options with their informal description:</p>\n<pre>--verbose More text.   # BAD, will be treated as if verbose option had\n                       # an argument \"More\", so use 2 spaces instead\n-q        Quit.        # GOOD\n-o FILE   Output file. # GOOD\n--stdout  Use stdout.  # GOOD, 2 spaces\n</pre>\n</li>\n<li><p>If you want to set a default value for an option with an argument,\nput it into the option-description, in form <tt>[default:\n<span class=\"pre\">&lt;my-default-value&gt;]</span></tt>:</p>\n<pre>--coefficient=K  The K coefficient [default: 2.95]\n--output=FILE    Output file [default: test.txt]\n--directory=DIR  Some directory [default: ./]\n</pre>\n</li>\n<li><p>If the option is not repeatable, the value inside <tt>[default: <span class=\"pre\">...]</span></tt>\nwill be interpeted as string.  If it <em>is</em> repeatable, it will be\nsplited into a list on whitespace:</p>\n<pre>Usage: my_program.py [--repeatable=&lt;arg&gt; --repeatable=&lt;arg&gt;]\n                     [--another-repeatable=&lt;arg&gt;]...\n                     [--not-repeatable=&lt;arg&gt;]\n\n# will be ['./here', './there']\n--repeatable=&lt;arg&gt;          [default: ./here ./there]\n\n# will be ['./here']\n--another-repeatable=&lt;arg&gt;  [default: ./here]\n\n# will be './here ./there', because it is not repeatable\n--not-repeatable=&lt;arg&gt;      [default: ./here ./there]\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>We have an extensive list of <a href=\"https://github.com/docopt/docopt/tree/master/examples\" rel=\"nofollow\">examples</a> which cover\nevery aspect of functionality of <strong>docopt</strong>.  Try them out, read the\nsource if in doubt.</p>\n</div>\n<div id=\"subparsers-multi-level-help-and-huge-applications-like-git\">\n<h3>Subparsers, multi-level help and <em>huge</em> applications (like git)</h3>\n<p>If you want to split your usage-pattern into several, implement\nmulti-level help (whith separate help-screen for each subcommand),\nwant to interface with existing scripts that don\u2019t use <strong>docopt</strong>, or\nyou\u2019re building the next \u201cgit\u201d, you will need the new <tt>options_first</tt>\nparameter (described in API section above). To get you started quickly\nwe implemented a subset of git command-line interface as an example:\n<a href=\"https://github.com/docopt/docopt/tree/master/examples/git\" rel=\"nofollow\">examples/git</a></p>\n</div>\n<div id=\"data-validation\">\n<h3>Data validation</h3>\n<p><strong>docopt</strong> does one thing and does it well: it implements your\ncommand-line interface.  However it does not validate the input data.\nOn the other hand there are libraries like <a href=\"https://github.com/halst/schema\" rel=\"nofollow\">python schema</a> which make validating data a\nbreeze.  Take a look at <a href=\"https://github.com/docopt/docopt/tree/master/examples/validation_example.py\" rel=\"nofollow\">validation_example.py</a>\nwhich uses <strong>schema</strong> to validate data and report an error to the\nuser.</p>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>We would <em>love</em> to hear what you think about <strong>docopt</strong> on our <a href=\"http://github.com/docopt/docopt/issues\" rel=\"nofollow\">issues\npage</a></p>\n<p>Make pull requrests, report bugs, suggest ideas and discuss\n<strong>docopt</strong>. You can also drop a line directly to\n&lt;<a href=\"mailto:vladimir%40keleshev.com\">vladimir<span>@</span>keleshev<span>.</span>com</a>&gt;.</p>\n</div>\n<div id=\"porting-docopt-to-other-languages\">\n<h2>Porting <tt>docopt</tt> to other languages</h2>\n<p>We think <strong>docopt</strong> is so good, we want to share it beyond the Python\ncommunity!</p>\n<p>The follosing ports are available:</p>\n<ul>\n<li><a href=\"http://github.com/docopt/docopt.rb\" rel=\"nofollow\">Ruby port</a></li>\n<li><a href=\"http://github.com/docopt/docopt.coffee\" rel=\"nofollow\">CoffeeScript port</a></li>\n<li><a href=\"http://github.com/docopt/docopt.lua\" rel=\"nofollow\">Lua port</a></li>\n<li><a href=\"http://github.com/docopt/docopt.php\" rel=\"nofollow\">PHP port</a></li>\n</ul>\n<p>But you can always create a port for your favorite language!  You are\nencouraged to use the Python version as a reference implementation.  A\nLanguage-agnostic test suite is bundled with <a href=\"http://github.com/docopt/docopt\" rel=\"nofollow\">Python implementation</a>.</p>\n<p>Porting discussion is on <a href=\"http://github.com/docopt/docopt/issues\" rel=\"nofollow\">issues page</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p><strong>docopt</strong> follows <a href=\"http://semver.org\" rel=\"nofollow\">semantic versioning</a>.  The\nfirst release with stable API will be 1.0.0 (soon).  Until then, you\nare encouraged to specify explicitly the version in your dependency\ntools, e.g.:</p>\n<pre>pip install docopt==0.6.2\n</pre>\n<ul>\n<li>0.6.2 <a href=\"http://pythonwheels.com/\" rel=\"nofollow\">Wheel</a> support.</li>\n<li>0.6.1 Bugfix release.</li>\n<li>0.6.0 <tt>options_first</tt> parameter.\n<strong>Breaking changes</strong>: Corrected <tt>[options]</tt> meaning.\n<tt>argv</tt> defaults to <tt>None</tt>.</li>\n<li>0.5.0 Repeated options/commands are counted or accumulated into a\nlist.</li>\n<li>0.4.2 Bugfix release.</li>\n<li>0.4.0 Option descriptions become optional,\nsupport for \u201c<tt><span class=\"pre\">--</span></tt>\u201d and \u201c<tt>-</tt>\u201d commands.</li>\n<li>0.3.0 Support for (sub)commands like <cite>git remote add</cite>.\nIntroduce <tt>[options]</tt> shortcut for any options.\n<strong>Breaking changes</strong>: <tt>docopt</tt> returns dictionary.</li>\n<li>0.2.0 Usage pattern matching. Positional arguments parsing based on\nusage patterns.\n<strong>Breaking changes</strong>: <tt>docopt</tt> returns namespace (for arguments),\nnot list. Usage pattern is formalized.</li>\n<li>0.1.0 Initial release. Options-parsing only (based on options\ndescription).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1126265, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2068ff93c8cb37d02830c4a8de873b7a", "sha256": "60a732450cfb2fda2d783c90b5224d2a887b443c904c02dd42b417af903390a4"}, "downloads": -1, "filename": "docopt-0.1.tar.gz", "has_sig": false, "md5_digest": "2068ff93c8cb37d02830c4a8de873b7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6069, "upload_time": "2012-04-10T18:58:59", "upload_time_iso_8601": "2012-04-10T18:58:59.620099Z", "url": "https://files.pythonhosted.org/packages/32/7b/9ac67bd76139198894636a998294ae0c9467b1ad0127732917e3e299e2ff/docopt-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2e7a46db5ba3f0d1c1d3163c1d66e26a", "sha256": "176ae29498aececa32b6ce049cd6e0f0273d4b1e43b45f02f03e656ecd8ab623"}, "downloads": -1, "filename": "docopt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2e7a46db5ba3f0d1c1d3163c1d66e26a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1939, "upload_time": "2012-04-13T17:07:20", "upload_time_iso_8601": "2012-04-13T17:07:20.105733Z", "url": "https://files.pythonhosted.org/packages/65/ca/0b5f0d1d4d98d874f2f556872a7fe7fdef70cfcda3439f7edad3074e31c3/docopt-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1bd862e71d328b73d3e585ce8aa507ae", "sha256": "f8dade65d41afe139e97f3bad95e4149f9bb059100a5d68554bd84346683c779"}, "downloads": -1, "filename": "docopt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1bd862e71d328b73d3e585ce8aa507ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5021, "upload_time": "2012-05-26T20:10:16", "upload_time_iso_8601": "2012-05-26T20:10:16.557784Z", "url": "https://files.pythonhosted.org/packages/71/79/61a2d6bd33854df574c5f043da6678881034fd5fa6add150afe1cc333da5/docopt-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "95455a903bb7ebae4ea1869f5a213254", "sha256": "9e8cd69dc7f40d1ab6a5ab43a1b9f8184f29812f03e22b1e6f18ef68016da978"}, "downloads": -1, "filename": "docopt-0.3.0.tar.gz", "has_sig": false, "md5_digest": "95455a903bb7ebae4ea1869f5a213254", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4748, "upload_time": "2012-06-04T21:21:43", "upload_time_iso_8601": "2012-06-04T21:21:43.190104Z", "url": "https://files.pythonhosted.org/packages/1f/c4/ff112fd928f7e30ff964a178285b9d466a538c8ab92d3db84cf228495a85/docopt-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fba2ea9904b64d4d90fbb20c979723d6", "sha256": "b752582228e280b7be3677c5a758a352e352ad0bde3a849fd51f79239e88e475"}, "downloads": -1, "filename": "docopt-0.4.0.tar.gz", "has_sig": false, "md5_digest": "fba2ea9904b64d4d90fbb20c979723d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4881, "upload_time": "2012-06-14T18:13:13", "upload_time_iso_8601": "2012-06-14T18:13:13.986307Z", "url": "https://files.pythonhosted.org/packages/40/24/3b4941b5cdfe4d09c522bf4849fd28ddee4abfa4b48223bc3611c325a216/docopt-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4bb42eaf2aeed048136afa7ce9bbbd2f", "sha256": "a3d558f66ae22ca771a6cdef48598541e352db6ee3258b286e40f39ff0f5dcb1"}, "downloads": -1, "filename": "docopt-0.4.1.tar.gz", "has_sig": false, "md5_digest": "4bb42eaf2aeed048136afa7ce9bbbd2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4846, "upload_time": "2012-06-20T22:06:47", "upload_time_iso_8601": "2012-06-20T22:06:47.231450Z", "url": "https://files.pythonhosted.org/packages/0a/f3/1d63ec29a490b9fea9a938a77111e8387f2298827a38d9a78e6299fe4a71/docopt-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "7b6743a9b5b2956ef8e5faede29c8cc3", "sha256": "2dff0296fca87cf3a61ab44a630a6aebb63f473fe8b3ed03c34f12d5510ba090"}, "downloads": -1, "filename": "docopt-0.4.2.tar.gz", "has_sig": false, "md5_digest": "7b6743a9b5b2956ef8e5faede29c8cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4910, "upload_time": "2012-07-29T16:51:35", "upload_time_iso_8601": "2012-07-29T16:51:35.614738Z", "url": "https://files.pythonhosted.org/packages/66/52/c7cfab7d8e5fb3abaa055581047103b08e9ae88c5b0f0d789d8e89a34984/docopt-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "989daa2e653346a98617309ef92c2947", "sha256": "44f99bf2de23c7b3079bf6efdcffefcd9adf95499edd23f876fa2728879af01e"}, "downloads": -1, "filename": "docopt-0.5.0.tar.gz", "has_sig": false, "md5_digest": "989daa2e653346a98617309ef92c2947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4852, "upload_time": "2012-08-13T19:58:56", "upload_time_iso_8601": "2012-08-13T19:58:56.115697Z", "url": "https://files.pythonhosted.org/packages/55/75/e1a1f6262df3941caf1194f8c8a9574d89d95df4c9eac8b0ab419f68c6d6/docopt-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "25557262a7441185987c65c39dac4ca9", "sha256": "c8aaabcc27dc3c2e73c963298784d8629a18b7b4ba851f4ef5b2c845f53c4fc8"}, "downloads": -1, "filename": "docopt-0.6.0.tar.gz", "has_sig": false, "md5_digest": "25557262a7441185987c65c39dac4ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25636, "upload_time": "2013-01-23T19:59:12", "upload_time_iso_8601": "2013-01-23T19:59:12.408380Z", "url": "https://files.pythonhosted.org/packages/7e/64/7e51c5774833af6f9cdebfc0e221a8180deed45426d22df8f165fd8366b9/docopt-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "fe36e9b7a1708a0b02a115f2a78cf623", "sha256": "71ad940a773fbc23be6093e9476ad57b2ecec446946a28d30127501f3b29aa35"}, "downloads": -1, "filename": "docopt-0.6.1.tar.gz", "has_sig": false, "md5_digest": "fe36e9b7a1708a0b02a115f2a78cf623", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25815, "upload_time": "2013-02-01T20:14:54", "upload_time_iso_8601": "2013-02-01T20:14:54.199219Z", "url": "https://files.pythonhosted.org/packages/ec/6d/8ef19316f3b06c15ac648c857d18f171a65b50319f0a6c782392ad62d942/docopt-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "4bc74561b37fad5d3e7d037f82a4c3b1", "sha256": "49b3a825280bd66b3aa83585ef59c4a8c82f2c8a522dbe754a8bc8d08c85c491"}, "downloads": -1, "filename": "docopt-0.6.2.tar.gz", "has_sig": false, "md5_digest": "4bc74561b37fad5d3e7d037f82a4c3b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25901, "upload_time": "2014-06-16T11:18:57", "upload_time_iso_8601": "2014-06-16T11:18:57.406351Z", "url": "https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bc74561b37fad5d3e7d037f82a4c3b1", "sha256": "49b3a825280bd66b3aa83585ef59c4a8c82f2c8a522dbe754a8bc8d08c85c491"}, "downloads": -1, "filename": "docopt-0.6.2.tar.gz", "has_sig": false, "md5_digest": "4bc74561b37fad5d3e7d037f82a4c3b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25901, "upload_time": "2014-06-16T11:18:57", "upload_time_iso_8601": "2014-06-16T11:18:57.406351Z", "url": "https://files.pythonhosted.org/packages/a2/55/8f8cab2afd404cf578136ef2cc5dfb50baa1761b68c9da1fb1e4eed343c9/docopt-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:44 2020"}