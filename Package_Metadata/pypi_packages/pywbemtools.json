{"info": {"author": "Karl Schopmeyer, Andreas Maier", "author_email": "k.schopmeyer@swbell.net, maiera@de.ibm.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": ".. # README file for Pypi\n\nPywbemtools is a collection of command line tools that communicate with WBEM\nservers. The tools are written in pure Python and support Python 2 and Python\n3.\n\nAt this point, pywbemtools includes a single command line tool named\n``pywbemcli`` that uses the `pywbem package on Pypi`_ to issue operations to a\nWBEM server using the `CIM/WBEM standards`_ defined by the `DMTF`_ to perform\nsystem management tasks.\n\nCIM/WBEM standards are used for a wide variety of systems management tasks\nin the industry including DMTF management standards and the `SNIA`_\nStorage Management Initiative Specification (`SMI-S`_).\n\nPywbemcli provides access to WBEM servers from the command line.\nIt provides functionality to:\n\n* Explore the CIM data of WBEM servers. It can manage/inspect the CIM model\n  components including CIM classes, CIM instances, and CIM qualifiers and\n  execute CIM methods and queries on the WBEM server.\n\n* Execute specific CIM-XML operations on the WBEM server as defined in `DMTF`_\n  standard `DSP0200 (CIM Operations over HTTP)`_.\n\n* Inspect and manage WBEM server functionality including:\n\n  * CIM namespaces\n  * Advertised WBEM management profiles\n  * WBEM server brand and version information\n\n* Capture detailed information on CIM-XML interactions with the WBEM server\n  including time statistics and details of data flow.\n\n* Maintain a file with persisted WBEM connection definitions so that pywbemcli\n  can access multiple WBEM servers by name.\n\n* Provide both a command line mode and an interactive mode where multiple\n  pywbemcli commands can be executed within the context of a WBEM server.\n\n* Use an integrated mock WBEM server to try out commands. The mock server\n  can be loaded with CIM objects defined in MOF files or via Python scripts.\n\nDocumentation\n-------------\n\nFor the latest version of pywbemtools released on Pypi:\n\n* `Documentation`_\n* `Installation`_\n* `Change history`_\n\nQuickstart\n----------\n\nAll commands within pywbemcli show help with the ``-help`` or ``-h`` options:\n\n.. code-block:: text\n\n    $ pywbemcli --help\n    . . .\n    $ pywbemcli connection --help\n    . . .\n    $ pywbemcli connection save --help\n    . . .\n\nThe following examples build on each other and show a typical sequence of\nexploration of a WBEM server. For simplicity, they all operate against the\ndefault namespace of the server, and use a persistent connection definition for\nthe server:\n\n* Add a persistent connection definition named ``conn1`` for the WBEM server to\n  be used, so that the subsequent commands can refer to it:\n\n  .. code-block:: text\n\n      $ pywbemcli -s https://localhost --no-verify -u user -p password connection save conn1\n\n* pywbemcli also supports mocked WBEM servers in memory, that are preloaded\n  with CIM objects defined in MOF files. Add a persistent connection definition\n  named ``assoc1`` to a mock server using one of the MOF files provided in\n  the repo:\n\n  .. code-block:: text\n\n      $ pywbemcli -m tests/unit/simple_assoc_mock_model.mof connection save assoc1\n\n* List the persistent connection definitions:\n\n  .. code-block:: text\n\n      $ pywbemcli connection list\n      WBEM server connections: (#: default, *: current)\n      name    server             namespace    user      timeout  verify    mock-server\n      ------  -----------------  -----------  ------  ---------  --------  --------------------------------------\n      assoc1                     root/cimv2                  30  True      tests/unit/simple_assoc_mock_model.mof\n      conn1   https://localhost  root/cimv2   user           30  False\n\n* Show the class tree, using the previously added connection definition ``assoc1``:\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 class tree\n      root\n       +-- TST_FamilyCollection\n       +-- TST_Lineage\n       +-- TST_MemberOfFamilyCollection\n       +-- TST_Person\n           +-- TST_Personsub\n\n* Retrieve a single class from that class tree:\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 class get TST_Person\n      class TST_Person {\n\n            [Key ( true ),\n             Description ( \"This is key prop\" )]\n         string name;\n\n         string extraProperty = \"defaultvalue\";\n\n      };\n\n* Enumerate the instances of that class, returning only their instance names\n  by use of the ``--no`` option:\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 instance enumerate TST_Person --no\n      root/cimv2:TST_Person.name=\"Gabi\"\n      root/cimv2:TST_Person.name=\"Mike\"\n      root/cimv2:TST_Person.name=\"Saara\"\n      root/cimv2:TST_Person.name=\"Sofi\"\n      root/cimv2:TST_PersonSub.name=\"Gabisub\"\n      root/cimv2:TST_PersonSub.name=\"Mikesub\"\n      root/cimv2:TST_PersonSub.name=\"Saarasub\"\n      root/cimv2:TST_PersonSub.name=\"Sofisub\"\n\n* Retrieve a single instance using one of these instance names:\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 instance get 'root/cimv2:TST_Person.name=\"Sofi\"'\n      instance of TST_Person {\n         name = \"Sofi\";\n      };\n\n* The instance to be retrieved can also be selected interactively by use of\n  the wildcard instance key (\"CLASSNAME.?\"):\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 instance get TST_Person.?\n      Pick Instance name to process\n      0: root/cimv2:TST_Person.name=\"Saara\"\n      1: root/cimv2:TST_Person.name=\"Mike\"\n      2: root/cimv2:TST_Person.name=\"Sofi\"\n      3: root/cimv2:TST_Person.name=\"Gabi\"\n      4: root/cimv2:TST_PersonSub.name=\"Gabisub\"\n      5: root/cimv2:TST_PersonSub.name=\"Sofisub\"\n      6: root/cimv2:TST_PersonSub.name=\"Mikesub\"\n      7: root/cimv2:TST_PersonSub.name=\"Saarasub\"\n      Input integer between 0 and 7 or Ctrl-C to exit selection: 3\n      instance of TST_Person {\n         name = \"Gabi\";\n      };\n\n* There are multiple output formats supported. The enumerated instances can for\n  example be formatted as a table of properties by use of the ``-o table``\n  general option (these instances have only one property 'name'):\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 -o table instance enumerate TST_Person\n      Instances: TST_Person\n      +------------+\n      | name       |\n      |------------|\n      | \"Gabi\"     |\n      | \"Mike\"     |\n      | \"Saara\"    |\n      | \"Sofi\"     |\n      | \"Gabisub\"  |\n      | \"Mikesub\"  |\n      | \"Saarasub\" |\n      | \"Sofisub\"  |\n      +------------+\n\n* Traverse all associations starting from a specific instance that is selected\n  interactively:\n\n  .. code-block:: text\n\n      $ pywbemcli -n assoc1 -o table instance associators TST_Person.?\n      Pick Instance name to process\n      0: root/cimv2:TST_Person.name=\"Saara\"\n      1: root/cimv2:TST_Person.name=\"Mike\"\n      2: root/cimv2:TST_Person.name=\"Sofi\"\n      3: root/cimv2:TST_Person.name=\"Gabi\"\n      4: root/cimv2:TST_PersonSub.name=\"Gabisub\"\n      5: root/cimv2:TST_PersonSub.name=\"Sofisub\"\n      6: root/cimv2:TST_PersonSub.name=\"Mikesub\"\n      7: root/cimv2:TST_PersonSub.name=\"Saarasub\"\n      Input integer between 0 and 7 or Ctrl-C to exit selection: 1\n      Instances: TST_FamilyCollection\n      +-----------+\n      | name      |\n      |-----------|\n      | \"Family2\" |\n      | \"Gabi\"    |\n      | \"Sofi\"    |\n      +-----------+\n\nOther operations against WBEM servers include getting information on namespaces,\nthe Interop namespace, WBEM server brand information, or the advertised\nmanagement profiles:\n\n* Show the Interop namespace of the server:\n\n  .. code-block:: text\n\n      $ pywbemcli -n conn1 server interop\n      Server Interop Namespace:\n      Namespace Name\n      ----------------\n      root/PG_InterOp\n\n* List the advertised management profiles:\n\n  .. code-block:: text\n\n      $ pywbemcli -n conn1 server profiles --organization DMTF\n      Advertised management profiles:\n      +----------------+----------------------+-----------+\n      | Organization   | Registered Name      | Version   |\n      |----------------+----------------------+-----------|\n      | DMTF           | CPU                  | 1.0.0     |\n      | DMTF           | Computer System      | 1.0.0     |\n      | DMTF           | Ethernet Port        | 1.0.0     |\n      | DMTF           | Fan                  | 1.0.0     |\n      | DMTF           | Indications          | 1.1.0     |\n      | DMTF           | Profile Registration | 1.0.0     |\n      +----------------+----------------------+-----------+\n\nPywbemcli can also be executed in the interactive (REPL) mode by executing it\nwithout entering a command or by using the command ``repl``. In this mode\nthe command line prompt is ``pywbemcli>``, the WBEM server connection is\nmaintained between commands and the general options apply to all commands\nexecuted:\n\n.. code-block:: text\n\n    $ pywbemcli -n conn1\n    Enter 'help' for help, <CTRL-D> or ':q' to exit pywbemcli.\n    pywbemcli> server brand\n\n    Server Brand:\n    WBEM Server Brand\n    -------------------\n    OpenPegasus\n    pywbemcli> server interop\n\n    Server Interop Namespace:\n    Namespace Name\n    ----------------\n    root/PG_InterOp\n    pywbemcli> :q\n\n\n.. _Documentation: https://pywbemtools.readthedocs.io/en/stable/\n.. _Installation: https://pywbemtools.readthedocs.io/en/stable/introduction.html#installation\n.. _Contributing: https://pywbemtools.readthedocs.io/en/stable/development.html#contributing\n.. _Change history: https://pywbemtools.readthedocs.io/en/stable/changes.html\n.. _pywbemtools issue tracker: https://github.com/pywbem/pywbemtools/issues\n.. _pywbem package on Pypi: https://pypi.org/project/pywbem/\n.. _DMTF: https://www.dmtf.org/\n.. _CIM/WBEM standards: https://www.dmtf.org/standards/wbem/\n.. _DSP0200 (CIM Operations over HTTP): https://www.dmtf.org/sites/default/files/standards/documents/DSP0200_1.4.0.pdf\n.. _SNIA: https://www.snia.org/\n.. _SMI-S: https://www.snia.org/forums/smi/tech_programs/smis_home\n.. _Apache 2.0 License: https://github.com/pywbem/pywbemtools/tree/master/LICENSE.txt\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pywbem/pywbemtools", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "Karl Schopmeyer, Andreas Maier", "maintainer_email": "k.schopmeyer@swbell.net, maiera@de.ibm.com", "name": "pywbemtools", "package_url": "https://pypi.org/project/pywbemtools/", "platform": "any", "project_url": "https://pypi.org/project/pywbemtools/", "project_urls": {"Bug Tracker": "https://github.com/pywbem/pywbemtools/issues", "Documentation": "https://pywbemtools.readthedocs.io/en/latest/", "Homepage": "https://github.com/pywbem/pywbemtools", "Source Code": "https://github.com/pywbem/pywbemtools"}, "release_url": "https://pypi.org/project/pywbemtools/0.6.0/", "requires_dist": ["pywbem (>=0.17.0)", "six (>=1.10.0)", "Click (!=7.1,>=7.0)", "click-spinner (>=0.1.8)", "click-repl (>=0.1.6)", "asciitree (>=0.3.3)", "tabulate (>=0.8.2)", "pydicti (>=1.1.3)", "prompt-toolkit (<2.0.0,>=1.0.15) ; python_version == \"2.7\"", "PyYAML (>=5.1) ; python_version == \"2.7\"", "PyYAML (<5.3,>=5.1) ; python_version == \"3.4\"", "PyYAML (>=5.1) ; python_version > \"3.4\"", "prompt-toolkit (>=2.0.1) ; python_version >= \"3.4\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Python client tools to work with WBEM Servers using the PyWBEM API.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pywbemtools is a collection of command line tools that communicate with WBEM\nservers. The tools are written in pure Python and support Python 2 and Python\n3.</p>\n<p>At this point, pywbemtools includes a single command line tool named\n<tt>pywbemcli</tt> that uses the <a href=\"https://pypi.org/project/pywbem/\" rel=\"nofollow\">pywbem package on Pypi</a> to issue operations to a\nWBEM server using the <a href=\"https://www.dmtf.org/standards/wbem/\" rel=\"nofollow\">CIM/WBEM standards</a> defined by the <a href=\"https://www.dmtf.org/\" rel=\"nofollow\">DMTF</a> to perform\nsystem management tasks.</p>\n<p>CIM/WBEM standards are used for a wide variety of systems management tasks\nin the industry including DMTF management standards and the <a href=\"https://www.snia.org/\" rel=\"nofollow\">SNIA</a>\nStorage Management Initiative Specification (<a href=\"https://www.snia.org/forums/smi/tech_programs/smis_home\" rel=\"nofollow\">SMI-S</a>).</p>\n<p>Pywbemcli provides access to WBEM servers from the command line.\nIt provides functionality to:</p>\n<ul>\n<li>Explore the CIM data of WBEM servers. It can manage/inspect the CIM model\ncomponents including CIM classes, CIM instances, and CIM qualifiers and\nexecute CIM methods and queries on the WBEM server.</li>\n<li>Execute specific CIM-XML operations on the WBEM server as defined in <a href=\"https://www.dmtf.org/\" rel=\"nofollow\">DMTF</a>\nstandard <a href=\"https://www.dmtf.org/sites/default/files/standards/documents/DSP0200_1.4.0.pdf\" rel=\"nofollow\">DSP0200 (CIM Operations over HTTP)</a>.</li>\n<li>Inspect and manage WBEM server functionality including:<ul>\n<li>CIM namespaces</li>\n<li>Advertised WBEM management profiles</li>\n<li>WBEM server brand and version information</li>\n</ul>\n</li>\n<li>Capture detailed information on CIM-XML interactions with the WBEM server\nincluding time statistics and details of data flow.</li>\n<li>Maintain a file with persisted WBEM connection definitions so that pywbemcli\ncan access multiple WBEM servers by name.</li>\n<li>Provide both a command line mode and an interactive mode where multiple\npywbemcli commands can be executed within the context of a WBEM server.</li>\n<li>Use an integrated mock WBEM server to try out commands. The mock server\ncan be loaded with CIM objects defined in MOF files or via Python scripts.</li>\n</ul>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For the latest version of pywbemtools released on Pypi:</p>\n<ul>\n<li><a href=\"https://pywbemtools.readthedocs.io/en/stable/\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"https://pywbemtools.readthedocs.io/en/stable/introduction.html#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"https://pywbemtools.readthedocs.io/en/stable/changes.html\" rel=\"nofollow\">Change history</a></li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>All commands within pywbemcli show help with the <tt><span class=\"pre\">-help</span></tt> or <tt><span class=\"pre\">-h</span></tt> options:</p>\n<pre>$ pywbemcli --help\n. . .\n$ pywbemcli connection --help\n. . .\n$ pywbemcli connection save --help\n. . .\n</pre>\n<p>The following examples build on each other and show a typical sequence of\nexploration of a WBEM server. For simplicity, they all operate against the\ndefault namespace of the server, and use a persistent connection definition for\nthe server:</p>\n<ul>\n<li><p>Add a persistent connection definition named <tt>conn1</tt> for the WBEM server to\nbe used, so that the subsequent commands can refer to it:</p>\n<pre>$ pywbemcli -s https://localhost --no-verify -u user -p password connection save conn1\n</pre>\n</li>\n<li><p>pywbemcli also supports mocked WBEM servers in memory, that are preloaded\nwith CIM objects defined in MOF files. Add a persistent connection definition\nnamed <tt>assoc1</tt> to a mock server using one of the MOF files provided in\nthe repo:</p>\n<pre>$ pywbemcli -m tests/unit/simple_assoc_mock_model.mof connection save assoc1\n</pre>\n</li>\n<li><p>List the persistent connection definitions:</p>\n<pre>$ pywbemcli connection list\nWBEM server connections: (#: default, *: current)\nname    server             namespace    user      timeout  verify    mock-server\n------  -----------------  -----------  ------  ---------  --------  --------------------------------------\nassoc1                     root/cimv2                  30  True      tests/unit/simple_assoc_mock_model.mof\nconn1   https://localhost  root/cimv2   user           30  False\n</pre>\n</li>\n<li><p>Show the class tree, using the previously added connection definition <tt>assoc1</tt>:</p>\n<pre>$ pywbemcli -n assoc1 class tree\nroot\n +-- TST_FamilyCollection\n +-- TST_Lineage\n +-- TST_MemberOfFamilyCollection\n +-- TST_Person\n     +-- TST_Personsub\n</pre>\n</li>\n<li><p>Retrieve a single class from that class tree:</p>\n<pre>$ pywbemcli -n assoc1 class get TST_Person\nclass TST_Person {\n\n      [Key ( true ),\n       Description ( \"This is key prop\" )]\n   string name;\n\n   string extraProperty = \"defaultvalue\";\n\n};\n</pre>\n</li>\n<li><p>Enumerate the instances of that class, returning only their instance names\nby use of the <tt><span class=\"pre\">--no</span></tt> option:</p>\n<pre>$ pywbemcli -n assoc1 instance enumerate TST_Person --no\nroot/cimv2:TST_Person.name=\"Gabi\"\nroot/cimv2:TST_Person.name=\"Mike\"\nroot/cimv2:TST_Person.name=\"Saara\"\nroot/cimv2:TST_Person.name=\"Sofi\"\nroot/cimv2:TST_PersonSub.name=\"Gabisub\"\nroot/cimv2:TST_PersonSub.name=\"Mikesub\"\nroot/cimv2:TST_PersonSub.name=\"Saarasub\"\nroot/cimv2:TST_PersonSub.name=\"Sofisub\"\n</pre>\n</li>\n<li><p>Retrieve a single instance using one of these instance names:</p>\n<pre>$ pywbemcli -n assoc1 instance get 'root/cimv2:TST_Person.name=\"Sofi\"'\ninstance of TST_Person {\n   name = \"Sofi\";\n};\n</pre>\n</li>\n<li><p>The instance to be retrieved can also be selected interactively by use of\nthe wildcard instance key (\u201cCLASSNAME.?\u201d):</p>\n<pre>$ pywbemcli -n assoc1 instance get TST_Person.?\nPick Instance name to process\n0: root/cimv2:TST_Person.name=\"Saara\"\n1: root/cimv2:TST_Person.name=\"Mike\"\n2: root/cimv2:TST_Person.name=\"Sofi\"\n3: root/cimv2:TST_Person.name=\"Gabi\"\n4: root/cimv2:TST_PersonSub.name=\"Gabisub\"\n5: root/cimv2:TST_PersonSub.name=\"Sofisub\"\n6: root/cimv2:TST_PersonSub.name=\"Mikesub\"\n7: root/cimv2:TST_PersonSub.name=\"Saarasub\"\nInput integer between 0 and 7 or Ctrl-C to exit selection: 3\ninstance of TST_Person {\n   name = \"Gabi\";\n};\n</pre>\n</li>\n<li><p>There are multiple output formats supported. The enumerated instances can for\nexample be formatted as a table of properties by use of the <tt><span class=\"pre\">-o</span> table</tt>\ngeneral option (these instances have only one property \u2018name\u2019):</p>\n<pre>$ pywbemcli -n assoc1 -o table instance enumerate TST_Person\nInstances: TST_Person\n+------------+\n| name       |\n|------------|\n| \"Gabi\"     |\n| \"Mike\"     |\n| \"Saara\"    |\n| \"Sofi\"     |\n| \"Gabisub\"  |\n| \"Mikesub\"  |\n| \"Saarasub\" |\n| \"Sofisub\"  |\n+------------+\n</pre>\n</li>\n<li><p>Traverse all associations starting from a specific instance that is selected\ninteractively:</p>\n<pre>$ pywbemcli -n assoc1 -o table instance associators TST_Person.?\nPick Instance name to process\n0: root/cimv2:TST_Person.name=\"Saara\"\n1: root/cimv2:TST_Person.name=\"Mike\"\n2: root/cimv2:TST_Person.name=\"Sofi\"\n3: root/cimv2:TST_Person.name=\"Gabi\"\n4: root/cimv2:TST_PersonSub.name=\"Gabisub\"\n5: root/cimv2:TST_PersonSub.name=\"Sofisub\"\n6: root/cimv2:TST_PersonSub.name=\"Mikesub\"\n7: root/cimv2:TST_PersonSub.name=\"Saarasub\"\nInput integer between 0 and 7 or Ctrl-C to exit selection: 1\nInstances: TST_FamilyCollection\n+-----------+\n| name      |\n|-----------|\n| \"Family2\" |\n| \"Gabi\"    |\n| \"Sofi\"    |\n+-----------+\n</pre>\n</li>\n</ul>\n<p>Other operations against WBEM servers include getting information on namespaces,\nthe Interop namespace, WBEM server brand information, or the advertised\nmanagement profiles:</p>\n<ul>\n<li><p>Show the Interop namespace of the server:</p>\n<pre>$ pywbemcli -n conn1 server interop\nServer Interop Namespace:\nNamespace Name\n----------------\nroot/PG_InterOp\n</pre>\n</li>\n<li><p>List the advertised management profiles:</p>\n<pre>$ pywbemcli -n conn1 server profiles --organization DMTF\nAdvertised management profiles:\n+----------------+----------------------+-----------+\n| Organization   | Registered Name      | Version   |\n|----------------+----------------------+-----------|\n| DMTF           | CPU                  | 1.0.0     |\n| DMTF           | Computer System      | 1.0.0     |\n| DMTF           | Ethernet Port        | 1.0.0     |\n| DMTF           | Fan                  | 1.0.0     |\n| DMTF           | Indications          | 1.1.0     |\n| DMTF           | Profile Registration | 1.0.0     |\n+----------------+----------------------+-----------+\n</pre>\n</li>\n</ul>\n<p>Pywbemcli can also be executed in the interactive (REPL) mode by executing it\nwithout entering a command or by using the command <tt>repl</tt>. In this mode\nthe command line prompt is <tt>pywbemcli&gt;</tt>, the WBEM server connection is\nmaintained between commands and the general options apply to all commands\nexecuted:</p>\n<pre>$ pywbemcli -n conn1\nEnter 'help' for help, &lt;CTRL-D&gt; or ':q' to exit pywbemcli.\npywbemcli&gt; server brand\n\nServer Brand:\nWBEM Server Brand\n-------------------\nOpenPegasus\npywbemcli&gt; server interop\n\nServer Interop Namespace:\nNamespace Name\n----------------\nroot/PG_InterOp\npywbemcli&gt; :q\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6992404, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "59a72b3d7988bb03e6ac6d67ae67778f", "sha256": "50d57c5dbaabb94311bf9896ce6f8854cf5e8697527541a69eee3819f107a881"}, "downloads": -1, "filename": "pywbemtools-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "59a72b3d7988bb03e6ac6d67ae67778f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 76743, "upload_time": "2019-09-29T21:00:38", "upload_time_iso_8601": "2019-09-29T21:00:38.119019Z", "url": "https://files.pythonhosted.org/packages/1a/c0/2ed62fc98312857555a59b998cd48668292345d930783183d507d3870666/pywbemtools-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6a403919e28e8b5216c30a491fe54cc", "sha256": "ccc4077f5a99fcd5ae72ca92c117c14d48cc455b4dbd6308a3cae7aa96fd9204"}, "downloads": -1, "filename": "pywbemtools-0.5.0.tar.gz", "has_sig": false, "md5_digest": "a6a403919e28e8b5216c30a491fe54cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1890728, "upload_time": "2019-09-29T21:00:42", "upload_time_iso_8601": "2019-09-29T21:00:42.215222Z", "url": "https://files.pythonhosted.org/packages/f3/9a/722866891779984bfd1c921c209da065d4262d2ce294261acbd071e87c0e/pywbemtools-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "6d25307a21b808d1d4f76bc82317bff1", "sha256": "c95d986788a49b13e22ad666d45317568373f316b763fdac4f074bf9f7e8df8d"}, "downloads": -1, "filename": "pywbemtools-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d25307a21b808d1d4f76bc82317bff1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 77255, "upload_time": "2020-03-31T08:42:47", "upload_time_iso_8601": "2020-03-31T08:42:47.997963Z", "url": "https://files.pythonhosted.org/packages/c0/29/c76f3c5b4bdbeb87f04a92c4b9c87f6873bcc695f5e349e0c384ecce81fc/pywbemtools-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d686e82f4d975383f30556ec2fafd947", "sha256": "b2629e5de48b6e8a924a11a553176573be30005222d63675cd191278d8d5dfe2"}, "downloads": -1, "filename": "pywbemtools-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d686e82f4d975383f30556ec2fafd947", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 1897606, "upload_time": "2020-03-31T08:42:50", "upload_time_iso_8601": "2020-03-31T08:42:50.564034Z", "url": "https://files.pythonhosted.org/packages/23/e2/2769d6480e3c01a5fc9118a3570b9682bb1dd33870de513665de4d9bd6d3/pywbemtools-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "1c5c989eac5e811566ef32acaf2d8da7", "sha256": "35a2d73c8d6e8f06d9a8d452dbc6536daf049965af423f5750db4c54319be86f"}, "downloads": -1, "filename": "pywbemtools-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c5c989eac5e811566ef32acaf2d8da7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 107310, "upload_time": "2020-04-10T10:38:19", "upload_time_iso_8601": "2020-04-10T10:38:19.695671Z", "url": "https://files.pythonhosted.org/packages/c3/7a/757823505b26603c7829f28236be913fae46f4cb1894fa89a4c2aaf2a4d7/pywbemtools-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a48c54d5bfd65274201a004b846b2a4e", "sha256": "cc0277f8fc80d1bf030fae5dd9068899ac85b7c464162d1f200a45688d582cf5"}, "downloads": -1, "filename": "pywbemtools-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a48c54d5bfd65274201a004b846b2a4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 96903, "upload_time": "2020-04-10T10:38:21", "upload_time_iso_8601": "2020-04-10T10:38:21.044307Z", "url": "https://files.pythonhosted.org/packages/cd/b5/742b0e228099bbe1a7bbd87e36b552df9bf15d92d61e007b3bd3014c05af/pywbemtools-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c5c989eac5e811566ef32acaf2d8da7", "sha256": "35a2d73c8d6e8f06d9a8d452dbc6536daf049965af423f5750db4c54319be86f"}, "downloads": -1, "filename": "pywbemtools-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c5c989eac5e811566ef32acaf2d8da7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 107310, "upload_time": "2020-04-10T10:38:19", "upload_time_iso_8601": "2020-04-10T10:38:19.695671Z", "url": "https://files.pythonhosted.org/packages/c3/7a/757823505b26603c7829f28236be913fae46f4cb1894fa89a4c2aaf2a4d7/pywbemtools-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a48c54d5bfd65274201a004b846b2a4e", "sha256": "cc0277f8fc80d1bf030fae5dd9068899ac85b7c464162d1f200a45688d582cf5"}, "downloads": -1, "filename": "pywbemtools-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a48c54d5bfd65274201a004b846b2a4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 96903, "upload_time": "2020-04-10T10:38:21", "upload_time_iso_8601": "2020-04-10T10:38:21.044307Z", "url": "https://files.pythonhosted.org/packages/cd/b5/742b0e228099bbe1a7bbd87e36b552df9bf15d92d61e007b3bd3014c05af/pywbemtools-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:37 2020"}