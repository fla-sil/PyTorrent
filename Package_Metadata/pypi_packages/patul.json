{"info": {"author": "financial", "author_email": "1012593988@qq.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation", "Topic :: Software Development :: Libraries"], "description": "patul\n=====\n\nA tiny spider based on asyncio and requests.\n\ninstall\n-------\n\n```bash\npip install patul\n```\n\nusage\n-----\nJust like scrapy:\n```python\nimport patul\n\n\nclass MySpider(patul.Spider):\n    \n    start_urls = ['https://cn.bing.com/']\n    \n    async def parse(self, response):\n        print(response.xpath('//a/@href').get())\n        yield patul.Request('https://github.com/financialfly/async-request', callback=self.parse_github)\n\n    def parse_github(self, response):\n        yield {'hello': 'github'}\n    \n    async def process_result(self, result):\n        # Process result at here.\n        print(result)\n\n\nif __name__ == '__main__':\n    # Run spider\n    patul.crawl(MySpider)\n```\nFor more detailed control (like: handle cookies, download delay, concurrent requests, max retries, logs settings etc.): (refer to the constructor of the `Crawler` class):\n```python\nimport patul\n\nclass MySpider(patul.Spider):\n    ...\n\nif __name__ == '__main__':\n    patul.crawl(\n        MySpider, \n        handle_cookies=True, \n        download_delay=0, \n        concurrent_requests=10, \n        max_retries=3, \n        log_settings={'fp': 'spider.log'}\n    )\n```\n\ntest\n----\nUse `fetch` function to get a response immediately:\n```python\nfrom patul import fetch\n\n\ndef parse():\n    response = fetch('https://www.bing.com')\n    print(response)\n    \n   \nparse()\n```\nthe output will like this:\n```\n<Response 200 https://cn.bing.com/>\n```\n\nThe `fetch` function also could be use like this:\n```python\nimport patul\n\n\ndef parse(response):\n    print(response)\n    yield patul.Request(response.url, callback=parse_next)\n\n\ndef parse_next(response):\n    print(response.status_code)\n    yield {'hello': 'world'}\n\n\npatul.fetch('http://www.baidu.com', callback=parse)\n```\nthen run the script, you will see the result:\n```\n<Response 200 http://www.baidu.com/>\n200\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/financialfly/patul", "keywords": "", "license": "BSD License", "maintainer": "financial", "maintainer_email": "1012593988@qq.com", "name": "patul", "package_url": "https://pypi.org/project/patul/", "platform": "all", "project_url": "https://pypi.org/project/patul/", "project_urls": {"Homepage": "https://github.com/financialfly/patul"}, "release_url": "https://pypi.org/project/patul/0.1005/", "requires_dist": null, "requires_python": "", "summary": "A tiny spider based on asyncio and requests.", "version": "0.1005", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>patul</h1>\n<p>A tiny spider based on asyncio and requests.</p>\n<h2>install</h2>\n<pre>pip install patul\n</pre>\n<h2>usage</h2>\n<p>Just like scrapy:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">patul</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MySpider</span><span class=\"p\">(</span><span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    \n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'https://cn.bing.com/'</span><span class=\"p\">]</span>\n    \n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">xpath</span><span class=\"p\">(</span><span class=\"s1\">'//a/@href'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n        <span class=\"k\">yield</span> <span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/financialfly/async-request'</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_github</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_github</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'github'</span><span class=\"p\">}</span>\n    \n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Process result at here.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Run spider</span>\n    <span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">crawl</span><span class=\"p\">(</span><span class=\"n\">MySpider</span><span class=\"p\">)</span>\n</pre>\n<p>For more detailed control (like: handle cookies, download delay, concurrent requests, max retries, logs settings etc.): (refer to the constructor of the <code>Crawler</code> class):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">patul</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySpider</span><span class=\"p\">(</span><span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">crawl</span><span class=\"p\">(</span>\n        <span class=\"n\">MySpider</span><span class=\"p\">,</span> \n        <span class=\"n\">handle_cookies</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n        <span class=\"n\">download_delay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> \n        <span class=\"n\">concurrent_requests</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> \n        <span class=\"n\">max_retries</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> \n        <span class=\"n\">log_settings</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'fp'</span><span class=\"p\">:</span> <span class=\"s1\">'spider.log'</span><span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>test</h2>\n<p>Use <code>fetch</code> function to get a response immediately:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">patul</span> <span class=\"kn\">import</span> <span class=\"n\">fetch</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">():</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'https://www.bing.com'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    \n   \n<span class=\"n\">parse</span><span class=\"p\">()</span>\n</pre>\n<p>the output will like this:</p>\n<pre><code>&lt;Response 200 https://cn.bing.com/&gt;\n</code></pre>\n<p>The <code>fetch</code> function also could be use like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">patul</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">parse_next</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_next</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">patul</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'http://www.baidu.com'</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>\n<p>then run the script, you will see the result:</p>\n<pre><code>&lt;Response 200 http://www.baidu.com/&gt;\n200\n</code></pre>\n\n          </div>"}, "last_serial": 6966443, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7cb05e17da1d9675a4d119d10ef3a29c", "sha256": "d0635d94fcf69cb4dc61acdeae548de86c902f48c0d9c79a7e20478a94500092"}, "downloads": -1, "filename": "patul-0.1.tar.gz", "has_sig": false, "md5_digest": "7cb05e17da1d9675a4d119d10ef3a29c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6412, "upload_time": "2020-04-05T03:34:01", "upload_time_iso_8601": "2020-04-05T03:34:01.053937Z", "url": "https://files.pythonhosted.org/packages/ae/31/1e72a16ad4f6bfc268a21181a3fe20543526fb5f2490bcccdbcf91645f0c/patul-0.1.tar.gz", "yanked": false}], "0.1001": [{"comment_text": "", "digests": {"md5": "f4e669a51e1312682059b0375042b7ff", "sha256": "eba5de28a5750e05be1d228f5e2a92de1bbc79957a15b3c69330791b3f8ffcc9"}, "downloads": -1, "filename": "patul-0.1001.tar.gz", "has_sig": false, "md5_digest": "f4e669a51e1312682059b0375042b7ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6416, "upload_time": "2020-04-05T03:42:32", "upload_time_iso_8601": "2020-04-05T03:42:32.006743Z", "url": "https://files.pythonhosted.org/packages/14/cf/c3a258a364d3bc1cd742412efdf259b8e2b5633ec23fa8ac3202e8dafb07/patul-0.1001.tar.gz", "yanked": false}], "0.1002": [{"comment_text": "", "digests": {"md5": "32953201c81dbacc3b52555448d5bba2", "sha256": "c47b3a6eec9ebcd09ac9f10caee4de22f6af894d84c73bc244417c58f8b8774b"}, "downloads": -1, "filename": "patul-0.1002.tar.gz", "has_sig": false, "md5_digest": "32953201c81dbacc3b52555448d5bba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6620, "upload_time": "2020-04-05T09:29:06", "upload_time_iso_8601": "2020-04-05T09:29:06.557418Z", "url": "https://files.pythonhosted.org/packages/cb/0f/290017394474c30354055cb680f8eed66804f6b55f01fb1c029b9529b272/patul-0.1002.tar.gz", "yanked": false}], "0.1004": [{"comment_text": "", "digests": {"md5": "94f494cfb4fefd91720d34f5b3006eec", "sha256": "f11a9c3187fb914dceb0bfaf4afe18b6c9d660f6e77182487861fcfac23ea883"}, "downloads": -1, "filename": "patul-0.1004.tar.gz", "has_sig": false, "md5_digest": "94f494cfb4fefd91720d34f5b3006eec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6243, "upload_time": "2020-04-07T04:13:43", "upload_time_iso_8601": "2020-04-07T04:13:43.056011Z", "url": "https://files.pythonhosted.org/packages/76/e9/cea071d9917a222475d739ca2d2e179433c19b96560a6665624def35f5df/patul-0.1004.tar.gz", "yanked": false}], "0.1005": [{"comment_text": "", "digests": {"md5": "9acac6729cf62208d6826aadf60b723e", "sha256": "2dd126e9f5d26287471ba7172efd9ca3c0b6382dab1be0e484cfe5eac2a2680f"}, "downloads": -1, "filename": "patul-0.1005.tar.gz", "has_sig": false, "md5_digest": "9acac6729cf62208d6826aadf60b723e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6253, "upload_time": "2020-04-07T04:24:08", "upload_time_iso_8601": "2020-04-07T04:24:08.600878Z", "url": "https://files.pythonhosted.org/packages/d6/e4/39f34652dd77e5d3ed629517748f7b0784f2e98a4a62eb823c2a55db8f98/patul-0.1005.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9acac6729cf62208d6826aadf60b723e", "sha256": "2dd126e9f5d26287471ba7172efd9ca3c0b6382dab1be0e484cfe5eac2a2680f"}, "downloads": -1, "filename": "patul-0.1005.tar.gz", "has_sig": false, "md5_digest": "9acac6729cf62208d6826aadf60b723e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6253, "upload_time": "2020-04-07T04:24:08", "upload_time_iso_8601": "2020-04-07T04:24:08.600878Z", "url": "https://files.pythonhosted.org/packages/d6/e4/39f34652dd77e5d3ed629517748f7b0784f2e98a4a62eb823c2a55db8f98/patul-0.1005.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:46 2020"}