{"info": {"author": "Eren G\u00fcven", "author_email": "erenguven0@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "============\ntornadoist\n============\n\n**tornadoist** -currently- provides Mixins to execute code outside\n``tornado.ioloop.IOLoop`` to avoid blocking. These are:\n\n- CeleryMixin: Celery Tasks\n- ProcessMixin: Functions in separate process\n\nBoth support results, avoids polling or timeouts. More info below.\n\nDemo app included. (Celery with ``mongodb://`` preconfigured in demo app)\n\nCeleryMixin\n-----------\n\n**CeleryMixin** is a Mixin class to use with ``tornado.web.RequestHandler``\nthat provides a Tornado-like interface to running Celery tasks on TornadoServer.\n\nHowTO\n`````\n\nUsing ``tornado.gen`` ::\n\n    from tornado import web, gen\n    from tornadoist import CeleryMixin\n\n    class CeleryHandler(tornado.web.RequestHandler, CeleryMixin):\n        @web.asynchronous\n        @gen.engine\n        def get(self):\n            result = yield gen.Task(self.add_task, some_task, 'somearg')\n            self.write('Hello %s World!' % result)\n            self.finish()\n\nOr using explicit callback ::\n\n    class CeleryHandler(tornado.web.RequestHandler, CeleryMixin):\n        @tornado.web.asynchronous\n        def get(self):\n            self.add_task(some_task, callback=self._on_result)\n\n        def _on_result(self, result):\n            do_something_with_result(result)\n            self.finish()\n\nProcessMixin\n------------\n\n**ProcessMixin** is a Mixin class to use with ``tornado.web.RequestHandler``\nthat provides a Tornado-like interface to running functions with\n``multiprocessing.Process`` outside IOLoop.\n\nHowTO\n`````\n\nUsing ``tornado.gen`` ::\n\n    from tornado import web, gen\n    from tornadoist import ProcessMixin\n\n    class ProcessHandler(tornado.web.RequestHandler, ProcessMixin):\n        @tornado.web.asynchronous\n        @tornado.gen.engine\n        def get(self):\n            result = yield tornado.gen.Task(self.add_task, my_blocking_function,\n                                            'somearg', some_kwarg=42)\n            self.write('Hello Process World! %s' % result)\n            self.finish()\n\nLicense\n^^^^^^^\n\n`Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eguven/tornadoist.git", "keywords": "tornado,celery", "license": "Apache License, Version 2", "maintainer": null, "maintainer_email": null, "name": "tornadoist", "package_url": "https://pypi.org/project/tornadoist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tornadoist/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/eguven/tornadoist.git"}, "release_url": "https://pypi.org/project/tornadoist/0.5.2/", "requires_dist": null, "requires_python": null, "summary": "mixins for tornado", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>tornadoist</strong> -currently- provides Mixins to execute code outside\n<tt>tornado.ioloop.IOLoop</tt> to avoid blocking. These are:</p>\n<ul>\n<li>CeleryMixin: Celery Tasks</li>\n<li>ProcessMixin: Functions in separate process</li>\n</ul>\n<p>Both support results, avoids polling or timeouts. More info below.</p>\n<p>Demo app included. (Celery with <tt><span class=\"pre\">mongodb://</span></tt> preconfigured in demo app)</p>\n<div id=\"celerymixin\">\n<h2>CeleryMixin</h2>\n<p><strong>CeleryMixin</strong> is a Mixin class to use with <tt>tornado.web.RequestHandler</tt>\nthat provides a Tornado-like interface to running Celery tasks on TornadoServer.</p>\n<div id=\"howto\">\n<h3>HowTO</h3>\n<p>Using <tt>tornado.gen</tt></p>\n<pre>from tornado import web, gen\nfrom tornadoist import CeleryMixin\n\nclass CeleryHandler(tornado.web.RequestHandler, CeleryMixin):\n    @web.asynchronous\n    @gen.engine\n    def get(self):\n        result = yield gen.Task(self.add_task, some_task, 'somearg')\n        self.write('Hello %s World!' % result)\n        self.finish()\n</pre>\n<p>Or using explicit callback</p>\n<pre>class CeleryHandler(tornado.web.RequestHandler, CeleryMixin):\n    @tornado.web.asynchronous\n    def get(self):\n        self.add_task(some_task, callback=self._on_result)\n\n    def _on_result(self, result):\n        do_something_with_result(result)\n        self.finish()\n</pre>\n</div>\n</div>\n<div id=\"processmixin\">\n<h2>ProcessMixin</h2>\n<p><strong>ProcessMixin</strong> is a Mixin class to use with <tt>tornado.web.RequestHandler</tt>\nthat provides a Tornado-like interface to running functions with\n<tt>multiprocessing.Process</tt> outside IOLoop.</p>\n<div id=\"id1\">\n<h3>HowTO</h3>\n<p>Using <tt>tornado.gen</tt></p>\n<pre>from tornado import web, gen\nfrom tornadoist import ProcessMixin\n\nclass ProcessHandler(tornado.web.RequestHandler, ProcessMixin):\n    @tornado.web.asynchronous\n    @tornado.gen.engine\n    def get(self):\n        result = yield tornado.gen.Task(self.add_task, my_blocking_function,\n                                        'somearg', some_kwarg=42)\n        self.write('Hello Process World! %s' % result)\n        self.finish()\n</pre>\n<div id=\"license\">\n<h4>License</h4>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache License, Version 2.0</a></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 763666, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "b6633e2945ba49c41274d25fd6d09a33", "sha256": "11278d414ef3372b550e08653ee48f704ff41fefab04bcf80d28ba8d7ba17156"}, "downloads": -1, "filename": "tornadoist-0.5.2.tar.gz", "has_sig": false, "md5_digest": "b6633e2945ba49c41274d25fd6d09a33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4284, "upload_time": "2013-06-09T11:29:58", "upload_time_iso_8601": "2013-06-09T11:29:58.146774Z", "url": "https://files.pythonhosted.org/packages/13/2f/bcebc27e737e46b94442750fc51a0eb1fbc7b20211c961e9ea34e3361e4f/tornadoist-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6633e2945ba49c41274d25fd6d09a33", "sha256": "11278d414ef3372b550e08653ee48f704ff41fefab04bcf80d28ba8d7ba17156"}, "downloads": -1, "filename": "tornadoist-0.5.2.tar.gz", "has_sig": false, "md5_digest": "b6633e2945ba49c41274d25fd6d09a33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4284, "upload_time": "2013-06-09T11:29:58", "upload_time_iso_8601": "2013-06-09T11:29:58.146774Z", "url": "https://files.pythonhosted.org/packages/13/2f/bcebc27e737e46b94442750fc51a0eb1fbc7b20211c961e9ea34e3361e4f/tornadoist-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:51 2020"}