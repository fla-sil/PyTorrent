{"info": {"author": "Osirium", "author_email": "support@osirium.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![Test](https://github.com/Lantero/pytojsonschema/workflows/Test/badge.svg?branch=master)\n\n# pytojsonschema\n\nPackage that uses static analysis - `ast` - to convert Python 3 function type annotations to JSON schemas.\n\n- [https://docs.python.org/3/library/typing.html](https://docs.python.org/3/library/typing.html)\n- [https://json-schema.org/](https://json-schema.org/)\n\nThis allows you to auto-generate the validation schemas for JSON-RPC backend functions written in Python.\n\nCurrent support is for Python 3.8+ and JSON schema draft 7+.\n\n## Getting started\n\n#### Installation\n\nFrom a Python 3.8+ environment, run `pip install pytojsonschema`.\n\n#### Scan a package\n\nAfter installing the package, you can open a python terminal from the root of the repo and run:\n\n```python\nimport os\nimport pprint\n\nfrom pytojsonschema.functions import process_package\n\npprint.pprint(process_package(os.path.join(\"test\", \"example\")))\n```\n\nThe example package will be scanned and JSON schemas will be generated for all the top level functions it can find.\n\n#### Scan a file\n\nYou can also target specific files, which won't include the package namespacing in the result value.\nFollowing on the same terminal:\n\n```python\nfrom pytojsonschema.functions import process_file\n\npprint.pprint(process_file(os.path.join(\"test\", \"example\", \"service.py\")))\n```\n\n#### Include and exclude patterns\n\nInclude and exclude unix-like patterns can be used to filter function and module names we want to allow/disallow for \nscanning. See the difference when you now run this instead:\n\n```python\npprint.pprint(process_package(os.path.join(\"test\", \"example\"), exclude_patterns=[\"_*\"]))\n```\n\nSimilarly, but applied to specific files:\n\n```python\npprint.pprint(process_file(os.path.join(\"test\", \"example\", \"service.py\"), exclude_patterns=[\"_*\"]))\n```\n\nThings to take into account:\n- Exclude pattern matching overwrite include matches. \n- `__init__.py` files are not affected by pattern rules and are always scanned. However, you can still filter its\n  internal functions.\n\n## Type annotation rules\n\nFitting Python's typing model to JSON means not everything is allowed in your function signatures.\nThis is a natural restriction that comes with JSON data serialization. Hopefully, most of the useful stuff you need is\nallowed.\n\n#### Allowed types\n\n##### Base types\n\nBasic types `bool`, `int`, `float`, `str`, `None` and `typing.Any` are allowed. Also, you can build more complex, nested\nstructures with the usage of `typing.Union`, `typing.Optional`, `typing.Dict` (Only `str` keys are allowed) and\n`typing.List`. All these types have a direct, non-ambiguous representation in both JSON and JSON schema.\n\n##### Custom types\n\nYour functions can also use custom types like the ones defined using an assignment of `typing.Union`, `typing.List`, \n`typing.Dict` and `typing.Optional`, as in:\n\n```python\nServicePort = typing.Union[int, float]\nServiceConfig = typing.Dict[str, typing.Any]\n```\n\nYou can use one of the new Python 3.8 features, `typing.TypedDict`, to build stronger validation on dict-like\nobjects (Only class-based syntax). As you can see, you can chain types with no restrictions:\n\n```python\nclass Service(typing.TypedDict):\n    address: str\n    port: ServicePort\n    config: ServiceConfig\n    tags: typing.List[str]\n    debug: bool = False\n```\n\nAlso, if you need to restrict the choices for a string type, you can use Python enums:\n\n_Note 1: Whilst Python itself will not auto-populate default values, you can use them to make the property not required_\n\n```python\nimport enum\n\n\nclass HTTPMethod(enum.Enum):\n    GET = \"GET\"\n    POST = \"POST\"\n    PATCH = \"PATCH\"\n    DELETE = \"DELETE\"\n\n\ndef my_func(http_method: HTTPMethod):\n    pass  # My code\n```\n\n_Note 1: This only works for enums whose values are strings, as that is the only case JSON schema supports_\n\n_Note 2: The resulting validation uses the enum values as the valid choices, as that is what JSON schema can understand_\n\n##### Importing types from other files\n\nYou can import these custom types within your package and they will be picked up. However, due to the static nature of\nthe scan, custom types coming from external packages can't be followed and hence not supported. In other words, you can\nonly share these types within your package, using relative imports.\n\nOther static analysis tools like `mypy` use a repository with stub files to solve this issue, see\n[https://mypy.readthedocs.io/en/stable/stubs.html](https://mypy.readthedocs.io/en/stable/stubs.html). This is out of the\nscope for a tiny project like this, at least for now.\n\n#### Rules\n\n1. The functions you want to scan need to be type annotated. Kind of obvious requirement, right?\n\n2. Only the types defined in the previous section can be used. They are the types that can be safely serialised as JSON.\n\n3. Function arguments are meant to be passed in key-value format, like a json object. This puts a couple of restrictions\n   regarding *args, **kwargs, positional-only and keyword-only arguments:\n\n   The following is allowed:\n   - ****kwargs**: `def func(**kwargs): pass`\n   - **keyword-only arguments**: `def func(*, a): pass`\n\n   The following is not allowed:\n   - ***args**: `def func(*args): pass`\n   - **positional-only arguments**: `def func(a, /): pass`\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Osirium/pytojsonschema", "keywords": "", "license": "", "maintainer": "Carlos Ruiz Lantero", "maintainer_email": "carlos.ruiz.lantero@gmail.com", "name": "pytojsonschema", "package_url": "https://pypi.org/project/pytojsonschema/", "platform": "", "project_url": "https://pypi.org/project/pytojsonschema/", "project_urls": {"Homepage": "https://github.com/Osirium/pytojsonschema"}, "release_url": "https://pypi.org/project/pytojsonschema/1.10.1/", "requires_dist": ["black (==19.10b0) ; extra == 'test'", "flake8 (==3.7.9) ; extra == 'test'", "pytest (==5.4.1) ; extra == 'test'", "pytest-cov (==2.8.1) ; extra == 'test'"], "requires_python": "", "summary": "A package to convert Python type annotations into JSON schemas", "version": "1.10.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Test\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a596c564535e685773532ce4fb4734a133fe206b/68747470733a2f2f6769746875622e636f6d2f4c616e7465726f2f7079746f6a736f6e736368656d612f776f726b666c6f77732f546573742f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<h1>pytojsonschema</h1>\n<p>Package that uses static analysis - <code>ast</code> - to convert Python 3 function type annotations to JSON schemas.</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/typing.html\" rel=\"nofollow\">https://docs.python.org/3/library/typing.html</a></li>\n<li><a href=\"https://json-schema.org/\" rel=\"nofollow\">https://json-schema.org/</a></li>\n</ul>\n<p>This allows you to auto-generate the validation schemas for JSON-RPC backend functions written in Python.</p>\n<p>Current support is for Python 3.8+ and JSON schema draft 7+.</p>\n<h2>Getting started</h2>\n<h4>Installation</h4>\n<p>From a Python 3.8+ environment, run <code>pip install pytojsonschema</code>.</p>\n<h4>Scan a package</h4>\n<p>After installing the package, you can open a python terminal from the root of the repo and run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pytojsonschema.functions</span> <span class=\"kn\">import</span> <span class=\"n\">process_package</span>\n\n<span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">process_package</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example\"</span><span class=\"p\">)))</span>\n</pre>\n<p>The example package will be scanned and JSON schemas will be generated for all the top level functions it can find.</p>\n<h4>Scan a file</h4>\n<p>You can also target specific files, which won't include the package namespacing in the result value.\nFollowing on the same terminal:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytojsonschema.functions</span> <span class=\"kn\">import</span> <span class=\"n\">process_file</span>\n\n<span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">process_file</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"s2\">\"service.py\"</span><span class=\"p\">)))</span>\n</pre>\n<h4>Include and exclude patterns</h4>\n<p>Include and exclude unix-like patterns can be used to filter function and module names we want to allow/disallow for\nscanning. See the difference when you now run this instead:</p>\n<pre><span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">process_package</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example\"</span><span class=\"p\">),</span> <span class=\"n\">exclude_patterns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"_*\"</span><span class=\"p\">]))</span>\n</pre>\n<p>Similarly, but applied to specific files:</p>\n<pre><span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">process_file</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"s2\">\"service.py\"</span><span class=\"p\">),</span> <span class=\"n\">exclude_patterns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"_*\"</span><span class=\"p\">]))</span>\n</pre>\n<p>Things to take into account:</p>\n<ul>\n<li>Exclude pattern matching overwrite include matches.</li>\n<li><code>__init__.py</code> files are not affected by pattern rules and are always scanned. However, you can still filter its\ninternal functions.</li>\n</ul>\n<h2>Type annotation rules</h2>\n<p>Fitting Python's typing model to JSON means not everything is allowed in your function signatures.\nThis is a natural restriction that comes with JSON data serialization. Hopefully, most of the useful stuff you need is\nallowed.</p>\n<h4>Allowed types</h4>\n<h5>Base types</h5>\n<p>Basic types <code>bool</code>, <code>int</code>, <code>float</code>, <code>str</code>, <code>None</code> and <code>typing.Any</code> are allowed. Also, you can build more complex, nested\nstructures with the usage of <code>typing.Union</code>, <code>typing.Optional</code>, <code>typing.Dict</code> (Only <code>str</code> keys are allowed) and\n<code>typing.List</code>. All these types have a direct, non-ambiguous representation in both JSON and JSON schema.</p>\n<h5>Custom types</h5>\n<p>Your functions can also use custom types like the ones defined using an assignment of <code>typing.Union</code>, <code>typing.List</code>,\n<code>typing.Dict</code> and <code>typing.Optional</code>, as in:</p>\n<pre><span class=\"n\">ServicePort</span> <span class=\"o\">=</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>\n<span class=\"n\">ServiceConfig</span> <span class=\"o\">=</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>\n</pre>\n<p>You can use one of the new Python 3.8 features, <code>typing.TypedDict</code>, to build stronger validation on dict-like\nobjects (Only class-based syntax). As you can see, you can chain types with no restrictions:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Service</span><span class=\"p\">(</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">TypedDict</span><span class=\"p\">):</span>\n    <span class=\"n\">address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"n\">ServicePort</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">ServiceConfig</span>\n    <span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>Also, if you need to restrict the choices for a string type, you can use Python enums:</p>\n<p><em>Note 1: Whilst Python itself will not auto-populate default values, you can use them to make the property not required</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">enum</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HTTPMethod</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">GET</span> <span class=\"o\">=</span> <span class=\"s2\">\"GET\"</span>\n    <span class=\"n\">POST</span> <span class=\"o\">=</span> <span class=\"s2\">\"POST\"</span>\n    <span class=\"n\">PATCH</span> <span class=\"o\">=</span> <span class=\"s2\">\"PATCH\"</span>\n    <span class=\"n\">DELETE</span> <span class=\"o\">=</span> <span class=\"s2\">\"DELETE\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">(</span><span class=\"n\">http_method</span><span class=\"p\">:</span> <span class=\"n\">HTTPMethod</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  <span class=\"c1\"># My code</span>\n</pre>\n<p><em>Note 1: This only works for enums whose values are strings, as that is the only case JSON schema supports</em></p>\n<p><em>Note 2: The resulting validation uses the enum values as the valid choices, as that is what JSON schema can understand</em></p>\n<h5>Importing types from other files</h5>\n<p>You can import these custom types within your package and they will be picked up. However, due to the static nature of\nthe scan, custom types coming from external packages can't be followed and hence not supported. In other words, you can\nonly share these types within your package, using relative imports.</p>\n<p>Other static analysis tools like <code>mypy</code> use a repository with stub files to solve this issue, see\n<a href=\"https://mypy.readthedocs.io/en/stable/stubs.html\" rel=\"nofollow\">https://mypy.readthedocs.io/en/stable/stubs.html</a>. This is out of the\nscope for a tiny project like this, at least for now.</p>\n<h4>Rules</h4>\n<ol>\n<li>\n<p>The functions you want to scan need to be type annotated. Kind of obvious requirement, right?</p>\n</li>\n<li>\n<p>Only the types defined in the previous section can be used. They are the types that can be safely serialised as JSON.</p>\n</li>\n<li>\n<p>Function arguments are meant to be passed in key-value format, like a json object. This puts a couple of restrictions\nregarding *args, **kwargs, positional-only and keyword-only arguments:</p>\n<p>The following is allowed:</p>\n<ul>\n<li>**<strong>kwargs</strong>: <code>def func(**kwargs): pass</code></li>\n<li><strong>keyword-only arguments</strong>: <code>def func(*, a): pass</code></li>\n</ul>\n<p>The following is not allowed:</p>\n<ul>\n<li>*<strong>args</strong>: <code>def func(*args): pass</code></li>\n<li><strong>positional-only arguments</strong>: <code>def func(a, /): pass</code></li>\n</ul>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7110055, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6f1dd554d1f2ca2227fa6c7e6177f388", "sha256": "9e2f8ca5a47312b944266445956e7611c08b6579ab846987535574990c868860"}, "downloads": -1, "filename": "pytojsonschema-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f1dd554d1f2ca2227fa6c7e6177f388", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6045, "upload_time": "2020-03-25T21:44:43", "upload_time_iso_8601": "2020-03-25T21:44:43.798253Z", "url": "https://files.pythonhosted.org/packages/b1/8c/7bad2c2a507665af7609267fa79579dfea37dd80026c2e4015c8685b1719/pytojsonschema-0.1.0-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c0bd17b5ba6f69eb517d1a47e9133164", "sha256": "66488a89bde5494d4c70f2c348353de6b1405e86239eb4f3bdbcabc16c96b25c"}, "downloads": -1, "filename": "pytojsonschema-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c0bd17b5ba6f69eb517d1a47e9133164", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8929, "upload_time": "2020-03-26T18:54:34", "upload_time_iso_8601": "2020-03-26T18:54:34.722779Z", "url": "https://files.pythonhosted.org/packages/2e/07/70d75510bd4d6fd0173c2febdb68b02af11d9ff5e7eb1c31f89e56d8ab00/pytojsonschema-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "391a5e68d1ddd8f8075f354e05bcf3e6", "sha256": "a13584206b57bfd01a1a66f8101863ddd837f4b7d261cf8f39fdfb32e5da9019"}, "downloads": -1, "filename": "pytojsonschema-1.0.0.tar.gz", "has_sig": false, "md5_digest": "391a5e68d1ddd8f8075f354e05bcf3e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11359, "upload_time": "2020-03-26T18:54:35", "upload_time_iso_8601": "2020-03-26T18:54:35.653926Z", "url": "https://files.pythonhosted.org/packages/b6/49/cbae434992d85b7b8a8211aaeea607364ea246f655b5b9909b513141a9c2/pytojsonschema-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ad2184329cc02df98c05ebd149437e93", "sha256": "40d68c56684fb33d2a41fcb468754d678ef86a3c3a136e0e1b8fe353b72c7cd3"}, "downloads": -1, "filename": "pytojsonschema-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ad2184329cc02df98c05ebd149437e93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8930, "upload_time": "2020-03-26T19:03:06", "upload_time_iso_8601": "2020-03-26T19:03:06.425311Z", "url": "https://files.pythonhosted.org/packages/01/a9/4e4b08f4b26f320c3e6c9d5a83df82e1ea91c2dc116007d41c0762c1e113/pytojsonschema-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ca6a76a723af03026df750b6c9d1a3d", "sha256": "85017a68f105b08196564857484e2c84677d7802e03d44edf4753c632b399818"}, "downloads": -1, "filename": "pytojsonschema-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5ca6a76a723af03026df750b6c9d1a3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11372, "upload_time": "2020-03-26T19:03:07", "upload_time_iso_8601": "2020-03-26T19:03:07.300633Z", "url": "https://files.pythonhosted.org/packages/8e/56/8230185118ff0846106cb67afae89d2e478efd4586dc074520733c80811c/pytojsonschema-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "5443b18b1e6ea3940343afe76124b8e8", "sha256": "dfa68b8764833946c9d29096b19f59a90825493efca018e6e6b4f0399458ab07"}, "downloads": -1, "filename": "pytojsonschema-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5443b18b1e6ea3940343afe76124b8e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10607, "upload_time": "2020-03-26T19:09:20", "upload_time_iso_8601": "2020-03-26T19:09:20.634779Z", "url": "https://files.pythonhosted.org/packages/d5/b4/312b1fba04247500c974adeb671c9c650cc8c65db8c6422dcc94b6e4b1fd/pytojsonschema-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "778ba164fc09ed276ed54183bd3fd9c6", "sha256": "a84a9a35fcc8e6eb07d5130ed8889e335e136ad54abc8ef6270a75b4c5ca3a7d"}, "downloads": -1, "filename": "pytojsonschema-1.0.2.tar.gz", "has_sig": false, "md5_digest": "778ba164fc09ed276ed54183bd3fd9c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13264, "upload_time": "2020-03-26T19:09:21", "upload_time_iso_8601": "2020-03-26T19:09:21.720424Z", "url": "https://files.pythonhosted.org/packages/37/7c/7338ac6df09664622e56af688da2db064b3d0fdcceb2d641d4848bf8f4df/pytojsonschema-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "91b00612e715cbdf0583be89e95fa9ba", "sha256": "5fa02e86e03b5e4cf2c078ba1b0f743bf711f3bf71371d31ac04d0a460c519d7"}, "downloads": -1, "filename": "pytojsonschema-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "91b00612e715cbdf0583be89e95fa9ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10607, "upload_time": "2020-03-26T19:11:25", "upload_time_iso_8601": "2020-03-26T19:11:25.813815Z", "url": "https://files.pythonhosted.org/packages/59/74/1ed6e43b260b032e6d75a2ea1d08485a22bf4235309b51b883bb9670029b/pytojsonschema-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff920b0590410361e86cbe2426958c95", "sha256": "fabdd1a047ccd98568ec4a9f4993945c093c5682aa85c495f322f127495c74f2"}, "downloads": -1, "filename": "pytojsonschema-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ff920b0590410361e86cbe2426958c95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13277, "upload_time": "2020-03-26T19:11:27", "upload_time_iso_8601": "2020-03-26T19:11:27.100425Z", "url": "https://files.pythonhosted.org/packages/1d/72/eebf69e4e2af65d3306c6aca0a16b9ea9062360b9e37be9fb4923b56659f/pytojsonschema-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "b3d3662c835af30eb576ff358e1a6afe", "sha256": "463543be8febba26206207c6e59af57bed39d95ebf5b9f5693a192fe34acb50b"}, "downloads": -1, "filename": "pytojsonschema-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b3d3662c835af30eb576ff358e1a6afe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10824, "upload_time": "2020-03-26T19:52:13", "upload_time_iso_8601": "2020-03-26T19:52:13.770782Z", "url": "https://files.pythonhosted.org/packages/38/2f/c6c4ceaa003163c8d62fc87523781b6052e93b141c5e7d52a1c7133a4841/pytojsonschema-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f762cd9f13077c906d08828e57787f8", "sha256": "4b3aef2992e3850befc46be679448a0f2f132ee997bc011b82bef76b88ca0f53"}, "downloads": -1, "filename": "pytojsonschema-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0f762cd9f13077c906d08828e57787f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13488, "upload_time": "2020-03-26T19:52:14", "upload_time_iso_8601": "2020-03-26T19:52:14.954004Z", "url": "https://files.pythonhosted.org/packages/ae/d0/e0bb94246416b78f2458ee18a28ef462ee8947765108f340344470f9ce12/pytojsonschema-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d7fabfc7f719c3dbdd0a31efef2c6639", "sha256": "5c577fbb39caee635b24aed13b06f8aeba5bff9d2ed48e4bdc28935b2259f2e1"}, "downloads": -1, "filename": "pytojsonschema-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d7fabfc7f719c3dbdd0a31efef2c6639", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11016, "upload_time": "2020-03-26T20:16:23", "upload_time_iso_8601": "2020-03-26T20:16:23.762508Z", "url": "https://files.pythonhosted.org/packages/85/7a/ce32faabad9afac87261b27f06a9a8ea581ee407590e8e3c3f66284ccfea/pytojsonschema-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2793ba987e9aea2625866e7c624235a9", "sha256": "2aaca41643c914f16f21072341a91dfeaa7fbf9fa8417ef720987392f465a865"}, "downloads": -1, "filename": "pytojsonschema-1.0.5.tar.gz", "has_sig": false, "md5_digest": "2793ba987e9aea2625866e7c624235a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13940, "upload_time": "2020-03-26T20:16:39", "upload_time_iso_8601": "2020-03-26T20:16:39.713875Z", "url": "https://files.pythonhosted.org/packages/05/6b/7ba7a5576afbc2731368d2b4303b2d27753c6fbdeb4a07519c3ed50926ec/pytojsonschema-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "f79052e5d4c6abc3a43212db0444c4f9", "sha256": "900a9bcac2688f75d41ef2c43ba3c758b2dcd405196ded189e34c8eea56c5099"}, "downloads": -1, "filename": "pytojsonschema-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "f79052e5d4c6abc3a43212db0444c4f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11008, "upload_time": "2020-03-26T20:24:34", "upload_time_iso_8601": "2020-03-26T20:24:34.685260Z", "url": "https://files.pythonhosted.org/packages/41/88/6e0cdadae007976267a2194d19617ad766581cb21b2aa8d50877a0b28247/pytojsonschema-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a18261d9a2712b4e34f41ddd4bb3404d", "sha256": "4265bc4cce0a1ce647ff8c20d9a43937af6f3f58999a6fbdedede0072b98459b"}, "downloads": -1, "filename": "pytojsonschema-1.0.6.tar.gz", "has_sig": false, "md5_digest": "a18261d9a2712b4e34f41ddd4bb3404d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13935, "upload_time": "2020-03-26T20:24:35", "upload_time_iso_8601": "2020-03-26T20:24:35.596533Z", "url": "https://files.pythonhosted.org/packages/08/b2/953d728ae6bf8dcbb84728fe180a28fcf9b39b0a424331ba4e8580db5f69/pytojsonschema-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "73f6a76d233192aad9206ea03249e5b9", "sha256": "7049f09c7f79e6675a9fb9506d33b40f14cc4722a818247bd68d389f48b3d156"}, "downloads": -1, "filename": "pytojsonschema-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "73f6a76d233192aad9206ea03249e5b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10955, "upload_time": "2020-03-30T13:42:53", "upload_time_iso_8601": "2020-03-30T13:42:53.208707Z", "url": "https://files.pythonhosted.org/packages/a5/72/d87af0977b72718158585e04f49f0ba19046a0e6cfa8f25d3e926c76c494/pytojsonschema-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1167b5196869717a2a879d6b53587e1b", "sha256": "eb29e6eab84012b56f36986bd9dc4dde1a5c93ecedb31a9235a439da51aee059"}, "downloads": -1, "filename": "pytojsonschema-1.0.7.tar.gz", "has_sig": false, "md5_digest": "1167b5196869717a2a879d6b53587e1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13925, "upload_time": "2020-03-30T13:42:54", "upload_time_iso_8601": "2020-03-30T13:42:54.219916Z", "url": "https://files.pythonhosted.org/packages/03/15/24c67b2b1c6f51a6481eac35ac76cb46771280f2e269983295e2ec8aa6e5/pytojsonschema-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "f6354411ded4a30361d382416466e734", "sha256": "c955619cb2b0c8d603447cc4e2078fe5fe9bbf3b52edec52f0fb88b32b656ddc"}, "downloads": -1, "filename": "pytojsonschema-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f6354411ded4a30361d382416466e734", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11026, "upload_time": "2020-03-30T14:35:39", "upload_time_iso_8601": "2020-03-30T14:35:39.785876Z", "url": "https://files.pythonhosted.org/packages/2d/e0/8432e502587bd5ee6710340e929d65d22e26f13418589e3d4514bfc6ab42/pytojsonschema-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14c68cda6b3f11b6943d2e16f5fc40de", "sha256": "bf8f0b7e06bfd9314f842d93d8ca13522fa7fcc384ed573bc2c2752946617efd"}, "downloads": -1, "filename": "pytojsonschema-1.0.8.tar.gz", "has_sig": false, "md5_digest": "14c68cda6b3f11b6943d2e16f5fc40de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13986, "upload_time": "2020-03-30T14:35:41", "upload_time_iso_8601": "2020-03-30T14:35:41.083315Z", "url": "https://files.pythonhosted.org/packages/58/a8/12811d5ee1b904aed6b308c67c3be688a280ead1deaf88cca811ad71d308/pytojsonschema-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "7fa4c94b89e200f8a098396771fc62c3", "sha256": "37f9cab8f17ee9ca24c305cbbcd7fa381fdefbee52c8ec3d0a4b47c6d21aaccb"}, "downloads": -1, "filename": "pytojsonschema-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7fa4c94b89e200f8a098396771fc62c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11076, "upload_time": "2020-03-30T15:05:22", "upload_time_iso_8601": "2020-03-30T15:05:22.651635Z", "url": "https://files.pythonhosted.org/packages/93/28/27c08bdca49a228935b7d7e85048efc6b6894cfbe62a250f28c515c4320f/pytojsonschema-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab2a26d46b779e7c903b0cc07323a143", "sha256": "aa068ec00133f6c7245dddaefe3d92ef5d81a1ac932ce5d7409a14ce5452656a"}, "downloads": -1, "filename": "pytojsonschema-1.0.9.tar.gz", "has_sig": false, "md5_digest": "ab2a26d46b779e7c903b0cc07323a143", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14137, "upload_time": "2020-03-30T15:05:25", "upload_time_iso_8601": "2020-03-30T15:05:25.036792Z", "url": "https://files.pythonhosted.org/packages/cf/96/04c1248e1ec8a34c095326fcf0ffb34b58bff05fb3d243ae1515a9c43ddf/pytojsonschema-1.0.9.tar.gz", "yanked": false}], "1.10.0": [{"comment_text": "", "digests": {"md5": "28cf317bb479f2f2eafa5db5c489e317", "sha256": "1f58adb2b203941e8212648003af5e916c3ffaa0ba519b28c501ac30412372f7"}, "downloads": -1, "filename": "pytojsonschema-1.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "28cf317bb479f2f2eafa5db5c489e317", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11576, "upload_time": "2020-04-24T13:57:30", "upload_time_iso_8601": "2020-04-24T13:57:30.052434Z", "url": "https://files.pythonhosted.org/packages/99/bb/98eebdf1fd5469e64a3dd2935ca4f918208115a6e6e957cca03f62a16d25/pytojsonschema-1.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "236fa1aaf1387f6ecc234a281dfacd87", "sha256": "e28f192b27d982ad525db13c10807f35449923697d38d50211d0c98cac17f047"}, "downloads": -1, "filename": "pytojsonschema-1.10.0.tar.gz", "has_sig": false, "md5_digest": "236fa1aaf1387f6ecc234a281dfacd87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15107, "upload_time": "2020-04-24T13:57:31", "upload_time_iso_8601": "2020-04-24T13:57:31.340957Z", "url": "https://files.pythonhosted.org/packages/38/a7/ae7902351945fc921a7e7fd606ae310ddce4ff5055db04fbbbf66dd4385b/pytojsonschema-1.10.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "75477a56e37717c09c99fd15e1848362", "sha256": "87be789ae238df2c206a5d0fa76e8f8105ccf6b9a8de5dcf4f9da484915056ce"}, "downloads": -1, "filename": "pytojsonschema-1.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75477a56e37717c09c99fd15e1848362", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11575, "upload_time": "2020-04-27T09:08:46", "upload_time_iso_8601": "2020-04-27T09:08:46.125384Z", "url": "https://files.pythonhosted.org/packages/d7/b3/fb58dd9cff2892a1dd3ba72af033410ad9d9c470d48f52cb85f40a777b11/pytojsonschema-1.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a734d4d840bc904e0595177196b70332", "sha256": "6c56791f91e6d2803dfac627d1a1fa378a08519a86b406a515bf869736d5b9ab"}, "downloads": -1, "filename": "pytojsonschema-1.10.1.tar.gz", "has_sig": false, "md5_digest": "a734d4d840bc904e0595177196b70332", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15130, "upload_time": "2020-04-27T09:08:47", "upload_time_iso_8601": "2020-04-27T09:08:47.339604Z", "url": "https://files.pythonhosted.org/packages/21/6f/ced544bad2e83e4278f884f74f4783aa27dfeafc49d1afbc2ff903a241f4/pytojsonschema-1.10.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75477a56e37717c09c99fd15e1848362", "sha256": "87be789ae238df2c206a5d0fa76e8f8105ccf6b9a8de5dcf4f9da484915056ce"}, "downloads": -1, "filename": "pytojsonschema-1.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75477a56e37717c09c99fd15e1848362", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11575, "upload_time": "2020-04-27T09:08:46", "upload_time_iso_8601": "2020-04-27T09:08:46.125384Z", "url": "https://files.pythonhosted.org/packages/d7/b3/fb58dd9cff2892a1dd3ba72af033410ad9d9c470d48f52cb85f40a777b11/pytojsonschema-1.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a734d4d840bc904e0595177196b70332", "sha256": "6c56791f91e6d2803dfac627d1a1fa378a08519a86b406a515bf869736d5b9ab"}, "downloads": -1, "filename": "pytojsonschema-1.10.1.tar.gz", "has_sig": false, "md5_digest": "a734d4d840bc904e0595177196b70332", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15130, "upload_time": "2020-04-27T09:08:47", "upload_time_iso_8601": "2020-04-27T09:08:47.339604Z", "url": "https://files.pythonhosted.org/packages/21/6f/ced544bad2e83e4278f884f74f4783aa27dfeafc49d1afbc2ff903a241f4/pytojsonschema-1.10.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:07 2020"}