{"info": {"author": "Aur\u00e9lien COLIN", "author_email": "aureliencolin@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6"], "description": "\n# PyplotAnnotation\n\n- [Introduction](#introduction)\n- [Requirements](#requirements)\n- [How to Use](#how-to-use)\n    - [The command line](#the-command-line)\n    - [Legal actions](#legal-actions)\n    - [Format of the output](#format-of-the-input)\n- [Examples](#examples)\n\n## Introduction\n\nThe goal of the library is to create a software for quick annotation. More specifically, it is used for the generation of a segmentation dataset.\nThe application show images in a pyplot window and ask the user to choose a class, choose point to draw a polygon, and validate.\n\nThe application support up to nine classes, multiple polygons per label, and multiple labels per class.\n\n## Requirements\n\n- matplotlib\n- pillow\n- fire\n\n\n## How to use\n\n### The command line\n\nTo run the application, write the following command to the cmd:\n\n```bash\npython PyplotAnnotation {arg1} {arg2} {arg3}\n```\n\n- *{arg1}* describes the path of the picture to segment, as recognized by glob. The default value is \"*\\*.png*\", which correspond to the .png in the current working directory.\n- *{arg2}* is the name of the folder in which the input of the dataset will be written.\n- *{arg3}* is the name of the folder in which the output of the dataset (the masks) will be written.\n\nExample:\n\n```bash\npython -m PyplotAnnotation.PyplotAnnotation *.png inputs masks\n```\n\n\n### Legal actions\n\nThe application follows a quite simple automaton:\n\n![](README_files/Diagram.png)\n\n#### *New image* state (initial state)\n\n##### Actions performed on entering the state\n\n- A new picture is plotted.\n- The current polygons are initialized to a void list.\n\nIf coming from *Polygon validated*:\n- Save the picture inside the *input_folder*.\n- Save the masks (one per used class) to the *mask_folder*.\n\nIf these files already exist, they will be overwritten.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| 1, 2, 3, 4, 5, 6, 7, 8, 9 | *Class selected* |\n\n#### *Class selected* state\n\n##### Actions performed on entering the state\n\n- The class of the current polygon is set to the input used to access this state.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| 1, 2, 3, 4, 5, 6, 7, 8, 9 | *Class selected* |\n| Central click | *First point put* |\n\n#### *First point put* state\n\n##### Actions performed on entering the state\n\nIf coming from *Class selected*:\n- A point is added to the polygon.\n- The point is plotted on the picture.\n\nIf coming from *Second point put*:\n- The second point is removed.\n- The line between the second and first point is removed.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| Central click | *Second point put* |\n| Right click | *Class selected* |\n\n#### *Second point put* state\n\n##### Actions performed on entering the state\n\nIf coming from *First point put*:\n- A point is added to the polygon.\n- The point is plotted on the picture.\n- A line between the first and second point is plotted.\n\nIf coming from *n-th point put*:\n- The third point is removed.\n- The line between the third and second point is removed.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| Central click | *n-th point put* |\n| Right click | *First point put* |\n\n#### *n-th point put* state\n\n##### Actions performed on entering the state\n\nIf coming with a central click:\n- A point is added to the polygon.\n- The point is plotted on the picture.\n- A line between the two last point is plotted.\n- If coming from *Second point put*, set *n* at 3\n- If coming from *n-th point put*, set *n* at *n*+1\n\nIf coming with a right click:\n- The last point is removed.\n- The line between the last and second last point is removed.\n- Set *n* at *n*-1.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| 0 | *Polygon validated* |\n| Central click | *n-th point put* |\n| Right click | *n-th point put* |\n| Right click | *Second point put* |\n\nWhen using \"Right click\" : if *n* is three, go to \"*Second point put*\"-state, else go to \"*n-th point put*\".\n#### *Polygon validated* state\n\n##### Actions performed on entering the state\n\nThe current polygon is saved (now, it cannot be modified). A new polygon is initialized.\n\n##### Leaving the state\n\n| Input | State |\n|---|---|\n| Enter | *New image* |\n| 1, 2, 3, 4, 5, 6, 7, 8, 9 | *Class selected* |\n\n\n\n### Format of the output\n\nAfter the acceptation of each picture, multiple files are created. \n\n- First, a new image is generated in the *input_folder*, with the same name as the picture except that the extension is forced to be *.png*.\n- Second, the mask files are generated. Localised in the *mask_folder*, one of them as the same name as the same name as the input : this is the concatenation of each mask. Other files are created, one by class used. For each mask, the background is set at 0 while the mask is set at 255. Of course, the masks only have one canal each.\n\n### Examples\n\nCredit for xiao_qiang (#pixiv1754781) for drawing the picture we use in example.\n\nSo, here is the figure plotted by the program. You can see the polygons created for the classes 1, 2 and 9.\nThe 9-th class act as a eraser of any other layer.\n\nMultiple polygons can be draw for a single label. You can use multiple labels on a single images, and also put points outside the picture.\n\n![](README_files/Figure_1.png)\n\nIn the *mask_folder*, the following files are created.\n\n![](README_files/Figure_2.png)\n\nThe first one is the concatenation of each class. The two other the segmentation of the class 1 and 2. The class 9 has no file of his own but the mask of the first class is altered by the erasing of a part.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Rignak/PyplotAnnotation", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyplotAnnotation", "package_url": "https://pypi.org/project/PyplotAnnotation/", "platform": "", "project_url": "https://pypi.org/project/PyplotAnnotation/", "project_urls": {"Homepage": "https://github.com/Rignak/PyplotAnnotation"}, "release_url": "https://pypi.org/project/PyplotAnnotation/1.1.0/", "requires_dist": ["matplotlib (>=3.1.1)", "fire (>=0.2.1)", "PIL (>=1.1.7)"], "requires_python": ">=3.6", "summary": "Quickly draw segmentation dataset", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyplotAnnotation</h1>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#how-to-use\" rel=\"nofollow\">How to Use</a>\n<ul>\n<li><a href=\"#the-command-line\" rel=\"nofollow\">The command line</a></li>\n<li><a href=\"#legal-actions\" rel=\"nofollow\">Legal actions</a></li>\n<li><a href=\"#format-of-the-input\" rel=\"nofollow\">Format of the output</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ul>\n<h2>Introduction</h2>\n<p>The goal of the library is to create a software for quick annotation. More specifically, it is used for the generation of a segmentation dataset.\nThe application show images in a pyplot window and ask the user to choose a class, choose point to draw a polygon, and validate.</p>\n<p>The application support up to nine classes, multiple polygons per label, and multiple labels per class.</p>\n<h2>Requirements</h2>\n<ul>\n<li>matplotlib</li>\n<li>pillow</li>\n<li>fire</li>\n</ul>\n<h2>How to use</h2>\n<h3>The command line</h3>\n<p>To run the application, write the following command to the cmd:</p>\n<pre>python PyplotAnnotation <span class=\"o\">{</span>arg1<span class=\"o\">}</span> <span class=\"o\">{</span>arg2<span class=\"o\">}</span> <span class=\"o\">{</span>arg3<span class=\"o\">}</span>\n</pre>\n<ul>\n<li><em>{arg1}</em> describes the path of the picture to segment, as recognized by glob. The default value is \"<em>*.png</em>\", which correspond to the .png in the current working directory.</li>\n<li><em>{arg2}</em> is the name of the folder in which the input of the dataset will be written.</li>\n<li><em>{arg3}</em> is the name of the folder in which the output of the dataset (the masks) will be written.</li>\n</ul>\n<p>Example:</p>\n<pre>python -m PyplotAnnotation.PyplotAnnotation *.png inputs masks\n</pre>\n<h3>Legal actions</h3>\n<p>The application follows a quite simple automaton:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/154ec8b5dae8d69d3b5c69ab58d6b764628e7c9a/524541444d455f66696c65732f4469616772616d2e706e67\"></p>\n<h4><em>New image</em> state (initial state)</h4>\n<h5>Actions performed on entering the state</h5>\n<ul>\n<li>A new picture is plotted.</li>\n<li>The current polygons are initialized to a void list.</li>\n</ul>\n<p>If coming from <em>Polygon validated</em>:</p>\n<ul>\n<li>Save the picture inside the <em>input_folder</em>.</li>\n<li>Save the masks (one per used class) to the <em>mask_folder</em>.</li>\n</ul>\n<p>If these files already exist, they will be overwritten.</p>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1, 2, 3, 4, 5, 6, 7, 8, 9</td>\n<td><em>Class selected</em></td>\n</tr></tbody></table>\n<h4><em>Class selected</em> state</h4>\n<h5>Actions performed on entering the state</h5>\n<ul>\n<li>The class of the current polygon is set to the input used to access this state.</li>\n</ul>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1, 2, 3, 4, 5, 6, 7, 8, 9</td>\n<td><em>Class selected</em></td>\n</tr>\n<tr>\n<td>Central click</td>\n<td><em>First point put</em></td>\n</tr></tbody></table>\n<h4><em>First point put</em> state</h4>\n<h5>Actions performed on entering the state</h5>\n<p>If coming from <em>Class selected</em>:</p>\n<ul>\n<li>A point is added to the polygon.</li>\n<li>The point is plotted on the picture.</li>\n</ul>\n<p>If coming from <em>Second point put</em>:</p>\n<ul>\n<li>The second point is removed.</li>\n<li>The line between the second and first point is removed.</li>\n</ul>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Central click</td>\n<td><em>Second point put</em></td>\n</tr>\n<tr>\n<td>Right click</td>\n<td><em>Class selected</em></td>\n</tr></tbody></table>\n<h4><em>Second point put</em> state</h4>\n<h5>Actions performed on entering the state</h5>\n<p>If coming from <em>First point put</em>:</p>\n<ul>\n<li>A point is added to the polygon.</li>\n<li>The point is plotted on the picture.</li>\n<li>A line between the first and second point is plotted.</li>\n</ul>\n<p>If coming from <em>n-th point put</em>:</p>\n<ul>\n<li>The third point is removed.</li>\n<li>The line between the third and second point is removed.</li>\n</ul>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Central click</td>\n<td><em>n-th point put</em></td>\n</tr>\n<tr>\n<td>Right click</td>\n<td><em>First point put</em></td>\n</tr></tbody></table>\n<h4><em>n-th point put</em> state</h4>\n<h5>Actions performed on entering the state</h5>\n<p>If coming with a central click:</p>\n<ul>\n<li>A point is added to the polygon.</li>\n<li>The point is plotted on the picture.</li>\n<li>A line between the two last point is plotted.</li>\n<li>If coming from <em>Second point put</em>, set <em>n</em> at 3</li>\n<li>If coming from <em>n-th point put</em>, set <em>n</em> at <em>n</em>+1</li>\n</ul>\n<p>If coming with a right click:</p>\n<ul>\n<li>The last point is removed.</li>\n<li>The line between the last and second last point is removed.</li>\n<li>Set <em>n</em> at <em>n</em>-1.</li>\n</ul>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td><em>Polygon validated</em></td>\n</tr>\n<tr>\n<td>Central click</td>\n<td><em>n-th point put</em></td>\n</tr>\n<tr>\n<td>Right click</td>\n<td><em>n-th point put</em></td>\n</tr>\n<tr>\n<td>Right click</td>\n<td><em>Second point put</em></td>\n</tr></tbody></table>\n<p>When using \"Right click\" : if <em>n</em> is three, go to \"<em>Second point put</em>\"-state, else go to \"<em>n-th point put</em>\".</p>\n<h4><em>Polygon validated</em> state</h4>\n<h5>Actions performed on entering the state</h5>\n<p>The current polygon is saved (now, it cannot be modified). A new polygon is initialized.</p>\n<h5>Leaving the state</h5>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>State</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enter</td>\n<td><em>New image</em></td>\n</tr>\n<tr>\n<td>1, 2, 3, 4, 5, 6, 7, 8, 9</td>\n<td><em>Class selected</em></td>\n</tr></tbody></table>\n<h3>Format of the output</h3>\n<p>After the acceptation of each picture, multiple files are created.</p>\n<ul>\n<li>First, a new image is generated in the <em>input_folder</em>, with the same name as the picture except that the extension is forced to be <em>.png</em>.</li>\n<li>Second, the mask files are generated. Localised in the <em>mask_folder</em>, one of them as the same name as the same name as the input : this is the concatenation of each mask. Other files are created, one by class used. For each mask, the background is set at 0 while the mask is set at 255. Of course, the masks only have one canal each.</li>\n</ul>\n<h3>Examples</h3>\n<p>Credit for xiao_qiang (#pixiv1754781) for drawing the picture we use in example.</p>\n<p>So, here is the figure plotted by the program. You can see the polygons created for the classes 1, 2 and 9.\nThe 9-th class act as a eraser of any other layer.</p>\n<p>Multiple polygons can be draw for a single label. You can use multiple labels on a single images, and also put points outside the picture.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f445eff66c991838edee6518b24b37d8a52bbf9/524541444d455f66696c65732f4669677572655f312e706e67\"></p>\n<p>In the <em>mask_folder</em>, the following files are created.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1ecbb26a8b2855bbac660df4282ba2fc1cec09b/524541444d455f66696c65732f4669677572655f322e706e67\"></p>\n<p>The first one is the concatenation of each class. The two other the segmentation of the class 1 and 2. The class 9 has no file of his own but the mask of the first class is altered by the erasing of a part.</p>\n\n          </div>"}, "last_serial": 6773102, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "7a458a16c43ac761244e4ecc482263f5", "sha256": "8f14aafa4546814efa3fe4961060762c46ce0750e65e3e9167916cb2b11ce29c"}, "downloads": -1, "filename": "PyplotAnnotation-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7a458a16c43ac761244e4ecc482263f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18280, "upload_time": "2020-03-08T18:47:56", "upload_time_iso_8601": "2020-03-08T18:47:56.250686Z", "url": "https://files.pythonhosted.org/packages/b1/43/a8c2d0efc5bda0cdf2ec2b0672fcd568de90ac6b090b8ec7879a09eb4aad/PyplotAnnotation-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8430edbdd900339d5f09d9d91023fb3", "sha256": "bb0c6dc9416200eb9779b3013c24bd4cfad2599e3675a850f41d7bfb81cc21db"}, "downloads": -1, "filename": "PyplotAnnotation-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a8430edbdd900339d5f09d9d91023fb3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5747, "upload_time": "2020-03-08T18:47:58", "upload_time_iso_8601": "2020-03-08T18:47:58.200405Z", "url": "https://files.pythonhosted.org/packages/32/8a/fb23625507d85d6f168bc0ffd6689654ef9644ae97e64d68eb2ea9320cba/PyplotAnnotation-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a458a16c43ac761244e4ecc482263f5", "sha256": "8f14aafa4546814efa3fe4961060762c46ce0750e65e3e9167916cb2b11ce29c"}, "downloads": -1, "filename": "PyplotAnnotation-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7a458a16c43ac761244e4ecc482263f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18280, "upload_time": "2020-03-08T18:47:56", "upload_time_iso_8601": "2020-03-08T18:47:56.250686Z", "url": "https://files.pythonhosted.org/packages/b1/43/a8c2d0efc5bda0cdf2ec2b0672fcd568de90ac6b090b8ec7879a09eb4aad/PyplotAnnotation-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8430edbdd900339d5f09d9d91023fb3", "sha256": "bb0c6dc9416200eb9779b3013c24bd4cfad2599e3675a850f41d7bfb81cc21db"}, "downloads": -1, "filename": "PyplotAnnotation-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a8430edbdd900339d5f09d9d91023fb3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5747, "upload_time": "2020-03-08T18:47:58", "upload_time_iso_8601": "2020-03-08T18:47:58.200405Z", "url": "https://files.pythonhosted.org/packages/32/8a/fb23625507d85d6f168bc0ffd6689654ef9644ae97e64d68eb2ea9320cba/PyplotAnnotation-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:23 2020"}