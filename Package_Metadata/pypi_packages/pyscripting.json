{"info": {"author": "Mantas Zimnickas", "author_email": "sirexas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "``pyscripting`` is python module that provides various utilities to make shell\nscripting with python easier.\n\nGetting started\n===============\n\n1. Get ``scripting.py``::\n\n    pip install pyscripting\n\n2. Create your python shell script ``myscript.py``::\n\n    #!/usr/bin/env python\n\n    from scripting import sh\n\n    sh.ls('-l')\n\n3. Use your script::\n\n    chmod +x myscript.py\n    ./myscript.py\n\nCalling external commands\n=========================\n\nThere are three ways to call external commands.\n\nIf possible, python replacement of an external command will be used.\nReplacements will not be used only in direct calling.\n\nFor all replaced commands see `Replaced commands`_.\n\n\nDirect calling\n--------------\n\nReturns exit code.\n\n::\n\n    sh('ls', '-l')\n\nIndirect calling\n----------------\n\nReturns exit code.\n\n::\n\n    sh.ls('-l')\n\nCall and return output\n----------------------\n\nReturns stripped stdout (stderr will not be included).\n\nUsing this method, output of command will not be printed to stdout. Before\nreturning output, leading white spaces will be stripped.\n\nDon't use this methos for large outputs.\n\n::\n\n    output = sh.get('ls', '-l')\n    print('Output was: %s' % output)\n\nArgument handling\n=================\n\nYou can access arguments passed to script using ``argv`` property::\n\n    sh.argv[0] - called script name\n    sh.argv[1] - first argument\n\n.. _Replaced commands:\n\nReplaced commands\n=================\n\nTo avoid overhead and for simplicity reasons, some external commands was\nreplaced by python's internal functions, which works much faster, that calling\nexternal command.\n\n\n``basename``\n    Same as external ``basename``.\n\n    Returns string.\n\n``exit``\n    Same as external ``exit``.\n\n``find``\n    Similar to external ``find`` command.\n\n    Returns iterator of all found files.\n\n    Example usage::\n\n        for f in sh.find(type='f', exclude=['*.pyc']):\n            print(f)\n\n``mkdir``\n    Same as external ``mkdir``.\n\n``mkdirs``\n    Same as external ``mkdir -p``.\n\n``test``\n    Similar to external ``test``.\n\n    Returns boolean.\n\n    Example usage::\n\n        if sh.test('-d', '/tmp'):\n            print('/tmp is directory.')\n\n\nMakefile functionality\n======================\n\nExample (``myscript.py``)::\n\n    #!/usr/bin/env python\n\n    from scripting import sh, Makefile\n\n    make = Makefile(sh)\n\n\n    @make('/tmp/myfile.txt')\n    def myrule(target):\n        sh.touch(target)\n\n    @make()\n    def main(target):\n        myrule()\n\n    make.run(main)\n\nLast line ``make.run(main)`` checks ``sys.argv`` and executes specified rule or\ndefault if no particular rule is specified. ``myrule`` will be executed only,\nif target file ``/tmp/myfile.txt`` does not exists.::\n\n    ./myscript.py\n\nNow call particular rule::\n\n    ./myscript.py myrule", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/sirex/pyscripting/src", "keywords": "shell,scripting", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyscripting", "package_url": "https://pypi.org/project/pyscripting/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyscripting/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/sirex/pyscripting/src"}, "release_url": "https://pypi.org/project/pyscripting/0.1/", "requires_dist": null, "requires_python": null, "summary": "Shell scripting library for Python", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>pyscripting</tt> is python module that provides various utilities to make shell\nscripting with python easier.</p>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<ol>\n<li><p>Get <tt>scripting.py</tt>:</p>\n<pre>pip install pyscripting\n</pre>\n</li>\n<li><p>Create your python shell script <tt>myscript.py</tt>:</p>\n<pre>#!/usr/bin/env python\n\nfrom scripting import sh\n\nsh.ls('-l')\n</pre>\n</li>\n<li><p>Use your script:</p>\n<pre>chmod +x myscript.py\n./myscript.py\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"calling-external-commands\">\n<h2>Calling external commands</h2>\n<p>There are three ways to call external commands.</p>\n<p>If possible, python replacement of an external command will be used.\nReplacements will not be used only in direct calling.</p>\n<p>For all replaced commands see <a href=\"#replaced-commands\" rel=\"nofollow\">Replaced commands</a>.</p>\n<div id=\"direct-calling\">\n<h3>Direct calling</h3>\n<p>Returns exit code.</p>\n<pre>sh('ls', '-l')\n</pre>\n</div>\n<div id=\"indirect-calling\">\n<h3>Indirect calling</h3>\n<p>Returns exit code.</p>\n<pre>sh.ls('-l')\n</pre>\n</div>\n<div id=\"call-and-return-output\">\n<h3>Call and return output</h3>\n<p>Returns stripped stdout (stderr will not be included).</p>\n<p>Using this method, output of command will not be printed to stdout. Before\nreturning output, leading white spaces will be stripped.</p>\n<p>Don\u2019t use this methos for large outputs.</p>\n<pre>output = sh.get('ls', '-l')\nprint('Output was: %s' % output)\n</pre>\n</div>\n</div>\n<div id=\"argument-handling\">\n<h2>Argument handling</h2>\n<p>You can access arguments passed to script using <tt>argv</tt> property:</p>\n<pre>sh.argv[0] - called script name\nsh.argv[1] - first argument\n</pre>\n</div>\n<div id=\"id1\">\n<span id=\"replaced-commands\"></span><h2>Replaced commands</h2>\n<p>To avoid overhead and for simplicity reasons, some external commands was\nreplaced by python\u2019s internal functions, which works much faster, that calling\nexternal command.</p>\n<dl>\n<dt><tt>basename</tt></dt>\n<dd><p>Same as external <tt>basename</tt>.</p>\n<p>Returns string.</p>\n</dd>\n<dt><tt>exit</tt></dt>\n<dd>Same as external <tt>exit</tt>.</dd>\n<dt><tt>find</tt></dt>\n<dd><p>Similar to external <tt>find</tt> command.</p>\n<p>Returns iterator of all found files.</p>\n<p>Example usage:</p>\n<pre>for f in sh.find(type='f', exclude=['*.pyc']):\n    print(f)\n</pre>\n</dd>\n<dt><tt>mkdir</tt></dt>\n<dd>Same as external <tt>mkdir</tt>.</dd>\n<dt><tt>mkdirs</tt></dt>\n<dd>Same as external <tt>mkdir <span class=\"pre\">-p</span></tt>.</dd>\n<dt><tt>test</tt></dt>\n<dd><p>Similar to external <tt>test</tt>.</p>\n<p>Returns boolean.</p>\n<p>Example usage:</p>\n<pre>if sh.test('-d', '/tmp'):\n    print('/tmp is directory.')\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"makefile-functionality\">\n<h2>Makefile functionality</h2>\n<p>Example (<tt>myscript.py</tt>):</p>\n<pre>#!/usr/bin/env python\n\nfrom scripting import sh, Makefile\n\nmake = Makefile(sh)\n\n\n@make('/tmp/myfile.txt')\ndef myrule(target):\n    sh.touch(target)\n\n@make()\ndef main(target):\n    myrule()\n\nmake.run(main)\n</pre>\n<p>Last line <tt>make.run(main)</tt> checks <tt>sys.argv</tt> and executes specified rule or\ndefault if no particular rule is specified. <tt>myrule</tt> will be executed only,\nif target file <tt>/tmp/myfile.txt</tt> does not exists.:</p>\n<pre>./myscript.py\n</pre>\n<p>Now call particular rule:</p>\n<pre>./myscript.py myrule\n</pre>\n</div>\n\n          </div>"}, "last_serial": 797715, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "73941cd16ad7e8152dda6b92623878a5", "sha256": "a7a165e17e308fc0a0e9be4f17b3600f4fdc4c58fd70ae05d7fbf94f91aa8365"}, "downloads": -1, "filename": "pyscripting-0.1.linux-x86_64.exe", "has_sig": false, "md5_digest": "73941cd16ad7e8152dda6b92623878a5", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 68073, "upload_time": "2011-04-20T21:14:46", "upload_time_iso_8601": "2011-04-20T21:14:46.509351Z", "url": "https://files.pythonhosted.org/packages/5c/82/1d7cee0cc614a9fd7c5c8ec3eba64720dbf4c8565618c4022f07a061e480/pyscripting-0.1.linux-x86_64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "423de0a56d95ee7db33b32df0ac9621f", "sha256": "481d88a58f370b9336891d1bdfa7774c3b670eba98d7ef9f408f16c6a0fbc20c"}, "downloads": -1, "filename": "pyscripting-0.1.tar.gz", "has_sig": false, "md5_digest": "423de0a56d95ee7db33b32df0ac9621f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3599, "upload_time": "2011-04-20T21:14:45", "upload_time_iso_8601": "2011-04-20T21:14:45.855875Z", "url": "https://files.pythonhosted.org/packages/fc/3a/df746b5d9ffe287dd21872d3fab845c0056dad33ffc82d391180e07a4b36/pyscripting-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73941cd16ad7e8152dda6b92623878a5", "sha256": "a7a165e17e308fc0a0e9be4f17b3600f4fdc4c58fd70ae05d7fbf94f91aa8365"}, "downloads": -1, "filename": "pyscripting-0.1.linux-x86_64.exe", "has_sig": false, "md5_digest": "73941cd16ad7e8152dda6b92623878a5", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 68073, "upload_time": "2011-04-20T21:14:46", "upload_time_iso_8601": "2011-04-20T21:14:46.509351Z", "url": "https://files.pythonhosted.org/packages/5c/82/1d7cee0cc614a9fd7c5c8ec3eba64720dbf4c8565618c4022f07a061e480/pyscripting-0.1.linux-x86_64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "423de0a56d95ee7db33b32df0ac9621f", "sha256": "481d88a58f370b9336891d1bdfa7774c3b670eba98d7ef9f408f16c6a0fbc20c"}, "downloads": -1, "filename": "pyscripting-0.1.tar.gz", "has_sig": false, "md5_digest": "423de0a56d95ee7db33b32df0ac9621f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3599, "upload_time": "2011-04-20T21:14:45", "upload_time_iso_8601": "2011-04-20T21:14:45.855875Z", "url": "https://files.pythonhosted.org/packages/fc/3a/df746b5d9ffe287dd21872d3fab845c0056dad33ffc82d391180e07a4b36/pyscripting-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:14 2020"}