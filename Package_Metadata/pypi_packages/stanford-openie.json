{"info": {"author": "Philippe Remy", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Python wrapper for Stanford OpenIE\n\nOpen information extraction (open IE) refers to the extraction of structured relation triples from plain text, such that the schema for these relations does not need to be specified in advance. For example, Barack Obama was born in Hawaii would create a triple `(Barack Obama; was born in; Hawaii)`, corresponding to the open domain relation \"was born in\". CoreNLP is a Java implementation of an open IE system as described in the paper:\n\nMore information can be found here : http://nlp.stanford.edu/software/openie.html\n\n## V2\n\n```python\nfrom openie import StanfordOpenIE\n\nwith StanfordOpenIE() as client:\n    text = 'Barack Obama was born in Hawaii. Richard Manning wrote this sentence.'\n    print('Text: %s.' % text)\n    for triple in client.annotate(text):\n        print('|-', triple)\n\n    graph_image = 'graph.png'\n    client.generate_graphviz_graph(text, graph_image)\n    print('Graph generated: %s.' % graph_image)\n\n    with open('corpus/pg6130.txt', 'r', encoding='utf8') as r:\n        corpus = r.read().replace('\\n', ' ').replace('\\r', '')\n\n    triples_corpus = client.annotate(corpus[0:50000])\n    print('Corpus: %s [...].' % corpus[0:80])\n    print('Found %s triples in the corpus.' % len(triples_corpus))\n    for triple in triples_corpus[:3]:\n        print('|-', triple)\n ```\n\n## V1 (deprecated)\n\n\nThe unofficial cross-platform Python wrapper for the <b>state-of-art</b> information extraction library from Stanford University.\n\n```\nNOTE: Windows is not currently supported! Works on UNIX systems like Linux and Mac OS.\n```\n\n### Usage\n\nFirst of all, make sure Java 1.8 is installed. Open a terminal and run this command to check:\n\n```bash\njava -version\n```\n\nIf this is not the case and if your OS is Ubuntu, you can install it this way:\n\n```bash\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n```\n\nThe code can be invoked either programmatically or through the command line. The program can be invoked with the following command. It will display ```[['Barack Obama', ' was', ' born'], ['Barack Obama', ' was born in', ' Hawaii']]```\n```bash\ngit clone https://github.com/philipperemy/Stanford-OpenIE-Python.git\ncd Stanford-OpenIE-Python\necho \"Barack Obama was born in Hawaii.\" > samples.txt\npython main.py -f samples.txt\n```\n\nThe output should be something like:\n\n```\nBarack Obama | was | born\nBarack Obama | was born in | Hawaii\n```\n\n#### Troubleshooting\n\nIt's possible that you get an error like that one when using the lib for the first time:\n\n```\nAssertionError: ERROR: Call to stanford_ie exited with a non-zero code status\n```\n\nThe error is related to the interaction with Java. To troubleshoot it, I would advise to run the python script with the `--verbose` argument. Search for line `executing command = <whatever command>` in the logs and copy paste this `<whatever command>` in your terminal to see the error.\n\n#### Large Corpus\n\nSometimes you just want to run the information extraction tool on something larger than just a couple of sentences. I provide a bash script for that. This example runs the tool on the book: [The Iliad by Homer](http://www.gutenberg.org/ebooks/6130?msg=welcome_stranger), composed of 1.2M characters and 26K lines.\n\n```bash\n./process_large_corpus.sh corpus/pg6130.txt corpus/pg6130.txt.out\n```\n\n```\nwc -l corpus/pg6130.txt.out\n> 23888\n```\n\n### Generate Graph\n\n```bash\necho \"Barack Obama was born in Hawaii.\" > samples.txt\npython main.py -f samples.txt -g\n```\nWill generate a [GraphViz DOT](http://www.graphviz.org/) graph and its related PNG file in `/tmp/openie/`\n\n<div align=\"center\">\n  <img src=\"img/out.png\"><br><br>\n</div>\n\nNote: Make sure GraphViz is installed beforehand. Try to run the `dot` command to see if this is the case. If not, run `sudo apt-get install graphviz` if you're running on Ubuntu. \n\n## Support\n\nYou can either open an issue or send me an e-mail to premy@cogent.co.jp. Any contributions are welcomed!\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "stanford-openie", "package_url": "https://pypi.org/project/stanford-openie/", "platform": "", "project_url": "https://pypi.org/project/stanford-openie/", "project_urls": null, "release_url": "https://pypi.org/project/stanford-openie/1.0.1/", "requires_dist": ["wget", "stanfordnlp"], "requires_python": "", "summary": "Minimalist wrapper around Stanford OpenIE", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python wrapper for Stanford OpenIE</h1>\n<p>Open information extraction (open IE) refers to the extraction of structured relation triples from plain text, such that the schema for these relations does not need to be specified in advance. For example, Barack Obama was born in Hawaii would create a triple <code>(Barack Obama; was born in; Hawaii)</code>, corresponding to the open domain relation \"was born in\". CoreNLP is a Java implementation of an open IE system as described in the paper:</p>\n<p>More information can be found here : <a href=\"http://nlp.stanford.edu/software/openie.html\" rel=\"nofollow\">http://nlp.stanford.edu/software/openie.html</a></p>\n<h2>V2</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">openie</span> <span class=\"kn\">import</span> <span class=\"n\">StanfordOpenIE</span>\n\n<span class=\"k\">with</span> <span class=\"n\">StanfordOpenIE</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Barack Obama was born in Hawaii. Richard Manning wrote this sentence.'</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Text: </span><span class=\"si\">%s</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">triple</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'|-'</span><span class=\"p\">,</span> <span class=\"n\">triple</span><span class=\"p\">)</span>\n\n    <span class=\"n\">graph_image</span> <span class=\"o\">=</span> <span class=\"s1\">'graph.png'</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">generate_graphviz_graph</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">graph_image</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Graph generated: </span><span class=\"si\">%s</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">graph_image</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'corpus/pg6130.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\r</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n\n    <span class=\"n\">triples_corpus</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">50000</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Corpus: </span><span class=\"si\">%s</span><span class=\"s1\"> [...].'</span> <span class=\"o\">%</span> <span class=\"n\">corpus</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"p\">])</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Found </span><span class=\"si\">%s</span><span class=\"s1\"> triples in the corpus.'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">triples_corpus</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">triple</span> <span class=\"ow\">in</span> <span class=\"n\">triples_corpus</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'|-'</span><span class=\"p\">,</span> <span class=\"n\">triple</span><span class=\"p\">)</span>\n</pre>\n<h2>V1 (deprecated)</h2>\n<p>The unofficial cross-platform Python wrapper for the <b>state-of-art</b> information extraction library from Stanford University.</p>\n<pre><code>NOTE: Windows is not currently supported! Works on UNIX systems like Linux and Mac OS.\n</code></pre>\n<h3>Usage</h3>\n<p>First of all, make sure Java 1.8 is installed. Open a terminal and run this command to check:</p>\n<pre>java -version\n</pre>\n<p>If this is not the case and if your OS is Ubuntu, you can install it this way:</p>\n<pre>sudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n</pre>\n<p>The code can be invoked either programmatically or through the command line. The program can be invoked with the following command. It will display <code>[['Barack Obama', ' was', ' born'], ['Barack Obama', ' was born in', ' Hawaii']]</code></p>\n<pre>git clone https://github.com/philipperemy/Stanford-OpenIE-Python.git\n<span class=\"nb\">cd</span> Stanford-OpenIE-Python\n<span class=\"nb\">echo</span> <span class=\"s2\">\"Barack Obama was born in Hawaii.\"</span> &gt; samples.txt\npython main.py -f samples.txt\n</pre>\n<p>The output should be something like:</p>\n<pre><code>Barack Obama | was | born\nBarack Obama | was born in | Hawaii\n</code></pre>\n<h4>Troubleshooting</h4>\n<p>It's possible that you get an error like that one when using the lib for the first time:</p>\n<pre><code>AssertionError: ERROR: Call to stanford_ie exited with a non-zero code status\n</code></pre>\n<p>The error is related to the interaction with Java. To troubleshoot it, I would advise to run the python script with the <code>--verbose</code> argument. Search for line <code>executing command = &lt;whatever command&gt;</code> in the logs and copy paste this <code>&lt;whatever command&gt;</code> in your terminal to see the error.</p>\n<h4>Large Corpus</h4>\n<p>Sometimes you just want to run the information extraction tool on something larger than just a couple of sentences. I provide a bash script for that. This example runs the tool on the book: <a href=\"http://www.gutenberg.org/ebooks/6130?msg=welcome_stranger\" rel=\"nofollow\">The Iliad by Homer</a>, composed of 1.2M characters and 26K lines.</p>\n<pre>./process_large_corpus.sh corpus/pg6130.txt corpus/pg6130.txt.out\n</pre>\n<pre><code>wc -l corpus/pg6130.txt.out\n&gt; 23888\n</code></pre>\n<h3>Generate Graph</h3>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"Barack Obama was born in Hawaii.\"</span> &gt; samples.txt\npython main.py -f samples.txt -g\n</pre>\n<p>Will generate a <a href=\"http://www.graphviz.org/\" rel=\"nofollow\">GraphViz DOT</a> graph and its related PNG file in <code>/tmp/openie/</code></p>\n<div>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4af4ff5e8afeac08178e98a2d6c326ea88e1d129/696d672f6f75742e706e67\"><br><br>\n</div>\n<p>Note: Make sure GraphViz is installed beforehand. Try to run the <code>dot</code> command to see if this is the case. If not, run <code>sudo apt-get install graphviz</code> if you're running on Ubuntu.</p>\n<h2>Support</h2>\n<p>You can either open an issue or send me an e-mail to <a href=\"mailto:premy@cogent.co.jp\">premy@cogent.co.jp</a>. Any contributions are welcomed!</p>\n\n          </div>"}, "last_serial": 6211428, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "5214cbb549bfeefceef68c69481176a8", "sha256": "28c40ebe75761e60cac5bfcb5385cd577c95eb72696ed6c0983cdc3984053756"}, "downloads": -1, "filename": "stanford_openie-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5214cbb549bfeefceef68c69481176a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5363, "upload_time": "2019-11-28T00:33:31", "upload_time_iso_8601": "2019-11-28T00:33:31.303674Z", "url": "https://files.pythonhosted.org/packages/b8/e3/67061dbba7fd2d41e91e7d110f58ca09b456183dbaba514a052dc16d6eac/stanford_openie-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcb7e5d8f6f5c05bee0d3e53eacc0811", "sha256": "aa885f5ee4341583a53255106f77100d1747aa6f42d3daebf7c6baab41b79bb6"}, "downloads": -1, "filename": "stanford-openie-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dcb7e5d8f6f5c05bee0d3e53eacc0811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4350, "upload_time": "2019-11-28T00:33:35", "upload_time_iso_8601": "2019-11-28T00:33:35.861151Z", "url": "https://files.pythonhosted.org/packages/38/f6/0daa67f7546f824497010a1a2e8eb2ad370952e8f4a38cdb4ee25769afc8/stanford-openie-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5214cbb549bfeefceef68c69481176a8", "sha256": "28c40ebe75761e60cac5bfcb5385cd577c95eb72696ed6c0983cdc3984053756"}, "downloads": -1, "filename": "stanford_openie-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5214cbb549bfeefceef68c69481176a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5363, "upload_time": "2019-11-28T00:33:31", "upload_time_iso_8601": "2019-11-28T00:33:31.303674Z", "url": "https://files.pythonhosted.org/packages/b8/e3/67061dbba7fd2d41e91e7d110f58ca09b456183dbaba514a052dc16d6eac/stanford_openie-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcb7e5d8f6f5c05bee0d3e53eacc0811", "sha256": "aa885f5ee4341583a53255106f77100d1747aa6f42d3daebf7c6baab41b79bb6"}, "downloads": -1, "filename": "stanford-openie-1.0.1.tar.gz", "has_sig": false, "md5_digest": "dcb7e5d8f6f5c05bee0d3e53eacc0811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4350, "upload_time": "2019-11-28T00:33:35", "upload_time_iso_8601": "2019-11-28T00:33:35.861151Z", "url": "https://files.pythonhosted.org/packages/38/f6/0daa67f7546f824497010a1a2e8eb2ad370952e8f4a38cdb4ee25769afc8/stanford-openie-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:42 2020"}