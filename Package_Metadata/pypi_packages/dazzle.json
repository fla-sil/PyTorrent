{"info": {"author": "Nathan Zilora", "author_email": "zwork101@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# Dazzle \u2728\n\n*Make your output sparkle, without long repetitive code*\n\n\nWho doesn't love color, I know I do. However I don't like any color libs, they can take up so much column space, and\ncan end up being repetitive, leading to functions such as\n```py\ndef announcement(title: str, desc: str):\n    print(colorlib.BLUE + \"Announcement: \" + title + colorlib.WHITE + \"\\n\\n\" + desc)\n```\nI actually have nothing against these functions, but they got me thinking. If I'm always going to end up making\nfunctions, let's cut to the chase.\n```py\nfrom dazzle import Fore, INP\n\nannounce = Fore.BLUE + \"Announcement: \" + INP + Fore.WHITE + \"\\n\\n\" + INP\nannounce(\"Hello World\", \"Fizz Buzz\")\n```\nEach of these methods would result in the same thing. Another issue with color libs, is that they can be a pain to\nimplement later down the road. Dazzle has you covered here too.\n```py\nwith Back.BLUE + INP + \" \" + Fore.RED + \" \" + INP:\n    print(\"John:\", \"Howdy Mary\")\n    print(\"Mary:\", \"Howdy John\")\n```\nDazzle will override the print function, so that it will add the colors provided in the with statement. Keep in mind\nthat any excess input will be ignored.\n\n## Pitfalls\n\nWhen you call a color chain, you pass `write=False` in so that it doesn't print the result. If write is True, it won't\noutput anything. If False it will output that string.\n\n**Don't**\n * Start it with a normal string, use `t(<string>)` if you need to do that.\n * Use with statement with inconsistent print functions.\n * Wrap it with `()`. It should still work, but their's no need.\n * Use *repr* when requiring an input.\n * Be stupid.\n\n These were the docs, this is a very small and simple library.\n [here you'll find a list of colors](https://github.com/tartley/colorama/blob/master/colorama/ansi.py#L49) that are\n available. Dazzle covers Fore, Back, Style and Cursor, all as you'd expect. Thanks for using dazzle! \u2728", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Zwork101/Dazzle", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dazzle", "package_url": "https://pypi.org/project/dazzle/", "platform": "", "project_url": "https://pypi.org/project/dazzle/", "project_urls": {"Homepage": "https://github.com/Zwork101/Dazzle"}, "release_url": "https://pypi.org/project/dazzle/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Make your output sparkle, without long repetitive code", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Dazzle \u2728<br><br>*Make your output sparkle, without long repetitive code*<br><br><br>Who doesn't love color, I know I do. However I don't like any color libs, they can take up so much column space, and<br>can end up being repetitive, leading to functions such as<br>```py<br>def announcement(title: str, desc: str):<br>    print(colorlib.BLUE + \"Announcement: \" + title + colorlib.WHITE + \"\\n\\n\" + desc)<br>```<br>I actually have nothing against these functions, but they got me thinking. If I'm always going to end up making<br>functions, let's cut to the chase.<br>```py<br>from dazzle import Fore, INP<br><br>announce = Fore.BLUE + \"Announcement: \" + INP + Fore.WHITE + \"\\n\\n\" + INP<br>announce(\"Hello World\", \"Fizz Buzz\")<br>```<br>Each of these methods would result in the same thing. Another issue with color libs, is that they can be a pain to<br>implement later down the road. Dazzle has you covered here too.<br>```py<br>with Back.BLUE + INP + \" \" + Fore.RED + \" \" + INP:<br>    print(\"John:\", \"Howdy Mary\")<br>    print(\"Mary:\", \"Howdy John\")<br>```<br>Dazzle will override the print function, so that it will add the colors provided in the with statement. Keep in mind<br>that any excess input will be ignored.<br><br>## Pitfalls<br><br>When you call a color chain, you pass `write=False` in so that it doesn't print the result. If write is True, it won't<br>output anything. If False it will output that string.<br><br>**Don't**<br> * Start it with a normal string, use `t(&lt;string&gt;)` if you need to do that.<br> * Use with statement with inconsistent print functions.<br> * Wrap it with `()`. It should still work, but their's no need.<br> * Use *repr* when requiring an input.<br> * Be stupid.<br><br> These were the docs, this is a very small and simple library.<br> [here you'll find a list of colors](https://github.com/tartley/colorama/blob/master/colorama/ansi.py#L49) that are<br> available. Dazzle covers Fore, Back, Style and Cursor, all as you'd expect. Thanks for using dazzle! \u2728\n          </div>"}, "last_serial": 5007008, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cd68454fe4068e2cb98c88a89c7ed89e", "sha256": "52f053ab2da00897f0e6f7f215ec126c926f34161ab8a18663a9247b09ea163f"}, "downloads": -1, "filename": "dazzle-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cd68454fe4068e2cb98c88a89c7ed89e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4534, "upload_time": "2019-03-30T02:51:12", "upload_time_iso_8601": "2019-03-30T02:51:12.143573Z", "url": "https://files.pythonhosted.org/packages/96/7b/186189ceb3ce05400a8e20d7ea04e3549bb120c548d66ba40641d186fe07/dazzle-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4512660016df3a038217c33b96be5f1e", "sha256": "ac4340fdda3725deb305d2304126018e84223b5e82708a288a1d8c7a4c547f41"}, "downloads": -1, "filename": "dazzle-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4512660016df3a038217c33b96be5f1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4576, "upload_time": "2019-03-30T12:19:02", "upload_time_iso_8601": "2019-03-30T12:19:02.776802Z", "url": "https://files.pythonhosted.org/packages/12/1f/b76bd73ab6c98297c79c38669cdb28814d1f0208a888c4d3b602020f9038/dazzle-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4512660016df3a038217c33b96be5f1e", "sha256": "ac4340fdda3725deb305d2304126018e84223b5e82708a288a1d8c7a4c547f41"}, "downloads": -1, "filename": "dazzle-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4512660016df3a038217c33b96be5f1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4576, "upload_time": "2019-03-30T12:19:02", "upload_time_iso_8601": "2019-03-30T12:19:02.776802Z", "url": "https://files.pythonhosted.org/packages/12/1f/b76bd73ab6c98297c79c38669cdb28814d1f0208a888c4d3b602020f9038/dazzle-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:59 2020"}