{"info": {"author": "Mark Bailey and Tom Pike", "author_email": "mark.mbailey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Artificial Life"], "description": "# Mesa SIR\n\nMesa SIR is an extension for Python's Agent Based Modeling Library Mesa. Mesa SIR provides the basic building blocks for an Agent Based Susceptible-Infected-Recovered (SIR) Epidemic model. The hope is others will improve upon it to make it a robust ABM extension to aid in understanding and decision making for both COVID-19 and future pandemics.\n\nA full model version is available [COVID MESA ABM](https://github.com/metalcorebear/COVID-Agent-Based-Model)\n\n***Please contribute to help make this extension better. Some ways to contribute are:*** \n* Add the ability to bring in GIS extensions with [Mesa Geo](https://github.com/Corvince/mesa-geo)\n* Make more complex populations\n* Make more complex social dynamics\n* Create Mesa MultiGrid option\n* Add BatchRunner option\n\n\n\n## Requirements\n\nMesa SIR requires\n\n    Mesa>=0.8.6\n    numpy>=1.16.5\n\tnetworkx >=2.3\n\tmatplotlib>=3.1.1\n\n\n## Installation \n\n    pip install mesa-SIR\n\n    pip install git+https://github.com/metalcorebear/Mesa-SIR.git\n\n\nCurrently, Mesa SIR has two modules. \n\n## SIR Module\n\nThe main module is the SIR.py module. The SIR modules has two main parts. \n\n### Build Network method \n\nThe build network class has two parameters:\n\n\tinteractions = number of agents each agent will interact with each time step; integer\n\tpopulation = number of agents; integer \n\nUsing Mesa's NetworkGrid class this module builds a network of agents and their interactions and can be instantiated as follows. \n\n\tfrom mesa_SIR import SIR\n\n\t# returns a networkx graph to place in your Mesa NetworkGrid instance\n\tG = SIR.build_network(interactions, population)\n    self.grid = NetworkGrid(G)\n\n### Infection Class\n\nThe infection class has two main part interactions and infection.\n\nThe infection class has the following key word arguments (kwargs):\n\n- ptrans = 0.25 #probability of transmission; float between 0 and 1 \n- reinfection_rate = 0.00 #probability of reinfection; float between 0 and 1\n- I0 =0.10 # initial infection rate; float between 0 and 1\n- severe =0.18 # probability of severity; float between 0 and 1\n- progression_period = 3 #number of days for disease to progress and show symptoms-- mean of a Gaussian distribution\n- progression_sd = 2 #standard deviation of disease progression -- sd of a Gaussian distribution \n- death_rate = 0.0193 #probability of disease being fatal\n- recovery_days = 21 #number of days for disease to complete -- mean of Gaussian distribution\n- recovery_sd = 7 #standard deviation of disease to finish -- sd of Gaussian distribution\n\n\nThe infection class can be instantiated as follows in the model initiation: \n\n\tself.SIR_instance = SIR.Infection(self, ptrans = 0.40,\n                                          reinfection_rate = 0.10,\n                                          I0= 0.02,\n                                          severe = 0.90,\n                                          progression_period = 5,\n                                          progression_sd = 2,\n                                          death_rate = 0.30,\n                                          recovery_days = 38,\n                                          recovery_sd = 6\n\nDue to the requirements of the infection model an agent needs several attributes. An example agent class instantiation with the required attributes is as follows. This initiation uses the Infection class' initial_infection method.\n\n\tclass human(Agent):\n\n    def __init__(self, unique_id, model):\n        super().__init__(unique_id, model)\n        self.pos = unique_id\n        # Infection class initial infection method\n        self.was_infected = False\n        self.infected, self.susceptible, self.severe = self.model.SIR_instance.initial_infection() \n        self.recovered = False\n        self.alive = True\n        self.day = 0\n        self.induced_infections = 0\n        self.infected_others = False\n\nAgent interaction and infection are then executed in the Infection class interaction method as follows: \n\n\t    def step(self):\n\n        \tself.model.SIR_instance.interact(self)\n        \tself.day += 1\n\n\n## Calculations and Plots Module\n\nThis module conducts several computations and produces plots and data for the model. \n\nAn example of how to call the collections and plots modules and use with Mesa's datacollection module is as follows. \n\nDuring the model initiation phase: \n\n\tfrom mesa_SIR import calculations_and_plots as c_and_p\n\n\n\tself.datacollector = DataCollector(model_reporters={\"infected\": lambda m: c_p.compute(m,'infected'),\n                                                            \"recovered\": lambda m: c_p.compute(m,'recovered'),\n                                                            \"susceptible\": lambda m: c_p.compute(m,\"susceptible\"),\n                                                            \"dead\": lambda m: c_p.compute(m, \"dead\"),\n                                                            \"R0\": lambda m: c_p.compute(m, \"R0\"),\n                                                            \"severe_cases\": lambda m: c_p.compute(m,\"severe\")})\n\nTo save the dataframe and conduct the plots after the model is complete: \n\n\toutput_data = SIR_model.datacollector.get_model_vars_dataframe()\n\n\t#Save the model dataframe\n\tc_p.save_data(output_data) optional keywords: output_path, filename\n\n\t#Create and save plots\n\ttitle = 'SIR ABM Model Output'\n\tc_p.plot_SIR(output_data, title) optional keyword: output_path\n\tc_p.plot_R0(output_data, title) optional keyword: output_path\n\tc_p.plot_severe(output_data, title) optional keyword: output_path\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/metalcorebear/COVID-Agent-Based-Model", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mesa-SIR", "package_url": "https://pypi.org/project/mesa-SIR/", "platform": "", "project_url": "https://pypi.org/project/mesa-SIR/", "project_urls": {"Homepage": "https://github.com/metalcorebear/COVID-Agent-Based-Model"}, "release_url": "https://pypi.org/project/mesa-SIR/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Mesa extension for SIR models", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mesa SIR</h1>\n<p>Mesa SIR is an extension for Python's Agent Based Modeling Library Mesa. Mesa SIR provides the basic building blocks for an Agent Based Susceptible-Infected-Recovered (SIR) Epidemic model. The hope is others will improve upon it to make it a robust ABM extension to aid in understanding and decision making for both COVID-19 and future pandemics.</p>\n<p>A full model version is available <a href=\"https://github.com/metalcorebear/COVID-Agent-Based-Model\" rel=\"nofollow\">COVID MESA ABM</a></p>\n<p><em><strong>Please contribute to help make this extension better. Some ways to contribute are:</strong></em></p>\n<ul>\n<li>Add the ability to bring in GIS extensions with <a href=\"https://github.com/Corvince/mesa-geo\" rel=\"nofollow\">Mesa Geo</a></li>\n<li>Make more complex populations</li>\n<li>Make more complex social dynamics</li>\n<li>Create Mesa MultiGrid option</li>\n<li>Add BatchRunner option</li>\n</ul>\n<h2>Requirements</h2>\n<p>Mesa SIR requires</p>\n<pre><code>Mesa&gt;=0.8.6\nnumpy&gt;=1.16.5\nnetworkx &gt;=2.3\nmatplotlib&gt;=3.1.1\n</code></pre>\n<h2>Installation</h2>\n<pre><code>pip install mesa-SIR\n\npip install git+https://github.com/metalcorebear/Mesa-SIR.git\n</code></pre>\n<p>Currently, Mesa SIR has two modules.</p>\n<h2>SIR Module</h2>\n<p>The main module is the SIR.py module. The SIR modules has two main parts.</p>\n<h3>Build Network method</h3>\n<p>The build network class has two parameters:</p>\n<pre><code>interactions = number of agents each agent will interact with each time step; integer\npopulation = number of agents; integer \n</code></pre>\n<p>Using Mesa's NetworkGrid class this module builds a network of agents and their interactions and can be instantiated as follows.</p>\n<pre><code>from mesa_SIR import SIR\n\n# returns a networkx graph to place in your Mesa NetworkGrid instance\nG = SIR.build_network(interactions, population)\nself.grid = NetworkGrid(G)\n</code></pre>\n<h3>Infection Class</h3>\n<p>The infection class has two main part interactions and infection.</p>\n<p>The infection class has the following key word arguments (kwargs):</p>\n<ul>\n<li>ptrans = 0.25 #probability of transmission; float between 0 and 1</li>\n<li>reinfection_rate = 0.00 #probability of reinfection; float between 0 and 1</li>\n<li>I0 =0.10 # initial infection rate; float between 0 and 1</li>\n<li>severe =0.18 # probability of severity; float between 0 and 1</li>\n<li>progression_period = 3 #number of days for disease to progress and show symptoms-- mean of a Gaussian distribution</li>\n<li>progression_sd = 2 #standard deviation of disease progression -- sd of a Gaussian distribution</li>\n<li>death_rate = 0.0193 #probability of disease being fatal</li>\n<li>recovery_days = 21 #number of days for disease to complete -- mean of Gaussian distribution</li>\n<li>recovery_sd = 7 #standard deviation of disease to finish -- sd of Gaussian distribution</li>\n</ul>\n<p>The infection class can be instantiated as follows in the model initiation:</p>\n<pre><code>self.SIR_instance = SIR.Infection(self, ptrans = 0.40,\n                                      reinfection_rate = 0.10,\n                                      I0= 0.02,\n                                      severe = 0.90,\n                                      progression_period = 5,\n                                      progression_sd = 2,\n                                      death_rate = 0.30,\n                                      recovery_days = 38,\n                                      recovery_sd = 6\n</code></pre>\n<p>Due to the requirements of the infection model an agent needs several attributes. An example agent class instantiation with the required attributes is as follows. This initiation uses the Infection class' initial_infection method.</p>\n<pre><code>class human(Agent):\n\ndef __init__(self, unique_id, model):\n    super().__init__(unique_id, model)\n    self.pos = unique_id\n    # Infection class initial infection method\n    self.was_infected = False\n    self.infected, self.susceptible, self.severe = self.model.SIR_instance.initial_infection() \n    self.recovered = False\n    self.alive = True\n    self.day = 0\n    self.induced_infections = 0\n    self.infected_others = False\n</code></pre>\n<p>Agent interaction and infection are then executed in the Infection class interaction method as follows:</p>\n<pre><code>    def step(self):\n\n    \tself.model.SIR_instance.interact(self)\n    \tself.day += 1\n</code></pre>\n<h2>Calculations and Plots Module</h2>\n<p>This module conducts several computations and produces plots and data for the model.</p>\n<p>An example of how to call the collections and plots modules and use with Mesa's datacollection module is as follows.</p>\n<p>During the model initiation phase:</p>\n<pre><code>from mesa_SIR import calculations_and_plots as c_and_p\n\n\nself.datacollector = DataCollector(model_reporters={\"infected\": lambda m: c_p.compute(m,'infected'),\n                                                        \"recovered\": lambda m: c_p.compute(m,'recovered'),\n                                                        \"susceptible\": lambda m: c_p.compute(m,\"susceptible\"),\n                                                        \"dead\": lambda m: c_p.compute(m, \"dead\"),\n                                                        \"R0\": lambda m: c_p.compute(m, \"R0\"),\n                                                        \"severe_cases\": lambda m: c_p.compute(m,\"severe\")})\n</code></pre>\n<p>To save the dataframe and conduct the plots after the model is complete:</p>\n<pre><code>output_data = SIR_model.datacollector.get_model_vars_dataframe()\n\n#Save the model dataframe\nc_p.save_data(output_data) optional keywords: output_path, filename\n\n#Create and save plots\ntitle = 'SIR ABM Model Output'\nc_p.plot_SIR(output_data, title) optional keyword: output_path\nc_p.plot_R0(output_data, title) optional keyword: output_path\nc_p.plot_severe(output_data, title) optional keyword: output_path\n</code></pre>\n\n          </div>"}, "last_serial": 6937339, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "cef9d06b09d830834a347db50702b4c8", "sha256": "22e1ecfec6f52de35b20a4a60f827ee6835609c298c9c5072927f63395f9963b"}, "downloads": -1, "filename": "mesa_SIR-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cef9d06b09d830834a347db50702b4c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7260, "upload_time": "2020-04-02T16:50:14", "upload_time_iso_8601": "2020-04-02T16:50:14.472286Z", "url": "https://files.pythonhosted.org/packages/b5/dd/3e258d9535e3cc19f95ccf409ebdeac3647cfa83c5819baf8b52d759689b/mesa_SIR-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f7b8a8d6d0a96013e23abb4cfebe043e", "sha256": "9a1154c151e415e886bbbbbac657c97df68df63b8d79c466ba7c4f32ddf07deb"}, "downloads": -1, "filename": "mesa_SIR-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f7b8a8d6d0a96013e23abb4cfebe043e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7257, "upload_time": "2020-04-02T17:01:43", "upload_time_iso_8601": "2020-04-02T17:01:43.014051Z", "url": "https://files.pythonhosted.org/packages/c0/00/50fb3df9cb202759a00312340a586f49703e095db799504ecafea7cf0033/mesa_SIR-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b0e47c36f449d4199a631b4f7b00229", "sha256": "8be11cf5f1784883712f57b9ca1696bb99e374ff15641f8630664865b32a3c63"}, "downloads": -1, "filename": "mesa_SIR-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9b0e47c36f449d4199a631b4f7b00229", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5886, "upload_time": "2020-04-02T17:01:44", "upload_time_iso_8601": "2020-04-02T17:01:44.345363Z", "url": "https://files.pythonhosted.org/packages/4e/7f/95994458635a4d24e9d90d67f9d4c4cfd7b888259d24f5f59cdae300209d/mesa_SIR-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f846e8467953b8d32564400029b2b3f8", "sha256": "ff7578a0ea47ffd76b1decb3e872cb8447983ad7f22893a3c01abe266cd42d76"}, "downloads": -1, "filename": "mesa_SIR-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f846e8467953b8d32564400029b2b3f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7257, "upload_time": "2020-04-02T17:25:55", "upload_time_iso_8601": "2020-04-02T17:25:55.380283Z", "url": "https://files.pythonhosted.org/packages/71/54/8e3c20f966e246a9c5ec5db9fe5c73cf17a69965fd6bd451779819187601/mesa_SIR-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f846e8467953b8d32564400029b2b3f8", "sha256": "ff7578a0ea47ffd76b1decb3e872cb8447983ad7f22893a3c01abe266cd42d76"}, "downloads": -1, "filename": "mesa_SIR-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f846e8467953b8d32564400029b2b3f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7257, "upload_time": "2020-04-02T17:25:55", "upload_time_iso_8601": "2020-04-02T17:25:55.380283Z", "url": "https://files.pythonhosted.org/packages/71/54/8e3c20f966e246a9c5ec5db9fe5c73cf17a69965fd6bd451779819187601/mesa_SIR-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:06 2020"}