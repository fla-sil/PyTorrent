{"info": {"author": "Dan Porter", "author_email": "d.g.porter@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7"], "description": "# Dans_Diffaction\nReads crystallographic cif files and simulates diffraction\n\n**Version 1.7**\n\nBy Dan Porter, Diamond Light Source\n2020\n\n#### TL;DR:\n```text\n$ ipython -i -m Dans_Diffraction\n```\n\n```python\nimport Dans_Diffraction as dif\nxtl = dif.Crystal('some_file.cif')\nxtl.info() # print Crystal structure parameters\n\n# Print reflection list:\nprint(xtl.Scatter.print_all_reflections(energy_kev=5)) \n\n# Plot Powder pattern:\nxtl.Plot.simulate_powder(energy_kev=8)\nplt.show()\n\n# Start graphical user interface:\nxtl.start_gui()\n```\n\nFull code documentation available [here](https://danporter.github.io/Dans_Diffraction/).\n\nFor comments, queries or bugs - email dan.porter@diamond.ac.uk\n\n# Installation\n**Requirements:** \nPython 2.7+/3+ with packages: *Numpy*, *Matplotlib*, *Scipy*, *Tkinter*\n\nStable version from PyPI:\n```text\n$ pip install Dans-Diffraction\n```\n\nLatest version from GitHub:\n```text\n$ git clone https://github.com/DanPorter/Dans_Diffraction.git\n```\n\n# Operation\nDans_Diffraction is best run within an interactive python environment:\n```text\n$ ipython -i -m Dans_Diffraction\n```\n\nDans_Diffraction can also be run in scripts as an import, example scripts are provided in the [Examples](Examples) folder.\n### Read CIF file\n```python\nimport Dans_Diffraction as dif\nxtl = dif.Crystal('some_file.cif')\nxtl.info() # print Crystal structure parameters\n```\n\n### Alter atomic positions\n```python\nxtl.Cell.latt([2.85,2.85,10.8,90,90,120]) #  set lattice parameters\nxtl.Atoms.info() # Print Symmetric positions\nxtl.Structure.info() # Print All positions in P1 symmetry (same structure and functions as xtl.Atoms)\n# Symmetric positions\nxtl.Atoms.changeatom(idx=0, u=0, v=0, w=0, type='Co', label='Co1')\nxtl.Atoms.addatom(idx=0, u=0, v=0, w=0, type='Co', label='Co1')\n# After adding or changing an atom in the Atoms class, re-generate the full structure using symmetry arguments:\nxtl.generate_lattice()\n# Full atomic structure in P1 symmetry\nxtl.Structure.changeatom(idx=0, u=0, v=0, w=0, type='Co', label='Co1')\nxtl.Structure.addatom(idx=0, u=0, v=0, w=0, type='Co', label='Co1')\n# Plot crystal Structure\nxtl.Plot.plot_crystal() # 3D plot\nxtl.Plot.plot_layers() # 2D plot for layered materials\n```\n![3D Plot](Screenshots/3Dstructrue_Ca3CoMnO6.png)\n\n\n### Alter crystal symmetry\n```python\nxtl.Symmetry.info() # print symmetry arguments\nxtl.Symmetry.addsym('x,y,z+1/2') # adds single symmetry operation\nxtl.Symmetry.changesym(0, 'x,y,z+1/4')\n# After adding or changing symmetry operations, regengerate the symmetry matrices\nxtl.Symmetry.generate_matrices()\n```\n\n### Calculate Structure Factors\nX-ray or neutron structure factors/ intensities are calculated based on the full unit cell structure, including atomic \nform-factors (x-rays) or coherent scattering lengths (neutrons).\n```python\n# Choose scattering options (see help(xtl.Scatter.setup_scatter))\nxtl.Scatter.setup_scatter(type='x-ray', energy_keV=8.0)\n# Allowed radiation types:\n#    'xray','neutron','xray magnetic','neutron magnetic','xray resonant'\nxtl.intensity([h,k,l]) # Returns intensity\nxtl.print_all_refelctions() # Returns formated string of all allowed reflections\n# Plot Experimental Intensities\nxtl.Plot.simulate_powder() # Powder pattern\nxtl.Plot.simulate_hk0() # Reciprocal space plane\n```\n![Powder Pattern](Screenshots/powder_diamond.png)\n![HK0 Simulation](Screenshots/supercell_diffraction.png)\n\nMagnetic scattering is also available for neutrons and x-rays (both resonant and non-resonant), using the appropriate magnetic form-factors.\n```python\nImag = xtl.Scatter.magnetic_neutron(HKL=[0,0,3])\nIres = xtl.Scatter.xray_resonant_magnetic(HKL=[0,0,3], energy_kev=2.838, azim_zero=[1, 0, 0], psi=0, polarisation='s-p', F0=0, F1=1, F2=0)\n```\n\n### Multiple Scattering\nSimulations of multiple scattering at different azimuths for a particular energy can be simulated. Based on code by Dr Gareth Nisbet.\n\n```python\nazimuth, intensity = xtl.Scatter.ms_azimuth([h,k,l], energy_kev=8)\n```\n\n![Multiple Scattering](Screenshots/ms_azimuth_silicon.png)\n\n### Tensor Scattering\nSimulations of resonant scattering using tensors. Resonant x-ray azimuths can be simulated. Based on code by Prof. Steve Collins.\n\n```python\nss, sp, ps, pp = xtl.Scatter.tensor_scattering('Ru1', [h,k,l], energy_kev=2.838, azir=[0,1,0], psideg=90)\n```\n\n![Tensor Scattering](Screenshots/ts_azimuth_ZnO.png)\n\n### Properties\nThe Crystal class contains a lot of atomic properties that can be exposed in the Properties class:\n```python\nxtl.Properties.info()\n```\n\nAll the properties are stored in the folder Dans_Diffraction/data.\n\n### Superstructures\nSuperstructures can be built using the Superstructure class, requring only a matrix to define the new phase:\n```python\nsu = xtl.generate_superstructure([[2,0,0],[0,2,0],[0,0,1]])\n```\n\nSuperstucture classes behave like Crystal classes, but have an additional 'Parent' property that references the original \ncrystal structure and additional behaviours partiular to superstructures.\n\n```python\nsu.parent.info() # Parent structure\nsu.P # superstructure matrix \n```\n\n### Multi-phase\nScattering from different crystal structures can be compared using the MultiCrystal class:\n```python\nxtls = xtl1 + xtl2\nxtls.simulate_powder()\nplt.show()\n```\n\n### Graphical Front End\n![All GUI elements](Screenshots/GUI_all.png)\n\nStart a new GUI, then select a cif file:\n```python\ndif.Startgui()\n```\nUsing an already generated crystal:\n```python\nxtl.start_gui()\n```\n\n### FDMNES functionality\nFDMNES is a powerful tool for simulating resonant x-ray diffraction, created by [Y. Joly and O. Bunau.](http://neel.cnrs.fr/spip.php?rubrique1007&lang=en)\n\nThe Dans_Diffraction FDMNES class allows for the automatic creation of input files and simple analysis of results.\nThe following command should be used to activate these features (only needs to be issued once). \n```python\ndif.activate_fdmnes()\n```\nOnce activated, the FDMNES classes become available.\n```python\nfdm = dif.Fdmnes(xtl) # Create input files and run FDMNES\nfdma = dif.FdmnesAnalysis(output_path, output_name) # Load output files and plot results\n```\nSee class documentation for more information.\n\n\nOnce activated, FDMNES GUI elements become available from the main window, emulating functionality of the classes.\n\n![FDMNES Run](Screenshots/GUI_08.png)\n![FDMNES Analyse](Screenshots/GUI_09.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DanPorter/Dans_Diffraction", "keywords": "crystal,cif,diffraction,crystallography,science,x-ray,neutron,resonant,magnetic,magnetism,multiple scattering,fdmnes,super structure", "license": "", "maintainer": "", "maintainer_email": "", "name": "Dans-Diffraction", "package_url": "https://pypi.org/project/Dans-Diffraction/", "platform": "", "project_url": "https://pypi.org/project/Dans-Diffraction/", "project_urls": {"Homepage": "https://github.com/DanPorter/Dans_Diffraction"}, "release_url": "https://pypi.org/project/Dans-Diffraction/1.7.0/", "requires_dist": ["numpy", "matplotlib", "scipy"], "requires_python": "", "summary": "Generate diffracted intensities from crystals", "version": "1.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dans_Diffaction</h1>\n<p>Reads crystallographic cif files and simulates diffraction</p>\n<p><strong>Version 1.7</strong></p>\n<p>By Dan Porter, Diamond Light Source\n2020</p>\n<h4>TL;DR:</h4>\n<pre>$ ipython -i -m Dans_Diffraction\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Dans_Diffraction</span> <span class=\"k\">as</span> <span class=\"nn\">dif</span>\n<span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">Crystal</span><span class=\"p\">(</span><span class=\"s1\">'some_file.cif'</span><span class=\"p\">)</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># print Crystal structure parameters</span>\n\n<span class=\"c1\"># Print reflection list:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">print_all_reflections</span><span class=\"p\">(</span><span class=\"n\">energy_kev</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span> \n\n<span class=\"c1\"># Plot Powder pattern:</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"o\">.</span><span class=\"n\">simulate_powder</span><span class=\"p\">(</span><span class=\"n\">energy_kev</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Start graphical user interface:</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">start_gui</span><span class=\"p\">()</span>\n</pre>\n<p>Full code documentation available <a href=\"https://danporter.github.io/Dans_Diffraction/\" rel=\"nofollow\">here</a>.</p>\n<p>For comments, queries or bugs - email <a href=\"mailto:dan.porter@diamond.ac.uk\">dan.porter@diamond.ac.uk</a></p>\n<h1>Installation</h1>\n<p><strong>Requirements:</strong>\nPython 2.7+/3+ with packages: <em>Numpy</em>, <em>Matplotlib</em>, <em>Scipy</em>, <em>Tkinter</em></p>\n<p>Stable version from PyPI:</p>\n<pre>$ pip install Dans-Diffraction\n</pre>\n<p>Latest version from GitHub:</p>\n<pre>$ git clone https://github.com/DanPorter/Dans_Diffraction.git\n</pre>\n<h1>Operation</h1>\n<p>Dans_Diffraction is best run within an interactive python environment:</p>\n<pre>$ ipython -i -m Dans_Diffraction\n</pre>\n<p>Dans_Diffraction can also be run in scripts as an import, example scripts are provided in the <a href=\"Examples\" rel=\"nofollow\">Examples</a> folder.</p>\n<h3>Read CIF file</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">Dans_Diffraction</span> <span class=\"k\">as</span> <span class=\"nn\">dif</span>\n<span class=\"n\">xtl</span> <span class=\"o\">=</span> <span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">Crystal</span><span class=\"p\">(</span><span class=\"s1\">'some_file.cif'</span><span class=\"p\">)</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># print Crystal structure parameters</span>\n</pre>\n<h3>Alter atomic positions</h3>\n<pre><span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Cell</span><span class=\"o\">.</span><span class=\"n\">latt</span><span class=\"p\">([</span><span class=\"mf\">2.85</span><span class=\"p\">,</span><span class=\"mf\">2.85</span><span class=\"p\">,</span><span class=\"mf\">10.8</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">120</span><span class=\"p\">])</span> <span class=\"c1\">#  set lattice parameters</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># Print Symmetric positions</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Structure</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># Print All positions in P1 symmetry (same structure and functions as xtl.Atoms)</span>\n<span class=\"c1\"># Symmetric positions</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"o\">.</span><span class=\"n\">changeatom</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'Co'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Co1'</span><span class=\"p\">)</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Atoms</span><span class=\"o\">.</span><span class=\"n\">addatom</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'Co'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Co1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># After adding or changing an atom in the Atoms class, re-generate the full structure using symmetry arguments:</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">generate_lattice</span><span class=\"p\">()</span>\n<span class=\"c1\"># Full atomic structure in P1 symmetry</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Structure</span><span class=\"o\">.</span><span class=\"n\">changeatom</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'Co'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Co1'</span><span class=\"p\">)</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Structure</span><span class=\"o\">.</span><span class=\"n\">addatom</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'Co'</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Co1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Plot crystal Structure</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"o\">.</span><span class=\"n\">plot_crystal</span><span class=\"p\">()</span> <span class=\"c1\"># 3D plot</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"o\">.</span><span class=\"n\">plot_layers</span><span class=\"p\">()</span> <span class=\"c1\"># 2D plot for layered materials</span>\n</pre>\n<p><img alt=\"3D Plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e47897c58e30b4a96406b6c5296485ed95127fe/53637265656e73686f74732f33447374727563747275655f436133436f4d6e4f362e706e67\"></p>\n<h3>Alter crystal symmetry</h3>\n<pre><span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Symmetry</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># print symmetry arguments</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Symmetry</span><span class=\"o\">.</span><span class=\"n\">addsym</span><span class=\"p\">(</span><span class=\"s1\">'x,y,z+1/2'</span><span class=\"p\">)</span> <span class=\"c1\"># adds single symmetry operation</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Symmetry</span><span class=\"o\">.</span><span class=\"n\">changesym</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'x,y,z+1/4'</span><span class=\"p\">)</span>\n<span class=\"c1\"># After adding or changing symmetry operations, regengerate the symmetry matrices</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Symmetry</span><span class=\"o\">.</span><span class=\"n\">generate_matrices</span><span class=\"p\">()</span>\n</pre>\n<h3>Calculate Structure Factors</h3>\n<p>X-ray or neutron structure factors/ intensities are calculated based on the full unit cell structure, including atomic\nform-factors (x-rays) or coherent scattering lengths (neutrons).</p>\n<pre><span class=\"c1\"># Choose scattering options (see help(xtl.Scatter.setup_scatter))</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">setup_scatter</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'x-ray'</span><span class=\"p\">,</span> <span class=\"n\">energy_keV</span><span class=\"o\">=</span><span class=\"mf\">8.0</span><span class=\"p\">)</span>\n<span class=\"c1\"># Allowed radiation types:</span>\n<span class=\"c1\">#    'xray','neutron','xray magnetic','neutron magnetic','xray resonant'</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">intensity</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">])</span> <span class=\"c1\"># Returns intensity</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">print_all_refelctions</span><span class=\"p\">()</span> <span class=\"c1\"># Returns formated string of all allowed reflections</span>\n<span class=\"c1\"># Plot Experimental Intensities</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"o\">.</span><span class=\"n\">simulate_powder</span><span class=\"p\">()</span> <span class=\"c1\"># Powder pattern</span>\n<span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"o\">.</span><span class=\"n\">simulate_hk0</span><span class=\"p\">()</span> <span class=\"c1\"># Reciprocal space plane</span>\n</pre>\n<p><img alt=\"Powder Pattern\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/03c4475ec6a83c69a338d1155777ec72f0b2c0f8/53637265656e73686f74732f706f776465725f6469616d6f6e642e706e67\">\n<img alt=\"HK0 Simulation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00f334f9f88437d911468187d16500fd53973508/53637265656e73686f74732f737570657263656c6c5f6469666672616374696f6e2e706e67\"></p>\n<p>Magnetic scattering is also available for neutrons and x-rays (both resonant and non-resonant), using the appropriate magnetic form-factors.</p>\n<pre><span class=\"n\">Imag</span> <span class=\"o\">=</span> <span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">magnetic_neutron</span><span class=\"p\">(</span><span class=\"n\">HKL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">Ires</span> <span class=\"o\">=</span> <span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">xray_resonant_magnetic</span><span class=\"p\">(</span><span class=\"n\">HKL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">energy_kev</span><span class=\"o\">=</span><span class=\"mf\">2.838</span><span class=\"p\">,</span> <span class=\"n\">azim_zero</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">psi</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">polarisation</span><span class=\"o\">=</span><span class=\"s1\">'s-p'</span><span class=\"p\">,</span> <span class=\"n\">F0</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<h3>Multiple Scattering</h3>\n<p>Simulations of multiple scattering at different azimuths for a particular energy can be simulated. Based on code by Dr Gareth Nisbet.</p>\n<pre><span class=\"n\">azimuth</span><span class=\"p\">,</span> <span class=\"n\">intensity</span> <span class=\"o\">=</span> <span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">ms_azimuth</span><span class=\"p\">([</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">energy_kev</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Multiple Scattering\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3289f9ddec1ccb6809fd51d66018f4508ab15acc/53637265656e73686f74732f6d735f617a696d7574685f73696c69636f6e2e706e67\"></p>\n<h3>Tensor Scattering</h3>\n<p>Simulations of resonant scattering using tensors. Resonant x-ray azimuths can be simulated. Based on code by Prof. Steve Collins.</p>\n<pre><span class=\"n\">ss</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">ps</span><span class=\"p\">,</span> <span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Scatter</span><span class=\"o\">.</span><span class=\"n\">tensor_scattering</span><span class=\"p\">(</span><span class=\"s1\">'Ru1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">h</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">l</span><span class=\"p\">],</span> <span class=\"n\">energy_kev</span><span class=\"o\">=</span><span class=\"mf\">2.838</span><span class=\"p\">,</span> <span class=\"n\">azir</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">psideg</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Tensor Scattering\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6d291b3a321b6fe2b50a3966a25f03215029746/53637265656e73686f74732f74735f617a696d7574685f5a6e4f2e706e67\"></p>\n<h3>Properties</h3>\n<p>The Crystal class contains a lot of atomic properties that can be exposed in the Properties class:</p>\n<pre><span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">Properties</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n</pre>\n<p>All the properties are stored in the folder Dans_Diffraction/data.</p>\n<h3>Superstructures</h3>\n<p>Superstructures can be built using the Superstructure class, requring only a matrix to define the new phase:</p>\n<pre><span class=\"n\">su</span> <span class=\"o\">=</span> <span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">generate_superstructure</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n</pre>\n<p>Superstucture classes behave like Crystal classes, but have an additional 'Parent' property that references the original\ncrystal structure and additional behaviours partiular to superstructures.</p>\n<pre><span class=\"n\">su</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span> <span class=\"c1\"># Parent structure</span>\n<span class=\"n\">su</span><span class=\"o\">.</span><span class=\"n\">P</span> <span class=\"c1\"># superstructure matrix </span>\n</pre>\n<h3>Multi-phase</h3>\n<p>Scattering from different crystal structures can be compared using the MultiCrystal class:</p>\n<pre><span class=\"n\">xtls</span> <span class=\"o\">=</span> <span class=\"n\">xtl1</span> <span class=\"o\">+</span> <span class=\"n\">xtl2</span>\n<span class=\"n\">xtls</span><span class=\"o\">.</span><span class=\"n\">simulate_powder</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Graphical Front End</h3>\n<p><img alt=\"All GUI elements\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/433b03f6e172eed2ec63e3499680b8d760e39289/53637265656e73686f74732f4755495f616c6c2e706e67\"></p>\n<p>Start a new GUI, then select a cif file:</p>\n<pre><span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">Startgui</span><span class=\"p\">()</span>\n</pre>\n<p>Using an already generated crystal:</p>\n<pre><span class=\"n\">xtl</span><span class=\"o\">.</span><span class=\"n\">start_gui</span><span class=\"p\">()</span>\n</pre>\n<h3>FDMNES functionality</h3>\n<p>FDMNES is a powerful tool for simulating resonant x-ray diffraction, created by <a href=\"http://neel.cnrs.fr/spip.php?rubrique1007&amp;lang=en\" rel=\"nofollow\">Y. Joly and O. Bunau.</a></p>\n<p>The Dans_Diffraction FDMNES class allows for the automatic creation of input files and simple analysis of results.\nThe following command should be used to activate these features (only needs to be issued once).</p>\n<pre><span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">activate_fdmnes</span><span class=\"p\">()</span>\n</pre>\n<p>Once activated, the FDMNES classes become available.</p>\n<pre><span class=\"n\">fdm</span> <span class=\"o\">=</span> <span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">Fdmnes</span><span class=\"p\">(</span><span class=\"n\">xtl</span><span class=\"p\">)</span> <span class=\"c1\"># Create input files and run FDMNES</span>\n<span class=\"n\">fdma</span> <span class=\"o\">=</span> <span class=\"n\">dif</span><span class=\"o\">.</span><span class=\"n\">FdmnesAnalysis</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">output_name</span><span class=\"p\">)</span> <span class=\"c1\"># Load output files and plot results</span>\n</pre>\n<p>See class documentation for more information.</p>\n<p>Once activated, FDMNES GUI elements become available from the main window, emulating functionality of the classes.</p>\n<p><img alt=\"FDMNES Run\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dba902c0a912268aec0f9c0abef65bc07fe630cd/53637265656e73686f74732f4755495f30382e706e67\">\n<img alt=\"FDMNES Analyse\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6930d5ac6799418302b25670da319c3fdf2c2b6/53637265656e73686f74732f4755495f30392e706e67\"></p>\n\n          </div>"}, "last_serial": 7022150, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f12adba6469fe6ce11fdab28cb503a34", "sha256": "ba7787a1669617f543f38f565c6a577514855b7099a6cf646c5656214616f575"}, "downloads": -1, "filename": "Dans_Diffraction-1.0.0.zip", "has_sig": false, "md5_digest": "f12adba6469fe6ce11fdab28cb503a34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2022415, "upload_time": "2018-03-19T14:16:26", "upload_time_iso_8601": "2018-03-19T14:16:26.201810Z", "url": "https://files.pythonhosted.org/packages/7a/e2/c6c9d5339b92cb73eac638f707aeddaddc46132619a61211a03c7432c129/Dans_Diffraction-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "de64e4eb88b43b0e3f8bc9ae50af8183", "sha256": "8382d93507fa47f9cddf2ea14202d86b8473677f68e62f38e9123f34f5d36cb1"}, "downloads": -1, "filename": "Dans_Diffraction-1.0.1.zip", "has_sig": false, "md5_digest": "de64e4eb88b43b0e3f8bc9ae50af8183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2029531, "upload_time": "2018-05-24T08:07:24", "upload_time_iso_8601": "2018-05-24T08:07:24.130563Z", "url": "https://files.pythonhosted.org/packages/09/c4/cf6887df9780863e0e169a61fb2d92afb3a256cf8302e80b3629fccc132d/Dans_Diffraction-1.0.1.zip", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "1403b9d0974d1c6e1742975ff23f3c39", "sha256": "47fd008efd15c16d540c9e7f02dfc8e94fe0f5177124d484041ba9dcbdf73622"}, "downloads": -1, "filename": "Dans_Diffraction-1.3.0.tar.gz", "has_sig": false, "md5_digest": "1403b9d0974d1c6e1742975ff23f3c39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1981166, "upload_time": "2019-02-23T14:15:25", "upload_time_iso_8601": "2019-02-23T14:15:25.270141Z", "url": "https://files.pythonhosted.org/packages/05/12/f4d0f84ac14ecf51bf0894cfe7071d59e5d4e9ae79e5ea1b22760a76792c/Dans_Diffraction-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "aa5b4b77a4ef0060ab35b46873032728", "sha256": "20e9ca36cee040a7070d07986422a80f51c5a69e9aefbab5bfefe9bd79c8100b"}, "downloads": -1, "filename": "Dans_Diffraction-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa5b4b77a4ef0060ab35b46873032728", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2055962, "upload_time": "2019-07-14T20:25:13", "upload_time_iso_8601": "2019-07-14T20:25:13.929915Z", "url": "https://files.pythonhosted.org/packages/89/c4/19217793a8a19057947f8b347e8d4d171ccc77be64e1ee4a7518a5c05797/Dans_Diffraction-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eb1f5fd054743d6afb40d714ea8c94c", "sha256": "f7720876ab63067e687c9176ef8521401500b870ebd8f5764e1ee79f080deb63"}, "downloads": -1, "filename": "Dans_Diffraction-1.4.0.tar.gz", "has_sig": false, "md5_digest": "7eb1f5fd054743d6afb40d714ea8c94c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1993623, "upload_time": "2019-07-14T20:25:18", "upload_time_iso_8601": "2019-07-14T20:25:18.907572Z", "url": "https://files.pythonhosted.org/packages/db/f3/a5a4b59ef9379e29b509303e18155f2cc65fac8b9ad4fc22fd0c495bbd7f/Dans_Diffraction-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "549eeaa16fbd2947000b9e446dfe975b", "sha256": "feeefeed6389c68bee58865f9ef6391379c04dd4edc32ed08d0fecafb9dff930"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "549eeaa16fbd2947000b9e446dfe975b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2069460, "upload_time": "2019-12-16T17:44:31", "upload_time_iso_8601": "2019-12-16T17:44:31.380565Z", "url": "https://files.pythonhosted.org/packages/75/01/61cdd115b00919ffc1dfff4ce5a6e296f13ef4b136c5230b2506aedb7236/Dans_Diffraction-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "559603b3b8e54febab3f386bbdcf20e5", "sha256": "cb9b848996d8d3222b0a538e16075c4c59eaaa2ebd2e9a7242b13be91f7733c2"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.0.tar.gz", "has_sig": false, "md5_digest": "559603b3b8e54febab3f386bbdcf20e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1992969, "upload_time": "2019-12-16T17:44:36", "upload_time_iso_8601": "2019-12-16T17:44:36.608348Z", "url": "https://files.pythonhosted.org/packages/55/95/50f75a16c0d9519d1a294cd223351760e61329a1375474c88dd2caa3ebea/Dans_Diffraction-1.5.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "48d579d84bf6c3004a3c5d60e4227465", "sha256": "c5ce6e15b644591fcd57f673c2947cde87cb493cffaedfe004f309b5488184da"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "48d579d84bf6c3004a3c5d60e4227465", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2078250, "upload_time": "2019-12-16T18:02:14", "upload_time_iso_8601": "2019-12-16T18:02:14.282829Z", "url": "https://files.pythonhosted.org/packages/3d/23/791ba3c257cbd4cbba8cb137357647121a4ae399c04323301050ca3d918e/Dans_Diffraction-1.5.1-py3-none-any.whl", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "95cd9ac96a157de993c447ef74a9d2e1", "sha256": "99b585b5561b593dc7460573496805ffe4dabd01c97874c21c772d27b16d74d3"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.1.tar.gz", "has_sig": false, "md5_digest": "95cd9ac96a157de993c447ef74a9d2e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2008175, "upload_time": "2019-12-16T18:02:19", "upload_time_iso_8601": "2019-12-16T18:02:19.461455Z", "url": "https://files.pythonhosted.org/packages/26/69/c3910ad7cfd6301a6e74d3d99cc1302c2433d7562c73bb63a6aa70521780/Dans_Diffraction-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "7b9861e9b226f710877afc271e58a441", "sha256": "47a9be036b4a181f9d420dc913defbbcafdb720488f64ddd69bb021d4ee811a1"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7b9861e9b226f710877afc271e58a441", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2074556, "upload_time": "2019-12-16T20:14:16", "upload_time_iso_8601": "2019-12-16T20:14:16.537223Z", "url": "https://files.pythonhosted.org/packages/b4/18/9cac6b447822204967bd64c11c88bcd2ca3b686acee551369405ef883cfa/Dans_Diffraction-1.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0ebe55a02857910286a40333fd8aff1", "sha256": "aa8758b0819ea9463fb14c25b3f3fb72228b479f31be4f71181785f6f4f5c6ba"}, "downloads": -1, "filename": "Dans_Diffraction-1.5.2.tar.gz", "has_sig": false, "md5_digest": "d0ebe55a02857910286a40333fd8aff1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2008014, "upload_time": "2019-12-16T20:14:21", "upload_time_iso_8601": "2019-12-16T20:14:21.776918Z", "url": "https://files.pythonhosted.org/packages/7a/cd/61ade788532da820534fa7dcdb1a096582db7400bbb487f99f04464317ee/Dans_Diffraction-1.5.2.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "271430d83dc008ddd3cb8fdc3acd4aa2", "sha256": "cdf38a75bddfe3945a4e5340de504b77b1566d6383873b9f123a36c027cb2a4e"}, "downloads": -1, "filename": "Dans_Diffraction-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "271430d83dc008ddd3cb8fdc3acd4aa2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2133064, "upload_time": "2020-04-15T05:02:01", "upload_time_iso_8601": "2020-04-15T05:02:01.888793Z", "url": "https://files.pythonhosted.org/packages/58/80/c26d5c99ef7c30e615446ab02a797789698430d78762c7cd75957077868d/Dans_Diffraction-1.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32cad707ca0c4b02f728c8536d1f1774", "sha256": "3f2cf57c59279bb08d0ff8231cde0bd63fd62a43b122c3deb18ec1499d5e59e8"}, "downloads": -1, "filename": "Dans_Diffraction-1.7.0.tar.gz", "has_sig": false, "md5_digest": "32cad707ca0c4b02f728c8536d1f1774", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2063241, "upload_time": "2020-04-15T05:02:06", "upload_time_iso_8601": "2020-04-15T05:02:06.592600Z", "url": "https://files.pythonhosted.org/packages/33/9f/56a8125311ce85974e4cd904b55c466318f4f356d011e7bf35671b3bb895/Dans_Diffraction-1.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "271430d83dc008ddd3cb8fdc3acd4aa2", "sha256": "cdf38a75bddfe3945a4e5340de504b77b1566d6383873b9f123a36c027cb2a4e"}, "downloads": -1, "filename": "Dans_Diffraction-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "271430d83dc008ddd3cb8fdc3acd4aa2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2133064, "upload_time": "2020-04-15T05:02:01", "upload_time_iso_8601": "2020-04-15T05:02:01.888793Z", "url": "https://files.pythonhosted.org/packages/58/80/c26d5c99ef7c30e615446ab02a797789698430d78762c7cd75957077868d/Dans_Diffraction-1.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32cad707ca0c4b02f728c8536d1f1774", "sha256": "3f2cf57c59279bb08d0ff8231cde0bd63fd62a43b122c3deb18ec1499d5e59e8"}, "downloads": -1, "filename": "Dans_Diffraction-1.7.0.tar.gz", "has_sig": false, "md5_digest": "32cad707ca0c4b02f728c8536d1f1774", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2063241, "upload_time": "2020-04-15T05:02:06", "upload_time_iso_8601": "2020-04-15T05:02:06.592600Z", "url": "https://files.pythonhosted.org/packages/33/9f/56a8125311ce85974e4cd904b55c466318f4f356d011e7bf35671b3bb895/Dans_Diffraction-1.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:43 2020"}