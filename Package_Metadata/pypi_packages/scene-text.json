{"info": {"author": "Georgios Tsoukas", "author_email": "georgios@dict.gr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# Scene Text Detection and Recognition\n\nThis project packages scene text algorithms for easy usage. Scenes as in photos are much harder for text detection and recognition than doing the same for scanned documents. The latter is mostly referred to as OCR and it is a well solved problem. Note that due to the usage of Deep Learning algorithms, text detection and recognition are rather slow, in particular on CPU-only machines and for images with a large number of words. Accuracies have reached an impressive level but are still below human performance. Currently, the following algorithms are available.\n\n[EAST](https://arxiv.org/abs/1704.03155) is used for detection, where the implementation is mostly copied from [Jan Zdenek](https://github.com/kurapan/EAST ).\n\n[MORAN](https://arxiv.org/abs/1901.03003) is used for recognition, where the implementation is mostly copied from [Canjie Luo](https://github.com/Canjie-Luo/MORAN_v2).\n\n\nInstallation:\n```\npip install scene_text\n```\n\nBasic usage from Python:\n```\nimport cv2\n\n# The first import after installation can take a little longer as it downloads\n# pre-trained models and compiles some native code.\nfrom scene_text import AllWordsRecognizer\n\n# initialize models\npipeline = AllWordsRecognizer()\n\n# read an image\nimg = cv2.imread('path/to/my/image/file')[:, :, ::-1]\n\n# detect and recognize all words in the image\nwords, boxes = pipeline.get_all_words(img)\n```\n\nBasic usage from command line:\n```\nscene_text my/input/image/folder my/output/folder\n```\n\nIf you have trouble with the complex dependencies try Docker:\n```\ndocker build -t scene_text .\n\ndocker run --rm -i -t -v ${PWD}:/scene_text scene_text\n\n# ...\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gtsoukas/scene_text", "keywords": "scene text detection recognition", "license": "", "maintainer": "", "maintainer_email": "", "name": "scene-text", "package_url": "https://pypi.org/project/scene-text/", "platform": "", "project_url": "https://pypi.org/project/scene-text/", "project_urls": {"Homepage": "https://github.com/gtsoukas/scene_text"}, "release_url": "https://pypi.org/project/scene-text/0.2.3/", "requires_dist": null, "requires_python": "==3.6.*", "summary": "Finding text in photos", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Scene Text Detection and Recognition</h1>\n<p>This project packages scene text algorithms for easy usage. Scenes as in photos are much harder for text detection and recognition than doing the same for scanned documents. The latter is mostly referred to as OCR and it is a well solved problem. Note that due to the usage of Deep Learning algorithms, text detection and recognition are rather slow, in particular on CPU-only machines and for images with a large number of words. Accuracies have reached an impressive level but are still below human performance. Currently, the following algorithms are available.</p>\n<p><a href=\"https://arxiv.org/abs/1704.03155\" rel=\"nofollow\">EAST</a> is used for detection, where the implementation is mostly copied from <a href=\"https://github.com/kurapan/EAST\" rel=\"nofollow\">Jan Zdenek</a>.</p>\n<p><a href=\"https://arxiv.org/abs/1901.03003\" rel=\"nofollow\">MORAN</a> is used for recognition, where the implementation is mostly copied from <a href=\"https://github.com/Canjie-Luo/MORAN_v2\" rel=\"nofollow\">Canjie Luo</a>.</p>\n<p>Installation:</p>\n<pre><code>pip install scene_text\n</code></pre>\n<p>Basic usage from Python:</p>\n<pre><code>import cv2\n\n# The first import after installation can take a little longer as it downloads\n# pre-trained models and compiles some native code.\nfrom scene_text import AllWordsRecognizer\n\n# initialize models\npipeline = AllWordsRecognizer()\n\n# read an image\nimg = cv2.imread('path/to/my/image/file')[:, :, ::-1]\n\n# detect and recognize all words in the image\nwords, boxes = pipeline.get_all_words(img)\n</code></pre>\n<p>Basic usage from command line:</p>\n<pre><code>scene_text my/input/image/folder my/output/folder\n</code></pre>\n<p>If you have trouble with the complex dependencies try Docker:</p>\n<pre><code>docker build -t scene_text .\n\ndocker run --rm -i -t -v ${PWD}:/scene_text scene_text\n\n# ...\n</code></pre>\n\n          </div>"}, "last_serial": 7151557, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "327baad8fa9033ad6fc53a6c77dbcd59", "sha256": "4e9b35654c02d3b0ebca0132f1f3c899e110f408a6586561f9a10700f7ad2bbf"}, "downloads": -1, "filename": "scene-text-0.1.1.tar.gz", "has_sig": false, "md5_digest": "327baad8fa9033ad6fc53a6c77dbcd59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 184520, "upload_time": "2019-02-14T23:16:56", "upload_time_iso_8601": "2019-02-14T23:16:56.168382Z", "url": "https://files.pythonhosted.org/packages/a4/12/a8530fbf6d4675a9b4aa6f0d31f05cfb4514c4fccbe3cf9cb6cf92ec24ee/scene-text-0.1.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "25fb61ea854b20efc2dc24d34f3e22a3", "sha256": "ae727aec6b4a6cae472b48b69f56a1a39ef057f96775bd954b5b27eefba40285"}, "downloads": -1, "filename": "scene-text-0.2.2.tar.gz", "has_sig": false, "md5_digest": "25fb61ea854b20efc2dc24d34f3e22a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 184480, "upload_time": "2019-08-01T11:34:23", "upload_time_iso_8601": "2019-08-01T11:34:23.845854Z", "url": "https://files.pythonhosted.org/packages/cd/5b/8818c9a52b8c794dc647d69aaf8ca05088306d53450287c065079aadd025/scene-text-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5cfb1f6a0c4339a0f6b1e0ad2109062e", "sha256": "65cd2386c0f5d6baa7136292f0f4912f66460f9cc70fc3119ecfd28e9db6f685"}, "downloads": -1, "filename": "scene-text-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5cfb1f6a0c4339a0f6b1e0ad2109062e", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.6.*", "size": 184307, "upload_time": "2020-05-02T13:43:33", "upload_time_iso_8601": "2020-05-02T13:43:33.103768Z", "url": "https://files.pythonhosted.org/packages/15/bd/79bbc079c0f1006b17867507fd3969c3ec4cc977bfe386cd6d52185e0c3a/scene-text-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cfb1f6a0c4339a0f6b1e0ad2109062e", "sha256": "65cd2386c0f5d6baa7136292f0f4912f66460f9cc70fc3119ecfd28e9db6f685"}, "downloads": -1, "filename": "scene-text-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5cfb1f6a0c4339a0f6b1e0ad2109062e", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.6.*", "size": 184307, "upload_time": "2020-05-02T13:43:33", "upload_time_iso_8601": "2020-05-02T13:43:33.103768Z", "url": "https://files.pythonhosted.org/packages/15/bd/79bbc079c0f1006b17867507fd3969c3ec4cc977bfe386cd6d52185e0c3a/scene-text-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:56 2020"}