{"info": {"author": "spoorcc", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# CppUMockify\n\nCloned from [Marco M/Mockify](https://bitbucket.org/marco_m/mockify)\n\n[![Build Status](https://travis-ci.org/spoorcc/CppUMockify.svg?branch=master)](https://travis-ci.org/spoorcc/CppUMockify)\n[![PyPI version](https://badge.fury.io/py/CppUMockify.svg)](https://badge.fury.io/py/CppUMockify)\n![PyPI - License](https://img.shields.io/pypi/l/CppUMockify.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/CppUMockify.svg)\n\nGenerate complete boilerplate code for [CppUTest][] C/C++ mocks.\n\nWhen writing mocks, the majority of the code is just boring boilerplate. For\nexample, to mock\n\n    int zoo_cat(int a)\n\none has to write:\n\n    1    int zoo_cat(int a) {\n    2        mock().actualCall(\"zoo_cat\")\n    3            .withParameter(\"a\", a);\n    4        if mock().hasReturnValue() {\n    5            return mock().intReturnValue();\n    6        }\n    7        return something(a);\n    8    }\n\nwhere *everything* but line 7 is boilerplate. Multiply this for the tens of\nmocks needed also for the smallest unit test and the task quickly becomes\nboring and error-prone.\n\nCppUMockify is written in Python and thanks to the excellent [pycparser][] parses\nthe C code of the function prototype to mock and generates all the needed\nboilerplate :-)\n\n## Development status\n\nAlready usable with basic functionalities. Most important missing parts:\n\n- support for basic typedefs (eg `size_t`) both as function type and as function\nargument\n- support for output parameters (eg `void foo(int* bar)`)\n\n## Installation\n\n    pip install CppUMockify\n\n## Usage\n\nCppUMockify is designed to be used with any editor or IDE, or just from the shell.\n\nAssuming that function `zoo_cat()` is declared in header file `zoo.h`, calling:\n\n    cppumockify.py zoo \"int zoo_cat(int a);\"\n\nwill generate mock file `zoo_mock.cpp`, containing the mock boilerplate for\nfunction `zoo_cat()`.\n\nSubsequent calls to cppumockify matching on the header file will append the new\nmock boilerplate to `zoo_mock.cpp`. For example\n\n    cppumockify.py zoo \"int zoo_dog(int b);\"\n\nwill append the boilerplate mock for `zoo_dog()`.\n\n## Suggested workflow\n\nBring a source file under unit test. Once the compilation is succesful, you\nwill start to have linker errors for all the functions you need to mock.\n\nCopy the first unfound symbol from the linker, search for it (using your IDE,\ncscope, ctags, ...), go to the corresponding header file. Copy and paste the\nfunction declaration and pass it to cppumockify.\n\nThe above steps can be automated within your editor or IDE. For CLion, you can\nuse it as an \"external tool\" and pass it automatically the name of the header\nfile and the copy and paste of the function declaration.\n\nAdd the generated mock file to the build. Open the generated mock file, check\nand complete the mock boilerplate.\n\nRinse and repeat :-)\n\n\n[CppUTest]: https://cpputest.github.io\n[pycparser]: https://github.com/eliben/pycparser", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spoorcc/cppumockify", "keywords": "cpputest cppumock pycparser", "license": "", "maintainer": "", "maintainer_email": "", "name": "CppUMockify", "package_url": "https://pypi.org/project/CppUMockify/", "platform": "", "project_url": "https://pypi.org/project/CppUMockify/", "project_urls": {"Bug Reports": "https://github.com/spoorcc/cppumockify/issues", "Homepage": "https://github.com/spoorcc/cppumockify", "Source": "https://github.com/spoorcc/cppumockify/"}, "release_url": "https://pypi.org/project/CppUMockify/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Generate CppUMock implementations", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CppUMockify</h1>\n<p>Cloned from <a href=\"https://bitbucket.org/marco_m/mockify\" rel=\"nofollow\">Marco M/Mockify</a></p>\n<p><a href=\"https://travis-ci.org/spoorcc/CppUMockify\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37d4e8a3ec655894461596ae22ac0d96510582fc/68747470733a2f2f7472617669732d63692e6f72672f73706f6f7263632f437070554d6f636b6966792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/CppUMockify\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be3e004fbfcc5abd16f3152f6dfa8b1325f73069/68747470733a2f2f62616467652e667572792e696f2f70792f437070554d6f636b6966792e737667\"></a>\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe3958528a27bca99dbd575111e5ec796f7e20b0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f437070554d6f636b6966792e737667\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/011cc4542df4cea908f60928fa74c175d8f86b24/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f437070554d6f636b6966792e737667\"></p>\n<p>Generate complete boilerplate code for <a href=\"https://cpputest.github.io\" rel=\"nofollow\">CppUTest</a> C/C++ mocks.</p>\n<p>When writing mocks, the majority of the code is just boring boilerplate. For\nexample, to mock</p>\n<pre><code>int zoo_cat(int a)\n</code></pre>\n<p>one has to write:</p>\n<pre><code>1    int zoo_cat(int a) {\n2        mock().actualCall(\"zoo_cat\")\n3            .withParameter(\"a\", a);\n4        if mock().hasReturnValue() {\n5            return mock().intReturnValue();\n6        }\n7        return something(a);\n8    }\n</code></pre>\n<p>where <em>everything</em> but line 7 is boilerplate. Multiply this for the tens of\nmocks needed also for the smallest unit test and the task quickly becomes\nboring and error-prone.</p>\n<p>CppUMockify is written in Python and thanks to the excellent <a href=\"https://github.com/eliben/pycparser\" rel=\"nofollow\">pycparser</a> parses\nthe C code of the function prototype to mock and generates all the needed\nboilerplate :-)</p>\n<h2>Development status</h2>\n<p>Already usable with basic functionalities. Most important missing parts:</p>\n<ul>\n<li>support for basic typedefs (eg <code>size_t</code>) both as function type and as function\nargument</li>\n<li>support for output parameters (eg <code>void foo(int* bar)</code>)</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install CppUMockify\n</code></pre>\n<h2>Usage</h2>\n<p>CppUMockify is designed to be used with any editor or IDE, or just from the shell.</p>\n<p>Assuming that function <code>zoo_cat()</code> is declared in header file <code>zoo.h</code>, calling:</p>\n<pre><code>cppumockify.py zoo \"int zoo_cat(int a);\"\n</code></pre>\n<p>will generate mock file <code>zoo_mock.cpp</code>, containing the mock boilerplate for\nfunction <code>zoo_cat()</code>.</p>\n<p>Subsequent calls to cppumockify matching on the header file will append the new\nmock boilerplate to <code>zoo_mock.cpp</code>. For example</p>\n<pre><code>cppumockify.py zoo \"int zoo_dog(int b);\"\n</code></pre>\n<p>will append the boilerplate mock for <code>zoo_dog()</code>.</p>\n<h2>Suggested workflow</h2>\n<p>Bring a source file under unit test. Once the compilation is succesful, you\nwill start to have linker errors for all the functions you need to mock.</p>\n<p>Copy the first unfound symbol from the linker, search for it (using your IDE,\ncscope, ctags, ...), go to the corresponding header file. Copy and paste the\nfunction declaration and pass it to cppumockify.</p>\n<p>The above steps can be automated within your editor or IDE. For CLion, you can\nuse it as an \"external tool\" and pass it automatically the name of the header\nfile and the copy and paste of the function declaration.</p>\n<p>Add the generated mock file to the build. Open the generated mock file, check\nand complete the mock boilerplate.</p>\n<p>Rinse and repeat :-)</p>\n\n          </div>"}, "last_serial": 3924855, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "7924178c3f1fff66128bdb3c13470374", "sha256": "47b2a7913b65db86cc0fd75fa02bf200f0e3d208831422de50c354fea8994261"}, "downloads": -1, "filename": "CppUMockify-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7924178c3f1fff66128bdb3c13470374", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5299, "upload_time": "2018-06-01T20:43:34", "upload_time_iso_8601": "2018-06-01T20:43:34.903326Z", "url": "https://files.pythonhosted.org/packages/f6/41/6d9a2c22a21fc5ddf5dfa3be15690f6563c46911708030348a18b5330734/CppUMockify-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "177f08c5a93c47b2be7f2d296a2c1d2d", "sha256": "e852449bf414ce94990220ba9110807c19aebded39206af0a3f263363ee4d082"}, "downloads": -1, "filename": "CppUMockify-0.0.4.tar.gz", "has_sig": false, "md5_digest": "177f08c5a93c47b2be7f2d296a2c1d2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5385, "upload_time": "2018-06-01T21:02:00", "upload_time_iso_8601": "2018-06-01T21:02:00.185383Z", "url": "https://files.pythonhosted.org/packages/f3/db/37708eacfcca88a393a9e2fbe96b45a7eb6c7537adaaae60d5b3855d7c6f/CppUMockify-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "fe9449be527c8e7b0a64ff8c2d4864e5", "sha256": "bcca826d1f68b7abf69821667f7bbe8e4aae9a850732b37be5bf33d4c133d046"}, "downloads": -1, "filename": "CppUMockify-0.0.5.tar.gz", "has_sig": false, "md5_digest": "fe9449be527c8e7b0a64ff8c2d4864e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5529, "upload_time": "2018-06-02T11:44:06", "upload_time_iso_8601": "2018-06-02T11:44:06.836742Z", "url": "https://files.pythonhosted.org/packages/b9/14/0f1804800aa85d5e9f14547d483931a3e024cb063be698582c4ee822a3d8/CppUMockify-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d6e4064e14a1fdc6ec6135885354b34b", "sha256": "85b43919e6beca5b7d6dd010ffb0e8059ed176d9095f1da6b8d8e38eeb8fc17b"}, "downloads": -1, "filename": "CppUMockify-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d6e4064e14a1fdc6ec6135885354b34b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5726, "upload_time": "2018-06-03T07:56:21", "upload_time_iso_8601": "2018-06-03T07:56:21.435617Z", "url": "https://files.pythonhosted.org/packages/39/52/220c3741ff7af2b72faae7dee2018288bd63b96951818a2d269ede6bb83a/CppUMockify-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6e4064e14a1fdc6ec6135885354b34b", "sha256": "85b43919e6beca5b7d6dd010ffb0e8059ed176d9095f1da6b8d8e38eeb8fc17b"}, "downloads": -1, "filename": "CppUMockify-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d6e4064e14a1fdc6ec6135885354b34b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5726, "upload_time": "2018-06-03T07:56:21", "upload_time_iso_8601": "2018-06-03T07:56:21.435617Z", "url": "https://files.pythonhosted.org/packages/39/52/220c3741ff7af2b72faae7dee2018288bd63b96951818a2d269ede6bb83a/CppUMockify-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:36 2020"}