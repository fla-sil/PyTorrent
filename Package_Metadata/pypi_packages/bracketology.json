{"info": {"author": "Kyle Stahl", "author_email": "stahl085@umn.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "Welcome to Bracketology!\n========================\n\n.. figure:: docs/_static/bracketology_logo.png\n   :width: 100%\n   :align: center\n   :alt: Bracketology logo\n\n.. inclusion-marker-do-not-remove\n   \nThe goal of bracketology is to speed up the analysis of NCAA march madness data \nand help develop algorithms for filling out brackets.  \n\n:Documentation: https://bracketology.readthedocs.io/en/latest/\n:GitHub Repo: https://github.com/stahl085/bracketology\n:Issue Tracker: https://github.com/stahl085/bracketology/issues\n:Backlog: https://github.com/stahl085/bracketology/projects/1?fullscreen=true\n:PyPI: https://pypi.org/project/bracketology/\n\nBefore You Start\n----------------  \n\nHere are the main things you need to know:\n - The main parts of this package are the :code:`Bracket` objects and simulator functions in the :code:`simulators` module\n - A Bracket is composed of :code:`Team` and :code:`Game` objects\n - Game objects have two Team objects as attributes, and the round number\n - Teams have a name, seed, and dictionary for statistics\n - Simulator functions have 1 argument of type Game, and return the winning Team of that Game\n\n   \nInstallation\n------------\n\nInstall from `pip <https://pip.pypa.io/en/stable/>`_\n\n.. code-block:: bash\n\n    pip install bracketology\n\nOr download directly from `PyPi <https://pypi.org/project/bracketology/>`_\n\nGetting Started\n---------------\nImport bracketology and create a bracket from last year.\n\n.. code-block:: python\n\n    from bracketology import Bracket, Game, Team\n    \n    # Create a bracket object from 2019\n    year = 2019\n    b19 = Bracket(year)\n    \nTutorial\n========\n\nInspecting the Bracket Object\n-----------------------------\nHere are three different ways you can inspect the Bracket.    \n\n* Inspect teams in each region (dictionary of actual results)\n* Inspect actual results by round (dictionary)\n* Inspect simulated results by round (list of Team attributes)\n\nGet Teams in each Region\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrint out all the teams in each region. The `regions` attribute is\na dictionary with the information of all the teams in each region.\n\n.. code-block:: python\n\n    >>> print(b19.regions)\n    {\n        'East': [{'Team': 'Duke', 'Seed': 1}, \n                 {'Team': 'Michigan St', 'Seed': 2}, \n                 {'Team': 'LSU', 'Seed': 3}, \n                 ...],\n        'West': [{'Team': 'Gonzaga', 'Seed': 1}, \n                 {'Team': 'Michigan', 'Seed': 2}, \n                 {'Team': 'Texas Tech', 'Seed': 3},\n                 ...],\n        'Midwest': [{'Team': 'North Carolina', 'Seed': 1}, \n                    {'Team': 'Kentucky', 'Seed': 2}, \n                    {'Team': 'Houston', 'Seed': 3},\n                    ...],\n        'South': [{'Team': 'Virginia', 'Seed': 1}, \n                  {'Team': 'Tennessee', 'Seed': 2}, \n                  {'Team': 'Purdue', 'Seed': 3},\n                  ...]\n    }\n\nActual Results by Round\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `result` attribute will return a dictionary (similar to `regions` above)\nbut will be broken out by which teams actually made it to each round. You can \nuse it to inspect the real tournament results.\n\n.. code-block:: python\n\n    >>> print(b19.result.keys())\n    dict_keys(['first', 'second', 'sweet16', 'elite8', 'final4', 'championship', 'winner'])\n    \n    >>> print(b19.result['final4'])\n    [{'Team': 'Michigan St', 'Seed': 2}, {'Team': 'Virginia', 'Seed': 1}, \n     {'Team': 'Texas Tech', 'Seed': 3}, {'Team': 'Auburn', 'Seed': 5}]\n    \n    >>> print(b19.result.get('winner'))\n    {'Team': 'Virginia', 'Seed': 1}    \n\nSimulation Results by Round\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrint out all the teams that are simulated to make it to each round.\nThe first round is filled out by default. This is a list of `Team` objects\nthat are simulated to make it to each round. Right now `round2` is an empty list\nbecause we have not simulated the bracket yet.\n\n.. code-block:: python\n    \n    >>> print(b19.round1)\n    [<1 Duke>, <2 Michigan St>, <3 LSU>, ... , <1 Gonzaga>, <2 Michigan>, <3 Texas Tech>, \n     ... , <1 North Carolina>, <2 Kentucky>, <3 Houston>, ... , <1 Virginia>, <2 Tennessee>, <3 Purdue>]\n        \n    >>> print(b19.round2)\n    []\n\nCreating a Simulator Algorithm\n-------------------------------\nA simulator function needs to take in a `Game` and Return a `Team`.\n\nFirst we create some faux teams and games to test our simulator function on.\n\n.. code-block:: python\n\n    # Create teams\n    team1 = Team(name='Blue Mountain State',seed=1)\n    team2 = Team(name='School of Hard Knocks',seed=2)\n    \u00e2\u20ac\u2039\n    # Create a game between the teams\n    game1 = Game(team1, team2, round_number=1)\n\nThen we define the simulator function.\n\n.. code-block:: python\n    \n    import random\n    def pick_a_random_team(the_game):\n        \n        # Extract Teams from Game\n        team1 = the_game.top_team\n        team2 = the_game.bottom_team\n    \u00e2\u20ac\u2039   \n        # Randomly select a winner\n        if random.random() < 0.5:\n            winner = team1\n        else:\n            winner = team2\n        \n        # Return the lucky team\n        return winner\n    \nTest the function out on a game.\n\n.. code-block:: python\n\n    >>> pick_a_random_team(game1)\n    <2 School of Hard Knocks>\n\nLet's run some simulations with our function!\n\n.. code-block:: python\n\n    # Initialize Simulation Parameters\n    BMS_wins = 0\n    HardKnocks_wins = 0\n    n_games = 1000\n    \u00e2\u20ac\u2039\n    # Loop through a bunch of games\n    for i in range(n_games):\n        \n        # Simulate the winner\n        winner = pick_a_random_team(game1)\n        \n        # Increment win totals\n        if winner.seed == 1:\n            BMS_wins += 1\n        elif winner.seed == 2:\n            HardKnocks_wins += 1\n        else:\n            raise Exception(\"We have a tie??\")\n    \u00e2\u20ac\u2039\n    # Calculate total win percentage\n    BMS_win_pct = round(BMS_wins/n_games, 4) * 100\n    HardKnocks_win_pct = round(HardKnocks_wins/n_games, 4) * 100\n    \u00e2\u20ac\u2039\n    # Print out results\n    print(f\"Blue Mountain State Win Percentage:   %{BMS_win_pct}\")\n    print(f\"School of Hard Knocks Win Percentage: %{HardKnocks_win_pct}\")\n  \nOutput:\n\n.. code-block:: python \n\n    Blue Mountain State Win Percentage:   %50.9\n    School of Hard Knocks Win Percentage: %49.1\n\n\nEvaluting Simulator Results\n---------------------------\n\nLet's evaluate our simulator function on some actual brackets.\n\n.. code-block:: python\n    \n    # Initialize simulation parameters\n    n_sims = 1000 # number of times to simulate through all years\n    total_sims = (n_sims * len(brackets))\n    scores = []\n    correct_games = []\n    \n    # Loop through a plethora of brackets\n    for i in range(n_sims):\n        for bracket in brackets:\n            \n            # Run the algorithm on the bracket\n            bracket.score(sim_func=pick_a_random_team, verbose=False)\n            \n            # Save the scoring results in a list\n            scores.append(bracket.total_score)\n            correct_games.append(bracket.n_games_correct)\n    \n    # Calculate the average across all simulations\n    avg_score = round(sum(scores) / total_sims)\n    avg_correct = round(sum(correct_games) / total_sims)\n    \n    # Print result\n    print(f\"Average number total score {avg_score}/192\")\n    print(f\"Average number of games guessed correctly {avg_correct}/64\")\n \nOutput:\n\n.. code-block:: python\n\n    Average number total score 31/192\n    Average number of games guessed correctly 21/64\n\n\nEasy, right!", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/stahl085/bracketology/archive/0.0.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stahl085/bracketology", "keywords": "brackets,NCAA,basketball,march,madness,tournament", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bracketology", "package_url": "https://pypi.org/project/bracketology/", "platform": "", "project_url": "https://pypi.org/project/bracketology/", "project_urls": {"Download": "https://github.com/stahl085/bracketology/archive/0.0.4.tar.gz", "Homepage": "https://github.com/stahl085/bracketology"}, "release_url": "https://pypi.org/project/bracketology/0.0.99/", "requires_dist": null, "requires_python": "", "summary": "Analyze and simulate NCAA march madness tournaments", "version": "0.0.99", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"welcome-to-bracketology\">\n<h2>Welcome to Bracketology!</h2>\n<div>\n<img alt=\"Bracketology logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4811d2f2e6416d07835ad7182247967e35519837/646f63732f5f7374617469632f627261636b65746f6c6f67795f6c6f676f2e706e67\" width=\"100%\">\n</div>\n<p>The goal of bracketology is to speed up the analysis of NCAA march madness data\nand help develop algorithms for filling out brackets.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Documentation:</th><td><a href=\"https://bracketology.readthedocs.io/en/latest/\" rel=\"nofollow\">https://bracketology.readthedocs.io/en/latest/</a></td>\n</tr>\n<tr><th>GitHub Repo:</th><td><a href=\"https://github.com/stahl085/bracketology\" rel=\"nofollow\">https://github.com/stahl085/bracketology</a></td>\n</tr>\n<tr><th>Issue Tracker:</th><td><a href=\"https://github.com/stahl085/bracketology/issues\" rel=\"nofollow\">https://github.com/stahl085/bracketology/issues</a></td>\n</tr>\n<tr><th>Backlog:</th><td><a href=\"https://github.com/stahl085/bracketology/projects/1?fullscreen=true\" rel=\"nofollow\">https://github.com/stahl085/bracketology/projects/1?fullscreen=true</a></td>\n</tr>\n<tr><th>PyPI:</th><td><a href=\"https://pypi.org/project/bracketology/\" rel=\"nofollow\">https://pypi.org/project/bracketology/</a></td>\n</tr>\n</tbody>\n</table>\n<div id=\"before-you-start\">\n<h3>Before You Start</h3>\n<dl>\n<dt>Here are the main things you need to know:</dt>\n<dd><ul>\n<li>The main parts of this package are the <code>Bracket</code> objects and simulator functions in the <code>simulators</code> module</li>\n<li>A Bracket is composed of <code>Team</code> and <code>Game</code> objects</li>\n<li>Game objects have two Team objects as attributes, and the round number</li>\n<li>Teams have a name, seed, and dictionary for statistics</li>\n<li>Simulator functions have 1 argument of type Game, and return the winning Team of that Game</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install from <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a></p>\n<pre>pip install bracketology\n</pre>\n<p>Or download directly from <a href=\"https://pypi.org/project/bracketology/\" rel=\"nofollow\">PyPi</a></p>\n</div>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>Import bracketology and create a bracket from last year.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bracketology</span> <span class=\"kn\">import</span> <span class=\"n\">Bracket</span><span class=\"p\">,</span> <span class=\"n\">Game</span><span class=\"p\">,</span> <span class=\"n\">Team</span>\n\n<span class=\"c1\"># Create a bracket object from 2019</span>\n<span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">2019</span>\n<span class=\"n\">b19</span> <span class=\"o\">=</span> <span class=\"n\">Bracket</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<div id=\"inspecting-the-bracket-object\">\n<h3>Inspecting the Bracket Object</h3>\n<p>Here are three different ways you can inspect the Bracket.</p>\n<ul>\n<li>Inspect teams in each region (dictionary of actual results)</li>\n<li>Inspect actual results by round (dictionary)</li>\n<li>Inspect simulated results by round (list of Team attributes)</li>\n</ul>\n<div id=\"get-teams-in-each-region\">\n<h4>Get Teams in each Region</h4>\n<p>Print out all the teams in each region. The <cite>regions</cite> attribute is\na dictionary with the information of all the teams in each region.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">regions</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'East'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Duke'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n             <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Michigan St'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n             <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'LSU'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n             <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'West'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Gonzaga'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n             <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Michigan'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n             <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Texas Tech'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n             <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'Midwest'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'North Carolina'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Kentucky'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Houston'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n                <span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'South'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Virginia'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n              <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Tennessee'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n              <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Purdue'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n              <span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"actual-results-by-round\">\n<h4>Actual Results by Round</h4>\n<p>The <cite>result</cite> attribute will return a dictionary (similar to <cite>regions</cite> above)\nbut will be broken out by which teams actually made it to each round. You can\nuse it to inspect the real tournament results.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"n\">dict_keys</span><span class=\"p\">([</span><span class=\"s1\">'first'</span><span class=\"p\">,</span> <span class=\"s1\">'second'</span><span class=\"p\">,</span> <span class=\"s1\">'sweet16'</span><span class=\"p\">,</span> <span class=\"s1\">'elite8'</span><span class=\"p\">,</span> <span class=\"s1\">'final4'</span><span class=\"p\">,</span> <span class=\"s1\">'championship'</span><span class=\"p\">,</span> <span class=\"s1\">'winner'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'final4'</span><span class=\"p\">])</span>\n<span class=\"p\">[{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Michigan St'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Virginia'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Texas Tech'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Auburn'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'winner'</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span> <span class=\"s1\">'Virginia'</span><span class=\"p\">,</span> <span class=\"s1\">'Seed'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"simulation-results-by-round\">\n<h4>Simulation Results by Round</h4>\n<p>Print out all the teams that are simulated to make it to each round.\nThe first round is filled out by default. This is a list of <cite>Team</cite> objects\nthat are simulated to make it to each round. Right now <cite>round2</cite> is an empty list\nbecause we have not simulated the bracket yet.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">round1</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span> <span class=\"n\">Duke</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">2</span> <span class=\"n\">Michigan</span> <span class=\"n\">St</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">3</span> <span class=\"n\">LSU</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">1</span> <span class=\"n\">Gonzaga</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">2</span> <span class=\"n\">Michigan</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">3</span> <span class=\"n\">Texas</span> <span class=\"n\">Tech</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">...</span> <span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">1</span> <span class=\"n\">North</span> <span class=\"n\">Carolina</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">2</span> <span class=\"n\">Kentucky</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">3</span> <span class=\"n\">Houston</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">1</span> <span class=\"n\">Virginia</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">2</span> <span class=\"n\">Tennessee</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">3</span> <span class=\"n\">Purdue</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b19</span><span class=\"o\">.</span><span class=\"n\">round2</span><span class=\"p\">)</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n</div>\n<div id=\"creating-a-simulator-algorithm\">\n<h3>Creating a Simulator Algorithm</h3>\n<p>A simulator function needs to take in a <cite>Game</cite> and Return a <cite>Team</cite>.</p>\n<p>First we create some faux teams and games to test our simulator function on.</p>\n<pre><span class=\"c1\"># Create teams</span>\n<span class=\"n\">team1</span> <span class=\"o\">=</span> <span class=\"n\">Team</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Blue Mountain State'</span><span class=\"p\">,</span><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">team2</span> <span class=\"o\">=</span> <span class=\"n\">Team</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'School of Hard Knocks'</span><span class=\"p\">,</span><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">\u00e2</span><span class=\"err\">\u20ac\u2039</span>\n<span class=\"c1\"># Create a game between the teams</span>\n<span class=\"n\">game1</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"n\">team1</span><span class=\"p\">,</span> <span class=\"n\">team2</span><span class=\"p\">,</span> <span class=\"n\">round_number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Then we define the simulator function.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"k\">def</span> <span class=\"nf\">pick_a_random_team</span><span class=\"p\">(</span><span class=\"n\">the_game</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Extract Teams from Game</span>\n    <span class=\"n\">team1</span> <span class=\"o\">=</span> <span class=\"n\">the_game</span><span class=\"o\">.</span><span class=\"n\">top_team</span>\n    <span class=\"n\">team2</span> <span class=\"o\">=</span> <span class=\"n\">the_game</span><span class=\"o\">.</span><span class=\"n\">bottom_team</span>\n<span class=\"n\">\u00e2</span><span class=\"err\">\u20ac\u2039</span>\n    <span class=\"c1\"># Randomly select a winner</span>\n    <span class=\"k\">if</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.5</span><span class=\"p\">:</span>\n        <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"n\">team1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"n\">team2</span>\n\n    <span class=\"c1\"># Return the lucky team</span>\n    <span class=\"k\">return</span> <span class=\"n\">winner</span>\n</pre>\n<p>Test the function out on a game.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pick_a_random_team</span><span class=\"p\">(</span><span class=\"n\">game1</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"mi\">2</span> <span class=\"n\">School</span> <span class=\"n\">of</span> <span class=\"n\">Hard</span> <span class=\"n\">Knocks</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Let\u2019s run some simulations with our function!</p>\n<pre><span class=\"c1\"># Initialize Simulation Parameters</span>\n<span class=\"n\">BMS_wins</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">HardKnocks_wins</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">n_games</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">\u00e2</span><span class=\"err\">\u20ac\u2039</span>\n<span class=\"c1\"># Loop through a bunch of games</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_games</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Simulate the winner</span>\n    <span class=\"n\">winner</span> <span class=\"o\">=</span> <span class=\"n\">pick_a_random_team</span><span class=\"p\">(</span><span class=\"n\">game1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Increment win totals</span>\n    <span class=\"k\">if</span> <span class=\"n\">winner</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">BMS_wins</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">winner</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">HardKnocks_wins</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"We have a tie??\"</span><span class=\"p\">)</span>\n<span class=\"n\">\u00e2</span><span class=\"err\">\u20ac\u2039</span>\n<span class=\"c1\"># Calculate total win percentage</span>\n<span class=\"n\">BMS_win_pct</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">BMS_wins</span><span class=\"o\">/</span><span class=\"n\">n_games</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"n\">HardKnocks_win_pct</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">HardKnocks_wins</span><span class=\"o\">/</span><span class=\"n\">n_games</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n<span class=\"n\">\u00e2</span><span class=\"err\">\u20ac\u2039</span>\n<span class=\"c1\"># Print out results</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Blue Mountain State Win Percentage:   %</span><span class=\"si\">{</span><span class=\"n\">BMS_win_pct</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"School of Hard Knocks Win Percentage: %</span><span class=\"si\">{</span><span class=\"n\">HardKnocks_win_pct</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"n\">Blue</span> <span class=\"n\">Mountain</span> <span class=\"n\">State</span> <span class=\"n\">Win</span> <span class=\"n\">Percentage</span><span class=\"p\">:</span>   <span class=\"o\">%</span><span class=\"mf\">50.9</span>\n<span class=\"n\">School</span> <span class=\"n\">of</span> <span class=\"n\">Hard</span> <span class=\"n\">Knocks</span> <span class=\"n\">Win</span> <span class=\"n\">Percentage</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"mf\">49.1</span>\n</pre>\n</div>\n<div id=\"evaluting-simulator-results\">\n<h3>Evaluting Simulator Results</h3>\n<p>Let\u2019s evaluate our simulator function on some actual brackets.</p>\n<pre><span class=\"c1\"># Initialize simulation parameters</span>\n<span class=\"n\">n_sims</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"c1\"># number of times to simulate through all years</span>\n<span class=\"n\">total_sims</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n_sims</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">brackets</span><span class=\"p\">))</span>\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">correct_games</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Loop through a plethora of brackets</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_sims</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">bracket</span> <span class=\"ow\">in</span> <span class=\"n\">brackets</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># Run the algorithm on the bracket</span>\n        <span class=\"n\">bracket</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">sim_func</span><span class=\"o\">=</span><span class=\"n\">pick_a_random_team</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Save the scoring results in a list</span>\n        <span class=\"n\">scores</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bracket</span><span class=\"o\">.</span><span class=\"n\">total_score</span><span class=\"p\">)</span>\n        <span class=\"n\">correct_games</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bracket</span><span class=\"o\">.</span><span class=\"n\">n_games_correct</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the average across all simulations</span>\n<span class=\"n\">avg_score</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">total_sims</span><span class=\"p\">)</span>\n<span class=\"n\">avg_correct</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">correct_games</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">total_sims</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print result</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Average number total score </span><span class=\"si\">{</span><span class=\"n\">avg_score</span><span class=\"si\">}</span><span class=\"s2\">/192\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Average number of games guessed correctly </span><span class=\"si\">{</span><span class=\"n\">avg_correct</span><span class=\"si\">}</span><span class=\"s2\">/64\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"n\">Average</span> <span class=\"n\">number</span> <span class=\"n\">total</span> <span class=\"n\">score</span> <span class=\"mi\">31</span><span class=\"o\">/</span><span class=\"mi\">192</span>\n<span class=\"n\">Average</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">games</span> <span class=\"n\">guessed</span> <span class=\"n\">correctly</span> <span class=\"mi\">21</span><span class=\"o\">/</span><span class=\"mi\">64</span>\n</pre>\n<p>Easy, right!</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6774682, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b9c7b5e2c6f3a31bc410a84c0ae34639", "sha256": "1411b49b7eb8fa1c213fa12fc771c6e358ffa7624b80cf05fde2470ffbd3157f"}, "downloads": -1, "filename": "bracketology-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b9c7b5e2c6f3a31bc410a84c0ae34639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4470, "upload_time": "2020-02-23T04:10:51", "upload_time_iso_8601": "2020-02-23T04:10:51.150679Z", "url": "https://files.pythonhosted.org/packages/03/8a/9b24bdba6bc7c93a29c01dfe5b3aa29bbe402bc9d1fab94f8ed651830457/bracketology-0.0.1.tar.gz", "yanked": false}], "0.0.2-alpha": [{"comment_text": "", "digests": {"md5": "b7529455c71cdc16d0c23d73e6d4cae4", "sha256": "0dcab29c1324bfcd65ea97f000584098b65ffe6947a69d20b119442bedb3ad92"}, "downloads": -1, "filename": "bracketology-0.0.2-alpha.tar.gz", "has_sig": false, "md5_digest": "b7529455c71cdc16d0c23d73e6d4cae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25061, "upload_time": "2020-02-25T02:47:51", "upload_time_iso_8601": "2020-02-25T02:47:51.118734Z", "url": "https://files.pythonhosted.org/packages/83/1c/73a96933614d454dd1df32d39d21f666904843c1e41473948fabe22a9c67/bracketology-0.0.2-alpha.tar.gz", "yanked": false}], "0.0.3-alpha": [{"comment_text": "", "digests": {"md5": "bc36a802924d0f674d806cfc1ad41a36", "sha256": "12ff96ce9abbb4d112e89f80814a5e550b7e33c3680dbdca7583eb0dd3f8ba2c"}, "downloads": -1, "filename": "bracketology-0.0.3-alpha.tar.gz", "has_sig": false, "md5_digest": "bc36a802924d0f674d806cfc1ad41a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25061, "upload_time": "2020-02-25T02:52:41", "upload_time_iso_8601": "2020-02-25T02:52:41.925132Z", "url": "https://files.pythonhosted.org/packages/8c/c4/690a79604b7a500bb1b23e60517416caf76cbfaeb540e6becc655d3926a8/bracketology-0.0.3-alpha.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "ba4d1e769729aee8af54cd38820b475d", "sha256": "f442f827fff84fd355cec400033e3f7ac7032bc1911946ab31d87fcb26b031df"}, "downloads": -1, "filename": "bracketology-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ba4d1e769729aee8af54cd38820b475d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25003, "upload_time": "2020-02-25T02:56:45", "upload_time_iso_8601": "2020-02-25T02:56:45.651359Z", "url": "https://files.pythonhosted.org/packages/ee/9e/3457062d93578c3e41e3e35b7f5438903cf8cfee7f647596d7f2a40784ed/bracketology-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "02024d350654301255809b83f6450188", "sha256": "ca47ad2198809c98182c4dc18f8eebd82590ede9240079f8deeb405a19138775"}, "downloads": -1, "filename": "bracketology-0.0.5.tar.gz", "has_sig": false, "md5_digest": "02024d350654301255809b83f6450188", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25050, "upload_time": "2020-02-26T01:40:56", "upload_time_iso_8601": "2020-02-26T01:40:56.884963Z", "url": "https://files.pythonhosted.org/packages/f6/5e/c2ebaf50e18e9517a0691daf84ec9d55c77fd63e02abc6972d93a1b0caf9/bracketology-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c69a1723596681d0c0dc0e673ed22738", "sha256": "806b433f947fb440280e3438639321c86af98bac4a548371a8b26c62cb61dfca"}, "downloads": -1, "filename": "bracketology-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c69a1723596681d0c0dc0e673ed22738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25044, "upload_time": "2020-02-26T01:46:00", "upload_time_iso_8601": "2020-02-26T01:46:00.121639Z", "url": "https://files.pythonhosted.org/packages/3f/82/7264f98178144088200ee4235c79a8e06d0f1542cdffdebfa5bcbcf7af75/bracketology-0.0.6.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "1536eedf0d69036b6cee3a3f3d798f73", "sha256": "5b1c1880fbf85bf0cfb8b87f84ea225ca595d78adbe7a610fc278e06301489d4"}, "downloads": -1, "filename": "bracketology-0.0.8.tar.gz", "has_sig": false, "md5_digest": "1536eedf0d69036b6cee3a3f3d798f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27719, "upload_time": "2020-03-07T19:21:46", "upload_time_iso_8601": "2020-03-07T19:21:46.029698Z", "url": "https://files.pythonhosted.org/packages/6f/f4/2b35fee22862434346d77df4f730a4883fe5de8b98bed4b090b3a7928bda/bracketology-0.0.8.tar.gz", "yanked": false}], "0.0.9-alpha": [{"comment_text": "", "digests": {"md5": "a900625d1725eff488f9b4ad07e37103", "sha256": "0612a2f4c81478ce58810ea0f5097221ad8467d19e55d80dd671f249823bde91"}, "downloads": -1, "filename": "bracketology-0.0.9-alpha.tar.gz", "has_sig": false, "md5_digest": "a900625d1725eff488f9b4ad07e37103", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29088, "upload_time": "2020-03-09T03:06:40", "upload_time_iso_8601": "2020-03-09T03:06:40.835344Z", "url": "https://files.pythonhosted.org/packages/fa/14/8a158ad52135217ce82771d3149e94da2f1f7bf5d4c9f9db63ac64c12563/bracketology-0.0.9-alpha.tar.gz", "yanked": false}], "0.0.9-beta": [{"comment_text": "", "digests": {"md5": "ff2f26a6cce5c22d4d23ca3cf94a7cb4", "sha256": "50a470a456526166790f12a53e3eb79c3a63402f8a30cd292ca483d9ff625abd"}, "downloads": -1, "filename": "bracketology-0.0.9-beta.tar.gz", "has_sig": false, "md5_digest": "ff2f26a6cce5c22d4d23ca3cf94a7cb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29192, "upload_time": "2020-03-09T03:08:59", "upload_time_iso_8601": "2020-03-09T03:08:59.958791Z", "url": "https://files.pythonhosted.org/packages/7f/b9/da1672d106fe4358194187fc00f99b5a4dd2c2ae74e82aa8e88a3881ed4d/bracketology-0.0.9-beta.tar.gz", "yanked": false}], "0.0.99": [{"comment_text": "", "digests": {"md5": "e29b388ad9b7aeacbb77cc34afc995c3", "sha256": "211f151a7c1a1b7224797e3f35d33cd3a50d4a8f2789b8ea873da6e7abba4137"}, "downloads": -1, "filename": "bracketology-0.0.99.tar.gz", "has_sig": false, "md5_digest": "e29b388ad9b7aeacbb77cc34afc995c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29651, "upload_time": "2020-03-09T03:43:57", "upload_time_iso_8601": "2020-03-09T03:43:57.264157Z", "url": "https://files.pythonhosted.org/packages/9a/96/6444ed4666a5cd5c7b7b18b963528e3df857c33f9cb4df09f99dd10a7df1/bracketology-0.0.99.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e29b388ad9b7aeacbb77cc34afc995c3", "sha256": "211f151a7c1a1b7224797e3f35d33cd3a50d4a8f2789b8ea873da6e7abba4137"}, "downloads": -1, "filename": "bracketology-0.0.99.tar.gz", "has_sig": false, "md5_digest": "e29b388ad9b7aeacbb77cc34afc995c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29651, "upload_time": "2020-03-09T03:43:57", "upload_time_iso_8601": "2020-03-09T03:43:57.264157Z", "url": "https://files.pythonhosted.org/packages/9a/96/6444ed4666a5cd5c7b7b18b963528e3df857c33f9cb4df09f99dd10a7df1/bracketology-0.0.99.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:26 2020"}