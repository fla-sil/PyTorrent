{"info": {"author": "Jonathan Drake", "author_email": "jdrake@narrativescience.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# pypants\n\n[![](https://img.shields.io/pypi/v/pypants.svg)](https://pypi.org/pypi/pypants/) [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\nCLI for working with Python packages and BUILD files in a [Pants](https://www.pantsbuild.org/) monorepo.\n\nFeatures:\n\n- Auto-generate BUILD files based on the package type and import statements\n- Generate new Python package folders through an interactive CLI\n- Compute a topologically-sorted list of dependencies for a given Python build target\n\nTable of Contents:\n\n- [Installation](#installation)\n- [Guide](#guide)\n  - [Commands](#commands)\n  - [Project Configuration](#project-configuration)\n  - [Package Configuration](#package-configuration)\n  - [Package Types](#package-types)\n  - [Registering Extra Targets](#registering-extra-targets)\n  - [Package Generators](#package-generators)\n\n## Installation\n\npypants requires Python 3.6 or above\n\n```bash\npip install pypants\n```\n\n## Guide\n\n### Commands\n\n#### `pypants process-requirements`\n\nUpdate `3rdparty/python/import-map.json` using the entries in `3rdparty/python/requirements.txt`. All this does is convert the published package name to an import name. Execute this command when you add a new requirement to `requirements.txt`.\n\n#### `pypants process-packages`\n\nAuto-generate all relevant BUILD files in the project/repo. You should execute this command in a git pre-commit or pre-push hook so your BUILD files are kept up to date. You can also run it on demand after you add a new dependency to an internal package.\n\n#### `pypants generate-package`\n\nStarts an interactive CLI that generates a new package folder. This depends on the package generators you registered.\n\n### Project Configuration\n\nTo configure your project, add a file named `.pypants.cfg` to the root of your Git repo and paste the example below. You should define the `top_dirs` option at a minimum.\n\n```ini\n[project]\n\n; **************\n; COMMON OPTIONS\n; **************\n\n; REQUIRED: Top-level directories to search for Python packages. These are relative\n; to your project/repo root. This is a JSON list of strings.\ntop_dirs = [\".\"]\n\n; Prefix to use for names of packages generated by pypants. e.g. foobar_\n; python_package_name_prefix =\n\n; Never look for or process files in these directories. This is a JSON list of\n; strings. e.g. [\"node_modules\", \"generators\"]\n; ignore_dirs = []\n\n; ****************\n; UNCOMMON OPTIONS\n; ****************\n\n; Set of target package names to ignore when collecting build targets. This is a\n; JSON list of strings.\n; ignore_targets = []\n\n; Path to the location of the import-map.json file relative to the project root\n; third_party_import_map_path = 3rdparty/python/import-map.json\n\n; Path to the requirements.txt relative to the project root. The default value is\n; the default that Pants uses.\n; third_party_requirements_path = 3rdparty/python/requirements.txt\n```\n\nBesides the JSON lists, other options are parsed with Python's built-in [ConfigParser](https://docs.python.org/3/library/configparser.html).\n\n### Package Configuration\n\n`pypants` currently expects the Python package to be structured like:\n\n```txt\nmypackage/\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 .pypants.cfg <---- this is the pypants config file\n\u251c\u2500\u2500 src/\n    \u251c\u2500\u2500 BUILD <---- pypants will generate this file\n    \u251c\u2500\u2500 mypackage/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 ...source code...\n\u251c\u2500\u2500 tests/\n    \u251c\u2500\u2500 unit/\n        \u251c\u2500\u2500 BUILD <---- pypants will generate this file\n        \u251c\u2500\u2500 ...unit tests...\n    \u251c\u2500\u2500 functional/\n        \u251c\u2500\u2500 BUILD <---- pypants will generate this file\n        \u251c\u2500\u2500 ...functional tests...\n```\n\nTo configure each package, add a file named `.pypants.cfg` to the package folder and paste the example below. You should define the `type` option at a minimum.\n\n```ini\n[package]\n\n; **************\n; COMMON OPTIONS\n; **************\n\n; REQUIRED: Package type. See Package Types section for available values.\ntype = library\n\n; ****************\n; UNCOMMON OPTIONS\n; ****************\n\n; Extra set of dependencies to include in the python_library target. This is a\n; JSON list of strings.\n; extra_dependencies = []\n\n; Extra set of tags to include in the Pants build targets. This is a JSON list of\n; strings.\n; extra_tags = []\n\n; Flag denoting whether to generate a BUILD file.\n; generate_build_file = true\n\n; Flag denoting whether to generate a python_binary target for local.py. This is\n; essentially an extra entry point. It's only used for specific package types.\n; generate_local_binary = false\n\n; Flag denoting whether to include a python_binary target for pytest\n; generate_pytest_binary = false\n\n; Flag denoting whether to include a coverage attribute on pytest targets\n; include_test_coverage = true\n```\n\n### Package Types\n\nEach of the package types will result in a different BUILD file.\n\n#### `library`\n\nThe BUILD file for internal Python libraries has one target defined. For example:\n\n```python\npython_library(\n    dependencies=[\n        \"3rdparty/python:arrow\",\n        \"3rdparty/python:isoweek\",\n        \"lib/code/src\",\n        \"lib/logger/src\",\n    ],\n    sources=[\"my_library/**/*\"],\n    tags={\"code\", \"lib\", \"python\"},\n)\n```\n\nThere is no name provided so this target can be referenced just by its containing folder path. In this case it would be `\"<TOPDIR>/my_library/src\"`.\n\n#### `binary`\n\nA binary target can be used for executable scripts (CLIs and servers) and usually depend on internal libraries. The BUILD has a library and binary target defined:\n\n```python\npython_library(\n    name=\"lib\",\n    dependencies=[\n        \"3rdparty/python:boto3\",\n        \"3rdparty/python:cfn-flip\",\n        \"3rdparty/python:Click\",\n        \"3rdparty/python:jsonschema\",\n        \"lib/logger/src\",\n    ],\n    sources=[\"cli_deploy/**/*\"],\n    tags={\"apps\", \"code\", \"python\"},\n)\npython_binary(\n    name=\"deploy\",\n    dependencies=[\":lib\"],\n    source=\"cli_deploy/cli.py\",\n    tags={\"apps\", \"code\", \"python\"},\n)\n```\n\n- The `python_library` target is pretty much the same as an internal Python library package\n- The `python_binary` target defines an explicit name. This is because when we go to build the PEX file, we want to define the filename. In this example, running `./pants binary apps/cli_deploy/src:deploy` will result in `dist/deploy.pex`.\n- The only dependency for the binary should be the library. The library will then include all the dependencies.\n- `source` points to the entry point of the binary. This module should handle the `if __name__ == \"__main__\"` condition to kick off the script.\n\n#### `test`\n\npypants looks for subfolders named unit, functional, or component within a package's `tests/` folder. The BUILD file for test folders have a few targets defined. For example:\n\n```python\npython_library(\n    name=\"lib/time_utils/tests/unit\",\n    dependencies=[\n        \"3rdparty/python:arrow\",\n        \"lib/python_core/src\",\n        \"lib/time_utils/src\"\n    ],\n    sources=[\"**/*\"],\n    tags={\"lib\", \"python\", \"tests\", \"unit\"},\n)\npython_tests(\n    dependencies=[\":lib/time_utils/tests/unit\"],\n    sources=[\"**/*.py\"],\n    tags={\"lib\", \"python\", \"tests\", \"unit\"},\n)\npython_binary(\n    name=\"unittest\",\n    entry_point=\"unittest\",\n    dependencies=[\":lib/time_utils/tests/unit\"]\n)\n```\n\n- The `python_library` target is mostly here to define the unit tests dependencies in a single place so the other two targets can point to it\n- The `python_tests` target lets us run pytest against the test files that match `**/*.py`\n- The `python_binary` target lets us run the unittest module directly. We won't actually package up this target via `./pants binary`. Setting the entry_point to `\"unittest\"` is essentially the same as running `python -m unittest test_something.py` from the command line.\n\n#### `lambda_function`\n\nThe BUILD file for the Lambda handler contains a special-purpose build target: `python_awslambda`. This target is a wrapper around [lambdex](https://github.com/wickman/lambdex). It creates a PEX like the `python_binary` target (you can execute it) but it modifies the PEX to work with a Lambda Function. For example:\n\n```python\npython_library(\n    name=\"my-lambda-lib\",\n    sources=[\"lambda_handler/**/*\"],\n    dependencies=[\n        \"3rdparty/python:requests\",\n        \"lib/logger/src\",\n    ],\n)\npython_binary(\n    name=\"my-lambda-bin\",\n    source=\"lambda_handler/lambda_handler.py\",\n    dependencies=[\":my-lambda-lib\"],\n)\npython_awslambda(\n    name=\"my-lambda\",\n    binary=\":my-lambda-bin\",\n    handler=\"lambda_handler.lambda_handler:lambda_handler\",\n)\n```\n\nThis BUILD file will be placed in the same folder as the `.pypants.cfg` file.\n\n#### `migration`\n\nThe BUILD file for an [Alembic](https://alembic.sqlalchemy.org/) migration uses the `python_app` target to include the loose version files:\n\n```python\npython_library(\n    name=\"lib\",\n    dependencies=[\n        \"3rdparty/python:alembic\",\n        \"3rdparty/python:SQLAlchemy\",\n        \"lib/core/src\",\n    ],\n    sources=[\"**/*\"],\n    tags={\"code\", \"db\", \"migration\", \"python\"},\n)\npython_binary(name=\"alembic\", entry_point=\"alembic.config\", dependencies=[\":lib\"])\npython_app(\n    name=\"migrations-my-database-name\",\n    archive=\"tar\",\n    binary=\":alembic\",\n    bundles=[\n        bundle(fileset=[\"alembic.ini\"]),\n        bundle(fileset=[\"env.py\"]),\n        bundle(fileset=[\"versions/*.py\"]),\n    ],\n    tags={\"code\", \"db\", \"migration\", \"python\"},\n)\n```\n\nThis BUILD file will be placed in the same folder as the `.pypants.cfg` file.\n\n#### `behave`\n\nThe BUILD file for a [behave](https://behave.readthedocs.io/en/latest/) test package includes a library target with test dependencies and a binary target that wraps behave. For example:\n\n```python\npython_library(\n    name=\"lib\",\n    dependencies=[\n        \"3rdparty/python:requests\",\n        \"lib/application_config/src\",\n    ],\n    sources=[\"**/*\"],\n    tags={\"integration\", \"python\", \"tests\", \"tests-integration\"},\n)\npython_binary(\n    source=\"behave_cli.py\",\n    dependencies=[\":lib\"],\n    tags={\"integration\", \"python\", \"tests\", \"tests-integration\"},\n)\n```\n\nThis BUILD file will be placed in the same folder as the `.pypants.cfg` file.\n\nThe `behave_cli.py` source references a wrapper script that you should add to the folder:\n\n```python\n\"\"\"Programmatic entrypoint to running behave from the command line\"\"\"\nimport os\nimport sys\n\nfrom behave.__main__ import main as behave_main\n\nif __name__ == \"__main__\":\n    cwd = os.getcwd()\n    os.chdir(os.path.dirname(__file__))\n    try:\n        exit_code = behave_main(sys.argv[1:])\n    finally:\n        os.chdir(cwd)\n        sys.exit(exit_code)\n```\n\n#### `py2sfn_project`\n\npy2sfn is a framework that simplifies the creation and deployment of workflows to [AWS Step Functions](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html). The BUILD file for a project only includes a generic target with the set of task dependencies:\n\n```python\ntarget(\n    dependencies=[\n        \"stepfunctions/projects/example-project/tasks/lambda_fetchjoke/src:lib\",\n        \"stepfunctions/projects/example-project/tasks/lambda_generatelist/src:lib\",\n        \"stepfunctions/projects/example-project/tasks/lambda_rankcharactersbyjoke/src:lib\",\n    ],\n    tags={\"py2sfn-project\", \"python\", \"stepfunctions/projects\"},\n)\n```\n\nThis BUILD file will be placed in the same folder as the `.pypants.cfg` file.\n\n### Registering Extra Targets\n\nIf your project contains internal packages that don't aren't represented cleanly by the `.pypants.cfg` file, you can register extra targets programmatically.\n\n1. In your repo, create a new file at `.pypants/targets.py`\n1. Define a top-level function called `register_extra_targets`. Within that function, instantiate your extra build targets and return a dictionary that maps package name to `BuildTarget`.\n\nFor example, if you have several Alembic database folders:\n\n```python\n\"\"\"Module that defines extra pypants build targets\"\"\"\nfrom typing import Dict\n\nfrom pypants.config import PROJECT_CONFIG\nfrom pypants.build_targets import AlembicMigrationPackage\n\n\ndef register_extra_targets() -> Dict[str, \"pypants.build_targets.base.PythonPackage\"]:\n    \"\"\"Register extra targets specific to MyProject\"\"\"\n    targets = {}\n\n    # Register task targets for Alembic database migration targets\n    #\n    # * For migrations, this searches db/ looking for eny.py files. If it finds one,\n    #   it means we've found an Alembic migration folder and can register a build\n    #   target.\n    env_py_paths = PROJECT_CONFIG.config_dir_path.joinpath(\"db\").glob(\"**/env.py\")\n    for env_py_path in env_py_paths:\n        alias = env_py_path.parent.name.replace(\"_db\", \"\").replace(\"_\", \"-\")\n        package_name = f\"migrations-{alias}\"\n        target = AlembicMigrationPackage(\n            target_type=\"code\",\n            build_template=\"migration\",\n            top_dir_name=\"db\",\n            package_dir_name=env_py_path.parent.name,\n            package_path=str(env_py_path.parent),\n            package_name=package_name,\n            build_dir=str(env_py_path.parent),\n            extra_tags={\"migration\"},\n        )\n        targets[package_name] = target\n\n    return targets\n```\n\n### Package Generators\n\nThe `generate-package` command can be used to create a new package on disk. It sources package \"generators\" (folders that define the package boilerplate) from the `.pypants/generators` folder in your repo. To create a new package generator, copy one of the folders from [`examples/generators/`](examples/generators/) to `<your repo>/.pypants/generators/<name>` and modify it as needed. The generators use a tool called [cookiecutter](https://github.com/cookiecutter/cookiecutter) to rendere templates.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NarrativeScience/pypants", "keywords": "pants", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "pypants", "package_url": "https://pypi.org/project/pypants/", "platform": "", "project_url": "https://pypi.org/project/pypants/", "project_urls": {"Homepage": "https://github.com/NarrativeScience/pypants"}, "release_url": "https://pypi.org/project/pypants/0.4.0/", "requires_dist": ["astor<1,>=0.7.1", "black==19.3b0", "Click>=7.0", "cookiecutter==1.7.0", "networkx<3,>=2.2", "python-slugify<2,>=1.2.0"], "requires_python": ">=3.6,<4", "summary": "CLI for working with Python packages and BUILD files in a Pants monorepo", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pypants</h1>\n<p><a href=\"https://pypi.org/pypi/pypants/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87b9b3edde7e646e2c67daffc399f680a6750fe1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707970616e74732e737667\"></a> <a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a></p>\n<p>CLI for working with Python packages and BUILD files in a <a href=\"https://www.pantsbuild.org/\" rel=\"nofollow\">Pants</a> monorepo.</p>\n<p>Features:</p>\n<ul>\n<li>Auto-generate BUILD files based on the package type and import statements</li>\n<li>Generate new Python package folders through an interactive CLI</li>\n<li>Compute a topologically-sorted list of dependencies for a given Python build target</li>\n</ul>\n<p>Table of Contents:</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#guide\" rel=\"nofollow\">Guide</a>\n<ul>\n<li><a href=\"#commands\" rel=\"nofollow\">Commands</a></li>\n<li><a href=\"#project-configuration\" rel=\"nofollow\">Project Configuration</a></li>\n<li><a href=\"#package-configuration\" rel=\"nofollow\">Package Configuration</a></li>\n<li><a href=\"#package-types\" rel=\"nofollow\">Package Types</a></li>\n<li><a href=\"#registering-extra-targets\" rel=\"nofollow\">Registering Extra Targets</a></li>\n<li><a href=\"#package-generators\" rel=\"nofollow\">Package Generators</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>pypants requires Python 3.6 or above</p>\n<pre>pip install pypants\n</pre>\n<h2>Guide</h2>\n<h3>Commands</h3>\n<h4><code>pypants process-requirements</code></h4>\n<p>Update <code>3rdparty/python/import-map.json</code> using the entries in <code>3rdparty/python/requirements.txt</code>. All this does is convert the published package name to an import name. Execute this command when you add a new requirement to <code>requirements.txt</code>.</p>\n<h4><code>pypants process-packages</code></h4>\n<p>Auto-generate all relevant BUILD files in the project/repo. You should execute this command in a git pre-commit or pre-push hook so your BUILD files are kept up to date. You can also run it on demand after you add a new dependency to an internal package.</p>\n<h4><code>pypants generate-package</code></h4>\n<p>Starts an interactive CLI that generates a new package folder. This depends on the package generators you registered.</p>\n<h3>Project Configuration</h3>\n<p>To configure your project, add a file named <code>.pypants.cfg</code> to the root of your Git repo and paste the example below. You should define the <code>top_dirs</code> option at a minimum.</p>\n<pre><span class=\"k\">[project]</span>\n\n<span class=\"c1\">; **************</span>\n<span class=\"c1\">; COMMON OPTIONS</span>\n<span class=\"c1\">; **************</span>\n\n<span class=\"c1\">; REQUIRED: Top-level directories to search for Python packages. These are relative</span>\n<span class=\"c1\">; to your project/repo root. This is a JSON list of strings.</span>\n<span class=\"na\">top_dirs</span> <span class=\"o\">=</span> <span class=\"s\">[\".\"]</span>\n\n<span class=\"c1\">; Prefix to use for names of packages generated by pypants. e.g. foobar_</span>\n<span class=\"c1\">; python_package_name_prefix =</span>\n\n<span class=\"c1\">; Never look for or process files in these directories. This is a JSON list of</span>\n<span class=\"c1\">; strings. e.g. [\"node_modules\", \"generators\"]</span>\n<span class=\"c1\">; ignore_dirs = []</span>\n\n<span class=\"c1\">; ****************</span>\n<span class=\"c1\">; UNCOMMON OPTIONS</span>\n<span class=\"c1\">; ****************</span>\n\n<span class=\"c1\">; Set of target package names to ignore when collecting build targets. This is a</span>\n<span class=\"c1\">; JSON list of strings.</span>\n<span class=\"c1\">; ignore_targets = []</span>\n\n<span class=\"c1\">; Path to the location of the import-map.json file relative to the project root</span>\n<span class=\"c1\">; third_party_import_map_path = 3rdparty/python/import-map.json</span>\n\n<span class=\"c1\">; Path to the requirements.txt relative to the project root. The default value is</span>\n<span class=\"c1\">; the default that Pants uses.</span>\n<span class=\"c1\">; third_party_requirements_path = 3rdparty/python/requirements.txt</span>\n</pre>\n<p>Besides the JSON lists, other options are parsed with Python's built-in <a href=\"https://docs.python.org/3/library/configparser.html\" rel=\"nofollow\">ConfigParser</a>.</p>\n<h3>Package Configuration</h3>\n<p><code>pypants</code> currently expects the Python package to be structured like:</p>\n<pre>mypackage/\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 .pypants.cfg &lt;---- this is the pypants config file\n\u251c\u2500\u2500 src/\n    \u251c\u2500\u2500 BUILD &lt;---- pypants will generate this file\n    \u251c\u2500\u2500 mypackage/\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 ...source code...\n\u251c\u2500\u2500 tests/\n    \u251c\u2500\u2500 unit/\n        \u251c\u2500\u2500 BUILD &lt;---- pypants will generate this file\n        \u251c\u2500\u2500 ...unit tests...\n    \u251c\u2500\u2500 functional/\n        \u251c\u2500\u2500 BUILD &lt;---- pypants will generate this file\n        \u251c\u2500\u2500 ...functional tests...\n</pre>\n<p>To configure each package, add a file named <code>.pypants.cfg</code> to the package folder and paste the example below. You should define the <code>type</code> option at a minimum.</p>\n<pre><span class=\"k\">[package]</span>\n\n<span class=\"c1\">; **************</span>\n<span class=\"c1\">; COMMON OPTIONS</span>\n<span class=\"c1\">; **************</span>\n\n<span class=\"c1\">; REQUIRED: Package type. See Package Types section for available values.</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">library</span>\n\n<span class=\"c1\">; ****************</span>\n<span class=\"c1\">; UNCOMMON OPTIONS</span>\n<span class=\"c1\">; ****************</span>\n\n<span class=\"c1\">; Extra set of dependencies to include in the python_library target. This is a</span>\n<span class=\"c1\">; JSON list of strings.</span>\n<span class=\"c1\">; extra_dependencies = []</span>\n\n<span class=\"c1\">; Extra set of tags to include in the Pants build targets. This is a JSON list of</span>\n<span class=\"c1\">; strings.</span>\n<span class=\"c1\">; extra_tags = []</span>\n\n<span class=\"c1\">; Flag denoting whether to generate a BUILD file.</span>\n<span class=\"c1\">; generate_build_file = true</span>\n\n<span class=\"c1\">; Flag denoting whether to generate a python_binary target for local.py. This is</span>\n<span class=\"c1\">; essentially an extra entry point. It's only used for specific package types.</span>\n<span class=\"c1\">; generate_local_binary = false</span>\n\n<span class=\"c1\">; Flag denoting whether to include a python_binary target for pytest</span>\n<span class=\"c1\">; generate_pytest_binary = false</span>\n\n<span class=\"c1\">; Flag denoting whether to include a coverage attribute on pytest targets</span>\n<span class=\"c1\">; include_test_coverage = true</span>\n</pre>\n<h3>Package Types</h3>\n<p>Each of the package types will result in a different BUILD file.</p>\n<h4><code>library</code></h4>\n<p>The BUILD file for internal Python libraries has one target defined. For example:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:arrow\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"3rdparty/python:isoweek\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/code/src\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/logger/src\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"my_library/**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lib\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>There is no name provided so this target can be referenced just by its containing folder path. In this case it would be <code>\"&lt;TOPDIR&gt;/my_library/src\"</code>.</p>\n<h4><code>binary</code></h4>\n<p>A binary target can be used for executable scripts (CLIs and servers) and usually depend on internal libraries. The BUILD has a library and binary target defined:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lib\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:boto3\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"3rdparty/python:cfn-flip\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"3rdparty/python:Click\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"3rdparty/python:jsonschema\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/logger/src\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"cli_deploy/**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"apps\"</span><span class=\"p\">,</span> <span class=\"s2\">\"code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_binary</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"deploy\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":lib\"</span><span class=\"p\">],</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"cli_deploy/cli.py\"</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"apps\"</span><span class=\"p\">,</span> <span class=\"s2\">\"code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The <code>python_library</code> target is pretty much the same as an internal Python library package</li>\n<li>The <code>python_binary</code> target defines an explicit name. This is because when we go to build the PEX file, we want to define the filename. In this example, running <code>./pants binary apps/cli_deploy/src:deploy</code> will result in <code>dist/deploy.pex</code>.</li>\n<li>The only dependency for the binary should be the library. The library will then include all the dependencies.</li>\n<li><code>source</code> points to the entry point of the binary. This module should handle the <code>if __name__ == \"__main__\"</code> condition to kick off the script.</li>\n</ul>\n<h4><code>test</code></h4>\n<p>pypants looks for subfolders named unit, functional, or component within a package's <code>tests/</code> folder. The BUILD file for test folders have a few targets defined. For example:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lib/time_utils/tests/unit\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:arrow\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/python_core/src\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/time_utils/src\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"lib\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests\"</span><span class=\"p\">,</span> <span class=\"s2\">\"unit\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_tests</span><span class=\"p\">(</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":lib/time_utils/tests/unit\"</span><span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"**/*.py\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"lib\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests\"</span><span class=\"p\">,</span> <span class=\"s2\">\"unit\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_binary</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"unittest\"</span><span class=\"p\">,</span>\n    <span class=\"n\">entry_point</span><span class=\"o\">=</span><span class=\"s2\">\"unittest\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":lib/time_utils/tests/unit\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The <code>python_library</code> target is mostly here to define the unit tests dependencies in a single place so the other two targets can point to it</li>\n<li>The <code>python_tests</code> target lets us run pytest against the test files that match <code>**/*.py</code></li>\n<li>The <code>python_binary</code> target lets us run the unittest module directly. We won't actually package up this target via <code>./pants binary</code>. Setting the entry_point to <code>\"unittest\"</code> is essentially the same as running <code>python -m unittest test_something.py</code> from the command line.</li>\n</ul>\n<h4><code>lambda_function</code></h4>\n<p>The BUILD file for the Lambda handler contains a special-purpose build target: <code>python_awslambda</code>. This target is a wrapper around <a href=\"https://github.com/wickman/lambdex\" rel=\"nofollow\">lambdex</a>. It creates a PEX like the <code>python_binary</code> target (you can execute it) but it modifies the PEX to work with a Lambda Function. For example:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my-lambda-lib\"</span><span class=\"p\">,</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"lambda_handler/**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:requests\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/logger/src\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_binary</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my-lambda-bin\"</span><span class=\"p\">,</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"lambda_handler/lambda_handler.py\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":my-lambda-lib\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_awslambda</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my-lambda\"</span><span class=\"p\">,</span>\n    <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"s2\">\":my-lambda-bin\"</span><span class=\"p\">,</span>\n    <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"s2\">\"lambda_handler.lambda_handler:lambda_handler\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This BUILD file will be placed in the same folder as the <code>.pypants.cfg</code> file.</p>\n<h4><code>migration</code></h4>\n<p>The BUILD file for an <a href=\"https://alembic.sqlalchemy.org/\" rel=\"nofollow\">Alembic</a> migration uses the <code>python_app</code> target to include the loose version files:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lib\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:alembic\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"3rdparty/python:SQLAlchemy\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/core/src\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"db\"</span><span class=\"p\">,</span> <span class=\"s2\">\"migration\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_binary</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"alembic\"</span><span class=\"p\">,</span> <span class=\"n\">entry_point</span><span class=\"o\">=</span><span class=\"s2\">\"alembic.config\"</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":lib\"</span><span class=\"p\">])</span>\n<span class=\"n\">python_app</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"migrations-my-database-name\"</span><span class=\"p\">,</span>\n    <span class=\"n\">archive</span><span class=\"o\">=</span><span class=\"s2\">\"tar\"</span><span class=\"p\">,</span>\n    <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"s2\">\":alembic\"</span><span class=\"p\">,</span>\n    <span class=\"n\">bundles</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">bundle</span><span class=\"p\">(</span><span class=\"n\">fileset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"alembic.ini\"</span><span class=\"p\">]),</span>\n        <span class=\"n\">bundle</span><span class=\"p\">(</span><span class=\"n\">fileset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"env.py\"</span><span class=\"p\">]),</span>\n        <span class=\"n\">bundle</span><span class=\"p\">(</span><span class=\"n\">fileset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"versions/*.py\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"db\"</span><span class=\"p\">,</span> <span class=\"s2\">\"migration\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This BUILD file will be placed in the same folder as the <code>.pypants.cfg</code> file.</p>\n<h4><code>behave</code></h4>\n<p>The BUILD file for a <a href=\"https://behave.readthedocs.io/en/latest/\" rel=\"nofollow\">behave</a> test package includes a library target with test dependencies and a binary target that wraps behave. For example:</p>\n<pre><span class=\"n\">python_library</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"lib\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"3rdparty/python:requests\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lib/application_config/src\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"**/*\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"integration\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests-integration\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">python_binary</span><span class=\"p\">(</span>\n    <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"behave_cli.py\"</span><span class=\"p\">,</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\":lib\"</span><span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"integration\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests\"</span><span class=\"p\">,</span> <span class=\"s2\">\"tests-integration\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This BUILD file will be placed in the same folder as the <code>.pypants.cfg</code> file.</p>\n<p>The <code>behave_cli.py</code> source references a wrapper script that you should add to the folder:</p>\n<pre><span class=\"sd\">\"\"\"Programmatic entrypoint to running behave from the command line\"\"\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">behave.__main__</span> <span class=\"kn\">import</span> <span class=\"n\">main</span> <span class=\"k\">as</span> <span class=\"n\">behave_main</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">exit_code</span> <span class=\"o\">=</span> <span class=\"n\">behave_main</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">cwd</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">exit_code</span><span class=\"p\">)</span>\n</pre>\n<h4><code>py2sfn_project</code></h4>\n<p>py2sfn is a framework that simplifies the creation and deployment of workflows to <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html\" rel=\"nofollow\">AWS Step Functions</a>. The BUILD file for a project only includes a generic target with the set of task dependencies:</p>\n<pre><span class=\"n\">target</span><span class=\"p\">(</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"stepfunctions/projects/example-project/tasks/lambda_fetchjoke/src:lib\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"stepfunctions/projects/example-project/tasks/lambda_generatelist/src:lib\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"stepfunctions/projects/example-project/tasks/lambda_rankcharactersbyjoke/src:lib\"</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"py2sfn-project\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"stepfunctions/projects\"</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This BUILD file will be placed in the same folder as the <code>.pypants.cfg</code> file.</p>\n<h3>Registering Extra Targets</h3>\n<p>If your project contains internal packages that don't aren't represented cleanly by the <code>.pypants.cfg</code> file, you can register extra targets programmatically.</p>\n<ol>\n<li>In your repo, create a new file at <code>.pypants/targets.py</code></li>\n<li>Define a top-level function called <code>register_extra_targets</code>. Within that function, instantiate your extra build targets and return a dictionary that maps package name to <code>BuildTarget</code>.</li>\n</ol>\n<p>For example, if you have several Alembic database folders:</p>\n<pre><span class=\"sd\">\"\"\"Module that defines extra pypants build targets\"\"\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pypants.config</span> <span class=\"kn\">import</span> <span class=\"n\">PROJECT_CONFIG</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypants.build_targets</span> <span class=\"kn\">import</span> <span class=\"n\">AlembicMigrationPackage</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">register_extra_targets</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s2\">\"pypants.build_targets.base.PythonPackage\"</span><span class=\"p\">]:</span>\n    <span class=\"sd\">\"\"\"Register extra targets specific to MyProject\"\"\"</span>\n    <span class=\"n\">targets</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Register task targets for Alembic database migration targets</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># * For migrations, this searches db/ looking for eny.py files. If it finds one,</span>\n    <span class=\"c1\">#   it means we've found an Alembic migration folder and can register a build</span>\n    <span class=\"c1\">#   target.</span>\n    <span class=\"n\">env_py_paths</span> <span class=\"o\">=</span> <span class=\"n\">PROJECT_CONFIG</span><span class=\"o\">.</span><span class=\"n\">config_dir_path</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s2\">\"db\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s2\">\"**/env.py\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">env_py_path</span> <span class=\"ow\">in</span> <span class=\"n\">env_py_paths</span><span class=\"p\">:</span>\n        <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"n\">env_py_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"_db\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"_\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">)</span>\n        <span class=\"n\">package_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"migrations-</span><span class=\"si\">{</span><span class=\"n\">alias</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">AlembicMigrationPackage</span><span class=\"p\">(</span>\n            <span class=\"n\">target_type</span><span class=\"o\">=</span><span class=\"s2\">\"code\"</span><span class=\"p\">,</span>\n            <span class=\"n\">build_template</span><span class=\"o\">=</span><span class=\"s2\">\"migration\"</span><span class=\"p\">,</span>\n            <span class=\"n\">top_dir_name</span><span class=\"o\">=</span><span class=\"s2\">\"db\"</span><span class=\"p\">,</span>\n            <span class=\"n\">package_dir_name</span><span class=\"o\">=</span><span class=\"n\">env_py_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">package_path</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">env_py_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">),</span>\n            <span class=\"n\">package_name</span><span class=\"o\">=</span><span class=\"n\">package_name</span><span class=\"p\">,</span>\n            <span class=\"n\">build_dir</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">env_py_path</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">),</span>\n            <span class=\"n\">extra_tags</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"migration\"</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">targets</span><span class=\"p\">[</span><span class=\"n\">package_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">targets</span>\n</pre>\n<h3>Package Generators</h3>\n<p>The <code>generate-package</code> command can be used to create a new package on disk. It sources package \"generators\" (folders that define the package boilerplate) from the <code>.pypants/generators</code> folder in your repo. To create a new package generator, copy one of the folders from <a href=\"examples/generators/\" rel=\"nofollow\"><code>examples/generators/</code></a> to <code>&lt;your repo&gt;/.pypants/generators/&lt;name&gt;</code> and modify it as needed. The generators use a tool called <a href=\"https://github.com/cookiecutter/cookiecutter\" rel=\"nofollow\">cookiecutter</a> to rendere templates.</p>\n\n          </div>"}, "last_serial": 7122017, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "55440983b5343c8090598b5aa4fe6ec7", "sha256": "fdd373c750aa3e75948186906e32363ac40db29a1d014fbb858d7923b90fdf7a"}, "downloads": -1, "filename": "pypants-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "55440983b5343c8090598b5aa4fe6ec7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 32772, "upload_time": "2020-01-03T04:36:57", "upload_time_iso_8601": "2020-01-03T04:36:57.186784Z", "url": "https://files.pythonhosted.org/packages/88/6a/d7c0461e35f60566d78eb99bfa1bce910a625b168d508b7087730ed0e02c/pypants-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b951f9396eceb5748f8f4243b101876", "sha256": "e649d5e0b46733d6aebfced60a64f3a64a021c5fa15bb1f186b5cc082d94a520"}, "downloads": -1, "filename": "pypants-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2b951f9396eceb5748f8f4243b101876", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27494, "upload_time": "2020-01-03T04:36:59", "upload_time_iso_8601": "2020-01-03T04:36:59.790783Z", "url": "https://files.pythonhosted.org/packages/d0/02/1c63302c9d61d30a27e0cd90e40bf136be2485c09e419183b1ad628be7dd/pypants-0.1.4.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "dca651e3a516cfedd6dcb761c439b454", "sha256": "8ee4c1c5ea7ae5d7bee6d79acd11a52e19655799eb034891501fc8fed016e176"}, "downloads": -1, "filename": "pypants-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "dca651e3a516cfedd6dcb761c439b454", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 32780, "upload_time": "2020-01-03T23:38:03", "upload_time_iso_8601": "2020-01-03T23:38:03.889083Z", "url": "https://files.pythonhosted.org/packages/c5/90/a5e4b117dd502a4698b4679df761089ac309814f551c04cc1c34bc6c5be0/pypants-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8dce369a98146b676fbb29195b8f1cc", "sha256": "50810a97dc2f8cf356966dce5a56123ab74ed353ca9de94c0a1245f04b9965b7"}, "downloads": -1, "filename": "pypants-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f8dce369a98146b676fbb29195b8f1cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27493, "upload_time": "2020-01-03T23:38:05", "upload_time_iso_8601": "2020-01-03T23:38:05.534591Z", "url": "https://files.pythonhosted.org/packages/11/92/9b311fc69c6590938cb6812c76fa95041130f4cef83f7cd07ed464b79551/pypants-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a48d79afa2a378004098a56d12ae0483", "sha256": "a9fd0dec6b60ea57f84eaaef45545129a54bb8e531edeef3d371561f271cfa9b"}, "downloads": -1, "filename": "pypants-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a48d79afa2a378004098a56d12ae0483", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 32767, "upload_time": "2020-01-06T18:46:49", "upload_time_iso_8601": "2020-01-06T18:46:49.236923Z", "url": "https://files.pythonhosted.org/packages/27/9f/93606091333ffe6e1553924256f5f0775b0fcb83252e74a4732e47d9bdf2/pypants-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fe6ab106ecdd6eb7128a4ce41653335", "sha256": "b9a2ce85908b56aad33adef27cea36e56fc511bf05800cb91d0025c6b83927ce"}, "downloads": -1, "filename": "pypants-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5fe6ab106ecdd6eb7128a4ce41653335", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27302, "upload_time": "2020-01-06T18:46:51", "upload_time_iso_8601": "2020-01-06T18:46:51.159886Z", "url": "https://files.pythonhosted.org/packages/f9/94/cb996a28b2c16358ecfa9f67ff089fc4f5399aaf4327e9507309903297a9/pypants-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c28ab1a5fefc0456367e04163e7df081", "sha256": "0cc2524d07cf829e862aff2c786986cdd1c298ef00ab1eb274347073dd596cae"}, "downloads": -1, "filename": "pypants-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c28ab1a5fefc0456367e04163e7df081", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33020, "upload_time": "2020-01-24T23:53:19", "upload_time_iso_8601": "2020-01-24T23:53:19.102454Z", "url": "https://files.pythonhosted.org/packages/a5/17/17c0f12280c64e1eb0f40a7ef1db3afc3306e4788d3666d1b8fafce20cb1/pypants-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e28427a8380fde55c285708577cff6ba", "sha256": "67932cc2bb6e1324248287f353e6374567871493076e6636b0943cc839bd089b"}, "downloads": -1, "filename": "pypants-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e28427a8380fde55c285708577cff6ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27324, "upload_time": "2020-01-24T23:53:21", "upload_time_iso_8601": "2020-01-24T23:53:21.318014Z", "url": "https://files.pythonhosted.org/packages/82/c6/428a8b7367caf2e9ff3bf4766e9cd8a80585b37f1df1c97fb13298d68888/pypants-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5ec33e5b8fcdfdfc7ea7ce93203cf704", "sha256": "bf4e027a74cac0819aa931bb1fcb127335676b1f50f5bd7c15291102af7c7b09"}, "downloads": -1, "filename": "pypants-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ec33e5b8fcdfdfc7ea7ce93203cf704", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33051, "upload_time": "2020-03-19T02:45:43", "upload_time_iso_8601": "2020-03-19T02:45:43.447713Z", "url": "https://files.pythonhosted.org/packages/b5/80/7b09fc7802c31e1d70fc98ae1dacaba6a5e202a9070b9654cc4fdff28c2f/pypants-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d7e44652c37d202cbb865a59a9fb05a", "sha256": "740e41298a3ef48a5229d0f74f895d4ee166996204c0205116a71b6c3c819216"}, "downloads": -1, "filename": "pypants-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5d7e44652c37d202cbb865a59a9fb05a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27607, "upload_time": "2020-03-19T02:45:44", "upload_time_iso_8601": "2020-03-19T02:45:44.828569Z", "url": "https://files.pythonhosted.org/packages/a6/d1/ef795150d70afa28d4856ad6f32ba6e6ddf29a8217bb61ac1ad76f1f6b89/pypants-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "52c8adab020691a88caab61012cbf1e0", "sha256": "d8abcb60e74fe60fef848eb7e04a328dceb6de1fa5e66bc6fd01929d5e57c333"}, "downloads": -1, "filename": "pypants-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "52c8adab020691a88caab61012cbf1e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33049, "upload_time": "2020-04-21T14:55:40", "upload_time_iso_8601": "2020-04-21T14:55:40.036032Z", "url": "https://files.pythonhosted.org/packages/d0/de/22322b58785b44deb3aa095e8cae5e4a219f229787904d5da7df22ab97dd/pypants-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfd24acf30787b053ac8dc5c2846b185", "sha256": "284cf65f1608c53b0137f345c4f795518205cd05fc99c8ed311f89d3af8cd317"}, "downloads": -1, "filename": "pypants-0.3.2.tar.gz", "has_sig": false, "md5_digest": "bfd24acf30787b053ac8dc5c2846b185", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27594, "upload_time": "2020-04-21T14:55:41", "upload_time_iso_8601": "2020-04-21T14:55:41.214365Z", "url": "https://files.pythonhosted.org/packages/08/a1/9e21a8b5ecb6d5cffe52ba0399440c5c65716f9e1f9075b7984869ea9336/pypants-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "c6830549153023a779e887e4bab4711e", "sha256": "c5f8f7fc98f9917b93d6699f30ae0420cb2f5d45cdf1bf3a6a293eea5eecb992"}, "downloads": -1, "filename": "pypants-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c6830549153023a779e887e4bab4711e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33101, "upload_time": "2020-04-21T18:15:54", "upload_time_iso_8601": "2020-04-21T18:15:54.920382Z", "url": "https://files.pythonhosted.org/packages/ef/f4/a932875917fc0d64ad0934d68d94faf648a482a54291cbf03a10ea9724be/pypants-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d23dc2ed6909ae5a13eb7d858f3be437", "sha256": "3933b1d03401e886c6d34c633446ff754d55dae1c42e41bb8437c3581af13739"}, "downloads": -1, "filename": "pypants-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d23dc2ed6909ae5a13eb7d858f3be437", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27718, "upload_time": "2020-04-21T18:15:56", "upload_time_iso_8601": "2020-04-21T18:15:56.169166Z", "url": "https://files.pythonhosted.org/packages/d3/2a/cdd18fd676088ac80c6121351069fcfc98b284b34c347e2cecaf4640479d/pypants-0.3.3.tar.gz", "yanked": false}], "0.3.4.dev1": [{"comment_text": "", "digests": {"md5": "e93adafd5f2e1e9d371cbf5ae0f71f9b", "sha256": "71eb496e6220f1db7118f90bed8010c12c8695b205a8c99295e238292d87b70e"}, "downloads": -1, "filename": "pypants-0.3.4.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "e93adafd5f2e1e9d371cbf5ae0f71f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33099, "upload_time": "2020-04-25T20:13:17", "upload_time_iso_8601": "2020-04-25T20:13:17.681723Z", "url": "https://files.pythonhosted.org/packages/53/e6/b366937133c0b20afe81c22e05615f422852c5549cec08ebd0a9cb425eee/pypants-0.3.4.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12c3a7b7ab1ca4e96843cb13a5526dba", "sha256": "96e1fe868aeb2b57de76cf7fc10b397a155ab04abdffaf5b68afd7760bfb7447"}, "downloads": -1, "filename": "pypants-0.3.4.dev1.tar.gz", "has_sig": false, "md5_digest": "12c3a7b7ab1ca4e96843cb13a5526dba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 28109, "upload_time": "2020-04-25T20:13:19", "upload_time_iso_8601": "2020-04-25T20:13:19.437988Z", "url": "https://files.pythonhosted.org/packages/38/e6/defb248513158a0a85914c58b7928c08056173e60857933196f7a3cebb19/pypants-0.3.4.dev1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "26c6b48786ffdcfb76173b761248a59c", "sha256": "9ee0ac2cf5bf7446e6d2a3fc6a0ea1e99d20a568141ac2384555b8267d6b2606"}, "downloads": -1, "filename": "pypants-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "26c6b48786ffdcfb76173b761248a59c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33033, "upload_time": "2020-04-28T18:00:23", "upload_time_iso_8601": "2020-04-28T18:00:23.236733Z", "url": "https://files.pythonhosted.org/packages/dd/15/d99ff8a9b988246eb71160d6ca3d5e1a1c3ada07247cc9bdb6024063446e/pypants-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af5ee3153e2e659e022b8f10e6048fe7", "sha256": "7e0caa1cad8aa21957f9b19e16a8f73a31c21e92097754cf0e568911bf09420a"}, "downloads": -1, "filename": "pypants-0.4.0.tar.gz", "has_sig": false, "md5_digest": "af5ee3153e2e659e022b8f10e6048fe7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27607, "upload_time": "2020-04-28T18:00:24", "upload_time_iso_8601": "2020-04-28T18:00:24.242926Z", "url": "https://files.pythonhosted.org/packages/dc/7c/68d2521f7f6b49fb88c3bad2932c2fb6f9a7fa07bed95c3fd54e8ac8181b/pypants-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26c6b48786ffdcfb76173b761248a59c", "sha256": "9ee0ac2cf5bf7446e6d2a3fc6a0ea1e99d20a568141ac2384555b8267d6b2606"}, "downloads": -1, "filename": "pypants-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "26c6b48786ffdcfb76173b761248a59c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 33033, "upload_time": "2020-04-28T18:00:23", "upload_time_iso_8601": "2020-04-28T18:00:23.236733Z", "url": "https://files.pythonhosted.org/packages/dd/15/d99ff8a9b988246eb71160d6ca3d5e1a1c3ada07247cc9bdb6024063446e/pypants-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af5ee3153e2e659e022b8f10e6048fe7", "sha256": "7e0caa1cad8aa21957f9b19e16a8f73a31c21e92097754cf0e568911bf09420a"}, "downloads": -1, "filename": "pypants-0.4.0.tar.gz", "has_sig": false, "md5_digest": "af5ee3153e2e659e022b8f10e6048fe7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 27607, "upload_time": "2020-04-28T18:00:24", "upload_time_iso_8601": "2020-04-28T18:00:24.242926Z", "url": "https://files.pythonhosted.org/packages/dc/7c/68d2521f7f6b49fb88c3bad2932c2fb6f9a7fa07bed95c3fd54e8ac8181b/pypants-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:56 2020"}