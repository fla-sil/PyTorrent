{"info": {"author": "Yi Ge", "author_email": "me@yige.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# videocr\n\nExtract hardcoded (burned-in) subtitles from videos using the [Tesseract](https://github.com/tesseract-ocr/tesseract) OCR engine with Python.\n\nInput a video with hardcoded subtitles:\n\n<p float=\"left\">\n  <img width=\"430\" alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/10210967/56873658-3b76dd00-6a34-11e9-95c6-cd6edc721f58.png\">\n  <img width=\"430\" alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/10210967/56873659-3b76dd00-6a34-11e9-97aa-2c3e96fe3a97.png\">\n</p>\n\n```python\n# example.py\n\nfrom videocr import get_subtitles\n\nif __name__ == '__main__':  # This check is mandatory for Windows.\n    print(get_subtitles('video.mp4', lang='chi_sim+eng', sim_threshold=70, conf_threshold=65))\n```\n\n`$ python3 example.py`\n\nOutput:\n\n``` \n0\n00:00:01,042 --> 00:00:02,877\n\u559d \u70b9 \u4ec0\u4e48 ? \nWhat can I get you?\n\n1\n00:00:03,044 --> 00:00:05,463\n\u6211 \u4e0d \u77e5\u9053\nUm, I'm not sure.\n\n2\n00:00:08,091 --> 00:00:10,635\n\u4f11\u95f2 \u65f6 \u5149 \u2026\nFor relaxing times, make it...\n\n3\n00:00:10,677 --> 00:00:12,595\n\u4e09 \u5f97 \u5229 \u65f6 \u5149\nBartender, Bob Suntory time.\n\n4\n00:00:14,472 --> 00:00:17,142\n\u6211 \u8981 \u4e00 \u676f \u4f0f\u7279 \u52a0\nUn, I'll have a vodka tonic.\n\n5\n00:00:18,059 --> 00:00:19,019\n\u8c22\u8c22\nLaughs Thanks.\n```\n\n## Performance\n\nThe OCR process is CPU intensive. It takes 3 minutes on my dual-core laptop to extract a 20 seconds video. More CPU cores will make it faster.\n\n## Installation\n\n1. Install [Tesseract](https://github.com/tesseract-ocr/tesseract/wiki) and make sure it is in your `$PATH`\n\n2. `$ pip install videocr`\n\n## API\n\n1. Return subtitle string in SRT format\n    ```python\n    get_subtitles(\n        video_path: str, lang='eng', time_start='0:00', time_end='',\n        conf_threshold=65, sim_threshold=90, use_fullframe=False)\n    ```\n\n2. Write subtitles to `file_path`\n    ```python\n    save_subtitles_to_file(\n        video_path: str, file_path='subtitle.srt', lang='eng', time_start='0:00', time_end='',\n        conf_threshold=65, sim_threshold=90, use_fullframe=False)\n    ```\n\n### Parameters\n\n- `lang`\n\n  The language of the subtitles. You can extract subtitles in almost any language. All language codes on [this page](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-400-november-29-2016) (e.g. `'eng'` for English) and all script names in [this repository](https://github.com/tesseract-ocr/tessdata_fast/tree/master/script) (e.g. `'HanS'` for simplified Chinese) are supported.\n  \n  Note that you can use more than one language, e.g. `lang='hin+eng'` for Hindi and English together. \n  \n  Language files will be automatically downloaded to your `~/tessdata`. You can read more about Tesseract language data files on their [wiki page](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files).\n\n- `conf_threshold`\n\n  Confidence threshold for word predictions. Words with lower confidence than this value will be discarded. The default value `65` is fine for most cases. \n\n  Make it closer to 0 if you get too few words in each line, or make it closer to 100 if there are too many excess words in each line.\n\n- `sim_threshold`\n\n  Similarity threshold for subtitle lines. Subtitle lines with larger [Levenshtein](https://en.wikipedia.org/wiki/Levenshtein_distance) ratios than this threshold will be merged together. The default value `90` is fine for most cases.\n\n  Make it closer to 0 if you get too many duplicated subtitle lines, or make it closer to 100 if you get too few subtitle lines.\n\n- `time_start` and `time_end`\n\n  Extract subtitles from only a clip of the video. The subtitle timestamps are still calculated according to the full video length.\n\n- `use_fullframe`\n\n  By default, only the bottom half of each frame is used for OCR. You can explicitly use the full frame if your subtitles are not within the bottom half of each frame.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/apm1467/videocr/archive/v0.1.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/apm1467/videocr", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "videocr", "package_url": "https://pypi.org/project/videocr/", "platform": "", "project_url": "https://pypi.org/project/videocr/", "project_urls": {"Download": "https://github.com/apm1467/videocr/archive/v0.1.6.tar.gz", "Homepage": "https://github.com/apm1467/videocr"}, "release_url": "https://pypi.org/project/videocr/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "Extract hardcoded subtitles from videos using machine learning", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>videocr</h1>\n<p>Extract hardcoded (burned-in) subtitles from videos using the <a href=\"https://github.com/tesseract-ocr/tesseract\" rel=\"nofollow\">Tesseract</a> OCR engine with Python.</p>\n<p>Input a video with hardcoded subtitles:</p>\n<p>\n  <img alt=\"screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6a6a297d4b0a390e34d6fa4691b0469aed35e27/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31303231303936372f35363837333635382d33623736646430302d366133342d313165392d393563362d6364366564633732316635382e706e67\" width=\"430\">\n  <img alt=\"screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28ac58d922c5948f280735804a4eb206b601ba5c/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31303231303936372f35363837333635392d33623736646430302d366133342d313165392d393761612d3263336539366665336139372e706e67\" width=\"430\">\n</p>\n<pre><span class=\"c1\"># example.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">videocr</span> <span class=\"kn\">import</span> <span class=\"n\">get_subtitles</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>  <span class=\"c1\"># This check is mandatory for Windows.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_subtitles</span><span class=\"p\">(</span><span class=\"s1\">'video.mp4'</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'chi_sim+eng'</span><span class=\"p\">,</span> <span class=\"n\">sim_threshold</span><span class=\"o\">=</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"n\">conf_threshold</span><span class=\"o\">=</span><span class=\"mi\">65</span><span class=\"p\">))</span>\n</pre>\n<p><code>$ python3 example.py</code></p>\n<p>Output:</p>\n<pre><code>0\n00:00:01,042 --&gt; 00:00:02,877\n\u559d \u70b9 \u4ec0\u4e48 ? \nWhat can I get you?\n\n1\n00:00:03,044 --&gt; 00:00:05,463\n\u6211 \u4e0d \u77e5\u9053\nUm, I'm not sure.\n\n2\n00:00:08,091 --&gt; 00:00:10,635\n\u4f11\u95f2 \u65f6 \u5149 \u2026\nFor relaxing times, make it...\n\n3\n00:00:10,677 --&gt; 00:00:12,595\n\u4e09 \u5f97 \u5229 \u65f6 \u5149\nBartender, Bob Suntory time.\n\n4\n00:00:14,472 --&gt; 00:00:17,142\n\u6211 \u8981 \u4e00 \u676f \u4f0f\u7279 \u52a0\nUn, I'll have a vodka tonic.\n\n5\n00:00:18,059 --&gt; 00:00:19,019\n\u8c22\u8c22\nLaughs Thanks.\n</code></pre>\n<h2>Performance</h2>\n<p>The OCR process is CPU intensive. It takes 3 minutes on my dual-core laptop to extract a 20 seconds video. More CPU cores will make it faster.</p>\n<h2>Installation</h2>\n<ol>\n<li>\n<p>Install <a href=\"https://github.com/tesseract-ocr/tesseract/wiki\" rel=\"nofollow\">Tesseract</a> and make sure it is in your <code>$PATH</code></p>\n</li>\n<li>\n<p><code>$ pip install videocr</code></p>\n</li>\n</ol>\n<h2>API</h2>\n<ol>\n<li>\n<p>Return subtitle string in SRT format</p>\n<pre><span class=\"n\">get_subtitles</span><span class=\"p\">(</span>\n    <span class=\"n\">video_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'eng'</span><span class=\"p\">,</span> <span class=\"n\">time_start</span><span class=\"o\">=</span><span class=\"s1\">'0:00'</span><span class=\"p\">,</span> <span class=\"n\">time_end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">conf_threshold</span><span class=\"o\">=</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"n\">sim_threshold</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">use_fullframe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Write subtitles to <code>file_path</code></p>\n<pre><span class=\"n\">save_subtitles_to_file</span><span class=\"p\">(</span>\n    <span class=\"n\">video_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">'subtitle.srt'</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'eng'</span><span class=\"p\">,</span> <span class=\"n\">time_start</span><span class=\"o\">=</span><span class=\"s1\">'0:00'</span><span class=\"p\">,</span> <span class=\"n\">time_end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">conf_threshold</span><span class=\"o\">=</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"n\">sim_threshold</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">use_fullframe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h3>Parameters</h3>\n<ul>\n<li>\n<p><code>lang</code></p>\n<p>The language of the subtitles. You can extract subtitles in almost any language. All language codes on <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-400-november-29-2016\" rel=\"nofollow\">this page</a> (e.g. <code>'eng'</code> for English) and all script names in <a href=\"https://github.com/tesseract-ocr/tessdata_fast/tree/master/script\" rel=\"nofollow\">this repository</a> (e.g. <code>'HanS'</code> for simplified Chinese) are supported.</p>\n<p>Note that you can use more than one language, e.g. <code>lang='hin+eng'</code> for Hindi and English together.</p>\n<p>Language files will be automatically downloaded to your <code>~/tessdata</code>. You can read more about Tesseract language data files on their <a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Data-Files\" rel=\"nofollow\">wiki page</a>.</p>\n</li>\n<li>\n<p><code>conf_threshold</code></p>\n<p>Confidence threshold for word predictions. Words with lower confidence than this value will be discarded. The default value <code>65</code> is fine for most cases.</p>\n<p>Make it closer to 0 if you get too few words in each line, or make it closer to 100 if there are too many excess words in each line.</p>\n</li>\n<li>\n<p><code>sim_threshold</code></p>\n<p>Similarity threshold for subtitle lines. Subtitle lines with larger <a href=\"https://en.wikipedia.org/wiki/Levenshtein_distance\" rel=\"nofollow\">Levenshtein</a> ratios than this threshold will be merged together. The default value <code>90</code> is fine for most cases.</p>\n<p>Make it closer to 0 if you get too many duplicated subtitle lines, or make it closer to 100 if you get too few subtitle lines.</p>\n</li>\n<li>\n<p><code>time_start</code> and <code>time_end</code></p>\n<p>Extract subtitles from only a clip of the video. The subtitle timestamps are still calculated according to the full video length.</p>\n</li>\n<li>\n<p><code>use_fullframe</code></p>\n<p>By default, only the bottom half of each frame is used for OCR. You can explicitly use the full frame if your subtitles are not within the bottom half of each frame.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6306759, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "0472f0cf6ac2577669fb7e4684fd6cd2", "sha256": "5faeed7faf2c40bb17b70baba15b3ca3eae0aed163bc3ea931041403e32265d9"}, "downloads": -1, "filename": "videocr-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0472f0cf6ac2577669fb7e4684fd6cd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6247, "upload_time": "2019-04-29T23:18:35", "upload_time_iso_8601": "2019-04-29T23:18:35.547376Z", "url": "https://files.pythonhosted.org/packages/7f/f9/8ba9872f41423b66fa86aadb2bd45ce559c9e1d8908f3d4be1d13354c6d6/videocr-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c0b7f0da1c83cbdecacf164ae1ec4506", "sha256": "4d9d4559e2e5ff504a62d31cf3cebb64e136f116145cd6a7131073672a31ff3e"}, "downloads": -1, "filename": "videocr-0.1.5.tar.gz", "has_sig": false, "md5_digest": "c0b7f0da1c83cbdecacf164ae1ec4506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6240, "upload_time": "2019-05-18T19:41:31", "upload_time_iso_8601": "2019-05-18T19:41:31.012787Z", "url": "https://files.pythonhosted.org/packages/11/a4/b16cae7c37e3d29b18daf27f82919dce549dc22a4a48692e5eed36419fb6/videocr-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "396039d7e04004bd84eb24779358d6b5", "sha256": "c3484f7d42b8ba7e4902300feefc0e02e2a5b19fb3bfab05576bc3fd197791b2"}, "downloads": -1, "filename": "videocr-0.1.6.tar.gz", "has_sig": false, "md5_digest": "396039d7e04004bd84eb24779358d6b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6513, "upload_time": "2019-12-15T14:58:47", "upload_time_iso_8601": "2019-12-15T14:58:47.493701Z", "url": "https://files.pythonhosted.org/packages/cb/c4/bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf/videocr-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "396039d7e04004bd84eb24779358d6b5", "sha256": "c3484f7d42b8ba7e4902300feefc0e02e2a5b19fb3bfab05576bc3fd197791b2"}, "downloads": -1, "filename": "videocr-0.1.6.tar.gz", "has_sig": false, "md5_digest": "396039d7e04004bd84eb24779358d6b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6513, "upload_time": "2019-12-15T14:58:47", "upload_time_iso_8601": "2019-12-15T14:58:47.493701Z", "url": "https://files.pythonhosted.org/packages/cb/c4/bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf/videocr-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:16 2020"}