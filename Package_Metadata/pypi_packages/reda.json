{"info": {"author": "Maximilian Weigand and Florian M. Wagner", "author_email": "mweigand@geo.uni-bonn.de, wagner@geo.uni-bonn.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## REDA - Reproducible Electrical Data Analysis\n\n[![Build Status](https://travis-ci.org/geophysics-ubonn/reda.svg?branch=master)](https://travis-ci.org/geophysics-ubonn/reda)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Join the chat at https://gitter.im/geophysics-ubonn/reda](https://badges.gitter.im/geophysics-ubonn/reda.svg)](https://gitter.im/geophysics-ubonn/reda?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/geophysics-ubonn/try-reda/master?filepath=reda_test.ipynb)\n\n*Latest release: 0.1.4 (14. November 2019)*\n\nREDA is a scientific Python library for reproducible geoelectrical data\nanalysis. It aims to provide a unified interface for common and advanced data\nprocessing steps while bridging the gap between a multitude of geoelectric\nmeasurement devices and inversion codes used across the geophysical community.\nIt offers functionality to import, analyze, process, visualize, and export\ngeoelectrical data with particular emphasis on time-lapse functionality and\nreproducibility. The latter is realized in the form of a logging system, which\nkeeps track of each individual processing step applied to particular data set\nin a human-readable journal. REDA is platform compatible, tested and\nopen-source under the permissive MIT license. Any contributions from the\ncommunity are highly welcome.\n\nREDA is a work-in-progress. Please contact us if you wish to use it or miss a\nspecific functionality. Please see the\n[status page](https://geophysics-ubonn.github.io/reda/about.html#status-of-reda) for more\ninformation.\n\n### Installation\n\nInstall latest release from PyPI (https://pypi.org/project/reda/):\n\n    pip install reda\n\nInstall current development version from git:\n\n```bash\ngit clone https://github.com/geophysics-ubonn/reda\ncd reda\n\n# 1) Installing dependencies with pip\npip install -r requirements.txt\n# 2) Installing dependencies with conda\nconda install --file requirements.txt\n\npython setup.py install\n```\n\n### Documentation\n\nAn online version of the docs can be found here:\n<https://geophysics-ubonn.github.io/reda>\n\n### Contributing\n\nWe look forward to any type of contributions:\n\n* code contribution\n* example contributions\n* documentation help\n* issuing bug reports\n\nIf in doubt, use the gitter chat to contact us (click the Gitter badge above to\njoin the chat).\n\n<!--\nElectrical geophysical data is increasingly measured in time-lapse setups,\nwhich leads, in addition to the common use of multi-channel systems which are\ncapable of capturing the full time-series of either time-domain or frequency\ndomain systems, to a large number of datasets. These datasets are to be\nanalyzed with respect to various properties. These are, among others, outlier\ndetection, normal-reciprocal analysis for error estimation and quality control,\nand coupling effects.\n\nWhile electrical resistivity tomography (ERT) measures real transfer\nresistances using a large number of four-point spreads, tomographic IP\nmeasurements additionally capture the induced polarization (IP) effect in terms\nof a decay curve. Measurements in the frequency domain capture the resistance\nand polarizability for a wide range of frequencies, thereby capturing spectral\ninduced polarization (SIP) signatures. When SIP signatures are recorded at a\nlarge number of different electrode configurations with the aim of a tomography\nanalysis, the method is often referred to as electrical impedance tomography\n(EIT). Hereby some ambiguity exists, as EIT can refer to tomographic\nmeasurements of the complex impedance (resistance plus polarization) in the\nfrequency domain for only one frequency or for a whole frequency range.\nSometimes multi-frequency measurements are thus referred to as sEIT\nmeasurements (spectral electrical impedance tomography).\n\nThe dimensionality of the data that is nowadays captures increases steadily,\nwith new dimensions being measurement frequency, time step in a time-lapse\nmonitoring setup and third dimension. This requires the adaptation of existing\nand new analysis procedures to these N-dimensional datasets. Established\nprocedures are hereby commonly based on plain text files or 2-dimensional data array\nrepresentations (e.g., Matlab matrices, columns denote electrode positions and\nmeasurements, row denote measurements at various four-point spreads). Here, new\napproaches are required to keep data analysis efforts at similar levels,\ncompared to \"established\" work flows. Luckily, the last years have seen the\nemergence of suitable, free, and advanced (Python) libraries that can be used\nwithout much adaptation for these purposes. The pandas DataFrame object allows\nthe storage and manipulation of N-dimensional datasets. We here propose to\nbuild a framework for the import, storage, and modification of geoelectrical\ndatasets based upon this established tool, and amend it with domain-specific\nfunctionality and handling instructions.\n\nAll these different types of electrical measurements have certain features in\ncommon, and certain specific properties, which also leads to some common\nanalysis/display procedures, and some specialized ones.\n\nThis software package aims at providing the following programmatical structures\nand procedures:\n\n-   provide a pure-Python implementation of data structures that can hold the\n    various datasets described above.\n\n-   provide a tested set of import functions for the common measurement device\n    formats\n\n-   provide a tested set of output functions which export to common analysis\n    software such as tomographic inversion packages.\n\n-   provide a Python based software framework for the general analysis of\n    electrical raw measurement data. We refer to waw measurement data as the data\n    produced by the geoeletrical measurement devices before any kind of\n    transformation such as tomographic analysis.\n\n    A history is provided for common data selection (i.e., filtering) procedures,\n    which provides a means to later account for all changes applied to the raw data\n    (i.e., providing reproducibility of the data filtering process).\n\n-   Provide ground work for text-based output formats that could be used for\n    archiving purposes. However, defining and maintaining suitable file formats\n    for the long-term storage of measurement data is a huge and complex task.\n    Therefore, the data formats presented here are meant only as a starting base\n    for the development and discussion of corresponding file formats.\n\n-   Provide open implementations of common features of geoeletrical data\n    processing, such as error model estimations for ERT and sEIT data sets.\n\n-   The software is provided under an open-source licence (GPL-3), to facilitate\n    and encourage contributions from the community\n\n-   Only optional dependencies on external packages\n\n## Work environment\n\nCreate the work environment using the following commands: ::\n\n    mkvirtualenv --python /usr/bin/python3 edf\n    pip install --upgrade pip\n    workon edf\n    pip install -r requirements.txt\n    pip install ipython\n\n    ipython3\n\n## Roadmap\n\nMilestones for beta versions of the EDF framework. For detailed TODO items,\nplease refer to the TODO section down below.\n\n### 0.1\n\n-   proof-of-concept for the ERT container\n-   proof-of-concept for the SIP container\n-   importers: Syscal, ABEM (text), SIP-04\n-   plots: histograms, pseudosections (regular, normal-vs-reciprocal), decay\n    curves\n\n### 0.1.1\n\n-   proof-of-concept for the EIT container\n-   saving of containers to file\n\n### 0.1.2\n\n-   logfile/log of applied filters/apply filters to other data sets\n\n## TODO\n\n-   add a 'switch_polarity' option to the containers (do we need K factors then?)\n\n-   implement saving of containers using pytables and HDF5 files\n\n-   make the built-in plot functions aware of the various additional dimensions\n    such as timestep, frequency, etc. Perhaps via a 'split_into_dimensions' switch?\n\n-   implement the following containers:\n\n        \t* ERT\n        \t* IPT (IP-tomography)\n        \t* SIP\n        \t* EIT\n\n-   containers need a function to strip all non-essential data, i.e., columns\n    specific to a device, but not required by the container base format\n\n-   implement saving of containers\n\n        \t* including processing steps\n\n-   each container should contain functionality to transform simplified column\n    names (for easy handling in queries) to extended, self explanatory columns,\n    e.g.:\n\n        \t'R' -> '|Z|_[Ohmm]'\n        \t'phi' -> 'phase_[mrad]'\n\n-   implement pseudosections\n\n        \t* automatically determine type of dataset: dipole-dipole, Wenner,\n        \t  schlumberger, mixed\n        \t* implement specific pseudosections for DD and Wenner\n        \t* not sure how to manage mixed data sets. We should, however, provide a\n        \t  warning in those cases\n        \t* for all keys required by the containers\n\n-   implement the history function for specified functionality\n\n        \t* how to store the history for later usage? JSON?\n\n-   error models:\n\n        \t* magnitude error models: K\u00f6stel et al\n        \t* SIP error models: Flores Orosco et al\n\n-   SIP plots\n\n        \t* one spectrum\n        \t* normal/reciprocal spectrum\n\n-   normal-reciprocal plots:\n\n        \t* K vs R_n\n        \t* K vs R_r\n        \t* K vs (R_n - R_r)\n        \t* K vs rho_n\n        \t* K vs rho_r\n        \t* K vs (rho_n - rho_r)\n\n\n-   export to RES2DINV\n\n-   Syscal: import decay curve\n\n-   ERT container:\n\n        \t* save to CRTomo\n        \t* filter function with queue for later reevaluation\n\n-   device importers\n\n        \t* EIT40 (Medusa)\n        \t* SIP-04\n        \t* Syscal\n        \t* Radic SIP-256c\n        \t* ABEM\n        \t* Geotom\n        \t* DAC1\n        \t* Radic Fuchs\n        \t* Zonge\n\n-   time-domain analysis after Olsson et al. 2016 (mainly ABEM data)\n\n-   prepare the iSAT data as an example (Syscal)\n\n-   reda.utils.filter_config_types:\n\n        \t* create tests for mixed configurations\n\n## Metadata for Containers\n\n### separate information\n\nElectrode positions and assignments\n\n### Base entries\n\n-   time\n-   A\n-   B\n-   M\n-   N\n-   Z\n-   Y/Y'/Y'' &lt;- computed from Z\n-   K\n-   rho/sigma/sigma'/sigma''/phi &lt;- computed from Z,K\n-   deltaR\n-   deltaPhi\n-   U\n-   I\n\n## Additional dimensions\n\n-   frequencies\n-   timestep\n-   projects\n-   experiments\n-   profile\n-   datetime\n-   measurement_nr\n-   quadpole_nr\n\n## Open Questions\n\n-   how to approach normal/reciprocal data?\n\n        \t* we have a default DataFrame df, which points to dfn (normal data).\n        \t  Additionally, dfr can be used to split data into normal (dfn) and (dfr)\n        dataframes.\n\n-   how to incorporate repeated measurements\n-   errors can be computed using error propagation. However, if not all required\n    errors (i.e., only phase, no magnitude errors) are provided, then this must\n    end in all other errors as nan values.\n-   dimensionality should not be a problem if we use a pandas.DataFrame with\n    multiindexing\n\n## Test activities\n\n-   select measurement nr 3\n-   show quadpole nr 2\n-   show all measurements with A=1, B=2, M=4, N=3\n-   plot R of measurement nr 3, quadpole 6\n-   filter all measurements with R &lt; 0.08 Ohm\n\n## Pytables\n\nOn Debian systems:\n\nCFLAGS=\"-I/usr/lib/openmpi/include/\" pip install tables -->", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/geophysics-ubonn/reda", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "reda", "package_url": "https://pypi.org/project/reda/", "platform": "", "project_url": "https://pypi.org/project/reda/", "project_urls": {"Homepage": "https://github.com/geophysics-ubonn/reda"}, "release_url": "https://pypi.org/project/reda/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Reproducible Electrical Data Analysis", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>REDA - Reproducible Electrical Data Analysis</h2>\n<p><a href=\"https://travis-ci.org/geophysics-ubonn/reda\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65a2c38e9228907f014a45614249ea5a10939699/68747470733a2f2f7472617669732d63692e6f72672f67656f706879736963732d75626f6e6e2f726564612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://gitter.im/geophysics-ubonn/reda?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/geophysics-ubonn/reda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/542a621edbb032da0b0dcc4b0d3de55760548ee6/68747470733a2f2f6261646765732e6769747465722e696d2f67656f706879736963732d75626f6e6e2f726564612e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/geophysics-ubonn/try-reda/master?filepath=reda_test.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86eb116bc9e98bea90d9454762d384d9cae5055c/68747470733a2f2f6d7962696e6465722e6f72672f62616467652e737667\"></a></p>\n<p><em>Latest release: 0.1.4 (14. November 2019)</em></p>\n<p>REDA is a scientific Python library for reproducible geoelectrical data\nanalysis. It aims to provide a unified interface for common and advanced data\nprocessing steps while bridging the gap between a multitude of geoelectric\nmeasurement devices and inversion codes used across the geophysical community.\nIt offers functionality to import, analyze, process, visualize, and export\ngeoelectrical data with particular emphasis on time-lapse functionality and\nreproducibility. The latter is realized in the form of a logging system, which\nkeeps track of each individual processing step applied to particular data set\nin a human-readable journal. REDA is platform compatible, tested and\nopen-source under the permissive MIT license. Any contributions from the\ncommunity are highly welcome.</p>\n<p>REDA is a work-in-progress. Please contact us if you wish to use it or miss a\nspecific functionality. Please see the\n<a href=\"https://geophysics-ubonn.github.io/reda/about.html#status-of-reda\" rel=\"nofollow\">status page</a> for more\ninformation.</p>\n<h3>Installation</h3>\n<p>Install latest release from PyPI (<a href=\"https://pypi.org/project/reda/\" rel=\"nofollow\">https://pypi.org/project/reda/</a>):</p>\n<pre><code>pip install reda\n</code></pre>\n<p>Install current development version from git:</p>\n<pre>git clone https://github.com/geophysics-ubonn/reda\n<span class=\"nb\">cd</span> reda\n\n<span class=\"c1\"># 1) Installing dependencies with pip</span>\npip install -r requirements.txt\n<span class=\"c1\"># 2) Installing dependencies with conda</span>\nconda install --file requirements.txt\n\npython setup.py install\n</pre>\n<h3>Documentation</h3>\n<p>An online version of the docs can be found here:\n<a href=\"https://geophysics-ubonn.github.io/reda\" rel=\"nofollow\">https://geophysics-ubonn.github.io/reda</a></p>\n<h3>Contributing</h3>\n<p>We look forward to any type of contributions:</p>\n<ul>\n<li>code contribution</li>\n<li>example contributions</li>\n<li>documentation help</li>\n<li>issuing bug reports</li>\n</ul>\n<p>If in doubt, use the gitter chat to contact us (click the Gitter badge above to\njoin the chat).</p>\n\n\n          </div>"}, "last_serial": 6135540, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "579426e6e283c8476037aaa486fb8512", "sha256": "019c85e1537a1812596f6ceeb8aa4d56c89cffc9d41cd4ee5412f3bd9f8470ff"}, "downloads": -1, "filename": "reda-0.1.0.tar.gz", "has_sig": false, "md5_digest": "579426e6e283c8476037aaa486fb8512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35450, "upload_time": "2017-11-12T09:01:44", "upload_time_iso_8601": "2017-11-12T09:01:44.199168Z", "url": "https://files.pythonhosted.org/packages/24/da/f60ed98044578c6d6088aff3205458cdecbb72aee111b16277b63856c2b1/reda-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "26a4630478929546d51bd4328a3dd895", "sha256": "9e2bdc0443b451e25d5c0e21e84220fcb42aca3b0aa86b151fb77a2faf552776"}, "downloads": -1, "filename": "reda-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "26a4630478929546d51bd4328a3dd895", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71321, "upload_time": "2018-07-04T14:43:38", "upload_time_iso_8601": "2018-07-04T14:43:38.411882Z", "url": "https://files.pythonhosted.org/packages/17/b2/f6f2de55e4deb922533fbf8e36d9bb60e3d2db7c753840d258649f0d97ff/reda-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fad0f5bb4c5c9b31bd6fd3585a72ede1", "sha256": "f80ed85758616db93170dd5b5b0a916dab6f5736e8e7bc04a8bf03fef7c000ba"}, "downloads": -1, "filename": "reda-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fad0f5bb4c5c9b31bd6fd3585a72ede1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53668, "upload_time": "2018-07-04T14:43:39", "upload_time_iso_8601": "2018-07-04T14:43:39.799204Z", "url": "https://files.pythonhosted.org/packages/6d/50/45e6a65897c48cf939362545f8c919b1cefd805222a589af9a790e758edc/reda-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "826ee02a8a3b2616bd706a740aa0cde5", "sha256": "7ac24a1259a633177537a53378c2f606d1c073ce8d86dc57c1ec9f8db7aea898"}, "downloads": -1, "filename": "reda-0.1.3.tar.gz", "has_sig": false, "md5_digest": "826ee02a8a3b2616bd706a740aa0cde5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83611, "upload_time": "2019-01-29T11:16:22", "upload_time_iso_8601": "2019-01-29T11:16:22.238669Z", "url": "https://files.pythonhosted.org/packages/8e/fa/5725ccc80dfc782358f5aba66e7ccf4ada5adb75e55ece15a75e8c3a71ee/reda-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1f8ec64a5cd0e11065884e0d04116db7", "sha256": "619142070c8888010f21c4463b4aa1c27b3da5a33178981f60694210066914de"}, "downloads": -1, "filename": "reda-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1f8ec64a5cd0e11065884e0d04116db7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 944458, "upload_time": "2019-11-14T09:08:52", "upload_time_iso_8601": "2019-11-14T09:08:52.736822Z", "url": "https://files.pythonhosted.org/packages/fc/b0/6062d67539944511572573fcb5ce26989a51efb8189c906d5dabd2fd70f5/reda-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f8ec64a5cd0e11065884e0d04116db7", "sha256": "619142070c8888010f21c4463b4aa1c27b3da5a33178981f60694210066914de"}, "downloads": -1, "filename": "reda-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1f8ec64a5cd0e11065884e0d04116db7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 944458, "upload_time": "2019-11-14T09:08:52", "upload_time_iso_8601": "2019-11-14T09:08:52.736822Z", "url": "https://files.pythonhosted.org/packages/fc/b0/6062d67539944511572573fcb5ce26989a51efb8189c906d5dabd2fd70f5/reda-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:02 2020"}