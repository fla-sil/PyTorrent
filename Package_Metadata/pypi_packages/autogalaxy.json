{"info": {"author": "James Nightingale and Richard Hayes", "author_email": "james.w.nightingale@durham.ac.uk", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Physics"], "description": "PyAutoGalaxy\n==========\n\nThe study of a galaxy's light, structure and dynamics is at the heart of modern day Astrophysical research.\n**PyAutoGalaxy** makes it simple to model galaxies, like this oidkne:\n\nMissing for now :(\n\nExample\n-------\n\nWith **PyAutoGalaxy**, you can begin modeling a galaxy in just a couple of minutes. The example below demonstrates a\nsimple analysis which fits a galaxy's light.\n\n.. code-block:: python\n\n    import autofit as af\n    import autogalaxy as ag\n\n    import os\n\n    # In this example, we'll fit an image of a single galaxy .\n    dataset_path = '{}/../data/'.format(os.path.dirname(os.path.realpath(__file__)))\n\n    galaxy_name = 'example_galaxy'\n\n    # Use the relative path to the dataset to load the imaging data.\n    imaging = ag.Imaging.from_fits(\n        image_path=dataset_path + galaxy_name + '/image.fits',\n        psf_path=dataset_path+galaxy_name+'/psf.fits',\n        noise_map_path=dataset_path+galaxy_name+'/noise_map.fits',\n        pixel_scales=0.1)\n\n    # Create a mask for the data, which we setup as a 3.0\" circle.\n    mask = ag.Mask.circular(shape_2d=imaging.shape_2d, pixel_scales=imaging.pixel_scales, radius=3.0)\n\n    # We model our galaxy using a light profile (an elliptical Sersic).\n    light_profile = ag.lp.EllipticalSersic\n\n    # To setup our model galaxy, we use the GalaxyModel class, which represents a galaxy whose parameters\n    # are free & fitted for by PyAutoGalaxy. The galaxy is also assigned a redshift.\n    galaxy_model = ag.GalaxyModel(redshift=1.0, light=light_profile)\n\n    # To perform the analysis we set up a phase, which takes our galaxy model & fits its parameters using a non-linear\n    # search (in this case, MultiNest).\n    phase = ag.PhaseImaging(\n        galaxies=dict(galaxy=galaxy_model),\n        phase_name='example/phase_example',\n        non_linear_class=af.MultiNest\n        )\n\n    # We pass the imaging data and mask to the phase, thereby fitting it with the galaxy model & plot the resulting fit.\n    result = phase.run(data=imaging, mask=mask)\n    ag.plot.FitImaging.subplot_fit_imaging(fit=result.max_log_likelihood_fit)\n\nFeatures\n--------\n\n**PyAutoGalaxy's** advanced modeling features include:\n\n- **Profiles** - Use light & mass profiles to make galaxies & perform studies of galaxy light, structure and dynamics.\n- **Pipelines** - Write automated analysis pipelines to fit complex models to large samples of galaxies.\n- **Pixelizations** - Reconstruct complex galaxy morphologies on a variety of pixel-grids.\n- **Adaption** - Adapt the galaxy analysis to the features of the observed galaxy imaging.\n- **Interferometry** - Model radio / sub-mm interferometer data directly in the uv-plane.\n- **Visualization** - Custom visualization libraries for plotting physical galaxying quantities & modeling results.\n- **PyAutoFit** - Perform fits using many non-linear searches (MCMC, Nested Sampling) and manipulate large result outputs\n                  via the probablistic programming language `PyAutoFit <https://github.com/rhayes777/PyAutoFit>`_\n\nHowToGalaxy\n---------\n\nIncluded with **PyAutoGalaxy** is the **HowToGalaxy** lecture series, which provides an introduction to galaxy modeling \nwith **PyAutoGalaxy**. It can be found in the workspace & consists of 5 chapters:\n\n- **Introduction** - An introduction to galaxy fitting & **PyAutoGalaxy**.\n- **Galaxy Modeling** - How to perform model fits of galaxies, including a primer on Bayesian non-linear analysis.\n- **Pipelines** - How to build model-fitting pipelines & tailor them to your own science case.\n- **Inversions** - How to perform pixelized reconstructions of a galaxy.\n- **Hyper-Mode** - How to use **PyAutoGalaxy** advanced modeling features that adapt the model to the galaxy being analysed.\n\nWorkspace\n---------\n\n**PyAutoGalaxy** comes with a workspace, which can be found `here <https://github.com/Jammy2211/autogalaxy_workspace>`_ & which includes:\n\n- **Aggregator** - Manipulate large suites of modeling results via Jupyter notebooks, using **PyAutoFit**'s in-built results database.\n- **API** - Illustrative scripts of the **PyAutoGalaxy** interface, for examples on how to make plots, perform galaxy calculations, etc.\n- **Config** - Configuration files which customize **PyAutoGalaxy**'s behaviour.\n- **Dataset** - Where data is stored, including example datasets distributed with **PyAutoGalaxy**.\n- **HowToGalaxy** - The **HowToGalaxy** lecture series.\n- **Output** - Where the **PyAutoGalaxy** analysis and visualization are output.\n- **Pipelines** - Example pipelines for modeling galaxies.\n- **Preprocess** - Tools to preprocess data before an analysis (e.g. convert units, create masks).\n- **Quick Start** - A quick start guide, so you can begin modeling galaxies within hours.\n- **Runners** - Scripts for running **PyAutoGalaxy** pipelines.\n- **Simulators** - Scripts for simulating galaxy datasets with **PyAutoGalaxy**.\n\nSlack\n-----\n\nWe're building a **PyAutoGalaxy** community on Slack, so you should contact us on our\n`Slack channel <https://pyautogalaxy.slack.com/>`_ before getting started. Here, I will give you the latest updates on\nthe software & discuss how best to use **PyAutoGalaxy** for your science case.\n\nUnfortunately, Slack is invitation-only, so first send me an `email <https://github.com/Jammy2211>`_ requesting an\ninvite.\n\nDocumentation & Installation\n----------------------------\n\nThe PyAutoGalaxy documentation can be found at our `readthedocs  <https://pyautogalaxy.readthedocs.io/en/master>`_,\nincluding instructions on `installation <https://pyautogalaxy.readthedocs.io/en/master/installation.html>`_.\n\nContributing\n------------\n\nIf you have any suggestions or would like to contribute please get in touch.\n\nPapers\n------\n\nA list of published articles using **PyAutoGalaxy** can be found\n`here <https://pyautogalaxy.readthedocs.io/en/master/papers.html>`_ .\n\nCredits\n-------\n\n**Developers**:\n\n`James Nightingale <https://github.com/Jammy2211>`_ - Lead developer & PyAutoGalaxy guru.\n\n`Richard Hayes <https://github.com/rhayes777>`_ - Lead developer &\n`PyAutoFit <https://github.com/rhayes777/PyAutoFit>`_ guru.\n\n`Ashley Kelly <https://github.com/AshKelly>`_ - Developer of `pyquad <https://github.com/AshKelly/pyquad>`_ for fast\nnumerical integration.\n\n`Amy Etherington <https://github.com/amyetherington>`_ - Mass profile calcluation methods.\n\n`Xiaoyue Cao <https://github.com/caoxiaoyue>`_ - Analytic Ellipitcal Power-Law Calculations.\n\nQiuhan He  - NFW Profile Calculations.\n\n`Nan Li <https://github.com/linan7788626>`_ - Docker integration & support.\n\n**Code Donors**:\n\nMattia Negrello - Visibility models in the uv-plane via direct Fourier transforms.\n\n`Andrea Enia <https://github.com/AndreaEnia>`_ - Voronoi source-plane plotting tools.\n\n`Aristeidis Amvrosiadis <https://github.com/Sketos>`_ - ALMA imaging data loading.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jammy2211/PyAutoAstro", "keywords": "cli", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "autogalaxy", "package_url": "https://pypi.org/project/autogalaxy/", "platform": "", "project_url": "https://pypi.org/project/autogalaxy/", "project_urls": {"Homepage": "https://github.com/jammy2211/PyAutoAstro"}, "release_url": "https://pypi.org/project/autogalaxy/0.9.0/", "requires_dist": ["astropy (>=3.0.0)", "autoarray (==0.10.6)", "autofit (==0.57.2)", "colossus (==1.2.14)", "numpy (>=1.18.0)", "pyquad (==0.0.4.0)", "coverage ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "", "summary": "Astro modelling", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyAutoGalaxy</h1>\n<p>The study of a galaxy's light, structure and dynamics is at the heart of modern day Astrophysical research.\n<strong>PyAutoGalaxy</strong> makes it simple to model galaxies, like this oidkne:</p>\n<p>Missing for now :(</p>\n<h2>Example</h2>\n<p>With <strong>PyAutoGalaxy</strong>, you can begin modeling a galaxy in just a couple of minutes. The example below demonstrates a\nsimple analysis which fits a galaxy's light.</p>\n<p>.. code-block:: python</p>\n<pre><code>import autofit as af\nimport autogalaxy as ag\n\nimport os\n\n# In this example, we'll fit an image of a single galaxy .\ndataset_path = '{}/../data/'.format(os.path.dirname(os.path.realpath(__file__)))\n\ngalaxy_name = 'example_galaxy'\n\n# Use the relative path to the dataset to load the imaging data.\nimaging = ag.Imaging.from_fits(\n    image_path=dataset_path + galaxy_name + '/image.fits',\n    psf_path=dataset_path+galaxy_name+'/psf.fits',\n    noise_map_path=dataset_path+galaxy_name+'/noise_map.fits',\n    pixel_scales=0.1)\n\n# Create a mask for the data, which we setup as a 3.0\" circle.\nmask = ag.Mask.circular(shape_2d=imaging.shape_2d, pixel_scales=imaging.pixel_scales, radius=3.0)\n\n# We model our galaxy using a light profile (an elliptical Sersic).\nlight_profile = ag.lp.EllipticalSersic\n\n# To setup our model galaxy, we use the GalaxyModel class, which represents a galaxy whose parameters\n# are free &amp; fitted for by PyAutoGalaxy. The galaxy is also assigned a redshift.\ngalaxy_model = ag.GalaxyModel(redshift=1.0, light=light_profile)\n\n# To perform the analysis we set up a phase, which takes our galaxy model &amp; fits its parameters using a non-linear\n# search (in this case, MultiNest).\nphase = ag.PhaseImaging(\n    galaxies=dict(galaxy=galaxy_model),\n    phase_name='example/phase_example',\n    non_linear_class=af.MultiNest\n    )\n\n# We pass the imaging data and mask to the phase, thereby fitting it with the galaxy model &amp; plot the resulting fit.\nresult = phase.run(data=imaging, mask=mask)\nag.plot.FitImaging.subplot_fit_imaging(fit=result.max_log_likelihood_fit)\n</code></pre>\n<h2>Features</h2>\n<p><strong>PyAutoGalaxy's</strong> advanced modeling features include:</p>\n<ul>\n<li><strong>Profiles</strong> - Use light &amp; mass profiles to make galaxies &amp; perform studies of galaxy light, structure and dynamics.</li>\n<li><strong>Pipelines</strong> - Write automated analysis pipelines to fit complex models to large samples of galaxies.</li>\n<li><strong>Pixelizations</strong> - Reconstruct complex galaxy morphologies on a variety of pixel-grids.</li>\n<li><strong>Adaption</strong> - Adapt the galaxy analysis to the features of the observed galaxy imaging.</li>\n<li><strong>Interferometry</strong> - Model radio / sub-mm interferometer data directly in the uv-plane.</li>\n<li><strong>Visualization</strong> - Custom visualization libraries for plotting physical galaxying quantities &amp; modeling results.</li>\n<li><strong>PyAutoFit</strong> - Perform fits using many non-linear searches (MCMC, Nested Sampling) and manipulate large result outputs\nvia the probablistic programming language <code>PyAutoFit &lt;https://github.com/rhayes777/PyAutoFit&gt;</code>_</li>\n</ul>\n<h2>HowToGalaxy</h2>\n<p>Included with <strong>PyAutoGalaxy</strong> is the <strong>HowToGalaxy</strong> lecture series, which provides an introduction to galaxy modeling\nwith <strong>PyAutoGalaxy</strong>. It can be found in the workspace &amp; consists of 5 chapters:</p>\n<ul>\n<li><strong>Introduction</strong> - An introduction to galaxy fitting &amp; <strong>PyAutoGalaxy</strong>.</li>\n<li><strong>Galaxy Modeling</strong> - How to perform model fits of galaxies, including a primer on Bayesian non-linear analysis.</li>\n<li><strong>Pipelines</strong> - How to build model-fitting pipelines &amp; tailor them to your own science case.</li>\n<li><strong>Inversions</strong> - How to perform pixelized reconstructions of a galaxy.</li>\n<li><strong>Hyper-Mode</strong> - How to use <strong>PyAutoGalaxy</strong> advanced modeling features that adapt the model to the galaxy being analysed.</li>\n</ul>\n<h2>Workspace</h2>\n<p><strong>PyAutoGalaxy</strong> comes with a workspace, which can be found <code>here &lt;https://github.com/Jammy2211/autogalaxy_workspace&gt;</code>_ &amp; which includes:</p>\n<ul>\n<li><strong>Aggregator</strong> - Manipulate large suites of modeling results via Jupyter notebooks, using <strong>PyAutoFit</strong>'s in-built results database.</li>\n<li><strong>API</strong> - Illustrative scripts of the <strong>PyAutoGalaxy</strong> interface, for examples on how to make plots, perform galaxy calculations, etc.</li>\n<li><strong>Config</strong> - Configuration files which customize <strong>PyAutoGalaxy</strong>'s behaviour.</li>\n<li><strong>Dataset</strong> - Where data is stored, including example datasets distributed with <strong>PyAutoGalaxy</strong>.</li>\n<li><strong>HowToGalaxy</strong> - The <strong>HowToGalaxy</strong> lecture series.</li>\n<li><strong>Output</strong> - Where the <strong>PyAutoGalaxy</strong> analysis and visualization are output.</li>\n<li><strong>Pipelines</strong> - Example pipelines for modeling galaxies.</li>\n<li><strong>Preprocess</strong> - Tools to preprocess data before an analysis (e.g. convert units, create masks).</li>\n<li><strong>Quick Start</strong> - A quick start guide, so you can begin modeling galaxies within hours.</li>\n<li><strong>Runners</strong> - Scripts for running <strong>PyAutoGalaxy</strong> pipelines.</li>\n<li><strong>Simulators</strong> - Scripts for simulating galaxy datasets with <strong>PyAutoGalaxy</strong>.</li>\n</ul>\n<h2>Slack</h2>\n<p>We're building a <strong>PyAutoGalaxy</strong> community on Slack, so you should contact us on our\n<code>Slack channel &lt;https://pyautogalaxy.slack.com/&gt;</code>_ before getting started. Here, I will give you the latest updates on\nthe software &amp; discuss how best to use <strong>PyAutoGalaxy</strong> for your science case.</p>\n<p>Unfortunately, Slack is invitation-only, so first send me an <code>email &lt;https://github.com/Jammy2211&gt;</code>_ requesting an\ninvite.</p>\n<h2>Documentation &amp; Installation</h2>\n<p>The PyAutoGalaxy documentation can be found at our <code>readthedocs &lt;https://pyautogalaxy.readthedocs.io/en/master&gt;</code><em>,\nincluding instructions on <code>installation &lt;https://pyautogalaxy.readthedocs.io/en/master/installation.html&gt;</code></em>.</p>\n<h2>Contributing</h2>\n<p>If you have any suggestions or would like to contribute please get in touch.</p>\n<h2>Papers</h2>\n<p>A list of published articles using <strong>PyAutoGalaxy</strong> can be found\n<code>here &lt;https://pyautogalaxy.readthedocs.io/en/master/papers.html&gt;</code>_ .</p>\n<h2>Credits</h2>\n<p><strong>Developers</strong>:</p>\n<p><code>James Nightingale &lt;https://github.com/Jammy2211&gt;</code>_ - Lead developer &amp; PyAutoGalaxy guru.</p>\n<p><code>Richard Hayes &lt;https://github.com/rhayes777&gt;</code>_ - Lead developer &amp;\n<code>PyAutoFit &lt;https://github.com/rhayes777/PyAutoFit&gt;</code>_ guru.</p>\n<p><code>Ashley Kelly &lt;https://github.com/AshKelly&gt;</code>_ - Developer of <code>pyquad &lt;https://github.com/AshKelly/pyquad&gt;</code>_ for fast\nnumerical integration.</p>\n<p><code>Amy Etherington &lt;https://github.com/amyetherington&gt;</code>_ - Mass profile calcluation methods.</p>\n<p><code>Xiaoyue Cao &lt;https://github.com/caoxiaoyue&gt;</code>_ - Analytic Ellipitcal Power-Law Calculations.</p>\n<p>Qiuhan He  - NFW Profile Calculations.</p>\n<p><code>Nan Li &lt;https://github.com/linan7788626&gt;</code>_ - Docker integration &amp; support.</p>\n<p><strong>Code Donors</strong>:</p>\n<p>Mattia Negrello - Visibility models in the uv-plane via direct Fourier transforms.</p>\n<p><code>Andrea Enia &lt;https://github.com/AndreaEnia&gt;</code>_ - Voronoi source-plane plotting tools.</p>\n<p><code>Aristeidis Amvrosiadis &lt;https://github.com/Sketos&gt;</code>_ - ALMA imaging data loading.</p>\n\n          </div>"}, "last_serial": 7186685, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63b63180ee01a99780eeb3cd8c50e815", "sha256": "6e7ea51431f622d58d69d50346867e8b61cf56969850c1e70fc937f1d816a04b"}, "downloads": -1, "filename": "autogalaxy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63b63180ee01a99780eeb3cd8c50e815", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 213470, "upload_time": "2020-05-06T18:14:31", "upload_time_iso_8601": "2020-05-06T18:14:31.844727Z", "url": "https://files.pythonhosted.org/packages/26/63/bec67fee89ae8ab25433d57265921e78036097ff40a6f248d98be2f29e37/autogalaxy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cd92a654ecefd2322b7298bbe743670", "sha256": "5d22804dc591176034950a1409c4eb0e87cc592fbab025940d168ccacc262be9"}, "downloads": -1, "filename": "autogalaxy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0cd92a654ecefd2322b7298bbe743670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155116, "upload_time": "2020-05-06T18:14:34", "upload_time_iso_8601": "2020-05-06T18:14:34.899345Z", "url": "https://files.pythonhosted.org/packages/7c/70/6d1d25160fd7b92f93d21ce8de7d56cbacae5073948341fee29ca7f6394f/autogalaxy-0.1.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "2a0fc351ce3ece76b205208c989ecbd1", "sha256": "1b3c9f15d5e660cf6b6b331ee29b1f66983a02dc50f06b4ac12df766ec085978"}, "downloads": -1, "filename": "autogalaxy-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a0fc351ce3ece76b205208c989ecbd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 213475, "upload_time": "2020-05-07T09:04:31", "upload_time_iso_8601": "2020-05-07T09:04:31.746842Z", "url": "https://files.pythonhosted.org/packages/95/7f/44d6b18d3b4ca02dc451bf0d15ade746043259f189e0ff0356e0780cc64f/autogalaxy-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c734dc99a9f21d7f15c2b79bcfac1e62", "sha256": "854dc3bc906113c2c614ba651d5c413c8051d1fabd6350d2f28476f7deee67bc"}, "downloads": -1, "filename": "autogalaxy-0.9.0.tar.gz", "has_sig": false, "md5_digest": "c734dc99a9f21d7f15c2b79bcfac1e62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155126, "upload_time": "2020-05-07T09:04:33", "upload_time_iso_8601": "2020-05-07T09:04:33.538669Z", "url": "https://files.pythonhosted.org/packages/f3/02/deb2351bf9def3e1ba2d87e04c8c5d8fa66d71038db767a855b87b4d45ed/autogalaxy-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a0fc351ce3ece76b205208c989ecbd1", "sha256": "1b3c9f15d5e660cf6b6b331ee29b1f66983a02dc50f06b4ac12df766ec085978"}, "downloads": -1, "filename": "autogalaxy-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a0fc351ce3ece76b205208c989ecbd1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 213475, "upload_time": "2020-05-07T09:04:31", "upload_time_iso_8601": "2020-05-07T09:04:31.746842Z", "url": "https://files.pythonhosted.org/packages/95/7f/44d6b18d3b4ca02dc451bf0d15ade746043259f189e0ff0356e0780cc64f/autogalaxy-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c734dc99a9f21d7f15c2b79bcfac1e62", "sha256": "854dc3bc906113c2c614ba651d5c413c8051d1fabd6350d2f28476f7deee67bc"}, "downloads": -1, "filename": "autogalaxy-0.9.0.tar.gz", "has_sig": false, "md5_digest": "c734dc99a9f21d7f15c2b79bcfac1e62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155126, "upload_time": "2020-05-07T09:04:33", "upload_time_iso_8601": "2020-05-07T09:04:33.538669Z", "url": "https://files.pythonhosted.org/packages/f3/02/deb2351bf9def3e1ba2d87e04c8c5d8fa66d71038db767a855b87b4d45ed/autogalaxy-0.9.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:17 2020"}