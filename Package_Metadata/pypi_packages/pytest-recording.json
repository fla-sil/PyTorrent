{"info": {"author": "Dmitry Dygalo", "author_email": "dmitry.dygalo@kiwi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "pytest-recording\n================\n\n|codecov| |Build| |Version| |Python versions| |License|\n\nA pytest plugin that allows to record network interactions via VCR.py.\n\nFeatures\n--------\n\n- Straightforward ``pytest.mark.vcr``, that reflects ``VCR.use_cassettes`` API;\n- Combining multiple VCR cassettes;\n- Network access blocking.\n\nUsage\n-----\n\n.. code:: python\n\n    import pytest\n    import requests\n\n    # cassettes/{module_name}/test_single.yaml will be used\n    @pytest.mark.vcr\n    def test_single():\n        assert requests.get(\"http://httpbin.org/get\").text == '{\"get\": true}'\n\n    # these cassettes will be used in addition to the default one\n    @pytest.mark.vcr(\"/path/to/ip.yaml\", \"/path/to/get.yaml\")\n    def test_multiple():\n        assert requests.get(\"http://httpbin.org/get\").text == '{\"get\": true}'\n        assert requests.get(\"http://httpbin.org/ip\").text == '{\"ip\": true}'\n\nConfiguration\n~~~~~~~~~~~~~\n\nThe recording configuration could be provided with ``vcr_config`` fixture, which could be any scope - ``session``,\n``package``, ``module`` or ``function``. It should return a dictionary that will be passed directly to ``VCR.use_cassettes``\nunder the hood.\n\n.. code:: python\n\n    import pytest\n\n    @pytest.fixture(scope=\"module\")\n    def vcr_config():\n        return {\"filter_headers\": [\"authorization\"]}\n\nFor more granular control you need to pass these keyword arguments to individual ``pytest.mark.vcr`` marks, and in this case\nall arguments will be merged into a single dictionary with the following priority (low -> high):\n\n- ``vcr_config`` fixture\n- all marks from the most broad scope (\"session\") to the most narrow one (\"function\")\n\nExample:\n\n.. code:: python\n\n    import pytest\n\n    pytestmark = [pytest.mark.vcr(ignore_localhost=True)]\n\n    @pytest.fixture(scope=\"module\")\n    def vcr_config():\n        return {\"filter_headers\": [\"authorization\"]}\n\n    @pytest.mark.vcr(filter_headers=[])\n    def test_one():\n        ...\n\n    @pytest.mark.vcr(filter_query_parameters=[\"api_key\"])\n    def test_two():\n        ...\n\nResulting VCR configs for each test:\n\n- ``test_one`` - ``{\"ignore_localhost\": True, \"filter_headers\": []}``\n- ``test_two`` - ``{\"ignore_localhost\": True, \"filter_headers\": [\"authorization\"], \"filter_query_parameters\": [\"api_key\"]}``\n\n\n`rewrite` record mode\n~~~~~~~~~~~~~~~~~~~~~\n\n\nIt possible to rewrite cassette from scratch,\nand not to to append as it is done with ``all`` record mode in current ``VCR.py`` implementation.\n\nHowever, it will rewrite only default first cassette, any extra cassettes provided will not be touched.\n\n.. code:: python\n\n    import pytest\n\n    @pytest.fixture(scope=\"module\")\n    def vcr_config():\n        return {\"record_mode\": \"rewrite\"}\n\nOr via command line option:\n\n.. code:: bash\n\n    $ pytest --record-mode=rewrite tests/\n\n\nBlocking network access\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTo have more confidence that your tests will not go over the wire, you can block it with ``pytest.mark.block_network`` mark:\n\n.. code:: python\n\n    import pytest\n    import requests\n\n    @pytest.mark.block_network\n    def test_multiple():\n        assert requests.get(\"http://httpbin.org/get\").text == '{\"get\": true}'\n\n    ...\n    # in case of access\n    RuntimeError: Network is disabled\n\nBesides marks, the network access could be blocked globally with ``--block-network`` command-line option.\n\nHowever, if VCR.py recording is enabled then, the network is not blocked for tests, that have ``pytest.mark.vcr``.\n\nExample:\n\n.. code:: python\n\n    import pytest\n    import requests\n\n    @pytest.mark.vcr\n    def test_multiple():\n        assert requests.get(\"http://httpbin.org/get\").text == '{\"get\": true}'\n\nRun ``pytest``:\n\n.. code:: bash\n\n    $ pytest --record-mode=once --block-network tests/\n\nThe network blocking feature supports ``socket``-based transports and ``pycurl``.\n\nIt is possible to allow access to specified hosts during network blocking:\n\n.. code:: python\n\n    import pytest\n    import requests\n\n    @pytest.mark.block_network(allowed_hosts=[\"httpbin.*\"])\n    def test_access():\n        assert requests.get(\"http://httpbin.org/get\").text == '{\"get\": true}'\n        with pytest.raises(RuntimeError, match=r\"^Network is disabled$\"):\n            requests.get(\"http://example.com\")\n\nOr via command line option:\n\n.. code:: bash\n\n    $ pytest --record-mode=once --block-network --allowed-hosts=httpbin.*,localhost tests/\n\nContributing\n------------\n\nTo run the tests:\n\n.. code:: bash\n\n    $ tox -p all\n\nIf you have troubles with installing ``pycurl`` with ``tox``, you could try to pass ``CPPFLAGS`` and ``LDFLAGS``\nwith the ``tox`` command:\n\n.. code:: bash\n\n    $  CPPFLAGS=\"-I/usr/local/opt/openssl/include\" LDFLAGS=\"-L/usr/local/opt/openssl/lib\" tox -p all\n\nPython support\n--------------\n\nPytest-recording supports:\n\n- CPython 2.7, 3.5, 3.6, 3.7 and 3.8.\n- PyPy 7 (2.7 & 3.6)\n\nLicense\n-------\n\nThe code in this project is licensed under `MIT license`_. By contributing to ``pytest-recording``, you agree that your contributions will be licensed under its MIT license.\n\n\n.. |codecov| image:: https://codecov.io/gh/kiwicom/pytest-recording/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/kiwicom/pytest-recording\n.. |Build| image:: https://travis-ci.org/kiwicom/pytest-recording.svg?branch=master\n   :target: https://travis-ci.org/kiwicom/pytest-recording\n.. |Version| image:: https://img.shields.io/pypi/v/pytest-recording.svg\n   :target: https://pypi.org/project/pytest-recording/\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/pytest-recording.svg\n   :target: https://pypi.org/project/pytest-recording/\n.. |License| image:: https://img.shields.io/pypi/l/pytest-recording.svg\n   :target: https://opensource.org/licenses/MIT\n\n.. _MIT license: https://opensource.org/licenses/MIT\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kiwicom/pytest-recording", "keywords": "", "license": "MIT", "maintainer": "Dmitry Dygalo", "maintainer_email": "dmitry.dygalo@kiwi.com", "name": "pytest-recording", "package_url": "https://pypi.org/project/pytest-recording/", "platform": "", "project_url": "https://pypi.org/project/pytest-recording/", "project_urls": {"Homepage": "https://github.com/kiwicom/pytest-recording"}, "release_url": "https://pypi.org/project/pytest-recording/0.7.0/", "requires_dist": ["vcrpy (>=2.0.1)", "attrs", "pytest (>=3.5.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A pytest plugin that allows to record network interactions via VCR.py", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codecov.io/gh/kiwicom/pytest-recording\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df697907131c034afcf5931b9148f7741a9e9d63/68747470733a2f2f636f6465636f762e696f2f67682f6b697769636f6d2f7079746573742d7265636f7264696e672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://travis-ci.org/kiwicom/pytest-recording\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59fbbd9ecba41f0015b004783121be7913cb52fa/68747470733a2f2f7472617669732d63692e6f72672f6b697769636f6d2f7079746573742d7265636f7264696e672e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/pytest-recording/\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d803a409fc1ea54ab56ead00b46376fd1b18a0d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d7265636f7264696e672e737667\"></a> <a href=\"https://pypi.org/project/pytest-recording/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fd19f50ef2167e4c8a01947c99e764d5f4ae7e8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d7265636f7264696e672e737667\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49742043395ce6e8b3bc1a694916acffad765711/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079746573742d7265636f7264696e672e737667\"></a></p>\n<p>A pytest plugin that allows to record network interactions via VCR.py.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Straightforward <tt>pytest.mark.vcr</tt>, that reflects <tt>VCR.use_cassettes</tt> API;</li>\n<li>Combining multiple VCR cassettes;</li>\n<li>Network access blocking.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"c1\"># cassettes/{module_name}/test_single.yaml will be used</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_single</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"get\": true}'</span>\n\n<span class=\"c1\"># these cassettes will be used in addition to the default one</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/ip.yaml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/path/to/get.yaml\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_multiple</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"get\": true}'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/ip\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"ip\": true}'</span>\n</pre>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>The recording configuration could be provided with <tt>vcr_config</tt> fixture, which could be any scope - <tt>session</tt>,\n<tt>package</tt>, <tt>module</tt> or <tt>function</tt>. It should return a dictionary that will be passed directly to <tt>VCR.use_cassettes</tt>\nunder the hood.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"module\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">vcr_config</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"filter_headers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"authorization\"</span><span class=\"p\">]}</span>\n</pre>\n<p>For more granular control you need to pass these keyword arguments to individual <tt>pytest.mark.vcr</tt> marks, and in this case\nall arguments will be merged into a single dictionary with the following priority (low -&gt; high):</p>\n<ul>\n<li><tt>vcr_config</tt> fixture</li>\n<li>all marks from the most broad scope (\u201csession\u201d) to the most narrow one (\u201cfunction\u201d)</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"n\">pytestmark</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span><span class=\"p\">(</span><span class=\"n\">ignore_localhost</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)]</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"module\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">vcr_config</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"filter_headers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"authorization\"</span><span class=\"p\">]}</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span><span class=\"p\">(</span><span class=\"n\">filter_headers</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_one</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span><span class=\"p\">(</span><span class=\"n\">filter_query_parameters</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"api_key\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_two</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Resulting VCR configs for each test:</p>\n<ul>\n<li><tt>test_one</tt> - <tt>{\"ignore_localhost\": True, \"filter_headers\": []}</tt></li>\n<li><tt>test_two</tt> - <tt>{\"ignore_localhost\": True, \"filter_headers\": <span class=\"pre\">[\"authorization\"],</span> \"filter_query_parameters\": <span class=\"pre\">[\"api_key\"]}</span></tt></li>\n</ul>\n</div>\n<div id=\"rewrite-record-mode\">\n<h3><cite>rewrite</cite> record mode</h3>\n<p>It possible to rewrite cassette from scratch,\nand not to to append as it is done with <tt>all</tt> record mode in current <tt>VCR.py</tt> implementation.</p>\n<p>However, it will rewrite only default first cassette, any extra cassettes provided will not be touched.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s2\">\"module\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">vcr_config</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"record_mode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"rewrite\"</span><span class=\"p\">}</span>\n</pre>\n<p>Or via command line option:</p>\n<pre>$ pytest --record-mode<span class=\"o\">=</span>rewrite tests/\n</pre>\n</div>\n<div id=\"blocking-network-access\">\n<h3>Blocking network access</h3>\n<p>To have more confidence that your tests will not go over the wire, you can block it with <tt>pytest.mark.block_network</tt> mark:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">block_network</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_multiple</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"get\": true}'</span>\n\n<span class=\"o\">...</span>\n<span class=\"c1\"># in case of access</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Network</span> <span class=\"ow\">is</span> <span class=\"n\">disabled</span>\n</pre>\n<p>Besides marks, the network access could be blocked globally with <tt><span class=\"pre\">--block-network</span></tt> command-line option.</p>\n<p>However, if VCR.py recording is enabled then, the network is not blocked for tests, that have <tt>pytest.mark.vcr</tt>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">vcr</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_multiple</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"get\": true}'</span>\n</pre>\n<p>Run <tt>pytest</tt>:</p>\n<pre>$ pytest --record-mode<span class=\"o\">=</span>once --block-network tests/\n</pre>\n<p>The network blocking feature supports <tt>socket</tt>-based transports and <tt>pycurl</tt>.</p>\n<p>It is possible to allow access to specified hosts during network blocking:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">block_network</span><span class=\"p\">(</span><span class=\"n\">allowed_hosts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"httpbin.*\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_access</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://httpbin.org/get\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'{\"get\": true}'</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">RuntimeError</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"^Network is disabled$\"</span><span class=\"p\">):</span>\n        <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or via command line option:</p>\n<pre>$ pytest --record-mode<span class=\"o\">=</span>once --block-network --allowed-hosts<span class=\"o\">=</span>httpbin.*,localhost tests/\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>To run the tests:</p>\n<pre>$ tox -p all\n</pre>\n<p>If you have troubles with installing <tt>pycurl</tt> with <tt>tox</tt>, you could try to pass <tt>CPPFLAGS</tt> and <tt>LDFLAGS</tt>\nwith the <tt>tox</tt> command:</p>\n<pre>$  <span class=\"nv\">CPPFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-I/usr/local/opt/openssl/include\"</span> <span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-L/usr/local/opt/openssl/lib\"</span> tox -p all\n</pre>\n</div>\n<div id=\"python-support\">\n<h2>Python support</h2>\n<p>Pytest-recording supports:</p>\n<ul>\n<li>CPython 2.7, 3.5, 3.6, 3.7 and 3.8.</li>\n<li>PyPy 7 (2.7 &amp; 3.6)</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The code in this project is licensed under <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>. By contributing to <tt><span class=\"pre\">pytest-recording</span></tt>, you agree that your contributions will be licensed under its MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 7046787, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0c1b71e786361bbe42d6b6de9a6f2b86", "sha256": "bb6673021b2e9272fc6bbfd6865aa0f7e98908c2e58409d71b5e83373ddc28ea"}, "downloads": -1, "filename": "pytest_recording-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0c1b71e786361bbe42d6b6de9a6f2b86", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6107, "upload_time": "2019-07-16T15:23:06", "upload_time_iso_8601": "2019-07-16T15:23:06.639616Z", "url": "https://files.pythonhosted.org/packages/2e/cb/7cf35353abb3ec4d7a997b94a8a432b51327fc37b84ade9a5449cf45e5ca/pytest_recording-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "966105f26e83313c47eee5e83178cc75", "sha256": "3daf807b8309a1cd7d563cc5093c69706fe92224ad2921b20dc408958471a26d"}, "downloads": -1, "filename": "pytest_recording-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "966105f26e83313c47eee5e83178cc75", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6183, "upload_time": "2019-07-18T14:29:35", "upload_time_iso_8601": "2019-07-18T14:29:35.304517Z", "url": "https://files.pythonhosted.org/packages/bd/f5/8b5b3878c3d818f33247652e5d26904eb387292927e4e7e21eda9d25359b/pytest_recording-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d3fff5f9b7d61ab03d3be98d8c66b398", "sha256": "122e6334e2c8d17462dbcfe4b5945fba9ced15357facce484e2208bf882870a9"}, "downloads": -1, "filename": "pytest_recording-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d3fff5f9b7d61ab03d3be98d8c66b398", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8335, "upload_time": "2019-07-20T21:41:51", "upload_time_iso_8601": "2019-07-20T21:41:51.945429Z", "url": "https://files.pythonhosted.org/packages/85/89/2da12a64733f29246b23985c710f5be7b9fd2d50461146c29161d581e335/pytest_recording-0.3.0-py2.py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "a93415b6cd46e0c276ed911d5f5cd206", "sha256": "96c8260486875552c5d59b434f09eecbb7c5c0141e205873231bf609bfde7626"}, "downloads": -1, "filename": "pytest_recording-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a93415b6cd46e0c276ed911d5f5cd206", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8403, "upload_time": "2019-07-28T14:26:38", "upload_time_iso_8601": "2019-07-28T14:26:38.877928Z", "url": "https://files.pythonhosted.org/packages/8a/99/9e9a4f98fcc0a32b152f3caba76857488d263c3689db7a2e0296a6a2bfa7/pytest_recording-0.3.1-py2.py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "76444914b861d39894640fc4d71e8519", "sha256": "c36fa7b6e6b220ab2ef2244eb3196fc0f8d6ef6755fac7f3945ea512acdc29a9"}, "downloads": -1, "filename": "pytest_recording-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76444914b861d39894640fc4d71e8519", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8475, "upload_time": "2019-08-01T06:12:11", "upload_time_iso_8601": "2019-08-01T06:12:11.333479Z", "url": "https://files.pythonhosted.org/packages/a5/d6/111ba69b6f459175886c5a41e381377082a539a0ac3f24c0dd6962a0531d/pytest_recording-0.3.2-py2.py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "e2e0ef8001e0057c05fdc46d735edad4", "sha256": "73e6833fe30dc245b69dc80df8e481938881532f1b2492dd5b5051aa9b4993d1"}, "downloads": -1, "filename": "pytest_recording-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2e0ef8001e0057c05fdc46d735edad4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8676, "upload_time": "2019-08-18T12:16:42", "upload_time_iso_8601": "2019-08-18T12:16:42.759271Z", "url": "https://files.pythonhosted.org/packages/a5/22/cc5b6746b8c31233bb426eea8c9fef2edef483990f6e3fa79571954a6766/pytest_recording-0.3.3-py2.py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "06b37b8fe14d3e27f95f8ae14c18b71f", "sha256": "4fd3b618d57a3d64ff8115c79a6e4880c81b6610d19bb0bc497f30cda3812b90"}, "downloads": -1, "filename": "pytest_recording-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06b37b8fe14d3e27f95f8ae14c18b71f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8775, "upload_time": "2019-11-07T14:39:01", "upload_time_iso_8601": "2019-11-07T14:39:01.721570Z", "url": "https://files.pythonhosted.org/packages/81/2a/0ab7b6b9a21cbf7499a56c39da4cd858f671fe8f64188c70aa60a9708196/pytest_recording-0.3.4-py2.py3-none-any.whl", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "f85a13d4a7b40dd39c94d2473da1efe0", "sha256": "5c562523b0ea5dff89ea8d5125c43069d97b4ef6c58bde13c2c544340c5024b2"}, "downloads": -1, "filename": "pytest_recording-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f85a13d4a7b40dd39c94d2473da1efe0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8769, "upload_time": "2019-11-18T14:47:07", "upload_time_iso_8601": "2019-11-18T14:47:07.818782Z", "url": "https://files.pythonhosted.org/packages/5f/1f/6e28faed66394c57c96e33e0567475acc8aedd8043bca5918de125d885cc/pytest_recording-0.3.5-py3-none-any.whl", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "cd7f0f9dad83f0ee372db0567bccf3d2", "sha256": "79e533d716b1d5ffc6a621bbad31dd783f03ed3a0b302200336d372ef13eb61e"}, "downloads": -1, "filename": "pytest_recording-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cd7f0f9dad83f0ee372db0567bccf3d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8828, "upload_time": "2019-12-17T17:19:22", "upload_time_iso_8601": "2019-12-17T17:19:22.701318Z", "url": "https://files.pythonhosted.org/packages/d7/41/79d33c82fd49b67a075694698667676315004d7823ef715acedbd4c5671c/pytest_recording-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ca3804281003b2dfc19b9a631d19cd6", "sha256": "d04ec19e3d3cda3e8e9ebaf93f4383fcc4c0bb7424b0533ba2a96eb3c396677d"}, "downloads": -1, "filename": "pytest-recording-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1ca3804281003b2dfc19b9a631d19cd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7754, "upload_time": "2019-12-17T17:19:24", "upload_time_iso_8601": "2019-12-17T17:19:24.648607Z", "url": "https://files.pythonhosted.org/packages/92/d6/e9239d2d71ed5d3689a530cffd235bbf25c34e58b9b47bc19537cb5e72db/pytest-recording-0.3.6.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9cffcb024693aa9c02c96f1d90332899", "sha256": "b9deb45ecaf53cccacc344a2007eef5d7c7167cb90cf4990934a2a5be952df7e"}, "downloads": -1, "filename": "pytest_recording-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9cffcb024693aa9c02c96f1d90332899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9516, "upload_time": "2019-12-19T11:04:56", "upload_time_iso_8601": "2019-12-19T11:04:56.895055Z", "url": "https://files.pythonhosted.org/packages/15/24/86e8124f024df6f80410ce99078680091c57bbaf8fa1a7017e1416b9e4b0/pytest_recording-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0aeb13dfaf7a604e75f6f8732e1c9115", "sha256": "8e16f5434a02b980c351b679c64c3d07bf671d42e902c9165a4fe035dfb7af15"}, "downloads": -1, "filename": "pytest-recording-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0aeb13dfaf7a604e75f6f8732e1c9115", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8520, "upload_time": "2019-12-19T11:04:58", "upload_time_iso_8601": "2019-12-19T11:04:58.554851Z", "url": "https://files.pythonhosted.org/packages/5b/91/133a78a533d05e66712bee59374c70bc17bcf31b2cc99f289d8959992078/pytest-recording-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "acede41f213e377e4d66fb898a25a498", "sha256": "a792e3615e2f057781c0efe3cae56faae8f3bb52441a99ac8c88ce8390826d7f"}, "downloads": -1, "filename": "pytest_recording-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "acede41f213e377e4d66fb898a25a498", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9327, "upload_time": "2020-01-09T17:06:06", "upload_time_iso_8601": "2020-01-09T17:06:06.293902Z", "url": "https://files.pythonhosted.org/packages/92/ad/9e5677f02aca112fd1b5ff59cfdec968eedfbd43d22737cf368e5fd2eca6/pytest_recording-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060c5069bbae667df85af29727b5534e", "sha256": "f49328550844a17fab429db787c453bc1118c9e72df40cb0131ff9402fb352ed"}, "downloads": -1, "filename": "pytest-recording-0.5.0.tar.gz", "has_sig": false, "md5_digest": "060c5069bbae667df85af29727b5534e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8332, "upload_time": "2020-01-09T17:06:08", "upload_time_iso_8601": "2020-01-09T17:06:08.384491Z", "url": "https://files.pythonhosted.org/packages/f3/e7/3dc66896f581f500677f919c082073e90c07bb523826ab02bf765baf3a1f/pytest-recording-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "9e69c6d893a034d26341d4e0947f1258", "sha256": "3b3c6b080f8409405e65039d2ef11e2423521fb89f0bf42f4e95c8ad39ef199f"}, "downloads": -1, "filename": "pytest_recording-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e69c6d893a034d26341d4e0947f1258", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9407, "upload_time": "2020-01-23T12:46:12", "upload_time_iso_8601": "2020-01-23T12:46:12.878110Z", "url": "https://files.pythonhosted.org/packages/a9/5e/7d32dc4af0d760a3ed37b0d2307de360509c963b965efd2d1c874633bcc3/pytest_recording-0.6.0-py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "aa543c74ea36abbd730b284b243537fb", "sha256": "6409970ac4b3ab85130e6f17bbf3881b43f34b35c13d21a254875dd127015510"}, "downloads": -1, "filename": "pytest_recording-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa543c74ea36abbd730b284b243537fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9641, "upload_time": "2020-04-18T09:55:28", "upload_time_iso_8601": "2020-04-18T09:55:28.279437Z", "url": "https://files.pythonhosted.org/packages/5a/e1/484609c8b8c46ebdba0bdaa6e87765feb817dd70b9ebde54311e461c556b/pytest_recording-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ab271f63a6ddf0d6de13cb9897342c4", "sha256": "abfcb8aaee91d78b4229e703d4bd5ef25e551ca0571b2f946b6ed53214ef191e"}, "downloads": -1, "filename": "pytest-recording-0.7.0.tar.gz", "has_sig": false, "md5_digest": "0ab271f63a6ddf0d6de13cb9897342c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8697, "upload_time": "2020-04-18T09:55:30", "upload_time_iso_8601": "2020-04-18T09:55:30.108140Z", "url": "https://files.pythonhosted.org/packages/2d/99/af914f2fb45e98c24ffb92973a4e8a133b369437e214d873727cc1a741ed/pytest-recording-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa543c74ea36abbd730b284b243537fb", "sha256": "6409970ac4b3ab85130e6f17bbf3881b43f34b35c13d21a254875dd127015510"}, "downloads": -1, "filename": "pytest_recording-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa543c74ea36abbd730b284b243537fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9641, "upload_time": "2020-04-18T09:55:28", "upload_time_iso_8601": "2020-04-18T09:55:28.279437Z", "url": "https://files.pythonhosted.org/packages/5a/e1/484609c8b8c46ebdba0bdaa6e87765feb817dd70b9ebde54311e461c556b/pytest_recording-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ab271f63a6ddf0d6de13cb9897342c4", "sha256": "abfcb8aaee91d78b4229e703d4bd5ef25e551ca0571b2f946b6ed53214ef191e"}, "downloads": -1, "filename": "pytest-recording-0.7.0.tar.gz", "has_sig": false, "md5_digest": "0ab271f63a6ddf0d6de13cb9897342c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8697, "upload_time": "2020-04-18T09:55:30", "upload_time_iso_8601": "2020-04-18T09:55:30.108140Z", "url": "https://files.pythonhosted.org/packages/2d/99/af914f2fb45e98c24ffb92973a4e8a133b369437e214d873727cc1a741ed/pytest-recording-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:48 2020"}