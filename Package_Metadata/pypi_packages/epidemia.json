{"info": {"author": "Taco de Wolff", "author_email": "tacodewolff@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Epidemia\nEpidemia is a Python library that simulates epidemic outbreaks using a SIR-like model.\n\n## Install\n```bash\npip install epidemia\n```\n\nIt is recommended to use PyPy instead of CPython (the default Python interpreter) if you have performance problems.\n\n## Models\nThe following SIR-like models have been implemented.\n\n- **SIR**: susceptible, infected, recovered model\n- **SEIR**: susceptible, exposed, infected, recovered model\n- **ModelReport2**: the model defined in report 2 at [COVID-19 en Chile](http://www.cmm.uchile.cl/?p=37663)\n\n## Optimization methods\nList of available optimization methods.\n\n- `Nelder-Mead`, `Powell`, `CG`, `BFGS`, `Newton-CG`, `COBYLA`, `trust-constr`, `dogleg`, `trust-ncg`, `trust-exact`, `trust-krylov` using [scipy.optimize.minimize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html) without bounds\n- `lm` using [scipy.optimize.least_squared](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html) without bounds\n- `L-BFGS-B`, `TNC`, `SLSQP` using [scipy.optimize.minimize](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html)\n- `trf`, `dogbox` using [scipy.optimize.least_squared](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html)\n- `annealing` using [scipy.optimize.dual_annealing](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.dual_annealing.html)\n- `bayesian` using [skopt.gp_minimize](https://scikit-optimize.github.io/stable/modules/generated/skopt.gp_minimize.html)\n- `gbrt` using [skopt.gbrt_minimize](https://scikit-optimize.github.io/stable/modules/generated/skopt.gbrt_minimize.html)\n- `forest` using [skopt.forest_minimize](https://scikit-optimize.github.io/stable/modules/generated/skopt.forest_minimize.html)\n- `PSO` using [pyswarms.single.global_best.GlobalBestPSO](https://pyswarms.readthedocs.io/en/latest/api/pyswarms.single.html)\n\nFrom experience it is necessary to have a good initial estimate of parameters before fitting. An initial optimization round using either `annealing` or especially `PSO` work very well. For improved speed it is recommended to use the `fast=True` flag for naive integration. Finally, an `L-BFGS-B` with `fast=False` (i.e. using RK4) will tweak the parameters to fit the curve as best as possible.\n\n## Examples\nJupyter notebooks of trained models for specific countries.\n\n- [**China**](https://github.com/COVID19-CMM/Epidemia/blob/master/examples/China.ipynb)\n- [**Chile**](https://github.com/COVID19-CMM/Epidemia/blob/master/examples/Chile.ipynb)\n- [**Italy**](https://github.com/COVID19-CMM/Epidemia/blob/master/examples/Italy.ipynb)\n\n## Simulating\nWe need to define the start time and initial state the compartments are in. Using a parameter function we can feed parameter values to the model dependent on time. To run the simulation we additionally define the end time.\n\n```python\nimport numpy as np\n\nfrom epidemic import *\n\n# Initial time and state\nt0 = np.datetime64('2020-01-01')\ny0 = {'S': 1e7, 'E': 200, 'Im': 200, 'I': 20, 'H': 0, 'Hc': 0, 'R': 0, 'D': 0}\n\n# Our alpha at time 't'\ndef \u03b1(t):\n    if t >= np.datetime64('2020-06-01') and t < np.datetime64('2020-09-01'):\n        return 0.5\n    return 1.0\n\n# Our parameters at time 't'\nparams = lambda Y,t: {\n    '\u03b2E': \u03b1(t) * 0.062015625,\n    '\u03b2Im': \u03b1(t) * 0.12403125,\n    '\u03b2I': \u03b1(t) * 0.165375,\n    '\u03b2H': \u03b1(t) * 0.0,\n    '\u03b2Hc': \u03b1(t) * 0.0,\n    '\u03b3E': 0.2,\n    '\u03b3Im': 0.1,\n    '\u03b3I': 0.1,\n    '\u03b3H': 0.1666,\n    '\u03b3Hc': 0.1,\n    '\u03bcb': 3.57e-5,\n    '\u03bcd': 1.57e-5,\n    '\u03c6EI': 0.50,\n    '\u03c6IR': 0.85,\n    '\u03c6HR': 0.85,\n    '\u03c6D': 0.50,\n}\n\n# Create and run model till time 'tmax'\nmodel = ModelReport2()\nepidemic = Epidemic(model, t0, tmax=np.datetime64('2021-06-01'))\nepidemic.run(y0, params)\nepidemic.run_parameter('R_effective', model.R_effective)\n\nepidemic.plot('Epidemic', cols=['I', 'H', 'Hc', 'D'])\nepidemic.plot_params('Epidemic (R effective)', cols=['R_effective'])\n```\n\nSee [example.py](https://github.com/COVID19-CMM/Epidemia/blob/master/examples/example.py).\n\n![Example](https://raw.githubusercontent.com/COVID19-CMM/Epidemia/master/figures/example.png)\n\n### Training parameters\nIn order to train our parameters, we define a mapping function `x_params`: `x` => `params` with bounds `x_bounds` for `x`. The first parameter to `x_params` is the initial state `y0`, and the following parameters are those that are being optimized. The `x_params` function will return a new initial state `y0` and a new `params` function to define how parameters develop over time (see above).\n\nFirst we load our model like above, but we pass a `data` DataFrame from which we can calculate the error. The DataFrame must have column names that correspond to the model's compartments and derived compartments (more on that later). We define our training variables, bounds and function in order to train the model.\n\n```python\n# Define our training parameters: initial value, bounds, and mapping function to model parameters\nx = [\n    0.74,   # E0\n    10.3,   # Im0\n    0.38,   # CE\n    0.75,   # CIm\n    0.165,  # \u03b2I\n    0.2,    # \u03b3E\n    0.1,    # \u03b3Im\n    0.1,    # \u03b3I\n    0.1667, # \u03b3H\n    0.1,    # \u03b3Hc\n]\n\nx_bounds = [\n    (0,20),        # E0\n    (0,20),        # Im0\n    (0.0,0.4),     # CE\n    (0.0,0.9),     # CIm\n    (0.0,0.75),    # \u03b2I\n    (0.17,0.25),   # \u03b3E\n    (0.07,0.14),   # \u03b3Im\n    (0.07,0.14),   # \u03b3I\n    (0.1,0.5),     # \u03b3H\n    (0.0625,0.14), # \u03b3Hc\n]\n\ndef x_params(E0, Im0, CE, CIm, \u03b2I, \u03b3E, \u03b3Im, \u03b3I, \u03b3H, \u03b3Hc):\n    y0 = {\n        'S': 1e7,\n        'E': E0 * I0,\n        'Im': Im0 * I0,\n        'I': I0,\n        'H': 0,\n        'Hc': 0,\n        'R': 0,\n        'D': D0,\n    }\n\n    \u03bb1 = np.datetime64('2020-04-01')\n    \u03ba1 = 0.05\n    \u03b12 = 0.75\n    \u03b1 = lambda t: 1.0 if t < \u03bb1 else \u03b12 + (1.0-\u03b12)*np.exp(-\u03ba1*(t-\u03bb1)/np.timedelta64(1,'D'))\n    return y0, lambda t: {\n        '\u03b2E': \u03b1(t) * CE * \u03b2I,\n        '\u03b2Im': \u03b1(t) * CIm * \u03b2I,\n        '\u03b2I': \u03b1(t) * \u03b2I,\n        '\u03b2H': 0.0,\n        '\u03b2Hc': 0.0,\n        '\u03b3E': \u03b3E,\n        '\u03b3Im': \u03b3Im,\n        '\u03b3I': \u03b3I,\n        '\u03b3H': \u03b3H,\n        '\u03b3Hc': \u03b3Hc,\n        '\u03bcb': 3.57e-5,\n        '\u03bcd': 1.57e-5,\n        '\u03c6EI': 0.5,\n        '\u03c6IR': 0.6,\n        '\u03c6HR': 0.6,\n        '\u03c6D': 0.2,\n    }\n```\n\nNow we can train the parameters in `x` using a variety of methods. Currently implemented are the `scipy.optimize.minimize` methods, and the `scipy.optimize.dual_annealing`, `scipy.optimize.least_squares`, and `skopt.*_minimize` methods. It is recommended to use `fast=True` (which doesn't use Runge-Kutta 4 and is this ~4 times faster) for all but the last optimization.\n\n```python\noptions = {\n    'bayesian': {\n        'n_calls': 100,\n        'n_random_starts': 10,\n        'fast': True,\n    },\n    'annealing': {\n        'seed': 1234567,\n        'fast': True,\n    },\n    'L-BFGS-B': {\n        'disp': True,\n    },\n}\n\nfor method in ['annealing', 'L-BFGS-B']:\n    opt = {}\n    if method in options:\n        opt = options[method]\n    x = epidemic.optimize(x, x_bounds, x_params, method=method, **opt)\n\nepidemic.plot(cols=['I_cases', 'I'])\nepidemic.plot(cols=['D'])\n```\n\nSee [example_train.py](https://github.com/COVID19-CMM/Epidemia/blob/master/examples/example_train.py).\n\n![Example training](https://raw.githubusercontent.com/COVID19-CMM/Epidemia/master/figures/example_train.png)\n\n### Loading data\nIn order to optimize our simulation, we need to pass training data to the model. The `Epidemic` class accepts a `data` argument of that should be a DataFrame, where its columns correspond to the compartments or semi-compartments of the model. For instance, `I`, or `D` are valid compartments, but also derived compartments such as the cumulative `I_cases` or `H_cases`.\n\n```python\ndf_infectados = pd.read_csv('data/chile_minsal_infectados.csv', sep=';', index_col=0)\ndf_infectados = df_infectados.transpose()\ndf_infectados.index = pd.to_datetime(df_infectados.index, format='%d-%b') + pd.offsets.DateOffset(years=120)\n\ndf_fallecidos = pd.read_csv('data/chile_minsal_fallecidos.csv', sep=';', index_col=0)\ndf_fallecidos = df_fallecidos.transpose()\ndf_fallecidos.index = pd.to_datetime(df_fallecidos.index, format='%d-%b') + pd.offsets.DateOffset(years=120)\n\ndata = pd.DataFrame({\n    'I_cases': df_infectados['Regi\u00f3n Metropolitana'],\n    'D': df_fallecidos['Regi\u00f3n Metropolitana'],\n})\n\nepidemic = Epidemic(model, t0, tmax, data=data)\n```\n\n### Change simulation time range\nGiven an Epidemic, we can extend the simulation time range. This will run all simulations for the new time range.\n\n```python\nepidemic.extend(np.datetime64('2021-06-01'))\n```\n\n### Add confidence intervals\nWhen calling `run` on an `Epidemic`, we can pass the `tag` argument. If this is anything but `None`, empty, or `mean`, we will assume this is an extra curve that will be saved. If the tag name is `lower` or `upper`, it will serve as the lower and upper bounds respectively for the confidence intervals while plotting.\n\n```python\nepidemic.run(y0_lower, params_lower, tag='lower')\nepidemic.run(y0_upper, params_upper, tag='upper')\n\n# or\nepidemic.run(*x_params(*x_lower), tag='lower')\nepidemic.run(*x_params(*x_upper), tag='upper')\n```\n\n## Visualization and parameter analysis\n### Plotting data columns\n\n```python\nepidemic.plot(cols=['I', 'H', 'Hc', 'D'])\n```\n\n![Example](https://raw.githubusercontent.com/COVID19-CMM/Epidemia/master/figures/example_plot.png)\n\n### Plotting derived parameters\n\n```python\nepidemic.plot_params(cols=['Reff'])\n```\n\n![Example parameters](https://raw.githubusercontent.com/COVID19-CMM/Epidemia/master/figures/example_plot_params.png)\n\n### Printing parameters\nDisplay the model parameters and their values.\n\n```python\nepidemic.print_params()\n```\n\n<table><tbody><tr><th>Parameter</th><th>Value</th></tr><tr><td>\u03b2E</td><td><b>0.02293</b></td></tr><tr><td>\u03b2Im</td><td><b>0.06112</b></td></tr><tr><td>\u03b2I</td><td><b>0.1891</b></td></tr><tr><td>\u03b2H</td><td><b>0</b></td></tr><tr><td>\u03b2Hc</td><td><b>0</b></td></tr><tr><td>\u03b3E</td><td><b>0.186</b></td></tr><tr><td>\u03b3Im</td><td><b>0.1376</b></td></tr><tr><td>\u03b3I</td><td><b>0.1116</b></td></tr><tr><td>\u03b3H</td><td><b>0.14</b></td></tr><tr><td>\u03b3Hc</td><td><b>0.0626</b></td></tr><tr><td>\u03bcb</td><td><b>3.57e-05</b></td></tr><tr><td>\u03bcd</td><td><b>1.57e-05</b></td></tr><tr><td>\u03c6EI</td><td><b>0.5</b></td></tr><tr><td>\u03c6IR</td><td><b>0.6006</b></td></tr><tr><td>\u03c6HR</td><td><b>0.6049</b></td></tr><tr><td>\u03c6D</td><td><b>0.2</b></td></tr></tbody></table>\n\n### Printing training parameters\nDisplay the training parameters and their values and ranges.\n\n```python\nepidemic.print_x_params(x, x_bounds, x_params)\n```\n\n<table><tbody><tr><th>Parameter</th><th>Value</th><th>Range</th></tr><tr><td>E0</td><td><b>0.8514</b></td><td>[0, 20]</td></tr><tr><td>Im0</td><td><b>2.526</b></td><td>[0, 20]</td></tr><tr><td>CE</td><td><b>0.1213</b></td><td>[0, 0.4]</td></tr><tr><td>CIm</td><td><b>0.3233</b></td><td>[0, 0.9]</td></tr><tr><td>\u03b2I</td><td><b>0.2521</b></td><td>[0, 0.75]</td></tr><tr><td>\u03b3E</td><td><b>0.186</b></td><td>[0.17, 0.25]</td></tr><tr><td>\u03b3Im</td><td><b>0.1376</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3I</td><td><b>0.1116</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3H</td><td><b>0.14</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3Hc</td><td><b>0.0626</b></td><td>[0.0625, 0.14]</td></tr></tbody></table>\n\n### Printing statistics\nPrint relevant statistics about the simulation.\n\n```python\nepidemic.print_stats()\n```\n\n<table><tbody><tr><th>Parameter</th><th>Value</th><th>Date</th></tr><tr><td>R effective</td><td><b>1.76</b></td><td>2020-03-15</td></tr><tr><td>R effective</td><td><b>1.41</b></td><td>2020-05-01</td></tr><tr><td>Fatality</td><td><b>0.02</b></td><td>2020-05-01</td></tr><tr><td>max(I)</td><td><b>3011</b></td><td>2020-05-01</td></tr><tr><td>max(H)</td><td><b>1974</b></td><td>2020-05-01</td></tr><tr><td>max(Hc)</td><td><b>1139</b></td><td>2020-05-01</td></tr><tr><td>max(D)</td><td><b>173</b></td><td>2020-05-01</td></tr></tbody></table>\n\n### Parameter sensitivity\nProbing parameter sensitivity to the error. Each parameter is moved a small distance epsilon and evaluated to see how much it impacts the error. Higher values means these parameter are very sensitive. When zero it means it has no impact on the error and is thus independent.\n\nEach column shows the impact of the error on that data series, while * is the total model error.\n\n```python\nepidemic.param_sensitivity()\n```\n\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>*</th>\n      <th>D</th>\n      <th>I_cases</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>E0</th>\n      <td>0.0025952</td>\n      <td>0.00267847</td>\n      <td>0.00253102</td>\n    </tr>\n    <tr>\n      <th>Im0</th>\n      <td>0.000353852</td>\n      <td>0.000319161</td>\n      <td>0.00036079</td>\n    </tr>\n    <tr>\n      <th>CE</th>\n      <td>0.00634905</td>\n      <td>0.00140165</td>\n      <td>0.0113138</td>\n    </tr>\n    <tr>\n      <th>CIm</th>\n      <td>0.00543327</td>\n      <td>0.00270623</td>\n      <td>0.00813083</td>\n    </tr>\n    <tr>\n      <th>\u03b2I</th>\n      <td>0.0271594</td>\n      <td>0.00895137</td>\n      <td>0.0453727</td>\n    </tr>\n    <tr>\n      <th>\u03b3E</th>\n      <td>0.0110189</td>\n      <td>0.0161675</td>\n      <td>0.00588935</td>\n    </tr>\n    <tr>\n      <th>\u03b3Im</th>\n      <td>0.0115601</td>\n      <td>0.00123512</td>\n      <td>0.0219025</td>\n    </tr>\n    <tr>\n      <th>\u03b3I</th>\n      <td>0.00850704</td>\n      <td>0.0615199</td>\n      <td>0.0445023</td>\n    </tr>\n    <tr>\n      <th>\u03b3H</th>\n      <td>0.0087152</td>\n      <td>0.0174582</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>\u03b3Hc</th>\n      <td>0.00790336</td>\n      <td>0.0157928</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/COVID19-CMM/Epidemia", "keywords": "epidemic,SIR,SEIR,COVID-19,corona,virus,compartmental", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "epidemia", "package_url": "https://pypi.org/project/epidemia/", "platform": "", "project_url": "https://pypi.org/project/epidemia/", "project_urls": {"Homepage": "https://github.com/COVID19-CMM/Epidemia"}, "release_url": "https://pypi.org/project/epidemia/0.0.2/", "requires_dist": ["numpy", "pandas", "matplotlib", "scipy", "scikit-optimize", "pyswarms", "pymc3"], "requires_python": ">=3.6", "summary": "Modelling COVID-19 using SIR-like models", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Epidemia</h1>\n<p>Epidemia is a Python library that simulates epidemic outbreaks using a SIR-like model.</p>\n<h2>Install</h2>\n<pre>pip install epidemia\n</pre>\n<p>It is recommended to use PyPy instead of CPython (the default Python interpreter) if you have performance problems.</p>\n<h2>Models</h2>\n<p>The following SIR-like models have been implemented.</p>\n<ul>\n<li><strong>SIR</strong>: susceptible, infected, recovered model</li>\n<li><strong>SEIR</strong>: susceptible, exposed, infected, recovered model</li>\n<li><strong>ModelReport2</strong>: the model defined in report 2 at <a href=\"http://www.cmm.uchile.cl/?p=37663\" rel=\"nofollow\">COVID-19 en Chile</a></li>\n</ul>\n<h2>Optimization methods</h2>\n<p>List of available optimization methods.</p>\n<ul>\n<li><code>Nelder-Mead</code>, <code>Powell</code>, <code>CG</code>, <code>BFGS</code>, <code>Newton-CG</code>, <code>COBYLA</code>, <code>trust-constr</code>, <code>dogleg</code>, <code>trust-ncg</code>, <code>trust-exact</code>, <code>trust-krylov</code> using <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html\" rel=\"nofollow\">scipy.optimize.minimize</a> without bounds</li>\n<li><code>lm</code> using <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html\" rel=\"nofollow\">scipy.optimize.least_squared</a> without bounds</li>\n<li><code>L-BFGS-B</code>, <code>TNC</code>, <code>SLSQP</code> using <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html\" rel=\"nofollow\">scipy.optimize.minimize</a></li>\n<li><code>trf</code>, <code>dogbox</code> using <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html\" rel=\"nofollow\">scipy.optimize.least_squared</a></li>\n<li><code>annealing</code> using <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.dual_annealing.html\" rel=\"nofollow\">scipy.optimize.dual_annealing</a></li>\n<li><code>bayesian</code> using <a href=\"https://scikit-optimize.github.io/stable/modules/generated/skopt.gp_minimize.html\" rel=\"nofollow\">skopt.gp_minimize</a></li>\n<li><code>gbrt</code> using <a href=\"https://scikit-optimize.github.io/stable/modules/generated/skopt.gbrt_minimize.html\" rel=\"nofollow\">skopt.gbrt_minimize</a></li>\n<li><code>forest</code> using <a href=\"https://scikit-optimize.github.io/stable/modules/generated/skopt.forest_minimize.html\" rel=\"nofollow\">skopt.forest_minimize</a></li>\n<li><code>PSO</code> using <a href=\"https://pyswarms.readthedocs.io/en/latest/api/pyswarms.single.html\" rel=\"nofollow\">pyswarms.single.global_best.GlobalBestPSO</a></li>\n</ul>\n<p>From experience it is necessary to have a good initial estimate of parameters before fitting. An initial optimization round using either <code>annealing</code> or especially <code>PSO</code> work very well. For improved speed it is recommended to use the <code>fast=True</code> flag for naive integration. Finally, an <code>L-BFGS-B</code> with <code>fast=False</code> (i.e. using RK4) will tweak the parameters to fit the curve as best as possible.</p>\n<h2>Examples</h2>\n<p>Jupyter notebooks of trained models for specific countries.</p>\n<ul>\n<li><a href=\"https://github.com/COVID19-CMM/Epidemia/blob/master/examples/China.ipynb\" rel=\"nofollow\"><strong>China</strong></a></li>\n<li><a href=\"https://github.com/COVID19-CMM/Epidemia/blob/master/examples/Chile.ipynb\" rel=\"nofollow\"><strong>Chile</strong></a></li>\n<li><a href=\"https://github.com/COVID19-CMM/Epidemia/blob/master/examples/Italy.ipynb\" rel=\"nofollow\"><strong>Italy</strong></a></li>\n</ul>\n<h2>Simulating</h2>\n<p>We need to define the start time and initial state the compartments are in. Using a parameter function we can feed parameter values to the model dependent on time. To run the simulation we additionally define the end time.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">epidemic</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Initial time and state</span>\n<span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2020-01-01'</span><span class=\"p\">)</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"mf\">1e7</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'Im'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'Hc'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Our alpha at time 't'</span>\n<span class=\"k\">def</span> <span class=\"nf\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2020-06-01'</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">t</span> <span class=\"o\">&lt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2020-09-01'</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mf\">0.5</span>\n    <span class=\"k\">return</span> <span class=\"mf\">1.0</span>\n\n<span class=\"c1\"># Our parameters at time 't'</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'\u03b2E'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.062015625</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b2Im'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.12403125</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b2I'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.165375</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b2H'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b2Hc'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b3E'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b3Im'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b3I'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b3H'</span><span class=\"p\">:</span> <span class=\"mf\">0.1666</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03b3Hc'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03bcb'</span><span class=\"p\">:</span> <span class=\"mf\">3.57e-5</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03bcd'</span><span class=\"p\">:</span> <span class=\"mf\">1.57e-5</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03c6EI'</span><span class=\"p\">:</span> <span class=\"mf\">0.50</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03c6IR'</span><span class=\"p\">:</span> <span class=\"mf\">0.85</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03c6HR'</span><span class=\"p\">:</span> <span class=\"mf\">0.85</span><span class=\"p\">,</span>\n    <span class=\"s1\">'\u03c6D'</span><span class=\"p\">:</span> <span class=\"mf\">0.50</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Create and run model till time 'tmax'</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ModelReport2</span><span class=\"p\">()</span>\n<span class=\"n\">epidemic</span> <span class=\"o\">=</span> <span class=\"n\">Epidemic</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">t0</span><span class=\"p\">,</span> <span class=\"n\">tmax</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2021-06-01'</span><span class=\"p\">))</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run_parameter</span><span class=\"p\">(</span><span class=\"s1\">'R_effective'</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">R_effective</span><span class=\"p\">)</span>\n\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'Epidemic'</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'Hc'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">])</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot_params</span><span class=\"p\">(</span><span class=\"s1\">'Epidemic (R effective)'</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'R_effective'</span><span class=\"p\">])</span>\n</pre>\n<p>See <a href=\"https://github.com/COVID19-CMM/Epidemia/blob/master/examples/example.py\" rel=\"nofollow\">example.py</a>.</p>\n<p><img alt=\"Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d31a0c5922f17bd7543b73f0632dd02b1ec472a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f434f56494431392d434d4d2f45706964656d69612f6d61737465722f666967757265732f6578616d706c652e706e67\"></p>\n<h3>Training parameters</h3>\n<p>In order to train our parameters, we define a mapping function <code>x_params</code>: <code>x</code> =&gt; <code>params</code> with bounds <code>x_bounds</code> for <code>x</code>. The first parameter to <code>x_params</code> is the initial state <code>y0</code>, and the following parameters are those that are being optimized. The <code>x_params</code> function will return a new initial state <code>y0</code> and a new <code>params</code> function to define how parameters develop over time (see above).</p>\n<p>First we load our model like above, but we pass a <code>data</code> DataFrame from which we can calculate the error. The DataFrame must have column names that correspond to the model's compartments and derived compartments (more on that later). We define our training variables, bounds and function in order to train the model.</p>\n<pre><span class=\"c1\"># Define our training parameters: initial value, bounds, and mapping function to model parameters</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mf\">0.74</span><span class=\"p\">,</span>   <span class=\"c1\"># E0</span>\n    <span class=\"mf\">10.3</span><span class=\"p\">,</span>   <span class=\"c1\"># Im0</span>\n    <span class=\"mf\">0.38</span><span class=\"p\">,</span>   <span class=\"c1\"># CE</span>\n    <span class=\"mf\">0.75</span><span class=\"p\">,</span>   <span class=\"c1\"># CIm</span>\n    <span class=\"mf\">0.165</span><span class=\"p\">,</span>  <span class=\"c1\"># \u03b2I</span>\n    <span class=\"mf\">0.2</span><span class=\"p\">,</span>    <span class=\"c1\"># \u03b3E</span>\n    <span class=\"mf\">0.1</span><span class=\"p\">,</span>    <span class=\"c1\"># \u03b3Im</span>\n    <span class=\"mf\">0.1</span><span class=\"p\">,</span>    <span class=\"c1\"># \u03b3I</span>\n    <span class=\"mf\">0.1667</span><span class=\"p\">,</span> <span class=\"c1\"># \u03b3H</span>\n    <span class=\"mf\">0.1</span><span class=\"p\">,</span>    <span class=\"c1\"># \u03b3Hc</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">x_bounds</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">),</span>        <span class=\"c1\"># E0</span>\n    <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">),</span>        <span class=\"c1\"># Im0</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.4</span><span class=\"p\">),</span>     <span class=\"c1\"># CE</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.9</span><span class=\"p\">),</span>     <span class=\"c1\"># CIm</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.75</span><span class=\"p\">),</span>    <span class=\"c1\"># \u03b2I</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.17</span><span class=\"p\">,</span><span class=\"mf\">0.25</span><span class=\"p\">),</span>   <span class=\"c1\"># \u03b3E</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.07</span><span class=\"p\">,</span><span class=\"mf\">0.14</span><span class=\"p\">),</span>   <span class=\"c1\"># \u03b3Im</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.07</span><span class=\"p\">,</span><span class=\"mf\">0.14</span><span class=\"p\">),</span>   <span class=\"c1\"># \u03b3I</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span><span class=\"mf\">0.5</span><span class=\"p\">),</span>     <span class=\"c1\"># \u03b3H</span>\n    <span class=\"p\">(</span><span class=\"mf\">0.0625</span><span class=\"p\">,</span><span class=\"mf\">0.14</span><span class=\"p\">),</span> <span class=\"c1\"># \u03b3Hc</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">x_params</span><span class=\"p\">(</span><span class=\"n\">E0</span><span class=\"p\">,</span> <span class=\"n\">Im0</span><span class=\"p\">,</span> <span class=\"n\">CE</span><span class=\"p\">,</span> <span class=\"n\">CIm</span><span class=\"p\">,</span> <span class=\"n\">\u03b2I</span><span class=\"p\">,</span> <span class=\"n\">\u03b3E</span><span class=\"p\">,</span> <span class=\"n\">\u03b3Im</span><span class=\"p\">,</span> <span class=\"n\">\u03b3I</span><span class=\"p\">,</span> <span class=\"n\">\u03b3H</span><span class=\"p\">,</span> <span class=\"n\">\u03b3Hc</span><span class=\"p\">):</span>\n    <span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S'</span><span class=\"p\">:</span> <span class=\"mf\">1e7</span><span class=\"p\">,</span>\n        <span class=\"s1\">'E'</span><span class=\"p\">:</span> <span class=\"n\">E0</span> <span class=\"o\">*</span> <span class=\"n\">I0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Im'</span><span class=\"p\">:</span> <span class=\"n\">Im0</span> <span class=\"o\">*</span> <span class=\"n\">I0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'I'</span><span class=\"p\">:</span> <span class=\"n\">I0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'H'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'Hc'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"n\">D0</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">\u03bb1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2020-04-01'</span><span class=\"p\">)</span>\n    <span class=\"n\">\u03ba1</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>\n    <span class=\"n\">\u03b12</span> <span class=\"o\">=</span> <span class=\"mf\">0.75</span>\n    <span class=\"n\">\u03b1</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&lt;</span> <span class=\"n\">\u03bb1</span> <span class=\"k\">else</span> <span class=\"n\">\u03b12</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"o\">-</span><span class=\"n\">\u03b12</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">\u03ba1</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"n\">\u03bb1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">timedelta64</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">'D'</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'\u03b2E'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">CE</span> <span class=\"o\">*</span> <span class=\"n\">\u03b2I</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b2Im'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">CIm</span> <span class=\"o\">*</span> <span class=\"n\">\u03b2I</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b2I'</span><span class=\"p\">:</span> <span class=\"n\">\u03b1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">\u03b2I</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b2H'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b2Hc'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b3E'</span><span class=\"p\">:</span> <span class=\"n\">\u03b3E</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b3Im'</span><span class=\"p\">:</span> <span class=\"n\">\u03b3Im</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b3I'</span><span class=\"p\">:</span> <span class=\"n\">\u03b3I</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b3H'</span><span class=\"p\">:</span> <span class=\"n\">\u03b3H</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03b3Hc'</span><span class=\"p\">:</span> <span class=\"n\">\u03b3Hc</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03bcb'</span><span class=\"p\">:</span> <span class=\"mf\">3.57e-5</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03bcd'</span><span class=\"p\">:</span> <span class=\"mf\">1.57e-5</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03c6EI'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03c6IR'</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03c6HR'</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span>\n        <span class=\"s1\">'\u03c6D'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Now we can train the parameters in <code>x</code> using a variety of methods. Currently implemented are the <code>scipy.optimize.minimize</code> methods, and the <code>scipy.optimize.dual_annealing</code>, <code>scipy.optimize.least_squares</code>, and <code>skopt.*_minimize</code> methods. It is recommended to use <code>fast=True</code> (which doesn't use Runge-Kutta 4 and is this ~4 times faster) for all but the last optimization.</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'bayesian'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'n_calls'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"s1\">'n_random_starts'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'fast'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'annealing'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'seed'</span><span class=\"p\">:</span> <span class=\"mi\">1234567</span><span class=\"p\">,</span>\n        <span class=\"s1\">'fast'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'L-BFGS-B'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'disp'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'annealing'</span><span class=\"p\">,</span> <span class=\"s1\">'L-BFGS-B'</span><span class=\"p\">]:</span>\n    <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">if</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">options</span><span class=\"p\">:</span>\n        <span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"n\">method</span><span class=\"p\">]</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x_bounds</span><span class=\"p\">,</span> <span class=\"n\">x_params</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">opt</span><span class=\"p\">)</span>\n\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'I_cases'</span><span class=\"p\">,</span> <span class=\"s1\">'I'</span><span class=\"p\">])</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'D'</span><span class=\"p\">])</span>\n</pre>\n<p>See <a href=\"https://github.com/COVID19-CMM/Epidemia/blob/master/examples/example_train.py\" rel=\"nofollow\">example_train.py</a>.</p>\n<p><img alt=\"Example training\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7325cfcf518f66e313aac59bdedf4e9f256c90fd/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f434f56494431392d434d4d2f45706964656d69612f6d61737465722f666967757265732f6578616d706c655f747261696e2e706e67\"></p>\n<h3>Loading data</h3>\n<p>In order to optimize our simulation, we need to pass training data to the model. The <code>Epidemic</code> class accepts a <code>data</code> argument of that should be a DataFrame, where its columns correspond to the compartments or semi-compartments of the model. For instance, <code>I</code>, or <code>D</code> are valid compartments, but also derived compartments such as the cumulative <code>I_cases</code> or <code>H_cases</code>.</p>\n<pre><span class=\"n\">df_infectados</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/chile_minsal_infectados.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">df_infectados</span> <span class=\"o\">=</span> <span class=\"n\">df_infectados</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span>\n<span class=\"n\">df_infectados</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"n\">df_infectados</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%d</span><span class=\"s1\">-%b'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">offsets</span><span class=\"o\">.</span><span class=\"n\">DateOffset</span><span class=\"p\">(</span><span class=\"n\">years</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">)</span>\n\n<span class=\"n\">df_fallecidos</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'data/chile_minsal_fallecidos.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">df_fallecidos</span> <span class=\"o\">=</span> <span class=\"n\">df_fallecidos</span><span class=\"o\">.</span><span class=\"n\">transpose</span><span class=\"p\">()</span>\n<span class=\"n\">df_fallecidos</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">to_datetime</span><span class=\"p\">(</span><span class=\"n\">df_fallecidos</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%d</span><span class=\"s1\">-%b'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">offsets</span><span class=\"o\">.</span><span class=\"n\">DateOffset</span><span class=\"p\">(</span><span class=\"n\">years</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n    <span class=\"s1\">'I_cases'</span><span class=\"p\">:</span> <span class=\"n\">df_infectados</span><span class=\"p\">[</span><span class=\"s1\">'Regi\u00f3n Metropolitana'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'D'</span><span class=\"p\">:</span> <span class=\"n\">df_fallecidos</span><span class=\"p\">[</span><span class=\"s1\">'Regi\u00f3n Metropolitana'</span><span class=\"p\">],</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">epidemic</span> <span class=\"o\">=</span> <span class=\"n\">Epidemic</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">t0</span><span class=\"p\">,</span> <span class=\"n\">tmax</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h3>Change simulation time range</h3>\n<p>Given an Epidemic, we can extend the simulation time range. This will run all simulations for the new time range.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">(</span><span class=\"s1\">'2021-06-01'</span><span class=\"p\">))</span>\n</pre>\n<h3>Add confidence intervals</h3>\n<p>When calling <code>run</code> on an <code>Epidemic</code>, we can pass the <code>tag</code> argument. If this is anything but <code>None</code>, empty, or <code>mean</code>, we will assume this is an extra curve that will be saved. If the tag name is <code>lower</code> or <code>upper</code>, it will serve as the lower and upper bounds respectively for the confidence intervals while plotting.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">y0_lower</span><span class=\"p\">,</span> <span class=\"n\">params_lower</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">y0_upper</span><span class=\"p\">,</span> <span class=\"n\">params_upper</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'upper'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_params</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_lower</span><span class=\"p\">),</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'lower'</span><span class=\"p\">)</span>\n<span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_params</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x_upper</span><span class=\"p\">),</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'upper'</span><span class=\"p\">)</span>\n</pre>\n<h2>Visualization and parameter analysis</h2>\n<h3>Plotting data columns</h3>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">,</span> <span class=\"s1\">'Hc'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">])</span>\n</pre>\n<p><img alt=\"Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09a070cd604fa80df45845b1a0b63ddbe80c98e2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f434f56494431392d434d4d2f45706964656d69612f6d61737465722f666967757265732f6578616d706c655f706c6f742e706e67\"></p>\n<h3>Plotting derived parameters</h3>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">plot_params</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Reff'</span><span class=\"p\">])</span>\n</pre>\n<p><img alt=\"Example parameters\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f769b482d3acae94f3ef30017f3d654a89ae16e6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f434f56494431392d434d4d2f45706964656d69612f6d61737465722f666967757265732f6578616d706c655f706c6f745f706172616d732e706e67\"></p>\n<h3>Printing parameters</h3>\n<p>Display the model parameters and their values.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">print_params</span><span class=\"p\">()</span>\n</pre>\n<table><tr><th>Parameter</th><th>Value</th></tr><tr><td>\u03b2E</td><td><b>0.02293</b></td></tr><tr><td>\u03b2Im</td><td><b>0.06112</b></td></tr><tr><td>\u03b2I</td><td><b>0.1891</b></td></tr><tr><td>\u03b2H</td><td><b>0</b></td></tr><tr><td>\u03b2Hc</td><td><b>0</b></td></tr><tr><td>\u03b3E</td><td><b>0.186</b></td></tr><tr><td>\u03b3Im</td><td><b>0.1376</b></td></tr><tr><td>\u03b3I</td><td><b>0.1116</b></td></tr><tr><td>\u03b3H</td><td><b>0.14</b></td></tr><tr><td>\u03b3Hc</td><td><b>0.0626</b></td></tr><tr><td>\u03bcb</td><td><b>3.57e-05</b></td></tr><tr><td>\u03bcd</td><td><b>1.57e-05</b></td></tr><tr><td>\u03c6EI</td><td><b>0.5</b></td></tr><tr><td>\u03c6IR</td><td><b>0.6006</b></td></tr><tr><td>\u03c6HR</td><td><b>0.6049</b></td></tr><tr><td>\u03c6D</td><td><b>0.2</b></td></tr></table>\n<h3>Printing training parameters</h3>\n<p>Display the training parameters and their values and ranges.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">print_x_params</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x_bounds</span><span class=\"p\">,</span> <span class=\"n\">x_params</span><span class=\"p\">)</span>\n</pre>\n<table><tr><th>Parameter</th><th>Value</th><th>Range</th></tr><tr><td>E0</td><td><b>0.8514</b></td><td>[0, 20]</td></tr><tr><td>Im0</td><td><b>2.526</b></td><td>[0, 20]</td></tr><tr><td>CE</td><td><b>0.1213</b></td><td>[0, 0.4]</td></tr><tr><td>CIm</td><td><b>0.3233</b></td><td>[0, 0.9]</td></tr><tr><td>\u03b2I</td><td><b>0.2521</b></td><td>[0, 0.75]</td></tr><tr><td>\u03b3E</td><td><b>0.186</b></td><td>[0.17, 0.25]</td></tr><tr><td>\u03b3Im</td><td><b>0.1376</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3I</td><td><b>0.1116</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3H</td><td><b>0.14</b></td><td>[0.07, 0.14]</td></tr><tr><td>\u03b3Hc</td><td><b>0.0626</b></td><td>[0.0625, 0.14]</td></tr></table>\n<h3>Printing statistics</h3>\n<p>Print relevant statistics about the simulation.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">print_stats</span><span class=\"p\">()</span>\n</pre>\n<table><tr><th>Parameter</th><th>Value</th><th>Date</th></tr><tr><td>R effective</td><td><b>1.76</b></td><td>2020-03-15</td></tr><tr><td>R effective</td><td><b>1.41</b></td><td>2020-05-01</td></tr><tr><td>Fatality</td><td><b>0.02</b></td><td>2020-05-01</td></tr><tr><td>max(I)</td><td><b>3011</b></td><td>2020-05-01</td></tr><tr><td>max(H)</td><td><b>1974</b></td><td>2020-05-01</td></tr><tr><td>max(Hc)</td><td><b>1139</b></td><td>2020-05-01</td></tr><tr><td>max(D)</td><td><b>173</b></td><td>2020-05-01</td></tr></table>\n<h3>Parameter sensitivity</h3>\n<p>Probing parameter sensitivity to the error. Each parameter is moved a small distance epsilon and evaluated to see how much it impacts the error. Higher values means these parameter are very sensitive. When zero it means it has no impact on the error and is thus independent.</p>\n<p>Each column shows the impact of the error on that data series, while * is the total model error.</p>\n<pre><span class=\"n\">epidemic</span><span class=\"o\">.</span><span class=\"n\">param_sensitivity</span><span class=\"p\">()</span>\n</pre>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>*</th>\n      <th>D</th>\n      <th>I_cases</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>E0</th>\n      <td>0.0025952</td>\n      <td>0.00267847</td>\n      <td>0.00253102</td>\n    </tr>\n    <tr>\n      <th>Im0</th>\n      <td>0.000353852</td>\n      <td>0.000319161</td>\n      <td>0.00036079</td>\n    </tr>\n    <tr>\n      <th>CE</th>\n      <td>0.00634905</td>\n      <td>0.00140165</td>\n      <td>0.0113138</td>\n    </tr>\n    <tr>\n      <th>CIm</th>\n      <td>0.00543327</td>\n      <td>0.00270623</td>\n      <td>0.00813083</td>\n    </tr>\n    <tr>\n      <th>\u03b2I</th>\n      <td>0.0271594</td>\n      <td>0.00895137</td>\n      <td>0.0453727</td>\n    </tr>\n    <tr>\n      <th>\u03b3E</th>\n      <td>0.0110189</td>\n      <td>0.0161675</td>\n      <td>0.00588935</td>\n    </tr>\n    <tr>\n      <th>\u03b3Im</th>\n      <td>0.0115601</td>\n      <td>0.00123512</td>\n      <td>0.0219025</td>\n    </tr>\n    <tr>\n      <th>\u03b3I</th>\n      <td>0.00850704</td>\n      <td>0.0615199</td>\n      <td>0.0445023</td>\n    </tr>\n    <tr>\n      <th>\u03b3H</th>\n      <td>0.0087152</td>\n      <td>0.0174582</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>\u03b3Hc</th>\n      <td>0.00790336</td>\n      <td>0.0157928</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n\n          </div>"}, "last_serial": 7184274, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2cfa752267be3e566841029ca6c51488", "sha256": "8ba4bc77740fca1d2d17c714c7e9abd06f6f3bc507da160bb55334e7dace4c2d"}, "downloads": -1, "filename": "epidemia-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2cfa752267be3e566841029ca6c51488", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16561, "upload_time": "2020-04-27T22:20:45", "upload_time_iso_8601": "2020-04-27T22:20:45.820113Z", "url": "https://files.pythonhosted.org/packages/b3/4b/d7812a5da83427bc8657e7afd211371bc79201c40b717b26572aa333dcc0/epidemia-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbd9edac22f9685fe8d14f62b9b193f1", "sha256": "f0307216b5b6cdb4c2ef93392b20fe4a57bcf33ecb41779a4116016c34e418bf"}, "downloads": -1, "filename": "epidemia-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbd9edac22f9685fe8d14f62b9b193f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1218605, "upload_time": "2020-04-27T22:20:49", "upload_time_iso_8601": "2020-04-27T22:20:49.227282Z", "url": "https://files.pythonhosted.org/packages/2a/35/c92bc8f5982d10de74a263efc917e077f5daa3006234960511c2a49e698c/epidemia-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6dc646474ea3ad23aa93303ad0c06b0b", "sha256": "2e19409d06e11e1a269ee3c10b288b32b2a9f9e21a41c1cc1e567ee362a8684e"}, "downloads": -1, "filename": "epidemia-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6dc646474ea3ad23aa93303ad0c06b0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28798, "upload_time": "2020-05-06T23:58:49", "upload_time_iso_8601": "2020-05-06T23:58:49.967995Z", "url": "https://files.pythonhosted.org/packages/e1/f7/5ae6ea720bf013b3d397fc0a65867fa8c0508bdc38e1fae69f99ef7045f4/epidemia-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffac9ba897672d752aa66169c8e0cea3", "sha256": "5f7c55cb0300c8437e226fb2de13133aaae51c0ffc349c30c1e5a870b46ee6ff"}, "downloads": -1, "filename": "epidemia-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ffac9ba897672d752aa66169c8e0cea3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1829232, "upload_time": "2020-05-06T23:58:52", "upload_time_iso_8601": "2020-05-06T23:58:52.701373Z", "url": "https://files.pythonhosted.org/packages/bd/5f/35d042a767c775cdcd3445652f53635ea9a1bf6666d604b07bae7131408e/epidemia-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dc646474ea3ad23aa93303ad0c06b0b", "sha256": "2e19409d06e11e1a269ee3c10b288b32b2a9f9e21a41c1cc1e567ee362a8684e"}, "downloads": -1, "filename": "epidemia-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6dc646474ea3ad23aa93303ad0c06b0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28798, "upload_time": "2020-05-06T23:58:49", "upload_time_iso_8601": "2020-05-06T23:58:49.967995Z", "url": "https://files.pythonhosted.org/packages/e1/f7/5ae6ea720bf013b3d397fc0a65867fa8c0508bdc38e1fae69f99ef7045f4/epidemia-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffac9ba897672d752aa66169c8e0cea3", "sha256": "5f7c55cb0300c8437e226fb2de13133aaae51c0ffc349c30c1e5a870b46ee6ff"}, "downloads": -1, "filename": "epidemia-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ffac9ba897672d752aa66169c8e0cea3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1829232, "upload_time": "2020-05-06T23:58:52", "upload_time_iso_8601": "2020-05-06T23:58:52.701373Z", "url": "https://files.pythonhosted.org/packages/bd/5f/35d042a767c775cdcd3445652f53635ea9a1bf6666d604b07bae7131408e/epidemia-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:59 2020"}