{"info": {"author": "Tranchitella Kft.", "author_email": "info@tranchitella.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: DFSG approved", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: System :: Filesystems"], "description": "KoboldFS\n========\n\nKoboldFS is an application-level distributed file system written in Python.\nInspired by MogileFS[1], it shares some of its properties and features:\n\n * Application level -- no special kernel modules required;\n\n * No single point of failure -- all the components of a KoboldFS setup\n   (servers and database) can be run on multiple machines, so there's no single\n   point of failure (a minimum of 2 machines is recommended);\n\n * Automatic file replication -- files are automatically replicated between all\n   the servers. In KoboldFS there is no concept of \"class\", so it is not\n   possible to specify if a given file has to be replicated only in a subset of\n   the available servers;\n\n * \"Better than RAID\" -- in a non-SAN RAID setup, the disks are redundant, but\n   the host isn't. If you lose the entire machine, the files are inaccessible.\n   KoboldFS replicates the files between devices which are on different hosts,\n   so files are always available;\n\n * Flat name space -- Files are identified by named keys in a flat, global\n   name space. You can create as many name spaces as you'd like, so multiple\n   applications with potentially conflicting keys can run on the same MogileFS\n   installation;\n\n * Shared-Nothing -- KoboldFS doesn't depend on a pricey SAN with shared disks.\n   Every machine maintains its own local disks;\n\n * No RAID required -- Local disks on KoboldFS storage nodes can be in a RAID,\n   or not. It's cheaper not to, as RAID doesn't buy you any safety that\n   MogileFS doesn't already provide;\n\n * Local file system agnostic -- Local disks on KoboldFS storage nodes can be\n   formatted with your file system of choice (ext3, XFS, etc..). KoboldFS does\n   its own internal directory hashing so it doesn't hit file system limits such\n   as \"max files per directory\" or \"max directories per directory\". Use what\n   you're comfortable with;\n\n * Completely portable -- it is a python-only module, thus can be run on any\n   operating system and architecture which is supported by Python;\n\n * Database-agnostic -- it can run with any SQL database; actually only the\n   PostgreSQL support is implemented, but adding support for new databases is\n   quick and easy;\n\n * Support for serving the stored files directly by an external web server,\n   reducing the load on the application servers.\n\nKoboldFS is not:\n----------------\n\n * POSIX Compliant -- you don't run regular Unix applications or databases\n   against KoboldFS; it's meant for archiving write-once files and doing only\n   sequential reads (though you can modify a file by way of overwriting it with\n   a new version).\n\nSample usage:\n-------------\n\n    >>> from StringIO import StringIO\n    >>> from koboldfs import Client\n\n    >>> client = Client('demo', servers=['127.0.0.1:9876', '127.0.0.1:9875'])\n\n    >>> print client.ping()\n    True\n\n    >>> print client.put('motd', '/etc/motd')\n    True\n\n    >>> output = StringIO()\n    >>> if client.get('motd', output):\n    >>>    output.seek(0)\n    >>>    print output.read()\n    Linux...\n\n    >>> print client.get_url('motd')\n    http://...\n\n    >>> print client.delete('motd')\n    True\n\n    >>> client.get('motd', output)\n    False\n\n    >>> assert client.get_url('motd') is None\n    True\n\nReferences:\n-----------\n\n    1. http://www.danga.com/mogilefs\n\n\n0.3.2 (2011-01-13)\n------------------\n\n- Added the method \"client.put_stat(key, source)\" to the client; it works like\n  the put method, but instead of a boolean it returns None in case of error,\n  and a dictionary {'digest': ..., 'size': ...} in case of success.\n\n0.3.1 (2011-01-10)\n------------------\n\n- Require SQLAlchemy >= 0.6; this fixes some corner-cases in the UTF-8 encoding\n  of data retrieved from the database; updated the models to the new syntax of\n  SQLAlchemy.\n\n- Added support for parsing of ini files.\n\n0.3.0 (2010-04-01)\n------------------\n\n- Removed the koboldfs.zope module and related dependencies; the same\n  functionality can be achieved using koboldfs.client.ClientPool, without\n  depending on any zope package.\n\n- Introduced koboldfs.client.TransactionalClientPool, which supports\n  (optionally two-phase) transactions.\n\n- Use SQLAlchemy instead of directly depending on psycopg2 for the database\n  connection; koboldfs is now (virtually) compatible with any database back-end\n  which is supported by SQLAlchemy.\n\n- Added init scripts using buildout.\n\n- Added unit tests using sqlite as database back-end.\n\n0.2.2 (2009-07-05)\n------------------\n\n- Fixes in the Data Manager: use the connection pool instead of always keeping\n  a database connection open.\n\n0.2.1 (2009-05-28)\n------------------\n\n- koboldfs.zope is an extra package now.\n\n0.2.0 (2009-05-28)\n------------------\n\n- First public release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/koboldfs", "keywords": null, "license": "GPL 2", "maintainer": null, "maintainer_email": null, "name": "koboldfs", "package_url": "https://pypi.org/project/koboldfs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/koboldfs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/koboldfs"}, "release_url": "https://pypi.org/project/koboldfs/0.3.2/", "requires_dist": null, "requires_python": null, "summary": "application-level distributed file system written in Python", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>KoboldFS is an application-level distributed file system written in Python.\nInspired by MogileFS[1], it shares some of its properties and features:</p>\n<blockquote>\n<ul>\n<li>Application level \u2013 no special kernel modules required;</li>\n<li>No single point of failure \u2013 all the components of a KoboldFS setup\n(servers and database) can be run on multiple machines, so there\u2019s no single\npoint of failure (a minimum of 2 machines is recommended);</li>\n<li>Automatic file replication \u2013 files are automatically replicated between all\nthe servers. In KoboldFS there is no concept of \u201cclass\u201d, so it is not\npossible to specify if a given file has to be replicated only in a subset of\nthe available servers;</li>\n<li>\u201cBetter than RAID\u201d \u2013 in a non-SAN RAID setup, the disks are redundant, but\nthe host isn\u2019t. If you lose the entire machine, the files are inaccessible.\nKoboldFS replicates the files between devices which are on different hosts,\nso files are always available;</li>\n<li>Flat name space \u2013 Files are identified by named keys in a flat, global\nname space. You can create as many name spaces as you\u2019d like, so multiple\napplications with potentially conflicting keys can run on the same MogileFS\ninstallation;</li>\n<li>Shared-Nothing \u2013 KoboldFS doesn\u2019t depend on a pricey SAN with shared disks.\nEvery machine maintains its own local disks;</li>\n<li>No RAID required \u2013 Local disks on KoboldFS storage nodes can be in a RAID,\nor not. It\u2019s cheaper not to, as RAID doesn\u2019t buy you any safety that\nMogileFS doesn\u2019t already provide;</li>\n<li>Local file system agnostic \u2013 Local disks on KoboldFS storage nodes can be\nformatted with your file system of choice (ext3, XFS, etc..). KoboldFS does\nits own internal directory hashing so it doesn\u2019t hit file system limits such\nas \u201cmax files per directory\u201d or \u201cmax directories per directory\u201d. Use what\nyou\u2019re comfortable with;</li>\n<li>Completely portable \u2013 it is a python-only module, thus can be run on any\noperating system and architecture which is supported by Python;</li>\n<li>Database-agnostic \u2013 it can run with any SQL database; actually only the\nPostgreSQL support is implemented, but adding support for new databases is\nquick and easy;</li>\n<li>Support for serving the stored files directly by an external web server,\nreducing the load on the application servers.</li>\n</ul>\n</blockquote>\n<div id=\"koboldfs-is-not\">\n<h2>KoboldFS is not:</h2>\n<blockquote>\n<ul>\n<li>POSIX Compliant \u2013 you don\u2019t run regular Unix applications or databases\nagainst KoboldFS; it\u2019s meant for archiving write-once files and doing only\nsequential reads (though you can modify a file by way of overwriting it with\na new version).</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"sample-usage\">\n<h2>Sample usage:</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; from StringIO import StringIO\n&gt;&gt;&gt; from koboldfs import Client\n</pre>\n<pre>&gt;&gt;&gt; client = Client('demo', servers=['127.0.0.1:9876', '127.0.0.1:9875'])\n</pre>\n<pre>&gt;&gt;&gt; print client.ping()\nTrue\n</pre>\n<pre>&gt;&gt;&gt; print client.put('motd', '/etc/motd')\nTrue\n</pre>\n<pre>&gt;&gt;&gt; output = StringIO()\n&gt;&gt;&gt; if client.get('motd', output):\n&gt;&gt;&gt;    output.seek(0)\n&gt;&gt;&gt;    print output.read()\nLinux...\n</pre>\n<pre>&gt;&gt;&gt; print client.get_url('motd')\nhttp://...\n</pre>\n<pre>&gt;&gt;&gt; print client.delete('motd')\nTrue\n</pre>\n<pre>&gt;&gt;&gt; client.get('motd', output)\nFalse\n</pre>\n<pre>&gt;&gt;&gt; assert client.get_url('motd') is None\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"references\">\n<h2>References:</h2>\n<blockquote>\n<ol>\n<li><a href=\"http://www.danga.com/mogilefs\" rel=\"nofollow\">http://www.danga.com/mogilefs</a></li>\n</ol>\n</blockquote>\n</div>\n<div id=\"id1\">\n<h2>0.3.2 (2011-01-13)</h2>\n<ul>\n<li>Added the method \u201cclient.put_stat(key, source)\u201d to the client; it works like\nthe put method, but instead of a boolean it returns None in case of error,\nand a dictionary {\u2018digest\u2019: \u2026, \u2018size\u2019: \u2026} in case of success.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.3.1 (2011-01-10)</h2>\n<ul>\n<li>Require SQLAlchemy &gt;= 0.6; this fixes some corner-cases in the UTF-8 encoding\nof data retrieved from the database; updated the models to the new syntax of\nSQLAlchemy.</li>\n<li>Added support for parsing of ini files.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>0.3.0 (2010-04-01)</h2>\n<ul>\n<li>Removed the koboldfs.zope module and related dependencies; the same\nfunctionality can be achieved using koboldfs.client.ClientPool, without\ndepending on any zope package.</li>\n<li>Introduced koboldfs.client.TransactionalClientPool, which supports\n(optionally two-phase) transactions.</li>\n<li>Use SQLAlchemy instead of directly depending on psycopg2 for the database\nconnection; koboldfs is now (virtually) compatible with any database back-end\nwhich is supported by SQLAlchemy.</li>\n<li>Added init scripts using buildout.</li>\n<li>Added unit tests using sqlite as database back-end.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>0.2.2 (2009-07-05)</h2>\n<ul>\n<li>Fixes in the Data Manager: use the connection pool instead of always keeping\na database connection open.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>0.2.1 (2009-05-28)</h2>\n<ul>\n<li>koboldfs.zope is an extra package now.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>0.2.0 (2009-05-28)</h2>\n<ul>\n<li>First public release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 793972, "releases": {"0.2.0": [], "0.2.1": [], "0.2.2": [{"comment_text": "", "digests": {"md5": "4d12c4c6ce7faabcc989a245e743ac09", "sha256": "0e5eceaebd971b84a3b7ba24f334f7efcdea41e112f7aa8f00681058b509ce5a"}, "downloads": -1, "filename": "koboldfs-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4d12c4c6ce7faabcc989a245e743ac09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22562, "upload_time": "2009-07-05T15:35:00", "upload_time_iso_8601": "2009-07-05T15:35:00.900803Z", "url": "https://files.pythonhosted.org/packages/27/c2/988d55c978586b9da7ac22a8637450fc9023f14eec97f11886152bb2e86f/koboldfs-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "69a5e59a30afa13bfccf6b309e36dabd", "sha256": "f66c930f50023172ed926195acecf63e2278bafbf018c6b2eddbe396d955c359"}, "downloads": -1, "filename": "koboldfs-0.3.0.tar.gz", "has_sig": false, "md5_digest": "69a5e59a30afa13bfccf6b309e36dabd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22253, "upload_time": "2010-04-01T15:50:20", "upload_time_iso_8601": "2010-04-01T15:50:20.252798Z", "url": "https://files.pythonhosted.org/packages/ae/7a/d0f226136119f49a50cd122871f43de78a5b159b14cee3984a6929e43380/koboldfs-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5f721a54dfb94c870f6e4b11bdff1547", "sha256": "101a1dd2182e8b968b8e18cd773745b91818e55f77309d626deeb7ba8d9b4c66"}, "downloads": -1, "filename": "koboldfs-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5f721a54dfb94c870f6e4b11bdff1547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22579, "upload_time": "2011-01-10T11:35:31", "upload_time_iso_8601": "2011-01-10T11:35:31.404749Z", "url": "https://files.pythonhosted.org/packages/5b/4e/f5107a9e51ed6ec6666086fd84c031f6bdadaf5afaadbe55fb2410cc18ed/koboldfs-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "58b60df38199a35e21ebe1b54d3ffa57", "sha256": "5e58186f03cce76b59b4c6a1a3b2de6ddd2606ce3ecc6859fffc51830874d8c1"}, "downloads": -1, "filename": "koboldfs-0.3.2.tar.gz", "has_sig": false, "md5_digest": "58b60df38199a35e21ebe1b54d3ffa57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21243, "upload_time": "2011-03-19T19:33:11", "upload_time_iso_8601": "2011-03-19T19:33:11.299859Z", "url": "https://files.pythonhosted.org/packages/57/c7/c340419cf22a4b49be354e1884f96824afe75f8508f51438cd0f145a5f5b/koboldfs-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58b60df38199a35e21ebe1b54d3ffa57", "sha256": "5e58186f03cce76b59b4c6a1a3b2de6ddd2606ce3ecc6859fffc51830874d8c1"}, "downloads": -1, "filename": "koboldfs-0.3.2.tar.gz", "has_sig": false, "md5_digest": "58b60df38199a35e21ebe1b54d3ffa57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21243, "upload_time": "2011-03-19T19:33:11", "upload_time_iso_8601": "2011-03-19T19:33:11.299859Z", "url": "https://files.pythonhosted.org/packages/57/c7/c340419cf22a4b49be354e1884f96824afe75f8508f51438cd0f145a5f5b/koboldfs-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:09 2020"}