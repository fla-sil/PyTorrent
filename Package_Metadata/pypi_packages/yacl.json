{"info": {"author": "Ingo Heimbach", "author_email": "i.heimbach@fz-juelich.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Utilities"], "description": "# YACL - Yet Another Color Logger\n\n## Overview\n\nYACL is a very simple to use color logger for Python intended to be used for stderr logging. It can be set up with a\nsingle function call in existing projects and enables colored logging output with reasonable defaults. Colors are\ndisabled automatically if stderr is not connected to a tty (e.g. on file redirection) or if not supported by the\nconnected terminal. Currently, Linux and macOS are supported.\n\nYou can use Markdown style formattings to produce bold and italic text. Additionally, text enclosed in double\nunderscores will be displayed underlined. YACL checks the terminal capabilities and automatically disables unsupported\nformats.\n\n## Installation\n\nYACL is available on PyPI for Python 3.3+ and can be installed with `pip`:\n\n```bash\npython3 -m pip install yacl\n```\n\nIf you use Arch Linux or one of its derivatives, you can also install `yacl` from the\n[AUR](https://aur.archlinux.org/packages/python-yacl/):\n\n```bash\nyay -S python-yacl\n```\n\n## Usage\n\n### Simple\n\nCall ``setup_colored_stderr_logging`` after the root logger has been set up, for example:\n\n```python\n#!/usr/bin/env python3\n\nimport logging\nfrom yacl import setup_colored_stderr_logging\n\n\ndef main():\n    logging.basicConfig(level=logging.DEBUG)\n    setup_colored_stderr_logging()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nAfterwards, get module level loggers and use them without any further configuration:\n\n```python\nimport logging\n\n\nlogger = logging.getLogger(__name__)\n\n\ndef my_func():\n    logger.debug('Failed to open file \"abc\"')\n```\n\nYou will get an output like:\n\n![screenshot_simple](https://raw.githubusercontent.com/IngoHeimbach/yacl/master/simple.png)\n\nThis example only works if you don't attach any output handlers to loggers other than the root logger as recommended in\nthe [Python logging documentation](https://docs.python.org/3/library/logging.html):\n\n> If you attach a handler to a logger and one or more of its ancestors, it may emit the same record multiple times. In\n> general, you should not need to attach a handler to more than one logger - if you just attach it to the appropriate\n> logger which is highest in the logger hierarchy, then it will see all events logged by all descendant loggers,\n> provided that their propagate setting is left set to True. A common scenario is to attach handlers only to the root\n> logger, and to let propagation take care of the rest.\n\n### Customization\n\nYou can pass several arguments to the `setup_colored_stderr_logging` function to customize the logging behavior:\n\n- `logger`: The logger which will be configured to print colored logging output to stderr. By default, the root logger\n  is used.\n\n- `format_string`: The format string to use for logging messages. By default the logging format\n  `[%(levelname)s] (%(name)s:%(lineno)s:%(funcName)s): %(message)s` is used.\n\n  **Important**: All formats must be passed as **string types**. For example, in the default format, ``lineno`` is given\n  as string (`(%lineno)s`) and not as number (`(%lineno)d`).\n\n- `remove_other_handlers`: Bool flag to remove all other output handlers on the given logger. Is set to `true` by\n  default to avoid duplicate logging messages.\n\n- `attribute_colors`: A dictionary which assigns colors to logging attributes (which are used in the logging format\n  string). This dictionary is merged with the internal defaults:\n\n  ```python\n  from yacl import TerminalColorCodes\n\n  _attribute_colors = {\n      \"funcName\": TerminalColorCodes.blue,\n      \"lineno\": TerminalColorCodes.yellow,\n      \"name\": TerminalColorCodes.cyan,\n  }\n  ```\n\n- `keyword_colors`: A dictionary which assigns colors to a given regular expressions. This setting can be used to\n  highlight expressions in the logging messages. This dictionary is merged with the internal defaults:\n\n  ```python\n  from yacl import TerminalColorCodes\n\n  keyword_colors = {\n      r\"\\bcritical( error)?\\b\": TerminalColorCodes.red + TerminalColorCodes.blink + TerminalColorCodes.bold,\n      r\"\\bdebug(ged|ging)?\\b\": TerminalColorCodes.green + TerminalColorCodes.bold,\n      r\"\\berror\\b\": TerminalColorCodes.red + TerminalColorCodes.bold,\n      r\"\\bfail(ed|ing)?\\b\": TerminalColorCodes.red + TerminalColorCodes.bold,\n      r\"\\binfo\\b\": TerminalColorCodes.blue + TerminalColorCodes.bold,\n      r\"\\bwarn(ed|ing)?\\b\": TerminalColorCodes.yellow + TerminalColorCodes.bold,\n      r'\"[^\"]*\"': TerminalColorCodes.yellow,\n      r\"\\*([^*]+)\\*\": TerminalColorCodes.italics,\n      r\"\\*\\*([^*]+)\\*\\*\": TerminalColorCodes.bold,\n      r\"__([^_]+)__\": TerminalColorCodes.underline,\n      r\"`([^`]+)`\": TerminalColorCodes.standout,\n  }\n  ```\n\n  Example: Pass a dictionary\n\n  ```python\n  {\n      r\"'[^']*'\": TerminalColorCodes.green + TerminalColorCodes.italics,\n  }\n  ```\n\n  to highlight strings in single quotes with green color and italic font (if supported by the Terminal).\n\n- `level_colors`: A dictionary which assigns colors to logging levels (DEBUG, INFO, ...). This dictionary is merged with\n  the internal defaults:\n\n  ```python\n  from yacl import TerminalColorCodes\n\n  level_colors = {\n      \"DEBUG\": TerminalColorCodes.green + TerminalColorCodes.bold,\n      \"INFO\": TerminalColorCodes.blue + TerminalColorCodes.bold,\n      \"WARNING\": TerminalColorCodes.yellow + TerminalColorCodes.bold,\n      \"ERROR\": TerminalColorCodes.red + TerminalColorCodes.bold,\n      \"CRITICAL\": TerminalColorCodes.red + TerminalColorCodes.blink + TerminalColorCodes.bold,\n  }\n  ```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IngoHeimbach/yacl", "keywords": "utility,logging,color", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yacl", "package_url": "https://pypi.org/project/yacl/", "platform": "", "project_url": "https://pypi.org/project/yacl/", "project_urls": {"Homepage": "https://github.com/IngoHeimbach/yacl"}, "release_url": "https://pypi.org/project/yacl/0.3.4/", "requires_dist": null, "requires_python": "~=3.3", "summary": "YACL (Yet Another Color Logger) is a simple to use color logger for Python programs.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>YACL - Yet Another Color Logger</h1>\n<h2>Overview</h2>\n<p>YACL is a very simple to use color logger for Python intended to be used for stderr logging. It can be set up with a\nsingle function call in existing projects and enables colored logging output with reasonable defaults. Colors are\ndisabled automatically if stderr is not connected to a tty (e.g. on file redirection) or if not supported by the\nconnected terminal. Currently, Linux and macOS are supported.</p>\n<p>You can use Markdown style formattings to produce bold and italic text. Additionally, text enclosed in double\nunderscores will be displayed underlined. YACL checks the terminal capabilities and automatically disables unsupported\nformats.</p>\n<h2>Installation</h2>\n<p>YACL is available on PyPI for Python 3.3+ and can be installed with <code>pip</code>:</p>\n<pre>python3 -m pip install yacl\n</pre>\n<p>If you use Arch Linux or one of its derivatives, you can also install <code>yacl</code> from the\n<a href=\"https://aur.archlinux.org/packages/python-yacl/\" rel=\"nofollow\">AUR</a>:</p>\n<pre>yay -S python-yacl\n</pre>\n<h2>Usage</h2>\n<h3>Simple</h3>\n<p>Call <code>setup_colored_stderr_logging</code> after the root logger has been set up, for example:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yacl</span> <span class=\"kn\">import</span> <span class=\"n\">setup_colored_stderr_logging</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n    <span class=\"n\">setup_colored_stderr_logging</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Afterwards, get module level loggers and use them without any further configuration:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">():</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'Failed to open file \"abc\"'</span><span class=\"p\">)</span>\n</pre>\n<p>You will get an output like:</p>\n<p><img alt=\"screenshot_simple\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9f7de10dd916451b1ba97897cb50155766ca569/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f496e676f4865696d626163682f7961636c2f6d61737465722f73696d706c652e706e67\"></p>\n<p>This example only works if you don't attach any output handlers to loggers other than the root logger as recommended in\nthe <a href=\"https://docs.python.org/3/library/logging.html\" rel=\"nofollow\">Python logging documentation</a>:</p>\n<blockquote>\n<p>If you attach a handler to a logger and one or more of its ancestors, it may emit the same record multiple times. In\ngeneral, you should not need to attach a handler to more than one logger - if you just attach it to the appropriate\nlogger which is highest in the logger hierarchy, then it will see all events logged by all descendant loggers,\nprovided that their propagate setting is left set to True. A common scenario is to attach handlers only to the root\nlogger, and to let propagation take care of the rest.</p>\n</blockquote>\n<h3>Customization</h3>\n<p>You can pass several arguments to the <code>setup_colored_stderr_logging</code> function to customize the logging behavior:</p>\n<ul>\n<li>\n<p><code>logger</code>: The logger which will be configured to print colored logging output to stderr. By default, the root logger\nis used.</p>\n</li>\n<li>\n<p><code>format_string</code>: The format string to use for logging messages. By default the logging format\n<code>[%(levelname)s] (%(name)s:%(lineno)s:%(funcName)s): %(message)s</code> is used.</p>\n<p><strong>Important</strong>: All formats must be passed as <strong>string types</strong>. For example, in the default format, <code>lineno</code> is given\nas string (<code>(%lineno)s</code>) and not as number (<code>(%lineno)d</code>).</p>\n</li>\n<li>\n<p><code>remove_other_handlers</code>: Bool flag to remove all other output handlers on the given logger. Is set to <code>true</code> by\ndefault to avoid duplicate logging messages.</p>\n</li>\n<li>\n<p><code>attribute_colors</code>: A dictionary which assigns colors to logging attributes (which are used in the logging format\nstring). This dictionary is merged with the internal defaults:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yacl</span> <span class=\"kn\">import</span> <span class=\"n\">TerminalColorCodes</span>\n\n<span class=\"n\">_attribute_colors</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"funcName\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"lineno\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">cyan</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p><code>keyword_colors</code>: A dictionary which assigns colors to a given regular expressions. This setting can be used to\nhighlight expressions in the logging messages. This dictionary is merged with the internal defaults:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yacl</span> <span class=\"kn\">import</span> <span class=\"n\">TerminalColorCodes</span>\n\n<span class=\"n\">keyword_colors</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\bcritical( error)?\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">blink</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\bdebug(ged|ging)?\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\berror\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\bfail(ed|ing)?\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\binfo\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">blue</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\bwarn(ed|ing)?\\b\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">yellow</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s1\">'\"[^\"]*\"'</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\*([^*]+)\\*\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">italics</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"\\*\\*([^*]+)\\*\\*\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"__([^_]+)__\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">underline</span><span class=\"p\">,</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"`([^`]+)`\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">standout</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Example: Pass a dictionary</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"sa\">r</span><span class=\"s2\">\"'[^']*'\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">italics</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>to highlight strings in single quotes with green color and italic font (if supported by the Terminal).</p>\n</li>\n<li>\n<p><code>level_colors</code>: A dictionary which assigns colors to logging levels (DEBUG, INFO, ...). This dictionary is merged with\nthe internal defaults:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yacl</span> <span class=\"kn\">import</span> <span class=\"n\">TerminalColorCodes</span>\n\n<span class=\"n\">level_colors</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"DEBUG\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">green</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"INFO\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">blue</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"WARNING\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">yellow</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"ERROR\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"CRITICAL\"</span><span class=\"p\">:</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">red</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">blink</span> <span class=\"o\">+</span> <span class=\"n\">TerminalColorCodes</span><span class=\"o\">.</span><span class=\"n\">bold</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7095382, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d803d09f8bbcda0d97cd8c96d0116d47", "sha256": "83763c4bf02ee62c4c952fc84cfccac1b7a5c59842a75246495b400f86cda1e0"}, "downloads": -1, "filename": "yacl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d803d09f8bbcda0d97cd8c96d0116d47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 5407, "upload_time": "2019-08-12T07:08:35", "upload_time_iso_8601": "2019-08-12T07:08:35.666411Z", "url": "https://files.pythonhosted.org/packages/de/b4/9dd60103e89e25f3193447112353fab0c4919bcc1d73d23045d8fa143ad6/yacl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfaf2c62c5604836056e34b47efcb30a", "sha256": "5c311f55c5090f0aa2c801be2b639e6bbb48afd67ea762a5bba8e1378033b4d5"}, "downloads": -1, "filename": "yacl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bfaf2c62c5604836056e34b47efcb30a", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 5525, "upload_time": "2019-08-12T07:08:37", "upload_time_iso_8601": "2019-08-12T07:08:37.991395Z", "url": "https://files.pythonhosted.org/packages/88/98/045a57616e47b37f446fb6124616f8de567ea678bb7748fdb23c81651164/yacl-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "569762bb28ecc835f27cdc0a43b69ecd", "sha256": "8ded8ffeb1e90df2b830ec04a2f99e3f4a77905d2a76bc32f24cf371ea530f90"}, "downloads": -1, "filename": "yacl-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "569762bb28ecc835f27cdc0a43b69ecd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 5412, "upload_time": "2019-08-12T07:51:43", "upload_time_iso_8601": "2019-08-12T07:51:43.956348Z", "url": "https://files.pythonhosted.org/packages/fe/44/54d6f591cb3528aa6d224cb3a3007eeb8c7853c27620c5b8f2c210f06c2c/yacl-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "546a866c9f6db82222bb2fecf2d06547", "sha256": "fb6f2caf1fd7fa73f3f8a51479622cd770f1dd48bd2cedcad42d5b2cf1c6d9f1"}, "downloads": -1, "filename": "yacl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "546a866c9f6db82222bb2fecf2d06547", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 5545, "upload_time": "2019-08-12T07:51:45", "upload_time_iso_8601": "2019-08-12T07:51:45.702441Z", "url": "https://files.pythonhosted.org/packages/56/8f/26aa624ba4aff46c97341e6625d81a945b4f2d5082317bd924e2486743b5/yacl-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "89bb787d35a57db31c773109b1ad11b3", "sha256": "0094975b61f51a55820315fa53972c4f17cc3994287ed3a1fc5eb92a06ea6bc4"}, "downloads": -1, "filename": "yacl-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "89bb787d35a57db31c773109b1ad11b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 5420, "upload_time": "2019-08-12T13:23:46", "upload_time_iso_8601": "2019-08-12T13:23:46.453532Z", "url": "https://files.pythonhosted.org/packages/7c/62/0d22579e743fc7af729b3a5026d39670905823430c9d6a2e718cc5789948/yacl-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b6198bdc475d5fc25d28a35b93fd3ff", "sha256": "e68f1f52e28bce3e18da5d78a4dcc689c58990e2c73e05a351b85e2b5dca8f13"}, "downloads": -1, "filename": "yacl-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6b6198bdc475d5fc25d28a35b93fd3ff", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 5544, "upload_time": "2019-08-12T13:23:48", "upload_time_iso_8601": "2019-08-12T13:23:48.115439Z", "url": "https://files.pythonhosted.org/packages/5f/16/1af7de401afd9a388093b4fd0bb25e6d7e28c44888f05c4e8b0aa87fe9ca/yacl-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "10270538fbecb6c1865908964430846b", "sha256": "b4a98e8a27cef7017bdfe436b5e9464aa5b11367e69eec3a620b70d57226af25"}, "downloads": -1, "filename": "yacl-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "10270538fbecb6c1865908964430846b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 5425, "upload_time": "2019-08-12T13:48:42", "upload_time_iso_8601": "2019-08-12T13:48:42.102364Z", "url": "https://files.pythonhosted.org/packages/26/4d/fa397c11717fcab6489629c83a01124c3204e4e89a8ac6a4648aeb9f7181/yacl-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c53f0169fd2d0fcf4c608c8511bf7a60", "sha256": "4b6bfda17a9077ed6775834f36f5d2252d05f9a04de4a6b1a85e75d19d7261e0"}, "downloads": -1, "filename": "yacl-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c53f0169fd2d0fcf4c608c8511bf7a60", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 5549, "upload_time": "2019-08-12T13:48:43", "upload_time_iso_8601": "2019-08-12T13:48:43.376852Z", "url": "https://files.pythonhosted.org/packages/4c/90/cd5db82caec9a6a8db6e861bc61330cd17d7b1fcc5e20a0c9747b6ab6839/yacl-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "18dcef863b783d8e59b942435072a794", "sha256": "372ee388a0031f685012e10a1e2bee780fa58406aebf11d87eb2546f1d627c1e"}, "downloads": -1, "filename": "yacl-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18dcef863b783d8e59b942435072a794", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6555, "upload_time": "2019-08-14T09:07:34", "upload_time_iso_8601": "2019-08-14T09:07:34.299058Z", "url": "https://files.pythonhosted.org/packages/2a/38/58c1c81b1a27edb592b99879b4552dfa0672aae24dd7ad9da54b6284c844/yacl-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d69eb2e7709b7be2db32ac469f0af9b6", "sha256": "9491c113f78137d9aeca6c923a41b67389c6d501af30cc346c0145e63024996f"}, "downloads": -1, "filename": "yacl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d69eb2e7709b7be2db32ac469f0af9b6", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 6718, "upload_time": "2019-08-14T09:07:35", "upload_time_iso_8601": "2019-08-14T09:07:35.691340Z", "url": "https://files.pythonhosted.org/packages/07/9f/5c6724a5ddeb6a337ec2bf4038ebd93ff1a5ac900bb0e2759745f5729743/yacl-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "665b2ac1733b347d7d71b4a28993a7cf", "sha256": "c87f01d716060df98de266ba28f3c0f6f3c36a3f3f72f3d0522c01183c5e9d79"}, "downloads": -1, "filename": "yacl-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "665b2ac1733b347d7d71b4a28993a7cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6557, "upload_time": "2019-08-28T09:59:04", "upload_time_iso_8601": "2019-08-28T09:59:04.443327Z", "url": "https://files.pythonhosted.org/packages/6c/ed/d812e87f378c0d34d37e6401118f307e9888f93c19dede4bc60d7019f96a/yacl-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39eca6832cde8e24ae37514932307f4c", "sha256": "352b63489e68884cbedd0026ebbbf6c7181b2ce1c82ca70d111fac9f71133575"}, "downloads": -1, "filename": "yacl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "39eca6832cde8e24ae37514932307f4c", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 6725, "upload_time": "2019-08-28T09:59:06", "upload_time_iso_8601": "2019-08-28T09:59:06.155504Z", "url": "https://files.pythonhosted.org/packages/09/97/1804638e9360c64ba27b966e1196d6b318a8a6a6f0b220f37b2f6477ae9d/yacl-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8d349e90639f0c86adac2fba0c950a47", "sha256": "3c575d81c3ae8c339ce503c71e584238a5500c65148d9ca10b38d72bf4a00c76"}, "downloads": -1, "filename": "yacl-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d349e90639f0c86adac2fba0c950a47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6562, "upload_time": "2019-08-28T10:04:28", "upload_time_iso_8601": "2019-08-28T10:04:28.337364Z", "url": "https://files.pythonhosted.org/packages/7c/1e/0ef61f69876398b2bdfff46712336d08f54beb7127dfa91c167c974be5dc/yacl-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06323089bb737eaae906f528b78d9e75", "sha256": "3c62a2c81937755ebf32252eb027b11318bb0b1c82a9bfe2380a821355b772ee"}, "downloads": -1, "filename": "yacl-0.3.1.tar.gz", "has_sig": false, "md5_digest": "06323089bb737eaae906f528b78d9e75", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 6727, "upload_time": "2019-08-28T10:04:29", "upload_time_iso_8601": "2019-08-28T10:04:29.729451Z", "url": "https://files.pythonhosted.org/packages/d7/a3/54645fa59d4eee03bc075a040162ac9973775052f1562f99b03266293882/yacl-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "280491760822ebba860f05558a4a3ecc", "sha256": "2a1779ef3e7710c5c9bdcf4dbfad51836299cea682be6152479cfe6b75326c10"}, "downloads": -1, "filename": "yacl-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "280491760822ebba860f05558a4a3ecc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6564, "upload_time": "2020-04-14T19:11:55", "upload_time_iso_8601": "2020-04-14T19:11:55.386669Z", "url": "https://files.pythonhosted.org/packages/2e/0d/1256a558bd76581503f82ef3c7aabf460efe8fa42ff8a02c0dd6f68f7375/yacl-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6333ecc8743c6ee2eae97dc9dd2a2ae4", "sha256": "93322401f8edb3718d1085b44aa6e68c802f6a3b97e3a5c870d16c17af56ec72"}, "downloads": -1, "filename": "yacl-0.3.2.tar.gz", "has_sig": false, "md5_digest": "6333ecc8743c6ee2eae97dc9dd2a2ae4", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 7021, "upload_time": "2020-04-14T19:11:56", "upload_time_iso_8601": "2020-04-14T19:11:56.976488Z", "url": "https://files.pythonhosted.org/packages/a9/9c/471b0b3a57bdc02f21c955c7093aebfd2a0113e3f30ed81c103692be5b7a/yacl-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "7985f861030f00e366fe4ffd784ba0a9", "sha256": "7aa1162aa300ab3f9ef5861a7cecd08a87c72e32659e1c153e234e8b379ae1bb"}, "downloads": -1, "filename": "yacl-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7985f861030f00e366fe4ffd784ba0a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6562, "upload_time": "2020-04-23T18:44:31", "upload_time_iso_8601": "2020-04-23T18:44:31.501444Z", "url": "https://files.pythonhosted.org/packages/b3/a7/f19169c1f8fc4b3d989ce508931b89a14275ee0e77e499b6681888982a6f/yacl-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3cd52c537898d913edf287e6b91d025", "sha256": "dd41fe5f0d9be1a2b0a580c16682a8dcdace6a36bfbd1fa051b0b75358afef00"}, "downloads": -1, "filename": "yacl-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d3cd52c537898d913edf287e6b91d025", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 6989, "upload_time": "2020-04-23T18:44:32", "upload_time_iso_8601": "2020-04-23T18:44:32.793318Z", "url": "https://files.pythonhosted.org/packages/36/06/fbb6674a8adb9cf321983a1f77190463320b389683504b4afd3b7edec820/yacl-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "11da88b22ef5b895782587c502f93cea", "sha256": "953bc5b1480e7afccf939055a62a8ef40e999b9d43704c155e82f83163d13945"}, "downloads": -1, "filename": "yacl-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "11da88b22ef5b895782587c502f93cea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6640, "upload_time": "2020-04-24T19:15:50", "upload_time_iso_8601": "2020-04-24T19:15:50.140095Z", "url": "https://files.pythonhosted.org/packages/50/60/af20dd0b31d815c56b36adf2ff218d9ebfe57019a4bab72b7c3fa4b94fa7/yacl-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc676193ac127c49607b8c88264f1cc5", "sha256": "15c2fe4aafae195764417ce7841f8baff3a335caea5ea225ce521ba4d83b02c8"}, "downloads": -1, "filename": "yacl-0.3.4.tar.gz", "has_sig": false, "md5_digest": "bc676193ac127c49607b8c88264f1cc5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 7088, "upload_time": "2020-04-24T19:15:51", "upload_time_iso_8601": "2020-04-24T19:15:51.511733Z", "url": "https://files.pythonhosted.org/packages/44/f5/6b60169297923bcbd63b29944599db847d9b33712361801eb88110c20e3c/yacl-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11da88b22ef5b895782587c502f93cea", "sha256": "953bc5b1480e7afccf939055a62a8ef40e999b9d43704c155e82f83163d13945"}, "downloads": -1, "filename": "yacl-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "11da88b22ef5b895782587c502f93cea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.3", "size": 6640, "upload_time": "2020-04-24T19:15:50", "upload_time_iso_8601": "2020-04-24T19:15:50.140095Z", "url": "https://files.pythonhosted.org/packages/50/60/af20dd0b31d815c56b36adf2ff218d9ebfe57019a4bab72b7c3fa4b94fa7/yacl-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc676193ac127c49607b8c88264f1cc5", "sha256": "15c2fe4aafae195764417ce7841f8baff3a335caea5ea225ce521ba4d83b02c8"}, "downloads": -1, "filename": "yacl-0.3.4.tar.gz", "has_sig": false, "md5_digest": "bc676193ac127c49607b8c88264f1cc5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.3", "size": 7088, "upload_time": "2020-04-24T19:15:51", "upload_time_iso_8601": "2020-04-24T19:15:51.511733Z", "url": "https://files.pythonhosted.org/packages/44/f5/6b60169297923bcbd63b29944599db847d9b33712361801eb88110c20e3c/yacl-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:51 2020"}