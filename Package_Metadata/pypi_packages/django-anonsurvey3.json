{"info": {"author": "Darko Poljak, Song Li", "author_email": "darko.poljak@gmail.com; songl@outlook.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Anonsurvey3\n===========\n\nAnonsurvey is a Django app to create Web-based anonymous surveys by https://github.com/darko-poljak/django-anonsurvey.\n\nAnonsurvey3 is a fork to support Python 3 and add more question types such as audio.\n\nQuick start\n-----------\n\n0. Install django-anonsurvey from this repo:\n\n   ::\n\n       mkvirtualenv survey\n       git clone https://github.com/boltomli/django-anonsurvey.git\n       cd django-anonsurvey\n       python setup.py bdist_wheel\n       pip install --upgrade dist/django_anonsurvey*.whl\n\n1. Add \"anonsurvey3\" to your INSTALLED\\_APPS setting like this:\n\n   ::\n\n       INSTALLED_APPS = [\n           ...\n           'anonsurvey3',\n       ]\n\n       SURVEYS_PAGE_SIZE = 5 # for paginator\n       STATIC_ROOT = os.path.join(BASE_DIR, 'static') # optional for collectstatic\n\n2. Include the anonsurvey URLconf in your project urls.py like this:\n\n   ::\n\n       from django.conf.urls import url, include\n       url(r'^survey/', include('anonsurvey3.urls')),\n\n3. Create the anonsurvey models:\n\n   ::\n\n       python manage.py makemigrations anonsurvey3\n       python manage.py migrate\n\n4. Start the development server and visit http://127.0.0.1:8000/admin/\n   to create a survey (you'll need the Admin app enabled).\n\n   ::\n\n       python manage.py createsuperuser\n       python manage.py runserver\n\n5. Visit http://127.0.0.1:8000/survey/ to list surveys.\n\nCreating survey\n---------------\n\nFirst you enter survey main data:\n\n    -  title\n    -  name (which is a slug initialy created from title)\n    -  introduction text\n    -  active state (False by default).\n\nThen you can enter question. For each question you can enter the\nquestion group the question belongs to. Question group is optional.\nQuestion data are:\n\n    -  survey the question belongs to\n    -  optional question group\n    -  type of the question:\n\n       ::\n\n           -   input - input type text\n           -   choice - input type radio group\n           -   multiple choice - input type checkboxes\n           -   choice with input - input type radio group with one radio\n               input with type text\n           -   multiple choice with input - input type checkboxes with\n               one checkbox with input type text\n\n    -  text of the question\n    -  requires answer\n    -  sort index - questions are sorted by this number ascending.\n\nQuestion group contains of the survey it belongs to and question group\ntext.\n\nFor each question you define answer or multiple offered answers. Answer\ndata are:\n\n    -  type - input or choice - it is relevant only for choice with\n       input and multiple choice with input question types\n    -  text prefix - displayed before input field of input type answer\n    -  text - displayed for choice type of answer\n    -  text sufix - displayed after input field of input type answer\n    -  default value - for input type of answer\n    -  validation regex - for input type of answer; regex is a valid\n       python regex\n    -  sort index - answers are sorted by this number ascending.\n\nDepending on survey definition survey questions and offered answers are\nrendered differently.\n\nFirst, survey title and intro text are displayed. Then questions are\nrendered in ordering depending on sort index value. If question belongs\nto question group then group's title is displayed. Then each quesiton\nfor group is rendered inside that group. If question belongs to none\ngroup then its alone is rendered. For each question its text is\ndisplayed. Under the question answers are rendered in ordering defined\nby sort index value. If question type is input then input field is\nrendered. Before input field text prefix is displayed. After input field\ntext sufix is displayed. If default value is defined that value is\nrendered inside input field. If question type is choice then offered\nanswers are displayed as radio group. Each radio is one offered answer\nand its text is displayed. If question type is multiple choice then\noffered answers are displayed as checkbox. Each checkbox is one offered\nanswer and its text is displayed. If quesiton type is choice with input\nor multiple choice with input then each answer is displayed as above for\nchoice or multiple choice type of question. Here answer's answer type is\nrelevant. If type is input then its radio or checkbox contains of input\nfield which is rendered the same as for input type of question.\n\nWhen submiting completed survey validations are performed:\n\n    -  if question requires answer then answer must be suplied\n    -  if answer type is input and validation regex is supplied then\n       answer value must match defined regex (note that regex is\n       prefixed and sufixe with ^ and $ so that whole string match is\n       checked).\n\nSubmitted answers data are:\n\n    -  client\\_id - in the format <current\\_timestamp>@<remote\\_ip> (by\n       this value you can group answers to one client that completed the\n       survey)\n    -  datetime - current timestamp answer is saved\n    -  answer - foreign key to offered answer that is input/selected\n    -  text - input value for input type of offered answer.\n\nWithin package there are simplest templates you can use to make your\nown. For survey display {% include \"anonsurvey3/survey\\_form.thml\" with\nsurvey=survey %} is used. This template provides a way for rendering the\nsurvey form depending on survey definition. You can use it as is or you\ncan use it as a template for constructing yours.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/boltomli/django-anonsurvey", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "django-anonsurvey3", "package_url": "https://pypi.org/project/django-anonsurvey3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-anonsurvey3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/boltomli/django-anonsurvey"}, "release_url": "https://pypi.org/project/django-anonsurvey3/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "A Django app to create Web-based anonymous surveys", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Anonsurvey is a Django app to create Web-based anonymous surveys by <a href=\"https://github.com/darko-poljak/django-anonsurvey\" rel=\"nofollow\">https://github.com/darko-poljak/django-anonsurvey</a>.</p>\n<p>Anonsurvey3 is a fork to support Python 3 and add more question types such as audio.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Install django-anonsurvey from this repo:</p>\n<pre>mkvirtualenv survey\ngit clone https://github.com/boltomli/django-anonsurvey.git\ncd django-anonsurvey\npython setup.py bdist_wheel\npip install --upgrade dist/django_anonsurvey*.whl\n</pre>\n</li>\n<li><p>Add \u201canonsurvey3\u201d to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'anonsurvey3',\n]\n\nSURVEYS_PAGE_SIZE = 5 # for paginator\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static') # optional for collectstatic\n</pre>\n</li>\n<li><p>Include the anonsurvey URLconf in your project urls.py like this:</p>\n<pre>from django.conf.urls import url, include\nurl(r'^survey/', include('anonsurvey3.urls')),\n</pre>\n</li>\n<li><p>Create the anonsurvey models:</p>\n<pre>python manage.py makemigrations anonsurvey3\npython manage.py migrate\n</pre>\n</li>\n<li><p>Start the development server and visit <a href=\"http://127.0.0.1:8000/admin/\" rel=\"nofollow\">http://127.0.0.1:8000/admin/</a>\nto create a survey (you\u2019ll need the Admin app enabled).</p>\n<pre>python manage.py createsuperuser\npython manage.py runserver\n</pre>\n</li>\n<li><p>Visit <a href=\"http://127.0.0.1:8000/survey/\" rel=\"nofollow\">http://127.0.0.1:8000/survey/</a> to list surveys.</p>\n</li>\n</ol>\n</div>\n<div id=\"creating-survey\">\n<h2>Creating survey</h2>\n<p>First you enter survey main data:</p>\n<blockquote>\n<ul>\n<li>title</li>\n<li>name (which is a slug initialy created from title)</li>\n<li>introduction text</li>\n<li>active state (False by default).</li>\n</ul>\n</blockquote>\n<p>Then you can enter question. For each question you can enter the\nquestion group the question belongs to. Question group is optional.\nQuestion data are:</p>\n<blockquote>\n<ul>\n<li><p>survey the question belongs to</p>\n</li>\n<li><p>optional question group</p>\n</li>\n<li><p>type of the question:</p>\n<pre>-   input - input type text\n-   choice - input type radio group\n-   multiple choice - input type checkboxes\n-   choice with input - input type radio group with one radio\n    input with type text\n-   multiple choice with input - input type checkboxes with\n    one checkbox with input type text\n</pre>\n</li>\n<li><p>text of the question</p>\n</li>\n<li><p>requires answer</p>\n</li>\n<li><p>sort index - questions are sorted by this number ascending.</p>\n</li>\n</ul>\n</blockquote>\n<p>Question group contains of the survey it belongs to and question group\ntext.</p>\n<p>For each question you define answer or multiple offered answers. Answer\ndata are:</p>\n<blockquote>\n<ul>\n<li>type - input or choice - it is relevant only for choice with\ninput and multiple choice with input question types</li>\n<li>text prefix - displayed before input field of input type answer</li>\n<li>text - displayed for choice type of answer</li>\n<li>text sufix - displayed after input field of input type answer</li>\n<li>default value - for input type of answer</li>\n<li>validation regex - for input type of answer; regex is a valid\npython regex</li>\n<li>sort index - answers are sorted by this number ascending.</li>\n</ul>\n</blockquote>\n<p>Depending on survey definition survey questions and offered answers are\nrendered differently.</p>\n<p>First, survey title and intro text are displayed. Then questions are\nrendered in ordering depending on sort index value. If question belongs\nto question group then group\u2019s title is displayed. Then each quesiton\nfor group is rendered inside that group. If question belongs to none\ngroup then its alone is rendered. For each question its text is\ndisplayed. Under the question answers are rendered in ordering defined\nby sort index value. If question type is input then input field is\nrendered. Before input field text prefix is displayed. After input field\ntext sufix is displayed. If default value is defined that value is\nrendered inside input field. If question type is choice then offered\nanswers are displayed as radio group. Each radio is one offered answer\nand its text is displayed. If question type is multiple choice then\noffered answers are displayed as checkbox. Each checkbox is one offered\nanswer and its text is displayed. If quesiton type is choice with input\nor multiple choice with input then each answer is displayed as above for\nchoice or multiple choice type of question. Here answer\u2019s answer type is\nrelevant. If type is input then its radio or checkbox contains of input\nfield which is rendered the same as for input type of question.</p>\n<p>When submiting completed survey validations are performed:</p>\n<blockquote>\n<ul>\n<li>if question requires answer then answer must be suplied</li>\n<li>if answer type is input and validation regex is supplied then\nanswer value must match defined regex (note that regex is\nprefixed and sufixe with ^ and $ so that whole string match is\nchecked).</li>\n</ul>\n</blockquote>\n<p>Submitted answers data are:</p>\n<blockquote>\n<ul>\n<li>client_id - in the format &lt;current_timestamp&gt;@&lt;remote_ip&gt; (by\nthis value you can group answers to one client that completed the\nsurvey)</li>\n<li>datetime - current timestamp answer is saved</li>\n<li>answer - foreign key to offered answer that is input/selected</li>\n<li>text - input value for input type of offered answer.</li>\n</ul>\n</blockquote>\n<p>Within package there are simplest templates you can use to make your\nown. For survey display {% include \u201canonsurvey3/survey_form.thml\u201d with\nsurvey=survey %} is used. This template provides a way for rendering the\nsurvey form depending on survey definition. You can use it as is or you\ncan use it as a template for constructing yours.</p>\n</div>\n\n          </div>"}, "last_serial": 1885007, "releases": {"0.3.1": []}, "urls": [], "timestamp": "Fri May  8 00:37:41 2020"}