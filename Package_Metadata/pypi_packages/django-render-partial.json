{"info": {"author": "utapyngo", "author_email": "ut@pyngo.tom.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "Installation\n============\n\n\n1. ``pip install django_render_partial``\n2. Add ``'django_render_partial'`` to ``INSTALLED_APPS``\n3. Ensure that ``'django.template.context_processors.request'`` is in\n   ``TEMPLATES['OPTIONS']['context_processors']``\n\n\nUsage\n=====\n\nWrite a template for partial view, e.g. ``partial_view.html``::\n\n    <p>{{ arg1 }} + {{ arg2 }} = {{ result }}</p>\n\nWrite a partial view::\n\n    def partial_view(request, *args, **kwargs):\n        result = kwargs['arg1'] + kwargs['arg2']\n        kwargs['result'] = result\n        return render(request, 'partial_view.html', kwargs)\n\nif you are using function-based views, or::\n\n    class PartialView(TemplateView):\n        template_name = 'partial_view.html'\n\n        def get_context_data(self, **kwargs):\n            result = kwargs['arg1'] + kwargs['arg2']\n            kwargs['result'] = result\n            return super(PartialView, self).get_context_data(**kwargs)\n\nif you are using class-based views.\n\n\nAdd it to ``urls.py``::\n\n    url(r'^partial-view/(?P<arg1>\\w+)/(?P<arg2>\\w+)/$',\n        partial_view,\n        name='partial_view'),\n\nor::\n\n    url(r'^partial-view/(?P<arg1>\\w+)/(?P<arg2>\\w+)/$',\n        PartialView.as_view(),\n        name='partial_view'),\n\nIn your template::\n\n    {% load render_partial %}\n    {% with some_var=2 %}\n      {% render_partial 'partial_view' arg1=40 arg2=some_var %}\n    {% endwith %}\n\nThe ``render_partial`` tag would be rendered to::\n\n    <p>40 + 2 = 42</p>\n\nNote that the ``with`` tag above is not required for ``render_partial``\nto work. It is used to show that ``render_partial`` accepts variables.\nEvery argument will be evaluated against context except for the names of\nany keyword arguments.\n\nIf you don't want to expose your partial view in ``urls.py``, you can\nalso use fully qualified dot separated view name::\n\n  {% render_partial 'partial_test.views.PartialView' arg1=40 arg2=some_var %}\n  {% render_partial 'partial_test.views.partial_view' arg1=40 arg2=some_var %}\n\n\n**IMPORTANT**: the calling template must receive a context variable called\n``request`` containing the original ``HttpRequest``. Don't forget to add\n``'django.template.context_processors.request'`` to\n``TEMPLATES['OPTIONS']['context_processors']``.\n\n\nAdapted from https://djangosnippets.org/snippets/1568/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/utapyngo/django-render-partial", "keywords": "django", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-render-partial", "package_url": "https://pypi.org/project/django-render-partial/", "platform": "", "project_url": "https://pypi.org/project/django-render-partial/", "project_urls": {"Homepage": "https://github.com/utapyngo/django-render-partial"}, "release_url": "https://pypi.org/project/django-render-partial/0.4/", "requires_dist": null, "requires_python": "", "summary": "Django render_partial tag allows inserting rendered views into templates", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><tt>pip install django_render_partial</tt></li>\n<li>Add <tt>'django_render_partial'</tt> to <tt>INSTALLED_APPS</tt></li>\n<li>Ensure that <tt>'django.template.context_processors.request'</tt> is in\n<tt><span class=\"pre\">TEMPLATES['OPTIONS']['context_processors']</span></tt></li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Write a template for partial view, e.g. <tt>partial_view.html</tt>:</p>\n<pre>&lt;p&gt;{{ arg1 }} + {{ arg2 }} = {{ result }}&lt;/p&gt;\n</pre>\n<p>Write a partial view:</p>\n<pre>def partial_view(request, *args, **kwargs):\n    result = kwargs['arg1'] + kwargs['arg2']\n    kwargs['result'] = result\n    return render(request, 'partial_view.html', kwargs)\n</pre>\n<p>if you are using function-based views, or:</p>\n<pre>class PartialView(TemplateView):\n    template_name = 'partial_view.html'\n\n    def get_context_data(self, **kwargs):\n        result = kwargs['arg1'] + kwargs['arg2']\n        kwargs['result'] = result\n        return super(PartialView, self).get_context_data(**kwargs)\n</pre>\n<p>if you are using class-based views.</p>\n<p>Add it to <tt>urls.py</tt>:</p>\n<pre>url(r'^partial-view/(?P&lt;arg1&gt;\\w+)/(?P&lt;arg2&gt;\\w+)/$',\n    partial_view,\n    name='partial_view'),\n</pre>\n<p>or:</p>\n<pre>url(r'^partial-view/(?P&lt;arg1&gt;\\w+)/(?P&lt;arg2&gt;\\w+)/$',\n    PartialView.as_view(),\n    name='partial_view'),\n</pre>\n<p>In your template:</p>\n<pre>{% load render_partial %}\n{% with some_var=2 %}\n  {% render_partial 'partial_view' arg1=40 arg2=some_var %}\n{% endwith %}\n</pre>\n<p>The <tt>render_partial</tt> tag would be rendered to:</p>\n<pre>&lt;p&gt;40 + 2 = 42&lt;/p&gt;\n</pre>\n<p>Note that the <tt>with</tt> tag above is not required for <tt>render_partial</tt>\nto work. It is used to show that <tt>render_partial</tt> accepts variables.\nEvery argument will be evaluated against context except for the names of\nany keyword arguments.</p>\n<p>If you don\u2019t want to expose your partial view in <tt>urls.py</tt>, you can\nalso use fully qualified dot separated view name:</p>\n<pre>{% render_partial 'partial_test.views.PartialView' arg1=40 arg2=some_var %}\n{% render_partial 'partial_test.views.partial_view' arg1=40 arg2=some_var %}\n</pre>\n<p><strong>IMPORTANT</strong>: the calling template must receive a context variable called\n<tt>request</tt> containing the original <tt>HttpRequest</tt>. Don\u2019t forget to add\n<tt>'django.template.context_processors.request'</tt> to\n<tt><span class=\"pre\">TEMPLATES['OPTIONS']['context_processors']</span></tt>.</p>\n<p>Adapted from <a href=\"https://djangosnippets.org/snippets/1568/\" rel=\"nofollow\">https://djangosnippets.org/snippets/1568/</a></p>\n</div>\n\n          </div>"}, "last_serial": 4617931, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "27afa7feb91d104703f99b6111bea5db", "sha256": "64028539161dee6a1c5bc6d4bac4205593c0a76646e59229b7bf721cb38d4a2a"}, "downloads": -1, "filename": "django-render-partial-0.1.zip", "has_sig": false, "md5_digest": "27afa7feb91d104703f99b6111bea5db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7425, "upload_time": "2014-07-19T07:27:49", "upload_time_iso_8601": "2014-07-19T07:27:49.444385Z", "url": "https://files.pythonhosted.org/packages/e7/76/f0d6ade47aa6fd69b8cfa37ace104989134c557344ec15f08e7d61a7691c/django-render-partial-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f43358fb3b741ebe0b428f69990918cd", "sha256": "7afe3c25aae34d3beaa637c0c69ccc5cba39679001abe3a29b77f2e68f1a352a"}, "downloads": -1, "filename": "django-render-partial-0.2.tar.gz", "has_sig": false, "md5_digest": "f43358fb3b741ebe0b428f69990918cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3321, "upload_time": "2017-06-22T09:33:05", "upload_time_iso_8601": "2017-06-22T09:33:05.028218Z", "url": "https://files.pythonhosted.org/packages/79/78/8aa255027fbf87b15539c135fdfe63cd22cbc9c84c2f507b9e845c31ef55/django-render-partial-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "bf13e47c010cb9c6c3257c8532deb8da", "sha256": "3d51cef309f436969b256ce4377fce9d5ee4f3b7dd0358a39e77b8418cd556a4"}, "downloads": -1, "filename": "django-render-partial-0.3.zip", "has_sig": false, "md5_digest": "bf13e47c010cb9c6c3257c8532deb8da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7432, "upload_time": "2017-12-07T10:09:17", "upload_time_iso_8601": "2017-12-07T10:09:17.089473Z", "url": "https://files.pythonhosted.org/packages/8d/fb/5af470ffe25f8e75a73a6de55e034d6ebca3fd77a50b713c08219f5eb65f/django-render-partial-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "87ce1aab3953f6c33f7288c46a0f02ea", "sha256": "7834485bbf061ee7c4f3e0d32257b5be3214bf8698a51638383ff754a08fc1e5"}, "downloads": -1, "filename": "django-render-partial-0.4.tar.gz", "has_sig": false, "md5_digest": "87ce1aab3953f6c33f7288c46a0f02ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3289, "upload_time": "2018-12-19T19:19:43", "upload_time_iso_8601": "2018-12-19T19:19:43.738579Z", "url": "https://files.pythonhosted.org/packages/d2/bc/eafbab58dabd9e72e4a375646d6231b27df38d7cc92066de3b4fa9f8fe9d/django-render-partial-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87ce1aab3953f6c33f7288c46a0f02ea", "sha256": "7834485bbf061ee7c4f3e0d32257b5be3214bf8698a51638383ff754a08fc1e5"}, "downloads": -1, "filename": "django-render-partial-0.4.tar.gz", "has_sig": false, "md5_digest": "87ce1aab3953f6c33f7288c46a0f02ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3289, "upload_time": "2018-12-19T19:19:43", "upload_time_iso_8601": "2018-12-19T19:19:43.738579Z", "url": "https://files.pythonhosted.org/packages/d2/bc/eafbab58dabd9e72e4a375646d6231b27df38d7cc92066de3b4fa9f8fe9d/django-render-partial-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:17 2020"}