{"info": {"author": "teitei-tk", "author_email": "teitei.tk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Libraries"], "description": "Marguerite\n==========\n\nMarguerite provides a declarative, consistent accessor to data layer.\n\n--------------\n\nDependencies\n============\n\n-  Python 2.7 or later\n-  Werkzeug 0.12.7 or later\n\nInstallation\n============\n\n.. code:: bash\n\n    $ pip install Marguerite\n\nUsage\n=====\n\nExample\n-------\n\nInstall requests as an example.\n\n.. code:: bash\n\n    $ pip install requests\n\n1. define data layer accessor, and writen access structure \\`\\`\\`python\n   from marguerite import AbstractStructure, AbstractAccessor, Order\n   from marguerite.accessors import bind\n\nclass Accessor(AbstractAccessor): def prepare(self, name, value): order\n= self.structure.get\\_order(name) return bind(order, value)\n\n::\n\n    def create(self, name, value):\n        order = self.prepare(name, value)\n        return requests.post(order).json()\n\n    def get(self, name, value={}):\n        order = self.prepare(name, value)\n        return requests.get(order).json()\n\nclass UserStructure(AbstractStructure): **accessor** = Accessor\n\n::\n\n    orders = Order(\n        user = \"https://example.com/users/:id\",\n        create = \"https://example.com/users/:id?=username=:username\"\n    )\n\n\\`\\`\\`\n\n2. get data layer accessor object \\`\\`\\`python from marguerite import\n   Marguerite\n\nmarguerite = Marguerite() accessor =\nmarguerite.get\\_accessor(\"path.to.UserStructure\") \\`\\`\\`\n\n3. fetch data \\`\\`\\`python # execute get logic result =\n   accessor.get(\"user\", { \"id\": 1 }) print(result) # {\"id\": 1,\n   \"username\": \"john\"...}\n\nexecute post logic\n==================\n\nresult = accessor.create(\"create\", { \"id\": 2, \"username\": \"marguerite\"\n}) print(result) # {\"status\": \"success\", {\"result\": {\"id\": 2,\n\"username\": \"marguerite\"...}}} \\`\\`\\`\n\nSQLAlchemy\n----------\n\n.. code:: bash\n\n    $ pip install SQLAlchemy MySQL-python\n\n1. create database\n\n   .. code:: mysql\n\n       mysql> create database marguerite;\n       Query OK, 1 row affected (0.00 sec)\n\n2. define database structure \\`\\`\\`python from marguerite import Order\n   from marguerite.accessors.sql import SQLAlchemyAccessor from\n   marguerite.structures.sql import SQLAlchemyStructure\n\nclass User(SQLAlchemyStructure): **struct** = { \"id\": int(), \"name\":\nstr(), \"email\": str(), }\n\n::\n\n    orders = Order(\n        create_table = \"\"\"\n            CREATE TABLE IF NOT EXISTS __table__(\n              id int(11) unsigned NOT NULL AUTO_INCREMENT,\n              name varchar(255) NOT NULL DEFAULT '',\n              PRIMARY KEY (id)\n            ) ENGINE=InnoDB CHARSET=utf8;\n        \"\"\",\n\n        drop_table = \"\"\"\n            DROP TABLE IF EXISTS __table__\n        \"\"\",\n\n        insert = \"\"\"\n            INSERT INTO\n                __table__(name)\n            VALUES\n                (:name)\n        \"\"\",\n\n        select = \"\"\"\n            SELECT\n                *\n            FROM\n                __table__\n            WHERE\n                id = :id\n        \"\"\",\n\n        find = \"\"\"\n            SELECT\n                *\n            FROM\n                __table__\n            WHERE\n                id in (:id1, :id2)\n        \"\"\"\n    )\n\n\\`\\`\\`\n\n3. get database accessor object \\`\\`\\`python from marguerite import\n   Marguerite\n\nengine =\ncreate\\_engine(\"mysql+mysqldb://root:@localhost:3309/marguerite\")\n\nmarguerite = Marguerite(engine) accessor =\nmarguerite.get\\_accessor(\"path.to.User\") \\`\\`\\`\n\n4. create table\n\n   .. code:: python\n\n       accessor.execute(\"create_table\")\n\n5. check also\n\n   .. code:: mysql\n\n       mysql> use marguerite\n       Database changed\n       mysql> show tables;\n       +----------------------+\n       | Tables_in_marguerite |\n       +----------------------+\n       | user                 |\n       +----------------------+\n\n6. fetch data \\`\\`\\`python # insert record at user table\n   accessor.execute(\"insert\", {\"name\": \"john\"})\n\nget record\n==========\n\nrow = accessor.get(\"select\", { \"id\": 1 }) print(row) # {\"id\": 1, \"name\":\n\"john\", \"email\": \"\"}\n\nfind records\n============\n\nrows = accessor.find(\"find\", { \"id1\": 1, \"id2\": 2 }) print(rows) #\n[{\"id\": 1, \"name\": \"john\", \"email\": \"\"}] \\`\\`\\`\n\nLICENSE\n=======\n\nApache License 2.0", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/teitei-tk/Marguerite/archive/master.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/teitei-tk/Marguerite", "keywords": "Marguerite,dispatcher,architecture,SQLAlchemy", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Marguerite", "package_url": "https://pypi.org/project/Marguerite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Marguerite/", "project_urls": {"Download": "https://github.com/teitei-tk/Marguerite/archive/master.tar.gz", "Homepage": "https://github.com/teitei-tk/Marguerite"}, "release_url": "https://pypi.org/project/Marguerite/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Marguerite provides a declarative, consistent accessor to data layer.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"marguerite\">\n<h2>Marguerite</h2>\n<p>Marguerite provides a declarative, consistent accessor to data layer.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 2.7 or later</li>\n<li>Werkzeug 0.12.7 or later</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install Marguerite\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"example\"><span class=\"section-subtitle\">Example</span></h2>\n<p>Install requests as an example.</p>\n<pre>$ pip install requests\n</pre>\n<ol>\n<li>define data layer accessor, and writen access structure ```python\nfrom marguerite import AbstractStructure, AbstractAccessor, Order\nfrom marguerite.accessors import bind</li>\n</ol>\n<p>class Accessor(AbstractAccessor): def prepare(self, name, value): order\n= self.structure.get_order(name) return bind(order, value)</p>\n<pre>def create(self, name, value):\n    order = self.prepare(name, value)\n    return requests.post(order).json()\n\ndef get(self, name, value={}):\n    order = self.prepare(name, value)\n    return requests.get(order).json()\n</pre>\n<p>class UserStructure(AbstractStructure): <strong>accessor</strong> = Accessor</p>\n<pre>orders = Order(\n    user = \"https://example.com/users/:id\",\n    create = \"https://example.com/users/:id?=username=:username\"\n)\n</pre>\n<p>```</p>\n<ol>\n<li>get data layer accessor object ```python from marguerite import\nMarguerite</li>\n</ol>\n<p>marguerite = Marguerite() accessor =\nmarguerite.get_accessor(\u201cpath.to.UserStructure\u201d) ```</p>\n<ol>\n<li>fetch data ```python # execute get logic result =\naccessor.get(\u201cuser\u201d, { \u201cid\u201d: 1 }) print(result) # {\u201cid\u201d: 1,\n\u201cusername\u201d: \u201cjohn\u201d\u2026}</li>\n</ol>\n</div>\n<div id=\"execute-post-logic\">\n<h2>execute post logic</h2>\n<p>result = accessor.create(\u201ccreate\u201d, { \u201cid\u201d: 2, \u201cusername\u201d: \u201cmarguerite\u201d\n}) print(result) # {\u201cstatus\u201d: \u201csuccess\u201d, {\u201cresult\u201d: {\u201cid\u201d: 2,\n\u201cusername\u201d: \u201cmarguerite\u201d\u2026}}} ```</p>\n<div id=\"sqlalchemy\">\n<h3>SQLAlchemy</h3>\n<pre>$ pip install SQLAlchemy MySQL-python\n</pre>\n<ol>\n<li><p>create database</p>\n<pre><span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">create</span> <span class=\"k\">database</span> <span class=\"n\">marguerite</span><span class=\"p\">;</span>\n<span class=\"n\">Query</span> <span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"n\">row</span> <span class=\"nf\">affected</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"mi\">00</span> <span class=\"n\">sec</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>define database structure ```python from marguerite import Order\nfrom marguerite.accessors.sql import SQLAlchemyAccessor from\nmarguerite.structures.sql import SQLAlchemyStructure</p>\n</li>\n</ol>\n<p>class User(SQLAlchemyStructure): <strong>struct</strong> = { \u201cid\u201d: int(), \u201cname\u201d:\nstr(), \u201cemail\u201d: str(), }</p>\n<pre>orders = Order(\n    create_table = \"\"\"\n        CREATE TABLE IF NOT EXISTS __table__(\n          id int(11) unsigned NOT NULL AUTO_INCREMENT,\n          name varchar(255) NOT NULL DEFAULT '',\n          PRIMARY KEY (id)\n        ) ENGINE=InnoDB CHARSET=utf8;\n    \"\"\",\n\n    drop_table = \"\"\"\n        DROP TABLE IF EXISTS __table__\n    \"\"\",\n\n    insert = \"\"\"\n        INSERT INTO\n            __table__(name)\n        VALUES\n            (:name)\n    \"\"\",\n\n    select = \"\"\"\n        SELECT\n            *\n        FROM\n            __table__\n        WHERE\n            id = :id\n    \"\"\",\n\n    find = \"\"\"\n        SELECT\n            *\n        FROM\n            __table__\n        WHERE\n            id in (:id1, :id2)\n    \"\"\"\n)\n</pre>\n<p>```</p>\n<ol>\n<li>get database accessor object ```python from marguerite import\nMarguerite</li>\n</ol>\n<p>engine =\ncreate_engine(\u201cmysql+mysqldb://root:@localhost:3309/marguerite\u201d)</p>\n<p>marguerite = Marguerite(engine) accessor =\nmarguerite.get_accessor(\u201cpath.to.User\u201d) ```</p>\n<ol>\n<li><p>create table</p>\n<pre><span class=\"n\">accessor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"create_table\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>check also</p>\n<pre><span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">use</span> <span class=\"n\">marguerite</span>\n<span class=\"k\">Database</span> <span class=\"n\">changed</span>\n<span class=\"n\">mysql</span><span class=\"o\">&gt;</span> <span class=\"k\">show</span> <span class=\"kp\">tables</span><span class=\"p\">;</span>\n<span class=\"o\">+----------------------+</span>\n<span class=\"o\">|</span> <span class=\"n\">Tables_in_marguerite</span> <span class=\"o\">|</span>\n<span class=\"o\">+----------------------+</span>\n<span class=\"o\">|</span> <span class=\"n\">user</span>                 <span class=\"o\">|</span>\n<span class=\"o\">+----------------------+</span>\n</pre>\n</li>\n<li><p>fetch data ```python # insert record at user table\naccessor.execute(\u201cinsert\u201d, {\u201cname\u201d: \u201cjohn\u201d})</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"get-record\">\n<h2>get record</h2>\n<p>row = accessor.get(\u201cselect\u201d, { \u201cid\u201d: 1 }) print(row) # {\u201cid\u201d: 1, \u201cname\u201d:\n\u201cjohn\u201d, \u201cemail\u201d: \u201c\u201d}</p>\n</div>\n<div id=\"find-records\">\n<h2>find records</h2>\n<p>rows = accessor.find(\u201cfind\u201d, { \u201cid1\u201d: 1, \u201cid2\u201d: 2 }) print(rows) #\n[{\u201cid\u201d: 1, \u201cname\u201d: \u201cjohn\u201d, \u201cemail\u201d: \u201c\u201d}] ```</p>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>Apache License 2.0</p>\n</div>\n\n          </div>"}, "last_serial": 2811305, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "99110777c85edcdcad39d78c2f407479", "sha256": "9a9d82cc5b1adc4c03671e010bafc584405989e674e92d4258fa2d358be01b13"}, "downloads": -1, "filename": "Marguerite-0.0.2.tar.gz", "has_sig": false, "md5_digest": "99110777c85edcdcad39d78c2f407479", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3665, "upload_time": "2017-04-10T13:38:46", "upload_time_iso_8601": "2017-04-10T13:38:46.071053Z", "url": "https://files.pythonhosted.org/packages/11/8d/84735c8182f3eab640dc85fda361fa9570c0a88f2cec93305e1e89f031d1/Marguerite-0.0.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "72a80cc97481608b98257fffdffbe4cd", "sha256": "7dd81caa2570a82c9eaa0d580a65a645c0d7a1f64bf4a16cf8ef82b0bffc38ff"}, "downloads": -1, "filename": "Marguerite-1.0.0.tar.gz", "has_sig": false, "md5_digest": "72a80cc97481608b98257fffdffbe4cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3677, "upload_time": "2017-04-10T14:11:54", "upload_time_iso_8601": "2017-04-10T14:11:54.066150Z", "url": "https://files.pythonhosted.org/packages/38/a8/4844ea5805e3ba90e7ae22593372b43c0a3ad0a3f8eaa8eb7887a35a2f16/Marguerite-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cbe92d6878e3b4dc878c27ea4e9fbfac", "sha256": "62d2369c2898113d226d0f4f52be1b5cd9e4a620b1664741593a68a753fac789"}, "downloads": -1, "filename": "Marguerite-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cbe92d6878e3b4dc878c27ea4e9fbfac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3744, "upload_time": "2017-04-11T13:23:40", "upload_time_iso_8601": "2017-04-11T13:23:40.458168Z", "url": "https://files.pythonhosted.org/packages/c7/49/fb0fd0b6a0acc6a4760b62df3fcd5962267be47eee2ef0c596cf64c62a05/Marguerite-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3d9e3905efa407425a35846378198190", "sha256": "c815fb90d7d5c5c122fcc0352da30e3cc82c0f70bff2121b474cee792c8c6ef2"}, "downloads": -1, "filename": "Marguerite-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3d9e3905efa407425a35846378198190", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5985, "upload_time": "2017-04-18T14:30:53", "upload_time_iso_8601": "2017-04-18T14:30:53.724158Z", "url": "https://files.pythonhosted.org/packages/ab/38/b3756fb428e5634bb4608f7463263bce5eb81b244cb7d5f96d8cbb6abf2c/Marguerite-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d9e3905efa407425a35846378198190", "sha256": "c815fb90d7d5c5c122fcc0352da30e3cc82c0f70bff2121b474cee792c8c6ef2"}, "downloads": -1, "filename": "Marguerite-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3d9e3905efa407425a35846378198190", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5985, "upload_time": "2017-04-18T14:30:53", "upload_time_iso_8601": "2017-04-18T14:30:53.724158Z", "url": "https://files.pythonhosted.org/packages/ab/38/b3756fb428e5634bb4608f7463263bce5eb81b244cb7d5f96d8cbb6abf2c/Marguerite-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:49 2020"}