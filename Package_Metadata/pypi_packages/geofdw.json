{"info": {"author": "Benjamin Trigona-Harany", "author_email": "bosth@alumni.sfu.ca", "bugtrack_url": null, "classifiers": [], "description": "geofdw\n======\n\n``geofdw`` is a collection of `PostGIS <http://postgis.net>`__-related\n`foreign data\nwrappers <https://wiki.postgresql.org/wiki/Foreign_data_wrappers>`__ for\n`PostgreSQL <http://postgresql.org>`__ written in Python using the\n`multicorn <http://multicorn.org>`__ extension. By using a FDW, you can\naccess spatial data through Postgres tables without having to import the\ndata first, which can be useful for dynamic or non-tabular data\navailable through web services.\n\nCurrently implemented forward data wrappers are:\n\n-  FGeocode: forward geocoding\n-  RGeocode: reverse geocoding\n-  GeoJSON: online GeoJSON\n-  RandomPoint: random point in a bounding box\n\n``geofdw`` uses `plpygis <https://github.com/bosth/plpygis>`__ to\nmanipulate PostGIS geometries.\n\nExamples\n--------\n\nFGeocode\n~~~~~~~~\n\nCreate a single server for all forward geocoding tables:\n\n::\n\n    # CREATE SERVER fwd_geocode FOREIGN DATA WRAPPER multicorn OPTIONS ( wrapper 'geofdw.FGeocode' );\n\nCreate two tables, one using the GoogleV3 geocoder and one using\nNominatim:\n\n::\n\n    # CREATE FOREIGN TABLE fgc_google ( query TEXT, rank INTEGER, address TEXT, geom GEOMETRY ) SERVER fwd_geocode;\n    # CREATE FOREIGN TABLE fgc_nominatim ( query TEXT, rank INTEGER, address TEXT, geom GEOMETRY ) SERVER fwd_geocode OPTIONS ( service 'nominatim');\n\nSelect results from the geocoder matching our query string:\n\n::\n\n    SELECT address, ST_AsText(geom) AS geom FROM fgc_google WHERE query = 'canada house' LIMIT 5;\n                                             address                                         |             geom              \n     ----------------------------------------------------------------------------------------+------------------------------------\n      Canada House, London, UK                                                               | POINT Z (-0.1291 51.5077 0)\n      Canada House, Temple Road, Blackrock, Co. Dublin, Ireland                              | POINT Z (-6.1756563 53.2994401 0)\n      Canada House, Saint Stephen's Green, Dublin 2, Ireland                                 | POINT Z (-6.2576992 53.335963 0)\n      Canada House, 29 Hampton Road, Twickenham, Greater London TW2 5QE, UK                  | POINT Z (-0.3443802 51.441739 0)\n      Canada House, 272 Field End Road, Ruislip, Greater London HA4 9NA, UK                  | POINT Z (-0.3973435 51.5752994 0)\n\nPerform the same query but using the Nominatim geocoder:\n\n::\n\n    # SELECT address, ST_AsText(geom) AS geom FROM fgc_nominatim WHERE query = 'canada house' LIMIT 5;\n                                                                        address                                                                    |                    geom                    \n    -----------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------\n     High Commission of Canada, 5, Trafalgar Square, Covent Garden, City of Westminster, London, Greater London, England, SW1Y 5BJ, United Kingdom | POINT Z (-0.129104703393283 51.50782475 0)\n     Canada House, West 54th Street, Diamond District, Manhattan, New York, NYC, New York, 10019, United States of America                         | POINT Z (-73.9758789212845 40.7609797 0)\n     Canada House, Kololo Road, Governments Cantonment, Juba, Central Equatoria, South Sudan                                                       | POINT Z (31.5901769 4.8615639 0)\n     Canada House, Justine Close, Nalumunye, Kazinga, Wakiso, Central 2, Central Region, Uganda                                                    | POINT Z (32.4868336484328 0.25676655 0)\n     \u05d1\u05d9\u05ea \u05e7\u05e0\u05d3\u05d4, 1, \u05e9\u05d1\u05d9 \u05e6\u05d9\u05d5\u05df, \u05e8\u05d5\u05d1\u05e2 \u05d0', \u05d0\u05e9\u05d3\u05d5\u05d3, \u05de\u05d7\u05d5\u05d6 \u05d4\u05d3\u05e8\u05d5\u05dd, 77452, \u05de\u05d3\u05d9\u05e0\u05ea \u05d9\u05e9\u05e8\u05d0\u05dc                                                                         | POINT Z (34.64463585 31.8086878 0)\n\nInfluence the geocoder by restricting the query to a certain bounding\nbox (in this case, without the hint, Google will only return results in\nthe USA):\n\n::\n\n    # SELECT address, ST_AsText(geom) AS geom FROM fgc_google WHERE query = 'Water St' AND geom && ST_GeomFromEWKT('SRID=4326;POLYGON((50 2, 55 2, 55 -2, 50 -2, 50 2))');\n                                    address                                 |               geom                \n    ------------------------------------------------------------------------+-----------------------------------\n     Water Street, Lavenham, Sudbury, Suffolk CO10 9RW, UK                  | POINT Z (0.7982752 52.1071416 0)\n     Water Street, Stamford, Lincolnshire PE9 2NJ, UK                       | POINT Z (-0.4752917 52.649958 0)\n     Water Street, Cambridge, Cambridgeshire CB4 1PA, UK                    | POINT Z (0.1474321 52.2184911 0)\n     Water Street, Hampstead Norreys, Thatcham, West Berkshire RG18 0RU, UK | POINT Z (-1.2408465 51.4854726 0)\n     Water Street, Burntwood, Staffordshire WS7 1AW, UK                     | POINT Z (-1.9355616 52.6839693 0)\n     Water Street, Kettering, Northamptonshire NN16, UK                     | POINT Z (-0.7173979 52.4008413 0)\n     Water Street, Birmingham, West Midlands B3 1HP, UK                     | POINT Z (-1.9028035 52.4854385 0)\n     Water Street, London WC2R 3LA, UK                                      | POINT Z (-0.1136366 51.5118691 0)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bosth/geofdw", "keywords": "gis geographical postgis fdw postgresql", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "geofdw", "package_url": "https://pypi.org/project/geofdw/", "platform": "any", "project_url": "https://pypi.org/project/geofdw/", "project_urls": {"Homepage": "http://github.com/bosth/geofdw"}, "release_url": "https://pypi.org/project/geofdw/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Foreign Data Wrappers for PostGIS", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>geofdw</tt> is a collection of <a href=\"http://postgis.net\" rel=\"nofollow\">PostGIS</a>-related\n<a href=\"https://wiki.postgresql.org/wiki/Foreign_data_wrappers\" rel=\"nofollow\">foreign data\nwrappers</a> for\n<a href=\"http://postgresql.org\" rel=\"nofollow\">PostgreSQL</a> written in Python using the\n<a href=\"http://multicorn.org\" rel=\"nofollow\">multicorn</a> extension. By using a FDW, you can\naccess spatial data through Postgres tables without having to import the\ndata first, which can be useful for dynamic or non-tabular data\navailable through web services.</p>\n<p>Currently implemented forward data wrappers are:</p>\n<ul>\n<li>FGeocode: forward geocoding</li>\n<li>RGeocode: reverse geocoding</li>\n<li>GeoJSON: online GeoJSON</li>\n<li>RandomPoint: random point in a bounding box</li>\n</ul>\n<p><tt>geofdw</tt> uses <a href=\"https://github.com/bosth/plpygis\" rel=\"nofollow\">plpygis</a> to\nmanipulate PostGIS geometries.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<h2 id=\"fgeocode\"><span class=\"section-subtitle\">FGeocode</span></h2>\n<p>Create a single server for all forward geocoding tables:</p>\n<pre># CREATE SERVER fwd_geocode FOREIGN DATA WRAPPER multicorn OPTIONS ( wrapper 'geofdw.FGeocode' );\n</pre>\n<p>Create two tables, one using the GoogleV3 geocoder and one using\nNominatim:</p>\n<pre># CREATE FOREIGN TABLE fgc_google ( query TEXT, rank INTEGER, address TEXT, geom GEOMETRY ) SERVER fwd_geocode;\n# CREATE FOREIGN TABLE fgc_nominatim ( query TEXT, rank INTEGER, address TEXT, geom GEOMETRY ) SERVER fwd_geocode OPTIONS ( service 'nominatim');\n</pre>\n<p>Select results from the geocoder matching our query string:</p>\n<pre>SELECT address, ST_AsText(geom) AS geom FROM fgc_google WHERE query = 'canada house' LIMIT 5;\n                                         address                                         |             geom\n ----------------------------------------------------------------------------------------+------------------------------------\n  Canada House, London, UK                                                               | POINT Z (-0.1291 51.5077 0)\n  Canada House, Temple Road, Blackrock, Co. Dublin, Ireland                              | POINT Z (-6.1756563 53.2994401 0)\n  Canada House, Saint Stephen's Green, Dublin 2, Ireland                                 | POINT Z (-6.2576992 53.335963 0)\n  Canada House, 29 Hampton Road, Twickenham, Greater London TW2 5QE, UK                  | POINT Z (-0.3443802 51.441739 0)\n  Canada House, 272 Field End Road, Ruislip, Greater London HA4 9NA, UK                  | POINT Z (-0.3973435 51.5752994 0)\n</pre>\n<p>Perform the same query but using the Nominatim geocoder:</p>\n<pre># SELECT address, ST_AsText(geom) AS geom FROM fgc_nominatim WHERE query = 'canada house' LIMIT 5;\n                                                                    address                                                                    |                    geom\n-----------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------\n High Commission of Canada, 5, Trafalgar Square, Covent Garden, City of Westminster, London, Greater London, England, SW1Y 5BJ, United Kingdom | POINT Z (-0.129104703393283 51.50782475 0)\n Canada House, West 54th Street, Diamond District, Manhattan, New York, NYC, New York, 10019, United States of America                         | POINT Z (-73.9758789212845 40.7609797 0)\n Canada House, Kololo Road, Governments Cantonment, Juba, Central Equatoria, South Sudan                                                       | POINT Z (31.5901769 4.8615639 0)\n Canada House, Justine Close, Nalumunye, Kazinga, Wakiso, Central 2, Central Region, Uganda                                                    | POINT Z (32.4868336484328 0.25676655 0)\n \u05d1\u05d9\u05ea \u05e7\u05e0\u05d3\u05d4, 1, \u05e9\u05d1\u05d9 \u05e6\u05d9\u05d5\u05df, \u05e8\u05d5\u05d1\u05e2 \u05d0', \u05d0\u05e9\u05d3\u05d5\u05d3, \u05de\u05d7\u05d5\u05d6 \u05d4\u05d3\u05e8\u05d5\u05dd, 77452, \u05de\u05d3\u05d9\u05e0\u05ea \u05d9\u05e9\u05e8\u05d0\u05dc                                                                         | POINT Z (34.64463585 31.8086878 0)\n</pre>\n<p>Influence the geocoder by restricting the query to a certain bounding\nbox (in this case, without the hint, Google will only return results in\nthe USA):</p>\n<pre># SELECT address, ST_AsText(geom) AS geom FROM fgc_google WHERE query = 'Water St' AND geom &amp;&amp; ST_GeomFromEWKT('SRID=4326;POLYGON((50 2, 55 2, 55 -2, 50 -2, 50 2))');\n                                address                                 |               geom\n------------------------------------------------------------------------+-----------------------------------\n Water Street, Lavenham, Sudbury, Suffolk CO10 9RW, UK                  | POINT Z (0.7982752 52.1071416 0)\n Water Street, Stamford, Lincolnshire PE9 2NJ, UK                       | POINT Z (-0.4752917 52.649958 0)\n Water Street, Cambridge, Cambridgeshire CB4 1PA, UK                    | POINT Z (0.1474321 52.2184911 0)\n Water Street, Hampstead Norreys, Thatcham, West Berkshire RG18 0RU, UK | POINT Z (-1.2408465 51.4854726 0)\n Water Street, Burntwood, Staffordshire WS7 1AW, UK                     | POINT Z (-1.9355616 52.6839693 0)\n Water Street, Kettering, Northamptonshire NN16, UK                     | POINT Z (-0.7173979 52.4008413 0)\n Water Street, Birmingham, West Midlands B3 1HP, UK                     | POINT Z (-1.9028035 52.4854385 0)\n Water Street, London WC2R 3LA, UK                                      | POINT Z (-0.1136366 51.5118691 0)\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3509691, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "468cfbfd0a2e50f5c1cbfee0f0f6ecba", "sha256": "ead6e255406daa100f6272251968ea508e8b4ecbdeac73cf89bcd7b205bf2baa"}, "downloads": -1, "filename": "geofdw-0.0.2.tar.gz", "has_sig": false, "md5_digest": "468cfbfd0a2e50f5c1cbfee0f0f6ecba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8263, "upload_time": "2018-01-20T17:29:41", "upload_time_iso_8601": "2018-01-20T17:29:41.160252Z", "url": "https://files.pythonhosted.org/packages/ae/df/285055d81bbbe56c4063cd3bb6399cb2769b87e1077f5f69325f55b0b658/geofdw-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f098cd247f59e529078245ed53dbe47b", "sha256": "317e573346bc4414fe5eb555a4631d98d5be7fed48177a48876f3e47842da66d"}, "downloads": -1, "filename": "geofdw-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f098cd247f59e529078245ed53dbe47b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8260, "upload_time": "2018-01-21T22:49:21", "upload_time_iso_8601": "2018-01-21T22:49:21.847533Z", "url": "https://files.pythonhosted.org/packages/2d/81/d3e667dacf7c1c613eb89435ce9ac1b8a04cadbc44f36d5937e9e1aee3ef/geofdw-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f098cd247f59e529078245ed53dbe47b", "sha256": "317e573346bc4414fe5eb555a4631d98d5be7fed48177a48876f3e47842da66d"}, "downloads": -1, "filename": "geofdw-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f098cd247f59e529078245ed53dbe47b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8260, "upload_time": "2018-01-21T22:49:21", "upload_time_iso_8601": "2018-01-21T22:49:21.847533Z", "url": "https://files.pythonhosted.org/packages/2d/81/d3e667dacf7c1c613eb89435ce9ac1b8a04cadbc44f36d5937e9e1aee3ef/geofdw-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:07 2020"}