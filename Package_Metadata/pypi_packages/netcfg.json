{"info": {"author": "wlan slovenija", "author_email": "open@wlan-si.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: POSIX :: Linux", "Programming Language :: Python"], "description": "netcfg\n======\n\nSimple network bridge configuration for Docker containers. It is similar in functionality\nto the pipework_ script, but has persistent configuration and  can automatically configure\nnetworking when containers are started.\n\n.. _pipework: https://github.com/jpetazzo/pipework\n\nInstallation\n------------\n\nNetcfg can be installed via pip::\n\n  $ pip install netcfg\n\nUsage\n-----\n\nAfter installation, there are two parts to netcfg. First, a daemon process must be launched\nwith root privileges and given access to the Docker IPC socket::\n\n  $ netcfg daemon\n\nBy default, netcfg stores configuration under ``/var/lib/netcfg/netcfg.json``, but this location\nmay be overriden by using the ``--config`` command-line argument. After the daemon is running\nin the background, one can setup netcfg configuration by calling the ``netcfg`` script.\n\nFirst, one should define one or more networks::\n\n  $ netcfg create foo0 bridge\n\nThe first argument specifies the network name and the other specifies the network type. Currently\nonly networks with type ``bridge`` are supported, but netcfg implements different network types as\nmodules so new ones could be added.\n\nThen, we can attach networks to one or more containers::\n\n  $ netcfg attach my_container_a foo0 --address 10.42.0.1/24\n  $ netcfg attach my_container_b foo0 --address 10.42.0.2/24\n\nCurrently only static addressing can be configured (IPv4 and IPv6 are supported) and multiple\naddresses may be specified. In case one only wants an address-less L2 veth device, no address\nargument should be given.\n\nExisting configuration can be shown by using::\n\n  $ netcfg show\n  {\n    \"containers\": {\n      \"my_container_a\": {\n        \"name\": \"my_container_a\",\n        \"networks\": {\n          \"foo0\": {\n            \"address\": [\n              \"10.42.0.1/24\"\n            ]\n          }\n        }\n      },\n      \"my_container_b\": {\n        \"name\": \"my_container_b\",\n        \"networks\": {\n          \"foo0\": {\n            \"address\": [\n              \"10.42.0.2/24\"\n            ]\n          }\n        }\n      }\n    },\n    \"networks\": {\n      \"foo0\": {\n        \"destroy_on_stop\": false,\n        \"name\": \"foo0\",\n        \"type\": \"bridge\"\n      }\n    }\n  }\n\nIf the containers are running, networks will be configured immediately. Otherwise, networks will\nbe configured when the named containers are started.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wlanslovenija/netcfg", "keywords": null, "license": "AGPLv3", "maintainer": null, "maintainer_email": null, "name": "netcfg", "package_url": "https://pypi.org/project/netcfg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/netcfg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wlanslovenija/netcfg"}, "release_url": "https://pypi.org/project/netcfg/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Network configuration of Docker containers.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple network bridge configuration for Docker containers. It is similar in functionality\nto the <a href=\"https://github.com/jpetazzo/pipework\" rel=\"nofollow\">pipework</a> script, but has persistent configuration and  can automatically configure\nnetworking when containers are started.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Netcfg can be installed via pip:</p>\n<pre>$ pip install netcfg\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After installation, there are two parts to netcfg. First, a daemon process must be launched\nwith root privileges and given access to the Docker IPC socket:</p>\n<pre>$ netcfg daemon\n</pre>\n<p>By default, netcfg stores configuration under <tt>/var/lib/netcfg/netcfg.json</tt>, but this location\nmay be overriden by using the <tt><span class=\"pre\">--config</span></tt> command-line argument. After the daemon is running\nin the background, one can setup netcfg configuration by calling the <tt>netcfg</tt> script.</p>\n<p>First, one should define one or more networks:</p>\n<pre>$ netcfg create foo0 bridge\n</pre>\n<p>The first argument specifies the network name and the other specifies the network type. Currently\nonly networks with type <tt>bridge</tt> are supported, but netcfg implements different network types as\nmodules so new ones could be added.</p>\n<p>Then, we can attach networks to one or more containers:</p>\n<pre>$ netcfg attach my_container_a foo0 --address 10.42.0.1/24\n$ netcfg attach my_container_b foo0 --address 10.42.0.2/24\n</pre>\n<p>Currently only static addressing can be configured (IPv4 and IPv6 are supported) and multiple\naddresses may be specified. In case one only wants an address-less L2 veth device, no address\nargument should be given.</p>\n<p>Existing configuration can be shown by using:</p>\n<pre>$ netcfg show\n{\n  \"containers\": {\n    \"my_container_a\": {\n      \"name\": \"my_container_a\",\n      \"networks\": {\n        \"foo0\": {\n          \"address\": [\n            \"10.42.0.1/24\"\n          ]\n        }\n      }\n    },\n    \"my_container_b\": {\n      \"name\": \"my_container_b\",\n      \"networks\": {\n        \"foo0\": {\n          \"address\": [\n            \"10.42.0.2/24\"\n          ]\n        }\n      }\n    }\n  },\n  \"networks\": {\n    \"foo0\": {\n      \"destroy_on_stop\": false,\n      \"name\": \"foo0\",\n      \"type\": \"bridge\"\n    }\n  }\n}\n</pre>\n<p>If the containers are running, networks will be configured immediately. Otherwise, networks will\nbe configured when the named containers are started.</p>\n</div>\n\n          </div>"}, "last_serial": 1238514, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aae665d1a679db02e7d3804ed6454eec", "sha256": "0df408e8c129d7fdfa165724fe9ebb74498123e5c8f4c7b77877e02efe042c7e"}, "downloads": -1, "filename": "netcfg-0.1.0.tar.gz", "has_sig": true, "md5_digest": "aae665d1a679db02e7d3804ed6454eec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8443, "upload_time": "2014-09-24T06:53:59", "upload_time_iso_8601": "2014-09-24T06:53:59.094279Z", "url": "https://files.pythonhosted.org/packages/e3/e9/c4223dc82a57b9753c41e5169fb764af7e408408254e7211e73fe14f6d6b/netcfg-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "35ac1d75634122fd9d968a62d58e387b", "sha256": "f81b4994bf689891182525684e2da942162d52e017daa8a3c03d5c832450f12b"}, "downloads": -1, "filename": "netcfg-0.1.1.tar.gz", "has_sig": true, "md5_digest": "35ac1d75634122fd9d968a62d58e387b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10323, "upload_time": "2014-09-26T06:18:52", "upload_time_iso_8601": "2014-09-26T06:18:52.894845Z", "url": "https://files.pythonhosted.org/packages/3c/58/8168114ada7f0a57af1d7db925f69b515bfeae0210d12c015f15e142765a/netcfg-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35ac1d75634122fd9d968a62d58e387b", "sha256": "f81b4994bf689891182525684e2da942162d52e017daa8a3c03d5c832450f12b"}, "downloads": -1, "filename": "netcfg-0.1.1.tar.gz", "has_sig": true, "md5_digest": "35ac1d75634122fd9d968a62d58e387b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10323, "upload_time": "2014-09-26T06:18:52", "upload_time_iso_8601": "2014-09-26T06:18:52.894845Z", "url": "https://files.pythonhosted.org/packages/3c/58/8168114ada7f0a57af1d7db925f69b515bfeae0210d12c015f15e142765a/netcfg-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:01 2020"}