{"info": {"author": "Chen Gang", "author_email": "yikuyiku.com@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Multimedia :: Video :: Conversion"], "description": "|\n\nNAME\n====\n\n    x100http, web framework support customing file upload processing\n\n\n|\n\nSYNOPSIS\n========\n\n.. code-block::\n\n\n    from x100http import X100HTTP\n\n    app = X100HTTP()\n\n    def hello_world(request):\n        remote_ip = request.get_remote_ip()\n        response = \"<html><body>hello, \" + remote_ip + \"</body></html>\"\n        return response\n\n    app.get(\"/\", hello_world)\n    app.run(\"0.0.0.0\", 8080)\n\n\n|\n\nDESCRIPTION\n===========\n\n    x100http is a lite webframework designed for processing HTTP file upload.\n\n\n|\n\nCLASS X100HTTP\n==============\n\nX100HTTP()\n----------\n    return a instance of x100http which wrapped below functions.\n\nrun(listern_ip, listen_port)\n----------------------------\n    run a forking server on address ``listern_ip``:``listern_port``\n\nget(url, handler_function)\n--------------------------\n    set a route acl of HTTP \"GET\" method.\n\n    ``handler_function`` will be called when ``url`` be visited.\n\n    ``handler_function`` must return a string as the HTTP response body to the visitor.\n\n    struct ``request`` (will explain below) will be passed to the handlder function when it is called.\n\npost(url, handler_function)\n---------------------------\n    set a route acl of HTTP \"POST\" method with header \"Content-Type: application/x-www-form-urlencoded\".\n\n    ``handler_function`` will be called when HTTP client submit a form with the action ``url``.\n\n    ``handler_function`` must return a string as the HTTP response body to the visitor.\n\n    struct ``request`` (will explain below) will be passed to the handlder function when it is called.\n\nstatic(url_prefix, file_path, cors=allow_domain)\n------------------------------------------------\n    set a route acl for static file\n\n    Static file request with ``url_prefix`` will be routing to the file in ``file_path``.\n\n    Default value of cors is \"*\", allow all CORS request matching this route rule.\n\nupload(url, upload_handler_class)\n---------------------------------\n    set a route acl of HTTP \"POST\" method with header \"Content-Type: multipart/form-data\".\n\n    A new instance of class ``upload_handler_class`` will be created when file upload start.\n\n    struct \"request\" (will explain below) will be passed to ``upload_handler_class.upload_start()``.\n\n    ``upload_handler_class.upload_process()`` will be called every time when the buffer is full when file uploading.\n\n    two args will be passed to ``upload_handler_class.upload_process()``.\n\n    first arg is the name of the input in the form, second arg is the content of the input in the form.\n\n    the binary content of the upload file will be passed by the second arg.\n\n    struct \"request\" (will explain below) will NOT be passed to ``upload_handler_class.upload_finish()``.\n\n    ``upload_handler_class.upload_finish()`` will be called when file upload finished, this function must return a string as the HTTP response body to the visitor.\n\n    struct \"request\" (will explain below) will be passed to ``upload_handler_class.upload_finish()``.\n\nset_upload_buf_size(buf_size)\n-----------------------------\n    set the buffer size of the stream reader while file uploading.\n\n    the unit of ``buf_size`` is byte, default value is 4096 byte.\n\n    ``upload_handler_class.upload_process()`` will be called to process the buffer every time when the buffer is full.\n\n\n|\n\nROUTING\n=======\n\n    x100http route accept a url and a function/class/path.\n\n    There are three four of routes - get, post, static and upload.\n\n.. code-block::\n\n    app.get(\"/get_imple\", get_simple)\n    app.post(\"/post_simple\", post_simple)\n    app.upload(\"/upload_simple\", UploadClass)\n    app.static(\"/static/test/\", \"/tmp/sta/\")\n\nrouting for HTTP GET can be more flexible like this:\n\n.. code-block::\n\n    app.get(\"/one_dir/<arg_first>_<arg_second>.py?abc=def\", regex_get)\n\nallow all domain for CORS like this:\n\n.. code-block::\n\n    app.static(\"/static/test/\", \"/tmp/sta/\", cors=\"*\")\n\n\n|\n\nCLASS X100REQUEST\n=================\n\n    A instance of class ``X100Request`` will be passed into every handler function.\n\nget_remote_ip()\n---------------\n    Return the IP address of the visitor.\n\nget_body()\n----------\n    Return the body section of the HTTP request.\n\n    Will be empty when the HTTP method is \"GET\" or \"POST - multipart/form-data\".\n\nget_query_string()\n------------------\n    Return the query string of the page was accessed, if any.\n\nget_arg(arg_name)\n-----------------\n\n    args parsed from ``query_string`` when the request is sent by \"GET\" or \"POST - multipart/form-data\".\n\n    args parsed from ``body`` when the request is sent by \"POST - application/x-www-form-urlencoded\".\n\nget_header(header_name)\n-----------------------\n    Return the header`s value of the ``header_name``, if any.\n\n\n|\n\nCLASS X100RESPONSE\n==================\n\nset_body(content)\n-----------------\n\n    Set the response data to visitor.\n\n    Type 'str' and type 'bytes' are both accepted.\n\nset_header(name, value)\n-----------------------\n\n    Set the HTTP header.\n\n\n|\n\nHTTP ERROR 500\n==============\n\n    visitor will get HTTP error \"500\" when the handler function of the url he visit raise an error or code something wrong.\n\n\n|\n\nSUPPORTED PYTHON VERSIONS\n=========================\n\n    x100http only supports python 3.4 or newer, because of ``re.fullmatch`` and ``os.sendfile``.\n\n\n|\n\nEXAMPLES\n========\n\nget visitor ip\n--------------\n\n.. code-block::\n\n    from x100http import X100HTTP\n\n    app = X100HTTP()\n\n    def hello_world(request):\n        remote_ip = request.get_remote_ip()\n        response = \"<html><body>hello, \" + remote_ip + \"</body></html>\"\n        return response\n\n    app.get(\"/\", hello_world)\n    app.run(\"0.0.0.0\", 8080)\n\npost method route\n-----------------\n\n.. code-block::\n\n    from x100http import X100HTTP\n\n    app = X100HTTP()\n\n    def index(request):\n        response = \"<html><body>\" \\\n            + \"<form name=\"abc\" action=\"/form\" method=\"post\">\" \\\n            + \"<input type=\"text\" name=\"abc\" />\" \\\n            + \"<input type=\"submit\" name=\"submit\" />\" \\\n            + \"</form>\" \\\n            + \"</body></html>\"\n        return response\n\n    def post_handler(request):\n        remote_ip = request.get_remote_ip()\n        abc = request.get_arg('abc')\n        response = \"hello, \" + remote_ip + \" you typed: \" + abc\n        return response\n\n    app.get(\"/\", index)\n    app.post(\"/form\", post_handler)\n    app.run(\"0.0.0.0\", 8080)\n\nprocess file upload\n-------------------\n\n.. code-block::\n\n    from x100http import X100HTTP, X100Response\n\n    class UploadHandler:\n\n        def upload_start(self, request):\n            self.content = \"start\"\n\n        def upload_process(self, key, line):\n            self.content += line.decode()\n\n        def upload_finish(self, request):\n            return \"upload succ, content = \" + self.content\n\n    app = X100HTTP()\n    app.upload(\"/upload\", UploadHandler)\n    app.run(\"0.0.0.0\", 8080)\n\nset http header\n---------------\n\n.. code-block::\n\n    from x100http import X100HTTP, X100Response\n\n    def get_custom_header(request):\n        remote_ip = request.get_remote_ip()\n        response = X100Response()\n        response.set_header(\"X-My-Header\", \"My-Value\")\n        response.set_body(\"<html><body>hello, \" + remote_ip + \"</body></html>\")\n        return response\n\n    app = X100HTTP()\n    app.upload(\"/\", get_custom_header)\n    app.run(\"0.0.0.0\", 8080)\n\nmore flexible routing\n---------------------\n\n.. code-block::\n\n    from x100http import X100HTTP\n\n    def regex_get(request):\n        first = request.get_arg(\"arg_first\")\n        second = request.get_arg(\"arg_second\")\n        abc = request.get_arg(\"abc\")\n        return \"hello, \" + first + second + abc\n\n    app = X100HTTP()\n    app.get(\"/one_dir/<arg_first>_<arg_second>.py?abc=def\", regex_get)\n    app.run(\"0.0.0.0\", 8080)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chengang/x100http", "keywords": "http framework webframework file upload rfc1867 x100", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "x100http", "package_url": "https://pypi.org/project/x100http/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/x100http/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chengang/x100http"}, "release_url": "https://pypi.org/project/x100http/0.2.7/", "requires_dist": null, "requires_python": null, "summary": "web framework support customing file upload processing", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div><br></div>\n</div>\n<div id=\"name\">\n<h2>NAME</h2>\n<blockquote>\nx100http, web framework support customing file upload processing</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"synopsis\">\n<h2>SYNOPSIS</h2>\n<pre>from x100http import X100HTTP\n\napp = X100HTTP()\n\ndef hello_world(request):\n    remote_ip = request.get_remote_ip()\n    response = \"&lt;html&gt;&lt;body&gt;hello, \" + remote_ip + \"&lt;/body&gt;&lt;/html&gt;\"\n    return response\n\napp.get(\"/\", hello_world)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"description\">\n<h2>DESCRIPTION</h2>\n<blockquote>\nx100http is a lite webframework designed for processing HTTP file upload.</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"class-x100http\">\n<h2>CLASS X100HTTP</h2>\n<div id=\"x100http\">\n<h3>X100HTTP()</h3>\n<blockquote>\nreturn a instance of x100http which wrapped below functions.</blockquote>\n</div>\n<div id=\"run-listern-ip-listen-port\">\n<h3>run(listern_ip, listen_port)</h3>\n<blockquote>\nrun a forking server on address <tt>listern_ip</tt>:<tt>listern_port</tt></blockquote>\n</div>\n<div id=\"get-url-handler-function\">\n<h3>get(url, handler_function)</h3>\n<blockquote>\n<p>set a route acl of HTTP \u201cGET\u201d method.</p>\n<p><tt>handler_function</tt> will be called when <tt>url</tt> be visited.</p>\n<p><tt>handler_function</tt> must return a string as the HTTP response body to the visitor.</p>\n<p>struct <tt>request</tt> (will explain below) will be passed to the handlder function when it is called.</p>\n</blockquote>\n</div>\n<div id=\"post-url-handler-function\">\n<h3>post(url, handler_function)</h3>\n<blockquote>\n<p>set a route acl of HTTP \u201cPOST\u201d method with header \u201cContent-Type: application/x-www-form-urlencoded\u201d.</p>\n<p><tt>handler_function</tt> will be called when HTTP client submit a form with the action <tt>url</tt>.</p>\n<p><tt>handler_function</tt> must return a string as the HTTP response body to the visitor.</p>\n<p>struct <tt>request</tt> (will explain below) will be passed to the handlder function when it is called.</p>\n</blockquote>\n</div>\n<div id=\"static-url-prefix-file-path-cors-allow-domain\">\n<h3>static(url_prefix, file_path, cors=allow_domain)</h3>\n<blockquote>\n<p>set a route acl for static file</p>\n<p>Static file request with <tt>url_prefix</tt> will be routing to the file in <tt>file_path</tt>.</p>\n<p>Default value of cors is \u201c*\u201d, allow all CORS request matching this route rule.</p>\n</blockquote>\n</div>\n<div id=\"upload-url-upload-handler-class\">\n<h3>upload(url, upload_handler_class)</h3>\n<blockquote>\n<p>set a route acl of HTTP \u201cPOST\u201d method with header \u201cContent-Type: multipart/form-data\u201d.</p>\n<p>A new instance of class <tt>upload_handler_class</tt> will be created when file upload start.</p>\n<p>struct \u201crequest\u201d (will explain below) will be passed to <tt>upload_handler_class.upload_start()</tt>.</p>\n<p><tt>upload_handler_class.upload_process()</tt> will be called every time when the buffer is full when file uploading.</p>\n<p>two args will be passed to <tt>upload_handler_class.upload_process()</tt>.</p>\n<p>first arg is the name of the input in the form, second arg is the content of the input in the form.</p>\n<p>the binary content of the upload file will be passed by the second arg.</p>\n<p>struct \u201crequest\u201d (will explain below) will NOT be passed to <tt>upload_handler_class.upload_finish()</tt>.</p>\n<p><tt>upload_handler_class.upload_finish()</tt> will be called when file upload finished, this function must return a string as the HTTP response body to the visitor.</p>\n<p>struct \u201crequest\u201d (will explain below) will be passed to <tt>upload_handler_class.upload_finish()</tt>.</p>\n</blockquote>\n</div>\n<div id=\"set-upload-buf-size-buf-size\">\n<h3>set_upload_buf_size(buf_size)</h3>\n<blockquote>\n<p>set the buffer size of the stream reader while file uploading.</p>\n<p>the unit of <tt>buf_size</tt> is byte, default value is 4096 byte.</p>\n<p><tt>upload_handler_class.upload_process()</tt> will be called to process the buffer every time when the buffer is full.</p>\n</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"routing\">\n<h2>ROUTING</h2>\n<blockquote>\n<p>x100http route accept a url and a function/class/path.</p>\n<p>There are three four of routes - get, post, static and upload.</p>\n</blockquote>\n<pre>app.get(\"/get_imple\", get_simple)\napp.post(\"/post_simple\", post_simple)\napp.upload(\"/upload_simple\", UploadClass)\napp.static(\"/static/test/\", \"/tmp/sta/\")\n</pre>\n<p>routing for HTTP GET can be more flexible like this:</p>\n<pre>app.get(\"/one_dir/&lt;arg_first&gt;_&lt;arg_second&gt;.py?abc=def\", regex_get)\n</pre>\n<p>allow all domain for CORS like this:</p>\n<pre>app.static(\"/static/test/\", \"/tmp/sta/\", cors=\"*\")\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"class-x100request\">\n<h2>CLASS X100REQUEST</h2>\n<blockquote>\nA instance of class <tt>X100Request</tt> will be passed into every handler function.</blockquote>\n<div id=\"get-remote-ip\">\n<h3>get_remote_ip()</h3>\n<blockquote>\nReturn the IP address of the visitor.</blockquote>\n</div>\n<div id=\"get-body\">\n<h3>get_body()</h3>\n<blockquote>\n<p>Return the body section of the HTTP request.</p>\n<p>Will be empty when the HTTP method is \u201cGET\u201d or \u201cPOST - multipart/form-data\u201d.</p>\n</blockquote>\n</div>\n<div id=\"get-query-string\">\n<h3>get_query_string()</h3>\n<blockquote>\nReturn the query string of the page was accessed, if any.</blockquote>\n</div>\n<div id=\"get-arg-arg-name\">\n<h3>get_arg(arg_name)</h3>\n<blockquote>\n<p>args parsed from <tt>query_string</tt> when the request is sent by \u201cGET\u201d or \u201cPOST - multipart/form-data\u201d.</p>\n<p>args parsed from <tt>body</tt> when the request is sent by \u201cPOST - application/x-www-form-urlencoded\u201d.</p>\n</blockquote>\n</div>\n<div id=\"get-header-header-name\">\n<h3>get_header(header_name)</h3>\n<blockquote>\nReturn the header`s value of the <tt>header_name</tt>, if any.</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"class-x100response\">\n<h2>CLASS X100RESPONSE</h2>\n<div id=\"set-body-content\">\n<h3>set_body(content)</h3>\n<blockquote>\n<p>Set the response data to visitor.</p>\n<p>Type \u2018str\u2019 and type \u2018bytes\u2019 are both accepted.</p>\n</blockquote>\n</div>\n<div id=\"set-header-name-value\">\n<h3>set_header(name, value)</h3>\n<blockquote>\nSet the HTTP header.</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"http-error-500\">\n<h2>HTTP ERROR 500</h2>\n<blockquote>\nvisitor will get HTTP error \u201c500\u201d when the handler function of the url he visit raise an error or code something wrong.</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"supported-python-versions\">\n<h2>SUPPORTED PYTHON VERSIONS</h2>\n<blockquote>\nx100http only supports python 3.4 or newer, because of <tt>re.fullmatch</tt> and <tt>os.sendfile</tt>.</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"examples\">\n<h2>EXAMPLES</h2>\n<div id=\"get-visitor-ip\">\n<h3>get visitor ip</h3>\n<pre>from x100http import X100HTTP\n\napp = X100HTTP()\n\ndef hello_world(request):\n    remote_ip = request.get_remote_ip()\n    response = \"&lt;html&gt;&lt;body&gt;hello, \" + remote_ip + \"&lt;/body&gt;&lt;/html&gt;\"\n    return response\n\napp.get(\"/\", hello_world)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n</div>\n<div id=\"post-method-route\">\n<h3>post method route</h3>\n<pre>from x100http import X100HTTP\n\napp = X100HTTP()\n\ndef index(request):\n    response = \"&lt;html&gt;&lt;body&gt;\" \\\n        + \"&lt;form name=\"abc\" action=\"/form\" method=\"post\"&gt;\" \\\n        + \"&lt;input type=\"text\" name=\"abc\" /&gt;\" \\\n        + \"&lt;input type=\"submit\" name=\"submit\" /&gt;\" \\\n        + \"&lt;/form&gt;\" \\\n        + \"&lt;/body&gt;&lt;/html&gt;\"\n    return response\n\ndef post_handler(request):\n    remote_ip = request.get_remote_ip()\n    abc = request.get_arg('abc')\n    response = \"hello, \" + remote_ip + \" you typed: \" + abc\n    return response\n\napp.get(\"/\", index)\napp.post(\"/form\", post_handler)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n</div>\n<div id=\"process-file-upload\">\n<h3>process file upload</h3>\n<pre>from x100http import X100HTTP, X100Response\n\nclass UploadHandler:\n\n    def upload_start(self, request):\n        self.content = \"start\"\n\n    def upload_process(self, key, line):\n        self.content += line.decode()\n\n    def upload_finish(self, request):\n        return \"upload succ, content = \" + self.content\n\napp = X100HTTP()\napp.upload(\"/upload\", UploadHandler)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n</div>\n<div id=\"set-http-header\">\n<h3>set http header</h3>\n<pre>from x100http import X100HTTP, X100Response\n\ndef get_custom_header(request):\n    remote_ip = request.get_remote_ip()\n    response = X100Response()\n    response.set_header(\"X-My-Header\", \"My-Value\")\n    response.set_body(\"&lt;html&gt;&lt;body&gt;hello, \" + remote_ip + \"&lt;/body&gt;&lt;/html&gt;\")\n    return response\n\napp = X100HTTP()\napp.upload(\"/\", get_custom_header)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n</div>\n<div id=\"more-flexible-routing\">\n<h3>more flexible routing</h3>\n<pre>from x100http import X100HTTP\n\ndef regex_get(request):\n    first = request.get_arg(\"arg_first\")\n    second = request.get_arg(\"arg_second\")\n    abc = request.get_arg(\"abc\")\n    return \"hello, \" + first + second + abc\n\napp = X100HTTP()\napp.get(\"/one_dir/&lt;arg_first&gt;_&lt;arg_second&gt;.py?abc=def\", regex_get)\napp.run(\"0.0.0.0\", 8080)\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1657864, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9ab69795903c12ef81f2b710ca26d6aa", "sha256": "d5a0bb31fb522b1c09f20bd28467b93021ee54d81a3397163e46746a28a4138c"}, "downloads": -1, "filename": "x100http-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9ab69795903c12ef81f2b710ca26d6aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3392, "upload_time": "2015-07-17T09:47:45", "upload_time_iso_8601": "2015-07-17T09:47:45.773699Z", "url": "https://files.pythonhosted.org/packages/d2/38/81c05bdc78ab68ff6396301c03374e8a8c4d49cd533f8d5d5a8331972349/x100http-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1da397ad5f6929dedaf3a7052417189b", "sha256": "c5ee0b4809688ea17b84a7dfd855e99101bf58b6c16f825b7213de8bd8eea8a1"}, "downloads": -1, "filename": "x100http-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1da397ad5f6929dedaf3a7052417189b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5642, "upload_time": "2015-07-18T01:59:17", "upload_time_iso_8601": "2015-07-18T01:59:17.431937Z", "url": "https://files.pythonhosted.org/packages/a9/77/dfb28a6d93f4655a7dd7e8d8618ce951c4f50685c0b640e3d22a0ef10a34/x100http-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7e9d0732814551e10f7012499acb8f9b", "sha256": "c106da7d563493ebe5e27f43876434fbbb8ad1d6b2f287ebce12f40e2afa76cd"}, "downloads": -1, "filename": "x100http-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7e9d0732814551e10f7012499acb8f9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5565, "upload_time": "2015-07-18T02:26:22", "upload_time_iso_8601": "2015-07-18T02:26:22.559220Z", "url": "https://files.pythonhosted.org/packages/d6/ae/823795db5bc5a15a7db8d34ed349fcb1bf86d846b0948fc6982f6080be2c/x100http-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d39ad6482f564e87064a7c52b76cd419", "sha256": "cec69f02938ff3b46d947f2de9f009795de85dc443455f3bd54582f1dbfe91aa"}, "downloads": -1, "filename": "x100http-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d39ad6482f564e87064a7c52b76cd419", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4775, "upload_time": "2015-07-18T02:34:23", "upload_time_iso_8601": "2015-07-18T02:34:23.680836Z", "url": "https://files.pythonhosted.org/packages/d6/f2/f0f861066d66f68c4350310c6e213b40498aec4cb96f418a91e2390a93d0/x100http-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "6b3f5695b75783dda05736ab4494132f", "sha256": "64069ea8f5b40571a02b788247b363aae9093d85407a8703bf0da2fec4ec86a4"}, "downloads": -1, "filename": "x100http-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6b3f5695b75783dda05736ab4494132f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4836, "upload_time": "2015-07-18T02:40:36", "upload_time_iso_8601": "2015-07-18T02:40:36.866848Z", "url": "https://files.pythonhosted.org/packages/ab/fb/73c041162b34429bc85ade042a9c7b5fe29674a31d40df14608deda9b1b7/x100http-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "69baed7458c19e23bd20bff8115de26a", "sha256": "887ba8eb5dc0242dc540b7c74c50fc9448272f60496db9fd7f23c82918875567"}, "downloads": -1, "filename": "x100http-0.1.5.tar.gz", "has_sig": false, "md5_digest": "69baed7458c19e23bd20bff8115de26a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4830, "upload_time": "2015-07-18T02:41:37", "upload_time_iso_8601": "2015-07-18T02:41:37.189813Z", "url": "https://files.pythonhosted.org/packages/a4/f0/b6d7048a57df4bac5ca420e26f48782fbab12572249bc8726eb911fbd428/x100http-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "f4215b11763ad8fe24bdd89f58fa10a5", "sha256": "73a3db67c93342caeab5b60112e89d6a8c3dfc74c2eccdacb50c61e00638375c"}, "downloads": -1, "filename": "x100http-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f4215b11763ad8fe24bdd89f58fa10a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4842, "upload_time": "2015-07-18T02:44:24", "upload_time_iso_8601": "2015-07-18T02:44:24.913773Z", "url": "https://files.pythonhosted.org/packages/af/93/38a99e5bff8697d5d9946f7dbea8cd0c9bb920851cbdff018ae7333b47fc/x100http-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "56d16b0458d0ebed73ff9d66e945c7aa", "sha256": "e817bc38cb4e6d8dd7937099774b7f0deb8088742e212411db5194eb811b06f7"}, "downloads": -1, "filename": "x100http-0.1.7.tar.gz", "has_sig": false, "md5_digest": "56d16b0458d0ebed73ff9d66e945c7aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4852, "upload_time": "2015-07-18T02:45:37", "upload_time_iso_8601": "2015-07-18T02:45:37.010928Z", "url": "https://files.pythonhosted.org/packages/13/57/647e2ed0f7045fea21a0b951bf4cc25341978a23377a9d2f703a5bd184ce/x100http-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "d085710f26069041a2be4ab0c47d4cc4", "sha256": "7a828a55c053ca78b34d131465c61e0d065790c5e1529e4156cfd631907b7a4d"}, "downloads": -1, "filename": "x100http-0.1.8.tar.gz", "has_sig": false, "md5_digest": "d085710f26069041a2be4ab0c47d4cc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5669, "upload_time": "2015-07-18T02:53:50", "upload_time_iso_8601": "2015-07-18T02:53:50.761400Z", "url": "https://files.pythonhosted.org/packages/05/4b/21c27de43856f119d23b9fc637b5d31411925eefe5750a68e5f237bd624c/x100http-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "22734f0037d54265c35591119751d464", "sha256": "5ab16df149258b7c628fb58923b18f2cb60d41dbf21a170b562c280f588a00e4"}, "downloads": -1, "filename": "x100http-0.1.9.tar.gz", "has_sig": false, "md5_digest": "22734f0037d54265c35591119751d464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5880, "upload_time": "2015-07-24T15:43:09", "upload_time_iso_8601": "2015-07-24T15:43:09.066472Z", "url": "https://files.pythonhosted.org/packages/d5/6d/eb2da1378f1002ff797e014bf4f96b863502090c5e2ff16d5ae0300e35d9/x100http-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cf0a4ddfbb9e81b03b15d5e943dbfb11", "sha256": "bb99d116bfc31e532860c43ed07fe33bf1d7c671a0dbfce296240281ec7352e4"}, "downloads": -1, "filename": "x100http-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cf0a4ddfbb9e81b03b15d5e943dbfb11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6564, "upload_time": "2015-07-26T18:01:04", "upload_time_iso_8601": "2015-07-26T18:01:04.032105Z", "url": "https://files.pythonhosted.org/packages/76/2d/1da183d0e0f98359c15f271cf6fbc0b4a30e6682ac8a7761a74cebc34f06/x100http-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4083aacd3efcdb4b174000e213ef066e", "sha256": "70ebe542e6b1dfc0c7eb653efe5e4ea2620020f1ad21ed3c12f4887bf639640c"}, "downloads": -1, "filename": "x100http-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4083aacd3efcdb4b174000e213ef066e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8127, "upload_time": "2015-07-28T04:23:43", "upload_time_iso_8601": "2015-07-28T04:23:43.937737Z", "url": "https://files.pythonhosted.org/packages/fa/34/b289874997208b48556aadc18513dd7d214b19547ca7b76a318632ff88e6/x100http-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "717100eb4d97caec0805fa09e9e64129", "sha256": "69ab971a07fc9aa40331d6425184097cbd2ffc6405c917b3b405c1ef4929b15f"}, "downloads": -1, "filename": "x100http-0.2.2.tar.gz", "has_sig": false, "md5_digest": "717100eb4d97caec0805fa09e9e64129", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2015-07-28T17:03:09", "upload_time_iso_8601": "2015-07-28T17:03:09.800825Z", "url": "https://files.pythonhosted.org/packages/cf/f6/9cce582f754e9e15f0239c5e80ef4d3b84ac29fb61890c893ec1eed6b5d0/x100http-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c60d96e8724f72d714f12991b7020a48", "sha256": "75ec07f8969a2bde450ab99c54a5e8ccccc71541ba4d940e09c54621949e8ae5"}, "downloads": -1, "filename": "x100http-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c60d96e8724f72d714f12991b7020a48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8526, "upload_time": "2015-07-28T17:04:42", "upload_time_iso_8601": "2015-07-28T17:04:42.659798Z", "url": "https://files.pythonhosted.org/packages/a9/c0/22fee0c5bdbb7afeb432fd97fd59acc46b1008790a33f7d295c06b367550/x100http-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c6d55f0798898bca58634672ebbbbbcb", "sha256": "da9e9d69902358d6114f7bd739576f34a4e4017e5f2a9ecfaf4300b6cacd4008"}, "downloads": -1, "filename": "x100http-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c6d55f0798898bca58634672ebbbbbcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8509, "upload_time": "2015-07-28T17:14:39", "upload_time_iso_8601": "2015-07-28T17:14:39.508044Z", "url": "https://files.pythonhosted.org/packages/87/2e/7cf2b93b73739ca60f1453d7aeaed11da1a958cbb2f82192771ff9726f7f/x100http-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "04488c189fa988991d82b1276796aba6", "sha256": "60d42c82e9334e5bea00109c179f9ef27bdc4563f23bcd558e0819a077ec2112"}, "downloads": -1, "filename": "x100http-0.2.5.tar.gz", "has_sig": false, "md5_digest": "04488c189fa988991d82b1276796aba6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8985, "upload_time": "2015-07-29T13:12:32", "upload_time_iso_8601": "2015-07-29T13:12:32.707449Z", "url": "https://files.pythonhosted.org/packages/f3/58/cff94dad40abd116eb16e9cb3d6c2b8bbe3791b2a6b82a9b8dd03545b6c1/x100http-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c1615ec9679968dd035b6bc7d078491a", "sha256": "f46c4520ccd6e64795cad64d7c47955e36c654fd70718b592671af247ed784c3"}, "downloads": -1, "filename": "x100http-0.2.6.tar.gz", "has_sig": false, "md5_digest": "c1615ec9679968dd035b6bc7d078491a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9096, "upload_time": "2015-07-29T15:11:54", "upload_time_iso_8601": "2015-07-29T15:11:54.122500Z", "url": "https://files.pythonhosted.org/packages/fd/4f/24fbe214885839066786031ac9b697cb9748c0725be749f9a86c9d0bc675/x100http-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "b31621e7e51aec0f1c785490ada3fc9e", "sha256": "413ef2b6a0125317e70585eb9482871e2c55ae83a7fea20b2dafbab2db73ff7f"}, "downloads": -1, "filename": "x100http-0.2.7.tar.gz", "has_sig": false, "md5_digest": "b31621e7e51aec0f1c785490ada3fc9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9095, "upload_time": "2015-07-31T02:59:50", "upload_time_iso_8601": "2015-07-31T02:59:50.668185Z", "url": "https://files.pythonhosted.org/packages/53/94/77044470013a39337b5839b6595544a73ca3497d08877312e31e36c3fbfe/x100http-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b31621e7e51aec0f1c785490ada3fc9e", "sha256": "413ef2b6a0125317e70585eb9482871e2c55ae83a7fea20b2dafbab2db73ff7f"}, "downloads": -1, "filename": "x100http-0.2.7.tar.gz", "has_sig": false, "md5_digest": "b31621e7e51aec0f1c785490ada3fc9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9095, "upload_time": "2015-07-31T02:59:50", "upload_time_iso_8601": "2015-07-31T02:59:50.668185Z", "url": "https://files.pythonhosted.org/packages/53/94/77044470013a39337b5839b6595544a73ca3497d08877312e31e36c3fbfe/x100http-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:32 2020"}