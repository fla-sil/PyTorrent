{"info": {"author": "Xavier Barbosa", "author_email": "clint.northwood@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: Log Analysis", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Page Counters", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Monitoring", "Topic :: Utilities"], "description": "Pynba\n=====\n\nPynba is a WSGI Middleware for Pinba_. It allows realtime monitoring/statistics\nserver using MySQL as a read-only interface. It works on Python 2.7, >=3.3 and\npypy.\n\nIt accumulates and processes data sent over UDP by multiple Python processes\nand displays statistics in a nice human-readable form of simple \"reports\", also\nproviding read-only interface to the raw data in order to make possible\ngeneration of more sophisticated reports and stats.\n\nUsers also can measure particular parts of the code using timers with arbitrary\ntags.\n\n\nWhy another statistics manager ?\n--------------------------------\n\nBecause Pinba rocks!\n\nAnd `IsCool Entertainment`_ already uses Pinba for monitoring PHP based\napplications.\n\n\nRequirements\n------------\n\nThis library relies only on Pinba_.\nYou will need to install theses packages before using Pynba.\n\nThe installation process requires setuptools to be installed.\nIf it is not, please refer to the installation of this package.\n\n\nSetup\n-----\n\nIf you want to install the official release, do::\n\n    $ pip install pynba\n\nBut i you prefer to use the current developement version, do::\n\n    $ git clone https://github.com/johnnoone/pynba.git\n    $ python setup.py install\n\n\nUsage\n-----\n\nSays that your main WSGI application is::\n\n    def app(environ, start_response):\n        ...\n\nImport the pynba decorator, and decorate your main app with it::\n\n    from pynba.wsgi import monitor\n\n    @monitor(('127.0.0.1', 30002))\n    def app(environ, start_response):\n        ...\n\nEach time the app will be processed, a new UPD stream will be sent.\n\nYou can also tag the process, for example::\n\n    @monitor(('127.0.0.1', 30002), tags={'foo': 'bar'})\n    def app(environ, start_response):\n        ...\n\nEventualy, you can use timers to measure particular parts of your code.\nFor it, just import the pynba proxy, and use it to create new timers::\n\n    from pynba.wsgi import pynba\n\n    timer = pynba.timer(foo=\"bar\")\n    timer.start()\n    ...\n    timer.stop()\n\nBut you may want to supervise simple scripts. For this usage, use ``ScriptMonitor``::\n\n    from pynba.util import ScriptMonitor\n\n    monitor = ScriptMonitor(('127.0.0.1', 30002), tags={'foo': 'bar'})\n    timer = monitor.timer(foo='bar')\n    timer.start()\n    ...\n    timer.stop()\n    monitor.send()\n\n\nSome use cases are available on src/examples/\n\n\nLogging and debugging\n---------------------\n\nPynba log to the 'pynba' logger. You should plug an handler in it. For example,\nlet's say you want to log everything to syslog, here is the modop::\n\n    import logging\n    import logging.handlers\n    logger = logging.getLogger('pynba')\n    logger.setLevel(logging.DEBUG)\n    logger.setHandler(logging.handlers.SysLogHandler)\n\n\nAnother aspect is that reporting will be as discreet as possible, by not\nraising exceptions on errors. This feature can be disabled directly into the\nreporter instance.\n\nFor the WSGI usage::\n\n    from pynba.wsgi import PynbaMiddleware\n\n    monitored_app = PynbaMiddleware(app, ('127.0.0.1', 30002))\n    monitored_app.reporter.raise_on_fail = True\n\nThe decorated version::\n\n    from pynba.wsgi import monitor\n\n    @monitor(('127.0.0.1', 30002))\n    def app(environ, start_response):\n        ...\n    app.reporter.raise_on_fail = True\n\nOr the script usage::\n\n    from pynba.util import ScriptMonitor\n\n    monitor = ScriptMonitor(('127.0.0.1', 30002))\n    monitor.reporter.raise_on_fail = True\n\n\nContribute\n----------\n\nWhile debugging, you can rebuild c package with this command::\n\n    $ python setup.py cythonize develop\n\n\nDifferences with PHP extension\n------------------------------\n\nAbout the data sent:\n\n*   ``ru_utime`` and ``ru_stime`` represent the resource usage for the current\n    process, not the shared resources.\n*   ``document_size`` cannot be automaticaly processed with the current WSGI\n    specification. You are able to set manually this value like this::\n\n        pynba.document_size = [YOUR VALUE]\n\n*   ``memory_peak`` also is currently not implemented. Like the previous data,\n    you can set manually this value like this::\n\n        pynba.memory_peak = [YOUR VALUE]\n\n*   ``memory_footprint`` also is currently not implemented. Like the previous data,\n    you can set manually this value like this::\n\n        pynba.memory_footprint = [YOUR VALUE]\n\nAbout timers:\n\n*   The Python version permites multiple values for each timer tags.\n    Just declare any sequences, mapping or callable. This example::\n\n        pynba.timer(foo='bar', baz=['seq1', 'seq2'], qux={'map1': 'val1'})\n\n    Will populates 4 values for 3 tags in the Pinba database::\n\n        ('foo', 'bar'),\n        ('baz, 'seq1'),\n        ('baz, 'seq2'),\n        ('qux.map1', 'val1')\n\nOther additions:\n\n*   ``ScriptMonitor`` allows to monitor single scripts. `IsCool Entertainment`_\n    uses it for monitoring our AMQ based workers.\n\n\nLicense\n-------\n\nThis package is release under the MIT Licence.\nPlease see LICENSE document for a full description.\n\n\nCredits\n-------\n\n- Pinba_\n- `IsCool Entertainment`_\n\n.. _Pinba: http://pinba.org\n.. _`IsCool Entertainment`: http://www.iscoolentertainment.com/en/\n\n\n.. Please, see the README.rst for more details\n\nNews\n====\n\n0.1\n---\n\n*Release date: 19-Jun-2012*\n\n* First release\n\n0.2\n---\n\n*Release date: 29-Jun-2012*\n\n* Logging refactoring\n\n0.3\n---\n\n*Release date: 26-Sept-2012*\n\n* Migrate to cython\n* Removed Werkzeug dependency\n\n0.3.2\n-----\n\n*Release date: 1-Oct-2012*\n\n* Fixed empty strings\n\n0.3.3\n-----\n\n*Release date: 29-Oct-2012*\n\n* Added util for scripts monitoring\n\n0.3.5\n-----\n\n*Release date: 29-Oct-2013*\n\n* Status support on reporter\n\n0.3.6\n-----\n\n*Release date: 4-Jun-2014*\n\n* preparation for Python 3 support\n* use pytest and tox for testing\n* added a Reporter.raise_on_fail attribute, in order to hide exceptions on production servers.\n* describe logging strategy\n\n0.4.0\n-----\n\n*Release date: 6-Jun-2014*\n\n* Python >= 3.3 support !\n* added memory_footprint and schema reporting\n* added cythonize command\n* dropped protobuf library for the benefit of a small embedded script\n\n0.4.1\n-----\n\n*Release date: 6-Jun-2014*\n\n* don't raise an Exception on pynba.enabled when outside of context\n* implements DataCollector tags\n\n0.4.2\n-----\n\n*Release date: 18-Jul-2014*\n\n* fix util.ScriptMonitor\n\n0.4.3\n-----\n\n*Release date: 06-Nov-2014*\n\n* fix util.ScriptMonitor tags\n\n0.5.4\n-----\n\n*Release date: 18-Jun-2015*\n\n* PyPy support !\n* forked from iscool_e.pynba\n* refactored packages: it's not a wsgi only usage anymore\n\n0.5.5\n-----\n\n*Release date: 8-Sept-2015*\n\n* Cython unicode fix", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnnoone/pynba", "keywords": "pinba wsgi monitoring", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pynba", "package_url": "https://pypi.org/project/pynba/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pynba/", "project_urls": {"Homepage": "https://github.com/johnnoone/pynba"}, "release_url": "https://pypi.org/project/pynba/0.5.5/", "requires_dist": ["six", "enum34; python_version==\"2.7\"", "enum34; python_version==\"3.2\"", "enum34; python_version==\"3.3\""], "requires_python": null, "summary": "lightweight timers and wsgi middleware to monitor performance in production systems", "version": "0.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pynba\">\n<h2>Pynba</h2>\n<p>Pynba is a WSGI Middleware for <a href=\"http://pinba.org\" rel=\"nofollow\">Pinba</a>. It allows realtime monitoring/statistics\nserver using MySQL as a read-only interface. It works on Python 2.7, &gt;=3.3 and\npypy.</p>\n<p>It accumulates and processes data sent over UDP by multiple Python processes\nand displays statistics in a nice human-readable form of simple \u201creports\u201d, also\nproviding read-only interface to the raw data in order to make possible\ngeneration of more sophisticated reports and stats.</p>\n<p>Users also can measure particular parts of the code using timers with arbitrary\ntags.</p>\n<div id=\"why-another-statistics-manager\">\n<h3>Why another statistics manager ?</h3>\n<p>Because Pinba rocks!</p>\n<p>And <a href=\"http://www.iscoolentertainment.com/en/\" rel=\"nofollow\">IsCool Entertainment</a> already uses Pinba for monitoring PHP based\napplications.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>This library relies only on <a href=\"http://pinba.org\" rel=\"nofollow\">Pinba</a>.\nYou will need to install theses packages before using Pynba.</p>\n<p>The installation process requires setuptools to be installed.\nIf it is not, please refer to the installation of this package.</p>\n</div>\n<div id=\"setup\">\n<h3>Setup</h3>\n<p>If you want to install the official release, do:</p>\n<pre>$ pip install pynba\n</pre>\n<p>But i you prefer to use the current developement version, do:</p>\n<pre>$ git clone https://github.com/johnnoone/pynba.git\n$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Says that your main WSGI application is:</p>\n<pre>def app(environ, start_response):\n    ...\n</pre>\n<p>Import the pynba decorator, and decorate your main app with it:</p>\n<pre>from pynba.wsgi import monitor\n\n@monitor(('127.0.0.1', 30002))\ndef app(environ, start_response):\n    ...\n</pre>\n<p>Each time the app will be processed, a new UPD stream will be sent.</p>\n<p>You can also tag the process, for example:</p>\n<pre>@monitor(('127.0.0.1', 30002), tags={'foo': 'bar'})\ndef app(environ, start_response):\n    ...\n</pre>\n<p>Eventualy, you can use timers to measure particular parts of your code.\nFor it, just import the pynba proxy, and use it to create new timers:</p>\n<pre>from pynba.wsgi import pynba\n\ntimer = pynba.timer(foo=\"bar\")\ntimer.start()\n...\ntimer.stop()\n</pre>\n<p>But you may want to supervise simple scripts. For this usage, use <tt>ScriptMonitor</tt>:</p>\n<pre>from pynba.util import ScriptMonitor\n\nmonitor = ScriptMonitor(('127.0.0.1', 30002), tags={'foo': 'bar'})\ntimer = monitor.timer(foo='bar')\ntimer.start()\n...\ntimer.stop()\nmonitor.send()\n</pre>\n<p>Some use cases are available on src/examples/</p>\n</div>\n<div id=\"logging-and-debugging\">\n<h3>Logging and debugging</h3>\n<p>Pynba log to the \u2018pynba\u2019 logger. You should plug an handler in it. For example,\nlet\u2019s say you want to log everything to syslog, here is the modop:</p>\n<pre>import logging\nimport logging.handlers\nlogger = logging.getLogger('pynba')\nlogger.setLevel(logging.DEBUG)\nlogger.setHandler(logging.handlers.SysLogHandler)\n</pre>\n<p>Another aspect is that reporting will be as discreet as possible, by not\nraising exceptions on errors. This feature can be disabled directly into the\nreporter instance.</p>\n<p>For the WSGI usage:</p>\n<pre>from pynba.wsgi import PynbaMiddleware\n\nmonitored_app = PynbaMiddleware(app, ('127.0.0.1', 30002))\nmonitored_app.reporter.raise_on_fail = True\n</pre>\n<p>The decorated version:</p>\n<pre>from pynba.wsgi import monitor\n\n@monitor(('127.0.0.1', 30002))\ndef app(environ, start_response):\n    ...\napp.reporter.raise_on_fail = True\n</pre>\n<p>Or the script usage:</p>\n<pre>from pynba.util import ScriptMonitor\n\nmonitor = ScriptMonitor(('127.0.0.1', 30002))\nmonitor.reporter.raise_on_fail = True\n</pre>\n</div>\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<p>While debugging, you can rebuild c package with this command:</p>\n<pre>$ python setup.py cythonize develop\n</pre>\n</div>\n<div id=\"differences-with-php-extension\">\n<h3>Differences with PHP extension</h3>\n<p>About the data sent:</p>\n<ul>\n<li><p><tt>ru_utime</tt> and <tt>ru_stime</tt> represent the resource usage for the current\nprocess, not the shared resources.</p>\n</li>\n<li><p><tt>document_size</tt> cannot be automaticaly processed with the current WSGI\nspecification. You are able to set manually this value like this:</p>\n<pre>pynba.document_size = [YOUR VALUE]\n</pre>\n</li>\n<li><p><tt>memory_peak</tt> also is currently not implemented. Like the previous data,\nyou can set manually this value like this:</p>\n<pre>pynba.memory_peak = [YOUR VALUE]\n</pre>\n</li>\n<li><p><tt>memory_footprint</tt> also is currently not implemented. Like the previous data,\nyou can set manually this value like this:</p>\n<pre>pynba.memory_footprint = [YOUR VALUE]\n</pre>\n</li>\n</ul>\n<p>About timers:</p>\n<ul>\n<li><p>The Python version permites multiple values for each timer tags.\nJust declare any sequences, mapping or callable. This example:</p>\n<pre>pynba.timer(foo='bar', baz=['seq1', 'seq2'], qux={'map1': 'val1'})\n</pre>\n<p>Will populates 4 values for 3 tags in the Pinba database:</p>\n<pre>('foo', 'bar'),\n('baz, 'seq1'),\n('baz, 'seq2'),\n('qux.map1', 'val1')\n</pre>\n</li>\n</ul>\n<p>Other additions:</p>\n<ul>\n<li><tt>ScriptMonitor</tt> allows to monitor single scripts. <a href=\"http://www.iscoolentertainment.com/en/\" rel=\"nofollow\">IsCool Entertainment</a>\nuses it for monitoring our AMQ based workers.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This package is release under the MIT Licence.\nPlease see LICENSE document for a full description.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<ul>\n<li><a href=\"http://pinba.org\" rel=\"nofollow\">Pinba</a></li>\n<li><a href=\"http://www.iscoolentertainment.com/en/\" rel=\"nofollow\">IsCool Entertainment</a></li>\n</ul>\n</div>\n</div>\n<div id=\"news\">\n<h2>News</h2>\n<div id=\"id1\">\n<h3>0.1</h3>\n<p><em>Release date: 19-Jun-2012</em></p>\n<ul>\n<li>First release</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2</h3>\n<p><em>Release date: 29-Jun-2012</em></p>\n<ul>\n<li>Logging refactoring</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.3</h3>\n<p><em>Release date: 26-Sept-2012</em></p>\n<ul>\n<li>Migrate to cython</li>\n<li>Removed Werkzeug dependency</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.3.2</h3>\n<p><em>Release date: 1-Oct-2012</em></p>\n<ul>\n<li>Fixed empty strings</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.3.3</h3>\n<p><em>Release date: 29-Oct-2012</em></p>\n<ul>\n<li>Added util for scripts monitoring</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.3.5</h3>\n<p><em>Release date: 29-Oct-2013</em></p>\n<ul>\n<li>Status support on reporter</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.3.6</h3>\n<p><em>Release date: 4-Jun-2014</em></p>\n<ul>\n<li>preparation for Python 3 support</li>\n<li>use pytest and tox for testing</li>\n<li>added a Reporter.raise_on_fail attribute, in order to hide exceptions on production servers.</li>\n<li>describe logging strategy</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.4.0</h3>\n<p><em>Release date: 6-Jun-2014</em></p>\n<ul>\n<li>Python &gt;= 3.3 support !</li>\n<li>added memory_footprint and schema reporting</li>\n<li>added cythonize command</li>\n<li>dropped protobuf library for the benefit of a small embedded script</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.4.1</h3>\n<p><em>Release date: 6-Jun-2014</em></p>\n<ul>\n<li>don\u2019t raise an Exception on pynba.enabled when outside of context</li>\n<li>implements DataCollector tags</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.4.2</h3>\n<p><em>Release date: 18-Jul-2014</em></p>\n<ul>\n<li>fix util.ScriptMonitor</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.4.3</h3>\n<p><em>Release date: 06-Nov-2014</em></p>\n<ul>\n<li>fix util.ScriptMonitor tags</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.5.4</h3>\n<p><em>Release date: 18-Jun-2015</em></p>\n<ul>\n<li>PyPy support !</li>\n<li>forked from iscool_e.pynba</li>\n<li>refactored packages: it\u2019s not a wsgi only usage anymore</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.5.5</h3>\n<p><em>Release date: 8-Sept-2015</em></p>\n<ul>\n<li>Cython unicode fix</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1713576, "releases": {"0.5.4": [{"comment_text": "", "digests": {"md5": "e844387511bdffbee6415462ed2a9c9d", "sha256": "c294ccaca9e7a3d78f1d7d885a8172261608574914080467013d53f3f25d0a6e"}, "downloads": -1, "filename": "pynba-0.5.4.tar.gz", "has_sig": false, "md5_digest": "e844387511bdffbee6415462ed2a9c9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189127, "upload_time": "2015-06-18T14:24:34", "upload_time_iso_8601": "2015-06-18T14:24:34.103088Z", "url": "https://files.pythonhosted.org/packages/00/33/14d75f5440f4e45bff8cf779513b24ef93ce926f27696559a496a0883a27/pynba-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "c5c25f29eabf7649a7f3608faf0fcfc9", "sha256": "6757c0ac0be47138c99c45bfd1665a8084cd9724c9b09d5389097fbc6746d758"}, "downloads": -1, "filename": "pynba-0.5.5-cp34-cp34m-macosx_10_10_x86_64.whl", "has_sig": false, "md5_digest": "c5c25f29eabf7649a7f3608faf0fcfc9", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 321687, "upload_time": "2015-09-08T16:42:36", "upload_time_iso_8601": "2015-09-08T16:42:36.080854Z", "url": "https://files.pythonhosted.org/packages/f3/85/15dad35cdd7411b9fa1007198bb0839647295925bbc0ed63766671b1b9a2/pynba-0.5.5-cp34-cp34m-macosx_10_10_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96cb3223966fc44701ffc54a07f8ee5d", "sha256": "72ccd6a6eba3ecf3d6efb1fb57e6d346e8ee08759314775952c6963728a1e4f6"}, "downloads": -1, "filename": "pynba-0.5.5.tar.gz", "has_sig": false, "md5_digest": "96cb3223966fc44701ffc54a07f8ee5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189101, "upload_time": "2015-09-08T16:42:41", "upload_time_iso_8601": "2015-09-08T16:42:41.069107Z", "url": "https://files.pythonhosted.org/packages/2a/6f/39106b9e6802f881a5b3b8bc85ea61f0438a70d7098341222dea23c173ba/pynba-0.5.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c5c25f29eabf7649a7f3608faf0fcfc9", "sha256": "6757c0ac0be47138c99c45bfd1665a8084cd9724c9b09d5389097fbc6746d758"}, "downloads": -1, "filename": "pynba-0.5.5-cp34-cp34m-macosx_10_10_x86_64.whl", "has_sig": false, "md5_digest": "c5c25f29eabf7649a7f3608faf0fcfc9", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 321687, "upload_time": "2015-09-08T16:42:36", "upload_time_iso_8601": "2015-09-08T16:42:36.080854Z", "url": "https://files.pythonhosted.org/packages/f3/85/15dad35cdd7411b9fa1007198bb0839647295925bbc0ed63766671b1b9a2/pynba-0.5.5-cp34-cp34m-macosx_10_10_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96cb3223966fc44701ffc54a07f8ee5d", "sha256": "72ccd6a6eba3ecf3d6efb1fb57e6d346e8ee08759314775952c6963728a1e4f6"}, "downloads": -1, "filename": "pynba-0.5.5.tar.gz", "has_sig": false, "md5_digest": "96cb3223966fc44701ffc54a07f8ee5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189101, "upload_time": "2015-09-08T16:42:41", "upload_time_iso_8601": "2015-09-08T16:42:41.069107Z", "url": "https://files.pythonhosted.org/packages/2a/6f/39106b9e6802f881a5b3b8bc85ea61f0438a70d7098341222dea23c173ba/pynba-0.5.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:21 2020"}