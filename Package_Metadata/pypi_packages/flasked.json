{"info": {"author": "Iv\u00e1n de Paz Centeno", "author_email": "ipazc@unileon.es", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Natural Language :: English", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "=============\nFlasked 0.0.4\n=============\n\n`Flasked` is a package designed to ease the creation of a REST API. It uses `Flask` and `Flask-Restful` in the\nbackground.\n\n.. image:: https://badge.fury.io/py/flasked.svg\n    :target: https://badge.fury.io/py/flasked\n\n\nExample\n=======\n\nHow to create a RESTFUL API faster than this?\n\n.. code:: python\n\n    from flasked import Flasked\n\n    class Root():\n        def get(self):\n            return \"This is the result\"\n\n    flasked = Flasked()\n    flasked[\"/\"] = Root\n    flasked.run()\n\n\nInstallation\n============\n\nIt is only supported **Python 3.4.1** onwards:\n\n.. code:: bash\n\n    sudo pip3 install flasked\n\n\nDescription\n===========\n\n`Flasked` behaves like a Python's dict; thus, in order to create more entry points, it is only required to assign the\nroute with the class that manages the route. Example:\n\n.. code:: python\n\n    flasked[\"/\"] = RouteRoot\n    flasked[\"/route2/\"] = Route2\n    flasked[\"/route2/<variable>/\"] = Route3\n\n\nThe routes available can be iterated in the same way as a Python's dict:\n\n.. code:: python\n    \n    print(list(flasked.keys()))\n    \n    for route in flasked:\n        print(route)\n    \n    for route, cls in flasked.items():\n        print(\"{}: {}\".format(route, cls))\n\n\nThe classes that manages the routes *do not require* to inherit from any special class, since `Flasked` is able to manage them.\nNonetheless, they have access to all the methods and attributes that a `Resource <https://github.com/flask-restful/flask-restful/blob/master/flask_restful/__init__.py#L564>`_ class has (from `Flask_Restful <https://github.com/flask-restful/>`_).\n\n\nThe HTTP methods are defined as method from the class that handles it:\n\n.. code:: python\n\n    class Root():\n        def get(self):\n            return {\"result\": \"result for GET\"}\n\n        def post(self):\n            return {\"result\": \"result for POST\"}\n\n        def delete(self):\n            return {\"result\": \"result for DELETE\"}\n\n\nAlso, when a variable is defined in an entry URL, the class method's need to reflect it:\n\n.. code:: python\n\n    class Route3():\n        def get(self, variable):\n            return variable\n\n    flasked[\"/route2/<variable>/\"] = Route3\n\n\nIn order to run flask, it is only required to execute the `run()` method. It has the same arguments as a `Flask app run()`:\n\n.. code:: python\n\n    flasked.run(host=\"0.0.0.0\", port=2234, threaded=True, debug=False)\n\n\nThe flask_restful API object and the Flask original APP object are directly accessible from the `flasked` object\n\n.. code:: python\n\n    # Flask_Restful API object\n    api = flasked.api\n\n    # Flask API object\n    flask_app = flasked.flask_app\n\n\nADVANCED\n========\n\nIf the class that manages a route requires arguments to be injected in the constructor, it can be done in the following way:\n\n.. code:: python\n\n    class Route():\n        def __init__(self, argument1, argument2):\n            self.argument1 = argument1\n            self.argument2 = argument2\n\n        def get(self, variable):\n            return variable\n\n    # The following 3 lines do the same:\n    flasked[\"/\"] = Route, argument1, argument2                                          # First way\n    flasked[\"/\"] = Route, {'args': [argument1, argument2]}                              # Second way\n    flasked[\"/\"] = Route, {'kwargs': dict(argument1=argument1, argument2=argument2)}    # third way\n\n\n**IMPORTANT:** Note that if the first way is taken, the `argument1` **can't be a dictionary that contains the keywords 'args' or 'kwargs'**.\nOtherwise, it will be used as a source for the `args` and `kwargs` of the initializer. It is always preferred to use the second mixed with the third way.\n\nThis package is completely compatible with flask_restful. For more information, check `Flask_Restful <https://github.com/flask-restful/>`_.\n\n\nBASIC USE CASES\n===============\n\nBasic usage examples are shown in the `Usage-examples page from the wiki <https://github.com/ipazc/flasked/wiki/Usage-examples>`_:\n\n * `How to create endpoints with different methods <https://github.com/ipazc/flasked/wiki/Usage-examples#create-get-post-delete--endpoints>`_\n * `How to read a json from the request <https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-json-from-request>`_\n * `How to read a request parameter <https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-raw-parameter-from-request>`_\n * `How to read a request URL value <https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-value-from-url-path>`_\n * `How to retrieve a file from the request <https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-binary-file-from-request>`_\n * `How to return a file as response <https://github.com/ipazc/flasked/wiki/Usage-examples#return-a-binary-file-as-response-to-request>`_\n\n\nMANUAL TESTING\n==============\n\nIf you want to test your API REST manually, there's an explanation on how to do it in this `wiki page <https://github.com/ipazc/flasked/wiki/Manual-testing>`_\n\nLICENSE\n=======\n\nIt is released under the *MIT license*.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ipazc/flasked", "keywords": "flask rest API easy dict", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flasked", "package_url": "https://pypi.org/project/flasked/", "platform": "", "project_url": "https://pypi.org/project/flasked/", "project_urls": {"Homepage": "http://github.com/ipazc/flasked"}, "release_url": "https://pypi.org/project/flasked/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Flasked is a package for creating an API-REST even easier than with Flask_Restful.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>Flasked</cite> is a package designed to ease the creation of a REST API. It uses <cite>Flask</cite> and <cite>Flask-Restful</cite> in the\nbackground.</p>\n<a href=\"https://badge.fury.io/py/flasked\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/flasked.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/568b820b58dc0c09ba5897cb2e7c5d67a01be10c/68747470733a2f2f62616467652e667572792e696f2f70792f666c61736b65642e737667\"></a>\n<div id=\"example\">\n<h2>Example</h2>\n<p>How to create a RESTFUL API faster than this?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flasked</span> <span class=\"kn\">import</span> <span class=\"n\">Flasked</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Root</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"This is the result\"</span>\n\n<span class=\"n\">flasked</span> <span class=\"o\">=</span> <span class=\"n\">Flasked</span><span class=\"p\">()</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Root</span>\n<span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>It is only supported <strong>Python 3.4.1</strong> onwards:</p>\n<pre>sudo pip3 install flasked\n</pre>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<p><cite>Flasked</cite> behaves like a Python\u2019s dict; thus, in order to create more entry points, it is only required to assign the\nroute with the class that manages the route. Example:</p>\n<pre><span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">RouteRoot</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/route2/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route2</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/route2/&lt;variable&gt;/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route3</span>\n</pre>\n<p>The routes available can be iterated in the same way as a Python\u2019s dict:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">route</span> <span class=\"ow\">in</span> <span class=\"n\">flasked</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"bp\">cls</span> <span class=\"ow\">in</span> <span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">))</span>\n</pre>\n<p>The classes that manages the routes <em>do not require</em> to inherit from any special class, since <cite>Flasked</cite> is able to manage them.\nNonetheless, they have access to all the methods and attributes that a <a href=\"https://github.com/flask-restful/flask-restful/blob/master/flask_restful/__init__.py#L564\" rel=\"nofollow\">Resource</a> class has (from <a href=\"https://github.com/flask-restful/\" rel=\"nofollow\">Flask_Restful</a>).</p>\n<p>The HTTP methods are defined as method from the class that handles it:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Root</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"result for GET\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"result for POST\"</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"s2\">\"result for DELETE\"</span><span class=\"p\">}</span>\n</pre>\n<p>Also, when a variable is defined in an entry URL, the class method\u2019s need to reflect it:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Route3</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">variable</span>\n\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/route2/&lt;variable&gt;/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route3</span>\n</pre>\n<p>In order to run flask, it is only required to execute the <cite>run()</cite> method. It has the same arguments as a <cite>Flask app run()</cite>:</p>\n<pre><span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">2234</span><span class=\"p\">,</span> <span class=\"n\">threaded</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>The flask_restful API object and the Flask original APP object are directly accessible from the <cite>flasked</cite> object</p>\n<pre><span class=\"c1\"># Flask_Restful API object</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">api</span>\n\n<span class=\"c1\"># Flask API object</span>\n<span class=\"n\">flask_app</span> <span class=\"o\">=</span> <span class=\"n\">flasked</span><span class=\"o\">.</span><span class=\"n\">flask_app</span>\n</pre>\n</div>\n<div id=\"advanced\">\n<h2>ADVANCED</h2>\n<p>If the class that manages a route requires arguments to be injected in the constructor, it can be done in the following way:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Route</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">argument1</span> <span class=\"o\">=</span> <span class=\"n\">argument1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">argument2</span> <span class=\"o\">=</span> <span class=\"n\">argument2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">variable</span>\n\n<span class=\"c1\"># The following 3 lines do the same:</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span>                                          <span class=\"c1\"># First way</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span><span class=\"p\">]}</span>                              <span class=\"c1\"># Second way</span>\n<span class=\"n\">flasked</span><span class=\"p\">[</span><span class=\"s2\">\"/\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'kwargs'</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">argument1</span><span class=\"o\">=</span><span class=\"n\">argument1</span><span class=\"p\">,</span> <span class=\"n\">argument2</span><span class=\"o\">=</span><span class=\"n\">argument2</span><span class=\"p\">)}</span>    <span class=\"c1\"># third way</span>\n</pre>\n<p><strong>IMPORTANT:</strong> Note that if the first way is taken, the <cite>argument1</cite> <strong>can\u2019t be a dictionary that contains the keywords \u2018args\u2019 or \u2018kwargs\u2019</strong>.\nOtherwise, it will be used as a source for the <cite>args</cite> and <cite>kwargs</cite> of the initializer. It is always preferred to use the second mixed with the third way.</p>\n<p>This package is completely compatible with flask_restful. For more information, check <a href=\"https://github.com/flask-restful/\" rel=\"nofollow\">Flask_Restful</a>.</p>\n</div>\n<div id=\"basic-use-cases\">\n<h2>BASIC USE CASES</h2>\n<p>Basic usage examples are shown in the <a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples\" rel=\"nofollow\">Usage-examples page from the wiki</a>:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#create-get-post-delete--endpoints\" rel=\"nofollow\">How to create endpoints with different methods</a></li>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-json-from-request\" rel=\"nofollow\">How to read a json from the request</a></li>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-raw-parameter-from-request\" rel=\"nofollow\">How to read a request parameter</a></li>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-value-from-url-path\" rel=\"nofollow\">How to read a request URL value</a></li>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#retrieve-a-binary-file-from-request\" rel=\"nofollow\">How to retrieve a file from the request</a></li>\n<li><a href=\"https://github.com/ipazc/flasked/wiki/Usage-examples#return-a-binary-file-as-response-to-request\" rel=\"nofollow\">How to return a file as response</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"manual-testing\">\n<h2>MANUAL TESTING</h2>\n<p>If you want to test your API REST manually, there\u2019s an explanation on how to do it in this <a href=\"https://github.com/ipazc/flasked/wiki/Manual-testing\" rel=\"nofollow\">wiki page</a></p>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p>It is released under the <em>MIT license</em>.</p>\n</div>\n\n          </div>"}, "last_serial": 3474521, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "20a8d7241cfb4b891be86c7694fe9f4b", "sha256": "afb49dc357463a88151f5837e4e0297db88e8c8f3a30156440dd861392473c46"}, "downloads": -1, "filename": "flasked-0.0.1.tar.gz", "has_sig": false, "md5_digest": "20a8d7241cfb4b891be86c7694fe9f4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4389, "upload_time": "2017-11-15T10:32:29", "upload_time_iso_8601": "2017-11-15T10:32:29.998859Z", "url": "https://files.pythonhosted.org/packages/0b/5b/f9bad76853a90ef64f49d08608ecb969fbb512525b38bcc692377cacd07b/flasked-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "139212d8a753e3ba87c625a989b0a882", "sha256": "1cc825af971089210cfa133fc323ac3856ee6acba85071d9bca76629f1555e37"}, "downloads": -1, "filename": "flasked-0.0.2.tar.gz", "has_sig": false, "md5_digest": "139212d8a753e3ba87c625a989b0a882", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4502, "upload_time": "2017-12-13T17:05:20", "upload_time_iso_8601": "2017-12-13T17:05:20.050751Z", "url": "https://files.pythonhosted.org/packages/0b/36/2b5934c0f9fdf24a007ef3d120fb43fe9314f5407b05571e9cfe16bf0fe8/flasked-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1463d4299b5d77332f2cae31533ca17f", "sha256": "41a4f6d0f00a0aaf4b8777f800e4b253f7f3219db47894bbfdacfcd0d41d532f"}, "downloads": -1, "filename": "flasked-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1463d4299b5d77332f2cae31533ca17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4888, "upload_time": "2017-12-19T15:49:44", "upload_time_iso_8601": "2017-12-19T15:49:44.776548Z", "url": "https://files.pythonhosted.org/packages/4a/c6/12cef5dfc2e48410de981ec7dcf7f5cd1988e7b09162761c100e36e459b4/flasked-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b9a22724f6dcf1191fbe2bd35c90cd44", "sha256": "7a5047ba8b72599f7be0e28432ac55a91d76f7ed1f00c81669297f0d878eebac"}, "downloads": -1, "filename": "flasked-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b9a22724f6dcf1191fbe2bd35c90cd44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4885, "upload_time": "2018-01-09T15:25:50", "upload_time_iso_8601": "2018-01-09T15:25:50.044431Z", "url": "https://files.pythonhosted.org/packages/20/89/f7ef8b25d65c2de2adff5e280c7a5fa32a1fbae41dae510415b6e66a96ec/flasked-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9a22724f6dcf1191fbe2bd35c90cd44", "sha256": "7a5047ba8b72599f7be0e28432ac55a91d76f7ed1f00c81669297f0d878eebac"}, "downloads": -1, "filename": "flasked-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b9a22724f6dcf1191fbe2bd35c90cd44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4885, "upload_time": "2018-01-09T15:25:50", "upload_time_iso_8601": "2018-01-09T15:25:50.044431Z", "url": "https://files.pythonhosted.org/packages/20/89/f7ef8b25d65c2de2adff5e280c7a5fa32a1fbae41dae510415b6e66a96ec/flasked-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:56 2020"}