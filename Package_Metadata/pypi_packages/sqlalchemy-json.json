{"info": {"author": "Elmer de Looff", "author_email": "elmer.delooff@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Database"], "description": "sqlalchemy-json\n###############\n\nSQLAlchemy-JSON provides mutation-tracked JSON types to SQLAlchemy_:\n\n* ``MutableJson`` is a straightforward implementation for keeping track of top-level changes to JSON objects;\n* ``NestedMutableJson`` is an extension of this which tracks changes even when these happen in nested objects or arrays (Python ``dicts`` and ``lists``).\n\n\nExamples\n========\n\nBasic change tracking\n---------------------\n\nThis is essentially the SQLAlchemy `mutable JSON recipe`_. We define a simple author model which list the author's name and a property ``handles`` for various social media handles used:\n\n.. code-block:: python\n\n    class Author(Base):\n        name = Column(Text)\n        handles = Column(MutableJson)\n\nThe example below loads one of the existing authors and retrieves the mapping of social media handles. The error in the twitter handle is then corrected and committed. The change is detected by SQLAlchemy and the appropriate ``UPDATE`` statement is generated.\n\n.. code-block:: python\n\n    >>> author = session.query(Author).first()\n    >>> author.handles\n    {'twitter': '@JohnDoe', 'facebook': 'JohnDoe'}\n    >>> author.handles['twitter'] = '@JDoe'\n    >>> session.commit()\n    >>> author.handles\n    {'twitter': '@JDoe', 'facebook': 'JohnDoe'}\n\n\nNested change tracking\n----------------------\n\nThe example below defines a simple model for articles. One of the properties on this model is a mutable JSON structure called ``references`` which includes a count of links that the article contains, grouped by domain:\n\n.. code-block:: python\n\n    class Article(Base):\n        author = Column(ForeignKey('author.name'))\n        content = Column(Text)\n        references = Column(NestedMutableJson)\n\nWith this in place, an existing article is loaded and its current references inspected. Following that, the count for one of these is increased by ten, and the session is committed:\n\n.. code-block:: python\n\n    >>> article = session.query(Article).first()\n    >>> article.references\n    {'github.com': {'edelooff/sqlalchemy-json': 4, 'zzzeek/sqlalchemy': 7}}\n    >>> article.references['github.com']['edelooff/sqlalchemy-json'] += 10\n    >>> session.commit()\n    >>> article.references\n    {'github.com': {'edelooff/sqlalchemy-json': 14, 'zzzeek/sqlalchemy': 7}}\n\nHad the articles model used ``MutableJson`` like in the previous example this code would have failed. This is because the top level dictionary is never altered directly. The *nested* mutable ensures the change happening at the lower level *bubbles up* to the outermost container.\n\n\nNon-native JSON / other serialization types\n===========================================\n\nBy default, sqlalchemy-json uses the JSON column type provided by SQLAlchemy (specifically ``sqlalchemy.types.JSON``.)\nIf you wish to use another type (e.g. PostgreSQL's ``JSONB``), your database does not natively support JSON (e.g. SQLite), or you wish to serialize to a format other than JSON, you'll need to provide a different backing type.\n\nThis is done by using the utility function ``mutable_json_type``. This type creator function accepts two parameters:\n\n* ``dbtype`` controls the database type used. This can be an existing type provided by SQLAlchemy or SQLALchemy-utils_, or an `augmented type`_ to provide serialization to any other format;\n* ``nested`` controls whether the created type is made mutable based on ``MutableDict`` or ``NestedMutable`` (defaults to ``False`` for ``MutableDict``).\n\n\nDependencies\n============\n\n* ``six`` to support both Python 2 and 3.\n\n\nChangelog\n=========\n\n0.4.0\n-----\n\n* Adds a type creation function to allow for custom or alternate serialization types. This allows for a way around the regression in SQLite compatibility introduced by v0.3.0.\n\n0.3.0\n-----\n\n* Switches JSON base type to ``sqlalchemy.types.JSON`` from deprecated JSON type provided by SQLAlchemy-utils.\n\n0.2.2\n-----\n\n* Fixes a bug where assigning ``None`` to the column resulted in an error (https://github.com/edelooff/sqlalchemy-json/issues/10)\n\n\n0.2.1\n-----\n\n* Fixes a typo in the README found after uploading 0.2.0 to PyPI.\n\n\n0.2.0 (unreleased)\n------------------\n\n* Now uses ``JSONType`` provided by SQLAlchemy-utils_ to handle backend storage;\n* **Backwards incompatible**: Changed class name ``JsonObject`` to ``MutableJson`` and ``NestedJsonObject`` to ``NestedMutableJson``\n* Outermost container for ``NestedMutableJson`` can now be an ``array`` (Python ``list``)\n\n\n0.1.0 (unreleased)\n------------------\n\nInitial version. This initially carried a 1.0.0 version number but has never been released on PyPI.\n\n\n.. _augmented type: https://docs.sqlalchemy.org/en/13/core/custom_types.html#augmenting-existing-types\n.. _mutable json recipe: http://docs.sqlalchemy.org/en/latest/core/custom_types.html#marshal-json-strings\n.. _sqlalchemy: https://www.sqlalchemy.org/\n.. _sqlalchemy-utils: https://sqlalchemy-utils.readthedocs.io/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/edelooff/sqlalchemy-json", "keywords": "sqlalchemy json mutable", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "sqlalchemy-json", "package_url": "https://pypi.org/project/sqlalchemy-json/", "platform": "", "project_url": "https://pypi.org/project/sqlalchemy-json/", "project_urls": {"Homepage": "https://github.com/edelooff/sqlalchemy-json"}, "release_url": "https://pypi.org/project/sqlalchemy-json/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "JSON type with nested change tracking for SQLAlchemy", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>SQLAlchemy-JSON provides mutation-tracked JSON types to <a href=\"https://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a>:</p>\n<ul>\n<li><tt>MutableJson</tt> is a straightforward implementation for keeping track of top-level changes to JSON objects;</li>\n<li><tt>NestedMutableJson</tt> is an extension of this which tracks changes even when these happen in nested objects or arrays (Python <tt>dicts</tt> and <tt>lists</tt>).</li>\n</ul>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"basic-change-tracking\">\n<h3>Basic change tracking</h3>\n<p>This is essentially the SQLAlchemy <a href=\"http://docs.sqlalchemy.org/en/latest/core/custom_types.html#marshal-json-strings\" rel=\"nofollow\">mutable JSON recipe</a>. We define a simple author model which list the author\u2019s name and a property <tt>handles</tt> for various social media handles used:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>\n    <span class=\"n\">handles</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">MutableJson</span><span class=\"p\">)</span>\n</pre>\n<p>The example below loads one of the existing authors and retrieves the mapping of social media handles. The error in the twitter handle is then corrected and committed. The change is detected by SQLAlchemy and the appropriate <tt>UPDATE</tt> statement is generated.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">handles</span>\n<span class=\"p\">{</span><span class=\"s1\">'twitter'</span><span class=\"p\">:</span> <span class=\"s1\">'@JohnDoe'</span><span class=\"p\">,</span> <span class=\"s1\">'facebook'</span><span class=\"p\">:</span> <span class=\"s1\">'JohnDoe'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">handles</span><span class=\"p\">[</span><span class=\"s1\">'twitter'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'@JDoe'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">handles</span>\n<span class=\"p\">{</span><span class=\"s1\">'twitter'</span><span class=\"p\">:</span> <span class=\"s1\">'@JDoe'</span><span class=\"p\">,</span> <span class=\"s1\">'facebook'</span><span class=\"p\">:</span> <span class=\"s1\">'JohnDoe'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"nested-change-tracking\">\n<h3>Nested change tracking</h3>\n<p>The example below defines a simple model for articles. One of the properties on this model is a mutable JSON structure called <tt>references</tt> which includes a count of links that the article contains, grouped by domain:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'author.name'</span><span class=\"p\">))</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>\n    <span class=\"n\">references</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">NestedMutableJson</span><span class=\"p\">)</span>\n</pre>\n<p>With this in place, an existing article is loaded and its current references inspected. Following that, the count for one of these is increased by ten, and the session is committed:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">references</span>\n<span class=\"p\">{</span><span class=\"s1\">'github.com'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'edelooff/sqlalchemy-json'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'zzzeek/sqlalchemy'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">references</span><span class=\"p\">[</span><span class=\"s1\">'github.com'</span><span class=\"p\">][</span><span class=\"s1\">'edelooff/sqlalchemy-json'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">references</span>\n<span class=\"p\">{</span><span class=\"s1\">'github.com'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'edelooff/sqlalchemy-json'</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"s1\">'zzzeek/sqlalchemy'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">}}</span>\n</pre>\n<p>Had the articles model used <tt>MutableJson</tt> like in the previous example this code would have failed. This is because the top level dictionary is never altered directly. The <em>nested</em> mutable ensures the change happening at the lower level <em>bubbles up</em> to the outermost container.</p>\n</div>\n</div>\n<div id=\"non-native-json-other-serialization-types\">\n<h2>Non-native JSON / other serialization types</h2>\n<p>By default, sqlalchemy-json uses the JSON column type provided by SQLAlchemy (specifically <tt>sqlalchemy.types.JSON</tt>.)\nIf you wish to use another type (e.g. PostgreSQL\u2019s <tt>JSONB</tt>), your database does not natively support JSON (e.g. SQLite), or you wish to serialize to a format other than JSON, you\u2019ll need to provide a different backing type.</p>\n<p>This is done by using the utility function <tt>mutable_json_type</tt>. This type creator function accepts two parameters:</p>\n<ul>\n<li><tt>dbtype</tt> controls the database type used. This can be an existing type provided by SQLAlchemy or <a href=\"https://sqlalchemy-utils.readthedocs.io/\" rel=\"nofollow\">SQLALchemy-utils</a>, or an <a href=\"https://docs.sqlalchemy.org/en/13/core/custom_types.html#augmenting-existing-types\" rel=\"nofollow\">augmented type</a> to provide serialization to any other format;</li>\n<li><tt>nested</tt> controls whether the created type is made mutable based on <tt>MutableDict</tt> or <tt>NestedMutable</tt> (defaults to <tt>False</tt> for <tt>MutableDict</tt>).</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><tt>six</tt> to support both Python 2 and 3.</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.4.0</h3>\n<ul>\n<li>Adds a type creation function to allow for custom or alternate serialization types. This allows for a way around the regression in SQLite compatibility introduced by v0.3.0.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.3.0</h3>\n<ul>\n<li>Switches JSON base type to <tt>sqlalchemy.types.JSON</tt> from deprecated JSON type provided by SQLAlchemy-utils.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.2</h3>\n<ul>\n<li>Fixes a bug where assigning <tt>None</tt> to the column resulted in an error (<a href=\"https://github.com/edelooff/sqlalchemy-json/issues/10\" rel=\"nofollow\">https://github.com/edelooff/sqlalchemy-json/issues/10</a>)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.1</h3>\n<ul>\n<li>Fixes a typo in the README found after uploading 0.2.0 to PyPI.</li>\n</ul>\n</div>\n<div id=\"unreleased\">\n<h3>0.2.0 (unreleased)</h3>\n<ul>\n<li>Now uses <tt>JSONType</tt> provided by <a href=\"https://sqlalchemy-utils.readthedocs.io/\" rel=\"nofollow\">SQLAlchemy-utils</a> to handle backend storage;</li>\n<li><strong>Backwards incompatible</strong>: Changed class name <tt>JsonObject</tt> to <tt>MutableJson</tt> and <tt>NestedJsonObject</tt> to <tt>NestedMutableJson</tt></li>\n<li>Outermost container for <tt>NestedMutableJson</tt> can now be an <tt>array</tt> (Python <tt>list</tt>)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.0 (unreleased)</h3>\n<p>Initial version. This initially carried a 1.0.0 version number but has never been released on PyPI.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6763747, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "2f9ad4eb0ab7eb9871fb58b5f63f8729", "sha256": "fb44e5c22df404886c6baa02334b7410519987a1f16b7919ff661d5fee4d65b3"}, "downloads": -1, "filename": "sqlalchemy_json-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f9ad4eb0ab7eb9871fb58b5f63f8729", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7592, "upload_time": "2017-09-11T21:54:32", "upload_time_iso_8601": "2017-09-11T21:54:32.044857Z", "url": "https://files.pythonhosted.org/packages/bf/db/fd49ab75897b5c4420d9066d59cc7cf19d54189bbc3da796bcf6009bfa6f/sqlalchemy_json-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6a164b38c14e892918291b4dc5be594", "sha256": "8a6e193cdbf7b486aa1388d3b7e93afd6f443db494414669ff7635d5918a526f"}, "downloads": -1, "filename": "sqlalchemy-json-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a6a164b38c14e892918291b4dc5be594", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4905, "upload_time": "2017-09-11T21:54:35", "upload_time_iso_8601": "2017-09-11T21:54:35.649966Z", "url": "https://files.pythonhosted.org/packages/71/6a/23f48b15de5782db96a7c7d1c0c28c2d14decd7ae65ff93b81a24a67ad4e/sqlalchemy-json-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "267c6b9ef0f1e0143f5b40f385d837bf", "sha256": "460024505539a7429ed3a5925a46780f7ced1aa2c65d737f7bde01994cdf3d9f"}, "downloads": -1, "filename": "sqlalchemy-json-0.2.2.tar.gz", "has_sig": false, "md5_digest": "267c6b9ef0f1e0143f5b40f385d837bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4959, "upload_time": "2018-10-10T13:13:55", "upload_time_iso_8601": "2018-10-10T13:13:55.450953Z", "url": "https://files.pythonhosted.org/packages/c7/f8/b30cc697e8e046965b15d8e10e96853ec7d9c35639b60870f51da710dc12/sqlalchemy-json-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bc7a59e2505ac4e9985467e862b4b6e2", "sha256": "d17952e771eecd9023c0f683d2a6aaa27ce1a6dbf57b0fe2bf4d5aef4c5dad1c"}, "downloads": -1, "filename": "sqlalchemy-json-0.2.3.tar.gz", "has_sig": false, "md5_digest": "bc7a59e2505ac4e9985467e862b4b6e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4959, "upload_time": "2018-12-10T10:22:56", "upload_time_iso_8601": "2018-12-10T10:22:56.836511Z", "url": "https://files.pythonhosted.org/packages/d4/b8/0f3a7ee9c88cc45239c10a17a01503131846f0202bc5283d04ccd9e97c07/sqlalchemy-json-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ff7c983d48df042923dac49814d4ad52", "sha256": "a2931f4a1d0e0188e928285561ec723bcba8f8fe9df9b03d819f269b2e75bab9"}, "downloads": -1, "filename": "sqlalchemy-json-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ff7c983d48df042923dac49814d4ad52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5017, "upload_time": "2020-03-04T14:07:18", "upload_time_iso_8601": "2020-03-04T14:07:18.853380Z", "url": "https://files.pythonhosted.org/packages/74/a0/40df0fb34a5883eadf8c2f20d70e38c6363744fd3519f84dd240eed50ac1/sqlalchemy-json-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3acfbb58264feed67b9a3f0aef029ae2", "sha256": "0f52f24301aa3b5ea240b622facc489eff2e7bfddde931ba988bfabc306b1778"}, "downloads": -1, "filename": "sqlalchemy_json-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3acfbb58264feed67b9a3f0aef029ae2", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 6732, "upload_time": "2020-03-06T17:54:38", "upload_time_iso_8601": "2020-03-06T17:54:38.139049Z", "url": "https://files.pythonhosted.org/packages/c7/17/f8e5011916bd767c57fdc164b7e9972060452ed540994fdec46b11e7ff5b/sqlalchemy_json-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1a5c4cbde67dff7bcdd8efbc415c118", "sha256": "d8e72cac50724a17cc137c98bec5cb5990e9f1e8fc3eb30dd225fb47c087ea27"}, "downloads": -1, "filename": "sqlalchemy-json-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a1a5c4cbde67dff7bcdd8efbc415c118", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5583, "upload_time": "2020-03-06T17:54:36", "upload_time_iso_8601": "2020-03-06T17:54:36.425941Z", "url": "https://files.pythonhosted.org/packages/f0/8b/a8efb371baa9367751319ce60bdd258fbf292306d11c389182544ae6844a/sqlalchemy-json-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3acfbb58264feed67b9a3f0aef029ae2", "sha256": "0f52f24301aa3b5ea240b622facc489eff2e7bfddde931ba988bfabc306b1778"}, "downloads": -1, "filename": "sqlalchemy_json-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3acfbb58264feed67b9a3f0aef029ae2", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 6732, "upload_time": "2020-03-06T17:54:38", "upload_time_iso_8601": "2020-03-06T17:54:38.139049Z", "url": "https://files.pythonhosted.org/packages/c7/17/f8e5011916bd767c57fdc164b7e9972060452ed540994fdec46b11e7ff5b/sqlalchemy_json-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1a5c4cbde67dff7bcdd8efbc415c118", "sha256": "d8e72cac50724a17cc137c98bec5cb5990e9f1e8fc3eb30dd225fb47c087ea27"}, "downloads": -1, "filename": "sqlalchemy-json-0.4.0.tar.gz", "has_sig": false, "md5_digest": "a1a5c4cbde67dff7bcdd8efbc415c118", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5583, "upload_time": "2020-03-06T17:54:36", "upload_time_iso_8601": "2020-03-06T17:54:36.425941Z", "url": "https://files.pythonhosted.org/packages/f0/8b/a8efb371baa9367751319ce60bdd258fbf292306d11c389182544ae6844a/sqlalchemy-json-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:56 2020"}