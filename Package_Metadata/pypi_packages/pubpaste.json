{"info": {"author": "The Anarcat", "author_email": "anarcat@debian.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: X11 Applications", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Topic :: Communications :: File Sharing"], "description": "pubpaste - publish files and clipboard online easily\n====================================================\n\nThis tool makes it easy to publish files, clipboards, screenshots,\nand photo galleries online with a single command. It's somewhat messy\nbut it does its job well.\n\n`pubpaste` is not for novice users: it assumes you have access to an\nSSH server and know how to configure a YAML file. It has been written\nby and for its author in a fit of egoistical mania (unfortunately\ntypical for hackers), apologies normal humans out there reading this.\n\n- [Tutorial](#tutorial)\n- [How-to](#how-to)\n    - [Configuration](#configuration)\n    - [Screenshots](#screenshots)\n    - [Image galleries](#image-galleries)\n    - [Clipboard support](#clipboard-support)\n    - [Secret tokens](#secret-tokens)\n    - [History](#history)\n    - [Expiry](#expiry)\n    - [Shortcuts](#shortcuts)\n    - [Installation](#installation)\n- [Credits](#credits)\n    - [Changes from `publish`](#changes-from-publish)\n- [Contributing](#contributing)\n\nTutorial\n========\n\nTo publish a file:\n\n    pubpaste foo.jpg\n\nThe file is then uploaded, with [rsync][], in a directory with a\nsecret name, which will generate a URL like this:\n\n    https://example.com/2020-04-20-oMz_C_6Njja_3VbW-f17LFiTAgNsnp22fqTwjQOgmF4/foo.jpg\n\n[rsync]: https://rsync.samba.org/\n\nThe published URL is available in the clipboard, <kbd>control-v</kbd>\nin another window to share the results. That URL should be safe from\nguessing as long as the server is properly configured.\n\nIf a filename is not provided, text is read from standard input and\nuploaded as a `stdin.txt` file. That name can be changed with the\n`--stdin-name` flag.\n\nYou can also upload the current *selection* with:\n\n    pubpaste --xselection\n\nYou **MUST** configure `pubpaste` before the above works, however. See\n[Configuration](#configuration) below.\n\n`pubpaste` supports many more ways of sharing content, see the\ndetailed howto below for more information on screenshots, photo\ngalleries and more...\n\nHow-to\n======\n\nConfiguration\n-------------\n\n`pubpaste` requires manual configuration before it\nworks. Specifically, the `output` and `url_prefix` should be set in\nthe configuration. For example, this will tell `pubpaste` to rsync\nfiles to `shell.example.com`, in the `~/public_html` directory, and\nthat this directory is exposed as <https://example.com/~user>:\n\n    output: \"shell.example.com:public_html/\"\n    url_prefix: \"https://example.com/~user\"\n\nThis configuration must be stored in `~/.config/pubpaste.yml`. Other\nconfiguration file paths can be provided with the `--config`\ncommandline argument or `pubpaste.yml` in the `$XDG_CONFIG_HOME`\ndirectory (which defaults to `~/.config`).\n\nAny parameter (like `follow_symlinks`) can be specified in the\nconfiguration file as well. The rule is that dashes (`-`) MUST be\nconverted to underscores (`_`).\n\nNote that the `output` directory should not have directory listings\nenabled, see the [Secret tokens](#secret-tokens) section for more\ninformation.\n\nSome settings are not visible in the usage because they are better\nsuited to be used in the configuration file. Here's a sample\nconfiguration file with all the settings not mentioned in the usage:\n\n    output: \"shell.example.com:public_html/\"\n    url_prefix: \"https://example.com/~user\"\n    base_dir: /home/user/public_html/\n    save_screenshots: ~/snaps/\n\nThey can still be used on the commandline, of course.\n\nScreenshots\n-----------\n\nTo publish a screenshot with [maim][], use:\n\n    pubpaste --screenshot\n\n[maim]: https://github.com/naelstrof/maim\n\nThis will:\n\n 1. start a terminal to show the maim timer\n 2. start maim to select a window, it will wait 3 seconds before\n    taking the screenshot\n 3. preview the screenshot using your favorite image view (with\n    [xdg-open(1)][])\n 4. ask for confirmation before uploading (with [xmessage(1)][])\n 5. then upload the file\n\nScreenshots therefore require a bit more configuration than other\nmechanisms. First install the dependencies:\n\n    apt install maim\n\nInstall *some* image viewer, for example this is the default image\nviewer that comes with GNOME:\n\n    apt install eog\n\n`xdg-open(1)` and `xmessage(1)` are very likely already installed on\nyour computer but if they aren't:\n\n    apt install x11-utils xdg-utils\n\n[xmessage(1)]: http://manpages.debian.org/xmessage\n[xdg-open(1)]: https://manpages.debian.org/xdg-open\n\nYou might not like the default `xdg-open(1)` picks when opening an\nimage. To change that, use:\n\n    xdg-mime default application mimetype(s)\n\nFor example, this will pick the [Eye Of GNOME][] image viewer:\n\n    xdg-mime default eog.desktop image/png\n\n[Eye Of GNOME]: https://wiki.gnome.org/Apps/EyeOfGnome/\n\nTo see which application is currently in use, see:\n\n    xdg-mime query default image/png\n\nBy default, screenshots are not kept locally. But they can be retained\nby setting the `save_screenshots` configuration to a directory, for\nexample this will keep all screenshots in `$HOME/snaps`:\n\n    save_screenshots: ~/snaps/\n\nImage galleries\n---------------\n\nBuild an image gallery with [Sigal][]:\n\n    pubpaste --sigal *.JPG\n\nThis will generate an image gallery in a temporary directory and\nupload it to the server as a whole. The gallery configuration is\ncurrently hardcoded, but could eventually be added to the\nconfiguration file.\n\n[Sigal]: http://sigal.saimon.org/\n\nClipboard support\n-----------------\n\nWhen doing any upload, the remote URL will be copied to the X\nclipboard that you paste with <kbd>control-v</kbd>, or\n<kbd>control-shift-v</kbd> in a terminal. That is different from the X\n*selection*, which you paste with the <kbd>middle mouse button</kbd>.\n\nNote that `pubpaste` *reads* from the X selection, when you use:\n\n    pubpaste --xselection\n\nThe idea behind this assymetry is that we do not want the URL to\noverride the current selection. By copying the URL in to the\nclipboard instead of the selection, we keep the current selection\nactive. The clipboard is also more \"durable\" as it doesn't get change\nwhenever you select some text.\n\nSecret tokens\n-------------\n\n`pubpaste` publishes files under a specified root directory but with a\nunique token made of the current date (`YYYY-MM-DD`) and a random,\npresumably unguessable, string. That token can be overridden with the\n`--token` (`-T`) flag. For example, if you do not worry about\nconfidentiality and actually *want* a meaningful name, you can upload\na file publicly with:\n\n    pubpaste --token my-new-bike bike.jpg\n\nOtherwise a properly secure token is generated. Note that directory\nlistings *must* be disabled for the secrecy to work: if you point\n`pubpaste` at a directory with directory listing enabled, all the\nsecrets will be *public* and the entire security of the system will\nfail.\n\nThis can be fixed simply by adding an empty `index.html` file into the\n`output` directory (if the webserver is configured to serve those) or\nby disabling directory listing (`Options -Indexes` in Apache, for\nexample).\n\nHistory\n-------\n\n`pubpaste` keeps an history of the things it has uploaded, in\n`~/.publish.history`. This allows you to cancel the last upload, for\nexample:\n\n    pubpaste --undo\n\n... or arbitrary uploads:\n\n    pubpaste -T TOKEN --undo\n\nSimilarly, you can republish over the previous upload with:\n\n    pubpaste --republish ...\n\nHistory can be displayed with the `show-history` command. The last\ntoken used is also accessible with the `last-token` command.\n\nExpiry\n------\n\nBy default, uploads never expire. You can add a \"TTL\" (Time To Live)\nfile with the `--ttl` argument which marks (in days) the time a paste\nshould be kept.\n\nOld entries can be purged by deploying `pubpaste` on the server side\nand running:\n\n    pubpaste --purge --base-dir=/home/user/public_html\n\n... where `/home/user/public_html` is the path provided in `output` on\nthe clients. That configuration will usually be store in the config\nfile, as such:\n\n    base_dir: \"/home/user/public_html\"\n\nShortcuts\n---------\n\nThe usage has all the details but if you use `pubpaste` from the\ncommandline, you might like to use shortcuts for the commands. For\nexample, a screenshot is `pubpaste -S`. See `--help` for details.\n\nInstallation\n============\n\nThis package is available on PyPI. It can be installed with `pip`:\n\n    pip install pubpaste\n\nIts requirements are minimal so you shouldn't need a [virtual\nenvironment][].\n\n[virtual environment]: https://docs.python.org/3/library/venv.html\n\n`pubpaste` can also be ran directly from the source directory:\n\n    ./pubpaste\n\nor symlinked in your `$PATH`:\n\n    ln -s ./pubpaste /usr/local/bin/pubpaste\n\nKnown issues and limitations\n============================\n\nHas no unit tests.\n\nThe photo gallery and screenshot code is messy.\n\nWas written over a weekend and might be buggy.\n\nRestricted to elite hackers that have SSH or rsync access and their\nown web server. Could br improved by supporting things like S3,\npastebins or other file sharing systems.\n\nIn particular, misconfiguration of the webserver can easily be\ncatastrophic: if `Indexes` is enabled in the webserver *and* the\nparent directory doesn't have an `index.html` to protect from leaks,\nthe secret tokens will be revealed and the secrecy of the system\ncompromised.\n\nSimilarly, secret tokens can easily leak if any peer that received it\nshare it by mistake or maliciously. Access revocation is impossible\nwithout renaming the token, which must be done by hand.\n\nCredits\n=======\n\nThis project was inspired by the `publish` program originally written\nby Florian Reitmeir and Peter Palfrader. It was re-written in Python\nto make it easier to document, extend, and maintain.\n\nIt was renamed because we did not want to take over the `publish`\nnamespace out of respect for the existing one. It's also a little too\ngeneric for a project name.\n\n`pubpaste` seemed like a nice alternative and did't seem in use\naccording to search engines (checked DuckDuckGo, Google, GitHub, and\nGitLab).\n\n`pub` refers to the inspiration for this project, the `publish` shell\nscript that influence the commandline design and implementation.\n\n`paste` refers to the clipboard support. therefore *pubpaste* means\n*publish this paste*, but it can of course do more than just publish\nthe clipboard.\n\n`pub` is also a reference to the real-world place that I dearly miss\nsince the start of the global pandemic that has everyone isolated and\nbars closed. *pub paste* therefore obliquely refers to the stickiness\nand smell of old pubs and bars, that strange smell of old yeast and\nalcohol mixed with bleach or strong cleaning product that lingers\nuntil you walk into a sound check the next day.\n\nThis is a message of hope: this will not go on forever and the\nmessiness of humanity will return humbled yet improved.\n\nChanges from `publish`\n----------------------\n\nWhile `pubpaste` generally tries to be backwards-compatible with\n`publish` in terms of commandline interface, it has the following\nchanges:\n\n 1. usage is clearer. different actions are \"commands\" that are\n    clearly outlined in the usage and correctly \"conflict\" with each\n    other\n\n 2. long options: `publish` only has one-letter options, `pubpaste`\n    supports longer form options as well\n\n 3. `--undo` defaults to the last token, ie. `--republish` is implicit\n\n 4. `--undo` removes the token from history, allowing the user to\n    \"pop\" backwards in the history, canceling multiple entries\n\n 5. `--purge` is builtin instead of being a separate script\n\n 6. the `-L | --follow-symlinks` option is new\n\n 7. photo gallery: the `--sigal` option is new\n\nThe following are general behavior changes:\n\n 1. builtin graphical notifications: while `publish` can be modified\n    (through hooks) to notify the user on upload, `pubpaste` does\n    this outside the box.\n\n 2. We use `xclip -selection clipboard` by default instead of\n    `xclip`, because the latter conflicts with the `-x` option.\n\n 3. config file path and format: `publish`'s configuration is a shell\n    script in `~/.publish.cfg`, `pubpaste`'s configuration is a YAML\n    file in `~/.config/pubpaste.yml`. this breaks backwards\n    compatibility.\n\n 4. extensibility: `pubpaste` is less extensible than `publish`. the\n    latter has \"hooks\", shell functions that run before and after\n    various points in the program, and that the configuration can\n    totally override. this is very powerful, but also not well\n    documented and possibly dangerous. we took a more traditional\n    approach in `pubpaste`: modifications should be done in the source\n    code and proposed as patches\n\nThe following functionality is missing:\n\n  * `-q`: encodes the URL in a qrcode and uploads *that*\n  * maximum history size\n\nThose options were discarded and will not be implemented:\n\n  * `-8`: webserver should be properly configured\n  * `-r` obscure rsync function i never use\n  * `is_text` detection: we will just assume stdin is text\n\nContributing\n============\n\nSee the [contribution guide](CONTRIBUTING.rst) for more information. In\nshort: this is a free software project and you are welcome to join us\nin improving it, both by fixing things, reporting issues or\ndocumentation.\n\nThis project adheres to the [Covenant code of conduct](CODE_OF_CONDUCT.rst).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/anarcat/pubpaste/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pubpaste", "package_url": "https://pypi.org/project/pubpaste/", "platform": "", "project_url": "https://pypi.org/project/pubpaste/", "project_urls": {"Bug Reports": "https://gitlab.com/anarcat/pubpaste/issues", "Homepage": "https://gitlab.com/anarcat/pubpaste/", "Say Thanks!": "http://saythanks.io/to/anarcat"}, "release_url": "https://pypi.org/project/pubpaste/0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pubpaste - publish files and clipboard online easily</h1>\n<p>This tool makes it easy to publish files, clipboards, screenshots,\nand photo galleries online with a single command. It's somewhat messy\nbut it does its job well.</p>\n<p><code>pubpaste</code> is not for novice users: it assumes you have access to an\nSSH server and know how to configure a YAML file. It has been written\nby and for its author in a fit of egoistical mania (unfortunately\ntypical for hackers), apologies normal humans out there reading this.</p>\n<ul>\n<li><a href=\"#tutorial\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"#how-to\" rel=\"nofollow\">How-to</a>\n<ul>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#screenshots\" rel=\"nofollow\">Screenshots</a></li>\n<li><a href=\"#image-galleries\" rel=\"nofollow\">Image galleries</a></li>\n<li><a href=\"#clipboard-support\" rel=\"nofollow\">Clipboard support</a></li>\n<li><a href=\"#secret-tokens\" rel=\"nofollow\">Secret tokens</a></li>\n<li><a href=\"#history\" rel=\"nofollow\">History</a></li>\n<li><a href=\"#expiry\" rel=\"nofollow\">Expiry</a></li>\n<li><a href=\"#shortcuts\" rel=\"nofollow\">Shortcuts</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n</ul>\n</li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a>\n<ul>\n<li><a href=\"#changes-from-publish\" rel=\"nofollow\">Changes from <code>publish</code></a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n</ul>\n<h1>Tutorial</h1>\n<p>To publish a file:</p>\n<pre><code>pubpaste foo.jpg\n</code></pre>\n<p>The file is then uploaded, with <a href=\"https://rsync.samba.org/\" rel=\"nofollow\">rsync</a>, in a directory with a\nsecret name, which will generate a URL like this:</p>\n<pre><code>https://example.com/2020-04-20-oMz_C_6Njja_3VbW-f17LFiTAgNsnp22fqTwjQOgmF4/foo.jpg\n</code></pre>\n<p>The published URL is available in the clipboard, <kbd>control-v</kbd>\nin another window to share the results. That URL should be safe from\nguessing as long as the server is properly configured.</p>\n<p>If a filename is not provided, text is read from standard input and\nuploaded as a <code>stdin.txt</code> file. That name can be changed with the\n<code>--stdin-name</code> flag.</p>\n<p>You can also upload the current <em>selection</em> with:</p>\n<pre><code>pubpaste --xselection\n</code></pre>\n<p>You <strong>MUST</strong> configure <code>pubpaste</code> before the above works, however. See\n<a href=\"#configuration\" rel=\"nofollow\">Configuration</a> below.</p>\n<p><code>pubpaste</code> supports many more ways of sharing content, see the\ndetailed howto below for more information on screenshots, photo\ngalleries and more...</p>\n<h1>How-to</h1>\n<h2>Configuration</h2>\n<p><code>pubpaste</code> requires manual configuration before it\nworks. Specifically, the <code>output</code> and <code>url_prefix</code> should be set in\nthe configuration. For example, this will tell <code>pubpaste</code> to rsync\nfiles to <code>shell.example.com</code>, in the <code>~/public_html</code> directory, and\nthat this directory is exposed as <a href=\"https://example.com/%7Euser\" rel=\"nofollow\">https://example.com/~user</a>:</p>\n<pre><code>output: \"shell.example.com:public_html/\"\nurl_prefix: \"https://example.com/~user\"\n</code></pre>\n<p>This configuration must be stored in <code>~/.config/pubpaste.yml</code>. Other\nconfiguration file paths can be provided with the <code>--config</code>\ncommandline argument or <code>pubpaste.yml</code> in the <code>$XDG_CONFIG_HOME</code>\ndirectory (which defaults to <code>~/.config</code>).</p>\n<p>Any parameter (like <code>follow_symlinks</code>) can be specified in the\nconfiguration file as well. The rule is that dashes (<code>-</code>) MUST be\nconverted to underscores (<code>_</code>).</p>\n<p>Note that the <code>output</code> directory should not have directory listings\nenabled, see the <a href=\"#secret-tokens\" rel=\"nofollow\">Secret tokens</a> section for more\ninformation.</p>\n<p>Some settings are not visible in the usage because they are better\nsuited to be used in the configuration file. Here's a sample\nconfiguration file with all the settings not mentioned in the usage:</p>\n<pre><code>output: \"shell.example.com:public_html/\"\nurl_prefix: \"https://example.com/~user\"\nbase_dir: /home/user/public_html/\nsave_screenshots: ~/snaps/\n</code></pre>\n<p>They can still be used on the commandline, of course.</p>\n<h2>Screenshots</h2>\n<p>To publish a screenshot with <a href=\"https://github.com/naelstrof/maim\" rel=\"nofollow\">maim</a>, use:</p>\n<pre><code>pubpaste --screenshot\n</code></pre>\n<p>This will:</p>\n<ol>\n<li>start a terminal to show the maim timer</li>\n<li>start maim to select a window, it will wait 3 seconds before\ntaking the screenshot</li>\n<li>preview the screenshot using your favorite image view (with\n<a href=\"https://manpages.debian.org/xdg-open\" rel=\"nofollow\">xdg-open(1)</a>)</li>\n<li>ask for confirmation before uploading (with <a href=\"http://manpages.debian.org/xmessage\" rel=\"nofollow\">xmessage(1)</a>)</li>\n<li>then upload the file</li>\n</ol>\n<p>Screenshots therefore require a bit more configuration than other\nmechanisms. First install the dependencies:</p>\n<pre><code>apt install maim\n</code></pre>\n<p>Install <em>some</em> image viewer, for example this is the default image\nviewer that comes with GNOME:</p>\n<pre><code>apt install eog\n</code></pre>\n<p><code>xdg-open(1)</code> and <code>xmessage(1)</code> are very likely already installed on\nyour computer but if they aren't:</p>\n<pre><code>apt install x11-utils xdg-utils\n</code></pre>\n<p>You might not like the default <code>xdg-open(1)</code> picks when opening an\nimage. To change that, use:</p>\n<pre><code>xdg-mime default application mimetype(s)\n</code></pre>\n<p>For example, this will pick the <a href=\"https://wiki.gnome.org/Apps/EyeOfGnome/\" rel=\"nofollow\">Eye Of GNOME</a> image viewer:</p>\n<pre><code>xdg-mime default eog.desktop image/png\n</code></pre>\n<p>To see which application is currently in use, see:</p>\n<pre><code>xdg-mime query default image/png\n</code></pre>\n<p>By default, screenshots are not kept locally. But they can be retained\nby setting the <code>save_screenshots</code> configuration to a directory, for\nexample this will keep all screenshots in <code>$HOME/snaps</code>:</p>\n<pre><code>save_screenshots: ~/snaps/\n</code></pre>\n<h2>Image galleries</h2>\n<p>Build an image gallery with <a href=\"http://sigal.saimon.org/\" rel=\"nofollow\">Sigal</a>:</p>\n<pre><code>pubpaste --sigal *.JPG\n</code></pre>\n<p>This will generate an image gallery in a temporary directory and\nupload it to the server as a whole. The gallery configuration is\ncurrently hardcoded, but could eventually be added to the\nconfiguration file.</p>\n<h2>Clipboard support</h2>\n<p>When doing any upload, the remote URL will be copied to the X\nclipboard that you paste with <kbd>control-v</kbd>, or\n<kbd>control-shift-v</kbd> in a terminal. That is different from the X\n<em>selection</em>, which you paste with the <kbd>middle mouse button</kbd>.</p>\n<p>Note that <code>pubpaste</code> <em>reads</em> from the X selection, when you use:</p>\n<pre><code>pubpaste --xselection\n</code></pre>\n<p>The idea behind this assymetry is that we do not want the URL to\noverride the current selection. By copying the URL in to the\nclipboard instead of the selection, we keep the current selection\nactive. The clipboard is also more \"durable\" as it doesn't get change\nwhenever you select some text.</p>\n<h2>Secret tokens</h2>\n<p><code>pubpaste</code> publishes files under a specified root directory but with a\nunique token made of the current date (<code>YYYY-MM-DD</code>) and a random,\npresumably unguessable, string. That token can be overridden with the\n<code>--token</code> (<code>-T</code>) flag. For example, if you do not worry about\nconfidentiality and actually <em>want</em> a meaningful name, you can upload\na file publicly with:</p>\n<pre><code>pubpaste --token my-new-bike bike.jpg\n</code></pre>\n<p>Otherwise a properly secure token is generated. Note that directory\nlistings <em>must</em> be disabled for the secrecy to work: if you point\n<code>pubpaste</code> at a directory with directory listing enabled, all the\nsecrets will be <em>public</em> and the entire security of the system will\nfail.</p>\n<p>This can be fixed simply by adding an empty <code>index.html</code> file into the\n<code>output</code> directory (if the webserver is configured to serve those) or\nby disabling directory listing (<code>Options -Indexes</code> in Apache, for\nexample).</p>\n<h2>History</h2>\n<p><code>pubpaste</code> keeps an history of the things it has uploaded, in\n<code>~/.publish.history</code>. This allows you to cancel the last upload, for\nexample:</p>\n<pre><code>pubpaste --undo\n</code></pre>\n<p>... or arbitrary uploads:</p>\n<pre><code>pubpaste -T TOKEN --undo\n</code></pre>\n<p>Similarly, you can republish over the previous upload with:</p>\n<pre><code>pubpaste --republish ...\n</code></pre>\n<p>History can be displayed with the <code>show-history</code> command. The last\ntoken used is also accessible with the <code>last-token</code> command.</p>\n<h2>Expiry</h2>\n<p>By default, uploads never expire. You can add a \"TTL\" (Time To Live)\nfile with the <code>--ttl</code> argument which marks (in days) the time a paste\nshould be kept.</p>\n<p>Old entries can be purged by deploying <code>pubpaste</code> on the server side\nand running:</p>\n<pre><code>pubpaste --purge --base-dir=/home/user/public_html\n</code></pre>\n<p>... where <code>/home/user/public_html</code> is the path provided in <code>output</code> on\nthe clients. That configuration will usually be store in the config\nfile, as such:</p>\n<pre><code>base_dir: \"/home/user/public_html\"\n</code></pre>\n<h2>Shortcuts</h2>\n<p>The usage has all the details but if you use <code>pubpaste</code> from the\ncommandline, you might like to use shortcuts for the commands. For\nexample, a screenshot is <code>pubpaste -S</code>. See <code>--help</code> for details.</p>\n<h1>Installation</h1>\n<p>This package is available on PyPI. It can be installed with <code>pip</code>:</p>\n<pre><code>pip install pubpaste\n</code></pre>\n<p>Its requirements are minimal so you shouldn't need a <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">virtual\nenvironment</a>.</p>\n<p><code>pubpaste</code> can also be ran directly from the source directory:</p>\n<pre><code>./pubpaste\n</code></pre>\n<p>or symlinked in your <code>$PATH</code>:</p>\n<pre><code>ln -s ./pubpaste /usr/local/bin/pubpaste\n</code></pre>\n<h1>Known issues and limitations</h1>\n<p>Has no unit tests.</p>\n<p>The photo gallery and screenshot code is messy.</p>\n<p>Was written over a weekend and might be buggy.</p>\n<p>Restricted to elite hackers that have SSH or rsync access and their\nown web server. Could br improved by supporting things like S3,\npastebins or other file sharing systems.</p>\n<p>In particular, misconfiguration of the webserver can easily be\ncatastrophic: if <code>Indexes</code> is enabled in the webserver <em>and</em> the\nparent directory doesn't have an <code>index.html</code> to protect from leaks,\nthe secret tokens will be revealed and the secrecy of the system\ncompromised.</p>\n<p>Similarly, secret tokens can easily leak if any peer that received it\nshare it by mistake or maliciously. Access revocation is impossible\nwithout renaming the token, which must be done by hand.</p>\n<h1>Credits</h1>\n<p>This project was inspired by the <code>publish</code> program originally written\nby Florian Reitmeir and Peter Palfrader. It was re-written in Python\nto make it easier to document, extend, and maintain.</p>\n<p>It was renamed because we did not want to take over the <code>publish</code>\nnamespace out of respect for the existing one. It's also a little too\ngeneric for a project name.</p>\n<p><code>pubpaste</code> seemed like a nice alternative and did't seem in use\naccording to search engines (checked DuckDuckGo, Google, GitHub, and\nGitLab).</p>\n<p><code>pub</code> refers to the inspiration for this project, the <code>publish</code> shell\nscript that influence the commandline design and implementation.</p>\n<p><code>paste</code> refers to the clipboard support. therefore <em>pubpaste</em> means\n<em>publish this paste</em>, but it can of course do more than just publish\nthe clipboard.</p>\n<p><code>pub</code> is also a reference to the real-world place that I dearly miss\nsince the start of the global pandemic that has everyone isolated and\nbars closed. <em>pub paste</em> therefore obliquely refers to the stickiness\nand smell of old pubs and bars, that strange smell of old yeast and\nalcohol mixed with bleach or strong cleaning product that lingers\nuntil you walk into a sound check the next day.</p>\n<p>This is a message of hope: this will not go on forever and the\nmessiness of humanity will return humbled yet improved.</p>\n<h2>Changes from <code>publish</code></h2>\n<p>While <code>pubpaste</code> generally tries to be backwards-compatible with\n<code>publish</code> in terms of commandline interface, it has the following\nchanges:</p>\n<ol>\n<li>\n<p>usage is clearer. different actions are \"commands\" that are\nclearly outlined in the usage and correctly \"conflict\" with each\nother</p>\n</li>\n<li>\n<p>long options: <code>publish</code> only has one-letter options, <code>pubpaste</code>\nsupports longer form options as well</p>\n</li>\n<li>\n<p><code>--undo</code> defaults to the last token, ie. <code>--republish</code> is implicit</p>\n</li>\n<li>\n<p><code>--undo</code> removes the token from history, allowing the user to\n\"pop\" backwards in the history, canceling multiple entries</p>\n</li>\n<li>\n<p><code>--purge</code> is builtin instead of being a separate script</p>\n</li>\n<li>\n<p>the <code>-L | --follow-symlinks</code> option is new</p>\n</li>\n<li>\n<p>photo gallery: the <code>--sigal</code> option is new</p>\n</li>\n</ol>\n<p>The following are general behavior changes:</p>\n<ol>\n<li>\n<p>builtin graphical notifications: while <code>publish</code> can be modified\n(through hooks) to notify the user on upload, <code>pubpaste</code> does\nthis outside the box.</p>\n</li>\n<li>\n<p>We use <code>xclip -selection clipboard</code> by default instead of\n<code>xclip</code>, because the latter conflicts with the <code>-x</code> option.</p>\n</li>\n<li>\n<p>config file path and format: <code>publish</code>'s configuration is a shell\nscript in <code>~/.publish.cfg</code>, <code>pubpaste</code>'s configuration is a YAML\nfile in <code>~/.config/pubpaste.yml</code>. this breaks backwards\ncompatibility.</p>\n</li>\n<li>\n<p>extensibility: <code>pubpaste</code> is less extensible than <code>publish</code>. the\nlatter has \"hooks\", shell functions that run before and after\nvarious points in the program, and that the configuration can\ntotally override. this is very powerful, but also not well\ndocumented and possibly dangerous. we took a more traditional\napproach in <code>pubpaste</code>: modifications should be done in the source\ncode and proposed as patches</p>\n</li>\n</ol>\n<p>The following functionality is missing:</p>\n<ul>\n<li><code>-q</code>: encodes the URL in a qrcode and uploads <em>that</em></li>\n<li>maximum history size</li>\n</ul>\n<p>Those options were discarded and will not be implemented:</p>\n<ul>\n<li><code>-8</code>: webserver should be properly configured</li>\n<li><code>-r</code> obscure rsync function i never use</li>\n<li><code>is_text</code> detection: we will just assume stdin is text</li>\n</ul>\n<h1>Contributing</h1>\n<p>See the <a href=\"CONTRIBUTING.rst\" rel=\"nofollow\">contribution guide</a> for more information. In\nshort: this is a free software project and you are welcome to join us\nin improving it, both by fixing things, reporting issues or\ndocumentation.</p>\n<p>This project adheres to the <a href=\"CODE_OF_CONDUCT.rst\" rel=\"nofollow\">Covenant code of conduct</a>.</p>\n\n          </div>"}, "last_serial": 7177335, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2055dcd56aa1bc6d3d34f798d46b18ee", "sha256": "eaefb4c4fa8397f8ef23f0765d3bbd095ffe554fbb3b358c6bbf818ec0f0e604"}, "downloads": -1, "filename": "pubpaste-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2055dcd56aa1bc6d3d34f798d46b18ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5985, "upload_time": "2020-04-20T21:35:34", "upload_time_iso_8601": "2020-04-20T21:35:34.225116Z", "url": "https://files.pythonhosted.org/packages/41/b4/436e303aa6be7022462e057ee0d5d4bc8b8d124f302d6648c0e0cd68a6a1/pubpaste-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "683cc8049d22493df3e0c3da577b2615", "sha256": "ce47676489089c6a5f481b4f51e33c4b335c0ee60170d9029007a26c8b039647"}, "downloads": -1, "filename": "pubpaste-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "683cc8049d22493df3e0c3da577b2615", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6966, "upload_time": "2020-05-06T03:58:00", "upload_time_iso_8601": "2020-05-06T03:58:00.650311Z", "url": "https://files.pythonhosted.org/packages/0b/aa/4bcc918ff79aae5529145b340f07d1e8386f336e843089aa6d25cc75766f/pubpaste-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "683cc8049d22493df3e0c3da577b2615", "sha256": "ce47676489089c6a5f481b4f51e33c4b335c0ee60170d9029007a26c8b039647"}, "downloads": -1, "filename": "pubpaste-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "683cc8049d22493df3e0c3da577b2615", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6966, "upload_time": "2020-05-06T03:58:00", "upload_time_iso_8601": "2020-05-06T03:58:00.650311Z", "url": "https://files.pythonhosted.org/packages/0b/aa/4bcc918ff79aae5529145b340f07d1e8386f336e843089aa6d25cc75766f/pubpaste-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:14:47 2020"}