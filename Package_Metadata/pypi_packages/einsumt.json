{"info": {"author": "Marek Wojciechowski", "author_email": "mrkwjc@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# einsumt\nMultithreaded version of numpy.einsum function.\n\n# Reasoning\nNumpy's einsum is a fantastic function which allows for sophisticated array operations with a single, clear line of code. However, this function in general does not benefit from the underlaying multicore architecture and all operations are performed on a single CPU.\n\nThe idea is then to split the einsum input operands along the chosen subscript, perform computation in threads and then compose the final result by summation (if subscript is not present in output) or concatenation of partial results.\n\n# Usage\nThis function can be used as a replacement for numpy's einsum:\n\n    from einsumt import einsumt as einsum\n    result = einsum(*operands, **kwargs)\n\nIn current implementation first operand *must* be a subscripts string. Other differences will be treated as unintended bugs.\n\n# Benchmarking\nIn order to test, if `einsumt` would be beneficial in your particular case please run the benchmark, e.g.:\n\n    import numpy as np\n    from einsumt import bench_einsumt\n\n    bench_einsumt('aijk,bkl->ail',\n                  np.random.rand(100, 100, 10, 10),\n                  np.random.rand(50, 10, 50))\nand the result is:\n\n    Platform:           Linux\n    CPU type:           Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\n    Subscripts:         aijk,bkl->ail\n    Shapes of operands: (100, 100, 10, 10), (50, 10, 50)\n    Leading index:      automatic\n    Pool type:          default\n    Number of threads:  12\n    Execution time:\n        np.einsum:      2755 ms  (average from 1 runs)\n        einsumt:        507.9 ms  (average from 5 runs)\n    Speed up:           5.424x\nMore exemplary benchmark calls are contained in bench_einsum.py file.\n\n# Disclaimer\nBefore you start to blame me because of little or no speedups please keep in mind that threading costs additional time (because of splitting and joining data for example), so `einsumt` function would become beneficial for larger arrays only. Note also that in many cases numpy's einsum can be efficiently replaced with combination of optimized dots, tensordots, matmuls, transpositions and so on, instead of `einsumt` (at cost of code clarity of course).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrkwjc/einsumt", "keywords": "numpy,einsum,hpc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "einsumt", "package_url": "https://pypi.org/project/einsumt/", "platform": "", "project_url": "https://pypi.org/project/einsumt/", "project_urls": {"Homepage": "https://github.com/mrkwjc/einsumt"}, "release_url": "https://pypi.org/project/einsumt/0.9.1/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Multithreaded version of numpy.einsum function", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>einsumt</h1>\n<p>Multithreaded version of numpy.einsum function.</p>\n<h1>Reasoning</h1>\n<p>Numpy's einsum is a fantastic function which allows for sophisticated array operations with a single, clear line of code. However, this function in general does not benefit from the underlaying multicore architecture and all operations are performed on a single CPU.</p>\n<p>The idea is then to split the einsum input operands along the chosen subscript, perform computation in threads and then compose the final result by summation (if subscript is not present in output) or concatenation of partial results.</p>\n<h1>Usage</h1>\n<p>This function can be used as a replacement for numpy's einsum:</p>\n<pre><code>from einsumt import einsumt as einsum\nresult = einsum(*operands, **kwargs)\n</code></pre>\n<p>In current implementation first operand <em>must</em> be a subscripts string. Other differences will be treated as unintended bugs.</p>\n<h1>Benchmarking</h1>\n<p>In order to test, if <code>einsumt</code> would be beneficial in your particular case please run the benchmark, e.g.:</p>\n<pre><code>import numpy as np\nfrom einsumt import bench_einsumt\n\nbench_einsumt('aijk,bkl-&gt;ail',\n              np.random.rand(100, 100, 10, 10),\n              np.random.rand(50, 10, 50))\n</code></pre>\n<p>and the result is:</p>\n<pre><code>Platform:           Linux\nCPU type:           Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz\nSubscripts:         aijk,bkl-&gt;ail\nShapes of operands: (100, 100, 10, 10), (50, 10, 50)\nLeading index:      automatic\nPool type:          default\nNumber of threads:  12\nExecution time:\n    np.einsum:      2755 ms  (average from 1 runs)\n    einsumt:        507.9 ms  (average from 5 runs)\nSpeed up:           5.424x\n</code></pre>\n<p>More exemplary benchmark calls are contained in bench_einsum.py file.</p>\n<h1>Disclaimer</h1>\n<p>Before you start to blame me because of little or no speedups please keep in mind that threading costs additional time (because of splitting and joining data for example), so <code>einsumt</code> function would become beneficial for larger arrays only. Note also that in many cases numpy's einsum can be efficiently replaced with combination of optimized dots, tensordots, matmuls, transpositions and so on, instead of <code>einsumt</code> (at cost of code clarity of course).</p>\n\n          </div>"}, "last_serial": 6161511, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "6b4556ec49219a0e5ed2871691b7209e", "sha256": "f53b3a2514a2bfcf23eed92b8e400035e0d75e876888f2f61e41d0d6698c66ad"}, "downloads": -1, "filename": "einsumt-0.9.0.tar.gz", "has_sig": false, "md5_digest": "6b4556ec49219a0e5ed2871691b7209e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5148, "upload_time": "2019-11-19T10:22:42", "upload_time_iso_8601": "2019-11-19T10:22:42.911611Z", "url": "https://files.pythonhosted.org/packages/5c/7f/407344fe407dfe2387597b880bc248a181a3ec7c183815199a0cf7cc93f4/einsumt-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "08d854c93f4a6905fc8e38affbeec2f7", "sha256": "830ddfcb01eac7534591fdc19c2a8a31a9138f730eddcd0910b5faf6faf0dc29"}, "downloads": -1, "filename": "einsumt-0.9.1.tar.gz", "has_sig": false, "md5_digest": "08d854c93f4a6905fc8e38affbeec2f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5069, "upload_time": "2019-11-19T12:14:18", "upload_time_iso_8601": "2019-11-19T12:14:18.146780Z", "url": "https://files.pythonhosted.org/packages/11/f4/49b54561871e05a9a7e4444b363886bd7dc031d66c4990ba37d0f44a2d57/einsumt-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08d854c93f4a6905fc8e38affbeec2f7", "sha256": "830ddfcb01eac7534591fdc19c2a8a31a9138f730eddcd0910b5faf6faf0dc29"}, "downloads": -1, "filename": "einsumt-0.9.1.tar.gz", "has_sig": false, "md5_digest": "08d854c93f4a6905fc8e38affbeec2f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5069, "upload_time": "2019-11-19T12:14:18", "upload_time_iso_8601": "2019-11-19T12:14:18.146780Z", "url": "https://files.pythonhosted.org/packages/11/f4/49b54561871e05a9a7e4444b363886bd7dc031d66c4990ba37d0f44a2d57/einsumt-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:13 2020"}