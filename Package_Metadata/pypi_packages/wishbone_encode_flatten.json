{"info": {"author": "Jelle Smet", "author_email": "development@smetj.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: PyPy"], "description": "::\n\n              __       __    __\n    .--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n    |  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n    |________|__|_____|__|__|_____|_____|__|__|_____|\n                                       version 2.1.2\n\n    Build composable event pipeline servers with minimal effort.\n\n\n\n    =======================\n    wishbone.encode.flatten\n    =======================\n\n    Version: 1.0.0\n\n    Flattens a dict structure of arbitrary depth into individual metric events.\n    ---------------------------------------------------------------------------\n\n\n        This module takes a <dict> structure and recursively travels it\n        flattening the namespace into a dotted format untill a numeric value\n        is encountered. For each metric a <wishbone.event.Metric>\n        datastructure is created and stored in the @data part of\n        <wishbone.event.Event>.\n\n        Non-numeric values are ignored.\n\n        For example:\n\n            {\"server\": {\"host01\": {\"memory\": {\"free\": 10, \"consumed\": 90}}}}\n\n            Would generate following metrics:\n\n            server.host01.memory.free\n            server.host01.memory.consumed\n\n        These metrics are converted to the Wishbone metric data format:\n\n            http://wishbone.readthedocs.org/en/latest/logs%20and%20metrics.html#format\n\n        The module is expecting a Python <dict> type.  That means you should have\n        already decoded the incoming data using a module like wishbone.decode.json.\n\n\n        Parameters:\n\n            - source(str)(\"@data\")\n               |  The event field containing the data to convert.\n\n            - type(str)(\"wishbone\")\n               |  An arbitrary string to assign to the \"type\" field of the Metric\n               |  datastructure.\n\n            - metric_source(str)(\"wishbone\")\n               |  An arbitrary string to assign to the \"source\" field of the Metric\n               |  datastructure.\n\n            - tags(set)()\n               |  An arbitrary set of tags assign to the \"tags\" field of the Metric\n               |  datastructure.\n\n\n        Queues:\n\n            - inbox:    Incoming events.\n\n            - outbox:   Outgoing events with @data containing the wishbone.event.Metric data.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/smetj/wishbone-input-livestatus/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smetj/wishbone-encode-flatten", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "wishbone_encode_flatten", "package_url": "https://pypi.org/project/wishbone_encode_flatten/", "platform": "Linux", "project_url": "https://pypi.org/project/wishbone_encode_flatten/", "project_urls": {"Download": "https://github.com/smetj/wishbone-input-livestatus/tarball/master", "Homepage": "https://github.com/smetj/wishbone-encode-flatten"}, "release_url": "https://pypi.org/project/wishbone_encode_flatten/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A Wishbone encode module to flatten a dict structure of arbitrary depth into individual metric events.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>          __       __    __\n.--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n|  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n|________|__|_____|__|__|_____|_____|__|__|_____|\n                                   version 2.1.2\n\nBuild composable event pipeline servers with minimal effort.\n\n\n\n=======================\nwishbone.encode.flatten\n=======================\n\nVersion: 1.0.0\n\nFlattens a dict structure of arbitrary depth into individual metric events.\n---------------------------------------------------------------------------\n\n\n    This module takes a &lt;dict&gt; structure and recursively travels it\n    flattening the namespace into a dotted format untill a numeric value\n    is encountered. For each metric a &lt;wishbone.event.Metric&gt;\n    datastructure is created and stored in the @data part of\n    &lt;wishbone.event.Event&gt;.\n\n    Non-numeric values are ignored.\n\n    For example:\n\n        {\"server\": {\"host01\": {\"memory\": {\"free\": 10, \"consumed\": 90}}}}\n\n        Would generate following metrics:\n\n        server.host01.memory.free\n        server.host01.memory.consumed\n\n    These metrics are converted to the Wishbone metric data format:\n\n        http://wishbone.readthedocs.org/en/latest/logs%20and%20metrics.html#format\n\n    The module is expecting a Python &lt;dict&gt; type.  That means you should have\n    already decoded the incoming data using a module like wishbone.decode.json.\n\n\n    Parameters:\n\n        - source(str)(\"@data\")\n           |  The event field containing the data to convert.\n\n        - type(str)(\"wishbone\")\n           |  An arbitrary string to assign to the \"type\" field of the Metric\n           |  datastructure.\n\n        - metric_source(str)(\"wishbone\")\n           |  An arbitrary string to assign to the \"source\" field of the Metric\n           |  datastructure.\n\n        - tags(set)()\n           |  An arbitrary set of tags assign to the \"tags\" field of the Metric\n           |  datastructure.\n\n\n    Queues:\n\n        - inbox:    Incoming events.\n\n        - outbox:   Outgoing events with @data containing the wishbone.event.Metric data.\n</pre>\n\n          </div>"}, "last_serial": 2033488, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "85554d149a05ced18b6cf1017929384a", "sha256": "e33108192987c3b75722800304834d61e6bf5efb8730d8742a58166ff59e12ba"}, "downloads": -1, "filename": "wishbone_encode_flatten-1.0.0.tar.gz", "has_sig": false, "md5_digest": "85554d149a05ced18b6cf1017929384a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3448, "upload_time": "2016-03-27T22:04:32", "upload_time_iso_8601": "2016-03-27T22:04:32.251873Z", "url": "https://files.pythonhosted.org/packages/e6/13/1faf0a9b8016b2c52fededa6a3bb10cd0c9a905ccd355554d014ee2ec26d/wishbone_encode_flatten-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85554d149a05ced18b6cf1017929384a", "sha256": "e33108192987c3b75722800304834d61e6bf5efb8730d8742a58166ff59e12ba"}, "downloads": -1, "filename": "wishbone_encode_flatten-1.0.0.tar.gz", "has_sig": false, "md5_digest": "85554d149a05ced18b6cf1017929384a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3448, "upload_time": "2016-03-27T22:04:32", "upload_time_iso_8601": "2016-03-27T22:04:32.251873Z", "url": "https://files.pythonhosted.org/packages/e6/13/1faf0a9b8016b2c52fededa6a3bb10cd0c9a905ccd355554d014ee2ec26d/wishbone_encode_flatten-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:37 2020"}