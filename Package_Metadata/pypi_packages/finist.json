{"info": {"author": "Sumanau Sareen", "author_email": "finist-python@googlegroups.com", "bugtrack_url": null, "classifiers": [], "description": "Finist\n======\n\nRedis based Finite State Machine.\n\nDescription\n-----------\n\nFinist is a finite state machine that is defined and persisted in\n[Redis][redis].\n\nCommunity\n---------\n\nMeet us on IRC: [#lesscode](irc://chat.freenode.net/#lesscode) on\n[freenode.net](http://freenode.net/).\n\nRelated projects\n----------------\n\n* [Finist implemented in Lua][finist.lua]\n* [Finist implemented in Ruby][finist.lua]\n* [Finist implemented in Rust][finist.ruby]\n\nGetting started\n---------------\n\nInstall [Redis][redis]. On most platforms it's as easy as grabbing\nthe sources, running make and then putting the `redis-server` binary\nin the PATH.\n\nOnce you have it installed, you can execute `redis-server` and it\nwill run on `localhost:6379` by default. Check the `redis.conf`\nfile that comes with the sources if you want to change some settings.\n\nUsage\n-----\n\nFinist requires a Redis [Python Redis] compatible client. To make things\neasier, `redic` is listed as a runtime dependency so the examples\nin this document will work.\n\n```python\nfrom finist import Finist\nimport redis\nredis_conn = redis.Redis()\n\n# Initialize with a Redis client, the name of the machine and the\n# initial state. In this example, the machine is called \"order\" and\n# the initial status is \"pending\". The Redis client is connected to\n# the default host (127.0.0.1:6379).\nmachine = Finist(redis_conn, \"order\", \"pending\")\n\n# Available transitions are defined with the `on` method\n# `machine.on(<event>, <initial_state>, <final_state>)`\nmachine.on(\"approve\", \"pending\", \"approved\")\nmachine.on(\"cancel\", \"pending\", \"cancelled\")\nmachine.on(\"cancel\", \"approved\", \"cancelled\")\nmachine.on(\"reset\", \"cancelled\", \"pending\")\n```\n\nNow that the possible transitions are defined, we can check the\ncurrent state:\n\n```python\nmachine.state()\n# => \"pending\"\n```\n\nAnd we can trigger an event:\n\n```python\nmachine.trigger(\"approve\")\n# => [\"approved\", true]\n```\n\nThe `trigger` method returns an array of two values: the first\nrepresents the current state, and the second represents whether\na transition occurred.\n\nHere's what happens if an event doesn't cause a transition:\n\n```python\nmachine.trigger(\"reset\")\n# => [\"approved\", false]\n```\n\nHere's a convenient way to use this flag:\n\n```python\nstate, changed = machine.trigger(\"reset\")\n\nif changed\n  print \"State changed to %s\\n\" %state\n```\n\nIf you need to remove all the transitions for a given event, you\ncan use `rm`:\n\n```python\nmachine.rm(\"reset\")\n```\n\nNote that every change is persisted in Redis.\n\nRepresentation\n--------------\n\nEach event is represented as a hash in Redis, and its field/value\npairs are the possible transitions.\n\nFor the FSM described in the examples above, the keys are laid out\nas follows:\n\n```ini\n# Current state\nfinist:order (string)\n\n# Transitions for event `approve`\nfinist:order:approve (hash)\n\tpending   -> approved\n\n# Transitions for event `cancel`\nfinist:order:cancel (hash)\n\tpending   -> cancelled\n\tapproved  -> cancelled\n\n# Transitions for event `reset`\nfinist:order:reset (hash)\n\tcancelled -> pending\n```\n\nInstallation\n------------\n\n```\n$ python setup.py install\nor \n$ pip install finist\n```\n\n[redis]: http://redis.io\n[Python Redis]: https://github.com/andymccurdy/redis-py\n[finist.lua]: https://github.com/soveran/finist.lua\n[finist.rust]: https://github.com/badboy/finist\n[finist.ruby]: https://github.com/soveran/finist", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sumanau7/finist", "keywords": "redis state machine python", "license": "APACHE", "maintainer": null, "maintainer_email": null, "name": "finist", "package_url": "https://pypi.org/project/finist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/finist/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/sumanau7/finist"}, "release_url": "https://pypi.org/project/finist/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Redis based Finite State Machine.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Finist<br>======<br><br>Redis based Finite State Machine.<br><br>Description<br>-----------<br><br>Finist is a finite state machine that is defined and persisted in<br>[Redis][redis].<br><br>Community<br>---------<br><br>Meet us on IRC: [#lesscode](irc://chat.freenode.net/#lesscode) on<br>[freenode.net](http://freenode.net/).<br><br>Related projects<br>----------------<br><br>* [Finist implemented in Lua][finist.lua]<br>* [Finist implemented in Ruby][finist.lua]<br>* [Finist implemented in Rust][finist.ruby]<br><br>Getting started<br>---------------<br><br>Install [Redis][redis]. On most platforms it's as easy as grabbing<br>the sources, running make and then putting the `redis-server` binary<br>in the PATH.<br><br>Once you have it installed, you can execute `redis-server` and it<br>will run on `localhost:6379` by default. Check the `redis.conf`<br>file that comes with the sources if you want to change some settings.<br><br>Usage<br>-----<br><br>Finist requires a Redis [Python Redis] compatible client. To make things<br>easier, `redic` is listed as a runtime dependency so the examples<br>in this document will work.<br><br>```python<br>from finist import Finist<br>import redis<br>redis_conn = redis.Redis()<br><br># Initialize with a Redis client, the name of the machine and the<br># initial state. In this example, the machine is called \"order\" and<br># the initial status is \"pending\". The Redis client is connected to<br># the default host (127.0.0.1:6379).<br>machine = Finist(redis_conn, \"order\", \"pending\")<br><br># Available transitions are defined with the `on` method<br># `machine.on(&lt;event&gt;, &lt;initial_state&gt;, &lt;final_state&gt;)`<br>machine.on(\"approve\", \"pending\", \"approved\")<br>machine.on(\"cancel\", \"pending\", \"cancelled\")<br>machine.on(\"cancel\", \"approved\", \"cancelled\")<br>machine.on(\"reset\", \"cancelled\", \"pending\")<br>```<br><br>Now that the possible transitions are defined, we can check the<br>current state:<br><br>```python<br>machine.state()<br># =&gt; \"pending\"<br>```<br><br>And we can trigger an event:<br><br>```python<br>machine.trigger(\"approve\")<br># =&gt; [\"approved\", true]<br>```<br><br>The `trigger` method returns an array of two values: the first<br>represents the current state, and the second represents whether<br>a transition occurred.<br><br>Here's what happens if an event doesn't cause a transition:<br><br>```python<br>machine.trigger(\"reset\")<br># =&gt; [\"approved\", false]<br>```<br><br>Here's a convenient way to use this flag:<br><br>```python<br>state, changed = machine.trigger(\"reset\")<br><br>if changed<br>  print \"State changed to %s\\n\" %state<br>```<br><br>If you need to remove all the transitions for a given event, you<br>can use `rm`:<br><br>```python<br>machine.rm(\"reset\")<br>```<br><br>Note that every change is persisted in Redis.<br><br>Representation<br>--------------<br><br>Each event is represented as a hash in Redis, and its field/value<br>pairs are the possible transitions.<br><br>For the FSM described in the examples above, the keys are laid out<br>as follows:<br><br>```ini<br># Current state<br>finist:order (string)<br><br># Transitions for event `approve`<br>finist:order:approve (hash)<br>\tpending   -&gt; approved<br><br># Transitions for event `cancel`<br>finist:order:cancel (hash)<br>\tpending   -&gt; cancelled<br>\tapproved  -&gt; cancelled<br><br># Transitions for event `reset`<br>finist:order:reset (hash)<br>\tcancelled -&gt; pending<br>```<br><br>Installation<br>------------<br><br>```<br>$ python setup.py install<br>or <br>$ pip install finist<br>```<br><br>[redis]: http://redis.io<br>[Python Redis]: https://github.com/andymccurdy/redis-py<br>[finist.lua]: https://github.com/soveran/finist.lua<br>[finist.rust]: https://github.com/badboy/finist<br>[finist.ruby]: https://github.com/soveran/finist\n          </div>"}, "last_serial": 1652994, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "fcad002f1d8231afac22f3545bd5b008", "sha256": "2fd88271a4e1da6a7ba948ecb68e562f843f7d3a573f498afe6b3d06e8b9cdfb"}, "downloads": -1, "filename": "finist-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fcad002f1d8231afac22f3545bd5b008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3410, "upload_time": "2015-07-26T15:43:18", "upload_time_iso_8601": "2015-07-26T15:43:18.436231Z", "url": "https://files.pythonhosted.org/packages/1d/81/c13e31f1413c37ad4f8bc2fb425633b56b18a9d702e6905c2875038b1c48/finist-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bbfbca55dea7d2d56f01fd9822e08993", "sha256": "795fc4d9f73e6e0e1af4c151d577f4a7b31bd591cd7163e1a99bb4a17faf2742"}, "downloads": -1, "filename": "finist-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bbfbca55dea7d2d56f01fd9822e08993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3688, "upload_time": "2015-07-28T10:16:02", "upload_time_iso_8601": "2015-07-28T10:16:02.260238Z", "url": "https://files.pythonhosted.org/packages/7e/30/0a1b593e638372de5550f2daf9964f514cf1ab16143db46903070bef0304/finist-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bbfbca55dea7d2d56f01fd9822e08993", "sha256": "795fc4d9f73e6e0e1af4c151d577f4a7b31bd591cd7163e1a99bb4a17faf2742"}, "downloads": -1, "filename": "finist-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bbfbca55dea7d2d56f01fd9822e08993", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3688, "upload_time": "2015-07-28T10:16:02", "upload_time_iso_8601": "2015-07-28T10:16:02.260238Z", "url": "https://files.pythonhosted.org/packages/7e/30/0a1b593e638372de5550f2daf9964f514cf1ab16143db46903070bef0304/finist-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:22 2020"}