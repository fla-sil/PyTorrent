{"info": {"author": "Roman A. Taycher", "author_email": "rtaycher1987@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "===========\ndebug_print\n===========\n\nThis package comes from a basic idea that I have redone a couple of times originally in c and \nhave dropped as a single .py(or .h) file in many of my projects. This can be used by dumping the folder\nwith your project or you can install it by running `pip install debug_print`.\n\nWhile using debuggers/tests/a repl can be quite useful sometimes doing printf style debugging\nalso has its merits especially for short-lived programs.\n\nThe upside of this approach is that you don't have to repeat expressions or manually insert `__file__` and other\ncontext hints. Also the distinctive names make it easy to search for debug lines and delete them(since this\npackage isn't really meant for production).\n\n\nThis package is in beta partially because I want to add some options but mostly since I still \nneed to figure out what to do with logging.\n\nex\n\n```python\nimport debug_print as d\na = [1,2,3,4,5]\nd.debug_eval_print(\"a\")\n```\n\nprints\n\n![ex1](debug_print_example1.png)\n\nor\n\n```python\nd.debug_eval_print(\"[x+1 for x in range(len(a))]\")\n```\n\nwhich prints\n\n![ex2](debug_print_example2.png)\n\nprints result/value of the expression/variable(using eval, the reason\nto use eval is so you can print out the variable name/expression\nand what it evaluates to without specifying it twice) with line number, function name, type.\nSoon it will print in color to stand out better.\n\n```python\nd.debug_message(\"some message\")\n```\n\n![ex3](debug_print_example3.png)\n\njust prints out a string(no eval) but with func name/line #/file\n\nThe calls to debug_eval_print or debug_message default to blue if you want\nsome of the expressions/messages to print in a different color just supply\na different colorscheme.\n\nex.\n\n```python\n  d.debug_eval_print(\"a[0]\", colorscheme=d.ColorSchemes.FORE_RED)\n```\n\nprints\n\n![ex4](debug_print_example4.png)\n\nSome configuration(currently just which pieces of context info to include) can be configured by changing\n`d.default_settings` dict. \n\nNote: Originally `debug_eval_print` was `debug_print` but I wanted to emphasize that it uses eval\nunder the covers even though it makes the name longer.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://crouchofthewildtiger.com/", "keywords": "debug printf-debugging", "license": "MIT/X11 License", "maintainer": null, "maintainer_email": null, "name": "debug_print", "package_url": "https://pypi.org/project/debug_print/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/debug_print/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://crouchofthewildtiger.com/"}, "release_url": "https://pypi.org/project/debug_print/0.6.1/", "requires_dist": null, "requires_python": null, "summary": "A mini library for printf style debugging.", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========<br>debug_print<br>===========<br><br>This package comes from a basic idea that I have redone a couple of times originally in c and <br>have dropped as a single .py(or .h) file in many of my projects. This can be used by dumping the folder<br>with your project or you can install it by running `pip install debug_print`.<br><br>While using debuggers/tests/a repl can be quite useful sometimes doing printf style debugging<br>also has its merits especially for short-lived programs.<br><br>The upside of this approach is that you don't have to repeat expressions or manually insert `__file__` and other<br>context hints. Also the distinctive names make it easy to search for debug lines and delete them(since this<br>package isn't really meant for production).<br><br><br>This package is in beta partially because I want to add some options but mostly since I still <br>need to figure out what to do with logging.<br><br>ex<br><br>```python<br>import debug_print as d<br>a = [1,2,3,4,5]<br>d.debug_eval_print(\"a\")<br>```<br><br>prints<br><br>![ex1](debug_print_example1.png)<br><br>or<br><br>```python<br>d.debug_eval_print(\"[x+1 for x in range(len(a))]\")<br>```<br><br>which prints<br><br>![ex2](debug_print_example2.png)<br><br>prints result/value of the expression/variable(using eval, the reason<br>to use eval is so you can print out the variable name/expression<br>and what it evaluates to without specifying it twice) with line number, function name, type.<br>Soon it will print in color to stand out better.<br><br>```python<br>d.debug_message(\"some message\")<br>```<br><br>![ex3](debug_print_example3.png)<br><br>just prints out a string(no eval) but with func name/line #/file<br><br>The calls to debug_eval_print or debug_message default to blue if you want<br>some of the expressions/messages to print in a different color just supply<br>a different colorscheme.<br><br>ex.<br><br>```python<br>  d.debug_eval_print(\"a[0]\", colorscheme=d.ColorSchemes.FORE_RED)<br>```<br><br>prints<br><br>![ex4](debug_print_example4.png)<br><br>Some configuration(currently just which pieces of context info to include) can be configured by changing<br>`d.default_settings` dict. <br><br>Note: Originally `debug_eval_print` was `debug_print` but I wanted to emphasize that it uses eval<br>under the covers even though it makes the name longer.\n          </div>"}, "last_serial": 1214959, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "2dad7928f38b4559f869a5c244ab65de", "sha256": "efaa3ead6fc57f81abb34e4cc1bd55e5bbd1bf3ca9f9c9576d4c3b4a40829f73"}, "downloads": -1, "filename": "debug_print-0.5.2.tar.gz", "has_sig": false, "md5_digest": "2dad7928f38b4559f869a5c244ab65de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3939, "upload_time": "2014-06-02T06:24:06", "upload_time_iso_8601": "2014-06-02T06:24:06.307531Z", "url": "https://files.pythonhosted.org/packages/e3/a5/76dacbe484f84ff69bcaf34213571fb64e03503e2dccf20b78b9401d97a0/debug_print-0.5.2.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "275f83af3a51836838cb8e29a9d3e62b", "sha256": "169158eb83bf3a642787f36e0838bd4c63c5ef04b14a23ffdf3c2a25e4efbc92"}, "downloads": -1, "filename": "debug_print-0.6.1.tar.gz", "has_sig": false, "md5_digest": "275f83af3a51836838cb8e29a9d3e62b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3983, "upload_time": "2014-09-06T07:12:21", "upload_time_iso_8601": "2014-09-06T07:12:21.025630Z", "url": "https://files.pythonhosted.org/packages/19/83/266cbc2735b7337b638630b90fdd3283072549a256a8f1ac9dd89b6d26b2/debug_print-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "275f83af3a51836838cb8e29a9d3e62b", "sha256": "169158eb83bf3a642787f36e0838bd4c63c5ef04b14a23ffdf3c2a25e4efbc92"}, "downloads": -1, "filename": "debug_print-0.6.1.tar.gz", "has_sig": false, "md5_digest": "275f83af3a51836838cb8e29a9d3e62b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3983, "upload_time": "2014-09-06T07:12:21", "upload_time_iso_8601": "2014-09-06T07:12:21.025630Z", "url": "https://files.pythonhosted.org/packages/19/83/266cbc2735b7337b638630b90fdd3283072549a256a8f1ac9dd89b6d26b2/debug_print-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:38 2020"}