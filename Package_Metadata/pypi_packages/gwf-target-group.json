{"info": {"author": "J\u00f6rn Bethune", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# gwf target group\n\nThis Python package provides a convenient way for automatically generating\nsystematic output filenames for your gwf jobs. This will make defining your gwf\njobs a good deal terser. Compare this:\n\n```\nfrom gwf import Workflow\n\ngwf = Workflow()\n\nfoo_file = 'first_step/foo.csv' \nbar_file = 'first_step/bar.csv' \nplot_file = 'second_step/plot.png'\nsummary_file = 'second_step/summary.txt'\n\ngwf.target(\n    'target_group.first_step',\n    inputs = [],\n    outputs = [ foo_file, bar_file ],\n) << f\"first_step_command -f {foo_file} > {bar_file}\"\n\ngwf.target(\n    'target_group.second_step',\n    inputs = [ foo_file, bar_file ],\n    outputs = [ plot_file, summary_file ]\n) << f\"second_step_command -f {foo_file} -b {bar_file} -p {plot_file} > {summary_file}\"\n```\n\nto this:\n\n```\nfrom gwf import Workflow\nfrom gwf_target_group import TargetGroup\n\ngwf = Workflow()\n\ntarget_group = TargetGroup( gwf, 'target_group', 'output_prefix/' )\n\ntarget_group(\n    'first_step',\n    \"first_step_command -f {foo.csv} > {bar.csv}\"\n) # No input files here. Only 2 output files\n\ntarget_group(\n    'second_step',\n    \"run_command -f {foo_file} -b {bar_file} -p {plot.png} > {summary.txt}\",\n    foo_file = target_group.first_step.foo,\n    bar_file = target_group.first_step.bar\n) # Two input files, two output files\n```\n\nWith this package you never specify the path to the output files. Only to the\ninput files. And you can easily refer to the output files by using the automatic\nattributes of the target group: `target_group.first_step.foo`.\n\n## Installation\n\nInstall via pip:\n\n```\npip install gwf_target_group\n```\n\n(or alternatively copy the `__init__.py` from this repository and save if as\n`gwf_target_group.py` at a convenient location)\n\n\n## Advanced usage\n\n### Passing gwf options\n\nIf you need to fine-tune the options for a gwf job, you can use the\n`gwf_options` parameter:\n\n```\ntarget_group(\n    'my_special_processing_step',\n    'do_special_things {data} > {result.tsv}',\n    gwf_options = { # gwf_options is a reserved keyword\n        'memory': '64g',\n        'walltime': 'unlimited'\n    },\n    data = 'path/to/data.tsv'\n)\n```\n\nThis is roughly equivalent to the following gwf-only code:\n\n```\ngwf.target(\n    'target_group.my_special_processing_step',\n    inputs = [ 'path/to/data.tsv' ],\n    outputs = [ 'path/to/result.tsv' ],\n    options = {\n        'memory': '64g',\n        'walltime': 'unlimited'\n    }\n) << 'do_special_things path/to/data.tsv > path/to/result.tsv'\n```\n\n### running workflows with different datasets\n\nSometimes you want to do the same thing with different datasets. For example,\nyou might have a human and a mouse dataset that you want to analyse. Then you\ncan do the following:\n\n```\ndef define_analysis( target_group ):\n    target_group(\n        'sort_genes_by_length',\n        'gene_sorter --by length {genome_file} > {list}',\n        genome_file = target_group.genome_file # this value was attached previously\n    )\n    target_group(\n        'split_into_test_and_training_datasets',\n        'split_list -1 list1 -2 list2 {sorted_genes}',\n        sorted_genes = target_group.sort_genes_by_length.list\n    )\n    # more steps can be added here\n\nhuman = TargetGroup( gwf, 'human', 'human_results/' )\nmouse = TargetGroup( gwf, 'mouse', 'mouse_results/' )\n\n# explicitly attach the path to the genome files to the TargetGroups\nhuman.genome_file = 'data/genomes/human.fa'\nmouse.genome_file = 'data/genomes/mouse.fa'\n\n# and then define the analysis for both datasets\ndefine_analysis( human )\ndefine_analysis( mouse )\n        '\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jbethune/gwf_target_group", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gwf-target-group", "package_url": "https://pypi.org/project/gwf-target-group/", "platform": "", "project_url": "https://pypi.org/project/gwf-target-group/", "project_urls": {"Homepage": "https://github.com/jbethune/gwf_target_group"}, "release_url": "https://pypi.org/project/gwf-target-group/1.0.1/", "requires_dist": ["gwf (>=1.6.0)"], "requires_python": ">=3.6", "summary": "A wrapper for gwf for easy generation of output file paths", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gwf target group</h1>\n<p>This Python package provides a convenient way for automatically generating\nsystematic output filenames for your gwf jobs. This will make defining your gwf\njobs a good deal terser. Compare this:</p>\n<pre><code>from gwf import Workflow\n\ngwf = Workflow()\n\nfoo_file = 'first_step/foo.csv' \nbar_file = 'first_step/bar.csv' \nplot_file = 'second_step/plot.png'\nsummary_file = 'second_step/summary.txt'\n\ngwf.target(\n    'target_group.first_step',\n    inputs = [],\n    outputs = [ foo_file, bar_file ],\n) &lt;&lt; f\"first_step_command -f {foo_file} &gt; {bar_file}\"\n\ngwf.target(\n    'target_group.second_step',\n    inputs = [ foo_file, bar_file ],\n    outputs = [ plot_file, summary_file ]\n) &lt;&lt; f\"second_step_command -f {foo_file} -b {bar_file} -p {plot_file} &gt; {summary_file}\"\n</code></pre>\n<p>to this:</p>\n<pre><code>from gwf import Workflow\nfrom gwf_target_group import TargetGroup\n\ngwf = Workflow()\n\ntarget_group = TargetGroup( gwf, 'target_group', 'output_prefix/' )\n\ntarget_group(\n    'first_step',\n    \"first_step_command -f {foo.csv} &gt; {bar.csv}\"\n) # No input files here. Only 2 output files\n\ntarget_group(\n    'second_step',\n    \"run_command -f {foo_file} -b {bar_file} -p {plot.png} &gt; {summary.txt}\",\n    foo_file = target_group.first_step.foo,\n    bar_file = target_group.first_step.bar\n) # Two input files, two output files\n</code></pre>\n<p>With this package you never specify the path to the output files. Only to the\ninput files. And you can easily refer to the output files by using the automatic\nattributes of the target group: <code>target_group.first_step.foo</code>.</p>\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre><code>pip install gwf_target_group\n</code></pre>\n<p>(or alternatively copy the <code>__init__.py</code> from this repository and save if as\n<code>gwf_target_group.py</code> at a convenient location)</p>\n<h2>Advanced usage</h2>\n<h3>Passing gwf options</h3>\n<p>If you need to fine-tune the options for a gwf job, you can use the\n<code>gwf_options</code> parameter:</p>\n<pre><code>target_group(\n    'my_special_processing_step',\n    'do_special_things {data} &gt; {result.tsv}',\n    gwf_options = { # gwf_options is a reserved keyword\n        'memory': '64g',\n        'walltime': 'unlimited'\n    },\n    data = 'path/to/data.tsv'\n)\n</code></pre>\n<p>This is roughly equivalent to the following gwf-only code:</p>\n<pre><code>gwf.target(\n    'target_group.my_special_processing_step',\n    inputs = [ 'path/to/data.tsv' ],\n    outputs = [ 'path/to/result.tsv' ],\n    options = {\n        'memory': '64g',\n        'walltime': 'unlimited'\n    }\n) &lt;&lt; 'do_special_things path/to/data.tsv &gt; path/to/result.tsv'\n</code></pre>\n<h3>running workflows with different datasets</h3>\n<p>Sometimes you want to do the same thing with different datasets. For example,\nyou might have a human and a mouse dataset that you want to analyse. Then you\ncan do the following:</p>\n<pre><code>def define_analysis( target_group ):\n    target_group(\n        'sort_genes_by_length',\n        'gene_sorter --by length {genome_file} &gt; {list}',\n        genome_file = target_group.genome_file # this value was attached previously\n    )\n    target_group(\n        'split_into_test_and_training_datasets',\n        'split_list -1 list1 -2 list2 {sorted_genes}',\n        sorted_genes = target_group.sort_genes_by_length.list\n    )\n    # more steps can be added here\n\nhuman = TargetGroup( gwf, 'human', 'human_results/' )\nmouse = TargetGroup( gwf, 'mouse', 'mouse_results/' )\n\n# explicitly attach the path to the genome files to the TargetGroups\nhuman.genome_file = 'data/genomes/human.fa'\nmouse.genome_file = 'data/genomes/mouse.fa'\n\n# and then define the analysis for both datasets\ndefine_analysis( human )\ndefine_analysis( mouse )\n        '\n</code></pre>\n\n          </div>"}, "last_serial": 6273722, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "05928ff1233c9b1e7a63fe34901231f0", "sha256": "02a2aac5f0e42fa91361885d9150cbe57c47e09a16f317accec24bb9e835d442"}, "downloads": -1, "filename": "gwf_target_group-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "05928ff1233c9b1e7a63fe34901231f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17743, "upload_time": "2019-12-09T17:13:20", "upload_time_iso_8601": "2019-12-09T17:13:20.491313Z", "url": "https://files.pythonhosted.org/packages/b8/f3/8ad990a7db7bdac92300116321efebb92368eaff30b95ac6fa70544fd1e7/gwf_target_group-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0199c39f40c8d0b2eafba71d9d68f6b", "sha256": "3cde12a123f26b196ef3744f05e5a849bbb89f3b295c04bc96d114ccec37f756"}, "downloads": -1, "filename": "gwf_target_group-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a0199c39f40c8d0b2eafba71d9d68f6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5102, "upload_time": "2019-12-09T17:13:22", "upload_time_iso_8601": "2019-12-09T17:13:22.938777Z", "url": "https://files.pythonhosted.org/packages/84/34/eb3bee41d8cc2a299860a54ac9302bd6a95f0b686638c5f793090a1c33af/gwf_target_group-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "48bb652387cba537618c615cee011177", "sha256": "c9d1c355b06291be8b83e5f8be35aefcd727d52cfa7eca38377516ab36891067"}, "downloads": -1, "filename": "gwf_target_group-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "48bb652387cba537618c615cee011177", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18527, "upload_time": "2019-12-10T15:57:21", "upload_time_iso_8601": "2019-12-10T15:57:21.074965Z", "url": "https://files.pythonhosted.org/packages/b5/41/27d82171e1e1d36ff4b134affda0c91f2fea3f7509e95898f9698766280e/gwf_target_group-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ebe5236e8da87ed3ca9e0f88180b84c", "sha256": "72c8fffb4ac23edce55d7fca54012e7db34825095b99c640b29acbf48b133470"}, "downloads": -1, "filename": "gwf_target_group-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3ebe5236e8da87ed3ca9e0f88180b84c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6088, "upload_time": "2019-12-10T15:57:24", "upload_time_iso_8601": "2019-12-10T15:57:24.390778Z", "url": "https://files.pythonhosted.org/packages/38/d0/b27fba3d7ca354d60275a1ff83b366d8dfd0988c4efad5d7f8779051a0ba/gwf_target_group-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48bb652387cba537618c615cee011177", "sha256": "c9d1c355b06291be8b83e5f8be35aefcd727d52cfa7eca38377516ab36891067"}, "downloads": -1, "filename": "gwf_target_group-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "48bb652387cba537618c615cee011177", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18527, "upload_time": "2019-12-10T15:57:21", "upload_time_iso_8601": "2019-12-10T15:57:21.074965Z", "url": "https://files.pythonhosted.org/packages/b5/41/27d82171e1e1d36ff4b134affda0c91f2fea3f7509e95898f9698766280e/gwf_target_group-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ebe5236e8da87ed3ca9e0f88180b84c", "sha256": "72c8fffb4ac23edce55d7fca54012e7db34825095b99c640b29acbf48b133470"}, "downloads": -1, "filename": "gwf_target_group-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3ebe5236e8da87ed3ca9e0f88180b84c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6088, "upload_time": "2019-12-10T15:57:24", "upload_time_iso_8601": "2019-12-10T15:57:24.390778Z", "url": "https://files.pythonhosted.org/packages/38/d0/b27fba3d7ca354d60275a1ff83b366d8dfd0988c4efad5d7f8779051a0ba/gwf_target_group-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:06 2020"}