{"info": {"author": "Md Nazrul Islam", "author_email": "email2nazrul@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.0", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": ".. image:: https://img.shields.io/pypi/status/collective.recipe.vscode.svg\n    :target: https://pypi.org/project/collective.recipe.vscode/\n    :alt: Package Status\n\n.. image:: https://travis-ci.org/nazrulworld/collective.recipe.vscode.svg?branch=master\n    :target: https://travis-ci.org/nazrulworld/collective.recipe.vscode\n    :alt: Travis Build Status\n\n.. image:: https://coveralls.io/repos/github/nazrulworld/collective.recipe.vscode/badge.svg?branch=master\n    :target: https://coveralls.io/github/nazrulworld/collective.recipe.vscode?branch=master\n    :alt: Test Coverage\n.. image:: https://img.shields.io/pypi/pyversions/collective.recipe.vscode.svg\n    :target: https://pypi.org/project/collective.recipe.vscode/\n    :alt: Python Versions\n\n.. image:: https://img.shields.io/pypi/v/collective.recipe.vscode.svg\n    :target: https://pypi.org/project/collective.recipe.vscode/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/collective.recipe.vscode.svg\n    :target: https://pypi.org/project/collective.recipe.vscode/\n    :alt: License\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n.. contents::\n\nIntroduction\n============\n\n``collective.recipe.vscode`` is the buildout recipe for `Visual Studio Code`_ lover who wants python `autocomplete and intelliSense`_ features while developing python `Buildout`_ based project,\nnormally buildout eggs are not available in python path even if you provide virtualenv python path.\nThis tool will help not only adding eggs path as ``python extraPath`` but also you can manage per project basis vscode settings\nfor linter, autoformatting. \n\nA general question may arise that why we will use this tool, whether we can create `Visual Studio Code`_ project settings easily (we have better knowledge over `Visual Studio Code`_ configuration)?\nWell i completely agree with you, but if you want to get benefited from  `Visual Studio Code`_ autocompletion feature (basically I am lover of autocompletion), you have to add all eggs links and it is hard to manage eggs links manually\nif the size of project is big (think about any `Plone`_ powered project),\nbeside it is good practice allways use project specific linter path. For example my global ``flake8`` linter doesn't work\nfor my python3 project!\n\nInstallation\n============\n\nInstall ``collective.recipe.vscode`` is simple enough, just need to create a section for ``vscode`` to your buildout.\nBefore using ``collective.recipe.vscode``, if you are going to use linter feature, make those are added in eggs section or globally installed. \n\n    Example Buildout::\n\n        [buildout]\n        parts += vscode\n\n        [vscode]\n        recipe = collective.recipe.vscode\n        eggs = ${buildout:eggs}\n        flake8-enabled = True\n        flake8-path = ${buildout:directory}/bin/flake8\n        black-enabled = True\n        black-args = ----line-length 88\n\nAvailable Options\n-----------------\n\neggs\n    Required: Yes\n\n    Default: None\n\n    Your project's list of eggs, those are going to be added as extra path for `autocomplete and intelliSense`_.\n\npython-path\n    Required: No\n\n    Default: ``collective.recipe.vscode`` will find current python executable path.\n\n    The python executable path for current project, if you are using virtual environment then should be that python path. FYI: ${home} and ${project} variable should work.\n\nflake8-enabled\n\n    Required: No\n\n    Default: False\n\n    Flag that indicates flake8 based linting. \n\nflake8-path\n    Required: No\n\n    Default: try to find flake8 executable path automatically.\n\nflake8-args\n    Required: No\n\n    Default: \"\"\n\n\npylint-enabled\n\n    Required: No\n    Default: False\n\npylint-path\n    Required: No\n\n    Default: try to find pylint executable path automatically.\n\npylint-args\n    Required: No\n\n    Default:\n\npep8-enabled\n    Required: No\n\n    Default: False\n\npep8-path\n    Required: No\n\n    Default: try to find pep8 executable path automatically.\n\npep8-args\n    Required: No\n\n    Default: \"\"\n\njedi-enabled\n    Required: No\n\n    Default: False\n\njedi-path\n    Required: No\n\n    Default: \"\"\n\nomelette-location\n    Required: No\n\n    Default: ${buildout:directory}/parts/omelette - the default omelette location.\n\nautocomplete-use-omelette\n    Required: No\n\n    Default: False\n\nblack-enabled\n    Required: No\n\n    Default: False\n\nblack-path\n    Required: No\n\n    Default: try to find black executable path automatically.\n\n    You could provide buildout specific black executable. It is very flexible way to avoid using global pylint.\n    Example of relative path usecase:\n    i.) `${buildout:directory}/bin/black`\n    ii.) `$project_path/bin/black`\n    iii.) `./bin/black`\n    iv.) `~/path/bin/black`\n\nblack-args\n    Required: No\n\n    Default: ''\n\nisort-enabled\n    Required: No\n\n    Default: False\n\n    Flag that indicates isort is enabled. \n\nisort-path\n    Required: No\n\n    Default: try to find isort executable path automatically.\n\nisort-args\n    Required: No\n\n    Default: ''\n\nignore-develop\n    Required: No\n\n    Default: False\n\n    If you don't want development eggs, should go for autocompletion.\n\nignores\n    Required: No\n\n    Default: \"\"\n\n    If you want specific eggs should not go for autocompletion.\n\npackages\n    Required: No\n\n    Default: \"\"\n\n    Location of some python scripts or non standard modules (don't have setup file), you want to be in system path.\n\ngenerate-envfile\n    Required: No\n\n    Default: false\n\n    Generate .env file to add eggs to PYTHONPATH\n\nLinks\n=====\n\nCode repository:\n\n    https://github.com/nazrulworld/collective.recipe.vscode\n\nContinuous Integration:\n\n    https://travis-ci.org/nazrulworld/collective.recipe.vscode\n\nIssue Tracker:\n\n    https://github.com/nazrulworld/collective.recipe.vscode/issues\n\n\n\n.. _`Visual Studio Code`: https://code.visualstudio.com/\n.. _`Buildout`: http://www.buildout.org/en/latest/\n.. _`Plone`: https://plone.org/\n.. _`Flake8`: https://pypi.python.org/pypi/flake8\n.. _`Python`: https://www.python.org/\n.. _`autocomplete and intelliSense`: https://code.visualstudio.com/docs/languages/python#_autocomplete-and-intellisense\n\n\nExample Usage\n=============\n\nInstall  vscode recipe with stndard settings::\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop =\n    ...     %(test_dir)s/develop/vscodetest_pkg1\n    ... eggs =\n    ...     vscodetest_pkg1\n    ...     zc.recipe.egg\n    ...     zc.buildout\n    ... parts = vscode\n    ...\n    ... [vscode]\n    ... recipe = collective.recipe.vscode\n    ... packages = %(test_dir)s/Products\n    ... ignore-develop = False\n    ... eggs = ${buildout:eggs}\n    ... flake8-enabled = True\n    ... flake8-path = ${buildout:directory}/bin/flake8\n    ... black-enabled = True\n    ... black-path = $project_path/bin/black\n    ... black-args = --line-length 88 \n    ...              --skip-string-normalization\n    ... \"\"\" % globals())\n    >>> output_lower = system(buildout + ' -c buildout.cfg').lower()\n    >>> \"installing vscode.\" in output_lower\n    True\n    >>> 'tests/develop/vscodetest_pkg1' in output_lower\n    True\n    >>> ls(sample_buildout)\n    -  .installed.cfg\n    d  .vscode\n    d  bin\n    -  buildout.cfg\n    d  develop-eggs\n    d  eggs\n    d  parts\n    <BLANKLINE>\n    >>> import json\n    >>> import os\n    >>> from collective.recipe.vscode.recipes import mappings\n    >>> settings_dir = os.path.join(sample_buildout, \".vscode\")\n    >>> vsc_settings = json.loads(read(settings_dir, 'settings.json'))\n    >>> len(vsc_settings[mappings['autocomplete-extrapaths']]) == 4\n    True\n    >>> mappings['flake8-enabled'] in vsc_settings\n    True\n    >>> vsc_settings[mappings['formatting-provider']] == \"black\"\n    True\n\nVS Code settings with all default options::\n    >>> os.unlink(os.path.join(settings_dir, 'settings.json'))\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... develop =\n    ...     %(test_dir)s/develop/vscodetest_pkg1\n    ... eggs =\n    ...     vscodetest_pkg1\n    ...     zc.recipe.egg\n    ... parts = vscode\n    ...\n    ... [vscode]\n    ... recipe = collective.recipe.vscode\n    ... eggs = ${buildout:eggs}\n    ... \"\"\" % globals())\n    >>> output = system(buildout + ' -c buildout.cfg').lower()\n    >>> vsc_settings = json.loads(read(settings_dir, 'settings.json'))\n    >>> mappings['flake8-path'] not in vsc_settings\n    True\n    >>> len(vsc_settings[mappings['autocomplete-extrapaths']]) == 3\n    True\n\nContributors\n============\n\n- Md Nazrul Islam<email2nazrul@gmail.com>, Original Author.\n- Matteo Parrucci\n\n\nChangelog\n=========\n\n0.1.4 (2019-05-28)\n------------------\n\n- Issue#3 `Fixed  typo <https://github.com/nazrulworld/collective.recipe.vscode/issues/3>`_ [parruc]\n- Issue#4 `Documented isort <https://github.com/nazrulworld/collective.recipe.vscode/issues/4>`_ [parruc]\n- Issue#5 `Automatic .env file generation <https://github.com/nazrulworld/collective.recipe.vscode/issues/5>`_ [parruc]\n\n\n\n0.1.3 (2019-03-12)\n------------------\n\nBug fixes\n\n- Issue#2 `Linter disabling simply not working <https://github.com/nazrulworld/collective.recipe.vscode/issues/2>`_\n\n\n0.1.2 (2019-02-14)\n------------------\n\nNew features\n\n- default ``files.associations`` and ``files.exclude`` for python file now will be automatically included\n  if those are not in existing ``settings.json``\n\nBug fixes\n\n- Normally buildout removed generated file/directory first if exists, that's why previously ``settings.json`` file \n  removed and ultimately existing settings were lost! [nazrulworld]\n\n\n0.1.1 (2019-02-11)\n------------------\n\nBug fixes\n\n- Issue#1 `pep8 enabling configuration added even not mentioned in buildout <https://github.com/nazrulworld/collective.recipe.vscode/issues/1>`_\n\n- Open existing settings file (mode was missing while opening file)\n\n\n0.1.0 (2019-02-10)\n------------------\n\n- Initial release.\n  [nazrulworld]\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nazrulworld/collective.recipe.vscode", "keywords": "python buildout plone vscode jedi sublimelinter buildout-recipe anaconda", "license": "GPL version 2", "maintainer": "", "maintainer_email": "", "name": "collective.recipe.vscode", "package_url": "https://pypi.org/project/collective.recipe.vscode/", "platform": "", "project_url": "https://pypi.org/project/collective.recipe.vscode/", "project_urls": {"Homepage": "https://github.com/nazrulworld/collective.recipe.vscode"}, "release_url": "https://pypi.org/project/collective.recipe.vscode/0.1.4/", "requires_dist": ["setuptools", "zc.buildout", "zc.recipe.egg", "zope.testing ; extra == 'test'", "zc.buildout[test] ; extra == 'test'", "zc.recipe.egg ; extra == 'test'"], "requires_python": "", "summary": "Visual Studio Code configuration for buildout-based Python projects", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/collective.recipe.vscode/\" rel=\"nofollow\"><img alt=\"Package Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60f2965f236ad40733d8e4727012db1a1867b01f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f636f6c6c6563746976652e7265636970652e7673636f64652e737667\"></a>\n<a href=\"https://travis-ci.org/nazrulworld/collective.recipe.vscode\" rel=\"nofollow\"><img alt=\"Travis Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41fb96d84af3344fd7cc11fe946e4642f685a7a3/68747470733a2f2f7472617669732d63692e6f72672f6e617a72756c776f726c642f636f6c6c6563746976652e7265636970652e7673636f64652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/nazrulworld/collective.recipe.vscode?branch=master\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec6ef77b4b8fae66e56a1184ce61c9dbda8bcdbe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6e617a72756c776f726c642f636f6c6c6563746976652e7265636970652e7673636f64652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/collective.recipe.vscode/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a3b9ba2ff25a00cb6827aac87ee19a8424a1720/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f6c6c6563746976652e7265636970652e7673636f64652e737667\"></a>\n<a href=\"https://pypi.org/project/collective.recipe.vscode/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/539cfd9c720feeec3f57b7f6e631d30e93a4bf90/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6c6c6563746976652e7265636970652e7673636f64652e737667\"></a>\n<a href=\"https://pypi.org/project/collective.recipe.vscode/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1998144b4843b629ba9eb554a03bfe516f0c21b9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636f6c6c6563746976652e7265636970652e7673636f64652e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id6\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" id=\"id7\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#available-options\" id=\"id8\" rel=\"nofollow\">Available Options</a></li>\n</ul>\n</li>\n<li><a href=\"#links\" id=\"id9\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#example-usage\" id=\"id10\" rel=\"nofollow\">Example Usage</a></li>\n<li><a href=\"#contributors\" id=\"id11\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#changelog\" id=\"id12\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id13\" rel=\"nofollow\">0.1.4 (2019-05-28)</a></li>\n<li><a href=\"#id2\" id=\"id14\" rel=\"nofollow\">0.1.3 (2019-03-12)</a></li>\n<li><a href=\"#id3\" id=\"id15\" rel=\"nofollow\">0.1.2 (2019-02-14)</a></li>\n<li><a href=\"#id4\" id=\"id16\" rel=\"nofollow\">0.1.1 (2019-02-11)</a></li>\n<li><a href=\"#id5\" id=\"id17\" rel=\"nofollow\">0.1.0 (2019-02-10)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Introduction</a></h2>\n<p><tt>collective.recipe.vscode</tt> is the buildout recipe for <a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> lover who wants python <a href=\"https://code.visualstudio.com/docs/languages/python#_autocomplete-and-intellisense\" rel=\"nofollow\">autocomplete and intelliSense</a> features while developing python <a href=\"http://www.buildout.org/en/latest/\" rel=\"nofollow\">Buildout</a> based project,\nnormally buildout eggs are not available in python path even if you provide virtualenv python path.\nThis tool will help not only adding eggs path as <tt>python extraPath</tt> but also you can manage per project basis vscode settings\nfor linter, autoformatting.</p>\n<p>A general question may arise that why we will use this tool, whether we can create <a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> project settings easily (we have better knowledge over <a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> configuration)?\nWell i completely agree with you, but if you want to get benefited from  <a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> autocompletion feature (basically I am lover of autocompletion), you have to add all eggs links and it is hard to manage eggs links manually\nif the size of project is big (think about any <a href=\"https://plone.org/\" rel=\"nofollow\">Plone</a> powered project),\nbeside it is good practice allways use project specific linter path. For example my global <tt>flake8</tt> linter doesn\u2019t work\nfor my python3 project!</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Installation</a></h2>\n<p>Install <tt>collective.recipe.vscode</tt> is simple enough, just need to create a section for <tt>vscode</tt> to your buildout.\nBefore using <tt>collective.recipe.vscode</tt>, if you are going to use linter feature, make those are added in eggs section or globally installed.</p>\n<blockquote>\n<p>Example Buildout:</p>\n<pre>[buildout]\nparts += vscode\n\n[vscode]\nrecipe = collective.recipe.vscode\neggs = ${buildout:eggs}\nflake8-enabled = True\nflake8-path = ${buildout:directory}/bin/flake8\nblack-enabled = True\nblack-args = ----line-length 88\n</pre>\n</blockquote>\n<div id=\"available-options\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Available Options</a></h3>\n<dl>\n<dt>eggs</dt>\n<dd><p>Required: Yes</p>\n<p>Default: None</p>\n<p>Your project\u2019s list of eggs, those are going to be added as extra path for <a href=\"https://code.visualstudio.com/docs/languages/python#_autocomplete-and-intellisense\" rel=\"nofollow\">autocomplete and intelliSense</a>.</p>\n</dd>\n<dt>python-path</dt>\n<dd><p>Required: No</p>\n<p>Default: <tt>collective.recipe.vscode</tt> will find current python executable path.</p>\n<p>The python executable path for current project, if you are using virtual environment then should be that python path. FYI: ${home} and ${project} variable should work.</p>\n</dd>\n</dl>\n<p>flake8-enabled</p>\n<blockquote>\n<p>Required: No</p>\n<p>Default: False</p>\n<p>Flag that indicates flake8 based linting.</p>\n</blockquote>\n<dl>\n<dt>flake8-path</dt>\n<dd><p>Required: No</p>\n<p>Default: try to find flake8 executable path automatically.</p>\n</dd>\n<dt>flake8-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n</dd>\n</dl>\n<p>pylint-enabled</p>\n<blockquote>\nRequired: No\nDefault: False</blockquote>\n<dl>\n<dt>pylint-path</dt>\n<dd><p>Required: No</p>\n<p>Default: try to find pylint executable path automatically.</p>\n</dd>\n<dt>pylint-args</dt>\n<dd><p>Required: No</p>\n<p>Default:</p>\n</dd>\n<dt>pep8-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n</dd>\n<dt>pep8-path</dt>\n<dd><p>Required: No</p>\n<p>Default: try to find pep8 executable path automatically.</p>\n</dd>\n<dt>pep8-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n</dd>\n<dt>jedi-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n</dd>\n<dt>jedi-path</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n</dd>\n<dt>omelette-location</dt>\n<dd><p>Required: No</p>\n<p>Default: ${buildout:directory}/parts/omelette - the default omelette location.</p>\n</dd>\n<dt>autocomplete-use-omelette</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n</dd>\n<dt>black-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n</dd>\n<dt>black-path</dt>\n<dd><p>Required: No</p>\n<p>Default: try to find black executable path automatically.</p>\n<p>You could provide buildout specific black executable. It is very flexible way to avoid using global pylint.\nExample of relative path usecase:\ni.) <cite>${buildout:directory}/bin/black</cite>\nii.) <cite>$project_path/bin/black</cite>\niii.) <cite>./bin/black</cite>\niv.) <cite>~/path/bin/black</cite></p>\n</dd>\n<dt>black-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n</dd>\n<dt>isort-enabled</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>Flag that indicates isort is enabled.</p>\n</dd>\n<dt>isort-path</dt>\n<dd><p>Required: No</p>\n<p>Default: try to find isort executable path automatically.</p>\n</dd>\n<dt>isort-args</dt>\n<dd><p>Required: No</p>\n<p>Default: \u2018\u2019</p>\n</dd>\n<dt>ignore-develop</dt>\n<dd><p>Required: No</p>\n<p>Default: False</p>\n<p>If you don\u2019t want development eggs, should go for autocompletion.</p>\n</dd>\n<dt>ignores</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n<p>If you want specific eggs should not go for autocompletion.</p>\n</dd>\n<dt>packages</dt>\n<dd><p>Required: No</p>\n<p>Default: \u201c\u201d</p>\n<p>Location of some python scripts or non standard modules (don\u2019t have setup file), you want to be in system path.</p>\n</dd>\n<dt>generate-envfile</dt>\n<dd><p>Required: No</p>\n<p>Default: false</p>\n<p>Generate .env file to add eggs to PYTHONPATH</p>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"links\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Links</a></h2>\n<p>Code repository:</p>\n<blockquote>\n<a href=\"https://github.com/nazrulworld/collective.recipe.vscode\" rel=\"nofollow\">https://github.com/nazrulworld/collective.recipe.vscode</a></blockquote>\n<p>Continuous Integration:</p>\n<blockquote>\n<a href=\"https://travis-ci.org/nazrulworld/collective.recipe.vscode\" rel=\"nofollow\">https://travis-ci.org/nazrulworld/collective.recipe.vscode</a></blockquote>\n<p>Issue Tracker:</p>\n<blockquote>\n<a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues\" rel=\"nofollow\">https://github.com/nazrulworld/collective.recipe.vscode/issues</a></blockquote>\n</div>\n<div id=\"example-usage\">\n<h2><a href=\"#id10\" rel=\"nofollow\">Example Usage</a></h2>\n<p>Install  vscode recipe with stndard settings:</p>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop =\n...     %(test_dir)s/develop/vscodetest_pkg1\n... eggs =\n...     vscodetest_pkg1\n...     zc.recipe.egg\n...     zc.buildout\n... parts = vscode\n...\n... [vscode]\n... recipe = collective.recipe.vscode\n... packages = %(test_dir)s/Products\n... ignore-develop = False\n... eggs = ${buildout:eggs}\n... flake8-enabled = True\n... flake8-path = ${buildout:directory}/bin/flake8\n... black-enabled = True\n... black-path = $project_path/bin/black\n... black-args = --line-length 88\n...              --skip-string-normalization\n... \"\"\" % globals())\n&gt;&gt;&gt; output_lower = system(buildout + ' -c buildout.cfg').lower()\n&gt;&gt;&gt; \"installing vscode.\" in output_lower\nTrue\n&gt;&gt;&gt; 'tests/develop/vscodetest_pkg1' in output_lower\nTrue\n&gt;&gt;&gt; ls(sample_buildout)\n-  .installed.cfg\nd  .vscode\nd  bin\n-  buildout.cfg\nd  develop-eggs\nd  eggs\nd  parts\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; from collective.recipe.vscode.recipes import mappings\n&gt;&gt;&gt; settings_dir = os.path.join(sample_buildout, \".vscode\")\n&gt;&gt;&gt; vsc_settings = json.loads(read(settings_dir, 'settings.json'))\n&gt;&gt;&gt; len(vsc_settings[mappings['autocomplete-extrapaths']]) == 4\nTrue\n&gt;&gt;&gt; mappings['flake8-enabled'] in vsc_settings\nTrue\n&gt;&gt;&gt; vsc_settings[mappings['formatting-provider']] == \"black\"\nTrue\n</pre>\n<dl>\n<dt>VS Code settings with all default options::</dt>\n<dd><pre>&gt;&gt;&gt; os.unlink(os.path.join(settings_dir, 'settings.json'))\n&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop =\n...     %(test_dir)s/develop/vscodetest_pkg1\n... eggs =\n...     vscodetest_pkg1\n...     zc.recipe.egg\n... parts = vscode\n...\n... [vscode]\n... recipe = collective.recipe.vscode\n... eggs = ${buildout:eggs}\n... \"\"\" % globals())\n&gt;&gt;&gt; output = system(buildout + ' -c buildout.cfg').lower()\n&gt;&gt;&gt; vsc_settings = json.loads(read(settings_dir, 'settings.json'))\n&gt;&gt;&gt; mappings['flake8-path'] not in vsc_settings\nTrue\n&gt;&gt;&gt; len(vsc_settings[mappings['autocomplete-extrapaths']]) == 3\nTrue\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Contributors</a></h2>\n<ul>\n<li>Md Nazrul Islam&lt;<a href=\"mailto:email2nazrul%40gmail.com\">email2nazrul<span>@</span>gmail<span>.</span>com</a>&gt;, Original Author.</li>\n<li>Matteo Parrucci</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id12\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id13\" rel=\"nofollow\">0.1.4 (2019-05-28)</a></h3>\n<ul>\n<li>Issue#3 <a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues/3\" rel=\"nofollow\">Fixed  typo</a> [parruc]</li>\n<li>Issue#4 <a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues/4\" rel=\"nofollow\">Documented isort</a> [parruc]</li>\n<li>Issue#5 <a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues/5\" rel=\"nofollow\">Automatic .env file generation</a> [parruc]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id14\" rel=\"nofollow\">0.1.3 (2019-03-12)</a></h3>\n<p>Bug fixes</p>\n<ul>\n<li>Issue#2 <a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues/2\" rel=\"nofollow\">Linter disabling simply not working</a></li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.1.2 (2019-02-14)</a></h3>\n<p>New features</p>\n<ul>\n<li>default <tt>files.associations</tt> and <tt>files.exclude</tt> for python file now will be automatically included\nif those are not in existing <tt>settings.json</tt></li>\n</ul>\n<p>Bug fixes</p>\n<ul>\n<li>Normally buildout removed generated file/directory first if exists, that\u2019s why previously <tt>settings.json</tt> file\nremoved and ultimately existing settings were lost! [nazrulworld]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id16\" rel=\"nofollow\">0.1.1 (2019-02-11)</a></h3>\n<p>Bug fixes</p>\n<ul>\n<li>Issue#1 <a href=\"https://github.com/nazrulworld/collective.recipe.vscode/issues/1\" rel=\"nofollow\">pep8 enabling configuration added even not mentioned in buildout</a></li>\n<li>Open existing settings file (mode was missing while opening file)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id17\" rel=\"nofollow\">0.1.0 (2019-02-10)</a></h3>\n<ul>\n<li>Initial release.\n[nazrulworld]</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5326550, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a9609b13136f4b2c2651810086f5d1f8", "sha256": "ecda318b416b06b4185ea1cd36bb7f41c45d2da11f1765efb259195d00770af5"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a9609b13136f4b2c2651810086f5d1f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18259, "upload_time": "2019-02-10T17:24:11", "upload_time_iso_8601": "2019-02-10T17:24:11.217844Z", "url": "https://files.pythonhosted.org/packages/9c/7c/940735ffc7e54504827eb9d451371b7a3470c2d07b0711ba8122b5492605/collective.recipe.vscode-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "748bb6347e08a38add65404d6553c7f1", "sha256": "99fc98c9135a3d5b21ecbf00edb0462fffdceda33c601079affd258ac744bbd4"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.0.tar.gz", "has_sig": false, "md5_digest": "748bb6347e08a38add65404d6553c7f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16361, "upload_time": "2019-02-10T17:24:13", "upload_time_iso_8601": "2019-02-10T17:24:13.674563Z", "url": "https://files.pythonhosted.org/packages/f1/51/1850accf4bb9f0f871f868a2d9876da438dd4c512c9cc4b426fd37a92ddf/collective.recipe.vscode-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d2bd317192d4c2445d567ee359e228fc", "sha256": "218dd268d891c500e8615b287205a6a30e91b85dadf327fd2784ccf2c6995467"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d2bd317192d4c2445d567ee359e228fc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18431, "upload_time": "2019-02-11T07:24:15", "upload_time_iso_8601": "2019-02-11T07:24:15.100264Z", "url": "https://files.pythonhosted.org/packages/d1/d3/bd3f162a7c07123dce9f9924342a0cc034aabe0c6d2a1014733583cfb20b/collective.recipe.vscode-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4397acdf64016a8773e6462ec2c6bce4", "sha256": "bf8d5b26a229fb594522ad94eaf46a4ac89e6a2577170596011f52e66e6c61e5"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4397acdf64016a8773e6462ec2c6bce4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16658, "upload_time": "2019-02-11T07:24:17", "upload_time_iso_8601": "2019-02-11T07:24:17.190436Z", "url": "https://files.pythonhosted.org/packages/42/25/d791ecb9175428df5ef527f33ebe28f33942c5d2d20be7f4276fad0a13fc/collective.recipe.vscode-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fb193aa206daafae2abdb5314cf175e2", "sha256": "05a387c4dd7b9d8aae74a947fe0e7ef7188a3ba0e6e9f1567a43cff42f605c15"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb193aa206daafae2abdb5314cf175e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19100, "upload_time": "2019-02-14T15:34:11", "upload_time_iso_8601": "2019-02-14T15:34:11.358940Z", "url": "https://files.pythonhosted.org/packages/a1/94/e82ffbcffe5d8e9db39d77cbcf9af200466da70d7e58984bf152d6ec505d/collective.recipe.vscode-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5c6bc20819aa114d7ce3fa125f131ed", "sha256": "22051940fbe2a62f3be9c416682741607be6cedf3f4366e2d95b5e074aeca985"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d5c6bc20819aa114d7ce3fa125f131ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17490, "upload_time": "2019-02-14T15:34:13", "upload_time_iso_8601": "2019-02-14T15:34:13.926594Z", "url": "https://files.pythonhosted.org/packages/41/2e/77e43b02d8c53ff2b0b2bac932fde27efd988c404d6eabdf400fca35c7bf/collective.recipe.vscode-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b712637bef89e3611ab146868b1a8e0d", "sha256": "a040663828fde209bbc4e44e619696fd34c98fe875d28c1a07021af8dff8d948"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b712637bef89e3611ab146868b1a8e0d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19719, "upload_time": "2019-03-12T08:41:29", "upload_time_iso_8601": "2019-03-12T08:41:29.386785Z", "url": "https://files.pythonhosted.org/packages/a3/f9/804a37db6df8499f65fb6489502c417ab07c7371ab34546b6937709636d8/collective.recipe.vscode-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72b91054a64dd82b708070651525a8aa", "sha256": "7a6df2bb575023261fa94e6d95a1ef7ffd6410895ece7234b6245664a24f9625"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.3.tar.gz", "has_sig": false, "md5_digest": "72b91054a64dd82b708070651525a8aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18133, "upload_time": "2019-03-12T08:41:31", "upload_time_iso_8601": "2019-03-12T08:41:31.440559Z", "url": "https://files.pythonhosted.org/packages/41/6c/256f29927584457d990d2e1e0ba63397936f6ab0c89a47faf4a2d66ab5f5/collective.recipe.vscode-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "345785acc4ae724f73baaee76e3b6232", "sha256": "aa5e81e185e7556123652fc06bedd687048324bdc3a6537993f3e3b1af7368d0"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "345785acc4ae724f73baaee76e3b6232", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20099, "upload_time": "2019-05-28T12:27:53", "upload_time_iso_8601": "2019-05-28T12:27:53.166784Z", "url": "https://files.pythonhosted.org/packages/2a/58/2f1e6c1eff8eb71142d31c1cb0f882001b119761498e95ef34c49814c245/collective.recipe.vscode-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae2557140a5d5ede3582f2cce71ffc59", "sha256": "6ed28eea47efcbc21318d116937fac3da2fa57d7141d3d3e1c9d46f1a6da08f6"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ae2557140a5d5ede3582f2cce71ffc59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18811, "upload_time": "2019-05-28T12:27:56", "upload_time_iso_8601": "2019-05-28T12:27:56.084386Z", "url": "https://files.pythonhosted.org/packages/03/cb/ef136a348051ce45b929de2a26a6a9299b8758ff1ce824d5a1a63e934282/collective.recipe.vscode-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "345785acc4ae724f73baaee76e3b6232", "sha256": "aa5e81e185e7556123652fc06bedd687048324bdc3a6537993f3e3b1af7368d0"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "345785acc4ae724f73baaee76e3b6232", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20099, "upload_time": "2019-05-28T12:27:53", "upload_time_iso_8601": "2019-05-28T12:27:53.166784Z", "url": "https://files.pythonhosted.org/packages/2a/58/2f1e6c1eff8eb71142d31c1cb0f882001b119761498e95ef34c49814c245/collective.recipe.vscode-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae2557140a5d5ede3582f2cce71ffc59", "sha256": "6ed28eea47efcbc21318d116937fac3da2fa57d7141d3d3e1c9d46f1a6da08f6"}, "downloads": -1, "filename": "collective.recipe.vscode-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ae2557140a5d5ede3582f2cce71ffc59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18811, "upload_time": "2019-05-28T12:27:56", "upload_time_iso_8601": "2019-05-28T12:27:56.084386Z", "url": "https://files.pythonhosted.org/packages/03/cb/ef136a348051ce45b929de2a26a6a9299b8758ff1ce824d5a1a63e934282/collective.recipe.vscode-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:53 2020"}