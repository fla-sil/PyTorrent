{"info": {"author": "Marlysys", "author_email": "rsaikali@marlysys.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Utilities"], "description": "=======================\nJinjaLive documentation\n=======================\n\nWelcome to JinjaLive documentation!\n\nJinjaLive is a project created by Marlysys.\n\nJinjaLive can be used to test your Jinja templates.\nIt renders a Jinja template with given variables to a rendered output. As simple as that !\n\n.. contents::\n\n\nInstallation\n============\n\nJinjaLive is available on ``pip``:\n\n.. code-block:: bash\n\n    pip install jinjalive\n\nUsage\n=====\n\nCommand-line usage\n------------------\n\nGiven a context file and a template file, JinjaLive will generate the output file:\n\n.. code-block:: bash\n\n    jinjalive -cf <context_file> -tf <template_file> -of <output_file>\n\nWeb application\n---------------\n\nLaunch the JinjaLive server with:\n\n.. code-block:: bash\n\n    jinjalive-server\n\nOpen your browser to ``http://<your_ip_address>:8888``\n\nTests\n=====\n\nJinjaLive embeds unittests to ensure both functionnalities coverage but also Python code quality.\n\nThe test suite can be launched with ``tox``:\n\n.. code-block:: bash\n\n    cd jinjalive\n    sudo pip install -r test-requirements.txt\n    tox\n\n\nApache configuration (optional)\n===============================\n\nIf you want to serve the JinjaLive web application behind Apache, please use WSGI.\n\n.. code-block:: bash\n\n    sudo apt-get update\n    sudo apt-get install apache2 libapache2-mod-wsgi\n    sudo a2enmod wsgi\n    \nHere is a sample Apache virtualhost:\n\n.. code-block:: apacheconf\n\n    <VirtualHost *:80>\n\n        WSGIDaemonProcess jinjalive threads=5\n        WSGIScriptAlias /jinja /usr/local/lib/python2.7/dist-packages/jinjalive/jinjalive.wsgi\n    \n        <Directory /usr/local/lib/python2.7/dist-packages/jinjalive>\n            WSGIProcessGroup jinjalive\n            WSGIApplicationGroup %{GLOBAL}\n            WSGIScriptReloading On\n            Require all granted\n        </Directory>\n    \n        ErrorLog ${APACHE_LOG_DIR}/jinjalive.error.log\n        CustomLog ${APACHE_LOG_DIR}/jinjalive.access.log combined\n    \n    </VirtualHost>\n\nYour JinjaLive web application is now available under ``http://<your_ip_address>/jinja``.\n\nContributing\n============\n\nRequirements\n------------\n\nJinjaLive needs the following requirements:\n\n- `Python <https://www.python.org/>`_.\n- `Bower <http://bower.io/#install-bower>`_.\n\nNowadays, ``python`` should ever be present on your system, but ``bower`` usually requires proper installation.\n\n``bower`` requires ``nodejs``. Here is the full procedure to install bower for Ubuntu:\n\n.. code-block:: bash\n\n    sudo apt-get update\n    sudo apt-get install nodejs npm\n    sudo npm install -g bower\n    sudo ln -s /usr/bin/nodejs /usr/bin/node\n    \nGo to project directory:\n\n.. code-block:: bash\n\n    cd jinjalive\n\nInstall bower requirements:\n\n.. code-block:: bash\n\n    bower install\n\nInstall Python requirements and JinjaLive package with a virtualenv:\n\n.. code-block:: bash\n\n    mkvirtualenv jinjalive\n    pip install -r requirements.txt\n    python setup.py develop", "description_content_type": null, "docs_url": "https://pythonhosted.org/jinjalive/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.marlysys.com", "keywords": null, "license": "Apache", "maintainer": null, "maintainer_email": null, "name": "jinjalive", "package_url": "https://pypi.org/project/jinjalive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jinjalive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.marlysys.com"}, "release_url": "https://pypi.org/project/jinjalive/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "JinjaLive: Jinja rendering made easy", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Welcome to JinjaLive documentation!</p>\n<p>JinjaLive is a project created by Marlysys.</p>\n<p>JinjaLive can be used to test your Jinja templates.\nIt renders a Jinja template with given variables to a rendered output. As simple as that !</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#command-line-usage\" id=\"id3\" rel=\"nofollow\">Command-line usage</a></li>\n<li><a href=\"#web-application\" id=\"id4\" rel=\"nofollow\">Web application</a></li>\n</ul>\n</li>\n<li><a href=\"#tests\" id=\"id5\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#apache-configuration-optional\" id=\"id6\" rel=\"nofollow\">Apache configuration (optional)</a></li>\n<li><a href=\"#contributing\" id=\"id7\" rel=\"nofollow\">Contributing</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>JinjaLive is available on <tt>pip</tt>:</p>\n<pre>pip install jinjalive\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"command-line-usage\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Command-line usage</a></h3>\n<p>Given a context file and a template file, JinjaLive will generate the output file:</p>\n<pre>jinjalive -cf &lt;context_file&gt; -tf &lt;template_file&gt; -of &lt;output_file&gt;\n</pre>\n</div>\n<div id=\"web-application\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Web application</a></h3>\n<p>Launch the JinjaLive server with:</p>\n<pre>jinjalive-server\n</pre>\n<p>Open your browser to <tt><span class=\"pre\">http://&lt;your_ip_address&gt;:8888</span></tt></p>\n</div>\n</div>\n<div id=\"tests\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Tests</a></h2>\n<p>JinjaLive embeds unittests to ensure both functionnalities coverage but also Python code quality.</p>\n<p>The test suite can be launched with <tt>tox</tt>:</p>\n<pre><span class=\"nb\">cd</span> jinjalive\nsudo pip install -r test-requirements.txt\ntox\n</pre>\n</div>\n<div id=\"apache-configuration-optional\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Apache configuration (optional)</a></h2>\n<p>If you want to serve the JinjaLive web application behind Apache, please use WSGI.</p>\n<pre>sudo apt-get update\nsudo apt-get install apache2 libapache2-mod-wsgi\nsudo a2enmod wsgi\n</pre>\n<p>Here is a sample Apache virtualhost:</p>\n<pre><span class=\"nt\">&lt;VirtualHost</span> <span class=\"s\">*:80</span><span class=\"nt\">&gt;</span>\n\n    <span class=\"nb\">WSGIDaemonProcess</span> jinjalive threads=5\n    <span class=\"nb\">WSGIScriptAlias</span> <span class=\"sx\">/jinja</span> <span class=\"sx\">/usr/local/lib/python2.7/dist-packages/jinjalive/jinjalive.wsgi</span>\n\n    <span class=\"nt\">&lt;Directory</span> <span class=\"s\">/usr/local/lib/python2.7/dist-packages/jinjalive</span><span class=\"nt\">&gt;</span>\n        <span class=\"nb\">WSGIProcessGroup</span> jinjalive\n        <span class=\"nb\">WSGIApplicationGroup</span> %{GLOBAL}\n        <span class=\"nb\">WSGIScriptReloading</span> <span class=\"k\">On</span>\n        <span class=\"nb\">Require</span> <span class=\"k\">all</span> granted\n    <span class=\"nt\">&lt;/Directory&gt;</span>\n\n    <span class=\"nb\">ErrorLog</span> ${APACHE_LOG_DIR}/jinjalive.error.log\n    <span class=\"nb\">CustomLog</span> ${APACHE_LOG_DIR}/jinjalive.access.log combined\n\n<span class=\"nt\">&lt;/VirtualHost&gt;</span>\n</pre>\n<p>Your JinjaLive web application is now available under <tt><span class=\"pre\">http://&lt;your_ip_address&gt;/jinja</span></tt>.</p>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Contributing</a></h2>\n<h2 id=\"requirements\"><span class=\"section-subtitle\">Requirements</span></h2>\n<p>JinjaLive needs the following requirements:</p>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a>.</li>\n<li><a href=\"http://bower.io/#install-bower\" rel=\"nofollow\">Bower</a>.</li>\n</ul>\n<p>Nowadays, <tt>python</tt> should ever be present on your system, but <tt>bower</tt> usually requires proper installation.</p>\n<p><tt>bower</tt> requires <tt>nodejs</tt>. Here is the full procedure to install bower for Ubuntu:</p>\n<pre>sudo apt-get update\nsudo apt-get install nodejs npm\nsudo npm install -g bower\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n</pre>\n<p>Go to project directory:</p>\n<pre><span class=\"nb\">cd</span> jinjalive\n</pre>\n<p>Install bower requirements:</p>\n<pre>bower install\n</pre>\n<p>Install Python requirements and JinjaLive package with a virtualenv:</p>\n<pre>mkvirtualenv jinjalive\npip install -r requirements.txt\npython setup.py develop\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2007426, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "642c3ec8e67f9b78a09e2223b138abe6", "sha256": "0c11980a4dd916d0ab04a9114c66102d68566ad7bfa31a6ed0b7f108a51f184d"}, "downloads": -1, "filename": "jinjalive-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "642c3ec8e67f9b78a09e2223b138abe6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 3326541, "upload_time": "2016-03-14T16:43:21", "upload_time_iso_8601": "2016-03-14T16:43:21.214935Z", "url": "https://files.pythonhosted.org/packages/03/b7/85864dddddb16c42319c8e5fa0e25838dccf8593b02a222e944370dffe4b/jinjalive-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "395b6ec0cee889b334b9a219ae7303d6", "sha256": "11a68c40906e68fbd3afd30dba14ccf8ca13c7ac48610dac1f5da8927844f700"}, "downloads": -1, "filename": "jinjalive-0.2.0.tar.gz", "has_sig": false, "md5_digest": "395b6ec0cee889b334b9a219ae7303d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3359223, "upload_time": "2016-03-14T16:43:10", "upload_time_iso_8601": "2016-03-14T16:43:10.224779Z", "url": "https://files.pythonhosted.org/packages/11/32/45892b9ce10a0b6f79f99038c9238bf81b9d23469da061aad23f4beb1f19/jinjalive-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "642c3ec8e67f9b78a09e2223b138abe6", "sha256": "0c11980a4dd916d0ab04a9114c66102d68566ad7bfa31a6ed0b7f108a51f184d"}, "downloads": -1, "filename": "jinjalive-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "642c3ec8e67f9b78a09e2223b138abe6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 3326541, "upload_time": "2016-03-14T16:43:21", "upload_time_iso_8601": "2016-03-14T16:43:21.214935Z", "url": "https://files.pythonhosted.org/packages/03/b7/85864dddddb16c42319c8e5fa0e25838dccf8593b02a222e944370dffe4b/jinjalive-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "395b6ec0cee889b334b9a219ae7303d6", "sha256": "11a68c40906e68fbd3afd30dba14ccf8ca13c7ac48610dac1f5da8927844f700"}, "downloads": -1, "filename": "jinjalive-0.2.0.tar.gz", "has_sig": false, "md5_digest": "395b6ec0cee889b334b9a219ae7303d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3359223, "upload_time": "2016-03-14T16:43:10", "upload_time_iso_8601": "2016-03-14T16:43:10.224779Z", "url": "https://files.pythonhosted.org/packages/11/32/45892b9ce10a0b6f79f99038c9238bf81b9d23469da061aad23f4beb1f19/jinjalive-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:36 2020"}