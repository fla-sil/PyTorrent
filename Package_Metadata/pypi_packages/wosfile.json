{"info": {"author": "Raf Guns", "author_email": "raf.guns@uantwerpen.be", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# wosfile\n\n[![Build Status](https://travis-ci.org/rafguns/wosfile.svg?branch=master)](https://travis-ci.org/rafguns/wosfile)\n[![Coverage Status](https://coveralls.io/repos/rafguns/wosfile/badge.svg?branch=master&service=github)](https://coveralls.io/github/rafguns/wosfile?branch=master)\n\n**wosfile** is a Python package designed to read and handle data exported from Thomson Reuters Web of Science\u2122. It supports both tab-delimited files and so-called \u2018plain text\u2019 files.\n\nThe point of wosfile is to read export files from WoS and give you a simple data structure\u2014essentially a dict\u2014that can be further analyzed with tools available in standard Python or with third-party packages. If you're looking for a \u2018one-size-fits-all\u2019 solution, this is probably not it.\n\nPros:\n* It has no requirements beyond Python 3.6+ and the standard library.\n* Completely iterator-based, so useful for working with large datasets. At no point should we ever have more than one single record in memory.\n* Simple API: usually one needs just one function `wosfile.records_from()`.\n\nCons:\n* Pure Python, so might be slow.\n* At the moment, wosfile does little more than reading WoS files and generating *Record* objects for each record. While it does some niceties like parsing address fields, it does not have any analysis functionality.\n\n## Examples\n\nThese examples use a dataset exported from Web of Science in multiple separate files(the maximum number of exported records per file is 500).\n\n### Subject categories in our data\n\n```python\nimport glob\nimport wosfile\nfrom collections import Counter\n\nsubject_cats = Counter()\n# Create a list of all relevant files. Our folder may contain multiple export files.\nfiles = glob.glob(\"data/savedrecs*.txt\")\n\n# wosfile will read each file in the list in turn and yield each record\n# for further handling\nfor rec in wosfile.records_from(files):\n    # Records are very thin wrappers around a standard Python dict,\n    # whose keys are the WoS field tags.\n    # Here we look at the SC field (subject categories) and update our counter\n    # with the categories in each record.\n    subject_cats.update(rec.get(\"SC\"))\n\n# Show the five most common subject categories in the data and their number.\nprint(subject_cats.most_common(5))\n```\n\n### Citation network\n\nFor this example you will need the [NetworkX](http://networkx.github.io/) package. The data must be exported as \u2018Full Record and Cited References\u2019.\n\n```python\nimport networkx as nx\nimport wosfile\n\n# Create a directed network (empty at this point).\nG = nx.DiGraph()\nnodes_in_data = set()\n\nfor rec in wosfile.records_from(files):\n    # Each record has a record_id, a standard string uniquely identifying the reference.\n    nodes_in_data.add(rec.record_id)\n    # The CR field is a list of cited references. Each reference is formatted the same\n    # as a record_id. This means that we can add citation links by connecting the record_id\n    # to the reference.\n    for reference in rec.get(\"CR\", []):\n        G.add_edge(rec.record_id, reference)\n\n# At this point, our network also contains all references that were not in the original data.\n# The line below ensures that we only retain publications from the original data set.\nG.remove_nodes_from(set(G) - nodes_in_data)\n# Show some basic statistics and save as Pajek file for visualization and/or further analysis.\nprint(nx.info(G))\nnx.write_pajek(G, 'network.net')\n```\n\n## Other Python packages\n\nThe following packages also read WoS files (+ sometimes much more):\n* [WOS+](https://pypi.org/project/WOSplus/)\n* [metaknowledge](https://pypi.org/project/metaknowledge/)\n* [wostools](https://pypi.org/project/wostools/)\n\nOther packages query WoS directly through the API and/or by scraping the web interface:\n* [pywos](https://pypi.org/project/pywos/) (elsewhere called [wos-statistics](https://github.com/refraction-ray/wos-statistics))\n* [wos](https://pypi.org/project/wos/)\n* [wosclient](https://pypi.org/project/wosclient/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rafguns/wosfile", "keywords": "", "license": "New BSD License", "maintainer": "", "maintainer_email": "", "name": "wosfile", "package_url": "https://pypi.org/project/wosfile/", "platform": "any", "project_url": "https://pypi.org/project/wosfile/", "project_urls": {"Homepage": "http://github.com/rafguns/wosfile"}, "release_url": "https://pypi.org/project/wosfile/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Handle Thomson Reuters Web of Science\u2122 export files", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wosfile</h1>\n<p><a href=\"https://travis-ci.org/rafguns/wosfile\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74509f6e9a0e082ade68e3ac46ae8f44b5e588cd/68747470733a2f2f7472617669732d63692e6f72672f72616667756e732f776f7366696c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/rafguns/wosfile?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3944192d3011033ad0ddcc7655c9590d9845e9d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f72616667756e732f776f7366696c652f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a></p>\n<p><strong>wosfile</strong> is a Python package designed to read and handle data exported from Thomson Reuters Web of Science\u2122. It supports both tab-delimited files and so-called \u2018plain text\u2019 files.</p>\n<p>The point of wosfile is to read export files from WoS and give you a simple data structure\u2014essentially a dict\u2014that can be further analyzed with tools available in standard Python or with third-party packages. If you're looking for a \u2018one-size-fits-all\u2019 solution, this is probably not it.</p>\n<p>Pros:</p>\n<ul>\n<li>It has no requirements beyond Python 3.6+ and the standard library.</li>\n<li>Completely iterator-based, so useful for working with large datasets. At no point should we ever have more than one single record in memory.</li>\n<li>Simple API: usually one needs just one function <code>wosfile.records_from()</code>.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Pure Python, so might be slow.</li>\n<li>At the moment, wosfile does little more than reading WoS files and generating <em>Record</em> objects for each record. While it does some niceties like parsing address fields, it does not have any analysis functionality.</li>\n</ul>\n<h2>Examples</h2>\n<p>These examples use a dataset exported from Web of Science in multiple separate files(the maximum number of exported records per file is 500).</p>\n<h3>Subject categories in our data</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wosfile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n\n<span class=\"n\">subject_cats</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">()</span>\n<span class=\"c1\"># Create a list of all relevant files. Our folder may contain multiple export files.</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s2\">\"data/savedrecs*.txt\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wosfile will read each file in the list in turn and yield each record</span>\n<span class=\"c1\"># for further handling</span>\n<span class=\"k\">for</span> <span class=\"n\">rec</span> <span class=\"ow\">in</span> <span class=\"n\">wosfile</span><span class=\"o\">.</span><span class=\"n\">records_from</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Records are very thin wrappers around a standard Python dict,</span>\n    <span class=\"c1\"># whose keys are the WoS field tags.</span>\n    <span class=\"c1\"># Here we look at the SC field (subject categories) and update our counter</span>\n    <span class=\"c1\"># with the categories in each record.</span>\n    <span class=\"n\">subject_cats</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">rec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"SC\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Show the five most common subject categories in the data and their number.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">subject_cats</span><span class=\"o\">.</span><span class=\"n\">most_common</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre>\n<h3>Citation network</h3>\n<p>For this example you will need the <a href=\"http://networkx.github.io/\" rel=\"nofollow\">NetworkX</a> package. The data must be exported as \u2018Full Record and Cited References\u2019.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">wosfile</span>\n\n<span class=\"c1\"># Create a directed network (empty at this point).</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">DiGraph</span><span class=\"p\">()</span>\n<span class=\"n\">nodes_in_data</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">rec</span> <span class=\"ow\">in</span> <span class=\"n\">wosfile</span><span class=\"o\">.</span><span class=\"n\">records_from</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Each record has a record_id, a standard string uniquely identifying the reference.</span>\n    <span class=\"n\">nodes_in_data</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">rec</span><span class=\"o\">.</span><span class=\"n\">record_id</span><span class=\"p\">)</span>\n    <span class=\"c1\"># The CR field is a list of cited references. Each reference is formatted the same</span>\n    <span class=\"c1\"># as a record_id. This means that we can add citation links by connecting the record_id</span>\n    <span class=\"c1\"># to the reference.</span>\n    <span class=\"k\">for</span> <span class=\"n\">reference</span> <span class=\"ow\">in</span> <span class=\"n\">rec</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"CR\"</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n        <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"n\">rec</span><span class=\"o\">.</span><span class=\"n\">record_id</span><span class=\"p\">,</span> <span class=\"n\">reference</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># At this point, our network also contains all references that were not in the original data.</span>\n<span class=\"c1\"># The line below ensures that we only retain publications from the original data set.</span>\n<span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_nodes_from</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">nodes_in_data</span><span class=\"p\">)</span>\n<span class=\"c1\"># Show some basic statistics and save as Pajek file for visualization and/or further analysis.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">))</span>\n<span class=\"n\">nx</span><span class=\"o\">.</span><span class=\"n\">write_pajek</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">,</span> <span class=\"s1\">'network.net'</span><span class=\"p\">)</span>\n</pre>\n<h2>Other Python packages</h2>\n<p>The following packages also read WoS files (+ sometimes much more):</p>\n<ul>\n<li><a href=\"https://pypi.org/project/WOSplus/\" rel=\"nofollow\">WOS+</a></li>\n<li><a href=\"https://pypi.org/project/metaknowledge/\" rel=\"nofollow\">metaknowledge</a></li>\n<li><a href=\"https://pypi.org/project/wostools/\" rel=\"nofollow\">wostools</a></li>\n</ul>\n<p>Other packages query WoS directly through the API and/or by scraping the web interface:</p>\n<ul>\n<li><a href=\"https://pypi.org/project/pywos/\" rel=\"nofollow\">pywos</a> (elsewhere called <a href=\"https://github.com/refraction-ray/wos-statistics\" rel=\"nofollow\">wos-statistics</a>)</li>\n<li><a href=\"https://pypi.org/project/wos/\" rel=\"nofollow\">wos</a></li>\n<li><a href=\"https://pypi.org/project/wosclient/\" rel=\"nofollow\">wosclient</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6688984, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "5566990ec8f9e2cd0fde16dad80039fa", "sha256": "e9b9d6322ca32b2b11b6d2282c0418d08cce62e4280d7a329388c6afa8994be0"}, "downloads": -1, "filename": "wosfile-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5566990ec8f9e2cd0fde16dad80039fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8734, "upload_time": "2019-07-08T21:03:30", "upload_time_iso_8601": "2019-07-08T21:03:30.346016Z", "url": "https://files.pythonhosted.org/packages/5e/f6/832a89731b7a46a7dac55e3d208465cab71dc41d4611777947d17b14f7ba/wosfile-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2678141db1e108ef5ec09dd920497d06", "sha256": "18fac36a8e8a2bc2306aa86a997c512885fe57cf6a028ab83b23798f4f97cb13"}, "downloads": -1, "filename": "wosfile-0.4.1.tar.gz", "has_sig": false, "md5_digest": "2678141db1e108ef5ec09dd920497d06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6728, "upload_time": "2019-07-08T21:03:32", "upload_time_iso_8601": "2019-07-08T21:03:32.200447Z", "url": "https://files.pythonhosted.org/packages/22/ef/40691e395cf7893003c621d849467f3851b45b5b5144c7743295da994e6a/wosfile-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "87c0e9dea8e0c058183c4c4224d6df25", "sha256": "8c8b122b42cf654ebc43e619f4ffa1f932fabc6009cdb62e1b96d49462153460"}, "downloads": -1, "filename": "wosfile-0.4.2.tar.gz", "has_sig": false, "md5_digest": "87c0e9dea8e0c058183c4c4224d6df25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7992, "upload_time": "2020-02-24T14:44:06", "upload_time_iso_8601": "2020-02-24T14:44:06.251709Z", "url": "https://files.pythonhosted.org/packages/7a/af/ee1ede14a25bd0eacd059400a187afe9e6b673f2b50b914f3534729f3804/wosfile-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87c0e9dea8e0c058183c4c4224d6df25", "sha256": "8c8b122b42cf654ebc43e619f4ffa1f932fabc6009cdb62e1b96d49462153460"}, "downloads": -1, "filename": "wosfile-0.4.2.tar.gz", "has_sig": false, "md5_digest": "87c0e9dea8e0c058183c4c4224d6df25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7992, "upload_time": "2020-02-24T14:44:06", "upload_time_iso_8601": "2020-02-24T14:44:06.251709Z", "url": "https://files.pythonhosted.org/packages/7a/af/ee1ede14a25bd0eacd059400a187afe9e6b673f2b50b914f3534729f3804/wosfile-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:44 2020"}