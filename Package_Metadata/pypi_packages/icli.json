{"info": {"author": "Altertech", "author_email": "div@altertech.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: User Interfaces"], "description": "# icli - interactive command line interfaces\n\n## What is icli\n\n**icli** is a Python library, built on top of **argparse**, which allows you to\nquickly build rich interactive command line interfaces with sections, command\nhistory, command batch processing, command repeating and interactive\nauto-complete.\n\n<img src=\"https://github.com/alttch/icli/blob/master/demo.gif?raw=true\" width=\"800\" />\n\n**icli** uses **readline** library for command inputs.\n\n## Features\n\n* Jump between command sections (use / for root section, .. or Ctrl-d to jump\n  to upper section)\n\n* Send multiple commands, separated with *;*\n\n* Repeat command execution, by adding *|X* to the end of input (X - delay in\n  seconds between commands, use *|cX* to clear screen before next command\n  execution)\n\n* Auto-completion (via **argcomplete**)\n\n## How to install\n\n```\npip3 install icli\n```\n\n## How to use\n\n* use **icli.ArgumentParser** just like **argparse.ArgumentParser** (create\n  parsers, sub-parsers etc.)\n\n* create dispatcher method for commands. This method receives parsed arguments\n  in \\*\\*kwargs:\n\n```python\n\ndef dispatcher(**kwargs):\n    # ....\n```\n\n* define CLI sections tree and start interactive mode:\n\n```python\nimport icli\nap = icli.ArgumentParser()\n\n# ...\n\nap.sections = {'user': ['account', 'apikey'], 'document': []}\nap.run = dispatcher\nap.interactive()\n```\n\n## Customizing\n\nOverride:\n\n* **get_interactive_prompt** customize input prompt\n* **print_repeat_title** customize title for repeating commands\n* **handle_interactive_exception** handle exceptions, raised during interactive\n  loop\n\n## Global commands\n\nYou may define global commands, which work in all sections, e.g. let's make *w*\nsystem command executed, when user type *w*:\n\n```python\ndef w(*args):\n    # the method receives command name and optional command arguments in *args\n    import os\n    os.system('w')\n\nap.interactive_global_commands['w'] = w\n```\n\nNote: global commands are not auto-completed\n\n## History file\n\nIf history file is defined, input commands are loaded before interactive\nsession is started and saved at the end.\n\n```python\nap.interactive_history_file = '~/.test-icli'\n```\n\nBy default, last 100 commands are saved. To change this behavior, modify:\n\n```python\nap.interactive_history_length = 500\n```\n\n## Combining shell and interactive CLI\n\nLet's launch interactive mode when your program is started without arguments,\notherwise process them:\n\n```python\nimport sys\n\n# prog param sets program name in help to empty for interactive mode\nap = icli.ArgumentParser(prog='' if len(sys.argv) < 2 else None)\n\n# ...\n\nif len(sys.argv) > 1:\n    ap.launch()\nelse:\n    ap.interactive()\n```\n\n## Batch processing\n\nYour program may read commands from stdin or external file, then process them\nwithout user input\n\nTo do this, put commands to I/O steam and launch **batch** method:\n\n```python\nimport io\n\nf = io.StringIO()\nf.write('user account list ; user apikey list\\ndocument list')\nf.seek(0)\nap.batch(f)\n```\n\nor just launch **batch** method with a source stream:\n\n```python\nwith open('commands.list') as cf:\n    ap.batch(cf)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alttch/icli", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "icli", "package_url": "https://pypi.org/project/icli/", "platform": "", "project_url": "https://pypi.org/project/icli/", "project_urls": {"Homepage": "https://github.com/alttch/icli"}, "release_url": "https://pypi.org/project/icli/0.0.8/", "requires_dist": null, "requires_python": "", "summary": "Interactive CLI builder", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>icli - interactive command line interfaces</h1>\n<h2>What is icli</h2>\n<p><strong>icli</strong> is a Python library, built on top of <strong>argparse</strong>, which allows you to\nquickly build rich interactive command line interfaces with sections, command\nhistory, command batch processing, command repeating and interactive\nauto-complete.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1a75508ce2d41b75e25e007b56b9110a38a8c9f/68747470733a2f2f6769746875622e636f6d2f616c747463682f69636c692f626c6f622f6d61737465722f64656d6f2e6769663f7261773d74727565\" width=\"800\">\n<p><strong>icli</strong> uses <strong>readline</strong> library for command inputs.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p>Jump between command sections (use / for root section, .. or Ctrl-d to jump\nto upper section)</p>\n</li>\n<li>\n<p>Send multiple commands, separated with <em>;</em></p>\n</li>\n<li>\n<p>Repeat command execution, by adding <em>|X</em> to the end of input (X - delay in\nseconds between commands, use <em>|cX</em> to clear screen before next command\nexecution)</p>\n</li>\n<li>\n<p>Auto-completion (via <strong>argcomplete</strong>)</p>\n</li>\n</ul>\n<h2>How to install</h2>\n<pre><code>pip3 install icli\n</code></pre>\n<h2>How to use</h2>\n<ul>\n<li>\n<p>use <strong>icli.ArgumentParser</strong> just like <strong>argparse.ArgumentParser</strong> (create\nparsers, sub-parsers etc.)</p>\n</li>\n<li>\n<p>create dispatcher method for commands. This method receives parsed arguments\nin **kwargs:</p>\n</li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">dispatcher</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ....</span>\n</pre>\n<ul>\n<li>define CLI sections tree and start interactive mode:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">icli</span>\n<span class=\"n\">ap</span> <span class=\"o\">=</span> <span class=\"n\">icli</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">sections</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'account'</span><span class=\"p\">,</span> <span class=\"s1\">'apikey'</span><span class=\"p\">],</span> <span class=\"s1\">'document'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">dispatcher</span>\n<span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span>\n</pre>\n<h2>Customizing</h2>\n<p>Override:</p>\n<ul>\n<li><strong>get_interactive_prompt</strong> customize input prompt</li>\n<li><strong>print_repeat_title</strong> customize title for repeating commands</li>\n<li><strong>handle_interactive_exception</strong> handle exceptions, raised during interactive\nloop</li>\n</ul>\n<h2>Global commands</h2>\n<p>You may define global commands, which work in all sections, e.g. let's make <em>w</em>\nsystem command executed, when user type <em>w</em>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">w</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># the method receives command name and optional command arguments in *args</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s1\">'w'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">interactive_global_commands</span><span class=\"p\">[</span><span class=\"s1\">'w'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">w</span>\n</pre>\n<p>Note: global commands are not auto-completed</p>\n<h2>History file</h2>\n<p>If history file is defined, input commands are loaded before interactive\nsession is started and saved at the end.</p>\n<pre><span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">interactive_history_file</span> <span class=\"o\">=</span> <span class=\"s1\">'~/.test-icli'</span>\n</pre>\n<p>By default, last 100 commands are saved. To change this behavior, modify:</p>\n<pre><span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">interactive_history_length</span> <span class=\"o\">=</span> <span class=\"mi\">500</span>\n</pre>\n<h2>Combining shell and interactive CLI</h2>\n<p>Let's launch interactive mode when your program is started without arguments,\notherwise process them:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"c1\"># prog param sets program name in help to empty for interactive mode</span>\n<span class=\"n\">ap</span> <span class=\"o\">=</span> <span class=\"n\">icli</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">''</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">launch</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">()</span>\n</pre>\n<h2>Batch processing</h2>\n<p>Your program may read commands from stdin or external file, then process them\nwithout user input</p>\n<p>To do this, put commands to I/O steam and launch <strong>batch</strong> method:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">()</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'user account list ; user apikey list</span><span class=\"se\">\\n</span><span class=\"s1\">document list'</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>or just launch <strong>batch</strong> method with a source stream:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'commands.list'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">cf</span><span class=\"p\">:</span>\n    <span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5907154, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e4c7157f8e2225995f9d9d1bb471133e", "sha256": "b505628a63a59ee27f0c599f3477308326188e16e9fd44a241d2fce9d829a536"}, "downloads": -1, "filename": "icli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e4c7157f8e2225995f9d9d1bb471133e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3091, "upload_time": "2019-09-29T00:31:23", "upload_time_iso_8601": "2019-09-29T00:31:23.712173Z", "url": "https://files.pythonhosted.org/packages/17/04/274e22cc378a81506f31fbec92835ec5988f19b595623c003daf7dcfdb70/icli-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c006126beea40300bffbbc11adfd63c7", "sha256": "12039d3b233b469551e4bc0be4df95b9b08796eba116adfcbe16e7f4238b0925"}, "downloads": -1, "filename": "icli-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c006126beea40300bffbbc11adfd63c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4808, "upload_time": "2019-09-29T20:11:19", "upload_time_iso_8601": "2019-09-29T20:11:19.666338Z", "url": "https://files.pythonhosted.org/packages/d5/5b/2c1e6f4948b98b2fe4c561b8bd7f889570092eac0fc1d5b9976dff0543ba/icli-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "96777e19f08b9ee969d5f465c3d9e07d", "sha256": "f37fe00bff6e4776a9158acd74a80a21fc2ac8a08b51dfa063e4df5630a0b1d4"}, "downloads": -1, "filename": "icli-0.0.3.tar.gz", "has_sig": false, "md5_digest": "96777e19f08b9ee969d5f465c3d9e07d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4892, "upload_time": "2019-09-29T20:48:19", "upload_time_iso_8601": "2019-09-29T20:48:19.287446Z", "url": "https://files.pythonhosted.org/packages/8e/d7/913216e379d974838597240163c77ea773b3d578eb456fe2be53426ffe7a/icli-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "0327d3c84eb3388f441456e93fe3985f", "sha256": "8d43767017fa1a5dd60869d1685b54ec6085965da499015860a7c7c6edcb9f0e"}, "downloads": -1, "filename": "icli-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0327d3c84eb3388f441456e93fe3985f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4973, "upload_time": "2019-09-29T23:22:56", "upload_time_iso_8601": "2019-09-29T23:22:56.511296Z", "url": "https://files.pythonhosted.org/packages/8f/c1/2c74850b3ee23e34df4c47e194571f2bf0cf0f554d6fcb253177d9cfe34a/icli-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b2b8175994e756b3e7f23866ac2b8944", "sha256": "7b9eadcfb8cf8d5b830b8bcb109f6e40db5b8fec9ea74ae17d1a324b9f9ccecc"}, "downloads": -1, "filename": "icli-0.0.5.tar.gz", "has_sig": false, "md5_digest": "b2b8175994e756b3e7f23866ac2b8944", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4978, "upload_time": "2019-09-30T01:02:29", "upload_time_iso_8601": "2019-09-30T01:02:29.629791Z", "url": "https://files.pythonhosted.org/packages/b4/9c/e28469adb134a7f87052a516bcf6feceb29d7d6a8f3bd562c49f6c0dedbf/icli-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "975c7aa2a4d29471bee0124716fd3a7a", "sha256": "5e888cf3e913e8623b52ec53c53ee1dd1044f3416e7aa8a3064966e95d383888"}, "downloads": -1, "filename": "icli-0.0.7.tar.gz", "has_sig": false, "md5_digest": "975c7aa2a4d29471bee0124716fd3a7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5010, "upload_time": "2019-09-30T14:22:02", "upload_time_iso_8601": "2019-09-30T14:22:02.887820Z", "url": "https://files.pythonhosted.org/packages/88/13/700efa6ce92627f7a0787e1227b7513c6f849a0b8c1e48ee414fbabb7910/icli-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "6294f7f496d642c3c96404c7f1817c75", "sha256": "ebe2fc9f94496755aa5f766f5981c814333b82f437f44706c111eb508bef880d"}, "downloads": -1, "filename": "icli-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6294f7f496d642c3c96404c7f1817c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5028, "upload_time": "2019-09-30T14:24:32", "upload_time_iso_8601": "2019-09-30T14:24:32.625002Z", "url": "https://files.pythonhosted.org/packages/c8/1f/679290ec550b755ae72db2a2d539ee6bb6500ddf4d0d5682512f7862c35d/icli-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6294f7f496d642c3c96404c7f1817c75", "sha256": "ebe2fc9f94496755aa5f766f5981c814333b82f437f44706c111eb508bef880d"}, "downloads": -1, "filename": "icli-0.0.8.tar.gz", "has_sig": false, "md5_digest": "6294f7f496d642c3c96404c7f1817c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5028, "upload_time": "2019-09-30T14:24:32", "upload_time_iso_8601": "2019-09-30T14:24:32.625002Z", "url": "https://files.pythonhosted.org/packages/c8/1f/679290ec550b755ae72db2a2d539ee6bb6500ddf4d0d5682512f7862c35d/icli-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:02 2020"}