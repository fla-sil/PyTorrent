{"info": {"author": "Fabrice Salvaire", "author_email": "fabrice.salvaire@orange.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering"], "description": ".. -*- Mode: rst -*-\n\n.. image:: https://badge.fury.io/py/PyValentina.svg\n\t   :target: https://badge.fury.io/py/PyValentina\n\n.. image:: https://img.shields.io/pypi/dm/PyValentina.svg\n\t   :target: https://pypi.python.org/pypi/PyValentina\n\n.. image:: https://img.shields.io/pypi/status/PyValentina.svg\n\t   :target: https://pypi.python.org/pypi/PyValentina\n\n.. image:: https://img.shields.io/pypi/pyversions/PyValentina.svg\n\t   :target: https://pypi.python.org/pypi/PyValentina\n\n.. image:: https://img.shields.io/pypi/l/PyValentina.svg\n\t   :target: https://raw.githubusercontent.com/FabriceSalvaire/PyValentina/master/LICENSE.txt\n\n.. -*- Mode: rst -*-\n\n..\n   |PyValentinaUrl|\n   |PyValentinaHomePage|_\n   |PyValentinaDoc|_\n   |PyValentina@github|_\n   |PyValentina@readthedocs|_\n   |PyValentina@readthedocs-badge|\n   |PyValentina@pypi|_\n\n.. |ohloh| image:: https://www.openhub.net/accounts/230426/widgets/account_tiny.gif\n   :target: https://www.openhub.net/accounts/fabricesalvaire\n   :alt: Fabrice Salvaire's Ohloh profile\n   :height: 15px\n   :width:  80px\n\n.. |PyValentinaUrl| replace:: http://fabricesalvaire.github.io/PyValentina\n\n.. |PyValentinaHomePage| replace:: PyValentina Home Page\n.. _PyValentinaHomePage: http://fabricesalvaire.github.io/PyValentina\n\n.. |PyValentinaDoc| replace:: PyValentina Documentation\n.. _PyValentinaDoc: http://pyvalentina.readthedocs.org/en/latest\n\n.. |PyValentina@readthedocs-badge| image:: https://readthedocs.org/projects/pyvalentina/badge/?version=latest\n   :target: http://pyvalentina.readthedocs.org/en/latest\n\n.. |PyValentina@github| replace:: https://github.com/FabriceSalvaire/PyValentina\n.. .. _PyValentina@github: https://github.com/FabriceSalvaire/PyValentina\n\n.. |PyValentina@readthedocs| replace:: http://pyvalentina.readthedocs.org\n.. .. _PyValentina@readthedocs: http://pyvalentina.readthedocs.org\n\n.. |PyValentina@pypi| replace:: https://pypi.python.org/pypi/PyValentina\n.. .. _PyValentina@pypi: https://pypi.python.org/pypi/PyValentina\n\n.. |Build Status| image:: https://travis-ci.org/FabriceSalvaire/PyValentina.svg?branch=master\n   :target: https://travis-ci.org/FabriceSalvaire/PyValentina\n   :alt: PyValentina build status @travis-ci.org\n\n.. |Pypi Download| image:: https://img.shields.io/pypi/dm/PyValentina.svg\n   :target: https://pypi.python.org/pypi/PyValentina\n   :alt: PyValentina Download per month\n\n.. |Pypi Version| image:: https://img.shields.io/pypi/v/PyValentina.svg\n   :target: https://pypi.python.org/pypi/PyValentina\n   :alt: PyValentina last version\n\n.. |Pypi License| image:: https://img.shields.io/pypi/l/PyValentina.svg\n   :target: https://pypi.python.org/pypi/PyValentina\n   :alt: PyValentina license\n\n.. |Pypi Format| image:: https://img.shields.io/pypi/format/PyValentina.svg\n   :target: https://pypi.python.org/pypi/PyValentina\n   :alt: PyValentina format\n\n.. |Pypi Python Version| image:: https://img.shields.io/pypi/pyversions/PyValentina.svg\n   :target: https://pypi.python.org/pypi/PyValentina\n   :alt: PyValentina python version\n\n..  coverage test\n..  https://img.shields.io/pypi/status/Django.svg\n..  https://img.shields.io/github/stars/badges/shields.svg?style=social&label=Star\n\n.. End\n.. -*- Mode: rst -*-\n\n.. |Python| replace:: Python\n.. _Python: http://python.org\n\n.. |PyPI| replace:: PyPI\n.. _PyPI: https://pypi.python.org/pypi\n\n.. |Numpy| replace:: Numpy\n.. _Numpy: http://www.numpy.org\n\n.. |Sphinx| replace:: Sphinx\n.. _Sphinx: http://sphinx-doc.org\n\n.. End\n\n============\n PyValentina\n============\n\nPyValentina Home Page is located at |PyValentinaUrl|\n\nThe latest documentation build from the git repository is available at readthedocs.org |PyValentina@readthedocs-badge|\n\nAuthored by `Fabrice Salvaire <http://fabrice-salvaire.pagesperso-orange.fr>`_.\n\n.. -*- Mode: rst -*-\n\n==========\n Features\n==========\n\nThe features of PyValentina are :\n\n* read/write *.val* and *.vit* file\n* `QMuParser <http://beltoforion.de/article.php?a=muparser>`_ expressions are translated to Python and evaluated on the fly\n* API to define patterns\n* compute the detail of a pattern\n* export the detail to latex/pgf as A0 or tiled A4 paper\n\nMissing features:\n\n* full operation support\n* direct PDF export\n* SVG export\n\n.. image:: https://raw.github.com/FabriceSalvaire/PyValentina/master/test/output/pattern-a0.png\n :height: 600px\n\n.. image:: https://raw.github.com/FabriceSalvaire/PyValentina/master/test/output/pattern-a4.png\n :height: 600px\n\n.. -*- Mode: rst -*-\n\n=============\n Introduction\n=============\n\nPyValentina is a python implementation of the `Valentina <http://valentina-project.org/>`_ Pattern\nMaking software, which only focus to implement the core engine and not the graphical user interface.\n\nA pattern in flat pattern design is build from geometrical operations which can be turned to a\ncomputer program and is thus a field of applications of Computer Aided Design.  It corresponds more\nprecisely to parametric modelling with dedicated features to fashion modelling and manufacturing.\n\nWhat is the requirements of a pattern drafting software ?\n---------------------------------------------------------\n\nThe core functionality of a CAD system for pattern drafting consists of these two software components :\n\n* an **open** file format to store and exchange the pattern,\n* a geometrical engine to compute the pattern, e.g. to generate the layout of each fabric's piece of a clothe.\n\nThe XML language is a natural candidate to define an open file format to store and exchange the\npattern. Valentina uses XML to sore measurements in *.vit* files and patterns in *.val* files.\n\nAnother solution to define and store a pattern is to use a programming language, it can be a\ndedicated language or any programming language associated to a dedicated API.  Many graphical\nlanguages was invented for specific usages, e.g. PostScript for printer, Metafont and MetaPost for\npublishing, G-code for machining etc.\n\nUsually the geometrical operations of a pattern are simple in comparison to the requirements of a\nmechanical or electronic CAD software.  In first hand it is only 2D and the number of operations\nshould be handled smoothly by a computer of these days, whereas it is still challenging for other\ndomains.\n\n.. A pattern drafting software only need a good geometrical engine to be designed efficiently.\n\nFinally, a pattern drafting software requires an efficient graphical user interface so as to be used\nby fashion designers and not only by hackers.  This software component is more challenging in therms\nof software engineering, i.e. in therms of design and cost.\n\nWhy Python is a good language for this library ?\n------------------------------------------------\n\nThe Python language has a large audience in engineering, due to its canonical syntax and richness of\nits ecosystem (scientific libraries).\n\nPython is a high level language and thus more productive.\n\nPython is used as scripting language to extend many softwares, in particular the famous open source\n3D creation suite `Blender <https://www.blender.org>`_, the parametric 3D modeller `FreeCad\n<http://freecadweb.org>`_ as well as the SVG editor `Inkscape <https://inkscape.org/>`_.  Moreover\nthe 3D human model generator `MakeHuman <http://www.makehuman.org>`_ is written in Python.\n\nPython can be easily extended by C libraries using `CFFI <http://cffi.readthedocs.io/en/latest>`_\nand C++ libraries using `SWIG <http://www.swig.org>`_.\n\nPython as other dynamic languages is able to evaluate code on the fly which provide an expression\nevaluator for free.  And this feature is even more pertinent in our case because of the canonical\nnature of the syntax of Python which is natural to somebody initiated to a basic mathematical\nlanguage level.\n\nWhat is the purpose of this library ?\n-------------------------------------\n\nThis library could serve several purposes :\n\n* help to experiment core features for pattern drafting,\n* plug Valentina to software featuring a Python plugin mechanism like Blender, FreeCad etc.\n\nCould we implement a full software using Python ?\n-------------------------------------------------\n\nThe answer is *yes we can!* since `Qt <https://www.qt.io>`_ has as a nice binding so called\n`PyQt <https://riverbankcomputing.com/software/pyqt/intro>`_.\n\n..  (if we consider Qt is superior to GTK and WxWidgets)\n\nBut up to now Python has of course some drawbacks!\n\nIts main drawback is due to the fact the standard interpreter cannot execute more than one *Python\nbytecode* thread at once, this limitation so called Global Interpreter Lock is required for\nimplementation simplicity.\n\n..  in true parallelism (multi-core)\n.. Consequently we can do multi-threading, even on multi-core in some cases, but less easily than in Java or Cxx11.\n\nDespite a GUI implemented in PyQt is almost of the time more faster than the human perception on a\ncomputer of these days.  It can be sometime difficult to overcome latency arising from the software\nstack.  Thus yes we can do it, but it could requires some tricks to achieve the performance of a C++\napplication.\n\nHow to generate drawings in standard format like PDF or SVG ?\n-------------------------------------------------------------\n\nSVG is not difficult to generate from Python since it is based on XML.  However the PDF format is\nmore challenging, for efficiency reason PDF is a binary format and is thus much more complicated\nthan PostScript which is a true programming language.\n\nThere is several possibilities to generate PDF.\n\nThe most disturbing one is to use the `LaTeX <https://en.wikipedia.org/wiki/LaTeX>`_ publishing\nsystem in combination with the `PGF <http://www.texample.net/tikz/examples>`_ package which provide\nan amazing graphical language on top of LaTeX.  This solution could terrify many peoples, but it do\nthe job very well for text and graphics.  However user must install a LaTeX environment from their\nLinux distribution or using the `TexLive <https://www.tug.org/texlive>`_ distribution.\n\nA more conventional solution requires a library that can generate PDF from standard graphical\noperations.  Some libraries featuring that are :\n\n* Qt using QPainter API, Valentina solution, see https://wiki.qt.io/Handling_PDF\n* `Cairo <https://www.cairographics.org/manual/cairo-PDF-Surfaces.html>`_\n* `ReportLab <http://www.reportlab.com/opensource>`_  open-source PDF Toolkit (more commercial and less known)\n* `Matplotlib <http://matplotlib.org>`_ (but more oriented to plot)\n* and ???\n\n.. -*- Mode: rst -*-\n\n.. _installation-page:\n\n\n==============\n Installation\n==============\n\nThe installation of PyValentina by itself is quite simple. However it will be easier to get the\ndependencies on a Linux desktop.\n\nDependencies\n------------\n\nPyValentina requires the following dependencies:\n\n * |Python|_ 3\n * |Numpy|_\n\nAlso it is recommanded to have these Python modules:\n\n * pip\n * virtualenv\n\nFor development, you will need in addition:\n\n * |Sphinx|_\n\nInstallation from PyPi Repository\n---------------------------------\n\nPyValentina is made available on the |Pypi|_ repository at |PyValentina@pypi|\n\nRun this command to install the last release:\n\n.. code-block:: sh\n\n  pip install PyValentina\n\nInstallation from Source\n------------------------\n\nThe PyValentina source code is hosted at |PyValentina@github|\n\nTo clone the Git repository, run this command in a terminal:\n\n.. code-block:: sh\n\n  git clone git@github.com:FabriceSalvaire/PyValentina.git\n\nThen to build and install PyValentina run these commands:\n\n.. code-block:: sh\n\n  python setup.py build\n  python setup.py install\n\n.. End\n\n.. _bibliography-page:\n\n==============\n Bibliography\n==============\n\n* `CGAL Computational Geometry Algorithms Library <http://www.cgal.org>`_\n* `Open Cascade Framework <https://www.opencascade.com>`_\n* `David Eberly Geometric Tools web site <https://www.geometrictools.com/index.html>`_\n\n.. End\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FabriceSalvaire/PyValentina", "keywords": "pattern making valentina", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "PyValentina", "package_url": "https://pypi.org/project/PyValentina/", "platform": "any", "project_url": "https://pypi.org/project/PyValentina/", "project_urls": {"Homepage": "https://github.com/FabriceSalvaire/PyValentina"}, "release_url": "https://pypi.org/project/PyValentina/0.2.0/", "requires_dist": ["IntervalArithmetic", "astunparse", "lxml", "numpy"], "requires_python": "", "summary": "Python implementation of Valentina Pattern Making Software", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/PyValentina\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/PyValentina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a72b71efa1f58c5c252b1f9d2f57f1317c34a8b3/68747470733a2f2f62616467652e667572792e696f2f70792f507956616c656e74696e612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/PyValentina\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/PyValentina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e801035fa12197ee9697ef0a14cb0121e97aa421/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f507956616c656e74696e612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/PyValentina\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/PyValentina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4125114b78a080647c3ffb3e725951611e0dcb84/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f507956616c656e74696e612e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/PyValentina\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/PyValentina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af3fc04afa86d787e06c47fef0d7ab6bf67c3ec8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f507956616c656e74696e612e737667\"></a>\n<a href=\"https://raw.githubusercontent.com/FabriceSalvaire/PyValentina/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/PyValentina.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8739030aafdc1c825c2485ad6c8040b179164cb8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f507956616c656e74696e612e737667\"></a>\n<div id=\"pyvalentina\">\n<h2>PyValentina</h2>\n<p>PyValentina Home Page is located at <a href=\"http://fabricesalvaire.github.io/PyValentina\" rel=\"nofollow\">http://fabricesalvaire.github.io/PyValentina</a></p>\n<p>The latest documentation build from the git repository is available at readthedocs.org <a href=\"http://pyvalentina.readthedocs.org/en/latest\" rel=\"nofollow\"><img alt=\"PyValentina@readthedocs-badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d09bf7c2887b0dbc00f4cab02c0abcc39ae80707/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707976616c656e74696e612f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Authored by <a href=\"http://fabrice-salvaire.pagesperso-orange.fr\" rel=\"nofollow\">Fabrice Salvaire</a>.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>The features of PyValentina are :</p>\n<ul>\n<li>read/write <em>.val</em> and <em>.vit</em> file</li>\n<li><a href=\"http://beltoforion.de/article.php?a=muparser\" rel=\"nofollow\">QMuParser</a> expressions are translated to Python and evaluated on the fly</li>\n<li>API to define patterns</li>\n<li>compute the detail of a pattern</li>\n<li>export the detail to latex/pgf as A0 or tiled A4 paper</li>\n</ul>\n<p>Missing features:</p>\n<ul>\n<li>full operation support</li>\n<li>direct PDF export</li>\n<li>SVG export</li>\n</ul>\n<img alt=\"https://raw.github.com/FabriceSalvaire/PyValentina/master/test/output/pattern-a0.png\" height=\"600px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a10a1b6f6aae72bd6ecdbc147682f222596d81fe/68747470733a2f2f7261772e6769746875622e636f6d2f4661627269636553616c76616972652f507956616c656e74696e612f6d61737465722f746573742f6f75747075742f7061747465726e2d61302e706e67\">\n<img alt=\"https://raw.github.com/FabriceSalvaire/PyValentina/master/test/output/pattern-a4.png\" height=\"600px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4301fddfb67794cbfe58079169b7bec0897fd0be/68747470733a2f2f7261772e6769746875622e636f6d2f4661627269636553616c76616972652f507956616c656e74696e612f6d61737465722f746573742f6f75747075742f7061747465726e2d61342e706e67\">\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>PyValentina is a python implementation of the <a href=\"http://valentina-project.org/\" rel=\"nofollow\">Valentina</a> Pattern\nMaking software, which only focus to implement the core engine and not the graphical user interface.</p>\n<p>A pattern in flat pattern design is build from geometrical operations which can be turned to a\ncomputer program and is thus a field of applications of Computer Aided Design.  It corresponds more\nprecisely to parametric modelling with dedicated features to fashion modelling and manufacturing.</p>\n<div id=\"what-is-the-requirements-of-a-pattern-drafting-software\">\n<h3>What is the requirements of a pattern drafting software ?</h3>\n<p>The core functionality of a CAD system for pattern drafting consists of these two software components :</p>\n<ul>\n<li>an <strong>open</strong> file format to store and exchange the pattern,</li>\n<li>a geometrical engine to compute the pattern, e.g. to generate the layout of each fabric\u2019s piece of a clothe.</li>\n</ul>\n<p>The XML language is a natural candidate to define an open file format to store and exchange the\npattern. Valentina uses XML to sore measurements in <em>.vit</em> files and patterns in <em>.val</em> files.</p>\n<p>Another solution to define and store a pattern is to use a programming language, it can be a\ndedicated language or any programming language associated to a dedicated API.  Many graphical\nlanguages was invented for specific usages, e.g. PostScript for printer, Metafont and MetaPost for\npublishing, G-code for machining etc.</p>\n<p>Usually the geometrical operations of a pattern are simple in comparison to the requirements of a\nmechanical or electronic CAD software.  In first hand it is only 2D and the number of operations\nshould be handled smoothly by a computer of these days, whereas it is still challenging for other\ndomains.</p>\n<p>Finally, a pattern drafting software requires an efficient graphical user interface so as to be used\nby fashion designers and not only by hackers.  This software component is more challenging in therms\nof software engineering, i.e. in therms of design and cost.</p>\n</div>\n<div id=\"why-python-is-a-good-language-for-this-library\">\n<h3>Why Python is a good language for this library ?</h3>\n<p>The Python language has a large audience in engineering, due to its canonical syntax and richness of\nits ecosystem (scientific libraries).</p>\n<p>Python is a high level language and thus more productive.</p>\n<p>Python is used as scripting language to extend many softwares, in particular the famous open source\n3D creation suite <a href=\"https://www.blender.org\" rel=\"nofollow\">Blender</a>, the parametric 3D modeller <a href=\"http://freecadweb.org\" rel=\"nofollow\">FreeCad</a> as well as the SVG editor <a href=\"https://inkscape.org/\" rel=\"nofollow\">Inkscape</a>.  Moreover\nthe 3D human model generator <a href=\"http://www.makehuman.org\" rel=\"nofollow\">MakeHuman</a> is written in Python.</p>\n<p>Python can be easily extended by C libraries using <a href=\"http://cffi.readthedocs.io/en/latest\" rel=\"nofollow\">CFFI</a>\nand C++ libraries using <a href=\"http://www.swig.org\" rel=\"nofollow\">SWIG</a>.</p>\n<p>Python as other dynamic languages is able to evaluate code on the fly which provide an expression\nevaluator for free.  And this feature is even more pertinent in our case because of the canonical\nnature of the syntax of Python which is natural to somebody initiated to a basic mathematical\nlanguage level.</p>\n</div>\n<div id=\"what-is-the-purpose-of-this-library\">\n<h3>What is the purpose of this library ?</h3>\n<p>This library could serve several purposes :</p>\n<ul>\n<li>help to experiment core features for pattern drafting,</li>\n<li>plug Valentina to software featuring a Python plugin mechanism like Blender, FreeCad etc.</li>\n</ul>\n</div>\n<div id=\"could-we-implement-a-full-software-using-python\">\n<h3>Could we implement a full software using Python ?</h3>\n<p>The answer is <em>yes we can!</em> since <a href=\"https://www.qt.io\" rel=\"nofollow\">Qt</a> has as a nice binding so called\n<a href=\"https://riverbankcomputing.com/software/pyqt/intro\" rel=\"nofollow\">PyQt</a>.</p>\n<p>But up to now Python has of course some drawbacks!</p>\n<p>Its main drawback is due to the fact the standard interpreter cannot execute more than one <em>Python\nbytecode</em> thread at once, this limitation so called Global Interpreter Lock is required for\nimplementation simplicity.</p>\n<p>Despite a GUI implemented in PyQt is almost of the time more faster than the human perception on a\ncomputer of these days.  It can be sometime difficult to overcome latency arising from the software\nstack.  Thus yes we can do it, but it could requires some tricks to achieve the performance of a C++\napplication.</p>\n</div>\n<div id=\"how-to-generate-drawings-in-standard-format-like-pdf-or-svg\">\n<h3>How to generate drawings in standard format like PDF or SVG ?</h3>\n<p>SVG is not difficult to generate from Python since it is based on XML.  However the PDF format is\nmore challenging, for efficiency reason PDF is a binary format and is thus much more complicated\nthan PostScript which is a true programming language.</p>\n<p>There is several possibilities to generate PDF.</p>\n<p>The most disturbing one is to use the <a href=\"https://en.wikipedia.org/wiki/LaTeX\" rel=\"nofollow\">LaTeX</a> publishing\nsystem in combination with the <a href=\"http://www.texample.net/tikz/examples\" rel=\"nofollow\">PGF</a> package which provide\nan amazing graphical language on top of LaTeX.  This solution could terrify many peoples, but it do\nthe job very well for text and graphics.  However user must install a LaTeX environment from their\nLinux distribution or using the <a href=\"https://www.tug.org/texlive\" rel=\"nofollow\">TexLive</a> distribution.</p>\n<p>A more conventional solution requires a library that can generate PDF from standard graphical\noperations.  Some libraries featuring that are :</p>\n<ul>\n<li>Qt using QPainter API, Valentina solution, see <a href=\"https://wiki.qt.io/Handling_PDF\" rel=\"nofollow\">https://wiki.qt.io/Handling_PDF</a></li>\n<li><a href=\"https://www.cairographics.org/manual/cairo-PDF-Surfaces.html\" rel=\"nofollow\">Cairo</a></li>\n<li><a href=\"http://www.reportlab.com/opensource\" rel=\"nofollow\">ReportLab</a>  open-source PDF Toolkit (more commercial and less known)</li>\n<li><a href=\"http://matplotlib.org\" rel=\"nofollow\">Matplotlib</a> (but more oriented to plot)</li>\n<li>and ???</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<span id=\"installation-page\"></span><h2>Installation</h2>\n<p>The installation of PyValentina by itself is quite simple. However it will be easier to get the\ndependencies on a Linux desktop.</p>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>PyValentina requires the following dependencies:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://python.org\" rel=\"nofollow\">Python</a> 3</li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">Numpy</a></li>\n</ul>\n</blockquote>\n<p>Also it is recommanded to have these Python modules:</p>\n<blockquote>\n<ul>\n<li>pip</li>\n<li>virtualenv</li>\n</ul>\n</blockquote>\n<p>For development, you will need in addition:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://sphinx-doc.org\" rel=\"nofollow\">Sphinx</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation-from-pypi-repository\">\n<h3>Installation from PyPi Repository</h3>\n<p>PyValentina is made available on the <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a> repository at <a href=\"https://pypi.python.org/pypi/PyValentina\" rel=\"nofollow\">https://pypi.python.org/pypi/PyValentina</a></p>\n<p>Run this command to install the last release:</p>\n<pre>pip install PyValentina\n</pre>\n</div>\n<div id=\"installation-from-source\">\n<h3>Installation from Source</h3>\n<p>The PyValentina source code is hosted at <a href=\"https://github.com/FabriceSalvaire/PyValentina\" rel=\"nofollow\">https://github.com/FabriceSalvaire/PyValentina</a></p>\n<p>To clone the Git repository, run this command in a terminal:</p>\n<pre>git clone git@github.com:FabriceSalvaire/PyValentina.git\n</pre>\n<p>Then to build and install PyValentina run these commands:</p>\n<pre>python setup.py build\npython setup.py install\n</pre>\n</div>\n</div>\n<div id=\"bibliography\">\n<span id=\"bibliography-page\"></span><h2>Bibliography</h2>\n<ul>\n<li><a href=\"http://www.cgal.org\" rel=\"nofollow\">CGAL Computational Geometry Algorithms Library</a></li>\n<li><a href=\"https://www.opencascade.com\" rel=\"nofollow\">Open Cascade Framework</a></li>\n<li><a href=\"https://www.geometrictools.com/index.html\" rel=\"nofollow\">David Eberly Geometric Tools web site</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3352853, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bde6b4e5760f33a9635f084366d97fa3", "sha256": "02cb1077533cac74648acfd33348bfeb7f044e253db810a664429b7ca5777b33"}, "downloads": -1, "filename": "PyValentina-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bde6b4e5760f33a9635f084366d97fa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1046428, "upload_time": "2017-09-15T15:22:52", "upload_time_iso_8601": "2017-09-15T15:22:52.608564Z", "url": "https://files.pythonhosted.org/packages/dc/02/b621fd0313678082270e4b0cf54213ab72f4be2633b5c8501c542d07f34c/PyValentina-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "642fe95cafe20fe690a344ae764a2add", "sha256": "d5e3a393690b9119de22f23f45871f7199ae920e556ad5a6c50b69b3b08c67b4"}, "downloads": -1, "filename": "PyValentina-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "642fe95cafe20fe690a344ae764a2add", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 68960, "upload_time": "2017-11-21T17:49:28", "upload_time_iso_8601": "2017-11-21T17:49:28.702292Z", "url": "https://files.pythonhosted.org/packages/ef/15/113d4c14384fc8609f5bcdc59aaaed4d2be5d8acc7b151ffa7677124894c/PyValentina-0.2.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "642fe95cafe20fe690a344ae764a2add", "sha256": "d5e3a393690b9119de22f23f45871f7199ae920e556ad5a6c50b69b3b08c67b4"}, "downloads": -1, "filename": "PyValentina-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "642fe95cafe20fe690a344ae764a2add", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 68960, "upload_time": "2017-11-21T17:49:28", "upload_time_iso_8601": "2017-11-21T17:49:28.702292Z", "url": "https://files.pythonhosted.org/packages/ef/15/113d4c14384fc8609f5bcdc59aaaed4d2be5d8acc7b151ffa7677124894c/PyValentina-0.2.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:12:16 2020"}