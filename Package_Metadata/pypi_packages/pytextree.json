{"info": {"author": "Olli Riikonen", "author_email": "pebblebonk@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# PyTexTree\nCreate a tree object from a LaTeX project. v0.1.1.\n\n\n## 1. Features\nThis project was done to provide a way to handle / analyse LaTeX projects more easily.\nFeature highlights:\n- Support opening LaTeX projects consisting of multiple files (using `\\include`)\n- Extract several, maybe useful, stats on the file\n- Create a traversable tree from the LaTeX project\n    - Built upon the awesome `NodeMixin` of [`anytree`](https://github.com/c0fec0de/anytree)\n- Export to a graph to support visualisation\n    - A `dict` with __edges__ and __nodes__\n    - Creates edges between references within the project\n    - Specifically export to `.csv` files supported by [__Gephi__](https://gephi.org/)\n\n\n## 2. Installation\nUsing pip:\n```\n$ pip install pytextree\n```\n\n\n\n## 3. Usage\nBasic workflow with the `PyTexTree` consists of two steps:\n1. Load the tex file into text\n2. Parse the text into a tree\n\n**NOTE:**\n>For testing, you can use the provided .tex [example](https://github.com/PebbleBonk/pytextree/blob/master/examples/lorem.tex).\n\n### 3.1. Loading a LaTeX project into a tree\nYou can use the `textree.open_tex_project()` to load your LaTeX project into a string\n```py\nimport pytextree as tt\ntxt = tt.open_tex_project('examples/lorem.tex')\n```\n\nThen you can simply parse the text into a tree:\n```py\ntree = tt.parse_tex_to_tree(txt) # >>> <TNode [Root]: Root (0, 5502)>\n```\nThe function returns the root node of the created tree. You can traverse it with `.children` and `.parent` attributes.\n\n\n#### 3.1.1. Tree node attributes\nThe node, describing a section or an evironment in the LaTeX project, contains some information about the containing text:\n\nAttribute | Description | Example\n----------|-------------|--------\n`.commands` | List of found LaTeX commands in this node | [\"\\textbf\", \"\\ref{fig:my_fig}\"]\n`.comments` | List of comments in this node | [\"% A comment\"]\n`.word_count` | Number of words, excluding comments and commands | 527\n`.label` | LaTeX label of the node if one exists | \"fig:my_graph\"\n`.citations` | Cited labels | [\"Lamport1984\", \"Rossum1991\"]\n`.texts` | Text contents | [\"This is a paragraph.\", \"And another.\"]\n\n\n\n### 3.2. Printing the tree\nYou can also pretty print the created tree for more information:\n```py\ntree.pretty_print()\n```\nOutput:\n>```\n><TNode [Root]: Root (0, 5502)>\n>\u2514\u2500\u2500 <TEnv [document]>: None (114, 5500)\n>    \u251c\u2500\u2500 <TNode [section]: S1 (144, 1129)>\n>    \u2502   \u251c\u2500\u2500 <TNode [subsection]: S1.S1 (619, 869)>\n>    \u2502   \u2514\u2500\u2500 <TNode [subsection]: S1.S2 (870, 1129)>\n>    \u251c\u2500\u2500 <TNode [section]: S2 (1130, 2542)>\n>    \u2502   \u2514\u2500\u2500 <TNode [subsection]: S2.S1 (1460, 2542)>\n>    \u2502       \u251c\u2500\u2500 <TEnv [itemize]>: list:mylist (1606, 1867)\n>    \u2502       \u2502   \u251c\u2500\u2500 <TEnv [itemize]>: None (1695, 1771)\n>    \u2502       \u2502   \u2514\u2500\u2500 <TEnv [itemize]>: None (1776, 1853)\n>    \u2502       \u251c\u2500\u2500 <TEnv [itemize]>: list:mylist (1869, 1959)\n>    \u2502       \u251c\u2500\u2500 <TEnv [tabular]>: table:synonyms (2032, 2136)\n>    \u2502       \u251c\u2500\u2500 <TNode [subsubsection]: S2.S1.S1 (2140, 2230)>\n>    \u2502       \u2514\u2500\u2500 <TNode [subsubsection]: S2.S1.S2 (2231, 2542)>\n>    \u251c\u2500\u2500 <TNode [section]: S3 (2543, 5485)>\n>    \u2502   \u251c\u2500\u2500 <TNode [paragraph]: This is a paragraph (3417, 4368)>\n>    \u2502   \u251c\u2500\u2500 <TNode [paragraph]: And have another paragraph (4369, 5299)>\n>    \u2502   \u2514\u2500\u2500 <TNode [subsection]: S3.S1  (5300, 5484)>\n>    \u2514\u2500\u2500 <TEnv [appendices]>: None (5435, 5485)\n>```\n\n### 3.3. Exporting\nTo visualise your project as a network / graph with some external software you can export the project as a `dict` containing nodes and edges.\n```py\ngraph = tree.to_graph()\nprint(graph['nodes'][0])\nprint(graph['edges'][0])\n```\n\nOutput:\n>```js\n>{\n>    'id': '$',\n>    'name': 'Root',\n>    'tag': 'Root',\n>    'texlabel': None,\n>    'word count': 0,\n>    'n comments': 0,\n>    'n commands': 5,\n>    'n references': 0,\n>    'n citations': 0,\n>    'value': 0,\n>    'label': '[Root]: Root',\n>    'group': -1,\n>    'title': 'words: 0'}\n>{\n>    'id': 'p1',\n>    'from': '$',\n>    'to': 'n0',\n>    'weight': 1,\n>    'type': 'undirected',\n>    'value': 1,\n>    'source': '$',\n>    'target': 'n0'\n>}\n>```\n\nAlternativaly, you can export to a `.csv` files combatible with [__Gephi__](https://gephi.org/):\n```\ntree.to_gephi_csv()\n```\nThis will create two files, one containing the nodes and one containing the edges.\n\n## 4. Notes\nSome limitations of the project:\n1. If you are laoding a project with includes, make sure the main file ends with `main.tex`\n    - e.g. `my_latex_project_main.tex`\n    - The files this includes, should be in the same directory\n2. Required package version compatablity not checked\n    - Earlier versions might be fine as well\n3. `TNode.pretty_print()` does not work on Windows console due characters\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PebbleBonk/pytextree", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytextree", "package_url": "https://pypi.org/project/pytextree/", "platform": "", "project_url": "https://pypi.org/project/pytextree/", "project_urls": {"Homepage": "https://github.com/PebbleBonk/pytextree"}, "release_url": "https://pypi.org/project/pytextree/0.1.1/", "requires_dist": ["anytree (==2.8.0)", "numpy (==1.18.2)", "six (==1.14.0)"], "requires_python": ">=3.7.0", "summary": "Create a tree object from a LaTeX project", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTexTree</h1>\n<p>Create a tree object from a LaTeX project. v0.1.1.</p>\n<h2>1. Features</h2>\n<p>This project was done to provide a way to handle / analyse LaTeX projects more easily.\nFeature highlights:</p>\n<ul>\n<li>Support opening LaTeX projects consisting of multiple files (using <code>\\include</code>)</li>\n<li>Extract several, maybe useful, stats on the file</li>\n<li>Create a traversable tree from the LaTeX project\n<ul>\n<li>Built upon the awesome <code>NodeMixin</code> of <a href=\"https://github.com/c0fec0de/anytree\" rel=\"nofollow\"><code>anytree</code></a></li>\n</ul>\n</li>\n<li>Export to a graph to support visualisation\n<ul>\n<li>A <code>dict</code> with <strong>edges</strong> and <strong>nodes</strong></li>\n<li>Creates edges between references within the project</li>\n<li>Specifically export to <code>.csv</code> files supported by <a href=\"https://gephi.org/\" rel=\"nofollow\"><strong>Gephi</strong></a></li>\n</ul>\n</li>\n</ul>\n<h2>2. Installation</h2>\n<p>Using pip:</p>\n<pre><code>$ pip install pytextree\n</code></pre>\n<h2>3. Usage</h2>\n<p>Basic workflow with the <code>PyTexTree</code> consists of two steps:</p>\n<ol>\n<li>Load the tex file into text</li>\n<li>Parse the text into a tree</li>\n</ol>\n<p><strong>NOTE:</strong></p>\n<blockquote>\n<p>For testing, you can use the provided .tex <a href=\"https://github.com/PebbleBonk/pytextree/blob/master/examples/lorem.tex\" rel=\"nofollow\">example</a>.</p>\n</blockquote>\n<h3>3.1. Loading a LaTeX project into a tree</h3>\n<p>You can use the <code>textree.open_tex_project()</code> to load your LaTeX project into a string</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytextree</span> <span class=\"k\">as</span> <span class=\"nn\">tt</span>\n<span class=\"n\">txt</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"o\">.</span><span class=\"n\">open_tex_project</span><span class=\"p\">(</span><span class=\"s1\">'examples/lorem.tex'</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can simply parse the text into a tree:</p>\n<pre><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">tt</span><span class=\"o\">.</span><span class=\"n\">parse_tex_to_tree</span><span class=\"p\">(</span><span class=\"n\">txt</span><span class=\"p\">)</span> <span class=\"c1\"># &gt;&gt;&gt; &lt;TNode [Root]: Root (0, 5502)&gt;</span>\n</pre>\n<p>The function returns the root node of the created tree. You can traverse it with <code>.children</code> and <code>.parent</code> attributes.</p>\n<h4>3.1.1. Tree node attributes</h4>\n<p>The node, describing a section or an evironment in the LaTeX project, contains some information about the containing text:</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.commands</code></td>\n<td>List of found LaTeX commands in this node</td>\n<td>[\"\\textbf\", \"\\ref{fig:my_fig}\"]</td>\n</tr>\n<tr>\n<td><code>.comments</code></td>\n<td>List of comments in this node</td>\n<td>[\"% A comment\"]</td>\n</tr>\n<tr>\n<td><code>.word_count</code></td>\n<td>Number of words, excluding comments and commands</td>\n<td>527</td>\n</tr>\n<tr>\n<td><code>.label</code></td>\n<td>LaTeX label of the node if one exists</td>\n<td>\"fig:my_graph\"</td>\n</tr>\n<tr>\n<td><code>.citations</code></td>\n<td>Cited labels</td>\n<td>[\"Lamport1984\", \"Rossum1991\"]</td>\n</tr>\n<tr>\n<td><code>.texts</code></td>\n<td>Text contents</td>\n<td>[\"This is a paragraph.\", \"And another.\"]</td>\n</tr></tbody></table>\n<h3>3.2. Printing the tree</h3>\n<p>You can also pretty print the created tree for more information:</p>\n<pre><span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">pretty_print</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<blockquote>\n<pre><code>&lt;TNode [Root]: Root (0, 5502)&gt;\n\u2514\u2500\u2500 &lt;TEnv [document]&gt;: None (114, 5500)\n   \u251c\u2500\u2500 &lt;TNode [section]: S1 (144, 1129)&gt;\n   \u2502   \u251c\u2500\u2500 &lt;TNode [subsection]: S1.S1 (619, 869)&gt;\n   \u2502   \u2514\u2500\u2500 &lt;TNode [subsection]: S1.S2 (870, 1129)&gt;\n   \u251c\u2500\u2500 &lt;TNode [section]: S2 (1130, 2542)&gt;\n   \u2502   \u2514\u2500\u2500 &lt;TNode [subsection]: S2.S1 (1460, 2542)&gt;\n   \u2502       \u251c\u2500\u2500 &lt;TEnv [itemize]&gt;: list:mylist (1606, 1867)\n   \u2502       \u2502   \u251c\u2500\u2500 &lt;TEnv [itemize]&gt;: None (1695, 1771)\n   \u2502       \u2502   \u2514\u2500\u2500 &lt;TEnv [itemize]&gt;: None (1776, 1853)\n   \u2502       \u251c\u2500\u2500 &lt;TEnv [itemize]&gt;: list:mylist (1869, 1959)\n   \u2502       \u251c\u2500\u2500 &lt;TEnv [tabular]&gt;: table:synonyms (2032, 2136)\n   \u2502       \u251c\u2500\u2500 &lt;TNode [subsubsection]: S2.S1.S1 (2140, 2230)&gt;\n   \u2502       \u2514\u2500\u2500 &lt;TNode [subsubsection]: S2.S1.S2 (2231, 2542)&gt;\n   \u251c\u2500\u2500 &lt;TNode [section]: S3 (2543, 5485)&gt;\n   \u2502   \u251c\u2500\u2500 &lt;TNode [paragraph]: This is a paragraph (3417, 4368)&gt;\n   \u2502   \u251c\u2500\u2500 &lt;TNode [paragraph]: And have another paragraph (4369, 5299)&gt;\n   \u2502   \u2514\u2500\u2500 &lt;TNode [subsection]: S3.S1  (5300, 5484)&gt;\n   \u2514\u2500\u2500 &lt;TEnv [appendices]&gt;: None (5435, 5485)\n</code></pre>\n</blockquote>\n<h3>3.3. Exporting</h3>\n<p>To visualise your project as a network / graph with some external software you can export the project as a <code>dict</code> containing nodes and edges.</p>\n<pre><span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">to_graph</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"s1\">'nodes'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"s1\">'edges'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p>Output:</p>\n<blockquote>\n<pre><span class=\"p\">{</span>\n   <span class=\"s1\">'id'</span><span class=\"o\">:</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'name'</span><span class=\"o\">:</span> <span class=\"s1\">'Root'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'tag'</span><span class=\"o\">:</span> <span class=\"s1\">'Root'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'texlabel'</span><span class=\"o\">:</span> <span class=\"nx\">None</span><span class=\"p\">,</span>\n   <span class=\"s1\">'word count'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n   <span class=\"s1\">'n comments'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n   <span class=\"s1\">'n commands'</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n   <span class=\"s1\">'n references'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n   <span class=\"s1\">'n citations'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n   <span class=\"s1\">'value'</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n   <span class=\"s1\">'label'</span><span class=\"o\">:</span> <span class=\"s1\">'[Root]: Root'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'group'</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"s1\">'title'</span><span class=\"o\">:</span> <span class=\"s1\">'words: 0'</span><span class=\"p\">}</span>\n<span class=\"p\">{</span>\n   <span class=\"s1\">'id'</span><span class=\"o\">:</span> <span class=\"s1\">'p1'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'from'</span><span class=\"o\">:</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'to'</span><span class=\"o\">:</span> <span class=\"s1\">'n0'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'weight'</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"s1\">'type'</span><span class=\"o\">:</span> <span class=\"s1\">'undirected'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'value'</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"s1\">'source'</span><span class=\"o\">:</span> <span class=\"s1\">'$'</span><span class=\"p\">,</span>\n   <span class=\"s1\">'target'</span><span class=\"o\">:</span> <span class=\"s1\">'n0'</span>\n<span class=\"p\">}</span>\n</pre>\n</blockquote>\n<p>Alternativaly, you can export to a <code>.csv</code> files combatible with <a href=\"https://gephi.org/\" rel=\"nofollow\"><strong>Gephi</strong></a>:</p>\n<pre><code>tree.to_gephi_csv()\n</code></pre>\n<p>This will create two files, one containing the nodes and one containing the edges.</p>\n<h2>4. Notes</h2>\n<p>Some limitations of the project:</p>\n<ol>\n<li>If you are laoding a project with includes, make sure the main file ends with <code>main.tex</code>\n<ul>\n<li>e.g. <code>my_latex_project_main.tex</code></li>\n<li>The files this includes, should be in the same directory</li>\n</ul>\n</li>\n<li>Required package version compatablity not checked\n<ul>\n<li>Earlier versions might be fine as well</li>\n</ul>\n</li>\n<li><code>TNode.pretty_print()</code> does not work on Windows console due characters</li>\n</ol>\n\n          </div>"}, "last_serial": 6999062, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9a42bce555e292f75fc597c0ea87688a", "sha256": "47dbacb8216b7318a0301e1424d50d0b65c60bb8c6021720a93851616686e986"}, "downloads": -1, "filename": "pytextree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9a42bce555e292f75fc597c0ea87688a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 8354, "upload_time": "2020-04-11T10:21:37", "upload_time_iso_8601": "2020-04-11T10:21:37.609424Z", "url": "https://files.pythonhosted.org/packages/74/ff/3c765a77adad32ec79cb73ab2392f7c32762e9ea02a198a497f74b484235/pytextree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2ed7bcba3fd3738cc35085346e65c1d", "sha256": "99fc87ca077c112cb19d25d0e24b45a781dfba7920a59fc7c1f7a8e900283eb8"}, "downloads": -1, "filename": "pytextree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f2ed7bcba3fd3738cc35085346e65c1d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 7222, "upload_time": "2020-04-11T10:21:39", "upload_time_iso_8601": "2020-04-11T10:21:39.859202Z", "url": "https://files.pythonhosted.org/packages/bb/dc/e59a82930a53329e510451a46308b0b2e4f8a5773d4d7f2bccce1e28fadb/pytextree-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ae5d2bb1fd7c9871a6c76192f6938a69", "sha256": "8b06b31f6ec2ed3f68727dc987eae74bb31dc09a539b3560195acae219379962"}, "downloads": -1, "filename": "pytextree-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5d2bb1fd7c9871a6c76192f6938a69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 8554, "upload_time": "2020-04-11T10:43:32", "upload_time_iso_8601": "2020-04-11T10:43:32.248330Z", "url": "https://files.pythonhosted.org/packages/80/34/0c1f86f4dc94a79d7d9fa7f113a78edf5da8a36ca5840e8f89702e7b3f6f/pytextree-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "399fe59f3f55012d4981287b3c4ce96f", "sha256": "92c8f717c695e79c3a0b6b1ca97a06f82d67afa60845938e45c7af43d3c0ba25"}, "downloads": -1, "filename": "pytextree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "399fe59f3f55012d4981287b3c4ce96f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 7290, "upload_time": "2020-04-11T10:43:33", "upload_time_iso_8601": "2020-04-11T10:43:33.588283Z", "url": "https://files.pythonhosted.org/packages/b5/64/abea99f592acc7d1480275110fc5d43a5b45c1e4f2db2f755df5de84c196/pytextree-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae5d2bb1fd7c9871a6c76192f6938a69", "sha256": "8b06b31f6ec2ed3f68727dc987eae74bb31dc09a539b3560195acae219379962"}, "downloads": -1, "filename": "pytextree-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5d2bb1fd7c9871a6c76192f6938a69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 8554, "upload_time": "2020-04-11T10:43:32", "upload_time_iso_8601": "2020-04-11T10:43:32.248330Z", "url": "https://files.pythonhosted.org/packages/80/34/0c1f86f4dc94a79d7d9fa7f113a78edf5da8a36ca5840e8f89702e7b3f6f/pytextree-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "399fe59f3f55012d4981287b3c4ce96f", "sha256": "92c8f717c695e79c3a0b6b1ca97a06f82d67afa60845938e45c7af43d3c0ba25"}, "downloads": -1, "filename": "pytextree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "399fe59f3f55012d4981287b3c4ce96f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 7290, "upload_time": "2020-04-11T10:43:33", "upload_time_iso_8601": "2020-04-11T10:43:33.588283Z", "url": "https://files.pythonhosted.org/packages/b5/64/abea99f592acc7d1480275110fc5d43a5b45c1e4f2db2f755df5de84c196/pytextree-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:32 2020"}