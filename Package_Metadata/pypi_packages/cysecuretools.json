{"info": {"author": "Cypress Semiconductor", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Embedded Systems"], "description": "This package contains security tools for creating keys, creating certificates, signing user application, and provisioning Cypress MCUs.\n\n# Features\n\n* Create keys - A key is a file used to authorize access to device data. There must be a common key pair between the secure device and user application. A device must be provisioned with a public key and user application must be signed with corresponding private key from same pair.\n\n* Provisioning a device - Provisioning is the act of configuring a device with an authorized set of keys, certificates, and policies.\n\n* Entrance exam - Before provisioning a device, there is an option to ensure that the device has a valid state by passing an entrance exam.\n\n* Sign a user application - To run a user application on a secure device, the application must be signed with the same keys that the device has been provisioned with.\n\n* Create a certificate - Create a certificate in the X.509 format with the device public key inside and signed with the private key. The certificate can be used when connecting to a cloud service.\n\n# Prerequisites\n\n* Python 3.6 or later\n\n* Installed the libusb driver\n\n   **Windows**\n   - Download and unzip libusb-1.0.21.7z from https://github.com/libusb/libusb/releases/tag/v1.0.21\n   - Run following command to determine if a Python shell is executing in 32-bit or 64-bit mode on OS: `python -c \"import struct; print(struct.calcsize('P') * 8)\"`\n   - Copy *libusb-1.0.dll* file into Python folder (use the 64-bit version of DLL for the 64-bit Python and the 32-bit version of DLL for the 32-bit Python)\n   - Make sure Python path is located at the beginning of the Path environment variable.\n\n   **Linux/Mac OS**\n   - Use [homebrew] to install the driver from the terminal: `homebrew install libusb`\n\n# Installing Package\n\nInvoke `pip install` from the command line:\n\n```bash\npip install cysecuretools\n```\n\n# Quick Start\n```python\nfrom cysecuretools import CySecureTools\n\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\n\n# Ensure that the device has a valid state by passing an entrance exam\ntools.entrance_exam()\n\n# Create a common key pair used by the secure device and user application\ntools.create_keys()\n\n# Create a JWT packet that contains the policy and keys to be provisioned to a device\ntools.create_provisioning_packet()\n\n# Execute device provisioning\ntools.provision_device()\n\n# Sign the user application with the keys\ntools.sign_image('example-blinky.hex')\n```\n\nTo run the above code from the command line, use the `python -c` command:\n```bash\npython -c \"from cysecuretools import CySecureTools; tools = CySecureTools('CY8CPROTO-064B0S1-BLE'); tools.entrance_exam(); tools.create_keys(); tools.create_provisioning_packet(); tools.provision_device(); tools.sign_image('example-blinky.hex')\"\n```\n\n# API\n\n## **create_keys()**\nCreates keys specified in the policy file for the image signing and encryption.\n#### Parameters\n| Name          | Optional/Required  | Description   |\n| ------------- |:------------------:| ------------- |\n| overwrite     | optional           | Indicates whether overwrite the keys in the output directory if they already exist. The available values: True, False, None. If None, a prompt will ask whether to overwrite the existing keys. |\n| out           | optional           | The output directory for generated keys. By default, the keys location will be as specified in the policy file. |\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.create_keys()\n```\n\n## **create_provisioning_packet()**\nCreates a JWT packet (a file to be programmed into the device during the provisioning procedure). In general, this is a policy, keys, and certificates in the JWT format. Returns True if the packet is created successfully, otherwise - False.\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.create_provisioning_packet()\n```\n\n## **provision_device()**\nStarts device provisioning process. Returns true if provisioning was success, otherwise False.\n\n#### Parameters\n| Name          | Optional/Required  | Description   |\n| ------------- |:------------------:| ------------- |\n| probe_id      | optional           | Probe serial number. Can be used to specify probe if more than one device is connected to a computer. |\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.provision_device()\n```\n\n## **sign_image()**\nSigns the user application with the keys created by the _create_keys()_ API.\n\n#### Parameters\n| Name          | Optional/Required  | Description   |\n| ------------- |:------------------:| ------------- |\n| hex_file      | required           | The hex file with the user application. |\n| image_id      | optional           | The ID of the firmware image in the device. The default value is 4. |\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.sign_image('example-blinky.hex')\n```\n\n## **entrance_exam()**\nChecks the device life-cycle, Flashboot firmware, and Flash memory state. Returns True if the device is ready for provisioning, otherwise - False.\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.entrance_exam()\n```\n\n## **create_x509_certificate()**\nCreates a certificate in the X.509 format based on the device public key.\n\n#### Parameters\n| Name          | Optional/Required  | Description   |\n| ------------- |:------------------:| ------------- |\n| cert_name     | optional           | The certificate filename. |\n| cert_encoding | optional           | The certificate encoding. |\n| probe_id      | optional           | The probe ID. Used to read a public key and die ID from a device. Can be used to specify a probe if more than one device is connected to a computer. |\n| kwargs        | optional           | The dictionary with the certificate fields. |\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.create_x509_certificate()\n```\n\n## **flash_map()**\nThe API provides an image address and size from the policy file. Returns a tuple with the address and size for a specified image.\n\n#### Parameters\n| Name          | Optional/Required  | Description   |\n| ------------- |:------------------:| ------------- |\n| image_id      | optional           | The ID of the firmware image in the device. The default value is 4. |\n\n#### Usage example\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE')\ntools.flash_map()\n```\n\n# Policy and Keys\n\n## Provisioning Policies\nChange the policy by specifying _policy_ argument. All available policy files are located in _policy_ directory inside the folder with the target name in the package installation directory.\n\n## Policy Location\nBy default, the keys and policy files location is the package installation directory.\nTo use a policy file from a different location, provide the policy file location while creating a CySecureTools object.\n\nExample:\n```python\nfrom cysecuretools import CySecureTools\ntools = CySecureTools('CY8CPROTO-064B0S1-BLE', '/Users/example/policy_single_stage_CM4.json')\n```\n\n## Keys Location\nBy default, the keys location is the  _keys_ directory inside the package installation directory. The keys location can be changed in the policy file. Either an absolute or relative path can be used. If a relative path is used, it is related to the policy file location.\n\nExample:\n```json\n{\n    \"boot_auth\": [\n        8\n    ],\n    \"boot_keys\": [\n        { \"kid\": 8, \"key\": \"../keys/USERAPP_CM4_KEY.json\" }\n    ],\n    \"id\": 4,\n    \"monotonic\": 0,\n    \"smif_id\": 0,\n    \"upgrade\": true,\n    \"version\": \"0.1\",\n    \"rollback_counter\": 0,\n    \"encrypt\": true,\n    \"encrypt_key\": \"../keys/image-aes-128.key\",\n    \"encrypt_key_id\": 1,\n    \"encrypt_peer\": \"../keys/dev_pub_key.pem\",\n    \"upgrade_auth\": [\n        8\n    ],\n    \"upgrade_keys\": [\n        { \"kid\": 8, \"key\": \"../keys/USERAPP_CM4_KEY.json\" }\n    ],\n    \"resources\": [\n        {\n            \"type\": \"BOOT\",\n            \"address\": 268435456,\n            \"size\": 327680\n        },\n        {\n            \"type\": \"UPGRADE\",\n            \"address\": 268763136,\n            \"size\": 327680\n        }\n    ]\n}\n```\n\nThe policy file properties which represent the keys:\n\n| Property      | Description  |\n| ------------- |------------------|\n| boot_keys     | The keys for signing a BOOT image. |\n| upgrade_keys  | The keys for signing an UPGRADE image. |\n| encrypt_key   | The key used for the image encryption. |\n| encrypt_peer  | The public key read from the device during the provisioning procedure. The key is used for the image encryption. |\n\n\n# CyBootloader\nBy default, the tools use _debug_ mode of CyBootloader. This allows seeing CyBootloader logs using the serial port with the baud rate 115200. The _release_ mode of CyBootloader does not have this feature, but it has a smaller size. To change CyBootloader mode, change the  cy_bootloader field in the policy file:\n```json\n\"cy_bootloader\":\n{\n    \"mode\": \"debug\"\n}\n```\n\n# Package Installation Directory\nUse the `pip` command to get the package location:\n```bash\npip show cysecuretools\n```\n\n# License and Contributions\nThe software is provided under Apache-2.0 license. Contributions to this project are accepted under the same license.\nThis project contains code from other projects. The original license text is included in those source files.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cypresssemiconductorco/cysecuretools", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "cysecuretools", "package_url": "https://pypi.org/project/cysecuretools/", "platform": "", "project_url": "https://pypi.org/project/cysecuretools/", "project_urls": {"Homepage": "https://github.com/cypresssemiconductorco/cysecuretools"}, "release_url": "https://pypi.org/project/cysecuretools/1.4.1/", "requires_dist": ["cryptography (>=2.4.2)", "click (>=7.0)", "intelhex (>=2.2.1)", "python-jose (>=3.0.1)", "jsonschema (>=3.0.0)", "pyocd (==0.23.0)"], "requires_python": ">=3.6", "summary": "Cypress secure tools for Python", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package contains security tools for creating keys, creating certificates, signing user application, and provisioning Cypress MCUs.</p>\n<h1>Features</h1>\n<ul>\n<li>\n<p>Create keys - A key is a file used to authorize access to device data. There must be a common key pair between the secure device and user application. A device must be provisioned with a public key and user application must be signed with corresponding private key from same pair.</p>\n</li>\n<li>\n<p>Provisioning a device - Provisioning is the act of configuring a device with an authorized set of keys, certificates, and policies.</p>\n</li>\n<li>\n<p>Entrance exam - Before provisioning a device, there is an option to ensure that the device has a valid state by passing an entrance exam.</p>\n</li>\n<li>\n<p>Sign a user application - To run a user application on a secure device, the application must be signed with the same keys that the device has been provisioned with.</p>\n</li>\n<li>\n<p>Create a certificate - Create a certificate in the X.509 format with the device public key inside and signed with the private key. The certificate can be used when connecting to a cloud service.</p>\n</li>\n</ul>\n<h1>Prerequisites</h1>\n<ul>\n<li>\n<p>Python 3.6 or later</p>\n</li>\n<li>\n<p>Installed the libusb driver</p>\n<p><strong>Windows</strong></p>\n<ul>\n<li>Download and unzip libusb-1.0.21.7z from <a href=\"https://github.com/libusb/libusb/releases/tag/v1.0.21\" rel=\"nofollow\">https://github.com/libusb/libusb/releases/tag/v1.0.21</a></li>\n<li>Run following command to determine if a Python shell is executing in 32-bit or 64-bit mode on OS: <code>python -c \"import struct; print(struct.calcsize('P') * 8)\"</code></li>\n<li>Copy <em>libusb-1.0.dll</em> file into Python folder (use the 64-bit version of DLL for the 64-bit Python and the 32-bit version of DLL for the 32-bit Python)</li>\n<li>Make sure Python path is located at the beginning of the Path environment variable.</li>\n</ul>\n<p><strong>Linux/Mac OS</strong></p>\n<ul>\n<li>Use [homebrew] to install the driver from the terminal: <code>homebrew install libusb</code></li>\n</ul>\n</li>\n</ul>\n<h1>Installing Package</h1>\n<p>Invoke <code>pip install</code> from the command line:</p>\n<pre>pip install cysecuretools\n</pre>\n<h1>Quick Start</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Ensure that the device has a valid state by passing an entrance exam</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">entrance_exam</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a common key pair used by the secure device and user application</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">create_keys</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a JWT packet that contains the policy and keys to be provisioned to a device</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">create_provisioning_packet</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Execute device provisioning</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">provision_device</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Sign the user application with the keys</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">sign_image</span><span class=\"p\">(</span><span class=\"s1\">'example-blinky.hex'</span><span class=\"p\">)</span>\n</pre>\n<p>To run the above code from the command line, use the <code>python -c</code> command:</p>\n<pre>python -c <span class=\"s2\">\"from cysecuretools import CySecureTools; tools = CySecureTools('CY8CPROTO-064B0S1-BLE'); tools.entrance_exam(); tools.create_keys(); tools.create_provisioning_packet(); tools.provision_device(); tools.sign_image('example-blinky.hex')\"</span>\n</pre>\n<h1>API</h1>\n<h2><strong>create_keys()</strong></h2>\n<p>Creates keys specified in the policy file for the image signing and encryption.</p>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Optional/Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>overwrite</td>\n<td align=\"center\">optional</td>\n<td>Indicates whether overwrite the keys in the output directory if they already exist. The available values: True, False, None. If None, a prompt will ask whether to overwrite the existing keys.</td>\n</tr>\n<tr>\n<td>out</td>\n<td align=\"center\">optional</td>\n<td>The output directory for generated keys. By default, the keys location will be as specified in the policy file.</td>\n</tr></tbody></table>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">create_keys</span><span class=\"p\">()</span>\n</pre>\n<h2><strong>create_provisioning_packet()</strong></h2>\n<p>Creates a JWT packet (a file to be programmed into the device during the provisioning procedure). In general, this is a policy, keys, and certificates in the JWT format. Returns True if the packet is created successfully, otherwise - False.</p>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">create_provisioning_packet</span><span class=\"p\">()</span>\n</pre>\n<h2><strong>provision_device()</strong></h2>\n<p>Starts device provisioning process. Returns true if provisioning was success, otherwise False.</p>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Optional/Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>probe_id</td>\n<td align=\"center\">optional</td>\n<td>Probe serial number. Can be used to specify probe if more than one device is connected to a computer.</td>\n</tr></tbody></table>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">provision_device</span><span class=\"p\">()</span>\n</pre>\n<h2><strong>sign_image()</strong></h2>\n<p>Signs the user application with the keys created by the <em>create_keys()</em> API.</p>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Optional/Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hex_file</td>\n<td align=\"center\">required</td>\n<td>The hex file with the user application.</td>\n</tr>\n<tr>\n<td>image_id</td>\n<td align=\"center\">optional</td>\n<td>The ID of the firmware image in the device. The default value is 4.</td>\n</tr></tbody></table>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">sign_image</span><span class=\"p\">(</span><span class=\"s1\">'example-blinky.hex'</span><span class=\"p\">)</span>\n</pre>\n<h2><strong>entrance_exam()</strong></h2>\n<p>Checks the device life-cycle, Flashboot firmware, and Flash memory state. Returns True if the device is ready for provisioning, otherwise - False.</p>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">entrance_exam</span><span class=\"p\">()</span>\n</pre>\n<h2><strong>create_x509_certificate()</strong></h2>\n<p>Creates a certificate in the X.509 format based on the device public key.</p>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Optional/Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cert_name</td>\n<td align=\"center\">optional</td>\n<td>The certificate filename.</td>\n</tr>\n<tr>\n<td>cert_encoding</td>\n<td align=\"center\">optional</td>\n<td>The certificate encoding.</td>\n</tr>\n<tr>\n<td>probe_id</td>\n<td align=\"center\">optional</td>\n<td>The probe ID. Used to read a public key and die ID from a device. Can be used to specify a probe if more than one device is connected to a computer.</td>\n</tr>\n<tr>\n<td>kwargs</td>\n<td align=\"center\">optional</td>\n<td>The dictionary with the certificate fields.</td>\n</tr></tbody></table>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">create_x509_certificate</span><span class=\"p\">()</span>\n</pre>\n<h2><strong>flash_map()</strong></h2>\n<p>The API provides an image address and size from the policy file. Returns a tuple with the address and size for a specified image.</p>\n<h4>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th align=\"center\">Optional/Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>image_id</td>\n<td align=\"center\">optional</td>\n<td>The ID of the firmware image in the device. The default value is 4.</td>\n</tr></tbody></table>\n<h4>Usage example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">)</span>\n<span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">flash_map</span><span class=\"p\">()</span>\n</pre>\n<h1>Policy and Keys</h1>\n<h2>Provisioning Policies</h2>\n<p>Change the policy by specifying <em>policy</em> argument. All available policy files are located in <em>policy</em> directory inside the folder with the target name in the package installation directory.</p>\n<h2>Policy Location</h2>\n<p>By default, the keys and policy files location is the package installation directory.\nTo use a policy file from a different location, provide the policy file location while creating a CySecureTools object.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cysecuretools</span> <span class=\"kn\">import</span> <span class=\"n\">CySecureTools</span>\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">CySecureTools</span><span class=\"p\">(</span><span class=\"s1\">'CY8CPROTO-064B0S1-BLE'</span><span class=\"p\">,</span> <span class=\"s1\">'/Users/example/policy_single_stage_CM4.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>Keys Location</h2>\n<p>By default, the keys location is the  <em>keys</em> directory inside the package installation directory. The keys location can be changed in the policy file. Either an absolute or relative path can be used. If a relative path is used, it is related to the policy file location.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"boot_auth\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mi\">8</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"boot_keys\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"kid\"</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"../keys/USERAPP_CM4_KEY.json\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"monotonic\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"smif_id\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"upgrade\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0.1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"rollback_counter\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"encrypt\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"encrypt_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"../keys/image-aes-128.key\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"encrypt_key_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"encrypt_peer\"</span><span class=\"p\">:</span> <span class=\"s2\">\"../keys/dev_pub_key.pem\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"upgrade_auth\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"mi\">8</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"upgrade_keys\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"kid\"</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"nt\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"../keys/USERAPP_CM4_KEY.json\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"resources\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"BOOT\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"mi\">268435456</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">327680</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"UPGRADE\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"mi\">268763136</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">327680</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The policy file properties which represent the keys:</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boot_keys</td>\n<td>The keys for signing a BOOT image.</td>\n</tr>\n<tr>\n<td>upgrade_keys</td>\n<td>The keys for signing an UPGRADE image.</td>\n</tr>\n<tr>\n<td>encrypt_key</td>\n<td>The key used for the image encryption.</td>\n</tr>\n<tr>\n<td>encrypt_peer</td>\n<td>The public key read from the device during the provisioning procedure. The key is used for the image encryption.</td>\n</tr></tbody></table>\n<h1>CyBootloader</h1>\n<p>By default, the tools use <em>debug</em> mode of CyBootloader. This allows seeing CyBootloader logs using the serial port with the baud rate 115200. The <em>release</em> mode of CyBootloader does not have this feature, but it has a smaller size. To change CyBootloader mode, change the  cy_bootloader field in the policy file:</p>\n<pre><span class=\"s2\">\"cy_bootloader\"</span><span class=\"err\">:</span>\n<span class=\"p\">{</span>\n    <span class=\"nt\">\"mode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debug\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>Package Installation Directory</h1>\n<p>Use the <code>pip</code> command to get the package location:</p>\n<pre>pip show cysecuretools\n</pre>\n<h1>License and Contributions</h1>\n<p>The software is provided under Apache-2.0 license. Contributions to this project are accepted under the same license.\nThis project contains code from other projects. The original license text is included in those source files.</p>\n\n          </div>"}, "last_serial": 6946378, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0cde5ead086bcf9a79e65a4ae4f67568", "sha256": "33f39222be0e5d92eafa59f5c2b74b1e4bb0decc8211c971b977527b8800e6c8"}, "downloads": -1, "filename": "cysecuretools-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0cde5ead086bcf9a79e65a4ae4f67568", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 187287, "upload_time": "2019-09-13T12:40:27", "upload_time_iso_8601": "2019-09-13T12:40:27.773132Z", "url": "https://files.pythonhosted.org/packages/d0/53/6904025f574d1db19e1888a88d8b8a0b2d10f5b063e8ac144dc2ac3cf2fe/cysecuretools-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e22a7d4f3366bb6ebcd45f047caf2ce9", "sha256": "7edf3e886e837c2cf3e290935fbf85ff9e016366d2171d6da566f6b01e7d5cfb"}, "downloads": -1, "filename": "cysecuretools-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e22a7d4f3366bb6ebcd45f047caf2ce9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 157692, "upload_time": "2019-09-13T12:40:31", "upload_time_iso_8601": "2019-09-13T12:40:31.042737Z", "url": "https://files.pythonhosted.org/packages/fb/9f/0036e23992be6b9d6aeb5e3c125e19d07df70eb77a02fcdd4a7684fd7abb/cysecuretools-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1beeef0eee8fb43ef109cc5fc4587954", "sha256": "def15859d49d303d39fbb096e733277d052722ff39431daaf9c1b7bc333e4c19"}, "downloads": -1, "filename": "cysecuretools-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1beeef0eee8fb43ef109cc5fc4587954", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 307805, "upload_time": "2019-09-30T09:29:00", "upload_time_iso_8601": "2019-09-30T09:29:00.603872Z", "url": "https://files.pythonhosted.org/packages/91/92/8494cccccd8b511ded125c92eb8fc7d6ab26ef38e3a46863725c1f279768/cysecuretools-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef6363db9e8016b3ffa2bcbd9988dbc8", "sha256": "4d69b4ef0ea7fdf1e95134833f355712f491d0899f029e8d1aac2a48913447f4"}, "downloads": -1, "filename": "cysecuretools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ef6363db9e8016b3ffa2bcbd9988dbc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 272351, "upload_time": "2019-09-30T09:29:02", "upload_time_iso_8601": "2019-09-30T09:29:02.526789Z", "url": "https://files.pythonhosted.org/packages/56/c3/d615b86c854e4fe14aa91209d63162acc8ad38bb47b5ba3a9bfc4670679c/cysecuretools-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6156ddd50aebc3b418e30153b1407224", "sha256": "4465d79b8ee12fdebedc4f9c5ec0d48846d334ea6e27311832b32ba86d187d63"}, "downloads": -1, "filename": "cysecuretools-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6156ddd50aebc3b418e30153b1407224", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 424404, "upload_time": "2019-11-27T10:17:00", "upload_time_iso_8601": "2019-11-27T10:17:00.295363Z", "url": "https://files.pythonhosted.org/packages/5c/c8/840da2c7ece895f64ea403b18a639b6f00148e2268bb335aef53bf01cfa8/cysecuretools-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd93a04328a42da13d70d84c75fa5a3b", "sha256": "840469bfd03530d714cdf395e9fbd01499bbcb2e8e91952997903c7261a6f872"}, "downloads": -1, "filename": "cysecuretools-1.2.0.tar.gz", "has_sig": false, "md5_digest": "bd93a04328a42da13d70d84c75fa5a3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 382067, "upload_time": "2019-11-27T10:17:02", "upload_time_iso_8601": "2019-11-27T10:17:02.847808Z", "url": "https://files.pythonhosted.org/packages/53/67/06228fc3566f08eab16264146a78d30e4f2267475427a54fef0c401b5f5c/cysecuretools-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "0db013235c1955d124727b55ebb8d87e", "sha256": "83e287ee380fb3b3033287059212f081cdfeb6d7c524def11a1df3694112f6cd"}, "downloads": -1, "filename": "cysecuretools-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0db013235c1955d124727b55ebb8d87e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586530, "upload_time": "2019-12-10T09:48:11", "upload_time_iso_8601": "2019-12-10T09:48:11.741379Z", "url": "https://files.pythonhosted.org/packages/2d/f1/ab9ea4b4ba1818f54920819a2eab91baef4ee41f9ef424456bfa623df379/cysecuretools-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e56f65cdb63d759fa5d76b031d6c9ff7", "sha256": "29de6ad3ee96e8b8a2589bb85eca84394d7fc4e87f5c4d25d461b394fc2eff80"}, "downloads": -1, "filename": "cysecuretools-1.3.0.tar.gz", "has_sig": false, "md5_digest": "e56f65cdb63d759fa5d76b031d6c9ff7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533979, "upload_time": "2019-12-10T09:48:14", "upload_time_iso_8601": "2019-12-10T09:48:14.406783Z", "url": "https://files.pythonhosted.org/packages/26/6a/1ce2747fd1e54d6eb7f62eee53e58f8e392815ba8b1fad2670761c91b017/cysecuretools-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "6a766520d22ce28e62e690566f931a6b", "sha256": "208d030eb26d7bf84ea2d3a343bf29447a2d6e8227d66fb4ede608771fbbc0f5"}, "downloads": -1, "filename": "cysecuretools-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6a766520d22ce28e62e690566f931a6b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586532, "upload_time": "2019-12-30T14:06:42", "upload_time_iso_8601": "2019-12-30T14:06:42.630989Z", "url": "https://files.pythonhosted.org/packages/38/38/72e7cb63145fb5a2374e3f9d21ca0ac10d48b14f4f1377eb5300f381ae8c/cysecuretools-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7601d0f68996bc24b6601d82652d2647", "sha256": "290d16a7e5eac6c2ff20fcd57e7af316940e0997f3f993b681da86420b368426"}, "downloads": -1, "filename": "cysecuretools-1.3.1.tar.gz", "has_sig": false, "md5_digest": "7601d0f68996bc24b6601d82652d2647", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533907, "upload_time": "2019-12-30T14:06:46", "upload_time_iso_8601": "2019-12-30T14:06:46.712480Z", "url": "https://files.pythonhosted.org/packages/db/aa/b1e1343d701079a9cb02413d24dcd8bb0d8e88130886bccbb94b28ea01ca/cysecuretools-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "3af39056ab4120675789015a9bf7e6c6", "sha256": "22abafee92d5faabf74c8995d7e970809a8adb0b5ad47a1261dd44706ee32908"}, "downloads": -1, "filename": "cysecuretools-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3af39056ab4120675789015a9bf7e6c6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586532, "upload_time": "2020-01-09T13:02:06", "upload_time_iso_8601": "2020-01-09T13:02:06.095155Z", "url": "https://files.pythonhosted.org/packages/cf/1a/bd15c4852ddc945c400edf2e8de0a9f819fe2d61d67762c24c010245b489/cysecuretools-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77edb1f1151d4b8061d968d33833043e", "sha256": "bdf28459f70b134183da2479aad1debec1f08e823614342e5e70a2eab1572606"}, "downloads": -1, "filename": "cysecuretools-1.3.2.tar.gz", "has_sig": false, "md5_digest": "77edb1f1151d4b8061d968d33833043e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533924, "upload_time": "2020-01-09T13:02:08", "upload_time_iso_8601": "2020-01-09T13:02:08.669932Z", "url": "https://files.pythonhosted.org/packages/3c/06/61c60df62339fc10943efc3cd41b889beb9a8a107b097e9c86eeabc79954/cysecuretools-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "ca1839458d59dd3c84b4134d32a2cefe", "sha256": "f1e41378e8faddfde73bc21d1d1bc2e2343d65fd7ccd9092df56bdcafb24ebc6"}, "downloads": -1, "filename": "cysecuretools-1.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ca1839458d59dd3c84b4134d32a2cefe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586532, "upload_time": "2020-01-09T14:43:29", "upload_time_iso_8601": "2020-01-09T14:43:29.363857Z", "url": "https://files.pythonhosted.org/packages/65/0f/5623b580deb862842a7f18cfb604c530a6a011b1808cb7b9b37108370e27/cysecuretools-1.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d971c058b26b685d65cd8127c0df1194", "sha256": "c168f090f2c6fff249e35af144373ef7eaa82fe47545de47746e55b210bfaaf2"}, "downloads": -1, "filename": "cysecuretools-1.3.3.tar.gz", "has_sig": false, "md5_digest": "d971c058b26b685d65cd8127c0df1194", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533910, "upload_time": "2020-01-09T14:43:31", "upload_time_iso_8601": "2020-01-09T14:43:31.859505Z", "url": "https://files.pythonhosted.org/packages/64/2d/ed90b2b9cd93b8135d1b3350efeab003c06f683cea50270fdc8e2b531041/cysecuretools-1.3.3.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "f3f6d0ec7f03669d307ec0c07806bbc4", "sha256": "cea595b074492d8275cd379a41ecd3f7047ddc32875d53c058ade9a67bc25a54"}, "downloads": -1, "filename": "cysecuretools-1.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3f6d0ec7f03669d307ec0c07806bbc4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 610220, "upload_time": "2020-04-03T15:59:24", "upload_time_iso_8601": "2020-04-03T15:59:24.961786Z", "url": "https://files.pythonhosted.org/packages/28/01/559b380fb0cba3a8543465cb86aed070060a114627df513a412b4ce7ce61/cysecuretools-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0607f3b45f694e40663a99490b88f339", "sha256": "97c5535cdf2c2a62b8006c3cf6e742460321e0411744b4c6710084fc875fc7b8"}, "downloads": -1, "filename": "cysecuretools-1.4.0.tar.gz", "has_sig": false, "md5_digest": "0607f3b45f694e40663a99490b88f339", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 556441, "upload_time": "2020-04-03T15:59:26", "upload_time_iso_8601": "2020-04-03T15:59:26.643049Z", "url": "https://files.pythonhosted.org/packages/dc/6b/c265a915d504f68da514346e31c817a53b57ac086030faf73d6879e5c8e3/cysecuretools-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "d476c1282717c8bc773ca5df853ce3a8", "sha256": "afab9bf58918646d70d04318013cbe671a15f2b43c1072153485d319d31f3492"}, "downloads": -1, "filename": "cysecuretools-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d476c1282717c8bc773ca5df853ce3a8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586531, "upload_time": "2020-04-03T20:40:38", "upload_time_iso_8601": "2020-04-03T20:40:38.035562Z", "url": "https://files.pythonhosted.org/packages/c6/1a/a4de43914a30a08fab3d065886b2270108637308903cd28718c17544882b/cysecuretools-1.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c550bc09c20f51bda34412061a1a81ef", "sha256": "961228bf2e58738d55117dcea631cc5134d11dea36049561ab0ce6f98930a1ee"}, "downloads": -1, "filename": "cysecuretools-1.4.1.tar.gz", "has_sig": false, "md5_digest": "c550bc09c20f51bda34412061a1a81ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533955, "upload_time": "2020-04-03T20:40:39", "upload_time_iso_8601": "2020-04-03T20:40:39.970267Z", "url": "https://files.pythonhosted.org/packages/4e/95/8730565dd7ef3e18fefa7da9907486e3fb5fb66b0b81648a2d10d857c651/cysecuretools-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d476c1282717c8bc773ca5df853ce3a8", "sha256": "afab9bf58918646d70d04318013cbe671a15f2b43c1072153485d319d31f3492"}, "downloads": -1, "filename": "cysecuretools-1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d476c1282717c8bc773ca5df853ce3a8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 586531, "upload_time": "2020-04-03T20:40:38", "upload_time_iso_8601": "2020-04-03T20:40:38.035562Z", "url": "https://files.pythonhosted.org/packages/c6/1a/a4de43914a30a08fab3d065886b2270108637308903cd28718c17544882b/cysecuretools-1.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c550bc09c20f51bda34412061a1a81ef", "sha256": "961228bf2e58738d55117dcea631cc5134d11dea36049561ab0ce6f98930a1ee"}, "downloads": -1, "filename": "cysecuretools-1.4.1.tar.gz", "has_sig": false, "md5_digest": "c550bc09c20f51bda34412061a1a81ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 533955, "upload_time": "2020-04-03T20:40:39", "upload_time_iso_8601": "2020-04-03T20:40:39.970267Z", "url": "https://files.pythonhosted.org/packages/4e/95/8730565dd7ef3e18fefa7da9907486e3fb5fb66b0b81648a2d10d857c651/cysecuretools-1.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:03 2020"}