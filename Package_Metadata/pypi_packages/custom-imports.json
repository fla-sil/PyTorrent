{"info": {"author": "Robert Wright", "author_email": "madman.bob@hotmail.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# custom_imports\n\nTools to hook into Python's `import` syntax.\n\nThese hooks can allow you to `import` config files,\nmodules written in different languages,\nor even create entirely virtual modules.\n\n## Basic Usage\n\nIncluded in `custom_imports` are some sample importers,\n`json_importer`, `cfg_importer`, `ini_importer`, and `CSVImporter`.\n\nWhen registered, these importers allow you to `import` the corresponding file\ntypes as though they were Python modules.\n\nFor example,\n\n`server_config.ini`\n\n```ini\n[environment]\nserver_name = prod\ndebug = no\n\n[database]\nhost = https://example.com\nport = 27017\nusername = <username>\npassword = <password>\n```\n\n`connections.py`\n\n```python\nimport server_config\n\nif server_config.environment.debug:\n    setup_logging()\n\ndb_client = DatabaseClient(**server_config.database)\n```\n\n## Registration\n\nImporters can be registered with `importer.register()`.\n\n```python\nfrom custom_imports import ini_importer\n\nini_importer.register()\n\nimport server_config\n```\n\nAlternatively, you can use the importer as a context manager:\n\n```python\nwith ini_importer:\n    import server_config\n```\n\nand the importer deregisters itself once the `with` block has been terminated.\n\n## Deregistration\n\nImport hooks modify `sys.meta_path`, which is global, so it's a bad idea to\nleave your importers hanging around if you intend for your code to be used as\npart of a larger project.\n\nFor example, if two modules use different flavors of CSV, then one of them is\ngoing to be unable to import their CSV files.\n\nThankfully, once a module has been imported for the first time, it is stored in\nthe module cache, and so you no longer need the importer.\n\nTo keep your `sys.meta_path` clear, you can deregister an importer once you're\nfinished with it.\nThis can be done either with `importer.deregister()`, or by using the importer\nas a context manager.\n\n## Environment-wide Setup\n\nOn the other hand, it can be ugly needing to have a non-`import` (the importer\nregistration) before an `import` (your custom module type).\n\nIf you *are* the only project needing to use this Python environment, then you\ncan register an importer environment-wide.\nTo do so, create a `custom-imports.pth` file in your environment's\n`site-packages` folder with the following contents:\n\n```pth\nimport custom_imports; custom_imports.ini_importer.register()\n```\n\nFor multiple importers, repeat the entire line, replacing the importer used.\n\nIf your project uses an importer in this way, be sure to include this step in\nyour project's environment setup instructions.\n\n## Reference\n\n### `Finder`\n\nModule `Finder`s search for a module among the various paths available.\nIf it finds a module, it returns a \"locator\" for that module,\nwhich can be any non-`None` Python object that contains all the\ninformation required to immediately locate the module.\nIf it fails to find a module, it returns `None`.\n\nModule `Finder`s do not attempt to construct the module,\nthey only find their locators.\n\nCustom `Finder`s should inherit from `Finder` and override the `find_module_locator` method.\n\nTwo module `Finder`s are provided by default:\n\n#### `SimpleFinder`\n\nA basic Finder class.\n\n```python\nSimpleFinder(\n    locate_module=func,\n)\n```\n\nFinds a module locator by calling `func(fullname, path, target)`.\n\n#### `FileModuleExtensionFinder`\n\nFinder for file based modules by file extensions.\n\nA file based module is a module that is generated from a single file.\n\n```python\nFileModuleExtensionFinder(ext)\n```\n\nThis Finder interprets a module's name as a filename, with extension `ext`.\nParent modules are interpreted as directories.\n\nThis provides a relative path, which is searched for on the standard module\nsearch path. If a file with that relative path is found, then the absolute\n`Path` of that file is returned as its module locator.\n\n### `Loader`\n\nModule `Loader`s take module locators, and construct the module at that location.\n\nCustom `Loader`s should inherit from `Loader` and override the `create_module` and `exec_module` methods.\n\nTwo module `Loader`s are provided by default:\n\n#### `SimpleLoader`\n\nA basic Loader class.\n\n```python\nSimpleLoader(\n    module_type=cls,\n    module_type_kwargs=kwargs,\n    load_module=func,\n)\n```\n\nCreates an empty module by calling the equivalent of `cls(**kwargs)`,\nand executes it by calling `func(module, module_locator)`.\n\n#### `FileModuleLoader`\n\nLoader for file based modules.\n\nA file based module is a module that is generated from a single file.\n\n```python\nFileModuleLoader(\n    module_type=cls,\n    module_type_kwargs=kwargs,\n    read_module=func,\n)\n```\n\nThis Loader takes a `Path` to the file to be loaded as its module locator,\ncreates an empty module by calling the equivalent of `cls(**kwargs)`,\nand executes it by calling `func(module, file)`.\n\nThe file handle passed to `func` is closed after `func` terminates.\n\n### `Importer`\n\nA basic Importer class.\n\n```python\nImporter(\n    finder=finder,\n    loader=loader,\n)\n```\n\nWhen registered, this `Importer` overloads `import` syntax to additionally\nattempt to use `finder` to find modules, and `loader` to load them.\n\nRegister an `Importer` with `importer.register()`.\nDeregister an `Importer` with `importer.deregister()`.\n\nMay also be used as a context manager:\n\n```python\nwith foo_importer:\n    import foo\n```\n\nwith the importer registering itself at the start of the block, and\nderegistering itself at the end.\n\n### Sample importers\n\n#### `json_importer`\n\nWhen registered, imports `.json` files as `dict`s.\n\n#### `cfg_importer`\n\nWhen registered, import `.cfg` files using `ConfigParser`,\nwith attribute notation.\n\n#### `ini_importer`\n\nWhen registered, import `.ini` files using `ConfigParser`,\nwith attribute notation.\n\n#### `CSVImporter`\n\nWhen instantiated and registered, import `.csv` files using the provided CSV reader.\n\n```python\nCSVImporter(\n    csv_reader=csv_reader,\n    csv_reader_kwargs=kwargs,\n)\n```\n\nThis importer loads a module using the result of `csv_reader(file, **kwargs)`.\n\n`csv_reader` should be a CSV reader class (for example, `csv.reader`, or\n`csv.DictReader`).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/madman-bob/python-custom-imports", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "custom-imports", "package_url": "https://pypi.org/project/custom-imports/", "platform": "", "project_url": "https://pypi.org/project/custom-imports/", "project_urls": {"Homepage": "https://github.com/madman-bob/python-custom-imports"}, "release_url": "https://pypi.org/project/custom-imports/1.0.0/", "requires_dist": ["more-properties", "twine"], "requires_python": ">=3.6", "summary": "Tools to hook into Python's import syntax", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>custom_imports</h1>\n<p>Tools to hook into Python's <code>import</code> syntax.</p>\n<p>These hooks can allow you to <code>import</code> config files,\nmodules written in different languages,\nor even create entirely virtual modules.</p>\n<h2>Basic Usage</h2>\n<p>Included in <code>custom_imports</code> are some sample importers,\n<code>json_importer</code>, <code>cfg_importer</code>, <code>ini_importer</code>, and <code>CSVImporter</code>.</p>\n<p>When registered, these importers allow you to <code>import</code> the corresponding file\ntypes as though they were Python modules.</p>\n<p>For example,</p>\n<p><code>server_config.ini</code></p>\n<pre><span class=\"k\">[environment]</span>\n<span class=\"na\">server_name</span> <span class=\"o\">=</span> <span class=\"s\">prod</span>\n<span class=\"na\">debug</span> <span class=\"o\">=</span> <span class=\"s\">no</span>\n\n<span class=\"k\">[database]</span>\n<span class=\"na\">host</span> <span class=\"o\">=</span> <span class=\"s\">https://example.com</span>\n<span class=\"na\">port</span> <span class=\"o\">=</span> <span class=\"s\">27017</span>\n<span class=\"na\">username</span> <span class=\"o\">=</span> <span class=\"s\">&lt;username&gt;</span>\n<span class=\"na\">password</span> <span class=\"o\">=</span> <span class=\"s\">&lt;password&gt;</span>\n</pre>\n<p><code>connections.py</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">server_config</span>\n\n<span class=\"k\">if</span> <span class=\"n\">server_config</span><span class=\"o\">.</span><span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n    <span class=\"n\">setup_logging</span><span class=\"p\">()</span>\n\n<span class=\"n\">db_client</span> <span class=\"o\">=</span> <span class=\"n\">DatabaseClient</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">server_config</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"p\">)</span>\n</pre>\n<h2>Registration</h2>\n<p>Importers can be registered with <code>importer.register()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">custom_imports</span> <span class=\"kn\">import</span> <span class=\"n\">ini_importer</span>\n\n<span class=\"n\">ini_importer</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">()</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">server_config</span>\n</pre>\n<p>Alternatively, you can use the importer as a context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">ini_importer</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">server_config</span>\n</pre>\n<p>and the importer deregisters itself once the <code>with</code> block has been terminated.</p>\n<h2>Deregistration</h2>\n<p>Import hooks modify <code>sys.meta_path</code>, which is global, so it's a bad idea to\nleave your importers hanging around if you intend for your code to be used as\npart of a larger project.</p>\n<p>For example, if two modules use different flavors of CSV, then one of them is\ngoing to be unable to import their CSV files.</p>\n<p>Thankfully, once a module has been imported for the first time, it is stored in\nthe module cache, and so you no longer need the importer.</p>\n<p>To keep your <code>sys.meta_path</code> clear, you can deregister an importer once you're\nfinished with it.\nThis can be done either with <code>importer.deregister()</code>, or by using the importer\nas a context manager.</p>\n<h2>Environment-wide Setup</h2>\n<p>On the other hand, it can be ugly needing to have a non-<code>import</code> (the importer\nregistration) before an <code>import</code> (your custom module type).</p>\n<p>If you <em>are</em> the only project needing to use this Python environment, then you\ncan register an importer environment-wide.\nTo do so, create a <code>custom-imports.pth</code> file in your environment's\n<code>site-packages</code> folder with the following contents:</p>\n<pre>import custom_imports; custom_imports.ini_importer.register()\n</pre>\n<p>For multiple importers, repeat the entire line, replacing the importer used.</p>\n<p>If your project uses an importer in this way, be sure to include this step in\nyour project's environment setup instructions.</p>\n<h2>Reference</h2>\n<h3><code>Finder</code></h3>\n<p>Module <code>Finder</code>s search for a module among the various paths available.\nIf it finds a module, it returns a \"locator\" for that module,\nwhich can be any non-<code>None</code> Python object that contains all the\ninformation required to immediately locate the module.\nIf it fails to find a module, it returns <code>None</code>.</p>\n<p>Module <code>Finder</code>s do not attempt to construct the module,\nthey only find their locators.</p>\n<p>Custom <code>Finder</code>s should inherit from <code>Finder</code> and override the <code>find_module_locator</code> method.</p>\n<p>Two module <code>Finder</code>s are provided by default:</p>\n<h4><code>SimpleFinder</code></h4>\n<p>A basic Finder class.</p>\n<pre><span class=\"n\">SimpleFinder</span><span class=\"p\">(</span>\n    <span class=\"n\">locate_module</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finds a module locator by calling <code>func(fullname, path, target)</code>.</p>\n<h4><code>FileModuleExtensionFinder</code></h4>\n<p>Finder for file based modules by file extensions.</p>\n<p>A file based module is a module that is generated from a single file.</p>\n<pre><span class=\"n\">FileModuleExtensionFinder</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">)</span>\n</pre>\n<p>This Finder interprets a module's name as a filename, with extension <code>ext</code>.\nParent modules are interpreted as directories.</p>\n<p>This provides a relative path, which is searched for on the standard module\nsearch path. If a file with that relative path is found, then the absolute\n<code>Path</code> of that file is returned as its module locator.</p>\n<h3><code>Loader</code></h3>\n<p>Module <code>Loader</code>s take module locators, and construct the module at that location.</p>\n<p>Custom <code>Loader</code>s should inherit from <code>Loader</code> and override the <code>create_module</code> and <code>exec_module</code> methods.</p>\n<p>Two module <code>Loader</code>s are provided by default:</p>\n<h4><code>SimpleLoader</code></h4>\n<p>A basic Loader class.</p>\n<pre><span class=\"n\">SimpleLoader</span><span class=\"p\">(</span>\n    <span class=\"n\">module_type</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"p\">,</span>\n    <span class=\"n\">module_type_kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"n\">load_module</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Creates an empty module by calling the equivalent of <code>cls(**kwargs)</code>,\nand executes it by calling <code>func(module, module_locator)</code>.</p>\n<h4><code>FileModuleLoader</code></h4>\n<p>Loader for file based modules.</p>\n<p>A file based module is a module that is generated from a single file.</p>\n<pre><span class=\"n\">FileModuleLoader</span><span class=\"p\">(</span>\n    <span class=\"n\">module_type</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"p\">,</span>\n    <span class=\"n\">module_type_kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"n\">read_module</span><span class=\"o\">=</span><span class=\"n\">func</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This Loader takes a <code>Path</code> to the file to be loaded as its module locator,\ncreates an empty module by calling the equivalent of <code>cls(**kwargs)</code>,\nand executes it by calling <code>func(module, file)</code>.</p>\n<p>The file handle passed to <code>func</code> is closed after <code>func</code> terminates.</p>\n<h3><code>Importer</code></h3>\n<p>A basic Importer class.</p>\n<pre><span class=\"n\">Importer</span><span class=\"p\">(</span>\n    <span class=\"n\">finder</span><span class=\"o\">=</span><span class=\"n\">finder</span><span class=\"p\">,</span>\n    <span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"n\">loader</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>When registered, this <code>Importer</code> overloads <code>import</code> syntax to additionally\nattempt to use <code>finder</code> to find modules, and <code>loader</code> to load them.</p>\n<p>Register an <code>Importer</code> with <code>importer.register()</code>.\nDeregister an <code>Importer</code> with <code>importer.deregister()</code>.</p>\n<p>May also be used as a context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">foo_importer</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">foo</span>\n</pre>\n<p>with the importer registering itself at the start of the block, and\nderegistering itself at the end.</p>\n<h3>Sample importers</h3>\n<h4><code>json_importer</code></h4>\n<p>When registered, imports <code>.json</code> files as <code>dict</code>s.</p>\n<h4><code>cfg_importer</code></h4>\n<p>When registered, import <code>.cfg</code> files using <code>ConfigParser</code>,\nwith attribute notation.</p>\n<h4><code>ini_importer</code></h4>\n<p>When registered, import <code>.ini</code> files using <code>ConfigParser</code>,\nwith attribute notation.</p>\n<h4><code>CSVImporter</code></h4>\n<p>When instantiated and registered, import <code>.csv</code> files using the provided CSV reader.</p>\n<pre><span class=\"n\">CSVImporter</span><span class=\"p\">(</span>\n    <span class=\"n\">csv_reader</span><span class=\"o\">=</span><span class=\"n\">csv_reader</span><span class=\"p\">,</span>\n    <span class=\"n\">csv_reader_kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This importer loads a module using the result of <code>csv_reader(file, **kwargs)</code>.</p>\n<p><code>csv_reader</code> should be a CSV reader class (for example, <code>csv.reader</code>, or\n<code>csv.DictReader</code>).</p>\n\n          </div>"}, "last_serial": 6979279, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "32c1cfdbb55a9c6a534c8c339d9a98ff", "sha256": "cce3245172e05a9d6d2858b338fbc689e3055b2e740338cd5a96e79608ed0351"}, "downloads": -1, "filename": "custom_imports-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "32c1cfdbb55a9c6a534c8c339d9a98ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13312, "upload_time": "2020-04-08T17:15:37", "upload_time_iso_8601": "2020-04-08T17:15:37.752727Z", "url": "https://files.pythonhosted.org/packages/25/98/5b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9/custom_imports-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9310a363297b13d1051818524e8a9109", "sha256": "cf5bf1365f8f9e4f078020a5a5d0d81f78df8f3f91431c52a0f9785c5890e410"}, "downloads": -1, "filename": "custom_imports-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9310a363297b13d1051818524e8a9109", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10096, "upload_time": "2020-04-08T17:15:39", "upload_time_iso_8601": "2020-04-08T17:15:39.685665Z", "url": "https://files.pythonhosted.org/packages/c2/a9/5c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662/custom_imports-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32c1cfdbb55a9c6a534c8c339d9a98ff", "sha256": "cce3245172e05a9d6d2858b338fbc689e3055b2e740338cd5a96e79608ed0351"}, "downloads": -1, "filename": "custom_imports-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "32c1cfdbb55a9c6a534c8c339d9a98ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13312, "upload_time": "2020-04-08T17:15:37", "upload_time_iso_8601": "2020-04-08T17:15:37.752727Z", "url": "https://files.pythonhosted.org/packages/25/98/5b1c86d984b40ca3e2ce2ba7216bd997e6a2bf2aa4fedc6e6f0bf07da1a9/custom_imports-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9310a363297b13d1051818524e8a9109", "sha256": "cf5bf1365f8f9e4f078020a5a5d0d81f78df8f3f91431c52a0f9785c5890e410"}, "downloads": -1, "filename": "custom_imports-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9310a363297b13d1051818524e8a9109", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10096, "upload_time": "2020-04-08T17:15:39", "upload_time_iso_8601": "2020-04-08T17:15:39.685665Z", "url": "https://files.pythonhosted.org/packages/c2/a9/5c969a7875d63025917724a6a628212d55e980004617fa9e77b646ae8662/custom_imports-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:18 2020"}