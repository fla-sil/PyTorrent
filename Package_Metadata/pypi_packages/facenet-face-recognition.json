{"info": {"author": "Paolo Ripamonti", "author_email": "paolo.ripamonti93@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Face Recognition\n\nSimple library to recognize faces from given images\n\n[<img src=\"https://www.kaggleusercontent.com/kf/21132673/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..Hig7ClqLMXecFinIUQqE_g.Fg1LGL5rc0-PLv7twHxDXzUI8oK3nZGyfpUDv_P-le31C2I2-qoFjWzaxz1n1WlhJqaFyzkqMlfptZy65zaCvk5bxQ5h4bEeS6AFTcORFUdYfMqBM5cYRvWKg4KX-sM-SeWRPRh_s-HWIxe4m2gZWw.l8bObQ1Fhvykp8XMeIAbXw/__results___files/__results___23_0.png\">](https://www.kaggle.com/paoloripamonti/face-recogniton)\n\n### Face Recognition pipeline\n\nBelow the pipeline for face recognition:\n- **Face Detection**: the [MTCNN](https://github.com/ipazc/mtcnn) algorithm is used to do face detection\n- **Face Alignement** Align face by eyes line\n- **Face Encoding** Extract encoding from face using [FaceNet](https://github.com/faustomorales/keras-facenet)\n- **Face Classification** Classify face via eculidean distrances between face encodings\n\n### How to install\n```git\npip install git+https://github.com/paoloripamonti/face-recognition\n```\n\n### How to train custom model\n\nInitialize model\n```python\nfrom face_recognition import FaceRecognition\n\nfr = FaceRecognition()\n```\n\n#### Train model with pandas DataFrame:\n\n```python\nfr = FaceRecognition()\n\nfr.fit_from_dataframe(df)\n```\n\nwhere 'df' is pandas DataFrame with column **person** (person name) and column **path** (image path)\n\n#### Train model with folder:\n\n```python\nfr = FaceRecognition()\n\nfr.fit('/path/root/')\n```\n\nthe root folder must have the following structure:\n\n```\nroot\\\n    Person_1\\\n        image.jpg\n        ...\n        image.jpg\n    Person_2\\\n        image.jpg\n        ...\n        image.jpg\n    ...\n        \n```\n\n### Save and load model\n\nyou can save and load model as **pickle** file.\n\n\n```python\nfr.save('model.pkl')\n```\n\n```python\nfr = FaceRecognition()\n\nfr.load('model.pkl')\n```\n\n\n### Predict image\n\n```python\nfr.predict('/path/image.jpg')\n```\n\nRecognize faces from given image.\nThe output is a JSON with folling structure:\n\n```\n{\n  \"frame\": \"image data\", # base64 image with bounding boxes\n  \"elapsed_time\": time, # elapsed time in seconds\n  \"predictions\": [\n      {\n        \"person\": \"Person\", # person name\n        \"confidence\": float, # prediction confidence\n        \"box\": (x1, y1, x2, y2) # face bounding box\n      }\n  ]\n}\n```\n\n### Example\n\n[<img src=\"https://www.kaggleusercontent.com/kf/21129215/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..HbixuFgKpuPhmZNn6lkvkQ.ll6VOKAnA0aeJQpm-v9L0hYYZzIAfvvTa1TAxVzJP-bRDPwEpH1WYyrgrX4Vr_ADSI929jwLSGSuuq9KGJnQogJbYVPTRkGW5pBxO8R4rhxrSkg8IoQ6pokYR6ZtehZvjKbK01Bjkow6ykbFWZmZcA.xUV-JT8XBPEHdZJm-yasZQ/__results___files/__results___20_0.png\">](https://www.kaggle.com/paoloripamonti/face-recogniton)\n\n[<img src=\"https://www.kaggleusercontent.com/kf/21129215/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..HbixuFgKpuPhmZNn6lkvkQ.ll6VOKAnA0aeJQpm-v9L0hYYZzIAfvvTa1TAxVzJP-bRDPwEpH1WYyrgrX4Vr_ADSI929jwLSGSuuq9KGJnQogJbYVPTRkGW5pBxO8R4rhxrSkg8IoQ6pokYR6ZtehZvjKbK01Bjkow6ykbFWZmZcA.xUV-JT8XBPEHdZJm-yasZQ/__results___files/__results___21_0.png\">](https://www.kaggle.com/paoloripamonti/face-recogniton)\n\n\nFor more details you can see: [https://www.kaggle.com/paoloripamonti/face-recogniton](https://www.kaggle.com/paoloripamonti/face-recogniton)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/paoloripamonti/face-recognition.git", "keywords": "facenet,opencv,deep learning,machine learning", "license": "", "maintainer": "", "maintainer_email": "", "name": "facenet-face-recognition", "package_url": "https://pypi.org/project/facenet-face-recognition/", "platform": "", "project_url": "https://pypi.org/project/facenet-face-recognition/", "project_urls": {"Homepage": "https://github.com/paoloripamonti/face-recognition.git"}, "release_url": "https://pypi.org/project/facenet-face-recognition/0.1/", "requires_dist": null, "requires_python": "", "summary": "Face Recognition", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Face Recognition</h1>\n<p>Simple library to recognize faces from given images</p>\n<p><a href=\"https://www.kaggle.com/paoloripamonti/face-recogniton\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f45737675ab03aa403524413b08e27e813faf795/68747470733a2f2f7777772e6b6167676c6575736572636f6e74656e742e636f6d2f6b662f32313133323637332f65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d54493451304a444c5568544d6a5532496e302e2e48696737436c714c4d58656346696e49555171455f672e4667314c474c357263302d504c76377477487844587a5549386f4b336e5a477966705544765f502d6c653331433249322d716f466a577a61787a316e31576c684a716146797a6b714d6c6670745a7936357a6143766b356278513568346245655336414654634f5246556459664d71424d3563595276574b67344b582d734d2d536557525052685f732d4857497865346d32675a57772e6c38624f625131466876796b7038584d6549416258772f5f5f726573756c74735f5f5f66696c65732f5f5f726573756c74735f5f5f32335f302e706e67\"></a></p>\n<h3>Face Recognition pipeline</h3>\n<p>Below the pipeline for face recognition:</p>\n<ul>\n<li><strong>Face Detection</strong>: the <a href=\"https://github.com/ipazc/mtcnn\" rel=\"nofollow\">MTCNN</a> algorithm is used to do face detection</li>\n<li><strong>Face Alignement</strong> Align face by eyes line</li>\n<li><strong>Face Encoding</strong> Extract encoding from face using <a href=\"https://github.com/faustomorales/keras-facenet\" rel=\"nofollow\">FaceNet</a></li>\n<li><strong>Face Classification</strong> Classify face via eculidean distrances between face encodings</li>\n</ul>\n<h3>How to install</h3>\n<pre>pip install git+https://github.com/paoloripamonti/face-recognition\n</pre>\n<h3>How to train custom model</h3>\n<p>Initialize model</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">face_recognition</span> <span class=\"kn\">import</span> <span class=\"n\">FaceRecognition</span>\n\n<span class=\"n\">fr</span> <span class=\"o\">=</span> <span class=\"n\">FaceRecognition</span><span class=\"p\">()</span>\n</pre>\n<h4>Train model with pandas DataFrame:</h4>\n<pre><span class=\"n\">fr</span> <span class=\"o\">=</span> <span class=\"n\">FaceRecognition</span><span class=\"p\">()</span>\n\n<span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">fit_from_dataframe</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>where 'df' is pandas DataFrame with column <strong>person</strong> (person name) and column <strong>path</strong> (image path)</p>\n<h4>Train model with folder:</h4>\n<pre><span class=\"n\">fr</span> <span class=\"o\">=</span> <span class=\"n\">FaceRecognition</span><span class=\"p\">()</span>\n\n<span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"s1\">'/path/root/'</span><span class=\"p\">)</span>\n</pre>\n<p>the root folder must have the following structure:</p>\n<pre><code>root\\\n    Person_1\\\n        image.jpg\n        ...\n        image.jpg\n    Person_2\\\n        image.jpg\n        ...\n        image.jpg\n    ...\n        \n</code></pre>\n<h3>Save and load model</h3>\n<p>you can save and load model as <strong>pickle</strong> file.</p>\n<pre><span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'model.pkl'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">fr</span> <span class=\"o\">=</span> <span class=\"n\">FaceRecognition</span><span class=\"p\">()</span>\n\n<span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'model.pkl'</span><span class=\"p\">)</span>\n</pre>\n<h3>Predict image</h3>\n<pre><span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"s1\">'/path/image.jpg'</span><span class=\"p\">)</span>\n</pre>\n<p>Recognize faces from given image.\nThe output is a JSON with folling structure:</p>\n<pre><code>{\n  \"frame\": \"image data\", # base64 image with bounding boxes\n  \"elapsed_time\": time, # elapsed time in seconds\n  \"predictions\": [\n      {\n        \"person\": \"Person\", # person name\n        \"confidence\": float, # prediction confidence\n        \"box\": (x1, y1, x2, y2) # face bounding box\n      }\n  ]\n}\n</code></pre>\n<h3>Example</h3>\n<p><a href=\"https://www.kaggle.com/paoloripamonti/face-recogniton\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0e75022a895d61a7a460265a473b57dddcace20/68747470733a2f2f7777772e6b6167676c6575736572636f6e74656e742e636f6d2f6b662f32313132393231352f65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d54493451304a444c5568544d6a5532496e302e2e486269787546674b707550686d5a4e6e366c6b766b512e6c6c36564f4b416e413061654a51706d2d76394c306859595a7a4941667676546131544178567a4a502d625244507745704831575979726772583456725f414453493932396a774c534753757571394b474a6e516f674a6259565054526b4757357042784f38523472687872536b6738496f5136706f6b5952365a7465685a766a4b624b3031426a6b6f7736796b6246575a6d5a63412e7855562d4a54385842504548645a4a6d2d7961735a512f5f5f726573756c74735f5f5f66696c65732f5f5f726573756c74735f5f5f32305f302e706e67\"></a></p>\n<p><a href=\"https://www.kaggle.com/paoloripamonti/face-recogniton\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb271472f463a6e26459aa62f96f9157eddc3570/68747470733a2f2f7777772e6b6167676c6575736572636f6e74656e742e636f6d2f6b662f32313132393231352f65794a68624763694f694a6b615849694c434a6c626d4d694f694a424d54493451304a444c5568544d6a5532496e302e2e486269787546674b707550686d5a4e6e366c6b766b512e6c6c36564f4b416e413061654a51706d2d76394c306859595a7a4941667676546131544178567a4a502d625244507745704831575979726772583456725f414453493932396a774c534753757571394b474a6e516f674a6259565054526b4757357042784f38523472687872536b6738496f5136706f6b5952365a7465685a766a4b624b3031426a6b6f7736796b6246575a6d5a63412e7855562d4a54385842504548645a4a6d2d7961735a512f5f5f726573756c74735f5f5f66696c65732f5f5f726573756c74735f5f5f32315f302e706e67\"></a></p>\n<p>For more details you can see: <a href=\"https://www.kaggle.com/paoloripamonti/face-recogniton\" rel=\"nofollow\">https://www.kaggle.com/paoloripamonti/face-recogniton</a></p>\n\n          </div>"}, "last_serial": 5895458, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3c63b36e1d03a6b375afbede7374dcbb", "sha256": "bf741943552be03b87acb8c15cc14d3ade4ca491a93de56981100a98d9e59398"}, "downloads": -1, "filename": "facenet-face-recognition-0.1.tar.gz", "has_sig": false, "md5_digest": "3c63b36e1d03a6b375afbede7374dcbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5469, "upload_time": "2019-09-27T10:58:09", "upload_time_iso_8601": "2019-09-27T10:58:09.408549Z", "url": "https://files.pythonhosted.org/packages/eb/60/66bbdea11f97e9d39c2df91d57c6b7ae4f748ccb95206d60a32722f0d550/facenet-face-recognition-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c63b36e1d03a6b375afbede7374dcbb", "sha256": "bf741943552be03b87acb8c15cc14d3ade4ca491a93de56981100a98d9e59398"}, "downloads": -1, "filename": "facenet-face-recognition-0.1.tar.gz", "has_sig": false, "md5_digest": "3c63b36e1d03a6b375afbede7374dcbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5469, "upload_time": "2019-09-27T10:58:09", "upload_time_iso_8601": "2019-09-27T10:58:09.408549Z", "url": "https://files.pythonhosted.org/packages/eb/60/66bbdea11f97e9d39c2df91d57c6b7ae4f748ccb95206d60a32722f0d550/facenet-face-recognition-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:06 2020"}