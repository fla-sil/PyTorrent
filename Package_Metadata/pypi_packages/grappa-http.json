{"info": {"author": "Tomas Aparicio", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: http://i.imgur.com/kKZPYut.jpg\n   :width: 100%\n   :alt: grappa logo\n   :align: center\n\n\n|Build Status| |PyPI| |Coverage Status| |Documentation Status| |Stability| |Quality| |Versions| |SayThanks|\n\nAbout\n-----\n\nHTTP request/response assertion plugin for `grappa`_.\n``grappa-http`` extends ``grappa`` assertion operators with HTTP protocol testing.\n\nTo get started, take a look to the `documentation`_, `tutorial`_ and `examples`_.\n\nStatus\n------\n\n``grappa-http`` is still **beta quality** software.\n\nShowcase\n--------\n\n.. code-block:: python\n\n    import pook\n    import requests\n    from grappa_http import should\n\n    # Activate the HTTP mock engine\n    pook.on()\n\n    # Register a sample mock\n    pook.get('server.org/foo?bar=baz', reply=200,\n             response_headers={'Server': 'nginx'},\n             response_json={'foo': 'bar'})\n\n    # Perform HTTP request\n    res = requests.get('http://server.org/foo?bar=baz')\n\n    # Test response status to be OK\n    res | should.be.ok\n    # Or alternatively using the status code\n    res | should.have.status(200)\n\n    # Test request URL\n    res | should.have.url.hostname('server.org')\n    res | should.have.url.port(80)\n    res | should.have.url.path('/foo')\n    res | should.have.url.query.params({'bar': 'baz'})\n\n    # Test response body MIME content type\n    res | should.have.content('json')\n\n    # Test response headers\n    (res | (should.have.header('Content-Type')\n            .that.should.be.equal('application/json')))\n    res | should.have.header('Server').that.should.contain('nginx')\n\n    # Test response body\n    res | should.have.body.equal.to('{\\n    \"foo\": \"bar\"\\n}')\n    res | should.have.body.that.contains('foo')\n\n    # Test response body length\n    res | should.have.body.length.of(20)\n    res | should.have.body.length.higher.than(10)\n\n    # Test response JSON body\n    res | should.have.json.equal.to({'foo': 'bar'})\n    res | should.have.json.have.key('foo') > should.be.equal.to('bar')\n\n    # Validate response JSON bodies using JSONSchema\n    res | should.implement.jsonschema({\n        '$schema': 'http://json-schema.org/draft-04/schema#',\n        'title': 'Response JSON',\n        'type': 'object',\n        'required': ['foo'],\n        'properties': {\n            'foo': {\n                'description': 'foo always means foo',\n                'type': 'string'\n            }\n        }\n    })\n\n\nFull-featured error report example:\n\n.. code-block:: python\n\n    Traceback (most recent call last):\n      File \"grappa-http/tests/http_test.py\", line 38, in test_http_tutorial\n        res | should.have.body.equal.to('{\\n    \"foo\": \"baa\"\\n}')\n      File \"grappa/grappa/test.py\", line 208, in __ror__\n        return self.__overload__(value)\n      File \"grappa/grappa/test.py\", line 196, in __overload__\n        return self.__call__(subject, overload=True)\n      File \"grappa/grappa/test.py\", line 73, in __call__\n        return self._trigger() if overload else Test(subject)\n      File \"grappa/grappa/test.py\", line 113, in _trigger\n        raise err\n    AssertionError: Oops! Something went wrong!\n\n      The following assertion was not satisfied\n        subject \"{\\n    \"foo\": \"bar\"\\n}\" should have body equal to \"{\\n    \"foo\": \"baa\"\\n}\"\n\n      What we expected\n        a response body data equal to:\n            {\n                \"foo\": \"baa\"\n            }\n\n      What we got instead\n        a response body with data:\n            {\n                \"foo\": \"bar\"\n            }\n\n      Difference comparison\n        >   {\n        > -     \"foo\": \"bar\"\n        > ?               ^\n        > +     \"foo\": \"baa\"\n        > ?               ^\n        >   }\n\n      Where\n        File \"grappa-http/tests/http_test.py\", line 38, in test_http_tutorial\n\n        30|       res | should.have.content('json')\n        31|\n        32|       # Test response headers\n        33|       (res | (should.have.header('Content-Type')\n        34|               .that.should.be.equal('application/json')))\n        35|       res | should.have.header('Server').that.should.contain('nginx')\n        36|\n        37|       # Test response body\n        38| >     res | should.have.body.equal.to('{\\n    \"foo\": \"baa\"\\n}')\n        39|       res | should.have.body.that.contains('foo')\n        40|\n        41|       # Test response body length\n        42|       res | should.have.body.length.of(20)\n        43|       res | should.have.body.length.higher.than(10)\n        44|\n        45|       # Test response JSON body\n\n\nFeatures\n--------\n\n-  Full-featured HTTP response assertions.\n-  Supports any protocol primitive assertions.\n-  First-class support for JSON body assertion.\n-  Built-in JSONSchema validation.\n-  Full-features request URL validation.\n-  Featured regular expression based assertion.\n-  Works with ``requests`` and ``aiohttp`` HTTP clients.\n-  Friendly and detailed assertion error reporting with body diff comparisons.\n-  Provides both ``expect`` and ``should`` assertion styles.\n-  Testing framework agnostic. Works with ``unittest``, ``nosetests``, ``pytest``, ``behave``...\n-  Works with Python 2.6+, 3+, PyPy and possibly other Python implementations.\n\nSupported HTTP clients\n----------------------\n\n-  \u2714  `requests`_\n-  \u2718  `aiohttp`_ (``work in progress``)\n\nInstallation\n------------\n\nUsing ``pip`` package manager:\n\n.. code-block:: bash\n\n    pip install --upgrade grappa-http\n\nOr install the latest sources from Github:\n\n.. code-block:: bash\n\n    pip install -e git+git://github.com/grappa-py/http.git#egg=grappa\n\n\n.. _Python: http://python.org\n.. _`grappa`: https://grappa.readthedocs.io\n.. _`documentation`: http://grappa-http.readthedocs.io\n.. _`tutorial`: http://grappa-http.readthedocs.io/en/latest/tutorial.html\n.. _`examples`: http://grappa-http.readthedocs.io/en/latest/examples.html\n.. _`requests`: http://docs.python-requests.org/en/master/\n.. _`aiohttp`: http://aiohttp.readthedocs.io/en/stable/\n\n.. |Build Status| image:: https://travis-ci.org/grappa-py/http.svg?branch=master\n   :target: https://travis-ci.org/grappa-py/http\n.. |PyPI| image:: https://img.shields.io/pypi/v/grappa-http.svg?maxAge=2592000?style=flat-square\n   :target: https://pypi.python.org/pypi/grappa-http\n.. |Coverage Status| image:: https://coveralls.io/repos/github/grappa-py/http/badge.svg?branch=master\n   :target: https://coveralls.io/github/grappa-py/http?branch=master\n.. |Documentation Status| image:: https://readthedocs.org/projects/grappa-http/badge/?version=latest\n   :target: http://grappa-http.readthedocs.io/en/latest/?badge=latest\n.. |Quality| image:: https://codeclimate.com/github/grappa-py/http/badges/gpa.svg\n   :target: https://codeclimate.com/github/grappa-py/http\n   :alt: Code Climate\n.. |Stability| image:: https://img.shields.io/pypi/status/grappa-http.svg\n   :target: https://pypi.python.org/pypi/grappa-http\n   :alt: Stability\n.. |Versions| image:: https://img.shields.io/pypi/pyversions/grappa-http.svg\n   :target: https://pypi.python.org/pypi/grappa-http\n   :alt: Python Versions\n.. |SayThanks| image:: https://img.shields.io/badge/Say%20Thanks!-%F0%9F%A6%89-1EAEDB.svg\n  :target: https://saythanks.io/to/h2non\n  :alt: Say Thanks\n\n\n\nHistory\n=======\n\nv0.1.3 / 2017-04-26\n-------------------\n\n  * fix(adapters): use issubclass for adapter valid interface.\n\nv0.1.2 / 2017-04-25\n-------------------\n\n  * feat(api): add use_adapter() API for custom adapter registering\n  * feat(jsonschema): update example which uses satisfy attribute operator\n\nv0.1.1 / 2017-03-29\n-------------------\n\n  * feat(requirements): upgrade grappa to latest version\n  * feat(operators): add output size limit\n  * feat(docs): add thanks badge\n  * refactor(docs): update description\n  * feat(examples): add featured example\n  * fix(package): read version from grappa_http package\n  * fix(docs): use grappa_http package\n\n0.1.0 (2017-03-25)\n------------------\n\n* First version (beta)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grappa-py/http", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "grappa-http", "package_url": "https://pypi.org/project/grappa-http/", "platform": "", "project_url": "https://pypi.org/project/grappa-http/", "project_urls": {"Homepage": "https://github.com/grappa-py/http"}, "release_url": "https://pypi.org/project/grappa-http/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "HTTP assertion plugin for grappa", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"grappa logo\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07b771bbee39407d198a7736cdacb76ccce3ddc9/687474703a2f2f692e696d6775722e636f6d2f6b4b5a505975742e6a7067\" width=\"100%\">\n<p><a href=\"https://travis-ci.org/grappa-py/http\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca078469a5f507d47285d4f485545821c467111e/68747470733a2f2f7472617669732d63692e6f72672f6772617070612d70792f687474702e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/grappa-http\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26b02dc9434bda66afa6d09ba2553f74d11b5b25/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6772617070612d687474702e7376673f6d61784167653d323539323030303f7374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/github/grappa-py/http?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/920f1ea5c047b4fba9757451bf3fe381bf4a76dd/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6772617070612d70792f687474702f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://grappa-http.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6033837c8319cff16b216ef4f1b8eac34694bc55/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6772617070612d687474702f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pypi.python.org/pypi/grappa-http\" rel=\"nofollow\"><img alt=\"Stability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43c2fb345732f23ed2d0347b6a6367ab321b3a87/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6772617070612d687474702e737667\"></a> <a href=\"https://codeclimate.com/github/grappa-py/http\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a30e2f86f397c1cc70da9a30074011fe103cb25/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6772617070612d70792f687474702f6261646765732f6770612e737667\"></a> <a href=\"https://pypi.python.org/pypi/grappa-http\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60d581e87238828eae876ba399e8bd33a90a7115/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6772617070612d687474702e737667\"></a> <a href=\"https://saythanks.io/to/h2non\" rel=\"nofollow\"><img alt=\"Say Thanks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f965ad180f91639bc9af1f210781edc077960c4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b73212d2546302539462541362538392d3145414544422e737667\"></a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p>HTTP request/response assertion plugin for <a href=\"https://grappa.readthedocs.io\" rel=\"nofollow\">grappa</a>.\n<tt><span class=\"pre\">grappa-http</span></tt> extends <tt>grappa</tt> assertion operators with HTTP protocol testing.</p>\n<p>To get started, take a look to the <a href=\"http://grappa-http.readthedocs.io\" rel=\"nofollow\">documentation</a>, <a href=\"http://grappa-http.readthedocs.io/en/latest/tutorial.html\" rel=\"nofollow\">tutorial</a> and <a href=\"http://grappa-http.readthedocs.io/en/latest/examples.html\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p><tt><span class=\"pre\">grappa-http</span></tt> is still <strong>beta quality</strong> software.</p>\n</div>\n<div id=\"showcase\">\n<h2>Showcase</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pook</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">grappa_http</span> <span class=\"kn\">import</span> <span class=\"n\">should</span>\n\n<span class=\"c1\"># Activate the HTTP mock engine</span>\n<span class=\"n\">pook</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Register a sample mock</span>\n<span class=\"n\">pook</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'server.org/foo?bar=baz'</span><span class=\"p\">,</span> <span class=\"n\">reply</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n         <span class=\"n\">response_headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Server'</span><span class=\"p\">:</span> <span class=\"s1\">'nginx'</span><span class=\"p\">},</span>\n         <span class=\"n\">response_json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Perform HTTP request</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://server.org/foo?bar=baz'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test response status to be OK</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n<span class=\"c1\"># Or alternatively using the status code</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test request URL</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">hostname</span><span class=\"p\">(</span><span class=\"s1\">'server.org'</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'/foo'</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">({</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'baz'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Test response body MIME content type</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test response headers</span>\n<span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">)))</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s1\">'Server'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'nginx'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test response body</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'{</span><span class=\"se\">\\n</span><span class=\"s1\">    \"foo\": \"bar\"</span><span class=\"se\">\\n</span><span class=\"s1\">}'</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test response body length</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">higher</span><span class=\"o\">.</span><span class=\"n\">than</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Test response JSON body</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Validate response JSON bodies using JSONSchema</span>\n<span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">implement</span><span class=\"o\">.</span><span class=\"n\">jsonschema</span><span class=\"p\">({</span>\n    <span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/draft-04/schema#'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Response JSON'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'foo always means foo'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Full-featured error report example:</p>\n<pre><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa-http/tests/http_test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">test_http_tutorial</span>\n    <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'{</span><span class=\"se\">\\n</span><span class=\"s1\">    \"foo\": \"baa\"</span><span class=\"se\">\\n</span><span class=\"s1\">}'</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">208</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__ror__</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__overload__</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">196</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__overload__</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">overload</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__call__</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_trigger</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">overload</span> <span class=\"k\">else</span> <span class=\"n\">Test</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"grappa/grappa/test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">113</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_trigger</span>\n    <span class=\"k\">raise</span> <span class=\"n\">err</span>\n<span class=\"ne\">AssertionError</span><span class=\"p\">:</span> <span class=\"n\">Oops</span><span class=\"err\">!</span> <span class=\"n\">Something</span> <span class=\"n\">went</span> <span class=\"n\">wrong</span><span class=\"err\">!</span>\n\n  <span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"n\">assertion</span> <span class=\"n\">was</span> <span class=\"ow\">not</span> <span class=\"n\">satisfied</span>\n    <span class=\"n\">subject</span> <span class=\"s2\">\"{</span><span class=\"se\">\\n</span><span class=\"s2\">    \"</span><span class=\"n\">foo</span><span class=\"s2\">\": \"</span><span class=\"n\">bar</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">}\"</span> <span class=\"n\">should</span> <span class=\"n\">have</span> <span class=\"n\">body</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"s2\">\"{</span><span class=\"se\">\\n</span><span class=\"s2\">    \"</span><span class=\"n\">foo</span><span class=\"s2\">\": \"</span><span class=\"n\">baa</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">}\"</span>\n\n  <span class=\"n\">What</span> <span class=\"n\">we</span> <span class=\"n\">expected</span>\n    <span class=\"n\">a</span> <span class=\"n\">response</span> <span class=\"n\">body</span> <span class=\"n\">data</span> <span class=\"n\">equal</span> <span class=\"n\">to</span><span class=\"p\">:</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"baa\"</span>\n        <span class=\"p\">}</span>\n\n  <span class=\"n\">What</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"n\">instead</span>\n    <span class=\"n\">a</span> <span class=\"n\">response</span> <span class=\"n\">body</span> <span class=\"k\">with</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span>\n        <span class=\"p\">}</span>\n\n  <span class=\"n\">Difference</span> <span class=\"n\">comparison</span>\n    <span class=\"o\">&gt;</span>   <span class=\"p\">{</span>\n    <span class=\"o\">&gt;</span> <span class=\"o\">-</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span>\n    <span class=\"o\">&gt;</span> <span class=\"err\">?</span>               <span class=\"o\">^</span>\n    <span class=\"o\">&gt;</span> <span class=\"o\">+</span>     <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"baa\"</span>\n    <span class=\"o\">&gt;</span> <span class=\"err\">?</span>               <span class=\"o\">^</span>\n    <span class=\"o\">&gt;</span>   <span class=\"p\">}</span>\n\n  <span class=\"n\">Where</span>\n    <span class=\"n\">File</span> <span class=\"s2\">\"grappa-http/tests/http_test.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">test_http_tutorial</span>\n\n    <span class=\"mi\">30</span><span class=\"o\">|</span>       <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n    <span class=\"mi\">31</span><span class=\"o\">|</span>\n    <span class=\"mi\">32</span><span class=\"o\">|</span>       <span class=\"c1\"># Test response headers</span>\n    <span class=\"mi\">33</span><span class=\"o\">|</span>       <span class=\"p\">(</span><span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">)</span>\n    <span class=\"mi\">34</span><span class=\"o\">|</span>               <span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">)))</span>\n    <span class=\"mi\">35</span><span class=\"o\">|</span>       <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s1\">'Server'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">contain</span><span class=\"p\">(</span><span class=\"s1\">'nginx'</span><span class=\"p\">)</span>\n    <span class=\"mi\">36</span><span class=\"o\">|</span>\n    <span class=\"mi\">37</span><span class=\"o\">|</span>       <span class=\"c1\"># Test response body</span>\n    <span class=\"mi\">38</span><span class=\"o\">|</span> <span class=\"o\">&gt;</span>     <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'{</span><span class=\"se\">\\n</span><span class=\"s1\">    \"foo\": \"baa\"</span><span class=\"se\">\\n</span><span class=\"s1\">}'</span><span class=\"p\">)</span>\n    <span class=\"mi\">39</span><span class=\"o\">|</span>       <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">that</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"mi\">40</span><span class=\"o\">|</span>\n    <span class=\"mi\">41</span><span class=\"o\">|</span>       <span class=\"c1\"># Test response body length</span>\n    <span class=\"mi\">42</span><span class=\"o\">|</span>       <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"mi\">43</span><span class=\"o\">|</span>       <span class=\"n\">res</span> <span class=\"o\">|</span> <span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">.</span><span class=\"n\">higher</span><span class=\"o\">.</span><span class=\"n\">than</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"mi\">44</span><span class=\"o\">|</span>\n    <span class=\"mi\">45</span><span class=\"o\">|</span>       <span class=\"c1\"># Test response JSON body</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Full-featured HTTP response assertions.</li>\n<li>Supports any protocol primitive assertions.</li>\n<li>First-class support for JSON body assertion.</li>\n<li>Built-in JSONSchema validation.</li>\n<li>Full-features request URL validation.</li>\n<li>Featured regular expression based assertion.</li>\n<li>Works with <tt>requests</tt> and <tt>aiohttp</tt> HTTP clients.</li>\n<li>Friendly and detailed assertion error reporting with body diff comparisons.</li>\n<li>Provides both <tt>expect</tt> and <tt>should</tt> assertion styles.</li>\n<li>Testing framework agnostic. Works with <tt>unittest</tt>, <tt>nosetests</tt>, <tt>pytest</tt>, <tt>behave</tt>\u2026</li>\n<li>Works with Python 2.6+, 3+, PyPy and possibly other Python implementations.</li>\n</ul>\n</div>\n<div id=\"supported-http-clients\">\n<h2>Supported HTTP clients</h2>\n<ul>\n<li>\u2714  <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">requests</a></li>\n<li>\u2718  <a href=\"http://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a> (<tt>work in progress</tt>)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using <tt>pip</tt> package manager:</p>\n<pre>pip install --upgrade grappa-http\n</pre>\n<p>Or install the latest sources from Github:</p>\n<pre>pip install -e git+git://github.com/grappa-py/http.git#egg<span class=\"o\">=</span>grappa\n</pre>\n<div id=\"history\">\n<h3>History</h3>\n</div>\n</div>\n<div id=\"v0-1-3-2017-04-26\">\n<h2>v0.1.3 / 2017-04-26</h2>\n<blockquote>\n<ul>\n<li>fix(adapters): use issubclass for adapter valid interface.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-2-2017-04-25\">\n<h2>v0.1.2 / 2017-04-25</h2>\n<blockquote>\n<ul>\n<li>feat(api): add use_adapter() API for custom adapter registering</li>\n<li>feat(jsonschema): update example which uses satisfy attribute operator</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v0-1-1-2017-03-29\">\n<h2>v0.1.1 / 2017-03-29</h2>\n<blockquote>\n<ul>\n<li>feat(requirements): upgrade grappa to latest version</li>\n<li>feat(operators): add output size limit</li>\n<li>feat(docs): add thanks badge</li>\n<li>refactor(docs): update description</li>\n<li>feat(examples): add featured example</li>\n<li>fix(package): read version from grappa_http package</li>\n<li>fix(docs): use grappa_http package</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id1\">\n<h2>0.1.0 (2017-03-25)</h2>\n<ul>\n<li>First version (beta)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2831477, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0a2115c2a92ac8b1f954b5849abec53e", "sha256": "bd6d53d08f4314e6df28ebf2d367c8107897209792d0583b64797e582de7fddc"}, "downloads": -1, "filename": "grappa_http-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a2115c2a92ac8b1f954b5849abec53e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 25227, "upload_time": "2017-03-26T22:50:21", "upload_time_iso_8601": "2017-03-26T22:50:21.325958Z", "url": "https://files.pythonhosted.org/packages/2a/e4/f5152c9290d3e0ff65c52db3d3cded32cb67ef60d41c8c1ac41260a759d8/grappa_http-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5b64d8fef87dd6014b3cc89ad5f1ef0", "sha256": "a13bdb24e2c50a7d45450c5becad79a3fe5f10083b162089f98a355ea783d362"}, "downloads": -1, "filename": "grappa-http-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f5b64d8fef87dd6014b3cc89ad5f1ef0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13861, "upload_time": "2017-03-26T22:50:17", "upload_time_iso_8601": "2017-03-26T22:50:17.547542Z", "url": "https://files.pythonhosted.org/packages/c6/73/63a0bdeb81672585fe79927090406c8a065ee4c45745d337c88988dd0370/grappa-http-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "863d85afea3ab8f9b1453ea02f5263f6", "sha256": "12d0bd79a413b7abc4440bd3a49aed35fe506178c501214bfe5bf71b6068b141"}, "downloads": -1, "filename": "grappa_http-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "863d85afea3ab8f9b1453ea02f5263f6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 26753, "upload_time": "2017-03-29T08:04:03", "upload_time_iso_8601": "2017-03-29T08:04:03.494771Z", "url": "https://files.pythonhosted.org/packages/2d/c3/76b903e82c6be30ff635ab69f7b2768c46c0855c5948f3882ac804bba716/grappa_http-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db89f8d7dfeab6d0b0b9426aa97d4c8", "sha256": "3ee2f765052d1d00ff0aeef888452c2246da695c3a328f3e16621032f6b30e7b"}, "downloads": -1, "filename": "grappa-http-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7db89f8d7dfeab6d0b0b9426aa97d4c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14849, "upload_time": "2017-03-29T08:03:59", "upload_time_iso_8601": "2017-03-29T08:03:59.049519Z", "url": "https://files.pythonhosted.org/packages/1f/74/29e922480811bc1f90be13e6a977b191446bd9907f4add31700f87990515/grappa-http-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "77e08189bce61debce57ad25f0b404cf", "sha256": "56327e992fab3f4e641529026fd4e2d5aea8481778ccf1eafe31d0af8b863aaa"}, "downloads": -1, "filename": "grappa_http-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77e08189bce61debce57ad25f0b404cf", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27172, "upload_time": "2017-04-25T13:02:07", "upload_time_iso_8601": "2017-04-25T13:02:07.565484Z", "url": "https://files.pythonhosted.org/packages/2e/76/9a7bff3c47a1a5feec59eb987ec74fd19ff5543e42182c8c51485bac447d/grappa_http-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a917cf778f28928512ad6ae9d79bc631", "sha256": "fd8f0370e5ecaa8fdcee3a151d43315ce4e63a73471cc029285b3079e1aeca5c"}, "downloads": -1, "filename": "grappa-http-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a917cf778f28928512ad6ae9d79bc631", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15201, "upload_time": "2017-04-25T13:02:03", "upload_time_iso_8601": "2017-04-25T13:02:03.545079Z", "url": "https://files.pythonhosted.org/packages/37/96/f0d55486f6783feb6bf0b6242d0f75e604de0c2c3b80a197e90f6e2f9b89/grappa-http-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "4e603f1fb59b094fee791c5144ef9e93", "sha256": "4441dbeb7155d5bd2e43447bd98c9b7a408c2cd33e3841696915eeacd6fc0b67"}, "downloads": -1, "filename": "grappa_http-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e603f1fb59b094fee791c5144ef9e93", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27239, "upload_time": "2017-04-26T12:20:20", "upload_time_iso_8601": "2017-04-26T12:20:20.267032Z", "url": "https://files.pythonhosted.org/packages/c8/75/e9eedb777a5a662149c4d1bf5ccdc86c1bdbf4c48656d945fddc35e6b6eb/grappa_http-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fbb48d9ac090936ff569e2906a5ad8e", "sha256": "f08439ca8ecd4fad66b7faa55d831db7655c8abb99927f316873df3432b0d645"}, "downloads": -1, "filename": "grappa-http-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1fbb48d9ac090936ff569e2906a5ad8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15248, "upload_time": "2017-04-26T12:20:16", "upload_time_iso_8601": "2017-04-26T12:20:16.278526Z", "url": "https://files.pythonhosted.org/packages/88/5d/0b215be0999ea3f86885395f8a7453b4e3e30c468a6d9dc38d7b1ad2e921/grappa-http-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e603f1fb59b094fee791c5144ef9e93", "sha256": "4441dbeb7155d5bd2e43447bd98c9b7a408c2cd33e3841696915eeacd6fc0b67"}, "downloads": -1, "filename": "grappa_http-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e603f1fb59b094fee791c5144ef9e93", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27239, "upload_time": "2017-04-26T12:20:20", "upload_time_iso_8601": "2017-04-26T12:20:20.267032Z", "url": "https://files.pythonhosted.org/packages/c8/75/e9eedb777a5a662149c4d1bf5ccdc86c1bdbf4c48656d945fddc35e6b6eb/grappa_http-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fbb48d9ac090936ff569e2906a5ad8e", "sha256": "f08439ca8ecd4fad66b7faa55d831db7655c8abb99927f316873df3432b0d645"}, "downloads": -1, "filename": "grappa-http-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1fbb48d9ac090936ff569e2906a5ad8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15248, "upload_time": "2017-04-26T12:20:16", "upload_time_iso_8601": "2017-04-26T12:20:16.278526Z", "url": "https://files.pythonhosted.org/packages/88/5d/0b215be0999ea3f86885395f8a7453b4e3e30c468a6d9dc38d7b1ad2e921/grappa-http-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:27 2020"}