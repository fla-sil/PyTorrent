{"info": {"author": "thautwarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "# rbnf-rts\nRuntime support for generated parsers of RBNF.hs\n\n**P.S**:\n\n`rbnf-rts` is the new fastest Python parser generator by 2020, according to a benchmark given by [benchmark-json](https://github.com/thautwarm/rbnf-rts/blob/master/test/benchmark-json.ipynb).\n\n![Bench](https://raw.githubusercontent.com/thautwarm/static-resources/master/rbnf/fast2020-nb.PNG)\n\n## Features\n\n- Syntax-driven\n- Left recursion with LL parsing(yes, left recur in LL, it's right)\n- Grammar inline optimizations\n- Smarter lookahead via ID3 algorithm\n- Statically generated(no need to create the parser again and again when starting your application)\n- Good error reports(including the position and nested rule names of parsing error)\n- RBNF.hs is language independent\n- \\[WIP\\]: context sensitive parsing as an extension to CFG\n\n## More Examples\n\nCheck the `test` directory:\n\n- test\n    - multiply : parser/lexer implementation for multiplications\n    - arith : parser/lexer implementation for arithmetics\n    - relax : parser/lexer implementation for a full-featured programming language\n    - llvmir: parser/lexer implementation for LLVM IR, nearly full-featured\n    - rbnfjson: a json parser implemented by RBNF.hs and rbnf-rts\n\n**In each sub-directory of test, you can run tests via directly invoking the test.sh.**, like `cd test/llvmir && bash test.sh`\n\n\n## Native Dependencies\n\n- The Haskell Stack Toolchain\n\n- The executable `rbnf-pgen` in PATH.\n\n    If `~/.local/bin` is already in PATH:\n    ```\n    git clone https://github.com/thautwarm/RBNF.hs\n    cd RBNF.hs\n    stack install .\n    ```\n\n## Example: Multiplications\n\n1. write a `multiply.exrbnf` file\n\n```\n# 'mul' is a python global which should be marked as 'required' in .rlex\nMul    : lhs=Mul \"*\" rhs=Atom { mul(lhs, rhs) }\n       | a=Atom  {a}\n       ;\n\n# 'unwrap' should be marked as 'required', just as 'mul'\nAtom   :  \"(\" !a=Mul \")\"  {a} ;\n       |  <number>        { unwrap($0) };\nSTART ::= <BOF> Mul <EOF> { $1 };\n```\nor write a `multiply.rbnf` file:\n\n```\n# 'mul' is a python global which should be marked as 'required' in .rlex\nMul    : !lhs=Mul \"*\" !rhs=Atom            -> mul(lhs, rhs);\nMul    : !a=Atom                           -> a;\nAtom   : \"(\" !a=Mul \")\"                    -> a;\n\n# 'unwrap' should be marked as 'required', just as 'mul'\nAtom   : !a=<number>                       -> unwrap(a);\nSTART ::= <BOF> !a=Mul <EOF>               -> a;\n```\n\n2. write a `multiply.rlex` file:\n```\n%require mul\n%require unwrap\n%ignore space\nnumber [+-]?\\d+\nspace \\s+\n```\n\n3. codegen\n\n```shell\nsh> rbnf-pygen multiply.rbnf multiply.rlex multiply.py --k 1 --traceback\n```\n\n4. run statically-generated parsers and lexers and enjoy its efficiency\n```python\nfrom rbnf_rts.rts import Tokens, State\nfrom multiply import run_lexer, mk_parser\nimport operator\n\ndef unwrap(x: Token):\n    return int(x.value)\n\nscope = dict(mul=operator.mul, unwrap=unwrap)\n\nparse = mk_parser(**scope)\n\n\ntokens = list(run_lexer(\"<current file>\", \"-1 * 2 * (3 * 4)\"))\ngot = parse(State(), Tokens(tokens))\nprint(got)\n```\n\nGot `(True, -24)`, where `True` indicates the parsing succeeded.\n\nIf `False`, a list of errors will be given in the second element of\nthe return tuple.\n\n5. [Menhir](http://gallium.inria.fr/~fpottier/menhir/)-like syntax sugars including `list` and `separated_list`.\n\nA json parser more than 20% efficient than that of lark-parser(lol), written as a `.exrbnf` file. \n```\nSTART: <BOF> value <EOF> { $1 };\n\nvalue: <ESCAPED_STRING> { DQString(*$0) }\n     | <SIGNED_INT>     { int(*$0) }\n     | <SIGNED_FLOAT>   { float(*$0) }\n     | \"true\" { True }\n     | \"null\" { None }\n     | \"false\" { False }\n     # array\n     | '[' ']' {[]}\n     | '[' separated_list(',', value) ']' { $1 }\n     # object\n     | '{' '}' { dict() }\n     | '{' separated_list(',', pair) '}' { dict($1) }\n     ;\npair   : <ESCAPED_STRING> \":\" value { (DQString(*$0), $2) };\n```\n\nCheck [rbnfjson](https://github.com/thautwarm/rbnf-rts/tree/master/test/rbnfjson) for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thautwarm/rbnf-rts", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "rbnf-rts", "package_url": "https://pypi.org/project/rbnf-rts/", "platform": "any", "project_url": "https://pypi.org/project/rbnf-rts/", "project_urls": {"Homepage": "https://github.com/thautwarm/rbnf-rts"}, "release_url": "https://pypi.org/project/rbnf-rts/1.0/", "requires_dist": ["prettyprinter", "wisepy2"], "requires_python": ">=3.6.0", "summary": "", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>rbnf-rts</h1>\n<p>Runtime support for generated parsers of RBNF.hs</p>\n<p><strong>P.S</strong>:</p>\n<p><code>rbnf-rts</code> is the new fastest Python parser generator by 2020, according to a benchmark given by <a href=\"https://github.com/thautwarm/rbnf-rts/blob/master/test/benchmark-json.ipynb\" rel=\"nofollow\">benchmark-json</a>.</p>\n<p><img alt=\"Bench\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63923768a474bc274c77ef099a8c81936fcce74a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f74686175747761726d2f7374617469632d7265736f75726365732f6d61737465722f72626e662f66617374323032302d6e622e504e47\"></p>\n<h2>Features</h2>\n<ul>\n<li>Syntax-driven</li>\n<li>Left recursion with LL parsing(yes, left recur in LL, it's right)</li>\n<li>Grammar inline optimizations</li>\n<li>Smarter lookahead via ID3 algorithm</li>\n<li>Statically generated(no need to create the parser again and again when starting your application)</li>\n<li>Good error reports(including the position and nested rule names of parsing error)</li>\n<li>RBNF.hs is language independent</li>\n<li>[WIP]: context sensitive parsing as an extension to CFG</li>\n</ul>\n<h2>More Examples</h2>\n<p>Check the <code>test</code> directory:</p>\n<ul>\n<li>test\n<ul>\n<li>multiply : parser/lexer implementation for multiplications</li>\n<li>arith : parser/lexer implementation for arithmetics</li>\n<li>relax : parser/lexer implementation for a full-featured programming language</li>\n<li>llvmir: parser/lexer implementation for LLVM IR, nearly full-featured</li>\n<li>rbnfjson: a json parser implemented by RBNF.hs and rbnf-rts</li>\n</ul>\n</li>\n</ul>\n<p><strong>In each sub-directory of test, you can run tests via directly invoking the test.sh.</strong>, like <code>cd test/llvmir &amp;&amp; bash test.sh</code></p>\n<h2>Native Dependencies</h2>\n<ul>\n<li>\n<p>The Haskell Stack Toolchain</p>\n</li>\n<li>\n<p>The executable <code>rbnf-pgen</code> in PATH.</p>\n<p>If <code>~/.local/bin</code> is already in PATH:</p>\n<pre><code>git clone https://github.com/thautwarm/RBNF.hs\ncd RBNF.hs\nstack install .\n</code></pre>\n</li>\n</ul>\n<h2>Example: Multiplications</h2>\n<ol>\n<li>write a <code>multiply.exrbnf</code> file</li>\n</ol>\n<pre><code># 'mul' is a python global which should be marked as 'required' in .rlex\nMul    : lhs=Mul \"*\" rhs=Atom { mul(lhs, rhs) }\n       | a=Atom  {a}\n       ;\n\n# 'unwrap' should be marked as 'required', just as 'mul'\nAtom   :  \"(\" !a=Mul \")\"  {a} ;\n       |  &lt;number&gt;        { unwrap($0) };\nSTART ::= &lt;BOF&gt; Mul &lt;EOF&gt; { $1 };\n</code></pre>\n<p>or write a <code>multiply.rbnf</code> file:</p>\n<pre><code># 'mul' is a python global which should be marked as 'required' in .rlex\nMul    : !lhs=Mul \"*\" !rhs=Atom            -&gt; mul(lhs, rhs);\nMul    : !a=Atom                           -&gt; a;\nAtom   : \"(\" !a=Mul \")\"                    -&gt; a;\n\n# 'unwrap' should be marked as 'required', just as 'mul'\nAtom   : !a=&lt;number&gt;                       -&gt; unwrap(a);\nSTART ::= &lt;BOF&gt; !a=Mul &lt;EOF&gt;               -&gt; a;\n</code></pre>\n<ol>\n<li>write a <code>multiply.rlex</code> file:</li>\n</ol>\n<pre><code>%require mul\n%require unwrap\n%ignore space\nnumber [+-]?\\d+\nspace \\s+\n</code></pre>\n<ol>\n<li>codegen</li>\n</ol>\n<pre>sh&gt; rbnf-pygen multiply.rbnf multiply.rlex multiply.py --k <span class=\"m\">1</span> --traceback\n</pre>\n<ol>\n<li>run statically-generated parsers and lexers and enjoy its efficiency</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rbnf_rts.rts</span> <span class=\"kn\">import</span> <span class=\"n\">Tokens</span><span class=\"p\">,</span> <span class=\"n\">State</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multiply</span> <span class=\"kn\">import</span> <span class=\"n\">run_lexer</span><span class=\"p\">,</span> <span class=\"n\">mk_parser</span>\n<span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">unwrap</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Token</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<span class=\"n\">scope</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">mul</span><span class=\"o\">=</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"n\">unwrap</span><span class=\"o\">=</span><span class=\"n\">unwrap</span><span class=\"p\">)</span>\n\n<span class=\"n\">parse</span> <span class=\"o\">=</span> <span class=\"n\">mk_parser</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">scope</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">run_lexer</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;current file&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-1 * 2 * (3 * 4)\"</span><span class=\"p\">))</span>\n<span class=\"n\">got</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">State</span><span class=\"p\">(),</span> <span class=\"n\">Tokens</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">got</span><span class=\"p\">)</span>\n</pre>\n<p>Got <code>(True, -24)</code>, where <code>True</code> indicates the parsing succeeded.</p>\n<p>If <code>False</code>, a list of errors will be given in the second element of\nthe return tuple.</p>\n<ol>\n<li><a href=\"http://gallium.inria.fr/%7Efpottier/menhir/\" rel=\"nofollow\">Menhir</a>-like syntax sugars including <code>list</code> and <code>separated_list</code>.</li>\n</ol>\n<p>A json parser more than 20% efficient than that of lark-parser(lol), written as a <code>.exrbnf</code> file.</p>\n<pre><code>START: &lt;BOF&gt; value &lt;EOF&gt; { $1 };\n\nvalue: &lt;ESCAPED_STRING&gt; { DQString(*$0) }\n     | &lt;SIGNED_INT&gt;     { int(*$0) }\n     | &lt;SIGNED_FLOAT&gt;   { float(*$0) }\n     | \"true\" { True }\n     | \"null\" { None }\n     | \"false\" { False }\n     # array\n     | '[' ']' {[]}\n     | '[' separated_list(',', value) ']' { $1 }\n     # object\n     | '{' '}' { dict() }\n     | '{' separated_list(',', pair) '}' { dict($1) }\n     ;\npair   : &lt;ESCAPED_STRING&gt; \":\" value { (DQString(*$0), $2) };\n</code></pre>\n<p>Check <a href=\"https://github.com/thautwarm/rbnf-rts/tree/master/test/rbnfjson\" rel=\"nofollow\">rbnfjson</a> for more information.</p>\n\n          </div>"}, "last_serial": 6506842, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9c784d8c5a6c620703b787f0216509bc", "sha256": "b8f32cf98cb325afb273596f05f8ca49feeb7707ae0c27003c14cafaf4f3c647"}, "downloads": -1, "filename": "rbnf_rts-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9c784d8c5a6c620703b787f0216509bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 22142, "upload_time": "2019-09-10T13:57:45", "upload_time_iso_8601": "2019-09-10T13:57:45.180063Z", "url": "https://files.pythonhosted.org/packages/c6/2f/5732085f0c0dd9c5f57215fa351bae14125df4f63fb770cb86087b2a2d9a/rbnf_rts-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7020bccf762f7f245bc16a3e383dff85", "sha256": "0fffae53b28e6d4114eaef5c678de239838f408b268ec4c3b1a825aa668ed888"}, "downloads": -1, "filename": "rbnf_rts-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7020bccf762f7f245bc16a3e383dff85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 21706, "upload_time": "2019-09-11T10:13:18", "upload_time_iso_8601": "2019-09-11T10:13:18.322142Z", "url": "https://files.pythonhosted.org/packages/f2/da/99f8e1f37bb16a92d3fc430a7dc5af6cbcb05a4cf7193943ce67ef0594de/rbnf_rts-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5efc4d6262d402bf478ded4dec76a87a", "sha256": "9baa3ff2213aeb00efcce80953e02448d4d2eeb801711ca0c26f6a8c40f09580"}, "downloads": -1, "filename": "rbnf_rts-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5efc4d6262d402bf478ded4dec76a87a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 80823, "upload_time": "2019-09-27T06:42:55", "upload_time_iso_8601": "2019-09-27T06:42:55.861499Z", "url": "https://files.pythonhosted.org/packages/b9/b1/3f22c86ec5f46c73b62056f2f36a9e4606335169e6da38ea8de2296df8ee/rbnf_rts-0.3-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "93342ffb5d6f2484e2ffe072e4ab012c", "sha256": "7be02ecd2998bfd2c55877efd270f42c185db80935dbb87c09a1fbd14152da5d"}, "downloads": -1, "filename": "rbnf_rts-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "93342ffb5d6f2484e2ffe072e4ab012c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 82785, "upload_time": "2019-09-30T02:14:50", "upload_time_iso_8601": "2019-09-30T02:14:50.422780Z", "url": "https://files.pythonhosted.org/packages/da/c1/26aab984bce4fb8ce7859a3879bd2086129e7a6a6f9ec9199a129f19f724/rbnf_rts-0.4-py3-none-any.whl", "yanked": false}], "0.41": [{"comment_text": "", "digests": {"md5": "011951481b195268bc52a12da397d3ae", "sha256": "d6c92e4a9a0bea140f245e8ce61cb8cb40dc73677d1f4922ae8a2ae7d146c027"}, "downloads": -1, "filename": "rbnf_rts-0.41-py3-none-any.whl", "has_sig": false, "md5_digest": "011951481b195268bc52a12da397d3ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 82806, "upload_time": "2019-09-30T04:24:40", "upload_time_iso_8601": "2019-09-30T04:24:40.978367Z", "url": "https://files.pythonhosted.org/packages/5c/ef/6b7148037948898655556023509f1ccfb3b6c85f0d7edd5f8a778ab4ace3/rbnf_rts-0.41-py3-none-any.whl", "yanked": false}], "0.42": [{"comment_text": "", "digests": {"md5": "46178e70e3a6725dcc51739ff4aaa7bd", "sha256": "509fc519dcabbc26cd586d50b4ce09b202e78b5002d8f9188ef3a74ba44a9e20"}, "downloads": -1, "filename": "rbnf_rts-0.42-py3-none-any.whl", "has_sig": false, "md5_digest": "46178e70e3a6725dcc51739ff4aaa7bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 89341, "upload_time": "2020-01-03T11:32:47", "upload_time_iso_8601": "2020-01-03T11:32:47.218516Z", "url": "https://files.pythonhosted.org/packages/34/d1/00b0a326cdd42ad9254a0c622dbbc03b5639218e0a951f0667d626c034c6/rbnf_rts-0.42-py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "9fc2bc54a91a9d24ddac345380ccbf3e", "sha256": "3ae6e8415258ef1aac6c8a95ed5051a1353e1fe8a9dd7e5e172dea1afc21df95"}, "downloads": -1, "filename": "rbnf_rts-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9fc2bc54a91a9d24ddac345380ccbf3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 98722, "upload_time": "2020-01-08T17:46:23", "upload_time_iso_8601": "2020-01-08T17:46:23.291279Z", "url": "https://files.pythonhosted.org/packages/76/0f/a35582d78615a10ee64d85156a2c66efa81437e0917eec942e410b6fc320/rbnf_rts-0.5-py3-none-any.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "e4fc5e45c5f26e5103dd06080e0cba84", "sha256": "19e1ad71a539a0258a9e3e38f4b9615a73011b647d6cca1e8e762886e828726a"}, "downloads": -1, "filename": "rbnf_rts-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e4fc5e45c5f26e5103dd06080e0cba84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 98739, "upload_time": "2020-01-08T18:18:19", "upload_time_iso_8601": "2020-01-08T18:18:19.646140Z", "url": "https://files.pythonhosted.org/packages/fd/a6/d79fdbdaf0fb4758dc3fa060b52a9b672327abb84a1b6771b56d8b337aca/rbnf_rts-0.5.1-py3-none-any.whl", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "1d967d1a40f158153d7531e41274ca52", "sha256": "e7d458073a607db4e12fc08d313671393e25947b91883aeff36d2c83b5c51218"}, "downloads": -1, "filename": "rbnf_rts-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1d967d1a40f158153d7531e41274ca52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 98912, "upload_time": "2020-01-09T20:29:13", "upload_time_iso_8601": "2020-01-09T20:29:13.614004Z", "url": "https://files.pythonhosted.org/packages/55/a8/2a1226b1de56b0b688dff72bc5a49553717f358388d922602bd33a114a27/rbnf_rts-0.6-py3-none-any.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "1b5f6e489106b7549a977797208284bb", "sha256": "3c6813acefae187612821a672057b66401ab45c4388e02c67e1f86c6672d79cd"}, "downloads": -1, "filename": "rbnf_rts-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b5f6e489106b7549a977797208284bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 99244, "upload_time": "2020-01-10T14:06:41", "upload_time_iso_8601": "2020-01-10T14:06:41.095930Z", "url": "https://files.pythonhosted.org/packages/92/13/bedb5c8d05323b8185c3e465d079655a2ac071fc3cc8c790b71a63d52967/rbnf_rts-0.6.1-py3-none-any.whl", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "f7ffd33b68ea5a437afa21fc804a4281", "sha256": "d392bd492d838e4de096df204dba62137810ede56f90925cc4d7d2ec45f25796"}, "downloads": -1, "filename": "rbnf_rts-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f7ffd33b68ea5a437afa21fc804a4281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 99481, "upload_time": "2020-01-20T15:00:58", "upload_time_iso_8601": "2020-01-20T15:00:58.846714Z", "url": "https://files.pythonhosted.org/packages/f6/55/daded0cdd179978bb3a20ce3b6e04c66cae4069661b0b19fc037dc6fee38/rbnf_rts-0.7-py3-none-any.whl", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "8962e3a66b25640a8bb2ce279d5af907", "sha256": "85955ddf7c76ab97a36e8f31fcdcc2168b18e3bc7457dcf1691f510dd4a0b4f8"}, "downloads": -1, "filename": "rbnf_rts-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8962e3a66b25640a8bb2ce279d5af907", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 99479, "upload_time": "2020-01-23T14:31:42", "upload_time_iso_8601": "2020-01-23T14:31:42.080601Z", "url": "https://files.pythonhosted.org/packages/23/dd/1be8d22b206b86d59bfe1c341403eab73dd566986b59bdeb39afbd02d381/rbnf_rts-1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8962e3a66b25640a8bb2ce279d5af907", "sha256": "85955ddf7c76ab97a36e8f31fcdcc2168b18e3bc7457dcf1691f510dd4a0b4f8"}, "downloads": -1, "filename": "rbnf_rts-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8962e3a66b25640a8bb2ce279d5af907", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 99479, "upload_time": "2020-01-23T14:31:42", "upload_time_iso_8601": "2020-01-23T14:31:42.080601Z", "url": "https://files.pythonhosted.org/packages/23/dd/1be8d22b206b86d59bfe1c341403eab73dd566986b59bdeb39afbd02d381/rbnf_rts-1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:06:51 2020"}