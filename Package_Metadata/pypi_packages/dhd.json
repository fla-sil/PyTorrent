{"info": {"author": "CREM", "author_email": "info@crem.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "=====================\nDistrictHeatingDesign\n=====================\n\n.. image:: https://img.shields.io/pypi/v/dhd.svg\n        :target: https://pypi.python.org/pypi/dhd\n\n.. image:: https://img.shields.io/travis/jonas.paccolat/dhd.svg\n        :target: https://travis-ci.org/jonas.paccolat/dhd\n\n.. image:: https://readthedocs.org/projects/dhd/badge/?version=latest\n        :target: https://dhd.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\nGraph theory and evolutionary algorithm applied to city district heating network\ndesign.\n\nMotivation\n----------\n\nThis project belongs to a series of numerical tools developed by the CREM\n(https://www.crem.ch/) in the perspective of a better energy distribution and\nconsumption at the city scale.\n\nDescription\n-----------\n\nThe design of a district heating network is closely related to the problem of\nfinding the Terminal Steiner Tree (TST) of a graph. Indeed for a given connected\ngraph and a given subset of nodes, called terminals, the TST is the network of\nsmallest weight connecting all terminals only once. This is the exact structure\nneeded for a district heating network connecting heat sinks (buildings) to a\nheating source via a streets network.\n\nThis package implement a systematic way of finding the best possible network\nwithin a given amount of numerical computation. Indeed the TST problem being\nNP complete, an heuristic evolutive algorithm is used.\n\nThe heating load of the buildings is then distributed throughout all the\npipelines belonging to the district heating network.\n\nAdditional tools are available to download city geometries from the Open Street\nMap (OSM) dataset, modify their content, reshape their structure or visualize\nthem as well as for obtaining information on the network characteristics.\n\nPackage structure\n-----------------\n\nThe package is organized in modules as represented on the figure below. The\ninformation on the city geometries and the district heating network is stored\nin dataframes (*streets, sinks, sources, terminals, vertices, tst, pipelines,\n...*) which evolve along with the design process.\n\n.. figure::  https://gitlab.com/crem-repository/dhd/raw/master/docs/images/structure.png\n   :align:   center\n\n* **Network Design**:\n  This is the core of the package. It takes the streets, sinks and source(s)\n  as input and returns the district heating network.\n\n  - The first module, *dhd.connect*, connects the terminals (sinks and\n    source(s)) to the streets and store the updated network in the dataframe\n    *vertices*. The multiple possible connections of each terminal are stored\n    in the dataframe *terminals*.\n  - The second module, *dhd.evolve*, implements the evolutive algorithm\n    which seeks the best connection network and store it into the data frame\n    *tst*.\n  - The last module, *dhd.load*, spreads the sinks heating loads throughout\n    the heating network and merge neighbor pipes of equal load into single\n    pipelines, which are stored in the dataframe *pipelines*.\n\n* **Data Generation**:\n  This set allows to download any city geometries from the OSM dataset and to\n  modify some of its data.\n\n  - The module *dhd.city* defines a class associated to any given city. It\n    automatically loads the geometries of its streets and buildings.\n    Additional information such as the source location or the presence of\n    natural barriers may be provided. All this information is organized into\n    dataframes.\n  - The module *dhd.modify* allows to easily select and modify rows and\n    columns of the previously defined dataframes. Note that despite its being\n    in the same set as *dhd.city* it may naturally be applied to dataframes of\n    different origins.\n\n* **Graphical Interface**\n  The module *dhd.plot* is used to define a background interface displaying\n  the provided streets, buildings, source(s) and natural barrier(s). The\n  different geometries constructed along the design process can be plotted\n  over the background.\n\n* **Network Properties**\n  The module *dhd.features* computes and displays properties of the designed\n  network.\n\nInstallation\n------------\n\nAssuming you have `Python 3.X <https://www.python.org/downloads/>`_ installed,\nyou can simply install DHD with pip:\n\n.. code-block:: bash\n\n  $ pip install dhd\n\nIf you prefer to install it from source (git is required) run the following\ncommands:\n\n.. code-block:: bash\n\n  $ git clone https://gitlab.com/crem-repository/dhd.git\n  $ pip install -r requirements.txt\n  $ pip install .\n\nWe recommend to use a virtual environment for the installation.\nAlso jupyter notebooks (`Jupyter Notebook <http://jupyter.org/>`_) are necessary\nto run the learning examples and are practical when using the package.\n\nThe spatial indexing in Python requires the ctypes Python wrapper\n`Rtree <http://toblerity.org/rtree/>`_. Please follow the installation instructions\non the previous link.\n\nHow to use ?\n------------\n\nImport the package modules:\n\n.. code-block:: python\n\n  from dhd import city, connect, evolve, load\n\tfrom shapely.geometry import Point\n\nLoad the geometries of the city of Vevey in Switzerland:\n\n.. code-block:: python\n\n  vevey = city.City('Vevey, Switzerland', sources=Point(333795, 5147530))\n  streets = vevey.get_streets()\n  sinks = vevey.select_sinks(min_load=300)\n  sources = vevey.get_sources()\n\nConnect the selected buildings (sinks) and the source to the streets network:\n\n.. code-block:: python\n\n  vertices, terminals = connect.connect_terminals(streets, sinks, sources)\n\nRun the evolutive algorithm to seek the best possible heating network within\nfive generations:\n\n.. code-block:: python\n\n  N = 5\n  evolution = evolve.run_evolution(vertices, terminals, N)\n  tst = evolve.get_best_terminal_steiner_tree(vertices, terminals, evolution)\n\nSpread the buildings load over the district heating pipelines:\n\n.. code-block:: python\n\n  pipelines = load.load_the_pipelines(tst, terminals)\n\nMore detailed `examples\n<https://gitlab.com/crem-repository/dhd/tree/master/notebooks>`_ are provided in\nthe GitLab repository.\n\nReference\n---------\n\nClick the following link to access the full `documentation\n<https://dhd.readthedocs.io/en/latest/>`_.\n\n\nFurther developments\n--------------------\n\nHere is a list of features eager to be implemented. Please refer to the\nCONTRIBUTING file if you either want to append or pop this list.\n\n* *dhd.city*\n\n  - Function to easily add a street to the streets network, accounting for the\n    different connection options: street node, street edge, no street.\n\n* *dhd.connect*\n\n  - Treat the source(s) and sinks separately when connecting them.\n  - So far the natural barriers completely forbid any connection crossing them.\n    This criterion could be adjusted to a connection weight enhancement.\n\nLicense\n-------\n\nFree software: Apache Software License 2.0\n\nCredits\n-------\n\nResearch and implementation work for this tool has been carried out within the\nproject IntegrCiTy (ERA-NET Cofund Smart Cities and Communities call). In\nSwitzerland, it is funded by the Swiss Federal Office of Energy (contract\nSI/501404-2), as well as by the industrial and institutional partners of the\nproject .\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/crem-repository/dhd", "keywords": "dhd", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "dhd", "package_url": "https://pypi.org/project/dhd/", "platform": "", "project_url": "https://pypi.org/project/dhd/", "project_urls": {"Homepage": "https://gitlab.com/crem-repository/dhd"}, "release_url": "https://pypi.org/project/dhd/0.1.3/", "requires_dist": ["sphinx (>=1.8)", "sphinxcontrib-napoleon", "click (>=6.0)", "osmnx (>=0.9)"], "requires_python": "", "summary": "Graph theory and evolutionary algorithm applied to city district heating network design", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/dhd\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/dhd.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c374bee6d50db7ac4cda48f4bcae5ab2172c690/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6468642e737667\"></a>\n<a href=\"https://travis-ci.org/jonas.paccolat/dhd\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/jonas.paccolat/dhd.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e873165652486c6cdd71a3418c6b21ef54ed560e/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a6f6e61732e706163636f6c61742f6468642e737667\"></a>\n<a href=\"https://dhd.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ed7fb581d67cc9f02eb9189b0ef204fcbd33996/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6468642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Graph theory and evolutionary algorithm applied to city district heating network\ndesign.</p>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>This project belongs to a series of numerical tools developed by the CREM\n(<a href=\"https://www.crem.ch/\" rel=\"nofollow\">https://www.crem.ch/</a>) in the perspective of a better energy distribution and\nconsumption at the city scale.</p>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<p>The design of a district heating network is closely related to the problem of\nfinding the Terminal Steiner Tree (TST) of a graph. Indeed for a given connected\ngraph and a given subset of nodes, called terminals, the TST is the network of\nsmallest weight connecting all terminals only once. This is the exact structure\nneeded for a district heating network connecting heat sinks (buildings) to a\nheating source via a streets network.</p>\n<p>This package implement a systematic way of finding the best possible network\nwithin a given amount of numerical computation. Indeed the TST problem being\nNP complete, an heuristic evolutive algorithm is used.</p>\n<p>The heating load of the buildings is then distributed throughout all the\npipelines belonging to the district heating network.</p>\n<p>Additional tools are available to download city geometries from the Open Street\nMap (OSM) dataset, modify their content, reshape their structure or visualize\nthem as well as for obtaining information on the network characteristics.</p>\n</div>\n<div id=\"package-structure\">\n<h2>Package structure</h2>\n<p>The package is organized in modules as represented on the figure below. The\ninformation on the city geometries and the district heating network is stored\nin dataframes (<em>streets, sinks, sources, terminals, vertices, tst, pipelines,\n\u2026</em>) which evolve along with the design process.</p>\n<div>\n<img alt=\"https://gitlab.com/crem-repository/dhd/raw/master/docs/images/structure.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12ace323e451af64e53274c5bf44508aa8173f16/68747470733a2f2f6769746c61622e636f6d2f6372656d2d7265706f7369746f72792f6468642f7261772f6d61737465722f646f63732f696d616765732f7374727563747572652e706e67\">\n</div>\n<ul>\n<li><strong>Network Design</strong>:\nThis is the core of the package. It takes the streets, sinks and source(s)\nas input and returns the district heating network.<ul>\n<li>The first module, <em>dhd.connect</em>, connects the terminals (sinks and\nsource(s)) to the streets and store the updated network in the dataframe\n<em>vertices</em>. The multiple possible connections of each terminal are stored\nin the dataframe <em>terminals</em>.</li>\n<li>The second module, <em>dhd.evolve</em>, implements the evolutive algorithm\nwhich seeks the best connection network and store it into the data frame\n<em>tst</em>.</li>\n<li>The last module, <em>dhd.load</em>, spreads the sinks heating loads throughout\nthe heating network and merge neighbor pipes of equal load into single\npipelines, which are stored in the dataframe <em>pipelines</em>.</li>\n</ul>\n</li>\n<li><strong>Data Generation</strong>:\nThis set allows to download any city geometries from the OSM dataset and to\nmodify some of its data.<ul>\n<li>The module <em>dhd.city</em> defines a class associated to any given city. It\nautomatically loads the geometries of its streets and buildings.\nAdditional information such as the source location or the presence of\nnatural barriers may be provided. All this information is organized into\ndataframes.</li>\n<li>The module <em>dhd.modify</em> allows to easily select and modify rows and\ncolumns of the previously defined dataframes. Note that despite its being\nin the same set as <em>dhd.city</em> it may naturally be applied to dataframes of\ndifferent origins.</li>\n</ul>\n</li>\n<li><strong>Graphical Interface</strong>\nThe module <em>dhd.plot</em> is used to define a background interface displaying\nthe provided streets, buildings, source(s) and natural barrier(s). The\ndifferent geometries constructed along the design process can be plotted\nover the background.</li>\n<li><strong>Network Properties</strong>\nThe module <em>dhd.features</em> computes and displays properties of the designed\nnetwork.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Assuming you have <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.X</a> installed,\nyou can simply install DHD with pip:</p>\n<pre>$ pip install dhd\n</pre>\n<p>If you prefer to install it from source (git is required) run the following\ncommands:</p>\n<pre>$ git clone https://gitlab.com/crem-repository/dhd.git\n$ pip install -r requirements.txt\n$ pip install .\n</pre>\n<p>We recommend to use a virtual environment for the installation.\nAlso jupyter notebooks (<a href=\"http://jupyter.org/\" rel=\"nofollow\">Jupyter Notebook</a>) are necessary\nto run the learning examples and are practical when using the package.</p>\n<p>The spatial indexing in Python requires the ctypes Python wrapper\n<a href=\"http://toblerity.org/rtree/\" rel=\"nofollow\">Rtree</a>. Please follow the installation instructions\non the previous link.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use ?</h2>\n<p>Import the package modules:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dhd</span> <span class=\"kn\">import</span> <span class=\"n\">city</span><span class=\"p\">,</span> <span class=\"n\">connect</span><span class=\"p\">,</span> <span class=\"n\">evolve</span><span class=\"p\">,</span> <span class=\"n\">load</span>\n      <span class=\"kn\">from</span> <span class=\"nn\">shapely.geometry</span> <span class=\"kn\">import</span> <span class=\"n\">Point</span>\n</pre>\n<p>Load the geometries of the city of Vevey in Switzerland:</p>\n<pre><span class=\"n\">vevey</span> <span class=\"o\">=</span> <span class=\"n\">city</span><span class=\"o\">.</span><span class=\"n\">City</span><span class=\"p\">(</span><span class=\"s1\">'Vevey, Switzerland'</span><span class=\"p\">,</span> <span class=\"n\">sources</span><span class=\"o\">=</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">333795</span><span class=\"p\">,</span> <span class=\"mi\">5147530</span><span class=\"p\">))</span>\n<span class=\"n\">streets</span> <span class=\"o\">=</span> <span class=\"n\">vevey</span><span class=\"o\">.</span><span class=\"n\">get_streets</span><span class=\"p\">()</span>\n<span class=\"n\">sinks</span> <span class=\"o\">=</span> <span class=\"n\">vevey</span><span class=\"o\">.</span><span class=\"n\">select_sinks</span><span class=\"p\">(</span><span class=\"n\">min_load</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"n\">vevey</span><span class=\"o\">.</span><span class=\"n\">get_sources</span><span class=\"p\">()</span>\n</pre>\n<p>Connect the selected buildings (sinks) and the source to the streets network:</p>\n<pre><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">terminals</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"o\">.</span><span class=\"n\">connect_terminals</span><span class=\"p\">(</span><span class=\"n\">streets</span><span class=\"p\">,</span> <span class=\"n\">sinks</span><span class=\"p\">,</span> <span class=\"n\">sources</span><span class=\"p\">)</span>\n</pre>\n<p>Run the evolutive algorithm to seek the best possible heating network within\nfive generations:</p>\n<pre><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">evolution</span> <span class=\"o\">=</span> <span class=\"n\">evolve</span><span class=\"o\">.</span><span class=\"n\">run_evolution</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">terminals</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">)</span>\n<span class=\"n\">tst</span> <span class=\"o\">=</span> <span class=\"n\">evolve</span><span class=\"o\">.</span><span class=\"n\">get_best_terminal_steiner_tree</span><span class=\"p\">(</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">terminals</span><span class=\"p\">,</span> <span class=\"n\">evolution</span><span class=\"p\">)</span>\n</pre>\n<p>Spread the buildings load over the district heating pipelines:</p>\n<pre><span class=\"n\">pipelines</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"o\">.</span><span class=\"n\">load_the_pipelines</span><span class=\"p\">(</span><span class=\"n\">tst</span><span class=\"p\">,</span> <span class=\"n\">terminals</span><span class=\"p\">)</span>\n</pre>\n<p>More detailed <a href=\"https://gitlab.com/crem-repository/dhd/tree/master/notebooks\" rel=\"nofollow\">examples</a> are provided in\nthe GitLab repository.</p>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<p>Click the following link to access the full <a href=\"https://dhd.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a>.</p>\n</div>\n<div id=\"further-developments\">\n<h2>Further developments</h2>\n<p>Here is a list of features eager to be implemented. Please refer to the\nCONTRIBUTING file if you either want to append or pop this list.</p>\n<ul>\n<li><em>dhd.city</em><ul>\n<li>Function to easily add a street to the streets network, accounting for the\ndifferent connection options: street node, street edge, no street.</li>\n</ul>\n</li>\n<li><em>dhd.connect</em><ul>\n<li>Treat the source(s) and sinks separately when connecting them.</li>\n<li>So far the natural barriers completely forbid any connection crossing them.\nThis criterion could be adjusted to a connection weight enhancement.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Free software: Apache Software License 2.0</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Research and implementation work for this tool has been carried out within the\nproject IntegrCiTy (ERA-NET Cofund Smart Cities and Communities call). In\nSwitzerland, it is funded by the Swiss Federal Office of Energy (contract\nSI/501404-2), as well as by the industrial and institutional partners of the\nproject .</p>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n\n          </div>"}, "last_serial": 5440405, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1e7719f5b2eb3bced8fc572bba40be5f", "sha256": "3d103bc2185501defa730c80a7a750dffa8e4a195b045fd7b5bbcb8bdeb99387"}, "downloads": -1, "filename": "dhd-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e7719f5b2eb3bced8fc572bba40be5f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35146, "upload_time": "2019-04-29T14:43:15", "upload_time_iso_8601": "2019-04-29T14:43:15.274798Z", "url": "https://files.pythonhosted.org/packages/fb/a3/cf859e8d1e5196a874d85be7ba1db1135881e32642f9f296c79a367a5e97/dhd-0.1.0-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6ea8fa0c3a70997e6d1f976c9408f50f", "sha256": "051b4e3f3c472328f6544a7e10e970e241f5b4a8000c6eafe6fa44169f2b9b15"}, "downloads": -1, "filename": "dhd-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ea8fa0c3a70997e6d1f976c9408f50f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35507, "upload_time": "2019-05-02T14:48:21", "upload_time_iso_8601": "2019-05-02T14:48:21.426168Z", "url": "https://files.pythonhosted.org/packages/36/00/75851b89462f1c9df5f12c63547b9c0d41b0458fa6000fb0e39bbf0dc291/dhd-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "3de327425dd24dfc89f9d80f55857101", "sha256": "372ba09d3c5a1de708df9e60d1d2bbf732582072a7114c2811e41ef6c24e65c5"}, "downloads": -1, "filename": "dhd-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3de327425dd24dfc89f9d80f55857101", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35804, "upload_time": "2019-06-24T12:18:35", "upload_time_iso_8601": "2019-06-24T12:18:35.394570Z", "url": "https://files.pythonhosted.org/packages/e2/a3/1753f2cb4baef922d4b3c0f6e3c43b38a5c167700ea82de05382b26dd1ae/dhd-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5d468a2090e83772b1f1500c0deeaf", "sha256": "56e9931c1b69723df443857fdfc48e8c984600f193685688c03f5e3be4f5208a"}, "downloads": -1, "filename": "dhd-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ca5d468a2090e83772b1f1500c0deeaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 466694, "upload_time": "2019-06-24T12:18:54", "upload_time_iso_8601": "2019-06-24T12:18:54.654186Z", "url": "https://files.pythonhosted.org/packages/92/96/c5c783140aa815949bea93fba2f601a69d282299722bf184295dacc779bb/dhd-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3de327425dd24dfc89f9d80f55857101", "sha256": "372ba09d3c5a1de708df9e60d1d2bbf732582072a7114c2811e41ef6c24e65c5"}, "downloads": -1, "filename": "dhd-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3de327425dd24dfc89f9d80f55857101", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35804, "upload_time": "2019-06-24T12:18:35", "upload_time_iso_8601": "2019-06-24T12:18:35.394570Z", "url": "https://files.pythonhosted.org/packages/e2/a3/1753f2cb4baef922d4b3c0f6e3c43b38a5c167700ea82de05382b26dd1ae/dhd-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5d468a2090e83772b1f1500c0deeaf", "sha256": "56e9931c1b69723df443857fdfc48e8c984600f193685688c03f5e3be4f5208a"}, "downloads": -1, "filename": "dhd-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ca5d468a2090e83772b1f1500c0deeaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 466694, "upload_time": "2019-06-24T12:18:54", "upload_time_iso_8601": "2019-06-24T12:18:54.654186Z", "url": "https://files.pythonhosted.org/packages/92/96/c5c783140aa815949bea93fba2f601a69d282299722bf184295dacc779bb/dhd-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:40 2020"}