{"info": {"author": "Daniel Jones", "author_email": "dan-code@erase.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Topic :: Artistic Software", "Topic :: Communications", "Topic :: Multimedia :: Sound/Audio", "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis"], "description": "# Python client for SuperCollider\n\nA lightweight Python module to control the [SuperCollider](https://supercollider.github.io) audio synthesis engine.\n\n## Installation\n\nThe `liblo` library is required for the underlying OSC communications.\n\n```\nbrew install liblo               # macOS\napt-get install liblo7 liblo-dev # Linux\n```\n\nInstall the Python package:\n\n```python\npip3 install supercollider\n```\n\n## Usage\n\nBefore using the library, start the SuperCollider server, either through the SuperCollider GUI or with `scsynth -u 57110`.\n\nWithin the SC client, create the below SynthDef:\n\n```\nSynthDef(\\sine, { |out = 0, freq = 440.0, gain = 0.0|\n    Out.ar(out, SinOsc.ar(freq) * gain.dbamp);\n}).store;\n```\n\nFrom Python, you can now create and trigger Synths:\n\n```python\nfrom supercollider import Server, Synth\n\nserver = Server()\n\nsynth = Synth(server, \"sine\", { \"freq\" : 440.0, \"gain\" : -12.0 })\nsynth.set(\"freq\", 880.0)\n```\n\nFor further examples, see [examples](examples).\n\n## See also\n\nIf you want a more fully-fledged approach that lets you construct and compile `SynthDef`s from Python, you'd be better with [Supriya](https://github.com/josiah-wolf-oberholtzer/supriya).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ideoforms/supercollider", "keywords": "sound,music,supercollider,synthesis", "license": "", "maintainer": "", "maintainer_email": "", "name": "supercollider", "package_url": "https://pypi.org/project/supercollider/", "platform": "", "project_url": "https://pypi.org/project/supercollider/", "project_urls": {"Homepage": "https://github.com/ideoforms/supercollider"}, "release_url": "https://pypi.org/project/supercollider/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Interact with the SuperCollider audio synthesis engine", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python client for SuperCollider</h1>\n<p>A lightweight Python module to control the <a href=\"https://supercollider.github.io\" rel=\"nofollow\">SuperCollider</a> audio synthesis engine.</p>\n<h2>Installation</h2>\n<p>The <code>liblo</code> library is required for the underlying OSC communications.</p>\n<pre><code>brew install liblo               # macOS\napt-get install liblo7 liblo-dev # Linux\n</code></pre>\n<p>Install the Python package:</p>\n<pre><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">supercollider</span>\n</pre>\n<h2>Usage</h2>\n<p>Before using the library, start the SuperCollider server, either through the SuperCollider GUI or with <code>scsynth -u 57110</code>.</p>\n<p>Within the SC client, create the below SynthDef:</p>\n<pre><code>SynthDef(\\sine, { |out = 0, freq = 440.0, gain = 0.0|\n    Out.ar(out, SinOsc.ar(freq) * gain.dbamp);\n}).store;\n</code></pre>\n<p>From Python, you can now create and trigger Synths:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">supercollider</span> <span class=\"kn\">import</span> <span class=\"n\">Server</span><span class=\"p\">,</span> <span class=\"n\">Synth</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n\n<span class=\"n\">synth</span> <span class=\"o\">=</span> <span class=\"n\">Synth</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"s2\">\"sine\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s2\">\"freq\"</span> <span class=\"p\">:</span> <span class=\"mf\">440.0</span><span class=\"p\">,</span> <span class=\"s2\">\"gain\"</span> <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">12.0</span> <span class=\"p\">})</span>\n<span class=\"n\">synth</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"freq\"</span><span class=\"p\">,</span> <span class=\"mf\">880.0</span><span class=\"p\">)</span>\n</pre>\n<p>For further examples, see <a href=\"examples\" rel=\"nofollow\">examples</a>.</p>\n<h2>See also</h2>\n<p>If you want a more fully-fledged approach that lets you construct and compile <code>SynthDef</code>s from Python, you'd be better with <a href=\"https://github.com/josiah-wolf-oberholtzer/supriya\" rel=\"nofollow\">Supriya</a>.</p>\n\n          </div>"}, "last_serial": 5986343, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2338476e55082809327f284a205e8263", "sha256": "184b4c135a2c54849733f13abde0c325c5594951ce0f7d126f46e0b49add0928"}, "downloads": -1, "filename": "supercollider-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2338476e55082809327f284a205e8263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3008, "upload_time": "2019-10-05T18:04:04", "upload_time_iso_8601": "2019-10-05T18:04:04.598779Z", "url": "https://files.pythonhosted.org/packages/2a/b7/c6a72042c2dfedc46c65776648f5720d29f284cb7b7b6742f77e6bf4d01d/supercollider-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3bc681acadffa506e7ee24d4938e4aa0", "sha256": "a781873c03381b3dcec18da50e6b87b5482e0396b0377f17c2ad36c90f35e31e"}, "downloads": -1, "filename": "supercollider-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3bc681acadffa506e7ee24d4938e4aa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5723, "upload_time": "2019-10-07T21:51:29", "upload_time_iso_8601": "2019-10-07T21:51:29.630783Z", "url": "https://files.pythonhosted.org/packages/dc/7c/8d344d70f6acbced742ad97f89f7f791030ccd99a73d4b4e7658d1013df4/supercollider-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9fb5891ed241ef12cb3f6c744698fb19", "sha256": "b31a6b421da009b022ba68e9cef42054f70c16319cee95bfdc871b3e50d6b0db"}, "downloads": -1, "filename": "supercollider-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9fb5891ed241ef12cb3f6c744698fb19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6289, "upload_time": "2019-10-09T19:56:10", "upload_time_iso_8601": "2019-10-09T19:56:10.326157Z", "url": "https://files.pythonhosted.org/packages/35/6c/14dcc8d2a6a12007193abfab32e748aee5e994fab12795c370f15b48f114/supercollider-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a3d288b9f03dcdab8fd04ba0b51bd1e9", "sha256": "7e4771ca307f30f188629c339bcfd4692abe9809feca4ec90be0d291d5fb605e"}, "downloads": -1, "filename": "supercollider-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a3d288b9f03dcdab8fd04ba0b51bd1e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6573, "upload_time": "2019-10-16T20:54:50", "upload_time_iso_8601": "2019-10-16T20:54:50.396180Z", "url": "https://files.pythonhosted.org/packages/92/10/817a71bcb510d386347ae8d2b27608fe5a3a2e0ed5aaff5145fa7f19fdbb/supercollider-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3d288b9f03dcdab8fd04ba0b51bd1e9", "sha256": "7e4771ca307f30f188629c339bcfd4692abe9809feca4ec90be0d291d5fb605e"}, "downloads": -1, "filename": "supercollider-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a3d288b9f03dcdab8fd04ba0b51bd1e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6573, "upload_time": "2019-10-16T20:54:50", "upload_time_iso_8601": "2019-10-16T20:54:50.396180Z", "url": "https://files.pythonhosted.org/packages/92/10/817a71bcb510d386347ae8d2b27608fe5a3a2e0ed5aaff5145fa7f19fdbb/supercollider-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:17 2020"}