{"info": {"author": "James Pallister", "author_email": "james.pallister@bristol.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "====================================\nThe pyenergy and platformrun modules\n====================================\n\nThis package contains two modules, pyenergy and platformrun. The first is a\nmodule which directly interfaces with the `MAGEEC <http://www.mageec.org>`_\nenergy monitor boards, allowing measurements to be taken and the boards to be\nscripted. The second module, platformrun, allows easy measurement of binaries\non platforms that can be measured with the boards. The procedure for running a\nbinary is different for each boards, so module wraps the platforms in a\nconsistent way.\n\nThe source code is available at\nhttps://github.com/jpallister/stm32f4-energy-monitor/ under the LGPL.\n\nGetting started\n===============\n\nThe commands that need to be run to just run a binary on a platform:\n\n::\n\n    $ energytool setup\n\nThis command will prompt you for the setup of the energy measurement devices\nthat are attached to the computer.\n\n::\n\n    $ platformrun-detect\n\nThis will detect whether the required tools are installed to run on the target\nplatform. The ``-p`` flag prompts for locations of binaries, if they are in\nnon standard places.\n\n::\n\n    $ platformrun PLATFORM BINARY\n\nThis command runs the binary on the platform, recording energy measurements.\n\nPyenergy\n========\n\nThis python module can be used in two ways, to script the energy monitor, and\nto configure the energy monitoring boards. This module is used by platformrun\nto communicate with the energy monitor, and implements commands such as\nsetting up the energy monitoring, as well as pin triggering.\n\nThe energytool is also exposed by this module, allowing commandline access to\nthe energy monitors.\n\n::\n\n    $ energytool -h\n\n    Energy tools\n\n    Usage:\n        energytool (-m MPOINT)... [options] read SERIAL PIN\n        energytool (-m MPOINT)... [options] continuous SERIAL\n        energytool (-m MPOINT)... [options] debug SERIAL\n        energytool list\n        energytool setup\n        energytool changeserial SERIAL NEWSERIAL\n        energytool interactive\n\n    Commands:\n        read            This sets up a trigger on the specified PIN and waits for\n                        an energy measurement.\n\n        continuous      Continuously read measurements from the specified energy\n                        monitor.\n\n        debug           Output some debug data about the instantaneous voltages\n                        seen on the ADCs, along with current and voltage.\n\n        list            Show the serial numbers and API version of each connected\n                        energy monitor.\n\n        changeserial    Connect to the device specified by SERIAL, and change the\n                        serial to NEWSERIAL\n\n\nScripting\n---------\n\nThe module exposes one class, EnergyMonitor. This class can be instantiated as such::\n\n    em = pyenergy.EnergyMonitor(\"EE00\")\n\nThis connects to an energy monitor board with the serial ``EE00``. Up to three\nof the four measurement points can then be enabled::\n\n    em.enableMeasurementPoint(1)\n\nMeasurement can be started and stopped in a similar way::\n\n    em.start(1)\n    em.stop(1)\n\nThis allows the measurement to be manually started and stopped. A pin to automatically start and stop measurements can be set up too. Note the ``start`` call is not needed for this, as the device will automatically start. The device can then be polled for a completed measurement::\n\n    em.setTrigger(\"PA0\", 1)\n\n    while not em.measurementCompleted(1):\n        sleep(0.1)\n\n    m = em.getMeasurement(1)\n\nThe above snippet sets a trigger on PA0. The returned measurement has several properties with metrics about the run::\n\n    m.energy        # Energy, joules\n    m.time          # Time between start and stop\n    m.avg_power     # Average power throughout the run\n    m.avg_current   # Average current throughout the run\n    m.avg_voltage   # Average voltage throughout the run\n\nPlatform run\n============\n\nThese scripts form the basis to easily run binaries on a range of platforms.\nFor example, to run a binary on the STM32F0DISCOVERY board, this is simply the\nfollowing command line invocation::\n\n    $ platformrun stm32f0discovery program.elf\n    Energy:            27.386 mJ\n    Time:             626.119 ms\n    Average current:   14.382 mA\n    Average voltage:    3.041 V\n\nThe compilation of programs to run on the target architecture is out of scope\nfor this document. The only particular feature a program must have, is that it\nasserts a digital 1 on a pin when it wants the measurement to start, and\nreturns to 0V when the measurement should end.\n\nTwo configuration files are needed by platformrun, one describing the set of\nup the energy monitors, and one describing where platformrun can find all the\ntools necessary to run on a specific platform. The first file must be created\nmanually - it is specific to the way you connect the boards, and the serial\nnumbers given to the energy monitors.\n\nA detection script is provided to find locations of the tools necessary to run\nbinaries on a platform. The configuration of the location of tools, and\nenabled platforms is kept in ``~/.platformrunrc``.\n\nThe configuration file is set up as follows::\n\n    $ platformrun-detect\n\n    Summary\n\n    pic32mx250f128b           disabled\n    stm32vldiscovery          enabled\n    atmega328p                enabled\n    stm32f0discovery          enabled\n    msp-exp430fr5739          enabled\n    msp-exp430f5529           enabled\n\nThis will try to automatically detect where the required executables are.\n\nList of platforms\n-----------------\n\nCurrently, several different platforms are set up to easily have programs run\nvia platform run.\n\nSTM32F0DISCOVERY\n~~~~~~~~~~~~~~~~\n\nThis board contains a cortex-m0. Stlink is used as a gdb-server and an arm\ndebugger is used to flash the code to the board.\n\nPlatform name: ``stm32f0discovery``\n\nPrerequisites for running:\n - st-util (st-link package)\n - arm-none-eabi-gdb (or other arm gdb-compatible debugger)\n\n\nSTM32VLDISCOVERY\n~~~~~~~~~~~~~~~~\n\nThis board contains a cortex-m3. Stlink is used as a gdb-server and an arm\ndebugger is used to flash the code to the board.\n\nPlatform name: ``stm32vldiscovery``\n\nPrerequisites for running:\n - st-util (st-link package)\n - arm-none-eabi-gdb (or other arm gdb-compatible debugger)\n\n\nATMEGA328P\n~~~~~~~~~~\n\nThis is an ATMEGA328P chip, loaded with an arduino compatible bootloader. This\nis programmed with a USB to serial converter and avrdude. This was tested on a\nbreadboarded ATMEGA328P chip, with a FTDI USB to serial converter.\n\nPlatform name: ``atmega328p``\n\nPrerequisites for running:\n - avrdude\n - avr-objcopy\n\n\nPIC32MX250F128B\n~~~~~~~~~~~~~~~\n\nThis is a 32-bit pic chip, tested on a breadboard and hooked up to a pickit2.\nThis requires pic32prog (so that no bootloader is needed on the PIC chip) and\nthe pic32 tools to convert the elf to a hex file.\n\nPlatform name: ``pic32mx250f128b``\n\nPrerequisites for running:\n - pic32prog\n - pic32-objcopy\n\n\nMSP-EXP430F5529\n~~~~~~~~~~~~~~~\n\nThis is a 16-bit MSP430 DSP from TI, experimenter board, launchpad edition.\nThe mspdebug program is used to program this board, however the libmsp430\nneeds to be compiled into the mspdebug program.\n\nPlatform name: ``msp-exp430f5529``\n\nPrerequisites for running:\n - mspdebug, with tilib\n\n\nMSP-EXP430FR5739\n~~~~~~~~~~~~~~~~\n\nThis is a 16-bit MSP430 DSP from TI, experimenter board. This is similar to\nthe previous board, however this chip uses FRAM instead of flash. The mspdebug\nprogram is used to program this board.\n\nPlatform name: ``msp-exp430fr5739``\n\nPrerequisites for running:\n - mspdebug\n\n\nSAM4L Xplained Pro\n~~~~~~~~~~~~~~~~~~\n\nThis is Cortex-M4 chip with an Atmel SoC. The chip can be programmed uses\nCMSIS-DAP, with openocd.\n\nPlatform name: ``sam4lxplained``\n\nPrerequisites for running:\n - arm-none-eabi-gdb\n - openocd, with CMSIS-DAP compiled in\n\n\nXMEGA-A3BU Xplained\n~~~~~~~~~~~~~~~~~~~\n\nThis board contains one of the larger AVR chips, and is programmed using the\nJTAGICE3 jtag programmer. Note: only the old firmware can communicate with\navrdude, if the programmer has been updated by Atmel Studio then it will not\nwork.\n\nPlatform name: ``xmegaa3buxplained``\n\nPrerequisites for running:\n - avr-objcopy\n - avrdude\n\n\nMeasurement configuration\n-------------------------\n\nThe measurement configuration file tells platformrun about the energy monitors\nconnectted to the platforms, and some additional details about the platforms.\nFor example, to measure the stm32f0discovery, the application needs to know the\nserial number of the energy measurement device, as well as the measurement\npoint and the shunt resistor value. Other platforms have additional details,\nsuch as atmega328p, which needs to know the ID of the USB-serial adaptor.\n\nThe measurement config is a standard JSON format file, and by default is\nloaded from ``~/.measurementrc``. An example of the measurement configuration\nfor the stm32f0discovery platform is given below.\n\n::\n\n    {\n        \"stm32f0discovery\" : {\n            \"energy-monitor\" : \"CXM0\",\n            \"trigger-pin\" : \"PA0\",\n            \"measurement-point\" : 1,\n            \"resistor\" : 1\n        }\n    }\n\n\nBasic configuration\n~~~~~~~~~~~~~~~~~~~\n\nKeys:\n - energy-monitor. This specifies the serial number of the energy monitor that\n   is used for this platform.\n - trigger-pin.  This specifies the pin on which the platform will trigger the\n   energy monitor.\n - measurement-point. Which measurement point is connected to the platform.\n - resistor. The value of the shunt resistor that intercept's the platform's\n   power supply.\n\nPlatform specific keys\n~~~~~~~~~~~~~~~~~~~~~~\n\nKeys for ``atmega328p``:\n - serial-dev. This specifies the ID of the USB to serial device. This ID comes\n   directly from the link found in /dev/serial/by-id/ when the adapter is\n   plugged in. By selecting the ID this way, multiple similar USB-serial\n   adapters can be uniquely specified.\n\nKeys for ``pic32mx250f128b``:\n - serial-number. This specifies the serial number of the pickit2 connected to\n   the platform (not currently used).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "energy monitor MAGEEC", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "pyenergy", "package_url": "https://pypi.org/project/pyenergy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyenergy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/pyenergy/0.1rc13/", "requires_dist": null, "requires_python": null, "summary": "An interface to the MAGEEC energy monitor boards", "version": "0.1rc13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package contains two modules, pyenergy and platformrun. The first is a\nmodule which directly interfaces with the <a href=\"http://www.mageec.org\" rel=\"nofollow\">MAGEEC</a>\nenergy monitor boards, allowing measurements to be taken and the boards to be\nscripted. The second module, platformrun, allows easy measurement of binaries\non platforms that can be measured with the boards. The procedure for running a\nbinary is different for each boards, so module wraps the platforms in a\nconsistent way.</p>\n<p>The source code is available at\n<a href=\"https://github.com/jpallister/stm32f4-energy-monitor/\" rel=\"nofollow\">https://github.com/jpallister/stm32f4-energy-monitor/</a> under the LGPL.</p>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>The commands that need to be run to just run a binary on a platform:</p>\n<pre>$ energytool setup\n</pre>\n<p>This command will prompt you for the setup of the energy measurement devices\nthat are attached to the computer.</p>\n<pre>$ platformrun-detect\n</pre>\n<p>This will detect whether the required tools are installed to run on the target\nplatform. The <tt><span class=\"pre\">-p</span></tt> flag prompts for locations of binaries, if they are in\nnon standard places.</p>\n<pre>$ platformrun PLATFORM BINARY\n</pre>\n<p>This command runs the binary on the platform, recording energy measurements.</p>\n</div>\n<div id=\"pyenergy\">\n<h2>Pyenergy</h2>\n<p>This python module can be used in two ways, to script the energy monitor, and\nto configure the energy monitoring boards. This module is used by platformrun\nto communicate with the energy monitor, and implements commands such as\nsetting up the energy monitoring, as well as pin triggering.</p>\n<p>The energytool is also exposed by this module, allowing commandline access to\nthe energy monitors.</p>\n<pre>$ energytool -h\n\nEnergy tools\n\nUsage:\n    energytool (-m MPOINT)... [options] read SERIAL PIN\n    energytool (-m MPOINT)... [options] continuous SERIAL\n    energytool (-m MPOINT)... [options] debug SERIAL\n    energytool list\n    energytool setup\n    energytool changeserial SERIAL NEWSERIAL\n    energytool interactive\n\nCommands:\n    read            This sets up a trigger on the specified PIN and waits for\n                    an energy measurement.\n\n    continuous      Continuously read measurements from the specified energy\n                    monitor.\n\n    debug           Output some debug data about the instantaneous voltages\n                    seen on the ADCs, along with current and voltage.\n\n    list            Show the serial numbers and API version of each connected\n                    energy monitor.\n\n    changeserial    Connect to the device specified by SERIAL, and change the\n                    serial to NEWSERIAL\n</pre>\n<div id=\"scripting\">\n<h3>Scripting</h3>\n<p>The module exposes one class, EnergyMonitor. This class can be instantiated as such:</p>\n<pre>em = pyenergy.EnergyMonitor(\"EE00\")\n</pre>\n<p>This connects to an energy monitor board with the serial <tt>EE00</tt>. Up to three\nof the four measurement points can then be enabled:</p>\n<pre>em.enableMeasurementPoint(1)\n</pre>\n<p>Measurement can be started and stopped in a similar way:</p>\n<pre>em.start(1)\nem.stop(1)\n</pre>\n<p>This allows the measurement to be manually started and stopped. A pin to automatically start and stop measurements can be set up too. Note the <tt>start</tt> call is not needed for this, as the device will automatically start. The device can then be polled for a completed measurement:</p>\n<pre>em.setTrigger(\"PA0\", 1)\n\nwhile not em.measurementCompleted(1):\n    sleep(0.1)\n\nm = em.getMeasurement(1)\n</pre>\n<p>The above snippet sets a trigger on PA0. The returned measurement has several properties with metrics about the run:</p>\n<pre>m.energy        # Energy, joules\nm.time          # Time between start and stop\nm.avg_power     # Average power throughout the run\nm.avg_current   # Average current throughout the run\nm.avg_voltage   # Average voltage throughout the run\n</pre>\n</div>\n</div>\n<div id=\"platform-run\">\n<h2>Platform run</h2>\n<p>These scripts form the basis to easily run binaries on a range of platforms.\nFor example, to run a binary on the STM32F0DISCOVERY board, this is simply the\nfollowing command line invocation:</p>\n<pre>$ platformrun stm32f0discovery program.elf\nEnergy:            27.386 mJ\nTime:             626.119 ms\nAverage current:   14.382 mA\nAverage voltage:    3.041 V\n</pre>\n<p>The compilation of programs to run on the target architecture is out of scope\nfor this document. The only particular feature a program must have, is that it\nasserts a digital 1 on a pin when it wants the measurement to start, and\nreturns to 0V when the measurement should end.</p>\n<p>Two configuration files are needed by platformrun, one describing the set of\nup the energy monitors, and one describing where platformrun can find all the\ntools necessary to run on a specific platform. The first file must be created\nmanually - it is specific to the way you connect the boards, and the serial\nnumbers given to the energy monitors.</p>\n<p>A detection script is provided to find locations of the tools necessary to run\nbinaries on a platform. The configuration of the location of tools, and\nenabled platforms is kept in <tt><span class=\"pre\">~/.platformrunrc</span></tt>.</p>\n<p>The configuration file is set up as follows:</p>\n<pre>$ platformrun-detect\n\nSummary\n\npic32mx250f128b           disabled\nstm32vldiscovery          enabled\natmega328p                enabled\nstm32f0discovery          enabled\nmsp-exp430fr5739          enabled\nmsp-exp430f5529           enabled\n</pre>\n<p>This will try to automatically detect where the required executables are.</p>\n<div id=\"list-of-platforms\">\n<h3>List of platforms</h3>\n<p>Currently, several different platforms are set up to easily have programs run\nvia platform run.</p>\n<div id=\"stm32f0discovery\">\n<h4>STM32F0DISCOVERY</h4>\n<p>This board contains a cortex-m0. Stlink is used as a gdb-server and an arm\ndebugger is used to flash the code to the board.</p>\n<p>Platform name: <tt>stm32f0discovery</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>st-util (st-link package)</li>\n<li>arm-none-eabi-gdb (or other arm gdb-compatible debugger)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"stm32vldiscovery\">\n<h4>STM32VLDISCOVERY</h4>\n<p>This board contains a cortex-m3. Stlink is used as a gdb-server and an arm\ndebugger is used to flash the code to the board.</p>\n<p>Platform name: <tt>stm32vldiscovery</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>st-util (st-link package)</li>\n<li>arm-none-eabi-gdb (or other arm gdb-compatible debugger)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"atmega328p\">\n<h4>ATMEGA328P</h4>\n<p>This is an ATMEGA328P chip, loaded with an arduino compatible bootloader. This\nis programmed with a USB to serial converter and avrdude. This was tested on a\nbreadboarded ATMEGA328P chip, with a FTDI USB to serial converter.</p>\n<p>Platform name: <tt>atmega328p</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>avrdude</li>\n<li>avr-objcopy</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"pic32mx250f128b\">\n<h4>PIC32MX250F128B</h4>\n<p>This is a 32-bit pic chip, tested on a breadboard and hooked up to a pickit2.\nThis requires pic32prog (so that no bootloader is needed on the PIC chip) and\nthe pic32 tools to convert the elf to a hex file.</p>\n<p>Platform name: <tt>pic32mx250f128b</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>pic32prog</li>\n<li>pic32-objcopy</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"msp-exp430f5529\">\n<h4>MSP-EXP430F5529</h4>\n<p>This is a 16-bit MSP430 DSP from TI, experimenter board, launchpad edition.\nThe mspdebug program is used to program this board, however the libmsp430\nneeds to be compiled into the mspdebug program.</p>\n<p>Platform name: <tt><span class=\"pre\">msp-exp430f5529</span></tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>mspdebug, with tilib</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"msp-exp430fr5739\">\n<h4>MSP-EXP430FR5739</h4>\n<p>This is a 16-bit MSP430 DSP from TI, experimenter board. This is similar to\nthe previous board, however this chip uses FRAM instead of flash. The mspdebug\nprogram is used to program this board.</p>\n<p>Platform name: <tt><span class=\"pre\">msp-exp430fr5739</span></tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>mspdebug</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"sam4l-xplained-pro\">\n<h4>SAM4L Xplained Pro</h4>\n<p>This is Cortex-M4 chip with an Atmel SoC. The chip can be programmed uses\nCMSIS-DAP, with openocd.</p>\n<p>Platform name: <tt>sam4lxplained</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>arm-none-eabi-gdb</li>\n<li>openocd, with CMSIS-DAP compiled in</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"xmega-a3bu-xplained\">\n<h4>XMEGA-A3BU Xplained</h4>\n<p>This board contains one of the larger AVR chips, and is programmed using the\nJTAGICE3 jtag programmer. Note: only the old firmware can communicate with\navrdude, if the programmer has been updated by Atmel Studio then it will not\nwork.</p>\n<p>Platform name: <tt>xmegaa3buxplained</tt></p>\n<dl>\n<dt>Prerequisites for running:</dt>\n<dd><ul>\n<li>avr-objcopy</li>\n<li>avrdude</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"measurement-configuration\">\n<h3>Measurement configuration</h3>\n<p>The measurement configuration file tells platformrun about the energy monitors\nconnectted to the platforms, and some additional details about the platforms.\nFor example, to measure the stm32f0discovery, the application needs to know the\nserial number of the energy measurement device, as well as the measurement\npoint and the shunt resistor value. Other platforms have additional details,\nsuch as atmega328p, which needs to know the ID of the USB-serial adaptor.</p>\n<p>The measurement config is a standard JSON format file, and by default is\nloaded from <tt><span class=\"pre\">~/.measurementrc</span></tt>. An example of the measurement configuration\nfor the stm32f0discovery platform is given below.</p>\n<pre>{\n    \"stm32f0discovery\" : {\n        \"energy-monitor\" : \"CXM0\",\n        \"trigger-pin\" : \"PA0\",\n        \"measurement-point\" : 1,\n        \"resistor\" : 1\n    }\n}\n</pre>\n<div id=\"basic-configuration\">\n<h4>Basic configuration</h4>\n<dl>\n<dt>Keys:</dt>\n<dd><ul>\n<li>energy-monitor. This specifies the serial number of the energy monitor that\nis used for this platform.</li>\n<li>trigger-pin.  This specifies the pin on which the platform will trigger the\nenergy monitor.</li>\n<li>measurement-point. Which measurement point is connected to the platform.</li>\n<li>resistor. The value of the shunt resistor that intercept\u2019s the platform\u2019s\npower supply.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"platform-specific-keys\">\n<h4>Platform specific keys</h4>\n<dl>\n<dt>Keys for <tt>atmega328p</tt>:</dt>\n<dd><ul>\n<li>serial-dev. This specifies the ID of the USB to serial device. This ID comes\ndirectly from the link found in /dev/serial/by-id/ when the adapter is\nplugged in. By selecting the ID this way, multiple similar USB-serial\nadapters can be uniquely specified.</li>\n</ul>\n</dd>\n<dt>Keys for <tt>pic32mx250f128b</tt>:</dt>\n<dd><ul>\n<li>serial-number. This specifies the serial number of the pickit2 connected to\nthe platform (not currently used).</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1435375, "releases": {"0.1rc1": [{"comment_text": "", "digests": {"md5": "5f4079f29094911a74de7a1af9ffde6f", "sha256": "a42807c7d8eec490a49c150f320cfe81ae917219ec349181db10e0abf38966e8"}, "downloads": -1, "filename": "pyenergy-0.1rc1-py2.7.egg", "has_sig": false, "md5_digest": "5f4079f29094911a74de7a1af9ffde6f", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 34632, "upload_time": "2014-02-18T16:18:30", "upload_time_iso_8601": "2014-02-18T16:18:30.988403Z", "url": "https://files.pythonhosted.org/packages/e1/5e/dafa69246a3f8f1a26d41cc536d43d135276f3f99b904c74ff5d43aaf786/pyenergy-0.1rc1-py2.7.egg", "yanked": false}], "0.1rc10": [{"comment_text": "", "digests": {"md5": "11bad0002449d5ad2762db20478fdf3c", "sha256": "e903428acdfe439d82c2caba7ab17c8307637c952405e7ef04c9ebe8bebeae7a"}, "downloads": -1, "filename": "pyenergy-0.1rc10-py2.7.egg", "has_sig": false, "md5_digest": "11bad0002449d5ad2762db20478fdf3c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 54193, "upload_time": "2014-11-04T14:23:01", "upload_time_iso_8601": "2014-11-04T14:23:01.508336Z", "url": "https://files.pythonhosted.org/packages/15/68/a42c633d16f1775c22537e90bfd1f83de7732354101405b7f79dc57a8300/pyenergy-0.1rc10-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c6de21f846424ab326fd10343feb62c", "sha256": "64dae1362598f528f881daba795d542f62e1d6240f2e04d60a3f903bb3e8fab9"}, "downloads": -1, "filename": "pyenergy-0.1rc10.tar.gz", "has_sig": false, "md5_digest": "9c6de21f846424ab326fd10343feb62c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26639, "upload_time": "2014-11-04T14:22:59", "upload_time_iso_8601": "2014-11-04T14:22:59.106783Z", "url": "https://files.pythonhosted.org/packages/5c/b2/7db12bc8635a79291bffc261571eca762a96457ae8eb8a089b959a096aa3/pyenergy-0.1rc10.tar.gz", "yanked": false}], "0.1rc11": [{"comment_text": "", "digests": {"md5": "83445c558181656422004ce68db7cd44", "sha256": "424042562756e617afab23726bf1a4d2f86fc0e0c5192466af59164817f39c08"}, "downloads": -1, "filename": "pyenergy-0.1rc11-py2.7.egg", "has_sig": false, "md5_digest": "83445c558181656422004ce68db7cd44", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 54554, "upload_time": "2014-11-05T11:09:16", "upload_time_iso_8601": "2014-11-05T11:09:16.135817Z", "url": "https://files.pythonhosted.org/packages/87/7a/4c061af47753a52e0aa6d3ce7a83d1a457114b4cb09cc42cd854a76e602e/pyenergy-0.1rc11-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f393d766b9c6d2c10a56d97d8ea44bf6", "sha256": "9cf7f57c6c53576695625a3048edda08108d9e072416fd00906cc01812f9a3df"}, "downloads": -1, "filename": "pyenergy-0.1rc11.tar.gz", "has_sig": false, "md5_digest": "f393d766b9c6d2c10a56d97d8ea44bf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26774, "upload_time": "2014-11-05T11:09:14", "upload_time_iso_8601": "2014-11-05T11:09:14.056335Z", "url": "https://files.pythonhosted.org/packages/e9/2e/93045ae0fe8caae8fbbe6e893bd526361b7628877723ae61131e0dfa8c2a/pyenergy-0.1rc11.tar.gz", "yanked": false}], "0.1rc12": [{"comment_text": "", "digests": {"md5": "476a0dc2af46919cd9d73ced5040c760", "sha256": "7093ae923b9fd639b7054a19b3774f97a679d3c2757d96b71356e7c44960881b"}, "downloads": -1, "filename": "pyenergy-0.1rc12-py2.7.egg", "has_sig": false, "md5_digest": "476a0dc2af46919cd9d73ced5040c760", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 57212, "upload_time": "2014-12-02T16:55:17", "upload_time_iso_8601": "2014-12-02T16:55:17.614210Z", "url": "https://files.pythonhosted.org/packages/59/88/dd880d52dae2f5fdba77006d3ad84acf210ea2247b0165c6041bb74a035a/pyenergy-0.1rc12-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "87edde6ecc9ebcb29a142b574772eb26", "sha256": "712140e717d15a485a14265785be0dd30e1ff89a5c4045336de1030ff207c22e"}, "downloads": -1, "filename": "pyenergy-0.1rc12.tar.gz", "has_sig": false, "md5_digest": "87edde6ecc9ebcb29a142b574772eb26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27681, "upload_time": "2014-12-02T16:55:15", "upload_time_iso_8601": "2014-12-02T16:55:15.573945Z", "url": "https://files.pythonhosted.org/packages/bb/1d/d82a6fe32a7ce1f71c33d255a2a80a855401a92f5a24de704c8973a46ec5/pyenergy-0.1rc12.tar.gz", "yanked": false}], "0.1rc13": [{"comment_text": "", "digests": {"md5": "487e6dc764290cfa502b15576d246b16", "sha256": "808e3c862330b56dee4b4c4429958c075abbd0a2370c7f61b404d7d9254c424a"}, "downloads": -1, "filename": "pyenergy-0.1rc13-py2.7.egg", "has_sig": false, "md5_digest": "487e6dc764290cfa502b15576d246b16", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 59341, "upload_time": "2015-02-23T21:39:25", "upload_time_iso_8601": "2015-02-23T21:39:25.625290Z", "url": "https://files.pythonhosted.org/packages/ca/a4/82695ba5c38138a909ef7af79dde1db29c4fa036c6b5131f4baf1b8268f9/pyenergy-0.1rc13-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b63c87581cf870e8f3ab9ce43d9ea722", "sha256": "4a7e94c6eac1c298f6dcd97e4bf9d8643a0a8f65a733ab2e86204bcd47543b40"}, "downloads": -1, "filename": "pyenergy-0.1rc13.tar.gz", "has_sig": false, "md5_digest": "b63c87581cf870e8f3ab9ce43d9ea722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28527, "upload_time": "2015-02-23T21:39:22", "upload_time_iso_8601": "2015-02-23T21:39:22.998435Z", "url": "https://files.pythonhosted.org/packages/0d/94/5d254ac1cd75a194a4dcbb53c2e06f42c55cb7ae427e91f98e6e8571c8be/pyenergy-0.1rc13.tar.gz", "yanked": false}], "0.1rc2": [{"comment_text": "", "digests": {"md5": "6a5e93b0e3da5500a79d76e7f17db4fa", "sha256": "025cd0154ff7922107832f03160692c3d5e915c85a98e246e3d3cbb1a190905c"}, "downloads": -1, "filename": "pyenergy-0.1rc2-py2.7.egg", "has_sig": false, "md5_digest": "6a5e93b0e3da5500a79d76e7f17db4fa", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 37019, "upload_time": "2014-02-19T11:30:49", "upload_time_iso_8601": "2014-02-19T11:30:49.069825Z", "url": "https://files.pythonhosted.org/packages/0b/1c/91cb15e7b9b8476c7863a14a9ef0794d0a3fad9f181fb9bf9b8209efd39c/pyenergy-0.1rc2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d0ed3de88688f4169c2824836c9fa12", "sha256": "6816e586465d24ffb1971e4c84067561defa4a928871f25444ecefa0e1a8d501"}, "downloads": -1, "filename": "pyenergy-0.1rc2.tar.gz", "has_sig": false, "md5_digest": "6d0ed3de88688f4169c2824836c9fa12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18401, "upload_time": "2014-02-21T00:21:53", "upload_time_iso_8601": "2014-02-21T00:21:53.375406Z", "url": "https://files.pythonhosted.org/packages/3e/7d/39b5eba47c5bd224350cd1e5bfe64f8319165fbaf4a541166ccc8b90d9f5/pyenergy-0.1rc2.tar.gz", "yanked": false}], "0.1rc3": [{"comment_text": "", "digests": {"md5": "c84e939f6ce4c8adc4fc819e9ace36f3", "sha256": "de776ace26068f01ed56e3c3c975d68bcd2e177cc20ec94b08deaf7baa598e79"}, "downloads": -1, "filename": "pyenergy-0.1rc3-py2.7.egg", "has_sig": false, "md5_digest": "c84e939f6ce4c8adc4fc819e9ace36f3", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 41264, "upload_time": "2014-02-28T13:42:45", "upload_time_iso_8601": "2014-02-28T13:42:45.043475Z", "url": "https://files.pythonhosted.org/packages/75/e3/dbc3eed123f907f5dac266f38b9206634b04721f8f23ce2cd5c3463c2a4c/pyenergy-0.1rc3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1795bc32763df083e5dbc1c0945d1831", "sha256": "e55b4806cbd5418af19ddb872859ed983ef763c7b5ae6e2ecf579d4c14942c6e"}, "downloads": -1, "filename": "pyenergy-0.1rc3.tar.gz", "has_sig": false, "md5_digest": "1795bc32763df083e5dbc1c0945d1831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20259, "upload_time": "2014-02-27T13:28:48", "upload_time_iso_8601": "2014-02-27T13:28:48.393755Z", "url": "https://files.pythonhosted.org/packages/54/19/15f8dbe8acfa675936499d8ab127f94c9974161d26b35918c94a0481452a/pyenergy-0.1rc3.tar.gz", "yanked": false}], "0.1rc4": [{"comment_text": "", "digests": {"md5": "5e90781d1b96c3b4e3b17b175e038e27", "sha256": "1d4b0413fe542f49ee6af48289c2f677694e237db931d3a9057b01aa0072b806"}, "downloads": -1, "filename": "pyenergy-0.1rc4-py2.7.egg", "has_sig": false, "md5_digest": "5e90781d1b96c3b4e3b17b175e038e27", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 43726, "upload_time": "2014-03-05T14:09:11", "upload_time_iso_8601": "2014-03-05T14:09:11.036838Z", "url": "https://files.pythonhosted.org/packages/4a/cd/223a2033b08a79cfcab128074894101cd7ac063a0e9ccd4f8522b1f9cc45/pyenergy-0.1rc4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb249c89b78cd1413f45ab0c82b08733", "sha256": "46709ea0e239dc549e5c46a897d5526328ac54837632b66896fc1e9c01a61e7c"}, "downloads": -1, "filename": "pyenergy-0.1rc4.tar.gz", "has_sig": false, "md5_digest": "cb249c89b78cd1413f45ab0c82b08733", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22253, "upload_time": "2014-03-05T14:09:13", "upload_time_iso_8601": "2014-03-05T14:09:13.118500Z", "url": "https://files.pythonhosted.org/packages/e0/d4/12d436bf8d9d5b43ab7d1425d030fa8c78fdcc784eb026adf8770c8197d0/pyenergy-0.1rc4.tar.gz", "yanked": false}], "0.1rc5": [{"comment_text": "", "digests": {"md5": "f6153527049eff10f203f7845448093b", "sha256": "8cee2e94a80b090295704ede5f8cd294c2f02182c4033b91baf254a8ea73b1c1"}, "downloads": -1, "filename": "pyenergy-0.1rc5-py2.7.egg", "has_sig": false, "md5_digest": "f6153527049eff10f203f7845448093b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 48143, "upload_time": "2014-03-11T14:55:19", "upload_time_iso_8601": "2014-03-11T14:55:19.064729Z", "url": "https://files.pythonhosted.org/packages/f9/b3/2c7386ed2add9e148e5b69b91079dcea8d5012229e165364545da1442237/pyenergy-0.1rc5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af5baa5ed9b58ca6130a11e990ca3fc", "sha256": "260bdcbb30b0893d79edf8093409b2accce57da075dfbe296920dbc613605842"}, "downloads": -1, "filename": "pyenergy-0.1rc5.tar.gz", "has_sig": false, "md5_digest": "0af5baa5ed9b58ca6130a11e990ca3fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24262, "upload_time": "2014-03-11T14:55:21", "upload_time_iso_8601": "2014-03-11T14:55:21.170810Z", "url": "https://files.pythonhosted.org/packages/56/4a/87bc7a85f18a4a866ffeb4934b36002790319a13740d9b882144e6591435/pyenergy-0.1rc5.tar.gz", "yanked": false}], "0.1rc6": [{"comment_text": "", "digests": {"md5": "0dc9d1038bc20471ab1d33dd74a40fa8", "sha256": "a0daeb8637831ad8d8ef84b01550ea5e56caae8187b0f2182e95a3d4d119dec4"}, "downloads": -1, "filename": "pyenergy-0.1rc6-py2.7.egg", "has_sig": false, "md5_digest": "0dc9d1038bc20471ab1d33dd74a40fa8", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 53400, "upload_time": "2014-03-17T16:38:32", "upload_time_iso_8601": "2014-03-17T16:38:32.700492Z", "url": "https://files.pythonhosted.org/packages/ec/af/c6af60c4a99e68e2ba5f0026a9a655d828a8db86869ac5c171820de68523/pyenergy-0.1rc6-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "39234a59788edaf5e84c360a4ab87e8d", "sha256": "b7feb9ce092a7e6c7bbe24eb8a95836671df6e161bcf5cf127789ba18bd1c590"}, "downloads": -1, "filename": "pyenergy-0.1rc6.tar.gz", "has_sig": false, "md5_digest": "39234a59788edaf5e84c360a4ab87e8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26136, "upload_time": "2014-03-17T16:38:36", "upload_time_iso_8601": "2014-03-17T16:38:36.860705Z", "url": "https://files.pythonhosted.org/packages/c1/c7/66cc85e3fab80c80e3bfc9f17265cc8dfdfdca0e8acfa4d0dab89f5ef799/pyenergy-0.1rc6.tar.gz", "yanked": false}], "0.1rc7": [{"comment_text": "", "digests": {"md5": "e7b7e6106ace1e8749efb1431fc5dd7c", "sha256": "990b53b5e2d5be03933c88d72474e2ac0a10132e6b87a6d5b69e9d0f479f1a10"}, "downloads": -1, "filename": "pyenergy-0.1rc7-py2.7.egg", "has_sig": false, "md5_digest": "e7b7e6106ace1e8749efb1431fc5dd7c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 53430, "upload_time": "2014-03-19T11:08:38", "upload_time_iso_8601": "2014-03-19T11:08:38.296116Z", "url": "https://files.pythonhosted.org/packages/9c/dc/332b01c7b37b89fac90df9fa5db318a92e11c57fa72ddbb00dd2d3a8fec1/pyenergy-0.1rc7-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ae7652040ad94afd3e0f67e2030baef", "sha256": "aa2f42b62ddbad583229451e9b04028092f738dffcf7bbf6815ab17edfc4a2c6"}, "downloads": -1, "filename": "pyenergy-0.1rc7.tar.gz", "has_sig": false, "md5_digest": "6ae7652040ad94afd3e0f67e2030baef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26154, "upload_time": "2014-03-19T11:08:34", "upload_time_iso_8601": "2014-03-19T11:08:34.759069Z", "url": "https://files.pythonhosted.org/packages/c1/cf/dea87e7325c7fe5ce17743eb40959d2ef75f1f7b71603cea599028e7aede/pyenergy-0.1rc7.tar.gz", "yanked": false}], "0.1rc8": [{"comment_text": "", "digests": {"md5": "d09e496e8e8fd373771decabbacc9c9c", "sha256": "f78ea33e20a56585356623f87f22436b19dc3c9a7bc9ea01cd3526aa9fad3a5e"}, "downloads": -1, "filename": "pyenergy-0.1rc8-py2.7.egg", "has_sig": false, "md5_digest": "d09e496e8e8fd373771decabbacc9c9c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 53805, "upload_time": "2014-06-27T10:34:09", "upload_time_iso_8601": "2014-06-27T10:34:09.779024Z", "url": "https://files.pythonhosted.org/packages/a1/90/c69a528bdc7a3e55b6d8e337389a8e6dc199d72a2057132058767281b13a/pyenergy-0.1rc8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9bb88b90cc182e2136ee90db7574df4", "sha256": "ed00eabb98b4ef7310e2134f6ad6574f74a4fc1111c1fb24e8be18fb6dadf3a7"}, "downloads": -1, "filename": "pyenergy-0.1rc8.tar.gz", "has_sig": false, "md5_digest": "f9bb88b90cc182e2136ee90db7574df4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26388, "upload_time": "2014-06-27T10:34:12", "upload_time_iso_8601": "2014-06-27T10:34:12.863285Z", "url": "https://files.pythonhosted.org/packages/48/3a/c3849346601559c2f47af49dfb9e687a98a3d61e9524de3104c100a53a46/pyenergy-0.1rc8.tar.gz", "yanked": false}], "0.1rc9": [{"comment_text": "", "digests": {"md5": "ffaf1cc3b9e1e29cf9d00bcd9d822fab", "sha256": "c72e93331088236af335978d2f74c6a613bb38148b747b60a6ef192b26c4b50d"}, "downloads": -1, "filename": "pyenergy-0.1rc9-py2.7.egg", "has_sig": false, "md5_digest": "ffaf1cc3b9e1e29cf9d00bcd9d822fab", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 53963, "upload_time": "2014-11-04T13:39:07", "upload_time_iso_8601": "2014-11-04T13:39:07.675815Z", "url": "https://files.pythonhosted.org/packages/c9/60/5af4d181bdaf38831ec55293bd9bdaec79bf440c7d4c8ab858831fae9133/pyenergy-0.1rc9-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8c388117506e84cd2ef6c485fb13269", "sha256": "920d117d0ddafc408eb2aee503eb37dadce60c219e3c0cf5e7f163fd1621a7d0"}, "downloads": -1, "filename": "pyenergy-0.1rc9.tar.gz", "has_sig": false, "md5_digest": "a8c388117506e84cd2ef6c485fb13269", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26534, "upload_time": "2014-11-04T13:39:04", "upload_time_iso_8601": "2014-11-04T13:39:04.175278Z", "url": "https://files.pythonhosted.org/packages/df/ea/d71b1a8d23fcf34bbe97b4e698ab75cd3e15f396edf4a7f9ae1197325647/pyenergy-0.1rc9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "487e6dc764290cfa502b15576d246b16", "sha256": "808e3c862330b56dee4b4c4429958c075abbd0a2370c7f61b404d7d9254c424a"}, "downloads": -1, "filename": "pyenergy-0.1rc13-py2.7.egg", "has_sig": false, "md5_digest": "487e6dc764290cfa502b15576d246b16", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 59341, "upload_time": "2015-02-23T21:39:25", "upload_time_iso_8601": "2015-02-23T21:39:25.625290Z", "url": "https://files.pythonhosted.org/packages/ca/a4/82695ba5c38138a909ef7af79dde1db29c4fa036c6b5131f4baf1b8268f9/pyenergy-0.1rc13-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b63c87581cf870e8f3ab9ce43d9ea722", "sha256": "4a7e94c6eac1c298f6dcd97e4bf9d8643a0a8f65a733ab2e86204bcd47543b40"}, "downloads": -1, "filename": "pyenergy-0.1rc13.tar.gz", "has_sig": false, "md5_digest": "b63c87581cf870e8f3ab9ce43d9ea722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28527, "upload_time": "2015-02-23T21:39:22", "upload_time_iso_8601": "2015-02-23T21:39:22.998435Z", "url": "https://files.pythonhosted.org/packages/0d/94/5d254ac1cd75a194a4dcbb53c2e06f42c55cb7ae427e91f98e6e8571c8be/pyenergy-0.1rc13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:24 2020"}