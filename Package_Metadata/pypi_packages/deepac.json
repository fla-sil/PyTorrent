{"info": {"author": "Jakub Bartoszewicz", "author_email": "jakub.bartoszewicz@hpi.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "<!-- {#mainpage} -->\n\n# DeePaC\n\nDeePaC is a python package and a CLI tool for predicting labels (e.g. pathogenic potentials) from short DNA sequences (e.g. Illumina \nreads) with interpretable reverse-complement neural networks. For details, see our preprint on bioRxiv: \n<https://www.biorxiv.org/content/10.1101/535286v3> and the paper in *Bioinformatics*: <https://doi.org/10.1093/bioinformatics/btz541>.\nFor details regarding the interpretability functionalities of DeePaC, see the preprint here: <https://www.biorxiv.org/content/10.1101/2020.01.29.925354v2>\n\nDocumentation can be found here:\n<https://rki_bioinformatics.gitlab.io/DeePaC/>.\n\n## Plug-ins\n### DeePaC-strain\nBasic version of DeePaC comes with built-in models trained to predict pathogenic potentials of NGS reads originating from\nnovel *bacteral species*. If you want to predict pathogenicity of novel *strains* of *known* species, try the DeePaC-strain plugin available here:\n<https://gitlab.com/JakubBartoszewicz/DeePaC-strain>. \n\n### DeePaC-vir\nIf you want to detect novel human viruses, try the DeePaC-vir plugin: <https://gitlab.com/JakubBartoszewicz/DeePaC-vir>. \n\n### DeePaC-Live\nIf you want to run the predictions in real-time during an Illumina sequencing run, try DeePaC-Live: <https://gitlab.com/dacs-hpi/deepac-live>. \n\n\n## Installation\n\n### Recommended: set up an environment\n\nWe recomment setting up an isolated `conda` environment:\n```\nconda create -n my_env python=3.6\nconda activate my_env\n```\n\nor, alternatively, a `virtualenv`:\n```\nvirtualenv --system-site-packages my_env\nsource my_env/bin/activate\n```\n\n\n### With conda (recommended)\n [![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/deepac/README.html)\n\nYou can install DeePaC with `bioconda`. Set up the [bioconda channel](\n<https://bioconda.github.io/user/install.html#set-up-channels>) first, and then:\n```\nconda install deepac\n```\n\nIf you want to install the plugins as well, use:\n\n```\nconda install deepacvir deepacstrain\n```\n\n### With pip\n\nYou can also install DeePaC with `pip`:\n```\npip install deepac\n```\nNote: TensorFlow 2.0 is not yet supported.\n\nIf you want to install the plugins, use:\n\n```\npip install deepacvir deepacstrain\n```\n\n### GPU support\n\nTo use GPUs, you need to install the GPU version of TensorFlow. In conda, install tensorflow-gpu before deepac:\n```\nconda remove tensorflow\nconda install tensorflow-gpu\nconda install deepac\n```\n\nIf you're using `pip`, you need to install CUDA and CuDNN first (see TensorFlow installation guide for details). Then\nyou can do the same as above:\n```\npip uninstall tensorflow\npip install tensorflow-gpu\n```\n\n### Optional: run tests\nOptionally, you can run explicit tests of your installation. Note that it may take some time on a CPU.\n```\n# Run standard tests\ndeepac test\n# Run quick tests (eg. on CPUs)\ndeepac test -q\n# Test using a GPU\ndeepac test -g 1\n# Test explainability and gwpa workflows\ndeepac test -xp\n# Full tests\ndeepac test -a -g 1\n# Full quick tests (eg. on GPUs with limited memory)\ndeepac test -aq -g 1\n```\n\n### Help\n\nTo see help, just use\n```\ndeepac --help\ndeepac predict --help\ndeepac train --help\n# Etc.\n```\n\n## Basic use: prediction\n\nYou can predict pathogenic potentials with one of the built-in models out of the box:\n```\n# A rapid CNN (trained on IMG/M data)\ndeepac predict -r input.fasta\n# A sensitive LSTM (trained on IMG/M data)\ndeepac predict -s input.fasta\n# With GPU support\ndeepac predict -s -g 1 input.fasta\n```\n\nThe rapid and the sensitive models are trained to predict pathogenic potentials of novel bacterial species.\nFor details, see <https://doi.org/10.1093/bioinformatics/btz541> or <https://www.biorxiv.org/content/10.1101/535286v3>.\n\nTo quickly filter your data according to predicted pathogenic potentials, you can use:\n```\ndeepac predict -r input.fasta\ndeepac filter input.fasta input_predictions.npy -t 0.5\n```\nNote that after running `predict`, you can use the `input_predictions.npy` to filter your fasta file with different\nthresholds. You can also add pathogenic potentials to the fasta headers in the output files:\n```\ndeepac filter input.fasta input_predictions.npy -t 0.75 -p -o output-75.fasta\ndeepac filter input.fasta input_predictions.npy -t 0.9 -p -o output-90.fasta\n```\n\n## Advanced use\n### Config templates\nTo get the config templates in the current working directory, simply use:\n```\ndeepac templates\n```\n### Preprocessing\n\nFor more complex analyzes, it can be useful to preprocess the fasta files by converting them to binary numpy arrays. Use:\n```\ndeepac preproc preproc_config.ini\n```\nSee the `config_templates` directory of the GitLab repository (https://gitlab.com/rki_bioinformatics/DeePaC/) for a sample configuration file.\n\n### Training\nYou can use the built-in architectures to train a new model:\n```\ndeepac train -r -g 1 -T train_data.npy -t train_labels.npy -V val_data.npy -v val_labels.npy\ndeepac train -s -g 1 -T train_data.npy -t train_labels.npy -V val_data.npy -v val_labels.npy\n\n```\n\nTo train a new model based on you custom configuration, use\n```\ndeepac train -c nn_train_config.ini\n```\n\nIf you train an LSTM on a GPU, a CUDNNLSTM implementation will be used. To convert the resulting model to be \nCPU-compatible, use `deepac convert`. You can also use it to save the weights of a model, or recompile a model \nfrom a set of weights to use it with a different Python binary.\n\n### Evaluation\n\nTo evaluate a trained model, use\n```\n# Read-by-read performance\ndeepac eval -r eval_config.ini\n# Species-by-species performance\ndeepac eval -s eval_species_config.ini\n# Ensemble performance\ndeepac eval -e eval_ens_config.ini\n```\nSee the configs directory for sample configuration files. Note that `deepac eval -s` requires precomputed predictions \nand a csv file with a number of DNA reads for each species in each of the classes.\n\n## Intepretability workflows\n### Filter visualization\nTo find the most relevant filters and visualize them, use the following minimum workflow: \n```\n# Calculate filter and nucleotide contibutions (partial Shapley values) for the first convolutional layer\n# using mean-centered weight matrices and \"easy\" calculation mode\ndeepac explain fcontribs -m model.h5 -eb -t test_data.npy -N test_nonpatho.fasta -P test_patho.fasta -o fcontribs \n\n# Create filter ranking\ndeepac explain franking -f fcontribs/filter_scores -y test_labels.npy -p test_predictions.npy -o franking\n\n# Prepare transfac files for filter visualization (weighted by filter contribution)\ndeepac explain fa2transfac -i fcontribs/fasta -o fcnotribs/transfac -w -d fcontribs/filter_scores\n\n# Visualize nucleotide contribution sequence logos\ndeepac explain xlogos -f fcontribs/fasta -s fcontribs/filter_scores -l fcnotribs/transfac -t train_data.npy -o xlogos\n```\nYou can browse through other supplementary functionalities and parameters by checking the help:\n```\ndeepac explain -h\ndeepac explain fcontribs -h\ndeepac explain xlogos -h\n# etc.\n```\n\n### Genome-wide phenotype potential analysis (GWPA)\nTo find interesting regions of a whole genome, use this workflow to generate nucleotide-resolution maps of\npredicted phenotype potentials and nucleotide contributions:\n```\n# Fragment the genomes into pseudoreads\ndeepac gwpa fragment -g genomes_fasta -o fragmented_genomes\n\n# Predict the pathogenic potential of each pseudoread\ndeepac predict -r -a fragmented_genomes/sample1_fragmented_genomes.npy -o predictions/sample1_pred.npy\n\n# Create bedgraphs of mean pathogenic potential at each position of the genome\n# Can be visualized in IGV\ndeepac gwpa genomemap -f fragmented_genomes -p predictions -g genomes_genome -o bedgraph\n\n# Rank genes by mean pathogenic potential\ndeepac gwpa granking -p bedgraph -g genomes_gff -o granking\n\n# Create bedgraphs of mean nuclotide contribution at each position of the genome\n# Can be visualized in IGV\ndeepac gwpa ntcontribs -m model.h5 -f fragmented_genomes -g genomes_genome -o bedgraph_nt\n```\nYou can browse through other supplementary functionalities and parameters by checking the help:\n```\ndeepac gwpa -h\ndeepac gwpa genomemap -h\ndeepac gwpa ntcontribs -h\n# etc.\n```\n### Filter enrichment analysis\nFinally, you can check for filter enrichment in annotated genes or other genomic features:\n```\n# Get filter activations, genome-wide\ndeepac gwpa factiv -m model.h5 -t fragmented_genomes/sample1_fragmented_genomes.npy -f fragmented_genomes/sample1_fragmented_genomes.fasta -o factiv\n\n# Check for enrichment within annotated genomic features\ndeepac gwpa fenrichment -i factiv -g genomes_gff/sample1.gff -o fenrichment\n```\n## Supplementary data and scripts\nDatasets are available here: <https://doi.org/10.5281/zenodo.3678562> (bacteria) and here: <https://doi.org/10.5281/zenodo.3630803> (viruses).\nIn the supplement_paper directory you can find the R scripts and data files used in the papers for dataset preprocessing and benchmarking.\n\n## Cite us\nIf you find DeePaC useful, please cite:\n\n```\n@article{10.1093/bioinformatics/btz541,\n    author = {Bartoszewicz, Jakub M and Seidel, Anja and Rentzsch, Robert and Renard, Bernhard Y},\n    title = \"{DeePaC: predicting pathogenic potential of novel DNA with reverse-complement neural networks}\",\n    journal = {Bioinformatics},\n    year = {2019},\n    month = {07},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btz541},\n    url = {https://doi.org/10.1093/bioinformatics/btz541},\n    eprint = {http://oup.prod.sis.lan/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btz541/28971344/btz541.pdf},\n}\n\n@article {Bartoszewicz2020.01.29.925354,\n    author = {Bartoszewicz, Jakub M. and Seidel, Anja and Renard, Bernhard Y.},\n    title = {Interpretable detection of novel human viruses from genome sequencing data},\n    elocation-id = {2020.01.29.925354},\n    year = {2020},\n    doi = {10.1101/2020.01.29.925354},\n    publisher = {Cold Spring Harbor Laboratory},\n    URL = {https://www.biorxiv.org/content/early/2020/02/01/2020.01.29.925354},\n    eprint = {https://www.biorxiv.org/content/early/2020/02/01/2020.01.29.925354.full.pdf},\n    journal = {bioRxiv}\n}\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/rki_bioinformatics/DeePaC", "keywords": "deep learning DNA sequencing synthetic biology pathogenicity prediction", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "deepac", "package_url": "https://pypi.org/project/deepac/", "platform": "", "project_url": "https://pypi.org/project/deepac/", "project_urls": {"Homepage": "https://gitlab.com/rki_bioinformatics/DeePaC"}, "release_url": "https://pypi.org/project/deepac/0.11.0/", "requires_dist": ["tensorflow (>=2.1)", "biopython (>=1.76)", "scikit-learn (>=0.22.1)", "matplotlib (>=3.1.3)", "numpy (>=1.18.1)", "h5py (>=2.10)", "psutil (>=5.6.7)", "pandas (>=1.0.3)", "shap (>=0.35)", "weblogo (>=3.7)", "pybedtools (>=0.8.1)", "statsmodels (>=0.11.0)"], "requires_python": ">=3", "summary": "Predicting pathogenic potentials of novel DNA with reverse-complement neural networks.", "version": "0.11.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DeePaC</h1>\n<p>DeePaC is a python package and a CLI tool for predicting labels (e.g. pathogenic potentials) from short DNA sequences (e.g. Illumina\nreads) with interpretable reverse-complement neural networks. For details, see our preprint on bioRxiv:\n<a href=\"https://www.biorxiv.org/content/10.1101/535286v3\" rel=\"nofollow\">https://www.biorxiv.org/content/10.1101/535286v3</a> and the paper in <em>Bioinformatics</em>: <a href=\"https://doi.org/10.1093/bioinformatics/btz541\" rel=\"nofollow\">https://doi.org/10.1093/bioinformatics/btz541</a>.\nFor details regarding the interpretability functionalities of DeePaC, see the preprint here: <a href=\"https://www.biorxiv.org/content/10.1101/2020.01.29.925354v2\" rel=\"nofollow\">https://www.biorxiv.org/content/10.1101/2020.01.29.925354v2</a></p>\n<p>Documentation can be found here:\n<a href=\"https://rki_bioinformatics.gitlab.io/DeePaC/\" rel=\"nofollow\">https://rki_bioinformatics.gitlab.io/DeePaC/</a>.</p>\n<h2>Plug-ins</h2>\n<h3>DeePaC-strain</h3>\n<p>Basic version of DeePaC comes with built-in models trained to predict pathogenic potentials of NGS reads originating from\nnovel <em>bacteral species</em>. If you want to predict pathogenicity of novel <em>strains</em> of <em>known</em> species, try the DeePaC-strain plugin available here:\n<a href=\"https://gitlab.com/JakubBartoszewicz/DeePaC-strain\" rel=\"nofollow\">https://gitlab.com/JakubBartoszewicz/DeePaC-strain</a>.</p>\n<h3>DeePaC-vir</h3>\n<p>If you want to detect novel human viruses, try the DeePaC-vir plugin: <a href=\"https://gitlab.com/JakubBartoszewicz/DeePaC-vir\" rel=\"nofollow\">https://gitlab.com/JakubBartoszewicz/DeePaC-vir</a>.</p>\n<h3>DeePaC-Live</h3>\n<p>If you want to run the predictions in real-time during an Illumina sequencing run, try DeePaC-Live: <a href=\"https://gitlab.com/dacs-hpi/deepac-live\" rel=\"nofollow\">https://gitlab.com/dacs-hpi/deepac-live</a>.</p>\n<h2>Installation</h2>\n<h3>Recommended: set up an environment</h3>\n<p>We recomment setting up an isolated <code>conda</code> environment:</p>\n<pre><code>conda create -n my_env python=3.6\nconda activate my_env\n</code></pre>\n<p>or, alternatively, a <code>virtualenv</code>:</p>\n<pre><code>virtualenv --system-site-packages my_env\nsource my_env/bin/activate\n</code></pre>\n<h3>With conda (recommended)</h3>\n<p><a href=\"http://bioconda.github.io/recipes/deepac/README.html\" rel=\"nofollow\"><img alt=\"install with bioconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2a44da80a9758d4c89782dd239134b2611cce03/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f7374796c653d666c6174\"></a></p>\n<p>You can install DeePaC with <code>bioconda</code>. Set up the <a href=\"https://bioconda.github.io/user/install.html#set-up-channels\" rel=\"nofollow\">bioconda channel</a> first, and then:</p>\n<pre><code>conda install deepac\n</code></pre>\n<p>If you want to install the plugins as well, use:</p>\n<pre><code>conda install deepacvir deepacstrain\n</code></pre>\n<h3>With pip</h3>\n<p>You can also install DeePaC with <code>pip</code>:</p>\n<pre><code>pip install deepac\n</code></pre>\n<p>Note: TensorFlow 2.0 is not yet supported.</p>\n<p>If you want to install the plugins, use:</p>\n<pre><code>pip install deepacvir deepacstrain\n</code></pre>\n<h3>GPU support</h3>\n<p>To use GPUs, you need to install the GPU version of TensorFlow. In conda, install tensorflow-gpu before deepac:</p>\n<pre><code>conda remove tensorflow\nconda install tensorflow-gpu\nconda install deepac\n</code></pre>\n<p>If you're using <code>pip</code>, you need to install CUDA and CuDNN first (see TensorFlow installation guide for details). Then\nyou can do the same as above:</p>\n<pre><code>pip uninstall tensorflow\npip install tensorflow-gpu\n</code></pre>\n<h3>Optional: run tests</h3>\n<p>Optionally, you can run explicit tests of your installation. Note that it may take some time on a CPU.</p>\n<pre><code># Run standard tests\ndeepac test\n# Run quick tests (eg. on CPUs)\ndeepac test -q\n# Test using a GPU\ndeepac test -g 1\n# Test explainability and gwpa workflows\ndeepac test -xp\n# Full tests\ndeepac test -a -g 1\n# Full quick tests (eg. on GPUs with limited memory)\ndeepac test -aq -g 1\n</code></pre>\n<h3>Help</h3>\n<p>To see help, just use</p>\n<pre><code>deepac --help\ndeepac predict --help\ndeepac train --help\n# Etc.\n</code></pre>\n<h2>Basic use: prediction</h2>\n<p>You can predict pathogenic potentials with one of the built-in models out of the box:</p>\n<pre><code># A rapid CNN (trained on IMG/M data)\ndeepac predict -r input.fasta\n# A sensitive LSTM (trained on IMG/M data)\ndeepac predict -s input.fasta\n# With GPU support\ndeepac predict -s -g 1 input.fasta\n</code></pre>\n<p>The rapid and the sensitive models are trained to predict pathogenic potentials of novel bacterial species.\nFor details, see <a href=\"https://doi.org/10.1093/bioinformatics/btz541\" rel=\"nofollow\">https://doi.org/10.1093/bioinformatics/btz541</a> or <a href=\"https://www.biorxiv.org/content/10.1101/535286v3\" rel=\"nofollow\">https://www.biorxiv.org/content/10.1101/535286v3</a>.</p>\n<p>To quickly filter your data according to predicted pathogenic potentials, you can use:</p>\n<pre><code>deepac predict -r input.fasta\ndeepac filter input.fasta input_predictions.npy -t 0.5\n</code></pre>\n<p>Note that after running <code>predict</code>, you can use the <code>input_predictions.npy</code> to filter your fasta file with different\nthresholds. You can also add pathogenic potentials to the fasta headers in the output files:</p>\n<pre><code>deepac filter input.fasta input_predictions.npy -t 0.75 -p -o output-75.fasta\ndeepac filter input.fasta input_predictions.npy -t 0.9 -p -o output-90.fasta\n</code></pre>\n<h2>Advanced use</h2>\n<h3>Config templates</h3>\n<p>To get the config templates in the current working directory, simply use:</p>\n<pre><code>deepac templates\n</code></pre>\n<h3>Preprocessing</h3>\n<p>For more complex analyzes, it can be useful to preprocess the fasta files by converting them to binary numpy arrays. Use:</p>\n<pre><code>deepac preproc preproc_config.ini\n</code></pre>\n<p>See the <code>config_templates</code> directory of the GitLab repository (<a href=\"https://gitlab.com/rki_bioinformatics/DeePaC/\" rel=\"nofollow\">https://gitlab.com/rki_bioinformatics/DeePaC/</a>) for a sample configuration file.</p>\n<h3>Training</h3>\n<p>You can use the built-in architectures to train a new model:</p>\n<pre><code>deepac train -r -g 1 -T train_data.npy -t train_labels.npy -V val_data.npy -v val_labels.npy\ndeepac train -s -g 1 -T train_data.npy -t train_labels.npy -V val_data.npy -v val_labels.npy\n\n</code></pre>\n<p>To train a new model based on you custom configuration, use</p>\n<pre><code>deepac train -c nn_train_config.ini\n</code></pre>\n<p>If you train an LSTM on a GPU, a CUDNNLSTM implementation will be used. To convert the resulting model to be\nCPU-compatible, use <code>deepac convert</code>. You can also use it to save the weights of a model, or recompile a model\nfrom a set of weights to use it with a different Python binary.</p>\n<h3>Evaluation</h3>\n<p>To evaluate a trained model, use</p>\n<pre><code># Read-by-read performance\ndeepac eval -r eval_config.ini\n# Species-by-species performance\ndeepac eval -s eval_species_config.ini\n# Ensemble performance\ndeepac eval -e eval_ens_config.ini\n</code></pre>\n<p>See the configs directory for sample configuration files. Note that <code>deepac eval -s</code> requires precomputed predictions\nand a csv file with a number of DNA reads for each species in each of the classes.</p>\n<h2>Intepretability workflows</h2>\n<h3>Filter visualization</h3>\n<p>To find the most relevant filters and visualize them, use the following minimum workflow:</p>\n<pre><code># Calculate filter and nucleotide contibutions (partial Shapley values) for the first convolutional layer\n# using mean-centered weight matrices and \"easy\" calculation mode\ndeepac explain fcontribs -m model.h5 -eb -t test_data.npy -N test_nonpatho.fasta -P test_patho.fasta -o fcontribs \n\n# Create filter ranking\ndeepac explain franking -f fcontribs/filter_scores -y test_labels.npy -p test_predictions.npy -o franking\n\n# Prepare transfac files for filter visualization (weighted by filter contribution)\ndeepac explain fa2transfac -i fcontribs/fasta -o fcnotribs/transfac -w -d fcontribs/filter_scores\n\n# Visualize nucleotide contribution sequence logos\ndeepac explain xlogos -f fcontribs/fasta -s fcontribs/filter_scores -l fcnotribs/transfac -t train_data.npy -o xlogos\n</code></pre>\n<p>You can browse through other supplementary functionalities and parameters by checking the help:</p>\n<pre><code>deepac explain -h\ndeepac explain fcontribs -h\ndeepac explain xlogos -h\n# etc.\n</code></pre>\n<h3>Genome-wide phenotype potential analysis (GWPA)</h3>\n<p>To find interesting regions of a whole genome, use this workflow to generate nucleotide-resolution maps of\npredicted phenotype potentials and nucleotide contributions:</p>\n<pre><code># Fragment the genomes into pseudoreads\ndeepac gwpa fragment -g genomes_fasta -o fragmented_genomes\n\n# Predict the pathogenic potential of each pseudoread\ndeepac predict -r -a fragmented_genomes/sample1_fragmented_genomes.npy -o predictions/sample1_pred.npy\n\n# Create bedgraphs of mean pathogenic potential at each position of the genome\n# Can be visualized in IGV\ndeepac gwpa genomemap -f fragmented_genomes -p predictions -g genomes_genome -o bedgraph\n\n# Rank genes by mean pathogenic potential\ndeepac gwpa granking -p bedgraph -g genomes_gff -o granking\n\n# Create bedgraphs of mean nuclotide contribution at each position of the genome\n# Can be visualized in IGV\ndeepac gwpa ntcontribs -m model.h5 -f fragmented_genomes -g genomes_genome -o bedgraph_nt\n</code></pre>\n<p>You can browse through other supplementary functionalities and parameters by checking the help:</p>\n<pre><code>deepac gwpa -h\ndeepac gwpa genomemap -h\ndeepac gwpa ntcontribs -h\n# etc.\n</code></pre>\n<h3>Filter enrichment analysis</h3>\n<p>Finally, you can check for filter enrichment in annotated genes or other genomic features:</p>\n<pre><code># Get filter activations, genome-wide\ndeepac gwpa factiv -m model.h5 -t fragmented_genomes/sample1_fragmented_genomes.npy -f fragmented_genomes/sample1_fragmented_genomes.fasta -o factiv\n\n# Check for enrichment within annotated genomic features\ndeepac gwpa fenrichment -i factiv -g genomes_gff/sample1.gff -o fenrichment\n</code></pre>\n<h2>Supplementary data and scripts</h2>\n<p>Datasets are available here: <a href=\"https://doi.org/10.5281/zenodo.3678562\" rel=\"nofollow\">https://doi.org/10.5281/zenodo.3678562</a> (bacteria) and here: <a href=\"https://doi.org/10.5281/zenodo.3630803\" rel=\"nofollow\">https://doi.org/10.5281/zenodo.3630803</a> (viruses).\nIn the supplement_paper directory you can find the R scripts and data files used in the papers for dataset preprocessing and benchmarking.</p>\n<h2>Cite us</h2>\n<p>If you find DeePaC useful, please cite:</p>\n<pre><code>@article{10.1093/bioinformatics/btz541,\n    author = {Bartoszewicz, Jakub M and Seidel, Anja and Rentzsch, Robert and Renard, Bernhard Y},\n    title = \"{DeePaC: predicting pathogenic potential of novel DNA with reverse-complement neural networks}\",\n    journal = {Bioinformatics},\n    year = {2019},\n    month = {07},\n    issn = {1367-4803},\n    doi = {10.1093/bioinformatics/btz541},\n    url = {https://doi.org/10.1093/bioinformatics/btz541},\n    eprint = {http://oup.prod.sis.lan/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btz541/28971344/btz541.pdf},\n}\n\n@article {Bartoszewicz2020.01.29.925354,\n    author = {Bartoszewicz, Jakub M. and Seidel, Anja and Renard, Bernhard Y.},\n    title = {Interpretable detection of novel human viruses from genome sequencing data},\n    elocation-id = {2020.01.29.925354},\n    year = {2020},\n    doi = {10.1101/2020.01.29.925354},\n    publisher = {Cold Spring Harbor Laboratory},\n    URL = {https://www.biorxiv.org/content/early/2020/02/01/2020.01.29.925354},\n    eprint = {https://www.biorxiv.org/content/early/2020/02/01/2020.01.29.925354.full.pdf},\n    journal = {bioRxiv}\n}\n\n</code></pre>\n\n          </div>"}, "last_serial": 7173235, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "5ce261a0c8e3d2ccf5586bfc14a951e1", "sha256": "2fd50ad38caf9104421918bd6f17907867fb40c3044b383ed23d7b527227a25a"}, "downloads": -1, "filename": "deepac-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5ce261a0c8e3d2ccf5586bfc14a951e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34795192, "upload_time": "2020-02-19T16:51:19", "upload_time_iso_8601": "2020-02-19T16:51:19.742043Z", "url": "https://files.pythonhosted.org/packages/ff/80/e0d71abd09e614944191f409cf6558e32205434ee7876290bce244afc9e3/deepac-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a26386e36816b3553582e04f4a84b3f0", "sha256": "a82c131a69add4f90048e4cc32f80b133f910458fd21c8430c9fd6d70b0cb36a"}, "downloads": -1, "filename": "deepac-0.10.0.tar.gz", "has_sig": false, "md5_digest": "a26386e36816b3553582e04f4a84b3f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34779406, "upload_time": "2020-02-19T16:51:26", "upload_time_iso_8601": "2020-02-19T16:51:26.333678Z", "url": "https://files.pythonhosted.org/packages/f2/76/453840fceada09b56821277ee9daf568a3b5518f5518c39dcc46e36a3884/deepac-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "c42bab529a7f063f5b1edded9cf227f4", "sha256": "699b6ee3a21bdf0a7c427623f16406101f5cb40fc4356bf14bfdaa8edce66ab4"}, "downloads": -1, "filename": "deepac-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c42bab529a7f063f5b1edded9cf227f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34795271, "upload_time": "2020-02-20T20:39:50", "upload_time_iso_8601": "2020-02-20T20:39:50.123949Z", "url": "https://files.pythonhosted.org/packages/c2/d1/9313c524bd483fba9bd83c235c1c8b08eed42235048d0ce1d3d2842a1d87/deepac-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4d0c245aeb9d8100020602a6c577cab", "sha256": "d186521b526fc92fc3f7670184812daed59ab33613b16d28a2530f75b20ce867"}, "downloads": -1, "filename": "deepac-0.10.1.tar.gz", "has_sig": false, "md5_digest": "a4d0c245aeb9d8100020602a6c577cab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34779511, "upload_time": "2020-02-20T20:41:17", "upload_time_iso_8601": "2020-02-20T20:41:17.679784Z", "url": "https://files.pythonhosted.org/packages/56/7c/894465a8b6eb0e2c4a456564671b6fbe99b418e299a4ed4d215f64356ef7/deepac-0.10.1.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "59034d80ee2653ab5c55e277ab1f6871", "sha256": "34c0eeefe0adf4293bd360b50793202193c7fa6dec972d19258ae52710a103b7"}, "downloads": -1, "filename": "deepac-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59034d80ee2653ab5c55e277ab1f6871", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34802113, "upload_time": "2020-05-05T16:28:55", "upload_time_iso_8601": "2020-05-05T16:28:55.614216Z", "url": "https://files.pythonhosted.org/packages/95/08/9d70d59b1429395bff5306326e3094e78619e479cdb258b1a8185446711f/deepac-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b6147364893dcd0fbcce104cf89b8f8", "sha256": "0c136b04f4abd12ac0af0a2b3ff9b56b4408eeda0b4b8086f7fc3fd211c39467"}, "downloads": -1, "filename": "deepac-0.11.0.tar.gz", "has_sig": false, "md5_digest": "3b6147364893dcd0fbcce104cf89b8f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34784221, "upload_time": "2020-05-05T16:29:43", "upload_time_iso_8601": "2020-05-05T16:29:43.168127Z", "url": "https://files.pythonhosted.org/packages/b8/ec/7558d32541af26658ed3bfbbdd51f461afeba6c2eb7fcf9ac1527aea3025/deepac-0.11.0.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "ab08bb1a2619b4045f3fd88d95a35775", "sha256": "02aae2a5acc16449f0e38835ff47eb790507b0a1a5daf12a0cf1e1db26070744"}, "downloads": -1, "filename": "deepac-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "ab08bb1a2619b4045f3fd88d95a35775", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34749201, "upload_time": "2019-04-03T08:52:55", "upload_time_iso_8601": "2019-04-03T08:52:55.016895Z", "url": "https://files.pythonhosted.org/packages/2c/c3/cacfedc55f3c53d9ee441f1e8f38563da8f9fe338705d47a3edf49c11de4/deepac-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe077056d05e6625bab023e6d097da9f", "sha256": "32d637e734a680f6ee1d18dbccdf30ef48c37afe21f224f65734b0ac91db5be7"}, "downloads": -1, "filename": "deepac-0.9.tar.gz", "has_sig": false, "md5_digest": "fe077056d05e6625bab023e6d097da9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34744763, "upload_time": "2019-04-03T08:53:39", "upload_time_iso_8601": "2019-04-03T08:53:39.432626Z", "url": "https://files.pythonhosted.org/packages/4c/8b/2518639c2278de7ea88f51cdc045fc7f14bdf9802298ed5b1d362db25e36/deepac-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "41facb6a517f92243732d95443ce60fe", "sha256": "b1d502a4e52c5388cc4b4a35e98b2a44681e3e683d18f870c3b9bd3d784a5129"}, "downloads": -1, "filename": "deepac-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "41facb6a517f92243732d95443ce60fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34749823, "upload_time": "2019-04-11T22:47:35", "upload_time_iso_8601": "2019-04-11T22:47:35.064963Z", "url": "https://files.pythonhosted.org/packages/33/38/090b7be1f7741b0e0168fce96a828a0b3eacbff92d070ad3358f3d83af72/deepac-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "736b6037a65c3914c82095f3f7f1b9f2", "sha256": "dc6976b26bb46d8b1f725ab1202e3862ea405d3c664df4cc3a487d4f66d6cdd8"}, "downloads": -1, "filename": "deepac-0.9.1.tar.gz", "has_sig": false, "md5_digest": "736b6037a65c3914c82095f3f7f1b9f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34745696, "upload_time": "2019-04-11T22:48:22", "upload_time_iso_8601": "2019-04-11T22:48:22.965482Z", "url": "https://files.pythonhosted.org/packages/1b/a3/846d8f6c77beabf246642cbb6bbf370dc785529f810fe82c9e19b779c488/deepac-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "0f56dfce87628d4a94205204b2fc9212", "sha256": "02293b8cc7af5728743857b491ccff3fc134a72614c9faa9c1f8a8b917f788d4"}, "downloads": -1, "filename": "deepac-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0f56dfce87628d4a94205204b2fc9212", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34750286, "upload_time": "2019-04-15T20:05:12", "upload_time_iso_8601": "2019-04-15T20:05:12.879286Z", "url": "https://files.pythonhosted.org/packages/6f/e4/49759ae0d3ad9c2efbd92d6ff847eb807965d9d638bca7d464ca0c768fd2/deepac-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3f94396d6c7593ccc2a9215d101a8ec", "sha256": "eaf429fa5e94c2bd38e465752acd5bd4730df2772316ab08a020dbb500a985ae"}, "downloads": -1, "filename": "deepac-0.9.2.tar.gz", "has_sig": false, "md5_digest": "b3f94396d6c7593ccc2a9215d101a8ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34746416, "upload_time": "2019-04-15T20:05:55", "upload_time_iso_8601": "2019-04-15T20:05:55.319874Z", "url": "https://files.pythonhosted.org/packages/23/01/0f8412077944bf2df700a0f8611aa2306ca0305b87e98709bf2d9a058644/deepac-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "0875d7946e909980496ee272b952b521", "sha256": "0d8f419738ecddca0ffe211e17fa16c17a69f1e0d00b4738fd7444f728256ffc"}, "downloads": -1, "filename": "deepac-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0875d7946e909980496ee272b952b521", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34756447, "upload_time": "2019-05-13T13:22:00", "upload_time_iso_8601": "2019-05-13T13:22:00.734919Z", "url": "https://files.pythonhosted.org/packages/a9/05/1bd8d43ac2f4ed8bfb8e5b4b71d0f40ed85790c582c27f833344178b8642/deepac-0.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d8c1a01e25f1f950ed43685a9348767", "sha256": "c65a5135d58e90ee50d2843b8bc0bba66116e629482afe73eac437a8a1d9a3e9"}, "downloads": -1, "filename": "deepac-0.9.3.tar.gz", "has_sig": false, "md5_digest": "9d8c1a01e25f1f950ed43685a9348767", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34750594, "upload_time": "2019-05-13T13:22:50", "upload_time_iso_8601": "2019-05-13T13:22:50.073284Z", "url": "https://files.pythonhosted.org/packages/0e/ca/2c50cf3d8130c22370323af021964333bc21997c950d417f250667f8934e/deepac-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "59034d80ee2653ab5c55e277ab1f6871", "sha256": "34c0eeefe0adf4293bd360b50793202193c7fa6dec972d19258ae52710a103b7"}, "downloads": -1, "filename": "deepac-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59034d80ee2653ab5c55e277ab1f6871", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34802113, "upload_time": "2020-05-05T16:28:55", "upload_time_iso_8601": "2020-05-05T16:28:55.614216Z", "url": "https://files.pythonhosted.org/packages/95/08/9d70d59b1429395bff5306326e3094e78619e479cdb258b1a8185446711f/deepac-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b6147364893dcd0fbcce104cf89b8f8", "sha256": "0c136b04f4abd12ac0af0a2b3ff9b56b4408eeda0b4b8086f7fc3fd211c39467"}, "downloads": -1, "filename": "deepac-0.11.0.tar.gz", "has_sig": false, "md5_digest": "3b6147364893dcd0fbcce104cf89b8f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34784221, "upload_time": "2020-05-05T16:29:43", "upload_time_iso_8601": "2020-05-05T16:29:43.168127Z", "url": "https://files.pythonhosted.org/packages/b8/ec/7558d32541af26658ed3bfbbdd51f461afeba6c2eb7fcf9ac1527aea3025/deepac-0.11.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:30 2020"}