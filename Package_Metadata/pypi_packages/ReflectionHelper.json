{"info": {"author": "Qkrisi", "author_email": "qruczkristof@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Reflection Helper - Python\n==========================\n\nA module that makes reflection easier in Python, based on the C#\nSystem.Reflection library\n\nInstallation\n------------\n\nUse ``pip3 install ReflectionHelper`` to install the module.\n(Python3.7+)\n\nUsage\n-----\n\nImport the module using\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n| The module adds 4 new functions to the ``type`` class.\n| -``GetField``\n| -``GetFields``\n| -``GetMethod``\n| -``GetMethods``\n\nClasses\n-------\n\nMemberInfo\n~~~~~~~~~~\n\nA parent class storing the datas of the reflected values\n\nFieldInfo\n~~~~~~~~~\n\nIherits ``MemberInfo``\n\nA class storing the reflected field\n\nMethods\n~~~~~~~\n\n| **GetValue**\n| Gets the value of the field\n\nReturns: ``object``\n\n+-------------+------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-----------------+\n| Parameter   | Type                                                             | Description                                                                                                            | Default value   |\n+=============+==================================================================+========================================================================================================================+=================+\n| cl          | The type of the class the field was reflected from or ``None``   | An instance of the class if the field is private; ``None``, instance or the type of the class if the field is static   | -               |\n+-------------+------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-----------------+\n\n| **SetValue**\n| Sets the value of the field\n\n+-------------+------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-----------------+\n| Parameter   | Type                                                             | Description                                                                                                            | Default value   |\n+=============+==================================================================+========================================================================================================================+=================+\n| cl          | The type of the class the field was reflected from or ``None``   | An instance of the class if the field is private; ``None``, instance or the type of the class if the field is static   | -               |\n+-------------+------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-----------------+\n| value       | ``object``                                                       | Sets the value of the field in the type to ``value``                                                                   | -               |\n+-------------+------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-----------------+\n\nVariables\n~~~~~~~~~\n\n+------------+-----------+-------------------------+\n| Variable   | Type      | Description             |\n+============+===========+=========================+\n| Name       | ``str``   | The name of the field   |\n+------------+-----------+-------------------------+\n\nMethodInfo\n~~~~~~~~~~\n\nInherits ``MemberInfo``\n\nA class storing the reflected method\n\nMethods\n~~~~~~~\n\n**Invoke**\n\nRuns the method and returns its result (or ``None`` if it doesn't have\na result)\n\nReturns: ``object``\n\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n| Parameter   | Type                                                              | Description                                                                                                             | Default value   |\n+=============+===================================================================+=========================================================================================================================+=================+\n| cl          | The type of the class the method was reflected from or ``None``   | An instance of the class if the method is private; ``None``, instance or the type of the class if the field is static   | -               |\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n| arr         | List of ``object``                                                | The parameters to call the method with (see example below)                                                              | -               |\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n\n**InvokeAsync**\n\nAsyncronous\n\nAwaits the method and returns its result (or ``None`` if it doesn't\nhave a result)\n\nReturns ``object``\n\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n| Parameter   | Type                                                              | Description                                                                                                             | Default value   |\n+=============+===================================================================+=========================================================================================================================+=================+\n| cl          | The type of the class the method was reflected from or ``None``   | An instance of the class if the method is private; ``None``, instance or the type of the class if the field is static   | -               |\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n| arr         | List of ``object``                                                | The parameters to call the method with (see example below)                                                              | -               |\n+-------------+-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------+-----------------+\n\n**GetParameters**\n\nGets the parameters of the reflected method.\n\nReturns: List of ``ParameterInfo``\n\n+--------------+------------+--------------------------------------------------------------------------+-----------------+\n| Parameter    | Type       | Description                                                              | Default value   |\n+==============+============+==========================================================================+=================+\n| enableSelf   | ``bool``   | If it's true, the ``self`` parameter will be returned too (if present)   | False           |\n+--------------+------------+--------------------------------------------------------------------------+-----------------+\n\nVariables\n~~~~~~~~~\n\n+--------------+------------+------------------------------------------------------+\n| Variable     | Type       | Description                                          |\n+==============+============+======================================================+\n| Name         | ``str``    | The name of the method                               |\n+--------------+------------+------------------------------------------------------+\n| ReturnType   | ``type``   | The type of the returned value                       |\n+--------------+------------+------------------------------------------------------+\n| IsStatic     | ``bool``   | True if the method is static, otherwise false        |\n+--------------+------------+------------------------------------------------------+\n| IsAsync      | ``bool``   | True if the method is asyncronous, otherwise false   |\n+--------------+------------+------------------------------------------------------+\n\nParameterInfo\n~~~~~~~~~~~~~\n\nA class storing the informations of a parameter\n\nPrinting it will write the type of the parameter.\n\nVariables\n~~~~~~~~~\n\n+-------------------------+--------------+----------------------------------------------------------------------------+\n| Variable                | Type         | Description                                                                |\n+=========================+==============+============================================================================+\n| Name                    | ``str``      | The name of the parameter                                                  |\n+-------------------------+--------------+----------------------------------------------------------------------------+\n| ParameterType           | ``type``     | The type of the parameter                                                  |\n+-------------------------+--------------+----------------------------------------------------------------------------+\n| Position                | ``int``      | The position of the parameter when calling the method (going from ``0``)   |\n+-------------------------+--------------+----------------------------------------------------------------------------+\n| Default                 | ``object``   | The default value of the parameter (``None`` if it doesn't have)           |\n+-------------------------+--------------+----------------------------------------------------------------------------+\n| HasDefault / Optional   | ``bool``     | True if the parameter has a default value, false if it doesn't             |\n+-------------------------+--------------+----------------------------------------------------------------------------+\n\nFunctions\n---------\n\nGetField\n~~~~~~~~\n\nGets a specified field of the type\n\nReturns: ``FieldInfo`` if the field is present or ``forceEmpty`` is\ntrue, otherwise ``None``\n\n+--------------+------------+--------------------------------+-----------------+\n| Parameter    | Type       | Description                    | Default value   |\n+==============+============+================================+=================+\n| name         | ``str``    | The name of the field to get   | -               |\n+--------------+------------+--------------------------------+-----------------+\n| forceEmpty   | ``bool``   | See description below          | False           |\n+--------------+------------+--------------------------------+-----------------+\n\n**forceEmpty**\n\nPython doesn't store the private fields (``self.var``) before the\nclass gets initialized.\n\nIf ``forceEmpty`` is false, using ``type.GetField(str)`` on a private\nfiled will return ``None``.\nBut if it's true, it will still return a ``FieldInfo`` based on the\nname, but when you try to get the value of it and the field doesn't\nexist in the given class, it will raise an ``ArgumentError``.\n\nYou can alternatively use ``GetField(class, str)`` to with a\npre-initialized class to get the private field.\n\nGetFields\n~~~~~~~~~\n\nGets all the fields of the type.\n\nReturns: List of ``FieldInfo``\n\nThis function has no parameters.\n\nAgain, this only returns static variables of the specified type. If you\nwant to get all the private ones too, use ``GetFields(class)`` with a\npre-initialized class\n\nGetMethod\n~~~~~~~~~\n\nGets the specified method of the type\n\nReturns: ``MethodInfo`` if the method is present, otherwise ``None``\n\n+-------------+--------+---------------------------------+-----------------+\n| Parameter   | Type   | Description                     | Default value   |\n+=============+========+=================================+=================+\n| name        | str    | The name of the method to get   | -               |\n+-------------+--------+---------------------------------+-----------------+\n\nGetMethods\n~~~~~~~~~~\n\nGets all the methods of the type-\n\nReturns: List of ``MethodInfo``\n\nThis function has no parameters.\n\nExamples\n--------\n\n**Getting a static field's value**\n\nExample 1.\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        f = 0\n\n    Field = Ex.GetField(\"f\")\n    print(Field.GetValue(None))\n    #Output: 0\n\nExample 2.\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        f = 0\n\n    Inst = Ex()\n    Field = type(Inst).GetField(\"f\")\n    print(Field.GetValue(None))\n    #Output: 0\n\n**Getting a private field's value**\n\nExample 1.\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def __init__(self, val):\n            self.f = val\n\n    Field = Ex.GetField(\"f\", True)\n    Inst = Ex(\"Yay\")\n    print(Field.GetValue(Inst))\n    #Output: Yay\n\nExample 2.\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def __init__(self, val):\n            self.f = val\n\n    Inst = Ex(\"Yay\")\n    Field = GetField(Inst, \"f\")\n    print(Field.GetValue(Inst))\n    #Output: Yay\n\n**Multiple instances**\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def __init__(self, val):\n            self.f = val\n        \n    Inst1 = Ex(\"First\")\n    Inst2 = Ex(\"Second\")\n    Field = Ex.GetField(\"f\", True)\n    print(Field.GetValue(Inst1), Field.GetValue(Inst2))\n    #Output: First Second\n\n**Setting a field's value**\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def __init__(self, val):\n            self.f = val\n            \n    Inst = Ex(\"Before\")\n    Field = Ex.GetField(\"f\", True)\n    print(Field.GetValue(Inst))\n    Field.SetValue(Inst, \"After\")\n    print(Field.GetValue(Inst))\n    #Output:\n    #Before\n    #After\n\n**Invoking method**\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def M(p1, p2):\n            print(f\"First parameter: {p1}; Second parameter: {p2}\")\n            \n    Method = Ex.GetMethod(\"M\")\n    Method.Invoke(None, [\"H\", \"I\"])\n    #Output: First parameter: H; Second parameter: I\n\n**Invoking async method**\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n    import asyncio\n\n    class Ex:\n        def __init__(self, seconds):\n            self.s = seconds\n        \n        async def M(self, returnVal):\n            await asyncio.sleep(self.s)\n            return returnVal\n            \n    Method = Ex.GetMethod(\"M\")\n    Inst = Ex(5)\n    print(asyncio.run(Method.InvokeAsync(Inst, [\"Returned\"])))\n    #Output after waiting 5 seconds: Returned\n\n**Get parameters of method**\n\n.. code-block:: python\n\n    from ReflectionHelper import *\n\n    class Ex:\n        def M(p1: int, p2: bool, p3, p4 = \"Def\") -> list:\n            return [p1, p2, p3, p4]\n            \n    Parameters = Ex.GetMethod(\"M\").GetParameters()\n    for parameter in Parameters:\n        print(f'Parameter data: name is {parameter.Name}, type is {parameter.ParameterType}, position in method is {parameter.Position}, default value is {parameter.Default}')\n        \n    #Output\n    #Parameter data: name is p1, type is <class 'int'>, position in method is 0, default value is None\n    #Parameter data: name is p2, type is <class 'bool'>, position in method is 1, default value is None\n    #Parameter data: name is p3, type is None, position in method is 2, default value is None\n    #Parameter data: name is p4, type is None, position in method is 3, default value is Def", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/Qkrisi/ReflectionHelper/archive/v_1_0_4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Qkrisi/ReflectionHelper", "keywords": "Reflection,Helper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ReflectionHelper", "package_url": "https://pypi.org/project/ReflectionHelper/", "platform": "", "project_url": "https://pypi.org/project/ReflectionHelper/", "project_urls": {"Download": "https://github.com/Qkrisi/ReflectionHelper/archive/v_1_0_4.tar.gz", "Homepage": "https://github.com/Qkrisi/ReflectionHelper"}, "release_url": "https://pypi.org/project/ReflectionHelper/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "A reflection module based on the C# System.Reflection library", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A module that makes reflection easier in Python, based on the C#\nSystem.Reflection library</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <tt>pip3 install ReflectionHelper</tt> to install the module.\n(Python3.7+)</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Import the module using</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<div>\n<div>The module adds 4 new functions to the <tt>type</tt> class.</div>\n<div>-<tt>GetField</tt></div>\n<div>-<tt>GetFields</tt></div>\n<div>-<tt>GetMethod</tt></div>\n<div>-<tt>GetMethods</tt></div>\n</div>\n</div>\n<div id=\"classes\">\n<h2>Classes</h2>\n<div id=\"memberinfo\">\n<h3>MemberInfo</h3>\n<p>A parent class storing the datas of the reflected values</p>\n</div>\n<div id=\"fieldinfo\">\n<h3>FieldInfo</h3>\n<p>Iherits <tt>MemberInfo</tt></p>\n<p>A class storing the reflected field</p>\n</div>\n<div id=\"methods\">\n<h3>Methods</h3>\n<div>\n<div><strong>GetValue</strong></div>\n<div>Gets the value of the field</div>\n</div>\n<p>Returns: <tt>object</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>cl</td>\n<td>The type of the class the field was reflected from or <tt>None</tt></td>\n<td>An instance of the class if the field is private; <tt>None</tt>, instance or the type of the class if the field is static</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<div>\n<div><strong>SetValue</strong></div>\n<div>Sets the value of the field</div>\n</div>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>cl</td>\n<td>The type of the class the field was reflected from or <tt>None</tt></td>\n<td>An instance of the class if the field is private; <tt>None</tt>, instance or the type of the class if the field is static</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>value</td>\n<td><tt>object</tt></td>\n<td>Sets the value of the field in the type to <tt>value</tt></td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"variables\">\n<h3>Variables</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Name</td>\n<td><tt>str</tt></td>\n<td>The name of the field</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"methodinfo\">\n<h3>MethodInfo</h3>\n<p>Inherits <tt>MemberInfo</tt></p>\n<p>A class storing the reflected method</p>\n</div>\n<div id=\"id1\">\n<h3>Methods</h3>\n<p><strong>Invoke</strong></p>\n<p>Runs the method and returns its result (or <tt>None</tt> if it doesn\u2019t have\na result)</p>\n<p>Returns: <tt>object</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>cl</td>\n<td>The type of the class the method was reflected from or <tt>None</tt></td>\n<td>An instance of the class if the method is private; <tt>None</tt>, instance or the type of the class if the field is static</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>arr</td>\n<td>List of <tt>object</tt></td>\n<td>The parameters to call the method with (see example below)</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p><strong>InvokeAsync</strong></p>\n<p>Asyncronous</p>\n<p>Awaits the method and returns its result (or <tt>None</tt> if it doesn\u2019t\nhave a result)</p>\n<p>Returns <tt>object</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>cl</td>\n<td>The type of the class the method was reflected from or <tt>None</tt></td>\n<td>An instance of the class if the method is private; <tt>None</tt>, instance or the type of the class if the field is static</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>arr</td>\n<td>List of <tt>object</tt></td>\n<td>The parameters to call the method with (see example below)</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p><strong>GetParameters</strong></p>\n<p>Gets the parameters of the reflected method.</p>\n<p>Returns: List of <tt>ParameterInfo</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>enableSelf</td>\n<td><tt>bool</tt></td>\n<td>If it\u2019s true, the <tt>self</tt> parameter will be returned too (if present)</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"id2\">\n<h3>Variables</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Name</td>\n<td><tt>str</tt></td>\n<td>The name of the method</td>\n</tr>\n<tr><td>ReturnType</td>\n<td><tt>type</tt></td>\n<td>The type of the returned value</td>\n</tr>\n<tr><td>IsStatic</td>\n<td><tt>bool</tt></td>\n<td>True if the method is static, otherwise false</td>\n</tr>\n<tr><td>IsAsync</td>\n<td><tt>bool</tt></td>\n<td>True if the method is asyncronous, otherwise false</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"parameterinfo\">\n<h3>ParameterInfo</h3>\n<p>A class storing the informations of a parameter</p>\n<p>Printing it will write the type of the parameter.</p>\n</div>\n<div id=\"id3\">\n<h3>Variables</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Name</td>\n<td><tt>str</tt></td>\n<td>The name of the parameter</td>\n</tr>\n<tr><td>ParameterType</td>\n<td><tt>type</tt></td>\n<td>The type of the parameter</td>\n</tr>\n<tr><td>Position</td>\n<td><tt>int</tt></td>\n<td>The position of the parameter when calling the method (going from <tt>0</tt>)</td>\n</tr>\n<tr><td>Default</td>\n<td><tt>object</tt></td>\n<td>The default value of the parameter (<tt>None</tt> if it doesn\u2019t have)</td>\n</tr>\n<tr><td>HasDefault / Optional</td>\n<td><tt>bool</tt></td>\n<td>True if the parameter has a default value, false if it doesn\u2019t</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<div id=\"getfield\">\n<h3>GetField</h3>\n<p>Gets a specified field of the type</p>\n<p>Returns: <tt>FieldInfo</tt> if the field is present or <tt>forceEmpty</tt> is\ntrue, otherwise <tt>None</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>name</td>\n<td><tt>str</tt></td>\n<td>The name of the field to get</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n<tr><td>forceEmpty</td>\n<td><tt>bool</tt></td>\n<td>See description below</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p><strong>forceEmpty</strong></p>\n<p>Python doesn\u2019t store the private fields (<tt>self.var</tt>) before the\nclass gets initialized.</p>\n<p>If <tt>forceEmpty</tt> is false, using <tt>type.GetField(str)</tt> on a private\nfiled will return <tt>None</tt>.\nBut if it\u2019s true, it will still return a <tt>FieldInfo</tt> based on the\nname, but when you try to get the value of it and the field doesn\u2019t\nexist in the given class, it will raise an <tt>ArgumentError</tt>.</p>\n<p>You can alternatively use <tt>GetField(class, str)</tt> to with a\npre-initialized class to get the private field.</p>\n</div>\n<div id=\"getfields\">\n<h3>GetFields</h3>\n<p>Gets all the fields of the type.</p>\n<p>Returns: List of <tt>FieldInfo</tt></p>\n<p>This function has no parameters.</p>\n<p>Again, this only returns static variables of the specified type. If you\nwant to get all the private ones too, use <tt>GetFields(class)</tt> with a\npre-initialized class</p>\n</div>\n<div id=\"getmethod\">\n<h3>GetMethod</h3>\n<p>Gets the specified method of the type</p>\n<p>Returns: <tt>MethodInfo</tt> if the method is present, otherwise <tt>None</tt></p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>name</td>\n<td>str</td>\n<td>The name of the method to get</td>\n<td><ul>\n<li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"getmethods\">\n<h3>GetMethods</h3>\n<p>Gets all the methods of the type-</p>\n<p>Returns: List of <tt>MethodInfo</tt></p>\n<p>This function has no parameters.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><strong>Getting a static field\u2019s value</strong></p>\n<p>Example 1.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output: 0</span>\n</pre>\n<p>Example 2.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">Inst</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">()</span>\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output: 0</span>\n</pre>\n<p><strong>Getting a private field\u2019s value</strong></p>\n<p>Example 1.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Inst</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"s2\">\"Yay\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output: Yay</span>\n</pre>\n<p>Example 2.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"n\">Inst</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"s2\">\"Yay\"</span><span class=\"p\">)</span>\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">,</span> <span class=\"s2\">\"f\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output: Yay</span>\n</pre>\n<p><strong>Multiple instances</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"n\">Inst1</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"s2\">\"First\"</span><span class=\"p\">)</span>\n<span class=\"n\">Inst2</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"s2\">\"Second\"</span><span class=\"p\">)</span>\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst1</span><span class=\"p\">),</span> <span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst2</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output: First Second</span>\n</pre>\n<p><strong>Setting a field\u2019s value</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n<span class=\"n\">Inst</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"s2\">\"Before\"</span><span class=\"p\">)</span>\n<span class=\"n\">Field</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetField</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">))</span>\n<span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">SetValue</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">,</span> <span class=\"s2\">\"After\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">GetValue</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">))</span>\n<span class=\"c1\">#Output:</span>\n<span class=\"c1\">#Before</span>\n<span class=\"c1\">#After</span>\n</pre>\n<p><strong>Invoking method</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">M</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"First parameter: </span><span class=\"si\">{</span><span class=\"n\">p1</span><span class=\"si\">}</span><span class=\"s2\">; Second parameter: </span><span class=\"si\">{</span><span class=\"n\">p2</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">Method</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetMethod</span><span class=\"p\">(</span><span class=\"s2\">\"M\"</span><span class=\"p\">)</span>\n<span class=\"n\">Method</span><span class=\"o\">.</span><span class=\"n\">Invoke</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"H\"</span><span class=\"p\">,</span> <span class=\"s2\">\"I\"</span><span class=\"p\">])</span>\n<span class=\"c1\">#Output: First parameter: H; Second parameter: I</span>\n</pre>\n<p><strong>Invoking async method</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">seconds</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">M</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">returnVal</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">returnVal</span>\n\n<span class=\"n\">Method</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetMethod</span><span class=\"p\">(</span><span class=\"s2\">\"M\"</span><span class=\"p\">)</span>\n<span class=\"n\">Inst</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">Method</span><span class=\"o\">.</span><span class=\"n\">InvokeAsync</span><span class=\"p\">(</span><span class=\"n\">Inst</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"Returned\"</span><span class=\"p\">])))</span>\n<span class=\"c1\">#Output after waiting 5 seconds: Returned</span>\n</pre>\n<p><strong>Get parameters of method</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ReflectionHelper</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Ex</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">M</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span> <span class=\"o\">=</span> <span class=\"s2\">\"Def\"</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">]</span>\n\n<span class=\"n\">Parameters</span> <span class=\"o\">=</span> <span class=\"n\">Ex</span><span class=\"o\">.</span><span class=\"n\">GetMethod</span><span class=\"p\">(</span><span class=\"s2\">\"M\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">GetParameters</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">parameter</span> <span class=\"ow\">in</span> <span class=\"n\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Parameter data: name is </span><span class=\"si\">{</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"si\">}</span><span class=\"s1\">, type is </span><span class=\"si\">{</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"si\">}</span><span class=\"s1\">, position in method is </span><span class=\"si\">{</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Position</span><span class=\"si\">}</span><span class=\"s1\">, default value is </span><span class=\"si\">{</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Default</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Output</span>\n<span class=\"c1\">#Parameter data: name is p1, type is &lt;class 'int'&gt;, position in method is 0, default value is None</span>\n<span class=\"c1\">#Parameter data: name is p2, type is &lt;class 'bool'&gt;, position in method is 1, default value is None</span>\n<span class=\"c1\">#Parameter data: name is p3, type is None, position in method is 2, default value is None</span>\n<span class=\"c1\">#Parameter data: name is p4, type is None, position in method is 3, default value is Def</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7031092, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "e94e3c29142a7190ec869f42d6ea078f", "sha256": "6007a08302329c0ac2e0796b50afc66b77617d46b2e93433105accdc89a1b263"}, "downloads": -1, "filename": "ReflectionHelper-1.0.tar.gz", "has_sig": false, "md5_digest": "e94e3c29142a7190ec869f42d6ea078f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2207, "upload_time": "2020-04-16T09:48:00", "upload_time_iso_8601": "2020-04-16T09:48:00.595545Z", "url": "https://files.pythonhosted.org/packages/90/d7/c8ba1da760c9a3d75306d858a13f75a95cf5cc2568ac48820be7fcb679fa/ReflectionHelper-1.0.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "90b4f50c2377f0818b5b474fb5bd104a", "sha256": "a744a05f5511f20579046684a7fcd4e4ca2cb3f17dede13bbdfd99b57e807f00"}, "downloads": -1, "filename": "ReflectionHelper-1.0.3.tar.gz", "has_sig": false, "md5_digest": "90b4f50c2377f0818b5b474fb5bd104a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4542, "upload_time": "2020-04-16T10:20:59", "upload_time_iso_8601": "2020-04-16T10:20:59.940649Z", "url": "https://files.pythonhosted.org/packages/42/2e/a6b6d3f546639be391501c524bb706b1b5a6ebd3bbd94b495d902ee55e48/ReflectionHelper-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "2aac829b51f474dfacb8446e1ac63cf6", "sha256": "869f5e11f2659a75faf05a2c32a80bcbdd56bfcb0c8db8aecddd63618b9eb3d9"}, "downloads": -1, "filename": "ReflectionHelper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2aac829b51f474dfacb8446e1ac63cf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4543, "upload_time": "2020-04-16T10:24:35", "upload_time_iso_8601": "2020-04-16T10:24:35.423687Z", "url": "https://files.pythonhosted.org/packages/94/ab/8bc0f5bf79252ccf84dd8641fdc60442109bbbc066fa450baa2ac3178591/ReflectionHelper-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2aac829b51f474dfacb8446e1ac63cf6", "sha256": "869f5e11f2659a75faf05a2c32a80bcbdd56bfcb0c8db8aecddd63618b9eb3d9"}, "downloads": -1, "filename": "ReflectionHelper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2aac829b51f474dfacb8446e1ac63cf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4543, "upload_time": "2020-04-16T10:24:35", "upload_time_iso_8601": "2020-04-16T10:24:35.423687Z", "url": "https://files.pythonhosted.org/packages/94/ab/8bc0f5bf79252ccf84dd8641fdc60442109bbbc066fa450baa2ac3178591/ReflectionHelper-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:24 2020"}