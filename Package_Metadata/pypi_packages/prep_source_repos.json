{"info": {"author": "OpenStack Foundation", "author_email": "openstack-dev@lists.openstack.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: OpenStack", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "prep_source_repos\r\n        -----------------\r\n        \r\n        Introduction\r\n        ============\r\n        \r\n        This repository contains scripts for managing multiple outstanding patches\r\n        to a gerrit based project. It was initially developed for managing TripleO\r\n        deployments, and still makes certain TripleOish assumptions (patches welcome\r\n        if you find the tool more generally useful)\r\n        \r\n        The source repo includes:\r\n        \r\n        - tooling to combine arbitrary unmerged gerrit patches (prep_source_repos)\r\n          which will also export an rc file with git refs based on the combined\r\n          branches\r\n        - a sample config file that we're using for our TripleO deployments\r\n          (repo_refs.yaml)\r\n        \r\n        Usage\r\n        =====\r\n        \r\n        * create a repo_refs.yaml (see the one in the root of this repository\r\n          for inspiration).\r\n        \r\n        * run prep_source_repos $YOUR\\_REFS\\_FILE $DESTINATIION\\_DIR to checkout and\r\n          update the repositories specified by the refs file (in a TripleO context,\r\n          $DESTINATION\\_DIR will usually be \"$TRIPLEO\\_ROOT\").\r\n        \r\n          Note that local edits are saved via git stash whenever you refresh your\r\n          source repos, and restored after the update (which may, of course,\r\n          fail). This provides a convenient way to use local edits / work in\r\n          progress for repositories that are used directly (vs e.g. those that are\r\n          cloned into images).\r\n        \r\n        * (optional) source YOUR_REFS_FILE.variables to configure TripleO scripts to\r\n          use your freshly integrated branches\r\n        \r\n        * proceed with any tripleo activies you might have (building images, deploying,\r\n          etc etc).\r\n        \r\n        Advanced use\r\n        ============\r\n        \r\n        Refs that don't match the xx/yy/zz form of gerrit refs are presumed to be\r\n        local work-in-progress branches. These are not fetched, but are merged into\r\n        the rollup branch along with all the other patches. With a little care this\r\n        permits working effectively with multiple patchsets in one project without\r\n        them being made into a stack in gerrit.\r\n        \r\n        Refs of the form xx/yy/0 are late-bound references to gerrit - they will use\r\n        the gerrit REST API to find out the latest version and will use that.\r\n        \r\n        When running prep-source-repos any additional arguments after the refs and\r\n        output dir are used to filter the repositories to fetch - so when working on\r\n        (say) two local orthogonal patches to nova, and you need to update your\r\n        rollup branch just do::\r\n        \r\n            prep-source-repos foo bar nova\r\n        \r\n        and only nova will be updated.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "gerrit", "license": "Apache-2", "maintainer": "", "maintainer_email": "", "name": "prep_source_repos", "package_url": "https://pypi.org/project/prep_source_repos/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/prep_source_repos/", "project_urls": {"Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/prep_source_repos/0.0.1-alpha1/", "requires_dist": null, "requires_python": null, "summary": "Tool to manage a local checkout of a set of unlanded patches on a Gerrit repository", "version": "0.0.1-alpha1", "yanked": false, "html_description": "<div class=\"project-description\">\n            prep_source_repos\n<br>        -----------------\n<br>        \n<br>        Introduction\n<br>        ============\n<br>        \n<br>        This repository contains scripts for managing multiple outstanding patches\n<br>        to a gerrit based project. It was initially developed for managing TripleO\n<br>        deployments, and still makes certain TripleOish assumptions (patches welcome\n<br>        if you find the tool more generally useful)\n<br>        \n<br>        The source repo includes:\n<br>        \n<br>        - tooling to combine arbitrary unmerged gerrit patches (prep_source_repos)\n<br>          which will also export an rc file with git refs based on the combined\n<br>          branches\n<br>        - a sample config file that we're using for our TripleO deployments\n<br>          (repo_refs.yaml)\n<br>        \n<br>        Usage\n<br>        =====\n<br>        \n<br>        * create a repo_refs.yaml (see the one in the root of this repository\n<br>          for inspiration).\n<br>        \n<br>        * run prep_source_repos $YOUR\\_REFS\\_FILE $DESTINATIION\\_DIR to checkout and\n<br>          update the repositories specified by the refs file (in a TripleO context,\n<br>          $DESTINATION\\_DIR will usually be \"$TRIPLEO\\_ROOT\").\n<br>        \n<br>          Note that local edits are saved via git stash whenever you refresh your\n<br>          source repos, and restored after the update (which may, of course,\n<br>          fail). This provides a convenient way to use local edits / work in\n<br>          progress for repositories that are used directly (vs e.g. those that are\n<br>          cloned into images).\n<br>        \n<br>        * (optional) source YOUR_REFS_FILE.variables to configure TripleO scripts to\n<br>          use your freshly integrated branches\n<br>        \n<br>        * proceed with any tripleo activies you might have (building images, deploying,\n<br>          etc etc).\n<br>        \n<br>        Advanced use\n<br>        ============\n<br>        \n<br>        Refs that don't match the xx/yy/zz form of gerrit refs are presumed to be\n<br>        local work-in-progress branches. These are not fetched, but are merged into\n<br>        the rollup branch along with all the other patches. With a little care this\n<br>        permits working effectively with multiple patchsets in one project without\n<br>        them being made into a stack in gerrit.\n<br>        \n<br>        Refs of the form xx/yy/0 are late-bound references to gerrit - they will use\n<br>        the gerrit REST API to find out the latest version and will use that.\n<br>        \n<br>        When running prep-source-repos any additional arguments after the refs and\n<br>        output dir are used to filter the repositories to fetch - so when working on\n<br>        (say) two local orthogonal patches to nova, and you need to update your\n<br>        rollup branch just do::\n<br>        \n<br>            prep-source-repos foo bar nova\n<br>        \n<br>        and only nova will be updated.\n          </div>"}, "last_serial": 1280624, "releases": {"0.0.1-alpha1": []}, "urls": [], "timestamp": "Fri May  8 03:19:52 2020"}