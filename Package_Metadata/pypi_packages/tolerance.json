{"info": {"author": "Alisue", "author_email": "lambdalisue@hashnote.net", "bugtrack_url": null, "classifiers": [], "description": "tolerance\n==========================\n.. image:: https://secure.travis-ci.org/lambdalisue/tolerance.png?branch=master\n    :target: http://travis-ci.org/lambdalisue/tolerance\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/lambdalisue/tolerance/badge.png?branch=master\n    :target: https://coveralls.io/r/lambdalisue/tolerance/\n    :alt: Coverage\n\n.. image:: https://pypip.in/d/tolerance/badge.png\n    :target: https://pypi.python.org/pypi/tolerance/\n    :alt: Downloads\n\n.. image:: https://pypip.in/v/tolerance/badge.png\n    :target: https://pypi.python.org/pypi/tolerance/\n    :alt: Latest version\n\n.. image:: https://pypip.in/wheel/tolerance/badge.png\n    :target: https://pypi.python.org/pypi/tolerance/\n    :alt: Wheel Status\n\n.. image:: https://pypip.in/egg/tolerance/badge.png\n    :target: https://pypi.python.org/pypi/tolerance/\n    :alt: Egg Status\n\n.. image:: https://pypip.in/license/tolerance/badge.png\n    :target: https://pypi.python.org/pypi/tolerance/\n    :alt: License\n\nAuthor\n    Alisue <lambdalisue@hashnote.net>\nSupported python versions\n    2.6, 2.7, 3.2, 3.3, 3.4\n\nDo you often write the fail silent codes like below?\n\n.. code-block:: python\n\n    try:\n        # do what ever you need...\n        return \"foo\"\n    except:\n        # fail silently\n        return \"\"\n\nThis kind of codes are often found in Django_ projects or programs which should\nnot raise any exceptions in product mode.\n\n**tolerance** is a function decorator to make a tolerant function; a function\nwhich does not raise any exceptions even there are exceptions.\nThis concept is quite useful for making stable product or ``prefer_int`` types\nof code described in Usage section.\n\n.. _Django: https://www.djangoproject.com/\n\nCheck\n`online documentation <http://python-tolerance.readthedocs.org/en/latest/>`_\nfor more details.\n\nFeatures\n--------\n\n+   Convert a function to a tolerant function\n+   The decorated function returns ``substitute`` (Default is ``None``) when it\n    is not callable.\n    The function returns a \"returned value\" from ``substitute`` function when\n    it is callable.\n+   Ignoreing exceptions can be specified as a exception class list with\n    ``exceptions`` argument.\n+   When ``fail_silently=False`` is passed to the decorated function,\n    the function does not ignore exceptions (the argument name can be changed\n    with making switch function via ``argument_switch_generator`` function).\n\nInstallation\n------------\nUse pip_ like::\n\n    $ pip install tolerance\n\n.. _pip: https://pypi.python.org/pypi/pip\n\nUsage\n-----\nAssume that you need a function which convert a string to an integer when it is\npossible.\nWithout tolerance, you need to write a code like below\n\n.. code-block:: python\n\n    >>> # without tolerance\n    >>> def prefer_int_withot_tolerance(x):\n    ...     try:\n    ...         return int(x)\n    ...     except:\n    ...         # fail silently\n    ...         return x\n    >>> prefer_int_withot_tolerance(0)\n    0\n    >>> prefer_int_withot_tolerance('0')\n    0\n    >>> prefer_int_withot_tolerance('zero')\n    'zero'\n\nHowever, with tolerance, you just need to write a single line code like\n\n.. code-block:: python\n\n    >>> from tolerance import tolerate\n    >>> prefer_int = tolerate(lambda x: x)(int)\n    >>> prefer_int(0)\n    0\n    >>> prefer_int('0')\n    0\n    >>> prefer_int('zero')\n    'zero'\n\nOr you can use ``tolerate`` as a function decorator described in PEP-318_\n\n.. code-block:: python\n\n    >>> from tolerance import tolerate\n    >>> @tolerate(lambda x: x)\n    ... def prefer_int_318(x):\n    ...     return int(x)\n    >>> prefer_int_318(0)\n    0\n    >>> prefer_int_318('0')\n    0\n    >>> prefer_int_318('zero')\n    'zero'\n\nThe example codes above  specify ``substitute`` argument of ``tolerate``\nfunction to specify the returning value when the function has failed (\n``lambda x: x`` part).\n``tolerate`` function takes several arguments to configure the function\nbehavior.\nThese arguments are explained in Case study and detailed in API documentation.\n\n.. _PEP-318: http://www.python.org/dev/peps/pep-0318/\n\nChange log\n----------\nVersion 0.1.0\n    + Initial development\n    + Manually tested with Python 2.4, 2.5, 2.7, 3.2, 3.3\nVersion 0.1.1\n    + ``switch`` shortcut feature is added\n    + Drop off supporting Python 2.4 and 2.5\n    + Support Python 3.2 and 3.3 via 2to3\n    + Use tox_ for testing\n\n.. _tox: http://tox.readthedocs.org/en/latest/index.html\n\nCase study\n----------\n\nQ. How can I return the default value when the function fail?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``substitute`` argument to specify the default value like\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> @tolerate(substitute='foo')\n    ... def raise_exception():\n    ...     raise Exception\n    >>> raise_exception()\n    'foo'\n\nQ. How can I change the default value depends on passed arguments?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Specify ``substitute`` argument as a function\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> def substitute_function(*args, **kwargs):\n    ...     # do what ever you need, this example simply return 1st argument\n    ...     return args[0]\n    >>> @tolerate(substitute=substitute_function)\n    ... def raise_exception(*args):\n    ...     raise Exception\n    >>> raise_exception('bar', 'hoge')\n    'bar'\n\nQ. How can I make the function to ignore only several exceptions?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``exceptions`` argument to specify exceptions which will be ignored.\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> exceptions_ignored = (\n    ...     AttributeError,\n    ...     ValueError,\n    ... )\n    >>> @tolerate(exceptions=exceptions_ignored)\n    ... def raise_exception(x):\n    ...     if x == 0:\n    ...         raise AttributeError\n    ...     elif x == 1:\n    ...         raise ValueError\n    ...     else:\n    ...         raise KeyError\n    >>> raise_exception(0) is None\n    True\n    >>> raise_exception(1) is None\n    True\n    >>> raise_exception(2)\n    Traceback (most recent call last):\n        ...\n    KeyError\n\nQ. How can I disable ignoreing exceptions in the decorated function?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Pass ``fail_silently=False`` to the decorated function.\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> @tolerate()\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> raise_exception(fail_silently=False)\n    Traceback (most recent call last):\n        ...\n    KeyError\n\nYou can change the attribute name with specifing new switch function.\nIt will be explained below.\n\nQ. How can I disable ignoreing exceptions globally?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Set ``tolerate.disabled = True`` to disable tolerance globally.\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> @tolerate()\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> tolerate.disabled = True\n    >>> raise_exception()\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> # rollback\n    >>> tolerate.disabled = False\n\nQ. How can I disable ignoreing exceptions in complex mannar?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``switch`` argument to specify switch function.\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> DEBUG = False\n    >>> def switch_function(*args, **kwargs):\n    ...     # do what ever you need, this sample check kwargs and DEBUG\n    ...     # remove 'fail_silently' attribute and store\n    ...     fail_silently = kwargs.pop('fail_silently', True)\n    ...     if DEBUG or not fail_silently:\n    ...         # do not ignore exceptions. note that kwargs which does not\n    ...         # have 'fail_silently' is returned back.\n    ...         return False, args, kwargs\n    ...     # do ignore exceptions. note that kwargs which does not have\n    ...     # 'fail_silently' is returned back.\n    ...     return True, args, kwargs\n    >>> @tolerate(switch=switch_function)\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> raise_exception(fail_silently=False)\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> DEBUG = True\n    >>> raise_exception()\n    Traceback (most recent call last):\n        ...\n    KeyError\n\nQ. I just want to change the attribute name, making switch function is too complicated\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``argument_switch_generator`` to make switch function.\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> from tolerance import argument_switch_generator\n    >>> switch_function = argument_switch_generator('quiet')\n    >>> @tolerate(switch=switch_function)\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> # you can use `quiet=False` instead of `fail_silently`\n    >>> raise_exception(quiet=False)\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> # raise_exception does not know fail_silently so ignore\n    >>> raise_exception(fail_silently=False) is None\n    True\n    >>> #\n    >>> # From Version 0.1.1\n    >>> #\n    >>> @tolerate(switch='quiet')\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> raise_exception(quiet=False)\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> raise_exception(fail_silently=False) is None\n    True\n\n.. note::\n    From Version 0.1.1, you can simply specify the argument name to ``switch``\n    argument and then  ``tolerant`` function will call\n    ``argument_switch_generator`` internally with the specified name.\n\n    See detailed informations on API documentation\n\nQ. I want to make the function ignoreing exceptions only when ``fail_silently=True`` is passed\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``default`` argument to tell ``argument_switch_generator`` function\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> from tolerance import argument_switch_generator\n    >>> switch_function = argument_switch_generator('fail_silently', default=False)\n    >>> @tolerate(switch=switch_function)\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> raise_exception(fail_silently=True) is None\n    True\n    >>> #\n    >>> # From Version 0.1.1\n    >>> #\n    >>> @tolerate(switch=[None, False])\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> @tolerate(switch={'default': False})\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    Traceback (most recent call last):\n        ...\n    KeyError\n\n.. note::\n    From Version 0.1.1, you can simply specify ``*args`` or ``**kwargs`` of\n    ``argument_switch_generator`` to ``switch`` argument and ``tolerant``\n    function will call ``argument_switch_generator`` internally with the\n    specified arguments.\n\n    See detailed informations on API documentation\n\nQ. I want to disable the ignoreing exceptions when ``verbose=False`` is passed\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``reverse`` argument to tell ``argument_switch_generator`` function\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> from tolerance import argument_switch_generator\n    >>> switch_function = argument_switch_generator('verbose', reverse=True)\n    >>> @tolerate(switch=switch_function)\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> raise_exception(verbose=True)\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> #\n    >>> # From Version 0.1.1\n    >>> #\n    >>> @tolerate(switch={'argument_name': 'verbose', 'reverse': True})\n    ... def raise_exception():\n    ...     raise KeyError\n    >>> raise_exception() is None\n    True\n    >>> raise_exception(verbose=True)\n    Traceback (most recent call last):\n        ...\n    KeyError\n\nQ. I want to use ``fail_silently`` argument even in decorated function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nA. Use ``keep`` argument to tell ``argument_switch_generator`` function\n\n.. code-block:: python\n    \n    >>> from tolerance import tolerate\n    >>> from tolerance import argument_switch_generator\n    >>> switch_function = argument_switch_generator('fail_silently', keep=True)\n    >>> @tolerate(switch=switch_function)\n    ... def raise_exception(**kwargs):\n    ...     if 'fail_silently' in kwargs:\n    ...         raise KeyError\n    ...     return 'Failed!'\n    >>> raise_exception(fail_silently=True) is None\n    True\n    >>> raise_exception(fail_silently=False)\n    Traceback (most recent call last):\n        ...\n    KeyError\n    >>> #\n    >>> # From Version 0.1.1\n    >>> #\n    >>> @tolerate(switch={'keep': True})\n    ... def raise_exception(**kwargs):\n    ...     if 'fail_silently' in kwargs:\n    ...         raise KeyError\n    ...     return 'Failed!'\n    >>> raise_exception(fail_silently=True) is None\n    True\n    >>> raise_exception(fail_silently=False)\n    Traceback (most recent call last):\n        ...\n    KeyError", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/lambdalisue/tolerance/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lambdalisue/tolerance", "keywords": "function decorator,decorator,fail silently", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tolerance", "package_url": "https://pypi.org/project/tolerance/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tolerance/", "project_urls": {"Download": "https://github.com/lambdalisue/tolerance/tarball/master", "Homepage": "https://github.com/lambdalisue/tolerance"}, "release_url": "https://pypi.org/project/tolerance/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "A function decorator which makes a function tolerant (the function fail silently).", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.org/lambdalisue/tolerance\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e539ed18b39d2a18d89a430b24f6a6a397954f9/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f6c616d6264616c697375652f746f6c6572616e63652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/lambdalisue/tolerance/\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc317cbe8212033bb77dbfc4da22bbce1484d133/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6c616d6264616c697375652f746f6c6572616e63652f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/tolerance/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6e3af8c306385e3ad7fbaf9eee71ccb43eef1db/68747470733a2f2f70797069702e696e2f642f746f6c6572616e63652f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/tolerance/\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adb02b22e0b5bfa1b5a45161f0a24a26326ef3a3/68747470733a2f2f70797069702e696e2f762f746f6c6572616e63652f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/tolerance/\" rel=\"nofollow\"><img alt=\"Wheel Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6435ddfc746b1db5f3a7e3fd1e4fc4b21cd2922a/68747470733a2f2f70797069702e696e2f776865656c2f746f6c6572616e63652f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/tolerance/\" rel=\"nofollow\"><img alt=\"Egg Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31f900e0fd219aa6825c21c837136da20af38e02/68747470733a2f2f70797069702e696e2f6567672f746f6c6572616e63652f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/tolerance/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/daebfdd53537342d14ec851827c10d5a6c7c4ceb/68747470733a2f2f70797069702e696e2f6c6963656e73652f746f6c6572616e63652f62616467652e706e67\"></a>\n<dl>\n<dt>Author</dt>\n<dd>Alisue &lt;<a href=\"mailto:lambdalisue%40hashnote.net\">lambdalisue<span>@</span>hashnote<span>.</span>net</a>&gt;</dd>\n<dt>Supported python versions</dt>\n<dd>2.6, 2.7, 3.2, 3.3, 3.4</dd>\n</dl>\n<p>Do you often write the fail silent codes like below?</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># do what ever you need...</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"c1\"># fail silently</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n</pre>\n<p>This kind of codes are often found in <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> projects or programs which should\nnot raise any exceptions in product mode.</p>\n<p><strong>tolerance</strong> is a function decorator to make a tolerant function; a function\nwhich does not raise any exceptions even there are exceptions.\nThis concept is quite useful for making stable product or <tt>prefer_int</tt> types\nof code described in Usage section.</p>\n<p>Check\n<a href=\"http://python-tolerance.readthedocs.org/en/latest/\" rel=\"nofollow\">online documentation</a>\nfor more details.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Convert a function to a tolerant function</li>\n<li>The decorated function returns <tt>substitute</tt> (Default is <tt>None</tt>) when it\nis not callable.\nThe function returns a \u201creturned value\u201d from <tt>substitute</tt> function when\nit is callable.</li>\n<li>Ignoreing exceptions can be specified as a exception class list with\n<tt>exceptions</tt> argument.</li>\n<li>When <tt>fail_silently=False</tt> is passed to the decorated function,\nthe function does not ignore exceptions (the argument name can be changed\nwith making switch function via <tt>argument_switch_generator</tt> function).</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a> like:</p>\n<pre>$ pip install tolerance\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Assume that you need a function which convert a string to an integer when it is\npossible.\nWithout tolerance, you need to write a code like below</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># without tolerance</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">prefer_int_withot_tolerance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">except</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># fail silently</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">x</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_withot_tolerance</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_withot_tolerance</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_withot_tolerance</span><span class=\"p\">(</span><span class=\"s1\">'zero'</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero'</span>\n</pre>\n<p>However, with tolerance, you just need to write a single line code like</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int</span> <span class=\"o\">=</span> <span class=\"n\">tolerate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int</span><span class=\"p\">(</span><span class=\"s1\">'zero'</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero'</span>\n</pre>\n<p>Or you can use <tt>tolerate</tt> as a function decorator described in <a href=\"http://www.python.org/dev/peps/pep-0318/\" rel=\"nofollow\">PEP-318</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">prefer_int_318</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_318</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_318</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">prefer_int_318</span><span class=\"p\">(</span><span class=\"s1\">'zero'</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero'</span>\n</pre>\n<p>The example codes above  specify <tt>substitute</tt> argument of <tt>tolerate</tt>\nfunction to specify the returning value when the function has failed (\n<tt>lambda x: x</tt> part).\n<tt>tolerate</tt> function takes several arguments to configure the function\nbehavior.\nThese arguments are explained in Case study and detailed in API documentation.</p>\n</div>\n<div id=\"change-log\">\n<h2>Change log</h2>\n<dl>\n<dt>Version 0.1.0</dt>\n<dd><ul>\n<li>Initial development</li>\n<li>Manually tested with Python 2.4, 2.5, 2.7, 3.2, 3.3</li>\n</ul>\n</dd>\n<dt>Version 0.1.1</dt>\n<dd><ul>\n<li><tt>switch</tt> shortcut feature is added</li>\n<li>Drop off supporting Python 2.4 and 2.5</li>\n<li>Support Python 3.2 and 3.3 via 2to3</li>\n<li>Use <a href=\"http://tox.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">tox</a> for testing</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"case-study\">\n<h2>Case study</h2>\n<div id=\"q-how-can-i-return-the-default-value-when-the-function-fail\">\n<h3>Q. How can I return the default value when the function fail?</h3>\n<ol>\n<li>Use <tt>substitute</tt> argument to specify the default value like</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span>\n<span class=\"s1\">'foo'</span>\n</pre>\n</div>\n<div id=\"q-how-can-i-change-the-default-value-depends-on-passed-arguments\">\n<h3>Q. How can I change the default value depends on passed arguments?</h3>\n<ol>\n<li>Specify <tt>substitute</tt> argument as a function</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">substitute_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># do what ever you need, this example simply return 1st argument</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">substitute</span><span class=\"o\">=</span><span class=\"n\">substitute_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">Exception</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'hoge'</span><span class=\"p\">)</span>\n<span class=\"s1\">'bar'</span>\n</pre>\n</div>\n<div id=\"q-how-can-i-make-the-function-to-ignore-only-several-exceptions\">\n<h3>Q. How can I make the function to ignore only several exceptions?</h3>\n<ol>\n<li>Use <tt>exceptions</tt> argument to specify exceptions which will be ignored.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">exceptions_ignored</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"ne\">AttributeError</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"ne\">ValueError</span><span class=\"p\">,</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">exceptions</span><span class=\"o\">=</span><span class=\"n\">exceptions_ignored</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span>\n<span class=\"o\">...</span>     <span class=\"k\">elif</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n<span class=\"o\">...</span>     <span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n</div>\n<div id=\"q-how-can-i-disable-ignoreing-exceptions-in-the-decorated-function\">\n<h3>Q. How can I disable ignoreing exceptions in the decorated function?</h3>\n<ol>\n<li>Pass <tt>fail_silently=False</tt> to the decorated function.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n<p>You can change the attribute name with specifing new switch function.\nIt will be explained below.</p>\n</div>\n<div id=\"q-how-can-i-disable-ignoreing-exceptions-globally\">\n<h3>Q. How can I disable ignoreing exceptions globally?</h3>\n<ol>\n<li>Set <tt>tolerate.disabled = True</tt> to disable tolerance globally.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tolerate</span><span class=\"o\">.</span><span class=\"n\">disabled</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># rollback</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tolerate</span><span class=\"o\">.</span><span class=\"n\">disabled</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"q-how-can-i-disable-ignoreing-exceptions-in-complex-mannar\">\n<h3>Q. How can I disable ignoreing exceptions in complex mannar?</h3>\n<ol>\n<li>Use <tt>switch</tt> argument to specify switch function.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">switch_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># do what ever you need, this sample check kwargs and DEBUG</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># remove 'fail_silently' attribute and store</span>\n<span class=\"o\">...</span>     <span class=\"n\">fail_silently</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'fail_silently'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">DEBUG</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">fail_silently</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># do not ignore exceptions. note that kwargs which does not</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># have 'fail_silently' is returned back.</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># do ignore exceptions. note that kwargs which does not have</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># 'fail_silently' is returned back.</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">switch_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n</div>\n<div id=\"q-i-just-want-to-change-the-attribute-name-making-switch-function-is-too-complicated\">\n<h3>Q. I just want to change the attribute name, making switch function is too complicated</h3>\n<ol>\n<li>Use <tt>argument_switch_generator</tt> to make switch function.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">argument_switch_generator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">switch_function</span> <span class=\"o\">=</span> <span class=\"n\">argument_switch_generator</span><span class=\"p\">(</span><span class=\"s1\">'quiet'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">switch_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># you can use `quiet=False` instead of `fail_silently`</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># raise_exception does not know fail_silently so ignore</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># From Version 0.1.1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"s1\">'quiet'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n</pre>\n<div>\n<p>Note</p>\n<p>From Version 0.1.1, you can simply specify the argument name to <tt>switch</tt>\nargument and then  <tt>tolerant</tt> function will call\n<tt>argument_switch_generator</tt> internally with the specified name.</p>\n<p>See detailed informations on API documentation</p>\n</div>\n</div>\n<div id=\"q-i-want-to-make-the-function-ignoreing-exceptions-only-when-fail-silently-true-is-passed\">\n<h3>Q. I want to make the function ignoreing exceptions only when <tt>fail_silently=True</tt> is passed</h3>\n<ol>\n<li>Use <tt>default</tt> argument to tell <tt>argument_switch_generator</tt> function</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">argument_switch_generator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">switch_function</span> <span class=\"o\">=</span> <span class=\"n\">argument_switch_generator</span><span class=\"p\">(</span><span class=\"s1\">'fail_silently'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">switch_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># From Version 0.1.1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n<div>\n<p>Note</p>\n<p>From Version 0.1.1, you can simply specify <tt>*args</tt> or <tt>**kwargs</tt> of\n<tt>argument_switch_generator</tt> to <tt>switch</tt> argument and <tt>tolerant</tt>\nfunction will call <tt>argument_switch_generator</tt> internally with the\nspecified arguments.</p>\n<p>See detailed informations on API documentation</p>\n</div>\n</div>\n<div id=\"q-i-want-to-disable-the-ignoreing-exceptions-when-verbose-false-is-passed\">\n<h3>Q. I want to disable the ignoreing exceptions when <tt>verbose=False</tt> is passed</h3>\n<ol>\n<li>Use <tt>reverse</tt> argument to tell <tt>argument_switch_generator</tt> function</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">argument_switch_generator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">switch_function</span> <span class=\"o\">=</span> <span class=\"n\">argument_switch_generator</span><span class=\"p\">(</span><span class=\"s1\">'verbose'</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">switch_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># From Version 0.1.1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'argument_name'</span><span class=\"p\">:</span> <span class=\"s1\">'verbose'</span><span class=\"p\">,</span> <span class=\"s1\">'reverse'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n</div>\n<div id=\"q-i-want-to-use-fail-silently-argument-even-in-decorated-function\">\n<h3>Q. I want to use <tt>fail_silently</tt> argument even in decorated function</h3>\n<ol>\n<li>Use <tt>keep</tt> argument to tell <tt>argument_switch_generator</tt> function</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">tolerate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tolerance</span> <span class=\"kn\">import</span> <span class=\"n\">argument_switch_generator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">switch_function</span> <span class=\"o\">=</span> <span class=\"n\">argument_switch_generator</span><span class=\"p\">(</span><span class=\"s1\">'fail_silently'</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">switch_function</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"s1\">'fail_silently'</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s1\">'Failed!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># From Version 0.1.1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@tolerate</span><span class=\"p\">(</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'keep'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">raise_exception</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"s1\">'fail_silently'</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s1\">'Failed!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">raise_exception</span><span class=\"p\">(</span><span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1163800, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0596210a1d7f09b085d3c2a07bcd83d3", "sha256": "2d4b05cc8eb27d982bbc12a2022ae71424f3aba00653075f8838ad9c8a015b4e"}, "downloads": -1, "filename": "tolerance-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0596210a1d7f09b085d3c2a07bcd83d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9956, "upload_time": "2014-01-20T16:13:24", "upload_time_iso_8601": "2014-01-20T16:13:24.192951Z", "url": "https://files.pythonhosted.org/packages/b7/7f/371c91807dd084d37c14f1c67cceb86f1c8c2c1f5d8a7421da823e30535b/tolerance-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e0a44ec7af8d7f5571f6d0e5e708e9be", "sha256": "2a6f8399c8246b4a53ae44c91c3804ed1b262f40bd4f443c7258e74019a7b177"}, "downloads": -1, "filename": "tolerance-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e0a44ec7af8d7f5571f6d0e5e708e9be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11157, "upload_time": "2014-01-21T05:33:57", "upload_time_iso_8601": "2014-01-21T05:33:57.656791Z", "url": "https://files.pythonhosted.org/packages/b4/6a/f42465f3af24076a0dea9d5bc770f4d8fb43c0367cad24551bc661cd082f/tolerance-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b092c809d6c9b31c32d84411597c8d93", "sha256": "a551a591468261cadb5440dcc19a8d5577514956f0ab283a18a56ce1ff56e51e"}, "downloads": -1, "filename": "tolerance-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b092c809d6c9b31c32d84411597c8d93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11213, "upload_time": "2014-07-21T01:01:40", "upload_time_iso_8601": "2014-07-21T01:01:40.563488Z", "url": "https://files.pythonhosted.org/packages/68/19/e49b2915d182f9967bb6950faad6935ece45566356a3bf50e8f5c73ab4d7/tolerance-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b092c809d6c9b31c32d84411597c8d93", "sha256": "a551a591468261cadb5440dcc19a8d5577514956f0ab283a18a56ce1ff56e51e"}, "downloads": -1, "filename": "tolerance-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b092c809d6c9b31c32d84411597c8d93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11213, "upload_time": "2014-07-21T01:01:40", "upload_time_iso_8601": "2014-07-21T01:01:40.563488Z", "url": "https://files.pythonhosted.org/packages/68/19/e49b2915d182f9967bb6950faad6935ece45566356a3bf50e8f5c73ab4d7/tolerance-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:21 2020"}