{"info": {"author": "Adam Johnson", "author_email": "me@adamj.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "============\ntime-machine\n============\n\n.. image:: https://github.com/adamchainz/time-machine/workflows/CI/badge.svg?branch=master\n   :target: https://github.com/adamchainz/time-machine/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/time-machine.svg\n   :target: https://pypi.python.org/pypi/time-machine\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/python/black\n\nTravel through time in your tests.\n\nA quick example:\n\n.. code-block:: python\n\n    import datetime as dt\n    import time_machine\n\n    @time_machine.travel(0.0)\n    def test_unix_epoch_timestamp():\n        assert dt.date.today().isoformat() == \"1970-01-01\"\n\nInstallation\n============\n\nUse **pip**:\n\n.. code-block:: sh\n\n    python -m pip install time-machine\n\nPython 3.6 to 3.8 supported (CPython only).\n\nUsage\n=====\n\n``travel(destination)``\n-----------------------\n\n``travel()`` is a class that allows movement to a given time specified by ``destination``.\nIt can be used independently, as a function decorator, or as a context manager.\n\n``destination`` specifies the time to move to.\nIt may be:\n\n* A ``datetime.datetime``.\n  If it is naive, it will be assumed to have the UTC timezone.\n* A ``float`` or ``int`` specifying a `Unix timestamp <https://en.m.wikipedia.org/wiki/Unix_time>`__\n* A string, which will be parsed with `dateutil.parse <https://dateutil.readthedocs.io/en/stable/parser.html>`__ and converted to a timestamp.\n\nTo use independently, instantiate, then use ``start()`` to move to the destination time, and ``stop()`` to move back.\n\n.. code-block:: python\n\n    import datetime as dt\n    import time_machine\n\n    traveller = time_machine.travel(dt.datetime(1985, 11, 5))\n    traveller.start()\n    # It's the past!\n    assert dt.date.today() == dt.date(1985, 11, 5)\n    traveller.stop()\n    # We've gone back to the future!\n    assert dt.date.today() > dt.date(2020, 4, 29)\n\nOnce started, all datetime functions in the standard library are mocked to pretend the current time is that time:\n\n* ``datetime.datetime.now()``\n* ``datetime.datetime.utcnow()``\n* ``time.time()``\n* ``time.gmtime()``\n* ``time.localtime()``\n* ``time.strftime()``\n\nAt least two functions are currently missing:\n\n* ``time.clock_gettime``\n* ``time.time_ns()``\n\nThis mocking is at the C layer, replacing the function pointers for these built-ins.\nTherefore, it automatically affects everywhere those functions were imported.\n\nAny other functions that make system calls to retrieve the clock time will not be affected, but these are rare.\nMost Python libraries use the above standard library functions.\n\nBeware that time is global state.\nAny concurrent threads or async functions will also be affected.\nSome aren't ready for time to move so rapidly and may crash or produce unexpected results.\nBut other processes are not affected, for example if you use datetime functions in a client/server database, they will still return the real time.\n\nTime \"continues ticking,\" so two calls to ``time.time()`` will return results separated by the time elapsed between them.\n\nWhen used as a function decorator, time is mocked during the wrapped function's duration:\n\n.. code-block:: python\n\n    import time\n    import time_machine\n\n    @time_machine.travel(\"1970-01-01 00:00 +0000\")\n    def test_in_the_deep_past():\n        assert 0.0 < time.time() < 1.0\n\nWhen used as a context manager, time is mocked during the ``with`` block:\n\n.. code-block:: python\n\n    def test_time_time():\n        with time_machine.travel(0.0):\n            assert EPOCH < time.time() < EPOCH + 1.0\n\nComparison\n==========\n\nThere are some prior libraries that try to achieve the same thing.\nThey have their own strengths and weaknesses.\nHere's a quick comparison.\n\n``unittest.mock``\n-----------------\n\nThe standard library's `unittest.mock <https://docs.python.org/3/library/unittest.mock.html>`__ can be used to target ``datetime`` or ``time`` imports to change the returned value for current time.\nUnfortunately, this is fragile as it only affects the import location the mock targets.\nTherefore, if you have several call sites checking the time, you may need several mocks.\n\nSee `Why Your Mock Doesn't Work <https://nedbatchelder.com//blog/201908/why_your_mock_doesnt_work.html>`__.\n\n``freezegun``\n-------------\n\nSteve Pulec's `freezegun <https://github.com/spulec/freezegun>`__ library is a popular solution.\nIt provides a nice API which was much of the inspiration for time-machine.\n\nThe main drawback is its slow implementation.\nIt essentially does a find-and-replace mock of all the places that the ``datetime`` and ``time`` modules have been imported.\nThis gets around the problems with using ``unittest.mock``, but it means the time to mock is linear to the number of loaded modules, making it several seconds to start in large projects.\n\nIt also can't affect C extensions that call the standard library functions, including Cython.\nAnd it can be subverted even in Python by code that stores the standard library functions in data structures or local scopes.\n\n``libfaketime``\n---------------\n\nSimon Weber's `python-libfaketime <https://github.com/simon-weber/python-libfaketime/>`__ wraps the ``LD_PRELOAD`` library `libfaketime <https://github.com/wolfcw/libfaketime>`__.\n``libfaketime`` replaces all the C-level system calls for the current time with its own wrappers.\nIt's therefore a \"perfect\" mock for the current process, affecting every single point the current time might be fetched, and performs much faster than ``freezegun``.\n\nUnfortunately it comes with the limitations of ``LD_PRELOAD`` (`explanation <http://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/>`__).\nFirst, this is only available on Unix platforms, which prevents it from working on Windows.\nSeccond, you either use its ``reexec_if_needed()`` function, which restarts (re-execs) your tests' process once while loading, or manually manage the ``LD_PRELOAD`` environment variable everywhere you run your tests.\nRe-execing breaks profilers, use of ``python -m pdb`` and similar, and other things that might wrap your test process.\nManually managing the environment variable is a bit of overhead for each environment you want to run your tests in.\n\n``time-machine``\n----------------\n\n``time-machine`` is intended to combine the advantages of ``freezegun`` and ``libfaketime``.\nIt works without ``LD_PRELOAD`` but still mocks the standard library functions everywhere they may be referenced.\nIts weak point is that other libraries using date/time system calls won't be mocked.\nThankfully this is rare - all Python libraries I've seen use the standard library functions.\nAnd other python libraries can probably be added to the set detected and mocked by ``time-machine``.\n\nOne drawback is that it only works with CPython, so can't be used with other Python interpreters like PyPy.\nHowever it may possible to extend it to use different mocking mechanisms there.\n\nHistory\n=======\n\n1.0.0b1 (2020-05-04)\n--------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamchainz/time-machine", "keywords": "time,warp", "license": "ISC License", "maintainer": "", "maintainer_email": "", "name": "time-machine", "package_url": "https://pypi.org/project/time-machine/", "platform": "", "project_url": "https://pypi.org/project/time-machine/", "project_urls": {"Changelog": "https://github.com/adamchainz/time-machine/blob/master/HISTORY.rst", "Homepage": "https://github.com/adamchainz/time-machine"}, "release_url": "https://pypi.org/project/time-machine/1.0.0b1/", "requires_dist": ["python-dateutil"], "requires_python": ">=3.6", "summary": "Warp time", "version": "1.0.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/adamchainz/time-machine/actions?workflow=CI\" rel=\"nofollow\"><img alt=\"https://github.com/adamchainz/time-machine/workflows/CI/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a180b67c72eaf5fca293d94cad2ddfdcaf48da6/68747470733a2f2f6769746875622e636f6d2f6164616d636861696e7a2f74696d652d6d616368696e652f776f726b666c6f77732f43492f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/time-machine\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/time-machine.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/374314c85be0d308c962841787f4657d15d6432e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696d652d6d616368696e652e737667\"></a>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<p>Travel through time in your tests.</p>\n<p>A quick example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time_machine</span>\n\n<span class=\"nd\">@time_machine</span><span class=\"o\">.</span><span class=\"n\">travel</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_unix_epoch_timestamp</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"1970-01-01\"</span>\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <strong>pip</strong>:</p>\n<pre>python -m pip install time-machine\n</pre>\n<p>Python 3.6 to 3.8 supported (CPython only).</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"travel-destination\"><span class=\"section-subtitle\"><tt>travel(destination)</tt></span></h2>\n<p><tt>travel()</tt> is a class that allows movement to a given time specified by <tt>destination</tt>.\nIt can be used independently, as a function decorator, or as a context manager.</p>\n<p><tt>destination</tt> specifies the time to move to.\nIt may be:</p>\n<ul>\n<li>A <tt>datetime.datetime</tt>.\nIf it is naive, it will be assumed to have the UTC timezone.</li>\n<li>A <tt>float</tt> or <tt>int</tt> specifying a <a href=\"https://en.m.wikipedia.org/wiki/Unix_time\" rel=\"nofollow\">Unix timestamp</a></li>\n<li>A string, which will be parsed with <a href=\"https://dateutil.readthedocs.io/en/stable/parser.html\" rel=\"nofollow\">dateutil.parse</a> and converted to a timestamp.</li>\n</ul>\n<p>To use independently, instantiate, then use <tt>start()</tt> to move to the destination time, and <tt>stop()</tt> to move back.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time_machine</span>\n\n<span class=\"n\">traveller</span> <span class=\"o\">=</span> <span class=\"n\">time_machine</span><span class=\"o\">.</span><span class=\"n\">travel</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1985</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">traveller</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># It's the past!</span>\n<span class=\"k\">assert</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1985</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">traveller</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n<span class=\"c1\"># We've gone back to the future!</span>\n<span class=\"k\">assert</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">)</span>\n</pre>\n<p>Once started, all datetime functions in the standard library are mocked to pretend the current time is that time:</p>\n<ul>\n<li><tt>datetime.datetime.now()</tt></li>\n<li><tt>datetime.datetime.utcnow()</tt></li>\n<li><tt>time.time()</tt></li>\n<li><tt>time.gmtime()</tt></li>\n<li><tt>time.localtime()</tt></li>\n<li><tt>time.strftime()</tt></li>\n</ul>\n<p>At least two functions are currently missing:</p>\n<ul>\n<li><tt>time.clock_gettime</tt></li>\n<li><tt>time.time_ns()</tt></li>\n</ul>\n<p>This mocking is at the C layer, replacing the function pointers for these built-ins.\nTherefore, it automatically affects everywhere those functions were imported.</p>\n<p>Any other functions that make system calls to retrieve the clock time will not be affected, but these are rare.\nMost Python libraries use the above standard library functions.</p>\n<p>Beware that time is global state.\nAny concurrent threads or async functions will also be affected.\nSome aren\u2019t ready for time to move so rapidly and may crash or produce unexpected results.\nBut other processes are not affected, for example if you use datetime functions in a client/server database, they will still return the real time.</p>\n<p>Time \u201ccontinues ticking,\u201d so two calls to <tt>time.time()</tt> will return results separated by the time elapsed between them.</p>\n<p>When used as a function decorator, time is mocked during the wrapped function\u2019s duration:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time_machine</span>\n\n<span class=\"nd\">@time_machine</span><span class=\"o\">.</span><span class=\"n\">travel</span><span class=\"p\">(</span><span class=\"s2\">\"1970-01-01 00:00 +0000\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_in_the_deep_past</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"mf\">0.0</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.0</span>\n</pre>\n<p>When used as a context manager, time is mocked during the <tt>with</tt> block:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_time_time</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">time_machine</span><span class=\"o\">.</span><span class=\"n\">travel</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">EPOCH</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">EPOCH</span> <span class=\"o\">+</span> <span class=\"mf\">1.0</span>\n</pre>\n</div>\n<div id=\"comparison\">\n<h2>Comparison</h2>\n<p>There are some prior libraries that try to achieve the same thing.\nThey have their own strengths and weaknesses.\nHere\u2019s a quick comparison.</p>\n<div id=\"unittest-mock\">\n<h3><tt>unittest.mock</tt></h3>\n<p>The standard library\u2019s <a href=\"https://docs.python.org/3/library/unittest.mock.html\" rel=\"nofollow\">unittest.mock</a> can be used to target <tt>datetime</tt> or <tt>time</tt> imports to change the returned value for current time.\nUnfortunately, this is fragile as it only affects the import location the mock targets.\nTherefore, if you have several call sites checking the time, you may need several mocks.</p>\n<p>See <a href=\"https://nedbatchelder.com//blog/201908/why_your_mock_doesnt_work.html\" rel=\"nofollow\">Why Your Mock Doesn\u2019t Work</a>.</p>\n</div>\n<div id=\"freezegun\">\n<h3><tt>freezegun</tt></h3>\n<p>Steve Pulec\u2019s <a href=\"https://github.com/spulec/freezegun\" rel=\"nofollow\">freezegun</a> library is a popular solution.\nIt provides a nice API which was much of the inspiration for time-machine.</p>\n<p>The main drawback is its slow implementation.\nIt essentially does a find-and-replace mock of all the places that the <tt>datetime</tt> and <tt>time</tt> modules have been imported.\nThis gets around the problems with using <tt>unittest.mock</tt>, but it means the time to mock is linear to the number of loaded modules, making it several seconds to start in large projects.</p>\n<p>It also can\u2019t affect C extensions that call the standard library functions, including Cython.\nAnd it can be subverted even in Python by code that stores the standard library functions in data structures or local scopes.</p>\n</div>\n<div id=\"libfaketime\">\n<h3><tt>libfaketime</tt></h3>\n<p>Simon Weber\u2019s <a href=\"https://github.com/simon-weber/python-libfaketime/\" rel=\"nofollow\">python-libfaketime</a> wraps the <tt>LD_PRELOAD</tt> library <a href=\"https://github.com/wolfcw/libfaketime\" rel=\"nofollow\">libfaketime</a>.\n<tt>libfaketime</tt> replaces all the C-level system calls for the current time with its own wrappers.\nIt\u2019s therefore a \u201cperfect\u201d mock for the current process, affecting every single point the current time might be fetched, and performs much faster than <tt>freezegun</tt>.</p>\n<p>Unfortunately it comes with the limitations of <tt>LD_PRELOAD</tt> (<a href=\"http://www.goldsborough.me/c/low-level/kernel/2016/08/29/16-48-53-the_-ld_preload-_trick/\" rel=\"nofollow\">explanation</a>).\nFirst, this is only available on Unix platforms, which prevents it from working on Windows.\nSeccond, you either use its <tt>reexec_if_needed()</tt> function, which restarts (re-execs) your tests\u2019 process once while loading, or manually manage the <tt>LD_PRELOAD</tt> environment variable everywhere you run your tests.\nRe-execing breaks profilers, use of <tt>python <span class=\"pre\">-m</span> pdb</tt> and similar, and other things that might wrap your test process.\nManually managing the environment variable is a bit of overhead for each environment you want to run your tests in.</p>\n</div>\n<div id=\"id1\">\n<h3><tt><span class=\"pre\">time-machine</span></tt></h3>\n<p><tt><span class=\"pre\">time-machine</span></tt> is intended to combine the advantages of <tt>freezegun</tt> and <tt>libfaketime</tt>.\nIt works without <tt>LD_PRELOAD</tt> but still mocks the standard library functions everywhere they may be referenced.\nIts weak point is that other libraries using date/time system calls won\u2019t be mocked.\nThankfully this is rare - all Python libraries I\u2019ve seen use the standard library functions.\nAnd other python libraries can probably be added to the set detected and mocked by <tt><span class=\"pre\">time-machine</span></tt>.</p>\n<p>One drawback is that it only works with CPython, so can\u2019t be used with other Python interpreters like PyPy.\nHowever it may possible to extend it to use different mocking mechanisms there.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"b1-2020-05-04\"><span class=\"section-subtitle\">1.0.0b1 (2020-05-04)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7163477, "releases": {"1.0.0b1": [{"comment_text": "", "digests": {"md5": "a6b157d8af260cd56e189b2a53ce5a14", "sha256": "a5c1ced4401385398be30df99df08680de635ead1860e17f96bd5d08b660e90f"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "a6b157d8af260cd56e189b2a53ce5a14", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 8617, "upload_time": "2020-05-04T10:59:18", "upload_time_iso_8601": "2020-05-04T10:59:18.240610Z", "url": "https://files.pythonhosted.org/packages/7d/5f/e366fce45c51dd2073bc5856d4115ab79301e7a7297308210a230958b054/time_machine-1.0.0b1-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70231fd66c3089238b30cc1eb794fca2", "sha256": "4e3eb4a16421d9f961093c382ae6cbb1dc3f8b6ad29513e4c161b14a1d25d53b"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "70231fd66c3089238b30cc1eb794fca2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 8625, "upload_time": "2020-05-04T10:59:20", "upload_time_iso_8601": "2020-05-04T10:59:20.602586Z", "url": "https://files.pythonhosted.org/packages/5d/1b/0af304a114688e277963b416b13e31ee66ffd48f55ffac63867e5556fa49/time_machine-1.0.0b1-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c912c14c9788ef6614131390beda03a", "sha256": "e997e0a81cc3490dfce4ac6178cb455389a604210b8f1475e6c463b78df4e918"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "3c912c14c9788ef6614131390beda03a", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 8594, "upload_time": "2020-05-04T10:59:21", "upload_time_iso_8601": "2020-05-04T10:59:21.810629Z", "url": "https://files.pythonhosted.org/packages/57/4e/e12cda7916ba648f915cd0722f1f8f69a874d08acf8bc0ac6a1ca9b4cc49/time_machine-1.0.0b1-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e305d45bdd0621944dbfff901c80a27", "sha256": "c7b9e5575ee9c3a2230bd3c6d87d990977f093a7e55dd65a465275691b56f17f"}, "downloads": -1, "filename": "time-machine-1.0.0b1.tar.gz", "has_sig": true, "md5_digest": "2e305d45bdd0621944dbfff901c80a27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20150, "upload_time": "2020-05-04T10:59:22", "upload_time_iso_8601": "2020-05-04T10:59:22.952504Z", "url": "https://files.pythonhosted.org/packages/86/40/9d69df7255685fb4afa45ef4f37773a261e40fd2de48c3fc8f1503653a5b/time-machine-1.0.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6b157d8af260cd56e189b2a53ce5a14", "sha256": "a5c1ced4401385398be30df99df08680de635ead1860e17f96bd5d08b660e90f"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "a6b157d8af260cd56e189b2a53ce5a14", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 8617, "upload_time": "2020-05-04T10:59:18", "upload_time_iso_8601": "2020-05-04T10:59:18.240610Z", "url": "https://files.pythonhosted.org/packages/7d/5f/e366fce45c51dd2073bc5856d4115ab79301e7a7297308210a230958b054/time_machine-1.0.0b1-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70231fd66c3089238b30cc1eb794fca2", "sha256": "4e3eb4a16421d9f961093c382ae6cbb1dc3f8b6ad29513e4c161b14a1d25d53b"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "70231fd66c3089238b30cc1eb794fca2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6", "size": 8625, "upload_time": "2020-05-04T10:59:20", "upload_time_iso_8601": "2020-05-04T10:59:20.602586Z", "url": "https://files.pythonhosted.org/packages/5d/1b/0af304a114688e277963b416b13e31ee66ffd48f55ffac63867e5556fa49/time_machine-1.0.0b1-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c912c14c9788ef6614131390beda03a", "sha256": "e997e0a81cc3490dfce4ac6178cb455389a604210b8f1475e6c463b78df4e918"}, "downloads": -1, "filename": "time_machine-1.0.0b1-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": true, "md5_digest": "3c912c14c9788ef6614131390beda03a", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6", "size": 8594, "upload_time": "2020-05-04T10:59:21", "upload_time_iso_8601": "2020-05-04T10:59:21.810629Z", "url": "https://files.pythonhosted.org/packages/57/4e/e12cda7916ba648f915cd0722f1f8f69a874d08acf8bc0ac6a1ca9b4cc49/time_machine-1.0.0b1-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e305d45bdd0621944dbfff901c80a27", "sha256": "c7b9e5575ee9c3a2230bd3c6d87d990977f093a7e55dd65a465275691b56f17f"}, "downloads": -1, "filename": "time-machine-1.0.0b1.tar.gz", "has_sig": true, "md5_digest": "2e305d45bdd0621944dbfff901c80a27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20150, "upload_time": "2020-05-04T10:59:22", "upload_time_iso_8601": "2020-05-04T10:59:22.952504Z", "url": "https://files.pythonhosted.org/packages/86/40/9d69df7255685fb4afa45ef4f37773a261e40fd2de48c3fc8f1503653a5b/time-machine-1.0.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:31 2020"}