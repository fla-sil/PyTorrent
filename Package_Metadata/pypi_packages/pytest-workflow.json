{"info": {"author": "Leiden University Medical Center", "author_email": "sasc@lumc.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pytest", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "===============\npytest-workflow\n===============\n\n.. Badges have empty alts. So nothing shows up if they do not work.\n.. This fixes readthedocs issues with badges.\n.. image:: https://img.shields.io/pypi/v/pytest-workflow.svg\n  :target: https://pypi.org/project/pytest-workflow/\n  :alt:\n\n.. image:: https://img.shields.io/conda/v/conda-forge/pytest-workflow.svg\n  :target: https://anaconda.org/conda-forge/pytest-workflow\n  :alt:\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-workflow.svg\n  :target: https://pypi.org/project/pytest-workflow/\n  :alt:\n\n.. image:: https://img.shields.io/pypi/l/pytest-workflow.svg\n  :target: https://github.com/LUMC/pytest-workflow/blob/master/LICENSE\n  :alt:\n\n.. image:: https://travis-ci.org/LUMC/pytest-workflow.svg?branch=develop\n  :target: https://travis-ci.org/LUMC/pytest-workflow\n  :alt:\n\n.. image:: https://codecov.io/gh/LUMC/pytest-workflow/branch/develop/graph/badge.svg\n  :target: https://codecov.io/gh/LUMC/pytest-workflow\n  :alt:\n\npytest-workflow is a pytest plugin that aims to make pipeline/workflow testing easy\nby using yaml files for the test configuration.\n\nFor our complete documentation checkout our\n`readthedocs page <https://pytest-workflow.readthedocs.io/>`_.\n\n\nInstallation\n============\nPytest-workflow requires Python 3.5 or higher. It is tested on Python 3.5, 3.6,\n3.7 and 3.8. Python 2 is not supported.\n\n- Make sure your virtual environment is activated.\n- Install using pip ``pip install pytest-workflow``\n- Create a ``tests`` directory in the root of your repository.\n- Create your test yaml files in the ``tests`` directory.\n\nPytest-workflow is also available as a `conda package on conda-forge\n<https://anaconda.org/conda-forge/pytest-workflow>`_. Follow\n`these instructions \n<http://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge>`_ \nto set up channels properly in order to use conda-forge. Alternatively,\nyou can `set up the channels correctly for use with bioconda \n<https://bioconda.github.io/index.html#set-up-channels>`_. After that ``conda\ninstall pytest-workflow`` can be used to install pytest-workflow. \n\nQuickstart\n==========\n\nRun ``pytest`` from an environment with pytest-workflow installed.\nPytest will automatically gather files in the ``tests`` directory starting with\n``test`` and ending in ``.yaml`` or ``.yml``.\n\nTo check the progress of a workflow while it is running you can use ``tail -f``\non the ``stdout`` or ``stderr`` file of the workflow. The locations of these\nfiles are reported in the log as soon as a workflow is started.\n\nFor debugging pipelines using the ``--kwd`` or ``--keep-workflow-wd`` flag  is\nrecommended. This will keep the workflow directory and logs after the test run\nso it is possible to check where the pipeline crashed. The ``-v`` flag can come\nin handy as well as it gives a complete overview of succeeded and failed tests.\n\nBelow is an example of a YAML file that defines a test:\n\n.. code-block:: yaml\n\n  - name: Touch a file\n    command: touch test.file\n    files:\n      - path: test.file\n\nThis will run ``touch test.file`` and check afterwards if a file with path:\n``test.file`` is present. It will also check if the ``command`` has exited\nwith exit code ``0``, which is the only default test that is run. Testing\nworkflows that exit with another exit code is also possible. Several other\npredefined tests as well as custom tests are possible.\n\n.. code-block:: yaml\n\n  - name: moo file                     # The name of the workflow (required)\n    command: bash moo_workflow.sh      # The command to execute the workflow (required)\n    files:                             # A list of files to check (optional)\n      - path: \"moo.txt\"                # File path. (Required for each file)\n        contains:                      # A list of strings that should be in the file (optional)\n          - \"moo\"\n        must_not_contain:              # A list of strings that should NOT be in the file (optional)\n          - \"Cock a doodle doo\"\n        md5sum: e583af1f8b00b53cda87ae9ead880224   # Md5sum of the file (optional)\n\n  - name: simple echo                  # A second workflow. Notice the starting `-` which means\n    command: \"echo moo\"                # that workflow items are in a list. You can add as much workflows as you want\n    files:\n      - path: \"moo.txt\"\n        should_exist: false            # Whether a file should be there or not. (optional, if not given defaults to true)\n    stdout:                            # Options for testing stdout (optional)\n      contains:                        # List of strings which should be in stdout (optional)\n        - \"moo\"\n      must_not_contain:                # List of strings that should NOT be in stout (optional)\n        - \"Cock a doodle doo\"\n\n  - name: mission impossible           # Also failing workflows can be tested\n    tags:                              # A list of tags that can be used to select which test\n      - should fail                    # is run with pytest using the `--tag` flag.\n    command: bash impossible.sh\n    exit_code: 2                       # What the exit code should be (optional, if not given defaults to 0)\n    files:\n      - path: \"fail.log\"               # Multiple files can be tested for each workflow\n      - path: \"TomCruise.txt.gz\"       # Gzipped files can also be searched, provided their extension is '.gz'\n        contains:\n          - \"starring\"\n    stderr:                            # Options for testing stderr (optional)\n      contains:                        # A list of strings which should be in stderr (optional)\n        - \"BSOD error, please contact the IT crowd\"\n      must_not_contain:                # A list of strings which should NOT be in stderr (optional)\n        - \"Mission accomplished!\"\n\nDocumentation for more advanced use cases including the custom tests can be\nfound on our `readthedocs page <https://pytest-workflow.readthedocs.io/>`_.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LUMC/pytest-workflow", "keywords": "pytest workflow pipeline yaml yml wdl cromwell snakemake", "license": "AGPL-3.0-or-later", "maintainer": "", "maintainer_email": "", "name": "pytest-workflow", "package_url": "https://pypi.org/project/pytest-workflow/", "platform": "", "project_url": "https://pypi.org/project/pytest-workflow/", "project_urls": {"Homepage": "https://github.com/LUMC/pytest-workflow"}, "release_url": "https://pypi.org/project/pytest-workflow/1.3.0/", "requires_dist": ["pytest (>=5.4.0)", "pyyaml", "jsonschema"], "requires_python": ">=3.6", "summary": "A pytest plugin for configuring workflow/pipeline tests using YAML files", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/pytest-workflow/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2739091d0faf02ff0b2b882891f3f1e8636601cd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d776f726b666c6f772e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/pytest-workflow\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2834d035bda1a6ca9cd424c4846959575c5cb728/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f762f636f6e64612d666f7267652f7079746573742d776f726b666c6f772e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-workflow/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cdcfd907d991f23ab4b8826321cd2272f1a5f24/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d776f726b666c6f772e737667\"></a>\n<a href=\"https://github.com/LUMC/pytest-workflow/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55f978b8c5b850528f4fe4219b78fc34e3c26c12/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079746573742d776f726b666c6f772e737667\"></a>\n<a href=\"https://travis-ci.org/LUMC/pytest-workflow\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1a3168c91b7e60054aeff35eca37dcf42ec3a8f/68747470733a2f2f7472617669732d63692e6f72672f4c554d432f7079746573742d776f726b666c6f772e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://codecov.io/gh/LUMC/pytest-workflow\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08a798eabfbce1cda0ff44398ccf83139465d8fd/68747470733a2f2f636f6465636f762e696f2f67682f4c554d432f7079746573742d776f726b666c6f772f6272616e63682f646576656c6f702f67726170682f62616467652e737667\"></a>\n<p>pytest-workflow is a pytest plugin that aims to make pipeline/workflow testing easy\nby using yaml files for the test configuration.</p>\n<p>For our complete documentation checkout our\n<a href=\"https://pytest-workflow.readthedocs.io/\" rel=\"nofollow\">readthedocs page</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Pytest-workflow requires Python 3.5 or higher. It is tested on Python 3.5, 3.6,\n3.7 and 3.8. Python 2 is not supported.</p>\n<ul>\n<li>Make sure your virtual environment is activated.</li>\n<li>Install using pip <tt>pip install <span class=\"pre\">pytest-workflow</span></tt></li>\n<li>Create a <tt>tests</tt> directory in the root of your repository.</li>\n<li>Create your test yaml files in the <tt>tests</tt> directory.</li>\n</ul>\n<p>Pytest-workflow is also available as a <a href=\"https://anaconda.org/conda-forge/pytest-workflow\" rel=\"nofollow\">conda package on conda-forge</a>. Follow\n<a href=\"http://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge\" rel=\"nofollow\">these instructions</a>\nto set up channels properly in order to use conda-forge. Alternatively,\nyou can <a href=\"https://bioconda.github.io/index.html#set-up-channels\" rel=\"nofollow\">set up the channels correctly for use with bioconda</a>. After that <tt>conda\ninstall <span class=\"pre\">pytest-workflow</span></tt> can be used to install pytest-workflow.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Run <tt>pytest</tt> from an environment with pytest-workflow installed.\nPytest will automatically gather files in the <tt>tests</tt> directory starting with\n<tt>test</tt> and ending in <tt>.yaml</tt> or <tt>.yml</tt>.</p>\n<p>To check the progress of a workflow while it is running you can use <tt>tail <span class=\"pre\">-f</span></tt>\non the <tt>stdout</tt> or <tt>stderr</tt> file of the workflow. The locations of these\nfiles are reported in the log as soon as a workflow is started.</p>\n<p>For debugging pipelines using the <tt><span class=\"pre\">--kwd</span></tt> or <tt><span class=\"pre\">--keep-workflow-wd</span></tt> flag  is\nrecommended. This will keep the workflow directory and logs after the test run\nso it is possible to check where the pipeline crashed. The <tt><span class=\"pre\">-v</span></tt> flag can come\nin handy as well as it gives a complete overview of succeeded and failed tests.</p>\n<p>Below is an example of a YAML file that defines a test:</p>\n<pre><span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Touch a file</span>\n  <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">touch test.file</span>\n  <span class=\"nt\">files</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test.file</span>\n</pre>\n<p>This will run <tt>touch test.file</tt> and check afterwards if a file with path:\n<tt>test.file</tt> is present. It will also check if the <tt>command</tt> has exited\nwith exit code <tt>0</tt>, which is the only default test that is run. Testing\nworkflows that exit with another exit code is also possible. Several other\npredefined tests as well as custom tests are possible.</p>\n<pre><span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">moo file</span>                     <span class=\"c1\"># The name of the workflow (required)</span>\n  <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bash moo_workflow.sh</span>      <span class=\"c1\"># The command to execute the workflow (required)</span>\n  <span class=\"nt\">files</span><span class=\"p\">:</span>                             <span class=\"c1\"># A list of files to check (optional)</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"moo.txt\"</span>                <span class=\"c1\"># File path. (Required for each file)</span>\n      <span class=\"nt\">contains</span><span class=\"p\">:</span>                      <span class=\"c1\"># A list of strings that should be in the file (optional)</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"s\">\"moo\"</span>\n      <span class=\"nt\">must_not_contain</span><span class=\"p\">:</span>              <span class=\"c1\"># A list of strings that should NOT be in the file (optional)</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"s\">\"Cock</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">doodle</span><span class=\"nv\"> </span><span class=\"s\">doo\"</span>\n      <span class=\"nt\">md5sum</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">e583af1f8b00b53cda87ae9ead880224</span>   <span class=\"c1\"># Md5sum of the file (optional)</span>\n\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">simple echo</span>                  <span class=\"c1\"># A second workflow. Notice the starting `-` which means</span>\n  <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"echo</span><span class=\"nv\"> </span><span class=\"s\">moo\"</span>                <span class=\"c1\"># that workflow items are in a list. You can add as much workflows as you want</span>\n  <span class=\"nt\">files</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"moo.txt\"</span>\n      <span class=\"nt\">should_exist</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">false</span>            <span class=\"c1\"># Whether a file should be there or not. (optional, if not given defaults to true)</span>\n  <span class=\"nt\">stdout</span><span class=\"p\">:</span>                            <span class=\"c1\"># Options for testing stdout (optional)</span>\n    <span class=\"nt\">contains</span><span class=\"p\">:</span>                        <span class=\"c1\"># List of strings which should be in stdout (optional)</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"moo\"</span>\n    <span class=\"nt\">must_not_contain</span><span class=\"p\">:</span>                <span class=\"c1\"># List of strings that should NOT be in stout (optional)</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"Cock</span><span class=\"nv\"> </span><span class=\"s\">a</span><span class=\"nv\"> </span><span class=\"s\">doodle</span><span class=\"nv\"> </span><span class=\"s\">doo\"</span>\n\n<span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">mission impossible</span>           <span class=\"c1\"># Also failing workflows can be tested</span>\n  <span class=\"nt\">tags</span><span class=\"p\">:</span>                              <span class=\"c1\"># A list of tags that can be used to select which test</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">should fail</span>                    <span class=\"c1\"># is run with pytest using the `--tag` flag.</span>\n  <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bash impossible.sh</span>\n  <span class=\"nt\">exit_code</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">2</span>                       <span class=\"c1\"># What the exit code should be (optional, if not given defaults to 0)</span>\n  <span class=\"nt\">files</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"fail.log\"</span>               <span class=\"c1\"># Multiple files can be tested for each workflow</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"TomCruise.txt.gz\"</span>       <span class=\"c1\"># Gzipped files can also be searched, provided their extension is '.gz'</span>\n      <span class=\"nt\">contains</span><span class=\"p\">:</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"s\">\"starring\"</span>\n  <span class=\"nt\">stderr</span><span class=\"p\">:</span>                            <span class=\"c1\"># Options for testing stderr (optional)</span>\n    <span class=\"nt\">contains</span><span class=\"p\">:</span>                        <span class=\"c1\"># A list of strings which should be in stderr (optional)</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"BSOD</span><span class=\"nv\"> </span><span class=\"s\">error,</span><span class=\"nv\"> </span><span class=\"s\">please</span><span class=\"nv\"> </span><span class=\"s\">contact</span><span class=\"nv\"> </span><span class=\"s\">the</span><span class=\"nv\"> </span><span class=\"s\">IT</span><span class=\"nv\"> </span><span class=\"s\">crowd\"</span>\n    <span class=\"nt\">must_not_contain</span><span class=\"p\">:</span>                <span class=\"c1\"># A list of strings which should NOT be in stderr (optional)</span>\n      <span class=\"p-Indicator\">-</span> <span class=\"s\">\"Mission</span><span class=\"nv\"> </span><span class=\"s\">accomplished!\"</span>\n</pre>\n<p>Documentation for more advanced use cases including the custom tests can be\nfound on our <a href=\"https://pytest-workflow.readthedocs.io/\" rel=\"nofollow\">readthedocs page</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7058380, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "df469b81bd1820932974f5fd5da8e1fa", "sha256": "cf5d1aeea7f13bd8ab3197c5dccb47c0153d2bf1d7d77806201da3def84f1196"}, "downloads": -1, "filename": "pytest_workflow-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df469b81bd1820932974f5fd5da8e1fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27500, "upload_time": "2018-12-21T14:53:45", "upload_time_iso_8601": "2018-12-21T14:53:45.050646Z", "url": "https://files.pythonhosted.org/packages/3e/b7/1c02f730615ec5ca5ad9d7d86e65a5c7ba40754aa25d36830ce209cae2d8/pytest_workflow-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "648b1515d4f3d8312d6ee47a4f76238f", "sha256": "040942a4e0b8c330b110a6085b7d36fe425332385df6017183cc4306c6f925a2"}, "downloads": -1, "filename": "pytest-workflow-0.1.0.tar.gz", "has_sig": false, "md5_digest": "648b1515d4f3d8312d6ee47a4f76238f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22984, "upload_time": "2018-12-21T14:53:47", "upload_time_iso_8601": "2018-12-21T14:53:47.202538Z", "url": "https://files.pythonhosted.org/packages/d2/70/8491507eb5d9f84e6690341e4badb41c7d259ef881558e6ae280729916b7/pytest-workflow-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "82a442d563c475707cc587074245b025", "sha256": "2cf7486cda27de0b8da1ef2d07e84be41e7e2308d1c0b554812793f19d42e571"}, "downloads": -1, "filename": "pytest_workflow-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82a442d563c475707cc587074245b025", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 26839, "upload_time": "2019-01-04T08:55:17", "upload_time_iso_8601": "2019-01-04T08:55:17.579586Z", "url": "https://files.pythonhosted.org/packages/11/81/a9ef0a40820d678290d58a595fcfd99814cf2a1b2e22af434ad259e814e7/pytest_workflow-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7c4973d810544bcdb9475bcb8554dd3", "sha256": "1b87b32f1c33b52bca4e0f3cb863bdffb8f350ca1261f3c2c8ae1d8c54638458"}, "downloads": -1, "filename": "pytest-workflow-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e7c4973d810544bcdb9475bcb8554dd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11397, "upload_time": "2019-01-04T08:55:19", "upload_time_iso_8601": "2019-01-04T08:55:19.733238Z", "url": "https://files.pythonhosted.org/packages/f6/67/7c9376ff812d77a9c15b84ce19ef9dac69e9e56f2ed7e53d39be374a6d56/pytest-workflow-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b45f760f5328ba32f82104446b9d0715", "sha256": "9d5e5f5b1e81bcec5c189827107cef44280cd3ea3cc322d1347565a878feb167"}, "downloads": -1, "filename": "pytest_workflow-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b45f760f5328ba32f82104446b9d0715", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 30333, "upload_time": "2019-01-17T15:04:19", "upload_time_iso_8601": "2019-01-17T15:04:19.614671Z", "url": "https://files.pythonhosted.org/packages/b9/18/69378a2547cdea36311fd364a53d0c1f5ed2d5be582285f6030ab1ac7b7a/pytest_workflow-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "181b7f10fb56997fada90a5ef8c0f52b", "sha256": "9e44fefb916dd5e699b40920c56f89e1662145f569c98fba5345e10047df7ea0"}, "downloads": -1, "filename": "pytest-workflow-0.3.0.tar.gz", "has_sig": false, "md5_digest": "181b7f10fb56997fada90a5ef8c0f52b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14459, "upload_time": "2019-01-17T15:04:21", "upload_time_iso_8601": "2019-01-17T15:04:21.511495Z", "url": "https://files.pythonhosted.org/packages/ad/de/24f18cf0d25b0019940c1b47566a48c751367be4c0e66d3c5d929c9f493b/pytest-workflow-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "08587b48b1df096e446ad3fdc9b10936", "sha256": "a636ca70ec539767057941130e2783230397e932ebd7989ef4c9d8e5b629f936"}, "downloads": -1, "filename": "pytest_workflow-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "08587b48b1df096e446ad3fdc9b10936", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 31919, "upload_time": "2019-01-23T15:01:19", "upload_time_iso_8601": "2019-01-23T15:01:19.258599Z", "url": "https://files.pythonhosted.org/packages/c8/e1/376aeb6318e7d0a6533b21d53396e876f14837231c274462001cecaa1ca2/pytest_workflow-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "056e8a7e27f62fd1d1d4be186dd1119e", "sha256": "9332a0fad51c61e307d672fbffea7916c84192b9ff2da9727261d86b618c6c40"}, "downloads": -1, "filename": "pytest-workflow-0.4.0.tar.gz", "has_sig": false, "md5_digest": "056e8a7e27f62fd1d1d4be186dd1119e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16070, "upload_time": "2019-01-23T15:01:21", "upload_time_iso_8601": "2019-01-23T15:01:21.267328Z", "url": "https://files.pythonhosted.org/packages/e8/bb/4b21ad68a1bb443377d24de5555ef45aafdf3b3de473dfadd5b2f0a65de3/pytest-workflow-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "d1a8f7c9ff2cc6d97f338bab0b93a87f", "sha256": "bdd2c74af8fbe125f9fbced214c68f566bdf79cee6e17cbf080e2c98204a9e83"}, "downloads": -1, "filename": "pytest_workflow-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1a8f7c9ff2cc6d97f338bab0b93a87f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 32271, "upload_time": "2019-02-06T14:32:37", "upload_time_iso_8601": "2019-02-06T14:32:37.354783Z", "url": "https://files.pythonhosted.org/packages/4f/06/ee602f2e45cbd66fae8bd7441d9eb071fc86c05765a0cb608edbfee4d516/pytest_workflow-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75d6c46ef8db3fe6dcf7f6d0eeae413c", "sha256": "b5c65cb5e55fa61d1c71555837eab9261bea095d1186b5ace3e4ec94873737d0"}, "downloads": -1, "filename": "pytest-workflow-1.0.0.tar.gz", "has_sig": false, "md5_digest": "75d6c46ef8db3fe6dcf7f6d0eeae413c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16313, "upload_time": "2019-02-06T14:32:39", "upload_time_iso_8601": "2019-02-06T14:32:39.239881Z", "url": "https://files.pythonhosted.org/packages/46/c6/6ffd3737db1ca5184ad3751cdc5e754c5e413dd0bd1e0359a0852f3740ad/pytest-workflow-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "260404d1d95dc9006868fcf4f2c67302", "sha256": "662ee37f6eb2bdae934ebe98ecaf061e58f8bee8c7d1e45a577397074f3bb32e"}, "downloads": -1, "filename": "pytest_workflow-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "260404d1d95dc9006868fcf4f2c67302", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33422, "upload_time": "2019-02-13T16:55:51", "upload_time_iso_8601": "2019-02-13T16:55:51.520903Z", "url": "https://files.pythonhosted.org/packages/89/26/55931400e57eba7f4e79e2989e6d45cf2afb14a4cd7bcca84f6a5429a607/pytest_workflow-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8a0471177b7496b7639c414bdadb337", "sha256": "c855171d1a68801e6cb61befb91faf1c33f4713c36a3e18e40081b0f85e41cd5"}, "downloads": -1, "filename": "pytest-workflow-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e8a0471177b7496b7639c414bdadb337", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17799, "upload_time": "2019-02-13T16:55:53", "upload_time_iso_8601": "2019-02-13T16:55:53.466574Z", "url": "https://files.pythonhosted.org/packages/ca/0f/3d6204c55576720363a1968177d1f986a2670c6b0ea51a03d1694bea4f55/pytest-workflow-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "97d4140eecb972965003c7632f6628a0", "sha256": "85b051af63bbbd99fc8857e998b689a7e1ed9f8d20c98a83358766ce3092ac17"}, "downloads": -1, "filename": "pytest_workflow-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "97d4140eecb972965003c7632f6628a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33732, "upload_time": "2019-03-05T10:31:05", "upload_time_iso_8601": "2019-03-05T10:31:05.516754Z", "url": "https://files.pythonhosted.org/packages/c3/8f/5d6f0138f267e9a7f483f48e6553daa56f5447555853f37004ae476f6000/pytest_workflow-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70d7727c92353d5598d596c5e183dca6", "sha256": "a8f56b43ec01184c50831261d90ae00c6c8ed7ed6e012f6fe1b01b9063d87c9a"}, "downloads": -1, "filename": "pytest-workflow-1.1.1.tar.gz", "has_sig": false, "md5_digest": "70d7727c92353d5598d596c5e183dca6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17873, "upload_time": "2019-03-05T10:31:07", "upload_time_iso_8601": "2019-03-05T10:31:07.147747Z", "url": "https://files.pythonhosted.org/packages/40/c6/05e586f9a7f87d940727a43d84acecfcf76bd57c053351621afe7ab5d444/pytest-workflow-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "a2c2fda518f8e0b0e21b28537c229513", "sha256": "b16335579e933e86afd9e63afbd28975ecdfbd2f6d3076596fdd5f8258f782b6"}, "downloads": -1, "filename": "pytest_workflow-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a2c2fda518f8e0b0e21b28537c229513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 33873, "upload_time": "2019-03-07T07:58:32", "upload_time_iso_8601": "2019-03-07T07:58:32.799517Z", "url": "https://files.pythonhosted.org/packages/30/d1/9892dd7af42aec303622cf08407d0b9401a547d7844de0b35b6cdd253381/pytest_workflow-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8af8b88b234c30a914a4d1f319f8122", "sha256": "aedc7732abe473b710423137263611f4b07adf72170c215ea8643c6efd7a91d5"}, "downloads": -1, "filename": "pytest-workflow-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b8af8b88b234c30a914a4d1f319f8122", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18360, "upload_time": "2019-03-07T07:58:34", "upload_time_iso_8601": "2019-03-07T07:58:34.607866Z", "url": "https://files.pythonhosted.org/packages/13/b4/d2a2c145a6e959ec972f182fc9d50388ac38a45624beabb5769747c1e17d/pytest-workflow-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "7a90837d9eb99a29b8ce931f84bcbf4c", "sha256": "a571c986167e565747fd031e24d30296f621a07b4c8cde19c93f0c7fcb84346d"}, "downloads": -1, "filename": "pytest_workflow-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7a90837d9eb99a29b8ce931f84bcbf4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 34346, "upload_time": "2019-04-04T09:27:55", "upload_time_iso_8601": "2019-04-04T09:27:55.496083Z", "url": "https://files.pythonhosted.org/packages/69/17/980982d973d31257724bb73dc72d6d1cdc1d1d40ab104d978cf3efe450f6/pytest_workflow-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f35d82256a105d337472e8b8bacfef4a", "sha256": "1ad067eb2d4b17a2815f4510e2aa23089d8f6824eacbfe0068d42ffce87c3c03"}, "downloads": -1, "filename": "pytest-workflow-1.2.0.tar.gz", "has_sig": false, "md5_digest": "f35d82256a105d337472e8b8bacfef4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18381, "upload_time": "2019-04-04T09:27:59", "upload_time_iso_8601": "2019-04-04T09:27:59.084078Z", "url": "https://files.pythonhosted.org/packages/63/7d/c2ab031d524feeef727a8e6c7e791d7951606c66256916c31cb89299d425/pytest-workflow-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "549dfd9b2b258157d7117267534eb12c", "sha256": "e52057ddf923eda268ab91b1a7bce277d8fe8ca1b53f55f6c479180537207b7f"}, "downloads": -1, "filename": "pytest_workflow-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "549dfd9b2b258157d7117267534eb12c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 34446, "upload_time": "2019-06-06T13:46:02", "upload_time_iso_8601": "2019-06-06T13:46:02.813383Z", "url": "https://files.pythonhosted.org/packages/64/e6/c0bd0349936f9b89f2a07a73f605f5a4fdb757530e871ae80585c5d253be/pytest_workflow-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1839a44f44793c87d992eb7cc45b5e4f", "sha256": "093fcbf20c51fe56428a9c09eb9c8b1c1e480b98b0e93a5aecc9ef4b2ffe648d"}, "downloads": -1, "filename": "pytest-workflow-1.2.1.tar.gz", "has_sig": false, "md5_digest": "1839a44f44793c87d992eb7cc45b5e4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18455, "upload_time": "2019-06-06T13:46:04", "upload_time_iso_8601": "2019-06-06T13:46:04.668422Z", "url": "https://files.pythonhosted.org/packages/3c/81/b37d710b4bcf569cca263dd2a8a9f45a177f8cdc79726138e2253d2a3cdb/pytest-workflow-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "5aea44afb442dba06206d8c724545cf7", "sha256": "b3607b47fb931c765aef09ba931f54bc68792e8fd750f75ec36413c71c5a11f5"}, "downloads": -1, "filename": "pytest_workflow-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5aea44afb442dba06206d8c724545cf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 34735, "upload_time": "2019-11-07T13:19:20", "upload_time_iso_8601": "2019-11-07T13:19:20.440385Z", "url": "https://files.pythonhosted.org/packages/45/f3/48462937578b70fe823e87a5879647e0847c232c5c67c696a6dab4f5ec6f/pytest_workflow-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3760d9ef303eed072d88701e30cc96ec", "sha256": "e4dc487e6ea032ab6f6c4a02561c13a07eac07d153a18dfc68a542107a650076"}, "downloads": -1, "filename": "pytest-workflow-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3760d9ef303eed072d88701e30cc96ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 30671, "upload_time": "2019-11-07T13:19:22", "upload_time_iso_8601": "2019-11-07T13:19:22.134363Z", "url": "https://files.pythonhosted.org/packages/d2/09/f86e088e6015804c78ac5088403caa940062bbdb208e6b14f2e47902da85/pytest-workflow-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "033666ce79cb6f94a714857527c95822", "sha256": "0690d4d9d5b366fd94e6d923fe1c1c5ded92fadb175d41718f8b412515f82ddc"}, "downloads": -1, "filename": "pytest_workflow-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "033666ce79cb6f94a714857527c95822", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 35302, "upload_time": "2020-02-17T14:39:50", "upload_time_iso_8601": "2020-02-17T14:39:50.857828Z", "url": "https://files.pythonhosted.org/packages/d6/dc/60727f77ab72521c5a1c3e523610d6732147f6ec0c326a312c797c4d1a7b/pytest_workflow-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4764d653b59bf477e33a91195a914ab3", "sha256": "13cbc74ff66bb1c6901518c3303d5171461fb83d119b305130ce90bbc17bb1d8"}, "downloads": -1, "filename": "pytest-workflow-1.2.3.tar.gz", "has_sig": false, "md5_digest": "4764d653b59bf477e33a91195a914ab3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 32078, "upload_time": "2020-02-17T14:39:52", "upload_time_iso_8601": "2020-02-17T14:39:52.980978Z", "url": "https://files.pythonhosted.org/packages/e0/fe/72ae0f6145ac1da722239a73a915cd57812c18d9e5c127e77d5f2c4f8118/pytest-workflow-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "63ccd7c8e247181a9cde0f577612f79e", "sha256": "7fe314203c7d0c3ccaf45bdbf0df71a978157ed19487b90ffdaa18c7a46743d0"}, "downloads": -1, "filename": "pytest_workflow-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63ccd7c8e247181a9cde0f577612f79e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36214, "upload_time": "2020-04-20T08:23:43", "upload_time_iso_8601": "2020-04-20T08:23:43.478295Z", "url": "https://files.pythonhosted.org/packages/23/a8/69acaaf7a663bb99589f668997dc4270d711a6eeb98e9b01a47606a75315/pytest_workflow-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9117d657a7a79e8e12cd819e3bc873e8", "sha256": "b83a3e7a36976d35fa33c76dec3c38545c91c8276bc24d9ec44b95418a07ab58"}, "downloads": -1, "filename": "pytest-workflow-1.3.0.tar.gz", "has_sig": false, "md5_digest": "9117d657a7a79e8e12cd819e3bc873e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33126, "upload_time": "2020-04-20T08:23:45", "upload_time_iso_8601": "2020-04-20T08:23:45.403164Z", "url": "https://files.pythonhosted.org/packages/35/e9/7f13c0b229501583824d7f034db416562a11fbfd5871f797215bcca48ad1/pytest-workflow-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63ccd7c8e247181a9cde0f577612f79e", "sha256": "7fe314203c7d0c3ccaf45bdbf0df71a978157ed19487b90ffdaa18c7a46743d0"}, "downloads": -1, "filename": "pytest_workflow-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63ccd7c8e247181a9cde0f577612f79e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36214, "upload_time": "2020-04-20T08:23:43", "upload_time_iso_8601": "2020-04-20T08:23:43.478295Z", "url": "https://files.pythonhosted.org/packages/23/a8/69acaaf7a663bb99589f668997dc4270d711a6eeb98e9b01a47606a75315/pytest_workflow-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9117d657a7a79e8e12cd819e3bc873e8", "sha256": "b83a3e7a36976d35fa33c76dec3c38545c91c8276bc24d9ec44b95418a07ab58"}, "downloads": -1, "filename": "pytest-workflow-1.3.0.tar.gz", "has_sig": false, "md5_digest": "9117d657a7a79e8e12cd819e3bc873e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33126, "upload_time": "2020-04-20T08:23:45", "upload_time_iso_8601": "2020-04-20T08:23:45.403164Z", "url": "https://files.pythonhosted.org/packages/35/e9/7f13c0b229501583824d7f034db416562a11fbfd5871f797215bcca48ad1/pytest-workflow-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:35 2020"}