{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "ptracer -- a library for ptrace-based tracing of Python programs\n================================================================\n\n.. image:: https://travis-ci.org/pinterest/ptracer.svg?branch=master\n    :target: https://travis-ci.org/pinterest/ptracer\n\nPtracer is a library providing on-demand system call tracing in Python\nprograms.\n\n\nBasic Usage\n-----------\n\n.. code-block:: python\n\n    import traceback\n    import ptracer\n\n    def callback(syscall):\n        print('{}({}) -> {}'.format(\n            syscall.name,\n            ', '.join(repr(arg.value) for arg in syscall.args),\n            syscall.result.text))\n        print('Traceback: ')\n        print(''.join(traceback.format_list(syscall.traceback)))\n\n    with ptracer.context(callback):\n        open('/dev/null', 'wb')\n\n\nFiltering\n---------\n\nPtracer allows elaborate syscall filtering via the *filter* argument:\n\n.. code-block:: python\n\n    flt = [\n        ptracer.SysCallPattern(\n            name='open',\n            args=[\n                re.compile(b'/tmp/.*'),\n                lambda arg: arg.value & os.O_WRONLY\n            ],\n            result=lambda res: res.value > 0\n        )\n    ]\n\n    with ptracer.context(callback, filter=flt):\n        # traced code\n        ...\n\n\nIn the above example, ptracer will invoke the callback only for successful\nattempts to open files in the \"/tmp\" directory for writing.\n\n\nDocumentation\n-------------\n\nThe documentation is available on\n`ptracer.readthedocs.io <https://ptracer.readthedocs.io/>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "ptracer", "package_url": "https://pypi.org/project/ptracer/", "platform": "POSIX", "project_url": "https://pypi.org/project/ptracer/", "project_urls": null, "release_url": "https://pypi.org/project/ptracer/0.5/", "requires_dist": null, "requires_python": "", "summary": "On-demand system call tracing for Python programs.", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pinterest/ptracer\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pinterest/ptracer.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e348c1acca976d51ed3726eec6712c72e8d9074b/68747470733a2f2f7472617669732d63692e6f72672f70696e7465726573742f707472616365722e7376673f6272616e63683d6d6173746572\"></a>\n<p>Ptracer is a library providing on-demand system call tracing in Python\nprograms.</p>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ptracer</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">(</span><span class=\"si\">{}</span><span class=\"s1\">) -&gt; </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">syscall</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">syscall</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">),</span>\n        <span class=\"n\">syscall</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Traceback: '</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_list</span><span class=\"p\">(</span><span class=\"n\">syscall</span><span class=\"o\">.</span><span class=\"n\">traceback</span><span class=\"p\">)))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ptracer</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">):</span>\n    <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/dev/null'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"filtering\">\n<h2>Filtering</h2>\n<p>Ptracer allows elaborate syscall filtering via the <em>filter</em> argument:</p>\n<pre><span class=\"n\">flt</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">ptracer</span><span class=\"o\">.</span><span class=\"n\">SysCallPattern</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'open'</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'/tmp/.*'</span><span class=\"p\">),</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">O_WRONLY</span>\n        <span class=\"p\">],</span>\n        <span class=\"n\">result</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">res</span><span class=\"p\">:</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ptracer</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">flt</span><span class=\"p\">):</span>\n    <span class=\"c1\"># traced code</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>In the above example, ptracer will invoke the callback only for successful\nattempts to open files in the \u201c/tmp\u201d directory for writing.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation is available on\n<a href=\"https://ptracer.readthedocs.io/\" rel=\"nofollow\">ptracer.readthedocs.io</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3342601, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "db92e7790b2177492d9feed16a1ee2b4", "sha256": "002524cfb34043c6d6c89ca563cfdeb8ab6db3ebd300b509f6e46dc52d657334"}, "downloads": -1, "filename": "ptracer-0.5.tar.gz", "has_sig": false, "md5_digest": "db92e7790b2177492d9feed16a1ee2b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28578, "upload_time": "2017-11-17T21:20:05", "upload_time_iso_8601": "2017-11-17T21:20:05.477741Z", "url": "https://files.pythonhosted.org/packages/d8/85/193489f6d10aeb240f3ce656a85c9d9b8645ab6b602d68a190cb1f282598/ptracer-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db92e7790b2177492d9feed16a1ee2b4", "sha256": "002524cfb34043c6d6c89ca563cfdeb8ab6db3ebd300b509f6e46dc52d657334"}, "downloads": -1, "filename": "ptracer-0.5.tar.gz", "has_sig": false, "md5_digest": "db92e7790b2177492d9feed16a1ee2b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28578, "upload_time": "2017-11-17T21:20:05", "upload_time_iso_8601": "2017-11-17T21:20:05.477741Z", "url": "https://files.pythonhosted.org/packages/d8/85/193489f6d10aeb240f3ce656a85c9d9b8645ab6b602d68a190cb1f282598/ptracer-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:09 2020"}