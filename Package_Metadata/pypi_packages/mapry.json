{"info": {"author": "Marko Ristin", "author_email": "marko.ristin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": ".. image:: https://raw.githubusercontent.com/Parquery/mapry/master/logo-640x320.png\n   :alt: Mapry\n\n.. image:: https://travis-ci.com/Parquery/mapry.svg?branch=master\n    :target: https://travis-ci.com/Parquery/mapry\n\n.. image:: https://coveralls.io/repos/github/Parquery/mapry/badge.svg?branch=master\n    :target: https://coveralls.io/github/Parquery/mapry\n\n.. image:: https://readthedocs.org/projects/mapry/badge/?version=latest\n    :target: https://mapry.readthedocs.io/en/latest/\n    :alt: Documentation Status\n\n.. image:: https://badge.fury.io/py/mapry.svg\n    :target: https://pypi.org/project/mapry/\n    :alt: PyPI - version\n\n.. image:: https://img.shields.io/pypi/pyversions/mapry.svg\n    :target: https://pypi.org/project/mapry/\n    :alt: PyPI - Python Version\n\nMapry generates polyglot code for de/serializing object graphs from\nJSONable structures.\n\n**Story**. We needed a yet another domain-specific language for internal data\nexchange and configuration of the system. The existing solutions mostly focused\non modeling the configuration as *object trees* in which the data is nested in\nhierarchies with no **cross-references** between the objects.\n\nFor example, think of object trees as JSON objects or arrays. We found this\nstructure to be highly limiting for most of the complex messages and system\nconfigurations. Our use cases required objects in the data to be referenced\namong each other -- instead of object trees we needed **object graphs**.\n\nMoreover, we wanted the serialization itself to be **readable** so that an\noperator can edit it using a simple text editor. JSONable structure offered\nitself as a good fit with a lot of existing tools (JSON and\nYAML modules *etc*.).\n\nHowever, JSON allows only a limited set of data types (numbers, strings, arrays\nand objects/maps). We found that most of our data relied on\n**a richer set of primitives** than provided by standard JSON. This\nextended set includes:\n\n* date,\n* datetime,\n* time of day,\n* time zone,\n* duration and\n* path.\n\nWhile there exist polyglot serializers of object trees (*e.g.*,\n`Protocol Buffers <https://developers.google.com/protocol-buffers/>`_),\nlanguage-specific serializers of object graphs (*e.g.,*\n`Gob in Go <https://golang.org/pkg/encoding/gob/>`_ or\n`Pickle in Python <https://docs.python.org/3/library/pickle.html>`_) or polyglot\nones with a limited set of primitives (*e.g.,*\n`Flatbuffers <https://google.github.io/flatbuffers/>`_), to the best of our\nknowledge there is currently no serializer of **object graphs** that operates\nwith **readable representations** and provides a\n**rich set of primitive data types** consistently **across multiple languages**.\n\nHence we developed Mapry, a generator of polyglot de/serialization code\nfor object graphs from JSONable structures.\n\nThe **schema** of the object graph is stored in a separate JSON file and defines\nall the data types used in the object graph including the object graph itself.\nThe code is generated based on the schema. You define the schema once and\ngenerate code in all supported languages automatically. Schemas can be\nevolved and backward compatibility is supported through optional properties.\n\nSupported languages\n-------------------\nCurrently, Mapry implements the following language bindings:\n\n* C++11, \n* Go 1 and \n* Python 3.\n\nSince the serialization needs to operate in different languages, only the\nintersection of language features is supported. For example, since Go does not\nsupport inheritance or union types, they are not supported in Mapry either.\n\nWorkflow\n--------\nThe following diagram illustrates the workflow.\n\n.. image:: https://raw.githubusercontent.com/Parquery/mapry/master/diagram.png\n\nDocumentation\n=============\n\nThis document gives only a brief summary of Mapry. The full documentation can be\nfound `here <https://mapry.readthedocs.io/en/latest/>`_.\n\nIntroduction\n============\n\nLet us introduce Mapry here by presenting a short example in order to give you a first\nimpression on how the generator can be used. To get the full picture, please consult the\n`documentation <https://mapry.readthedocs.io/en/latest/>`__.\n\nThe schema starts with the name and a description, followed by the\nlanguage-specific settings (specifying the non-standard parts of the code\ngeneration), the definition of the graph structure and finally the definition of the properties of\nthe object graph itself.\n\nHere is an example schema to give you an overview:\n\n.. code-block:: json\n\n    {\n      \"name\": \"Pipeline\",\n      \"description\": \"defines an address book.\",\n      \"cpp\": {\n        \"namespace\": \"book::address\",\n        \"path_as\": \"boost::filesystem::path\",\n        \"optional_as\": \"std::experimental::optional\",\n        \"datetime_library\": \"ctime\"\n      },\n      \"go\": {\n        \"package\": \"address\"\n      },\n      \"py\": {\n        \"module_name\": \"book.address\",\n        \"path_as\": \"pathlib.Path\",\n        \"timezone_as\": \"pytz.timezone\"\n      },\n      \"classes\": [\n        {\n          \"name\": \"Person\",\n          \"description\": \"defines a contactable person.\",\n          \"properties\": {\n            \"full_name\": {\n              \"type\": \"string\",\n              \"description\": \"gives the full name (including middle names).\"\n            },\n            \"birthday\": {\n              \"type\": \"date\",\n              \"description\": \"indicates the birthday in UTC.\"\n            },\n            \"address\": {\n              \"type\": \"Address\",\n              \"description\": \"notes where the person lives.\"\n            }\n          }\n        }\n      ],\n      \"embeds\": [\n        {\n          \"name\": \"Address\",\n          \"description\": \"defines an address.\",\n          \"properties\": {\n            \"text\": {\n              \"type\": \"string\",\n              \"description\": \"gives the full address.\"\n            }\n          }\n        }\n      ],\n      \"properties\": {\n        \"maintainer\": {\n          \"type\": \"Person\",\n          \"description\": \"indicates the maintainer of the address book.\"\n        }\n      }\n    }\n\nOnce you generated the de/serialization code with Mapry, you can use it\nto obtain the object graph from a JSONable.\n\nFor example, assume a JSONable stored in ``/path/to/the/file.json``:\n\n.. code-block:: json\n\n    {\n      \"persons\": {\n        \"alice\": {\n          \"full_name\": \"Alice Doe\",\n          \"birthday\": \"1983-10-24\",\n          \"address\": {\n            \"text\": \"Some street 12, Some City, Some Country\"\n          }\n        },\n        \"bob\": {\n          \"full_name\": \"Bob Johnson\",\n          \"birthday\": \"2016-07-03\",\n          \"address\": {\n            \"text\": \"Another street 36, Another City, Another Country\"\n          }\n        }\n      },\n      \"maintainer\": \"alice\"\n    } \n\nYou can parse the object graph in, say, Python:\n\n.. code-block:: Python\n\n    # Obtain a JSONable\n    pth = '/path/to/the/file.json'\n    with open(pth, 'rt') as fid:\n        value = json.load(fid)\n\n    # Parse the JSONable\n    errors = book.address.parse.Errors(cap=10)\n\n    pipeline = book.address.fromjsonable.pipeline_from(\n        value=value,\n        ref=pth + '#',\n        errors=errors)\n\n    if not errors.empty():\n        for error in errors.values():\n            print(\"{}: {}\".format(error.ref, error.message), file=sys.stderr)\n\n        return 1\n\nand access the object graph as ``pipeline``:\n\n.. code-block:: Python\n\n    print('Persons are:')\n    for person in pipeline.persons:\n        print('{} (full name: {}, address: {}, birthday: {})'.format(\n            person.id,\n            person.full_name,\n            person.address.text,\n            person.birthday.strftime(\"%d.%m.%Y\")))\n\n    print('The maintainer is: {}'.format(\n        pipeline.maintainer.id))\n\n\nThe generated code for this schema can be downloaded for\n`C++ <https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/cpp/test_generate>`_,\n`Go <https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/py/test_generate>`_ and\n`Python <https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/py/test_generate>`_.\n\nUsage\n=====\n\nMapry provides a single point-of-entry for all code generation through\n``mapry-to`` command.\n\nTo generate the code in different languages, invoke:\n\nFor **C++**:\n\n.. code-block:: bash\n\n    mapry-to cpp \\\n        --schema /path/to/schema.json \\\n        --outdir /path/to/cpp/code\n\nFor **Go**:\n\n.. code-block:: bash\n\n    mapry-to go \\\n        --schema /path/to/schema.json \\\n        --outdir /path/to/go/code\n\nFor **Python**:\n\n.. code-block:: bash\n\n    mapry-to py \\\n        --schema /path/to/schema.json \\\n        --outdir /path/to/py/code\n\nIf the output directory does not exist, it will be created. Any existing\nfiles will be silently overwritten.\n\nInstallation\n============\nWe provide a prepackaged PEX file that can be readily downloaded and executed.\nPlease see the `Releases section <https://github.com/Parquery/mapry/releases>`_.\n\nIf you prefer to use Mapry as a library (*e.g.*, as part of your Python-based\nbuild system), install it with pip:\n\n.. code-block:: bash\n\n    pip3 install mapry\n\nContributing\n============\nAll contributions are highly welcome. Please consult this\n`page <https://mapry.readthedocs.io/en/latest/contributing.html>`_\nin the documentation to see how you can contribute.\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_.\nWe extended the standard semantic versioning with an additional format version.\nThe version W.X.Y.Z indicates:\n\n* W is the format version (data representation is backward-incompatible),\n* X is the major version (library interface is backward-incompatible),\n* Y is the minor version (library interface is extended, but\n  backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).\n\nRelated Projects\n================\nWe compiled an extensive list of related projects and how they compare to Mapry\nin the\n`documentation <https://mapry.readthedocs.io/en/latest/related_projects.html>`__.\n\nWe present here only the most prominent projects and their main differences\nto Mapry:\n\nStandard JSON libraries\n    support only object *trees*, not graphs. They usually lack a schema (*e.g.,*\n    `json module in Python <https://docs.python.org/3/library/json.html>`_).\n\nDe/serializers based on annotations\n    handle object graphs through custom logic (*e.g.,*\n    `Jackson in Java <https://github.com/FasterXML/jackson>`_). Since they are\n    based on annotations in source code, a polyglot code base would require\n    a duplication across different languages which can be cumbersome and\n    error-prone to keep synchronized.\n\nStandard or widely used serialization libraries\n    handle object graphs well and provide a rich set of primitives. However, the serialization\n    format differs accross languagues (*e.g.*,\n    `Boost.Serialization in C++ <https://www.boost.org/doc/libs/1_70_0/libs/serialization/doc/index.html>`_\n    or `Pickle in Python <https://docs.python.org/3/library/pickle.html>`_\n    would need to be supported in Go).\n\nPopular serializers based on generated code\n    usually do not de/serialize object graphs, but only object trees (*e.g.,*\n    `Protocol Buffers <https://developers.google.com/protocol-buffers/>`_ or\n    `Cap'n Proto <https://capnproto.org/>`_).\n\n    `Flatbuffers <https://google.github.io/flatbuffers/>`_ being the exception\n    handle object graphs natively, but lack support for sophisticated types such as\n    maps and datetimes, durations *etc.*", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Parquery/mapry", "keywords": "object mapping json serialization deserialization graph", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "mapry", "package_url": "https://pypi.org/project/mapry/", "platform": "", "project_url": "https://pypi.org/project/mapry/", "project_urls": {"Homepage": "http://github.com/Parquery/mapry"}, "release_url": "https://pypi.org/project/mapry/1.0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Generate polyglot code for de/serializing object graphs from JSONable structures.", "version": "1.0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"Mapry\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52949c3d22b9334b8519367949aefdaa08bb514f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f50617271756572792f6d617072792f6d61737465722f6c6f676f2d363430783332302e706e67\">\n<a href=\"https://travis-ci.com/Parquery/mapry\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/Parquery/mapry.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6791a6c1a7170711e125187a00ff453b7eb7d547/68747470733a2f2f7472617669732d63692e636f6d2f50617271756572792f6d617072792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Parquery/mapry\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/Parquery/mapry/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a7d05636f87d23fd95802c665945fe76af215cb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50617271756572792f6d617072792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://mapry.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c27b19565787d82bcea4ca89da0c4652ed824df/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d617072792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/mapry/\" rel=\"nofollow\"><img alt=\"PyPI - version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d12a4a3ba1bafcec8889517d2183979656b1b73/68747470733a2f2f62616467652e667572792e696f2f70792f6d617072792e737667\"></a>\n<a href=\"https://pypi.org/project/mapry/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f3952152a9b802104bec2489a47331d4d6f440f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d617072792e737667\"></a>\n<p>Mapry generates polyglot code for de/serializing object graphs from\nJSONable structures.</p>\n<p><strong>Story</strong>. We needed a yet another domain-specific language for internal data\nexchange and configuration of the system. The existing solutions mostly focused\non modeling the configuration as <em>object trees</em> in which the data is nested in\nhierarchies with no <strong>cross-references</strong> between the objects.</p>\n<p>For example, think of object trees as JSON objects or arrays. We found this\nstructure to be highly limiting for most of the complex messages and system\nconfigurations. Our use cases required objects in the data to be referenced\namong each other \u2013 instead of object trees we needed <strong>object graphs</strong>.</p>\n<p>Moreover, we wanted the serialization itself to be <strong>readable</strong> so that an\noperator can edit it using a simple text editor. JSONable structure offered\nitself as a good fit with a lot of existing tools (JSON and\nYAML modules <em>etc</em>.).</p>\n<p>However, JSON allows only a limited set of data types (numbers, strings, arrays\nand objects/maps). We found that most of our data relied on\n<strong>a richer set of primitives</strong> than provided by standard JSON. This\nextended set includes:</p>\n<ul>\n<li>date,</li>\n<li>datetime,</li>\n<li>time of day,</li>\n<li>time zone,</li>\n<li>duration and</li>\n<li>path.</li>\n</ul>\n<p>While there exist polyglot serializers of object trees (<em>e.g.</em>,\n<a href=\"https://developers.google.com/protocol-buffers/\" rel=\"nofollow\">Protocol Buffers</a>),\nlanguage-specific serializers of object graphs (<em>e.g.,</em>\n<a href=\"https://golang.org/pkg/encoding/gob/\" rel=\"nofollow\">Gob in Go</a> or\n<a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow\">Pickle in Python</a>) or polyglot\nones with a limited set of primitives (<em>e.g.,</em>\n<a href=\"https://google.github.io/flatbuffers/\" rel=\"nofollow\">Flatbuffers</a>), to the best of our\nknowledge there is currently no serializer of <strong>object graphs</strong> that operates\nwith <strong>readable representations</strong> and provides a\n<strong>rich set of primitive data types</strong> consistently <strong>across multiple languages</strong>.</p>\n<p>Hence we developed Mapry, a generator of polyglot de/serialization code\nfor object graphs from JSONable structures.</p>\n<p>The <strong>schema</strong> of the object graph is stored in a separate JSON file and defines\nall the data types used in the object graph including the object graph itself.\nThe code is generated based on the schema. You define the schema once and\ngenerate code in all supported languages automatically. Schemas can be\nevolved and backward compatibility is supported through optional properties.</p>\n<div id=\"supported-languages\">\n<h2>Supported languages</h2>\n<p>Currently, Mapry implements the following language bindings:</p>\n<ul>\n<li>C++11,</li>\n<li>Go 1 and</li>\n<li>Python 3.</li>\n</ul>\n<p>Since the serialization needs to operate in different languages, only the\nintersection of language features is supported. For example, since Go does not\nsupport inheritance or union types, they are not supported in Mapry either.</p>\n</div>\n<div id=\"workflow\">\n<h2>Workflow</h2>\n<p>The following diagram illustrates the workflow.</p>\n<img alt=\"https://raw.githubusercontent.com/Parquery/mapry/master/diagram.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a53abf390a2f5ca706f4bf2d3875f65fddac7427/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f50617271756572792f6d617072792f6d61737465722f6469616772616d2e706e67\">\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>This document gives only a brief summary of Mapry. The full documentation can be\nfound <a href=\"https://mapry.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Let us introduce Mapry here by presenting a short example in order to give you a first\nimpression on how the generator can be used. To get the full picture, please consult the\n<a href=\"https://mapry.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a>.</p>\n<p>The schema starts with the name and a description, followed by the\nlanguage-specific settings (specifying the non-standard parts of the code\ngeneration), the definition of the graph structure and finally the definition of the properties of\nthe object graph itself.</p>\n<p>Here is an example schema to give you an overview:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pipeline\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"defines an address book.\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"cpp\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"namespace\"</span><span class=\"p\">:</span> <span class=\"s2\">\"book::address\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"path_as\"</span><span class=\"p\">:</span> <span class=\"s2\">\"boost::filesystem::path\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"optional_as\"</span><span class=\"p\">:</span> <span class=\"s2\">\"std::experimental::optional\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"datetime_library\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ctime\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"go\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"package\"</span><span class=\"p\">:</span> <span class=\"s2\">\"address\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"py\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"module_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"book.address\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"path_as\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pathlib.Path\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"timezone_as\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pytz.timezone\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"classes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Person\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"defines a contactable person.\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"full_name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gives the full name (including middle names).\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"date\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"indicates the birthday in UTC.\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Address\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"notes where the person lives.\"</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"embeds\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Address\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"defines an address.\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gives the full address.\"</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"maintainer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Person\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"indicates the maintainer of the address book.\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Once you generated the de/serialization code with Mapry, you can use it\nto obtain the object graph from a JSONable.</p>\n<p>For example, assume a JSONable stored in <tt>/path/to/the/file.json</tt>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"persons\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"alice\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"full_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Alice Doe\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1983-10-24\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Some street 12, Some City, Some Country\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"bob\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"full_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bob Johnson\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-07-03\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Another street 36, Another City, Another Country\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"maintainer\"</span><span class=\"p\">:</span> <span class=\"s2\">\"alice\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can parse the object graph in, say, Python:</p>\n<pre><span class=\"c1\"># Obtain a JSONable</span>\n<span class=\"n\">pth</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/the/file.json'</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">pth</span><span class=\"p\">,</span> <span class=\"s1\">'rt'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fid</span><span class=\"p\">:</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Parse the JSONable</span>\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"o\">.</span><span class=\"n\">Errors</span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">fromjsonable</span><span class=\"o\">.</span><span class=\"n\">pipeline_from</span><span class=\"p\">(</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n    <span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"n\">pth</span> <span class=\"o\">+</span> <span class=\"s1\">'#'</span><span class=\"p\">,</span>\n    <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">error</span> <span class=\"ow\">in</span> <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n</pre>\n<p>and access the object graph as <tt>pipeline</tt>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Persons are:'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">person</span> <span class=\"ow\">in</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">persons</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> (full name: </span><span class=\"si\">{}</span><span class=\"s1\">, address: </span><span class=\"si\">{}</span><span class=\"s1\">, birthday: </span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">full_name</span><span class=\"p\">,</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">birthday</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%d</span><span class=\"s2\">.%m.%Y\"</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The maintainer is: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">maintainer</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">))</span>\n</pre>\n<p>The generated code for this schema can be downloaded for\n<a href=\"https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/cpp/test_generate\" rel=\"nofollow\">C++</a>,\n<a href=\"https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/py/test_generate\" rel=\"nofollow\">Go</a> and\n<a href=\"https://github.com/Parquery/mapry/blob/master/test_cases/docs/schema/introductory_example/py/test_generate\" rel=\"nofollow\">Python</a>.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Mapry provides a single point-of-entry for all code generation through\n<tt><span class=\"pre\">mapry-to</span></tt> command.</p>\n<p>To generate the code in different languages, invoke:</p>\n<p>For <strong>C++</strong>:</p>\n<pre>mapry-to cpp <span class=\"se\">\\\n</span>    --schema /path/to/schema.json <span class=\"se\">\\\n</span>    --outdir /path/to/cpp/code\n</pre>\n<p>For <strong>Go</strong>:</p>\n<pre>mapry-to go <span class=\"se\">\\\n</span>    --schema /path/to/schema.json <span class=\"se\">\\\n</span>    --outdir /path/to/go/code\n</pre>\n<p>For <strong>Python</strong>:</p>\n<pre>mapry-to py <span class=\"se\">\\\n</span>    --schema /path/to/schema.json <span class=\"se\">\\\n</span>    --outdir /path/to/py/code\n</pre>\n<p>If the output directory does not exist, it will be created. Any existing\nfiles will be silently overwritten.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>We provide a prepackaged PEX file that can be readily downloaded and executed.\nPlease see the <a href=\"https://github.com/Parquery/mapry/releases\" rel=\"nofollow\">Releases section</a>.</p>\n<p>If you prefer to use Mapry as a library (<em>e.g.</em>, as part of your Python-based\nbuild system), install it with pip:</p>\n<pre>pip3 install mapry\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>All contributions are highly welcome. Please consult this\n<a href=\"https://mapry.readthedocs.io/en/latest/contributing.html\" rel=\"nofollow\">page</a>\nin the documentation to see how you can contribute.</p>\n</div>\n<div id=\"versioning\">\n<h3>Versioning</h3>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.\nWe extended the standard semantic versioning with an additional format version.\nThe version W.X.Y.Z indicates:</p>\n<ul>\n<li>W is the format version (data representation is backward-incompatible),</li>\n<li>X is the major version (library interface is backward-incompatible),</li>\n<li>Y is the minor version (library interface is extended, but\nbackward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n<div id=\"related-projects\">\n<h3>Related Projects</h3>\n<p>We compiled an extensive list of related projects and how they compare to Mapry\nin the\n<a href=\"https://mapry.readthedocs.io/en/latest/related_projects.html\" rel=\"nofollow\">documentation</a>.</p>\n<p>We present here only the most prominent projects and their main differences\nto Mapry:</p>\n<dl>\n<dt>Standard JSON libraries</dt>\n<dd>support only object <em>trees</em>, not graphs. They usually lack a schema (<em>e.g.,</em>\n<a href=\"https://docs.python.org/3/library/json.html\" rel=\"nofollow\">json module in Python</a>).</dd>\n<dt>De/serializers based on annotations</dt>\n<dd>handle object graphs through custom logic (<em>e.g.,</em>\n<a href=\"https://github.com/FasterXML/jackson\" rel=\"nofollow\">Jackson in Java</a>). Since they are\nbased on annotations in source code, a polyglot code base would require\na duplication across different languages which can be cumbersome and\nerror-prone to keep synchronized.</dd>\n<dt>Standard or widely used serialization libraries</dt>\n<dd>handle object graphs well and provide a rich set of primitives. However, the serialization\nformat differs accross languagues (<em>e.g.</em>,\n<a href=\"https://www.boost.org/doc/libs/1_70_0/libs/serialization/doc/index.html\" rel=\"nofollow\">Boost.Serialization in C++</a>\nor <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow\">Pickle in Python</a>\nwould need to be supported in Go).</dd>\n<dt>Popular serializers based on generated code</dt>\n<dd><p>usually do not de/serialize object graphs, but only object trees (<em>e.g.,</em>\n<a href=\"https://developers.google.com/protocol-buffers/\" rel=\"nofollow\">Protocol Buffers</a> or\n<a href=\"https://capnproto.org/\" rel=\"nofollow\">Cap\u2019n Proto</a>).</p>\n<p><a href=\"https://google.github.io/flatbuffers/\" rel=\"nofollow\">Flatbuffers</a> being the exception\nhandle object graphs natively, but lack support for sophisticated types such as\nmaps and datetimes, durations <em>etc.</em></p>\n</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6938110, "releases": {"1.0.0.0": [{"comment_text": "", "digests": {"md5": "98a3bb8c2239c243316a9250d808261a", "sha256": "dfde5976662da1c7e4cc15e458477a0b703590b24db7d94fd559896f545aabbc"}, "downloads": -1, "filename": "mapry-1.0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98a3bb8c2239c243316a9250d808261a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97284, "upload_time": "2019-11-04T13:08:03", "upload_time_iso_8601": "2019-11-04T13:08:03.538784Z", "url": "https://files.pythonhosted.org/packages/e5/63/c31c4f4ac5cc4de6fc86cd5d29ce396d90291c5c54246aad71142554a658/mapry-1.0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7820aa586178dd801feddb2beedc688", "sha256": "9dcedec8b2825a420ed80552e9b834d8e1ec828ec31e354ffd0f778025eb6059"}, "downloads": -1, "filename": "mapry-1.0.0.0.tar.gz", "has_sig": false, "md5_digest": "b7820aa586178dd801feddb2beedc688", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80790, "upload_time": "2019-07-29T14:21:35", "upload_time_iso_8601": "2019-07-29T14:21:35.338316Z", "url": "https://files.pythonhosted.org/packages/86/1d/396edc5e38592da5184ddbef7eb6562a5812f0d212ea53d95e0b9b9886e0/mapry-1.0.0.0.tar.gz", "yanked": false}], "1.0.0.0rc1": [{"comment_text": "", "digests": {"md5": "56b51b110e21daa1b6650d9ab54482eb", "sha256": "26a0750b766d3a6e198edf50a0ca4c910a2e2c6eb519b40d07b46266753c4335"}, "downloads": -1, "filename": "mapry-1.0.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "56b51b110e21daa1b6650d9ab54482eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94825, "upload_time": "2019-06-02T07:54:14", "upload_time_iso_8601": "2019-06-02T07:54:14.929539Z", "url": "https://files.pythonhosted.org/packages/51/80/62be21c08f754754ceef9420617b092a151241b3c85b074196797941d1d1/mapry-1.0.0.0rc1.tar.gz", "yanked": false}], "1.0.0.1": [{"comment_text": "", "digests": {"md5": "2166a32d8bf0b6beed080497c3e45521", "sha256": "6bf5ae9b836b23af5e62c80b6976c39bc8e4cb3dd7edd3984ad0b3c918cee213"}, "downloads": -1, "filename": "mapry-1.0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2166a32d8bf0b6beed080497c3e45521", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97288, "upload_time": "2019-11-04T13:08:05", "upload_time_iso_8601": "2019-11-04T13:08:05.507842Z", "url": "https://files.pythonhosted.org/packages/39/8f/4e143f5310c296dabd92e4086fa729790dcdafe021e23354a02cbeab63fe/mapry-1.0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "950f58ce942ad0b4647fb7023dc546d3", "sha256": "e3bfecc1caab70c0b126e82f345e95dae5116381c32f4c1fd6995bc611185abc"}, "downloads": -1, "filename": "mapry-1.0.0.1.tar.gz", "has_sig": false, "md5_digest": "950f58ce942ad0b4647fb7023dc546d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80832, "upload_time": "2019-11-04T13:08:28", "upload_time_iso_8601": "2019-11-04T13:08:28.234874Z", "url": "https://files.pythonhosted.org/packages/fd/72/b39a50c78f9e797c71b5de62ccc3e0cc2376dc9b3aa02f2e581820706d17/mapry-1.0.0.1.tar.gz", "yanked": false}], "1.0.0.2": [{"comment_text": "", "digests": {"md5": "2c9c6f2c4a18c2628ba4f3698ab3f3c0", "sha256": "12b11b5dba2ed8382e77826c45cd85a13726a5c2a7016029fc7757ef4597337a"}, "downloads": -1, "filename": "mapry-1.0.0.2.tar.gz", "has_sig": false, "md5_digest": "2c9c6f2c4a18c2628ba4f3698ab3f3c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80414, "upload_time": "2020-04-02T19:16:41", "upload_time_iso_8601": "2020-04-02T19:16:41.200370Z", "url": "https://files.pythonhosted.org/packages/31/da/db6c4d6ed1bcf65c4d5e5bfe35a3747f926c73622b9929a792f4a3581143/mapry-1.0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c9c6f2c4a18c2628ba4f3698ab3f3c0", "sha256": "12b11b5dba2ed8382e77826c45cd85a13726a5c2a7016029fc7757ef4597337a"}, "downloads": -1, "filename": "mapry-1.0.0.2.tar.gz", "has_sig": false, "md5_digest": "2c9c6f2c4a18c2628ba4f3698ab3f3c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80414, "upload_time": "2020-04-02T19:16:41", "upload_time_iso_8601": "2020-04-02T19:16:41.200370Z", "url": "https://files.pythonhosted.org/packages/31/da/db6c4d6ed1bcf65c4d5e5bfe35a3747f926c73622b9929a792f4a3581143/mapry-1.0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:53 2020"}