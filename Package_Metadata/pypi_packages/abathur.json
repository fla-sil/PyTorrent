{"info": {"author": "yeyuexia", "author_email": "yyxworld@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "=======\nAbathur\n=======\n\n.. image:: https://travis-ci.org/yeyuexia/dummie.svg?branch=master\n   :target: https://travis-ci.org/yeyuexia/dummie\n\nSimple Template manager to manage template and create project based on template.\n\nRequirements\n------------\n\n* Python 3.6+\n* Works on Linux, Windows, Mac OSX, BSD\n\nInstall\n-------\n\npip::\n\n  pip install abathur\n\nUsage\n-----\n\nPresume you have a template like this::\n\n  template/src\n  \u251c\u2500\u2500 main\n  \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 abathur\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 {PROJECT_NAME}\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Application.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 domain\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 entity\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 repository\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Repository.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 service\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Service.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 facade\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 {PROJECT_NAME_IN_CLASS}DtoMapper.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Facade.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 infrastructure\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 persistence\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u251c\u2500\u2500 {PROJECT_NAME_IN_CLASS}Po.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Repository.java\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 resource\n  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0                    \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Resource.java\n  \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n  \u2502\u00a0\u00a0     \u2514\u2500\u2500 application.yml\n  \u2514\u2500\u2500 test\n      \u251c\u2500\u2500 java\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n      \u2502\u00a0\u00a0     \u2514\u2500\u2500 abathur\n      \u2502\u00a0\u00a0         \u2514\u2500\u2500 {PROJECT_NAME}\n      \u2502\u00a0\u00a0             \u2514\u2500\u2500 resource\n      \u2502\u00a0\u00a0                 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}ResourceTest.java\n      \u2514\u2500\u2500 resources\n\n\nYou can put all placeholders surrounding with {} like {PROJECT_NAME} and {PROJECT_NAME_IN_CLASS} in the file sources and directory, you can write a file named `.abathur` in the root path like::\n\n  cat .abathur\n  PROJECT_NAME_IN_CLASS\n  TABLE_NAME\n\n`.abathur` include all keywords used in template and split with \\n, abathur will load it and surround the with {}(Abathur would auto add `PROJECT_NAME` into keyword list), then\n\nCreate alias::\n\n  abathur add alias ~/template\n\n\nBuild project based on template::\n\n  abathur build -a name project_name\n\nWhen build project, abathur will let user fix replace the words notified in `.abathur` and replace the placeholders in template.\n\n* You can use --output special the project path.\n\n* You can use --config special a config file auto fill replaceholders\n\nList aliases::\n\n  abathur list\n\nRemove alias::\n\n  abathur remove alias", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yeyuexia/abathur", "keywords": "manage project templates and build project with template", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "abathur", "package_url": "https://pypi.org/project/abathur/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/abathur/", "project_urls": {"Homepage": "https://github.com/yeyuexia/abathur"}, "release_url": "https://pypi.org/project/abathur/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Template manager", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/yeyuexia/dummie\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/yeyuexia/dummie.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9c0f827c6e118d6a0e65b76375241efae74bbbe/68747470733a2f2f7472617669732d63692e6f72672f79657975657869612f64756d6d69652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Simple Template manager to manage template and create project based on template.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li>Works on Linux, Windows, Mac OSX, BSD</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>pip:</p>\n<pre>pip install abathur\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Presume you have a template like this:</p>\n<pre>template/src\n\u251c\u2500\u2500 main\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 abathur\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 {PROJECT_NAME}\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0             \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Application.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 domain\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 entity\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 repository\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Repository.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 service\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Service.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 facade\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u251c\u2500\u2500 {PROJECT_NAME_IN_CLASS}DtoMapper.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Facade.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u251c\u2500\u2500 infrastructure\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0 \u2514\u2500\u2500 persistence\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u251c\u2500\u2500 {PROJECT_NAME_IN_CLASS}Po.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2502\u00a0\u00a0     \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Repository.java\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                 \u2514\u2500\u2500 resource\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0                    \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}Resource.java\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 application.yml\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 abathur\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 {PROJECT_NAME}\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 resource\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 {PROJECT_NAME_IN_CLASS}ResourceTest.java\n    \u2514\u2500\u2500 resources\n</pre>\n<p>You can put all placeholders surrounding with {} like {PROJECT_NAME} and {PROJECT_NAME_IN_CLASS} in the file sources and directory, you can write a file named <cite>.abathur</cite> in the root path like:</p>\n<pre>cat .abathur\nPROJECT_NAME_IN_CLASS\nTABLE_NAME\n</pre>\n<p><cite>.abathur</cite> include all keywords used in template and split with n, abathur will load it and surround the with {}(Abathur would auto add <cite>PROJECT_NAME</cite> into keyword list), then</p>\n<p>Create alias:</p>\n<pre>abathur add alias ~/template\n</pre>\n<p>Build project based on template:</p>\n<pre>abathur build -a name project_name\n</pre>\n<p>When build project, abathur will let user fix replace the words notified in <cite>.abathur</cite> and replace the placeholders in template.</p>\n<ul>\n<li>You can use \u2013output special the project path.</li>\n<li>You can use \u2013config special a config file auto fill replaceholders</li>\n</ul>\n<p>List aliases:</p>\n<pre>abathur list\n</pre>\n<p>Remove alias:</p>\n<pre>abathur remove alias\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2912827, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "917d3c54db05790ea2a9f7957b0c9071", "sha256": "907471e90603fe7f09b034af14734d3a0485c8ded69921402959c6a3a2272523"}, "downloads": -1, "filename": "abathur-1.0.0.tar.gz", "has_sig": false, "md5_digest": "917d3c54db05790ea2a9f7957b0c9071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5731, "upload_time": "2017-03-11T15:06:31", "upload_time_iso_8601": "2017-03-11T15:06:31.744097Z", "url": "https://files.pythonhosted.org/packages/95/78/283db733db0e77d416b8941c410c61cd3c327d835e41834f55b6c5682f24/abathur-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2af738595f94fa7221ea955fed0e46d1", "sha256": "c599ded26b2afa54154074b2bbd4eb4eb7bb3ebea960ffd91c7b49a56b4d0f9b"}, "downloads": -1, "filename": "abathur-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2af738595f94fa7221ea955fed0e46d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5911, "upload_time": "2017-05-31T08:22:17", "upload_time_iso_8601": "2017-05-31T08:22:17.893818Z", "url": "https://files.pythonhosted.org/packages/43/60/87dc94c0fa9342b42320f9dd56505dec84119efea99ad76cd0c73fbbcd21/abathur-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2af738595f94fa7221ea955fed0e46d1", "sha256": "c599ded26b2afa54154074b2bbd4eb4eb7bb3ebea960ffd91c7b49a56b4d0f9b"}, "downloads": -1, "filename": "abathur-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2af738595f94fa7221ea955fed0e46d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5911, "upload_time": "2017-05-31T08:22:17", "upload_time_iso_8601": "2017-05-31T08:22:17.893818Z", "url": "https://files.pythonhosted.org/packages/43/60/87dc94c0fa9342b42320f9dd56505dec84119efea99ad76cd0c73fbbcd21/abathur-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 15:55:21 2020"}