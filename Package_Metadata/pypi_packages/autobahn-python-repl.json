{"info": {"author": "Adam Jorgensen", "author_email": "adam.jorgensen.za@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "OpenDNA Autobahn-Python REPL\n============================\nA REPL environment for working with WAMP routers in an interactive fashion built\nusing the Autobahn-Python library.\n\n\nContents\n--------\n1. `Installation`_\n2. `Usage`_\n\n   1. `Starting the REPL`_\n   2. `Connections`_\n   3. `Sessions`_\n   4. `Calls and Invocations`_\n   5. `Registrations`_\n   6. `Publishers and Publications`_\n   7. `Subscriptions`_\n\n3. `Extending`_\n\n   1. `PtPython config module`_\n   2. `REPL class substitution`_\n\n4. `REPL API`_\n5. `Roadmap`_\n6. `Credits`_\n\n\nInstallation\n------------\n``pip install autobahn-python-repl``\n\nAPR requires Python 3.6 to run. If you are not using Python\n3.6 in your WAMP project then it is recommend you create a Python 3.6 virtual\nenvironment and install the REPL there.\n\n\nUsage\n-----\n\nStarting the REPL\n~~~~~~~~~~~~~~~~~\n1. Run the ``autobahn_python_repl`` script installed by this package\n2. Run ``python -m opendna.autobahn.repl.repl``\n\nConnections\n```````````\nOnce the REPL has started you will be presented with a standard PtPython prompt\nand environment. In order to begin connecting to a WAMP router enter::\n\n  >>> my_connection = connect_to(uri='ws://HOST:PORT', realm='MY_REALM')\n  Generating connection to MY_REALM@ws://HOST:PORT with name g9jZlZeh\n\nYou will see that ``connect_to`` generated an internal name for the connection.\nYou can access the connection via this internal name by entering::\n\n  >>> connections.g9jZlZeh\n  <opendna.autobahn.repl.connections.Connection object at 0x6fc2901ab0f0>\n\nIt is also possible to provide a custom internal name for the connection when\nyou call ``connect_to`` as follows::\n\n  >>> connect_to(uri='ws://HOST:PORT', realm='MY_REALM', name='my_connection')\n  Generating connection to MY_REALM@ws://HOST:PORT with name my_connection\n\nYou can now access the connection by entering::\n\n  >>> connections.my_connection\n  <opendna.autobahn.repl.connections.Connection object at 0x2ac690dab0f0>\n  >>> connections['my_connection']\n  <opendna.autobahn.repl.connections.Connection object at 0x2ac690dab0f0>\n\nNote that the ``Connection`` object is not actually a concrete connection to\nthe WAMP router, it is merely a storage container for connection related\ndetails that is used to create ``Session`` objects which represent actual\nconnections to the WAMP router.\n\n``connect_to`` accepts the follows arguments:\n\n* ``uri``: Required. A WAMP router URI string\n* ``realm``: Optional. A WAMP realm string\n* ``extra``: Optional. A dictionary of data to be supplied to the WAMP\n  ``ApplicationSession``.``__init__`` method. Not useful unless you are\n  working with a custom ``ApplicationSessions`` class. See *Extending* for\n  more details on this.\n* ``serializer``: Optional. A list of WAMP serializers to use. Serializers must\n  implement ``autobahn.wamp.interfaces.ISerializer``\n* ``ssl``: Optional. Boolean or ``ssl.SSLContenxt`` instance. Can usually\n  be ignored unless you are planning to connect use TLS authentication for a\n  ``Session``\n* ``proxy``: Optional. A dictionary providing details for a proxy server. Must\n  have ``host`` and ``port`` keys\n* ``name``: Optional. A name for the connection\n\nSessions\n````````\nOnce you have a ``Connection`` instance you can use it to create a ``Session``\ninstance, opening a WAMP session in the process::\n\n  >>> my_session = my_connection.session()\n  Generating anonymous session to MY_REALM@ws://HOST:PORT with name bKP5ajz0\n\nYou can access this session via its auto-generated name like so::\n\n  >>> my_connection.sessions.bKP5ajz0\n  <opendna.autobahn.repl.sessions.Session object at 0x14c2b01a40fd>\n  >>> my_connection.sessions['bKP5ajz0']\n  <opendna.autobahn.repl.sessions.Session object at 0x14c2b01a40fd>\n\n``session`` also accepts a *name* parameter that you can use to avoid using an\nauto-generated name.\n\nBy default calling ``session`` will open a *WAMP-Anonymous* session with the router.\n\nIt is also possible to specify the authentication method or methods that will\nbe used::\n\n  >>> ticket_session = my_connection.session('ticket', authid='your_authid', ticket='YOUR_AUTHENTICATION_TICKET')\n  Generating ticket session to MY_REALM@ws://HOST:PORT with name SOME_NAME\n  >>> mixed_session = my_connection.session(['ticket', 'anonymous'], authid='your_authid', ticket='YOUR_AUTHENTICATION_TICKET')\n  Generating ['ticket', 'anonymous'] session to MY_REALM@ws://HOST:PORT with name SOME_OTHER_NAME\n\n*ticket_session* will use WAMP-Ticket authentication only while *mixed_session*\nwill try WAMP-Ticket first before falling back to WAMP-Anonymous.\n\nWhile WAMP provides a number a authentication methods, only four of are handled\nat the session level (as opposed to the transport level). Calling the ``session``\nmethod with a specific authentication method may imply the use of certain additional\nparameters. These are detailed below:\n\n* WAMP-Anonymous: No parameters required. Note that ``authid`` will be ignored if it is supplied\n* WAMP-Ticket: ``authid`` and ``ticket`` parameters required\n* WAMP-CRA: ``authid`` and ``secret`` parameters required\n* WAMP-Cryptosign: ``authid`` and ``key`` parameters required. ``key`` needs to be an instance of ``autobahn.wamp.cryptosign.SigningKey``\n\nThe ``Connection.session`` method accepts the following arguments:\n\n* ``authmethods``: Optional. String or list of strings. Valid authentication method\n  strings are: ``anonymous``, ``ticket``, ``wampcra``, ``cryptosign``, ``cookie`` and ``tls``\n* ``authid``: String. Optional for WAMP-Anonymous authentication, required for all other methods\n* ``authrole``: String. Optional. Requested role\n* ``authextra``: Dictionary. Optional. Data to be passed along to the authenticator. Useful\n  for providing additional data to a dynamic authenticator\n* ``resumable``: Boolean. Optional. Should the session be resumed later if it disconnects\n* ``resume_session``: Integer. Optional. ID of Session to resume\n* ``resume_token``: String. Optional. Token for resuming session specified by ``resume_session``\n\nCalls and Invocations\n`````````````````````\nIn order to perform WAMP RPC calls you need to create a ``Call`` instance. This is\ndone using a ``Session`` instance::\n\n  >>> my_call = my_session.call('endpoint_uri')\n  Generating a call to endpoint endpoint_uri with name i9BcEagW\n\nYou can access this call by it's autogenerated name like so::\n\n  >>> my_session.calls.i9BcEagW\n  <opendna.autobahn.repl.rpc.Call object at 0xa452bd1a6f2>\n  >>> my_session.calls['i9BcEagW']\n  <opendna.autobahn.repl.rpc.Call object at 0xa452bd1a6f2>\n\n``call`` also accepts a custom *name* parameter to bypass the use of an autogenerated\nname. Furthermore, the ``call`` method accepts any keyword-arguments you can\nsupply to the `autobahn.wamp.types.CallOptions constructor`_.\n\n.. _autobahn.wamp.types.CallOptions constructor: https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.CallOptions\n\nA ``Call`` instance is itself callable and can be invoked in order to produce an\n``Invocation`` instance. Creating an ``Invocation`` initiates the process of\nsending the WAMP RPC call using the ``Session`` instance associated with the\n``Call`` instance that is the parent of the ``Invocation``::\n\n  >>> my_invocation = my_call(True, False, parm3=None, parm4={'something': 'or other'})\n  Invoking endpoint_uri with name Wax3JdBx\n  Invocation of endpoint_uri with name Wax3JdBx starting\n  Invocation of endpoint_uri with name Wax3JdBx succeeded\n\nDepending on how long it takes for the remote end-point to execute, the message\nindicating success or failure may not appear immediately. You will note that\nthe ``Invocation`` also receives a auto-generated name which can be used to access\nit from the ``Call`` instance like so::\n\n  >>> my_call.invocations.Wax3JdBx\n  <opendna.autobahn.repl.rpc.Invocation object at 0xd456bc1aef5>\n  >>> my_call.invocations['Wax3JdBx']\n  <opendna.autobahn.repl.rpc.Invocation object at 0xd456bc1aef5>\n\n\nThe ``Invocation`` instance exposes three important properties that can be\nused to access the results of the WAMP Call:\n\n* ``result`` will contain the result of the WAMP Call if it succeeded or ``None`` if it failed or hasn't completed yet\n* ``exception`` will contain the result of the WAMP Call if it failed or ``None`` if it succeeded or hasn't completed yet\n* ``progress`` is a list which is used to store progressive results if the\n  target WAMP end-point emits them. See https://crossbar.io/docs/Progressive-Call-Results/ for more details on this\n\nFinally, an ``Invocation`` instance is itself callable. Calling an ``Invocation`` will\nproduce a new ``Invocation`` instance attached to the parent ``Call`` of the called ``Invocation``.\nThe behaviour of the arguments and keyword arguments when calling an ``Invocation`` is quite specific\nand affects the creation of the new ``Invocation`` as follows:\n\n* Positional arguments will replace the corresponding positional arguments from the parent ``Invocation``\n  in the new ``Invocation`` unless the positional argument is a reference to the singleton object ``opendna.autobahn.repl.utils.Keep``\n  To illustrate this consider the following input scenario::\n\n    >>>  my_call = my_session.call('some_endpoint')\n    >>>  invocation1 = my_call(1,2,3)\n    >>>  invocation2 = invocation1(3, Keep, 1)\n    >>>  invocation3 = my_call(3,2,1)\n\n  In this scenario ``invocation2`` and ``invocation3`` are identical\n\n* If the number of positional arguments supplied is less than was supplied to the parent ``Invocation`` then the\n  missing positional arguments will be substituted in from the parent ``Invocation`` as if ``Keep`` had been used in their\n  positions\n\n* If the number of position arguments supplied is greater than was supplied to the parent ``Invocation`` then the\n  additional positional arguments will be ignored\n\n* Any keyword arguments will replace the corresponding keyword arguments from the parent ``Invocation``::\n\n    >>> my_call = my_session.call('some_endpoint')\n    >>> invocation1 = my_call(x=True, y=False)\n    >>> invocation2 = invocation1(y=True)\n    >>> invocation3 = my_call(x=True, y=True)\n\n  In this scenario ``invocation2`` and ``invocation3`` are identical\n\nRegistrations\n`````````````\nIn order to handle calls to WAMP RPC end-points you need to create a\n``Registration`` instance::\n\n  >>> my_registration = my_session.register('endpoint_uri')\n  Generating registration for endpoint_uri with name Rx3mmt2e\n  Registration of endpoint_uri with name Rx3mmt2e starting\n  Registration of endpoint_uri with name Rx3mmt2e succeeded\n\nYou can access this registration by it's autogenerated name like so::\n\n  >>> my_session.registrations.Rx3mmt2e\n  <opendna.autobahn.repl.rpc.Registration object at 0x7fc89015b0f0>\n  >>> my_session.registrations['Rx3mmt2e']\n  <opendna.autobahn.repl.rpc.Registration object at 0x7fc89015b0f0>\n\nYou can also provide a a custom *name* parameter to bypass the use of an autogenerated\nname. Furthermore, the ``register`` method accepts any keyword-arguments you can\nsupply to the `autobahn.wamp.types.RegisterOptions constructor`_.\n\n.. _autobahn.wamp.types.RegisterOptions constructor: https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.RegisterOptions\n\nOnce a registration has succeeded it is available for calling as described in\nthe `Calls and Invocations`_ section. By default the ``Registration`` class\nprovides a default handler for incoming calls which records the input parameters\nalong with the date and time of the call using a a ``Registration..Hit`` instance.\nThis ``Hit`` is a ``namedtuple`` providing three attributes: *timestamp*, *args*\nand *kwargs*. When the registration is the target of a call the console will output text like:\n\n``End-point endpoint_uri named Rx3mmt2e hit at 2017-12-01 22:04:10.030438. Hit named jqD8TxFp stored``\n\nHits stored on a registration can be accessed using either the auto-generated name\nor via a numeric index (hits are stored in the order they are received)::\n\n  >>> my_registration.hits[0]\n  Hit(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n  >>> my_registration.hits.jqD8TxFp\n  Hit(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n\nWhen creating a ``Registration`` it is also possible to specify a custom handler\nwhich is used in addition to the default handler for incoming calls. This custom\nhandler may be either a standard function or an async function and is called\nafter the hit is stored by the ``Registration`` instance. Additionally, the result\nof the custom handler will be returned to the caller (the default handler will return\n``None`` in the event that no custom handler is supplied)::\n\n  >>> import asyncio\n  >>> async def test(*args, **kwargs):\n          await asyncio.sleep(5)\n          print(args, kwargs)\n          return True\n  >>> my_registration = my_session.register('endpoint_uri', test)\n  Generating registration for endpoint_uri with name Rx3mmt2e\n  Registration of endpoint_uri with name Rx3mmt2e starting\n  Registration of endpoint_uri with name Rx3mmt2e succeeded\n  >>> invocation = my_session.call('endpoint_uri')(1,2,3,False,True,{},x=None)\n  Generating call to endpoint_uri with name shejtoeU\n  Invoking endpoint_uri with name dgSHC77i\n  Invocation of endpoint_uri with name dgSHC77i starting\n  End-point endpoint_uri named Rx3mmt2e hit at 2017-12-01 22:04:10.030438. Hit named jqD8TxFp stored\n  (1, 2, 3, False, True, {}) {'x': None}\n  Invocation of endpoint_uri with name dgSHC77i succeeded\n  >>> invocation.result\n  True\n\nIt is also possible to deregister an existing registration::\n\n  >>> my_registration.deregister()\n  Deregistration of endpoint_uri with name Rx3mmt2e starting\n  Deregistration of endpoint_uri with name Rx3mmt2e succeeded\n\nPublishers and Publications\n```````````````````````````\nIn order to emit WAMP PubSub events you need to create a ``Publisher`` instance::\n\n  >>> my_publisher = my_session.publish('topic_uri')\n  Generating publisher for topic_uri with name YunLGYwr\n\nYou can access this publisher by it's autogenerated name like so::\n\n  >>> my_session.publishers.YunLGYwr\n  <opendna.autobahn.repl.pubsub.Publisher object at 0x7fe1ec20a160>\n  >>> my_session.publishers['YunLGYwr']\n  <opendna.autobahn.repl.pubsub.Publisher object at 0x7fe1ec20a160>\n\nYou can also provide a a custom *name* parameter to bypass the use of an autogenerated\nname. Furthermore, the ``publish`` method accepts any keyword-arguments you can\nsupply to the `autobahn.wamp.types.PublishOptions constructor`_.\n\n.. _autobahn.wamp.types.PublishOptions constructor: https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.PublishOptions\n\nA ``Publisher`` instance is itself callable and can be invoked in order to produce an\n``Publication`` instance. Creating a ``Publication`` initiates the process of\nsending the WAMP PubSub event using the ``Session`` instance associated with the\n``Publisher`` instance that is the parent of the ``Publication``::\n\n  >>> my_publication = my_publisher(a=True, b=False)\n  Publication to topic_uri with name CHrYRIn8 starting\n  Publication to topic_uri with name CHrYRIn8 succeeded\n\nYou will note that the ``Publication`` also receives a auto-generated name which\ncan be used to access it from the parent ``Publisher`` instance like so::\n\n  >>> my_publisher.publications.CHrYRIn8\n  <opendna.autobahn.repl.pubsub.Publication object at 0x7fe1f496a5c0>\n  >>> my_publisher.publications['CHrYRIn8']\n  <opendna.autobahn.repl.pubsub.Publication object at 0x7fe1f496a5c0>\n\nThe ``Publication`` instance exposes two important properties that can be\nused to access the results of the WAMP PubSub event emission:\n\n* ``result`` will contain the result of the WAMP PubSub event emission if the ``acknowledge`` boolean\n  parameter supplied to the ``publish`` was set to ``True``. In all other instances it will contain ``None``\n* ``exception`` will contain the exception result of the WAMP PubSub event emission if it failed or ``None``\n  if no failure was detected\n\nFinally, a ``Publication`` instance is itself callable. Calling a ``Publication`` will\nproduce a new ``Publication`` instance attached to the parent ``Publisher`` of the\ncalled ``Publication``. The behaviour of the arguments and keyword arguments when\ncalling a ``Publication`` is quite specific and affects the creation of the new\n``Publication`` as follows:\n\n* Positional arguments will replace the corresponding positional arguments from the parent ``Publication``\n  in the new ``Publication`` unless the positional argument is a reference to the singleton object ``opendna.autobahn.repl.utils.Keep``\n  To illustrate this consider the following input scenario::\n\n    >>>  my_publisher = my_session.publish('some_topic')\n    >>>  publication1 = my_publisher(1,2,3)\n    >>>  publication2 = publication1(3, Keep, 1)\n    >>>  publication3 = my_publisher(3,2,1)\n\n  In this scenario ``publication2`` and ``publication3`` are identical\n\n* If the number of positional arguments supplied is less than was supplied to the parent ``Publication`` then the\n  missing positional arguments will be substituted in from the parent ``Publication`` as if ``Keep`` had been used in their\n  positions\n\n* If the number of position arguments supplied is greater than was supplied to the parent ``Publication`` then the\n  additional positional arguments will be ignored\n\n* Any keyword arguments will replace the corresponding keyword arguments from the parent ``Publication``::\n\n    >>> my_publisher = my_session.publish('some_topic')\n    >>> publication1 = my_publisher(x=True, y=False)\n    >>> publication2 = publication1(y=True)\n    >>> publication3 = my_publisher(x=True, y=True)\n\n  In this scenario ``publication2`` and ``publication3`` are identical\n\nSubscriptions\n`````````````\nIn order to subscribe to WAMP PubSub topics you need to create a ``Subscription`` instance::\n\n  >>> my_subscription = my_session.subscribe('topic_uri')\n  Generating subscription for topic_uri with name bIMq6XcO\n  Subscription to topic_uri with name bIMq6XcO starting\n  Subscription to topic_uri with name bIMq6XcO succeeded\n\nYou can access this subscription by it's autogenerated name like so::\n\n  >>> my_session.subscriptions.bIMq6XcO\n  <opendna.autobahn.repl.pubsub.Subscription object at 0x7fe1f5f9aef0>\n  >>> my_session.subscriptions['bIMq6XcO']\n  <opendna.autobahn.repl.pubsub.Subscription object at 0x7fe1f5f9aef0>\n\nYou can also provide a a custom *name* parameter to bypass the use of an autogenerated\nname. Furthermore, the ``subscribe`` method accepts any keyword-arguments you can\nsupply to the `autobahn.wamp.types.SubscribeOptions constructor`_.\n\n.. _autobahn.wamp.types.SubscribeOptions constructor: https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.SubscribeOptions\n\nOnce a subscription has succeeded it will be notified of WAMP PubSub events\nemitted as described in the `Publishers and Publications`_ section. Note, however,\nthat by default a subscription to a topic will only receive events emitted by\nother sessions. The *exclude_me* parameter for the ``Publisher`` must be set to\n``True`` if you wish to test publication and subscription to a given topic within\na single ``Session``.\n\nThe ``Subscription`` class provides a default handler for incoming events which\nrecords the input parameters along with the date and time of the call using a\n``Subscription.Hit`` instance. This ``Event`` is a ``namedtuple`` providing three\nattributes: *timestamp*, *args* and *kwargs*. When the subscription receives an\nevent the console will output text like:\n\n``Event named s3X0Sbhc received at 2017-12-03 21:59:55.437068 on topic topic_uri named bIMq6XcO``\n\nEvents stored on a subscription can be accessed using either the auto-generated name\nor via a numeric index (hits are stored in the order they are received)::\n\n  >>> my_subscription.events[0]\n  Event(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n  >>> my_subscription.events.jqD8TxFp\n  Event(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n\nWhen creating a ``Subscription`` it is also possible to specify a custom handler\nwhich is used in addition to the default handler for incoming events. This custom\nhandler may be either a standard function or an async function and is called\nafter the event is stored by the ``Subscription`` instance::\n\n  >>> async def test(*args, **kwargs):\n          print(args, kwargs)\n  >>> my_subscription = my_session.subscribe('topic_uri', test)\n  Generating subscription for topic_uri with name bIMq6XcO\n  Subscription to topic_uri with name bIMq6XcO starting\n  Subscription to topic_uri with name bIMq6XcO succeeded\n  >>> publication = my_session.publish('topic_uri', exclude_me=False)(1,2,3,False,True,{},x=None)\n  Generating publisher for topic_uri with name VVjZjvF5\n  Publication to topic_uri with name sjfuAGSm starting\n  Publication to topic_uri with name sjfuAGSm succeeded\n  Event named ZbbzBrxJ received at 2017-12-03 22:18:10.383218 on topic topic_uri named bIMq6XcO\n  (1, 2, 3, False, True, {}) {'x': None}\n  >>> my_subscription.events.ZbbzBrxJ\n  Event(timestamp=datetime.datetime(2017, 12, 3, 22, 18, 10, 383218), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n\nIt is also possible to unsubscribe from a topic::\n\n  >>> my_subscription.unsubscribe()\n  Unsubscription from topic_uri with name bIMq6XcO starting\n  Unsubscription from topic_uri with name bIMq6XcO succeeded\n\nExtending\n---------\nTBD\n\nPtPython config module\n~~~~~~~~~~~~~~~~~~~~~~\nTBD\n\nREPL class substitution\n~~~~~~~~~~~~~~~~~~~~~~~\nTBD\n\n\nREPL API\n--------\nTBD\n\n\nRoadmap\n-------\n\n* Improved UI with custom panes/tabs/views for examining Calls, Invocations,\n  Publishers, Publications, Registrations and Subscriptions\n* ``deregister``/``Unsubscribe`` should clean up the ``Registration``/``Subscription`` instance\n* Support usage in other REPLs\n* You tell me!\n\n\nCredits\n-------\n\n* Autobahn-Python for providing the secret WAMP sauce\n* PtPython for providing the secret REPL sauce\n* Jedi for providing PtPython with the secret code completion sauce\n* PromptToolkit for providing PtPython with the prompt secret sauce\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opn-oss/autobahn-python-repl", "keywords": "autobahn crossbar asyncio repl", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "autobahn-python-repl", "package_url": "https://pypi.org/project/autobahn-python-repl/", "platform": "", "project_url": "https://pypi.org/project/autobahn-python-repl/", "project_urls": {"Homepage": "https://github.com/opn-oss/autobahn-python-repl"}, "release_url": "https://pypi.org/project/autobahn-python-repl/18.12.8/", "requires_dist": ["autobahn (>=17.3.1)", "opn-oss-py-common (>=17.8.4)", "ptpython (<2.0.1)", "decorator"], "requires_python": "", "summary": "A REPL interface for interacting with WAMP routers", "version": "18.12.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A REPL environment for working with WAMP routers in an interactive fashion built\nusing the Autobahn-Python library.</p>\n<div id=\"contents\">\n<h2>Contents</h2>\n<ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a><ol>\n<li><a href=\"#starting-the-repl\" rel=\"nofollow\">Starting the REPL</a></li>\n<li><a href=\"#connections\" rel=\"nofollow\">Connections</a></li>\n<li><a href=\"#sessions\" rel=\"nofollow\">Sessions</a></li>\n<li><a href=\"#calls-and-invocations\" rel=\"nofollow\">Calls and Invocations</a></li>\n<li><a href=\"#registrations\" rel=\"nofollow\">Registrations</a></li>\n<li><a href=\"#publishers-and-publications\" rel=\"nofollow\">Publishers and Publications</a></li>\n<li><a href=\"#subscriptions\" rel=\"nofollow\">Subscriptions</a></li>\n</ol>\n</li>\n<li><a href=\"#extending\" rel=\"nofollow\">Extending</a><ol>\n<li><a href=\"#ptpython-config-module\" rel=\"nofollow\">PtPython config module</a></li>\n<li><a href=\"#repl-class-substitution\" rel=\"nofollow\">REPL class substitution</a></li>\n</ol>\n</li>\n<li><a href=\"#repl-api\" rel=\"nofollow\">REPL API</a></li>\n<li><a href=\"#roadmap\" rel=\"nofollow\">Roadmap</a></li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a></li>\n</ol>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install <span class=\"pre\">autobahn-python-repl</span></tt></p>\n<p>APR requires Python 3.6 to run. If you are not using Python\n3.6 in your WAMP project then it is recommend you create a Python 3.6 virtual\nenvironment and install the REPL there.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"starting-the-repl\"><span class=\"section-subtitle\">Starting the REPL</span></h2>\n<ol>\n<li>Run the <tt>autobahn_python_repl</tt> script installed by this package</li>\n<li>Run <tt>python <span class=\"pre\">-m</span> opendna.autobahn.repl.repl</tt></li>\n</ol>\n<div id=\"connections\">\n<h3>Connections</h3>\n<p>Once the REPL has started you will be presented with a standard PtPython prompt\nand environment. In order to begin connecting to a WAMP router enter:</p>\n<pre>&gt;&gt;&gt; my_connection = connect_to(uri='ws://HOST:PORT', realm='MY_REALM')\nGenerating connection to MY_REALM@ws://HOST:PORT with name g9jZlZeh\n</pre>\n<p>You will see that <tt>connect_to</tt> generated an internal name for the connection.\nYou can access the connection via this internal name by entering:</p>\n<pre>&gt;&gt;&gt; connections.g9jZlZeh\n&lt;opendna.autobahn.repl.connections.Connection object at 0x6fc2901ab0f0&gt;\n</pre>\n<p>It is also possible to provide a custom internal name for the connection when\nyou call <tt>connect_to</tt> as follows:</p>\n<pre>&gt;&gt;&gt; connect_to(uri='ws://HOST:PORT', realm='MY_REALM', name='my_connection')\nGenerating connection to MY_REALM@ws://HOST:PORT with name my_connection\n</pre>\n<p>You can now access the connection by entering:</p>\n<pre>&gt;&gt;&gt; connections.my_connection\n&lt;opendna.autobahn.repl.connections.Connection object at 0x2ac690dab0f0&gt;\n&gt;&gt;&gt; connections['my_connection']\n&lt;opendna.autobahn.repl.connections.Connection object at 0x2ac690dab0f0&gt;\n</pre>\n<p>Note that the <tt>Connection</tt> object is not actually a concrete connection to\nthe WAMP router, it is merely a storage container for connection related\ndetails that is used to create <tt>Session</tt> objects which represent actual\nconnections to the WAMP router.</p>\n<p><tt>connect_to</tt> accepts the follows arguments:</p>\n<ul>\n<li><tt>uri</tt>: Required. A WAMP router URI string</li>\n<li><tt>realm</tt>: Optional. A WAMP realm string</li>\n<li><tt>extra</tt>: Optional. A dictionary of data to be supplied to the WAMP\n<tt>ApplicationSession</tt>.``__init__`` method. Not useful unless you are\nworking with a custom <tt>ApplicationSessions</tt> class. See <em>Extending</em> for\nmore details on this.</li>\n<li><tt>serializer</tt>: Optional. A list of WAMP serializers to use. Serializers must\nimplement <tt>autobahn.wamp.interfaces.ISerializer</tt></li>\n<li><tt>ssl</tt>: Optional. Boolean or <tt>ssl.SSLContenxt</tt> instance. Can usually\nbe ignored unless you are planning to connect use TLS authentication for a\n<tt>Session</tt></li>\n<li><tt>proxy</tt>: Optional. A dictionary providing details for a proxy server. Must\nhave <tt>host</tt> and <tt>port</tt> keys</li>\n<li><tt>name</tt>: Optional. A name for the connection</li>\n</ul>\n</div>\n<div id=\"sessions\">\n<h3>Sessions</h3>\n<p>Once you have a <tt>Connection</tt> instance you can use it to create a <tt>Session</tt>\ninstance, opening a WAMP session in the process:</p>\n<pre>&gt;&gt;&gt; my_session = my_connection.session()\nGenerating anonymous session to MY_REALM@ws://HOST:PORT with name bKP5ajz0\n</pre>\n<p>You can access this session via its auto-generated name like so:</p>\n<pre>&gt;&gt;&gt; my_connection.sessions.bKP5ajz0\n&lt;opendna.autobahn.repl.sessions.Session object at 0x14c2b01a40fd&gt;\n&gt;&gt;&gt; my_connection.sessions['bKP5ajz0']\n&lt;opendna.autobahn.repl.sessions.Session object at 0x14c2b01a40fd&gt;\n</pre>\n<p><tt>session</tt> also accepts a <em>name</em> parameter that you can use to avoid using an\nauto-generated name.</p>\n<p>By default calling <tt>session</tt> will open a <em>WAMP-Anonymous</em> session with the router.</p>\n<p>It is also possible to specify the authentication method or methods that will\nbe used:</p>\n<pre>&gt;&gt;&gt; ticket_session = my_connection.session('ticket', authid='your_authid', ticket='YOUR_AUTHENTICATION_TICKET')\nGenerating ticket session to MY_REALM@ws://HOST:PORT with name SOME_NAME\n&gt;&gt;&gt; mixed_session = my_connection.session(['ticket', 'anonymous'], authid='your_authid', ticket='YOUR_AUTHENTICATION_TICKET')\nGenerating ['ticket', 'anonymous'] session to MY_REALM@ws://HOST:PORT with name SOME_OTHER_NAME\n</pre>\n<p><em>ticket_session</em> will use WAMP-Ticket authentication only while <em>mixed_session</em>\nwill try WAMP-Ticket first before falling back to WAMP-Anonymous.</p>\n<p>While WAMP provides a number a authentication methods, only four of are handled\nat the session level (as opposed to the transport level). Calling the <tt>session</tt>\nmethod with a specific authentication method may imply the use of certain additional\nparameters. These are detailed below:</p>\n<ul>\n<li>WAMP-Anonymous: No parameters required. Note that <tt>authid</tt> will be ignored if it is supplied</li>\n<li>WAMP-Ticket: <tt>authid</tt> and <tt>ticket</tt> parameters required</li>\n<li>WAMP-CRA: <tt>authid</tt> and <tt>secret</tt> parameters required</li>\n<li>WAMP-Cryptosign: <tt>authid</tt> and <tt>key</tt> parameters required. <tt>key</tt> needs to be an instance of <tt>autobahn.wamp.cryptosign.SigningKey</tt></li>\n</ul>\n<p>The <tt>Connection.session</tt> method accepts the following arguments:</p>\n<ul>\n<li><tt>authmethods</tt>: Optional. String or list of strings. Valid authentication method\nstrings are: <tt>anonymous</tt>, <tt>ticket</tt>, <tt>wampcra</tt>, <tt>cryptosign</tt>, <tt>cookie</tt> and <tt>tls</tt></li>\n<li><tt>authid</tt>: String. Optional for WAMP-Anonymous authentication, required for all other methods</li>\n<li><tt>authrole</tt>: String. Optional. Requested role</li>\n<li><tt>authextra</tt>: Dictionary. Optional. Data to be passed along to the authenticator. Useful\nfor providing additional data to a dynamic authenticator</li>\n<li><tt>resumable</tt>: Boolean. Optional. Should the session be resumed later if it disconnects</li>\n<li><tt>resume_session</tt>: Integer. Optional. ID of Session to resume</li>\n<li><tt>resume_token</tt>: String. Optional. Token for resuming session specified by <tt>resume_session</tt></li>\n</ul>\n</div>\n<div id=\"calls-and-invocations\">\n<h3>Calls and Invocations</h3>\n<p>In order to perform WAMP RPC calls you need to create a <tt>Call</tt> instance. This is\ndone using a <tt>Session</tt> instance:</p>\n<pre>&gt;&gt;&gt; my_call = my_session.call('endpoint_uri')\nGenerating a call to endpoint endpoint_uri with name i9BcEagW\n</pre>\n<p>You can access this call by it\u2019s autogenerated name like so:</p>\n<pre>&gt;&gt;&gt; my_session.calls.i9BcEagW\n&lt;opendna.autobahn.repl.rpc.Call object at 0xa452bd1a6f2&gt;\n&gt;&gt;&gt; my_session.calls['i9BcEagW']\n&lt;opendna.autobahn.repl.rpc.Call object at 0xa452bd1a6f2&gt;\n</pre>\n<p><tt>call</tt> also accepts a custom <em>name</em> parameter to bypass the use of an autogenerated\nname. Furthermore, the <tt>call</tt> method accepts any keyword-arguments you can\nsupply to the <a href=\"https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.CallOptions\" rel=\"nofollow\">autobahn.wamp.types.CallOptions constructor</a>.</p>\n<p>A <tt>Call</tt> instance is itself callable and can be invoked in order to produce an\n<tt>Invocation</tt> instance. Creating an <tt>Invocation</tt> initiates the process of\nsending the WAMP RPC call using the <tt>Session</tt> instance associated with the\n<tt>Call</tt> instance that is the parent of the <tt>Invocation</tt>:</p>\n<pre>&gt;&gt;&gt; my_invocation = my_call(True, False, parm3=None, parm4={'something': 'or other'})\nInvoking endpoint_uri with name Wax3JdBx\nInvocation of endpoint_uri with name Wax3JdBx starting\nInvocation of endpoint_uri with name Wax3JdBx succeeded\n</pre>\n<p>Depending on how long it takes for the remote end-point to execute, the message\nindicating success or failure may not appear immediately. You will note that\nthe <tt>Invocation</tt> also receives a auto-generated name which can be used to access\nit from the <tt>Call</tt> instance like so:</p>\n<pre>&gt;&gt;&gt; my_call.invocations.Wax3JdBx\n&lt;opendna.autobahn.repl.rpc.Invocation object at 0xd456bc1aef5&gt;\n&gt;&gt;&gt; my_call.invocations['Wax3JdBx']\n&lt;opendna.autobahn.repl.rpc.Invocation object at 0xd456bc1aef5&gt;\n</pre>\n<p>The <tt>Invocation</tt> instance exposes three important properties that can be\nused to access the results of the WAMP Call:</p>\n<ul>\n<li><tt>result</tt> will contain the result of the WAMP Call if it succeeded or <tt>None</tt> if it failed or hasn\u2019t completed yet</li>\n<li><tt>exception</tt> will contain the result of the WAMP Call if it failed or <tt>None</tt> if it succeeded or hasn\u2019t completed yet</li>\n<li><tt>progress</tt> is a list which is used to store progressive results if the\ntarget WAMP end-point emits them. See <a href=\"https://crossbar.io/docs/Progressive-Call-Results/\" rel=\"nofollow\">https://crossbar.io/docs/Progressive-Call-Results/</a> for more details on this</li>\n</ul>\n<p>Finally, an <tt>Invocation</tt> instance is itself callable. Calling an <tt>Invocation</tt> will\nproduce a new <tt>Invocation</tt> instance attached to the parent <tt>Call</tt> of the called <tt>Invocation</tt>.\nThe behaviour of the arguments and keyword arguments when calling an <tt>Invocation</tt> is quite specific\nand affects the creation of the new <tt>Invocation</tt> as follows:</p>\n<ul>\n<li><p>Positional arguments will replace the corresponding positional arguments from the parent <tt>Invocation</tt>\nin the new <tt>Invocation</tt> unless the positional argument is a reference to the singleton object <tt>opendna.autobahn.repl.utils.Keep</tt>\nTo illustrate this consider the following input scenario:</p>\n<pre>&gt;&gt;&gt;  my_call = my_session.call('some_endpoint')\n&gt;&gt;&gt;  invocation1 = my_call(1,2,3)\n&gt;&gt;&gt;  invocation2 = invocation1(3, Keep, 1)\n&gt;&gt;&gt;  invocation3 = my_call(3,2,1)\n</pre>\n<p>In this scenario <tt>invocation2</tt> and <tt>invocation3</tt> are identical</p>\n</li>\n<li><p>If the number of positional arguments supplied is less than was supplied to the parent <tt>Invocation</tt> then the\nmissing positional arguments will be substituted in from the parent <tt>Invocation</tt> as if <tt>Keep</tt> had been used in their\npositions</p>\n</li>\n<li><p>If the number of position arguments supplied is greater than was supplied to the parent <tt>Invocation</tt> then the\nadditional positional arguments will be ignored</p>\n</li>\n<li><p>Any keyword arguments will replace the corresponding keyword arguments from the parent <tt>Invocation</tt>:</p>\n<pre>&gt;&gt;&gt; my_call = my_session.call('some_endpoint')\n&gt;&gt;&gt; invocation1 = my_call(x=True, y=False)\n&gt;&gt;&gt; invocation2 = invocation1(y=True)\n&gt;&gt;&gt; invocation3 = my_call(x=True, y=True)\n</pre>\n<p>In this scenario <tt>invocation2</tt> and <tt>invocation3</tt> are identical</p>\n</li>\n</ul>\n</div>\n<div id=\"registrations\">\n<h3>Registrations</h3>\n<p>In order to handle calls to WAMP RPC end-points you need to create a\n<tt>Registration</tt> instance:</p>\n<pre>&gt;&gt;&gt; my_registration = my_session.register('endpoint_uri')\nGenerating registration for endpoint_uri with name Rx3mmt2e\nRegistration of endpoint_uri with name Rx3mmt2e starting\nRegistration of endpoint_uri with name Rx3mmt2e succeeded\n</pre>\n<p>You can access this registration by it\u2019s autogenerated name like so:</p>\n<pre>&gt;&gt;&gt; my_session.registrations.Rx3mmt2e\n&lt;opendna.autobahn.repl.rpc.Registration object at 0x7fc89015b0f0&gt;\n&gt;&gt;&gt; my_session.registrations['Rx3mmt2e']\n&lt;opendna.autobahn.repl.rpc.Registration object at 0x7fc89015b0f0&gt;\n</pre>\n<p>You can also provide a a custom <em>name</em> parameter to bypass the use of an autogenerated\nname. Furthermore, the <tt>register</tt> method accepts any keyword-arguments you can\nsupply to the <a href=\"https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.RegisterOptions\" rel=\"nofollow\">autobahn.wamp.types.RegisterOptions constructor</a>.</p>\n<p>Once a registration has succeeded it is available for calling as described in\nthe <a href=\"#calls-and-invocations\" rel=\"nofollow\">Calls and Invocations</a> section. By default the <tt>Registration</tt> class\nprovides a default handler for incoming calls which records the input parameters\nalong with the date and time of the call using a a <tt><span class=\"pre\">Registration..Hit</span></tt> instance.\nThis <tt>Hit</tt> is a <tt>namedtuple</tt> providing three attributes: <em>timestamp</em>, <em>args</em>\nand <em>kwargs</em>. When the registration is the target of a call the console will output text like:</p>\n<p><tt><span class=\"pre\">End-point</span> endpoint_uri named Rx3mmt2e hit at <span class=\"pre\">2017-12-01</span> 22:04:10.030438. Hit named jqD8TxFp stored</tt></p>\n<p>Hits stored on a registration can be accessed using either the auto-generated name\nor via a numeric index (hits are stored in the order they are received):</p>\n<pre>&gt;&gt;&gt; my_registration.hits[0]\nHit(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n&gt;&gt;&gt; my_registration.hits.jqD8TxFp\nHit(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n</pre>\n<p>When creating a <tt>Registration</tt> it is also possible to specify a custom handler\nwhich is used in addition to the default handler for incoming calls. This custom\nhandler may be either a standard function or an async function and is called\nafter the hit is stored by the <tt>Registration</tt> instance. Additionally, the result\nof the custom handler will be returned to the caller (the default handler will return\n<tt>None</tt> in the event that no custom handler is supplied):</p>\n<pre>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; async def test(*args, **kwargs):\n        await asyncio.sleep(5)\n        print(args, kwargs)\n        return True\n&gt;&gt;&gt; my_registration = my_session.register('endpoint_uri', test)\nGenerating registration for endpoint_uri with name Rx3mmt2e\nRegistration of endpoint_uri with name Rx3mmt2e starting\nRegistration of endpoint_uri with name Rx3mmt2e succeeded\n&gt;&gt;&gt; invocation = my_session.call('endpoint_uri')(1,2,3,False,True,{},x=None)\nGenerating call to endpoint_uri with name shejtoeU\nInvoking endpoint_uri with name dgSHC77i\nInvocation of endpoint_uri with name dgSHC77i starting\nEnd-point endpoint_uri named Rx3mmt2e hit at 2017-12-01 22:04:10.030438. Hit named jqD8TxFp stored\n(1, 2, 3, False, True, {}) {'x': None}\nInvocation of endpoint_uri with name dgSHC77i succeeded\n&gt;&gt;&gt; invocation.result\nTrue\n</pre>\n<p>It is also possible to deregister an existing registration:</p>\n<pre>&gt;&gt;&gt; my_registration.deregister()\nDeregistration of endpoint_uri with name Rx3mmt2e starting\nDeregistration of endpoint_uri with name Rx3mmt2e succeeded\n</pre>\n</div>\n<div id=\"publishers-and-publications\">\n<h3>Publishers and Publications</h3>\n<p>In order to emit WAMP PubSub events you need to create a <tt>Publisher</tt> instance:</p>\n<pre>&gt;&gt;&gt; my_publisher = my_session.publish('topic_uri')\nGenerating publisher for topic_uri with name YunLGYwr\n</pre>\n<p>You can access this publisher by it\u2019s autogenerated name like so:</p>\n<pre>&gt;&gt;&gt; my_session.publishers.YunLGYwr\n&lt;opendna.autobahn.repl.pubsub.Publisher object at 0x7fe1ec20a160&gt;\n&gt;&gt;&gt; my_session.publishers['YunLGYwr']\n&lt;opendna.autobahn.repl.pubsub.Publisher object at 0x7fe1ec20a160&gt;\n</pre>\n<p>You can also provide a a custom <em>name</em> parameter to bypass the use of an autogenerated\nname. Furthermore, the <tt>publish</tt> method accepts any keyword-arguments you can\nsupply to the <a href=\"https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.PublishOptions\" rel=\"nofollow\">autobahn.wamp.types.PublishOptions constructor</a>.</p>\n<p>A <tt>Publisher</tt> instance is itself callable and can be invoked in order to produce an\n<tt>Publication</tt> instance. Creating a <tt>Publication</tt> initiates the process of\nsending the WAMP PubSub event using the <tt>Session</tt> instance associated with the\n<tt>Publisher</tt> instance that is the parent of the <tt>Publication</tt>:</p>\n<pre>&gt;&gt;&gt; my_publication = my_publisher(a=True, b=False)\nPublication to topic_uri with name CHrYRIn8 starting\nPublication to topic_uri with name CHrYRIn8 succeeded\n</pre>\n<p>You will note that the <tt>Publication</tt> also receives a auto-generated name which\ncan be used to access it from the parent <tt>Publisher</tt> instance like so:</p>\n<pre>&gt;&gt;&gt; my_publisher.publications.CHrYRIn8\n&lt;opendna.autobahn.repl.pubsub.Publication object at 0x7fe1f496a5c0&gt;\n&gt;&gt;&gt; my_publisher.publications['CHrYRIn8']\n&lt;opendna.autobahn.repl.pubsub.Publication object at 0x7fe1f496a5c0&gt;\n</pre>\n<p>The <tt>Publication</tt> instance exposes two important properties that can be\nused to access the results of the WAMP PubSub event emission:</p>\n<ul>\n<li><tt>result</tt> will contain the result of the WAMP PubSub event emission if the <tt>acknowledge</tt> boolean\nparameter supplied to the <tt>publish</tt> was set to <tt>True</tt>. In all other instances it will contain <tt>None</tt></li>\n<li><tt>exception</tt> will contain the exception result of the WAMP PubSub event emission if it failed or <tt>None</tt>\nif no failure was detected</li>\n</ul>\n<p>Finally, a <tt>Publication</tt> instance is itself callable. Calling a <tt>Publication</tt> will\nproduce a new <tt>Publication</tt> instance attached to the parent <tt>Publisher</tt> of the\ncalled <tt>Publication</tt>. The behaviour of the arguments and keyword arguments when\ncalling a <tt>Publication</tt> is quite specific and affects the creation of the new\n<tt>Publication</tt> as follows:</p>\n<ul>\n<li><p>Positional arguments will replace the corresponding positional arguments from the parent <tt>Publication</tt>\nin the new <tt>Publication</tt> unless the positional argument is a reference to the singleton object <tt>opendna.autobahn.repl.utils.Keep</tt>\nTo illustrate this consider the following input scenario:</p>\n<pre>&gt;&gt;&gt;  my_publisher = my_session.publish('some_topic')\n&gt;&gt;&gt;  publication1 = my_publisher(1,2,3)\n&gt;&gt;&gt;  publication2 = publication1(3, Keep, 1)\n&gt;&gt;&gt;  publication3 = my_publisher(3,2,1)\n</pre>\n<p>In this scenario <tt>publication2</tt> and <tt>publication3</tt> are identical</p>\n</li>\n<li><p>If the number of positional arguments supplied is less than was supplied to the parent <tt>Publication</tt> then the\nmissing positional arguments will be substituted in from the parent <tt>Publication</tt> as if <tt>Keep</tt> had been used in their\npositions</p>\n</li>\n<li><p>If the number of position arguments supplied is greater than was supplied to the parent <tt>Publication</tt> then the\nadditional positional arguments will be ignored</p>\n</li>\n<li><p>Any keyword arguments will replace the corresponding keyword arguments from the parent <tt>Publication</tt>:</p>\n<pre>&gt;&gt;&gt; my_publisher = my_session.publish('some_topic')\n&gt;&gt;&gt; publication1 = my_publisher(x=True, y=False)\n&gt;&gt;&gt; publication2 = publication1(y=True)\n&gt;&gt;&gt; publication3 = my_publisher(x=True, y=True)\n</pre>\n<p>In this scenario <tt>publication2</tt> and <tt>publication3</tt> are identical</p>\n</li>\n</ul>\n</div>\n<div id=\"subscriptions\">\n<h3>Subscriptions</h3>\n<p>In order to subscribe to WAMP PubSub topics you need to create a <tt>Subscription</tt> instance:</p>\n<pre>&gt;&gt;&gt; my_subscription = my_session.subscribe('topic_uri')\nGenerating subscription for topic_uri with name bIMq6XcO\nSubscription to topic_uri with name bIMq6XcO starting\nSubscription to topic_uri with name bIMq6XcO succeeded\n</pre>\n<p>You can access this subscription by it\u2019s autogenerated name like so:</p>\n<pre>&gt;&gt;&gt; my_session.subscriptions.bIMq6XcO\n&lt;opendna.autobahn.repl.pubsub.Subscription object at 0x7fe1f5f9aef0&gt;\n&gt;&gt;&gt; my_session.subscriptions['bIMq6XcO']\n&lt;opendna.autobahn.repl.pubsub.Subscription object at 0x7fe1f5f9aef0&gt;\n</pre>\n<p>You can also provide a a custom <em>name</em> parameter to bypass the use of an autogenerated\nname. Furthermore, the <tt>subscribe</tt> method accepts any keyword-arguments you can\nsupply to the <a href=\"https://autobahn.readthedocs.io/en/latest/reference/autobahn.wamp.html#autobahn.wamp.types.SubscribeOptions\" rel=\"nofollow\">autobahn.wamp.types.SubscribeOptions constructor</a>.</p>\n<p>Once a subscription has succeeded it will be notified of WAMP PubSub events\nemitted as described in the <a href=\"#publishers-and-publications\" rel=\"nofollow\">Publishers and Publications</a> section. Note, however,\nthat by default a subscription to a topic will only receive events emitted by\nother sessions. The <em>exclude_me</em> parameter for the <tt>Publisher</tt> must be set to\n<tt>True</tt> if you wish to test publication and subscription to a given topic within\na single <tt>Session</tt>.</p>\n<p>The <tt>Subscription</tt> class provides a default handler for incoming events which\nrecords the input parameters along with the date and time of the call using a\n<tt>Subscription.Hit</tt> instance. This <tt>Event</tt> is a <tt>namedtuple</tt> providing three\nattributes: <em>timestamp</em>, <em>args</em> and <em>kwargs</em>. When the subscription receives an\nevent the console will output text like:</p>\n<p><tt>Event named s3X0Sbhc received at <span class=\"pre\">2017-12-03</span> 21:59:55.437068 on topic topic_uri named bIMq6XcO</tt></p>\n<p>Events stored on a subscription can be accessed using either the auto-generated name\nor via a numeric index (hits are stored in the order they are received):</p>\n<pre>&gt;&gt;&gt; my_subscription.events[0]\nEvent(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n&gt;&gt;&gt; my_subscription.events.jqD8TxFp\nEvent(timestamp=datetime.datetime(2017, 12, 1, 22, 4, 10, 30438), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n</pre>\n<p>When creating a <tt>Subscription</tt> it is also possible to specify a custom handler\nwhich is used in addition to the default handler for incoming events. This custom\nhandler may be either a standard function or an async function and is called\nafter the event is stored by the <tt>Subscription</tt> instance:</p>\n<pre>&gt;&gt;&gt; async def test(*args, **kwargs):\n        print(args, kwargs)\n&gt;&gt;&gt; my_subscription = my_session.subscribe('topic_uri', test)\nGenerating subscription for topic_uri with name bIMq6XcO\nSubscription to topic_uri with name bIMq6XcO starting\nSubscription to topic_uri with name bIMq6XcO succeeded\n&gt;&gt;&gt; publication = my_session.publish('topic_uri', exclude_me=False)(1,2,3,False,True,{},x=None)\nGenerating publisher for topic_uri with name VVjZjvF5\nPublication to topic_uri with name sjfuAGSm starting\nPublication to topic_uri with name sjfuAGSm succeeded\nEvent named ZbbzBrxJ received at 2017-12-03 22:18:10.383218 on topic topic_uri named bIMq6XcO\n(1, 2, 3, False, True, {}) {'x': None}\n&gt;&gt;&gt; my_subscription.events.ZbbzBrxJ\nEvent(timestamp=datetime.datetime(2017, 12, 3, 22, 18, 10, 383218), args=(1, 2, 3, False, True, {}), kwargs={'x': None})\n</pre>\n<p>It is also possible to unsubscribe from a topic:</p>\n<pre>&gt;&gt;&gt; my_subscription.unsubscribe()\nUnsubscription from topic_uri with name bIMq6XcO starting\nUnsubscription from topic_uri with name bIMq6XcO succeeded\n</pre>\n</div>\n</div>\n<div id=\"extending\">\n<h2>Extending</h2>\n<p>TBD</p>\n<div id=\"ptpython-config-module\">\n<h3>PtPython config module</h3>\n<p>TBD</p>\n</div>\n<div id=\"repl-class-substitution\">\n<h3>REPL class substitution</h3>\n<p>TBD</p>\n</div>\n</div>\n<div id=\"repl-api\">\n<h2>REPL API</h2>\n<p>TBD</p>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<ul>\n<li>Improved UI with custom panes/tabs/views for examining Calls, Invocations,\nPublishers, Publications, Registrations and Subscriptions</li>\n<li><tt>deregister</tt>/<tt>Unsubscribe</tt> should clean up the <tt>Registration</tt>/<tt>Subscription</tt> instance</li>\n<li>Support usage in other REPLs</li>\n<li>You tell me!</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li>Autobahn-Python for providing the secret WAMP sauce</li>\n<li>PtPython for providing the secret REPL sauce</li>\n<li>Jedi for providing PtPython with the secret code completion sauce</li>\n<li>PromptToolkit for providing PtPython with the prompt secret sauce</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4575813, "releases": {"17.12.4": [{"comment_text": "", "digests": {"md5": "b5cb88191fb4aae89da6b3d91a34f375", "sha256": "fa8f8e104a3c30a7e4cdcc6f9de6801f45d961874eb47b0f50e4b15135367a7b"}, "downloads": -1, "filename": "autobahn-python-repl-17.12.4.tar.gz", "has_sig": false, "md5_digest": "b5cb88191fb4aae89da6b3d91a34f375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27601, "upload_time": "2017-12-04T09:11:23", "upload_time_iso_8601": "2017-12-04T09:11:23.622649Z", "url": "https://files.pythonhosted.org/packages/d9/e3/87552ac63af3bd030c666a9e77eef59dac31c87dc940d261a8faa1174641/autobahn-python-repl-17.12.4.tar.gz", "yanked": false}], "18.12.8": [{"comment_text": "", "digests": {"md5": "32c7e1e90449d8ce4229cf20f9150afe", "sha256": "150ec271676f0549756d8a88f3b3bfd15bcbcea72c929edb1beb8b05533c3a25"}, "downloads": -1, "filename": "autobahn_python_repl-18.12.8-py3-none-any.whl", "has_sig": false, "md5_digest": "32c7e1e90449d8ce4229cf20f9150afe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29402, "upload_time": "2018-12-08T18:41:53", "upload_time_iso_8601": "2018-12-08T18:41:53.032618Z", "url": "https://files.pythonhosted.org/packages/08/0a/6328416595d71fc9e69dfcf9847940c86114bc3edf5bdf62fd87a83ed335/autobahn_python_repl-18.12.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6645c5e1e26f534604ac52dc9312fc2", "sha256": "dda4c8aa70464932093d9b81a330f5458190a020b086e9c9c19e5ddb7ed7cc6e"}, "downloads": -1, "filename": "autobahn-python-repl-18.12.8.tar.gz", "has_sig": false, "md5_digest": "d6645c5e1e26f534604ac52dc9312fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25239, "upload_time": "2018-12-08T18:41:55", "upload_time_iso_8601": "2018-12-08T18:41:55.147194Z", "url": "https://files.pythonhosted.org/packages/44/24/0f3b25dbf2ded6a04921ab6aaa2537f489242229f91f41a7fe077685bdfd/autobahn-python-repl-18.12.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "32c7e1e90449d8ce4229cf20f9150afe", "sha256": "150ec271676f0549756d8a88f3b3bfd15bcbcea72c929edb1beb8b05533c3a25"}, "downloads": -1, "filename": "autobahn_python_repl-18.12.8-py3-none-any.whl", "has_sig": false, "md5_digest": "32c7e1e90449d8ce4229cf20f9150afe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29402, "upload_time": "2018-12-08T18:41:53", "upload_time_iso_8601": "2018-12-08T18:41:53.032618Z", "url": "https://files.pythonhosted.org/packages/08/0a/6328416595d71fc9e69dfcf9847940c86114bc3edf5bdf62fd87a83ed335/autobahn_python_repl-18.12.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6645c5e1e26f534604ac52dc9312fc2", "sha256": "dda4c8aa70464932093d9b81a330f5458190a020b086e9c9c19e5ddb7ed7cc6e"}, "downloads": -1, "filename": "autobahn-python-repl-18.12.8.tar.gz", "has_sig": false, "md5_digest": "d6645c5e1e26f534604ac52dc9312fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25239, "upload_time": "2018-12-08T18:41:55", "upload_time_iso_8601": "2018-12-08T18:41:55.147194Z", "url": "https://files.pythonhosted.org/packages/44/24/0f3b25dbf2ded6a04921ab6aaa2537f489242229f91f41a7fe077685bdfd/autobahn-python-repl-18.12.8.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:21 2020"}