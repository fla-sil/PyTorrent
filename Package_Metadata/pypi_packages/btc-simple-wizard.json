{"info": {"author": "MEADez", "author_email": "m3adez@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "============================\nBTC Simple Wizard\n============================\n\nA simple application with some classes and scripts for wizard implementation.\n\nDetailed documentation is in the \"docs\" directory.\n\nQuick start\n-----------\n\n1. Add wizard app to project app list in project settings::\n\n    INSTALLED_APPS = [\n        ...\n        'simple_wizard'\n    ]\n\n2. Add wizard modal to base template::\n\n    {% include 'simple_wizard/wizard_modal.html' %}\n\n3. Construct management view with steps like this::\n\n    class WizardManagementView(WizardBaseView):\n        \"\"\"\n        View for creating wizard with 3 steps\n        \"\"\"\n\n        management_url_pattern = 'test_app:wizard_management'\n        common_title = 'Common Title'  # for steps without own title\n\n        class FirstStep(WizardModalStepMixin, TemplateView):\n            \"\"\"\n            First step - simple modal with text message and continue button.\n            \"\"\"\n\n            unique_name = 'message_step'\n            template_name = 'simple_wizard/wizard_modal_message.html'\n            message = 'Simple message step'\n            cache_step = False  # step doesn't ask server on repeat show (if it already fetched)\n            buttons = [\n                LoadWizardStepButton(\n                    load_step='form_step',  # next step (get request)\n                    title='Continue',\n                    css_classes=['btn btn-primary']\n                )\n            ]\n\n        class SecondStep(WizardModalStepWithFormMixin, FormView):\n            \"\"\"\n            Second step - modal with form (can be form or model form), validation supported.\n            \"\"\"\n\n            unique_name = 'form_step'\n            template_name = 'simple_wizard/wizard_modal_form.html'\n            form_class = SecondStepForm\n            redirect_to_step_if_valid = 'third_step'\n            buttons = [\n                LoadWizardStepPostButton(\n                    load_step='form_step',\n                    title='Continue',\n                    css_classes=['btn btn-primary']\n                )\n            ]\n\n            def form_valid(self, form):\n                test_model = TestModel.objects.filter(pk=self.kwargs.ger('pk')).first()\n                test_model.field_1 = form.cleaned_data.get('field_1')\n                test_model.save()\n\n            return super().form_valid(self, form):\n\n        class ThirdStep(WizardModalStepWithFormMixin, TemplateView):\n            \"\"\"\n            Third step - just a template modal\n            \"\"\"\n\n            unique_name = 'third_step'\n            template_name = 'third_step.html'\n            buttons = [\n                CloseWizardModalButton(\n                    title='Finish',\n                    css_classes=['btn btn-primary']\n                )\n            ]\n\n4. Setups ``urls``::\n\n    app_name = 'test_app'\n\n    ...\n\n    urlpatterns = [\n        ...\n        path('wizard-management/<step_to_load>/<int:pk>/', WizardManagementView.as_view(), name='wizard_management')\n    ]\n\n5. Add static files for wizard work::\n\n    <script src=\"{% static 'simple_wizard/wizard.js' %}\"></script>\n\n6. Initialize wizard handler::\n\n        $(document).ready(function () {\n            const django_modal_wizard = new DjangoModalWizard(\n                '#wizard-modal',\n                '.js-wizard_modal_content',\n                '.js-load_wizard',\n                '.js-close_wizard'\n            );\n            django_modal_wizard.initSignals();\n        });", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MEADez/btc-simple-manager", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "btc-simple-wizard", "package_url": "https://pypi.org/project/btc-simple-wizard/", "platform": "", "project_url": "https://pypi.org/project/btc-simple-wizard/", "project_urls": {"Homepage": "https://github.com/MEADez/btc-simple-manager"}, "release_url": "https://pypi.org/project/btc-simple-wizard/0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple application with some classes and scripts for wizard implementation.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple application with some classes and scripts for wizard implementation.</p>\n<p>Detailed documentation is in the \u201cdocs\u201d directory.</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Add wizard app to project app list in project settings:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'simple_wizard'\n]\n</pre>\n</li>\n<li><p>Add wizard modal to base template:</p>\n<pre>{% include 'simple_wizard/wizard_modal.html' %}\n</pre>\n</li>\n<li><p>Construct management view with steps like this:</p>\n<pre>class WizardManagementView(WizardBaseView):\n    \"\"\"\n    View for creating wizard with 3 steps\n    \"\"\"\n\n    management_url_pattern = 'test_app:wizard_management'\n    common_title = 'Common Title'  # for steps without own title\n\n    class FirstStep(WizardModalStepMixin, TemplateView):\n        \"\"\"\n        First step - simple modal with text message and continue button.\n        \"\"\"\n\n        unique_name = 'message_step'\n        template_name = 'simple_wizard/wizard_modal_message.html'\n        message = 'Simple message step'\n        cache_step = False  # step doesn't ask server on repeat show (if it already fetched)\n        buttons = [\n            LoadWizardStepButton(\n                load_step='form_step',  # next step (get request)\n                title='Continue',\n                css_classes=['btn btn-primary']\n            )\n        ]\n\n    class SecondStep(WizardModalStepWithFormMixin, FormView):\n        \"\"\"\n        Second step - modal with form (can be form or model form), validation supported.\n        \"\"\"\n\n        unique_name = 'form_step'\n        template_name = 'simple_wizard/wizard_modal_form.html'\n        form_class = SecondStepForm\n        redirect_to_step_if_valid = 'third_step'\n        buttons = [\n            LoadWizardStepPostButton(\n                load_step='form_step',\n                title='Continue',\n                css_classes=['btn btn-primary']\n            )\n        ]\n\n        def form_valid(self, form):\n            test_model = TestModel.objects.filter(pk=self.kwargs.ger('pk')).first()\n            test_model.field_1 = form.cleaned_data.get('field_1')\n            test_model.save()\n\n        return super().form_valid(self, form):\n\n    class ThirdStep(WizardModalStepWithFormMixin, TemplateView):\n        \"\"\"\n        Third step - just a template modal\n        \"\"\"\n\n        unique_name = 'third_step'\n        template_name = 'third_step.html'\n        buttons = [\n            CloseWizardModalButton(\n                title='Finish',\n                css_classes=['btn btn-primary']\n            )\n        ]\n</pre>\n</li>\n<li><p>Setups <tt>urls</tt>:</p>\n<pre>app_name = 'test_app'\n\n...\n\nurlpatterns = [\n    ...\n    path('wizard-management/&lt;step_to_load&gt;/&lt;int:pk&gt;/', WizardManagementView.as_view(), name='wizard_management')\n]\n</pre>\n</li>\n<li><p>Add static files for wizard work:</p>\n<pre>&lt;script src=\"{% static 'simple_wizard/wizard.js' %}\"&gt;&lt;/script&gt;\n</pre>\n</li>\n<li><p>Initialize wizard handler:</p>\n<pre>$(document).ready(function () {\n    const django_modal_wizard = new DjangoModalWizard(\n        '#wizard-modal',\n        '.js-wizard_modal_content',\n        '.js-load_wizard',\n        '.js-close_wizard'\n    );\n    django_modal_wizard.initSignals();\n});\n</pre>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 6448721, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d4ecbc515f3aa614fed46d4fff5e857d", "sha256": "0720bfc92a6f9d2c809df831d7ea7f6343cf292329d744ca2fa152c3b8a6e40f"}, "downloads": -1, "filename": "btc-simple-wizard-0.1.tar.gz", "has_sig": false, "md5_digest": "d4ecbc515f3aa614fed46d4fff5e857d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7944, "upload_time": "2019-12-24T11:16:28", "upload_time_iso_8601": "2019-12-24T11:16:28.526505Z", "url": "https://files.pythonhosted.org/packages/ce/2a/55875002d5117d8dd6609b53c65d09dc2a43a880633110cf8a679f327208/btc-simple-wizard-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "048d74b138e8896c2e6ad179d8467227", "sha256": "bacdfe8493a13c405540eae521fedaa56dc8856843499bf9902ab3af2df037f9"}, "downloads": -1, "filename": "btc-simple-wizard-0.2.tar.gz", "has_sig": false, "md5_digest": "048d74b138e8896c2e6ad179d8467227", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8468, "upload_time": "2020-01-10T15:12:54", "upload_time_iso_8601": "2020-01-10T15:12:54.510557Z", "url": "https://files.pythonhosted.org/packages/50/dd/993ad80b65b9d16d0b5dcc9099503c2358d2ef227a15ccb2b6f6a7c80cdb/btc-simple-wizard-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "61b2a19da225541952732c88907b154f", "sha256": "b6505164184f4608b59f80f76a440a2e34c67d03453c19905818ba85481d1ac3"}, "downloads": -1, "filename": "btc-simple-wizard-0.3.tar.gz", "has_sig": false, "md5_digest": "61b2a19da225541952732c88907b154f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8804, "upload_time": "2020-01-14T03:07:21", "upload_time_iso_8601": "2020-01-14T03:07:21.476136Z", "url": "https://files.pythonhosted.org/packages/84/e1/b8d41d778371d150820080a2cf85f8bfd571e5b5c42b7702f7a2f9aa10ab/btc-simple-wizard-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "61b2a19da225541952732c88907b154f", "sha256": "b6505164184f4608b59f80f76a440a2e34c67d03453c19905818ba85481d1ac3"}, "downloads": -1, "filename": "btc-simple-wizard-0.3.tar.gz", "has_sig": false, "md5_digest": "61b2a19da225541952732c88907b154f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8804, "upload_time": "2020-01-14T03:07:21", "upload_time_iso_8601": "2020-01-14T03:07:21.476136Z", "url": "https://files.pythonhosted.org/packages/84/e1/b8d41d778371d150820080a2cf85f8bfd571e5b5c42b7702f7a2f9aa10ab/btc-simple-wizard-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:10 2020"}