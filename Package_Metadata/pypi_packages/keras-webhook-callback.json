{"info": {"author": "Alex Bella", "author_email": "alexbella365@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3"], "description": "# Keras Notification Callback\n\n[![PyPI version](https://badge.fury.io/py/keras-webhook-callback.svg)](https://badge.fury.io/py/keras-webhook-callback)\n\nA Keras callback which sends information about your model training, on various messaging platforms.\n\n## Installation\n\nUsing `pip`:\n\n```bash\npip install keras-webhook-callback\n```\n\n## Usage\n\nImport the required module and add it to the list callbacks while training your model.\n\n**Example:**\n\n```python\n>>> from keras_webhook_callback import TelegramCallback\n>>> telegram_callback = TelegramCallback('<BotToken>',\n                                         '<ChatID>',\n\t                                 'CNN Model',\n\t                                 ['loss', 'val_loss'],\n\t                                 ['accuracy', 'val_accuracy'],\n\t                                 True)\n>>> model.fit(x_train, y_train,\n              batch_size=32,\n              epochs=10,\n              validation_data=(x_test, y_test),\n              callbacks=[telegram_callback])\n```\n\n### Telegram\n\n1. Create a telegram bot using BotFather\n\t* Search for @BotFather on telegram.\n\t* Send `/help` to get list of all commands.\n\t* Send `/newbot` to create a new bot and complete the setup.\n\t* Copy the **bot token** after creating the bot.\n2. Get the **chat ID**\n\t* Search for the bot you created and send it any random message.\n\t* Go to this URL `https://api.telegram.org/bot<BOT_TOKEN>/getUpdates` (replace <BOT_TOKEN> with your bot token)\n\t* Copy the `chat id` of the user you want to send messages to.\n3. Use the `TelegramCallback()` class.\n\n```python\nTelegramCallback(bot_token=None, chat_id=None, modelName='model', loss_metrics=['loss'], acc_metrics=[], getSummary=False):\n```\n\n**Arguments:**\n\n* `bot_token` : unique token of Telegram bot `{str}`\n* `chat_id` : Telegram chat id you want to send message to `{str}`\n* `modelName` : name of your model `{str}`\n* `loss_metrics` : loss metrics you want in the loss graph `{list of strings}`\n* `acc_metrics` : accuracy metrics you want in the accuracy graphs `{list of strings}`\n* `getSummary` : Do you want message for each epoch (False) or a single message containing information about all epochs (True). `{bool}`\n\n### Slack\n\n1. Create a Slack workspace\n2. Create a new channel\n3. Search for the **Incoming Webhooks** in the Apps and install it.\n4. Copy the **Webhook URL**\n5. Use the `SlackCallback()` class.\n\n```python\nSlackCallback(bot_token=None, chat_id=None, modelName='model', loss_metrics=['loss'], acc_metrics=[], getSummary=False):\n```\n\n**Arguments:**\n\n* `webhookURL` : unique webhook URL of the app `{str}`\n* `channel` :  channel name or username you want to send message to `{str}`\n* `modelName` : name of your model `{str}`\n* `loss_metrics` : loss metrics you want in the loss graph `{list of strings}`\n* `acc_metrics` : accuracy metrics you want in the accuracy graph `{list of strings}`\n* `getSummary` : Do you want message for each epoch (False) or a single message containing information about all epochs (True). `{bool}`\n\n*Sending images in Slack is not supported currently.*\n\n## ToDo\n\n* WhatsApp\n* E-Mail\n* Zulip\n* Messages\n\n## Motivation\n\nAs the Deep Learning models are getting more and more complex and computationally heavy, they take a very long time to train. During my internship, people used to start the model training and left it overnight. They could only check its progress the next day. So I thought it would be great if there was a simple way to get the training info remotely on their devices.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AlexBella365/keras_webhook_callback", "keywords": "api python keras training callback", "license": "GNU General Public License v3 (GPLv3)", "maintainer": "", "maintainer_email": "", "name": "keras-webhook-callback", "package_url": "https://pypi.org/project/keras-webhook-callback/", "platform": "", "project_url": "https://pypi.org/project/keras-webhook-callback/", "project_urls": {"Homepage": "https://github.com/AlexBella365/keras_webhook_callback"}, "release_url": "https://pypi.org/project/keras-webhook-callback/0.2.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Receive notifications about your model training on your messaging app!", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keras Notification Callback</h1>\n<p><a href=\"https://badge.fury.io/py/keras-webhook-callback\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52db3e20f580a7418d7187a32a6bbdd31a28bfa1/68747470733a2f2f62616467652e667572792e696f2f70792f6b657261732d776562686f6f6b2d63616c6c6261636b2e737667\"></a></p>\n<p>A Keras callback which sends information about your model training, on various messaging platforms.</p>\n<h2>Installation</h2>\n<p>Using <code>pip</code>:</p>\n<pre>pip install keras-webhook-callback\n</pre>\n<h2>Usage</h2>\n<p>Import the required module and add it to the list callbacks while training your model.</p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">keras_webhook_callback</span> <span class=\"kn\">import</span> <span class=\"n\">TelegramCallback</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">telegram_callback</span> <span class=\"o\">=</span> <span class=\"n\">TelegramCallback</span><span class=\"p\">(</span><span class=\"s1\">'&lt;BotToken&gt;'</span><span class=\"p\">,</span>\n                                         <span class=\"s1\">'&lt;ChatID&gt;'</span><span class=\"p\">,</span>\n\t                                 <span class=\"s1\">'CNN Model'</span><span class=\"p\">,</span>\n\t                                 <span class=\"p\">[</span><span class=\"s1\">'loss'</span><span class=\"p\">,</span> <span class=\"s1\">'val_loss'</span><span class=\"p\">],</span>\n\t                                 <span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">,</span> <span class=\"s1\">'val_accuracy'</span><span class=\"p\">],</span>\n\t                                 <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span>\n              <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n              <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n              <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">x_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">),</span>\n              <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">telegram_callback</span><span class=\"p\">])</span>\n</pre>\n<h3>Telegram</h3>\n<ol>\n<li>Create a telegram bot using BotFather\n<ul>\n<li>Search for @BotFather on telegram.</li>\n<li>Send <code>/help</code> to get list of all commands.</li>\n<li>Send <code>/newbot</code> to create a new bot and complete the setup.</li>\n<li>Copy the <strong>bot token</strong> after creating the bot.</li>\n</ul>\n</li>\n<li>Get the <strong>chat ID</strong>\n<ul>\n<li>Search for the bot you created and send it any random message.</li>\n<li>Go to this URL <code>https://api.telegram.org/bot&lt;BOT_TOKEN&gt;/getUpdates</code> (replace &lt;BOT_TOKEN&gt; with your bot token)</li>\n<li>Copy the <code>chat id</code> of the user you want to send messages to.</li>\n</ul>\n</li>\n<li>Use the <code>TelegramCallback()</code> class.</li>\n</ol>\n<pre><span class=\"n\">TelegramCallback</span><span class=\"p\">(</span><span class=\"n\">bot_token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">modelName</span><span class=\"o\">=</span><span class=\"s1\">'model'</span><span class=\"p\">,</span> <span class=\"n\">loss_metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'loss'</span><span class=\"p\">],</span> <span class=\"n\">acc_metrics</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">getSummary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n</pre>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>bot_token</code> : unique token of Telegram bot <code>{str}</code></li>\n<li><code>chat_id</code> : Telegram chat id you want to send message to <code>{str}</code></li>\n<li><code>modelName</code> : name of your model <code>{str}</code></li>\n<li><code>loss_metrics</code> : loss metrics you want in the loss graph <code>{list of strings}</code></li>\n<li><code>acc_metrics</code> : accuracy metrics you want in the accuracy graphs <code>{list of strings}</code></li>\n<li><code>getSummary</code> : Do you want message for each epoch (False) or a single message containing information about all epochs (True). <code>{bool}</code></li>\n</ul>\n<h3>Slack</h3>\n<ol>\n<li>Create a Slack workspace</li>\n<li>Create a new channel</li>\n<li>Search for the <strong>Incoming Webhooks</strong> in the Apps and install it.</li>\n<li>Copy the <strong>Webhook URL</strong></li>\n<li>Use the <code>SlackCallback()</code> class.</li>\n</ol>\n<pre><span class=\"n\">SlackCallback</span><span class=\"p\">(</span><span class=\"n\">bot_token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">modelName</span><span class=\"o\">=</span><span class=\"s1\">'model'</span><span class=\"p\">,</span> <span class=\"n\">loss_metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'loss'</span><span class=\"p\">],</span> <span class=\"n\">acc_metrics</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">getSummary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n</pre>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>webhookURL</code> : unique webhook URL of the app <code>{str}</code></li>\n<li><code>channel</code> :  channel name or username you want to send message to <code>{str}</code></li>\n<li><code>modelName</code> : name of your model <code>{str}</code></li>\n<li><code>loss_metrics</code> : loss metrics you want in the loss graph <code>{list of strings}</code></li>\n<li><code>acc_metrics</code> : accuracy metrics you want in the accuracy graph <code>{list of strings}</code></li>\n<li><code>getSummary</code> : Do you want message for each epoch (False) or a single message containing information about all epochs (True). <code>{bool}</code></li>\n</ul>\n<p><em>Sending images in Slack is not supported currently.</em></p>\n<h2>ToDo</h2>\n<ul>\n<li>WhatsApp</li>\n<li>E-Mail</li>\n<li>Zulip</li>\n<li>Messages</li>\n</ul>\n<h2>Motivation</h2>\n<p>As the Deep Learning models are getting more and more complex and computationally heavy, they take a very long time to train. During my internship, people used to start the model training and left it overnight. They could only check its progress the next day. So I thought it would be great if there was a simple way to get the training info remotely on their devices.</p>\n\n          </div>"}, "last_serial": 6828701, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1757b71ee9777dc52f92eb4913796831", "sha256": "17263ed9c8b465454e927b6543940f0f377e897b247a7c8975565ae50a9e0abc"}, "downloads": -1, "filename": "keras_webhook_callback-0.1.tar.gz", "has_sig": false, "md5_digest": "1757b71ee9777dc52f92eb4913796831", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4053, "upload_time": "2020-03-15T13:29:05", "upload_time_iso_8601": "2020-03-15T13:29:05.239112Z", "url": "https://files.pythonhosted.org/packages/12/bb/c373e9a84b2319f6dc5b1a02b1080cba217b5fe6ba3079fe8ec80088e323/keras_webhook_callback-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3c0aa894c7752931b36f192f5159eb70", "sha256": "7be341d5bc646c29ceda55d14767099f376fbaa9c9fd69a1feb02c86b3645d5e"}, "downloads": -1, "filename": "keras_webhook_callback-0.2.tar.gz", "has_sig": false, "md5_digest": "3c0aa894c7752931b36f192f5159eb70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4035, "upload_time": "2020-03-15T14:01:24", "upload_time_iso_8601": "2020-03-15T14:01:24.819851Z", "url": "https://files.pythonhosted.org/packages/41/1c/add86247a99fd6661a41c86a06a3c8fb20e10073a9044598f8f9595d1d7c/keras_webhook_callback-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "25201e749fe43793ec6ab1d5655a2e73", "sha256": "5ad1b2bb40306207b563c5a741b409d465ff19357915a70d9c322b025bcc0aa3"}, "downloads": -1, "filename": "keras_webhook_callback-0.2.1.tar.gz", "has_sig": false, "md5_digest": "25201e749fe43793ec6ab1d5655a2e73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4033, "upload_time": "2020-03-15T14:03:13", "upload_time_iso_8601": "2020-03-15T14:03:13.385714Z", "url": "https://files.pythonhosted.org/packages/4a/bb/3a53479086234ed85b6fefaca0661011d7c7c9911a74b3877bd3c700b831/keras_webhook_callback-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "1073b6dac66f366e7367d9d8e156d351", "sha256": "972b97118a08f61e48ed7fa08f35aa9f4869c2e925ded26e96255b15d33ef00d"}, "downloads": -1, "filename": "keras_webhook_callback-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1073b6dac66f366e7367d9d8e156d351", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4039, "upload_time": "2020-03-16T21:36:16", "upload_time_iso_8601": "2020-03-16T21:36:16.138622Z", "url": "https://files.pythonhosted.org/packages/96/e3/d7fd464432629d645e1a1f6ee3142ebe605eb1000b83f4362255a055954b/keras_webhook_callback-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "e5776eb6d0cc5aff56c90c05790ab75f", "sha256": "dab7ba8a5b5db756b7b2a35d0f5e4bec90d113fe44a1307893d1f9820febf372"}, "downloads": -1, "filename": "keras_webhook_callback-0.2.3.tar.gz", "has_sig": false, "md5_digest": "e5776eb6d0cc5aff56c90c05790ab75f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4043, "upload_time": "2020-03-17T13:49:47", "upload_time_iso_8601": "2020-03-17T13:49:47.706684Z", "url": "https://files.pythonhosted.org/packages/cc/9d/7983172005aee831ff8793d81392fb1c4d1ea5d43eee902f96db542b7dcc/keras_webhook_callback-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5776eb6d0cc5aff56c90c05790ab75f", "sha256": "dab7ba8a5b5db756b7b2a35d0f5e4bec90d113fe44a1307893d1f9820febf372"}, "downloads": -1, "filename": "keras_webhook_callback-0.2.3.tar.gz", "has_sig": false, "md5_digest": "e5776eb6d0cc5aff56c90c05790ab75f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4043, "upload_time": "2020-03-17T13:49:47", "upload_time_iso_8601": "2020-03-17T13:49:47.706684Z", "url": "https://files.pythonhosted.org/packages/cc/9d/7983172005aee831ff8793d81392fb1c4d1ea5d43eee902f96db542b7dcc/keras_webhook_callback-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:07 2020"}