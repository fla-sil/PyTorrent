{"info": {"author": "Blogg Esse AB", "author_email": "teknik@blogg.se", "bugtrack_url": null, "classifiers": [], "description": "=======\r\nftptool\r\n=======\r\n\r\nHigher-level ftplib\r\n\r\n`ftplib` in itself is a bit raw, as it leaves details about the protocol for\r\nthe user to handle. `ftptool` abstracts that away, and even provides a neat\r\ninterface for file management.\r\n\r\nConnecting & Authenticating\r\n===========================\r\n\r\nCode says more than words, so let's look at an example: connecting.\r\n\r\n>>> a_host = FTPHost.connect(\"ftp.python.org\", user=\"foo\", password=\"bar\")\r\n\r\n`connect` is a classmethod that lets you create an `FTPHost` instance with an\r\nunderlying `ftplib.FTP` instance. \r\n\r\nWorking with Directories\r\n========================\r\n\r\nChanging Working Directory\r\n--------------------------\r\n\r\nChanging and getting the current directory is implemented as a property called\r\n`current_directory`. It is lazy; it won't ask the server which the current\r\ndirectory is until you ask for it.\r\n\r\nNote that since it's a property, this will actually go one level up:\r\n\r\n>>> a_host.current_directory = \"..\"\r\n\r\nSimilarly, this will descend into the \"foo\" directory:\r\n\r\n>>> a_host.current_directory = \"foo\"\r\n\r\nIn most cases, it's easier to just specify absolute paths:\r\n\r\n>>> a_host.current_directory = \"/foo\"\r\n\r\n`current_directory` will always be the server-side representation; when you\r\nchange directory, it ends up sending a ``CWD`` and then a ``PWD`` to get the\r\nresult of the operation (since the FTP protocol doesn't define what the reply\r\ntext to a ``CWD`` is.)\r\n\r\nListing and Walking the Directory Tree\r\n--------------------------------------\r\n\r\nA `os.walk` interface is implemented for walking the directory tree:\r\n\r\n>>> for (dirname, subdirs, files) in a_host.walk(\"/a_dir\"):\r\n...     print dirname, \"has file(s)\", \", \".join(files)\r\n...\r\n/a_dir has file(s) foo, bar\r\n/a_dir/other_dir has file(s) hello\r\n/a_dir/some_dir has file(s)\r\n\r\nJust like `os.walk`, you can remove entries in the `subdirs` list to avoid\r\ndescending into them:\r\n\r\n>>> for (dirname, subdirs, files) in a_host.walk(\"/a_dir\"):\r\n...     for subdir in subdirs:\r\n...         if subdir.startswith(\"other_\"):\r\n...             subdirs.remove(subdir)\r\n...     print dirname, \"has file(s)\", \", \".join(files)\r\n...\r\n/a_dir has file(s) foo, bar\r\n/a_dir/some_dir has file(s)\r\n\r\nYou can non-recursively list a directory using `listdir`:\r\n\r\n>>> a_host.listdir(\"/a_dir\")\r\n(['other_dir', 'some_dir'], ['foo', 'bar'])\r\n\r\nCreating, Deleting and Renaming\r\n-------------------------------\r\n\r\nThe most simple form of creating a directory is `mkdir`. You simply give it a\r\ndirectory to create, and so it does:\r\n\r\n>>> a_host.mkdir(\"/new_dir\")\r\n\r\nIf you just want to ascertain that a directory is ready, i.e., exists for an\r\nupload, you could use `makedirs` which tries to create every part of the\r\ndirectory, piece by piece.\r\n\r\n>>> a_host.makedirs(\"/a_dir/some_dir/a_new_dir/other_new_dir\")\r\n\r\nWould, hypothetically, create ``a_new_dir`` and ``other_new_dir``.\r\n\r\n`ftptool` implements it by first trying to change directory into the given\r\npath, to see if it exists, and then changes back. If it does, it simply\r\nreturns, otherwise it creates the directories piece by piece.\r\n\r\nUsing the File Proxy\r\n====================\r\n\r\nFiles in `ftptool` are implemented using proxy objects called `FTPFileProxy`.\r\nThey represent a file on a remote host. Using them is easy as pie!\r\n\r\n>>> a_host.file_proxy(\"/a_dir/foo\").download_to_str()\r\n'This is the file \"foo\".'\r\n>>> a_host.file_proxy(\"/a_dir/new_file\").upload_from_str(\"Hello world!\")\r\n\r\nThe Three Upload & Download Methods\r\n-----------------------------------\r\n\r\n`ftptool` provides three ways of uploading or downloading files:\r\n* to/from_str: using a str object,\r\n* to/from_file: using a filename,\r\n* and the default: using a file-like object.\r\n\r\nGiven:\r\n\r\n>>> f = a_host.file_proxy(\"/foo.txt\")\r\n\r\nYou could upload and download from str using these two:\r\n\r\n>>> f.upload_from_str(\"Hi!\")\r\n>>> f.download_to_str()\r\n'Hi!'\r\n\r\nAnd using a filename like this:\r\n\r\n>>> f.upload_from_file(\"/etc/motd\")\r\n>>> f.download_to_file(\"/tmp/motd\")\r\n\r\nAnd lastly, using file-like objects:\r\n\r\n>>> f.upload(StringIO(\"Test!\"))\r\n>>> fp = StringIO()\r\n>>> f.download(fp)\r\n>>> fp.getvalue()\r\n'Test!'\r\n\r\nRenaming Files\r\n--------------\r\n\r\nRenaming is a method of the file proxies, called `rename`. It returns a new\r\nfile proxy for the renamed-to file, so the common pattern will be:\r\n\r\n>>> a_file = a_host.file_proxy(\"hello_world\")\r\n>>> a_file = a_file.rename(\"foobar\")\r\n\r\nThis will issue a rename command, too, so `a_file` will essentially be the same\r\nas before, with a new name and a new instance ID.\r\n\r\nDeleting Files\r\n--------------\r\n\r\nDeleting a file is much like renaming it: it's a method of the file proxies,\r\ncalled `delete`. It, however, doesn't have a meaningful return value.\r\n\r\n>>> a_file.delete()\r\n\r\nMirroring\r\n=========\r\n\r\n`ftptool` supports two types of mirroring: local to remote, and remote to\r\nlocal. As in, it can download a whole directory and all descendants into a\r\nlocal directory, for you to play with. It can also upload a whole directory to\r\na remote host.\r\n\r\nThe first one, downloading, is called `mirror_to_local`. It's used like so:\r\n\r\n>>> a_host.mirror_to_local('/a_dir', 'my_copy_of_a_dir')\r\n\r\nThe cousin, mirror_to_remote, has the same signature; source first, then\r\ndestination.\r\n\r\n>>> a_host.mirror_to_remote('my_copy_of_a_dir', '/a_dir')\r\n\r\nIf the local working directory is the one you want to upload, you can just give\r\n`mirror_to_remote` an empty string or a dot.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://blogg.se", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "ftptool", "package_url": "https://pypi.org/project/ftptool/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ftptool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://blogg.se"}, "release_url": "https://pypi.org/project/ftptool/0.7.1/", "requires_dist": null, "requires_python": null, "summary": "Higher-level interface to ftplib", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Higher-level ftplib</p>\n<p><cite>ftplib</cite> in itself is a bit raw, as it leaves details about the protocol for\nthe user to handle. <cite>ftptool</cite> abstracts that away, and even provides a neat\ninterface for file management.</p>\n<div id=\"connecting-authenticating\">\n<h2>Connecting &amp; Authenticating</h2>\n<p>Code says more than words, so let\u2019s look at an example: connecting.</p>\n<pre>&gt;&gt;&gt; a_host = FTPHost.connect(\"ftp.python.org\", user=\"foo\", password=\"bar\")\n</pre>\n<p><cite>connect</cite> is a classmethod that lets you create an <cite>FTPHost</cite> instance with an\nunderlying <cite>ftplib.FTP</cite> instance.</p>\n</div>\n<div id=\"working-with-directories\">\n<h2>Working with Directories</h2>\n<div id=\"changing-working-directory\">\n<h3>Changing Working Directory</h3>\n<p>Changing and getting the current directory is implemented as a property called\n<cite>current_directory</cite>. It is lazy; it won\u2019t ask the server which the current\ndirectory is until you ask for it.</p>\n<p>Note that since it\u2019s a property, this will actually go one level up:</p>\n<pre>&gt;&gt;&gt; a_host.current_directory = \"..\"\n</pre>\n<p>Similarly, this will descend into the \u201cfoo\u201d directory:</p>\n<pre>&gt;&gt;&gt; a_host.current_directory = \"foo\"\n</pre>\n<p>In most cases, it\u2019s easier to just specify absolute paths:</p>\n<pre>&gt;&gt;&gt; a_host.current_directory = \"/foo\"\n</pre>\n<p><cite>current_directory</cite> will always be the server-side representation; when you\nchange directory, it ends up sending a <tt>CWD</tt> and then a <tt>PWD</tt> to get the\nresult of the operation (since the FTP protocol doesn\u2019t define what the reply\ntext to a <tt>CWD</tt> is.)</p>\n</div>\n<div id=\"listing-and-walking-the-directory-tree\">\n<h3>Listing and Walking the Directory Tree</h3>\n<p>A <cite>os.walk</cite> interface is implemented for walking the directory tree:</p>\n<pre>&gt;&gt;&gt; for (dirname, subdirs, files) in a_host.walk(\"/a_dir\"):\n...     print dirname, \"has file(s)\", \", \".join(files)\n...\n/a_dir has file(s) foo, bar\n/a_dir/other_dir has file(s) hello\n/a_dir/some_dir has file(s)\n</pre>\n<p>Just like <cite>os.walk</cite>, you can remove entries in the <cite>subdirs</cite> list to avoid\ndescending into them:</p>\n<pre>&gt;&gt;&gt; for (dirname, subdirs, files) in a_host.walk(\"/a_dir\"):\n...     for subdir in subdirs:\n...         if subdir.startswith(\"other_\"):\n...             subdirs.remove(subdir)\n...     print dirname, \"has file(s)\", \", \".join(files)\n...\n/a_dir has file(s) foo, bar\n/a_dir/some_dir has file(s)\n</pre>\n<p>You can non-recursively list a directory using <cite>listdir</cite>:</p>\n<pre>&gt;&gt;&gt; a_host.listdir(\"/a_dir\")\n(['other_dir', 'some_dir'], ['foo', 'bar'])\n</pre>\n</div>\n<div id=\"creating-deleting-and-renaming\">\n<h3>Creating, Deleting and Renaming</h3>\n<p>The most simple form of creating a directory is <cite>mkdir</cite>. You simply give it a\ndirectory to create, and so it does:</p>\n<pre>&gt;&gt;&gt; a_host.mkdir(\"/new_dir\")\n</pre>\n<p>If you just want to ascertain that a directory is ready, i.e., exists for an\nupload, you could use <cite>makedirs</cite> which tries to create every part of the\ndirectory, piece by piece.</p>\n<pre>&gt;&gt;&gt; a_host.makedirs(\"/a_dir/some_dir/a_new_dir/other_new_dir\")\n</pre>\n<p>Would, hypothetically, create <tt>a_new_dir</tt> and <tt>other_new_dir</tt>.</p>\n<p><cite>ftptool</cite> implements it by first trying to change directory into the given\npath, to see if it exists, and then changes back. If it does, it simply\nreturns, otherwise it creates the directories piece by piece.</p>\n</div>\n</div>\n<div id=\"using-the-file-proxy\">\n<h2>Using the File Proxy</h2>\n<p>Files in <cite>ftptool</cite> are implemented using proxy objects called <cite>FTPFileProxy</cite>.\nThey represent a file on a remote host. Using them is easy as pie!</p>\n<pre>&gt;&gt;&gt; a_host.file_proxy(\"/a_dir/foo\").download_to_str()\n'This is the file \"foo\".'\n&gt;&gt;&gt; a_host.file_proxy(\"/a_dir/new_file\").upload_from_str(\"Hello world!\")\n</pre>\n<div id=\"the-three-upload-download-methods\">\n<h3>The Three Upload &amp; Download Methods</h3>\n<p><cite>ftptool</cite> provides three ways of uploading or downloading files:\n* to/from_str: using a str object,\n* to/from_file: using a filename,\n* and the default: using a file-like object.</p>\n<p>Given:</p>\n<pre>&gt;&gt;&gt; f = a_host.file_proxy(\"/foo.txt\")\n</pre>\n<p>You could upload and download from str using these two:</p>\n<pre>&gt;&gt;&gt; f.upload_from_str(\"Hi!\")\n&gt;&gt;&gt; f.download_to_str()\n'Hi!'\n</pre>\n<p>And using a filename like this:</p>\n<pre>&gt;&gt;&gt; f.upload_from_file(\"/etc/motd\")\n&gt;&gt;&gt; f.download_to_file(\"/tmp/motd\")\n</pre>\n<p>And lastly, using file-like objects:</p>\n<pre>&gt;&gt;&gt; f.upload(StringIO(\"Test!\"))\n&gt;&gt;&gt; fp = StringIO()\n&gt;&gt;&gt; f.download(fp)\n&gt;&gt;&gt; fp.getvalue()\n'Test!'\n</pre>\n</div>\n<div id=\"renaming-files\">\n<h3>Renaming Files</h3>\n<p>Renaming is a method of the file proxies, called <cite>rename</cite>. It returns a new\nfile proxy for the renamed-to file, so the common pattern will be:</p>\n<pre>&gt;&gt;&gt; a_file = a_host.file_proxy(\"hello_world\")\n&gt;&gt;&gt; a_file = a_file.rename(\"foobar\")\n</pre>\n<p>This will issue a rename command, too, so <cite>a_file</cite> will essentially be the same\nas before, with a new name and a new instance ID.</p>\n</div>\n<div id=\"deleting-files\">\n<h3>Deleting Files</h3>\n<p>Deleting a file is much like renaming it: it\u2019s a method of the file proxies,\ncalled <cite>delete</cite>. It, however, doesn\u2019t have a meaningful return value.</p>\n<pre>&gt;&gt;&gt; a_file.delete()\n</pre>\n</div>\n</div>\n<div id=\"mirroring\">\n<h2>Mirroring</h2>\n<p><cite>ftptool</cite> supports two types of mirroring: local to remote, and remote to\nlocal. As in, it can download a whole directory and all descendants into a\nlocal directory, for you to play with. It can also upload a whole directory to\na remote host.</p>\n<p>The first one, downloading, is called <cite>mirror_to_local</cite>. It\u2019s used like so:</p>\n<pre>&gt;&gt;&gt; a_host.mirror_to_local('/a_dir', 'my_copy_of_a_dir')\n</pre>\n<p>The cousin, mirror_to_remote, has the same signature; source first, then\ndestination.</p>\n<pre>&gt;&gt;&gt; a_host.mirror_to_remote('my_copy_of_a_dir', '/a_dir')\n</pre>\n<p>If the local working directory is the one you want to upload, you can just give\n<cite>mirror_to_remote</cite> an empty string or a dot.</p>\n</div>\n\n          </div>"}, "last_serial": 1337116, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "69470b5b7f42cefa2eabee5bd2975912", "sha256": "9d9eab189c2c8a49eab0a36204ae4c68bab1f225e5d171081f9875071e3aa94b"}, "downloads": -1, "filename": "ftptool-0.4.tar.gz", "has_sig": false, "md5_digest": "69470b5b7f42cefa2eabee5bd2975912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9089, "upload_time": "2010-01-22T16:05:24", "upload_time_iso_8601": "2010-01-22T16:05:24.959611Z", "url": "https://files.pythonhosted.org/packages/62/49/5e1bd60e81db40c8bdf62e7acaf5dadd533b5e3bf6af3523d5ece64b4e64/ftptool-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ef04616e96bba992815dcb56c40c30f0", "sha256": "1cf662d1c1d813ea6e97c9084a065e2a6308b420b4561b7f64b50c62c06de8ea"}, "downloads": -1, "filename": "ftptool-0.4.1.tar.gz", "has_sig": false, "md5_digest": "ef04616e96bba992815dcb56c40c30f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9100, "upload_time": "2010-01-25T13:44:00", "upload_time_iso_8601": "2010-01-25T13:44:00.672723Z", "url": "https://files.pythonhosted.org/packages/8d/a1/a307e6ee8fd86d1fc3ed82ce38420e4081b6f4ae46c5c7b253c447a53a1a/ftptool-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "e92e71ff785f17fee799f2a000d9e7b8", "sha256": "184c0028c3d95abe7540265bf8d2dca08bf35b2b452df3256119a7cb81bb1ad7"}, "downloads": -1, "filename": "ftptool-0.4.2.tar.gz", "has_sig": false, "md5_digest": "e92e71ff785f17fee799f2a000d9e7b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9648, "upload_time": "2010-01-25T13:50:04", "upload_time_iso_8601": "2010-01-25T13:50:04.907093Z", "url": "https://files.pythonhosted.org/packages/21/24/0ac339f2e8efc780b92ccaf54c286bc094485db2e3b0ec5250fc8d395faf/ftptool-0.4.2.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "d9fafbecd1e19ac5edc1be0de103f4ae", "sha256": "38353fd04e0065cc2a5cb11ec75074308e3aaefa9ed15f62537e3bb4bceab477"}, "downloads": -1, "filename": "ftptool-0.5.tar.gz", "has_sig": false, "md5_digest": "d9fafbecd1e19ac5edc1be0de103f4ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9732, "upload_time": "2010-02-19T11:21:14", "upload_time_iso_8601": "2010-02-19T11:21:14.609632Z", "url": "https://files.pythonhosted.org/packages/fd/06/06498407fdbe0d3d52c6cb1cc40b9f874c6589d9c997347f2aeb35506678/ftptool-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ed8a048038d5907f8e5a3c946831f3d6", "sha256": "0b333d877d5bef820752f1657544f0e1284ed42387a0f4b60602e76d9ed5d139"}, "downloads": -1, "filename": "ftptool-0.5.1.tar.gz", "has_sig": false, "md5_digest": "ed8a048038d5907f8e5a3c946831f3d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9906, "upload_time": "2010-02-19T14:39:14", "upload_time_iso_8601": "2010-02-19T14:39:14.749459Z", "url": "https://files.pythonhosted.org/packages/76/b8/1a930e1b99286b9c76a44b9a0435357e8ff6a027e07490d32aa25c97fe81/ftptool-0.5.1.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "2524f45138931737e44cefcecfb61dd8", "sha256": "d2f7d447fcc1654b3ad68d3786d6c8030775926a1ba1d90c1ad11959af4162a2"}, "downloads": -1, "filename": "ftptool-0.7.1.tar.gz", "has_sig": false, "md5_digest": "2524f45138931737e44cefcecfb61dd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10381, "upload_time": "2014-12-09T14:16:52", "upload_time_iso_8601": "2014-12-09T14:16:52.487548Z", "url": "https://files.pythonhosted.org/packages/30/c3/40449bf53ac7382bfd8db7af74686406699bddce4db1cff26d53e671fba2/ftptool-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2524f45138931737e44cefcecfb61dd8", "sha256": "d2f7d447fcc1654b3ad68d3786d6c8030775926a1ba1d90c1ad11959af4162a2"}, "downloads": -1, "filename": "ftptool-0.7.1.tar.gz", "has_sig": false, "md5_digest": "2524f45138931737e44cefcecfb61dd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10381, "upload_time": "2014-12-09T14:16:52", "upload_time_iso_8601": "2014-12-09T14:16:52.487548Z", "url": "https://files.pythonhosted.org/packages/30/c3/40449bf53ac7382bfd8db7af74686406699bddce4db1cff26d53e671fba2/ftptool-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:58 2020"}