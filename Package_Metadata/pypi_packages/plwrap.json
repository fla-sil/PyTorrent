{"info": {"author": "Matthias Riegler", "author_email": "me@xvzf.tech", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Database"], "description": "# PLWRAP - asyncpg\n\n`plwrap` is an easy to use wrapper for Postgresql orientend on [jdbi](http://jdbi.org). It is **not an ORM**, instead it allows to run SQL queries and dump the result into consistent Python Objects (Dataclasses are prefered)\n\n> **SQL is awesome. Try to remember! :-)**\n\n## Sanic integration\nWhen used together with sanic, `plwrap` uses the sanic logging framework for debugging queries\n\n\n## Examples\n```python\nimport asyncio\nfrom dataclasses import dataclass\nimport asyncpg\nfrom plwrap import query, one\n\n@dataclass\nclass User:\n    \"\"\" User store \"\"\"\n    id: str\n    email: str\n    pwhash: str\n\n\nclass UserDAO:\n    \"\"\" some sort of database access object \"\"\"\n    @staticmethod\n    @one\n    @query(User)\n    async def get_by_email(email: str) -> User:\n        \"\"\" Tries to get a user based on its email (unique) \"\"\"\n        return \"select id, email, pwhash from users where email = $1\", email\n\n\nasync def main():\n    db_pool = await asyncpg.create_pool(database=\"what\", user=\"ever\")\n\n    user = await UserDAO.get_by_email(db_pool, \"me@xvzf.tech\")\n    print(user)\n\nif __name__ == \"__main__\":\n    asyncio.get_event_loop().run_until_complete(main())\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xvzf/plwrap", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "plwrap", "package_url": "https://pypi.org/project/plwrap/", "platform": "", "project_url": "https://pypi.org/project/plwrap/", "project_urls": {"Homepage": "https://github.com/xvzf/plwrap"}, "release_url": "https://pypi.org/project/plwrap/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Non ORM SQL Query runner", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PLWRAP - asyncpg</h1>\n<p><code>plwrap</code> is an easy to use wrapper for Postgresql orientend on <a href=\"http://jdbi.org\" rel=\"nofollow\">jdbi</a>. It is <strong>not an ORM</strong>, instead it allows to run SQL queries and dump the result into consistent Python Objects (Dataclasses are prefered)</p>\n<blockquote>\n<p><strong>SQL is awesome. Try to remember! :-)</strong></p>\n</blockquote>\n<h2>Sanic integration</h2>\n<p>When used together with sanic, <code>plwrap</code> uses the sanic logging framework for debugging queries</p>\n<h2>Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncpg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">plwrap</span> <span class=\"kn\">import</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">one</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\" User store \"\"\"</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">pwhash</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserDAO</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\" some sort of database access object \"\"\"</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@one</span>\n    <span class=\"nd\">@query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_by_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">User</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\" Tries to get a user based on its email (unique) \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"select id, email, pwhash from users where email = $1\"</span><span class=\"p\">,</span> <span class=\"n\">email</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">db_pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncpg</span><span class=\"o\">.</span><span class=\"n\">create_pool</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"what\"</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s2\">\"ever\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">UserDAO</span><span class=\"o\">.</span><span class=\"n\">get_by_email</span><span class=\"p\">(</span><span class=\"n\">db_pool</span><span class=\"p\">,</span> <span class=\"s2\">\"me@xvzf.tech\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 6108491, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2e94fee569101d79d14109516211a1b3", "sha256": "b82b746c318a2d2c1bd48945226afe6b996cc8de0d79102c0bfb4eee8c14f9d2"}, "downloads": -1, "filename": "plwrap-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2e94fee569101d79d14109516211a1b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2763, "upload_time": "2019-11-09T21:28:41", "upload_time_iso_8601": "2019-11-09T21:28:41.364796Z", "url": "https://files.pythonhosted.org/packages/a4/c5/f4fa0042ea79b2fff2c8636c70d19788601cd32f5d99af1c4eb0a21c55bf/plwrap-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e94fee569101d79d14109516211a1b3", "sha256": "b82b746c318a2d2c1bd48945226afe6b996cc8de0d79102c0bfb4eee8c14f9d2"}, "downloads": -1, "filename": "plwrap-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2e94fee569101d79d14109516211a1b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2763, "upload_time": "2019-11-09T21:28:41", "upload_time_iso_8601": "2019-11-09T21:28:41.364796Z", "url": "https://files.pythonhosted.org/packages/a4/c5/f4fa0042ea79b2fff2c8636c70d19788601cd32f5d99af1c4eb0a21c55bf/plwrap-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:23 2020"}