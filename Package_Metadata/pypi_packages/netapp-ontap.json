{"info": {"author": "NetApp", "author_email": "ng-ontap-rest-python-lib@netapp.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5"], "description": "# NetApp ONTAP\nThe Python client library is a package you can use when writing scripts to access the\nONTAP REST API. It provides support for several underlying services, including connection\nmanagement, asynchronous request processing, and exception handling. By using the Python\nclient library, you can quickly develop robust code to support the automation of your ONTAP\ndeployments.\n\n# Getting started\n\n## Software requirements\nBefore installing the Python client library, you must make sure the following packages are\ninstalled on your system:  \n\n* python 3.5 or later  \n* requests 2.21.0 or later  \n* marshmallow 3.2.1 or later  \n\n\n## Installing and importing the package\nYou must install the package using the pip utility:\n\n```\npip install netapp-ontap\n```\n\nAfter installing the package, you can import the objects you need into your application:\n\n```python\nfrom netapp_ontap.resources import Volume, Snapshot\n```\n\n## Creating an object\n\nYou can create an object in several different ways. Here are three examples of\ncreating an equivalent `netapp_ontap.resources.volume` object.\n\n```python\nfrom netapp_ontap.resources import Volume\n\n# Example 1 - keyword arguments\nvolume = Volume(name='vol1', svm={'name': 'vs1'}, aggregates=[{'name': 'aggr1'}])\n\n# Example 2 - dict as keyword arguments\ndata = {\n    'name': 'vol1',\n    'svm': {'name': 'vs1'},\n    'aggregates': [{'name': 'aggr1'}],\n}\nvolume = Volume(**data)\n\n# Example 3 - using the from_dict() method\nvolume = Volume.from_dict({\n    'name': 'vol1',\n    'svm': {'name': 'vs1'},\n    'aggregates': [{'name': 'aggr1'}],\n})\n```\n\n## Performing actions on an object\n\nAfter you create an object, you can perform actions on the object based\non the purpose and design of your application. The example below illustrates\nhow to create a new volume and then take a snapshot.\n\nNote that when using the library, in all cases you must first establish a\nconnection to the management LIF of the ONTAP system using the\n`netapp_ontap.host_connection.HostConnection` object. In the example below,\nthe connection is created and then set as the global default.\nThis means that all objects and the associated actions reuse\nthis same connection. See *Host connections* for more information.\n\n```python\nfrom netapp_ontap import config\nfrom netapp_ontap.host_connection import HostConnection\nfrom netapp_ontap.resources import Volume, Snapshot\n\nconfig.CONNECTION = HostConnection('myhost.mycompany.com', 'username', 'password')\n\nvolume = Volume(name='vol1', svm={'name': 'vs1'}, aggregates=[{'name': 'aggr1'}])\nvolume.post()\nsnapshot = Snapshot.from_dict({\n    'name': '%s_snapshot' % volume.name,\n    'comment': 'A snapshot of %s' % volume.name,\n    'volume': volume.to_dict(),\n})\nsnapshot.post()\n```\n\n# Host connections\n\nThe `netapp_ontap.host_connection.HostConnection` object allows a client application\nto store credentials once and reuse them for each subsequent operation.\nYou can do this in any of the following ways:\n\n* Use the connection object as a context manager with the **with** keyword.\n\n* Call the function `set_connection()` on a specific resource so the connection is used for\nall actions on the resource.\n\n* Set the `netapp_ontap.config.CONNECTION` variable to establish a single connection instance for all\noperations within the scope of that block. This allows you to connect to ONTAP once\nand use the same connection everywhere, instead of providing credentials every time you make a\nrequest.\n\nNote that you can call `get_connection()` to get the connection used by an object and use it for\nsubsequent operations.\n\nBy default, every operation attempts to verify the SSL certificate for the connection. If a\ncertificate cannot be verified, the **SSLError** exception is thrown. You can disable this\nverification by setting `netapp_ontap.host_connection.HostConnection.verify` to false when creating the\n`netapp_ontap.host_connection.HostConnection` instance.\n\n## Custom headers\n\nIn some cases, you might want to set and send custom headers with the REST request.\nThis can be done at the connection level. For a specific connection, you can pass in\nthe headers you would like to send for each request within the scope of that connection object.\nThe library provides full access to the request headers so that you can update, add, or delete\nheaders from the same connection object at any point. If a header is not recognized by ONTAP,\nit is ignored.\n\n```python\nfrom netapp_ontap import config, HostConnection\nheaders = {'my-header1':'my-header-value1', 'my-header2':'my-header-value2'}\n\n#Initialize a connection object with custom headers\nconfig.CONNECTION = HostConnection('myhost.mycompany.com', 'username', 'password', headers=headers)\n\n#Delete a header from a connection object\nconn = HostConnection('myhost.mycompany.com', 'username', 'password', headers=headers)\ndel conn.request_headers['my-header1']\n\n#Add a header to a connection object using the assignment operator\nconn = HostConnection('myhost.mycompany.com', 'username', 'password', headers=headers)\nconn.request_headers['mynew-header'] = 'mynew-header-value'\n\n#Add headers to a connection object\nconfig.CONNECTION = HostConnection('myhost.mycompany.com', 'username' 'password')\nconfig.CONNECTION.request_headers = headers\n\n#Update an existing header using the assignment operator\nconfig.CONNECTION = HostConnection('myhost.mycompany.com','username','password', headers=headers)\nconfig.CONNECTION.request_headers['my-header1'] = 'my-new-header'\n```\n\n# Asynchronous processing and jobs\n\nAll POST, PATCH, and DELETE requests that can take more than two seconds to complete are\ndesigned to run asynchronously as non-blocking operations. These operations are executed\nas background jobs at the ONTAP cluster. The HTTP response generated by an\nasynchronous request always contains a link to the associated job object. By default, an\nasynchronous request automatically polls the job using the unique job identifier in the link.\nControl is returned to your script when a terminal state is reached (success or failure) or\nthe configured timeout value expires. However, you can override this behavior by setting the\n**poll** value to false when calling the function, causing control to return before the job\ncompletes. Forcing an immediate return can be useful when a job might take a long time to\ncomplete and you want to continute execution of the script.\n\n# Responses\n\nA request always returns a `netapp_ontap.response.NetAppResponse` object which contains the details\nof the HTTP response. It contains information such as whether the response is an error\nor a job. Refer to `netapp_ontap.response.NetAppResponse` for further information on how\nto check the details of the response.\n\n# Exception handling\n\nBy default, an exception is returned if a request returns an HTTP status code of 400 or greater.\nThe exception object, which is of type `netapp_ontap.error.NetAppRestError`,\nholds the HTTP response object so that the exception can be handled in the client code.\nIf you wish not to raise exceptions, you can set `netapp_ontap.config.RAISE_API_ERRORS` to false. In this case,\nit is up to the client to check the HTTP response from the `netapp_ontap.response.NetAppResponse`\nobject and handle any errors. Refer to `netapp_ontap.error.NetAppRestError` for further information.\n\n```python\n# Set RAISE_API_ERRORS to False and check the HTTP response.\nconfig.RAISE_API_ERRORS = False\nresponse = Svm.find(name = \"nonexistent_vs)\nassert \"entry doesn't exist\" in response.http_response.text\n```\n\n# Debugging\n\nWhile writing your application, it can often be useful to see the raw HTTP request and response\ntext that the library is sending to and from the server. There are two flags that can be set\nto help with this.\n\n## DEBUG flag\n\nThe first is the DEBUG flag. This can be set either by setting DEBUG=1 in the environment prior\nto executing your application or by setting `netapp_ontap.utils.DEBUG` to 1 inside of your application.\nThis flag, when set, will cause the library to log the request and response for any failed\nAPI call. This will be logged at DEBUG level (see the section on logging for setting up your\napplication). Here's an example of setting this value inside of your application:\n\n```python\nimport logging\n\nfrom netapp_ontap import HostConnection, NetAppRestError, config, utils\nfrom netapp_ontap.resources import Volume\n\nlogging.basicConfig(level=logging.DEBUG)\nconfig.CONNECTION = HostConnection('10.100.200.50', username='admin', password='password', verify=False)\n\n# Set the DEBUG flag to 1\nutils.DEBUG = 1\n\n# this API call will fail with a 404\ntry:\n    volume = Volume(uuid=\"1\", name='does_not_exist')\n    volume.get()\nexcept NetAppRestError:\n    print('We got an expected exception')\n```\n\nHere is what the output would look like:\n\n```\n$ python test_debug.py\nDEBUG:urllib3.util.retry:Converted retries value: 5 -> Retry(total=5, connect=None, read=None, redirect=None, status=None)\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): 10.100.200.50:443\nDEBUG:urllib3.connectionpool:https://10.100.200.50:443 \"GET /api/storage/volumes/1 HTTP/1.1\" 404 130\nDEBUG:netapp_ontap.utils:\n-----------REQUEST-----------\nGET https://10.100.200.50:443/api/storage/volumes/1\nAccept: */*\nUser-Agent: python-requests/2.21.0\nConnection: keep-alive\nAccept-Encoding: gzip, deflate\nX-Dot-Client-App: netapp-ontap-python-9.8.0\nAuthorization: Basic YWRtaW46cGFzc3dvcmQK\nNone\n-----------------------------\n\n-----------RESPONSE-----------\n404 Not Found\nDate:Tue, 12 Nov 2019 13:00:24 GMT\nServer:libzapid-httpd\nX-Content-Type-Options: nosniff\nCache-Control: no-cache,no-store,must-revalidate\nContent-Length: 130\nContent-Type: application/hal+json\nKeep-Alive: timeout=5, max=100\nConnection:Keep-Alive\n{\n  \"error\": {\n    \"message\": \"\\\"1\\\" is an invalid value for field \\\"uuid\\\" (<UUID>)\",\n    \"code\": \"2\",\n    \"target\": \"uuid\"\n  }\n}\n------------------------------\nWe got an expected exception\n$\n```\n\n## LOG_ALL_API_CALLS flag\n\nThere is also a LOG_ALL_API_CALLS flag which can be set in the same ways. You can\nset it in the environment or during script execution by setting `netapp_ontap.utils.LOG_ALL_API_CALLS`\nto 1. This flag will produce the same output as above, but it will log the call no\nmatter if there was a failure or not. Here's an example of what that would look\nlike if we got an existing volume:\n\n```python\nimport logging\n\nfrom netapp_ontap import HostConnection, config, utils\nfrom netapp_ontap.resources import Volume\n\nlogging.basicConfig(level=logging.DEBUG)\nconfig.CONNECTION = HostConnection('10.100.200.50', username='admin', password='password', verify=False)\n\n# Set the LOG_ALL_API_CALLS flag to 1\nutils.LOG_ALL_API_CALLS = 1\n\n# this API call will succeed and be logged\nvolume = list(Volume.get_collection())[0]\n```\n\nHere is what the output would look like:\n\n```\n$ python test_debug.py\nDEBUG:urllib3.util.retry:Converted retries value: 5 -> Retry(total=5, connect=None, read=None, redirect=None, status=None)\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): 10.100.200.50:443\nDEBUG:urllib3.connectionpool:https://10.100.200.50:443 \"GET /api/storage/volumes HTTP/1.1\" 200 567\nDEBUG:netapp_ontap.utils:\n-----------REQUEST-----------\nGET https://10.100.200.50:443/api/storage/volumes\nUser-Agent: python-requests/2.21.0\nConnection: keep-alive\nAccept: */*\nAccept-Encoding: gzip, deflate\nX-Dot-Client-App: netapp-ontap-python-9.8.0\nAuthorization: Basic YWRtaW46cGFzc3dvcmQK\nNone\n-----------------------------\n\n-----------RESPONSE-----------\n200 OK\nDate:Tue, 12 Nov 2019 13:14:01 GMT\nServer:libzapid-httpd\nX-Content-Type-Options: nosniff\nCache-Control: no-cache,no-store,must-revalidate\nContent-Length: 567\nContent-Type: application/hal+json\nKeep-Alive: timeout=5, max=100\nConnection:Keep-Alive\n{\n  \"records\": [\n    {\n      \"uuid\": \"c68bdca8-d090-11e9-bb29-005056bb7f42\",\n      \"name\": \"vs0_root\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"/api/storage/volumes/c68bdca8-d090-11e9-bb29-005056bb7f42\"\n        }\n      }\n    },\n    {\n      \"uuid\": \"ed3b6ebf-d48e-11e9-bb29-005056bb7f42\",\n      \"name\": \"vs1_root\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"/api/storage/volumes/ed3b6ebf-d48e-11e9-bb29-005056bb7f42\"\n        }\n      }\n    }\n  ],\n  \"num_records\": 2,\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/api/storage/volumes\"\n    }\n  }\n}\n------------------------------\n$\n```\n\n# Additional considerations\n\nIn most cases, the objects and actions in the library can be mapped directly\nto equivalent cURL commands run against the ONTAP REST interface. However, there are a few\nexceptions you should be aware of.\n\n## Property names\n\nIf a property of a resource is named the same as one of the Python reserved names,\nthe name is transposed when accessing the member of the resource. For example,\nif there is a resource named \"Foo\" that has a property defined in the API named \"class\",\nthe property name would instead be \"class_\" when using the library. For example:\n\n```python\nfrom netapp_ontap.resources import Foo\n\nfoo = Foo()\nfoo.class_ = \"high\"\n```\n\n# Documentation\nTo view the full documentation, visit https://library.netapp.com/ecmdocs/ECMLP2858435/html/index.html\nor to view an offline copy, see the `<python_environment>/lib/<python_version>/site_packages/netapp_ontap/docs`\nDocumentation of ONTAP's REST APIs and other helpful resources can be found at https://devnet.netapp.com/restapi.\n\n# Compatibility\n\nThe version assigned to the library consists of the major ONTAP release it is generated\nfrom and a minor version for the library within that release. The minor version allows the\nlibrary to be updated within the same ONTAP release. For example, valid versions for\nthe library associated with ONTAP 9.6 include 9.6.0, 9.6.1, and so on.\n\nClient libraries that have the same major version as ONTAP are completely compatible.\nFor example, the libraries netapp-ontap-9.6.1 and netapp-ontap-9.6.4 are fully\ncompatible with both ONTAP 9.6 and ONTAP 9.6P1.\n\nA client library with a major version that does not match the ONTAP release can still be\nused, however it will not be fully compatible with the REST API. For example, the library\nnetapp-ontap-9.6.4 is only partially compatible with ONTAP 9.7. In these cases, the\nlibrary may encounter unknown fields or APIs. When this occurs, the library will ignore\nunknown fields, return an error, or raise a runtime exception.\n\n# Changelog\n\nThere are several changes to the Python Client Library and the ONTAP REST API, which are organized by release below.\n\n## 9.7.0 GA library updates  \n(2020-01-23)\n\n**Fixed issues**\n\n* [Bug ID 1279507](https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&Display=1279507)  \n  When doing a find() with the fields query parameter, the library was not returning the specified fields, instead, all fields were being returned.\n\n* [Bug ID 1291333](https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&Display=1291333)  \n  When 0 records are found in a Resource.find() call and LOG_ALL_API_CALLS is set to True, then an uncaught exception is raised.\n\n\n## 9.7.0 RC1 library updates  \n(2019-11-20)\n\n**New**\n\n* The application can now add its own custom headers for each request as part of the `netapp_ontap.host_connection.HostConnection` object.\n* When passing verify=False to the HostConnection, the library will now disable urllib3's InsecureRequestWarning from logging messages.\n\n**Incompatibilities**\n\n* In prior versions, Resource.find() would raise an exception if no results were found as well as when more than one was found. In this version, when no results are found, None is returned instead of raising an exception. An exception is still raised when more than one result is found.\n\n**Fixed issues**\n\n* [Bug ID 1271450](https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&Display=1271450)  \n  The library doesn't allow sending a body in a DELETE request.\n\n* [Bug ID 1263312](https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&Display=1263312)  \n  When POSTing or PATCHing some objects with embeded objects, fields might incorrectly be dropped from the request.\n\n* [Bug ID 1275238](https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&Display=1275238)  \n  Retrieving and setting the \"from\" field of Autosupport object fails.\n\n##ONTAP 9.7 REST API updates\n\nAll new ONTAP APIs have corresponding library resource objects which can be used\nto perform the operations. See the `netapp_ontap.resources` package for details\nabout each of the objects and their fields.\n\nFor a summary of the changes in the ONTAP REST API between versions of ONTAP 9, see the [ONTAP 9 Release Notes](https://library.netapp.com/ecmdocs/ECMLP2492508/html/frameset.html).\n\n**New endpoints**\n\n* Endpoint: /cluster/nodes/{uuid}  \n    HTTP methods: DELETE  \n    This API will remove a node from the cluster. \n\n* Endpoint: /cluster/ntp/keys/{id}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs allow for management of NTP server shared keys.\n\n* Endpoint: /cluster/ntp/servers/{server}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs allow for management of keyed NTP servers.\n\n* Endpoint: /cluster/software/download    \n    HTTP methods: GET  \n    This API allows monitoring the status of the image package download progress.\n\n* Endpoint: /network/http-proxy/{uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    This API allow configuration of an HTTP proxy for the cluster of SVM IP spaces.\n\n* Endpoint: /network/ip/bgp/peer-groups/{uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage information pertaining to the BGP peer-groups configured in the cluster.\n\n* Endpoint: /protocols/san/fcp/services/{svm.uuid}/metrics  \n    HTTP methods: GET  \n    This API retrieves historical performance metrics for the FC Protocols service of an SVM.\n\n* Endpoint: /protocos/san/iscsi/services/{svm.uuid}/metrics  \n    HTTP methods: GET   \n    This API retrieves history performance metrics for the iSCSI protocol of an SVM.\n\n* Endpoint: /storage/luns/{uuid}/metrics  \n    HTTP methods: GET  \n    This API retrieves history performance metrics for a LUN.\n\n* Endpoint: /protocls/nvme/services/{svm.uuid}/metrics \n    HTTP methods: GET  \n    This API retrieve historical performance metrics for NVME protocol of an SVM.\n\n* Endpoint: /support/configuration-backup/{node.uuid}/name  \n    HTTP methods: GET, POST, DELETE  \n    These APIs create, retrieve, and delete backup configuraiton for the cluster.\n\n* Endpoint: /support/snmp/traphosts/{host}  \n    HTTP methods: GET, POST, DELETE  \n    These APIs configure SNMP traphosts which will receive SNMP traps from ONTAP.  \n\n* Endpoint: /support/snmp/users/{engine_id}/{name}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs configure SNMP users that are able to query for the ONTAP SNMP server.\n\n* Endpoint: /security  \n    HTTP methods: GET  \n    This API retrieves information about the security configured on the cluster.\n\n* Endpoint: /security/authentication/cluster/ad-proxy  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs configure which data SVM will be use to proxy cluster management AD authentication.\n\n* Endpoint: /security/authentiation/publickeys/{owner.uuid}/{account.name}/{index}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs configure the public keys for user accounts.\n\n* Endpoint: /security/key-managers/{source.uuid}/migrate  \n    HTTP methods: POST  \n    This API migrates the keys belonging to an SVM between the cluster's key manager and the SVM's key manager.\n\n* Endpoint: /security/ssh  \n    HTTP methods: GET, PATCH  \n    This API manages the SSH server running in ONTAP.\n\n* Endpoint: /storage/aggregates/{uuid}/metrics  \n    HTTP methods: GET  \n    This API provide historical performance metrics for the specified aggregate.\n\n* Endpoint: /storage/disks  \n    HTTP methods: PATCH  \n    This API updates the encryption controls of self-encrypting disks.\n\n* Endpoint: /storage/snapshot-policies/{snapshot-policy.uuid}/schedules/{uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage the policies reqarding when snapshots are taken.\n\n* Endpoint: /protocols/ndmp  \n    HTTP methods: GET, PATCH  \n    This API manages NDMP mode at either SVM-scope or node-scope.\n\n* Endpoint: /protocols/ndmp/{node.uuid}  \n    HTTP methods: GET, PATCH  \n    This API manages node-scoped NDMP settings.\n\n* Endpoint: /protocols/ndmp/sessions/{owner.uuid}/{session.id}  \n    HTTP methods: GET, DELETE  \n    These APIs manage diagnostics information on NDMP settings belonging to a specific SVM in the case of SVM-scope or to a specific node in the case of node-scope.\n\n* Endpoint: /protocols/ndmp/svms/{svm.uuid}  \n    HTTP methods: GET, PATCH  \n    These APIs manage SVM-scoped NDMP settings.\n\n* Endpoint: /storage/snaplock/audit-logs/{svm.uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage the loggin policies for a snaplock volume.\n\n* Endpoint: /storage/snaplock/compliance-clocks/{node.uuid}  \n    HTTP methods: GET  \n    This API manages the Compliance Clock of the system which determines the expiry time of the SnapLock objects in the system.\n\n* Endpoint: /storage/snaplock/event-retention/operations/{id}  \n    HTTP methods: GET, POST  \n    These APIs display all Event Based Retentions (EBR) operations and allow for applying an EBR policy on a specified volume.\n\n* Endpoint: /storage/snaplock/event-retention/policies/{policy.name}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage retention policies for snaplock files and directories.\n\n* Endpoint: /storage/snaplock/files/{volume.uuid}/{path}  \n    HTTP methods: GET, PATCH, DELETE  \n    These APIs manage the SnapLock retention time of a file.\n\n* Endpoint: /storage/snaplock/file-fingerprints/{id}  \n    HTTP methods: GET, POST, DELETE  \n    These APIs manage key information about snaplock files and volumes.\n\n* Endpoint: /storage/snaplock/litigations/{id}  \n    HTTP methods: GET, POST, DELETE  \n    These APIs retain Compliance-mode WORM files for the duration of a litigation.\n\n* Endpoint: /storage/snaplock/litigations/{litigation.id/files  \n    HTTP methods: GET  \n    This API displays the list of files under the specified litigation ID.\n\n* Endpoint: /storage/snaplock/litigations/{litigation.id}/operations/{id}  \n    HTTP methods: GET, POST, DELETE  \n    This API manages the legal-hold operations for the specified litigation ID.\n\n* Endpoint: /protocols/cifs/services/{svm.uuid}/metrics  \n    HTTP methods: GET  \n    This API retrieves history performance metrics for the CIFS protocol of an SVM.\n\n* Endpoint: /protocols/nfs/connected-clients  \n    HTTP methods: GET  \n    This API provides a list of currently connected NFS clients or clients that can be connected but are currently idle.\n\n* Endpoint: /protocols/nfs/services/{svm.uuid}/metrics  \n    HTTP methods: GET  \n    This API retrieves historical performance metrics for the NFS protocol of an SVM.\n\n* Endpoint: /protocols/s3/buckets  \n    HTTP methods: GET  \n    This API retrieves all S3 buckets for all SVMs.\n\n* Endpoint: /protocols/s3/services/{svm.uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage S3 servers which will allow you to store objects in ONTAP using Amazon S3 protocol.\n\n* Endpoint: /protocols/s3/services/{svm.uuid}/buckets/{uuid}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage S3 buckets which are a container of objects.\n\n* Endpoint: /protocols/s3/services/{svm.uuid}/users/{name}  \n    HTTP methods: GET, POST, PATCH, DELETE  \n    These APIs manage S3 user accounts on the server. Buckets that are created are associate with a user.\n\n##9.6.0  \n(2019-07-16)\n\nInitial release of the library\n\n# Copyright, trademarks, and feedback\n## Copyright information\nCopyright &copy; 2019 NetApp, Inc. All Rights Reserved. Printed in the U.S.\n\nNo part of this document covered by copyright may be reproduced in any form or by any means&#8208;graphic,\nelectronic, or mechanical, including photocopying, recording, taping, or storage in an electronic\nretrieval system&#8208;without prior written permission of the copyright owner.\n\nSoftware derived from copyrighted NetApp material is subject to the following license\nand disclaimer:\n\nTHIS SOFTWARE IS PROVIDED BY NETAPP \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE, WHICH ARE HEREBY DISCLAIMED. IN NO EVENT SHALL NETAPP BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nNetApp reserves the right to change any products described herein at any time, and without notice.\nNetApp assumes no responsibility or liability arising from the use of products described herein,\nexcept as expressly agreed to in writing by NetApp. The use or purchase of this product does not\nconvey a license under any patent rights, trademark rights, or any other intellectual property\nrights of NetApp. The product described in this manual may be protected by one or more U.S.\npatents, foreign patents, or pending applications.\n\nRESTRICTED RIGHTS LEGEND: Use, duplication,or disclosure by the government is subject to\nrestrictions as set forth in subparagraph (c)(1)(ii) of the Rights in Technical Data and\nComputer Software clause at DFARS 252.277-7103 (October 1988) and FAR 52-227-19 (June 1987).\n\n## Trademark information\nNETAPP, the NETAPP logo, and the marks listed on the NetApp Trademarks page are trademarks of\nNetApp, Inc. Other company and product names may be trademarks of their respective owners.\nhttp://www.netapp.com/us/legal/netapptmlist.aspx\n\n## Feedback\nIf you have questions about the library, suggestions, or find a bug, you may contact\nby email.\n\n<ng-ontap-rest-python-lib@netapp.com>\n\nYou can help us to improve the quality of our documentation by sending us your feedback.\nIf you have suggestions for improving this document, send us your comments by email.\n\n<doccomments@netapp.com>\n\nTo help us direct your comments to the correct division, include in the subject line\nthe product name, version, and operating system.\n\nIf you want to be notified automatically when production-level documentation is released\nor important changes are made to existing production-level documents,\nfollow Twitter account @NetAppDoc.\n\nYou can also contact us in the following ways:\n\nNetApp, Inc., 1395 Crossman Ave, Sunnyvale, CA 94089 U.S.\n\nTelephone: +1 (408) 822-6000\n\nFax: +1 (408) 822-4501\n\nSupport telephone: +1 (888) 463-8277\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://devnet.netapp.com/restapi", "keywords": "NetApp ONTAP REST API development", "license": "", "maintainer": "", "maintainer_email": "", "name": "netapp-ontap", "package_url": "https://pypi.org/project/netapp-ontap/", "platform": "", "project_url": "https://pypi.org/project/netapp-ontap/", "project_urls": {"Documentation": "https://library.netapp.com/ecmdocs/ECMLP2858435/html/index.html", "Homepage": "https://devnet.netapp.com/restapi"}, "release_url": "https://pypi.org/project/netapp-ontap/9.7.2/", "requires_dist": ["marshmallow (>=3.2.1)", "requests (>=2.21.0)"], "requires_python": ">=3.5", "summary": "A library for working with ONTAP's REST APIs simply in Python", "version": "9.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NetApp ONTAP</h1>\n<p>The Python client library is a package you can use when writing scripts to access the\nONTAP REST API. It provides support for several underlying services, including connection\nmanagement, asynchronous request processing, and exception handling. By using the Python\nclient library, you can quickly develop robust code to support the automation of your ONTAP\ndeployments.</p>\n<h1>Getting started</h1>\n<h2>Software requirements</h2>\n<p>Before installing the Python client library, you must make sure the following packages are\ninstalled on your system:</p>\n<ul>\n<li>python 3.5 or later</li>\n<li>requests 2.21.0 or later</li>\n<li>marshmallow 3.2.1 or later</li>\n</ul>\n<h2>Installing and importing the package</h2>\n<p>You must install the package using the pip utility:</p>\n<pre><code>pip install netapp-ontap\n</code></pre>\n<p>After installing the package, you can import the objects you need into your application:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Volume</span><span class=\"p\">,</span> <span class=\"n\">Snapshot</span>\n</pre>\n<h2>Creating an object</h2>\n<p>You can create an object in several different ways. Here are three examples of\ncreating an equivalent <code>netapp_ontap.resources.volume</code> object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Volume</span>\n\n<span class=\"c1\"># Example 1 - keyword arguments</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'vol1'</span><span class=\"p\">,</span> <span class=\"n\">svm</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vs1'</span><span class=\"p\">},</span> <span class=\"n\">aggregates</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'aggr1'</span><span class=\"p\">}])</span>\n\n<span class=\"c1\"># Example 2 - dict as keyword arguments</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vol1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'svm'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vs1'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'aggregates'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'aggr1'</span><span class=\"p\">}],</span>\n<span class=\"p\">}</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example 3 - using the from_dict() method</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vol1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'svm'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vs1'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'aggregates'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'aggr1'</span><span class=\"p\">}],</span>\n<span class=\"p\">})</span>\n</pre>\n<h2>Performing actions on an object</h2>\n<p>After you create an object, you can perform actions on the object based\non the purpose and design of your application. The example below illustrates\nhow to create a new volume and then take a snapshot.</p>\n<p>Note that when using the library, in all cases you must first establish a\nconnection to the management LIF of the ONTAP system using the\n<code>netapp_ontap.host_connection.HostConnection</code> object. In the example below,\nthe connection is created and then set as the global default.\nThis means that all objects and the associated actions reuse\nthis same connection. See <em>Host connections</em> for more information.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.host_connection</span> <span class=\"kn\">import</span> <span class=\"n\">HostConnection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Volume</span><span class=\"p\">,</span> <span class=\"n\">Snapshot</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'vol1'</span><span class=\"p\">,</span> <span class=\"n\">svm</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vs1'</span><span class=\"p\">},</span> <span class=\"n\">aggregates</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'aggr1'</span><span class=\"p\">}])</span>\n<span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">()</span>\n<span class=\"n\">snapshot</span> <span class=\"o\">=</span> <span class=\"n\">Snapshot</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">_snapshot'</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'comment'</span><span class=\"p\">:</span> <span class=\"s1\">'A snapshot of </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span>\n<span class=\"p\">})</span>\n<span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">()</span>\n</pre>\n<h1>Host connections</h1>\n<p>The <code>netapp_ontap.host_connection.HostConnection</code> object allows a client application\nto store credentials once and reuse them for each subsequent operation.\nYou can do this in any of the following ways:</p>\n<ul>\n<li>\n<p>Use the connection object as a context manager with the <strong>with</strong> keyword.</p>\n</li>\n<li>\n<p>Call the function <code>set_connection()</code> on a specific resource so the connection is used for\nall actions on the resource.</p>\n</li>\n<li>\n<p>Set the <code>netapp_ontap.config.CONNECTION</code> variable to establish a single connection instance for all\noperations within the scope of that block. This allows you to connect to ONTAP once\nand use the same connection everywhere, instead of providing credentials every time you make a\nrequest.</p>\n</li>\n</ul>\n<p>Note that you can call <code>get_connection()</code> to get the connection used by an object and use it for\nsubsequent operations.</p>\n<p>By default, every operation attempts to verify the SSL certificate for the connection. If a\ncertificate cannot be verified, the <strong>SSLError</strong> exception is thrown. You can disable this\nverification by setting <code>netapp_ontap.host_connection.HostConnection.verify</code> to false when creating the\n<code>netapp_ontap.host_connection.HostConnection</code> instance.</p>\n<h2>Custom headers</h2>\n<p>In some cases, you might want to set and send custom headers with the REST request.\nThis can be done at the connection level. For a specific connection, you can pass in\nthe headers you would like to send for each request within the scope of that connection object.\nThe library provides full access to the request headers so that you can update, add, or delete\nheaders from the same connection object at any point. If a header is not recognized by ONTAP,\nit is ignored.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">HostConnection</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'my-header1'</span><span class=\"p\">:</span><span class=\"s1\">'my-header-value1'</span><span class=\"p\">,</span> <span class=\"s1\">'my-header2'</span><span class=\"p\">:</span><span class=\"s1\">'my-header-value2'</span><span class=\"p\">}</span>\n\n<span class=\"c1\">#Initialize a connection object with custom headers</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Delete a header from a connection object</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">[</span><span class=\"s1\">'my-header1'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#Add a header to a connection object using the assignment operator</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">[</span><span class=\"s1\">'mynew-header'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'mynew-header-value'</span>\n\n<span class=\"c1\">#Add headers to a connection object</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span><span class=\"o\">.</span><span class=\"n\">request_headers</span> <span class=\"o\">=</span> <span class=\"n\">headers</span>\n\n<span class=\"c1\">#Update an existing header using the assignment operator</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'myhost.mycompany.com'</span><span class=\"p\">,</span><span class=\"s1\">'username'</span><span class=\"p\">,</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span><span class=\"o\">.</span><span class=\"n\">request_headers</span><span class=\"p\">[</span><span class=\"s1\">'my-header1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'my-new-header'</span>\n</pre>\n<h1>Asynchronous processing and jobs</h1>\n<p>All POST, PATCH, and DELETE requests that can take more than two seconds to complete are\ndesigned to run asynchronously as non-blocking operations. These operations are executed\nas background jobs at the ONTAP cluster. The HTTP response generated by an\nasynchronous request always contains a link to the associated job object. By default, an\nasynchronous request automatically polls the job using the unique job identifier in the link.\nControl is returned to your script when a terminal state is reached (success or failure) or\nthe configured timeout value expires. However, you can override this behavior by setting the\n<strong>poll</strong> value to false when calling the function, causing control to return before the job\ncompletes. Forcing an immediate return can be useful when a job might take a long time to\ncomplete and you want to continute execution of the script.</p>\n<h1>Responses</h1>\n<p>A request always returns a <code>netapp_ontap.response.NetAppResponse</code> object which contains the details\nof the HTTP response. It contains information such as whether the response is an error\nor a job. Refer to <code>netapp_ontap.response.NetAppResponse</code> for further information on how\nto check the details of the response.</p>\n<h1>Exception handling</h1>\n<p>By default, an exception is returned if a request returns an HTTP status code of 400 or greater.\nThe exception object, which is of type <code>netapp_ontap.error.NetAppRestError</code>,\nholds the HTTP response object so that the exception can be handled in the client code.\nIf you wish not to raise exceptions, you can set <code>netapp_ontap.config.RAISE_API_ERRORS</code> to false. In this case,\nit is up to the client to check the HTTP response from the <code>netapp_ontap.response.NetAppResponse</code>\nobject and handle any errors. Refer to <code>netapp_ontap.error.NetAppRestError</code> for further information.</p>\n<pre><span class=\"c1\"># Set RAISE_API_ERRORS to False and check the HTTP response.</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RAISE_API_ERRORS</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">Svm</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"nonexistent_vs)</span>\n<span class=\"k\">assert</span> <span class=\"s2\">\"entry doesn't exist\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">http_response</span><span class=\"o\">.</span><span class=\"n\">text</span>\n</pre>\n<h1>Debugging</h1>\n<p>While writing your application, it can often be useful to see the raw HTTP request and response\ntext that the library is sending to and from the server. There are two flags that can be set\nto help with this.</p>\n<h2>DEBUG flag</h2>\n<p>The first is the DEBUG flag. This can be set either by setting DEBUG=1 in the environment prior\nto executing your application or by setting <code>netapp_ontap.utils.DEBUG</code> to 1 inside of your application.\nThis flag, when set, will cause the library to log the request and response for any failed\nAPI call. This will be logged at DEBUG level (see the section on logging for setting up your\napplication). Here's an example of setting this value inside of your application:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap</span> <span class=\"kn\">import</span> <span class=\"n\">HostConnection</span><span class=\"p\">,</span> <span class=\"n\">NetAppRestError</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Volume</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'10.100.200.50'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the DEBUG flag to 1</span>\n<span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># this API call will fail with a 404</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"n\">Volume</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">=</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'does_not_exist'</span><span class=\"p\">)</span>\n    <span class=\"n\">volume</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">NetAppRestError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We got an expected exception'</span><span class=\"p\">)</span>\n</pre>\n<p>Here is what the output would look like:</p>\n<pre><code>$ python test_debug.py\nDEBUG:urllib3.util.retry:Converted retries value: 5 -&gt; Retry(total=5, connect=None, read=None, redirect=None, status=None)\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): 10.100.200.50:443\nDEBUG:urllib3.connectionpool:https://10.100.200.50:443 \"GET /api/storage/volumes/1 HTTP/1.1\" 404 130\nDEBUG:netapp_ontap.utils:\n-----------REQUEST-----------\nGET https://10.100.200.50:443/api/storage/volumes/1\nAccept: */*\nUser-Agent: python-requests/2.21.0\nConnection: keep-alive\nAccept-Encoding: gzip, deflate\nX-Dot-Client-App: netapp-ontap-python-9.8.0\nAuthorization: Basic YWRtaW46cGFzc3dvcmQK\nNone\n-----------------------------\n\n-----------RESPONSE-----------\n404 Not Found\nDate:Tue, 12 Nov 2019 13:00:24 GMT\nServer:libzapid-httpd\nX-Content-Type-Options: nosniff\nCache-Control: no-cache,no-store,must-revalidate\nContent-Length: 130\nContent-Type: application/hal+json\nKeep-Alive: timeout=5, max=100\nConnection:Keep-Alive\n{\n  \"error\": {\n    \"message\": \"\\\"1\\\" is an invalid value for field \\\"uuid\\\" (&lt;UUID&gt;)\",\n    \"code\": \"2\",\n    \"target\": \"uuid\"\n  }\n}\n------------------------------\nWe got an expected exception\n$\n</code></pre>\n<h2>LOG_ALL_API_CALLS flag</h2>\n<p>There is also a LOG_ALL_API_CALLS flag which can be set in the same ways. You can\nset it in the environment or during script execution by setting <code>netapp_ontap.utils.LOG_ALL_API_CALLS</code>\nto 1. This flag will produce the same output as above, but it will log the call no\nmatter if there was a failure or not. Here's an example of what that would look\nlike if we got an existing volume:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap</span> <span class=\"kn\">import</span> <span class=\"n\">HostConnection</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Volume</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">HostConnection</span><span class=\"p\">(</span><span class=\"s1\">'10.100.200.50'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set the LOG_ALL_API_CALLS flag to 1</span>\n<span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">LOG_ALL_API_CALLS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># this API call will succeed and be logged</span>\n<span class=\"n\">volume</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Volume</span><span class=\"o\">.</span><span class=\"n\">get_collection</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p>Here is what the output would look like:</p>\n<pre><code>$ python test_debug.py\nDEBUG:urllib3.util.retry:Converted retries value: 5 -&gt; Retry(total=5, connect=None, read=None, redirect=None, status=None)\nDEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): 10.100.200.50:443\nDEBUG:urllib3.connectionpool:https://10.100.200.50:443 \"GET /api/storage/volumes HTTP/1.1\" 200 567\nDEBUG:netapp_ontap.utils:\n-----------REQUEST-----------\nGET https://10.100.200.50:443/api/storage/volumes\nUser-Agent: python-requests/2.21.0\nConnection: keep-alive\nAccept: */*\nAccept-Encoding: gzip, deflate\nX-Dot-Client-App: netapp-ontap-python-9.8.0\nAuthorization: Basic YWRtaW46cGFzc3dvcmQK\nNone\n-----------------------------\n\n-----------RESPONSE-----------\n200 OK\nDate:Tue, 12 Nov 2019 13:14:01 GMT\nServer:libzapid-httpd\nX-Content-Type-Options: nosniff\nCache-Control: no-cache,no-store,must-revalidate\nContent-Length: 567\nContent-Type: application/hal+json\nKeep-Alive: timeout=5, max=100\nConnection:Keep-Alive\n{\n  \"records\": [\n    {\n      \"uuid\": \"c68bdca8-d090-11e9-bb29-005056bb7f42\",\n      \"name\": \"vs0_root\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"/api/storage/volumes/c68bdca8-d090-11e9-bb29-005056bb7f42\"\n        }\n      }\n    },\n    {\n      \"uuid\": \"ed3b6ebf-d48e-11e9-bb29-005056bb7f42\",\n      \"name\": \"vs1_root\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"/api/storage/volumes/ed3b6ebf-d48e-11e9-bb29-005056bb7f42\"\n        }\n      }\n    }\n  ],\n  \"num_records\": 2,\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/api/storage/volumes\"\n    }\n  }\n}\n------------------------------\n$\n</code></pre>\n<h1>Additional considerations</h1>\n<p>In most cases, the objects and actions in the library can be mapped directly\nto equivalent cURL commands run against the ONTAP REST interface. However, there are a few\nexceptions you should be aware of.</p>\n<h2>Property names</h2>\n<p>If a property of a resource is named the same as one of the Python reserved names,\nthe name is transposed when accessing the member of the resource. For example,\nif there is a resource named \"Foo\" that has a property defined in the API named \"class\",\nthe property name would instead be \"class_\" when using the library. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netapp_ontap.resources</span> <span class=\"kn\">import</span> <span class=\"n\">Foo</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">class_</span> <span class=\"o\">=</span> <span class=\"s2\">\"high\"</span>\n</pre>\n<h1>Documentation</h1>\n<p>To view the full documentation, visit <a href=\"https://library.netapp.com/ecmdocs/ECMLP2858435/html/index.html\" rel=\"nofollow\">https://library.netapp.com/ecmdocs/ECMLP2858435/html/index.html</a>\nor to view an offline copy, see the <code>&lt;python_environment&gt;/lib/&lt;python_version&gt;/site_packages/netapp_ontap/docs</code>\nDocumentation of ONTAP's REST APIs and other helpful resources can be found at <a href=\"https://devnet.netapp.com/restapi\" rel=\"nofollow\">https://devnet.netapp.com/restapi</a>.</p>\n<h1>Compatibility</h1>\n<p>The version assigned to the library consists of the major ONTAP release it is generated\nfrom and a minor version for the library within that release. The minor version allows the\nlibrary to be updated within the same ONTAP release. For example, valid versions for\nthe library associated with ONTAP 9.6 include 9.6.0, 9.6.1, and so on.</p>\n<p>Client libraries that have the same major version as ONTAP are completely compatible.\nFor example, the libraries netapp-ontap-9.6.1 and netapp-ontap-9.6.4 are fully\ncompatible with both ONTAP 9.6 and ONTAP 9.6P1.</p>\n<p>A client library with a major version that does not match the ONTAP release can still be\nused, however it will not be fully compatible with the REST API. For example, the library\nnetapp-ontap-9.6.4 is only partially compatible with ONTAP 9.7. In these cases, the\nlibrary may encounter unknown fields or APIs. When this occurs, the library will ignore\nunknown fields, return an error, or raise a runtime exception.</p>\n<h1>Changelog</h1>\n<p>There are several changes to the Python Client Library and the ONTAP REST API, which are organized by release below.</p>\n<h2>9.7.0 GA library updates</h2>\n<p>(2020-01-23)</p>\n<p><strong>Fixed issues</strong></p>\n<ul>\n<li>\n<p><a href=\"https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&amp;Display=1279507\" rel=\"nofollow\">Bug ID 1279507</a><br>\nWhen doing a find() with the fields query parameter, the library was not returning the specified fields, instead, all fields were being returned.</p>\n</li>\n<li>\n<p><a href=\"https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&amp;Display=1291333\" rel=\"nofollow\">Bug ID 1291333</a><br>\nWhen 0 records are found in a Resource.find() call and LOG_ALL_API_CALLS is set to True, then an uncaught exception is raised.</p>\n</li>\n</ul>\n<h2>9.7.0 RC1 library updates</h2>\n<p>(2019-11-20)</p>\n<p><strong>New</strong></p>\n<ul>\n<li>The application can now add its own custom headers for each request as part of the <code>netapp_ontap.host_connection.HostConnection</code> object.</li>\n<li>When passing verify=False to the HostConnection, the library will now disable urllib3's InsecureRequestWarning from logging messages.</li>\n</ul>\n<p><strong>Incompatibilities</strong></p>\n<ul>\n<li>In prior versions, Resource.find() would raise an exception if no results were found as well as when more than one was found. In this version, when no results are found, None is returned instead of raising an exception. An exception is still raised when more than one result is found.</li>\n</ul>\n<p><strong>Fixed issues</strong></p>\n<ul>\n<li>\n<p><a href=\"https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&amp;Display=1271450\" rel=\"nofollow\">Bug ID 1271450</a><br>\nThe library doesn't allow sending a body in a DELETE request.</p>\n</li>\n<li>\n<p><a href=\"https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&amp;Display=1263312\" rel=\"nofollow\">Bug ID 1263312</a><br>\nWhen POSTing or PATCHing some objects with embeded objects, fields might incorrectly be dropped from the request.</p>\n</li>\n<li>\n<p><a href=\"https://mysupport.netapp.com/NOW/cgi-bin/bol?Type=Detail&amp;Display=1275238\" rel=\"nofollow\">Bug ID 1275238</a><br>\nRetrieving and setting the \"from\" field of Autosupport object fails.</p>\n</li>\n</ul>\n<p>##ONTAP 9.7 REST API updates</p>\n<p>All new ONTAP APIs have corresponding library resource objects which can be used\nto perform the operations. See the <code>netapp_ontap.resources</code> package for details\nabout each of the objects and their fields.</p>\n<p>For a summary of the changes in the ONTAP REST API between versions of ONTAP 9, see the <a href=\"https://library.netapp.com/ecmdocs/ECMLP2492508/html/frameset.html\" rel=\"nofollow\">ONTAP 9 Release Notes</a>.</p>\n<p><strong>New endpoints</strong></p>\n<ul>\n<li>\n<p>Endpoint: /cluster/nodes/{uuid}<br>\nHTTP methods: DELETE<br>\nThis API will remove a node from the cluster.</p>\n</li>\n<li>\n<p>Endpoint: /cluster/ntp/keys/{id}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs allow for management of NTP server shared keys.</p>\n</li>\n<li>\n<p>Endpoint: /cluster/ntp/servers/{server}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs allow for management of keyed NTP servers.</p>\n</li>\n<li>\n<p>Endpoint: /cluster/software/download<br>\nHTTP methods: GET<br>\nThis API allows monitoring the status of the image package download progress.</p>\n</li>\n<li>\n<p>Endpoint: /network/http-proxy/{uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThis API allow configuration of an HTTP proxy for the cluster of SVM IP spaces.</p>\n</li>\n<li>\n<p>Endpoint: /network/ip/bgp/peer-groups/{uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage information pertaining to the BGP peer-groups configured in the cluster.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/san/fcp/services/{svm.uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API retrieves historical performance metrics for the FC Protocols service of an SVM.</p>\n</li>\n<li>\n<p>Endpoint: /protocos/san/iscsi/services/{svm.uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API retrieves history performance metrics for the iSCSI protocol of an SVM.</p>\n</li>\n<li>\n<p>Endpoint: /storage/luns/{uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API retrieves history performance metrics for a LUN.</p>\n</li>\n<li>\n<p>Endpoint: /protocls/nvme/services/{svm.uuid}/metrics\nHTTP methods: GET<br>\nThis API retrieve historical performance metrics for NVME protocol of an SVM.</p>\n</li>\n<li>\n<p>Endpoint: /support/configuration-backup/{node.uuid}/name<br>\nHTTP methods: GET, POST, DELETE<br>\nThese APIs create, retrieve, and delete backup configuraiton for the cluster.</p>\n</li>\n<li>\n<p>Endpoint: /support/snmp/traphosts/{host}<br>\nHTTP methods: GET, POST, DELETE<br>\nThese APIs configure SNMP traphosts which will receive SNMP traps from ONTAP.</p>\n</li>\n<li>\n<p>Endpoint: /support/snmp/users/{engine_id}/{name}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs configure SNMP users that are able to query for the ONTAP SNMP server.</p>\n</li>\n<li>\n<p>Endpoint: /security<br>\nHTTP methods: GET<br>\nThis API retrieves information about the security configured on the cluster.</p>\n</li>\n<li>\n<p>Endpoint: /security/authentication/cluster/ad-proxy<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs configure which data SVM will be use to proxy cluster management AD authentication.</p>\n</li>\n<li>\n<p>Endpoint: /security/authentiation/publickeys/{owner.uuid}/{account.name}/{index}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs configure the public keys for user accounts.</p>\n</li>\n<li>\n<p>Endpoint: /security/key-managers/{source.uuid}/migrate<br>\nHTTP methods: POST<br>\nThis API migrates the keys belonging to an SVM between the cluster's key manager and the SVM's key manager.</p>\n</li>\n<li>\n<p>Endpoint: /security/ssh<br>\nHTTP methods: GET, PATCH<br>\nThis API manages the SSH server running in ONTAP.</p>\n</li>\n<li>\n<p>Endpoint: /storage/aggregates/{uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API provide historical performance metrics for the specified aggregate.</p>\n</li>\n<li>\n<p>Endpoint: /storage/disks<br>\nHTTP methods: PATCH<br>\nThis API updates the encryption controls of self-encrypting disks.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snapshot-policies/{snapshot-policy.uuid}/schedules/{uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage the policies reqarding when snapshots are taken.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/ndmp<br>\nHTTP methods: GET, PATCH<br>\nThis API manages NDMP mode at either SVM-scope or node-scope.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/ndmp/{node.uuid}<br>\nHTTP methods: GET, PATCH<br>\nThis API manages node-scoped NDMP settings.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/ndmp/sessions/{owner.uuid}/{session.id}<br>\nHTTP methods: GET, DELETE<br>\nThese APIs manage diagnostics information on NDMP settings belonging to a specific SVM in the case of SVM-scope or to a specific node in the case of node-scope.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/ndmp/svms/{svm.uuid}<br>\nHTTP methods: GET, PATCH<br>\nThese APIs manage SVM-scoped NDMP settings.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/audit-logs/{svm.uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage the loggin policies for a snaplock volume.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/compliance-clocks/{node.uuid}<br>\nHTTP methods: GET<br>\nThis API manages the Compliance Clock of the system which determines the expiry time of the SnapLock objects in the system.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/event-retention/operations/{id}<br>\nHTTP methods: GET, POST<br>\nThese APIs display all Event Based Retentions (EBR) operations and allow for applying an EBR policy on a specified volume.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/event-retention/policies/{policy.name}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage retention policies for snaplock files and directories.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/files/{volume.uuid}/{path}<br>\nHTTP methods: GET, PATCH, DELETE<br>\nThese APIs manage the SnapLock retention time of a file.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/file-fingerprints/{id}<br>\nHTTP methods: GET, POST, DELETE<br>\nThese APIs manage key information about snaplock files and volumes.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/litigations/{id}<br>\nHTTP methods: GET, POST, DELETE<br>\nThese APIs retain Compliance-mode WORM files for the duration of a litigation.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/litigations/{litigation.id/files<br>\nHTTP methods: GET<br>\nThis API displays the list of files under the specified litigation ID.</p>\n</li>\n<li>\n<p>Endpoint: /storage/snaplock/litigations/{litigation.id}/operations/{id}<br>\nHTTP methods: GET, POST, DELETE<br>\nThis API manages the legal-hold operations for the specified litigation ID.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/cifs/services/{svm.uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API retrieves history performance metrics for the CIFS protocol of an SVM.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/nfs/connected-clients<br>\nHTTP methods: GET<br>\nThis API provides a list of currently connected NFS clients or clients that can be connected but are currently idle.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/nfs/services/{svm.uuid}/metrics<br>\nHTTP methods: GET<br>\nThis API retrieves historical performance metrics for the NFS protocol of an SVM.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/s3/buckets<br>\nHTTP methods: GET<br>\nThis API retrieves all S3 buckets for all SVMs.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/s3/services/{svm.uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage S3 servers which will allow you to store objects in ONTAP using Amazon S3 protocol.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/s3/services/{svm.uuid}/buckets/{uuid}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage S3 buckets which are a container of objects.</p>\n</li>\n<li>\n<p>Endpoint: /protocols/s3/services/{svm.uuid}/users/{name}<br>\nHTTP methods: GET, POST, PATCH, DELETE<br>\nThese APIs manage S3 user accounts on the server. Buckets that are created are associate with a user.</p>\n</li>\n</ul>\n<p>##9.6.0<br>\n(2019-07-16)</p>\n<p>Initial release of the library</p>\n<h1>Copyright, trademarks, and feedback</h1>\n<h2>Copyright information</h2>\n<p>Copyright \u00a9 2019 NetApp, Inc. All Rights Reserved. Printed in the U.S.</p>\n<p>No part of this document covered by copyright may be reproduced in any form or by any means\u2010graphic,\nelectronic, or mechanical, including photocopying, recording, taping, or storage in an electronic\nretrieval system\u2010without prior written permission of the copyright owner.</p>\n<p>Software derived from copyrighted NetApp material is subject to the following license\nand disclaimer:</p>\n<p>THIS SOFTWARE IS PROVIDED BY NETAPP \"AS IS\" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE, WHICH ARE HEREBY DISCLAIMED. IN NO EVENT SHALL NETAPP BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n<p>NetApp reserves the right to change any products described herein at any time, and without notice.\nNetApp assumes no responsibility or liability arising from the use of products described herein,\nexcept as expressly agreed to in writing by NetApp. The use or purchase of this product does not\nconvey a license under any patent rights, trademark rights, or any other intellectual property\nrights of NetApp. The product described in this manual may be protected by one or more U.S.\npatents, foreign patents, or pending applications.</p>\n<p>RESTRICTED RIGHTS LEGEND: Use, duplication,or disclosure by the government is subject to\nrestrictions as set forth in subparagraph (c)(1)(ii) of the Rights in Technical Data and\nComputer Software clause at DFARS 252.277-7103 (October 1988) and FAR 52-227-19 (June 1987).</p>\n<h2>Trademark information</h2>\n<p>NETAPP, the NETAPP logo, and the marks listed on the NetApp Trademarks page are trademarks of\nNetApp, Inc. Other company and product names may be trademarks of their respective owners.\n<a href=\"http://www.netapp.com/us/legal/netapptmlist.aspx\" rel=\"nofollow\">http://www.netapp.com/us/legal/netapptmlist.aspx</a></p>\n<h2>Feedback</h2>\n<p>If you have questions about the library, suggestions, or find a bug, you may contact\nby email.</p>\n<p><a href=\"mailto:ng-ontap-rest-python-lib@netapp.com\">ng-ontap-rest-python-lib@netapp.com</a></p>\n<p>You can help us to improve the quality of our documentation by sending us your feedback.\nIf you have suggestions for improving this document, send us your comments by email.</p>\n<p><a href=\"mailto:doccomments@netapp.com\">doccomments@netapp.com</a></p>\n<p>To help us direct your comments to the correct division, include in the subject line\nthe product name, version, and operating system.</p>\n<p>If you want to be notified automatically when production-level documentation is released\nor important changes are made to existing production-level documents,\nfollow Twitter account @NetAppDoc.</p>\n<p>You can also contact us in the following ways:</p>\n<p>NetApp, Inc., 1395 Crossman Ave, Sunnyvale, CA 94089 U.S.</p>\n<p>Telephone: +1 (408) 822-6000</p>\n<p>Fax: +1 (408) 822-4501</p>\n<p>Support telephone: +1 (888) 463-8277</p>\n\n          </div>"}, "last_serial": 7067622, "releases": {"9.6.0": [{"comment_text": "", "digests": {"md5": "f1d8d091bb09eb4d330f9b047018fed5", "sha256": "73ce72112fdf30f15986c22971906359d35f9f84da48add7f9c2188618687006"}, "downloads": -1, "filename": "netapp_ontap-9.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f1d8d091bb09eb4d330f9b047018fed5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8032878, "upload_time": "2019-07-16T19:09:53", "upload_time_iso_8601": "2019-07-16T19:09:53.369752Z", "url": "https://files.pythonhosted.org/packages/fd/86/45e14b326e2aa03d9f2f60513855d889b560b424a721561f70003a3d6bf0/netapp_ontap-9.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5084cd0ef4b7d678bac9d4d0b53bb62", "sha256": "5f05da3af40533d6feed8bbbf31f9fe93531637ef24106a142c2d07751fde382"}, "downloads": -1, "filename": "netapp-ontap-9.6.0.tar.gz", "has_sig": false, "md5_digest": "d5084cd0ef4b7d678bac9d4d0b53bb62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2639933, "upload_time": "2019-07-16T19:10:41", "upload_time_iso_8601": "2019-07-16T19:10:41.744862Z", "url": "https://files.pythonhosted.org/packages/91/b7/dbfa6ab0fa476ca8925224150f796cb2800432972a97e95b220aab07e2e3/netapp-ontap-9.6.0.tar.gz", "yanked": false}], "9.7.0": [{"comment_text": "", "digests": {"md5": "89a0e847bd074ac40e33b13a69967fc3", "sha256": "3d19d01def86bb3252c596b235baed6c9e0fec0ad5231eede396b661985d3949"}, "downloads": -1, "filename": "netapp_ontap-9.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "89a0e847bd074ac40e33b13a69967fc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 882293, "upload_time": "2020-01-23T15:55:44", "upload_time_iso_8601": "2020-01-23T15:55:44.922319Z", "url": "https://files.pythonhosted.org/packages/01/f2/fcf425a35babcdc32776fe10f47cdd41f4edc9178217ba1489bf2991e84d/netapp_ontap-9.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffd8027852ba7f768adbaa3fc8f51fbc", "sha256": "2f66c8afea4eb8b8b17701573ce6109b0efb686da7bc44b749f1110bc88a0e46"}, "downloads": -1, "filename": "netapp-ontap-9.7.0.tar.gz", "has_sig": false, "md5_digest": "ffd8027852ba7f768adbaa3fc8f51fbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 408700, "upload_time": "2020-01-23T15:55:46", "upload_time_iso_8601": "2020-01-23T15:55:46.991930Z", "url": "https://files.pythonhosted.org/packages/86/e5/ac10f4b9eb0d965e4d2b691b8d83e8c783680b4d31c856216d7cb57c748d/netapp-ontap-9.7.0.tar.gz", "yanked": false}], "9.7.0rc1": [{"comment_text": "", "digests": {"md5": "d606d2d90d65ba89f077cd2f65737da0", "sha256": "44c23aef35d48a38020d0873e293a53bcc1c62883397a42f2d5f589e9d160691"}, "downloads": -1, "filename": "netapp_ontap-9.7.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "d606d2d90d65ba89f077cd2f65737da0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 882657, "upload_time": "2019-11-21T15:54:22", "upload_time_iso_8601": "2019-11-21T15:54:22.031272Z", "url": "https://files.pythonhosted.org/packages/53/cd/3e705babdc25f3eb3d444d016101dd8da03a8be153e58b2a7c73163354c1/netapp_ontap-9.7.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d37427abae5b8c8c4bfb811c59a65c7", "sha256": "98f5a35009a5d42c83171c6ae5cb061a19d39b220768ac8b2b1c8740aa506c4e"}, "downloads": -1, "filename": "netapp-ontap-9.7.0rc1.tar.gz", "has_sig": false, "md5_digest": "0d37427abae5b8c8c4bfb811c59a65c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 403879, "upload_time": "2019-11-21T15:54:24", "upload_time_iso_8601": "2019-11-21T15:54:24.435803Z", "url": "https://files.pythonhosted.org/packages/f9/68/9a4bafc7500a8e96accc44e7bfab606860a0e92abc9871522da6654d246f/netapp-ontap-9.7.0rc1.tar.gz", "yanked": false}], "9.7.0rc1.post1": [{"comment_text": "", "digests": {"md5": "fa020792f10dcea6fb7215083e4f0284", "sha256": "af7a38dce17d1ce05411661badc899a492d575f152df9a5a06d80e54ff748c03"}, "downloads": -1, "filename": "netapp_ontap-9.7.0rc1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "fa020792f10dcea6fb7215083e4f0284", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 882738, "upload_time": "2019-11-21T19:21:59", "upload_time_iso_8601": "2019-11-21T19:21:59.323062Z", "url": "https://files.pythonhosted.org/packages/ff/1f/697f06f6e9290d9cbda3868fd8943c5af171ece0a63e169facd73ddb7383/netapp_ontap-9.7.0rc1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "377617205ff8ce14ed71013d1146677a", "sha256": "3099dc1efe5e544fc90ee513404b8b8d3c875068016985283c2ceab0a041b141"}, "downloads": -1, "filename": "netapp-ontap-9.7.0rc1.post1.tar.gz", "has_sig": false, "md5_digest": "377617205ff8ce14ed71013d1146677a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 403835, "upload_time": "2019-11-21T19:22:01", "upload_time_iso_8601": "2019-11-21T19:22:01.610908Z", "url": "https://files.pythonhosted.org/packages/18/4e/ace523b0317fba293100efaa8607a1d8d69fdf7ce0ce39ca18451673a2f6/netapp-ontap-9.7.0rc1.post1.tar.gz", "yanked": false}], "9.7.1": [{"comment_text": "", "digests": {"md5": "6e918c586b0efa8354e9604577587af4", "sha256": "5efbb2b64fdbab785cd54b6208fbf9117f2abc93836e5d073f91bc16374bc4a5"}, "downloads": -1, "filename": "netapp_ontap-9.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6e918c586b0efa8354e9604577587af4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 887660, "upload_time": "2020-04-06T21:19:33", "upload_time_iso_8601": "2020-04-06T21:19:33.275838Z", "url": "https://files.pythonhosted.org/packages/6f/83/71435f857019fa45d3edfd2f723880da2606b702b4a4234e4035c67024c4/netapp_ontap-9.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e15ceaf43800c75d5726c9287c92c5d5", "sha256": "84978aaff698d18bc311b19ee503281211224afa7edb1f517c1fb8599d75a3d0"}, "downloads": -1, "filename": "netapp-ontap-9.7.1.tar.gz", "has_sig": false, "md5_digest": "e15ceaf43800c75d5726c9287c92c5d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 412666, "upload_time": "2020-04-06T21:19:35", "upload_time_iso_8601": "2020-04-06T21:19:35.302226Z", "url": "https://files.pythonhosted.org/packages/44/45/51907d83ee6106aedd6ee3293484899b6f971bbe4aaf202dafa86b88490c/netapp-ontap-9.7.1.tar.gz", "yanked": false}], "9.7.2": [{"comment_text": "", "digests": {"md5": "3c17dc0fd8bf4e238662fb478c0aa5dd", "sha256": "33e3b30929de85ef925164efc7d84ed3d78009d911bed8903c1e8fbfac12a62b"}, "downloads": -1, "filename": "netapp_ontap-9.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3c17dc0fd8bf4e238662fb478c0aa5dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 886730, "upload_time": "2020-04-21T12:32:08", "upload_time_iso_8601": "2020-04-21T12:32:08.432995Z", "url": "https://files.pythonhosted.org/packages/f5/33/ce0b7b094c8c557c0b5dbe129058f21a7df9bbed3529fb64bd7032d66c88/netapp_ontap-9.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1405a570913b9f0e6139262cc983530", "sha256": "18e5371e9cfdfd769f8bbb83b4c1c5e4862a70b94f1076b2f54d4ba31f917371"}, "downloads": -1, "filename": "netapp-ontap-9.7.2.tar.gz", "has_sig": false, "md5_digest": "c1405a570913b9f0e6139262cc983530", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 402440, "upload_time": "2020-04-21T12:32:10", "upload_time_iso_8601": "2020-04-21T12:32:10.168974Z", "url": "https://files.pythonhosted.org/packages/9c/4c/5613d35392231dbc3c0be368061eb6cf20020ebfab70d8f7fea8d4fdc4cf/netapp-ontap-9.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c17dc0fd8bf4e238662fb478c0aa5dd", "sha256": "33e3b30929de85ef925164efc7d84ed3d78009d911bed8903c1e8fbfac12a62b"}, "downloads": -1, "filename": "netapp_ontap-9.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3c17dc0fd8bf4e238662fb478c0aa5dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 886730, "upload_time": "2020-04-21T12:32:08", "upload_time_iso_8601": "2020-04-21T12:32:08.432995Z", "url": "https://files.pythonhosted.org/packages/f5/33/ce0b7b094c8c557c0b5dbe129058f21a7df9bbed3529fb64bd7032d66c88/netapp_ontap-9.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1405a570913b9f0e6139262cc983530", "sha256": "18e5371e9cfdfd769f8bbb83b4c1c5e4862a70b94f1076b2f54d4ba31f917371"}, "downloads": -1, "filename": "netapp-ontap-9.7.2.tar.gz", "has_sig": false, "md5_digest": "c1405a570913b9f0e6139262cc983530", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 402440, "upload_time": "2020-04-21T12:32:10", "upload_time_iso_8601": "2020-04-21T12:32:10.168974Z", "url": "https://files.pythonhosted.org/packages/9c/4c/5613d35392231dbc3c0be368061eb6cf20020ebfab70d8f7fea8d4fdc4cf/netapp-ontap-9.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:03 2020"}