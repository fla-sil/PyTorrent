{"info": {"author": "NVIDIA Corporation", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"90px\"/>&nbsp;cuML - GPU Machine Learning Algorithms</div>\n\n**NOTE:** For the latest stable [README.md](https://github.com/rapidsai/cuml/blob/master/README.md) ensure you are on the `master` branch.\n\ncuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other [RAPIDS](https://rapids.ai/) projects.\n\ncuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming.\n\nAs an example, the following Python snippet loads input and computes DBSCAN clusters, all on GPU:\n```python\nimport cudf\nfrom cuml import DBSCAN\n\n# Create and populate a GPU DataFrame\ngdf_float = cudf.DataFrame()\ngdf_float['0'] = [1.0, 2.0, 5.0]\ngdf_float['1'] = [4.0, 2.0, 1.0]\ngdf_float['2'] = [4.0, 2.0, 1.0]\n\n# Setup and fit clusters\ndbscan_float = DBSCAN(eps=1.0, min_samples=1)\ndbscan_float.fit(gdf_float)\n\nprint(dbscan_float.labels_)\n```\n\nOutput:\n```\n0    0\n1    1\n2    2\ndtype: int32\n```\n\nFor additional examples, browse our complete [API documentation](https://rapidsai.github.io/projects/cuml/en/latest/index.html), or check out our more detailed [walkthrough notebooks](https://github.com/rapidsai/notebooks/tree/master/cuml).\n\n### Supported Algorithms:\n\n- Truncated Singular Value Decomposition (tSVD) - Single GPU, Muti-GPU in Conda CUDA 10 package\n- Linear Regression (Ordinary Least Squares) - Single GPU, Muti-GPU in Conda CUDA 10 package\n- Principal Component Analysis (PCA) - Single GPU\n- Density-based spatial clustering of applications with noise (DBSCAN) - Single GPU\n- K-Means Clustering - Multi-GPU\n- K-Nearest Neighbors - Multi-GPU\n- Ridge Regression - Single GPU\n- Kalman Filter - Single GPU\n- UMAP\n- Stochastic Gradient Descent for linear regression, logistic regression, and linear svm with L1, L2, and elastic-net penalties.\n\nAlgorithms in progress:\n\n- More Kalman Filter versions\n- Lasso\n- Elastic-Net\n- Logistic Regression\n\nMore ML algorithms in cuML and more ML primitives in ml-prims are being worked on. Goals for future versions include more algorithms and multi-gpu versions of the algorithms and primitives.\n\n## Installation\n\nEnsure `libomp` and `libopenblas` are installed, for example via apt:\n```bash\nsudo apt install libopenblas-base libomp-dev\n```\n\n#### Conda\ncuML can be installed using the `rapidsai` conda channel:\n```bash\nconda install -c nvidia -c rapidsai -c conda-forge -c pytorch -c defaults cuml\n```\n\n#### Pip\ncuML can also be installed using pip. Select the package based on your version of CUDA.\n\n\n```bash\n# cuda 9.2\npip install cuml-cuda92\n\n# cuda 10.0\npip install cuml-cuda100\n```\n\n#### Build/Install from Source\nSee build [instructions](BUILD.md)\n\n## Contributing\n\nPlease use GitHub issues and pull requests to report bugs and add or request functionality.\n\n## Contact\n\nFind out more details on the [RAPIDS site](https://rapids.ai/community.html)\n\n## <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"265px\"/></div> Open GPU Data Science\n\nThe RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA\u00ae CUDA\u00ae primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.\n\n<p align=\"center\"><img src=\"img/rapids_arrow.png\" width=\"80%\"/></p>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rapidsai/cuml", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "cuml-cuda100", "package_url": "https://pypi.org/project/cuml-cuda100/", "platform": "", "project_url": "https://pypi.org/project/cuml-cuda100/", "project_urls": {"Homepage": "https://github.com/rapidsai/cuml"}, "release_url": "https://pypi.org/project/cuml-cuda100/0.6.1/", "requires_dist": ["numpy", "cython (>=0.29<0.30)", "cudf-cuda100 (<0.7.1,>=0.6.1)"], "requires_python": ">=3.6,<3.8", "summary": "cuML - RAPIDS ML Algorithms", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a12e1d79ea6f81d8fc41107a74d01dd322e39cd4/696d672f7261706964735f6c6f676f2e706e67\" width=\"90px\">\u00a0cuML - GPU Machine Learning Algorithms</div></h1>\n<p><strong>NOTE:</strong> For the latest stable <a href=\"https://github.com/rapidsai/cuml/blob/master/README.md\" rel=\"nofollow\">README.md</a> ensure you are on the <code>master</code> branch.</p>\n<p>cuML is a suite of libraries that implement machine learning algorithms and mathematical primitives functions that share compatible APIs with other <a href=\"https://rapids.ai/\" rel=\"nofollow\">RAPIDS</a> projects.</p>\n<p>cuML enables data scientists, researchers, and software engineers to run traditional tabular ML tasks on GPUs without going into the details of CUDA programming.</p>\n<p>As an example, the following Python snippet loads input and computes DBSCAN clusters, all on GPU:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cudf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cuml</span> <span class=\"kn\">import</span> <span class=\"n\">DBSCAN</span>\n\n<span class=\"c1\"># Create and populate a GPU DataFrame</span>\n<span class=\"n\">gdf_float</span> <span class=\"o\">=</span> <span class=\"n\">cudf</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n<span class=\"n\">gdf_float</span><span class=\"p\">[</span><span class=\"s1\">'0'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">]</span>\n<span class=\"n\">gdf_float</span><span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n<span class=\"n\">gdf_float</span><span class=\"p\">[</span><span class=\"s1\">'2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Setup and fit clusters</span>\n<span class=\"n\">dbscan_float</span> <span class=\"o\">=</span> <span class=\"n\">DBSCAN</span><span class=\"p\">(</span><span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">min_samples</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">dbscan_float</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">gdf_float</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dbscan_float</span><span class=\"o\">.</span><span class=\"n\">labels_</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>0    0\n1    1\n2    2\ndtype: int32\n</code></pre>\n<p>For additional examples, browse our complete <a href=\"https://rapidsai.github.io/projects/cuml/en/latest/index.html\" rel=\"nofollow\">API documentation</a>, or check out our more detailed <a href=\"https://github.com/rapidsai/notebooks/tree/master/cuml\" rel=\"nofollow\">walkthrough notebooks</a>.</p>\n<h3>Supported Algorithms:</h3>\n<ul>\n<li>Truncated Singular Value Decomposition (tSVD) - Single GPU, Muti-GPU in Conda CUDA 10 package</li>\n<li>Linear Regression (Ordinary Least Squares) - Single GPU, Muti-GPU in Conda CUDA 10 package</li>\n<li>Principal Component Analysis (PCA) - Single GPU</li>\n<li>Density-based spatial clustering of applications with noise (DBSCAN) - Single GPU</li>\n<li>K-Means Clustering - Multi-GPU</li>\n<li>K-Nearest Neighbors - Multi-GPU</li>\n<li>Ridge Regression - Single GPU</li>\n<li>Kalman Filter - Single GPU</li>\n<li>UMAP</li>\n<li>Stochastic Gradient Descent for linear regression, logistic regression, and linear svm with L1, L2, and elastic-net penalties.</li>\n</ul>\n<p>Algorithms in progress:</p>\n<ul>\n<li>More Kalman Filter versions</li>\n<li>Lasso</li>\n<li>Elastic-Net</li>\n<li>Logistic Regression</li>\n</ul>\n<p>More ML algorithms in cuML and more ML primitives in ml-prims are being worked on. Goals for future versions include more algorithms and multi-gpu versions of the algorithms and primitives.</p>\n<h2>Installation</h2>\n<p>Ensure <code>libomp</code> and <code>libopenblas</code> are installed, for example via apt:</p>\n<pre>sudo apt install libopenblas-base libomp-dev\n</pre>\n<h4>Conda</h4>\n<p>cuML can be installed using the <code>rapidsai</code> conda channel:</p>\n<pre>conda install -c nvidia -c rapidsai -c conda-forge -c pytorch -c defaults cuml\n</pre>\n<h4>Pip</h4>\n<p>cuML can also be installed using pip. Select the package based on your version of CUDA.</p>\n<pre><span class=\"c1\"># cuda 9.2</span>\npip install cuml-cuda92\n\n<span class=\"c1\"># cuda 10.0</span>\npip install cuml-cuda100\n</pre>\n<h4>Build/Install from Source</h4>\n<p>See build <a href=\"BUILD.md\" rel=\"nofollow\">instructions</a></p>\n<h2>Contributing</h2>\n<p>Please use GitHub issues and pull requests to report bugs and add or request functionality.</p>\n<h2>Contact</h2>\n<p>Find out more details on the <a href=\"https://rapids.ai/community.html\" rel=\"nofollow\">RAPIDS site</a></p>\n<h2><div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a12e1d79ea6f81d8fc41107a74d01dd322e39cd4/696d672f7261706964735f6c6f676f2e706e67\" width=\"265px\"></div> Open GPU Data Science</h2>\n<p>The RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA\u00ae CUDA\u00ae primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.</p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c26ac75a8bc8eecdc787b86ba696bbc0c0808939/696d672f7261706964735f6172726f772e706e67\" width=\"80%\"></p>\n\n          </div>"}, "last_serial": 5129907, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "189d1f7bb552b924b266da328ae78705", "sha256": "5b16a536e8db93fba7be07beac764262bd617cc209c84f55e5e258547b1769e2"}, "downloads": -1, "filename": "cuml_cuda100-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "189d1f7bb552b924b266da328ae78705", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 11334642, "upload_time": "2019-01-31T06:33:28", "upload_time_iso_8601": "2019-01-31T06:33:28.067744Z", "url": "https://files.pythonhosted.org/packages/d0/09/a8bfa74ed3108eb198b4544f3c759f5129414b1184c73bb678b247453d5f/cuml_cuda100-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cd5afd027352522340427720dce1f6f", "sha256": "85f420649bcaef77e51e14a9ab3be7841612d1d27643184dc789a58832805f3d"}, "downloads": -1, "filename": "cuml_cuda100-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1cd5afd027352522340427720dce1f6f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 11335104, "upload_time": "2019-01-31T06:33:33", "upload_time_iso_8601": "2019-01-31T06:33:33.093478Z", "url": "https://files.pythonhosted.org/packages/15/ec/6b8ca722c4291c365f127476a696fcf2d515ef4c235a555fd828dc3b405f/cuml_cuda100-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d81af5c4242b2d6f5dcc2f147ca0b8e8", "sha256": "a2d1592969c5781be9748fff87b9c0e8dfb3c7d4bdc93109b9e6d239b8811211"}, "downloads": -1, "filename": "cuml_cuda100-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d81af5c4242b2d6f5dcc2f147ca0b8e8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 11362036, "upload_time": "2019-02-05T23:30:37", "upload_time_iso_8601": "2019-02-05T23:30:37.514813Z", "url": "https://files.pythonhosted.org/packages/47/74/2b055d0acbce70c8cb0cc4a8461c9cd1e1315f16ab890220036ad341b9d2/cuml_cuda100-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7def8f8f2463577aa2983a85081b9790", "sha256": "1848f6f65cfaaa5bdca447fe7e7d76390024bccdee88f7b7bc8e30a7f31da05a"}, "downloads": -1, "filename": "cuml_cuda100-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7def8f8f2463577aa2983a85081b9790", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 11363940, "upload_time": "2019-02-05T23:30:44", "upload_time_iso_8601": "2019-02-05T23:30:44.129962Z", "url": "https://files.pythonhosted.org/packages/da/b3/3bba5d35a146c7b5ccdaf2eb7dabb58408862f13e74347844222f201924d/cuml_cuda100-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "91f7f4060fc622ae9a4338a4cbae8b7c", "sha256": "03d3837511d317f3c6c43c3e8c581a87b20935167bca37b9d451ad753af2e813"}, "downloads": -1, "filename": "cuml_cuda100-0.6.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "91f7f4060fc622ae9a4338a4cbae8b7c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 35562191, "upload_time": "2019-03-23T01:24:04", "upload_time_iso_8601": "2019-03-23T01:24:04.561355Z", "url": "https://files.pythonhosted.org/packages/ea/a7/39d119b531df4095c1c72d77b26bd3a9243a4c5c54e8ad1a437ca92049a8/cuml_cuda100-0.6.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32b27909521efb3d4001af5dbcc4c2e5", "sha256": "938a79d8c9fa5671b7bf2670024c0b3cb0bc3b14740c31e68e0806090ed93bcb"}, "downloads": -1, "filename": "cuml_cuda100-0.6.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "32b27909521efb3d4001af5dbcc4c2e5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 35569002, "upload_time": "2019-03-23T02:02:54", "upload_time_iso_8601": "2019-03-23T02:02:54.106410Z", "url": "https://files.pythonhosted.org/packages/42/fa/33fb186247bf3ae6a3d3f610b7acdf4cc0a6d12650b3a76a379eff3f5660/cuml_cuda100-0.6.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "42d18d4f004f9ef99a74138858cca824", "sha256": "ad484e875ece28e47c476aacdc4e39133ccbed4bcfac90f786cbe22f26803b1a"}, "downloads": -1, "filename": "cuml_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "42d18d4f004f9ef99a74138858cca824", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 35562383, "upload_time": "2019-04-11T16:44:25", "upload_time_iso_8601": "2019-04-11T16:44:25.073481Z", "url": "https://files.pythonhosted.org/packages/45/0a/a1c7ddc01b40275c16692fb55b02581db8c388e382c47ae39077698a00ba/cuml_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9d8008a69366fa67060667b8b0a14d", "sha256": "acb6924a68d051b5f777d18a63163b1e18d05db93d997fdfaa4627f8218a8669"}, "downloads": -1, "filename": "cuml_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ef9d8008a69366fa67060667b8b0a14d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 35569166, "upload_time": "2019-04-11T16:45:06", "upload_time_iso_8601": "2019-04-11T16:45:06.714708Z", "url": "https://files.pythonhosted.org/packages/9e/d1/477d66d0ced4f9778cc47e8de3beb5c5ef3eb9f3ad0220d7ed12993e8cbd/cuml_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42d18d4f004f9ef99a74138858cca824", "sha256": "ad484e875ece28e47c476aacdc4e39133ccbed4bcfac90f786cbe22f26803b1a"}, "downloads": -1, "filename": "cuml_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "42d18d4f004f9ef99a74138858cca824", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 35562383, "upload_time": "2019-04-11T16:44:25", "upload_time_iso_8601": "2019-04-11T16:44:25.073481Z", "url": "https://files.pythonhosted.org/packages/45/0a/a1c7ddc01b40275c16692fb55b02581db8c388e382c47ae39077698a00ba/cuml_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef9d8008a69366fa67060667b8b0a14d", "sha256": "acb6924a68d051b5f777d18a63163b1e18d05db93d997fdfaa4627f8218a8669"}, "downloads": -1, "filename": "cuml_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ef9d8008a69366fa67060667b8b0a14d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 35569166, "upload_time": "2019-04-11T16:45:06", "upload_time_iso_8601": "2019-04-11T16:45:06.714708Z", "url": "https://files.pythonhosted.org/packages/9e/d1/477d66d0ced4f9778cc47e8de3beb5c5ef3eb9f3ad0220d7ed12993e8cbd/cuml_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 00:41:25 2020"}