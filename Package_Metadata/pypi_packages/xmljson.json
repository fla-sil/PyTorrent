{"info": {"author": "S Anand", "author_email": "root.node@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============================\nxmljson\n===============================\n\n.. image:: https://img.shields.io/travis/sanand0/xmljson.svg\n        :target: https://travis-ci.org/sanand0/xmljson\n\n.. image:: https://img.shields.io/pypi/v/xmljson.svg\n        :target: https://pypi.python.org/pypi/xmljson\n\nThis library is not actively maintained. Alternatives are `xmltodict`_ and `untangle`_.\nUse only if you need to parse using specific XML to JSON `conventions`_.\n\n.. _conventions: http://wiki.open311.org/JSON_and_XML_Conversion/\n.. _xmltodict: https://github.com/martinblech/xmltodict\n.. _untangle: https://untangle.readthedocs.io/en/latest/\n\nxmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.\n\nAbout\n-----\n\nXML can be converted to a data structure (such as JSON) and back. For example::\n\n    <employees>\n        <person>\n            <name value=\"Alice\"/>\n        </person>\n        <person>\n            <name value=\"Bob\"/>\n        </person>\n    </employees>\n\ncan be converted into this data structure (which also a valid JSON object)::\n\n    {\n        \"employees\": [{\n            \"person\": {\n                \"name\": {\n                    \"@value\": \"Alice\"\n                }\n            }\n        }, {\n            \"person\": {\n                \"name\": {\n                    \"@value\": \"Bob\"\n                }\n            }\n        }]\n    }\n\nThis uses the `BadgerFish`_ convention that prefixes attributes with ``@``.\nThe conventions supported by this library are:\n\n* `Abdera`_: Use ``\"attributes\"`` for attributes, ``\"children\"`` for nodes\n* `BadgerFish`_: Use ``\"$\"`` for text content, ``@`` to prefix attributes\n* `Cobra`_: Use ``\"attributes\"`` for sorted attributes (even when empty), ``\"children\"`` for nodes, values are strings\n* `GData`_: Use ``\"$t\"`` for text content, attributes added as-is\n* `Parker`_: Use tail nodes for text content, ignore attributes\n* `Yahoo`_ Use ``\"content\"`` for text content, attributes added as-is\n\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\n.. _BadgerFish: http://www.sklar.com/badgerfish/\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\n.. _GData: http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention\n.. _Parker: https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\n\n\nConvert data to XML\n-------------------\n\nTo convert from a data structure to XML using the BadgerFish convention::\n\n    >>> from xmljson import badgerfish as bf\n    >>> bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})\n\nThis returns an **array** of `etree.Element`_ structures. In this case, the\nresult is identical to::\n\n    >>> from xml.etree.ElementTree import fromstring\n    >>> [fromstring('<p id=\"main\">Hello<b>bold</b></p>')]\n\n.. _etree.Element: http://effbot.org/zone/element-index.htm\n\nThe result can be inserted into any existing root `etree.Element`_::\n\n    >>> from xml.etree.ElementTree import Element, tostring\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))\n    >>> tostring(result)\n    '<root><p id=\"main\"/></root>'\n\nThis includes `lxml.html <http://lxml.de/lxmlhtml.html>`_ as well::\n\n    >>> from lxml.html import Element, tostring\n    >>> result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))\n    >>> tostring(result, doctype='<!DOCTYPE html>')\n    '<!DOCTYPE html>\\n<html><p id=\"main\"></p></html>'\n\nFor ease of use, strings are treated as node text. For example, both the\nfollowing are the same::\n\n    >>> bf.etree({'p': {'$': 'paragraph text'}})\n    >>> bf.etree({'p': 'paragraph text'})\n\nBy default, non-string values are converted to strings using Python's ``str``,\nexcept for booleans -- which are converted into ``true`` and ``false`` (lower\ncase). Override this behaviour using ``xml_fromstring``::\n\n    >>> tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))\n    '<root><y>true</y><x>1.23</x></root>'\n    >>> from xmljson import BadgerFish              # import the class\n    >>> bf_str = BadgerFish(xml_tostring=str)       # convert using str()\n    >>> tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))\n    '<root><y>True</y><x>1.23</x></root>'\n\nIf the data contains invalid XML keys, these can be dropped via\n``invalid_tags='drop'`` in the constructor::\n\n    >>> bf_drop = BadgerFish(invalid_tags='drop')\n    >>> data = bf_drop.etree({'$': '1', 'x': '1'}, root=Element('root'))    # Drops invalid <$> tag\n    >>> tostring(data)\n    '<root>1<x>1</x></root>'\n\n\nConvert XML to data\n-------------------\n\nTo convert from XML to a data structure using the BadgerFish convention::\n\n    >>> bf.data(fromstring('<p id=\"main\">Hello<b>bold</b></p>'))\n    {\"p\": {\"$\": \"Hello\", \"@id\": \"main\", \"b\": {\"$\": \"bold\"}}}\n\nTo convert this to JSON, use::\n\n    >>> from json import dumps\n    >>> dumps(bf.data(fromstring('<p id=\"main\">Hello<b>bold</b></p>')))\n    '{\"p\": {\"b\": {\"$\": \"bold\"}, \"@id\": \"main\", \"$\": \"Hello\"}}'\n\nTo preserve the order of attributes and children, specify the ``dict_type`` as\n``OrderedDict`` (or any other dictionary-like type) in the constructor::\n\n    >>> from collections import OrderedDict\n    >>> from xmljson import BadgerFish              # import the class\n    >>> bf = BadgerFish(dict_type=OrderedDict)      # pick dict class\n\nBy default, values are parsed into boolean, int or float where possible (except\nin the Yahoo method). Override this behaviour using ``xml_fromstring``::\n\n    >>> dumps(bf.data(fromstring('<x>1</x>')))\n    '{\"x\": {\"$\": 1}}'\n    >>> bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings\n    >>> dumps(bf_str.data(fromstring('<x>1</x>')))\n    '{\"x\": {\"$\": \"1\"}}'\n    >>> bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser\n    '{\"x\": {\"$\": \"\\'1\\'\"}}'\n\n``xml_fromstring`` can be any custom function that takes a string and returns a\nvalue. In the example below, only the integer ``1`` is converted to an integer.\nEverything else is retained as a float::\n\n    >>> def convert_only_int(val):\n    ...     return int(val) if val.isdigit() else val\n    >>> bf_int = BadgerFish(xml_fromstring=convert_only_int)\n    >>> dumps(bf_int.data(fromstring('<p><x>1</x><y>2.5</y><z>NaN</z></p>')))\n    '{\"p\": {\"x\": {\"$\": 1}, \"y\": {\"$\": \"2.5\"}, \"z\": {\"$\": \"NaN\"}}}'\n\n\nConventions\n-----------\n\nTo use a different conversion method, replace ``BadgerFish`` with one of the\nother classes. Currently, these are supported::\n\n    >>> from xmljson import abdera          # == xmljson.Abdera()\n    >>> from xmljson import badgerfish      # == xmljson.BadgerFish()\n    >>> from xmljson import cobra           # == xmljson.Cobra()\n    >>> from xmljson import gdata           # == xmljson.GData()\n    >>> from xmljson import parker          # == xmljson.Parker()\n    >>> from xmljson import yahoo           # == xmljson.Yahoo()\n\n\nOptions\n-------\n\nConventions may support additional options.\n\nThe `Parker`_ convention absorbs the root element by default.\n``parker.data(preserve_root=True)`` preserves the root instance::\n\n    >>> from xmljson import parker, Parker\n    >>> from xml.etree.ElementTree import fromstring\n    >>> from json import dumps\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>')))\n    '{\"a\": 1, \"b\": 2}'\n    >>> dumps(parker.data(fromstring('<x><a>1</a><b>2</b></x>'), preserve_root=True))\n    '{\"x\": {\"a\": 1, \"b\": 2}}'\n\n\nInstallation\n------------\n\nThis is a pure-Python package built for Python 2.7+ and Python 3.0+. To set up::\n\n    pip install xmljson\n\n\nSimple CLI utility\n------------------\n\nAfter installation, you can benefit from using this package as simple CLI utility. By now only XML to JSON conversion supported. Example::\n\n    $ python -m xmljson -h\n    usage: xmljson [-h] [-o OUT_FILE]\n                [-d {abdera,badgerfish,cobra,gdata,parker,xmldata,yahoo}]\n                [in_file]\n\n    positional arguments:\n    in_file               defaults to stdin\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -o OUT_FILE, --out_file OUT_FILE\n                            defaults to stdout\n    -d {abdera,badgerfish,...}, --dialect {...}\n                            defaults to parker\n\n    $ python -m xmljson -d parker tests/mydata.xml\n    {\n      \"foo\": \"spam\",\n      \"bar\": 42\n    }\n\nThis is a typical UNIX filter program: it reads file (or ``stdin``), processes it in some way (convert XML to JSON in this case), then prints it to ``stdout`` (or file). Example with pipe::\n\n    $ some-xml-producer | python -m xmljson | some-json-processor\n\nThere is also ``pip``'s ``console_script`` entry-point, you can call this utility as ``xml2json``::\n\n    $ xml2json -d abdera mydata.xml\n\nRoadmap\n-------\n\n* Test cases for Unicode\n* Support for namespaces and namespace prefixes\n* Support XML comments\n\n\n\n\nHistory\n-------\n0.2.1 (25 Apr 2020)\n~~~~~~~~~~~~~~~~~~~~~\n\n- Bugfix: Don't strip whitespace in xml text values (@imoore76)\n- Bugfix: Yahoo convention should convert ``<x>0</x>`` into ``{x: 0}``. Empty elements become ``''`` not ``{}``\n- Suggest alternate libraries in documentation\n\n\n0.2.0 (21 Nov 2018)\n~~~~~~~~~~~~~~~~~~~~~\n- ``xmljson`` command line script converts from XML to JSON (@tribals)\n- ``invalid_tags='drop'`` in the constructor drops invalid XML tags in ``.etree()`` (@Zurga)\n- Bugfix: Parker converts ``{'x': null}`` to ``<x></x>`` instead of ``<x>None</x>`` (@jorndoe #29)\n\n0.1.9 (1 Aug 2017)\n~~~~~~~~~~~~~~~~~~\n\n- Bugfix and test cases for multiple nested children in Abdera_ convention\n\nThanks to @mukultaneja\n\n0.1.8 (9 May 2017)\n~~~~~~~~~~~~~~~~~~\n\n- Add Abdera_ and Cobra_ conventions\n- Add ``Parker.data(preserve_root=True)`` option to preserve root element in\n  Parker convention.\n\nThanks to @dagwieers\n\n.. _Abdera: http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\n.. _Cobra: http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\n\n0.1.6 (18 Feb 2016)\n~~~~~~~~~~~~~~~~~~~\n\n- Add ``xml_fromstring=`` and ``xml_tostring=`` parameters to constructor to\n  customise string conversion from and to XML.\n\n\n0.1.5 (23 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Add the Yahoo_ XML to JSON conversion method.\n\n.. _Yahoo: https://developer.yahoo.com/javascript/json.html#xml\n\n0.1.4 (20 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Fix ``GData.etree()`` conversion of attributes. (They were ignored. They\n  should be added as-is.)\n\n0.1.3 (20 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Simplify ``{'p': {'$': 'text'}}`` to ``{'p': 'text'}`` in BadgerFish and GData\n  conventions.\n- Add test cases for ``.etree()`` -- mainly from the `MDN JXON article`_.\n- ``dict_type``/``list_type`` do not need to inherit from ``dict``/``list``\n\n.. _MDN JXON article: https://developer.mozilla.org/en-US/docs/JXON#In_summary\n\n0.1.2 (18 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Always use the ``dict_type`` class to create dictionaries (which defaults to\n  ``OrderedDict`` to preserve order of keys)\n- Update documentation, test cases\n- Remove support for Python 2.6 (since we need ``collections.Counter``)\n- Make the `Travis CI build`_ pass\n\n.. _Travis CI build: https://travis-ci.org/sanand0/xmljson\n\n0.1.1 (18 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Convert ``true``, ``false`` and numeric values from strings to Python types\n- ``xmljson.parker.data()`` is compliant with Parker convention (bugs resolved)\n\n0.1.0 (15 Sep 2015)\n~~~~~~~~~~~~~~~~~~~\n\n- Two-way conversions via BadgerFish, GData and Parker conventions.\n- First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sanand0/xmljson", "keywords": "xmljson", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xmljson", "package_url": "https://pypi.org/project/xmljson/", "platform": "", "project_url": "https://pypi.org/project/xmljson/", "project_urls": {"Homepage": "https://github.com/sanand0/xmljson"}, "release_url": "https://pypi.org/project/xmljson/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Converts XML into JSON/Python dicts/arrays and vice-versa.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/sanand0/xmljson\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/sanand0/xmljson.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bc8c50f5b1c285b17c193313c6c87b339e677bb/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73616e616e64302f786d6c6a736f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/xmljson\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/xmljson.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/980d2fed27f6e73c35db1a21d5f5a060697cd9b3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f786d6c6a736f6e2e737667\"></a>\n<p>This library is not actively maintained. Alternatives are <a href=\"https://github.com/martinblech/xmltodict\" rel=\"nofollow\">xmltodict</a> and <a href=\"https://untangle.readthedocs.io/en/latest/\" rel=\"nofollow\">untangle</a>.\nUse only if you need to parse using specific XML to JSON <a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/\" rel=\"nofollow\">conventions</a>.</p>\n<p>xmljson converts XML into Python dictionary structures (trees, like in JSON) and vice-versa.</p>\n<div id=\"about\">\n<h2>About</h2>\n<p>XML can be converted to a data structure (such as JSON) and back. For example:</p>\n<pre>&lt;employees&gt;\n    &lt;person&gt;\n        &lt;name value=\"Alice\"/&gt;\n    &lt;/person&gt;\n    &lt;person&gt;\n        &lt;name value=\"Bob\"/&gt;\n    &lt;/person&gt;\n&lt;/employees&gt;\n</pre>\n<p>can be converted into this data structure (which also a valid JSON object):</p>\n<pre>{\n    \"employees\": [{\n        \"person\": {\n            \"name\": {\n                \"@value\": \"Alice\"\n            }\n        }\n    }, {\n        \"person\": {\n            \"name\": {\n                \"@value\": \"Bob\"\n            }\n        }\n    }]\n}\n</pre>\n<p>This uses the <a href=\"http://www.sklar.com/badgerfish/\" rel=\"nofollow\">BadgerFish</a> convention that prefixes attributes with <tt>@</tt>.\nThe conventions supported by this library are:</p>\n<ul>\n<li><a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\" rel=\"nofollow\">Abdera</a>: Use <tt>\"attributes\"</tt> for attributes, <tt>\"children\"</tt> for nodes</li>\n<li><a href=\"http://www.sklar.com/badgerfish/\" rel=\"nofollow\">BadgerFish</a>: Use <tt>\"$\"</tt> for text content, <tt>@</tt> to prefix attributes</li>\n<li><a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\" rel=\"nofollow\">Cobra</a>: Use <tt>\"attributes\"</tt> for sorted attributes (even when empty), <tt>\"children\"</tt> for nodes, values are strings</li>\n<li><a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-gdata-convention\" rel=\"nofollow\">GData</a>: Use <tt>\"$t\"</tt> for text content, attributes added as-is</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\" rel=\"nofollow\">Parker</a>: Use tail nodes for text content, ignore attributes</li>\n<li><a href=\"https://developer.yahoo.com/javascript/json.html#xml\" rel=\"nofollow\">Yahoo</a> Use <tt>\"content\"</tt> for text content, attributes added as-is</li>\n</ul>\n</div>\n<div id=\"convert-data-to-xml\">\n<h2>Convert data to XML</h2>\n<p>To convert from a data structure to XML using the BadgerFish convention:</p>\n<pre>&gt;&gt;&gt; from xmljson import badgerfish as bf\n&gt;&gt;&gt; bf.etree({'p': {'@id': 'main', '$': 'Hello', 'b': 'bold'}})\n</pre>\n<p>This returns an <strong>array</strong> of <a href=\"http://effbot.org/zone/element-index.htm\" rel=\"nofollow\">etree.Element</a> structures. In this case, the\nresult is identical to:</p>\n<pre>&gt;&gt;&gt; from xml.etree.ElementTree import fromstring\n&gt;&gt;&gt; [fromstring('&lt;p id=\"main\"&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;')]\n</pre>\n<p>The result can be inserted into any existing root <a href=\"http://effbot.org/zone/element-index.htm\" rel=\"nofollow\">etree.Element</a>:</p>\n<pre>&gt;&gt;&gt; from xml.etree.ElementTree import Element, tostring\n&gt;&gt;&gt; result = bf.etree({'p': {'@id': 'main'}}, root=Element('root'))\n&gt;&gt;&gt; tostring(result)\n'&lt;root&gt;&lt;p id=\"main\"/&gt;&lt;/root&gt;'\n</pre>\n<p>This includes <a href=\"http://lxml.de/lxmlhtml.html\" rel=\"nofollow\">lxml.html</a> as well:</p>\n<pre>&gt;&gt;&gt; from lxml.html import Element, tostring\n&gt;&gt;&gt; result = bf.etree({'p': {'@id': 'main'}}, root=Element('html'))\n&gt;&gt;&gt; tostring(result, doctype='&lt;!DOCTYPE html&gt;')\n'&lt;!DOCTYPE html&gt;\\n&lt;html&gt;&lt;p id=\"main\"&gt;&lt;/p&gt;&lt;/html&gt;'\n</pre>\n<p>For ease of use, strings are treated as node text. For example, both the\nfollowing are the same:</p>\n<pre>&gt;&gt;&gt; bf.etree({'p': {'$': 'paragraph text'}})\n&gt;&gt;&gt; bf.etree({'p': 'paragraph text'})\n</pre>\n<p>By default, non-string values are converted to strings using Python\u2019s <tt>str</tt>,\nexcept for booleans \u2013 which are converted into <tt>true</tt> and <tt>false</tt> (lower\ncase). Override this behaviour using <tt>xml_fromstring</tt>:</p>\n<pre>&gt;&gt;&gt; tostring(bf.etree({'x': 1.23, 'y': True}, root=Element('root')))\n'&lt;root&gt;&lt;y&gt;true&lt;/y&gt;&lt;x&gt;1.23&lt;/x&gt;&lt;/root&gt;'\n&gt;&gt;&gt; from xmljson import BadgerFish              # import the class\n&gt;&gt;&gt; bf_str = BadgerFish(xml_tostring=str)       # convert using str()\n&gt;&gt;&gt; tostring(bf_str.etree({'x': 1.23, 'y': True}, root=Element('root')))\n'&lt;root&gt;&lt;y&gt;True&lt;/y&gt;&lt;x&gt;1.23&lt;/x&gt;&lt;/root&gt;'\n</pre>\n<p>If the data contains invalid XML keys, these can be dropped via\n<tt><span class=\"pre\">invalid_tags='drop'</span></tt> in the constructor:</p>\n<pre>&gt;&gt;&gt; bf_drop = BadgerFish(invalid_tags='drop')\n&gt;&gt;&gt; data = bf_drop.etree({'$': '1', 'x': '1'}, root=Element('root'))    # Drops invalid &lt;$&gt; tag\n&gt;&gt;&gt; tostring(data)\n'&lt;root&gt;1&lt;x&gt;1&lt;/x&gt;&lt;/root&gt;'\n</pre>\n</div>\n<div id=\"convert-xml-to-data\">\n<h2>Convert XML to data</h2>\n<p>To convert from XML to a data structure using the BadgerFish convention:</p>\n<pre>&gt;&gt;&gt; bf.data(fromstring('&lt;p id=\"main\"&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;'))\n{\"p\": {\"$\": \"Hello\", \"@id\": \"main\", \"b\": {\"$\": \"bold\"}}}\n</pre>\n<p>To convert this to JSON, use:</p>\n<pre>&gt;&gt;&gt; from json import dumps\n&gt;&gt;&gt; dumps(bf.data(fromstring('&lt;p id=\"main\"&gt;Hello&lt;b&gt;bold&lt;/b&gt;&lt;/p&gt;')))\n'{\"p\": {\"b\": {\"$\": \"bold\"}, \"@id\": \"main\", \"$\": \"Hello\"}}'\n</pre>\n<p>To preserve the order of attributes and children, specify the <tt>dict_type</tt> as\n<tt>OrderedDict</tt> (or any other dictionary-like type) in the constructor:</p>\n<pre>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; from xmljson import BadgerFish              # import the class\n&gt;&gt;&gt; bf = BadgerFish(dict_type=OrderedDict)      # pick dict class\n</pre>\n<p>By default, values are parsed into boolean, int or float where possible (except\nin the Yahoo method). Override this behaviour using <tt>xml_fromstring</tt>:</p>\n<pre>&gt;&gt;&gt; dumps(bf.data(fromstring('&lt;x&gt;1&lt;/x&gt;')))\n'{\"x\": {\"$\": 1}}'\n&gt;&gt;&gt; bf_str = BadgerFish(xml_fromstring=False)   # Keep XML values as strings\n&gt;&gt;&gt; dumps(bf_str.data(fromstring('&lt;x&gt;1&lt;/x&gt;')))\n'{\"x\": {\"$\": \"1\"}}'\n&gt;&gt;&gt; bf_str = BadgerFish(xml_fromstring=repr)    # Custom string parser\n'{\"x\": {\"$\": \"\\'1\\'\"}}'\n</pre>\n<p><tt>xml_fromstring</tt> can be any custom function that takes a string and returns a\nvalue. In the example below, only the integer <tt>1</tt> is converted to an integer.\nEverything else is retained as a float:</p>\n<pre>&gt;&gt;&gt; def convert_only_int(val):\n...     return int(val) if val.isdigit() else val\n&gt;&gt;&gt; bf_int = BadgerFish(xml_fromstring=convert_only_int)\n&gt;&gt;&gt; dumps(bf_int.data(fromstring('&lt;p&gt;&lt;x&gt;1&lt;/x&gt;&lt;y&gt;2.5&lt;/y&gt;&lt;z&gt;NaN&lt;/z&gt;&lt;/p&gt;')))\n'{\"p\": {\"x\": {\"$\": 1}, \"y\": {\"$\": \"2.5\"}, \"z\": {\"$\": \"NaN\"}}}'\n</pre>\n</div>\n<div id=\"id1\">\n<h2>Conventions</h2>\n<p>To use a different conversion method, replace <tt>BadgerFish</tt> with one of the\nother classes. Currently, these are supported:</p>\n<pre>&gt;&gt;&gt; from xmljson import abdera          # == xmljson.Abdera()\n&gt;&gt;&gt; from xmljson import badgerfish      # == xmljson.BadgerFish()\n&gt;&gt;&gt; from xmljson import cobra           # == xmljson.Cobra()\n&gt;&gt;&gt; from xmljson import gdata           # == xmljson.GData()\n&gt;&gt;&gt; from xmljson import parker          # == xmljson.Parker()\n&gt;&gt;&gt; from xmljson import yahoo           # == xmljson.Yahoo()\n</pre>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<p>Conventions may support additional options.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/JXON#The_Parker_Convention\" rel=\"nofollow\">Parker</a> convention absorbs the root element by default.\n<tt>parker.data(preserve_root=True)</tt> preserves the root instance:</p>\n<pre>&gt;&gt;&gt; from xmljson import parker, Parker\n&gt;&gt;&gt; from xml.etree.ElementTree import fromstring\n&gt;&gt;&gt; from json import dumps\n&gt;&gt;&gt; dumps(parker.data(fromstring('&lt;x&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;/x&gt;')))\n'{\"a\": 1, \"b\": 2}'\n&gt;&gt;&gt; dumps(parker.data(fromstring('&lt;x&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;/x&gt;'), preserve_root=True))\n'{\"x\": {\"a\": 1, \"b\": 2}}'\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This is a pure-Python package built for Python 2.7+ and Python 3.0+. To set up:</p>\n<pre>pip install xmljson\n</pre>\n</div>\n<div id=\"simple-cli-utility\">\n<h2>Simple CLI utility</h2>\n<p>After installation, you can benefit from using this package as simple CLI utility. By now only XML to JSON conversion supported. Example:</p>\n<pre>$ python -m xmljson -h\nusage: xmljson [-h] [-o OUT_FILE]\n            [-d {abdera,badgerfish,cobra,gdata,parker,xmldata,yahoo}]\n            [in_file]\n\npositional arguments:\nin_file               defaults to stdin\n\noptional arguments:\n-h, --help            show this help message and exit\n-o OUT_FILE, --out_file OUT_FILE\n                        defaults to stdout\n-d {abdera,badgerfish,...}, --dialect {...}\n                        defaults to parker\n\n$ python -m xmljson -d parker tests/mydata.xml\n{\n  \"foo\": \"spam\",\n  \"bar\": 42\n}\n</pre>\n<p>This is a typical UNIX filter program: it reads file (or <tt>stdin</tt>), processes it in some way (convert XML to JSON in this case), then prints it to <tt>stdout</tt> (or file). Example with pipe:</p>\n<pre>$ some-xml-producer | python -m xmljson | some-json-processor\n</pre>\n<p>There is also <tt>pip</tt>\u2019s <tt>console_script</tt> entry-point, you can call this utility as <tt>xml2json</tt>:</p>\n<pre>$ xml2json -d abdera mydata.xml\n</pre>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<ul>\n<li>Test cases for Unicode</li>\n<li>Support for namespaces and namespace prefixes</li>\n<li>Support XML comments</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"apr-2020\">\n<h3>0.2.1 (25 Apr 2020)</h3>\n<ul>\n<li>Bugfix: Don\u2019t strip whitespace in xml text values (@imoore76)</li>\n<li>Bugfix: Yahoo convention should convert <tt><span class=\"pre\">&lt;x&gt;0&lt;/x&gt;</span></tt> into <tt>{x: 0}</tt>. Empty elements become <tt>''</tt> not <tt>{}</tt></li>\n<li>Suggest alternate libraries in documentation</li>\n</ul>\n</div>\n<div id=\"nov-2018\">\n<h3>0.2.0 (21 Nov 2018)</h3>\n<ul>\n<li><tt>xmljson</tt> command line script converts from XML to JSON (@tribals)</li>\n<li><tt><span class=\"pre\">invalid_tags='drop'</span></tt> in the constructor drops invalid XML tags in <tt>.etree()</tt> (@Zurga)</li>\n<li>Bugfix: Parker converts <tt>{'x': null}</tt> to <tt><span class=\"pre\">&lt;x&gt;&lt;/x&gt;</span></tt> instead of <tt><span class=\"pre\">&lt;x&gt;None&lt;/x&gt;</span></tt> (@jorndoe #29)</li>\n</ul>\n</div>\n<div id=\"aug-2017\">\n<h3>0.1.9 (1 Aug 2017)</h3>\n<ul>\n<li>Bugfix and test cases for multiple nested children in <a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\" rel=\"nofollow\">Abdera</a> convention</li>\n</ul>\n<p>Thanks to @mukultaneja</p>\n</div>\n<div id=\"may-2017\">\n<h3>0.1.8 (9 May 2017)</h3>\n<ul>\n<li>Add <a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-abdera-convention\" rel=\"nofollow\">Abdera</a> and <a href=\"http://wiki.open311.org/JSON_and_XML_Conversion/#the-cobra-convention\" rel=\"nofollow\">Cobra</a> conventions</li>\n<li>Add <tt>Parker.data(preserve_root=True)</tt> option to preserve root element in\nParker convention.</li>\n</ul>\n<p>Thanks to @dagwieers</p>\n</div>\n<div id=\"feb-2016\">\n<h3>0.1.6 (18 Feb 2016)</h3>\n<ul>\n<li>Add <tt>xml_fromstring=</tt> and <tt>xml_tostring=</tt> parameters to constructor to\ncustomise string conversion from and to XML.</li>\n</ul>\n</div>\n<div id=\"sep-2015\">\n<h3>0.1.5 (23 Sep 2015)</h3>\n<ul>\n<li>Add the <a href=\"https://developer.yahoo.com/javascript/json.html#xml\" rel=\"nofollow\">Yahoo</a> XML to JSON conversion method.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.4 (20 Sep 2015)</h3>\n<ul>\n<li>Fix <tt>GData.etree()</tt> conversion of attributes. (They were ignored. They\nshould be added as-is.)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.3 (20 Sep 2015)</h3>\n<ul>\n<li>Simplify <tt>{'p': <span class=\"pre\">{'$':</span> <span class=\"pre\">'text'}}</span></tt> to <tt>{'p': 'text'}</tt> in BadgerFish and GData\nconventions.</li>\n<li>Add test cases for <tt>.etree()</tt> \u2013 mainly from the <a href=\"https://developer.mozilla.org/en-US/docs/JXON#In_summary\" rel=\"nofollow\">MDN JXON article</a>.</li>\n<li><tt>dict_type</tt>/<tt>list_type</tt> do not need to inherit from <tt>dict</tt>/<tt>list</tt></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.2 (18 Sep 2015)</h3>\n<ul>\n<li>Always use the <tt>dict_type</tt> class to create dictionaries (which defaults to\n<tt>OrderedDict</tt> to preserve order of keys)</li>\n<li>Update documentation, test cases</li>\n<li>Remove support for Python 2.6 (since we need <tt>collections.Counter</tt>)</li>\n<li>Make the <a href=\"https://travis-ci.org/sanand0/xmljson\" rel=\"nofollow\">Travis CI build</a> pass</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.1.1 (18 Sep 2015)</h3>\n<ul>\n<li>Convert <tt>true</tt>, <tt>false</tt> and numeric values from strings to Python types</li>\n<li><tt>xmljson.parker.data()</tt> is compliant with Parker convention (bugs resolved)</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.1.0 (15 Sep 2015)</h3>\n<ul>\n<li>Two-way conversions via BadgerFish, GData and Parker conventions.</li>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7097679, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9b60ec811f988217ca92e5b2eaf4fdae", "sha256": "77ee8f0284c5c130a882865f115903681511788d4927c3aa0d71827a058f91d1"}, "downloads": -1, "filename": "xmljson-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b60ec811f988217ca92e5b2eaf4fdae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6473, "upload_time": "2015-09-15T19:08:40", "upload_time_iso_8601": "2015-09-15T19:08:40.826649Z", "url": "https://files.pythonhosted.org/packages/2b/52/8c71fc22b4586613c8831ad079802ad731c86627cd374010f2f9c1e795d3/xmljson-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab16b65e01ef0c83072f1b252e688a52", "sha256": "35e4aa061154545f03b6c790959f617b7f579a360f9fec61876783c74708b45b"}, "downloads": -1, "filename": "xmljson-0.1.0.zip", "has_sig": false, "md5_digest": "ab16b65e01ef0c83072f1b252e688a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22374, "upload_time": "2015-09-15T19:08:45", "upload_time_iso_8601": "2015-09-15T19:08:45.742215Z", "url": "https://files.pythonhosted.org/packages/d8/1b/53ae61f550102900ced1e27d0f7a91de6626a305efbd5b7fe79a3fb2b0af/xmljson-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5734e7bfa9489daaa9cf9bd75aedac83", "sha256": "7a5c691887619b152687a72ecaca000ffcf783d3a5cc31183d956e4f221c41ab"}, "downloads": -1, "filename": "xmljson-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5734e7bfa9489daaa9cf9bd75aedac83", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6772, "upload_time": "2015-09-18T02:31:31", "upload_time_iso_8601": "2015-09-18T02:31:31.760462Z", "url": "https://files.pythonhosted.org/packages/0e/fd/33acdd3a88b7803a954a43260b682f75c979b5122f885483d9553105d821/xmljson-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c5a87b778446dfd8d2a24d06138b2b5", "sha256": "f57de77c11408c398ce1ee612ab7e87ad97751729530c0273f25dceff944cc8a"}, "downloads": -1, "filename": "xmljson-0.1.1.zip", "has_sig": false, "md5_digest": "7c5a87b778446dfd8d2a24d06138b2b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23183, "upload_time": "2015-09-18T02:31:37", "upload_time_iso_8601": "2015-09-18T02:31:37.593868Z", "url": "https://files.pythonhosted.org/packages/e1/49/2e24539c12712d5a26b68e37530d1cde35e5bd4052d3d1507dcc8660471d/xmljson-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "101f3fc5d834f328fb83362478a3f4b9", "sha256": "e7f9b3ba33ed454bcf115ac5a9ea87040e94eeda43224ef3b1745631467ed82b"}, "downloads": -1, "filename": "xmljson-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "101f3fc5d834f328fb83362478a3f4b9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7372, "upload_time": "2015-09-18T07:41:09", "upload_time_iso_8601": "2015-09-18T07:41:09.506039Z", "url": "https://files.pythonhosted.org/packages/b8/bc/ec01549982c3011778822863cfec1eb098d5ecf9c5eaebb1ff5e9c3245cf/xmljson-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d5ee41934d11db27b4117baaa8de374", "sha256": "ffbde2b134d43c365083ed1bf643b4c4664c0a87c9c481358a836bab0d1d9338"}, "downloads": -1, "filename": "xmljson-0.1.2.zip", "has_sig": false, "md5_digest": "0d5ee41934d11db27b4117baaa8de374", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24739, "upload_time": "2015-09-18T07:41:15", "upload_time_iso_8601": "2015-09-18T07:41:15.765948Z", "url": "https://files.pythonhosted.org/packages/b3/29/eecebc07d89acb8f1606e3d85f65e57094ac9e02a60d321b7348d8a1d1b0/xmljson-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "85a375b143e494a9201f3d9670ad88ff", "sha256": "f77dc47f8195bafb60eb88b434111d29c3c5db69b73f971a99f7d39920ee7625"}, "downloads": -1, "filename": "xmljson-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85a375b143e494a9201f3d9670ad88ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7779, "upload_time": "2015-09-20T05:56:28", "upload_time_iso_8601": "2015-09-20T05:56:28.987130Z", "url": "https://files.pythonhosted.org/packages/6c/36/10e98c8c634f54515db9daa9f403652c2c0237873a885e84e88964c5b713/xmljson-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12d1e09ab60e6908c66220c595720007", "sha256": "15bb53455d997d631ef6c9c379ab5e544f88e2e8232917748c4a5a8b871ad972"}, "downloads": -1, "filename": "xmljson-0.1.3.zip", "has_sig": false, "md5_digest": "12d1e09ab60e6908c66220c595720007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25679, "upload_time": "2015-09-20T05:56:34", "upload_time_iso_8601": "2015-09-20T05:56:34.741565Z", "url": "https://files.pythonhosted.org/packages/07/ce/c60fb529a9d0993170a3cdef14a7572164986fc05efc408434c93e1e2ac0/xmljson-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a417800ff8d4a05cc49e3ae4115821c3", "sha256": "1a4bf1a58856cd4c2fe1a06145425877271f323093d81e4c6a2cf5f8816d84d9"}, "downloads": -1, "filename": "xmljson-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a417800ff8d4a05cc49e3ae4115821c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8029, "upload_time": "2015-09-20T08:28:19", "upload_time_iso_8601": "2015-09-20T08:28:19.281863Z", "url": "https://files.pythonhosted.org/packages/ab/dd/67769acaee4e0e684d0653f2092a6f9347af1862dd012ceceb3ec161e22c/xmljson-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db9e019d35cf86d4f4c4e635c89c4fc", "sha256": "1795b72d6674f1f6a00495ef6b6d0a811b6b8f60eed6d89d54e745465e68e144"}, "downloads": -1, "filename": "xmljson-0.1.4.zip", "has_sig": false, "md5_digest": "7db9e019d35cf86d4f4c4e635c89c4fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26037, "upload_time": "2015-09-20T08:28:26", "upload_time_iso_8601": "2015-09-20T08:28:26.128720Z", "url": "https://files.pythonhosted.org/packages/8b/b8/4b0e06814936ea1193bba4f463bac19a8a8ed4b43611d88abe6446171c7d/xmljson-0.1.4.zip", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d38f8cd329a8e9d84802ec44285d6211", "sha256": "c022baaf30059b683d91b9036dd18afc33954d1a6f90a6a75ce2b28b7c458373"}, "downloads": -1, "filename": "xmljson-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d38f8cd329a8e9d84802ec44285d6211", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8335, "upload_time": "2015-09-23T16:56:54", "upload_time_iso_8601": "2015-09-23T16:56:54.826693Z", "url": "https://files.pythonhosted.org/packages/96/43/9e26cf91340333247584bcfe0e09fe8127b931689dd5b1abfab285208881/xmljson-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db3cb1912b62fbe6b15a7a47433af63d", "sha256": "2536792d8503f4eea810dbb406450fcf3cb597f328d67a36dcf15885adc1128f"}, "downloads": -1, "filename": "xmljson-0.1.5.zip", "has_sig": false, "md5_digest": "db3cb1912b62fbe6b15a7a47433af63d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26856, "upload_time": "2015-09-23T16:57:02", "upload_time_iso_8601": "2015-09-23T16:57:02.579211Z", "url": "https://files.pythonhosted.org/packages/a0/3e/f30366ac243e2536b9436062b9cc85c97488c4676c7fe4842d109bf5de96/xmljson-0.1.5.zip", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "4e2a88a1adb44784c18c8ec96d0b339d", "sha256": "a2e1de7f5882ade200487c45880ffa62bd4ee5e8eea326967890eb9172ecd1fc"}, "downloads": -1, "filename": "xmljson-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4e2a88a1adb44784c18c8ec96d0b339d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9348, "upload_time": "2016-02-18T03:11:13", "upload_time_iso_8601": "2016-02-18T03:11:13.980405Z", "url": "https://files.pythonhosted.org/packages/f1/1e/d9b16679a7ba257aeb233c7347eb3defd599d8bb708058c4bb44479d6668/xmljson-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d269cf3ef9f83a54210baf2ee4f5c39f", "sha256": "79f8205bd626f502708f6a3075d1a643c466a09c9a33040615d7b131cc8365ea"}, "downloads": -1, "filename": "xmljson-0.1.6.zip", "has_sig": false, "md5_digest": "d269cf3ef9f83a54210baf2ee4f5c39f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28613, "upload_time": "2016-02-18T03:11:21", "upload_time_iso_8601": "2016-02-18T03:11:21.828507Z", "url": "https://files.pythonhosted.org/packages/aa/76/42497cb185cb2aafe9303e0cb6990ed1c52cc14e71601fccb4f35e2049fd/xmljson-0.1.6.zip", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "981b8acb96669924c3d39cbbffb1c745", "sha256": "95e7b8e35d87686482c57adc35330bb0190cdb4a3b75c3f2020724b593b99e27"}, "downloads": -1, "filename": "xmljson-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "981b8acb96669924c3d39cbbffb1c745", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9952, "upload_time": "2016-09-13T03:06:44", "upload_time_iso_8601": "2016-09-13T03:06:44.963841Z", "url": "https://files.pythonhosted.org/packages/23/58/f0efd7f31523fc3c9ea601dd13997b4ba71874f4d474b43915ce4c94f456/xmljson-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94ea9858cc71bcb38053bfceea358d03", "sha256": "ca2bab88df415cc60b6b7e4d46aae9b3e1b5327422cf0ec3f2c25ebc0fa79780"}, "downloads": -1, "filename": "xmljson-0.1.7.zip", "has_sig": false, "md5_digest": "94ea9858cc71bcb38053bfceea358d03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28486, "upload_time": "2016-09-13T03:06:48", "upload_time_iso_8601": "2016-09-13T03:06:48.781919Z", "url": "https://files.pythonhosted.org/packages/47/3e/325e05cf70ae2f631bdf89a2ec70a6bdae6faf718493dff9a2eeb5615325/xmljson-0.1.7.zip", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "bd77916e09f76532e635a29abc7f265d", "sha256": "12db9b258a907e1d72a1900e4e95ef2f7f9e11d049dfc6d157efe732e68bce9d"}, "downloads": -1, "filename": "xmljson-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bd77916e09f76532e635a29abc7f265d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11584, "upload_time": "2017-05-09T13:34:23", "upload_time_iso_8601": "2017-05-09T13:34:23.255033Z", "url": "https://files.pythonhosted.org/packages/a4/a7/9b7fbd164376e4d4224b1b75fea7e82e8d154af183f15ab753018fc936e3/xmljson-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa95866c055ac77add5903e8f8f82edf", "sha256": "e6d1094b0d8e18de68012dac7242f005e8b1e733afa542802100bf81b60ba772"}, "downloads": -1, "filename": "xmljson-0.1.8.tar.gz", "has_sig": false, "md5_digest": "fa95866c055ac77add5903e8f8f82edf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23519, "upload_time": "2017-05-09T13:34:25", "upload_time_iso_8601": "2017-05-09T13:34:25.059173Z", "url": "https://files.pythonhosted.org/packages/36/92/2aacaf270b2c52a235403bd30f2f3649ffee0ec13a1bab657154839c8ac9/xmljson-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b1ad96e417998015b5087fdc164cf67f", "sha256": "5d7cfa700798319ae4144ed647c9ecc5ac8cadd61cce783b3dfa4acbf8f7cf14"}, "downloads": -1, "filename": "xmljson-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1ad96e417998015b5087fdc164cf67f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11660, "upload_time": "2017-08-01T08:55:12", "upload_time_iso_8601": "2017-08-01T08:55:12.279132Z", "url": "https://files.pythonhosted.org/packages/af/ef/11413b59c848a060f6f8a37ef0b95a3b005e5cb5f6fc10f43b4b8a1e21b6/xmljson-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801d8c018e83eb21f9929f9e780c745c", "sha256": "9ac7b985ca4fcf9a6f9c243c6274cdd72bbbde376439c884ee9f4124c19895e6"}, "downloads": -1, "filename": "xmljson-0.1.9.tar.gz", "has_sig": false, "md5_digest": "801d8c018e83eb21f9929f9e780c745c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24910, "upload_time": "2017-08-01T08:55:13", "upload_time_iso_8601": "2017-08-01T08:55:13.309036Z", "url": "https://files.pythonhosted.org/packages/5c/65/49eee4320a359a52d1b0669496e207d7ac4ab3082472d29eb1b5e03a2c51/xmljson-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f7c9cd697bbd8b2f4c6fcd0abe71d52d", "sha256": "5cfcd641e3057a4bef256adbd75b738fb9ca6bd49e859840c6f1001c8ac8fc57"}, "downloads": -1, "filename": "xmljson-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7c9cd697bbd8b2f4c6fcd0abe71d52d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14447, "upload_time": "2018-11-21T17:40:01", "upload_time_iso_8601": "2018-11-21T17:40:01.796478Z", "url": "https://files.pythonhosted.org/packages/e4/e6/f9cf79926273920d6091d706babc27989c3c1633de6ba6072157348ea3a8/xmljson-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d5f101a202c5b58e993eca450448495", "sha256": "9a0d3e658093c93af70bea4ddfaf15012e1a7d583c84f9c7ede0aadad0fe14e7"}, "downloads": -1, "filename": "xmljson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5d5f101a202c5b58e993eca450448495", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28136, "upload_time": "2018-11-21T17:40:03", "upload_time_iso_8601": "2018-11-21T17:40:03.805823Z", "url": "https://files.pythonhosted.org/packages/96/28/55c9f1e9ec5cb5a7c9551d35fc3ba23b4a1b753ab50b35e361da2a022fd2/xmljson-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "527685fc40c28fd696124737840389ca", "sha256": "8f1d7aba2c0c1bfa0203b577f21a1d95fde4485205ff638b854cb4d834e639b0"}, "downloads": -1, "filename": "xmljson-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "527685fc40c28fd696124737840389ca", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10145, "upload_time": "2020-04-25T04:10:30", "upload_time_iso_8601": "2020-04-25T04:10:30.731967Z", "url": "https://files.pythonhosted.org/packages/91/2d/7191efe15406b8b99e2b5905ca676a8a3dc2936416ade7ed17752902c250/xmljson-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc4df2390ad209928ee4311a3540cb17", "sha256": "b4158e66aa1e62ee39f7f80eb2fe4f767670ba3c0d5de9804420dc53427fdec8"}, "downloads": -1, "filename": "xmljson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fc4df2390ad209928ee4311a3540cb17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29195, "upload_time": "2020-04-25T04:10:32", "upload_time_iso_8601": "2020-04-25T04:10:32.623860Z", "url": "https://files.pythonhosted.org/packages/e8/6f/d9f109ba19be510fd3098bcb72143c67ca6743cedb48ac75aef05ddfe960/xmljson-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "527685fc40c28fd696124737840389ca", "sha256": "8f1d7aba2c0c1bfa0203b577f21a1d95fde4485205ff638b854cb4d834e639b0"}, "downloads": -1, "filename": "xmljson-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "527685fc40c28fd696124737840389ca", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10145, "upload_time": "2020-04-25T04:10:30", "upload_time_iso_8601": "2020-04-25T04:10:30.731967Z", "url": "https://files.pythonhosted.org/packages/91/2d/7191efe15406b8b99e2b5905ca676a8a3dc2936416ade7ed17752902c250/xmljson-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc4df2390ad209928ee4311a3540cb17", "sha256": "b4158e66aa1e62ee39f7f80eb2fe4f767670ba3c0d5de9804420dc53427fdec8"}, "downloads": -1, "filename": "xmljson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fc4df2390ad209928ee4311a3540cb17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29195, "upload_time": "2020-04-25T04:10:32", "upload_time_iso_8601": "2020-04-25T04:10:32.623860Z", "url": "https://files.pythonhosted.org/packages/e8/6f/d9f109ba19be510fd3098bcb72143c67ca6743cedb48ac75aef05ddfe960/xmljson-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:59 2020"}