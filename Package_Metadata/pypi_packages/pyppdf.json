{"info": {"author": "Peter Zagubisalo", "author_email": "peter.zagubisalo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# pyppdf: Pyppeteer PDF\n\n[![Build Status](https://travis-ci.org/kiwi0fruit/pyppdf.svg?branch=master)](https://travis-ci.org/kiwi0fruit/pyppdf)\n\nPrints html sites and files to pdf via pyppeteer (uses patched pyppeteer that by default downloads updated Chromium revision via https with certifi). I use it with  [Pandoctools/Knitty](https://github.com/kiwi0fruit/pandoctools).\n\nPyppeteer is a Python port of the Puppeteer. pyppdf command line interface is built with the help of [litereval](https://github.com/kiwi0fruit/litereval) and click.\n\nAt the moment recommended settings when reading from stdin are following:\n\n```bash\necho \"# Header\nText \\$f(x)=x^2\\$\" |\npandoc -f markdown -t html --mathjax --standalone --self-contained |\npyppdf-replace-mathjax |\npyppdf -o doc.pdf --goto temp\n```\n\n\n# Contents:\n\n* [Install](#install)\n* [CLI](#cli)\n  * [pyppdf](#pyppdf)\n  * [pyppdf-replace-mathjax](#pyppdf-replace-mathjax)\n* [Python API](#python-api)\n\n\n# Install\n\nNeeds python 3.6+\n\n### conda install:\n\n```bash\nconda install -c defaults -c conda-forge pyppdf\n```\n\n### pip install:\n\n```bash\npip install pyppdf\n```\n\n### Linux\n\nIf on Ubuntu additionally install atk bridge 2 and gtk 3:\n\n```bash\nsudo apt-get update\nsudo apt-get install -y libatk-bridge2.0-0 libgtk-3.0\n```\n\n\n# CLI\n\n### pyppdf\n\nCommand line interface:\n\n```\nUsage: pyppdf [OPTIONS] [PAGE]\n\n  Reads html document, converts it to pdf via pyppeteer and writes to disk\n  (or writes base64 encoded pdf to stdout).\n\n  PAGE is an URL or a common file path, pyppdf reads from stdin if PAGE is\n  not set.\n\n  -a, --args defaults:\n\n  {goto={waitUntil='networkidle0', timeout=100000}, pdf={width='8.27in',\n  printBackground=True, margin={top='1in', right='1in', bottom='1in',\n  left='1in'},}}\n\n  They affect the following pyppeteer methods (only the last name should be\n  used):  pyppeteer.launch, page.goto, page.emulateMedia,\n  page.waitForNavigation, page.waitFor, page.pdf. See:\n\n  https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pd\n  f\n\nOptions:\n  -a, --args TEXT  Python code str that would be evaluated to the dictionary\n                   that is a pyppeteer functions options. Has predefined\n                   defaults.\n  -u, --upd TEXT   Same as --args dict but --upd dict is recursively merged\n                   into --args.\n  -o, --out TEXT   Output file path. If not set then pyppdf writes base64\n                   encoded pdf to stdout.\n  -d, --dir TEXT   Directory for '--goto temp' mode. Has priority over dir of\n                   the --out\n\n  -g, --goto [url|setContent|temp|data-text-html]\n                   Choose page.goto behaviour. By default pyppdf tries 'url'\n                   mode then 'setContent' mode. 'url' works only if url (PAGE)\n                   arg was provided or {goto={url=<...>}} was set in the merged\n                   args. 'setContent' (works without page.goto), 'temp' (temp\n                   file) and 'data-text-html' work only with stdin input.\n                   'setContent' and 'data-text-html' presumably do not support\n                   some remote content. I have bugs with the last one\n                   when: page.goto(f'data:text/html,{html}')\n  --help           Show this message and exit.\n\n```\n\nSee [Pyppeteer methods](https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pdf).\n\n\n### pyppdf-replace-mathjax\n\n`pyppdf-replace-mathjax`: Replaces MathJax script section with URL only script. First arg is optional custom MathJax URL. Reads from stdin and writes to stdout.\n\n```py\ndef replace_mathjax(\n        html: str,\n        mathjax_url: str=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML\"\n):\n    return re.sub(\n        r\"<script[^<]+?[Mm]ath[Jj]ax.+?</script>\",\n        f\"<script src=\\\"{mathjax_url}\\\" async></script>\",\n        html, flags=re.DOTALL)\n```\n\n\n# Python API\n\n```\ndef save_pdf(output_file: str=None, url: str=None, html: str=None,\n             args_dict: Union[str, dict]=None,\n             args_upd: Union[str, dict]=None,\n             goto: str=None, dir_: str=None) -> bytes:\n    \"\"\"\n    Converts html document to pdf via pyppeteer\n    and writes to disk if asked. Also returns bytes of pdf.\n\n    ``args_dict`` affect the following methods that are used during\n    conversion (only the last name should be used):\n    ``pyppeteer.launch``, ``page.goto``, ``page.emulateMedia``,\n    ``page.waitForNavigation``, ``page.waitFor``, ``page.pdf``. See:\n     https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pdf\n\n    ``args_dict`` default value:\n\n    >>> # {goto={waitUntil='networkidle0', timeout=100000},\n    >>> #  pdf={width='8.27in', printBackground=True,\n    >>> #       margin={top='1in', right='1in',\n    >>> #               bottom='1in', left='1in'},}}\n    >>> #\n\n    ``args_upd`` examples that won't overwrite other options:\n\n    * ``\"{launch={args=['--no-sandbox', '--disable-setuid-sandbox']}}``\n    *  ``\"{emulateMedia=\"screen\", waitFor=1000}\"``\n\n    Formats for **values** of the ``args_dict``:\n    ``*args`` and ``**kwargs`` for functions:\n\n    * ``{(): (arg1, arg2), kwarg1=val1, kwarg2=val2}``\n      Special key for positional args,\n    * ``[arg1, arg2]`` or ``(arg1, arg2)`` Positional only,\n    * If value in the **root**  ``args_dict`` is None\n      (like ``{foo=None}``) it later means that ``'foo'`` key is not used\n      (same as if it was absent in the **root** dict).\n\n    Parameters\n    ----------\n    output_file :\n        Path to write pdf to.\n    url :\n        Page URL address or html document file path\n        (url has priority over html).\n    html :\n        html document file source\n        (url has priority over html).\n    args_dict :\n        Options that govern conversion.\n        dict with pyppeteer kwargs or Python code str that would\n        be \"litereval\" evaluated to the dictionary.\n        If None then default values are used.\n        Supports extended dict syntax: {foo=100, bar='yes'}.\n    args_upd :\n        dict with *additional* pyppeteer kwargs or Python code str\n        that would be \"litereval\" evaluated to the dictionary.\n        This dict would be recursively merged into args_dict.\n    goto :\n        Same as in 'main' function.\n    dir_ :\n        Directory for goto temp mode.\n    \"\"\"\n```\n\n```py\nasync def main(args: dict, url: str=None, html: str=None, output_file: str=None,\n               goto: str=None, dir_: str=None) -> bytes:\n    \"\"\"\n    Returns bytes of pdf.\n\n    Parameters\n    ----------\n    args :\n        Pyppeteer options that govern conversion.\n        dict with keys dedicated for pyppeteer functions used.\n        See save_pdf for more details.\n    url :\n        Site address or html document file path (url - that by the\n        way can also be set in args - has priority over html).\n    html :\n        html document file source\n    output_file :\n        Path to save pdf\n    goto :\n        One of:\n        >>> # ('url', 'setContent', 'temp', 'data-text-html')\n        >>> #\n        >>> # Choose page.goto behaviour. By default pyppdf tries 'url' mode\n        >>> # then 'setContent' mode. 'url' works only if url (PAGE) arg was\n        >>> # provided or {goto={url=<...>}} was set in the merged args.\n        >>> # 'setContent' (works without page.goto), 'temp' (temp file) and\n        >>> # 'data-text-html' work only with stdin input. 'setContent' and\n        >>> # 'data-text-html' presumably do not support some remote\n        >>> # content. I have bugs with the last one when:\n        >>> # page.goto(f'data:text/html,{html}')\n        >>> #\n    dir_ :\n        Directory for goto temp mode.\n    \"\"\"\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kiwi0fruit/pyppdf", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyppdf", "package_url": "https://pypi.org/project/pyppdf/", "platform": "", "project_url": "https://pypi.org/project/pyppdf/", "project_urls": {"Homepage": "https://github.com/kiwi0fruit/pyppdf"}, "release_url": "https://pypi.org/project/pyppdf/0.0.12/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Pyppeteer PDF. Print html sites and files to pdf via pyppeteer (uses patched pyppeteer that by default downloads updated Chromium revision via https with certifi).", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyppdf: Pyppeteer PDF</h1>\n<p><a href=\"https://travis-ci.org/kiwi0fruit/pyppdf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60ab52304d468eb85fa04ab9db5ad38cd005d5f1/68747470733a2f2f7472617669732d63692e6f72672f6b6977693066727569742f7079707064662e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Prints html sites and files to pdf via pyppeteer (uses patched pyppeteer that by default downloads updated Chromium revision via https with certifi). I use it with  <a href=\"https://github.com/kiwi0fruit/pandoctools\" rel=\"nofollow\">Pandoctools/Knitty</a>.</p>\n<p>Pyppeteer is a Python port of the Puppeteer. pyppdf command line interface is built with the help of <a href=\"https://github.com/kiwi0fruit/litereval\" rel=\"nofollow\">litereval</a> and click.</p>\n<p>At the moment recommended settings when reading from stdin are following:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"# Header</span>\n<span class=\"s2\">Text \\$f(x)=x^2\\$\"</span> <span class=\"p\">|</span>\npandoc -f markdown -t html --mathjax --standalone --self-contained <span class=\"p\">|</span>\npyppdf-replace-mathjax <span class=\"p\">|</span>\npyppdf -o doc.pdf --goto temp\n</pre>\n<h1>Contents:</h1>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#cli\" rel=\"nofollow\">CLI</a>\n<ul>\n<li><a href=\"#pyppdf\" rel=\"nofollow\">pyppdf</a></li>\n<li><a href=\"#pyppdf-replace-mathjax\" rel=\"nofollow\">pyppdf-replace-mathjax</a></li>\n</ul>\n</li>\n<li><a href=\"#python-api\" rel=\"nofollow\">Python API</a></li>\n</ul>\n<h1>Install</h1>\n<p>Needs python 3.6+</p>\n<h3>conda install:</h3>\n<pre>conda install -c defaults -c conda-forge pyppdf\n</pre>\n<h3>pip install:</h3>\n<pre>pip install pyppdf\n</pre>\n<h3>Linux</h3>\n<p>If on Ubuntu additionally install atk bridge 2 and gtk 3:</p>\n<pre>sudo apt-get update\nsudo apt-get install -y libatk-bridge2.0-0 libgtk-3.0\n</pre>\n<h1>CLI</h1>\n<h3>pyppdf</h3>\n<p>Command line interface:</p>\n<pre><code>Usage: pyppdf [OPTIONS] [PAGE]\n\n  Reads html document, converts it to pdf via pyppeteer and writes to disk\n  (or writes base64 encoded pdf to stdout).\n\n  PAGE is an URL or a common file path, pyppdf reads from stdin if PAGE is\n  not set.\n\n  -a, --args defaults:\n\n  {goto={waitUntil='networkidle0', timeout=100000}, pdf={width='8.27in',\n  printBackground=True, margin={top='1in', right='1in', bottom='1in',\n  left='1in'},}}\n\n  They affect the following pyppeteer methods (only the last name should be\n  used):  pyppeteer.launch, page.goto, page.emulateMedia,\n  page.waitForNavigation, page.waitFor, page.pdf. See:\n\n  https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pd\n  f\n\nOptions:\n  -a, --args TEXT  Python code str that would be evaluated to the dictionary\n                   that is a pyppeteer functions options. Has predefined\n                   defaults.\n  -u, --upd TEXT   Same as --args dict but --upd dict is recursively merged\n                   into --args.\n  -o, --out TEXT   Output file path. If not set then pyppdf writes base64\n                   encoded pdf to stdout.\n  -d, --dir TEXT   Directory for '--goto temp' mode. Has priority over dir of\n                   the --out\n\n  -g, --goto [url|setContent|temp|data-text-html]\n                   Choose page.goto behaviour. By default pyppdf tries 'url'\n                   mode then 'setContent' mode. 'url' works only if url (PAGE)\n                   arg was provided or {goto={url=&lt;...&gt;}} was set in the merged\n                   args. 'setContent' (works without page.goto), 'temp' (temp\n                   file) and 'data-text-html' work only with stdin input.\n                   'setContent' and 'data-text-html' presumably do not support\n                   some remote content. I have bugs with the last one\n                   when: page.goto(f'data:text/html,{html}')\n  --help           Show this message and exit.\n\n</code></pre>\n<p>See <a href=\"https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pdf\" rel=\"nofollow\">Pyppeteer methods</a>.</p>\n<h3>pyppdf-replace-mathjax</h3>\n<p><code>pyppdf-replace-mathjax</code>: Replaces MathJax script section with URL only script. First arg is optional custom MathJax URL. Reads from stdin and writes to stdout.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">replace_mathjax</span><span class=\"p\">(</span>\n        <span class=\"n\">html</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">mathjax_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s2\">\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML\"</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s2\">\"&lt;script[^&lt;]+?[Mm]ath[Jj]ax.+?&lt;/script&gt;\"</span><span class=\"p\">,</span>\n        <span class=\"sa\">f</span><span class=\"s2\">\"&lt;script src=</span><span class=\"se\">\\\"</span><span class=\"si\">{</span><span class=\"n\">mathjax_url</span><span class=\"si\">}</span><span class=\"se\">\\\"</span><span class=\"s2\"> async&gt;&lt;/script&gt;\"</span><span class=\"p\">,</span>\n        <span class=\"n\">html</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">DOTALL</span><span class=\"p\">)</span>\n</pre>\n<h1>Python API</h1>\n<pre><code>def save_pdf(output_file: str=None, url: str=None, html: str=None,\n             args_dict: Union[str, dict]=None,\n             args_upd: Union[str, dict]=None,\n             goto: str=None, dir_: str=None) -&gt; bytes:\n    \"\"\"\n    Converts html document to pdf via pyppeteer\n    and writes to disk if asked. Also returns bytes of pdf.\n\n    ``args_dict`` affect the following methods that are used during\n    conversion (only the last name should be used):\n    ``pyppeteer.launch``, ``page.goto``, ``page.emulateMedia``,\n    ``page.waitForNavigation``, ``page.waitFor``, ``page.pdf``. See:\n     https://miyakogi.github.io/pyppeteer/reference.html#pyppeteer.page.Page.pdf\n\n    ``args_dict`` default value:\n\n    &gt;&gt;&gt; # {goto={waitUntil='networkidle0', timeout=100000},\n    &gt;&gt;&gt; #  pdf={width='8.27in', printBackground=True,\n    &gt;&gt;&gt; #       margin={top='1in', right='1in',\n    &gt;&gt;&gt; #               bottom='1in', left='1in'},}}\n    &gt;&gt;&gt; #\n\n    ``args_upd`` examples that won't overwrite other options:\n\n    * ``\"{launch={args=['--no-sandbox', '--disable-setuid-sandbox']}}``\n    *  ``\"{emulateMedia=\"screen\", waitFor=1000}\"``\n\n    Formats for **values** of the ``args_dict``:\n    ``*args`` and ``**kwargs`` for functions:\n\n    * ``{(): (arg1, arg2), kwarg1=val1, kwarg2=val2}``\n      Special key for positional args,\n    * ``[arg1, arg2]`` or ``(arg1, arg2)`` Positional only,\n    * If value in the **root**  ``args_dict`` is None\n      (like ``{foo=None}``) it later means that ``'foo'`` key is not used\n      (same as if it was absent in the **root** dict).\n\n    Parameters\n    ----------\n    output_file :\n        Path to write pdf to.\n    url :\n        Page URL address or html document file path\n        (url has priority over html).\n    html :\n        html document file source\n        (url has priority over html).\n    args_dict :\n        Options that govern conversion.\n        dict with pyppeteer kwargs or Python code str that would\n        be \"litereval\" evaluated to the dictionary.\n        If None then default values are used.\n        Supports extended dict syntax: {foo=100, bar='yes'}.\n    args_upd :\n        dict with *additional* pyppeteer kwargs or Python code str\n        that would be \"litereval\" evaluated to the dictionary.\n        This dict would be recursively merged into args_dict.\n    goto :\n        Same as in 'main' function.\n    dir_ :\n        Directory for goto temp mode.\n    \"\"\"\n</code></pre>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">goto</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dir_</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bytes</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Returns bytes of pdf.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    args :</span>\n<span class=\"sd\">        Pyppeteer options that govern conversion.</span>\n<span class=\"sd\">        dict with keys dedicated for pyppeteer functions used.</span>\n<span class=\"sd\">        See save_pdf for more details.</span>\n<span class=\"sd\">    url :</span>\n<span class=\"sd\">        Site address or html document file path (url - that by the</span>\n<span class=\"sd\">        way can also be set in args - has priority over html).</span>\n<span class=\"sd\">    html :</span>\n<span class=\"sd\">        html document file source</span>\n<span class=\"sd\">    output_file :</span>\n<span class=\"sd\">        Path to save pdf</span>\n<span class=\"sd\">    goto :</span>\n<span class=\"sd\">        One of:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # ('url', 'setContent', 'temp', 'data-text-html')</span>\n<span class=\"sd\">        &gt;&gt;&gt; #</span>\n<span class=\"sd\">        &gt;&gt;&gt; # Choose page.goto behaviour. By default pyppdf tries 'url' mode</span>\n<span class=\"sd\">        &gt;&gt;&gt; # then 'setContent' mode. 'url' works only if url (PAGE) arg was</span>\n<span class=\"sd\">        &gt;&gt;&gt; # provided or {goto={url=&lt;...&gt;}} was set in the merged args.</span>\n<span class=\"sd\">        &gt;&gt;&gt; # 'setContent' (works without page.goto), 'temp' (temp file) and</span>\n<span class=\"sd\">        &gt;&gt;&gt; # 'data-text-html' work only with stdin input. 'setContent' and</span>\n<span class=\"sd\">        &gt;&gt;&gt; # 'data-text-html' presumably do not support some remote</span>\n<span class=\"sd\">        &gt;&gt;&gt; # content. I have bugs with the last one when:</span>\n<span class=\"sd\">        &gt;&gt;&gt; # page.goto(f'data:text/html,{html}')</span>\n<span class=\"sd\">        &gt;&gt;&gt; #</span>\n<span class=\"sd\">    dir_ :</span>\n<span class=\"sd\">        Directory for goto temp mode.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6292843, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "0687066b7d0d923981df9bd8b9c9f43a", "sha256": "64f8b3c760e7ddcfa1170003151397f1abf7b8d3802762215fc7230268fbf4a5"}, "downloads": -1, "filename": "pyppdf-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0687066b7d0d923981df9bd8b9c9f43a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25729, "upload_time": "2019-01-21T18:43:33", "upload_time_iso_8601": "2019-01-21T18:43:33.834014Z", "url": "https://files.pythonhosted.org/packages/4d/76/210eef154627e199fd5a7dbc89893bd8db84c03faf8ba8882c4c499453a3/pyppdf-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "85c2ed41f8fcb9420967cd1575ffe4e7", "sha256": "62dcef37e982fa29b2529dce29fd59af984ea82e6994960a7195ec9bb4ac9eaf"}, "downloads": -1, "filename": "pyppdf-0.0.11.tar.gz", "has_sig": false, "md5_digest": "85c2ed41f8fcb9420967cd1575ffe4e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25587, "upload_time": "2019-12-07T18:35:36", "upload_time_iso_8601": "2019-12-07T18:35:36.585953Z", "url": "https://files.pythonhosted.org/packages/43/de/6f766f279abc064f3324ef1b1ea86efa34b18d7652f37da21026fedec808/pyppdf-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "1e3dd15ca460591ea37d5a1a7e388346", "sha256": "a065b44b8a3a63d659b028aa8b2bbb41e54504006d8e32194a4ecdfae29ac763"}, "downloads": -1, "filename": "pyppdf-0.0.12.tar.gz", "has_sig": false, "md5_digest": "1e3dd15ca460591ea37d5a1a7e388346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25574, "upload_time": "2019-12-13T13:48:36", "upload_time_iso_8601": "2019-12-13T13:48:36.430228Z", "url": "https://files.pythonhosted.org/packages/30/93/d0b1cbdb17b95d8e3f65554d34fabbfc641172dc3ec2966574ff8068506b/pyppdf-0.0.12.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "ff9ec9893883bbbdd16f2140c20c1d65", "sha256": "f9a29beecb3390bfcfb1aa6508c8268f241bf2c5ae9d0ab1758e3cb9404fc4f8"}, "downloads": -1, "filename": "pyppdf-0.0.8.tar.gz", "has_sig": false, "md5_digest": "ff9ec9893883bbbdd16f2140c20c1d65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25552, "upload_time": "2019-01-19T08:34:52", "upload_time_iso_8601": "2019-01-19T08:34:52.374841Z", "url": "https://files.pythonhosted.org/packages/3f/84/f31b0d1f1a81a26c08219c26f00b5b0d34df06782d75a7723d642a21b9c3/pyppdf-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "24c01cace3b91a73f8de04eca16333c9", "sha256": "92d0ac2ff549a7b88d557797015e892e5f6603c5691b2d24e4dcfe1638ef93d7"}, "downloads": -1, "filename": "pyppdf-0.0.9.tar.gz", "has_sig": false, "md5_digest": "24c01cace3b91a73f8de04eca16333c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25715, "upload_time": "2019-01-21T18:12:20", "upload_time_iso_8601": "2019-01-21T18:12:20.140525Z", "url": "https://files.pythonhosted.org/packages/9e/c0/5fbb83222305a402e76657ffee91569827f7bd449a67af0d85b58a7910cb/pyppdf-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e3dd15ca460591ea37d5a1a7e388346", "sha256": "a065b44b8a3a63d659b028aa8b2bbb41e54504006d8e32194a4ecdfae29ac763"}, "downloads": -1, "filename": "pyppdf-0.0.12.tar.gz", "has_sig": false, "md5_digest": "1e3dd15ca460591ea37d5a1a7e388346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25574, "upload_time": "2019-12-13T13:48:36", "upload_time_iso_8601": "2019-12-13T13:48:36.430228Z", "url": "https://files.pythonhosted.org/packages/30/93/d0b1cbdb17b95d8e3f65554d34fabbfc641172dc3ec2966574ff8068506b/pyppdf-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:13 2020"}