{"info": {"author": "Rico Huijbers", "author_email": "rix0rrr@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Version Control"], "description": "# Patchouli: an interactive patch file splitter\n\nHave you ever committed a big batch of changes that need to be code reviewed?\n\nDid it happen that the code got finetuned and bugfixed over time, but you want\nto split up the final change set in a way that makes it easier on the reviewers?\n\nDoes it so happen that the preferred review units don't line up with your commit\nunits? Maybe not even with complete files?\n\nIf you've ever wanted to split a patch set into parts at the hunk level, and do\nso iteratively and interactively, patchouli is for you!\n\n## Installing\n\nPatchouli is available via pip:\n\n    pip install patchouli\n\n## Usage\n\n(I'll use an arbitrary Linux kernel patch file to demonstrate)\n\nRun `patchouli` on your patch file(s):\n\n    $ patchouli example.patch\n\nPatchouli will show you the first hunk and a prompt to start typing commands.\n\n    (Type 'create foo' then 'move foo' to start classifying hunks)\n    **************** linux/arch/i386/kernel/process.c.seg ****************\n        * Save away %fs and %gs. No need to save %es and %ds, as\n        * those are always kernel segments while inside the kernel.\n        */\n    -\tasm volatile(\"movl %%fs,%0\":\"=m\" (*(int *)&prev->fs));\n    -\tasm volatile(\"movl %%gs,%0\":\"=m\" (*(int *)&prev->gs));\n    +\tasm volatile(\"mov %%fs,%0\":\"=m\" (prev->fs));\n    +\tasm volatile(\"mov %%gs,%0\":\"=m\" (prev->gs));\n\n        /*\n         * Restore %fs and %gs if needed.\n    unclassified (1/8)>\n\nPatchouli calls a bunch of hunks a \"change set\". At the start, all of your hunks\nwill be in the change set named \"unclassified\". To see all hunks, type `ls`:\n\n    > ls\n\nYou'll see the following:\n\n    ->   1) linux/arch/i386/kernel/process.c.seg\n         2) linux/arch/i386/kernel/vm86.c.seg\n         3) linux/arch/x86_64/kernel/process.c.seg\n         4) linux/arch/x86_64/kernel/process.c.seg\n         5) linux/arch/x86_64/kernel/process.c.seg\n         6) linux/arch/x86_64/kernel/process.c.seg\n         7) linux/include/asm-i386/system.h.seg\n         8) linux/include/asm-i386/system.h.seg\n    (Type 'hunk N' to go to a specific hunk, 'show' to show the current hunk)\n\nCreate a new change set to move changes into:\n\n    > create i386\n\nStart moving the first two hunks into this new change set:\n\n    > move i386   (or simply 'm i386')\n    > m           (without a name repeats the last move)\n    > <enter>     (simply pressing enter repeats the last command)\n\nType `set` to see an overview of all change sets:\n\n    > set\n\n       i386 (2 hunks)\n    -> unclassified (6 hunks)\n\nType `write` to write out the changes to individual `.patch` files:\n\n    > write\n\n    Wrote i386.patch\n    Wrote unclassified.patch\n\n## Helpful tips\n\n* Type `help` for a list of all commands.\n* `undo` undoes the last move.\n* You can move through the hunk list by typing `next` and `back`.\n* `next`, `back` and `move` can be shortened to `n`, `b` and `m`.\n* The shell has tab completion, courtsey of Python's `cmd` library.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rix0rrr/patchouli", "keywords": "patch", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "patchouli", "package_url": "https://pypi.org/project/patchouli/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/patchouli/", "project_urls": {"Homepage": "https://github.com/rix0rrr/patchouli"}, "release_url": "https://pypi.org/project/patchouli/0.1.2/", "requires_dist": ["unidiff (>=0.5.1)", "termcolor (>=1.1.0)"], "requires_python": null, "summary": "Interactive patch file splitting tool", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Patchouli: an interactive patch file splitter<br><br>Have you ever committed a big batch of changes that need to be code reviewed?<br><br>Did it happen that the code got finetuned and bugfixed over time, but you want<br>to split up the final change set in a way that makes it easier on the reviewers?<br><br>Does it so happen that the preferred review units don't line up with your commit<br>units? Maybe not even with complete files?<br><br>If you've ever wanted to split a patch set into parts at the hunk level, and do<br>so iteratively and interactively, patchouli is for you!<br><br>## Installing<br><br>Patchouli is available via pip:<br><br>    pip install patchouli<br><br>## Usage<br><br>(I'll use an arbitrary Linux kernel patch file to demonstrate)<br><br>Run `patchouli` on your patch file(s):<br><br>    $ patchouli example.patch<br><br>Patchouli will show you the first hunk and a prompt to start typing commands.<br><br>    (Type 'create foo' then 'move foo' to start classifying hunks)<br>    **************** linux/arch/i386/kernel/process.c.seg ****************<br>        * Save away %fs and %gs. No need to save %es and %ds, as<br>        * those are always kernel segments while inside the kernel.<br>        */<br>    -\tasm volatile(\"movl %%fs,%0\":\"=m\" (*(int *)&amp;prev-&gt;fs));<br>    -\tasm volatile(\"movl %%gs,%0\":\"=m\" (*(int *)&amp;prev-&gt;gs));<br>    +\tasm volatile(\"mov %%fs,%0\":\"=m\" (prev-&gt;fs));<br>    +\tasm volatile(\"mov %%gs,%0\":\"=m\" (prev-&gt;gs));<br><br>        /*<br>         * Restore %fs and %gs if needed.<br>    unclassified (1/8)&gt;<br><br>Patchouli calls a bunch of hunks a \"change set\". At the start, all of your hunks<br>will be in the change set named \"unclassified\". To see all hunks, type `ls`:<br><br>    &gt; ls<br><br>You'll see the following:<br><br>    -&gt;   1) linux/arch/i386/kernel/process.c.seg<br>         2) linux/arch/i386/kernel/vm86.c.seg<br>         3) linux/arch/x86_64/kernel/process.c.seg<br>         4) linux/arch/x86_64/kernel/process.c.seg<br>         5) linux/arch/x86_64/kernel/process.c.seg<br>         6) linux/arch/x86_64/kernel/process.c.seg<br>         7) linux/include/asm-i386/system.h.seg<br>         8) linux/include/asm-i386/system.h.seg<br>    (Type 'hunk N' to go to a specific hunk, 'show' to show the current hunk)<br><br>Create a new change set to move changes into:<br><br>    &gt; create i386<br><br>Start moving the first two hunks into this new change set:<br><br>    &gt; move i386   (or simply 'm i386')<br>    &gt; m           (without a name repeats the last move)<br>    &gt; &lt;enter&gt;     (simply pressing enter repeats the last command)<br><br>Type `set` to see an overview of all change sets:<br><br>    &gt; set<br><br>       i386 (2 hunks)<br>    -&gt; unclassified (6 hunks)<br><br>Type `write` to write out the changes to individual `.patch` files:<br><br>    &gt; write<br><br>    Wrote i386.patch<br>    Wrote unclassified.patch<br><br>## Helpful tips<br><br>* Type `help` for a list of all commands.<br>* `undo` undoes the last move.<br>* You can move through the hunk list by typing `next` and `back`.<br>* `next`, `back` and `move` can be shortened to `n`, `b` and `m`.<br>* The shell has tab completion, courtsey of Python's `cmd` library.\n          </div>"}, "last_serial": 1731350, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "54ef468dd1f5a93481469ccadb6432ad", "sha256": "b983d598b5e4746b9e3d17a77d352f1b866ba8c05248fa5d0e528d35e3105096"}, "downloads": -1, "filename": "patchouli-0.1.0-cp27-none-macosx_10_9_intel.whl", "has_sig": false, "md5_digest": "54ef468dd1f5a93481469ccadb6432ad", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 4902, "upload_time": "2015-09-20T17:51:13", "upload_time_iso_8601": "2015-09-20T17:51:13.026908Z", "url": "https://files.pythonhosted.org/packages/75/9e/a225b6acd7e02e39ac5c7474de502173d4b8ff1b2f3d7dc89ef90dbd7e49/patchouli-0.1.0-cp27-none-macosx_10_9_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12f05965a77f13d654623521d9de86e5", "sha256": "e824c5887c74481af6bd02eed75ad3c0799a080d989b7c9ea9532c685d4e5f42"}, "downloads": -1, "filename": "patchouli-0.1.0.tar.gz", "has_sig": false, "md5_digest": "12f05965a77f13d654623521d9de86e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3115, "upload_time": "2015-09-20T17:51:19", "upload_time_iso_8601": "2015-09-20T17:51:19.537144Z", "url": "https://files.pythonhosted.org/packages/dc/0f/dd4e906876d51ba56d0f878d42bdbba81ba5545c843efce99a78568c2c76/patchouli-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e4712ff2809c581091545e17f61c6b76", "sha256": "d43bf5517f42e9c0f07b3beb59ec708c9a4554d62a3dba2a43b3cdbcbc0dd822"}, "downloads": -1, "filename": "patchouli-0.1.1-cp27-none-macosx_10_9_intel.whl", "has_sig": false, "md5_digest": "e4712ff2809c581091545e17f61c6b76", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 4932, "upload_time": "2015-09-20T18:03:18", "upload_time_iso_8601": "2015-09-20T18:03:18.882875Z", "url": "https://files.pythonhosted.org/packages/97/11/b213dc1f8e66310644076b75c0f321d826a465646f35ec55e1b728b5518a/patchouli-0.1.1-cp27-none-macosx_10_9_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6739da2c31dfe8441d743fcf6060a10", "sha256": "509db5f4db753a0517ddc48906eaf555f0d49393dca5e7da747e078c6d0bd711"}, "downloads": -1, "filename": "patchouli-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b6739da2c31dfe8441d743fcf6060a10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3137, "upload_time": "2015-09-20T18:03:24", "upload_time_iso_8601": "2015-09-20T18:03:24.821450Z", "url": "https://files.pythonhosted.org/packages/0f/df/ca018190683bbfa7e6023940ce81b2371ee7cfc8b5e37ad9454473832f18/patchouli-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c33d5e82ca09e857db790082eab59519", "sha256": "9810351c2fb2ad6ca4388615ccb6636c14041544ed084a2b939ea90250875e18"}, "downloads": -1, "filename": "patchouli-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c33d5e82ca09e857db790082eab59519", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8142, "upload_time": "2015-09-21T07:44:43", "upload_time_iso_8601": "2015-09-21T07:44:43.697068Z", "url": "https://files.pythonhosted.org/packages/82/25/8b8f47c84a03ef62d28c94f72e4a24b12d9904f1d04747117f6ab1a50f8a/patchouli-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12920a94cddff62d0109a5956c631203", "sha256": "8a3143b63284aa0a7bc44271c0ac00559af12cd78b27f5aeb999c7d67c606773"}, "downloads": -1, "filename": "patchouli-0.1.2.tar.gz", "has_sig": false, "md5_digest": "12920a94cddff62d0109a5956c631203", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6144, "upload_time": "2015-09-21T07:44:48", "upload_time_iso_8601": "2015-09-21T07:44:48.520298Z", "url": "https://files.pythonhosted.org/packages/8a/3d/4b40b708768a4970435df2b5dc17e08daa24d1dbb5f4641cc6a57dab7884/patchouli-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c33d5e82ca09e857db790082eab59519", "sha256": "9810351c2fb2ad6ca4388615ccb6636c14041544ed084a2b939ea90250875e18"}, "downloads": -1, "filename": "patchouli-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c33d5e82ca09e857db790082eab59519", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8142, "upload_time": "2015-09-21T07:44:43", "upload_time_iso_8601": "2015-09-21T07:44:43.697068Z", "url": "https://files.pythonhosted.org/packages/82/25/8b8f47c84a03ef62d28c94f72e4a24b12d9904f1d04747117f6ab1a50f8a/patchouli-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12920a94cddff62d0109a5956c631203", "sha256": "8a3143b63284aa0a7bc44271c0ac00559af12cd78b27f5aeb999c7d67c606773"}, "downloads": -1, "filename": "patchouli-0.1.2.tar.gz", "has_sig": false, "md5_digest": "12920a94cddff62d0109a5956c631203", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6144, "upload_time": "2015-09-21T07:44:48", "upload_time_iso_8601": "2015-09-21T07:44:48.520298Z", "url": "https://files.pythonhosted.org/packages/8a/3d/4b40b708768a4970435df2b5dc17e08daa24d1dbb5f4641cc6a57dab7884/patchouli-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:57 2020"}