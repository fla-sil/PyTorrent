{"info": {"author": "Dmitry Tantsur", "author_email": "dtantsur@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: OpenStack", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX"], "description": "Hardware introspection for OpenStack Ironic\n===========================================\n\n.. note::\n    **ironic-discoverd** project was renamed to **ironic-inspector** and its\n    new home is at https://pypi.python.org/pypi/ironic-inspector. Some links\n    are already pointing at the new location in this document.\n\n    **ironic-discoverd** 1.1 branch will only receive critical bug fixes,\n    other branches are not supported at all. Please switch to\n    **ironic-inspector** as soon as time allows.\n\nThis is an auxiliary service for discovering hardware properties for a\nnode managed by `OpenStack Ironic`_. Hardware introspection or hardware\nproperties discovery is a process of getting hardware parameters required for\nscheduling from a bare metal node, given it's power management credentials\n(e.g. IPMI address, user name and password).\n\nA special *discovery ramdisk* is required to collect the information on a\nnode. The default one can be built using diskimage-builder_ and\n`ironic-discoverd-ramdisk element`_ (see Configuration_ below).\n\nSupport for **ironic-discoverd** is present in `Tuskar UI`_ --\nOpenStack Horizon plugin for TripleO_.\n\n**ironic-discoverd** requires OpenStack Juno (2014.2) release or newer.\n\nPlease use launchpad_ to report bugs and ask questions. Use PyPI_ for\ndownloads and accessing the released version of this README.\n\nPlease contribute to the renamed **ironic-inspector** project - see\nCONTRIBUTING.rst_ for details.\n\n.. _OpenStack Ironic: https://wiki.openstack.org/wiki/Ironic\n.. _Tuskar UI: https://pypi.python.org/pypi/tuskar-ui\n.. _TripleO: https://wiki.openstack.org/wiki/TripleO\n.. _launchpad: https://bugs.launchpad.net/ironic-inspector\n.. _PyPI: https://pypi.python.org/pypi/ironic-discoverd\n.. _CONTRIBUTING.rst: https://github.com/openstack/ironic-inspector/blob/master/CONTRIBUTING.rst\n\nWorkflow\n--------\n\nUsual hardware introspection flow is as follows:\n\n* Operator installs undercloud with **ironic-discoverd**\n  (e.g. using instack-undercloud_).\n\n* Operator enrolls nodes into Ironic either manually or by uploading CSV file\n  to `Tuskar UI`_. Power management credentials should be provided to Ironic\n  at this step.\n\n* Nodes are put in the correct state for introspection as described in\n  `Node States`_.\n\n* Operator sends nodes on introspection either manually using\n  **ironic-discoverd** API (see Usage_) or again via `Tuskar UI`_.\n\n* On receiving node UUID **ironic-discoverd**:\n\n  * validates node power credentials, current power and provisioning states,\n  * allows firewall access to PXE boot service for the nodes,\n  * issues reboot command for the nodes, so that they boot the\n    discovery ramdisk.\n\n* The discovery ramdisk collects the required information and posts it back\n  to **ironic-discoverd**.\n\n* On receiving data from the discovery ramdisk, **ironic-discoverd**:\n\n  * validates received data,\n  * finds the node in Ironic database using it's BMC address (MAC address in\n    case of SSH driver),\n  * fills missing node properties with received data and creates missing ports.\n\n  .. note::\n    **ironic-discoverd** is responsible to create Ironic ports for some or all\n    NIC's found on the node. **ironic-discoverd** is also capable of\n    deleting ports that should not be present. There are two important\n    configuration options that affect this behavior: ``add_ports`` and\n    ``keep_ports`` (please refer to ``example.conf`` for detailed explanation).\n\n    Default values as of **ironic-discoverd** 1.1.0 are ``add_ports=pxe``,\n    ``keep_ports=all``, which means that only one port will be added, which is\n    associated with NIC the ramdisk PXE booted from. No ports will be deleted.\n    This setting ensures that deploying on introspected nodes will succeed\n    despite `Ironic bug 1405131\n    <https://bugs.launchpad.net/ironic/+bug/1405131>`_.\n\n    Ironic inspection feature by default requires different settings:\n    ``add_ports=all``, ``keep_ports=present``, which means that ports will be\n    created for all detected NIC's, and all other ports will be deleted.\n    Refer to the `Ironic inspection documentation`_ for details.\n\n* Separate API (see Usage_) can be used to query introspection results\n  for a given node.\n\n* Nodes are put in the correct state for deploying as described in\n  `Node States`_.\n\nStarting DHCP server and configuring PXE boot environment is not part of this\npackage and should be done separately.\n\n.. _instack-undercloud: https://www.rdoproject.org/Deploying_an_RDO_Undercloud_with_Instack\n.. _Ironic inspection documentation: http://docs.openstack.org/developer/ironic/deploy/install-guide.html#hardware-inspection\n\nInstallation\n------------\n\n**ironic-discoverd** is available as an RPM from Fedora 22 repositories or from\nJuno (and later) `RDO <https://www.rdoproject.org/>`_ for Fedora 20, 21\nand EPEL 7.  It will be installed and preconfigured if you used\ninstack-undercloud_ to build your undercloud.\nOtherwise after enabling required repositories install it using::\n\n    yum install openstack-ironic-discoverd\n\nTo install only Python packages (including the client), use::\n\n    yum install python-ironic-discoverd\n\nAlternatively (e.g. if you need the latest version), you can install package\nfrom PyPI_ (you may want to use virtualenv to isolate your environment)::\n\n    pip install ironic-discoverd\n\nConfiguration\n~~~~~~~~~~~~~\n\nCopy ``example.conf`` to some permanent place\n(``/etc/ironic-discoverd/discoverd.conf`` is what is used in the RPM).\nFill in at least these configuration values:\n\n* ``os_username``, ``os_password``, ``os_tenant_name`` - Keystone credentials\n  to use when accessing other services and check client authentication tokens;\n\n* ``os_auth_url``, ``identity_uri`` - Keystone endpoints for validating\n  authentication tokens and checking user roles;\n\n* ``database`` - where you want **ironic-discoverd** SQLite database\n  to be placed;\n\n* ``dnsmasq_interface`` - interface on which ``dnsmasq`` (or another DHCP\n  service) listens for PXE boot requests (defaults to ``br-ctlplane`` which is\n  a sane default for TripleO_ based installations but is unlikely to work for\n  other cases).\n\nSee comments inside `example.conf\n<https://github.com/openstack/ironic-inspector/blob/master/example.conf>`_\nfor the other possible configuration options.\n\n.. note::\n    Configuration file contains a password and thus should be owned by ``root``\n    and should have access rights like ``0600``.\n\nAs for PXE boot environment, you'll need:\n\n* TFTP server running and accessible (see below for using *dnsmasq*).\n  Ensure ``pxelinux.0`` is present in the TFTP root.\n\n* Build and put into your TFTP directory kernel and ramdisk from the\n  diskimage-builder_ `ironic-discoverd-ramdisk element`_::\n\n    ramdisk-image-create -o discovery fedora ironic-discoverd-ramdisk\n\n  You need diskimage-builder_ 0.1.38 or newer to do it (using the latest one\n  is always advised).\n\n* You need PXE boot server (e.g. *dnsmasq*) running on **the same** machine as\n  **ironic-discoverd**. Don't do any firewall configuration:\n  **ironic-discoverd** will handle it for you. In **ironic-discoverd**\n  configuration file set ``dnsmasq_interface`` to the interface your\n  PXE boot server listens on. Here is an example *dnsmasq.conf*::\n\n    port=0\n    interface={INTERFACE}\n    bind-interfaces\n    dhcp-range={DHCP IP RANGE, e.g. 192.168.0.50,192.168.0.150}\n    enable-tftp\n    tftp-root={TFTP ROOT, e.g. /tftpboot}\n    dhcp-boot=pxelinux.0\n\n* Configure your ``$TFTPROOT/pxelinux.cfg/default`` with something like::\n\n    default discover\n\n    label discover\n    kernel discovery.kernel\n    append initrd=discovery.initramfs discoverd_callback_url=http://{IP}:5050/v1/continue\n\n    ipappend 3\n\n  Replace ``{IP}`` with IP of the machine (do not use loopback interface, it\n  will be accessed by ramdisk on a booting machine).\n\n  .. note::\n    There are some prebuilt images which use obsolete ``ironic_callback_url``\n    instead of ``discoverd_callback_url``. Modify ``pxelinux.cfg/default``\n    accordingly if you have one of these.\n\nHere is *discoverd.conf* you may end up with::\n\n    [discoverd]\n    debug = false\n    identity_uri = http://127.0.0.1:35357\n    os_auth_url = http://127.0.0.1:5000/v2.0\n    os_username = admin\n    os_password = password\n    os_tenant_name = admin\n    dnsmasq_interface = br-ctlplane\n\n.. note::\n    Set ``debug = true`` if you want to see complete logs.\n\n.. _diskimage-builder: https://github.com/openstack/diskimage-builder\n.. _ironic-discoverd-ramdisk element: https://github.com/openstack/diskimage-builder/tree/master/elements/ironic-discoverd-ramdisk\n\nRunning\n~~~~~~~\n\nIf you installed **ironic-discoverd** from the RPM, you already have\na *systemd* unit, so you can::\n\n    systemctl enable openstack-ironic-discoverd\n    systemctl start openstack-ironic-discoverd\n\nOtherwise run as ``root``::\n\n    ironic-discoverd --config-file /etc/ironic-discoverd/discoverd.conf\n\n.. note::\n    Running as ``root`` is not required if **ironic-discoverd** does not\n    manage the firewall (i.e. ``manage_firewall`` is set to ``false`` in the\n    configuration file).\n\nA good starting point for writing your own *systemd* unit should be `one used\nin Fedora <http://pkgs.fedoraproject.org/cgit/openstack-ironic-discoverd.git/plain/openstack-ironic-discoverd.service>`_.\n\nUsage\n-----\n\n**ironic-discoverd** has a simple client library for Python and a CLI tool\nbundled with it.\n\nClient library is in module ``ironic_discoverd.client``, every call\naccepts additional optional arguments:\n\n* ``base_url`` **ironic-discoverd** API endpoint, defaults to\n  ``127.0.0.1:5050``,\n* ``auth_token`` Keystone authentication token.\n\nCLI tool is based on OpenStackClient_ with prefix\n``openstack baremetal introspection``. Accepts optional argument\n``--discoverd-url`` with the **ironic-discoverd** API endpoint.\n\n* **Start introspection on a node**:\n\n  ``introspect(uuid, new_ipmi_username=None, new_ipmi_password=None)``\n\n  ::\n\n    $ openstack baremetal introspection start UUID [--new-ipmi-password=PWD [--new-ipmi-username=USER]]\n\n  * ``uuid`` - Ironic node UUID;\n  * ``new_ipmi_username`` and ``new_ipmi_password`` - if these are set,\n    **ironic-discoverd** will switch to manual power on and assigning IPMI\n    credentials on introspection. See `Setting IPMI Credentials`_ for details.\n\n* **Query introspection status**:\n\n  ``get_status(uuid)``\n\n  ::\n\n    $ openstack baremetal introspection status UUID\n\n  * ``uuid`` - Ironic node UUID.\n\nRefer to HTTP-API.rst_ for information on the HTTP API.\n\n.. _OpenStackClient: http://docs.openstack.org/developer/python-openstackclient/\n.. _HTTP-API.rst: https://github.com/openstack/ironic-inspector/blob/master/HTTP-API.rst\n.. _HTTP API: https://github.com/openstack/ironic-inspector/blob/master/HTTP-API.rst\n\nUsing from Ironic API\n~~~~~~~~~~~~~~~~~~~~~\n\nIronic Kilo introduced support for hardware introspection under name of\n\"inspection\". **ironic-discoverd** introspection is supported for some generic\ndrivers, please refer to `Ironic inspection documentation`_ for details.\n\nNode States\n~~~~~~~~~~~\n\n* As of Ironic Kilo release the nodes should be moved to ``MANAGEABLE``\n  provision state before introspection (requires *python-ironicclient*\n  of version 0.5.0 or newer)::\n\n    ironic node-set-provision-state <UUID> manage\n\n  With Juno release and/or older *python-ironicclient* it's recommended\n  to set maintenance mode, so that nodes are not taken by Nova for deploying::\n\n    ironic node-update <UUID> replace maintenance=true\n\n* After successful introspection and before deploying nodes should be made\n  available to Nova, either by moving them to ``AVAILABLE`` state (Kilo)::\n\n    ironic node-set-provision-state <UUID> provide\n\n  or by removing maintenance mode (Juno and/or older client)::\n\n    ironic node-update <UUID> replace maintenance=false\n\n  .. note::\n    Due to how Nova interacts with Ironic driver, you should wait 1 minute\n    before Nova becomes aware of available nodes after issuing these commands.\n\nSetting IPMI Credentials\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you have physical access to your nodes, you can use **ironic-discoverd** to\nset IPMI credentials for them without knowing the original ones. The workflow\nis as follows:\n\n* Ensure nodes will PXE boot on the right network by default.\n\n* Set ``enable_setting_ipmi_credentials = true`` in the **ironic-discoverd**\n  configuration file.\n\n* Enroll nodes in Ironic with setting their ``ipmi_address`` only. This step\n  allows **ironic-discoverd** to distinguish nodes.\n\n* Set maintenance mode on nodes. That's an important step, otherwise Ironic\n  might interfere with introspection process.\n\n* Start introspection with providing additional parameters:\n\n  * ``new_ipmi_password`` IPMI password to set,\n  * ``new_ipmi_username`` IPMI user name to set, defaults to one in node\n    driver_info.\n\n* Manually power on the nodes and wait.\n\n* After introspection is finished (watch nodes power state or use\n  **ironic-discoverd** status API) you can turn maintenance mode off.\n\nNote that due to various limitations on password value in different BMC,\n**ironic-discoverd** will only accept passwords with length between 1 and 20\nconsisting only of letters and numbers.\n\nPlugins\n~~~~~~~\n\n**ironic-discoverd** heavily relies on plugins for data processing. Even the\nstandard functionality is largely based on plugins. Set ``processing_hooks``\noption in the configuration file to change the set of plugins to be run on\nintrospection data. Note that order does matter in this option.\n\nThese are plugins that are enabled by default and should not be disabled,\nunless you understand what you're doing:\n\n``ramdisk_error``\n    reports error, if ``error`` field is set by the ramdisk, also optionally\n    stores logs from ``logs`` field, see `HTTP API`_ for details.\n``scheduler``\n    validates and updates basic hardware scheduling properties: CPU number and\n    architecture, memory and disk size.\n``validate_interfaces``\n    validates network interfaces information.\n\nHere are some plugins that can be additionally enabled:\n\n``example``\n    example plugin logging it's input and output.\n``root_device_hint``\n    gathers block devices from ramdisk and exposes root device in multiple\n    runs.\n\nRefer to CONTRIBUTING.rst_ for information on how to write your own plugin.\n\nTroubleshooting\n---------------\n\nErrors when starting introspection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* *Refusing to introspect node <UUID> with provision state \"available\"\n  and maintenance mode off*\n\n  In Kilo release with *python-ironicclient* 0.5.0 or newer Ironic\n  defaults to reporting provision state ``AVAILABLE`` for newly enrolled\n  nodes.  **ironic-discoverd** will refuse to conduct introspection in\n  this state, as such nodes are supposed to be used by Nova for scheduling.\n  See `Node States`_ for instructions on how to put nodes into\n  the correct state.\n\nIntrospection times out\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThere may be 3 reasons why introspection can time out after some time\n(defaulting to 60 minutes, altered by ``timeout`` configuration option):\n\n#. Fatal failure in processing chain before node was found in the local cache.\n   See `Troubleshooting data processing`_ for the hints.\n\n#. Failure to load discovery ramdisk on the target node. See `Troubleshooting\n   PXE boot`_ for the hints.\n\n#. Failure during ramdisk run. See `Troubleshooting ramdisk run`_ for the\n   hints.\n\nTroubleshooting data processing\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nIn this case **ironic-discoverd** logs should give a good idea what went wrong.\nE.g. for RDO or Fedora the following command will output the full log::\n\n    sudo journalctl -u openstack-ironic-discoverd\n\n.. note::\n    Service name and specific command might be different for other Linux\n    distributions.\n\nIf ``ramdisk_error`` plugin is enabled and ``ramdisk_logs_dir`` configuration\noption is set, **ironic-discoverd** will store logs received from the ramdisk\nto the ``ramdisk_logs_dir`` directory. This depends, however, on the ramdisk\nimplementation.\n\nTroubleshooting PXE boot\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nPXE booting most often becomes a problem for bare metal environments with\nseveral physical networks. If the hardware vendor provides a remote console\n(e.g. iDRAC for DELL), use it to connect to the machine and see what is going\non. You may need to restart introspection.\n\nAnother source of information is DHCP and TFTP server logs. Their location\ndepends on how the servers were installed and run. For RDO or Fedora use::\n\n    $ sudo journalctl -u openstack-ironic-discoverd-dnsmasq\n\nThe last resort is ``tcpdump`` utility. Use something like\n::\n\n    $ sudo tcpdump -i any port 67 or port 68 or port 69\n\nto watch both DHCP and TFTP traffic going through your machine. Replace\n``any`` with a specific network interface to check that DHCP and TFTP\nrequests really reach it.\n\nIf you see node not attempting PXE boot or attempting PXE boot on the wrong\nnetwork, reboot the machine into BIOS settings and make sure that only one\nrelevant NIC is allowed to PXE boot.\n\nIf you see node attempting PXE boot using the correct NIC but failing, make\nsure that:\n\n#. network switches configuration does not prevent PXE boot requests from\n   propagating,\n\n#. there is no additional firewall rules preventing access to port 67 on the\n   machine where *ironic-discoverd* and its DHCP server are installed.\n\nIf you see node receiving DHCP address and then failing to get kernel and/or\nramdisk or to boot them, make sure that:\n\n#. TFTP server is running and accessible (use ``tftp`` utility to verify),\n\n#. no firewall rules prevent access to TFTP port,\n\n#. DHCP server is correctly set to point to the TFTP server,\n\n#. ``pxelinux.cfg/default`` within TFTP root contains correct reference to the\n   kernel and ramdisk.\n\nTroubleshooting ramdisk run\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConnect to the remote console as described in `Troubleshooting PXE boot`_ to\nsee what is going on with the ramdisk. The ramdisk drops into emergency shell\non failure, which you can use to look around. There should be file called\n``logs`` with the current ramdisk logs.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/ironic-discoverd", "keywords": null, "license": "APL 2.0", "maintainer": null, "maintainer_email": null, "name": "ironic-discoverd", "package_url": "https://pypi.org/project/ironic-discoverd/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ironic-discoverd/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://pypi.python.org/pypi/ironic-discoverd"}, "release_url": "https://pypi.org/project/ironic-discoverd/1.1.1/", "requires_dist": null, "requires_python": null, "summary": "Hardware introspection for OpenStack Ironic", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p>Note</p>\n<p><strong>ironic-discoverd</strong> project was renamed to <strong>ironic-inspector</strong> and its\nnew home is at <a href=\"https://pypi.python.org/pypi/ironic-inspector\" rel=\"nofollow\">https://pypi.python.org/pypi/ironic-inspector</a>. Some links\nare already pointing at the new location in this document.</p>\n<p><strong>ironic-discoverd</strong> 1.1 branch will only receive critical bug fixes,\nother branches are not supported at all. Please switch to\n<strong>ironic-inspector</strong> as soon as time allows.</p>\n</div>\n<p>This is an auxiliary service for discovering hardware properties for a\nnode managed by <a href=\"https://wiki.openstack.org/wiki/Ironic\" rel=\"nofollow\">OpenStack Ironic</a>. Hardware introspection or hardware\nproperties discovery is a process of getting hardware parameters required for\nscheduling from a bare metal node, given it\u2019s power management credentials\n(e.g. IPMI address, user name and password).</p>\n<p>A special <em>discovery ramdisk</em> is required to collect the information on a\nnode. The default one can be built using <a href=\"https://github.com/openstack/diskimage-builder\" rel=\"nofollow\">diskimage-builder</a> and\n<a href=\"https://github.com/openstack/diskimage-builder/tree/master/elements/ironic-discoverd-ramdisk\" rel=\"nofollow\">ironic-discoverd-ramdisk element</a> (see <a href=\"#configuration\" rel=\"nofollow\">Configuration</a> below).</p>\n<p>Support for <strong>ironic-discoverd</strong> is present in <a href=\"https://pypi.python.org/pypi/tuskar-ui\" rel=\"nofollow\">Tuskar UI</a> \u2013\nOpenStack Horizon plugin for <a href=\"https://wiki.openstack.org/wiki/TripleO\" rel=\"nofollow\">TripleO</a>.</p>\n<p><strong>ironic-discoverd</strong> requires OpenStack Juno (2014.2) release or newer.</p>\n<p>Please use <a href=\"https://bugs.launchpad.net/ironic-inspector\" rel=\"nofollow\">launchpad</a> to report bugs and ask questions. Use <a href=\"https://pypi.python.org/pypi/ironic-discoverd\" rel=\"nofollow\">PyPI</a> for\ndownloads and accessing the released version of this README.</p>\n<p>Please contribute to the renamed <strong>ironic-inspector</strong> project - see\n<a href=\"https://github.com/openstack/ironic-inspector/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING.rst</a> for details.</p>\n<div id=\"workflow\">\n<h2>Workflow</h2>\n<p>Usual hardware introspection flow is as follows:</p>\n<ul>\n<li><p>Operator installs undercloud with <strong>ironic-discoverd</strong>\n(e.g. using <a href=\"https://www.rdoproject.org/Deploying_an_RDO_Undercloud_with_Instack\" rel=\"nofollow\">instack-undercloud</a>).</p>\n</li>\n<li><p>Operator enrolls nodes into Ironic either manually or by uploading CSV file\nto <a href=\"https://pypi.python.org/pypi/tuskar-ui\" rel=\"nofollow\">Tuskar UI</a>. Power management credentials should be provided to Ironic\nat this step.</p>\n</li>\n<li><p>Nodes are put in the correct state for introspection as described in\n<a href=\"#node-states\" rel=\"nofollow\">Node States</a>.</p>\n</li>\n<li><p>Operator sends nodes on introspection either manually using\n<strong>ironic-discoverd</strong> API (see <a href=\"#usage\" rel=\"nofollow\">Usage</a>) or again via <a href=\"https://pypi.python.org/pypi/tuskar-ui\" rel=\"nofollow\">Tuskar UI</a>.</p>\n</li>\n<li><p>On receiving node UUID <strong>ironic-discoverd</strong>:</p>\n<ul>\n<li>validates node power credentials, current power and provisioning states,</li>\n<li>allows firewall access to PXE boot service for the nodes,</li>\n<li>issues reboot command for the nodes, so that they boot the\ndiscovery ramdisk.</li>\n</ul>\n</li>\n<li><p>The discovery ramdisk collects the required information and posts it back\nto <strong>ironic-discoverd</strong>.</p>\n</li>\n<li><p>On receiving data from the discovery ramdisk, <strong>ironic-discoverd</strong>:</p>\n<ul>\n<li>validates received data,</li>\n<li>finds the node in Ironic database using it\u2019s BMC address (MAC address in\ncase of SSH driver),</li>\n<li>fills missing node properties with received data and creates missing ports.</li>\n</ul>\n<div>\n<p>Note</p>\n<p><strong>ironic-discoverd</strong> is responsible to create Ironic ports for some or all\nNIC\u2019s found on the node. <strong>ironic-discoverd</strong> is also capable of\ndeleting ports that should not be present. There are two important\nconfiguration options that affect this behavior: <tt>add_ports</tt> and\n<tt>keep_ports</tt> (please refer to <tt>example.conf</tt> for detailed explanation).</p>\n<p>Default values as of <strong>ironic-discoverd</strong> 1.1.0 are <tt>add_ports=pxe</tt>,\n<tt>keep_ports=all</tt>, which means that only one port will be added, which is\nassociated with NIC the ramdisk PXE booted from. No ports will be deleted.\nThis setting ensures that deploying on introspected nodes will succeed\ndespite <a href=\"https://bugs.launchpad.net/ironic/+bug/1405131\" rel=\"nofollow\">Ironic bug 1405131</a>.</p>\n<p>Ironic inspection feature by default requires different settings:\n<tt>add_ports=all</tt>, <tt>keep_ports=present</tt>, which means that ports will be\ncreated for all detected NIC\u2019s, and all other ports will be deleted.\nRefer to the <a href=\"http://docs.openstack.org/developer/ironic/deploy/install-guide.html#hardware-inspection\" rel=\"nofollow\">Ironic inspection documentation</a> for details.</p>\n</div>\n</li>\n<li><p>Separate API (see <a href=\"#usage\" rel=\"nofollow\">Usage</a>) can be used to query introspection results\nfor a given node.</p>\n</li>\n<li><p>Nodes are put in the correct state for deploying as described in\n<a href=\"#node-states\" rel=\"nofollow\">Node States</a>.</p>\n</li>\n</ul>\n<p>Starting DHCP server and configuring PXE boot environment is not part of this\npackage and should be done separately.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><strong>ironic-discoverd</strong> is available as an RPM from Fedora 22 repositories or from\nJuno (and later) <a href=\"https://www.rdoproject.org/\" rel=\"nofollow\">RDO</a> for Fedora 20, 21\nand EPEL 7.  It will be installed and preconfigured if you used\n<a href=\"https://www.rdoproject.org/Deploying_an_RDO_Undercloud_with_Instack\" rel=\"nofollow\">instack-undercloud</a> to build your undercloud.\nOtherwise after enabling required repositories install it using:</p>\n<pre>yum install openstack-ironic-discoverd\n</pre>\n<p>To install only Python packages (including the client), use:</p>\n<pre>yum install python-ironic-discoverd\n</pre>\n<p>Alternatively (e.g. if you need the latest version), you can install package\nfrom <a href=\"https://pypi.python.org/pypi/ironic-discoverd\" rel=\"nofollow\">PyPI</a> (you may want to use virtualenv to isolate your environment):</p>\n<pre>pip install ironic-discoverd\n</pre>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Copy <tt>example.conf</tt> to some permanent place\n(<tt><span class=\"pre\">/etc/ironic-discoverd/discoverd.conf</span></tt> is what is used in the RPM).\nFill in at least these configuration values:</p>\n<ul>\n<li><tt>os_username</tt>, <tt>os_password</tt>, <tt>os_tenant_name</tt> - Keystone credentials\nto use when accessing other services and check client authentication tokens;</li>\n<li><tt>os_auth_url</tt>, <tt>identity_uri</tt> - Keystone endpoints for validating\nauthentication tokens and checking user roles;</li>\n<li><tt>database</tt> - where you want <strong>ironic-discoverd</strong> SQLite database\nto be placed;</li>\n<li><tt>dnsmasq_interface</tt> - interface on which <tt>dnsmasq</tt> (or another DHCP\nservice) listens for PXE boot requests (defaults to <tt><span class=\"pre\">br-ctlplane</span></tt> which is\na sane default for <a href=\"https://wiki.openstack.org/wiki/TripleO\" rel=\"nofollow\">TripleO</a> based installations but is unlikely to work for\nother cases).</li>\n</ul>\n<p>See comments inside <a href=\"https://github.com/openstack/ironic-inspector/blob/master/example.conf\" rel=\"nofollow\">example.conf</a>\nfor the other possible configuration options.</p>\n<div>\n<p>Note</p>\n<p>Configuration file contains a password and thus should be owned by <tt>root</tt>\nand should have access rights like <tt>0600</tt>.</p>\n</div>\n<p>As for PXE boot environment, you\u2019ll need:</p>\n<ul>\n<li><p>TFTP server running and accessible (see below for using <em>dnsmasq</em>).\nEnsure <tt>pxelinux.0</tt> is present in the TFTP root.</p>\n</li>\n<li><p>Build and put into your TFTP directory kernel and ramdisk from the\n<a href=\"https://github.com/openstack/diskimage-builder\" rel=\"nofollow\">diskimage-builder</a> <a href=\"https://github.com/openstack/diskimage-builder/tree/master/elements/ironic-discoverd-ramdisk\" rel=\"nofollow\">ironic-discoverd-ramdisk element</a>:</p>\n<pre>ramdisk-image-create -o discovery fedora ironic-discoverd-ramdisk\n</pre>\n<p>You need <a href=\"https://github.com/openstack/diskimage-builder\" rel=\"nofollow\">diskimage-builder</a> 0.1.38 or newer to do it (using the latest one\nis always advised).</p>\n</li>\n<li><p>You need PXE boot server (e.g. <em>dnsmasq</em>) running on <strong>the same</strong> machine as\n<strong>ironic-discoverd</strong>. Don\u2019t do any firewall configuration:\n<strong>ironic-discoverd</strong> will handle it for you. In <strong>ironic-discoverd</strong>\nconfiguration file set <tt>dnsmasq_interface</tt> to the interface your\nPXE boot server listens on. Here is an example <em>dnsmasq.conf</em>:</p>\n<pre>port=0\ninterface={INTERFACE}\nbind-interfaces\ndhcp-range={DHCP IP RANGE, e.g. 192.168.0.50,192.168.0.150}\nenable-tftp\ntftp-root={TFTP ROOT, e.g. /tftpboot}\ndhcp-boot=pxelinux.0\n</pre>\n</li>\n<li><p>Configure your <tt>$TFTPROOT/pxelinux.cfg/default</tt> with something like:</p>\n<pre>default discover\n\nlabel discover\nkernel discovery.kernel\nappend initrd=discovery.initramfs discoverd_callback_url=http://{IP}:5050/v1/continue\n\nipappend 3\n</pre>\n<p>Replace <tt>{IP}</tt> with IP of the machine (do not use loopback interface, it\nwill be accessed by ramdisk on a booting machine).</p>\n<div>\n<p>Note</p>\n<p>There are some prebuilt images which use obsolete <tt>ironic_callback_url</tt>\ninstead of <tt>discoverd_callback_url</tt>. Modify <tt>pxelinux.cfg/default</tt>\naccordingly if you have one of these.</p>\n</div>\n</li>\n</ul>\n<p>Here is <em>discoverd.conf</em> you may end up with:</p>\n<pre>[discoverd]\ndebug = false\nidentity_uri = http://127.0.0.1:35357\nos_auth_url = http://127.0.0.1:5000/v2.0\nos_username = admin\nos_password = password\nos_tenant_name = admin\ndnsmasq_interface = br-ctlplane\n</pre>\n<div>\n<p>Note</p>\n<p>Set <tt>debug = true</tt> if you want to see complete logs.</p>\n</div>\n</div>\n<div id=\"running\">\n<h3>Running</h3>\n<p>If you installed <strong>ironic-discoverd</strong> from the RPM, you already have\na <em>systemd</em> unit, so you can:</p>\n<pre>systemctl enable openstack-ironic-discoverd\nsystemctl start openstack-ironic-discoverd\n</pre>\n<p>Otherwise run as <tt>root</tt>:</p>\n<pre>ironic-discoverd --config-file /etc/ironic-discoverd/discoverd.conf\n</pre>\n<div>\n<p>Note</p>\n<p>Running as <tt>root</tt> is not required if <strong>ironic-discoverd</strong> does not\nmanage the firewall (i.e. <tt>manage_firewall</tt> is set to <tt>false</tt> in the\nconfiguration file).</p>\n</div>\n<p>A good starting point for writing your own <em>systemd</em> unit should be <a href=\"http://pkgs.fedoraproject.org/cgit/openstack-ironic-discoverd.git/plain/openstack-ironic-discoverd.service\" rel=\"nofollow\">one used\nin Fedora</a>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><strong>ironic-discoverd</strong> has a simple client library for Python and a CLI tool\nbundled with it.</p>\n<p>Client library is in module <tt>ironic_discoverd.client</tt>, every call\naccepts additional optional arguments:</p>\n<ul>\n<li><tt>base_url</tt> <strong>ironic-discoverd</strong> API endpoint, defaults to\n<tt>127.0.0.1:5050</tt>,</li>\n<li><tt>auth_token</tt> Keystone authentication token.</li>\n</ul>\n<p>CLI tool is based on <a href=\"http://docs.openstack.org/developer/python-openstackclient/\" rel=\"nofollow\">OpenStackClient</a> with prefix\n<tt>openstack baremetal introspection</tt>. Accepts optional argument\n<tt><span class=\"pre\">--discoverd-url</span></tt> with the <strong>ironic-discoverd</strong> API endpoint.</p>\n<ul>\n<li><p><strong>Start introspection on a node</strong>:</p>\n<p><tt>introspect(uuid, new_ipmi_username=None, new_ipmi_password=None)</tt></p>\n<pre>$ openstack baremetal introspection start UUID [--new-ipmi-password=PWD [--new-ipmi-username=USER]]\n</pre>\n<ul>\n<li><tt>uuid</tt> - Ironic node UUID;</li>\n<li><tt>new_ipmi_username</tt> and <tt>new_ipmi_password</tt> - if these are set,\n<strong>ironic-discoverd</strong> will switch to manual power on and assigning IPMI\ncredentials on introspection. See <a href=\"#setting-ipmi-credentials\" rel=\"nofollow\">Setting IPMI Credentials</a> for details.</li>\n</ul>\n</li>\n<li><p><strong>Query introspection status</strong>:</p>\n<p><tt>get_status(uuid)</tt></p>\n<pre>$ openstack baremetal introspection status UUID\n</pre>\n<ul>\n<li><tt>uuid</tt> - Ironic node UUID.</li>\n</ul>\n</li>\n</ul>\n<p>Refer to <a href=\"https://github.com/openstack/ironic-inspector/blob/master/HTTP-API.rst\" rel=\"nofollow\">HTTP-API.rst</a> for information on the HTTP API.</p>\n<div id=\"using-from-ironic-api\">\n<h3>Using from Ironic API</h3>\n<p>Ironic Kilo introduced support for hardware introspection under name of\n\u201cinspection\u201d. <strong>ironic-discoverd</strong> introspection is supported for some generic\ndrivers, please refer to <a href=\"http://docs.openstack.org/developer/ironic/deploy/install-guide.html#hardware-inspection\" rel=\"nofollow\">Ironic inspection documentation</a> for details.</p>\n</div>\n<div id=\"node-states\">\n<h3>Node States</h3>\n<ul>\n<li><p>As of Ironic Kilo release the nodes should be moved to <tt>MANAGEABLE</tt>\nprovision state before introspection (requires <em>python-ironicclient</em>\nof version 0.5.0 or newer):</p>\n<pre>ironic node-set-provision-state &lt;UUID&gt; manage\n</pre>\n<p>With Juno release and/or older <em>python-ironicclient</em> it\u2019s recommended\nto set maintenance mode, so that nodes are not taken by Nova for deploying:</p>\n<pre>ironic node-update &lt;UUID&gt; replace maintenance=true\n</pre>\n</li>\n<li><p>After successful introspection and before deploying nodes should be made\navailable to Nova, either by moving them to <tt>AVAILABLE</tt> state (Kilo):</p>\n<pre>ironic node-set-provision-state &lt;UUID&gt; provide\n</pre>\n<p>or by removing maintenance mode (Juno and/or older client):</p>\n<pre>ironic node-update &lt;UUID&gt; replace maintenance=false\n</pre>\n<div>\n<p>Note</p>\n<p>Due to how Nova interacts with Ironic driver, you should wait 1 minute\nbefore Nova becomes aware of available nodes after issuing these commands.</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"setting-ipmi-credentials\">\n<h3>Setting IPMI Credentials</h3>\n<p>If you have physical access to your nodes, you can use <strong>ironic-discoverd</strong> to\nset IPMI credentials for them without knowing the original ones. The workflow\nis as follows:</p>\n<ul>\n<li>Ensure nodes will PXE boot on the right network by default.</li>\n<li>Set <tt>enable_setting_ipmi_credentials = true</tt> in the <strong>ironic-discoverd</strong>\nconfiguration file.</li>\n<li>Enroll nodes in Ironic with setting their <tt>ipmi_address</tt> only. This step\nallows <strong>ironic-discoverd</strong> to distinguish nodes.</li>\n<li>Set maintenance mode on nodes. That\u2019s an important step, otherwise Ironic\nmight interfere with introspection process.</li>\n<li>Start introspection with providing additional parameters:<ul>\n<li><tt>new_ipmi_password</tt> IPMI password to set,</li>\n<li><tt>new_ipmi_username</tt> IPMI user name to set, defaults to one in node\ndriver_info.</li>\n</ul>\n</li>\n<li>Manually power on the nodes and wait.</li>\n<li>After introspection is finished (watch nodes power state or use\n<strong>ironic-discoverd</strong> status API) you can turn maintenance mode off.</li>\n</ul>\n<p>Note that due to various limitations on password value in different BMC,\n<strong>ironic-discoverd</strong> will only accept passwords with length between 1 and 20\nconsisting only of letters and numbers.</p>\n</div>\n<div id=\"plugins\">\n<h3>Plugins</h3>\n<p><strong>ironic-discoverd</strong> heavily relies on plugins for data processing. Even the\nstandard functionality is largely based on plugins. Set <tt>processing_hooks</tt>\noption in the configuration file to change the set of plugins to be run on\nintrospection data. Note that order does matter in this option.</p>\n<p>These are plugins that are enabled by default and should not be disabled,\nunless you understand what you\u2019re doing:</p>\n<dl>\n<dt><tt>ramdisk_error</tt></dt>\n<dd>reports error, if <tt>error</tt> field is set by the ramdisk, also optionally\nstores logs from <tt>logs</tt> field, see <a href=\"https://github.com/openstack/ironic-inspector/blob/master/HTTP-API.rst\" rel=\"nofollow\">HTTP API</a> for details.</dd>\n<dt><tt>scheduler</tt></dt>\n<dd>validates and updates basic hardware scheduling properties: CPU number and\narchitecture, memory and disk size.</dd>\n<dt><tt>validate_interfaces</tt></dt>\n<dd>validates network interfaces information.</dd>\n</dl>\n<p>Here are some plugins that can be additionally enabled:</p>\n<dl>\n<dt><tt>example</tt></dt>\n<dd>example plugin logging it\u2019s input and output.</dd>\n<dt><tt>root_device_hint</tt></dt>\n<dd>gathers block devices from ramdisk and exposes root device in multiple\nruns.</dd>\n</dl>\n<p>Refer to <a href=\"https://github.com/openstack/ironic-inspector/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING.rst</a> for information on how to write your own plugin.</p>\n</div>\n</div>\n<div id=\"troubleshooting\">\n<h2>Troubleshooting</h2>\n<div id=\"errors-when-starting-introspection\">\n<h3>Errors when starting introspection</h3>\n<ul>\n<li><p><em>Refusing to introspect node &lt;UUID&gt; with provision state \u201cavailable\u201d\nand maintenance mode off</em></p>\n<p>In Kilo release with <em>python-ironicclient</em> 0.5.0 or newer Ironic\ndefaults to reporting provision state <tt>AVAILABLE</tt> for newly enrolled\nnodes.  <strong>ironic-discoverd</strong> will refuse to conduct introspection in\nthis state, as such nodes are supposed to be used by Nova for scheduling.\nSee <a href=\"#node-states\" rel=\"nofollow\">Node States</a> for instructions on how to put nodes into\nthe correct state.</p>\n</li>\n</ul>\n</div>\n<div id=\"introspection-times-out\">\n<h3>Introspection times out</h3>\n<p>There may be 3 reasons why introspection can time out after some time\n(defaulting to 60 minutes, altered by <tt>timeout</tt> configuration option):</p>\n<ol>\n<li>Fatal failure in processing chain before node was found in the local cache.\nSee <a href=\"#troubleshooting-data-processing\" rel=\"nofollow\">Troubleshooting data processing</a> for the hints.</li>\n<li>Failure to load discovery ramdisk on the target node. See <a href=\"#troubleshooting-pxe-boot\" rel=\"nofollow\">Troubleshooting\nPXE boot</a> for the hints.</li>\n<li>Failure during ramdisk run. See <a href=\"#troubleshooting-ramdisk-run\" rel=\"nofollow\">Troubleshooting ramdisk run</a> for the\nhints.</li>\n</ol>\n<div id=\"troubleshooting-data-processing\">\n<h4>Troubleshooting data processing</h4>\n<p>In this case <strong>ironic-discoverd</strong> logs should give a good idea what went wrong.\nE.g. for RDO or Fedora the following command will output the full log:</p>\n<pre>sudo journalctl -u openstack-ironic-discoverd\n</pre>\n<div>\n<p>Note</p>\n<p>Service name and specific command might be different for other Linux\ndistributions.</p>\n</div>\n<p>If <tt>ramdisk_error</tt> plugin is enabled and <tt>ramdisk_logs_dir</tt> configuration\noption is set, <strong>ironic-discoverd</strong> will store logs received from the ramdisk\nto the <tt>ramdisk_logs_dir</tt> directory. This depends, however, on the ramdisk\nimplementation.</p>\n</div>\n<div id=\"troubleshooting-pxe-boot\">\n<h4>Troubleshooting PXE boot</h4>\n<p>PXE booting most often becomes a problem for bare metal environments with\nseveral physical networks. If the hardware vendor provides a remote console\n(e.g. iDRAC for DELL), use it to connect to the machine and see what is going\non. You may need to restart introspection.</p>\n<p>Another source of information is DHCP and TFTP server logs. Their location\ndepends on how the servers were installed and run. For RDO or Fedora use:</p>\n<pre>$ sudo journalctl -u openstack-ironic-discoverd-dnsmasq\n</pre>\n<p>The last resort is <tt>tcpdump</tt> utility. Use something like</p>\n<pre>$ sudo tcpdump -i any port 67 or port 68 or port 69\n</pre>\n<p>to watch both DHCP and TFTP traffic going through your machine. Replace\n<tt>any</tt> with a specific network interface to check that DHCP and TFTP\nrequests really reach it.</p>\n<p>If you see node not attempting PXE boot or attempting PXE boot on the wrong\nnetwork, reboot the machine into BIOS settings and make sure that only one\nrelevant NIC is allowed to PXE boot.</p>\n<p>If you see node attempting PXE boot using the correct NIC but failing, make\nsure that:</p>\n<ol>\n<li>network switches configuration does not prevent PXE boot requests from\npropagating,</li>\n<li>there is no additional firewall rules preventing access to port 67 on the\nmachine where <em>ironic-discoverd</em> and its DHCP server are installed.</li>\n</ol>\n<p>If you see node receiving DHCP address and then failing to get kernel and/or\nramdisk or to boot them, make sure that:</p>\n<ol>\n<li>TFTP server is running and accessible (use <tt>tftp</tt> utility to verify),</li>\n<li>no firewall rules prevent access to TFTP port,</li>\n<li>DHCP server is correctly set to point to the TFTP server,</li>\n<li><tt>pxelinux.cfg/default</tt> within TFTP root contains correct reference to the\nkernel and ramdisk.</li>\n</ol>\n</div>\n<div id=\"troubleshooting-ramdisk-run\">\n<h4>Troubleshooting ramdisk run</h4>\n<p>Connect to the remote console as described in <a href=\"#troubleshooting-pxe-boot\" rel=\"nofollow\">Troubleshooting PXE boot</a> to\nsee what is going on with the ramdisk. The ramdisk drops into emergency shell\non failure, which you can use to look around. There should be file called\n<tt>logs</tt> with the current ramdisk logs.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1779903, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad3db56db9247ad15233853edaaf7ee8", "sha256": "a918a6eebe492bc7a59967c0c79d6a51644e4dab786550d92df08a2599a30d9a"}, "downloads": -1, "filename": "ironic-discoverd-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ad3db56db9247ad15233853edaaf7ee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9817, "upload_time": "2014-10-07T10:20:05", "upload_time_iso_8601": "2014-10-07T10:20:05.862210Z", "url": "https://files.pythonhosted.org/packages/0c/13/8564adf27e1d566c3efd851bf308441ab69c5425b5cee3dd83c52e95305c/ironic-discoverd-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ecdc808f2a1d25a7e263e6f2a5e83789", "sha256": "5fa4539282fe6a47b994a0e93b7a025dd8c03fc4f7e9b7ee565429d65aaefc8e"}, "downloads": -1, "filename": "ironic-discoverd-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ecdc808f2a1d25a7e263e6f2a5e83789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10431, "upload_time": "2014-10-08T10:28:37", "upload_time_iso_8601": "2014-10-08T10:28:37.341094Z", "url": "https://files.pythonhosted.org/packages/45/c5/f3ae83b69f879d7143f7e2679280df4bd7759547daaa03b0661b1b6f6104/ironic-discoverd-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1ea17e5f801bfc7eec99acb0e51a5c68", "sha256": "d01cae6490859bb06c1dec9de594e31a7f3e6a9bbe26e63821f59bd64154e6e7"}, "downloads": -1, "filename": "ironic-discoverd-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1ea17e5f801bfc7eec99acb0e51a5c68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13226, "upload_time": "2014-10-14T08:56:41", "upload_time_iso_8601": "2014-10-14T08:56:41.963740Z", "url": "https://files.pythonhosted.org/packages/8a/ea/abeb3f1eaf81aecb819c0c40904f6fcdf5c7252cd95e51c542702f9b7479/ironic-discoverd-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "2d63ce4a855e1e3014593977f2e6d66a", "sha256": "7f4d120e8c59a52120e04ce7482eb02c223ec698bcae01c23cdafa91779a3f4f"}, "downloads": -1, "filename": "ironic-discoverd-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2d63ce4a855e1e3014593977f2e6d66a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14288, "upload_time": "2014-10-16T09:07:05", "upload_time_iso_8601": "2014-10-16T09:07:05.931860Z", "url": "https://files.pythonhosted.org/packages/dd/04/aa213ef06e86e5ae152d81264c34414ac18e414169ca9703b9378c408c96/ironic-discoverd-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "66ba1b8f11d6a5569893e23589b72df9", "sha256": "ee68fea800939767754416f97185dcc907b6e1de62ca0e09da7a58131d329b6c"}, "downloads": -1, "filename": "ironic-discoverd-0.2.2.tar.gz", "has_sig": false, "md5_digest": "66ba1b8f11d6a5569893e23589b72df9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17517, "upload_time": "2014-10-27T15:04:45", "upload_time_iso_8601": "2014-10-27T15:04:45.128727Z", "url": "https://files.pythonhosted.org/packages/c2/41/92baa4d07ed58c0580f6ee115057ef0ba4f5e0fe0e6adde501392ec7c214/ironic-discoverd-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "5a321067a431d6a3d809b8dde924bc0f", "sha256": "c30aec42ad3d5e63ac2d4c2d0c7086c97a4de728540184606ec970d0f6d556d9"}, "downloads": -1, "filename": "ironic-discoverd-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5a321067a431d6a3d809b8dde924bc0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17882, "upload_time": "2014-11-14T15:51:35", "upload_time_iso_8601": "2014-11-14T15:51:35.078594Z", "url": "https://files.pythonhosted.org/packages/1b/ea/35e935c962bd374396fa9009d3c82f535c588781c5236ed318f0ba90ecd7/ironic-discoverd-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "9722b322b0cf458426a089009c402cfd", "sha256": "615d6d45c817344e6dce2e9ae545fa1bcc9786cf606e53d7f9a8ae59aba16c74"}, "downloads": -1, "filename": "ironic-discoverd-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9722b322b0cf458426a089009c402cfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18264, "upload_time": "2014-11-14T16:35:16", "upload_time_iso_8601": "2014-11-14T16:35:16.034366Z", "url": "https://files.pythonhosted.org/packages/1b/02/c5d026ea098840dcb370c31b6e4f448f11a51b0f51dc646c1b778f454c2d/ironic-discoverd-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "8b7f7c0547079b94beaa7a71b1c8f9bb", "sha256": "2532db77e852188a4ab6872772cc6ad8ba1df73147c1fe990b3d1ae5c8d1d197"}, "downloads": -1, "filename": "ironic-discoverd-0.2.5.tar.gz", "has_sig": false, "md5_digest": "8b7f7c0547079b94beaa7a71b1c8f9bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18836, "upload_time": "2014-12-05T12:44:14", "upload_time_iso_8601": "2014-12-05T12:44:14.038958Z", "url": "https://files.pythonhosted.org/packages/7b/c7/34e3d920117d25aa80c0386ffde5bd96333d6809d78758b732d5e35cee0e/ironic-discoverd-0.2.5.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e451b9ae817463ca202567f6df301e7b", "sha256": "70619fc2c1b1cfd9cadecbf20ffd470b1c6a11bcd71c49c075ff5a7bcc34f067"}, "downloads": -1, "filename": "ironic-discoverd-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e451b9ae817463ca202567f6df301e7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37648, "upload_time": "2015-02-03T09:36:06", "upload_time_iso_8601": "2015-02-03T09:36:06.576124Z", "url": "https://files.pythonhosted.org/packages/16/f4/05bafdcee60cbad2d7d1f656176e282c5e1ca3b8aad640c5eff626256f95/ironic-discoverd-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2c0c0aba080749795a1f2623b5fe69e8", "sha256": "31869309961df5d66fbb12abd3a9a0be5a90794b63058689566401f2ca5d0108"}, "downloads": -1, "filename": "ironic-discoverd-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2c0c0aba080749795a1f2623b5fe69e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38382, "upload_time": "2015-03-05T10:13:49", "upload_time_iso_8601": "2015-03-05T10:13:49.315360Z", "url": "https://files.pythonhosted.org/packages/dc/b3/44a166093acae625be7e016ee4645cfe20bcc8e3411a9c14ed2491666781/ironic-discoverd-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8991faa384e4ef4b8e38b0e0296e0fa6", "sha256": "97b4fd911d40239e5c79e87c7f2389d83cd2369af6b5f06face7c765be4103d8"}, "downloads": -1, "filename": "ironic-discoverd-1.1.0.tar.gz", "has_sig": false, "md5_digest": "8991faa384e4ef4b8e38b0e0296e0fa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56969, "upload_time": "2015-04-29T15:41:37", "upload_time_iso_8601": "2015-04-29T15:41:37.083130Z", "url": "https://files.pythonhosted.org/packages/a3/3a/eb24becaf98de4f785fa627553bfbb100427d310fc7334d9e767ab638591/ironic-discoverd-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ae0f2336c5329ce26cb358143b4250bd", "sha256": "aaa87ffd64e1190f1f4cb7115650d7262c2ef88f90734bcce67a212df5aee3fd"}, "downloads": -1, "filename": "ironic-discoverd-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ae0f2336c5329ce26cb358143b4250bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57800, "upload_time": "2015-10-21T12:48:10", "upload_time_iso_8601": "2015-10-21T12:48:10.518805Z", "url": "https://files.pythonhosted.org/packages/2e/c0/a6288020d06b5eb9cf569fe392058cd4566b5a378bb705e8de1db98a47e0/ironic-discoverd-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae0f2336c5329ce26cb358143b4250bd", "sha256": "aaa87ffd64e1190f1f4cb7115650d7262c2ef88f90734bcce67a212df5aee3fd"}, "downloads": -1, "filename": "ironic-discoverd-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ae0f2336c5329ce26cb358143b4250bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57800, "upload_time": "2015-10-21T12:48:10", "upload_time_iso_8601": "2015-10-21T12:48:10.518805Z", "url": "https://files.pythonhosted.org/packages/2e/c0/a6288020d06b5eb9cf569fe392058cd4566b5a378bb705e8de1db98a47e0/ironic-discoverd-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:13 2020"}