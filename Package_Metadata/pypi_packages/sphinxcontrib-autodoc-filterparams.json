{"info": {"author": "Erik Kemperman", "author_email": "erikkemperman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "##################################\nsphinxcontrib-autodoc-filterparams\n##################################\n\nAlthough it might usually be a symptom of poor architecture, sometimes you\nreally want to exclude function parameters from your Sphinx documentation.\n\nThis extension does just that.\n\n\nUsage\n=====\n\n- Add it to your **conf.py** extension list, typically immediately after the\n  entry for :code:`sphinx.ext.autodoc`.\n  If you use something like the :code:`napoleon` extension to re-format\n  docstrings, then add it immediately after that.\n- Declare a function called :code:`sphinxcontrib_autodoc_filterparams`.\n\n\nExample\n=======\n\nThe following would hide all parameters whose names starts with an underscore:\n\n.. code-block:: python\n\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinxcontrib_autodoc_filterparams'\n    ]\n\n    def sphinxcontrib_autodoc_filterparams(fun, param):\n        return not param.startswith('_')\n\nThe callback takes two arguments, the current function and parameter, and it\nshould return a boolean indicating whether or not to keep the parameter.\n\nA slightly more elaborate example looks at the function context as well as the\nname of the parameter:\n\n.. code-block:: python\n\n    exclude_params = {\n        'my_package.my_module.MyClass.my_method': {'**kwargs'}\n    }\n\n    def sphinxcontrib_autodoc_filterparams(fun, param):\n        exclude = exclude_params.get(fun.__module__ + '.' + fun.__qualname__)\n        return exclude is None or param not in exclude\n\n\nOptions\n=======\n\n:code:`sphinxcontrib_autodoc_filterparams`\n------------------------------------------\n\nThe callback function, invoked for each function parameter. If this function\nreturns :code:`True` then the parameter will be documented, otherwise it will\nbe excluded.\n\n:code:`sphinxcontrib_autodoc_filterparams_stars`\n------------------------------------------------\n\nA boolean indicating whether or not asterisks should be prepended to parameter\nnames when invoking the callback (one star for variadic positional, two stars\nfor variadic keyword). Default is :code:`True`.\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erikkemperman/sphinxcontrib-autodoc-filterparams/", "keywords": "sphinx,extension,filter,hide,exclude,parameter,argument", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sphinxcontrib-autodoc-filterparams", "package_url": "https://pypi.org/project/sphinxcontrib-autodoc-filterparams/", "platform": "", "project_url": "https://pypi.org/project/sphinxcontrib-autodoc-filterparams/", "project_urls": {"Homepage": "https://github.com/erikkemperman/sphinxcontrib-autodoc-filterparams/"}, "release_url": "https://pypi.org/project/sphinxcontrib-autodoc-filterparams/0.0.1/", "requires_dist": ["sphinx (>=2)"], "requires_python": "", "summary": "A sphinx extension to filter parameters from documentation", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Although it might usually be a symptom of poor architecture, sometimes you\nreally want to exclude function parameters from your Sphinx documentation.</p>\n<p>This extension does just that.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>Add it to your <strong>conf.py</strong> extension list, typically immediately after the\nentry for <code>sphinx.ext.autodoc</code>.\nIf you use something like the <code>napoleon</code> extension to re-format\ndocstrings, then add it immediately after that.</li>\n<li>Declare a function called <code>sphinxcontrib_autodoc_filterparams</code>.</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following would hide all parameters whose names starts with an underscore:</p>\n<pre><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'sphinx.ext.autodoc'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sphinxcontrib_autodoc_filterparams'</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sphinxcontrib_autodoc_filterparams</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">)</span>\n</pre>\n<p>The callback takes two arguments, the current function and parameter, and it\nshould return a boolean indicating whether or not to keep the parameter.</p>\n<p>A slightly more elaborate example looks at the function context as well as the\nname of the parameter:</p>\n<pre><span class=\"n\">exclude_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'my_package.my_module.MyClass.my_method'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'**kwargs'</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sphinxcontrib_autodoc_filterparams</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n    <span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"n\">exclude_params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s1\">'.'</span> <span class=\"o\">+</span> <span class=\"n\">fun</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">exclude</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">param</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">exclude</span>\n</pre>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<div id=\"id1\">\n<h3><code>sphinxcontrib_autodoc_filterparams</code></h3>\n<p>The callback function, invoked for each function parameter. If this function\nreturns <code>True</code> then the parameter will be documented, otherwise it will\nbe excluded.</p>\n</div>\n<div id=\"sphinxcontrib-autodoc-filterparams-stars\">\n<h3><code>sphinxcontrib_autodoc_filterparams_stars</code></h3>\n<p>A boolean indicating whether or not asterisks should be prepended to parameter\nnames when invoking the callback (one star for variadic positional, two stars\nfor variadic keyword). Default is <code>True</code>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5426103, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3ca4fcffa0e19fc3dd15ea999b083d3e", "sha256": "335dc7580cc7a86f44d3dadea93ee781d43a4d68ededfbae3842d90f1e92bd41"}, "downloads": -1, "filename": "sphinxcontrib_autodoc_filterparams-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3ca4fcffa0e19fc3dd15ea999b083d3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4785, "upload_time": "2019-06-20T14:06:06", "upload_time_iso_8601": "2019-06-20T14:06:06.322887Z", "url": "https://files.pythonhosted.org/packages/06/d4/0c8cb12222d9600dda44c064ff0cbc3b2fc5498e7bea54a5b4605c1a565b/sphinxcontrib_autodoc_filterparams-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e53c6052a3ee67e5ab0f7464fa65b41", "sha256": "7dea59309629ce0aa2ea0ac52cb5dd6ba4c4f19545d8561287b94aca087158d3"}, "downloads": -1, "filename": "sphinxcontrib_autodoc_filterparams-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0e53c6052a3ee67e5ab0f7464fa65b41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3245, "upload_time": "2019-06-20T14:06:08", "upload_time_iso_8601": "2019-06-20T14:06:08.345563Z", "url": "https://files.pythonhosted.org/packages/3b/2c/6b3ddc6010b9232e97cdeb0f2b545f51afc723bcb654ecb92e5d4815fe21/sphinxcontrib_autodoc_filterparams-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ca4fcffa0e19fc3dd15ea999b083d3e", "sha256": "335dc7580cc7a86f44d3dadea93ee781d43a4d68ededfbae3842d90f1e92bd41"}, "downloads": -1, "filename": "sphinxcontrib_autodoc_filterparams-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3ca4fcffa0e19fc3dd15ea999b083d3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4785, "upload_time": "2019-06-20T14:06:06", "upload_time_iso_8601": "2019-06-20T14:06:06.322887Z", "url": "https://files.pythonhosted.org/packages/06/d4/0c8cb12222d9600dda44c064ff0cbc3b2fc5498e7bea54a5b4605c1a565b/sphinxcontrib_autodoc_filterparams-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e53c6052a3ee67e5ab0f7464fa65b41", "sha256": "7dea59309629ce0aa2ea0ac52cb5dd6ba4c4f19545d8561287b94aca087158d3"}, "downloads": -1, "filename": "sphinxcontrib_autodoc_filterparams-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0e53c6052a3ee67e5ab0f7464fa65b41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3245, "upload_time": "2019-06-20T14:06:08", "upload_time_iso_8601": "2019-06-20T14:06:08.345563Z", "url": "https://files.pythonhosted.org/packages/3b/2c/6b3ddc6010b9232e97cdeb0f2b545f51afc723bcb654ecb92e5d4815fe21/sphinxcontrib_autodoc_filterparams-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:20 2020"}