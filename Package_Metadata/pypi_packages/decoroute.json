{"info": {"author": "Vsevolod Balashov", "author_email": "vsevolod@balashov.name", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Natural Language :: Russian", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"], "description": "decoroute\n=========\n\n.. contents:\n\nDecorator style and pattern-matching based url routing library. No framework!\nVery compact. Core logic less 100 lines of code. WSGI compliant. No additional API required.\n\nComplete example\n----------------\n\n::\n\n    import decoroute\n    \n    app = decoroute.App(prefix='')\n    \n    # pure WSGI\n    @app.expose('/wsgi/<id:\\d+>')\n    @decoroute.wsgi('wsgiorg.routing_args')\n    def wsgi_app(environ, start_response):\n        start_response('200 OK', [('Content-Type', 'text/plain')])\n        return environ['wsgiorg.routing_args']\n    \n    # pass variables into **kw\n    def render_response(status = '200 OK', content_type = 'text/plain', add_headers = [], **context):\n        return status, [('Content-Type', content_type)] + add_headers, context\n    \n    @app.expose('/node', id = '1')\n    @app.expose('/node/<id:\\d+>')\n    def node(env, id):\n        return render_response(id = id)\n    \n    @app.expose('/url_for')\n    def url_for(env):\n        return render_response(url = app.url_for(node, id = 666))\n    \n    @app.expose('/404')\n    def not_found(env):\n        raise decoroute.NotFound()\n    \n    @app.not_found\n    def not_found_handler(env):\n        return render_response(status = '404 NF', **env)\n    \n    @app.render\n    def render(env, (status, headers, context)):\n        context['site_uri'] = '%s://%s' % (env['wsgi.url_scheme'], env['HTTP_HOST'])\n        return status, headers, ['%s=%s\\n' %(k, context[k]) for k in context.keys()] # fake templating\n    \n    from wsgiref.simple_server import make_server\n    \n    make_server('', 6666, app).serve_forever()\n\nTips\n----\n\nIf you place your views (Django term. in ror - controller) in another modules, organize code like\n`werkzeug <http://dev.pocoo.org/hg/werkzeug-main/file/tip/examples/shorty/>`_.\n\n::\n\n    # utils.py\n    \n    import decoroute\n    app = decoroute.App()\n\n::\n\n    # view.py and anoter\n    \n    from utils import *\n    \n    @app.render\n    def render(env, ...)\n        # returns of your endpoints pass to render handler\n        # in render use your prefered template engine and return triple\n        # status, generator of response headers, generator of response body\n        # ( generator / iterator / list - any )\n        # if you use default render endpoints must be return triple\n    \n    @app.not_found\n        # no route enpoint\n        # it also pass to render handler\n    \n    @app.expose('/node', id = '1')\n    @app.expose('/node/<id:\\d+>')\n    def node(env, id):\n        # endpoint passed some variables\n        # env is a wsgi environ\n        # id = '1' default value of parameter\n        #   all parameters must be <type 'str'>\n        # <id:\\d+> parameter pattern;\n        #   \\d+ specify regexp constraint of parameter (required)\n\n::\n\n    # manage.py - main module\n    \n    from utils import app\n    import view # and all other\n    \n    if __name__ == '__main__':\n        # serve app here\n\nLegal\n-----\n\ndecoroute distributed under terms of\n`GNU LGPL v.2.1 <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt>`_.\n\nCopyright 2008 - present `Vsevolod Balashov <http://vsevolod.balashov.name/>`_.\n\nLinks\n-----\n\nSource code of `decoroute <http://bitbucket.org/sevkin/decoroute/>`_.\nArch Linux `PKGBUILD <http://aur.archlinux.org/packages.php?ID=31564>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/decoroute", "keywords": "python wsgi decorator route routing tool mvc mtv web webdev www", "license": "LGPL 2.1", "maintainer": "", "maintainer_email": "", "name": "decoroute", "package_url": "https://pypi.org/project/decoroute/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/decoroute/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/decoroute"}, "release_url": "https://pypi.org/project/decoroute/0.8.1/", "requires_dist": null, "requires_python": null, "summary": "Pattern-matching based WSGI-compliant URL routing tool", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Decorator style and pattern-matching based url routing library. No framework!\nVery compact. Core logic less 100 lines of code. WSGI compliant. No additional API required.</p>\n<div id=\"complete-example\">\n<h2>Complete example</h2>\n<pre>import decoroute\n\napp = decoroute.App(prefix='')\n\n# pure WSGI\n@app.expose('/wsgi/&lt;id:\\d+&gt;')\n@decoroute.wsgi('wsgiorg.routing_args')\ndef wsgi_app(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return environ['wsgiorg.routing_args']\n\n# pass variables into **kw\ndef render_response(status = '200 OK', content_type = 'text/plain', add_headers = [], **context):\n    return status, [('Content-Type', content_type)] + add_headers, context\n\n@app.expose('/node', id = '1')\n@app.expose('/node/&lt;id:\\d+&gt;')\ndef node(env, id):\n    return render_response(id = id)\n\n@app.expose('/url_for')\ndef url_for(env):\n    return render_response(url = app.url_for(node, id = 666))\n\n@app.expose('/404')\ndef not_found(env):\n    raise decoroute.NotFound()\n\n@app.not_found\ndef not_found_handler(env):\n    return render_response(status = '404 NF', **env)\n\n@app.render\ndef render(env, (status, headers, context)):\n    context['site_uri'] = '%s://%s' % (env['wsgi.url_scheme'], env['HTTP_HOST'])\n    return status, headers, ['%s=%s\\n' %(k, context[k]) for k in context.keys()] # fake templating\n\nfrom wsgiref.simple_server import make_server\n\nmake_server('', 6666, app).serve_forever()\n</pre>\n</div>\n<div id=\"tips\">\n<h2>Tips</h2>\n<p>If you place your views (Django term. in ror - controller) in another modules, organize code like\n<a href=\"http://dev.pocoo.org/hg/werkzeug-main/file/tip/examples/shorty/\" rel=\"nofollow\">werkzeug</a>.</p>\n<pre># utils.py\n\nimport decoroute\napp = decoroute.App()\n</pre>\n<pre># view.py and anoter\n\nfrom utils import *\n\n@app.render\ndef render(env, ...)\n    # returns of your endpoints pass to render handler\n    # in render use your prefered template engine and return triple\n    # status, generator of response headers, generator of response body\n    # ( generator / iterator / list - any )\n    # if you use default render endpoints must be return triple\n\n@app.not_found\n    # no route enpoint\n    # it also pass to render handler\n\n@app.expose('/node', id = '1')\n@app.expose('/node/&lt;id:\\d+&gt;')\ndef node(env, id):\n    # endpoint passed some variables\n    # env is a wsgi environ\n    # id = '1' default value of parameter\n    #   all parameters must be &lt;type 'str'&gt;\n    # &lt;id:\\d+&gt; parameter pattern;\n    #   \\d+ specify regexp constraint of parameter (required)\n</pre>\n<pre># manage.py - main module\n\nfrom utils import app\nimport view # and all other\n\nif __name__ == '__main__':\n    # serve app here\n</pre>\n</div>\n<div id=\"legal\">\n<h2>Legal</h2>\n<p>decoroute distributed under terms of\n<a href=\"http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt\" rel=\"nofollow\">GNU LGPL v.2.1</a>.</p>\n<p>Copyright 2008 - present <a href=\"http://vsevolod.balashov.name/\" rel=\"nofollow\">Vsevolod Balashov</a>.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<p>Source code of <a href=\"http://bitbucket.org/sevkin/decoroute/\" rel=\"nofollow\">decoroute</a>.\nArch Linux <a href=\"http://aur.archlinux.org/packages.php?ID=31564\" rel=\"nofollow\">PKGBUILD</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 788875, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "f2af41ad753ad0ad39d728020ac2fe94", "sha256": "54f3f9aef95ce17ad97dc745e6d8445402490bb0906d117a22e26260026bd649"}, "downloads": -1, "filename": "decoroute-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f2af41ad753ad0ad39d728020ac2fe94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5949, "upload_time": "2009-10-28T09:06:20", "upload_time_iso_8601": "2009-10-28T09:06:20.733276Z", "url": "https://files.pythonhosted.org/packages/9b/15/a2efe5cc43a6d1f74e1e320acaee1d1dc7e7e24a1b0292d366171fc0579b/decoroute-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2af41ad753ad0ad39d728020ac2fe94", "sha256": "54f3f9aef95ce17ad97dc745e6d8445402490bb0906d117a22e26260026bd649"}, "downloads": -1, "filename": "decoroute-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f2af41ad753ad0ad39d728020ac2fe94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5949, "upload_time": "2009-10-28T09:06:20", "upload_time_iso_8601": "2009-10-28T09:06:20.733276Z", "url": "https://files.pythonhosted.org/packages/9b/15/a2efe5cc43a6d1f74e1e320acaee1d1dc7e7e24a1b0292d366171fc0579b/decoroute-0.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:34 2020"}