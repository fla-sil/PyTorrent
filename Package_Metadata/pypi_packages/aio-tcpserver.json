{"info": {"author": "hsz", "author_email": "hsz1273327@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Documentation :: Sphinx"], "description": "\naio-tcpserver\n===============================\n\n* version: 0.0.3\n\n* status: dev\n\n* author: hsz\n\n* email: hsz1273327@gmail.com\n\nDesc\n--------------------------------\n\nA tcp sever for running `asyncio.Protocol`. The inspiration comes from sanic,\n\nonly support python 3.6+\n\n\nkeywords:tcp-server,asyncio\n\n\nFeature\n----------------------\n* with multiple worker\n* for asyncio.Protocol\n* can be closed by ctrl+C in windows\n* with hooks\n\nExample\n-------------------------------\n\nserver.py\n\n.. code:: python\n\n    import asyncio\n    import time\n    from aio_tcpserver import tcp_server, listener\n\n    @listener(\"before_server_start\")\n    async def beat(loop):\n        print(time.time())\n        print(\"ping\")\n\n    class EchoServerClientProtocol(asyncio.Protocol):\n        def connection_made(self, transport):\n            peername = transport.get_extra_info('peername')\n            print('Connection from {}'.format(peername))\n            self.transport = transport\n\n        def data_received(self, data):\n            message = data.decode()\n            print('Data received: {!r}'.format(message))\n\n            print('Send: {!r}'.format(message))\n            self.transport.write(data)\n\n            print('Close the client socket')\n            self.transport.close()\n\n    def main():\n        tcp_server(EchoServerClientProtocol, worker=3)\n\n\n    if __name__ == '__main__':\n        main()\n\n\nclient.py\n\n\n.. code:: python\n\n    import asyncio\n\n    class EchoClientProtocol(asyncio.Protocol):\n        def __init__(self, message, loop):\n            self.message = message\n            self.loop = loop\n\n        def connection_made(self, transport):\n            transport.write(self.message.encode())\n            print('Data sent: {!r}'.format(self.message))\n\n        def data_received(self, data):\n            print('Data received: {!r}'.format(data.decode()))\n\n        def connection_lost(self, exc):\n            print('The server closed the connection')\n            print('Stop the event loop')\n            self.loop.stop()\n\n    loop = asyncio.get_event_loop()\n    message = 'Hello World!'\n    coro = loop.create_connection(lambda: EchoClientProtocol(message, loop),\n                                '127.0.0.1', 5000)\n    loop.run_until_complete(coro)\n    loop.run_forever()\n    loop.close()\n\n\n\n\n\nInstall\n--------------------------------\n\n- ``python -m pip install aio-tcpserver``\n\n\nDocumentation\n--------------------------------\n\n`Documentation on Readthedocs <https://github.com/Basic-Components/aio-tcpserver>`_.\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Basic-Components/aio-tcpserver", "keywords": "tcp-server", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aio-tcpserver", "package_url": "https://pypi.org/project/aio-tcpserver/", "platform": "", "project_url": "https://pypi.org/project/aio-tcpserver/", "project_urls": {"Homepage": "https://github.com/Basic-Components/aio-tcpserver"}, "release_url": "https://pypi.org/project/aio-tcpserver/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "simple tools", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>version: 0.0.3</li>\n<li>status: dev</li>\n<li>author: hsz</li>\n<li>email: <a href=\"mailto:hsz1273327%40gmail.com\">hsz1273327<span>@</span>gmail<span>.</span>com</a></li>\n</ul>\n<div id=\"desc\">\n<h2>Desc</h2>\n<p>A tcp sever for running <cite>asyncio.Protocol</cite>. The inspiration comes from sanic,</p>\n<p>only support python 3.6+</p>\n<p>keywords:tcp-server,asyncio</p>\n</div>\n<div id=\"feature\">\n<h2>Feature</h2>\n<ul>\n<li>with multiple worker</li>\n<li>for asyncio.Protocol</li>\n<li>can be closed by ctrl+C in windows</li>\n<li>with hooks</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>server.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_tcpserver</span> <span class=\"kn\">import</span> <span class=\"n\">tcp_server</span><span class=\"p\">,</span> <span class=\"n\">listener</span>\n\n<span class=\"nd\">@listener</span><span class=\"p\">(</span><span class=\"s2\">\"before_server_start\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">beat</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ping\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoServerClientProtocol</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">transport</span><span class=\"p\">):</span>\n        <span class=\"n\">peername</span> <span class=\"o\">=</span> <span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">get_extra_info</span><span class=\"p\">(</span><span class=\"s1\">'peername'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Connection from </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">peername</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transport</span> <span class=\"o\">=</span> <span class=\"n\">transport</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Data received: </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Send: </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Close the client socket'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">tcp_server</span><span class=\"p\">(</span><span class=\"n\">EchoServerClientProtocol</span><span class=\"p\">,</span> <span class=\"n\">worker</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>client.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoClientProtocol</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connection_made</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">transport</span><span class=\"p\">):</span>\n        <span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Data sent: </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Data received: </span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connection_lost</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The server closed the connection'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Stop the event loop'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello World!'</span>\n<span class=\"n\">coro</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_connection</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">EchoClientProtocol</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">),</span>\n                            <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<ul>\n<li><tt>python <span class=\"pre\">-m</span> pip install <span class=\"pre\">aio-tcpserver</span></tt></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"https://github.com/Basic-Components/aio-tcpserver\" rel=\"nofollow\">Documentation on Readthedocs</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3528169, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "9ef299ee61c988766b086fbd95d22b6c", "sha256": "768c9727ceaebd7ad825fcd09c0c5f7d0da986cb3036d561472b4c034fa1b396"}, "downloads": -1, "filename": "aio_tcpserver-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9ef299ee61c988766b086fbd95d22b6c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 13377, "upload_time": "2018-01-27T15:43:31", "upload_time_iso_8601": "2018-01-27T15:43:31.974779Z", "url": "https://files.pythonhosted.org/packages/ed/17/b08a16202ef1c1df1dff94c7547544e8c3e8997919f47a1468dd87fd504e/aio_tcpserver-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04486daf8e1c93747a5700402b34c598", "sha256": "a7210ca5e4b8087ff381c449a6b4f45cbf153c53683d6560fff146f1bd18c89d"}, "downloads": -1, "filename": "aio-tcpserver-0.0.2.tar.gz", "has_sig": false, "md5_digest": "04486daf8e1c93747a5700402b34c598", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9819, "upload_time": "2018-01-27T15:43:19", "upload_time_iso_8601": "2018-01-27T15:43:19.295040Z", "url": "https://files.pythonhosted.org/packages/e9/e8/d5aa2f5e5b0008daff0f64bbfd20e0e0320570299959973d823b4ff08ca9/aio-tcpserver-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "25cdaa8156340db16e45724357b1c084", "sha256": "21f3252e787d657f792a56adc97d6a12818a395211cbe99b75dc2c9dd8e809c5"}, "downloads": -1, "filename": "aio_tcpserver-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25cdaa8156340db16e45724357b1c084", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14171, "upload_time": "2018-01-28T05:26:21", "upload_time_iso_8601": "2018-01-28T05:26:21.966286Z", "url": "https://files.pythonhosted.org/packages/e1/e6/93dcd26bff3eb331395b896c7b72d988237cf8e609c8a777e447dda91d89/aio_tcpserver-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64881de96f7d6ffa8c7b72dd201607a2", "sha256": "366ae3a468123e04391c0e10d034d6b0a6dae82d2a7e0e3dade20ba2c856d8ad"}, "downloads": -1, "filename": "aio-tcpserver-0.0.3.tar.gz", "has_sig": false, "md5_digest": "64881de96f7d6ffa8c7b72dd201607a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9690, "upload_time": "2018-01-28T05:26:17", "upload_time_iso_8601": "2018-01-28T05:26:17.658427Z", "url": "https://files.pythonhosted.org/packages/f5/83/a669d4b402be0f654a7ede51eaa1043a3fffa43587643e44518cbdfbc6b0/aio-tcpserver-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25cdaa8156340db16e45724357b1c084", "sha256": "21f3252e787d657f792a56adc97d6a12818a395211cbe99b75dc2c9dd8e809c5"}, "downloads": -1, "filename": "aio_tcpserver-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25cdaa8156340db16e45724357b1c084", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 14171, "upload_time": "2018-01-28T05:26:21", "upload_time_iso_8601": "2018-01-28T05:26:21.966286Z", "url": "https://files.pythonhosted.org/packages/e1/e6/93dcd26bff3eb331395b896c7b72d988237cf8e609c8a777e447dda91d89/aio_tcpserver-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64881de96f7d6ffa8c7b72dd201607a2", "sha256": "366ae3a468123e04391c0e10d034d6b0a6dae82d2a7e0e3dade20ba2c856d8ad"}, "downloads": -1, "filename": "aio-tcpserver-0.0.3.tar.gz", "has_sig": false, "md5_digest": "64881de96f7d6ffa8c7b72dd201607a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9690, "upload_time": "2018-01-28T05:26:17", "upload_time_iso_8601": "2018-01-28T05:26:17.658427Z", "url": "https://files.pythonhosted.org/packages/f5/83/a669d4b402be0f654a7ede51eaa1043a3fffa43587643e44518cbdfbc6b0/aio-tcpserver-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:43 2020"}