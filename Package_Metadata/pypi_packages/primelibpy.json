{"info": {"author": "MIT", "author_email": "mitbpatel0128@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "Python Prime Library\n====================\n\nThis official documentation of python prime library.\n\n-  Generate Specific type of Prime numbers between the given range\n-  Generate Random Prime number \n-  Factorization of the given number\n\n\n===============\n\nInstallation!\n=============\n\n1. If you don\u2019t have pip then follow the below procedure else go to step 2.\n\n-  For window Users\n\n   -  Download `get-pip <https://bootstrap.pypa.io/get-pip.py>`__ to a\n      folder on your computer.\n   -  Put that file on Desktop\n   -  Open cmd and run the following commands:\n   \n    ``$ cd Desktop``\n\n    ``$ python get-pip.py``\n\n-  For Mac Users\n\n   -  Install python \n   \n     ``$ brew install python``\n     \n   -  Run the following command: \n      \n     ``$ python get-pip.py``\n\n-  For Linux Users\n\n   -  Run the following commands for python(version > 2.0):\n\n      ``$ sudo apt-get install python-pip``\n   \n      ``$ sudo pacman -S python2-pip``  \n\n      ``$ sudo yum upgrade python-setuptools``\n  \n      ``$ sudo yum install python-pip python-wheel``  \n\n      ``$ sudo dnf upgrade python-setuptools``\n   \n      ``$ sudo dnf install python-pip python-wheel``\n   \n      ``$ sudo zypper install python-pip python-setuptools python-wheel``\n\n   -  Run the following commands for python(version > 3.0):\n\n      ``$ sudo apt-get install python3-pip``\n  \n      ``$ sudo pacman -S python-pip``\n  \n      ``$ sudo yum install python3 python3-wheel``\n  \n      ``$ sudo dnf install python3 python3-wheel``\n   \n      ``$ sudo zypper install python3-pip python3-setuptools python3-wheel``\n\n-  For Raspberry Users\n\n   -  Run the following commands for python(version > 2.0):\n\n      ``$ sudo apt-get install python-pip``\n\n   -  Run the following commands for python(version > 2.0):\n\n      ``$ sudo apt-get install python3-pip``\n\n2. Import gmpy2 file\n\n   -  This package is required to install primelibpy library\n   -  Run the following command \n\n      ``$ pip install gmpy2==2.1.0a2``\n\n3. Now, install the prime python library using the below command.\n\n   -  Run the following command \n\n      ``$ pip install primelibpy``\n\n4. How to use Library\n\n   -  Inside of your python IDE(Python file)\n\n      ``from primelibpy import Prime as p``\n\n   -  Now, using ``p`` all function can be used in code\n      e.g.\n\n      ``balancedNumberList = p.getBalancedPrime(2,100,2)``\n\n\n^^^^^^^^^^^^^^^^^^^^^\n\nFunctions Description\n=====================\n\n-  .. rubric:: Prime Functions\n      :name: prime-functions\n\n   In all the prime numbers Start_Limit and End_Limit are the range of prime number user wants to print inclusively.\n\nBalanced Prime\n^^^^^^^^^^^^^^\n\n   Syntex:  ``getBalancedPrime(startLimit,endLimit,balancedMode)``\n\n   Return Type: ``list`` \n\n   **Description:** Balanced_Mode is how number which\n   decide a balanced limit for prime.\n\nCircular Prime\n^^^^^^^^^^^^^^\n\n   Syntex: ``getCircularPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nCousin Prime\n^^^^^^^^^^^^\n\n   Syntex:  ``getCousinPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\n   **Description**: Cousin prime are in pair so return list is have list\n   inside it e.g.[ [1,2], [2,3] ]\n\nDouble Mersenne Prime\n^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getDoubleMersennePrime(startLimit,endLimit)``\n \n   Return Type:  ``list``\n\nFactorial Prime\n^^^^^^^^^^^^^^^\n\n   Syntex: ``getFactorialPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nGood Prime\n^^^^^^^^^^\n\n   Syntex: ``getGoodPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nMersenne Prime\n^^^^^^^^^^^^^^\n\n   Syntex: ``getMersennePrime(startLimit,endLimit)`` \n\n   Return Type:  ``list``\n\nPalindromic Prime\n^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getPalindromicPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nPermutable Prime\n^^^^^^^^^^^^^^^^\n\n   Syntex: ``getPermutablePrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nPrimorial Prime\n^^^^^^^^^^^^^^^\n\n   Syntex: ``getPrimorialPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nFermat Pseudo Prime\n^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getFermatPseudoPrime(startLimit,endLimit,baseNumber)`` \n\n   Return Type: ``list`` \n\n   **Description:** Base_number helps to generate a composite\n   the number and the second argument is Total number of Pseudo primes\n\nPythagorean Prime\n^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getPythagoreanPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nReversible Prime\n^^^^^^^^^^^^^^^^\n\n   Syntex: ``getReversiblePrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nSemi Prime\n^^^^^^^^^^\n\n   Syntex: ``getSemiPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nSophie Germain Prime\n^^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getSophieGermainPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nTwin Prime\n^^^^^^^^^^\n\n   Syntex: ``getTwinPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\n   **Description:** Twin prime are in pair so return list is have list\n   inside it e.g.[ [1,2], [2,3] ]\n\nWagstaff Prime\n^^^^^^^^^^^^^^\n\n   Syntex: ``getWagstaffPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nWieferich Prime\n^^^^^^^^^^^^^^^\n\n   Syntex: ``getWieferichPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nWilson Prime\n^^^^^^^^^^^^\n\n   Syntex: ``getWilsonPrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nLeft Truncatable Prime\n^^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getLeftTruncatablePrime(startLimit,endLimit)`` \n\n   Return Type:  ``list``\n\nRight Truncatable Prime\n^^^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getRightTruncatablePrime(startLimit,endLimit)``\n \n   Return Type: ``list``\n\nTruncatable Prime\n^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getTruncatablePrime(startLimit,endLimit)`` \n\n   Return Type: ``list``\n\nGaussian Prime\n^^^^^^^^^^^^^^\n\n   Syntex:     ``checkGaussianPrime(realPart,imaginaryPart)`` \n\n   Return Type:    ``None``\n\n   **Note:** ``This will print whether the number is gaussian or not``\n\n=======================\n\nRandom Prime Generation\n=======================\n\nRandom Prime generation function has three arguments and it requires little knowledge of above all functions. \n\nThe first argument is the type of prime number. Note that **name of prime** followed by **Prime**. The name of the prime type has to be in the capital.\n\ne.g. ``PrimorialPrime``\n\n\nThe second argument is the number of digits of random numbers. \n\nThe third argument is only mandatory for balanced prime numbers.\n\n   Syntex: ``getRandomPrime(primeType,totalDigits,mode=0)``\n\n   Return Type: ``integer``\n\n\nExample:\n\n    ``import Prime as p``\n\n    ``randomPrimorial = p.getRandomPrime(\"PrimorialPrime\",3)``\n\n\n===============\n\nFactorization\n=============\n      \n      \n\nTraditional Way for Factorization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex:   ``getFactorTraditional(compositeNumber)`` \n\n   Return Type:   ``list``\n\nFermat Theorem for Factorization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex:   ``getFactorFermatTheorem(compositeNumber)`` \n\n   Return Type:   ``tuple`` \n\n   **Note**: This is only for composite number who have only two\n   prime factors except for the number itself e.g. 33 have two prime factors 3\n   and 11.\n\nPollard Rho for Factorization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   Syntex: ``getFactorPollardRho(compositeNumber)`` \n\n   Return Type: ``integer`` \n\n   **Note:** This will return any one factor of the given number\n   because this algorithm works on random numbers.\n\nLicense\n-------\n\nMIT\n\n**Free Software, Hell Yeah!**", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mit1280/primelibpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "primelibpy", "package_url": "https://pypi.org/project/primelibpy/", "platform": "", "project_url": "https://pypi.org/project/primelibpy/", "project_urls": {"Homepage": "https://github.com/mit1280/primelibpy"}, "release_url": "https://pypi.org/project/primelibpy/1.5/", "requires_dist": null, "requires_python": ">=3.0", "summary": "This library can be used in cryptoanalysis and some compatitive exams. It cover many different types of prime number and three factorization algorithems. This library also helps to generate random spacific type of prime number with desire digits. To use this library you mast have python 3.x", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-prime-library\">\n<h2>Python Prime Library</h2>\n<p>This official documentation of python prime library.</p>\n<ul>\n<li>Generate Specific type of Prime numbers between the given range</li>\n<li>Generate Random Prime number</li>\n<li>Factorization of the given number</li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div id=\"installation\">\n<h2>Installation!</h2>\n<ol>\n<li>If you don\u2019t have pip then follow the below procedure else go to step 2.</li>\n</ol>\n<ul>\n<li><p>For window Users</p>\n<ul>\n<li>Download <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"nofollow\">get-pip</a> to a\nfolder on your computer.</li>\n<li>Put that file on Desktop</li>\n<li>Open cmd and run the following commands:</li>\n</ul>\n<blockquote>\n<p><tt>$ cd Desktop</tt></p>\n<p><tt>$ python <span class=\"pre\">get-pip.py</span></tt></p>\n</blockquote>\n</li>\n<li><p>For Mac Users</p>\n<ul>\n<li>Install python</li>\n</ul>\n<blockquote>\n<p><tt>$ brew install python</tt></p>\n</blockquote>\n<ul>\n<li>Run the following command:</li>\n</ul>\n<blockquote>\n<p><tt>$ python <span class=\"pre\">get-pip.py</span></tt></p>\n</blockquote>\n</li>\n<li><p>For Linux Users</p>\n<ul>\n<li><p>Run the following commands for python(version &gt; 2.0):</p>\n<p><tt>$ sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">python-pip</span></tt></p>\n<p><tt>$ sudo pacman <span class=\"pre\">-S</span> <span class=\"pre\">python2-pip</span></tt></p>\n<p><tt>$ sudo yum upgrade <span class=\"pre\">python-setuptools</span></tt></p>\n<p><tt>$ sudo yum install <span class=\"pre\">python-pip</span> <span class=\"pre\">python-wheel</span></tt></p>\n<p><tt>$ sudo dnf upgrade <span class=\"pre\">python-setuptools</span></tt></p>\n<p><tt>$ sudo dnf install <span class=\"pre\">python-pip</span> <span class=\"pre\">python-wheel</span></tt></p>\n<p><tt>$ sudo zypper install <span class=\"pre\">python-pip</span> <span class=\"pre\">python-setuptools</span> <span class=\"pre\">python-wheel</span></tt></p>\n</li>\n<li><p>Run the following commands for python(version &gt; 3.0):</p>\n<p><tt>$ sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">python3-pip</span></tt></p>\n<p><tt>$ sudo pacman <span class=\"pre\">-S</span> <span class=\"pre\">python-pip</span></tt></p>\n<p><tt>$ sudo yum install python3 <span class=\"pre\">python3-wheel</span></tt></p>\n<p><tt>$ sudo dnf install python3 <span class=\"pre\">python3-wheel</span></tt></p>\n<p><tt>$ sudo zypper install <span class=\"pre\">python3-pip</span> <span class=\"pre\">python3-setuptools</span> <span class=\"pre\">python3-wheel</span></tt></p>\n</li>\n</ul>\n</li>\n<li><p>For Raspberry Users</p>\n<ul>\n<li><p>Run the following commands for python(version &gt; 2.0):</p>\n<p><tt>$ sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">python-pip</span></tt></p>\n</li>\n<li><p>Run the following commands for python(version &gt; 2.0):</p>\n<p><tt>$ sudo <span class=\"pre\">apt-get</span> install <span class=\"pre\">python3-pip</span></tt></p>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>Import gmpy2 file</p>\n<ul>\n<li><p>This package is required to install primelibpy library</p>\n</li>\n<li><p>Run the following command</p>\n<p><tt>$ pip install <span class=\"pre\">gmpy2==2.1.0a2</span></tt></p>\n</li>\n</ul>\n</li>\n<li><p>Now, install the prime python library using the below command.</p>\n<ul>\n<li><p>Run the following command</p>\n<p><tt>$ pip install primelibpy</tt></p>\n</li>\n</ul>\n</li>\n<li><p>How to use Library</p>\n<ul>\n<li><p>Inside of your python IDE(Python file)</p>\n<p><tt>from primelibpy import Prime as p</tt></p>\n</li>\n<li><p>Now, using <tt>p</tt> all function can be used in code\ne.g.</p>\n<p><tt>balancedNumberList = p.getBalancedPrime(2,100,2)</tt></p>\n</li>\n</ul>\n</li>\n</ol>\n</div>\n<hr class=\"docutils\">\n<div id=\"functions-description\">\n<h2>Functions Description</h2>\n<ul>\n<li><p id=\"prime-functions\">Prime Functions</p>\n<p>In all the prime numbers Start_Limit and End_Limit are the range of prime number user wants to print inclusively.</p>\n</li>\n</ul>\n<div id=\"balanced-prime\">\n<h3>Balanced Prime</h3>\n<blockquote>\n<p>Syntex:  <tt>getBalancedPrime(startLimit,endLimit,balancedMode)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n<p><strong>Description:</strong> Balanced_Mode is how number which\ndecide a balanced limit for prime.</p>\n</blockquote>\n</div>\n<div id=\"circular-prime\">\n<h3>Circular Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getCircularPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"cousin-prime\">\n<h3>Cousin Prime</h3>\n<blockquote>\n<p>Syntex:  <tt>getCousinPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n<p><strong>Description</strong>: Cousin prime are in pair so return list is have list\ninside it e.g.[ [1,2], [2,3] ]</p>\n</blockquote>\n</div>\n<div id=\"double-mersenne-prime\">\n<h3>Double Mersenne Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getDoubleMersennePrime(startLimit,endLimit)</tt></p>\n<p>Return Type:  <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"factorial-prime\">\n<h3>Factorial Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getFactorialPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"good-prime\">\n<h3>Good Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getGoodPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"mersenne-prime\">\n<h3>Mersenne Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getMersennePrime(startLimit,endLimit)</tt></p>\n<p>Return Type:  <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"palindromic-prime\">\n<h3>Palindromic Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getPalindromicPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"permutable-prime\">\n<h3>Permutable Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getPermutablePrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"primorial-prime\">\n<h3>Primorial Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getPrimorialPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"fermat-pseudo-prime\">\n<h3>Fermat Pseudo Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getFermatPseudoPrime(startLimit,endLimit,baseNumber)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n<p><strong>Description:</strong> Base_number helps to generate a composite\nthe number and the second argument is Total number of Pseudo primes</p>\n</blockquote>\n</div>\n<div id=\"pythagorean-prime\">\n<h3>Pythagorean Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getPythagoreanPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"reversible-prime\">\n<h3>Reversible Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getReversiblePrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"semi-prime\">\n<h3>Semi Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getSemiPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"sophie-germain-prime\">\n<h3>Sophie Germain Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getSophieGermainPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"twin-prime\">\n<h3>Twin Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getTwinPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n<p><strong>Description:</strong> Twin prime are in pair so return list is have list\ninside it e.g.[ [1,2], [2,3] ]</p>\n</blockquote>\n</div>\n<div id=\"wagstaff-prime\">\n<h3>Wagstaff Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getWagstaffPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"wieferich-prime\">\n<h3>Wieferich Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getWieferichPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"wilson-prime\">\n<h3>Wilson Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getWilsonPrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"left-truncatable-prime\">\n<h3>Left Truncatable Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getLeftTruncatablePrime(startLimit,endLimit)</tt></p>\n<p>Return Type:  <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"right-truncatable-prime\">\n<h3>Right Truncatable Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getRightTruncatablePrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"truncatable-prime\">\n<h3>Truncatable Prime</h3>\n<blockquote>\n<p>Syntex: <tt>getTruncatablePrime(startLimit,endLimit)</tt></p>\n<p>Return Type: <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"gaussian-prime\">\n<h3>Gaussian Prime</h3>\n<blockquote>\n<p>Syntex:     <tt>checkGaussianPrime(realPart,imaginaryPart)</tt></p>\n<p>Return Type:    <tt>None</tt></p>\n<p><strong>Note:</strong> <tt>This will print whether the number is gaussian or not</tt></p>\n</blockquote>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"random-prime-generation\">\n<h2>Random Prime Generation</h2>\n<p>Random Prime generation function has three arguments and it requires little knowledge of above all functions.</p>\n<p>The first argument is the type of prime number. Note that <strong>name of prime</strong> followed by <strong>Prime</strong>. The name of the prime type has to be in the capital.</p>\n<p>e.g. <tt>PrimorialPrime</tt></p>\n<p>The second argument is the number of digits of random numbers.</p>\n<p>The third argument is only mandatory for balanced prime numbers.</p>\n<blockquote>\n<p>Syntex: <tt>getRandomPrime(primeType,totalDigits,mode=0)</tt></p>\n<p>Return Type: <tt>integer</tt></p>\n</blockquote>\n<p>Example:</p>\n<blockquote>\n<p><tt>import Prime as p</tt></p>\n<p><tt>randomPrimorial = <span class=\"pre\">p.getRandomPrime(\"PrimorialPrime\",3)</span></tt></p>\n</blockquote>\n</div>\n<hr class=\"docutils\">\n<div id=\"factorization\">\n<h2>Factorization</h2>\n<div id=\"traditional-way-for-factorization\">\n<h3>Traditional Way for Factorization</h3>\n<blockquote>\n<p>Syntex:   <tt>getFactorTraditional(compositeNumber)</tt></p>\n<p>Return Type:   <tt>list</tt></p>\n</blockquote>\n</div>\n<div id=\"fermat-theorem-for-factorization\">\n<h3>Fermat Theorem for Factorization</h3>\n<blockquote>\n<p>Syntex:   <tt>getFactorFermatTheorem(compositeNumber)</tt></p>\n<p>Return Type:   <tt>tuple</tt></p>\n<p><strong>Note</strong>: This is only for composite number who have only two\nprime factors except for the number itself e.g. 33 have two prime factors 3\nand 11.</p>\n</blockquote>\n</div>\n<div id=\"pollard-rho-for-factorization\">\n<h3>Pollard Rho for Factorization</h3>\n<blockquote>\n<p>Syntex: <tt>getFactorPollardRho(compositeNumber)</tt></p>\n<p>Return Type: <tt>integer</tt></p>\n<p><strong>Note:</strong> This will return any one factor of the given number\nbecause this algorithm works on random numbers.</p>\n</blockquote>\n<div id=\"license\">\n<h4>License</h4>\n<p>MIT</p>\n<p><strong>Free Software, Hell Yeah!</strong></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6311351, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "76b62d154d9dfea0346f41ae1726abbe", "sha256": "de3946be3a65ee8d3ba7e052706d740ad3587f14452651421dadd1595bb2c5f5"}, "downloads": -1, "filename": "primelibpy-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76b62d154d9dfea0346f41ae1726abbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7201, "upload_time": "2019-09-15T16:04:07", "upload_time_iso_8601": "2019-09-15T16:04:07.796138Z", "url": "https://files.pythonhosted.org/packages/56/6c/7bbcdd8b04e74d4a30a9d6c8c7e15d60315b8680558acded837e7a03a17d/primelibpy-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01ccc87cd35cbb48bc2b6149db5e0648", "sha256": "568d57c3002d5f90228bdef228470b644ef7ded3e8ce9fa89d24e82097d3301b"}, "downloads": -1, "filename": "primelibpy-0.2.tar.gz", "has_sig": false, "md5_digest": "01ccc87cd35cbb48bc2b6149db5e0648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4507, "upload_time": "2019-09-15T15:07:48", "upload_time_iso_8601": "2019-09-15T15:07:48.574458Z", "url": "https://files.pythonhosted.org/packages/0b/1f/055fe8edef42740b590ede5ca5f4c4bfbb12bf676a3a22c89c4f731bf7c8/primelibpy-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0d59f3801281ba0c22f8098ff41115cc", "sha256": "416403ca7787d80fbfdc4c610ac819bb97d8eedd289b0b57b4eef4d3244af33f"}, "downloads": -1, "filename": "primelibpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0d59f3801281ba0c22f8098ff41115cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 7839, "upload_time": "2019-09-16T06:18:33", "upload_time_iso_8601": "2019-09-16T06:18:33.366788Z", "url": "https://files.pythonhosted.org/packages/65/ad/8503d20c0cdc347a519b3d38d123c8669e8fc6e240d7680a6402f7d2ecd1/primelibpy-0.2.1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "b144efb707d9ba8141b97ae51c25f4f6", "sha256": "89ac2316e68022549af06de0b330a0e4adcb3540bbac90594e2340637dda38b5"}, "downloads": -1, "filename": "primelibpy-1.3.tar.gz", "has_sig": false, "md5_digest": "b144efb707d9ba8141b97ae51c25f4f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 7973, "upload_time": "2019-09-19T03:37:11", "upload_time_iso_8601": "2019-09-19T03:37:11.076241Z", "url": "https://files.pythonhosted.org/packages/e7/d8/6fe229bf1ed70c8aa19da1ffe1a2d51c5df3970dac1dbfa04f786e13c723/primelibpy-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "9dde8fc5d663366abc4258d68cdac94a", "sha256": "e167fb2f02b362c078bf7f56ece4218265ab20be7edb5751507df0052b7c1517"}, "downloads": -1, "filename": "primelibpy-1.4.tar.gz", "has_sig": false, "md5_digest": "9dde8fc5d663366abc4258d68cdac94a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8565, "upload_time": "2019-10-29T05:29:27", "upload_time_iso_8601": "2019-10-29T05:29:27.494592Z", "url": "https://files.pythonhosted.org/packages/fe/22/75138469181f59914ca6eb4702aa69331bf1112cb24a2abb5c8930839967/primelibpy-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "e2dad50da52d298f06e876849d16ae04", "sha256": "61e66a9634828706cd7ac99fce6e4bd0bb5e376d487d9aa62c7b0d12ea2d0adb"}, "downloads": -1, "filename": "primelibpy-1.5.tar.gz", "has_sig": false, "md5_digest": "e2dad50da52d298f06e876849d16ae04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8475, "upload_time": "2019-12-16T13:52:32", "upload_time_iso_8601": "2019-12-16T13:52:32.882215Z", "url": "https://files.pythonhosted.org/packages/5b/45/716d7cb48271ceb637ffd5ed83193853ce0d39e46df141388a93a0aba56c/primelibpy-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2dad50da52d298f06e876849d16ae04", "sha256": "61e66a9634828706cd7ac99fce6e4bd0bb5e376d487d9aa62c7b0d12ea2d0adb"}, "downloads": -1, "filename": "primelibpy-1.5.tar.gz", "has_sig": false, "md5_digest": "e2dad50da52d298f06e876849d16ae04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 8475, "upload_time": "2019-12-16T13:52:32", "upload_time_iso_8601": "2019-12-16T13:52:32.882215Z", "url": "https://files.pythonhosted.org/packages/5b/45/716d7cb48271ceb637ffd5ed83193853ce0d39e46df141388a93a0aba56c/primelibpy-1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:26 2020"}