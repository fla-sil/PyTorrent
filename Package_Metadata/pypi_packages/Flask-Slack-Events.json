{"info": {"author": "mongkok", "author_email": "domake.io@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask Slack Events\n==================\n\n|Pypi| |Build Status| |Codecov| |Code Climate|\n\n\n`Slack event subscriptions <https://api.slack.com/events-api#subscriptions>`_ for `Flask <http://flask.pocoo.org>`_\n\n\nInstallation\n------------\n\nInstall last stable version from Pypi::\n\n    pip install flask-slack-events\n\n\nCreate a Slack bot user\n-----------------------\n\nSee the `Slack's documentation <https://api.slack.com/bot-users#getting-started>`_ for further guidance on creating your bot (**step 1**).\n\nWithin the *Basic Information* about your application, copy the **Signing Secret** necessary to `verify requests from Slack <https://api.slack.com/docs/verifying-requests-from-slack>`_.\n\n..  image:: https://user-images.githubusercontent.com/5514990/53696736-cfde0e00-3dfc-11e9-9aeb-23d184f8c600.png\n    :alt: Signing Secret\n\n\nConfigure your Application\n--------------------------\n\nYou should create a ``SlackManager`` object within your application:\n\n.. code-block:: python\n\n    slack_manager = SlackManager()\n\n`Configure your application object <http://flask.pocoo.org/docs/1.0/config/#configuration-basics>`_ updating the ``SLACK_SIGNING_SECRET`` key with the value obtained in the previous **step 1**:\n\n.. code-block:: python\n\n    app.config['SLACK_SIGNING_SECRET'] = '<your Signing Secret>'\n\nOnce the actual application object has been created, you can configure it for *SlackManager* object with::\n\n    slack_manager.init_app(app)\n\n\nConfigure your Slack Bot\n------------------------\n\nContinue with the `Slacks's documentation <https://api.slack.com/bot-users#setup-events-api>`_ to setting up the Events API (**step 2**) and enter the URL to receive the subscriptions joining your host and the relative path ``/slack/events``:\n\n..  image:: https://user-images.githubusercontent.com/5514990/53696747-e5533800-3dfc-11e9-8cef-4fd13d06e6ef.png\n    :alt: Enable Event\n\nFinally, install your bot to a workspace (**step 3**).\n\n\nHow it Works\n------------\n\nNow in order to subscribe to `Slack Events <https://api.slack.com/events>`_, use the ``SlackManager.on`` decorator:\n\n.. code-block:: python\n\n    # Reply to only the message events that mention your bot\n\n    @slack_manager.on('app_mention')\n    def reply_to_app_mention(sender, data, **extra):\n        event = data['event']\n\n        slack_client.api_call(\n            'chat.postMessage',\n            channel=event['channel'],\n            text=f\":robot_face: Hello <@{event['user']}>!\")\n\n\nContext Processors\n------------------\n\nTo inject new variables automatically into the context of a handler, context processors exist in *Flask-Slack-Events*.\n\nA context processor is a function that returns a dictionary:\n\n.. code-block:: python\n\n    @slack_manager.context_processor\n    def context_processor(data):\n        return dict(my_bot_id='UAZ02BCBH')\n\nThe injected variables will be sent as an ``extra`` argument for each event handler ``f(sender, data, **extra)``.\n\n\nDispatch Events Asynchronously\n------------------------------\n\nSome event handlers can delay the execution of another, to avoid this you can configure the event dispatcher and call handlers asynchronously:\n\n.. code-block:: python\n\n    @slack_manager.dispatch_event_handler\n    def async_event_dispatcher(sender, data, handlers, **extra):\n        for handler in handlers:\n            task(handler)(data, **extra)\n\n\nSubscribe to Signals\n--------------------\n\nThe following signals are sended internally by *Flask-Slack-Events*:\n\nsignals.request_unauthorized\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Sent when the request received is unauthorized\n\n    Receiver: ``f(sender, **extra)``\n\nsignals.expired_event\n~~~~~~~~~~~~~~~~~~~~~\n\n    Sent when the event has expired according to the value of ``SLACK_EVENT_EXPIRATION_DELTA`` and the HTTP header ``X-Slack-Request-Timestamp`` received\n\n    Receiver: ``f(sender, **extra)``\n\nsignals.invalid_signature\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Sent when the signature included within the HTTP header ``X-Slack-Signature`` is invalid\n\n    Receiver: ``f(sender, **extra)``\n\n\nsignals.event_received\n~~~~~~~~~~~~~~~~~~~~~~\n\n    Sent when an event has been received\n\n    Receiver: ``f(sender, data, **extra)``\n\n\nSlackManager Handlers\n---------------------\n\nThe following handlers are used internally by *Flask-Slack-Events*:\n\nSlackManager.unauthorized_handler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Called to handle an unauthorized request\n\n    Handler: ``f()``\n\n    Default: ``SlackManager.unauthorized()``\n\nSlackManager.expired_event_handler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Called to handle an expired event\n\n    Handler: ``f()``\n\n    Default: ``SlackManager.expired_event()``\n\nSlackManager.invalid_signature_handler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Called to handle a request with an invalid signature\n\n    Handler: ``f()``\n\n    Default: ``SlackManager.invalid_signature()``\n\n\nSlackManager.dispatch_event_handler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Called to dispatch the event to all handlers connected with ``SlackManager.on(event_type)`` decorator\n\n    Handler: ``f(sender, data, handlers, **extra)``\n\n    Default: ``SlackManager.dispatch_event(data)``\n\n\nConfiguration\n-------------\n\nThe following configuration values are used internally by *Flask-Slack-Events*:\n\nSLACK_SIGNING_SECRET\n~~~~~~~~~~~~~~~~~~~~\n\n    Signing Secret to verify whether requests from *Slack* are authentic\n\n    Default: ``''``\n\nSLACK_EVENTS_URL\n~~~~~~~~~~~~~~~~\n\n    URL rule that is used to register the *Subscription View*\n\n    Default: ``/slack/events``\n\nSLACK_EVENT_EXPIRATION_DELTA\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Timedelta added to ``time.time()`` to set the expiration time of each event\n    If the value is ``None`` then the event never expires\n\n    Default: ``timedelta(seconds=60 * 5)`` (5 minutes)\n\n\nMarvin the Paranoid Android\n---------------------------\n\n`Marvin <https://github.com/longstem/marvin>`_ is a **Slack Bot layout** for *Flask* to develop `Slack Event <https://api.slack.com/events>`_ handlers and deploy on *AWS Lambda* + *API Gateway*\n\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/flask-slack-events.svg\n   :target: https://pypi.python.org/pypi/flask-slack-events\n   :alt: Pypi\n\n.. |Build Status| image:: https://travis-ci.org/longstem/flask-slack-events.svg?branch=master\n   :target: https://travis-ci.org/longstem/flask-slack-events\n   :alt: Build Status\n\n.. |Codecov| image:: https://img.shields.io/codecov/c/github/longstem/flask-slack-events.svg\n   :target: https://codecov.io/gh/longstem/flask-slack-events\n   :alt: Codecov\n\n.. |Code Climate| image:: https://api.codeclimate.com/v1/badges/c79a185d546f7e34fdd6/maintainability\n   :target: https://codeclimate.com/github/longstem/flask-slack-events\n   :alt: Codeclimate\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/longstem/flask-slack-events", "keywords": "flask", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-Slack-Events", "package_url": "https://pypi.org/project/Flask-Slack-Events/", "platform": "", "project_url": "https://pypi.org/project/Flask-Slack-Events/", "project_urls": {"Homepage": "https://github.com/longstem/flask-slack-events"}, "release_url": "https://pypi.org/project/Flask-Slack-Events/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Slack event subscriptions for Flask", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/flask-slack-events\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ceae43bfe62eb99eb368a2bb9a544b820dc364c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d736c61636b2d6576656e74732e737667\"></a> <a href=\"https://travis-ci.org/longstem/flask-slack-events\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a25034436b1a7d19a9b54a6434ad1ef1a3f74c6/68747470733a2f2f7472617669732d63692e6f72672f6c6f6e677374656d2f666c61736b2d736c61636b2d6576656e74732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/longstem/flask-slack-events\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4b84e913a25f6cca4a880a33668deca196932d43/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6c6f6e677374656d2f666c61736b2d736c61636b2d6576656e74732e737667\"></a> <a href=\"https://codeclimate.com/github/longstem/flask-slack-events\" rel=\"nofollow\"><img alt=\"Codeclimate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f92d8961e39f67e11dba4a3bf4867bba5461b6bb/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f63373961313835643534366637653334666464362f6d61696e7461696e6162696c697479\"></a></p>\n<p><a href=\"https://api.slack.com/events-api#subscriptions\" rel=\"nofollow\">Slack event subscriptions</a> for <a href=\"http://flask.pocoo.org\" rel=\"nofollow\">Flask</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install last stable version from Pypi:</p>\n<pre>pip install flask-slack-events\n</pre>\n</div>\n<div id=\"create-a-slack-bot-user\">\n<h2>Create a Slack bot user</h2>\n<p>See the <a href=\"https://api.slack.com/bot-users#getting-started\" rel=\"nofollow\">Slack\u2019s documentation</a> for further guidance on creating your bot (<strong>step 1</strong>).</p>\n<p>Within the <em>Basic Information</em> about your application, copy the <strong>Signing Secret</strong> necessary to <a href=\"https://api.slack.com/docs/verifying-requests-from-slack\" rel=\"nofollow\">verify requests from Slack</a>.</p>\n<img alt=\"Signing Secret\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e05bbdf0d681c7753e046205de15952e45a20ffb/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f353531343939302f35333639363733362d63666465306530302d336466632d313165392d396165622d3233643138346638633630302e706e67\">\n</div>\n<div id=\"configure-your-application\">\n<h2>Configure your Application</h2>\n<p>You should create a <tt>SlackManager</tt> object within your application:</p>\n<pre><span class=\"n\">slack_manager</span> <span class=\"o\">=</span> <span class=\"n\">SlackManager</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"http://flask.pocoo.org/docs/1.0/config/#configuration-basics\" rel=\"nofollow\">Configure your application object</a> updating the <tt>SLACK_SIGNING_SECRET</tt> key with the value obtained in the previous <strong>step 1</strong>:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'SLACK_SIGNING_SECRET'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;your Signing Secret&gt;'</span>\n</pre>\n<p>Once the actual application object has been created, you can configure it for <em>SlackManager</em> object with:</p>\n<pre>slack_manager.init_app(app)\n</pre>\n</div>\n<div id=\"configure-your-slack-bot\">\n<h2>Configure your Slack Bot</h2>\n<p>Continue with the <a href=\"https://api.slack.com/bot-users#setup-events-api\" rel=\"nofollow\">Slacks\u2019s documentation</a> to setting up the Events API (<strong>step 2</strong>) and enter the URL to receive the subscriptions joining your host and the relative path <tt>/slack/events</tt>:</p>\n<img alt=\"Enable Event\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b69b559ddcabb1edc2173124085970aaf6f65b7/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f353531343939302f35333639363734372d65353533333830302d336466632d313165392d386365662d3466643133643036653665662e706e67\">\n<p>Finally, install your bot to a workspace (<strong>step 3</strong>).</p>\n</div>\n<div id=\"how-it-works\">\n<h2>How it Works</h2>\n<p>Now in order to subscribe to <a href=\"https://api.slack.com/events\" rel=\"nofollow\">Slack Events</a>, use the <tt>SlackManager.on</tt> decorator:</p>\n<pre><span class=\"c1\"># Reply to only the message events that mention your bot</span>\n\n<span class=\"nd\">@slack_manager</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s1\">'app_mention'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">reply_to_app_mention</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n    <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'event'</span><span class=\"p\">]</span>\n\n    <span class=\"n\">slack_client</span><span class=\"o\">.</span><span class=\"n\">api_call</span><span class=\"p\">(</span>\n        <span class=\"s1\">'chat.postMessage'</span><span class=\"p\">,</span>\n        <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'channel'</span><span class=\"p\">],</span>\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\":robot_face: Hello &lt;@</span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&gt;!\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"context-processors\">\n<h2>Context Processors</h2>\n<p>To inject new variables automatically into the context of a handler, context processors exist in <em>Flask-Slack-Events</em>.</p>\n<p>A context processor is a function that returns a dictionary:</p>\n<pre><span class=\"nd\">@slack_manager</span><span class=\"o\">.</span><span class=\"n\">context_processor</span>\n<span class=\"k\">def</span> <span class=\"nf\">context_processor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">my_bot_id</span><span class=\"o\">=</span><span class=\"s1\">'UAZ02BCBH'</span><span class=\"p\">)</span>\n</pre>\n<p>The injected variables will be sent as an <tt>extra</tt> argument for each event handler <tt>f(sender, data, **extra)</tt>.</p>\n</div>\n<div id=\"dispatch-events-asynchronously\">\n<h2>Dispatch Events Asynchronously</h2>\n<p>Some event handlers can delay the execution of another, to avoid this you can configure the event dispatcher and call handlers asynchronously:</p>\n<pre><span class=\"nd\">@slack_manager</span><span class=\"o\">.</span><span class=\"n\">dispatch_event_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">async_event_dispatcher</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">handlers</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">handler</span> <span class=\"ow\">in</span> <span class=\"n\">handlers</span><span class=\"p\">:</span>\n        <span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"subscribe-to-signals\">\n<h2>Subscribe to Signals</h2>\n<p>The following signals are sended internally by <em>Flask-Slack-Events</em>:</p>\n<div id=\"signals-request-unauthorized\">\n<h3>signals.request_unauthorized</h3>\n<blockquote>\n<p>Sent when the request received is unauthorized</p>\n<p>Receiver: <tt>f(sender, **extra)</tt></p>\n</blockquote>\n</div>\n<div id=\"signals-expired-event\">\n<h3>signals.expired_event</h3>\n<blockquote>\n<p>Sent when the event has expired according to the value of <tt>SLACK_EVENT_EXPIRATION_DELTA</tt> and the HTTP header <tt><span class=\"pre\">X-Slack-Request-Timestamp</span></tt> received</p>\n<p>Receiver: <tt>f(sender, **extra)</tt></p>\n</blockquote>\n</div>\n<div id=\"signals-invalid-signature\">\n<h3>signals.invalid_signature</h3>\n<blockquote>\n<p>Sent when the signature included within the HTTP header <tt><span class=\"pre\">X-Slack-Signature</span></tt> is invalid</p>\n<p>Receiver: <tt>f(sender, **extra)</tt></p>\n</blockquote>\n</div>\n<div id=\"signals-event-received\">\n<h3>signals.event_received</h3>\n<blockquote>\n<p>Sent when an event has been received</p>\n<p>Receiver: <tt>f(sender, data, **extra)</tt></p>\n</blockquote>\n</div>\n</div>\n<div id=\"slackmanager-handlers\">\n<h2>SlackManager Handlers</h2>\n<p>The following handlers are used internally by <em>Flask-Slack-Events</em>:</p>\n<div id=\"slackmanager-unauthorized-handler\">\n<h3>SlackManager.unauthorized_handler</h3>\n<blockquote>\n<p>Called to handle an unauthorized request</p>\n<p>Handler: <tt>f()</tt></p>\n<p>Default: <tt>SlackManager.unauthorized()</tt></p>\n</blockquote>\n</div>\n<div id=\"slackmanager-expired-event-handler\">\n<h3>SlackManager.expired_event_handler</h3>\n<blockquote>\n<p>Called to handle an expired event</p>\n<p>Handler: <tt>f()</tt></p>\n<p>Default: <tt>SlackManager.expired_event()</tt></p>\n</blockquote>\n</div>\n<div id=\"slackmanager-invalid-signature-handler\">\n<h3>SlackManager.invalid_signature_handler</h3>\n<blockquote>\n<p>Called to handle a request with an invalid signature</p>\n<p>Handler: <tt>f()</tt></p>\n<p>Default: <tt>SlackManager.invalid_signature()</tt></p>\n</blockquote>\n</div>\n<div id=\"slackmanager-dispatch-event-handler\">\n<h3>SlackManager.dispatch_event_handler</h3>\n<blockquote>\n<p>Called to dispatch the event to all handlers connected with <tt>SlackManager.on(event_type)</tt> decorator</p>\n<p>Handler: <tt>f(sender, data, handlers, **extra)</tt></p>\n<p>Default: <tt>SlackManager.dispatch_event(data)</tt></p>\n</blockquote>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The following configuration values are used internally by <em>Flask-Slack-Events</em>:</p>\n<div id=\"slack-signing-secret\">\n<h3>SLACK_SIGNING_SECRET</h3>\n<blockquote>\n<p>Signing Secret to verify whether requests from <em>Slack</em> are authentic</p>\n<p>Default: <tt>''</tt></p>\n</blockquote>\n</div>\n<div id=\"slack-events-url\">\n<h3>SLACK_EVENTS_URL</h3>\n<blockquote>\n<p>URL rule that is used to register the <em>Subscription View</em></p>\n<p>Default: <tt>/slack/events</tt></p>\n</blockquote>\n</div>\n<div id=\"slack-event-expiration-delta\">\n<h3>SLACK_EVENT_EXPIRATION_DELTA</h3>\n<blockquote>\n<p>Timedelta added to <tt>time.time()</tt> to set the expiration time of each event\nIf the value is <tt>None</tt> then the event never expires</p>\n<p>Default: <tt>timedelta(seconds=60 * 5)</tt> (5 minutes)</p>\n</blockquote>\n</div>\n</div>\n<div id=\"marvin-the-paranoid-android\">\n<h2>Marvin the Paranoid Android</h2>\n<p><a href=\"https://github.com/longstem/marvin\" rel=\"nofollow\">Marvin</a> is a <strong>Slack Bot layout</strong> for <em>Flask</em> to develop <a href=\"https://api.slack.com/events\" rel=\"nofollow\">Slack Event</a> handlers and deploy on <em>AWS Lambda</em> + <em>API Gateway</em></p>\n</div>\n\n          </div>"}, "last_serial": 4895876, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1e1d04c97c0240eff71b035a783130b8", "sha256": "d5a73a939190ea1a92c206740225e071769f3aac0b554628a53fea62d058a7bc"}, "downloads": -1, "filename": "Flask_Slack_Events-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e1d04c97c0240eff71b035a783130b8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7147, "upload_time": "2019-03-03T20:41:51", "upload_time_iso_8601": "2019-03-03T20:41:51.710627Z", "url": "https://files.pythonhosted.org/packages/18/7f/0113551c41d10b4ab7ff96eff81ca8442fe82ed6bdb378361b8991ff123c/Flask_Slack_Events-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1aee41b35878fae073f5dcbf1e4a55e", "sha256": "5651118eab6f715a996accfcea703c82aef43fab4f8efce9c0dec427c573f54c"}, "downloads": -1, "filename": "Flask-Slack-Events-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b1aee41b35878fae073f5dcbf1e4a55e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6521, "upload_time": "2019-03-03T20:41:35", "upload_time_iso_8601": "2019-03-03T20:41:35.934072Z", "url": "https://files.pythonhosted.org/packages/f9/8d/4898f4b300e9c2933e0b4f79a8ab0d7ce21f81157a91f64c0ee18caad82a/Flask-Slack-Events-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e42155aef45a402635aebd559f404bcb", "sha256": "327e89b951ca01dc0f182c6227f1262884a023c2de097274e4efc607a374894f"}, "downloads": -1, "filename": "Flask_Slack_Events-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e42155aef45a402635aebd559f404bcb", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7516, "upload_time": "2019-03-04T19:20:52", "upload_time_iso_8601": "2019-03-04T19:20:52.887253Z", "url": "https://files.pythonhosted.org/packages/76/53/8a4f369ac9a93c02907eae12c7f8ea946d6aa524bc4bc0f53ce2375b494a/Flask_Slack_Events-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0a93fbc0661b409d8d3982624c04a8c", "sha256": "b696c151c875bc349861e6906fb90f3ef7d920a428e667e7e0c6e82735e045c7"}, "downloads": -1, "filename": "Flask-Slack-Events-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f0a93fbc0661b409d8d3982624c04a8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6979, "upload_time": "2019-03-04T19:20:47", "upload_time_iso_8601": "2019-03-04T19:20:47.575246Z", "url": "https://files.pythonhosted.org/packages/59/48/4e9d146e14fb49eb85c5746d3e1389a64bee9ddc62a35c125d39a17175ee/Flask-Slack-Events-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e42155aef45a402635aebd559f404bcb", "sha256": "327e89b951ca01dc0f182c6227f1262884a023c2de097274e4efc607a374894f"}, "downloads": -1, "filename": "Flask_Slack_Events-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e42155aef45a402635aebd559f404bcb", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7516, "upload_time": "2019-03-04T19:20:52", "upload_time_iso_8601": "2019-03-04T19:20:52.887253Z", "url": "https://files.pythonhosted.org/packages/76/53/8a4f369ac9a93c02907eae12c7f8ea946d6aa524bc4bc0f53ce2375b494a/Flask_Slack_Events-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0a93fbc0661b409d8d3982624c04a8c", "sha256": "b696c151c875bc349861e6906fb90f3ef7d920a428e667e7e0c6e82735e045c7"}, "downloads": -1, "filename": "Flask-Slack-Events-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f0a93fbc0661b409d8d3982624c04a8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6979, "upload_time": "2019-03-04T19:20:47", "upload_time_iso_8601": "2019-03-04T19:20:47.575246Z", "url": "https://files.pythonhosted.org/packages/59/48/4e9d146e14fb49eb85c5746d3e1389a64bee9ddc62a35c125d39a17175ee/Flask-Slack-Events-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:17 2020"}