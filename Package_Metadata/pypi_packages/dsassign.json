{"info": {"author": "John DeNero, Will Huang", "author_email": "denero@berkeley.edu, wwhuang@berkeley.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ds-assign: Jupyter Notebook Assignments\nFormat and tools for authoring and distributing Jupyter notebook assignments\n\nRequires: **Python 3** (even if it's installed, check that it's your working version `python --version`)\n\n## Background\nThis is a data 100 fork of dsassign (<https://github.com/DS-100/ds-assign>). \nBig change so far: \nSet student response cell types from \"markdown\" to \"raw.\" Seems to fix a lot of latex problems.\n\n\n## Getting started\nCourse instructors author assignments as Jupyter notebooks by creating a\nnotebook that contains setup code, questions, solutions, and tests to validate\nthose solutions. This project prepares an assignment to be distributed to\nstudents and later scored automatically.\n\nThe [notebook format](docs/notebook-format.md) is not specific to a programming\nlanguage or autograding framework, but was designed to be used with\n[okpy](https://github.com/okpy/ok), which is Python based. Contributions to\nsupport other testing frameworks, such as [nbgrader[](), and other programming\nlanguages are welcome.\n\nAn example notebook appears in `tests/example.ipynb`, which uses the [notebook\nformat](docs/notebook-format.md). To convert it, run:\n\n```python\ndsassign tests/example.ipynb tests/output some/course\n```\n\n\n* `tests/example.ipynb`: an example notebook path that you'll need to replace with the _path to the master solution notebook_, which was augmented with the metadata and commands from the [notebook format](docs/notebook-format.md).\n* `tests/output`: _the path to where the output will be stored_ \n  * the output contains two directories `autograder` and `student`\n  * the `autograder` directory contains the full set of tests and a solution notebook (a solution notebook is different from the master notebook, because it is not formatted accordidng to the [notebook format](docs/notebook-format.md) but instead looks like the student notebook with solutions)\n  * the `student` directory contains an automatically created redacted version. \n  * **Note**: currently, the output directories will **not** contain the data files, e.g., csv or json files, that you used when creating the master notebook: make sure you add them to the `student` directory before releasing it to students\n* `some/course` is the endpoint/path of the assignment that's listed on okpy (typically starts with your university abbreviation and has a course name in it, ending with the assignment name).\n\n\nBefore you run the `dsassign` command, make sure that you **run the entire notebook** top to bottom (`Cell -> Run All`) to make sure that every cell has the correct output -- the output of the cells will be turned into the appropriate tests stored in the provided output directory (second argument of the `dsassign` command). If you change the tests, you need to re-generate the files by re-running the notebook and the `dsassign` command. **Note**: `dsassign` will issue an error and quit if the output directory already exists.\n\n\n\n\nYou can then generate a PDF from the result:\n\n```python\ndsassign-pdf tests/output/autograder/example.ipynb tests/output/autograder/example.pdf\n```\n\n\n## Caution\n\n#### Test outside of a question\n\n```\nFile \"/opt/conda/lib/python3.6/site-packages/dsassign/to_ok.py\", line 141, in gen_ok_cells\n    assert not is_test_cell(cell), 'Test outside of a question: ' + str(cell)\nAssertionError: Test outside of a question:\n```\n\nIf you get this error, this means that you have _more than one cell_ between the markdown cell that declared the question (i.e., the one that contains `#BEGIN QUESTION`) and the cell that contains the `# TEST`. \n\n\n**SOLUTION**: remove the extra code/markdown cell(s) either between the solution cell and the markdown cell with the `#BEGIN QUESTION` or between the solution cell and the `# TEST` cell.\n\n#### Test cell with a blank on the last line\n\nIf your test contains a blank/newline after the test, dsassign seems to automatically add a semicolon at the end of the test, thus, supressing the output of the command.\n\nExample:\n\n```\n# TEST\nmovies.head(1)['plots'][0]=='Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.'\n\n```\n\nTurns into the following failed test in the students' notebook:\n\n```\n>>> movies.head(1)['plots'][0]=='Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.';\n>>> \n\n# Error: expected\n#     True\n# but got\n\n```\n\n**SOLUTION**: remove the blank line at the end of the `# TEST` cell.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DS-100/ds-assign", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dsassign", "package_url": "https://pypi.org/project/dsassign/", "platform": "", "project_url": "https://pypi.org/project/dsassign/", "project_urls": {"Homepage": "https://github.com/DS-100/ds-assign"}, "release_url": "https://pypi.org/project/dsassign/0.0.8/", "requires_dist": ["pyyaml", "nbformat", "ipython", "nbconvert (>=5.6.0)", "tqdm", "setuptools"], "requires_python": "", "summary": "Jupyter notebook assignment formatting and distribution", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ds-assign: Jupyter Notebook Assignments</h1>\n<p>Format and tools for authoring and distributing Jupyter notebook assignments</p>\n<p>Requires: <strong>Python 3</strong> (even if it's installed, check that it's your working version <code>python --version</code>)</p>\n<h2>Background</h2>\n<p>This is a data 100 fork of dsassign (<a href=\"https://github.com/DS-100/ds-assign\" rel=\"nofollow\">https://github.com/DS-100/ds-assign</a>).\nBig change so far:\nSet student response cell types from \"markdown\" to \"raw.\" Seems to fix a lot of latex problems.</p>\n<h2>Getting started</h2>\n<p>Course instructors author assignments as Jupyter notebooks by creating a\nnotebook that contains setup code, questions, solutions, and tests to validate\nthose solutions. This project prepares an assignment to be distributed to\nstudents and later scored automatically.</p>\n<p>The <a href=\"docs/notebook-format.md\" rel=\"nofollow\">notebook format</a> is not specific to a programming\nlanguage or autograding framework, but was designed to be used with\n<a href=\"https://github.com/okpy/ok\" rel=\"nofollow\">okpy</a>, which is Python based. Contributions to\nsupport other testing frameworks, such as [nbgrader<a href=\"\" rel=\"nofollow\"></a>, and other programming\nlanguages are welcome.</p>\n<p>An example notebook appears in <code>tests/example.ipynb</code>, which uses the <a href=\"docs/notebook-format.md\" rel=\"nofollow\">notebook\nformat</a>. To convert it, run:</p>\n<pre><span class=\"n\">dsassign</span> <span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">ipynb</span> <span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">output</span> <span class=\"n\">some</span><span class=\"o\">/</span><span class=\"n\">course</span>\n</pre>\n<ul>\n<li><code>tests/example.ipynb</code>: an example notebook path that you'll need to replace with the <em>path to the master solution notebook</em>, which was augmented with the metadata and commands from the <a href=\"docs/notebook-format.md\" rel=\"nofollow\">notebook format</a>.</li>\n<li><code>tests/output</code>: <em>the path to where the output will be stored</em>\n<ul>\n<li>the output contains two directories <code>autograder</code> and <code>student</code></li>\n<li>the <code>autograder</code> directory contains the full set of tests and a solution notebook (a solution notebook is different from the master notebook, because it is not formatted accordidng to the <a href=\"docs/notebook-format.md\" rel=\"nofollow\">notebook format</a> but instead looks like the student notebook with solutions)</li>\n<li>the <code>student</code> directory contains an automatically created redacted version.</li>\n<li><strong>Note</strong>: currently, the output directories will <strong>not</strong> contain the data files, e.g., csv or json files, that you used when creating the master notebook: make sure you add them to the <code>student</code> directory before releasing it to students</li>\n</ul>\n</li>\n<li><code>some/course</code> is the endpoint/path of the assignment that's listed on okpy (typically starts with your university abbreviation and has a course name in it, ending with the assignment name).</li>\n</ul>\n<p>Before you run the <code>dsassign</code> command, make sure that you <strong>run the entire notebook</strong> top to bottom (<code>Cell -&gt; Run All</code>) to make sure that every cell has the correct output -- the output of the cells will be turned into the appropriate tests stored in the provided output directory (second argument of the <code>dsassign</code> command). If you change the tests, you need to re-generate the files by re-running the notebook and the <code>dsassign</code> command. <strong>Note</strong>: <code>dsassign</code> will issue an error and quit if the output directory already exists.</p>\n<p>You can then generate a PDF from the result:</p>\n<pre><span class=\"n\">dsassign</span><span class=\"o\">-</span><span class=\"n\">pdf</span> <span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">output</span><span class=\"o\">/</span><span class=\"n\">autograder</span><span class=\"o\">/</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">ipynb</span> <span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">output</span><span class=\"o\">/</span><span class=\"n\">autograder</span><span class=\"o\">/</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">pdf</span>\n</pre>\n<h2>Caution</h2>\n<h4>Test outside of a question</h4>\n<pre><code>File \"/opt/conda/lib/python3.6/site-packages/dsassign/to_ok.py\", line 141, in gen_ok_cells\n    assert not is_test_cell(cell), 'Test outside of a question: ' + str(cell)\nAssertionError: Test outside of a question:\n</code></pre>\n<p>If you get this error, this means that you have <em>more than one cell</em> between the markdown cell that declared the question (i.e., the one that contains <code>#BEGIN QUESTION</code>) and the cell that contains the <code># TEST</code>.</p>\n<p><strong>SOLUTION</strong>: remove the extra code/markdown cell(s) either between the solution cell and the markdown cell with the <code>#BEGIN QUESTION</code> or between the solution cell and the <code># TEST</code> cell.</p>\n<h4>Test cell with a blank on the last line</h4>\n<p>If your test contains a blank/newline after the test, dsassign seems to automatically add a semicolon at the end of the test, thus, supressing the output of the command.</p>\n<p>Example:</p>\n<pre><code># TEST\nmovies.head(1)['plots'][0]=='Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.'\n\n</code></pre>\n<p>Turns into the following failed test in the students' notebook:</p>\n<pre><code>&gt;&gt;&gt; movies.head(1)['plots'][0]=='Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.';\n&gt;&gt;&gt; \n\n# Error: expected\n#     True\n# but got\n\n</code></pre>\n<p><strong>SOLUTION</strong>: remove the blank line at the end of the <code># TEST</code> cell.</p>\n\n          </div>"}, "last_serial": 6497722, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "99f6f9f03805732e172a5f28517cafac", "sha256": "b5168247aff5ccb9def20a929fd8e99f9d4cc6bee20a224621a226f8932e9471"}, "downloads": -1, "filename": "dsassign-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "99f6f9f03805732e172a5f28517cafac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14518, "upload_time": "2020-01-20T21:01:36", "upload_time_iso_8601": "2020-01-20T21:01:36.809171Z", "url": "https://files.pythonhosted.org/packages/7a/8a/fde2de1c974eabbbf53375993f78234e14ca763ee480c46dc1d3152aa024/dsassign-0.0.7-py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "89408bbdd515f73a2728431e0de82630", "sha256": "181ee46f25f1d0d3558302404c80143fef9ba9f8c791112272086ede341bc3c5"}, "downloads": -1, "filename": "dsassign-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "89408bbdd515f73a2728431e0de82630", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14545, "upload_time": "2020-01-22T01:19:17", "upload_time_iso_8601": "2020-01-22T01:19:17.396650Z", "url": "https://files.pythonhosted.org/packages/31/64/3a371a16e5f6a264c3e1f4f2be9fc6fd92974a69fdbe6dbbf012e8120fe6/dsassign-0.0.8-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89408bbdd515f73a2728431e0de82630", "sha256": "181ee46f25f1d0d3558302404c80143fef9ba9f8c791112272086ede341bc3c5"}, "downloads": -1, "filename": "dsassign-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "89408bbdd515f73a2728431e0de82630", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14545, "upload_time": "2020-01-22T01:19:17", "upload_time_iso_8601": "2020-01-22T01:19:17.396650Z", "url": "https://files.pythonhosted.org/packages/31/64/3a371a16e5f6a264c3e1f4f2be9fc6fd92974a69fdbe6dbbf012e8120fe6/dsassign-0.0.8-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:26 2020"}