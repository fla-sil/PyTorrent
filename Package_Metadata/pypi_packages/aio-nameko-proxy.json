{"info": {"author": "laiyongtao", "author_email": "laiyongtao6908@163.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# aio-nameko-proxy\n\nA standalone nameko rpc proxy for asyncio and a wrapper for using nameko rpc proxy with Sanic. \n\nThis project is based on aio-pika and reference the source code of official nameko project and aio-pika.\n\n### examples:\n#### standalone AIOClusterRpcProxy\nIf you want most of your messages to be persistent(default). Set the delivery mode parameter as\nDeliveryMode.PERSISTENT, Call sw_dlm_call when you need to send a non-persistent message.\n```python\nimport asyncio\nfrom aio_nameko_proxy import AIOClusterRpcProxy\nfrom aio_pika import DeliveryMode\n\nconfig = {\n    \"AMQP_URI\": \"pyamqp://guest:guest@127.0.0.1:5672\",\n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5, \n    \"delivery_mode\": DeliveryMode.PERSISTENT\n}\n\nasync def run():\n\n    async with AIOClusterRpcProxy(config) as rpc:\n            # time_out: the time_out of waitting the remote method result.\n            # con_time_out: the time_out of connecting to the rabbitmq server or binding the queue, consume and so on.\n\n            # persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n            result = await reply_obj.result()\n    \n            # non-persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n            result = await reply_obj.result()\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\nIf you want most of your messages to be non-persistent(persistent is default). Set the delivery mode parameter as\nDeliveryMode.NOT_PERSISTENT, Call sw_dlm_call when you need to send a persistent message.\n```python\nimport asyncio\nfrom aio_nameko_proxy import AIOClusterRpcProxy\nfrom aio_pika import DeliveryMode\nconfig = {\n    \"AMQP_URI\": \"pyamqp://guest:guest@127.0.0.1:5672\",\n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5, \n    \"delivery_mode\": DeliveryMode.NOT_PERSISTENT\n}\n\nasync def run():\n    async with AIOClusterRpcProxy(config) as rpc:\n            # non-persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n            result = await reply_obj.result()\n    \n            # persistent msg call\n            result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n    \n            reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n            result = await reply_obj.result()\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n#### AIOPooledClusterRpcProxy\n```python\nimport asyncio\nfrom aio_nameko_proxy import AIOPooledClusterRpcProxy\nfrom aio_pika import DeliveryMode\n\nconfig = {\n    \"AMQP_URI\": \"pyamqp://guest:guest@127.0.0.1:5672\",\n    \"rpc_exchange\": \"nameko-rpc\",\n    \"time_out\": 30, \n    \"con_time_out\": 5,\n    \"pool_size\": 10,\n    \"initial_size\": 2,\n    \"delivery_mode\": DeliveryMode.NOT_PERSISTENT\n}\n\n\nasync def run():\n\n    async with AIOPooledClusterRpcProxy(config) as proxy_pool:\n    \n            async with proxy_pool.acquire() as rpc:\n                result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n\n\nif __name__ == '__main__':\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(run())\n```\n\n#### Sanic Wrapper\n```python\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom aio_pika import DeliveryMode\nfrom aio_nameko_proxy.wrappers import SanicNamekoClusterRpcProxy\n\nclass Config(object):\n    # AMQP_URI\n    NAMEKO_AMQP_URI = \"pyamqp://guest:guest@127.0.0.1:5672\"\n    # rpc_exchange\n    NAMEKO_RPC_EXCHANGE = \"nameko-rpc\"\n    # pool_size\n    NAMEKO_POOL_SIZE = 60\n    # initial_size\n    NAMEKO_INITIAL_SIZE = 60\n    # time_out\n    NAMEKO_TIME_OUT = 30\n    # con_time_out\n    NAMEKO_CON_TIME_OUT = 5\n    # delivery_mode\n    NAMEKO_DELIVERY_MODE = DeliveryMode.PERSISTENT\n    # other supported properties of aio-pika.Message, the key name format is \"NAMEKO_{}\".format(property_name.upper())\n    # ...\n\n\napp = Sanic(\"App Name\")\napp.config.from_object(Config)\n\n# rpc_cluster = SanicNamekoClusterRpcProxy(app)\n# or\nrpc_cluster = SanicNamekoClusterRpcProxy()\nrpc_cluster.init_app(app)\n\n\n@app.route(\"/\")\nasync def test(request):\n    \n    rpc = await rpc_cluster.get_proxy()\n\n    result = await rpc.rpc_demo_service.normal_rpc(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.call_async(\"demo\")\n    result = await reply_obj.result()\n\n    result = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call(\"demo\")\n\n    reply_obj = await rpc.rpc_demo_service.normal_rpc.sw_dlm_call_async(\"demo\")\n    result = await reply_obj.result()\n\n    return json({\"hello\": \"world\"})\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/laiyongtao/aio_nameko_proxy", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "aio-nameko-proxy", "package_url": "https://pypi.org/project/aio-nameko-proxy/", "platform": "all", "project_url": "https://pypi.org/project/aio-nameko-proxy/", "project_urls": {"Homepage": "https://github.com/laiyongtao/aio_nameko_proxy"}, "release_url": "https://pypi.org/project/aio-nameko-proxy/0.1.0/", "requires_dist": null, "requires_python": ">3.5.*, <4", "summary": "A standalone nameko rpc proxy for asyncio and a wrapper for using nameko rpc proxy with Sanic.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aio-nameko-proxy</h1>\n<p>A standalone nameko rpc proxy for asyncio and a wrapper for using nameko rpc proxy with Sanic.</p>\n<p>This project is based on aio-pika and reference the source code of official nameko project and aio-pika.</p>\n<h3>examples:</h3>\n<h4>standalone AIOClusterRpcProxy</h4>\n<p>If you want most of your messages to be persistent(default). Set the delivery mode parameter as\nDeliveryMode.PERSISTENT, Call sw_dlm_call when you need to send a non-persistent message.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_nameko_proxy</span> <span class=\"kn\">import</span> <span class=\"n\">AIOClusterRpcProxy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_pika</span> <span class=\"kn\">import</span> <span class=\"n\">DeliveryMode</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"AMQP_URI\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyamqp://guest:guest@127.0.0.1:5672\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"rpc_exchange\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameko-rpc\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"con_time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"delivery_mode\"</span><span class=\"p\">:</span> <span class=\"n\">DeliveryMode</span><span class=\"o\">.</span><span class=\"n\">PERSISTENT</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AIOClusterRpcProxy</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">rpc</span><span class=\"p\">:</span>\n            <span class=\"c1\"># time_out: the time_out of waitting the remote method result.</span>\n            <span class=\"c1\"># con_time_out: the time_out of connecting to the rabbitmq server or binding the queue, consume and so on.</span>\n\n            <span class=\"c1\"># persistent msg call</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    \n            <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n    \n            <span class=\"c1\"># non-persistent msg call</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    \n            <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>If you want most of your messages to be non-persistent(persistent is default). Set the delivery mode parameter as\nDeliveryMode.NOT_PERSISTENT, Call sw_dlm_call when you need to send a persistent message.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_nameko_proxy</span> <span class=\"kn\">import</span> <span class=\"n\">AIOClusterRpcProxy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_pika</span> <span class=\"kn\">import</span> <span class=\"n\">DeliveryMode</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"AMQP_URI\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyamqp://guest:guest@127.0.0.1:5672\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"rpc_exchange\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameko-rpc\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"con_time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"delivery_mode\"</span><span class=\"p\">:</span> <span class=\"n\">DeliveryMode</span><span class=\"o\">.</span><span class=\"n\">NOT_PERSISTENT</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AIOClusterRpcProxy</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">rpc</span><span class=\"p\">:</span>\n            <span class=\"c1\"># non-persistent msg call</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    \n            <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n    \n            <span class=\"c1\"># persistent msg call</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    \n            <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h4>AIOPooledClusterRpcProxy</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_nameko_proxy</span> <span class=\"kn\">import</span> <span class=\"n\">AIOPooledClusterRpcProxy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_pika</span> <span class=\"kn\">import</span> <span class=\"n\">DeliveryMode</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"AMQP_URI\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyamqp://guest:guest@127.0.0.1:5672\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"rpc_exchange\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nameko-rpc\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"con_time_out\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pool_size\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"initial_size\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"delivery_mode\"</span><span class=\"p\">:</span> <span class=\"n\">DeliveryMode</span><span class=\"o\">.</span><span class=\"n\">NOT_PERSISTENT</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AIOPooledClusterRpcProxy</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">proxy_pool</span><span class=\"p\">:</span>\n    \n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">proxy_pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">rpc</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h4>Sanic Wrapper</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sanic</span> <span class=\"kn\">import</span> <span class=\"n\">Sanic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sanic.response</span> <span class=\"kn\">import</span> <span class=\"n\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_pika</span> <span class=\"kn\">import</span> <span class=\"n\">DeliveryMode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_nameko_proxy.wrappers</span> <span class=\"kn\">import</span> <span class=\"n\">SanicNamekoClusterRpcProxy</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># AMQP_URI</span>\n    <span class=\"n\">NAMEKO_AMQP_URI</span> <span class=\"o\">=</span> <span class=\"s2\">\"pyamqp://guest:guest@127.0.0.1:5672\"</span>\n    <span class=\"c1\"># rpc_exchange</span>\n    <span class=\"n\">NAMEKO_RPC_EXCHANGE</span> <span class=\"o\">=</span> <span class=\"s2\">\"nameko-rpc\"</span>\n    <span class=\"c1\"># pool_size</span>\n    <span class=\"n\">NAMEKO_POOL_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n    <span class=\"c1\"># initial_size</span>\n    <span class=\"n\">NAMEKO_INITIAL_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n    <span class=\"c1\"># time_out</span>\n    <span class=\"n\">NAMEKO_TIME_OUT</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n    <span class=\"c1\"># con_time_out</span>\n    <span class=\"n\">NAMEKO_CON_TIME_OUT</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"c1\"># delivery_mode</span>\n    <span class=\"n\">NAMEKO_DELIVERY_MODE</span> <span class=\"o\">=</span> <span class=\"n\">DeliveryMode</span><span class=\"o\">.</span><span class=\"n\">PERSISTENT</span>\n    <span class=\"c1\"># other supported properties of aio-pika.Message, the key name format is \"NAMEKO_{}\".format(property_name.upper())</span>\n    <span class=\"c1\"># ...</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Sanic</span><span class=\"p\">(</span><span class=\"s2\">\"App Name\"</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># rpc_cluster = SanicNamekoClusterRpcProxy(app)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">rpc_cluster</span> <span class=\"o\">=</span> <span class=\"n\">SanicNamekoClusterRpcProxy</span><span class=\"p\">()</span>\n<span class=\"n\">rpc_cluster</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    \n    <span class=\"n\">rpc</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc_cluster</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">()</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reply_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">rpc</span><span class=\"o\">.</span><span class=\"n\">rpc_demo_service</span><span class=\"o\">.</span><span class=\"n\">normal_rpc</span><span class=\"o\">.</span><span class=\"n\">sw_dlm_call_async</span><span class=\"p\">(</span><span class=\"s2\">\"demo\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reply_obj</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">({</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"world\"</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7134471, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ea46501f9d334808e8236099576971fc", "sha256": "f99eaefe83482815f1b5462014e05d5efd3a9aceb1ce2ce070d06adcd8ebb72f"}, "downloads": -1, "filename": "aio-nameko-proxy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ea46501f9d334808e8236099576971fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.*, <4", "size": 11079, "upload_time": "2020-04-30T02:44:06", "upload_time_iso_8601": "2020-04-30T02:44:06.508164Z", "url": "https://files.pythonhosted.org/packages/47/00/4c3b995fa08006e969735fb29c96a05a1b19eb7f07b6e0132d9364a77a56/aio-nameko-proxy-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea46501f9d334808e8236099576971fc", "sha256": "f99eaefe83482815f1b5462014e05d5efd3a9aceb1ce2ce070d06adcd8ebb72f"}, "downloads": -1, "filename": "aio-nameko-proxy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ea46501f9d334808e8236099576971fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.*, <4", "size": 11079, "upload_time": "2020-04-30T02:44:06", "upload_time_iso_8601": "2020-04-30T02:44:06.508164Z", "url": "https://files.pythonhosted.org/packages/47/00/4c3b995fa08006e969735fb29c96a05a1b19eb7f07b6e0132d9364a77a56/aio-nameko-proxy-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:01 2020"}