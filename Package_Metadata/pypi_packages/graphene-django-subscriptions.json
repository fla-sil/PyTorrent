{"info": {"author": "Ernesto Perez Amigo", "author_email": "eamigop86@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "\nGraphene-Django-Subscriptions\n=============================\n\nThis package adds support to Subscription's requests and its integration with websockets using Channels package. You can test websockets notifications with this mini web tool. It's intuitive and simple: `websocket_example_client <https://github.com/eamigo86/graphene-django-subscriptions/tree/master/example_websocket_client>`_\n\n\nInstallation:\n-------------\n\nFor installing graphene-django-subscriptions, just run this command in your shell:\n\n.. code:: bash\n\n    pip install \"graphene-django-subscriptions\"\n\nDocumentation:\n--------------\n\n***************************************\nExtra functionalities  (Subscriptions):\n***************************************\n    1.  Subscription  (Abstract class to define subscriptions to a DjangoSerializerMutation)\n    2.  GraphqlAPIDemultiplexer  (Custom WebSocket consumer subclass that handles demultiplexing streams)\n\n\nSubscriptions:\n--------------\n\nThis first approach to add Graphql subscriptions support  with Channels in graphene-django, use channels-api package.\n\n*****************************************\n1- Defining custom Subscriptions classes:\n*****************************************\n\nYou must to have defined a Serializer class for each model that you want to define a Subscription class:\n\n.. code:: python\n\n    # app/graphql/subscriptions.py\n    import graphene\n    from graphene_django_subscriptions.subscription import Subscription\n    from .serializers import UserSerializer, GroupSerializer\n\n\n    class UserSubscription(Subscription):\n        class Meta:\n            serializer_class = UserSerializer\n            stream = 'users'\n            description = 'User Subscription'\n\n\n    class GroupSubscription(Subscription):\n        class Meta:\n            serializer_class = GroupSerializer\n            stream = 'groups'\n            description = 'Group Subscription'\n\n\nAdd the subscriptions definitions into your app's schema:\n\n.. code:: python\n\n    # app/graphql/schema.py\n    import graphene\n    from .subscriptions import UserSubscription, GroupSubscription\n\n\n    class Subscriptions(graphene.ObjectType):\n        user_subscription = UserSubscription.Field()\n        GroupSubscription = PersonSubscription.Field()\n\n\nAdd the app's schema into your project root schema:\n\n.. code:: python\n\n    # schema.py\n    import graphene\n    import custom.app.route.graphql.schema\n\n\n    class RootQuery(custom.app.route.graphql.schema.Query, graphene.ObjectType):\n        class Meta:\n            description = 'The project root query definition'\n\n\n    class RootMutation(custom.app.route.graphql.schema.Mutation, graphene.ObjectType):\n        class Meta:\n            description = 'The project root mutation definition'\n\n\n    class RootSubscription(custom.app.route.graphql.schema.Subscriptions, graphene.ObjectType):\n        class Meta:\n            description = 'The project root subscription definition'\n\n\n    schema = graphene.Schema(\n        query=RootQuery,\n        mutation=RootMutation,\n        subscription=RootSubscription\n    )\n\n\n********************************************************\n2- Defining Channels settings and custom routing config:\n********************************************************\n**Note**: For more information about this step see Channels documentation.\n\nYou must to have defined a DjangoSerializerMutation class for each model that you want to define a Subscription class:\n\nWe define app routing, as if they were app urls:\n\n.. code:: python\n\n    # app/routing.py\n    from graphene_django_subscriptions.consumers import GraphqlAPIDemultiplexer\n    from channels.routing import route_class\n    from .graphql.subscriptions import UserSubscription, GroupSubscription\n\n\n    class CustomAppDemultiplexer(GraphqlAPIDemultiplexer):\n        consumers = {\n          'users': UserSubscription.get_binding().consumer,\n          'groups': GroupSubscription.get_binding().consumer\n        }\n\n\n    app_routing = [\n        route_class(CustomAppDemultiplexer)\n    ]\n\n\nDefining our project routing, like custom root project urls:\n\n.. code:: python\n\n    # project/routing.py\n    from channels import include\n\n    project_routing = [\n        include(\"custom.app.folder.routing.app_routing\", path=r\"^/custom_websocket_path\"),\n    ]\n\n\nYou should put into your INSTALLED_APPS the channels and channels_api modules and you must to add your project's routing definition into the CHANNEL_LAYERS setting:\n\n.. code:: python\n\n    # settings.py\n    ...\n    INSTALLED_APPS = (\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.sites',\n        ...\n        'channels',\n        'channels_api',\n\n        'custom_app'\n    )\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n            \"ROUTING\": \"myproject.routing.project_routing\",  # Our project routing\n        },\n    }\n    ...\n\nYou must add **'graphene_django_subscriptions.SubscriptionMiddleware'** middleware at the end of your GRAPHENE dict config on your settings.py:\n\n.. code:: python\n\n    # settings.py\n    ...\n    GRAPHENE = {\n        'SCHEMA_INDENT': 4,\n        'MIDDLEWARE': [\n            # Others middleware\n            'graphene_django_subscriptions.SubscriptionMiddleware',\n        ]\n    }\n    ...\n\n\n***************************\n3- Subscription's examples:\n***************************\n\nIn your WEB client you must define websocket connection to: 'ws://host:port/custom_websocket_path'.\nWhen the connection is established, the server return a websocket's message like this:\n{\"channel_id\": \"GthKdsYVrK!WxRCdJQMPi\", \"connect\": \"success\"}, where you must store the channel_id value to later use in your graphql subscriptions request for subscribe or unsubscribe operations.\n\nThe graphql's subscription request accept five possible parameters:\n1.  **operation**: Operation to perform: subscribe or unsubscribe. (required)\n2.  **action**: Action to which you wish to subscribe: create, update, delete or all_actions. (required)\n3.  **channelId**: Identification of the connection by websocket. (required)\n4.  **id**: Object's ID field value that you wish to subscribe to. (optional)\n5.  **data**: Model's fields that you want to appear in the subscription notifications. (optional)\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: SUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5,\n            data: [ID, USERNAME, FIRST_NAME, LAST_NAME, EMAIL, IS_SUPERUSER]\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\nIn this case, the subscription request sent return a websocket message to client like this: *{\"action\": \"update\", \"operation\": \"subscribe\", \"ok\": true, \"stream\": \"users\", \"error\": null}* and from that moment each time than the user with id=5 get modified, you will receive a message through websocket's connection with the following format:\n\n.. code:: python\n\n    {\n        \"stream\": \"users\",\n        \"payload\": {\n            \"action\": \"update\",\n            \"model\": \"auth.user\",\n            \"data\": {\n                \"id\": 5,\n                \"username\": \"meaghan90\",\n                \"first_name\": \"Meaghan\",\n                \"last_name\": \"Ackerman\",\n                \"email\": \"meaghan@gmail.com\",\n                \"is_superuser\": false\n            }\n        }\n    }\n\n\nFor unsubscribe you must send a graphql request like this:\n\n.. code:: python\n\n    subscription{\n        userSubscription(\n            action: UPDATE,\n            operation: UNSUBSCRIBE,\n            channelId: \"GthKdsYVrK!WxRCdJQMPi\",\n            id: 5\n        ){\n            ok\n            error\n            stream\n        }\n    }\n\n\n*NOTE*: Each time than the graphql's server restart, you must to reestablish the websocket connection and resend the graphql's subscription request with the new websocket connection id.\n\n\nChange Log:\n-----------\n\n*******\nv0.0.9:\n*******\n1. Fixed minor bugs.\n\n*******\nv0.0.6:\n*******\n1. Fixed minor bug on model_fields_enum generation when define fields in serializer class like this: fields = \"__all__\"\n2. This avoid malfunction with the posterior versions of graphene-django.\n\n*******\nv0.0.4:\n*******\n1. Fixed minor bug on *subscription_resolver* function.\n\n*******\nv0.0.3:\n*******\n1. Added **depromise_subscription** middleware to allow use subscriptions on graphene-django>=2.0.\n2. Updated setup dependence to graphene-django-extras>=0.3.0.\n\n*******\nv0.0.2:\n*******\n1. Changed mutation_class dependence on Subscription Meta class definition to serializer_class to get better\nintegration.\n2. Fixed some minor bugs.\n\n*******\nv0.0.1:\n*******\n1. First commit\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eamigo86/graphene-django-subscriptions", "keywords": "api graphql subscription rest graphene django channels", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "graphene-django-subscriptions", "package_url": "https://pypi.org/project/graphene-django-subscriptions/", "platform": "any", "project_url": "https://pypi.org/project/graphene-django-subscriptions/", "project_urls": {"Homepage": "https://github.com/eamigo86/graphene-django-subscriptions"}, "release_url": "https://pypi.org/project/graphene-django-subscriptions/0.0.9/", "requires_dist": ["graphene-django (>=2.0.0)", "graphene-django-extras (>=0.4.8)", "channels-api (>=0.4.1)"], "requires_python": "", "summary": "Graphene-Django-Subscriptions add subscriptions support to graphene-django through Channels module", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package adds support to Subscription\u2019s requests and its integration with websockets using Channels package. You can test websockets notifications with this mini web tool. It\u2019s intuitive and simple: <a href=\"https://github.com/eamigo86/graphene-django-subscriptions/tree/master/example_websocket_client\" rel=\"nofollow\">websocket_example_client</a></p>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>For installing graphene-django-subscriptions, just run this command in your shell:</p>\n<pre>pip install <span class=\"s2\">\"graphene-django-subscriptions\"</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation:</h2>\n<h2 id=\"extra-functionalities-subscriptions\"><span class=\"section-subtitle\">Extra functionalities  (Subscriptions):</span></h2>\n<blockquote>\n<ol>\n<li>Subscription  (Abstract class to define subscriptions to a DjangoSerializerMutation)</li>\n<li>GraphqlAPIDemultiplexer  (Custom WebSocket consumer subclass that handles demultiplexing streams)</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"subscriptions\">\n<h2>Subscriptions:</h2>\n<p>This first approach to add Graphql subscriptions support  with Channels in graphene-django, use channels-api package.</p>\n<div id=\"defining-custom-subscriptions-classes\">\n<h3>1- Defining custom Subscriptions classes:</h3>\n<p>You must to have defined a Serializer class for each model that you want to define a Subscription class:</p>\n<pre><span class=\"c1\"># app/graphql/subscriptions.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django_subscriptions.subscription</span> <span class=\"kn\">import</span> <span class=\"n\">Subscription</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">UserSerializer</span><span class=\"p\">,</span> <span class=\"n\">GroupSerializer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserSubscription</span><span class=\"p\">(</span><span class=\"n\">Subscription</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'users'</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'User Subscription'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GroupSubscription</span><span class=\"p\">(</span><span class=\"n\">Subscription</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">GroupSerializer</span>\n        <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'groups'</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Group Subscription'</span>\n</pre>\n<p>Add the subscriptions definitions into your app\u2019s schema:</p>\n<pre><span class=\"c1\"># app/graphql/schema.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">UserSubscription</span><span class=\"p\">,</span> <span class=\"n\">GroupSubscription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Subscriptions</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">user_subscription</span> <span class=\"o\">=</span> <span class=\"n\">UserSubscription</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">GroupSubscription</span> <span class=\"o\">=</span> <span class=\"n\">PersonSubscription</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n</pre>\n<p>Add the app\u2019s schema into your project root schema:</p>\n<pre><span class=\"c1\"># schema.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">import</span> <span class=\"nn\">custom.app.route.graphql.schema</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootQuery</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root query definition'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootMutation</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Mutation</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root mutation definition'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RootSubscription</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">Subscriptions</span><span class=\"p\">,</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'The project root subscription definition'</span>\n\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">RootQuery</span><span class=\"p\">,</span>\n    <span class=\"n\">mutation</span><span class=\"o\">=</span><span class=\"n\">RootMutation</span><span class=\"p\">,</span>\n    <span class=\"n\">subscription</span><span class=\"o\">=</span><span class=\"n\">RootSubscription</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"defining-channels-settings-and-custom-routing-config\">\n<h3>2- Defining Channels settings and custom routing config:</h3>\n<p><strong>Note</strong>: For more information about this step see Channels documentation.</p>\n<p>You must to have defined a DjangoSerializerMutation class for each model that you want to define a Subscription class:</p>\n<p>We define app routing, as if they were app urls:</p>\n<pre><span class=\"c1\"># app/routing.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_django_subscriptions.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">GraphqlAPIDemultiplexer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels.routing</span> <span class=\"kn\">import</span> <span class=\"n\">route_class</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.graphql.subscriptions</span> <span class=\"kn\">import</span> <span class=\"n\">UserSubscription</span><span class=\"p\">,</span> <span class=\"n\">GroupSubscription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomAppDemultiplexer</span><span class=\"p\">(</span><span class=\"n\">GraphqlAPIDemultiplexer</span><span class=\"p\">):</span>\n    <span class=\"n\">consumers</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"n\">UserSubscription</span><span class=\"o\">.</span><span class=\"n\">get_binding</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">consumer</span><span class=\"p\">,</span>\n      <span class=\"s1\">'groups'</span><span class=\"p\">:</span> <span class=\"n\">GroupSubscription</span><span class=\"o\">.</span><span class=\"n\">get_binding</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">consumer</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"n\">app_routing</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">route_class</span><span class=\"p\">(</span><span class=\"n\">CustomAppDemultiplexer</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Defining our project routing, like custom root project urls:</p>\n<pre><span class=\"c1\"># project/routing.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels</span> <span class=\"kn\">import</span> <span class=\"n\">include</span>\n\n<span class=\"n\">project_routing</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">\"custom.app.folder.routing.app_routing\"</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"^/custom_websocket_path\"</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You should put into your INSTALLED_APPS the channels and channels_api modules and you must to add your project\u2019s routing definition into the CHANNEL_LAYERS setting:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"o\">...</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.sites'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'channels'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'channels_api'</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">'custom_app'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">CHANNEL_LAYERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"BACKEND\"</span><span class=\"p\">:</span> <span class=\"s2\">\"asgiref.inmemory.ChannelLayer\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"ROUTING\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myproject.routing.project_routing\"</span><span class=\"p\">,</span>  <span class=\"c1\"># Our project routing</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n<span class=\"o\">...</span>\n</pre>\n<p>You must add <strong>\u2018graphene_django_subscriptions.SubscriptionMiddleware\u2019</strong> middleware at the end of your GRAPHENE dict config on your settings.py:</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"o\">...</span>\n<span class=\"n\">GRAPHENE</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'SCHEMA_INDENT'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">'MIDDLEWARE'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"c1\"># Others middleware</span>\n        <span class=\"s1\">'graphene_django_subscriptions.SubscriptionMiddleware'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"subscription-s-examples\">\n<h3>3- Subscription\u2019s examples:</h3>\n<p>In your WEB client you must define websocket connection to: \u2018ws://host:port/custom_websocket_path\u2019.\nWhen the connection is established, the server return a websocket\u2019s message like this:\n{\u201cchannel_id\u201d: \u201cGthKdsYVrK!WxRCdJQMPi\u201d, \u201cconnect\u201d: \u201csuccess\u201d}, where you must store the channel_id value to later use in your graphql subscriptions request for subscribe or unsubscribe operations.</p>\n<p>The graphql\u2019s subscription request accept five possible parameters:\n1.  <strong>operation</strong>: Operation to perform: subscribe or unsubscribe. (required)\n2.  <strong>action</strong>: Action to which you wish to subscribe: create, update, delete or all_actions. (required)\n3.  <strong>channelId</strong>: Identification of the connection by websocket. (required)\n4.  <strong>id</strong>: Object\u2019s ID field value that you wish to subscribe to. (optional)\n5.  <strong>data</strong>: Model\u2019s fields that you want to appear in the subscription notifications. (optional)</p>\n<pre><span class=\"n\">subscription</span><span class=\"p\">{</span>\n    <span class=\"n\">userSubscription</span><span class=\"p\">(</span>\n        <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">UPDATE</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">SUBSCRIBE</span><span class=\"p\">,</span>\n        <span class=\"n\">channelId</span><span class=\"p\">:</span> <span class=\"s2\">\"GthKdsYVrK!WxRCdJQMPi\"</span><span class=\"p\">,</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"n\">USERNAME</span><span class=\"p\">,</span> <span class=\"n\">FIRST_NAME</span><span class=\"p\">,</span> <span class=\"n\">LAST_NAME</span><span class=\"p\">,</span> <span class=\"n\">EMAIL</span><span class=\"p\">,</span> <span class=\"n\">IS_SUPERUSER</span><span class=\"p\">]</span>\n    <span class=\"p\">){</span>\n        <span class=\"n\">ok</span>\n        <span class=\"n\">error</span>\n        <span class=\"n\">stream</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this case, the subscription request sent return a websocket message to client like this: <em>{\u201caction\u201d: \u201cupdate\u201d, \u201coperation\u201d: \u201csubscribe\u201d, \u201cok\u201d: true, \u201cstream\u201d: \u201cusers\u201d, \u201cerror\u201d: null}</em> and from that moment each time than the user with id=5 get modified, you will receive a message through websocket\u2019s connection with the following format:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"stream\"</span><span class=\"p\">:</span> <span class=\"s2\">\"users\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"payload\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"update\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"auth.user\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"meaghan90\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Meaghan\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Ackerman\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"meaghan@gmail.com\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"is_superuser\"</span><span class=\"p\">:</span> <span class=\"n\">false</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For unsubscribe you must send a graphql request like this:</p>\n<pre><span class=\"n\">subscription</span><span class=\"p\">{</span>\n    <span class=\"n\">userSubscription</span><span class=\"p\">(</span>\n        <span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">UPDATE</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"n\">UNSUBSCRIBE</span><span class=\"p\">,</span>\n        <span class=\"n\">channelId</span><span class=\"p\">:</span> <span class=\"s2\">\"GthKdsYVrK!WxRCdJQMPi\"</span><span class=\"p\">,</span>\n        <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n    <span class=\"p\">){</span>\n        <span class=\"n\">ok</span>\n        <span class=\"n\">error</span>\n        <span class=\"n\">stream</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><em>NOTE</em>: Each time than the graphql\u2019s server restart, you must to reestablish the websocket connection and resend the graphql\u2019s subscription request with the new websocket connection id.</p>\n</div>\n</div>\n<div id=\"change-log\">\n<h2>Change Log:</h2>\n<div id=\"v0-0-9\">\n<h3>v0.0.9:</h3>\n<ol>\n<li>Fixed minor bugs.</li>\n</ol>\n</div>\n<div id=\"v0-0-6\">\n<h3>v0.0.6:</h3>\n<ol>\n<li>Fixed minor bug on model_fields_enum generation when define fields in serializer class like this: fields = \u201c__all__\u201d</li>\n<li>This avoid malfunction with the posterior versions of graphene-django.</li>\n</ol>\n</div>\n<div id=\"v0-0-4\">\n<h3>v0.0.4:</h3>\n<ol>\n<li>Fixed minor bug on <em>subscription_resolver</em> function.</li>\n</ol>\n</div>\n<div id=\"v0-0-3\">\n<h3>v0.0.3:</h3>\n<ol>\n<li>Added <strong>depromise_subscription</strong> middleware to allow use subscriptions on graphene-django&gt;=2.0.</li>\n<li>Updated setup dependence to graphene-django-extras&gt;=0.3.0.</li>\n</ol>\n</div>\n<div id=\"v0-0-2\">\n<h3>v0.0.2:</h3>\n<p>1. Changed mutation_class dependence on Subscription Meta class definition to serializer_class to get better\nintegration.\n2. Fixed some minor bugs.</p>\n</div>\n<div id=\"v0-0-1\">\n<h3>v0.0.1:</h3>\n<ol>\n<li>First commit</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6439721, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b21333c925b03e67110403721634691f", "sha256": "8b9dcbfcef52abbe3a676ac755c20f40e3ee5c3b997db7f94f346e3724bddcee"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b21333c925b03e67110403721634691f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11263, "upload_time": "2017-11-06T15:51:15", "upload_time_iso_8601": "2017-11-06T15:51:15.348541Z", "url": "https://files.pythonhosted.org/packages/82/90/267a87c046072b184d44b3001c7361ed6e64ac02acbb47234476dfbc4ad2/graphene_django_subscriptions-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f826d7e061d2f7a4ed7a6f08b977fbc2", "sha256": "06bd1b64a36f8e69f56c11e70866ff561f4da27bc7e5c3bdaf5cc08452e9b4a6"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f826d7e061d2f7a4ed7a6f08b977fbc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8788, "upload_time": "2017-11-06T15:51:29", "upload_time_iso_8601": "2017-11-06T15:51:29.669046Z", "url": "https://files.pythonhosted.org/packages/f3/7d/0656212c1ab1c4439de491e1541c2bdfe6d12e003564b61add90a698e0c1/graphene_django_subscriptions-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b7a320967c22aa3827dbf76fe91dfb43", "sha256": "88e2ce18311b6847826c4baa8754e9bbd137171dd5bd8d6ac7f64f01372e5f31"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7a320967c22aa3827dbf76fe91dfb43", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11568, "upload_time": "2017-12-20T20:44:04", "upload_time_iso_8601": "2017-12-20T20:44:04.530009Z", "url": "https://files.pythonhosted.org/packages/26/70/eb328089acd71a2479165ebbc8ed4860f1354587910feaa9842195fc6c55/graphene_django_subscriptions-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f852178166f2301fb7ec89aa65c14321", "sha256": "375d41ab25f001ebf81490b63964231d9c6cea390f07a63610413584d391e21f"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f852178166f2301fb7ec89aa65c14321", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9008, "upload_time": "2017-12-20T20:44:06", "upload_time_iso_8601": "2017-12-20T20:44:06.333131Z", "url": "https://files.pythonhosted.org/packages/06/ec/9cd0ad197d4c7931042b5ae12edfd058e2852930815a4726ef8d24582e34/graphene_django_subscriptions-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "27be97f69b4fedf951e52ea813d38cda", "sha256": "dccee7f7bf0e8bb1605579c158d52ae32c291ef7efd78f5a2436723a2ca3dbb6"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27be97f69b4fedf951e52ea813d38cda", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12180, "upload_time": "2018-01-05T23:02:55", "upload_time_iso_8601": "2018-01-05T23:02:55.933947Z", "url": "https://files.pythonhosted.org/packages/21/a6/791ba61be8a67e9eab1ac8493d0b7bf45ac0d4f9a2690e1977fbc6632375/graphene_django_subscriptions-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2917ce27abb86bbc6ce4d93f47366517", "sha256": "7c92270f90ca28c7b0bb07c574764b5480cc89a694f80c05d09fb3dfaa747fb1"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2917ce27abb86bbc6ce4d93f47366517", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9323, "upload_time": "2018-01-05T23:02:57", "upload_time_iso_8601": "2018-01-05T23:02:57.735090Z", "url": "https://files.pythonhosted.org/packages/27/a3/9dee6019dc42bbd79bfab8a21415fbe56b91d4d7b55b4561789faee957a4/graphene_django_subscriptions-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b6e6ecddad4cc6e96baaf3efb3cb656a", "sha256": "68672105d8f4966148fec89a01ba222de548bfa90ea43cdd6414b1c6fe2fce9a"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b6e6ecddad4cc6e96baaf3efb3cb656a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12245, "upload_time": "2018-01-18T14:14:54", "upload_time_iso_8601": "2018-01-18T14:14:54.572171Z", "url": "https://files.pythonhosted.org/packages/78/ea/6181093348983113cfd3cd75db19118b27a4e8a309f257924b27d6dc2e94/graphene_django_subscriptions-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "810109552a5440f5ca6e1b3b680272b6", "sha256": "0fb2bdb6df0543df988b51a63572f73258c275a96af4411ad21702e69563830b"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.4.zip", "has_sig": false, "md5_digest": "810109552a5440f5ca6e1b3b680272b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20390, "upload_time": "2018-01-18T14:15:04", "upload_time_iso_8601": "2018-01-18T14:15:04.561163Z", "url": "https://files.pythonhosted.org/packages/6f/eb/fa3917e8ed9a0d6c6699d75bad8b8b843378bf94db1f3887dedbd6c287d0/graphene_django_subscriptions-0.0.4.zip", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "95dd9f88d13c8064ebeb403376700a62", "sha256": "be3d7978efa03b7948065dc83c567e8690c4443fb6a8b6374440db089783db2c"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "95dd9f88d13c8064ebeb403376700a62", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9577, "upload_time": "2019-02-04T08:50:20", "upload_time_iso_8601": "2019-02-04T08:50:20.999143Z", "url": "https://files.pythonhosted.org/packages/6f/4f/36cdcbb347536e397f0ed221c9f17aff7035c3eacc5dfbb24c88e1b23586/graphene_django_subscriptions-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e1a3fe9748ede49f89d0f05bce58a08", "sha256": "4a50a487bad3410f49c9821e69e664dd3b73bb794b336137ba480806cfbcaae8"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4e1a3fe9748ede49f89d0f05bce58a08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10235, "upload_time": "2019-02-04T08:50:22", "upload_time_iso_8601": "2019-02-04T08:50:22.404919Z", "url": "https://files.pythonhosted.org/packages/32/20/f61dfd5ab7a1a6cec5424ecf4448449d9237b6376d18a8c125bb8788a787/graphene_django_subscriptions-0.0.6.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "bccd6578605d5aa02f3e854193fa804e", "sha256": "1566f92c7002b5c9735d3a9e29747abeed9651c79c793ffeb882100fa904268a"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bccd6578605d5aa02f3e854193fa804e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9688, "upload_time": "2020-01-12T13:19:01", "upload_time_iso_8601": "2020-01-12T13:19:01.655824Z", "url": "https://files.pythonhosted.org/packages/31/fe/42870e3f0fe80ba4e0ebc7b1f093f794fe964ad4060865e277eb96a21e18/graphene_django_subscriptions-0.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18f0112b3d376b7a3db5ff2cb2e9336b", "sha256": "37776e5a766323234ca1790c1ef269a692890ac68ec4c3e4c1eb6b83e2e46710"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.9.tar.gz", "has_sig": false, "md5_digest": "18f0112b3d376b7a3db5ff2cb2e9336b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10404, "upload_time": "2020-01-12T13:19:04", "upload_time_iso_8601": "2020-01-12T13:19:04.213267Z", "url": "https://files.pythonhosted.org/packages/e8/b9/740530d50046e884b086b3c99cfbcd6697a5ea6640787a323e24300dcf70/graphene_django_subscriptions-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bccd6578605d5aa02f3e854193fa804e", "sha256": "1566f92c7002b5c9735d3a9e29747abeed9651c79c793ffeb882100fa904268a"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bccd6578605d5aa02f3e854193fa804e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9688, "upload_time": "2020-01-12T13:19:01", "upload_time_iso_8601": "2020-01-12T13:19:01.655824Z", "url": "https://files.pythonhosted.org/packages/31/fe/42870e3f0fe80ba4e0ebc7b1f093f794fe964ad4060865e277eb96a21e18/graphene_django_subscriptions-0.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18f0112b3d376b7a3db5ff2cb2e9336b", "sha256": "37776e5a766323234ca1790c1ef269a692890ac68ec4c3e4c1eb6b83e2e46710"}, "downloads": -1, "filename": "graphene_django_subscriptions-0.0.9.tar.gz", "has_sig": false, "md5_digest": "18f0112b3d376b7a3db5ff2cb2e9336b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10404, "upload_time": "2020-01-12T13:19:04", "upload_time_iso_8601": "2020-01-12T13:19:04.213267Z", "url": "https://files.pythonhosted.org/packages/e8/b9/740530d50046e884b086b3c99cfbcd6697a5ea6640787a323e24300dcf70/graphene_django_subscriptions-0.0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:45 2020"}