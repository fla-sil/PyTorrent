{"info": {"author": "Jeremy Bowman", "author_email": "jbowman@safaribooksonline.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.6", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development", "Topic :: Software Development :: Testing"], "description": "sbo-selenium\n============\n\nsbo-selenium is a framework primarily intended to help write Selenium tests for\nDjango applications, although it may be useful in testing other kinds of web\napplications as well.\n\nInstallation\n------------\n\nAdd 'sbo-selenium' to the requirements for the application being tested, and add\n'sbo_selenium' to the INSTALLED_APPS setting.  Install the new dependency as\nusual for the containing project; for SBO packages this is typically::\n\n    pip install -r requirements/tests.txt\n\nMake sure the post-merge runs to install all of the prerequisites::\n\n    ./git-hooks/post-merge\n\nBrowser engines\n+++++++++++++++\n\nIf you are running tests using docker, you don't need to worry about this part.\n\nIf you are not using docker, to run tests using a particular browser, the\nbrowser driver needs to be present. To drive Chrome via Selenium, you'll need\nto install both Chrome itself and then chromedriver:\n\n1. Download the correct ChromeDriver from\nhttp://chromedriver.storage.googleapis.com/index.html \n2. Put the binary, ``chromedriver``, somewhere on your path (ex: ``/usr/local/bin/chromedriver``)\n\nOn Mac OS X, if you have Homebrew installed you can instead run\n``brew install chromedriver``.\n\nTo test Mobile Safari in the iPhone simulator, you'll first need to do the\nfollowing:\n\n* Install Xcode\n* From the Downloads tab of the Xcode Preferences dialog, install\n  \"Command Line Tools\" and one of the iOS Simulator components (probably the\n  latest one)\n* Download and run `Appium <http://appium.io/>`_\n* Check the \"Use Mobile Safari\" checkbox\n* If you want to test in the iPad form factor, check the \"Force Device\"\n  checkbox and make sure \"iPad\" is selected next to it\n* Click the \"Launch\" button\n\nTo test Opera or Safari, you'll need to download the Selenium standalone server\n`jar file <http://selenium-release.storage.googleapis.com/2.40/selenium-server-standalone-2.40.0.jar>`_\nand configure the path to it in the ``SELENIUM_JAR_PATH`` setting\ndescribed below.\n\nNote that all of these browsers and more can be tested using Sauce OnDemand;\nsee below for details.\n\nSettings\n--------\n\nsbo-selenium uses a few Django settings to configure some aspects of test\nruns:\n\n* ``DJANGO_LIVE_TEST_SERVER_ADDRESS`` - The address at which to run the test\n  server (this will be used as the environment variable of the same name\n  described in the Django testing documentation).  Default value is\n  ``'localhost:9090'``.\n* ``SELENIUM_DEFAULT_BROWSER`` - The web browser to use for tests when none is\n  specified.  Default value is ``'chrome'``.\n* ``SELENIUM_DEFAULT_TESTS`` - The Selenium test(s) to be run by default when\n  none are specified.  Should be an array of test\n  specifications (see `Running Tests`_ below for examples).  Default value is\n  an empty list.\n* ``SELENIUM_DOCKER_DEBUG`` - True if the debug version of the selenium Docker\n  container should be used (in order to allow VNC connections).  Only relevant\n  when the ``--docker`` parameter is used.  Default value is ``False``.\n* ``SELENIUM_DOCKER_PORT`` - The port of localhost (or the Docker Machine, on\n  Mac and Windows) at which to expose the Selenium server running in a Docker\n  container.  Only relevant when the ``--docker`` parameter is used.  Default\n  value is ``4444``.\n* ``SELENIUM_DOCKER_TAG`` - The tag to use in identifying which version of the\n  Selenium Docker container to start.  Only relevant when the ``--docker``\n  parameter is used.  Default value is ``2.53.0``.\n* ``SELENIUM_PAGE_LOAD_TIMEOUT`` - The number of seconds to wait for a response\n  to a GET request before considering it to have failed.  Default value is 10\n  seconds.  (This is particularly important when using Sauce Connect, as it\n  sometimes fails to connect properly, such that every single page load stalls\n  indefinitely.)\n* ``SELENIUM_JAR_PATH`` - Absolute path of the Selenium standalone server jar\n  file.\n* ``SELENIUM_POLL_FREQUENCY`` - The number of seconds to wait after a failed\n  operation before trying again.  Default value is 0.5 seconds.\n* ``SELENIUM_SAUCE_API_KEY`` - The API key for the Sauce Labs account to use\n  for running tests.\n* ``SELENIUM_SAUCE_CONNECT_PATH`` - Absolute path of the\n  `Sauce Connect <https://saucelabs.com/docs/connect>`_ binary, used when\n  testing a site that isn't visible to the internet at large via Sauce Labs.\n  If not set but other parameters indicate Sauce usage, it's assumed that the\n  site being tested is publicly accessible.\n* ``SELENIUM_SAUCE_USERNAME`` - The username for the Sauce Labs account to use\n  for running tests.\n* ``SELENIUM_SAUCE_VERSION`` - The version of Selenium to ask Sauce Labs to\n  use in the provided virtual machine.  If omitted, the current default version\n  provided by Sauce Labs is used.  Documentation on the available versions and\n  current default can be found `here <https://saucelabs.com/docs/additional-config#selenium-version>`_.\n* ``SELENIUM_SCREENSHOT_DIR`` - Absolute path of the directory in which to save\n  screenshots taken over the course of running tests (these can be useful for\n  debugging test failures).  The directory will be created if it doesn't\n  already exist.  If the tests are being run via Sauce Labs, screenshots are\n  not created in this directory because that service generates screenshots for\n  us.\n* ``SELENIUM_TEST_COMMAND_OPTIONS`` - Dictionary of additional keyword\n  parameters to pass to the ``test`` management command\n* ``SELENIUM_TIMEOUT`` - The number of seconds to wait after an operation first\n  failed until giving up and declaring it an error.  Default value is 10\n  seconds.\n\nNote that some test runners (such as nose) may not always show errors logged\nduring test setup and teardown.  To consistently get this output, you may want\nto configure a logging handler that outputs to file (in addition to any that\nmay be outputting to console).\n\nCreating Tests\n--------------\n\nWe're creating Selenium tests as Python classes.  Typically you'll want to\ncreate a common subclass of sbo_selenium.SeleniumTestCase which each of your\napplication's actual test classes will in turn inherit from.  This main class\nwill contain methods for common operations like logging in and logging out,\nverifying that common page content is present, loading typical test data, and\nso forth.  This can be defined in the application's tests.selenium.__init__\nmodule.  Avoid method names with \"test\" in them, as the test runner is likely\nto mistake them for actual standalone tests.\n\nEach related set of tests should then be created as methods in a subclass of\nthis common test case class which lives in its own file within tests.selenium\n(or a subdirectory thereof).  These test methods should start with ``test_`` so\nthe test runner can find them, and it's generally good practice to have utility\nmethods which aren't tests themselves start with an underscore.  Typically each\ntest class will cover functionality on a single page or a set of closely\nrelated pages.\n\nRunning Tests\n-------------\n\nRunning Tests Locally\n+++++++++++++++++++++\n\nTests can be run via the \"selenium\" management command::\n\n    ./manage.py selenium --settings=myapp.selenium_settings\n\nTo run the default set of sbo-selenium tests::\n\n    ./manage.py selenium\n\nOr to specify which test(s) to run rather than using the defaults specified in\nthe settings file::\n\n    ./manage.py selenium myapp.tests.selenium.test_module:TestClass.test_method myotherapp/tests/selenium --settings=myapp.selenium_settings\n\nHaving a separate settings file for the Selenium tests isn't a requirement, but\nin practice you'll probably want to use different settings for the tests than\nyou do for development (for example, to make sure that ``DEBUG=False``).  If you\ndon't want to type out the settings parameter each time, a simple shell script\nshould do the trick::\n\n    #!/bin/sh\n    ./manage.py selenium $@ --settings=myapp.selenium_settings\n\nAll the usual methods that the test runner uses to identify tests should work::\n\n    directory/of/tests\n    python.module\n    python.module:TestClass\n    python.module:TestClass.test_method\n\n(Note that a specifying a package, like myapp.tests.selenium when the actual\ntests are defined in modules within that package, does NOT work.)\n\nBy default, tests are run in the browser specified by ``SELENIUM_DEFAULT_BROWSER``.\nYou can use the ``-b`` or ``--browser`` parameter to change this::\n\n    ./manage.py selenium -b firefox\n    ./manage.py selenium --browser=safari\n\nValid browser names are \"chrome\", \"firefox\", \"htmlunit\", \"ios\", \"opera\",\n\"phantomjs\", and \"safari\" (\"ipad\", \"iphone\", and \"ipod\" are treated as\nsynonyms for \"ios\", the form factor is chosen in Appium).\n\nIf you want to specify a specific Selenium server to use as a command executor\n(whether running on localhost, a specific remote server, a Docker container,\netc.), you can use the ``--command-executor`` parameter::\n\n    ./manage.py selenium -b firefox --command-executor=http://127.0.0.1:4444/wd/hub\n\nNote that if you are using a command executor in a Docker container, a remote\nhost, etc., you should not rely on ``localhost`` or ``127.0.0.1`` in\n``DJANGO_LIVE_TEST_SERVER_ADDRESS`` and must add the IP address which will be\nused to access the server to ``ALLOWED_HOSTS``.  You can either specify the\nreal IP address (rarely ideal) or try to deduce it via code like the\nfollowing::\n\n    import socket\n    IP_ADDRESS = socket.gethostbyname(socket.gethostname())\n    ALLOWED_HOSTS = ['localhost', IP_ADDRESS]\n    DJANGO_LIVE_TEST_SERVER_ADDRESS = '{}:9090'.format(IP_ADDRESS)\n\nYou can also specify the number of times to run the tests (for example, if you\nhave a test that is failing intermittently for some reason and want to run it\na few times to increase the odds of encountering the error)::\n\n    ./manage.py selenium -n 5\n\nRunning Tests in a Docker Container\n+++++++++++++++++++++++++++++++++++\n\nAs a convenience, you can use the ``--docker`` parameter to automatically start\na standalone Selenium server in a Docker container for chrome or firefox tests.\nFor this to work, the terminal must already be configured for ``docker``\ncommands to work.  The container will be stopped automatically at the end of\nthe test run.  By default it uses the ``2.53.0`` image from\nhttps://hub.docker.com/r/selenium/ and is exposed on port 4444, but this can\nbe customized via the Django settings described above.::\n\n    ./manage.py selenium --settings=myapp.selenium_settings --docker\n    ./manage.py selenium --docker\n\nNote that if you're running Docker containers in a virtual machine via\n``docker-machine`` or such and using ``tox``, you'll need to allow some\nenvironment variables to be passed through to the tox environment by adding\nthe following to the appropriate environment in ``tox.ini``::\n\n    passenv =\n        DOCKER_*\n        HOME\n\nRunning Tests at Sauce Labs\n+++++++++++++++++++++++++++\n\nInstead of running tests in a local browser, they can be run on one in a\nvirtual machine hosted at  `Sauce Labs <https://saucelabs.com/home>`_.  Support\nfor this in sbo-selenium is designed to play nicely with the Jenkins\n`Sauce OnDemand plugin <https://saucelabs.com/jenkins>`_.  For running tests in\nJenkins, just install that plugin and configure it for the job you want to\nrun.  On a local machine, you'll need to set the ``SELENIUM_SAUCE_*`` Django\nsettings described above and use a couple of command-line parameters in\naddition to the ``-b`` browser name setting mentioned previously:\n\n* ``--platform`` - The name and version of the operating system to\n  use.\n* ``--browser-version`` - The version number of the browser to use.\n\nThe valid values for these can be found on the\n`Sauce Labs website <https://saucelabs.com/platforms>`_.\n\nThere's also a ``--tunnel-identifier`` parameter which can be used to utilize\na named Sauce Connect tunnel; this is particularly useful if you intend to run\nmultiple Connect instances against the same account simultaneously (like on\nmultiple Jenkins slave nodes).  For more about what these tunnels are and when\nto use them, see the `Sauce Labs documentation <https://saucelabs.com/docs/connect#part-9>`_\non the topic.\n\nGenerating Documentation\n------------------------\n\nDocumentation for this package is generated using `Sphinx <http://sphinx-doc.org/>`_\nand some extensions for it from `sbo-sphinx <https://github.com/safarijv/sbo-sphinx>`_.\nTo generate the docs locally with any changes you may have made::\n\n    pip install -r requirements/tests.txt\n    tox -e docs", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/safarijv/sbo-selenium", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sbo-selenium", "package_url": "https://pypi.org/project/sbo-selenium/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sbo-selenium/", "project_urls": {"Homepage": "https://github.com/safarijv/sbo-selenium"}, "release_url": "https://pypi.org/project/sbo-selenium/0.7.2/", "requires_dist": ["Django (>=1.5)", "requests", "selenium"], "requires_python": "", "summary": "Selenium testing framework for Django applications", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>sbo-selenium is a framework primarily intended to help write Selenium tests for\nDjango applications, although it may be useful in testing other kinds of web\napplications as well.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Add \u2018sbo-selenium\u2019 to the requirements for the application being tested, and add\n\u2018sbo_selenium\u2019 to the INSTALLED_APPS setting.  Install the new dependency as\nusual for the containing project; for SBO packages this is typically:</p>\n<pre>pip install -r requirements/tests.txt\n</pre>\n<p>Make sure the post-merge runs to install all of the prerequisites:</p>\n<pre>./git-hooks/post-merge\n</pre>\n<div id=\"browser-engines\">\n<h3>Browser engines</h3>\n<p>If you are running tests using docker, you don\u2019t need to worry about this part.</p>\n<p>If you are not using docker, to run tests using a particular browser, the\nbrowser driver needs to be present. To drive Chrome via Selenium, you\u2019ll need\nto install both Chrome itself and then chromedriver:</p>\n<p>1. Download the correct ChromeDriver from\n<a href=\"http://chromedriver.storage.googleapis.com/index.html\" rel=\"nofollow\">http://chromedriver.storage.googleapis.com/index.html</a>\n2. Put the binary, <tt>chromedriver</tt>, somewhere on your path (ex: <tt>/usr/local/bin/chromedriver</tt>)</p>\n<p>On Mac OS X, if you have Homebrew installed you can instead run\n<tt>brew install chromedriver</tt>.</p>\n<p>To test Mobile Safari in the iPhone simulator, you\u2019ll first need to do the\nfollowing:</p>\n<ul>\n<li>Install Xcode</li>\n<li>From the Downloads tab of the Xcode Preferences dialog, install\n\u201cCommand Line Tools\u201d and one of the iOS Simulator components (probably the\nlatest one)</li>\n<li>Download and run <a href=\"http://appium.io/\" rel=\"nofollow\">Appium</a></li>\n<li>Check the \u201cUse Mobile Safari\u201d checkbox</li>\n<li>If you want to test in the iPad form factor, check the \u201cForce Device\u201d\ncheckbox and make sure \u201ciPad\u201d is selected next to it</li>\n<li>Click the \u201cLaunch\u201d button</li>\n</ul>\n<p>To test Opera or Safari, you\u2019ll need to download the Selenium standalone server\n<a href=\"http://selenium-release.storage.googleapis.com/2.40/selenium-server-standalone-2.40.0.jar\" rel=\"nofollow\">jar file</a>\nand configure the path to it in the <tt>SELENIUM_JAR_PATH</tt> setting\ndescribed below.</p>\n<p>Note that all of these browsers and more can be tested using Sauce OnDemand;\nsee below for details.</p>\n</div>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>sbo-selenium uses a few Django settings to configure some aspects of test\nruns:</p>\n<ul>\n<li><tt>DJANGO_LIVE_TEST_SERVER_ADDRESS</tt> - The address at which to run the test\nserver (this will be used as the environment variable of the same name\ndescribed in the Django testing documentation).  Default value is\n<tt>'localhost:9090'</tt>.</li>\n<li><tt>SELENIUM_DEFAULT_BROWSER</tt> - The web browser to use for tests when none is\nspecified.  Default value is <tt>'chrome'</tt>.</li>\n<li><tt>SELENIUM_DEFAULT_TESTS</tt> - The Selenium test(s) to be run by default when\nnone are specified.  Should be an array of test\nspecifications (see <a href=\"#running-tests\" rel=\"nofollow\">Running Tests</a> below for examples).  Default value is\nan empty list.</li>\n<li><tt>SELENIUM_DOCKER_DEBUG</tt> - True if the debug version of the selenium Docker\ncontainer should be used (in order to allow VNC connections).  Only relevant\nwhen the <tt><span class=\"pre\">--docker</span></tt> parameter is used.  Default value is <tt>False</tt>.</li>\n<li><tt>SELENIUM_DOCKER_PORT</tt> - The port of localhost (or the Docker Machine, on\nMac and Windows) at which to expose the Selenium server running in a Docker\ncontainer.  Only relevant when the <tt><span class=\"pre\">--docker</span></tt> parameter is used.  Default\nvalue is <tt>4444</tt>.</li>\n<li><tt>SELENIUM_DOCKER_TAG</tt> - The tag to use in identifying which version of the\nSelenium Docker container to start.  Only relevant when the <tt><span class=\"pre\">--docker</span></tt>\nparameter is used.  Default value is <tt>2.53.0</tt>.</li>\n<li><tt>SELENIUM_PAGE_LOAD_TIMEOUT</tt> - The number of seconds to wait for a response\nto a GET request before considering it to have failed.  Default value is 10\nseconds.  (This is particularly important when using Sauce Connect, as it\nsometimes fails to connect properly, such that every single page load stalls\nindefinitely.)</li>\n<li><tt>SELENIUM_JAR_PATH</tt> - Absolute path of the Selenium standalone server jar\nfile.</li>\n<li><tt>SELENIUM_POLL_FREQUENCY</tt> - The number of seconds to wait after a failed\noperation before trying again.  Default value is 0.5 seconds.</li>\n<li><tt>SELENIUM_SAUCE_API_KEY</tt> - The API key for the Sauce Labs account to use\nfor running tests.</li>\n<li><tt>SELENIUM_SAUCE_CONNECT_PATH</tt> - Absolute path of the\n<a href=\"https://saucelabs.com/docs/connect\" rel=\"nofollow\">Sauce Connect</a> binary, used when\ntesting a site that isn\u2019t visible to the internet at large via Sauce Labs.\nIf not set but other parameters indicate Sauce usage, it\u2019s assumed that the\nsite being tested is publicly accessible.</li>\n<li><tt>SELENIUM_SAUCE_USERNAME</tt> - The username for the Sauce Labs account to use\nfor running tests.</li>\n<li><tt>SELENIUM_SAUCE_VERSION</tt> - The version of Selenium to ask Sauce Labs to\nuse in the provided virtual machine.  If omitted, the current default version\nprovided by Sauce Labs is used.  Documentation on the available versions and\ncurrent default can be found <a href=\"https://saucelabs.com/docs/additional-config#selenium-version\" rel=\"nofollow\">here</a>.</li>\n<li><tt>SELENIUM_SCREENSHOT_DIR</tt> - Absolute path of the directory in which to save\nscreenshots taken over the course of running tests (these can be useful for\ndebugging test failures).  The directory will be created if it doesn\u2019t\nalready exist.  If the tests are being run via Sauce Labs, screenshots are\nnot created in this directory because that service generates screenshots for\nus.</li>\n<li><tt>SELENIUM_TEST_COMMAND_OPTIONS</tt> - Dictionary of additional keyword\nparameters to pass to the <tt>test</tt> management command</li>\n<li><tt>SELENIUM_TIMEOUT</tt> - The number of seconds to wait after an operation first\nfailed until giving up and declaring it an error.  Default value is 10\nseconds.</li>\n</ul>\n<p>Note that some test runners (such as nose) may not always show errors logged\nduring test setup and teardown.  To consistently get this output, you may want\nto configure a logging handler that outputs to file (in addition to any that\nmay be outputting to console).</p>\n</div>\n<div id=\"creating-tests\">\n<h2>Creating Tests</h2>\n<p>We\u2019re creating Selenium tests as Python classes.  Typically you\u2019ll want to\ncreate a common subclass of sbo_selenium.SeleniumTestCase which each of your\napplication\u2019s actual test classes will in turn inherit from.  This main class\nwill contain methods for common operations like logging in and logging out,\nverifying that common page content is present, loading typical test data, and\nso forth.  This can be defined in the application\u2019s tests.selenium.__init__\nmodule.  Avoid method names with \u201ctest\u201d in them, as the test runner is likely\nto mistake them for actual standalone tests.</p>\n<p>Each related set of tests should then be created as methods in a subclass of\nthis common test case class which lives in its own file within tests.selenium\n(or a subdirectory thereof).  These test methods should start with <tt>test_</tt> so\nthe test runner can find them, and it\u2019s generally good practice to have utility\nmethods which aren\u2019t tests themselves start with an underscore.  Typically each\ntest class will cover functionality on a single page or a set of closely\nrelated pages.</p>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<div id=\"running-tests-locally\">\n<h3>Running Tests Locally</h3>\n<p>Tests can be run via the \u201cselenium\u201d management command:</p>\n<pre>./manage.py selenium --settings=myapp.selenium_settings\n</pre>\n<p>To run the default set of sbo-selenium tests:</p>\n<pre>./manage.py selenium\n</pre>\n<p>Or to specify which test(s) to run rather than using the defaults specified in\nthe settings file:</p>\n<pre>./manage.py selenium myapp.tests.selenium.test_module:TestClass.test_method myotherapp/tests/selenium --settings=myapp.selenium_settings\n</pre>\n<p>Having a separate settings file for the Selenium tests isn\u2019t a requirement, but\nin practice you\u2019ll probably want to use different settings for the tests than\nyou do for development (for example, to make sure that <tt>DEBUG=False</tt>).  If you\ndon\u2019t want to type out the settings parameter each time, a simple shell script\nshould do the trick:</p>\n<pre>#!/bin/sh\n./manage.py selenium $@ --settings=myapp.selenium_settings\n</pre>\n<p>All the usual methods that the test runner uses to identify tests should work:</p>\n<pre>directory/of/tests\npython.module\npython.module:TestClass\npython.module:TestClass.test_method\n</pre>\n<p>(Note that a specifying a package, like myapp.tests.selenium when the actual\ntests are defined in modules within that package, does NOT work.)</p>\n<p>By default, tests are run in the browser specified by <tt>SELENIUM_DEFAULT_BROWSER</tt>.\nYou can use the <tt><span class=\"pre\">-b</span></tt> or <tt><span class=\"pre\">--browser</span></tt> parameter to change this:</p>\n<pre>./manage.py selenium -b firefox\n./manage.py selenium --browser=safari\n</pre>\n<p>Valid browser names are \u201cchrome\u201d, \u201cfirefox\u201d, \u201chtmlunit\u201d, \u201cios\u201d, \u201copera\u201d,\n\u201cphantomjs\u201d, and \u201csafari\u201d (\u201cipad\u201d, \u201ciphone\u201d, and \u201cipod\u201d are treated as\nsynonyms for \u201cios\u201d, the form factor is chosen in Appium).</p>\n<p>If you want to specify a specific Selenium server to use as a command executor\n(whether running on localhost, a specific remote server, a Docker container,\netc.), you can use the <tt><span class=\"pre\">--command-executor</span></tt> parameter:</p>\n<pre>./manage.py selenium -b firefox --command-executor=http://127.0.0.1:4444/wd/hub\n</pre>\n<p>Note that if you are using a command executor in a Docker container, a remote\nhost, etc., you should not rely on <tt>localhost</tt> or <tt>127.0.0.1</tt> in\n<tt>DJANGO_LIVE_TEST_SERVER_ADDRESS</tt> and must add the IP address which will be\nused to access the server to <tt>ALLOWED_HOSTS</tt>.  You can either specify the\nreal IP address (rarely ideal) or try to deduce it via code like the\nfollowing:</p>\n<pre>import socket\nIP_ADDRESS = socket.gethostbyname(socket.gethostname())\nALLOWED_HOSTS = ['localhost', IP_ADDRESS]\nDJANGO_LIVE_TEST_SERVER_ADDRESS = '{}:9090'.format(IP_ADDRESS)\n</pre>\n<p>You can also specify the number of times to run the tests (for example, if you\nhave a test that is failing intermittently for some reason and want to run it\na few times to increase the odds of encountering the error):</p>\n<pre>./manage.py selenium -n 5\n</pre>\n</div>\n<div id=\"running-tests-in-a-docker-container\">\n<h3>Running Tests in a Docker Container</h3>\n<p>As a convenience, you can use the <tt><span class=\"pre\">--docker</span></tt> parameter to automatically start\na standalone Selenium server in a Docker container for chrome or firefox tests.\nFor this to work, the terminal must already be configured for <tt>docker</tt>\ncommands to work.  The container will be stopped automatically at the end of\nthe test run.  By default it uses the <tt>2.53.0</tt> image from\n<a href=\"https://hub.docker.com/r/selenium/\" rel=\"nofollow\">https://hub.docker.com/r/selenium/</a> and is exposed on port 4444, but this can\nbe customized via the Django settings described above.:</p>\n<pre>./manage.py selenium --settings=myapp.selenium_settings --docker\n./manage.py selenium --docker\n</pre>\n<p>Note that if you\u2019re running Docker containers in a virtual machine via\n<tt><span class=\"pre\">docker-machine</span></tt> or such and using <tt>tox</tt>, you\u2019ll need to allow some\nenvironment variables to be passed through to the tox environment by adding\nthe following to the appropriate environment in <tt>tox.ini</tt>:</p>\n<pre>passenv =\n    DOCKER_*\n    HOME\n</pre>\n</div>\n<div id=\"running-tests-at-sauce-labs\">\n<h3>Running Tests at Sauce Labs</h3>\n<p>Instead of running tests in a local browser, they can be run on one in a\nvirtual machine hosted at  <a href=\"https://saucelabs.com/home\" rel=\"nofollow\">Sauce Labs</a>.  Support\nfor this in sbo-selenium is designed to play nicely with the Jenkins\n<a href=\"https://saucelabs.com/jenkins\" rel=\"nofollow\">Sauce OnDemand plugin</a>.  For running tests in\nJenkins, just install that plugin and configure it for the job you want to\nrun.  On a local machine, you\u2019ll need to set the <tt>SELENIUM_SAUCE_*</tt> Django\nsettings described above and use a couple of command-line parameters in\naddition to the <tt><span class=\"pre\">-b</span></tt> browser name setting mentioned previously:</p>\n<ul>\n<li><tt><span class=\"pre\">--platform</span></tt> - The name and version of the operating system to\nuse.</li>\n<li><tt><span class=\"pre\">--browser-version</span></tt> - The version number of the browser to use.</li>\n</ul>\n<p>The valid values for these can be found on the\n<a href=\"https://saucelabs.com/platforms\" rel=\"nofollow\">Sauce Labs website</a>.</p>\n<p>There\u2019s also a <tt><span class=\"pre\">--tunnel-identifier</span></tt> parameter which can be used to utilize\na named Sauce Connect tunnel; this is particularly useful if you intend to run\nmultiple Connect instances against the same account simultaneously (like on\nmultiple Jenkins slave nodes).  For more about what these tunnels are and when\nto use them, see the <a href=\"https://saucelabs.com/docs/connect#part-9\" rel=\"nofollow\">Sauce Labs documentation</a>\non the topic.</p>\n</div>\n</div>\n<div id=\"generating-documentation\">\n<h2>Generating Documentation</h2>\n<p>Documentation for this package is generated using <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>\nand some extensions for it from <a href=\"https://github.com/safarijv/sbo-sphinx\" rel=\"nofollow\">sbo-sphinx</a>.\nTo generate the docs locally with any changes you may have made:</p>\n<pre>pip install -r requirements/tests.txt\ntox -e docs\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2100942, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "e2f874cc285378eacf548924892a0193", "sha256": "2246540732021cf7b0c22144f38c47c17579b56e4991bca7e2cc43925a198292"}, "downloads": -1, "filename": "sbo-selenium-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e2f874cc285378eacf548924892a0193", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16979, "upload_time": "2014-03-29T01:00:37", "upload_time_iso_8601": "2014-03-29T01:00:37.712769Z", "url": "https://files.pythonhosted.org/packages/01/d7/01f05c318f43b75eadc7e0616a5959e464bcd5a545578558d0dca60ac6cd/sbo-selenium-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "5fdceaa802e4f7fd68ec4ec61a63acf6", "sha256": "35a8579f8f3e2d6374f2e551af764cdc6e7bce86db0edc4ea7a6fbc68d999965"}, "downloads": -1, "filename": "sbo-selenium-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5fdceaa802e4f7fd68ec4ec61a63acf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35648, "upload_time": "2014-04-18T22:34:38", "upload_time_iso_8601": "2014-04-18T22:34:38.483936Z", "url": "https://files.pythonhosted.org/packages/58/d6/5fed5c784984e4d381d06ff8d8f0857030e1362e814bc41d06002a4d6b19/sbo-selenium-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "28b841b8fce8a1445ab5002133989f09", "sha256": "e1e84e862f87afac06a732c32767a03bbc4a72de192f109de188f4f85794bc05"}, "downloads": -1, "filename": "sbo-selenium-0.4.2.tar.gz", "has_sig": false, "md5_digest": "28b841b8fce8a1445ab5002133989f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35846, "upload_time": "2014-05-20T17:05:48", "upload_time_iso_8601": "2014-05-20T17:05:48.566764Z", "url": "https://files.pythonhosted.org/packages/9a/c6/ae4a0095a56601204e3ee767a2ae227385c9149dc02a086d7fb01e6f3841/sbo-selenium-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "ff270ca3ab45bbf050efe170ae0b67e1", "sha256": "7be107458b23a5a07ebdd93e528d341be5f1a8d982eff1a0b88cea89124603b7"}, "downloads": -1, "filename": "sbo-selenium-0.4.3.tar.gz", "has_sig": false, "md5_digest": "ff270ca3ab45bbf050efe170ae0b67e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35979, "upload_time": "2014-06-02T02:54:51", "upload_time_iso_8601": "2014-06-02T02:54:51.580272Z", "url": "https://files.pythonhosted.org/packages/3e/bb/6ea7043d207a8b541f5a3fe47ad656471587dcaa15334c7af7c5a1a4ea93/sbo-selenium-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "1bc8b8f7a07555fb8b4765d4cb4c1a31", "sha256": "6770a9834790837fac352c105db629f40f6e0c5a924f79d872ea41b04a358ada"}, "downloads": -1, "filename": "sbo-selenium-0.4.4.tar.gz", "has_sig": false, "md5_digest": "1bc8b8f7a07555fb8b4765d4cb4c1a31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36057, "upload_time": "2015-01-30T21:07:55", "upload_time_iso_8601": "2015-01-30T21:07:55.007144Z", "url": "https://files.pythonhosted.org/packages/dd/d7/e28f3ae539112af5f06dd5a4c261d5efe18664a65ef22501336b8e6ffd99/sbo-selenium-0.4.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "974f6b8429e4c09800a4d23bbb2ab39d", "sha256": "0b7cc8636092492179353248d04a63e3174daf97e91c47b8db42460365fc2799"}, "downloads": -1, "filename": "sbo_selenium-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "974f6b8429e4c09800a4d23bbb2ab39d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43885, "upload_time": "2015-07-01T14:23:16", "upload_time_iso_8601": "2015-07-01T14:23:16.118430Z", "url": "https://files.pythonhosted.org/packages/10/ca/5dfc33138a076a3ef37f6f6d8596a5f39b64c600fb92deaa623c0234bd28/sbo_selenium-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "690f26548a92c87c862efebf94ce5329", "sha256": "a1e59c8b7bad80067dc44d711decf9070e72192c4712e38cb7d9fc0544f51643"}, "downloads": -1, "filename": "sbo-selenium-0.5.0.tar.gz", "has_sig": false, "md5_digest": "690f26548a92c87c862efebf94ce5329", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41205, "upload_time": "2015-07-01T14:23:12", "upload_time_iso_8601": "2015-07-01T14:23:12.595200Z", "url": "https://files.pythonhosted.org/packages/1f/24/e5b0cd831cb407e4a1a95192dd618ebcbe4e69f993693671e7206d1e99f8/sbo-selenium-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bedb0aa75d868af35599fbd3ecbd4663", "sha256": "8d3420f52ab9be003423f33b9d1f599e972cdde2912b25adf2eef3f7fe0b2d29"}, "downloads": -1, "filename": "sbo_selenium-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bedb0aa75d868af35599fbd3ecbd4663", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51019, "upload_time": "2016-03-07T16:14:22", "upload_time_iso_8601": "2016-03-07T16:14:22.605850Z", "url": "https://files.pythonhosted.org/packages/38/d2/14b5f1f935ce19b36c57127d88d079da3415344bbfe054649d23dda03fe4/sbo_selenium-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "454ca79523b9f04f19d17dc0440713da", "sha256": "ce01688702d64b5a1baf0ca641a748bb11efedffcd05369e4e6b0f504c12200e"}, "downloads": -1, "filename": "sbo-selenium-0.5.1.tar.gz", "has_sig": false, "md5_digest": "454ca79523b9f04f19d17dc0440713da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48530, "upload_time": "2016-03-07T16:14:01", "upload_time_iso_8601": "2016-03-07T16:14:01.038808Z", "url": "https://files.pythonhosted.org/packages/35/93/704a2856aab433c0ddcd197674abe1b3d25db9a62220af1b8b6d4c07dc36/sbo-selenium-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c0d5d188a2e1ce76b219dcc6dae546f7", "sha256": "3b77f28beb3b87336b8f0545db425cb71ea5e3e879a5bb38d99cd7b00308821e"}, "downloads": -1, "filename": "sbo_selenium-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c0d5d188a2e1ce76b219dcc6dae546f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51722, "upload_time": "2016-03-29T22:32:44", "upload_time_iso_8601": "2016-03-29T22:32:44.809174Z", "url": "https://files.pythonhosted.org/packages/99/10/91c358a776dd9ecc4b747a4471b2e03e44820572dfdabd7d7540c8761ef9/sbo_selenium-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6798dd03f2f6ca7294f84e0af2f968e2", "sha256": "af3764dc34973d68165a9c4a1e63eec4bf8b5c2b3c0fb57d351549285fe9f60a"}, "downloads": -1, "filename": "sbo-selenium-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6798dd03f2f6ca7294f84e0af2f968e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48438, "upload_time": "2016-03-29T22:32:22", "upload_time_iso_8601": "2016-03-29T22:32:22.358513Z", "url": "https://files.pythonhosted.org/packages/a7/b4/55954efe9ffc752d2099424fa94e0804f0e6062403ce9d031b5c5a96c89f/sbo-selenium-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "2589e671778071ea09ef16707dc180d3", "sha256": "5365822242f3e8b0bc75a8b386d57844da5c1faeea054603a063601c5785c9ea"}, "downloads": -1, "filename": "sbo_selenium-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2589e671778071ea09ef16707dc180d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54625, "upload_time": "2016-04-21T18:54:21", "upload_time_iso_8601": "2016-04-21T18:54:21.508060Z", "url": "https://files.pythonhosted.org/packages/7b/f4/1332d7761775b1806d6f3b4c99f7609e3b1cb17a71ada42efdc283256b7b/sbo_selenium-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8a12b644557caec0d475970edae7d5", "sha256": "bf966b781b281357e835bb886f6e8e15ac54dcc67d9a445efc3e49a726dce570"}, "downloads": -1, "filename": "sbo-selenium-0.7.0.tar.gz", "has_sig": false, "md5_digest": "0e8a12b644557caec0d475970edae7d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51271, "upload_time": "2016-04-21T18:53:17", "upload_time_iso_8601": "2016-04-21T18:53:17.546441Z", "url": "https://files.pythonhosted.org/packages/56/e3/d23ee50691c2091e0800baee43fc0cafe1d7b3dc3eedfb33a3df93b8b38a/sbo-selenium-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "ae1fadc3ff456bdcc4b14e9c9175bee4", "sha256": "7564a121997dd8839758256397d6f21a32e563e22f3d0c8550374eb1bd8bffda"}, "downloads": -1, "filename": "sbo_selenium-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae1fadc3ff456bdcc4b14e9c9175bee4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54869, "upload_time": "2016-04-22T20:41:44", "upload_time_iso_8601": "2016-04-22T20:41:44.267492Z", "url": "https://files.pythonhosted.org/packages/b7/9c/73e7e23507931e6aa42c4a11c8fff5c6562cbac96c56565d240114b9a0fe/sbo_selenium-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62951049ad3f60ed4e53ee376d896b1d", "sha256": "29327ac384353f052084aac2e94cfdd56ae90a3056886d84189ed1720471120b"}, "downloads": -1, "filename": "sbo-selenium-0.7.1.tar.gz", "has_sig": false, "md5_digest": "62951049ad3f60ed4e53ee376d896b1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51567, "upload_time": "2016-04-22T20:41:59", "upload_time_iso_8601": "2016-04-22T20:41:59.457091Z", "url": "https://files.pythonhosted.org/packages/47/cc/9f39f0b2a096ea1abbeea1f6518fd2575374257a6fe97ac0fac36e35f55b/sbo-selenium-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "c890326f0a7a388b2e6b2a130162301f", "sha256": "784f52d8b65f896694d20c33635e221f0c3aca1bef519ac669bb526b1a9c9b15"}, "downloads": -1, "filename": "sbo_selenium-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c890326f0a7a388b2e6b2a130162301f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 55220, "upload_time": "2016-05-05T15:17:41", "upload_time_iso_8601": "2016-05-05T15:17:41.467041Z", "url": "https://files.pythonhosted.org/packages/ac/50/db2f0d48701e602bf98dc5a437a8c84d0d2ac3d3e16b275d5982b556c484/sbo_selenium-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9773f82c394d063ac82868c0f118c3d6", "sha256": "125ce651eb5f9ad159f8929df879b9b8abd5af36a6be68354d0251ab29d54be8"}, "downloads": -1, "filename": "sbo-selenium-0.7.2.tar.gz", "has_sig": false, "md5_digest": "9773f82c394d063ac82868c0f118c3d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51939, "upload_time": "2016-05-05T15:17:48", "upload_time_iso_8601": "2016-05-05T15:17:48.725443Z", "url": "https://files.pythonhosted.org/packages/af/1a/f8cc2a2ae024de5a4b8bb0f4961a314b4db991a5f24888777c17fe1b389c/sbo-selenium-0.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c890326f0a7a388b2e6b2a130162301f", "sha256": "784f52d8b65f896694d20c33635e221f0c3aca1bef519ac669bb526b1a9c9b15"}, "downloads": -1, "filename": "sbo_selenium-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c890326f0a7a388b2e6b2a130162301f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 55220, "upload_time": "2016-05-05T15:17:41", "upload_time_iso_8601": "2016-05-05T15:17:41.467041Z", "url": "https://files.pythonhosted.org/packages/ac/50/db2f0d48701e602bf98dc5a437a8c84d0d2ac3d3e16b275d5982b556c484/sbo_selenium-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9773f82c394d063ac82868c0f118c3d6", "sha256": "125ce651eb5f9ad159f8929df879b9b8abd5af36a6be68354d0251ab29d54be8"}, "downloads": -1, "filename": "sbo-selenium-0.7.2.tar.gz", "has_sig": false, "md5_digest": "9773f82c394d063ac82868c0f118c3d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51939, "upload_time": "2016-05-05T15:17:48", "upload_time_iso_8601": "2016-05-05T15:17:48.725443Z", "url": "https://files.pythonhosted.org/packages/af/1a/f8cc2a2ae024de5a4b8bb0f4961a314b4db991a5f24888777c17fe1b389c/sbo-selenium-0.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:17 2020"}