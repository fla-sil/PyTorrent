{"info": {"author": "Ashley Straw", "author_email": "strawac1@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Lint\n====\n\nPython script to automatically lint new reviews to gerrit. Designed to\nbe run from within Jenkins via the Gerrit Trigger plugin\n\nLint is a python package to assist with automatic code reviews. It\nprovides the following tools:\n\n1. Get a list of files changed between the active gerrit branch and the\n   specified gerrit review.\n2. Lint the original files in the active gerrit branch.\n3. Checkout the current review ID\n4. Lint the changed files.\n5. Analyze the results according to specified validators.\n6. Post the results of the validation to gerrit via SSH (+1/-1 score\n   assigned, including a message).\n\nLint uses the environmental variables set by Gerrit Trigger to do almost\nall of the configuration. You can still use it via command-line (with\noptions!) for manual testing.\n\nYou can also add a checkers to validators, which are simple functions to\ncompare lint data that are passed to the validator.\n\nInstallation\n------------\n\npip install git+https://github.com/astraw38/Lint\n\nUsage\n-----\n\nFor pylint, just use 'gpylinter.py'. It by default will use the\n'Pylinter' plugin for .py files, as well as the default pylint\nvalidators.\n\nLint provides the ability to plugin your own Linter or Validator\nclasses. All you need to do is run\n\n.. code:: python\n\n    LintFactory.register_linter(NewLinter()) \n\nor\n\n.. code:: python\n\n    ValidatorFactory.register_validator(NewValidator())\n\nWhen you run 'run\\_linters()' or 'run\\_validators()', it'll pick them up\nand use them. Your new Linters should derive from BaseLinter, and your\nnew Validators should derive from BaseValidator.\n\nYou can also customize the order of operations, or how comments/scores\nare posted to gerrit. Just look at gpylinter as an example.\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/astraw38/lint/tarball/1.2.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/astraw38/lint", "keywords": null, "license": "GNU GPL 2.0", "maintainer": null, "maintainer_email": null, "name": "lint", "package_url": "https://pypi.org/project/lint/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lint/", "project_urls": {"Download": "https://github.com/astraw38/lint/tarball/1.2.1", "Homepage": "https://github.com/astraw38/lint"}, "release_url": "https://pypi.org/project/lint/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python script to automatically lint new reviews to gerrit. Designed to\nbe run from within Jenkins via the Gerrit Trigger plugin</p>\n<p>Lint is a python package to assist with automatic code reviews. It\nprovides the following tools:</p>\n<ol>\n<li>Get a list of files changed between the active gerrit branch and the\nspecified gerrit review.</li>\n<li>Lint the original files in the active gerrit branch.</li>\n<li>Checkout the current review ID</li>\n<li>Lint the changed files.</li>\n<li>Analyze the results according to specified validators.</li>\n<li>Post the results of the validation to gerrit via SSH (+1/-1 score\nassigned, including a message).</li>\n</ol>\n<p>Lint uses the environmental variables set by Gerrit Trigger to do almost\nall of the configuration. You can still use it via command-line (with\noptions!) for manual testing.</p>\n<p>You can also add a checkers to validators, which are simple functions to\ncompare lint data that are passed to the validator.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>pip install git+https://github.com/astraw38/Lint</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>For pylint, just use \u2018gpylinter.py\u2019. It by default will use the\n\u2018Pylinter\u2019 plugin for .py files, as well as the default pylint\nvalidators.</p>\n<p>Lint provides the ability to plugin your own Linter or Validator\nclasses. All you need to do is run</p>\n<pre><span class=\"n\">LintFactory</span><span class=\"o\">.</span><span class=\"n\">register_linter</span><span class=\"p\">(</span><span class=\"n\">NewLinter</span><span class=\"p\">())</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">ValidatorFactory</span><span class=\"o\">.</span><span class=\"n\">register_validator</span><span class=\"p\">(</span><span class=\"n\">NewValidator</span><span class=\"p\">())</span>\n</pre>\n<p>When you run \u2018run_linters()\u2019 or \u2018run_validators()\u2019, it\u2019ll pick them up\nand use them. Your new Linters should derive from BaseLinter, and your\nnew Validators should derive from BaseValidator.</p>\n<p>You can also customize the order of operations, or how comments/scores\nare posted to gerrit. Just look at gpylinter as an example.</p>\n</div>\n\n          </div>"}, "last_serial": 1406430, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "ef609f171aa0aa439f570d1b7c76027b", "sha256": "700c61e45619441b7649597c22616c2ce64fc3da335ca5fdd112556775c5cef1"}, "downloads": -1, "filename": "lint-1.0.tar.gz", "has_sig": false, "md5_digest": "ef609f171aa0aa439f570d1b7c76027b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2397, "upload_time": "2015-01-22T18:46:31", "upload_time_iso_8601": "2015-01-22T18:46:31.141452Z", "url": "https://files.pythonhosted.org/packages/30/41/aac08ebfd660af708317eeb6d69a2231c3c04f43b89625bd12f07395b015/lint-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5323c89bf1b54cb70ade907605e5bf39", "sha256": "967ff2adcf400d301cf32da5ba8657232b5030c34a38f2c0dedaebfb5f7c8641"}, "downloads": -1, "filename": "lint-1.1.tar.gz", "has_sig": false, "md5_digest": "5323c89bf1b54cb70ade907605e5bf39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10007, "upload_time": "2015-01-22T19:07:55", "upload_time_iso_8601": "2015-01-22T19:07:55.199030Z", "url": "https://files.pythonhosted.org/packages/62/21/a8ffb98ce61d3ae5e2653d6c29b30583f91ddf6bb39492ca10c06397c9fc/lint-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "0940d068784559fe92b8cc6788ff8c98", "sha256": "591a8de2efcb65bc74e4197c3ee8698f5bd16d4f8497410851f9be340d3d7f8d"}, "downloads": -1, "filename": "lint-1.2.tar.gz", "has_sig": false, "md5_digest": "0940d068784559fe92b8cc6788ff8c98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14375, "upload_time": "2015-02-02T14:59:15", "upload_time_iso_8601": "2015-02-02T14:59:15.847639Z", "url": "https://files.pythonhosted.org/packages/b6/7b/42af1651d9001a58aaf14530e2b62928268190aadabd33b288d69f5b3302/lint-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "535a19fd112ab1b943dbea7ba398030b", "sha256": "b3675d89a849da38a32e6cdae07146e551215cf5623a84ac5ef6895052b2b7c2"}, "downloads": -1, "filename": "lint-1.2.1.tar.gz", "has_sig": false, "md5_digest": "535a19fd112ab1b943dbea7ba398030b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14387, "upload_time": "2015-02-02T15:16:17", "upload_time_iso_8601": "2015-02-02T15:16:17.456733Z", "url": "https://files.pythonhosted.org/packages/7e/53/8044a8523212654618ede007cd1b17a6c2bd686b7af38be70bcc1ce5f9cc/lint-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "535a19fd112ab1b943dbea7ba398030b", "sha256": "b3675d89a849da38a32e6cdae07146e551215cf5623a84ac5ef6895052b2b7c2"}, "downloads": -1, "filename": "lint-1.2.1.tar.gz", "has_sig": false, "md5_digest": "535a19fd112ab1b943dbea7ba398030b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14387, "upload_time": "2015-02-02T15:16:17", "upload_time_iso_8601": "2015-02-02T15:16:17.456733Z", "url": "https://files.pythonhosted.org/packages/7e/53/8044a8523212654618ede007cd1b17a6c2bd686b7af38be70bcc1ce5f9cc/lint-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:30 2020"}