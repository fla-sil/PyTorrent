{"info": {"author": "Chichau Miau", "author_email": "zmiao@ebi.ac.uk", "bugtrack_url": null, "classifiers": [], "description": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/sccaf/README.html)\n\n\n# SCCAF: Single Cell Clustering Assessment Framework\n\nSingle Cell Clustering Assessment Framework (SCCAF) is a novel method for automated identification of putative cell types from single cell RNA-seq (scRNA-seq) data. By iteratively applying clustering and a machine learning approach to gene expression profiles of a given set of cells, SCCAF simultaneously identifies distinct cell groups and a weighted list of feature genes for each group. The feature genes, which are overexpressed in the particular cell group, jointly discriminate the given cell group from other cells. Each such group of cells corresponds to a putative cell type or state, characterised by the feature genes as markers.\n\n# Requirements\n\nThis package requirements vary depending on the way that you want to install it (all three are independent, you don't need all these requirements):\n\n- pip: if installation goes through pip, you will require Python3 and pip3 installed.\n- Bioconda: if installation goes through Bioconda, you will require that [conda is installed and configured to use bioconda channels](https://bioconda.github.io/user/index.html).\n- Docker container: to use SCCAF from its docker container you will need [Docker](https://docs.docker.com/install/) installed.\n- Source code: to use and install from the source code directly, you will need to have git, Python3 and pip.\n\nThe tool depends on other Python/conda packages, but these are automatically resolved by the different installation methods.\n\nThe tool has been tested with the following versions:\n- conda: versions 4.7.5 and 4.7.10, but it should work with most other versions.\n- Docker: version 18.09.2, but should work with most other versions.\n- Python: versions 3.6.5 and 3.7. We don't expect this to work with Python 2.x.\n- Pip3: version 9.0.3, but any version of pip3 should work.\n\nThis software doesn't require any non-standard hardware.\n\n# Installation\n\n## pip\n\nYou can install SCCAF with pip:\n\n```\npip install sccaf\n```\n\nInstallation time on laptop with 16 GB of RAM and academic (LAN) internet connection: <10 minutes.\n\n## Bioconda\n\nYou can install SCCAF with bioconda (please setup conda and the bioconda channel if you haven't first, as explained [here](https://bioconda.github.io/user/index.html)):\n\n```\nconda install sccaf\n```\n\nInstallation time on laptop with 16 GB of RAM and academic (LAN) internet connection: <5 minutes.\n\n## Available as a container\n\nYou can use the SCCAF tool already setup on a Docker container. You need to choose from the available tags [here](https://quay.io/repository/biocontainers/sccaf?tab=tags) and replace it in the call below where it says `<tag>`.\n\n```\ndocker pull quay.io/biocontainers/sccaf:<tag>\n```\n\n**Note:** Biocontainer's containers do not have a latest tag, as such a docker pull/run without defining the tag will fail. For instance, a valid call would be (for version 0.0.10):\n\n```\ndocker run -it quay.io/biocontainers/sccaf:0.0.10--py_0\n```\n\nInside the container, you can either use the Python interactive shell or the command line version (see below).\n\nInstallation (pull) time on laptop with 16 GB of RAM and academic (LAN) internet connection: ~10 minutes.\n\n## Use latest source code\n\nAlternatively, for the latest version, clone this repo and go into its directory, then execute `pip3 install .`:\n\n```\ngit clone https://github.com/SCCAF/sccaf\ncd sccaf\n# you might want to create a virtualenv for SCCAF before installing\npip3 install .\n```\n\nif your python environment is configured for python 3, then you should be able to replace python3 for just python (although pip3 needs to be kept). In time this will be simplified by a simple pip call.\n\nInstallation (pull) time on laptop with 16 GB of RAM and academic (LAN) internet connection: ~10 minutes.\n\n# Usage within Python environment\n\n## Use with pre-clustered `anndata` object in the [SCANPY](https://scanpy.readthedocs.io/en/stable/) package\n\nThe main method of SCCAF can be applied directly to an [anndata](https://anndata.readthedocs.io/en/stable/) (AnnData is the main data format used by [Scanpy](https://scanpy.readthedocs.io/en/stable/)) object in Python.\n\n**Before applying SCCAF, please make sure the doublets have been excluded and the batch effect has been effectively regressed.**\n\n## Assessment of the quality of a clustering\n\nGiven a clustering stored in an anndata object `adata` under the key `louvain`, we would like to understand the quality (discrimination between clusters) with SCCAF:\n\n```python\nfrom SCCAF import SCCAF_assessment, plot_roc\nimport scanpy as sc\n\nadata = sc.read(\"path-to-clusterised-and-umapped-anndata-file\")\ny_prob, y_pred, y_test, clf, cvsm, acc = SCCAF_assessment(adata.X, adata.obs['louvain'], n=100)\n```\n\nreturned accuracy is in the `acc` variable.\n\nThe ROC curve can be plotted:\n\n```python\nimport matplotlib.pyplot as plt\n\nplot_roc(y_prob, y_test, clf, cvsm=cvsm, acc=acc)\nplt.show()\n```\n\nHigher accuracy indicate better discrimination. And the ROC curve shows the problematic clusters.\n\n## Optimize an over-clustering\n\nGiven an over-clustered result, SCCAF optimize the clustering by merging the cell clusters that cannot be discriminated by machine learning. \n\n### Selecting the starting clustering\n\nThe selection of start clustering (or pre-clustering, which is an over-clustering) aims to find a clustering with only over-clustering but no under-clustering. To achieve this clustering, we suggest to combine well-established clustering (e.g., louvain clustering in SCANPY or K-means or SC3) with data visualization (tSNE). We can assume that all the discriminative cell clusters should be detectable in the tSNE plot. Then, we can find a clustering (e.g, louvain with a chosen resolution, 1.5 in the example case) that separates all the \"cell islands\" in the tSNE plot. To achieve a higher speed, we also suggest to have as few cell cluster as possible. For example, if both resolution 1.5 and resolution 2.0 do not include under-clustering, we suggest to use resolution 1.5 result as the start clustering.\n\n```python\n\n# The batch effect MUST be regressed before applying SCCAF\nadata = sc.read(\"path-to-clusterised-and-umapped-anndata-file\")\n\n# An initial over-clustering needs to be assigned in consistent with the prefix for the optimization.\n# i.e., the optimization prefix is `L2`, the starting point of the optimization of `%s_Round0`%prefix, which is `L2_Round0`.\n\nsc.tl.louvain(adata, resolution=1.5, key_added='L2_Round0')\n# i.e., we aim to achieve an accuracy >90% for the whole dataset, optimize based on the PCA space:\nSCCAF_optimize_all(ad=adata, plot=False, min_acc=0.9, prefix = 'L2', use='pca')\n```\n\nin the above run, all changes will be left on the `adata` anndata object and no plots\nwill be generated. If you want to see the plots (blocking the progress until you close them)\nthen remove the `plots=False`.\n\n\nWithin the anndata object, assignments of cells to clusters will be left in `adata.obs['<prefix>_Round<roundNumber>']`.\n\n# Notebook demo\n\nYou can find some demonstrative Jupyter Notebooks [here](https://github.com/SCCAF/sccaf/blob/develop/notebook/):\n\n- [Zeisel Mouse Cortex Demo](https://github.com/SCCAF/sccaf/blob/develop/notebook/Zeisel_Mouse_Cortex_Demo.ipynb)\n    - Expected execution time on a 16 GB RAM standard laptop: ~15 minutes\n\n# Usage from the command line\n\nWe have added convenience methods to use from the command line argument in the shell.\nThis facilitate as well the inclusion in workflow systems.\n\n## Optimisation and general purpose usage\n\nGiven an annData dataset with louvain clustering pre-calculated (and batch corrected if needed):\n\n```bash\nsccaf -i <ann-data-input-file> --optimise --skip-assessment -s louvain -a 0.89 -c 8 --produce-rounds-summary\n```\n\nthis will leave the result in new file named `output.h5`, which could be set via `-o`. In the current setting this will\nproduce a file named `rounds.txt` with the name of all optimisation rounds left in the output. This file\nis used for later parallelisation (among different machines) of an assessment process to determine the step to choose\nas final clustering.\n\nTo understand all options, simply execute `sccaf --help`.\n\n## Parallel run of assessments\n\nOnce the optimisation has taken place, an strategy to choose the round to be used as final result is to observe the\ndistribution of accuracies for each on multiple iterations of the assessment process. How the process is distributed is\na matter of implementation of the local HPC or cloud system. Essentially, the process that can be repeated, per each round,\nis:\n\n```\nround=<name-of-the-round-in-the-output>\nsccaf-asses -i output.h5 -o results/sccaf_assess_$round.txt --slot-for-existing-clustering $round --iterations 20 --cores 8\n```\n\nrunning the above for a number of different rounds will leave files in the `results` folder.\n\n### Merging parallel runs to produce plot\n\nOnce all assessment runs are done, the merging and plotting step can be run:\n\n```\nsccaf-assess-merger -i results -r rounds.txt -o rounds-acc-comparison-plot.png\n```\n\nThis will produce a result like this:\n![plot](https://user-images.githubusercontent.com/368478/66618625-a6c2fe80-ebd1-11e9-8355-ea762097c604.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SCCAF", "package_url": "https://pypi.org/project/SCCAF/", "platform": "", "project_url": "https://pypi.org/project/SCCAF/", "project_urls": null, "release_url": "https://pypi.org/project/SCCAF/0.0.10/", "requires_dist": ["numpy", "pandas", "louvain", "scikit-learn", "psutil", "scanpy (==1.4.6)"], "requires_python": "", "summary": "Single-Cell Clustering Assessment Framework", "version": "0.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://bioconda.github.io/recipes/sccaf/README.html\" rel=\"nofollow\"><img alt=\"install with bioconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2a44da80a9758d4c89782dd239134b2611cce03/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f7374796c653d666c6174\"></a></p>\n<h1>SCCAF: Single Cell Clustering Assessment Framework</h1>\n<p>Single Cell Clustering Assessment Framework (SCCAF) is a novel method for automated identification of putative cell types from single cell RNA-seq (scRNA-seq) data. By iteratively applying clustering and a machine learning approach to gene expression profiles of a given set of cells, SCCAF simultaneously identifies distinct cell groups and a weighted list of feature genes for each group. The feature genes, which are overexpressed in the particular cell group, jointly discriminate the given cell group from other cells. Each such group of cells corresponds to a putative cell type or state, characterised by the feature genes as markers.</p>\n<h1>Requirements</h1>\n<p>This package requirements vary depending on the way that you want to install it (all three are independent, you don't need all these requirements):</p>\n<ul>\n<li>pip: if installation goes through pip, you will require Python3 and pip3 installed.</li>\n<li>Bioconda: if installation goes through Bioconda, you will require that <a href=\"https://bioconda.github.io/user/index.html\" rel=\"nofollow\">conda is installed and configured to use bioconda channels</a>.</li>\n<li>Docker container: to use SCCAF from its docker container you will need <a href=\"https://docs.docker.com/install/\" rel=\"nofollow\">Docker</a> installed.</li>\n<li>Source code: to use and install from the source code directly, you will need to have git, Python3 and pip.</li>\n</ul>\n<p>The tool depends on other Python/conda packages, but these are automatically resolved by the different installation methods.</p>\n<p>The tool has been tested with the following versions:</p>\n<ul>\n<li>conda: versions 4.7.5 and 4.7.10, but it should work with most other versions.</li>\n<li>Docker: version 18.09.2, but should work with most other versions.</li>\n<li>Python: versions 3.6.5 and 3.7. We don't expect this to work with Python 2.x.</li>\n<li>Pip3: version 9.0.3, but any version of pip3 should work.</li>\n</ul>\n<p>This software doesn't require any non-standard hardware.</p>\n<h1>Installation</h1>\n<h2>pip</h2>\n<p>You can install SCCAF with pip:</p>\n<pre><code>pip install sccaf\n</code></pre>\n<p>Installation time on laptop with 16 GB of RAM and academic (LAN) internet connection: &lt;10 minutes.</p>\n<h2>Bioconda</h2>\n<p>You can install SCCAF with bioconda (please setup conda and the bioconda channel if you haven't first, as explained <a href=\"https://bioconda.github.io/user/index.html\" rel=\"nofollow\">here</a>):</p>\n<pre><code>conda install sccaf\n</code></pre>\n<p>Installation time on laptop with 16 GB of RAM and academic (LAN) internet connection: &lt;5 minutes.</p>\n<h2>Available as a container</h2>\n<p>You can use the SCCAF tool already setup on a Docker container. You need to choose from the available tags <a href=\"https://quay.io/repository/biocontainers/sccaf?tab=tags\" rel=\"nofollow\">here</a> and replace it in the call below where it says <code>&lt;tag&gt;</code>.</p>\n<pre><code>docker pull quay.io/biocontainers/sccaf:&lt;tag&gt;\n</code></pre>\n<p><strong>Note:</strong> Biocontainer's containers do not have a latest tag, as such a docker pull/run without defining the tag will fail. For instance, a valid call would be (for version 0.0.10):</p>\n<pre><code>docker run -it quay.io/biocontainers/sccaf:0.0.10--py_0\n</code></pre>\n<p>Inside the container, you can either use the Python interactive shell or the command line version (see below).</p>\n<p>Installation (pull) time on laptop with 16 GB of RAM and academic (LAN) internet connection: ~10 minutes.</p>\n<h2>Use latest source code</h2>\n<p>Alternatively, for the latest version, clone this repo and go into its directory, then execute <code>pip3 install .</code>:</p>\n<pre><code>git clone https://github.com/SCCAF/sccaf\ncd sccaf\n# you might want to create a virtualenv for SCCAF before installing\npip3 install .\n</code></pre>\n<p>if your python environment is configured for python 3, then you should be able to replace python3 for just python (although pip3 needs to be kept). In time this will be simplified by a simple pip call.</p>\n<p>Installation (pull) time on laptop with 16 GB of RAM and academic (LAN) internet connection: ~10 minutes.</p>\n<h1>Usage within Python environment</h1>\n<h2>Use with pre-clustered <code>anndata</code> object in the <a href=\"https://scanpy.readthedocs.io/en/stable/\" rel=\"nofollow\">SCANPY</a> package</h2>\n<p>The main method of SCCAF can be applied directly to an <a href=\"https://anndata.readthedocs.io/en/stable/\" rel=\"nofollow\">anndata</a> (AnnData is the main data format used by <a href=\"https://scanpy.readthedocs.io/en/stable/\" rel=\"nofollow\">Scanpy</a>) object in Python.</p>\n<p><strong>Before applying SCCAF, please make sure the doublets have been excluded and the batch effect has been effectively regressed.</strong></p>\n<h2>Assessment of the quality of a clustering</h2>\n<p>Given a clustering stored in an anndata object <code>adata</code> under the key <code>louvain</code>, we would like to understand the quality (discrimination between clusters) with SCCAF:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">SCCAF</span> <span class=\"kn\">import</span> <span class=\"n\">SCCAF_assessment</span><span class=\"p\">,</span> <span class=\"n\">plot_roc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">scanpy</span> <span class=\"k\">as</span> <span class=\"nn\">sc</span>\n\n<span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"path-to-clusterised-and-umapped-anndata-file\"</span><span class=\"p\">)</span>\n<span class=\"n\">y_prob</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">cvsm</span><span class=\"p\">,</span> <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"n\">SCCAF_assessment</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">adata</span><span class=\"o\">.</span><span class=\"n\">obs</span><span class=\"p\">[</span><span class=\"s1\">'louvain'</span><span class=\"p\">],</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<p>returned accuracy is in the <code>acc</code> variable.</p>\n<p>The ROC curve can be plotted:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">plot_roc</span><span class=\"p\">(</span><span class=\"n\">y_prob</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">cvsm</span><span class=\"o\">=</span><span class=\"n\">cvsm</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"o\">=</span><span class=\"n\">acc</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>Higher accuracy indicate better discrimination. And the ROC curve shows the problematic clusters.</p>\n<h2>Optimize an over-clustering</h2>\n<p>Given an over-clustered result, SCCAF optimize the clustering by merging the cell clusters that cannot be discriminated by machine learning.</p>\n<h3>Selecting the starting clustering</h3>\n<p>The selection of start clustering (or pre-clustering, which is an over-clustering) aims to find a clustering with only over-clustering but no under-clustering. To achieve this clustering, we suggest to combine well-established clustering (e.g., louvain clustering in SCANPY or K-means or SC3) with data visualization (tSNE). We can assume that all the discriminative cell clusters should be detectable in the tSNE plot. Then, we can find a clustering (e.g, louvain with a chosen resolution, 1.5 in the example case) that separates all the \"cell islands\" in the tSNE plot. To achieve a higher speed, we also suggest to have as few cell cluster as possible. For example, if both resolution 1.5 and resolution 2.0 do not include under-clustering, we suggest to use resolution 1.5 result as the start clustering.</p>\n<pre><span class=\"c1\"># The batch effect MUST be regressed before applying SCCAF</span>\n<span class=\"n\">adata</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"path-to-clusterised-and-umapped-anndata-file\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># An initial over-clustering needs to be assigned in consistent with the prefix for the optimization.</span>\n<span class=\"c1\"># i.e., the optimization prefix is `L2`, the starting point of the optimization of `%s_Round0`%prefix, which is `L2_Round0`.</span>\n\n<span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">tl</span><span class=\"o\">.</span><span class=\"n\">louvain</span><span class=\"p\">(</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">resolution</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">key_added</span><span class=\"o\">=</span><span class=\"s1\">'L2_Round0'</span><span class=\"p\">)</span>\n<span class=\"c1\"># i.e., we aim to achieve an accuracy &gt;90% for the whole dataset, optimize based on the PCA space:</span>\n<span class=\"n\">SCCAF_optimize_all</span><span class=\"p\">(</span><span class=\"n\">ad</span><span class=\"o\">=</span><span class=\"n\">adata</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">min_acc</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s1\">'L2'</span><span class=\"p\">,</span> <span class=\"n\">use</span><span class=\"o\">=</span><span class=\"s1\">'pca'</span><span class=\"p\">)</span>\n</pre>\n<p>in the above run, all changes will be left on the <code>adata</code> anndata object and no plots\nwill be generated. If you want to see the plots (blocking the progress until you close them)\nthen remove the <code>plots=False</code>.</p>\n<p>Within the anndata object, assignments of cells to clusters will be left in <code>adata.obs['&lt;prefix&gt;_Round&lt;roundNumber&gt;']</code>.</p>\n<h1>Notebook demo</h1>\n<p>You can find some demonstrative Jupyter Notebooks <a href=\"https://github.com/SCCAF/sccaf/blob/develop/notebook/\" rel=\"nofollow\">here</a>:</p>\n<ul>\n<li><a href=\"https://github.com/SCCAF/sccaf/blob/develop/notebook/Zeisel_Mouse_Cortex_Demo.ipynb\" rel=\"nofollow\">Zeisel Mouse Cortex Demo</a>\n<ul>\n<li>Expected execution time on a 16 GB RAM standard laptop: ~15 minutes</li>\n</ul>\n</li>\n</ul>\n<h1>Usage from the command line</h1>\n<p>We have added convenience methods to use from the command line argument in the shell.\nThis facilitate as well the inclusion in workflow systems.</p>\n<h2>Optimisation and general purpose usage</h2>\n<p>Given an annData dataset with louvain clustering pre-calculated (and batch corrected if needed):</p>\n<pre>sccaf -i &lt;ann-data-input-file&gt; --optimise --skip-assessment -s louvain -a <span class=\"m\">0</span>.89 -c <span class=\"m\">8</span> --produce-rounds-summary\n</pre>\n<p>this will leave the result in new file named <code>output.h5</code>, which could be set via <code>-o</code>. In the current setting this will\nproduce a file named <code>rounds.txt</code> with the name of all optimisation rounds left in the output. This file\nis used for later parallelisation (among different machines) of an assessment process to determine the step to choose\nas final clustering.</p>\n<p>To understand all options, simply execute <code>sccaf --help</code>.</p>\n<h2>Parallel run of assessments</h2>\n<p>Once the optimisation has taken place, an strategy to choose the round to be used as final result is to observe the\ndistribution of accuracies for each on multiple iterations of the assessment process. How the process is distributed is\na matter of implementation of the local HPC or cloud system. Essentially, the process that can be repeated, per each round,\nis:</p>\n<pre><code>round=&lt;name-of-the-round-in-the-output&gt;\nsccaf-asses -i output.h5 -o results/sccaf_assess_$round.txt --slot-for-existing-clustering $round --iterations 20 --cores 8\n</code></pre>\n<p>running the above for a number of different rounds will leave files in the <code>results</code> folder.</p>\n<h3>Merging parallel runs to produce plot</h3>\n<p>Once all assessment runs are done, the merging and plotting step can be run:</p>\n<pre><code>sccaf-assess-merger -i results -r rounds.txt -o rounds-acc-comparison-plot.png\n</code></pre>\n<p>This will produce a result like this:\n<img alt=\"plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58163905438ddce029d37ef739d8a35ac2aea2a4/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3336383437382f36363631383632352d61366332666538302d656264312d313165392d383335352d6561373632303937633630342e706e67\"></p>\n\n          </div>"}, "last_serial": 7115828, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "1c441470389e95537b4ab0566c116b78", "sha256": "4cfff1a1c303097cc309d6b448ace79eff98f97d288097d91e71a1820244838d"}, "downloads": -1, "filename": "SCCAF-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "1c441470389e95537b4ab0566c116b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27378, "upload_time": "2020-04-27T23:00:45", "upload_time_iso_8601": "2020-04-27T23:00:45.558360Z", "url": "https://files.pythonhosted.org/packages/db/90/f617a7ce7971137257925dcd92ae1a6a4633b9aa0c3a3955fb8e965d7092/SCCAF-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d20b42d8825934479dcadb4bdf627771", "sha256": "9cfb215651cc4dfb0946294bdee568254f5b700f71c53e43018739dc9c7f18d4"}, "downloads": -1, "filename": "SCCAF-0.0.10.tar.gz", "has_sig": false, "md5_digest": "d20b42d8825934479dcadb4bdf627771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1728044, "upload_time": "2020-04-27T23:00:46", "upload_time_iso_8601": "2020-04-27T23:00:46.830689Z", "url": "https://files.pythonhosted.org/packages/47/d0/d7185c5d83baa68b781a44ba8b7c907c2e9b0ea2c950690bcd2a8446a4c2/SCCAF-0.0.10.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1e7d078b212f9c54401ae553170cca67", "sha256": "9ae49f6c632a23761a5025225b42f93fa1303ae68c2c5b5d52292b190307eb14"}, "downloads": -1, "filename": "SCCAF-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1e7d078b212f9c54401ae553170cca67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19391, "upload_time": "2019-07-12T15:31:52", "upload_time_iso_8601": "2019-07-12T15:31:52.886186Z", "url": "https://files.pythonhosted.org/packages/25/0b/f797b330eb4b7ab8f956f86dba6c1078bc0369aed2c62d7e5fae8e0d9c92/SCCAF-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "106b3674e07712197d2f1ed5f4929a92", "sha256": "48074f17f3d481929a4eb593873c9874df673fe6ad0bcc182674a380e9bdb566"}, "downloads": -1, "filename": "SCCAF-0.0.2.tar.gz", "has_sig": false, "md5_digest": "106b3674e07712197d2f1ed5f4929a92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20060, "upload_time": "2019-07-12T15:31:55", "upload_time_iso_8601": "2019-07-12T15:31:55.568537Z", "url": "https://files.pythonhosted.org/packages/1c/46/2acbc0fe4533ad06186d8e5a24dbdb157cbbd50a13d9ee6a5dcb8ebb5be8/SCCAF-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "766c0dc70758b04db954599c731e88f8", "sha256": "ec78627cdb007938cf0f161f2d072ec675f11354f01cc47e540bfc907f20ae89"}, "downloads": -1, "filename": "SCCAF-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "766c0dc70758b04db954599c731e88f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25613, "upload_time": "2019-08-09T17:07:31", "upload_time_iso_8601": "2019-08-09T17:07:31.078117Z", "url": "https://files.pythonhosted.org/packages/9e/61/142b775d91766bdf2fddba5680bbf5a294b41fcce434b3afbd54c8edc39b/SCCAF-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1abef6f541fe04d326a82830ba530139", "sha256": "6d45dfba6ba611869f08c9448cbc5916bca63c0dba570d5ac04ec9868c46c5f5"}, "downloads": -1, "filename": "SCCAF-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1abef6f541fe04d326a82830ba530139", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25356, "upload_time": "2019-08-09T17:07:33", "upload_time_iso_8601": "2019-08-09T17:07:33.122596Z", "url": "https://files.pythonhosted.org/packages/7a/34/13491708d44f4f7ff59e72c4c05039098c9e1512bf3d11e5d739e4dc65cf/SCCAF-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4b9163e1a7e9f453dae94194f9eb90c3", "sha256": "3998d0df3e7677700888d0cbab45b5fbdbe64fd00da923c705e63983ac249ba2"}, "downloads": -1, "filename": "SCCAF-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4b9163e1a7e9f453dae94194f9eb90c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24118, "upload_time": "2019-08-14T23:33:10", "upload_time_iso_8601": "2019-08-14T23:33:10.540724Z", "url": "https://files.pythonhosted.org/packages/8d/df/a10249fa38f4ebe02ae0d7051d4b7bbfb63a4e76360ba735d78ff5a5b3f8/SCCAF-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a191d1f023f5fa9bf8084944ce73802", "sha256": "3ec634408f0a6793714073cdf1bb676b2bcfcc9a44c60c14d7c70dfd0320aeeb"}, "downloads": -1, "filename": "SCCAF-0.0.5.tar.gz", "has_sig": false, "md5_digest": "1a191d1f023f5fa9bf8084944ce73802", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25104, "upload_time": "2019-08-14T23:33:13", "upload_time_iso_8601": "2019-08-14T23:33:13.929765Z", "url": "https://files.pythonhosted.org/packages/80/c2/eefd73c65f0dccfdc41932b7b00c10fac7b13d7c3516552e8bee59c0cdd8/SCCAF-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "24c71b26119dd90c7492a09ba5af3d2b", "sha256": "dd5df0c6f1c523b1f9c0ba9461d21c2ef2d6bb703b39c215777bffd599aef66e"}, "downloads": -1, "filename": "SCCAF-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "24c71b26119dd90c7492a09ba5af3d2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24716, "upload_time": "2019-10-08T21:39:30", "upload_time_iso_8601": "2019-10-08T21:39:30.584181Z", "url": "https://files.pythonhosted.org/packages/0a/cc/bebb6fcadfa9ed9e6fcc32dad9f0f53cb0ef48482ac29a979fd8afaff37b/SCCAF-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "622e75ccc32742916c1a60b44b7ad5af", "sha256": "f8274346fc83cc42e73e21a4bbf38beb6e228d0b23f975c25b61858d3f8c732e"}, "downloads": -1, "filename": "SCCAF-0.0.6.tar.gz", "has_sig": false, "md5_digest": "622e75ccc32742916c1a60b44b7ad5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25619, "upload_time": "2019-10-08T21:39:35", "upload_time_iso_8601": "2019-10-08T21:39:35.012489Z", "url": "https://files.pythonhosted.org/packages/c5/29/e443fe7b267f5225bedd55b06a91a3bcc883d9fda3516d45b1604fee8e4d/SCCAF-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "b0f98663080785af54e8d38a9e407767", "sha256": "782ca21265fb15122a09fbae6ffc04d6185b29855365fc8834c44b8c5e861c81"}, "downloads": -1, "filename": "SCCAF-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b0f98663080785af54e8d38a9e407767", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25660, "upload_time": "2019-10-11T08:26:15", "upload_time_iso_8601": "2019-10-11T08:26:15.156938Z", "url": "https://files.pythonhosted.org/packages/b9/c0/c82e57305ced60f69046ce63d4d61fb63943e629a48356be054d044d6e5e/SCCAF-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b252a6c74895fab35f04340fa9771873", "sha256": "93957db1aaf9720032a85eb625ae3e95e1299052f8a2e156341bdda9921ba30a"}, "downloads": -1, "filename": "SCCAF-0.0.7.tar.gz", "has_sig": false, "md5_digest": "b252a6c74895fab35f04340fa9771873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26665, "upload_time": "2019-10-11T08:26:21", "upload_time_iso_8601": "2019-10-11T08:26:21.506783Z", "url": "https://files.pythonhosted.org/packages/5b/6a/a125991c5bdc0773b264b8319334942b165adf174275dd8066b99997a07c/SCCAF-0.0.7.tar.gz", "yanked": false}], "0.0.7.post1": [{"comment_text": "", "digests": {"md5": "0d25edeb3bab403c1a4be61917a07a80", "sha256": "7a612c33cfbc31d3cf5d33de1d2d0a7ac2244fb50189de0ac45e21b2081aee9d"}, "downloads": -1, "filename": "SCCAF-0.0.7.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d25edeb3bab403c1a4be61917a07a80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25938, "upload_time": "2019-10-18T10:49:51", "upload_time_iso_8601": "2019-10-18T10:49:51.473480Z", "url": "https://files.pythonhosted.org/packages/02/c0/2b85d8b65dbd0f361c1f961a0b576fd07c50c834bcd1e0b99f9c473a3184/SCCAF-0.0.7.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a09cd2c35c17f3faa94a6e31582c95c", "sha256": "46e18c5ed00fe33af3a2057c3516437b21871943691d51f3d6015b625fe83a58"}, "downloads": -1, "filename": "SCCAF-0.0.7.post1.tar.gz", "has_sig": false, "md5_digest": "5a09cd2c35c17f3faa94a6e31582c95c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27056, "upload_time": "2019-10-18T10:49:57", "upload_time_iso_8601": "2019-10-18T10:49:57.014780Z", "url": "https://files.pythonhosted.org/packages/8f/30/0a7c7719e45387f38fed4623ba143c7a9931465b1195bff14fd9d1de95b9/SCCAF-0.0.7.post1.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "2cca855998a7b6ca3789881e72a25944", "sha256": "96e32f205b17e5bd882dde043d223b011f4dba36a785a3cf9d56365156ef78e5"}, "downloads": -1, "filename": "SCCAF-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2cca855998a7b6ca3789881e72a25944", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26560, "upload_time": "2019-11-19T11:55:50", "upload_time_iso_8601": "2019-11-19T11:55:50.033158Z", "url": "https://files.pythonhosted.org/packages/2d/07/15d65912d90c0bb6700242386013687d3672ae18c1e6cf8e81f4b4cf9720/SCCAF-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46bc3ec3a306312491d3826f79193873", "sha256": "d9b440dfd594f29fe83de2a719ee8632a725a52282e6d37e49060de655ea1d1b"}, "downloads": -1, "filename": "SCCAF-0.0.8.tar.gz", "has_sig": false, "md5_digest": "46bc3ec3a306312491d3826f79193873", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27268, "upload_time": "2019-11-19T11:55:57", "upload_time_iso_8601": "2019-11-19T11:55:57.025593Z", "url": "https://files.pythonhosted.org/packages/28/8b/c309b0b43ad9e094621f8bded512b3d99ffddf7d12e240b8f1823ae00f65/SCCAF-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "950a36c7ca1255aef784ca15637bb0bb", "sha256": "1b8b2bae7ca74e2a8ff020c5a1f8a6c88fe4a3a405cff9ec5d0d803f3fe93116"}, "downloads": -1, "filename": "SCCAF-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "950a36c7ca1255aef784ca15637bb0bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26547, "upload_time": "2019-11-21T15:59:56", "upload_time_iso_8601": "2019-11-21T15:59:56.010777Z", "url": "https://files.pythonhosted.org/packages/dd/cc/5cc2fe9ca03696db8e717fa5dd6ba98ef591df6ce2749d83c01c7b378415/SCCAF-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e11a444b1fa6be653e3f57d0b0a897f", "sha256": "436e8bb9c4d6505e3eb58287a16ad9a44f76cd0070bfaeea8f6ace32aef86520"}, "downloads": -1, "filename": "SCCAF-0.0.9.tar.gz", "has_sig": false, "md5_digest": "1e11a444b1fa6be653e3f57d0b0a897f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27236, "upload_time": "2019-11-21T16:00:03", "upload_time_iso_8601": "2019-11-21T16:00:03.584240Z", "url": "https://files.pythonhosted.org/packages/99/f3/c6aa7e4f9db1a7160b8a9802fa75836f7fb5113c9528eabff1d88163fda5/SCCAF-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c441470389e95537b4ab0566c116b78", "sha256": "4cfff1a1c303097cc309d6b448ace79eff98f97d288097d91e71a1820244838d"}, "downloads": -1, "filename": "SCCAF-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "1c441470389e95537b4ab0566c116b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27378, "upload_time": "2020-04-27T23:00:45", "upload_time_iso_8601": "2020-04-27T23:00:45.558360Z", "url": "https://files.pythonhosted.org/packages/db/90/f617a7ce7971137257925dcd92ae1a6a4633b9aa0c3a3955fb8e965d7092/SCCAF-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d20b42d8825934479dcadb4bdf627771", "sha256": "9cfb215651cc4dfb0946294bdee568254f5b700f71c53e43018739dc9c7f18d4"}, "downloads": -1, "filename": "SCCAF-0.0.10.tar.gz", "has_sig": false, "md5_digest": "d20b42d8825934479dcadb4bdf627771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1728044, "upload_time": "2020-04-27T23:00:46", "upload_time_iso_8601": "2020-04-27T23:00:46.830689Z", "url": "https://files.pythonhosted.org/packages/47/d0/d7185c5d83baa68b781a44ba8b7c907c2e9b0ea2c950690bcd2a8446a4c2/SCCAF-0.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:59 2020"}