{"info": {"author": "Cash Costello", "author_email": "cash.costello@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "tweetvac\n================================================================\n.. image:: https://secure.travis-ci.org/cash/tweetvac.png?branch=master\n\t:target: https://travis-ci.org/cash/tweetvac\n\nPython package for sucking down tweets from Twitter. It implements\nTwitter's `guidelines for working with timelines\n<https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines>`_ so\nthat you don't have to.\n\ntweetvac supports retrospective pulling of tweets from Twitter. For\nexample, it can pull down a large number of tweets by a specific user or\nall the tweets from a geographic area that mentions a search term. It\nautomatically generates the requests to work backward along the\ntimeline.\n\nInstallation\n============\nInstall tweetvac using pip:\n\n.. code-block:: bash\n\n    $ pip install tweetvac\n\nIf cloning this repository, you need to install\n`twython <https://github.com/ryanmcgrath/twython>`_ and its dependencies.\n\nAuthentication\n==============\n\nTwitter requires OAuth. tweetvac can store a user's authentication\ninformation in a configuration file for reuse.\n\n1. Log into Twitter and open\n   `https://dev.twitter.com/apps <https://developer.twitter.com/en/apps>`_.\n2. Create a new application. The name needs to be unique across all\n   Twitter apps. A callback is not needed.\n3. Create an OAuth access token on your application web page.\n4. Create a file called tweetvac.cfg and format it as follows:\n\n::\n\n    [Auth]\n    consumer_key = Gx33LSA3IICoqqPoJOp9Q\n    consumer_secret = 1qkKAljfpQMH9EqDZ8t50hK1HbahYXAUEi2p505umY0\n    oauth_token = 14574199-4iHhtyGRAeCvVzGpPNz0GLwfYC54ba3sK5uBl4hPe\n    oauth_token_secret = K80YytdT9FRXEoADlVzJ64HDQEaUMwb37N9NBykCNw5gw\n\nAlternatively, you can pass those four parameters as a tuple in the\nabove order into the ``Tweetvac`` constructor rather than storing them\nin a configuration file.\n\nThe Basics\n==========\n\nImport tweetvac\n--------------------\n\n.. code-block:: python\n\n    import tweetvac\n\nCreate a TweetVac instance\n----------------------------\n\nYou can pass the OAuth parameters as a tuple:\n\n.. code-block:: python\n\n    vac = tweetvac.TweetVac((consumer_key, consumer_secret, oauth_token, oauth_token_secret))\n\nor use the configuration object:\n\n.. code-block:: python\n\n    config = tweetvac.AuthConfig()\n    vac = tweetvac.TweetVac(config)\n\nSuck down tweets\n-------------------\n\ntweetvac expects a Twitter endpoint and a dictionary of parameters for\nthat endpoint. Read the `Twitter\ndocumentation <https://developer.twitter.com/en/docs/api-reference-index>`_\nfor a list of endpoints and their parameters. It is recommended to set the\ncount option in the params dict to the largest value supported by that\nendpoint.\n\n.. code-block:: python\n\n    params = {'screen_name': 'struckDC', 'count': 200}\n    data = vac.suck('statuses/user_timeline', params)\n\nWork with the data\n------------------\n\nThe data returned is a list of dicts. The fields in the dict are listed in the Twitter\nAPI `documentation on the Tweet object <https://developer.twitter.com/en/docs/tweets/data-dictionary/overview/tweet-object>`_.\n\nThe data can be converted back to json and stored to a file like this:\n\n.. code-block:: python\n\n    with open('data.json', 'w') as outfile:\n        json.dump(data, outfile)\n\nAdvanced\n========\n\nFiltering the tweets\n--------------------\n\nTwitter provides several parameters on each endpoint for selecting what\ntweets you want to retrieve. Additional culling is available by passing\na list of filter functions.\n\n.. code-block:: python\n\n    def remove_mention_tweets(tweet):\n        return not '@' in tweet['text']\n\n    data = vac.suck('statuses/user_timeline', params, filters=[remove_mention_tweets])\n\nReturn false from your function to remove the tweet from the list.\n\nTurning off the vacuum\n----------------------\n\ntweetvac will suck down tweets until you reach your rate limit or you\nconsume all the available tweets. To stop sooner, you can pass a cutoff\nfunction that returns true when tweetvac should stop.\n\n.. code-block:: python\n\n    def stop(tweet):\n        cutoff_date = time.strptime(\"Wed Jan 01 00:00:00 +0000 2014\", '%a %b %d %H:%M:%S +0000 %Y')\n        tweet_date = time.strptime(tweet['created_at'], '%a %b %d %H:%M:%S +0000 %Y')\n        return tweet_date < cutoff_date\n\n    data = vac.suck('statuses/user_timeline', params, cutoff=stop)\n\nYou can also pass a hard limit to the number of requests to stop\ntweetvac early:\n\n.. code-block:: python\n\n    data = vac.suck('statuses/user_timeline', params, max_requests=10)\n\nTwitter API\n===========\n\nSupported Endpoints\n-------------------\n\n-  `statuses/user\\_timeline <https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline>`_\n   - tweets by the specified user.\n-  `statuses/home\\_timeline <https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline>`_\n   - tweets by those followed by the authenticating user.\n-  `statuses/mentions\\_timeline <https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline>`_\n   - tweets mentioning the authenticating user.\n-  `statuses/retweets\\_of\\_me <https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me>`_\n   - tweets that are retweets of the authenticating user.\n-  `search/tweets <https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets>`_\n   - search over tweets\n\nThe endpoints have different request rate limits, count limits per\nrequest, and total tweet count limits.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cash/tweetvac", "keywords": "twitter tweet tweetvac cursor client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tweetvac", "package_url": "https://pypi.org/project/tweetvac/", "platform": "", "project_url": "https://pypi.org/project/tweetvac/", "project_urls": {"Homepage": "https://github.com/cash/tweetvac"}, "release_url": "https://pypi.org/project/tweetvac/1.0.1/", "requires_dist": ["twython (>=3.0.0)"], "requires_python": "", "summary": "Package that makes sucking down tweets from Twitter easy.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"tweetvac\">\n<h2>tweetvac</h2>\n<a href=\"https://travis-ci.org/cash/tweetvac\" rel=\"nofollow\"><img alt=\"https://secure.travis-ci.org/cash/tweetvac.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bc80931a147c20c7d2024c174515a2a88c7a9ae/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f636173682f74776565747661632e706e673f6272616e63683d6d6173746572\"></a>\n<p>Python package for sucking down tweets from Twitter. It implements\nTwitter\u2019s <a href=\"https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines\" rel=\"nofollow\">guidelines for working with timelines</a> so\nthat you don\u2019t have to.</p>\n<p>tweetvac supports retrospective pulling of tweets from Twitter. For\nexample, it can pull down a large number of tweets by a specific user or\nall the tweets from a geographic area that mentions a search term. It\nautomatically generates the requests to work backward along the\ntimeline.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install tweetvac using pip:</p>\n<pre>$ pip install tweetvac\n</pre>\n<p>If cloning this repository, you need to install\n<a href=\"https://github.com/ryanmcgrath/twython\" rel=\"nofollow\">twython</a> and its dependencies.</p>\n</div>\n<div id=\"authentication\">\n<h2>Authentication</h2>\n<p>Twitter requires OAuth. tweetvac can store a user\u2019s authentication\ninformation in a configuration file for reuse.</p>\n<ol>\n<li>Log into Twitter and open\n<a href=\"https://developer.twitter.com/en/apps\" rel=\"nofollow\">https://dev.twitter.com/apps</a>.</li>\n<li>Create a new application. The name needs to be unique across all\nTwitter apps. A callback is not needed.</li>\n<li>Create an OAuth access token on your application web page.</li>\n<li>Create a file called tweetvac.cfg and format it as follows:</li>\n</ol>\n<pre>[Auth]\nconsumer_key = Gx33LSA3IICoqqPoJOp9Q\nconsumer_secret = 1qkKAljfpQMH9EqDZ8t50hK1HbahYXAUEi2p505umY0\noauth_token = 14574199-4iHhtyGRAeCvVzGpPNz0GLwfYC54ba3sK5uBl4hPe\noauth_token_secret = K80YytdT9FRXEoADlVzJ64HDQEaUMwb37N9NBykCNw5gw\n</pre>\n<p>Alternatively, you can pass those four parameters as a tuple in the\nabove order into the <tt>Tweetvac</tt> constructor rather than storing them\nin a configuration file.</p>\n</div>\n<div id=\"the-basics\">\n<h2>The Basics</h2>\n<div id=\"import-tweetvac\">\n<h3>Import tweetvac</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tweetvac</span>\n</pre>\n</div>\n<div id=\"create-a-tweetvac-instance\">\n<h3>Create a TweetVac instance</h3>\n<p>You can pass the OAuth parameters as a tuple:</p>\n<pre><span class=\"n\">vac</span> <span class=\"o\">=</span> <span class=\"n\">tweetvac</span><span class=\"o\">.</span><span class=\"n\">TweetVac</span><span class=\"p\">((</span><span class=\"n\">consumer_key</span><span class=\"p\">,</span> <span class=\"n\">consumer_secret</span><span class=\"p\">,</span> <span class=\"n\">oauth_token</span><span class=\"p\">,</span> <span class=\"n\">oauth_token_secret</span><span class=\"p\">))</span>\n</pre>\n<p>or use the configuration object:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">tweetvac</span><span class=\"o\">.</span><span class=\"n\">AuthConfig</span><span class=\"p\">()</span>\n<span class=\"n\">vac</span> <span class=\"o\">=</span> <span class=\"n\">tweetvac</span><span class=\"o\">.</span><span class=\"n\">TweetVac</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"suck-down-tweets\">\n<h3>Suck down tweets</h3>\n<p>tweetvac expects a Twitter endpoint and a dictionary of parameters for\nthat endpoint. Read the <a href=\"https://developer.twitter.com/en/docs/api-reference-index\" rel=\"nofollow\">Twitter\ndocumentation</a>\nfor a list of endpoints and their parameters. It is recommended to set the\ncount option in the params dict to the largest value supported by that\nendpoint.</p>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'screen_name'</span><span class=\"p\">:</span> <span class=\"s1\">'struckDC'</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">}</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vac</span><span class=\"o\">.</span><span class=\"n\">suck</span><span class=\"p\">(</span><span class=\"s1\">'statuses/user_timeline'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"work-with-the-data\">\n<h3>Work with the data</h3>\n<p>The data returned is a list of dicts. The fields in the dict are listed in the Twitter\nAPI <a href=\"https://developer.twitter.com/en/docs/tweets/data-dictionary/overview/tweet-object\" rel=\"nofollow\">documentation on the Tweet object</a>.</p>\n<p>The data can be converted back to json and stored to a file like this:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'data.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">outfile</span><span class=\"p\">:</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">outfile</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"advanced\">\n<h2>Advanced</h2>\n<div id=\"filtering-the-tweets\">\n<h3>Filtering the tweets</h3>\n<p>Twitter provides several parameters on each endpoint for selecting what\ntweets you want to retrieve. Additional culling is available by passing\na list of filter functions.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">remove_mention_tweets</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"s1\">'@'</span> <span class=\"ow\">in</span> <span class=\"n\">tweet</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">]</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vac</span><span class=\"o\">.</span><span class=\"n\">suck</span><span class=\"p\">(</span><span class=\"s1\">'statuses/user_timeline'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">remove_mention_tweets</span><span class=\"p\">])</span>\n</pre>\n<p>Return false from your function to remove the tweet from the list.</p>\n</div>\n<div id=\"turning-off-the-vacuum\">\n<h3>Turning off the vacuum</h3>\n<p>tweetvac will suck down tweets until you reach your rate limit or you\nconsume all the available tweets. To stop sooner, you can pass a cutoff\nfunction that returns true when tweetvac should stop.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"p\">):</span>\n    <span class=\"n\">cutoff_date</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"s2\">\"Wed Jan 01 00:00:00 +0000 2014\"</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">%a</span><span class=\"s1\"> %b </span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S +0000 %Y'</span><span class=\"p\">)</span>\n    <span class=\"n\">tweet_date</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">tweet</span><span class=\"p\">[</span><span class=\"s1\">'created_at'</span><span class=\"p\">],</span> <span class=\"s1\">'</span><span class=\"si\">%a</span><span class=\"s1\"> %b </span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S +0000 %Y'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">tweet_date</span> <span class=\"o\">&lt;</span> <span class=\"n\">cutoff_date</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vac</span><span class=\"o\">.</span><span class=\"n\">suck</span><span class=\"p\">(</span><span class=\"s1\">'statuses/user_timeline'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">cutoff</span><span class=\"o\">=</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass a hard limit to the number of requests to stop\ntweetvac early:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">vac</span><span class=\"o\">.</span><span class=\"n\">suck</span><span class=\"p\">(</span><span class=\"s1\">'statuses/user_timeline'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">max_requests</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"twitter-api\">\n<h2>Twitter API</h2>\n<h2 id=\"supported-endpoints\"><span class=\"section-subtitle\">Supported Endpoints</span></h2>\n<ul>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline\" rel=\"nofollow\">statuses/user_timeline</a>\n- tweets by the specified user.</li>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline\" rel=\"nofollow\">statuses/home_timeline</a>\n- tweets by those followed by the authenticating user.</li>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline\" rel=\"nofollow\">statuses/mentions_timeline</a>\n- tweets mentioning the authenticating user.</li>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me\" rel=\"nofollow\">statuses/retweets_of_me</a>\n- tweets that are retweets of the authenticating user.</li>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets\" rel=\"nofollow\">search/tweets</a>\n- search over tweets</li>\n</ul>\n<p>The endpoints have different request rate limits, count limits per\nrequest, and total tweet count limits.</p>\n</div>\n\n          </div>"}, "last_serial": 6730461, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1092e0a9181bccecc807a0228dcd943e", "sha256": "04871a0939c67d8bd6bd20def5ed87b4a6c34f8c725883f833c7e7bcf0729d60"}, "downloads": -1, "filename": "tweetvac-0.1.tar.gz", "has_sig": false, "md5_digest": "1092e0a9181bccecc807a0228dcd943e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6423, "upload_time": "2014-02-06T01:03:06", "upload_time_iso_8601": "2014-02-06T01:03:06.703845Z", "url": "https://files.pythonhosted.org/packages/ef/b5/26297fbe3f89b7a41f3d0cfd3f61402c3f4eec14f71b569c12d6b921d183/tweetvac-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "069168f86b9798862b737edfddc0d2e6", "sha256": "5e480fa9d83389047b3eec6486b94ca5586d7844845f8b4a6f4f4e11ea47f200"}, "downloads": -1, "filename": "tweetvac-0.2.tar.gz", "has_sig": false, "md5_digest": "069168f86b9798862b737edfddc0d2e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5970, "upload_time": "2014-02-06T20:11:38", "upload_time_iso_8601": "2014-02-06T20:11:38.455833Z", "url": "https://files.pythonhosted.org/packages/34/dc/5b01f81c6da4d0eb4561e426bee982be07652ea07e9276887d6800dc685f/tweetvac-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e1f2e55d33cb893d8adea6e67cb2c842", "sha256": "ecf1cda4061cf00c35eb6a7f16f4faf6c6b4306de8d594e9225a57183c3980fc"}, "downloads": -1, "filename": "tweetvac-0.3.tar.gz", "has_sig": false, "md5_digest": "e1f2e55d33cb893d8adea6e67cb2c842", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6513, "upload_time": "2014-02-06T20:16:06", "upload_time_iso_8601": "2014-02-06T20:16:06.718252Z", "url": "https://files.pythonhosted.org/packages/dd/6e/344054cc08b70b1f65f5ba3c2b70818d939ca06a7af321fd2a007837b5ed/tweetvac-0.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "573190e9b27159fff6bc7ebd66a51446", "sha256": "5bab0e2df3330ba6e7573c6993eda59b6ded04583d15438df25102c90d9bc9fe"}, "downloads": -1, "filename": "tweetvac-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "573190e9b27159fff6bc7ebd66a51446", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6536, "upload_time": "2020-02-13T01:27:41", "upload_time_iso_8601": "2020-02-13T01:27:41.323793Z", "url": "https://files.pythonhosted.org/packages/9a/ab/c0f2a94a491c4182f2ed894dde4c444f4fffb77a5b571b71845cfad2408e/tweetvac-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c20ec7a9c9fcf988243feb659a960d4", "sha256": "398e08510517209508a244d0fbc8a414ced44ba730227c893b7f39f63c585186"}, "downloads": -1, "filename": "tweetvac-1.0.tar.gz", "has_sig": false, "md5_digest": "0c20ec7a9c9fcf988243feb659a960d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6676, "upload_time": "2020-02-13T01:27:42", "upload_time_iso_8601": "2020-02-13T01:27:42.782540Z", "url": "https://files.pythonhosted.org/packages/23/2f/ee9e212d94c0852754ab546ce856624e92d6b847a6da06ecb460072064e9/tweetvac-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4ca4cfaa9a8d12f499d01520f04fd455", "sha256": "f0792e58286786b79e23aed0143287b0e54fb465095cb7aad7f5032286ef46e6"}, "downloads": -1, "filename": "tweetvac-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ca4cfaa9a8d12f499d01520f04fd455", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6590, "upload_time": "2020-03-01T23:57:50", "upload_time_iso_8601": "2020-03-01T23:57:50.319015Z", "url": "https://files.pythonhosted.org/packages/7b/e5/a9fa984a6a82179e158a8e82ec5f5270eb5edbaebaac5e7e6e887e75242c/tweetvac-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc99e4720daaec7bfc4fe4a4fa2e69fe", "sha256": "0267ff1c8229c9cbf596cb64befb888b8a014e068dfe14fa243f6d8fc55cd71e"}, "downloads": -1, "filename": "tweetvac-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fc99e4720daaec7bfc4fe4a4fa2e69fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6716, "upload_time": "2020-03-01T23:57:52", "upload_time_iso_8601": "2020-03-01T23:57:52.306175Z", "url": "https://files.pythonhosted.org/packages/64/d6/8a980b6daf7f08262ca8855bc8a8fb7a5cad8d3d866ae98ef6f6f68accdc/tweetvac-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ca4cfaa9a8d12f499d01520f04fd455", "sha256": "f0792e58286786b79e23aed0143287b0e54fb465095cb7aad7f5032286ef46e6"}, "downloads": -1, "filename": "tweetvac-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ca4cfaa9a8d12f499d01520f04fd455", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6590, "upload_time": "2020-03-01T23:57:50", "upload_time_iso_8601": "2020-03-01T23:57:50.319015Z", "url": "https://files.pythonhosted.org/packages/7b/e5/a9fa984a6a82179e158a8e82ec5f5270eb5edbaebaac5e7e6e887e75242c/tweetvac-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc99e4720daaec7bfc4fe4a4fa2e69fe", "sha256": "0267ff1c8229c9cbf596cb64befb888b8a014e068dfe14fa243f6d8fc55cd71e"}, "downloads": -1, "filename": "tweetvac-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fc99e4720daaec7bfc4fe4a4fa2e69fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6716, "upload_time": "2020-03-01T23:57:52", "upload_time_iso_8601": "2020-03-01T23:57:52.306175Z", "url": "https://files.pythonhosted.org/packages/64/d6/8a980b6daf7f08262ca8855bc8a8fb7a5cad8d3d866ae98ef6f6f68accdc/tweetvac-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:05 2020"}