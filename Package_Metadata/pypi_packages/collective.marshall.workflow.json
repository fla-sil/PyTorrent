{"info": {"author": "Oliver Roch", "author_email": "oliver.roch@brainson.de", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\nThis product adds the export and import of the object's workflow state to the atxml\nmarshaller. If you have the same workflow states on the export side and on the import\nside, it should just work out of the box.\n\nA default handler is already included. It looks up a named utility \"IStateTranslationUtility\", with\nthe name of the remote workflow. A parameter is the name of the local workflow.\nIt should be able to translate from the remote states to local states. If no such utility is found,\nit is expected, that the state-names on the remote side match those on the local side.\n\nAn example for this utility could be this::\n\n    <utility\n        provides=\"collective.marshall.workflow.interfaces.IStateTranslationUtility\"\n        component=\".utilities.simple_publication_workflow_state_translator\"\n        name=\"simple_publication_workflow\"\n        />\n\n    def simple_publication_workflow_state_translator(state, target_workflow_id):\n        translation = {}\n        if target_workflow_id == \"simple_protection_and_publication_workflow\":\n            translation = {'private': 'private',\n                           'published': 'protected'}\n\n        return translation.get(state, None)\n\nIf the utility returns None, it is expected, that the remote name matches the local name.\n\nThe default handler does not call transitions, but instead sets the state directly.\nInstead of using the default handler, you can define your own handler::\n\n  <subscriber\n       for=\"*\n           collective.marshall.workflow.interfaces.IObjectReviewStateDeserializedEvent\"\n      handler=\".handlers.yourHandler\"\n      />\n\n  def logDeserializedReviewState(object, event):\n      print \"Received a IObjectReviewStateDeserializedEvent for %s. State: %s\" % (event.object, event.data)\n\nSo the handler receives the object and the data, which is the state as string, e.g. \"published\".\n\nA very good default handler is already included.\n\nAuthors\n=======\n\n- Oliver Roch <oliver.roch@brainson.de>\n- Daniel Kraft <daniel.kraft@d9t.de>\n\n\nChangelog\n=========\n\n1.0.4 (2009-06-10)\n------------------\n\n- Fixed an attribute error.\n\n1.0.3 (2009-06-10)\n------------------\n\n- Added informational logging for a better debug session\n\n1.0.2 (2008-11-06)\n------------------\n\n- Updated description and metadata\n\n1.0.1 (2008-11-05)\n------------------\n\n- Added utility to translate between workflow states\n\n1.0 (2008-11-05)\n----------------\n\n- First release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.brainson.de/", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.marshall.workflow", "package_url": "https://pypi.org/project/collective.marshall.workflow/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.marshall.workflow/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.brainson.de/"}, "release_url": "https://pypi.org/project/collective.marshall.workflow/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "A Namespace Extension for ATXML", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This product adds the export and import of the object\u2019s workflow state to the atxml\nmarshaller. If you have the same workflow states on the export side and on the import\nside, it should just work out of the box.</p>\n<p>A default handler is already included. It looks up a named utility \u201cIStateTranslationUtility\u201d, with\nthe name of the remote workflow. A parameter is the name of the local workflow.\nIt should be able to translate from the remote states to local states. If no such utility is found,\nit is expected, that the state-names on the remote side match those on the local side.</p>\n<p>An example for this utility could be this:</p>\n<pre>&lt;utility\n    provides=\"collective.marshall.workflow.interfaces.IStateTranslationUtility\"\n    component=\".utilities.simple_publication_workflow_state_translator\"\n    name=\"simple_publication_workflow\"\n    /&gt;\n\ndef simple_publication_workflow_state_translator(state, target_workflow_id):\n    translation = {}\n    if target_workflow_id == \"simple_protection_and_publication_workflow\":\n        translation = {'private': 'private',\n                       'published': 'protected'}\n\n    return translation.get(state, None)\n</pre>\n<p>If the utility returns None, it is expected, that the remote name matches the local name.</p>\n<p>The default handler does not call transitions, but instead sets the state directly.\nInstead of using the default handler, you can define your own handler:</p>\n<pre>&lt;subscriber\n     for=\"*\n         collective.marshall.workflow.interfaces.IObjectReviewStateDeserializedEvent\"\n    handler=\".handlers.yourHandler\"\n    /&gt;\n\ndef logDeserializedReviewState(object, event):\n    print \"Received a IObjectReviewStateDeserializedEvent for %s. State: %s\" % (event.object, event.data)\n</pre>\n<p>So the handler receives the object and the data, which is the state as string, e.g. \u201cpublished\u201d.</p>\n<p>A very good default handler is already included.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li>Oliver Roch &lt;<a href=\"mailto:oliver.roch%40brainson.de\">oliver<span>.</span>roch<span>@</span>brainson<span>.</span>de</a>&gt;</li>\n<li>Daniel Kraft &lt;<a href=\"mailto:daniel.kraft%40d9t.de\">daniel<span>.</span>kraft<span>@</span>d9t<span>.</span>de</a>&gt;</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.4 (2009-06-10)</h3>\n<ul>\n<li>Fixed an attribute error.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.3 (2009-06-10)</h3>\n<ul>\n<li>Added informational logging for a better debug session</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.2 (2008-11-06)</h3>\n<ul>\n<li>Updated description and metadata</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.1 (2008-11-05)</h3>\n<ul>\n<li>Added utility to translate between workflow states</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0 (2008-11-05)</h3>\n<ul>\n<li>First release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 787951, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "828fbce5eb68c7f9607d4b9dd2c2012b", "sha256": "6b3da52cfd41b7536a70fa76e509fd5db887e91b0fc0d53939bb23d6f2d49a6c"}, "downloads": -1, "filename": "collective.marshall.workflow-1.0.tar.gz", "has_sig": false, "md5_digest": "828fbce5eb68c7f9607d4b9dd2c2012b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9497, "upload_time": "2008-11-05T12:55:06", "upload_time_iso_8601": "2008-11-05T12:55:06Z", "url": "https://files.pythonhosted.org/packages/10/2c/04fa5dc14be1915c73a3ba5119d265005e4f126f871ffc3412ceb8273613/collective.marshall.workflow-1.0.tar.gz", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "c095b94a1b04ed0eba705be1f8b1a6b4", "sha256": "da0c0c720682f9343981bbf8a2a548afcd8a765a7f7642329d18af5f7eedc1ba"}, "downloads": -1, "filename": "collective.marshall.workflow-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c095b94a1b04ed0eba705be1f8b1a6b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10552, "upload_time": "2008-11-06T08:31:38", "upload_time_iso_8601": "2008-11-06T08:31:38Z", "url": "https://files.pythonhosted.org/packages/9a/27/37046192f7cedd048fa5c060d5ebb8c9012a44216258506572e6115271fd/collective.marshall.workflow-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1fb67189dc42fb0fce94e6437993e3e8", "sha256": "c85b0297adfe4a924de225d51fa9a86fb6759b7cb0a463b81ba7bd41f73e1ccf"}, "downloads": -1, "filename": "collective.marshall.workflow-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1fb67189dc42fb0fce94e6437993e3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10875, "upload_time": "2009-06-10T11:19:03", "upload_time_iso_8601": "2009-06-10T11:19:03.884803Z", "url": "https://files.pythonhosted.org/packages/06/cd/31b63959fbc531228db998863fd5100584fcb11bd909b6db7482c2469a38/collective.marshall.workflow-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a30ce2566f7422567866bd7a6c60beb1", "sha256": "b56e01930055176c51c7f4a83df102afca2c09af011fdbba5d7d29fb745283ab"}, "downloads": -1, "filename": "collective.marshall.workflow-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a30ce2566f7422567866bd7a6c60beb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10907, "upload_time": "2009-06-10T11:26:15", "upload_time_iso_8601": "2009-06-10T11:26:15.160773Z", "url": "https://files.pythonhosted.org/packages/cc/dd/7cd002d418949baad78224ee53117684d9d3cb8794189092a32bc3696ac1/collective.marshall.workflow-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a30ce2566f7422567866bd7a6c60beb1", "sha256": "b56e01930055176c51c7f4a83df102afca2c09af011fdbba5d7d29fb745283ab"}, "downloads": -1, "filename": "collective.marshall.workflow-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a30ce2566f7422567866bd7a6c60beb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10907, "upload_time": "2009-06-10T11:26:15", "upload_time_iso_8601": "2009-06-10T11:26:15.160773Z", "url": "https://files.pythonhosted.org/packages/cc/dd/7cd002d418949baad78224ee53117684d9d3cb8794189092a32bc3696ac1/collective.marshall.workflow-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:07 2020"}