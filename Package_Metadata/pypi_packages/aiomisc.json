{"info": {"author": "Dmitry Orlov", "author_email": "me@mosquito.su", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "Intended Audience :: Developers", "Natural Language :: Russian", "Operating System :: MacOS", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython"], "description": "aiomisc - miscellaneous utils for asyncio\n=========================================\n\n.. image:: https://coveralls.io/repos/github/mosquito/aiomisc/badge.svg?branch=master\n   :target: https://coveralls.io/github/mosquito/aiomisc\n   :alt: Coveralls\n\n.. image:: https://github.com/aiokitchen/aiomisc/workflows/tox/badge.svg\n   :target: https://github.com/aiokitchen/aiomisc/actions?query=workflow%3Atox\n   :alt: Actions\n\n.. image:: https://img.shields.io/pypi/v/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n   :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/wheel/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n.. image:: https://img.shields.io/pypi/pyversions/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n.. image:: https://img.shields.io/pypi/l/aiomisc.svg\n   :target: https://pypi.python.org/pypi/aiomisc/\n\n\nMiscellaneous utils for asyncio.\n\n.. contents:: Table of contents\n\nInstallation\n------------\n\nInstalling from pypi:\n\n.. code-block:: bash\n\n    pip3 install aiomisc\n\nWith uvloop_:\n\n.. code-block:: bash\n\n    pip3 install \"aiomisc[uvloop]\"\n\n\nWith aiohttp_:\n\n.. code-block:: bash\n\n    pip3 install \"aiomisc[aiohttp]\"\n\n\nInstalling from github.com:\n\n.. code-block:: bash\n\n    pip3 install git+https://github.com/mosquito/aiomisc.git\n\n\n.. _uvloop: https://pypi.org/project/uvloop\n.. _aiohttp: https://pypi.org/project/aiohttp\n\n\nQuick Start\n-----------\n\nAsync entrypoint with logging and useful arguments:\n\n.. code-block:: python\n\n    import argparse\n    import asyncio\n    import os\n    import logging\n\n    from aiomisc import entrypoint\n\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        \"-L\", \"--log-level\", help=\"Log level\",\n        default=os.getenv('LOG_LEVEL', 'info'),\n        choices=(\n            'critical', 'fatal', 'error', 'warning',\n            'warn', 'info', 'debug', 'notset'\n        ),\n    )\n\n    parser.add_argument(\n        \"--log-format\", help=\"Log format\",\n        default=os.getenv('LOG_FORMAT', 'color'),\n        choices=aiomisc.log.LogFormat.choices(),\n        metavar='LOG_FORMAT',\n    )\n\n    parser.add_argument(\n        \"-D\", \"--debug\", action='store_true',\n        help=\"Run loop and application in debug mode\"\n    )\n\n\n    parser.add_argument(\n        \"--pool-size\", help=\"Thread pool size\",\n        default=os.getenv('THREAD_POOL'), type=int,\n    )\n\n\n    log = logging.getLogger(__name__)\n\n\n    async def main():\n        log.info('Starting')\n        await asyncio.sleep(3)\n        log.info('Exiting')\n\n\n    if __name__ == '__main__':\n        arg = parser.parse_args()\n\n        with entrypoint(log_level=arg.log_level,\n                        log_format=arg.log_format) as loop:\n            loop.run_until_complete(main())\n\n\nInstall event loop on program start:\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    # Installing uvloop event loop\n    # and set `aiomisc.thread_pool.ThreadPoolExecutor`\n    # as default executor\n    aiomisc.new_event_loop()\n\n\n    async def main():\n        await asyncio.sleep(3)\n\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n\nClose current event loop and install a new one:\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    async def main():\n        await asyncio.sleep(3)\n\n\n    if __name__ == '__main__':\n        loop = aiomisc.new_event_loop()\n        loop.run_until_complete(main())\n\nOverview:\n---------\n\nentrypoint\n++++++++++\n\nIn generic case the entrypoint helper creates event loop and cancels already\nrunning coroutines on exit.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n    async def main():\n        await asyncio.sleep(1)\n\n    with aiomisc.entrypoint() as loop:\n        loop.run_until_complete(main())\n\n\nComplete example:\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n    import logging\n\n    async def main():\n        while True:\n            await asyncio.sleep(1)\n            logging.info(\"Hello there\")\n\n    with aiomisc.entrypoint(\n        pool_size=2,\n        log_level='info',\n        log_format='color',                         # default\n        log_buffer_size=1024,                       # default\n        log_flush_interval=0.2,                     # default\n        log_config=True,                            # default\n        policy=asyncio.DefaultEventLoopPolicy(),    # default\n        debug=False,                                # default\n    ) as loop:\n        loop.create_task(main())\n        loop.run_forever()\n\n\nServices\n++++++++\n\n``Services`` is abstraction to help organize lots of different\ntasks in one process. Each service must implement ``start()`` method and can\nimplement ``stop()`` method.\n\nService instance should be passed to the ``entrypoint``, and will be started\nafter event loop has been created.\n\n.. note::\n\n   Current event-loop will be set before ``start()`` method called.\n   The event loop will be set as current for this thread.\n\n   Please avoid using ``asyncio.get_event_loop()`` explicitly inside\n   ``start()`` method. Use ``self.loop`` instead:\n\n   .. code-block:: python\n\n      from aiomisc import entrypoint, Service\n\n\n      class MyService(Service):\n        async def start(self):\n            # Send signal to entrypoint for continue running\n            self.start_event.set()\n\n            # Start service task\n            await asyncio.sleep(3600, loop=self.loop)\n\n\n      with entrypoint(MyService()) as loop:\n          loop.run_forever()\n\n\nMethod ``start()`` creates as a separate task that can run forever. But in\nthis case ``self.start_event.set()`` should be called for notifying\n``entrypoint``.\n\nDuring graceful shutdown method ``stop()`` will be called first,\nand after that all running tasks will be cancelled (including ``start()``).\n\n\nThis package contains some useful base classes for simple services writing.\n\nTCPServer\n*********\n\n``TCPServer`` - it's a base class for writing TCP servers.\nJust implement ``handle_client(reader, writer)`` to use it.\n\n.. code-block:: python\n\n    class EchoServer(TCPServer):\n        async def handle_client(self, reader: asyncio.StreamReader,\n                                writer: asyncio.StreamWriter):\n            while True:\n                writer.write(await reader.readline())\n\n\n    with entrypoint(EchoServer(address='::1', port=8901)) as loop:\n        loop.run_forever()\n\n\nUDPServer\n*********\n\n``UDPServer`` - it's a base class for writing UDP servers.\nJust implement ``handle_datagram(data, addr)`` to use it.\n\n.. code-block:: python\n\n    class UDPPrinter(UDPServer):\n        async def handle_datagram(self, data: bytes, addr):\n            print(addr, '->', data)\n\n\n    with entrypoint(UDPPrinter(address='::1', port=3000)) as loop:\n        loop.run_forever()\n\n\nTLSServer\n*********\n\n``TLSServer`` - it's a base class for writing TCP servers with TLS.\nJust implement ``handle_client(reader, writer)`` to use it.\n\n.. code-block:: python\n\n    class SecureEchoServer(TLSServer):\n        async def handle_client(self, reader: asyncio.StreamReader,\n                                writer: asyncio.StreamWriter):\n            while True:\n                writer.write(await reader.readline())\n\n    service = SecureEchoServer(\n        address='::1',\n        port=8900,\n        ca='ca.pem',\n        cert='cert.pem',\n        key='key.pem',\n        verify=False,\n    )\n\n    with entrypoint(service) as loop:\n        loop.run_forever()\n\n\nPeriodicService\n***************\n\n``PeriodicService`` runs ``PeriodicCallback`` as a service and waits for\nrunning callback to complete on stop. You need to use ``PeriodicService``\nas a base class and override ``callback`` async coroutine method.\n\nService class accepts required ``interval`` argument - periodic interval\nin seconds and\noptional ``delay`` argument - periodic execution delay in seconds (0 by default).\n\n.. code-block:: python\n\n    import aiomisc\n    from aiomisc.service.periodic import PeriodicService\n\n\n    class MyPeriodicService(PeriodicService):\n        async def callback(self):\n            log.info('Running periodic callback')\n            # ...\n\n    service = MyPeriodicService(interval=3600, delay=0)  # once per hour\n\n    with entrypoint(service) as loop:\n        loop.run_forever()\n\n\nMultiple services\n*****************\n\nPass several service instances to the ``entrypoint`` to run all of them.\nAfter exiting the entrypoint service instances will be gracefully shut down.\n\n.. code-block:: python\n\n    import asyncio\n    from aiomisc import entrypoint\n    from aiomisc.service import Service, TCPServer, UDPServer\n\n\n    class LoggingService(PeriodicService):\n        async def callabck(self):\n            print('Hello from service', self.name)\n\n\n    class EchoServer(TCPServer):\n        async def handle_client(self, reader: asyncio.StreamReader,\n                                writer: asyncio.StreamWriter):\n            while True:\n                writer.write(await reader.readline())\n\n\n    class UDPPrinter(UDPServer):\n        async def handle_datagram(self, data: bytes, addr):\n            print(addr, '->', data)\n\n\n    services = (\n        LoggingService(name='#1', interval=1),\n        EchoServer(address='::1', port=8901),\n        UDPPrinter(address='::1', port=3000),\n    )\n\n\n    with entrypoint(*services) as loop:\n        loop.run_forever()\n\n\nConfiguration\n*************\n\n``Service`` metaclass accepts all kwargs and will set it\nto ``self`` as attributes.\n\n.. code-block:: python\n\n    import asyncio\n    from aiomisc import entrypoint\n    from aiomisc.service import Service, TCPServer, UDPServer\n\n\n    class LoggingService(Service):\n        # required kwargs\n        __required__ = frozenset({'name'})\n\n        # default value\n        delay: int = 1\n\n        async def start(self):\n            self.start_event.set()\n            while True:\n                # attribute ``name`` from kwargs\n                # must be defined when instance initializes\n                print('Hello from service', self.name)\n\n                # attribute ``delay`` from kwargs\n                await asyncio.sleep(self.delay)\n\n    services = (\n        LoggingService(name='#1'),\n        LoggingService(name='#2', delay=3),\n    )\n\n\n    with entrypoint(*services) as loop:\n        loop.run_forever()\n\n\naiohttp service\n***************\n\n.. warning::\n\n   requires installed aiohttp:\n\n   .. code-block::\n\n       pip install aiohttp\n\n   or using extras:\n\n   .. code-block::\n\n       pip install aiomisc[aiohttp]\n\n\naiohttp application can be started as a service:\n\n.. code-block:: python\n\n    import aiohttp.web\n    import argparse\n    from aiomisc import entrypoint\n    from aiomisc.service.aiohttp import AIOHTTPService\n\n    parser = argparse.ArgumentParser()\n    group = parser.add_argument_group('HTTP options')\n\n    group.add_argument(\"-l\", \"--address\", default=\"::\",\n                       help=\"Listen HTTP address\")\n    group.add_argument(\"-p\", \"--port\", type=int, default=8080,\n                       help=\"Listen HTTP port\")\n\n\n    async def handle(request):\n        name = request.match_info.get('name', \"Anonymous\")\n        text = \"Hello, \" + name\n        return aiohttp.web.Response(text=text)\n\n\n    class REST(AIOHTTPService):\n        async def create_application(self):\n            app = aiohttp.web.Application()\n\n            app.add_routes([\n                aiohttp.web.get('/', handle),\n                aiohttp.web.get('/{name}', handle)\n            ])\n\n            return app\n\n    arguments = parser.parse_args()\n    service = REST(address=arguments.address, port=arguments.port)\n\n    with entrypoint(service) as loop:\n        loop.run_forever()\n\n\nClass ``AIOHTTPSSLService`` is similar to ``AIOHTTPService`` but creates HTTPS\nserver. You must pass SSL-required options (see ``TLSServer`` class).\n\nMemory Tracer\n*************\n\nSimple and useful service for logging large python\nobjects allocated in memory.\n\n\n.. code-block:: python\n\n    import asyncio\n    import os\n    from aiomisc import entrypoint\n    from aiomisc.service import MemoryTracer\n\n\n    async def main():\n        leaking = []\n\n        while True:\n            leaking.append(os.urandom(128))\n            await asyncio.sleep(0)\n\n\n    with entrypoint(MemoryTracer(interval=1, top_results=5)) as loop:\n        loop.run_until_complete(main())\n\n\nOutput example:\n\n.. code-block::\n\n    [T:[1] Thread Pool] INFO:aiomisc.service.tracer: Top memory usage:\n     Objects | Obj.Diff |   Memory | Mem.Diff | Traceback\n          12 |       12 |   1.9KiB |   1.9KiB | aiomisc/periodic.py:40\n          12 |       12 |   1.8KiB |   1.8KiB | aiomisc/entrypoint.py:93\n           6 |        6 |   1.1KiB |   1.1KiB | aiomisc/thread_pool.py:71\n           2 |        2 |   976.0B |   976.0B | aiomisc/thread_pool.py:44\n           5 |        5 |   712.0B |   712.0B | aiomisc/thread_pool.py:52\n\n    [T:[6] Thread Pool] INFO:aiomisc.service.tracer: Top memory usage:\n     Objects | Obj.Diff |   Memory | Mem.Diff | Traceback\n       43999 |    43999 |   7.1MiB |   7.1MiB | scratches/scratch_8.py:11\n          47 |       47 |   4.7KiB |   4.7KiB | env/bin/../lib/python3.7/abc.py:143\n          33 |       33 |   2.8KiB |   2.8KiB | 3.7/lib/python3.7/tracemalloc.py:113\n          44 |       44 |   2.4KiB |   2.4KiB | 3.7/lib/python3.7/tracemalloc.py:185\n          14 |       14 |   2.4KiB |   2.4KiB | aiomisc/periodic.py:40\n\n\nProfiler\n*************\n\nSimple service for profiling.\nOptional `path` argument can be provided to dump complete profiling data,\nwhich can be later used by, for example, snakeviz.\nAlso can change ordering with `order` argument (\"cumulative\" by default).\n\n\n.. code-block:: python\n\n    import asyncio\n    import os\n    from aiomisc import entrypoint\n    from aiomisc.service import Profiler\n\n\n    async def main():\n        for i in range(100):\n            time.sleep(0.01)\n\n\n    with entrypoint(Profiler(interval=0.1, top_results=5)) as loop:\n        loop.run_until_complete(main())\n\n\nOutput example:\n\n.. code-block::\n\n   108 function calls in 1.117 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      100    1.117    0.011    1.117    0.011 {built-in method time.sleep}\n        1    0.000    0.000    0.000    0.000 <...>/lib/python3.7/pstats.py:89(__init__)\n        1    0.000    0.000    0.000    0.000 <...>/lib/python3.7/pstats.py:99(init)\n        1    0.000    0.000    0.000    0.000 <...>/lib/python3.7/pstats.py:118(load_stats)\n        1    0.000    0.000    0.000    0.000 <...>/lib/python3.7/cProfile.py:50(create_stats)\n\nAbstract connection pool\n++++++++++++++++++++++++\n\n``aiomisc.PoolBase`` is an abstract class for implementation user defined\nconnection pool.\n\n\nExample for ``aioredis``:\n\n.. code-block:: python\n\n    import asyncio\n    import aioredis\n    import aiomisc\n\n\n    class RedisPool(aiomisc.PoolBase):\n        def __init__(self, uri, maxsize=10, recycle=60):\n            super().__init__(maxsize=maxsize, recycle=recycle)\n            self.uri = uri\n\n        async def _create_instance(self):\n            return await aioredis.create_redis(self.uri)\n\n        async def _destroy_instance(self, instance: aioredis.Redis):\n            instance.close()\n            await instance.wait_closed()\n\n        async def _check_instance(self, instance: aioredis.Redis):\n            try:\n                await asyncio.wait_for(instance.ping(1), timeout=0.5)\n            except:\n                return False\n\n            return True\n\n\n    async def main():\n        pool = RedisPool(\"redis://localhost\")\n        async with pool.acquire() as connection:\n            await connection.set(\"foo\", \"bar\")\n\n        async with pool.acquire() as connection:\n            print(await connection.get(\"foo\"))\n\n\n    asyncio.run(main())\n\n\n\nContext\n+++++++\n\nServices can require each others data. In this case you should use ``Context``.\n\n``Context`` is a repository associated with the running ``entrypoint``.\n\n``Context``-object will be created when ``entrypoint`` starts and linked\nto the running event loop.\n\nCross dependent services might await or set each others data via the context.\n\nFor service instances ``self.context`` is available since ``entrypoint``\nstarted. In other cases ``get_context()`` function returns current context.\n\n\n.. code-block:: python\n\n    import asyncio\n    from random import random, randint\n\n    from aiomisc import entrypoint, get_context, Service\n\n\n    class LoggingService(Service):\n        async def start(self):\n            context = get_context()\n\n            wait_time = await context['wait_time']\n\n            print('Wait time is', wait_time)\n            while True:\n                print('Hello from service', self.name)\n                await asyncio.sleep(wait_time)\n\n\n    class RemoteConfiguration(Service):\n        async def start(self):\n            # querying from remote server\n            await asyncio.sleep(random())\n\n            self.context['wait_time'] = randint(1, 5)\n\n\n    services = (\n        LoggingService(name='#1'),\n        LoggingService(name='#2'),\n        LoggingService(name='#3'),\n        RemoteConfiguration()\n    )\n\n    with entrypoint(*services) as loop:\n        loop.run_forever()\n\n\n.. note::\n\n    It's not a silver bullet. In base case services can be configured by\n    passing kwargs to the service ``__init__`` method.\n\ntimeout decorator\n+++++++++++++++++\n\nDecorator that ensures the execution time limit for decorated function is met.\n\n.. code-block:: python\n\n    from aiomisc import timeout\n\n    @timeout(1)\n    async def bad_func():\n        await asyncio.sleep(2)\n\n\nAsync backoff\n+++++++++++++\n\nAbstraction:\n\n* ``attempt_timeout`` is maximum execution time for one execution attempt.\n* ``deadline`` is maximum execution time for all execution attempts.\n* ``pause`` is time gap between execution attempts.\n* ``exceptions`` retrying when this exceptions was raised.\n* ``giveup`` (keyword only) is a predicate function which can decide by a given\n  exception if we should continue to do retries.\n* ``max_tries`` (keyword only) is maximum count of execution attempts (>= 1).\n\nDecorator that ensures that ``attempt_timeout`` and ``deadline`` time\nlimits are met by decorated function.\n\nIn case of exception function will be called again with similar arguments after\n``pause`` seconds.\n\n\nPosition arguments notation:\n\n.. code-block:: python\n\n    from aiomisc import asyncbackoff\n\n    attempt_timeout = 0.1\n    deadline = 1\n    pause = 0.1\n\n    @asyncbackoff(attempt_timeout, deadline, pause)\n    async def db_fetch():\n        ...\n\n\n    @asyncbackoff(0.1, 1, 0.1)\n    async def db_save(data: dict):\n        ...\n\n\n    # Passing exceptions for handling\n    @asyncbackoff(0.1, 1, 0.1, TypeError, RuntimeError, ValueError)\n    async def db_fetch(data: dict):\n        ...\n\n\nKeyword arguments notation:\n\n.. code-block:: python\n\n    from aiomisc import asyncbackoff\n\n    attempt_timeout = 0.1\n    deadline = 1\n    pause = 0.1\n\n    @asyncbackoff(attempt_timeout=attempt_timeout,\n                  deadline=deadline, pause=pause)\n    async def db_fetch():\n        ...\n\n\n    @asyncbackoff(attempt_timeout=0.1, deadline=1, pause=0.1)\n    async def db_save(data: dict):\n        ...\n\n\n    # Passing exceptions for handling\n    @asyncbackoff(attempt_timeout=0.1, deadline=1, pause=0.1,\n                  exceptions=[TypeError, RuntimeError, ValueError])\n    async def db_fetch(data: dict):\n        ...\n\n\n    # Will be retried no more than 2 times (3 tries total)\n    @asyncbackoff(attempt_timeout=0.5, deadline=1, pause=0.1, max_tries=3,\n                  exceptions=[TypeError, RuntimeError, ValueError])\n    async def db_fetch(data: dict):\n        ...\n\n\n    # Will be retried only on connection abort (on POSIX systems)\n    @asyncbackoff(attempt_timeout=0.5, deadline=1, pause=0.1,\n                  exceptions=[OSError],\n                  giveup=lambda e: e.errno != errno.ECONNABORTED)\n    async def db_fetch(data: dict):\n        ...\n\n\n\nasynchronous file operations\n++++++++++++++++++++++++++++\n\nAsynchronous files operations. Based on thread-pool under the hood.\n\n.. code-block:: python\n\n    import aiomisc\n\n\n    async def file_write():\n        async with aiomisc.io.async_open('/tmp/test.txt', 'w+') as afp:\n            await afp.write(\"Hello\")\n            await afp.write(\" \")\n            await afp.write(\"world\")\n\n            await afp.seek(0)\n            print(await afp.read())\n\n\n\nWorking with threads\n++++++++++++++++++++\n\nWraps blocking function and runs it in\nthe different thread or thread pool.\n\ncontextvars support\n********************\n\nAll following decorators and functions support ``contextvars`` module,\nfrom PyPI for python earlier 3.7 and builtin standard library for python 3.7.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n    import contextvars\n    import random\n    import struct\n\n\n    user_id = contextvars.ContextVar(\"user_id\")\n\n    record_struct = struct.Struct(\">I\")\n\n\n    @aiomisc.threaded\n    def write_user():\n        with open(\"/tmp/audit.bin\", 'ab') as fp:\n            fp.write(record_struct.pack(user_id.get()))\n\n\n    @aiomisc.threaded\n    def read_log():\n        with open(\"/tmp/audit.bin\", \"rb\") as fp:\n            for chunk in iter(lambda: fp.read(record_struct.size), b''):\n                yield record_struct.unpack(chunk)[0]\n\n\n    async def main():\n        futures = []\n        for _ in range(5):\n            user_id.set(random.randint(1, 65535))\n            futures.append(write_user())\n\n        await asyncio.gather(*futures)\n\n        async for data in read_log():\n            print(data)\n\n\n    if __name__ == '__main__':\n        with aiomisc.entrypoint() as loop:\n            loop.run_until_complete(main())\n\n\nExample output:\n\n.. code-block::\n\n    6621\n    33012\n    1590\n    45008\n    56844\n\n\n.. note::\n\n    ``contextvars`` has different use cases then ``Context`` class.\n    ``contextvars`` applicable for passing context variables through the\n    execution stack but created task can not change parent context variables\n    because ``contextvars`` creates lightweight copy. ``Context`` class\n    allows it because do not copying context variables.\n\n\n@threaded\n*********\n\nWraps blocking function and runs it in the current thread pool.\n\n\n.. code-block:: python\n\n    import asyncio\n    import time\n    from aiomisc import new_event_loop, threaded\n\n\n    @threaded\n    def blocking_function():\n        time.sleep(1)\n\n\n    async def main():\n        # Running in parallel\n        await asyncio.gather(\n            blocking_function(),\n            blocking_function(),\n        )\n\n\n    if __name__ == '__main__':\n        loop = new_event_loop()\n        loop.run_until_complete(main())\n\nIn case function is a generator function ``@threaded`` decorator will return\n``IteratorWrapper`` (see Threaded generator decorator).\n\n\n@threaded_separate\n******************\n\nWraps blocking function and runs it in a new separate thread.\nHighly recommended for long background tasks:\n\n.. code-block:: python\n\n    import asyncio\n    import time\n    import threading\n    import aiomisc\n\n\n    @aiomisc.threaded\n    def blocking_function():\n        time.sleep(1)\n\n\n    @aiomisc.threaded_separate\n    def long_blocking_function(event: threading.Event):\n        while not event.is_set():\n            print(\"Running\")\n            time.sleep(1)\n        print(\"Exitting\")\n\n\n    async def main():\n        stop_event = threading.Event()\n\n        loop = asyncio.get_event_loop()\n        loop.call_later(10, stop_event.set)\n\n        # Running in parallel\n        await asyncio.gather(\n            blocking_function(),\n            # New thread will be spawned\n            long_blocking_function(stop_event),\n        )\n\n\n    with aiomisc.entrypoint() as loop:\n        loop.run_until_complete(main())\n\n\nThreaded iterator decorator\n***************************\n\nWraps blocking generator function and runs it in the current thread pool or\non a new separate thread.\n\nFollowing example reads itself file, chains hashes of every line with\nhash of previous line and sends hash and content via TCP:\n\n.. code-block:: python\n\n    import asyncio\n    import hashlib\n\n    import aiomisc\n\n    # My first blockchain\n\n    @aiomisc.threaded_iterable\n    def blocking_reader(fname):\n        with open(fname, \"r+\") as fp:\n            md5_hash = hashlib.md5()\n            for line in fp:\n                bytes_line = line.encode()\n                md5_hash.update(bytes_line)\n                yield bytes_line, md5_hash.hexdigest().encode()\n\n\n    async def main():\n        reader, writer = await asyncio.open_connection(\"127.0.0.1\", 2233)\n        async with blocking_reader(__file__) as gen:\n            async for line, digest in gen:\n                writer.write(digest)\n                writer.write(b'\\t')\n                writer.write(line)\n                await writer.drain()\n\n\n    with aiomisc.entrypoint() as loop\n        loop.run_until_complete(main())\n\n\n\nRun ``netcat`` listener in the terminal and run this example\n\n.. code-block::\n\n    $ netcat -v -l -p 2233\n    Connection from 127.0.0.1:54734\n    dc80feba2326979f8976e387fbbc8121\timport asyncio\n    78ec3bcb1c441614ede4af5e5b28f638\timport hashlib\n    b7df4a0a4eac401b2f835447e5fc4139\n    f0a94eb3d7ad23d96846c8cb5e327454\timport aiomisc\n    0c05dde8ac593bad97235e6ae410cb58\n    e4d639552b78adea6b7c928c5ebe2b67\t# My first blockchain\n    5f04aef64f4cacce39170142fe45e53e\n    c0019130ba5210b15db378caf7e9f1c9\t@aiomisc.threaded_iterable\n    a720db7e706d10f55431a921cdc1cd4c\tdef blocking_reader(fname):\n    0895d7ca2984ea23228b7d653d0b38f2\t    with open(fname, \"r+\") as fp:\n    0feca8542916af0b130b2d68ade679cf\t        md5_hash = hashlib.md5()\n    4a9ddfea3a0344cadd7a80a8b99ff85c\t        for line in fp:\n    f66fa1df3d60b7ac8991244455dff4ee\t            bytes_line = line.encode()\n    aaac23a5aa34e0f5c448a8d7e973f036\t            md5_hash.update(bytes_line)\n    2040bcaab6137b60e51ae6bd1e279546\t            yield bytes_line, md5_hash.hexdigest().encode()\n    7346740fdcde6f07d42ecd2d6841d483\n    14dfb2bae89fa0d7f9b6cba2b39122c4\n    d69cc5fe0779f0fa800c6ec0e2a7cbbd\tasync def main():\n    ead8ef1571e6b4727dcd9096a3ade4da\t    reader, writer = await asyncio.open_connection(\"127.0.0.1\", 2233)\n    275eb71a6b6fb219feaa5dc2391f47b7\t    async with blocking_reader(__file__) as gen:\n    110375ba7e8ab3716fd38a6ae8ec8b83\t        async for line, digest in gen:\n    c26894b38440dbdc31f77765f014f445\t            writer.write(digest)\n    27659596bd880c55e2bc72b331dea948\t            writer.write(b'\\t')\n    8bb9e27b43a9983c9621c6c5139a822e\t            writer.write(line)\n    2659fbe434899fc66153decf126fdb1c\t            await writer.drain()\n    6815f69821da8e1fad1d60ac44ef501e\n    5acc73f7a490dcc3b805e75fb2534254\n    0f29ad9505d1f5e205b0cbfef572ab0e\tif __name__ == '__main__':\n    8b04db9d80d8cda79c3b9c4640c08928\t    loop = aiomisc.new_event_loop()\n    9cc5f29f81e15cb262a46cf96b8788ba\t    loop.run_until_complete(main())\n\n\nYou should use async context managers in case when your generator works\ninfinity, or you have to await the ``.close()`` method when you avoid context managers.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    # Set 2 chunk buffer\n    @aiomisc.threaded_iterable(max_size=2)\n    def urandom_reader():\n        with open('/dev/urandom', \"rb\") as fp:\n            while True:\n                yield fp.read(8)\n\n\n    # Infinity buffer on a separate thread\n    @aiomisc.threaded_iterable_separate\n    def blocking_reader(fname):\n        with open(fname, \"r\") as fp:\n            yield from fp\n\n\n    async def main():\n        reader, writer = await asyncio.open_connection(\"127.0.0.1\", 2233)\n        async for line in blocking_reader(__file__):\n            writer.write(line.encode())\n\n        await writer.drain()\n\n        # Feed white noise\n        gen = urandom_reader()\n        counter = 0\n        async for line in gen:\n            writer.write(line)\n            counter += 1\n\n            if counter == 10:\n                break\n\n        await writer.drain()\n\n        # Stop running generator\n        await gen.close()\n\n        # Using context manager\n        async with urandom_reader() as gen:\n            counter = 0\n            async for line in gen:\n                writer.write(line)\n                counter += 1\n\n                if counter == 10:\n                    break\n\n        await writer.drain()\n\n\n    with aiomisc.entrypoint() as loop:\n        loop.run_until_complete(main())\n\naiomisc.IteratorWrapper\n***********************\n\nRun iterables on dedicated thread pool:\n\n.. code-block:: python\n\n    import concurrent.futures\n    import hashlib\n    import aiomisc\n\n\n    def urandom_reader():\n        with open('/dev/urandom', \"rb\") as fp:\n            while True:\n                yield fp.read(1024)\n\n\n    async def main():\n        # create a new thread pool\n        pool = concurrent.futures.ThreadPoolExecutor(1)\n        wrapper = aiomisc.IteratorWrapper(\n            urandom_reader,\n            executor=pool,\n            max_size=2\n        )\n\n        async with wrapper as gen:\n            md5_hash = hashlib.md5(b'')\n            counter = 0\n            async for item in gen:\n                md5_hash.update(item)\n                counter += 1\n\n                if counter >= 100:\n                    break\n\n        pool.shutdown()\n        print(md5_hash.hexdigest())\n\n\n    if __name__ == '__main__':\n        with aiomisc.entrypoint() as loop:\n            loop.run_until_complete(main())\n\naiomisc.IteratorWrapperSeparate\n*******************************\n\nRun iterables on separate thread:\n\n.. code-block:: python\n\n    import concurrent.futures\n    import hashlib\n    import aiomisc\n\n\n    def urandom_reader():\n        with open('/dev/urandom', \"rb\") as fp:\n            while True:\n                yield fp.read(1024)\n\n\n    async def main():\n        # create a new thread pool\n        wrapper = aiomisc.IteratorWrapperSeparate(\n            urandom_reader, max_size=2\n        )\n\n        async with wrapper as gen:\n            md5_hash = hashlib.md5(b'')\n            counter = 0\n            async for item in gen:\n                md5_hash.update(item)\n                counter += 1\n\n                if counter >= 100:\n                    break\n\n        print(md5_hash.hexdigest())\n\n\n    if __name__ == '__main__':\n        with aiomisc.entrypoint() as loop:\n            loop.run_until_complete(main())\n\n\n\naiomisc.ThreadPoolExecutor\n**************************\n\nThis is a fast thread pool implementation.\n\nSetting as a default thread pool:\n\n.. code-block:: python\n\n    import asyncio\n    from aiomisc import ThreadPoolExecutor\n\n    loop = asyncio.get_event_loop()\n    thread_pool = ThreadPoolExecutor(4)\n    loop.set_default_executor(thread_pool)\n\n\n.. note::\n\n    ``entrypoint`` context manager will set it by default.\n\n    ``entrypoint``'s argument ``pool_size`` limits thread pool size.\n\n\naiomisc.sync_wait_coroutine\n***************************\n\nFunctions running in thread can't call and wait result from coroutines\nby default. This function is helper for send coroutine to event loop\nand wait it in current thread.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    async def coro():\n        print(\"Coroutine started\")\n        await asyncio.sleep(1)\n        print(\"Coroutine done\")\n\n\n    @aiomisc.threaded\n    def in_thread(loop):\n        print(\"Thread started\")\n        aiomisc.sync_wait_coroutine(loop, coro)\n        print(\"Thread finished\")\n\n\n    with aiomisc.entrypoint() as loop:\n        loop.run_until_complete(in_thread(loop))\n\n\naiomisc.ProcessPoolExecutor\n***************************\n\nThis is a simple process pool executor implementation.\n\nExample:\n\n.. code-block:: python\n\n    import asyncio\n    import time\n    import os\n    from aiomisc import ProcessPoolExecutor\n\n    def process_inner():\n        for _ in range(10):\n            print(os.getpid())\n            time.sleep(1)\n\n        return os.getpid()\n\n\n    loop = asyncio.get_event_loop()\n    process_pool = ProcessPoolExecutor(4)\n\n\n    async def main():\n        print(\n            await asyncio.gather(\n                loop.run_in_executor(process_pool, process_inner),\n                loop.run_in_executor(process_pool, process_inner),\n                loop.run_in_executor(process_pool, process_inner),\n                loop.run_in_executor(process_pool, process_inner),\n            )\n        )\n\n    loop.run_until_complete(main())\n\n\nSelect\n++++++\n\nIn some cases you should wait only one of multiple tasks. ``select``\nwaits first passed awaitable object and returns list of results.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    async def main():\n        loop = asyncio.get_event_loop()\n        event = asyncio.Event()\n        future = asyncio.Future()\n\n        loop.call_soon(event.set)\n\n        await aiomisc.select(event.wait(), future)\n        print(event.is_set())       # True\n\n        event = asyncio.Event()\n        future = asyncio.Future()\n\n        loop.call_soon(future.set_result, True)\n\n        results = await aiomisc.select(future, event.wait())\n        future_result, event_result = results\n\n        print(results.result())             # True\n        print(results.result_idx)           # 0\n        print(event_result, future_result)  # None, True\n\n\n    with aiomisc.entrypoint() as loop:\n        loop.run_until_complete(main())\n\n\n.. warning::\n\n    When you don't want to cancel pending tasks pass ``cancel=False`` argument.\n    In this case you have to handle task completion manually or get warnings.\n\n\ncancel_tasks\n++++++++++++\n\nAll passed tasks will be cancelled and task will be returned:\n\n.. code-block:: python\n\n    import asyncio\n    from aiomisc import cancel_tasks\n\n\n    async def main():\n        done, pending = await asyncio.wait([\n            asyncio.sleep(i) for i in range(10)\n        ], timeout=5)\n\n        print(\"Done\", len(done), \"tasks\")\n        print(\"Pending\", len(pending), \"tasks\")\n        await cancel_tasks(pending)\n\n\n    asyncio.run(main())\n\n\nawaitable\n+++++++++\n\nDecorator wraps function and returns a function which returns awaitable object.\nIn case than a function returns a future, the original future will be returned.\nIn case then the function returns a coroutine, the original coroutine will\nbe returned. In case than function returns non-awaitable object, it's will\nbe wrapped to a new coroutine which just returns this object. It's useful\nwhen you don't want to check function result before\nuse it in ``await`` expression.\n\n.. code-block:: python\n\n    import asyncio\n    import aiomisc\n\n\n    async def do_callback(func, *args):\n        awaitable_func = aiomisc.awaitable(func)\n\n        return await awaitable_func(*args)\n\n\n    print(asyncio.run(do_callback(asyncio.sleep, 2)))\n    print(asyncio.run(do_callback(lambda: 45)))\n\n\nSignal\n++++++\n\nYou can register async callback functions for specific events of an entrypoint.\n\npre_start\n*********\n\n``pre_start`` signal occurs on entrypoint start up before any service have started.\n\n.. code-block:: python\n\n    from aiomisc import entrypoint, receiver\n\n    @receiver(entrypoint.PRE_START)\n    async def prepare_database(entrypoint, services):\n      ...\n\n    with entrypoint() as loop:\n        loop.run_forever()\n\n\npost_stop\n*********\n\n``post_stop`` signal occurs on entrypoint shutdown after all services have been\nstopped.\n\n.. code-block:: python\n\n    from aiomisc import entrypoint, receiver\n\n    @receiver(entrypoint.POST_STOP)\n    async def cleanup(entrypoint):\n      ...\n\n    with entrypoint() as loop:\n        loop.run_forever()\n\n\nPlugins\n+++++++\n\naiomisc can be extended with plugins as separate packages. Plugins can\nenhance aiomisc by mean of signals_.\n\n.. _signals: #signal\n\nIn order to make your plugin discoverable by aiomisc you should add\n``aiomisc.plugins`` entry to entry to ``entry_points`` argument of ``setup``\ncall in ``setup.py`` of a plugin.\n\n.. code-block:: python\n\n    # setup.py\n\n    setup(\n        # ...\n        entry_points={\n            \"aiomisc.plugins\": [\"myplugin = aiomisc_myplugin.plugin\"]\n        },\n        # ...\n    )\n\n\nModules which provided in ``entry_points`` should have ``setup`` function.\nThis functions would be called by aiomisc and must contain signals connecting.\n\n.. code-block:: python\n\n    async def hello(entrypoint, services):\n        print('Hello from aiomisc plugin')\n\n\n    def setup():\n        from aiomisc import entrypoint\n\n        entrypoint.PRE_START.connect(hello)\n\n\nBind socket\n+++++++++++\n\nBind socket and set ``setblocking(False)`` for just created socket.\nThis detects ``address`` format and select socket family automatically.\n\n.. code-block:: python\n\n    from aiomisc import bind_socket\n\n    # IPv4 socket\n    sock = bind_socket(address=\"127.0.0.1\", port=1234)\n\n    # IPv6 socket (on Linux IPv4 socket will be bind too)\n    sock = bind_socket(address=\"::1\", port=1234)\n\n\nPeriodic callback\n+++++++++++++++++\n\nRuns coroutine function periodically with an optional delay of the first execution.\n\n.. code-block:: python\n\n    import asyncio\n    import time\n    from aiomisc import new_event_loop, PeriodicCallback\n\n\n    async def periodic_function():\n        print(\"Hello\")\n\n\n    if __name__ == '__main__':\n        loop = new_event_loop()\n\n        periodic = PeriodicCallback(periodic_function)\n\n        # Wait 10 seconds and call it each second after that\n        periodic.start(1, delay=10)\n\n        loop.run_forever()\n\n\nLogging configuration\n+++++++++++++++++++++\n\nColor\n*****\n\nSetting up colorized logs:\n\n.. code-block:: python\n\n    import logging\n    from aiomisc.log import basic_config\n\n\n    # Configure logging\n    basic_config(level=logging.INFO, buffered=False, log_format='color')\n\nJSON\n****\n\nSetting up json logs:\n\n.. code-block:: python\n\n    import logging\n    from aiomisc.log import basic_config\n\n\n    # Configure logging\n    basic_config(level=logging.INFO, buffered=False, log_format='json')\n\n\nBuffered log handler\n********************\n\nParameter `buffered=True` enables memory buffer that flushes logs in a thread.\n\n.. code-block:: python\n\n    import logging\n    from aiomisc.log import basic_config\n    from aiomisc.periodic import PeriodicCallback\n    from aiomisc.utils import new_event_loop\n\n\n    # Configure logging globally\n    basic_config(level=logging.INFO, buffered=False, log_format='json')\n\n    async def write_log(loop):\n        logging.info(\"Hello %f\", loop.time())\n\n    if __name__ == '__main__':\n        loop = new_event_loop()\n\n        # Configure\n        basic_config(\n            level=logging.INFO,\n            buffered=True,\n            log_format='color',\n            flush_interval=2\n        )\n\n        periodic = PeriodicCallback(write_log, loop)\n        periodic.start(0.3)\n\n        loop.run_forever()\n\n\n.. note::\n\n    ``entrypoint`` accepts ``log_format`` parameter for configure it.\n\n    List of all supported log formats is available from\n    ``aiomisc.log.LogFormat.choices()``\n\n\nPytest plugin\n+++++++++++++\n\nThis package contains plugin for pytest.\n\nBasic usage\n***********\n\nSimple usage example:\n\n.. code-block:: python\n\n    import asyncio\n    import pytest\n\n\n    async def test_sample(loop):\n        f = loop.crete_future()\n        loop.call_soon(f.set_result, True)\n\n        assert await f\n\n\nasynchronous fuxture example:\n\n\n.. code-block:: python\n\n    import asyncio\n    import pytest\n\n\n    @pytest.fixture\n    async def my_fixture(loop):\n        await asyncio.sleep(0)\n\n        # Requires python 3.6+\n        yield\n\n\npytest markers\n**************\n\nPackage contains some useful markers for pytest:\n\n* ``catch_loop_exceptions`` - uncaught event loop exceptions will failling test.\n* ``forbid_get_event_loop`` - forbids call ``asyncio.get_event_loop``\n  during test case.\n\n.. code-block:: python\n\n    import pytest\n\n\n    # Test will be failed\n    @pytest.mark.forbid_get_event_loop\n    async def test_with_get_loop():\n        def switch_context():\n            loop = get_event_loop()\n            future = loop.create_future()\n            loop.call_soon(future.set_result, True)\n            return future\n\n        with pytest.raises(Failed):\n            await switch_context()\n\n\n    # Test will be failed\n    @pytest.mark.catch_loop_exceptions\n    async def test_with_errors(loop):\n        async def fail():\n            # switch context\n            await asyncio.sleep(0)\n            raise Exception()\n\n        loop.create_task(fail())\n        await asyncio.sleep(0.1)\n        return\n\n\nPassing default context\n***********************\n\n.. code-block:: python\n\n    import pytest\n\n\n    @pytest.fixture\n    def default_context():\n        return {\n            'foo': 'bar',\n            'bar': 'foo',\n        }\n\n\nTesting services\n****************\n\nRedefine ``services`` fixture in your test module:\n\n.. code-block:: python\n\n    @pytest.fixture\n    def services(aiomisc_unused_port, handlers):\n        return [\n            RPCServer(\n                handlers={'foo': lambda: 'bar'},\n                address='localhost',\n                port=aiomisc_unused_port\n            )\n        ]\n\n\nEvent loop policy overriding\n****************************\n\n.. code-block:: python\n\n    import uvloop\n    import tokio\n\n    policy_ids = ('uvloop', 'asyncio', 'tokio')\n    policies = (uvloop.EventLoopPolicy(),\n                asyncio.DefaultEventLoopPolicy(),\n                tokio.EventLoopPolicy())\n\n    @pytest.fixture(params=policies, ids=policy_ids)\n    def event_loop_policy(request):\n        return request.param\n\n\nThread pool overriding\n**********************\n\n.. code-block:: python\n\n    thread_pool_ids = ('aiomisc pool', 'default pool')\n    thread_pool_implementation = (ThreadPoolExecutor,\n                                  concurrent.futures.ThreadPoolExecutor)\n\n\n    @pytest.fixture(params=thread_pool_implementation, ids=thread_pool_ids)\n    def thread_pool_executor(request):\n        return request.param\n\n\nentrypoint arguments\n********************\n\n.. code-block:: python\n\n    import pytest\n\n    @pytest.fixture\n    def entrypoint_kwargs() -> dict:\n        return dict(log_config=False)\n\n\naiohttp test client\n*******************\n\n.. code-block:: python\n\n    import pytest\n    from myapp.services.rest import REST\n\n\n    @pytest.fixture\n    def rest_port(aiomisc_unused_port_factory):\n        return aiomisc_unused_port_factory()\n\n\n    @pytest.fixture\n    def rest_service(rest_port):\n        return REST(port=rest_port)\n\n\n    @pytest.fixture\n    def services(rest_service):\n        return [rest_service]\n\n\n    @pytest.fixture\n    def api_client(api_service):\n        test_srv = TestServer(\n            app=rest_service.app,\n            port=arguments.port,\n        )\n\n        return TestClient(test_srv)\n\n    ...\n\n\nTCPProxy\n********\n\nSimple TCP proxy for emulate network problems.\n\nAwailable as fixture `tcp_proxy`\n\n\n\nExamples:\n\n.. code-block:: python\n\n    import asyncio\n    import time\n\n    import pytest\n\n    import aiomisc\n\n\n    class EchoServer(aiomisc.service.TCPServer):\n        async def handle_client(\n                self, reader: asyncio.StreamReader,\n                writer: asyncio.StreamWriter\n        ):\n            chunk = await reader.read(65534)\n            while chunk:\n                writer.write(chunk)\n                chunk = await reader.read(65534)\n\n            writer.close()\n            await writer.wait_closed()\n\n\n    @pytest.fixture()\n    def server_port(aiomisc_unused_port_factory) -> int:\n        return aiomisc_unused_port_factory()\n\n\n    @pytest.fixture()\n    def services(server_port, localhost):\n        return [EchoServer(port=server_port, address=localhost)]\n\n\n    @pytest.fixture()\n    async def proxy(tcp_proxy, localhost, server_port):\n        async with tcp_proxy(localhost, server_port) as proxy:\n            yield proxy\n\n\n    async def test_proxy_client_close(proxy):\n        reader, writer = await proxy.create_client()\n        payload = b\"Hello world\"\n\n        writer.write(payload)\n        response = await asyncio.wait_for(reader.read(1024), timeout=1)\n\n        assert response == payload\n\n        assert not reader.at_eof()\n        await proxy.disconnect_all()\n\n        assert await asyncio.wait_for(reader.read(), timeout=1) == b\"\"\n        assert reader.at_eof()\n\n\n    async def test_proxy_client_slow(proxy):\n        delay = 0.1\n        # Proxy will delay each data chunk\n        proxy.set_delay(delay)\n\n        reader, writer = await proxy.create_client()\n        payload = b\"Hello world\"\n\n        delta = -time.monotonic()\n\n        writer.write(payload)\n        await asyncio.wait_for(reader.read(1024), timeout=2)\n\n        delta += time.monotonic()\n\n        assert delta >= delay\n\n\n    async def test_proxy_client_with_processor(proxy):\n        processed_request = b\"Never say hello\"\n\n        # Patching protocol functions\n        proxy.set_content_processors(\n            # Process data from client to server\n            lambda _: processed_request,\n\n            # Process data from server to client\n            lambda chunk: chunk[::-1],\n        )\n\n        reader, writer = await proxy.create_client()\n        writer.write(b'nevermind')\n\n        response = await reader.read(16)\n\n        assert response == processed_request[::-1]\n\n\nVersioning\n----------\n\nThis software follows `Semantic Versioning`_\n\n\nHow to develop?\n---------------\n\nShould be installed:\n\n* `virtualenv`\n* GNU Make as `make`\n* Python 3.5+ as `python3`\n\n\nFor setting up developer environment just type\n\n    .. code-block::\n\n        make develop\n\n\n.. _Semantic Versioning: http://semver.org/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mosquito/aiomisc", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiomisc", "package_url": "https://pypi.org/project/aiomisc/", "platform": "all", "project_url": "https://pypi.org/project/aiomisc/", "project_urls": {"Homepage": "https://github.com/mosquito/aiomisc"}, "release_url": "https://pypi.org/project/aiomisc/9.8.0/", "requires_dist": ["colorlog", "prettylog (~=0.3.0)", "async-generator ; python_version < \"3.7\"", "aiohttp ; extra == 'aiohttp'", "aiocarbon (~=0.15) ; extra == 'carbon'", "contextvars (~=2.4) ; extra == 'contextvars'", "aiohttp (<4) ; extra == 'develop'", "async-timeout ; extra == 'develop'", "async-generator ; extra == 'develop'", "coverage (==4.5.1) ; extra == 'develop'", "coveralls ; extra == 'develop'", "pylava ; extra == 'develop'", "pytest ; extra == 'develop'", "pytest-cov (~=2.5.1) ; extra == 'develop'", "timeout-decorator ; extra == 'develop'", "tox (>=2.4) ; extra == 'develop'", "raven-aiohttp ; extra == 'raven'", "uvloop (<1,>=0.14) ; extra == 'uvloop'"], "requires_python": "", "summary": "aiomisc - miscellaneous utils for asyncio", "version": "9.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://coveralls.io/github/mosquito/aiomisc\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37b702ed982afb8d43d08cffb56692ce174c9330/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6f73717569746f2f61696f6d6973632f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/aiokitchen/aiomisc/actions?query=workflow%3Atox\" rel=\"nofollow\"><img alt=\"Actions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8b2462d58db7b0ab41676ea64f9eb04a7013e23/68747470733a2f2f6769746875622e636f6d2f61696f6b69746368656e2f61696f6d6973632f776f726b666c6f77732f746f782f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiomisc/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ffc967f8d03604914daf75fce803fba6127db9ed/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696f6d6973632e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiomisc/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/wheel/aiomisc.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57ac8f6b70231f692f60f5356bde529c7277117e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f61696f6d6973632e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiomisc/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/aiomisc.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/174cb3c395ac7ba5aa36a54cd4d239349db2da05/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696f6d6973632e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiomisc/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/aiomisc.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22927b84bac4c538f0e85d734793c9609add79c3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f61696f6d6973632e737667\"></a>\n<p>Miscellaneous utils for asyncio.</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quick-start\" id=\"id2\" rel=\"nofollow\">Quick Start</a></li>\n<li><a href=\"#overview\" id=\"id3\" rel=\"nofollow\">Overview:</a><ul>\n<li><a href=\"#entrypoint\" id=\"id4\" rel=\"nofollow\">entrypoint</a></li>\n<li><a href=\"#services\" id=\"id5\" rel=\"nofollow\">Services</a><ul>\n<li><a href=\"#tcpserver\" id=\"id6\" rel=\"nofollow\">TCPServer</a></li>\n<li><a href=\"#udpserver\" id=\"id7\" rel=\"nofollow\">UDPServer</a></li>\n<li><a href=\"#tlsserver\" id=\"id8\" rel=\"nofollow\">TLSServer</a></li>\n<li><a href=\"#periodicservice\" id=\"id9\" rel=\"nofollow\">PeriodicService</a></li>\n<li><a href=\"#multiple-services\" id=\"id10\" rel=\"nofollow\">Multiple services</a></li>\n<li><a href=\"#configuration\" id=\"id11\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#aiohttp-service\" id=\"id12\" rel=\"nofollow\">aiohttp service</a></li>\n<li><a href=\"#memory-tracer\" id=\"id13\" rel=\"nofollow\">Memory Tracer</a></li>\n<li><a href=\"#profiler\" id=\"id14\" rel=\"nofollow\">Profiler</a></li>\n</ul>\n</li>\n<li><a href=\"#abstract-connection-pool\" id=\"id15\" rel=\"nofollow\">Abstract connection pool</a></li>\n<li><a href=\"#context\" id=\"id16\" rel=\"nofollow\">Context</a></li>\n<li><a href=\"#timeout-decorator\" id=\"id17\" rel=\"nofollow\">timeout decorator</a></li>\n<li><a href=\"#async-backoff\" id=\"id18\" rel=\"nofollow\">Async backoff</a></li>\n<li><a href=\"#asynchronous-file-operations\" id=\"id19\" rel=\"nofollow\">asynchronous file operations</a></li>\n<li><a href=\"#working-with-threads\" id=\"id20\" rel=\"nofollow\">Working with threads</a><ul>\n<li><a href=\"#contextvars-support\" id=\"id21\" rel=\"nofollow\">contextvars support</a></li>\n<li><a href=\"#threaded\" id=\"id22\" rel=\"nofollow\">@threaded</a></li>\n<li><a href=\"#threaded-separate\" id=\"id23\" rel=\"nofollow\">@threaded_separate</a></li>\n<li><a href=\"#threaded-iterator-decorator\" id=\"id24\" rel=\"nofollow\">Threaded iterator decorator</a></li>\n<li><a href=\"#aiomisc-iteratorwrapper\" id=\"id25\" rel=\"nofollow\">aiomisc.IteratorWrapper</a></li>\n<li><a href=\"#aiomisc-iteratorwrapperseparate\" id=\"id26\" rel=\"nofollow\">aiomisc.IteratorWrapperSeparate</a></li>\n<li><a href=\"#aiomisc-threadpoolexecutor\" id=\"id27\" rel=\"nofollow\">aiomisc.ThreadPoolExecutor</a></li>\n<li><a href=\"#aiomisc-sync-wait-coroutine\" id=\"id28\" rel=\"nofollow\">aiomisc.sync_wait_coroutine</a></li>\n<li><a href=\"#aiomisc-processpoolexecutor\" id=\"id29\" rel=\"nofollow\">aiomisc.ProcessPoolExecutor</a></li>\n</ul>\n</li>\n<li><a href=\"#select\" id=\"id30\" rel=\"nofollow\">Select</a></li>\n<li><a href=\"#cancel-tasks\" id=\"id31\" rel=\"nofollow\">cancel_tasks</a></li>\n<li><a href=\"#awaitable\" id=\"id32\" rel=\"nofollow\">awaitable</a></li>\n<li><a href=\"#signal\" id=\"id33\" rel=\"nofollow\">Signal</a><ul>\n<li><a href=\"#pre-start\" id=\"id34\" rel=\"nofollow\">pre_start</a></li>\n<li><a href=\"#post-stop\" id=\"id35\" rel=\"nofollow\">post_stop</a></li>\n</ul>\n</li>\n<li><a href=\"#plugins\" id=\"id36\" rel=\"nofollow\">Plugins</a></li>\n<li><a href=\"#bind-socket\" id=\"id37\" rel=\"nofollow\">Bind socket</a></li>\n<li><a href=\"#periodic-callback\" id=\"id38\" rel=\"nofollow\">Periodic callback</a></li>\n<li><a href=\"#logging-configuration\" id=\"id39\" rel=\"nofollow\">Logging configuration</a><ul>\n<li><a href=\"#color\" id=\"id40\" rel=\"nofollow\">Color</a></li>\n<li><a href=\"#json\" id=\"id41\" rel=\"nofollow\">JSON</a></li>\n<li><a href=\"#buffered-log-handler\" id=\"id42\" rel=\"nofollow\">Buffered log handler</a></li>\n</ul>\n</li>\n<li><a href=\"#pytest-plugin\" id=\"id43\" rel=\"nofollow\">Pytest plugin</a><ul>\n<li><a href=\"#basic-usage\" id=\"id44\" rel=\"nofollow\">Basic usage</a></li>\n<li><a href=\"#pytest-markers\" id=\"id45\" rel=\"nofollow\">pytest markers</a></li>\n<li><a href=\"#passing-default-context\" id=\"id46\" rel=\"nofollow\">Passing default context</a></li>\n<li><a href=\"#testing-services\" id=\"id47\" rel=\"nofollow\">Testing services</a></li>\n<li><a href=\"#event-loop-policy-overriding\" id=\"id48\" rel=\"nofollow\">Event loop policy overriding</a></li>\n<li><a href=\"#thread-pool-overriding\" id=\"id49\" rel=\"nofollow\">Thread pool overriding</a></li>\n<li><a href=\"#entrypoint-arguments\" id=\"id50\" rel=\"nofollow\">entrypoint arguments</a></li>\n<li><a href=\"#aiohttp-test-client\" id=\"id51\" rel=\"nofollow\">aiohttp test client</a></li>\n<li><a href=\"#tcpproxy\" id=\"id52\" rel=\"nofollow\">TCPProxy</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#versioning\" id=\"id53\" rel=\"nofollow\">Versioning</a></li>\n<li><a href=\"#how-to-develop\" id=\"id54\" rel=\"nofollow\">How to develop?</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>Installing from pypi:</p>\n<pre>pip3 install aiomisc\n</pre>\n<p>With <a href=\"https://pypi.org/project/uvloop\" rel=\"nofollow\">uvloop</a>:</p>\n<pre>pip3 install <span class=\"s2\">\"aiomisc[uvloop]\"</span>\n</pre>\n<p>With <a href=\"https://pypi.org/project/aiohttp\" rel=\"nofollow\">aiohttp</a>:</p>\n<pre>pip3 install <span class=\"s2\">\"aiomisc[aiohttp]\"</span>\n</pre>\n<p>Installing from github.com:</p>\n<pre>pip3 install git+https://github.com/mosquito/aiomisc.git\n</pre>\n</div>\n<div id=\"quick-start\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Quick Start</a></h2>\n<p>Async entrypoint with logging and useful arguments:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"-L\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--log-level\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Log level\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'LOG_LEVEL'</span><span class=\"p\">,</span> <span class=\"s1\">'info'</span><span class=\"p\">),</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"s1\">'critical'</span><span class=\"p\">,</span> <span class=\"s1\">'fatal'</span><span class=\"p\">,</span> <span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"s1\">'warning'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'warn'</span><span class=\"p\">,</span> <span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"s1\">'debug'</span><span class=\"p\">,</span> <span class=\"s1\">'notset'</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"--log-format\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Log format\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'LOG_FORMAT'</span><span class=\"p\">,</span> <span class=\"s1\">'color'</span><span class=\"p\">),</span>\n    <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">LogFormat</span><span class=\"o\">.</span><span class=\"n\">choices</span><span class=\"p\">(),</span>\n    <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s1\">'LOG_FORMAT'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"-D\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--debug\"</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s1\">'store_true'</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Run loop and application in debug mode\"</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"--pool-size\"</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Thread pool size\"</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'THREAD_POOL'</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Starting'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Exiting'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">log_level</span><span class=\"p\">,</span>\n                    <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">log_format</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Install event loop on program start:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"c1\"># Installing uvloop event loop</span>\n<span class=\"c1\"># and set `aiomisc.thread_pool.ThreadPoolExecutor`</span>\n<span class=\"c1\"># as default executor</span>\n<span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Close current event loop and install a new one:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Overview:</a></h2>\n<div id=\"entrypoint\">\n<h3><a href=\"#id4\" rel=\"nofollow\">entrypoint</a></h3>\n<p>In generic case the entrypoint helper creates event loop and cancels already\nrunning coroutines on exit.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Complete example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Hello there\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">(</span>\n    <span class=\"n\">pool_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">,</span>\n    <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">'color'</span><span class=\"p\">,</span>                         <span class=\"c1\"># default</span>\n    <span class=\"n\">log_buffer_size</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">,</span>                       <span class=\"c1\"># default</span>\n    <span class=\"n\">log_flush_interval</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>                     <span class=\"c1\"># default</span>\n    <span class=\"n\">log_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>                            <span class=\"c1\"># default</span>\n    <span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">DefaultEventLoopPolicy</span><span class=\"p\">(),</span>    <span class=\"c1\"># default</span>\n    <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>                                <span class=\"c1\"># default</span>\n<span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"services\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Services</a></h3>\n<p><tt>Services</tt> is abstraction to help organize lots of different\ntasks in one process. Each service must implement <tt>start()</tt> method and can\nimplement <tt>stop()</tt> method.</p>\n<p>Service instance should be passed to the <tt>entrypoint</tt>, and will be started\nafter event loop has been created.</p>\n<div>\n<p>Note</p>\n<p>Current event-loop will be set before <tt>start()</tt> method called.\nThe event loop will be set as current for this thread.</p>\n<p>Please avoid using <tt>asyncio.get_event_loop()</tt> explicitly inside\n<tt>start()</tt> method. Use <tt>self.loop</tt> instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">Service</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyService</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n  <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"c1\"># Send signal to entrypoint for continue running</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_event</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n\n      <span class=\"c1\"># Start service task</span>\n      <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">MyService</span><span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<p>Method <tt>start()</tt> creates as a separate task that can run forever. But in\nthis case <tt>self.start_event.set()</tt> should be called for notifying\n<tt>entrypoint</tt>.</p>\n<p>During graceful shutdown method <tt>stop()</tt> will be called first,\nand after that all running tasks will be cancelled (including <tt>start()</tt>).</p>\n<p>This package contains some useful base classes for simple services writing.</p>\n<div id=\"tcpserver\">\n<h4><a href=\"#id6\" rel=\"nofollow\">TCPServer</a></h4>\n<p><tt>TCPServer</tt> - it\u2019s a base class for writing TCP servers.\nJust implement <tt>handle_client(reader, writer)</tt> to use it.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">TCPServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span><span class=\"p\">,</span>\n                            <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamWriter</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'::1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8901</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"udpserver\">\n<h4><a href=\"#id7\" rel=\"nofollow\">UDPServer</a></h4>\n<p><tt>UDPServer</tt> - it\u2019s a base class for writing UDP servers.\nJust implement <tt>handle_datagram(data, addr)</tt> to use it.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UDPPrinter</span><span class=\"p\">(</span><span class=\"n\">UDPServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_datagram</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"s1\">'-&gt;'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">UDPPrinter</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'::1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"tlsserver\">\n<h4><a href=\"#id8\" rel=\"nofollow\">TLSServer</a></h4>\n<p><tt>TLSServer</tt> - it\u2019s a base class for writing TCP servers with TLS.\nJust implement <tt>handle_client(reader, writer)</tt> to use it.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SecureEchoServer</span><span class=\"p\">(</span><span class=\"n\">TLSServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span><span class=\"p\">,</span>\n                            <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamWriter</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">SecureEchoServer</span><span class=\"p\">(</span>\n    <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'::1'</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8900</span><span class=\"p\">,</span>\n    <span class=\"n\">ca</span><span class=\"o\">=</span><span class=\"s1\">'ca.pem'</span><span class=\"p\">,</span>\n    <span class=\"n\">cert</span><span class=\"o\">=</span><span class=\"s1\">'cert.pem'</span><span class=\"p\">,</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">'key.pem'</span><span class=\"p\">,</span>\n    <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"periodicservice\">\n<h4><a href=\"#id9\" rel=\"nofollow\">PeriodicService</a></h4>\n<p><tt>PeriodicService</tt> runs <tt>PeriodicCallback</tt> as a service and waits for\nrunning callback to complete on stop. You need to use <tt>PeriodicService</tt>\nas a base class and override <tt>callback</tt> async coroutine method.</p>\n<p>Service class accepts required <tt>interval</tt> argument - periodic interval\nin seconds and\noptional <tt>delay</tt> argument - periodic execution delay in seconds (0 by default).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service.periodic</span> <span class=\"kn\">import</span> <span class=\"n\">PeriodicService</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPeriodicService</span><span class=\"p\">(</span><span class=\"n\">PeriodicService</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Running periodic callback'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">MyPeriodicService</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># once per hour</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"multiple-services\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Multiple services</a></h4>\n<p>Pass several service instances to the <tt>entrypoint</tt> to run all of them.\nAfter exiting the entrypoint service instances will be gracefully shut down.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span><span class=\"p\">,</span> <span class=\"n\">TCPServer</span><span class=\"p\">,</span> <span class=\"n\">UDPServer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">PeriodicService</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">callabck</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello from service'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">TCPServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span><span class=\"p\">,</span>\n                            <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamWriter</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UDPPrinter</span><span class=\"p\">(</span><span class=\"n\">UDPServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_datagram</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"s1\">'-&gt;'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">services</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#1'</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'::1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8901</span><span class=\"p\">),</span>\n    <span class=\"n\">UDPPrinter</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'::1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">3000</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">services</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"configuration\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Configuration</a></h4>\n<p><tt>Service</tt> metaclass accepts all kwargs and will set it\nto <tt>self</tt> as attributes.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span><span class=\"p\">,</span> <span class=\"n\">TCPServer</span><span class=\"p\">,</span> <span class=\"n\">UDPServer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n    <span class=\"c1\"># required kwargs</span>\n    <span class=\"n\">__required__</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">})</span>\n\n    <span class=\"c1\"># default value</span>\n    <span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start_event</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># attribute ``name`` from kwargs</span>\n            <span class=\"c1\"># must be defined when instance initializes</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello from service'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># attribute ``delay`` from kwargs</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">)</span>\n\n<span class=\"n\">services</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#1'</span><span class=\"p\">),</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#2'</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">services</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"aiohttp-service\">\n<h4><a href=\"#id12\" rel=\"nofollow\">aiohttp service</a></h4>\n<div>\n<p>Warning</p>\n<p>requires installed aiohttp:</p>\n<pre>pip install aiohttp\n</pre>\n<p>or using extras:</p>\n<pre>pip install aiomisc[aiohttp]\n</pre>\n</div>\n<p>aiohttp application can be started as a service:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp.web</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service.aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">AIOHTTPService</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument_group</span><span class=\"p\">(</span><span class=\"s1\">'HTTP options'</span><span class=\"p\">)</span>\n\n<span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"-l\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--address\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"::\"</span><span class=\"p\">,</span>\n                   <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Listen HTTP address\"</span><span class=\"p\">)</span>\n<span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"-p\"</span><span class=\"p\">,</span> <span class=\"s2\">\"--port\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">,</span>\n                   <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Listen HTTP port\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">match_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s2\">\"Anonymous\"</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello, \"</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n    <span class=\"k\">return</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">REST</span><span class=\"p\">(</span><span class=\"n\">AIOHTTPService</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_application</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_routes</span><span class=\"p\">([</span>\n            <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">),</span>\n            <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{name}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n<span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">REST</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<p>Class <tt>AIOHTTPSSLService</tt> is similar to <tt>AIOHTTPService</tt> but creates HTTPS\nserver. You must pass SSL-required options (see <tt>TLSServer</tt> class).</p>\n</div>\n<div id=\"memory-tracer\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Memory Tracer</a></h4>\n<p>Simple and useful service for logging large python\nobjects allocated in memory.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryTracer</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">leaking</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">leaking</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">))</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">MemoryTracer</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">top_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Output example:</p>\n<pre>[T:[1] Thread Pool] INFO:aiomisc.service.tracer: Top memory usage:\n Objects | Obj.Diff |   Memory | Mem.Diff | Traceback\n      12 |       12 |   1.9KiB |   1.9KiB | aiomisc/periodic.py:40\n      12 |       12 |   1.8KiB |   1.8KiB | aiomisc/entrypoint.py:93\n       6 |        6 |   1.1KiB |   1.1KiB | aiomisc/thread_pool.py:71\n       2 |        2 |   976.0B |   976.0B | aiomisc/thread_pool.py:44\n       5 |        5 |   712.0B |   712.0B | aiomisc/thread_pool.py:52\n\n[T:[6] Thread Pool] INFO:aiomisc.service.tracer: Top memory usage:\n Objects | Obj.Diff |   Memory | Mem.Diff | Traceback\n   43999 |    43999 |   7.1MiB |   7.1MiB | scratches/scratch_8.py:11\n      47 |       47 |   4.7KiB |   4.7KiB | env/bin/../lib/python3.7/abc.py:143\n      33 |       33 |   2.8KiB |   2.8KiB | 3.7/lib/python3.7/tracemalloc.py:113\n      44 |       44 |   2.4KiB |   2.4KiB | 3.7/lib/python3.7/tracemalloc.py:185\n      14 |       14 |   2.4KiB |   2.4KiB | aiomisc/periodic.py:40\n</pre>\n</div>\n<div id=\"profiler\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Profiler</a></h4>\n<p>Simple service for profiling.\nOptional <cite>path</cite> argument can be provided to dump complete profiling data,\nwhich can be later used by, for example, snakeviz.\nAlso can change ordering with <cite>order</cite> argument (\u201ccumulative\u201d by default).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.service</span> <span class=\"kn\">import</span> <span class=\"n\">Profiler</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">Profiler</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">top_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Output example:</p>\n<pre>108 function calls in 1.117 seconds\n\nOrdered by: cumulative time\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n   100    1.117    0.011    1.117    0.011 {built-in method time.sleep}\n     1    0.000    0.000    0.000    0.000 &lt;...&gt;/lib/python3.7/pstats.py:89(__init__)\n     1    0.000    0.000    0.000    0.000 &lt;...&gt;/lib/python3.7/pstats.py:99(init)\n     1    0.000    0.000    0.000    0.000 &lt;...&gt;/lib/python3.7/pstats.py:118(load_stats)\n     1    0.000    0.000    0.000    0.000 &lt;...&gt;/lib/python3.7/cProfile.py:50(create_stats)\n</pre>\n</div>\n</div>\n<div id=\"abstract-connection-pool\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Abstract connection pool</a></h3>\n<p><tt>aiomisc.PoolBase</tt> is an abstract class for implementation user defined\nconnection pool.</p>\n<p>Example for <tt>aioredis</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aioredis</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RedisPool</span><span class=\"p\">(</span><span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">PoolBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">recycle</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">recycle</span><span class=\"o\">=</span><span class=\"n\">recycle</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">uri</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_create_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">aioredis</span><span class=\"o\">.</span><span class=\"n\">create_redis</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_destroy_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">aioredis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">):</span>\n        <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_check_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">aioredis</span><span class=\"o\">.</span><span class=\"n\">Redis</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"p\">(</span><span class=\"s2\">\"redis://localhost\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"context\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Context</a></h3>\n<p>Services can require each others data. In this case you should use <tt>Context</tt>.</p>\n<p><tt>Context</tt> is a repository associated with the running <tt>entrypoint</tt>.</p>\n<p><tt>Context</tt>-object will be created when <tt>entrypoint</tt> starts and linked\nto the running event loop.</p>\n<p>Cross dependent services might await or set each others data via the context.</p>\n<p>For service instances <tt>self.context</tt> is available since <tt>entrypoint</tt>\nstarted. In other cases <tt>get_context()</tt> function returns current context.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">random</span><span class=\"p\">,</span> <span class=\"n\">randint</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">get_context</span><span class=\"p\">,</span> <span class=\"n\">Service</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">get_context</span><span class=\"p\">()</span>\n\n        <span class=\"n\">wait_time</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'wait_time'</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Wait time is'</span><span class=\"p\">,</span> <span class=\"n\">wait_time</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello from service'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">wait_time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RemoteConfiguration</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># querying from remote server</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">())</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'wait_time'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">services</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#1'</span><span class=\"p\">),</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#2'</span><span class=\"p\">),</span>\n    <span class=\"n\">LoggingService</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'#3'</span><span class=\"p\">),</span>\n    <span class=\"n\">RemoteConfiguration</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">services</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<div>\n<p>Note</p>\n<p>It\u2019s not a silver bullet. In base case services can be configured by\npassing kwargs to the service <tt>__init__</tt> method.</p>\n</div>\n</div>\n<div id=\"timeout-decorator\">\n<h3><a href=\"#id17\" rel=\"nofollow\">timeout decorator</a></h3>\n<p>Decorator that ensures the execution time limit for decorated function is met.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">timeout</span>\n\n<span class=\"nd\">@timeout</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bad_func</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"async-backoff\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Async backoff</a></h3>\n<p>Abstraction:</p>\n<ul>\n<li><tt>attempt_timeout</tt> is maximum execution time for one execution attempt.</li>\n<li><tt>deadline</tt> is maximum execution time for all execution attempts.</li>\n<li><tt>pause</tt> is time gap between execution attempts.</li>\n<li><tt>exceptions</tt> retrying when this exceptions was raised.</li>\n<li><tt>giveup</tt> (keyword only) is a predicate function which can decide by a given\nexception if we should continue to do retries.</li>\n<li><tt>max_tries</tt> (keyword only) is maximum count of execution attempts (&gt;= 1).</li>\n</ul>\n<p>Decorator that ensures that <tt>attempt_timeout</tt> and <tt>deadline</tt> time\nlimits are met by decorated function.</p>\n<p>In case of exception function will be called again with similar arguments after\n<tt>pause</tt> seconds.</p>\n<p>Position arguments notation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">asyncbackoff</span>\n\n<span class=\"n\">attempt_timeout</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">deadline</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">pause</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"p\">,</span> <span class=\"n\">deadline</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Passing exceptions for handling</span>\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Keyword arguments notation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">asyncbackoff</span>\n\n<span class=\"n\">attempt_timeout</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">deadline</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">pause</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"o\">=</span><span class=\"n\">attempt_timeout</span><span class=\"p\">,</span>\n              <span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"n\">deadline</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"o\">=</span><span class=\"n\">pause</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_save</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Passing exceptions for handling</span>\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n              <span class=\"n\">exceptions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Will be retried no more than 2 times (3 tries total)</span>\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">max_tries</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n              <span class=\"n\">exceptions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">])</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Will be retried only on connection abort (on POSIX systems)</span>\n<span class=\"nd\">@asyncbackoff</span><span class=\"p\">(</span><span class=\"n\">attempt_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pause</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n              <span class=\"n\">exceptions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"ne\">OSError</span><span class=\"p\">],</span>\n              <span class=\"n\">giveup</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">errno</span> <span class=\"o\">!=</span> <span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ECONNABORTED</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">db_fetch</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"asynchronous-file-operations\">\n<h3><a href=\"#id19\" rel=\"nofollow\">asynchronous file operations</a></h3>\n<p>Asynchronous files operations. Based on thread-pool under the hood.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">file_write</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">async_open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'w+'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">afp</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">afp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">afp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">afp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"world\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">afp</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">afp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"working-with-threads\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Working with threads</a></h3>\n<p>Wraps blocking function and runs it in\nthe different thread or thread pool.</p>\n<div id=\"contextvars-support\">\n<h4><a href=\"#id21\" rel=\"nofollow\">contextvars support</a></h4>\n<p>All following decorators and functions support <tt>contextvars</tt> module,\nfrom PyPI for python earlier 3.7 and builtin standard library for python 3.7.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">contextvars</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n\n<span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">ContextVar</span><span class=\"p\">(</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">record_struct</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">Struct</span><span class=\"p\">(</span><span class=\"s2\">\"&gt;I\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">write_user</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/audit.bin\"</span><span class=\"p\">,</span> <span class=\"s1\">'ab'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">record_struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()))</span>\n\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_log</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/audit.bin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">record_struct</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">),</span> <span class=\"sa\">b</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">record_struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">user_id</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">65535</span><span class=\"p\">))</span>\n        <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">write_user</span><span class=\"p\">())</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">futures</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">read_log</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Example output:</p>\n<pre>6621\n33012\n1590\n45008\n56844\n</pre>\n<div>\n<p>Note</p>\n<p><tt>contextvars</tt> has different use cases then <tt>Context</tt> class.\n<tt>contextvars</tt> applicable for passing context variables through the\nexecution stack but created task can not change parent context variables\nbecause <tt>contextvars</tt> creates lightweight copy. <tt>Context</tt> class\nallows it because do not copying context variables.</p>\n</div>\n</div>\n<div id=\"threaded\">\n<h4><a href=\"#id22\" rel=\"nofollow\">@threaded</a></h4>\n<p>Wraps blocking function and runs it in the current thread pool.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">new_event_loop</span><span class=\"p\">,</span> <span class=\"n\">threaded</span>\n\n\n<span class=\"nd\">@threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">blocking_function</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Running in parallel</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n        <span class=\"n\">blocking_function</span><span class=\"p\">(),</span>\n        <span class=\"n\">blocking_function</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>In case function is a generator function <tt>@threaded</tt> decorator will return\n<tt>IteratorWrapper</tt> (see Threaded generator decorator).</p>\n</div>\n<div id=\"threaded-separate\">\n<h4><a href=\"#id23\" rel=\"nofollow\">@threaded_separate</a></h4>\n<p>Wraps blocking function and runs it in a new separate thread.\nHighly recommended for long background tasks:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">blocking_function</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded_separate</span>\n<span class=\"k\">def</span> <span class=\"nf\">long_blocking_function</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Running\"</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Exitting\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">stop_event</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_later</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">stop_event</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Running in parallel</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n        <span class=\"n\">blocking_function</span><span class=\"p\">(),</span>\n        <span class=\"c1\"># New thread will be spawned</span>\n        <span class=\"n\">long_blocking_function</span><span class=\"p\">(</span><span class=\"n\">stop_event</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"threaded-iterator-decorator\">\n<h4><a href=\"#id24\" rel=\"nofollow\">Threaded iterator decorator</a></h4>\n<p>Wraps blocking generator function and runs it in the current thread pool or\non a new separate thread.</p>\n<p>Following example reads itself file, chains hashes of every line with\nhash of previous line and sends hash and content via TCP:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n<span class=\"c1\"># My first blockchain</span>\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded_iterable</span>\n<span class=\"k\">def</span> <span class=\"nf\">blocking_reader</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s2\">\"r+\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"n\">md5_hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n            <span class=\"n\">bytes_line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n            <span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">bytes_line</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"n\">bytes_line</span><span class=\"p\">,</span> <span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">open_connection</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">2233</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">blocking_reader</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">digest</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">)</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Run <tt>netcat</tt> listener in the terminal and run this example</p>\n<pre>$ netcat -v -l -p 2233\nConnection from 127.0.0.1:54734\ndc80feba2326979f8976e387fbbc8121    import asyncio\n78ec3bcb1c441614ede4af5e5b28f638    import hashlib\nb7df4a0a4eac401b2f835447e5fc4139\nf0a94eb3d7ad23d96846c8cb5e327454    import aiomisc\n0c05dde8ac593bad97235e6ae410cb58\ne4d639552b78adea6b7c928c5ebe2b67    # My first blockchain\n5f04aef64f4cacce39170142fe45e53e\nc0019130ba5210b15db378caf7e9f1c9    @aiomisc.threaded_iterable\na720db7e706d10f55431a921cdc1cd4c    def blocking_reader(fname):\n0895d7ca2984ea23228b7d653d0b38f2        with open(fname, \"r+\") as fp:\n0feca8542916af0b130b2d68ade679cf            md5_hash = hashlib.md5()\n4a9ddfea3a0344cadd7a80a8b99ff85c            for line in fp:\nf66fa1df3d60b7ac8991244455dff4ee                bytes_line = line.encode()\naaac23a5aa34e0f5c448a8d7e973f036                md5_hash.update(bytes_line)\n2040bcaab6137b60e51ae6bd1e279546                yield bytes_line, md5_hash.hexdigest().encode()\n7346740fdcde6f07d42ecd2d6841d483\n14dfb2bae89fa0d7f9b6cba2b39122c4\nd69cc5fe0779f0fa800c6ec0e2a7cbbd    async def main():\nead8ef1571e6b4727dcd9096a3ade4da        reader, writer = await asyncio.open_connection(\"127.0.0.1\", 2233)\n275eb71a6b6fb219feaa5dc2391f47b7        async with blocking_reader(__file__) as gen:\n110375ba7e8ab3716fd38a6ae8ec8b83            async for line, digest in gen:\nc26894b38440dbdc31f77765f014f445                writer.write(digest)\n27659596bd880c55e2bc72b331dea948                writer.write(b'\\t')\n8bb9e27b43a9983c9621c6c5139a822e                writer.write(line)\n2659fbe434899fc66153decf126fdb1c                await writer.drain()\n6815f69821da8e1fad1d60ac44ef501e\n5acc73f7a490dcc3b805e75fb2534254\n0f29ad9505d1f5e205b0cbfef572ab0e    if __name__ == '__main__':\n8b04db9d80d8cda79c3b9c4640c08928        loop = aiomisc.new_event_loop()\n9cc5f29f81e15cb262a46cf96b8788ba        loop.run_until_complete(main())\n</pre>\n<p>You should use async context managers in case when your generator works\ninfinity, or you have to await the <tt>.close()</tt> method when you avoid context managers.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"c1\"># Set 2 chunk buffer</span>\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded_iterable</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">urandom_reader</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/dev/urandom'</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Infinity buffer on a separate thread</span>\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded_iterable_separate</span>\n<span class=\"k\">def</span> <span class=\"nf\">blocking_reader</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">fp</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">open_connection</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"mi\">2233</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">blocking_reader</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">):</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Feed white noise</span>\n    <span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">urandom_reader</span><span class=\"p\">()</span>\n    <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">counter</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Stop running generator</span>\n    <span class=\"k\">await</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Using context manager</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">urandom_reader</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n            <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">counter</span> <span class=\"o\">==</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"aiomisc-iteratorwrapper\">\n<h4><a href=\"#id25\" rel=\"nofollow\">aiomisc.IteratorWrapper</a></h4>\n<p>Run iterables on dedicated thread pool:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">concurrent.futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">urandom_reader</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/dev/urandom'</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># create a new thread pool</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">IteratorWrapper</span><span class=\"p\">(</span>\n        <span class=\"n\">urandom_reader</span><span class=\"p\">,</span>\n        <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">pool</span><span class=\"p\">,</span>\n        <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">wrapper</span> <span class=\"k\">as</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"n\">md5_hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n            <span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">counter</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"aiomisc-iteratorwrapperseparate\">\n<h4><a href=\"#id26\" rel=\"nofollow\">aiomisc.IteratorWrapperSeparate</a></h4>\n<p>Run iterables on separate thread:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">concurrent.futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">urandom_reader</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/dev/urandom'</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># create a new thread pool</span>\n    <span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">IteratorWrapperSeparate</span><span class=\"p\">(</span>\n        <span class=\"n\">urandom_reader</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">wrapper</span> <span class=\"k\">as</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"n\">md5_hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n            <span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"n\">counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">counter</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">md5_hash</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">())</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"aiomisc-threadpoolexecutor\">\n<h4><a href=\"#id27\" rel=\"nofollow\">aiomisc.ThreadPoolExecutor</a></h4>\n<p>This is a fast thread pool implementation.</p>\n<p>Setting as a default thread pool:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">thread_pool</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">set_default_executor</span><span class=\"p\">(</span><span class=\"n\">thread_pool</span><span class=\"p\">)</span>\n</pre>\n<div>\n<p>Note</p>\n<p><tt>entrypoint</tt> context manager will set it by default.</p>\n<p><tt>entrypoint</tt>\u2019s argument <tt>pool_size</tt> limits thread pool size.</p>\n</div>\n</div>\n<div id=\"aiomisc-sync-wait-coroutine\">\n<h4><a href=\"#id28\" rel=\"nofollow\">aiomisc.sync_wait_coroutine</a></h4>\n<p>Functions running in thread can\u2019t call and wait result from coroutines\nby default. This function is helper for send coroutine to event loop\nand wait it in current thread.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">coro</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Coroutine started\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Coroutine done\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@aiomisc</span><span class=\"o\">.</span><span class=\"n\">threaded</span>\n<span class=\"k\">def</span> <span class=\"nf\">in_thread</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Thread started\"</span><span class=\"p\">)</span>\n    <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">sync_wait_coroutine</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">coro</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Thread finished\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">in_thread</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"aiomisc-processpoolexecutor\">\n<h4><a href=\"#id29\" rel=\"nofollow\">aiomisc.ProcessPoolExecutor</a></h4>\n<p>This is a simple process pool executor implementation.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">process_inner</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">())</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">process_pool</span> <span class=\"o\">=</span> <span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n            <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">process_pool</span><span class=\"p\">,</span> <span class=\"n\">process_inner</span><span class=\"p\">),</span>\n            <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">process_pool</span><span class=\"p\">,</span> <span class=\"n\">process_inner</span><span class=\"p\">),</span>\n            <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">process_pool</span><span class=\"p\">,</span> <span class=\"n\">process_inner</span><span class=\"p\">),</span>\n            <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span><span class=\"n\">process_pool</span><span class=\"p\">,</span> <span class=\"n\">process_inner</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n</div>\n<div id=\"select\">\n<h3><a href=\"#id30\" rel=\"nofollow\">Select</a></h3>\n<p>In some cases you should wait only one of multiple tasks. <tt>select</tt>\nwaits first passed awaitable object and returns list of results.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span><span class=\"p\">()</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_soon</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">)</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">(),</span> <span class=\"n\">future</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">())</span>       <span class=\"c1\"># True</span>\n\n    <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span><span class=\"p\">()</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_soon</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">())</span>\n    <span class=\"n\">future_result</span><span class=\"p\">,</span> <span class=\"n\">event_result</span> <span class=\"o\">=</span> <span class=\"n\">results</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>             <span class=\"c1\"># True</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">result_idx</span><span class=\"p\">)</span>           <span class=\"c1\"># 0</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event_result</span><span class=\"p\">,</span> <span class=\"n\">future_result</span><span class=\"p\">)</span>  <span class=\"c1\"># None, True</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<div>\n<p>Warning</p>\n<p>When you don\u2019t want to cancel pending tasks pass <tt>cancel=False</tt> argument.\nIn this case you have to handle task completion manually or get warnings.</p>\n</div>\n</div>\n<div id=\"cancel-tasks\">\n<h3><a href=\"#id31\" rel=\"nofollow\">cancel_tasks</a></h3>\n<p>All passed tasks will be cancelled and task will be returned:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">cancel_tasks</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"n\">pending</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">([</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Done\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">done</span><span class=\"p\">),</span> <span class=\"s2\">\"tasks\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Pending\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pending</span><span class=\"p\">),</span> <span class=\"s2\">\"tasks\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">cancel_tasks</span><span class=\"p\">(</span><span class=\"n\">pending</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"awaitable\">\n<h3><a href=\"#id32\" rel=\"nofollow\">awaitable</a></h3>\n<p>Decorator wraps function and returns a function which returns awaitable object.\nIn case than a function returns a future, the original future will be returned.\nIn case then the function returns a coroutine, the original coroutine will\nbe returned. In case than function returns non-awaitable object, it\u2019s will\nbe wrapped to a new coroutine which just returns this object. It\u2019s useful\nwhen you don\u2019t want to check function result before\nuse it in <tt>await</tt> expression.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">do_callback</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">awaitable_func</span> <span class=\"o\">=</span> <span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">awaitable_func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">do_callback</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">do_callback</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"signal\">\n<h3><a href=\"#id33\" rel=\"nofollow\">Signal</a></h3>\n<p>You can register async callback functions for specific events of an entrypoint.</p>\n<div id=\"pre-start\">\n<h4><a href=\"#id34\" rel=\"nofollow\">pre_start</a></h4>\n<p><tt>pre_start</tt> signal occurs on entrypoint start up before any service have started.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">receiver</span>\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">entrypoint</span><span class=\"o\">.</span><span class=\"n\">PRE_START</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">prepare_database</span><span class=\"p\">(</span><span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">services</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"post-stop\">\n<h4><a href=\"#id35\" rel=\"nofollow\">post_stop</a></h4>\n<p><tt>post_stop</tt> signal occurs on entrypoint shutdown after all services have been\nstopped.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">receiver</span>\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">entrypoint</span><span class=\"o\">.</span><span class=\"n\">POST_STOP</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">cleanup</span><span class=\"p\">(</span><span class=\"n\">entrypoint</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">entrypoint</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">loop</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"plugins\">\n<h3><a href=\"#id36\" rel=\"nofollow\">Plugins</a></h3>\n<p>aiomisc can be extended with plugins as separate packages. Plugins can\nenhance aiomisc by mean of <a href=\"#signal\" rel=\"nofollow\">signals</a>.</p>\n<p>In order to make your plugin discoverable by aiomisc you should add\n<tt>aiomisc.plugins</tt> entry to entry to <tt>entry_points</tt> argument of <tt>setup</tt>\ncall in <tt>setup.py</tt> of a plugin.</p>\n<pre><span class=\"c1\"># setup.py</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"aiomisc.plugins\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"myplugin = aiomisc_myplugin.plugin\"</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Modules which provided in <tt>entry_points</tt> should have <tt>setup</tt> function.\nThis functions would be called by aiomisc and must contain signals connecting.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">entrypoint</span><span class=\"p\">,</span> <span class=\"n\">services</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello from aiomisc plugin'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">entrypoint</span>\n\n    <span class=\"n\">entrypoint</span><span class=\"o\">.</span><span class=\"n\">PRE_START</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"bind-socket\">\n<h3><a href=\"#id37\" rel=\"nofollow\">Bind socket</a></h3>\n<p>Bind socket and set <tt>setblocking(False)</tt> for just created socket.\nThis detects <tt>address</tt> format and select socket family automatically.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">bind_socket</span>\n\n<span class=\"c1\"># IPv4 socket</span>\n<span class=\"n\">sock</span> <span class=\"o\">=</span> <span class=\"n\">bind_socket</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># IPv6 socket (on Linux IPv4 socket will be bind too)</span>\n<span class=\"n\">sock</span> <span class=\"o\">=</span> <span class=\"n\">bind_socket</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s2\">\"::1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"periodic-callback\">\n<h3><a href=\"#id38\" rel=\"nofollow\">Periodic callback</a></h3>\n<p>Runs coroutine function periodically with an optional delay of the first execution.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc</span> <span class=\"kn\">import</span> <span class=\"n\">new_event_loop</span><span class=\"p\">,</span> <span class=\"n\">PeriodicCallback</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">periodic_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n\n    <span class=\"n\">periodic</span> <span class=\"o\">=</span> <span class=\"n\">PeriodicCallback</span><span class=\"p\">(</span><span class=\"n\">periodic_function</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Wait 10 seconds and call it each second after that</span>\n    <span class=\"n\">periodic</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"logging-configuration\">\n<h3><a href=\"#id39\" rel=\"nofollow\">Logging configuration</a></h3>\n<div id=\"color\">\n<h4><a href=\"#id40\" rel=\"nofollow\">Color</a></h4>\n<p>Setting up colorized logs:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.log</span> <span class=\"kn\">import</span> <span class=\"n\">basic_config</span>\n\n\n<span class=\"c1\"># Configure logging</span>\n<span class=\"n\">basic_config</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"n\">buffered</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">'color'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"json\">\n<h4><a href=\"#id41\" rel=\"nofollow\">JSON</a></h4>\n<p>Setting up json logs:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.log</span> <span class=\"kn\">import</span> <span class=\"n\">basic_config</span>\n\n\n<span class=\"c1\"># Configure logging</span>\n<span class=\"n\">basic_config</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"n\">buffered</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"buffered-log-handler\">\n<h4><a href=\"#id42\" rel=\"nofollow\">Buffered log handler</a></h4>\n<p>Parameter <cite>buffered=True</cite> enables memory buffer that flushes logs in a thread.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.log</span> <span class=\"kn\">import</span> <span class=\"n\">basic_config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.periodic</span> <span class=\"kn\">import</span> <span class=\"n\">PeriodicCallback</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiomisc.utils</span> <span class=\"kn\">import</span> <span class=\"n\">new_event_loop</span>\n\n\n<span class=\"c1\"># Configure logging globally</span>\n<span class=\"n\">basic_config</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"n\">buffered</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">write_log</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Hello </span><span class=\"si\">%f</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Configure</span>\n    <span class=\"n\">basic_config</span><span class=\"p\">(</span>\n        <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span>\n        <span class=\"n\">buffered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">'color'</span><span class=\"p\">,</span>\n        <span class=\"n\">flush_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">periodic</span> <span class=\"o\">=</span> <span class=\"n\">PeriodicCallback</span><span class=\"p\">(</span><span class=\"n\">write_log</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"n\">periodic</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<div>\n<p>Note</p>\n<p><tt>entrypoint</tt> accepts <tt>log_format</tt> parameter for configure it.</p>\n<p>List of all supported log formats is available from\n<tt>aiomisc.log.LogFormat.choices()</tt></p>\n</div>\n</div>\n</div>\n<div id=\"pytest-plugin\">\n<h3><a href=\"#id43\" rel=\"nofollow\">Pytest plugin</a></h3>\n<p>This package contains plugin for pytest.</p>\n<div id=\"basic-usage\">\n<h4><a href=\"#id44\" rel=\"nofollow\">Basic usage</a></h4>\n<p>Simple usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_sample</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">crete_future</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_soon</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">f</span>\n</pre>\n<p>asynchronous fuxture example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_fixture</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Requires python 3.6+</span>\n    <span class=\"k\">yield</span>\n</pre>\n</div>\n<div id=\"pytest-markers\">\n<h4><a href=\"#id45\" rel=\"nofollow\">pytest markers</a></h4>\n<p>Package contains some useful markers for pytest:</p>\n<ul>\n<li><tt>catch_loop_exceptions</tt> - uncaught event loop exceptions will failling test.</li>\n<li><tt>forbid_get_event_loop</tt> - forbids call <tt>asyncio.get_event_loop</tt>\nduring test case.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n\n<span class=\"c1\"># Test will be failed</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">forbid_get_event_loop</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_with_get_loop</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">switch_context</span><span class=\"p\">():</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n        <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_future</span><span class=\"p\">()</span>\n        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_soon</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">future</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">Failed</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">switch_context</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Test will be failed</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">catch_loop_exceptions</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_with_errors</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">fail</span><span class=\"p\">():</span>\n        <span class=\"c1\"># switch context</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">()</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">fail</span><span class=\"p\">())</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span>\n</pre>\n</div>\n<div id=\"passing-default-context\">\n<h4><a href=\"#id46\" rel=\"nofollow\">Passing default context</a></h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">default_context</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'foo'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"testing-services\">\n<h4><a href=\"#id47\" rel=\"nofollow\">Testing services</a></h4>\n<p>Redefine <tt>services</tt> fixture in your test module:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">services</span><span class=\"p\">(</span><span class=\"n\">aiomisc_unused_port</span><span class=\"p\">,</span> <span class=\"n\">handlers</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"n\">RPCServer</span><span class=\"p\">(</span>\n            <span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">},</span>\n            <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">aiomisc_unused_port</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"event-loop-policy-overriding\">\n<h4><a href=\"#id48\" rel=\"nofollow\">Event loop policy overriding</a></h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">uvloop</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tokio</span>\n\n<span class=\"n\">policy_ids</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'uvloop'</span><span class=\"p\">,</span> <span class=\"s1\">'asyncio'</span><span class=\"p\">,</span> <span class=\"s1\">'tokio'</span><span class=\"p\">)</span>\n<span class=\"n\">policies</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">uvloop</span><span class=\"o\">.</span><span class=\"n\">EventLoopPolicy</span><span class=\"p\">(),</span>\n            <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">DefaultEventLoopPolicy</span><span class=\"p\">(),</span>\n            <span class=\"n\">tokio</span><span class=\"o\">.</span><span class=\"n\">EventLoopPolicy</span><span class=\"p\">())</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">policies</span><span class=\"p\">,</span> <span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">policy_ids</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">event_loop_policy</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">param</span>\n</pre>\n</div>\n<div id=\"thread-pool-overriding\">\n<h4><a href=\"#id49\" rel=\"nofollow\">Thread pool overriding</a></h4>\n<pre><span class=\"n\">thread_pool_ids</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'aiomisc pool'</span><span class=\"p\">,</span> <span class=\"s1\">'default pool'</span><span class=\"p\">)</span>\n<span class=\"n\">thread_pool_implementation</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">,</span>\n                              <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">thread_pool_implementation</span><span class=\"p\">,</span> <span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">thread_pool_ids</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">thread_pool_executor</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">param</span>\n</pre>\n</div>\n<div id=\"entrypoint-arguments\">\n<h4><a href=\"#id50\" rel=\"nofollow\">entrypoint arguments</a></h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">entrypoint_kwargs</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">log_config</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"aiohttp-test-client\">\n<h4><a href=\"#id51\" rel=\"nofollow\">aiohttp test client</a></h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.services.rest</span> <span class=\"kn\">import</span> <span class=\"n\">REST</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">rest_port</span><span class=\"p\">(</span><span class=\"n\">aiomisc_unused_port_factory</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">aiomisc_unused_port_factory</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">rest_service</span><span class=\"p\">(</span><span class=\"n\">rest_port</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">REST</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">rest_port</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">services</span><span class=\"p\">(</span><span class=\"n\">rest_service</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">rest_service</span><span class=\"p\">]</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">api_client</span><span class=\"p\">(</span><span class=\"n\">api_service</span><span class=\"p\">):</span>\n    <span class=\"n\">test_srv</span> <span class=\"o\">=</span> <span class=\"n\">TestServer</span><span class=\"p\">(</span>\n        <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">rest_service</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">,</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">TestClient</span><span class=\"p\">(</span><span class=\"n\">test_srv</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"tcpproxy\">\n<h4><a href=\"#id52\" rel=\"nofollow\">TCPProxy</a></h4>\n<p>Simple TCP proxy for emulate network problems.</p>\n<p>Awailable as fixture <cite>tcp_proxy</cite></p>\n<p>Examples:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiomisc</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">aiomisc</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">TCPServer</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle_client</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span><span class=\"p\">,</span>\n            <span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">StreamWriter</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">65534</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"n\">chunk</span><span class=\"p\">:</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n            <span class=\"n\">chunk</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">65534</span><span class=\"p\">)</span>\n\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">server_port</span><span class=\"p\">(</span><span class=\"n\">aiomisc_unused_port_factory</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">aiomisc_unused_port_factory</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">services</span><span class=\"p\">(</span><span class=\"n\">server_port</span><span class=\"p\">,</span> <span class=\"n\">localhost</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">EchoServer</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">server_port</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"n\">localhost</span><span class=\"p\">)]</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">proxy</span><span class=\"p\">(</span><span class=\"n\">tcp_proxy</span><span class=\"p\">,</span> <span class=\"n\">localhost</span><span class=\"p\">,</span> <span class=\"n\">server_port</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">tcp_proxy</span><span class=\"p\">(</span><span class=\"n\">localhost</span><span class=\"p\">,</span> <span class=\"n\">server_port</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">proxy</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">proxy</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_proxy_client_close</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"p\">):</span>\n    <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">create_client</span><span class=\"p\">()</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello world\"</span>\n\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"n\">payload</span>\n\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">at_eof</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">disconnect_all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">at_eof</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_proxy_client_slow</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"p\">):</span>\n    <span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"c1\"># Proxy will delay each data chunk</span>\n    <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">set_delay</span><span class=\"p\">(</span><span class=\"n\">delay</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">create_client</span><span class=\"p\">()</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Hello world\"</span>\n\n    <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span>\n\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">),</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n    <span class=\"n\">delta</span> <span class=\"o\">+=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">delta</span> <span class=\"o\">&gt;=</span> <span class=\"n\">delay</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_proxy_client_with_processor</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"p\">):</span>\n    <span class=\"n\">processed_request</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"Never say hello\"</span>\n\n    <span class=\"c1\"># Patching protocol functions</span>\n    <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">set_content_processors</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Process data from client to server</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">processed_request</span><span class=\"p\">,</span>\n\n        <span class=\"c1\"># Process data from server to client</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">chunk</span><span class=\"p\">:</span> <span class=\"n\">chunk</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">create_client</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'nevermind'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"n\">processed_request</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"versioning\">\n<h2><a href=\"#id53\" rel=\"nofollow\">Versioning</a></h2>\n<p>This software follows <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a></p>\n</div>\n<div id=\"how-to-develop\">\n<h2><a href=\"#id54\" rel=\"nofollow\">How to develop?</a></h2>\n<p>Should be installed:</p>\n<ul>\n<li><cite>virtualenv</cite></li>\n<li>GNU Make as <cite>make</cite></li>\n<li>Python 3.5+ as <cite>python3</cite></li>\n</ul>\n<p>For setting up developer environment just type</p>\n<blockquote>\n<pre>make develop\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 7191252, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4bcda0dc0938223775b8acbd2f0f965f", "sha256": "d78829ad0a721e55e5e975f9cbdd0e14aaff2a9c1ac37626c11535cd28788e55"}, "downloads": -1, "filename": "aiomisc-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4bcda0dc0938223775b8acbd2f0f965f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10738, "upload_time": "2018-04-13T14:32:38", "upload_time_iso_8601": "2018-04-13T14:32:38.070999Z", "url": "https://files.pythonhosted.org/packages/93/f9/3e9ff2e97604ed2165b803aecc2624b9c81664aa46bfd3aec3a66ddc0ce5/aiomisc-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f264cdbf8ffb835c8a918c8719e52689", "sha256": "75f95ea124483aecf55be5fee5c49c317d648ef4020b1b419894107ac40bcef5"}, "downloads": -1, "filename": "aiomisc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f264cdbf8ffb835c8a918c8719e52689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5304, "upload_time": "2018-04-13T14:32:39", "upload_time_iso_8601": "2018-04-13T14:32:39.375363Z", "url": "https://files.pythonhosted.org/packages/bd/2c/58ea97c62babf60d49e913c113b5c7f0af9b8bbf38faa5fb86d55f39dfd3/aiomisc-0.1.0.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "df0616a327c79521dad761a113ff6fa6", "sha256": "9275a0cafd34e9fef42b87dc5f934644c5fd35267f39b3b6f8fe8e934aa38591"}, "downloads": -1, "filename": "aiomisc-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df0616a327c79521dad761a113ff6fa6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20141, "upload_time": "2018-09-13T15:33:53", "upload_time_iso_8601": "2018-09-13T15:33:53.714584Z", "url": "https://files.pythonhosted.org/packages/0d/50/078f95ba2702b2d962e6acf4541751ae31d0aa1a77586c6e0a9b3a083134/aiomisc-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd6a418725684cddcc6d26d526d29f8f", "sha256": "0934aee91950113e9193b71200b807bcf9a9f869c370b290683cd8fc427a7589"}, "downloads": -1, "filename": "aiomisc-0.10.0.tar.gz", "has_sig": false, "md5_digest": "fd6a418725684cddcc6d26d526d29f8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14172, "upload_time": "2018-09-13T15:33:54", "upload_time_iso_8601": "2018-09-13T15:33:54.905772Z", "url": "https://files.pythonhosted.org/packages/65/dd/84a66e3acf2ca589a953ad3cb6f69f10d4786c12ddf227c4b691e8d51a94/aiomisc-0.10.0.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "44ef1d7e2fb5d5a6b9efad9fa6846e49", "sha256": "7946907c0a449c08a9064ba3313bc45d151845e1c11eb7c2d4a92bc0dbdb419c"}, "downloads": -1, "filename": "aiomisc-0.10.4-py3-none-any.whl", "has_sig": false, "md5_digest": "44ef1d7e2fb5d5a6b9efad9fa6846e49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20293, "upload_time": "2018-10-11T10:11:36", "upload_time_iso_8601": "2018-10-11T10:11:36.894889Z", "url": "https://files.pythonhosted.org/packages/a0/73/2bac72f5df369e02fb9c2443b300277645213d018bdc7404c5d38809d767/aiomisc-0.10.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "63d3e5b36b3390024feacd6e4edf3549", "sha256": "f098d5fcdd588c4711e44595a1bcba0e1bd6ce248995f4ac66b0e3c4f2598919"}, "downloads": -1, "filename": "aiomisc-0.10.4.tar.gz", "has_sig": false, "md5_digest": "63d3e5b36b3390024feacd6e4edf3549", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14200, "upload_time": "2018-10-11T10:11:38", "upload_time_iso_8601": "2018-10-11T10:11:38.638472Z", "url": "https://files.pythonhosted.org/packages/84/4f/f02d592f541a03c2ddb83f885fc6c2abfe708028c8d522dbf42ce5382418/aiomisc-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "f21a446a6adf258fe3bf2c546825033d", "sha256": "740f67b92b7f276d501cfddf760066fa1cc9edbea2c9d0135bfd1ada1b3b9182"}, "downloads": -1, "filename": "aiomisc-0.10.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f21a446a6adf258fe3bf2c546825033d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20384, "upload_time": "2018-10-11T22:44:21", "upload_time_iso_8601": "2018-10-11T22:44:21.754788Z", "url": "https://files.pythonhosted.org/packages/c8/6f/28af11f40284b5747ff9d9ceca4b8f431372a8abca64bfab0ce433ca859b/aiomisc-0.10.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3538d9fdaea927eff8ce8f96b8c6f30", "sha256": "80828b8004f525fd8a9967ee2f366fae0b0a34f22485d0ec57170d20b823e60e"}, "downloads": -1, "filename": "aiomisc-0.10.5.tar.gz", "has_sig": false, "md5_digest": "e3538d9fdaea927eff8ce8f96b8c6f30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14366, "upload_time": "2018-10-11T22:44:23", "upload_time_iso_8601": "2018-10-11T22:44:23.375454Z", "url": "https://files.pythonhosted.org/packages/b8/65/298325ce477a557ef9446f69f5c41434ddcd3530dd17e32029305b8519c3/aiomisc-0.10.5.tar.gz", "yanked": false}], "0.10.6": [{"comment_text": "", "digests": {"md5": "ca2cf760c5fa18bc25227e791b55a785", "sha256": "90d85bad05bf5b2da332596ef9b9f14ccb9be5299f166fcddc5ba475833392a0"}, "downloads": -1, "filename": "aiomisc-0.10.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ca2cf760c5fa18bc25227e791b55a785", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20375, "upload_time": "2018-10-11T22:49:34", "upload_time_iso_8601": "2018-10-11T22:49:34.774955Z", "url": "https://files.pythonhosted.org/packages/77/69/4c5b0244f0317c5c28d5b81b968c37c770b790c30270fa5780b1998612c1/aiomisc-0.10.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c7a62545e94b9e983e5060225e0f617", "sha256": "e1f0bc69a1e920f189cc5dfe7dca342f7794504d4357e84ac2301a750cad55ed"}, "downloads": -1, "filename": "aiomisc-0.10.6.tar.gz", "has_sig": false, "md5_digest": "4c7a62545e94b9e983e5060225e0f617", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14356, "upload_time": "2018-10-11T22:49:36", "upload_time_iso_8601": "2018-10-11T22:49:36.282802Z", "url": "https://files.pythonhosted.org/packages/bb/28/702b9a4c95904c9a5d30d08d812a8b601569dc2c8288cae82e39811d0bd8/aiomisc-0.10.6.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "1145c51557872190f17d867a8e3b7d9f", "sha256": "2dd581fe9e71ef4afef5cbea0b58a4419139ebdcceefe2c62a941b00fc6ae93b"}, "downloads": -1, "filename": "aiomisc-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1145c51557872190f17d867a8e3b7d9f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21778, "upload_time": "2018-10-16T08:43:30", "upload_time_iso_8601": "2018-10-16T08:43:30.395452Z", "url": "https://files.pythonhosted.org/packages/23/f1/22e89464f53dd4887736f2091369b262e6c9d3f384545b0b0adbecd47cc8/aiomisc-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c446ace2c5dd3b97d3c5e94da03d9ae0", "sha256": "8280f5918b16a4f07a8e0d4b5d37f62c654b24cbe139b780a10a09e41f22cbe5"}, "downloads": -1, "filename": "aiomisc-0.11.0.tar.gz", "has_sig": false, "md5_digest": "c446ace2c5dd3b97d3c5e94da03d9ae0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15196, "upload_time": "2018-10-16T08:43:31", "upload_time_iso_8601": "2018-10-16T08:43:31.955037Z", "url": "https://files.pythonhosted.org/packages/63/d5/f2ed2d7479a8ae7c8b50571ff6cf8d3ca6b4b5acf072d3cb9bba494d97da/aiomisc-0.11.0.tar.gz", "yanked": false}], "0.11.11": [{"comment_text": "", "digests": {"md5": "678b75b4bd08dba82fa3a172e5b27327", "sha256": "c5cd7e9e6a297c644281d088291069190cbc60489c139fe8c448b1d34ad3892a"}, "downloads": -1, "filename": "aiomisc-0.11.11-py3-none-any.whl", "has_sig": false, "md5_digest": "678b75b4bd08dba82fa3a172e5b27327", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21971, "upload_time": "2018-10-26T08:05:28", "upload_time_iso_8601": "2018-10-26T08:05:28.314745Z", "url": "https://files.pythonhosted.org/packages/47/51/36497644c050c948c0bb0840eef2b8cbb6435b22dce58ca323dc1bc3faf2/aiomisc-0.11.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5372d8b77b5aab119e1962a73e5872f7", "sha256": "8b92f78a838fc7d56807451bfd6e04af5c7f2c95cf44620bc0628bd3abeaf0c4"}, "downloads": -1, "filename": "aiomisc-0.11.11.tar.gz", "has_sig": false, "md5_digest": "5372d8b77b5aab119e1962a73e5872f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15466, "upload_time": "2018-10-26T08:05:29", "upload_time_iso_8601": "2018-10-26T08:05:29.694325Z", "url": "https://files.pythonhosted.org/packages/1e/c7/c686006c446b2a75a8070d1c712655d4784742bf69af715c6744f276685d/aiomisc-0.11.11.tar.gz", "yanked": false}], "0.11.4": [{"comment_text": "", "digests": {"md5": "ad83f2f9b6b179353b0072bee086d83b", "sha256": "c992075de80cb8fa5994c96933dccce5d81d1d8ca741eb5ac781fc9c451ff65e"}, "downloads": -1, "filename": "aiomisc-0.11.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ad83f2f9b6b179353b0072bee086d83b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21824, "upload_time": "2018-10-16T10:54:04", "upload_time_iso_8601": "2018-10-16T10:54:04.297035Z", "url": "https://files.pythonhosted.org/packages/a4/db/131c0618ca6a42467cb34efeb727d2b8b5e6ede6fe4ae928eec003a7f67b/aiomisc-0.11.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f491788a58250a20addd2ff42cb03bbb", "sha256": "ee1a171d7702c336241ab7718b0b54516f1cd0cbc2c845cbf19da8324e8bf6b6"}, "downloads": -1, "filename": "aiomisc-0.11.4.tar.gz", "has_sig": false, "md5_digest": "f491788a58250a20addd2ff42cb03bbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15316, "upload_time": "2018-10-16T10:54:05", "upload_time_iso_8601": "2018-10-16T10:54:05.939360Z", "url": "https://files.pythonhosted.org/packages/8f/7d/c8c14295bceba7179c1b7905efa2b713fd6e5ab6e2e2990b665b93dda038/aiomisc-0.11.4.tar.gz", "yanked": false}], "0.11.7": [{"comment_text": "", "digests": {"md5": "18518f85699f7c5178d4204bc08b32d5", "sha256": "ecafca8e50264ebce2618ad695e6500d2d7276c22e0263a803356409f1bc312c"}, "downloads": -1, "filename": "aiomisc-0.11.7-py3-none-any.whl", "has_sig": false, "md5_digest": "18518f85699f7c5178d4204bc08b32d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21884, "upload_time": "2018-10-17T12:42:42", "upload_time_iso_8601": "2018-10-17T12:42:42.671773Z", "url": "https://files.pythonhosted.org/packages/66/eb/c5b89d8d8a8bdec00a633e230557b6284b809ca612ee92fa9f7f7911e123/aiomisc-0.11.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba34e4af59f4e0db07d6139ea6ecadbd", "sha256": "92f0fe2f3a3ab06a0b7cff956cf57c2b4db3cbd646bf31367d9cfe250c6400ba"}, "downloads": -1, "filename": "aiomisc-0.11.7.tar.gz", "has_sig": false, "md5_digest": "ba34e4af59f4e0db07d6139ea6ecadbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15373, "upload_time": "2018-10-17T12:42:44", "upload_time_iso_8601": "2018-10-17T12:42:44.123684Z", "url": "https://files.pythonhosted.org/packages/a1/c5/45637f4291c4d4a8a89e4bdc883c3cbe77f339ee662725c3fe4336e9b0ee/aiomisc-0.11.7.tar.gz", "yanked": false}], "0.11.9": [{"comment_text": "", "digests": {"md5": "5c5c224f2c60b5616ed4e9b63837ab52", "sha256": "811f3de1c7bb2a779d06e92396ac54b0dbed656f7009e8980e4430b81b7f149e"}, "downloads": -1, "filename": "aiomisc-0.11.9-py3-none-any.whl", "has_sig": false, "md5_digest": "5c5c224f2c60b5616ed4e9b63837ab52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21939, "upload_time": "2018-10-17T17:57:41", "upload_time_iso_8601": "2018-10-17T17:57:41.947556Z", "url": "https://files.pythonhosted.org/packages/df/1a/830fb1709977caa198b4f36b618847eefa51d9653c0af48cd4a3e7fbaf4b/aiomisc-0.11.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c7a34e8e4442b95e785ada8c960ce76", "sha256": "a19d79b20d43cfce8d1f915e78f09dc5948840ddeb5026f2cff027264c19094b"}, "downloads": -1, "filename": "aiomisc-0.11.9.tar.gz", "has_sig": false, "md5_digest": "2c7a34e8e4442b95e785ada8c960ce76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15401, "upload_time": "2018-10-17T17:57:43", "upload_time_iso_8601": "2018-10-17T17:57:43.529362Z", "url": "https://files.pythonhosted.org/packages/cd/4f/4d97850b35578a75cbf00d36aee499a09a115b6c8364727a22155f4a38da/aiomisc-0.11.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cbee53accec62a1d182a0977e60f8f37", "sha256": "e8496dc51455ef1d073fa2e35df760c1c4978a2fce79ef93333f2a94d816be9b"}, "downloads": -1, "filename": "aiomisc-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cbee53accec62a1d182a0977e60f8f37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11941, "upload_time": "2018-04-13T16:00:10", "upload_time_iso_8601": "2018-04-13T16:00:10.924635Z", "url": "https://files.pythonhosted.org/packages/62/3e/dc695adc0b5cb7e03dce3529ba4d7ad23a1046bdd6322eb6258130dd4ab5/aiomisc-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00bf9cb685605b6b4382da84d54d6f28", "sha256": "6aa529fb968d92d097ec755ddca046256132fc06d26cc93e7fd7ee6eeea0aa96"}, "downloads": -1, "filename": "aiomisc-0.2.0.tar.gz", "has_sig": false, "md5_digest": "00bf9cb685605b6b4382da84d54d6f28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6881, "upload_time": "2018-04-13T16:00:11", "upload_time_iso_8601": "2018-04-13T16:00:11.838496Z", "url": "https://files.pythonhosted.org/packages/e5/96/f7010cb9720785a7cdb593ed82c9fd61fe91f4835924bfeee218a6c3c9e2/aiomisc-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "81aa00c8052b027a5c15023960e1068a", "sha256": "6b3556b4896360b0df4a8563d26f687342ef8da5f7c2be83fb1e823acd4217ce"}, "downloads": -1, "filename": "aiomisc-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81aa00c8052b027a5c15023960e1068a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11940, "upload_time": "2018-04-13T16:15:09", "upload_time_iso_8601": "2018-04-13T16:15:09.608398Z", "url": "https://files.pythonhosted.org/packages/b0/2e/e59fc794746d076cc9f4e5ac6e5b748e42b15deb0d3442dac3af5772e185/aiomisc-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88d2bb3d16fbd6fa0679126a39520753", "sha256": "cfc3c01376217f4b606b256b59424dfbb641cf585f56fb22eb586bb69ba859bd"}, "downloads": -1, "filename": "aiomisc-0.2.1.tar.gz", "has_sig": false, "md5_digest": "88d2bb3d16fbd6fa0679126a39520753", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6874, "upload_time": "2018-04-13T16:15:10", "upload_time_iso_8601": "2018-04-13T16:15:10.741131Z", "url": "https://files.pythonhosted.org/packages/bb/58/a78bbafb8e93b7361604d91d306d7413d7a562f68d352f08358de46fcb31/aiomisc-0.2.1.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "e743b6b442ac62917fc65a5efe08efdb", "sha256": "f409a403c704c8a73776d6b841fbc574bea640424fdaf955aaadb210f2893865"}, "downloads": -1, "filename": "aiomisc-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e743b6b442ac62917fc65a5efe08efdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10896, "upload_time": "2018-04-17T22:03:11", "upload_time_iso_8601": "2018-04-17T22:03:11.431019Z", "url": "https://files.pythonhosted.org/packages/98/7d/3ae06973ecf8a0c5fab73db57117bcf6c317d5bf9ac7221c60304b799db1/aiomisc-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e88b169c328ce86841143327123b2b8", "sha256": "a987dd0f55db70135926e0c7dc047dc96e11c6a9b4105cb5fd9cac8f3e1f3fd5"}, "downloads": -1, "filename": "aiomisc-0.2.6.tar.gz", "has_sig": false, "md5_digest": "0e88b169c328ce86841143327123b2b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5860, "upload_time": "2018-04-17T22:03:12", "upload_time_iso_8601": "2018-04-17T22:03:12.724227Z", "url": "https://files.pythonhosted.org/packages/18/b0/cc38055939276c58c56994730488a32d26c80010bafca695cd53526f3963/aiomisc-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "11eb7b15443656f5c583056e06046cde", "sha256": "620b89b7b9bf1b2793818eba8f790ead86b740c6e629c8637f2aa5335810bfbe"}, "downloads": -1, "filename": "aiomisc-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "11eb7b15443656f5c583056e06046cde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10901, "upload_time": "2018-05-08T14:20:18", "upload_time_iso_8601": "2018-05-08T14:20:18.625254Z", "url": "https://files.pythonhosted.org/packages/4a/ca/03b5584f12d8f76432e3a882c8a73ac3b2408f4599121c701840b5241b93/aiomisc-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "074c866e509d7a99f793c20b29647d38", "sha256": "dfb5ed418cf8d040b574b63d5a30ebd877f56d0b77d367465661a6e2545683ae"}, "downloads": -1, "filename": "aiomisc-0.3.0.tar.gz", "has_sig": false, "md5_digest": "074c866e509d7a99f793c20b29647d38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5866, "upload_time": "2018-05-08T14:20:19", "upload_time_iso_8601": "2018-05-08T14:20:19.761837Z", "url": "https://files.pythonhosted.org/packages/5f/90/f9d4e06355b149c2ec834f8576660f56545275f42a37a159ee9dc920e0a7/aiomisc-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "41059ac7018414f69286c3d29ffd6c47", "sha256": "b5d8a1c6df1636c62fe65cfbf46b951a04bd0523aac39ef306c2e28a4cd3082c"}, "downloads": -1, "filename": "aiomisc-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41059ac7018414f69286c3d29ffd6c47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10923, "upload_time": "2018-05-11T11:51:38", "upload_time_iso_8601": "2018-05-11T11:51:38.706244Z", "url": "https://files.pythonhosted.org/packages/6a/c5/552ef52ef56ec73e6f80fedeb543d7ab17f9d1a4f35d00174eda18b40eb4/aiomisc-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "122ec0e69dc150093f97e40b6b66c645", "sha256": "1dcb925eca4282b0acf87a24174f1b7925092f79aa3dee2383bb54551d3e8d6b"}, "downloads": -1, "filename": "aiomisc-0.4.0.tar.gz", "has_sig": false, "md5_digest": "122ec0e69dc150093f97e40b6b66c645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5879, "upload_time": "2018-05-11T11:51:39", "upload_time_iso_8601": "2018-05-11T11:51:39.931356Z", "url": "https://files.pythonhosted.org/packages/5c/c0/9f13b62b9e67d1485f66ec751fda70be3ecd7170f6d021a8c53c8475a970/aiomisc-0.4.0.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "4b25e41f55717db0b3271605cb692546", "sha256": "04ea64f2bf9f56492f93b3b09d4c65ad0d8db1c452246a9cab092a4569e24955"}, "downloads": -1, "filename": "aiomisc-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4b25e41f55717db0b3271605cb692546", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10961, "upload_time": "2018-05-23T11:57:03", "upload_time_iso_8601": "2018-05-23T11:57:03.496135Z", "url": "https://files.pythonhosted.org/packages/17/82/b3be471c414b35068cfb110a5ac3b63ba486c849533e800b524c9ac2bc8d/aiomisc-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfd00a84afe7049c6e671a879ebd3f78", "sha256": "4b147e65c60ce166c4b2d9030b25eabb5a6720505c997ecf0c89089141245188"}, "downloads": -1, "filename": "aiomisc-0.4.3.tar.gz", "has_sig": false, "md5_digest": "bfd00a84afe7049c6e671a879ebd3f78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5908, "upload_time": "2018-05-23T11:57:04", "upload_time_iso_8601": "2018-05-23T11:57:04.793644Z", "url": "https://files.pythonhosted.org/packages/95/9a/79509d1112c807a206bf06b5b7b9644532e4a7c0a8cbd3dddb9e747e3c82/aiomisc-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "ba17e219e33112d23a68a2fb1091a61f", "sha256": "1ddf4a97862c6798f958db529b0eefe91c32c586da1828fb42d808b2ec9cbbe5"}, "downloads": -1, "filename": "aiomisc-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ba17e219e33112d23a68a2fb1091a61f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11161, "upload_time": "2018-05-30T09:42:46", "upload_time_iso_8601": "2018-05-30T09:42:46.250194Z", "url": "https://files.pythonhosted.org/packages/10/1f/98ed7819df07a5211f01542b90fc20baa3d5e4b7d5f9b9b1357f0ef48a53/aiomisc-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c369d3bafe3e1ef333b02768542928ed", "sha256": "e96cf2c8477a50f97f261d9250a42c22aacabd8c1a565baf31ed441f0289db96"}, "downloads": -1, "filename": "aiomisc-0.4.4.tar.gz", "has_sig": false, "md5_digest": "c369d3bafe3e1ef333b02768542928ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6071, "upload_time": "2018-05-30T09:42:47", "upload_time_iso_8601": "2018-05-30T09:42:47.799926Z", "url": "https://files.pythonhosted.org/packages/d9/b7/799223faa21611cf8a01858d4163472996a89e2354e93260427f7e871118/aiomisc-0.4.4.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "fe3bf3a42de1894bd37ddbc7b1cfc16d", "sha256": "253b68059e4355d57aac5353c267af3e5d4ad03f2f3b2cc054e88da7fb398aa0"}, "downloads": -1, "filename": "aiomisc-0.4.6-py3-none-any.whl", "has_sig": false, "md5_digest": "fe3bf3a42de1894bd37ddbc7b1cfc16d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11168, "upload_time": "2018-07-25T17:04:03", "upload_time_iso_8601": "2018-07-25T17:04:03.491306Z", "url": "https://files.pythonhosted.org/packages/19/c4/5a4e98cfe4be5a399776c1b452cc02a0312940e92086d7c9a00c318f2636/aiomisc-0.4.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77bdb2a61737c252b5ebabe1799aa8e8", "sha256": "d92c9f6a8690c99b1ecdd8810da6c1c1a47a8ed812ff77f5f135e684b63eab31"}, "downloads": -1, "filename": "aiomisc-0.4.6.tar.gz", "has_sig": false, "md5_digest": "77bdb2a61737c252b5ebabe1799aa8e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6062, "upload_time": "2018-07-25T17:04:04", "upload_time_iso_8601": "2018-07-25T17:04:04.853560Z", "url": "https://files.pythonhosted.org/packages/25/07/1450c317163216be773469f1341a5395c11ccebbab59bd98b281c3b9d300/aiomisc-0.4.6.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8a668a19fd0835edbfc9c3a06eb8a2f4", "sha256": "05f41c3259b2a0ea2748e95804d95ff2ce5d80d2fa3cb2e6d4a0503bf22da0d7"}, "downloads": -1, "filename": "aiomisc-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a668a19fd0835edbfc9c3a06eb8a2f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13269, "upload_time": "2018-07-27T11:37:50", "upload_time_iso_8601": "2018-07-27T11:37:50.710657Z", "url": "https://files.pythonhosted.org/packages/61/8f/097c0220a52a21fdb44e1a57a3cb6fec5e3b9f8986324ec1e2cfcf65a5d3/aiomisc-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72268b98dc19798b91edd43a95aa2125", "sha256": "bdbedaf54bf92236252c31efcfe198b6044d0c908cc02adc4e265f059668f622"}, "downloads": -1, "filename": "aiomisc-0.5.0.tar.gz", "has_sig": false, "md5_digest": "72268b98dc19798b91edd43a95aa2125", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8682, "upload_time": "2018-07-27T11:37:51", "upload_time_iso_8601": "2018-07-27T11:37:51.966905Z", "url": "https://files.pythonhosted.org/packages/3f/88/478f6ec385af24213647f1488737ada205dcec4052b710cc9dcb1c5b4136/aiomisc-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "b7fef4eca330d07028f0ca9a7d3ce330", "sha256": "e350021a2ace9ecff318d9bfe08aaca5938583c5125820ea3407a2386b3030f7"}, "downloads": -1, "filename": "aiomisc-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7fef4eca330d07028f0ca9a7d3ce330", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13584, "upload_time": "2018-07-27T11:53:28", "upload_time_iso_8601": "2018-07-27T11:53:28.064528Z", "url": "https://files.pythonhosted.org/packages/38/57/0aff42198581c475d47b4cd520ff7344424f84361bd9d2c596756f37d062/aiomisc-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f297105a676494db9c9e7c930c1ac7e0", "sha256": "efdbe640ac01d7c77cb89a6e18edb010a6b572d7626f6728854ac3b478b714de"}, "downloads": -1, "filename": "aiomisc-0.5.1.tar.gz", "has_sig": false, "md5_digest": "f297105a676494db9c9e7c930c1ac7e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9222, "upload_time": "2018-07-27T11:53:29", "upload_time_iso_8601": "2018-07-27T11:53:29.468047Z", "url": "https://files.pythonhosted.org/packages/5b/a7/53b45598850363693a4f842cd879cb0a14e189e7ce52ccb2500cd0868277/aiomisc-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "b7c9d5bd94111734233b4703e47182bf", "sha256": "bf0ad35b52bb1b472f0d5ab754b5edac4f4b90a33706e25cd62ae2c1975362fb"}, "downloads": -1, "filename": "aiomisc-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b7c9d5bd94111734233b4703e47182bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13637, "upload_time": "2018-07-27T12:56:13", "upload_time_iso_8601": "2018-07-27T12:56:13.093088Z", "url": "https://files.pythonhosted.org/packages/23/9d/b7a11f787d500a5c95094ae8b6150df3183a15e39395b5a0abc88cd68fd2/aiomisc-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "651df8755eff4e01c3d9801cb4965d78", "sha256": "12f3b42dee1ea56ac4f924b58ad73079e02f31742a68112709f77111dccbde6f"}, "downloads": -1, "filename": "aiomisc-0.5.2.tar.gz", "has_sig": false, "md5_digest": "651df8755eff4e01c3d9801cb4965d78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9273, "upload_time": "2018-07-27T12:56:14", "upload_time_iso_8601": "2018-07-27T12:56:14.527246Z", "url": "https://files.pythonhosted.org/packages/a5/8b/33b282508d8cf08c649726be148a0d723ce879f88fa8e3a5169fbbb98765/aiomisc-0.5.2.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "c531bb80173c1c60521252effb75141a", "sha256": "9d235f54d8b911ae557f611fa22b03049faef902bae16bb27052c913eb8d287d"}, "downloads": -1, "filename": "aiomisc-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c531bb80173c1c60521252effb75141a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14136, "upload_time": "2018-07-30T12:43:18", "upload_time_iso_8601": "2018-07-30T12:43:18.473129Z", "url": "https://files.pythonhosted.org/packages/2f/23/c0ae1de773fecfddfc40463979296c17315eb03416924c42966fbd183caa/aiomisc-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c084c9f3dffe1c49ec7906ef769a45ad", "sha256": "4c8943eb2c5d33dede80fa51564523c83e30226d7be9bfd48c11bc3ec6cea18b"}, "downloads": -1, "filename": "aiomisc-0.6.1.tar.gz", "has_sig": false, "md5_digest": "c084c9f3dffe1c49ec7906ef769a45ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9840, "upload_time": "2018-07-30T12:43:20", "upload_time_iso_8601": "2018-07-30T12:43:20.160977Z", "url": "https://files.pythonhosted.org/packages/cd/52/33ae3307ffbb5825bf78b726e32af4156d11628e1b1401a4f7ab4f231751/aiomisc-0.6.1.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "decb7c1484d41a6fa3a8b6475ac80289", "sha256": "e5049247e3465eebfc0368a001029ee51664c8e5af3b932033a17d0aa517a7df"}, "downloads": -1, "filename": "aiomisc-0.6.7-py3-none-any.whl", "has_sig": false, "md5_digest": "decb7c1484d41a6fa3a8b6475ac80289", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17353, "upload_time": "2018-07-31T12:47:22", "upload_time_iso_8601": "2018-07-31T12:47:22.722082Z", "url": "https://files.pythonhosted.org/packages/b0/0f/91a9d3f8873903938328d03ed9c6c0cdeaac53baeb4d5c379170296f8d86/aiomisc-0.6.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0148832fbd0e7f249c371d5feccb39e7", "sha256": "1dcc552d546302dfc5d73aa050fabec1ff1bc300b7bba472e1b2e1da37740e75"}, "downloads": -1, "filename": "aiomisc-0.6.7.tar.gz", "has_sig": false, "md5_digest": "0148832fbd0e7f249c371d5feccb39e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10373, "upload_time": "2018-07-31T12:47:23", "upload_time_iso_8601": "2018-07-31T12:47:23.760533Z", "url": "https://files.pythonhosted.org/packages/3e/27/5ed0856161646fe21365270d3892c73a9a0aedc6fe3aede9aec850ef83a2/aiomisc-0.6.7.tar.gz", "yanked": false}], "0.6.8": [{"comment_text": "", "digests": {"md5": "524ba3363f4d342c49510ae87d691993", "sha256": "4cd2eea0f6877e93f4f01285f29d649b5454a25a88d3d32e39927ece20a265d2"}, "downloads": -1, "filename": "aiomisc-0.6.8-py3-none-any.whl", "has_sig": false, "md5_digest": "524ba3363f4d342c49510ae87d691993", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17580, "upload_time": "2018-08-01T08:51:48", "upload_time_iso_8601": "2018-08-01T08:51:48.245761Z", "url": "https://files.pythonhosted.org/packages/30/a7/84d761eb8413f6db976a31da01a5d592fa393af6cec5b1d64905cbd2f1d7/aiomisc-0.6.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "219d6b3c47be3909cf7757427dae4131", "sha256": "371cb153847959c2713c3fa564d5489f1fa65ff15af80ac5966143cdf24234e8"}, "downloads": -1, "filename": "aiomisc-0.6.8.tar.gz", "has_sig": false, "md5_digest": "219d6b3c47be3909cf7757427dae4131", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10859, "upload_time": "2018-08-01T08:51:49", "upload_time_iso_8601": "2018-08-01T08:51:49.559487Z", "url": "https://files.pythonhosted.org/packages/14/e0/f55d996882e5e689c145d04ca3d3f0bc3a5382a59f729033873bcd0e4014/aiomisc-0.6.8.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "db9774646d23405cd5b4ebac125b62c7", "sha256": "9f671b94a7fce2e7833c20d061dc7bda9129343ec2fa4b06b1a96f31eb469e4e"}, "downloads": -1, "filename": "aiomisc-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db9774646d23405cd5b4ebac125b62c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17600, "upload_time": "2018-08-01T10:45:15", "upload_time_iso_8601": "2018-08-01T10:45:15.161225Z", "url": "https://files.pythonhosted.org/packages/b1/90/44c2ecc867836942b3d044fcfc1ce46508dc10f3bed1a1031642687d56b9/aiomisc-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00e0b1679b8584722398878386feb044", "sha256": "c6d64b5aba8eac70b3dc9a3a652bff74bd381b501043cb5f35f3a9808c79140f"}, "downloads": -1, "filename": "aiomisc-0.7.0.tar.gz", "has_sig": false, "md5_digest": "00e0b1679b8584722398878386feb044", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10886, "upload_time": "2018-08-01T10:45:16", "upload_time_iso_8601": "2018-08-01T10:45:16.289064Z", "url": "https://files.pythonhosted.org/packages/07/e5/f0fa35a69a5faf88ac614a74e2df07aa66c33a69830689111907f7eba7bb/aiomisc-0.7.0.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "763d4a62601c0d934b42c2cdeb136f7e", "sha256": "48ff52b9cf7715e7909af13b69f8fad026a4c2cab9e3121db9b7ec1e7e80ad51"}, "downloads": -1, "filename": "aiomisc-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "763d4a62601c0d934b42c2cdeb136f7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18000, "upload_time": "2018-08-01T12:57:31", "upload_time_iso_8601": "2018-08-01T12:57:31.503803Z", "url": "https://files.pythonhosted.org/packages/a9/83/a6f015dea1b3af885883345286f988a3bf10866fe3a8e850b7140df7b31d/aiomisc-0.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9291bb06965cd2974448c879bc0bfc74", "sha256": "bbb25eeddd129e2d9ae9c6c8b9fec60ac71547b37f3b9233765a87d6de0af198"}, "downloads": -1, "filename": "aiomisc-0.7.2.tar.gz", "has_sig": false, "md5_digest": "9291bb06965cd2974448c879bc0bfc74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11836, "upload_time": "2018-08-01T12:57:32", "upload_time_iso_8601": "2018-08-01T12:57:32.692208Z", "url": "https://files.pythonhosted.org/packages/d4/42/c7eee1647864d8346947e415975d0e6418d0dfe568c21c295901e0043c4c/aiomisc-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "7381ee0d4a6d812743e110903a22af66", "sha256": "41a0f50dde19005155cf28b0c7b4c0c6c6267af0794984b0e05c555b70a1d2f4"}, "downloads": -1, "filename": "aiomisc-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7381ee0d4a6d812743e110903a22af66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18005, "upload_time": "2018-08-01T13:42:18", "upload_time_iso_8601": "2018-08-01T13:42:18.001870Z", "url": "https://files.pythonhosted.org/packages/45/1c/d7f6f7aaf3c0d73bb4783d67d2475aa63b80d4ec8532644efe3bd0e352c7/aiomisc-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b901cfa4a06c14c121f1fcc05dfa482c", "sha256": "f5cb1a94cd699812cced69efa0aeac6e64ffadafa7b88c40c1c28d8bb35f928a"}, "downloads": -1, "filename": "aiomisc-0.7.3.tar.gz", "has_sig": false, "md5_digest": "b901cfa4a06c14c121f1fcc05dfa482c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11854, "upload_time": "2018-08-01T13:42:20", "upload_time_iso_8601": "2018-08-01T13:42:20.156672Z", "url": "https://files.pythonhosted.org/packages/50/84/7785d3fca2a2920325b0cfb76b540acf6623d8e2dee202852773233de059/aiomisc-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "99657820c8e7732ddb27d07adf3a3438", "sha256": "b3b276f3df174f063f5f3edc9ac9a820d361e7eabd308d5849765bc08ea1a6e3"}, "downloads": -1, "filename": "aiomisc-0.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "99657820c8e7732ddb27d07adf3a3438", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18028, "upload_time": "2018-08-06T08:27:07", "upload_time_iso_8601": "2018-08-06T08:27:07.847633Z", "url": "https://files.pythonhosted.org/packages/ee/72/ef85ebc79834d501977abfe6c851ce9c98df711875013f02570aa4597335/aiomisc-0.7.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7116e9bfad8be7970f63238578b327ba", "sha256": "0dd929d4c02a5c1664ea3a87574a5be6f2b8ebdcdc5928528f7295aa2ee5815c"}, "downloads": -1, "filename": "aiomisc-0.7.4.tar.gz", "has_sig": false, "md5_digest": "7116e9bfad8be7970f63238578b327ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11869, "upload_time": "2018-08-06T08:27:09", "upload_time_iso_8601": "2018-08-06T08:27:09.212089Z", "url": "https://files.pythonhosted.org/packages/fa/68/8ec9f94c1e4ffce05d1d0d5b9c30b26b4d2bce29d8a143b82b983c9c3124/aiomisc-0.7.4.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "340c6208ad2b333d2b5d7fead1e6db1e", "sha256": "d1dbf52cc23cac7fdda08d6b596939c324733b989f059767a6c97e3985e86b91"}, "downloads": -1, "filename": "aiomisc-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "340c6208ad2b333d2b5d7fead1e6db1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18050, "upload_time": "2018-08-07T21:45:20", "upload_time_iso_8601": "2018-08-07T21:45:20.523542Z", "url": "https://files.pythonhosted.org/packages/cf/93/a29c0128550cf6f0c87e40c59fe4635abc64d16b545869ef83f66079f137/aiomisc-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0e3d2063f6aee64e4bcf053be0add81", "sha256": "c867f8847bf5e799a2a39b11d09829ac080be7435e3afe8833b74d52c351a351"}, "downloads": -1, "filename": "aiomisc-0.8.0.tar.gz", "has_sig": false, "md5_digest": "e0e3d2063f6aee64e4bcf053be0add81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11895, "upload_time": "2018-08-07T21:45:21", "upload_time_iso_8601": "2018-08-07T21:45:21.758949Z", "url": "https://files.pythonhosted.org/packages/cc/5f/c539ca669562a3aa58f33e6cb90234db32c922d8d8bcd8b9fcccb0dba7fc/aiomisc-0.8.0.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "5a22cd299cf40d060de0e70bb7c7499c", "sha256": "0b9209273aedeface4e0fde707d7db33904989cb1393a3a192c59b3be34d8a84"}, "downloads": -1, "filename": "aiomisc-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5a22cd299cf40d060de0e70bb7c7499c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18261, "upload_time": "2018-08-20T15:39:53", "upload_time_iso_8601": "2018-08-20T15:39:53.004390Z", "url": "https://files.pythonhosted.org/packages/3e/8d/37215fa343ba41474e4dfb43bfc0c7cb17dc272cfc156c033fe9b1e1f22d/aiomisc-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efcb6882cc30f4ff45169cb0a01209b7", "sha256": "af0c42ada1e7a89ea3e8b2e6512db37853a15a9145d4a01355487b4966171246"}, "downloads": -1, "filename": "aiomisc-0.8.2.tar.gz", "has_sig": false, "md5_digest": "efcb6882cc30f4ff45169cb0a01209b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12058, "upload_time": "2018-08-20T15:39:54", "upload_time_iso_8601": "2018-08-20T15:39:54.577238Z", "url": "https://files.pythonhosted.org/packages/6a/36/d348e423dec32ef5c4d0e195acb02ce4adb874e354f959f65b58ffdc3e59/aiomisc-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "828141f89b42a0716dce2ae9a06a6d04", "sha256": "263732e447393c5485e1f47c5c573cbe5a92822f1a7c0f1b39c6ac39911d0268"}, "downloads": -1, "filename": "aiomisc-0.8.3-py3-none-any.whl", "has_sig": false, "md5_digest": "828141f89b42a0716dce2ae9a06a6d04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18265, "upload_time": "2018-08-20T15:47:05", "upload_time_iso_8601": "2018-08-20T15:47:05.488610Z", "url": "https://files.pythonhosted.org/packages/18/16/278c79e7c6b39d4e2a01e031efc9c7c836b27aaf072d1bae9d6c058481cd/aiomisc-0.8.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37327142fd8ba6af36fb980091de9523", "sha256": "5ef6956883b26a439745a3ac0450750173cfb50e1de2baf8fc728e3d15d08fe1"}, "downloads": -1, "filename": "aiomisc-0.8.3.tar.gz", "has_sig": false, "md5_digest": "37327142fd8ba6af36fb980091de9523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12057, "upload_time": "2018-08-20T15:47:06", "upload_time_iso_8601": "2018-08-20T15:47:06.878391Z", "url": "https://files.pythonhosted.org/packages/57/f3/d0aa8b1288b9fcf349b278dc9d8b8cf95e79e634e396737fc2ddff677d76/aiomisc-0.8.3.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "78ec42ee1f3b1e09623c8df8fb1ed950", "sha256": "49bad7eb41c52e3f7075489e82f0a77b3a210e7bdc61d3f15aca384d75c82f86"}, "downloads": -1, "filename": "aiomisc-0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "78ec42ee1f3b1e09623c8df8fb1ed950", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18771, "upload_time": "2018-08-23T10:35:00", "upload_time_iso_8601": "2018-08-23T10:35:00.233079Z", "url": "https://files.pythonhosted.org/packages/73/50/4a7609c54141b26fad18bc7198804d90db77aed6357d57a34c91e310e10e/aiomisc-0.9.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23d5fb9a5e494a32b15e8fb2c120be9f", "sha256": "484f3cfca448c6e454a919497d1c85961a0874ac3649e5a27fd7e6fdc1a6f6db"}, "downloads": -1, "filename": "aiomisc-0.9.8.tar.gz", "has_sig": false, "md5_digest": "23d5fb9a5e494a32b15e8fb2c120be9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12455, "upload_time": "2018-08-23T10:35:02", "upload_time_iso_8601": "2018-08-23T10:35:02.613597Z", "url": "https://files.pythonhosted.org/packages/50/b0/45c071c9d8f0309ee257fc3a96375d8d680d2640a73f46e3f14583bd4ffd/aiomisc-0.9.8.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b2389fc8f66b204ebbe735f90df1edb3", "sha256": "dbf63615d620d053c0e442a7e392ff09601a0d544e1453d8f10dea7899b35adc"}, "downloads": -1, "filename": "aiomisc-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b2389fc8f66b204ebbe735f90df1edb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22378, "upload_time": "2018-10-26T13:04:18", "upload_time_iso_8601": "2018-10-26T13:04:18.817448Z", "url": "https://files.pythonhosted.org/packages/3c/1f/715441ec37f7008d1c8b381fce2b235b1ed3b104fe8f236ead6b9feda062/aiomisc-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36d973a3cad40c7d76fe1723f96c92af", "sha256": "3012732e6d74e15f1d9ae3a20495494126bced3032f9569f2030323412167c29"}, "downloads": -1, "filename": "aiomisc-1.0.3.tar.gz", "has_sig": false, "md5_digest": "36d973a3cad40c7d76fe1723f96c92af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15866, "upload_time": "2018-10-26T13:04:20", "upload_time_iso_8601": "2018-10-26T13:04:20.403745Z", "url": "https://files.pythonhosted.org/packages/6e/48/1b1980fdd5b6689e980cc78d4b1df99353967d850bb20f5a87953ecd9ae6/aiomisc-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ea536aa7a4e8896575f124106e88a955", "sha256": "7ecad4e805b9eb45c2a243a74e0649bd0cbee1ca76c48bca30c28606cdab334b"}, "downloads": -1, "filename": "aiomisc-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ea536aa7a4e8896575f124106e88a955", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22406, "upload_time": "2018-11-06T11:41:32", "upload_time_iso_8601": "2018-11-06T11:41:32.094062Z", "url": "https://files.pythonhosted.org/packages/47/9e/261e021fad80bf4a4ec3ab76bf6b0a9b58f1f673b2151f3922b814a90028/aiomisc-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c431795cb08d05e53b66372b18a37f04", "sha256": "ed6458fbe06c29b47c06d9a2e8cfbabdd1799464b62b2278138a087aba286512"}, "downloads": -1, "filename": "aiomisc-1.0.4.tar.gz", "has_sig": false, "md5_digest": "c431795cb08d05e53b66372b18a37f04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15901, "upload_time": "2018-11-06T11:41:33", "upload_time_iso_8601": "2018-11-06T11:41:33.787657Z", "url": "https://files.pythonhosted.org/packages/f1/fe/fdb3cd98e6db13f2958586de0d5aabff09a83450aceaf1c7a8d01a642faa/aiomisc-1.0.4.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "d39ca482b5e215fb619b13d4afb79197", "sha256": "167a7d59c9498549e3e4a9174463d2e9253f91632f67155192e8f9cb5dd2d69f"}, "downloads": -1, "filename": "aiomisc-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d39ca482b5e215fb619b13d4afb79197", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22539, "upload_time": "2018-11-20T05:46:32", "upload_time_iso_8601": "2018-11-20T05:46:32.248598Z", "url": "https://files.pythonhosted.org/packages/58/9d/c435863276d86c33afc6840ff9b7c1179312ed1f39cdda171efdd7672756/aiomisc-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1b3e636f4bee259261a2665a1346355", "sha256": "7b5b6e380a586ca52249ed8d9f38ded33cdf737bc00c0348fac911f89e933bb1"}, "downloads": -1, "filename": "aiomisc-1.0.7.tar.gz", "has_sig": false, "md5_digest": "d1b3e636f4bee259261a2665a1346355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16098, "upload_time": "2018-11-20T05:46:33", "upload_time_iso_8601": "2018-11-20T05:46:33.950799Z", "url": "https://files.pythonhosted.org/packages/aa/4d/8795b24e9e51b4e57d235980140892c387af5cb0c0be0efc9c12e8826862/aiomisc-1.0.7.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "28cae960dbbbab4ff3d73c1351b2073d", "sha256": "d3fe670e1d1ac31fff7fa1e5e9892265e8e837b7e6a92b6dd830359a7d86014d"}, "downloads": -1, "filename": "aiomisc-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "28cae960dbbbab4ff3d73c1351b2073d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23482, "upload_time": "2018-12-06T19:38:12", "upload_time_iso_8601": "2018-12-06T19:38:12.303701Z", "url": "https://files.pythonhosted.org/packages/01/c3/1b4563faf509f069bc6db73e233d11109f79dd775d10001ad7d9145afad7/aiomisc-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60e1ba29a1b9fc996a477624c12b823b", "sha256": "62f789f26d34015343bb9bca25d2c54cbf6634d6ff3a9bceffa26e798999531d"}, "downloads": -1, "filename": "aiomisc-1.1.0.tar.gz", "has_sig": false, "md5_digest": "60e1ba29a1b9fc996a477624c12b823b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16926, "upload_time": "2018-12-06T19:38:13", "upload_time_iso_8601": "2018-12-06T19:38:13.993272Z", "url": "https://files.pythonhosted.org/packages/a4/37/1a2c8dde047ae977f6fb05cc09817897173a9f966cfdadf140a2814e45f0/aiomisc-1.1.0.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "61c0d246cc7a11060c49a05f124efc57", "sha256": "9edcf2af46799e179dc55f748bd79b9940fa9edf6c7614ecc1f69a7f9892b4df"}, "downloads": -1, "filename": "aiomisc-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "61c0d246cc7a11060c49a05f124efc57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23485, "upload_time": "2018-12-06T19:53:49", "upload_time_iso_8601": "2018-12-06T19:53:49.517987Z", "url": "https://files.pythonhosted.org/packages/1a/c3/077c9a94a14eb1123a11cade132402cebc7607221fb3cfd04011b6520c4f/aiomisc-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69aedc10c471b09edfe064e81c61d721", "sha256": "7ad556e99d0cc3c6df2e8ca882c7a6381056983569f859b7e5affa4fc9143edb"}, "downloads": -1, "filename": "aiomisc-1.1.2.tar.gz", "has_sig": false, "md5_digest": "69aedc10c471b09edfe064e81c61d721", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16936, "upload_time": "2018-12-06T19:53:51", "upload_time_iso_8601": "2018-12-06T19:53:51.321204Z", "url": "https://files.pythonhosted.org/packages/60/8d/41a9c5e8f9a98ea53da7bb6133ae1aff6c84b0257cb9608fdd5adc570361/aiomisc-1.1.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7642154ef2df13b2ce3d8abe9d216e86", "sha256": "04ea685f2c2b616fbd18c72fcef77131a5965c561b4fb61e49c20108fcf03aa2"}, "downloads": -1, "filename": "aiomisc-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7642154ef2df13b2ce3d8abe9d216e86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24271, "upload_time": "2018-12-10T13:10:39", "upload_time_iso_8601": "2018-12-10T13:10:39.826241Z", "url": "https://files.pythonhosted.org/packages/45/ff/47a4cd5226c6c2f2b4ba296a2b8049efdb54f19c8c2cb227a4aea4f919cd/aiomisc-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62a19e9a7bc765119757486b175fff10", "sha256": "962c3e8ca498ebe30cbf32646834c43650bf154a33a503a7166471af97bb09b4"}, "downloads": -1, "filename": "aiomisc-1.3.0.tar.gz", "has_sig": false, "md5_digest": "62a19e9a7bc765119757486b175fff10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17579, "upload_time": "2018-12-10T13:10:41", "upload_time_iso_8601": "2018-12-10T13:10:41.557225Z", "url": "https://files.pythonhosted.org/packages/39/6d/99688157e4d421345a770576daaf02a15b2bdcac7f475582d37aba0dda2b/aiomisc-1.3.0.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "ed1fe670c22aee1e952762a112653523", "sha256": "caee96075ce0e9dd927b1f5a88b726bfee3198a99d811382b084807cb6106bc6"}, "downloads": -1, "filename": "aiomisc-1.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ed1fe670c22aee1e952762a112653523", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24283, "upload_time": "2018-12-24T16:02:42", "upload_time_iso_8601": "2018-12-24T16:02:42.947184Z", "url": "https://files.pythonhosted.org/packages/d4/ff/8c34fb5d2c13be6da702d7c522d80ca34ec8b3c84f36383ae9f33c6927d0/aiomisc-1.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bd249d9d9e6235cc500a7e8df8df55a", "sha256": "5bbc7d18ceb1047a32308481105f2e6df47c753f1b08076a48e41cdbda519389"}, "downloads": -1, "filename": "aiomisc-1.3.3.tar.gz", "has_sig": false, "md5_digest": "5bd249d9d9e6235cc500a7e8df8df55a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17648, "upload_time": "2018-12-24T16:02:44", "upload_time_iso_8601": "2018-12-24T16:02:44.837636Z", "url": "https://files.pythonhosted.org/packages/f3/53/d13a01fb88ae7d748fae3fd3a3d959dd5f29e7d58c359fba7bcde0c980c1/aiomisc-1.3.3.tar.gz", "yanked": false}], "1.3.9": [{"comment_text": "", "digests": {"md5": "2895a1ad3eff17ea9a27f29b7468c26f", "sha256": "721c64c7480ac8e552b1532aa949e49f2a423bdefeda44399ff1df9f41c646c8"}, "downloads": -1, "filename": "aiomisc-1.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2895a1ad3eff17ea9a27f29b7468c26f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24324, "upload_time": "2018-12-25T14:33:32", "upload_time_iso_8601": "2018-12-25T14:33:32.436903Z", "url": "https://files.pythonhosted.org/packages/fd/cf/76405656c4bbc8b85a6f41a5e35b15475807034b13a61f5a5d327727462c/aiomisc-1.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "678fe26a315586046838bf418ac908d1", "sha256": "beffde1dc2cf7f00520deb2a0daf2952fb914531df164559d2444591703d0567"}, "downloads": -1, "filename": "aiomisc-1.3.9.tar.gz", "has_sig": false, "md5_digest": "678fe26a315586046838bf418ac908d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17613, "upload_time": "2018-12-25T14:33:34", "upload_time_iso_8601": "2018-12-25T14:33:34.109066Z", "url": "https://files.pythonhosted.org/packages/2f/fa/7eba9058d0dd136a16920dc6482f6436ab208360b9dae6209d165b761e9f/aiomisc-1.3.9.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "c0efd833997673d8d6396606a0c75fd9", "sha256": "2e99774d3072666323ede9dc9e5697c2af0f64471c51ddd1c555f6d64f3c9aa0"}, "downloads": -1, "filename": "aiomisc-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c0efd833997673d8d6396606a0c75fd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25197, "upload_time": "2019-01-04T18:07:30", "upload_time_iso_8601": "2019-01-04T18:07:30.225377Z", "url": "https://files.pythonhosted.org/packages/c1/9e/b0f1be315f401740bb82849602af63ef6f4ac81757f75c2263ca2f1ecb25/aiomisc-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55136d98ed4217d2347196bc3c312ff3", "sha256": "990c6cb26502a2cb4e377b17116b071966819ef733466cc7e63fa1102bfea85f"}, "downloads": -1, "filename": "aiomisc-1.4.0.tar.gz", "has_sig": false, "md5_digest": "55136d98ed4217d2347196bc3c312ff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18394, "upload_time": "2019-01-04T18:07:32", "upload_time_iso_8601": "2019-01-04T18:07:32.254467Z", "url": "https://files.pythonhosted.org/packages/c8/d5/2a506367c4e489c0be2cfa5febc9b358799925c46ed6bb1d721dd075d541/aiomisc-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "c0ee5439f889a7aa253a58c5f57b1d7b", "sha256": "49b6782cb4ee41f13f60048a3b6abe740c03494e9a961daacaad0a38fdbff2c7"}, "downloads": -1, "filename": "aiomisc-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c0ee5439f889a7aa253a58c5f57b1d7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23899, "upload_time": "2019-01-09T15:24:35", "upload_time_iso_8601": "2019-01-09T15:24:35.341977Z", "url": "https://files.pythonhosted.org/packages/0f/43/c5e21cf6c0648a78d763724b40bf811f214fe8066155fcc409e94608ed19/aiomisc-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "877fe31c12a2e596713100ccc2ed8775", "sha256": "70a06d3eb73b55f25b3c5dbbf8f7354a25aff7492bd0a347d6ffbdd6955d3e3f"}, "downloads": -1, "filename": "aiomisc-1.5.0.tar.gz", "has_sig": false, "md5_digest": "877fe31c12a2e596713100ccc2ed8775", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18421, "upload_time": "2019-01-09T15:24:36", "upload_time_iso_8601": "2019-01-09T15:24:36.785817Z", "url": "https://files.pythonhosted.org/packages/4d/27/c50cb42fc276b5ecbecb9fd0509aaf3547a9b87c7fb58e180273c9ebb040/aiomisc-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "28ea19abf391d4e59dc7e71aab63685a", "sha256": "9b3b75e2346e58533efd5662a3e01c0e5d4f1a0a99d628f9a1f8581b70f6ef91"}, "downloads": -1, "filename": "aiomisc-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "28ea19abf391d4e59dc7e71aab63685a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23883, "upload_time": "2019-01-09T15:34:02", "upload_time_iso_8601": "2019-01-09T15:34:02.397467Z", "url": "https://files.pythonhosted.org/packages/37/0a/fda21f43833682c909ddfbb38c2cfe63ede72e010d9f8936f269749a45a8/aiomisc-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46dbc25573b5c4d962950382ba45462a", "sha256": "3f520e2200197869a852784c2a42467d721c6dd70a188329af45e655ae20e7fa"}, "downloads": -1, "filename": "aiomisc-1.5.1.tar.gz", "has_sig": false, "md5_digest": "46dbc25573b5c4d962950382ba45462a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15275, "upload_time": "2019-01-09T15:34:04", "upload_time_iso_8601": "2019-01-09T15:34:04.260530Z", "url": "https://files.pythonhosted.org/packages/38/26/99abc16f4efb5b1e5564aa7e6859092cc01e7af3d7a92b592a74e64a7f65/aiomisc-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "dedc3f950ec4c76ded7a1c07c6370faa", "sha256": "3eeca34960dccf0acd593277a654f3ea51b4adb3c7729874cac79fb7f3fb6f0f"}, "downloads": -1, "filename": "aiomisc-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dedc3f950ec4c76ded7a1c07c6370faa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27484, "upload_time": "2019-01-09T23:05:40", "upload_time_iso_8601": "2019-01-09T23:05:40.789246Z", "url": "https://files.pythonhosted.org/packages/b5/e6/8520133547322e85488a4f95067087360c0596a994470abc7134e8fbabda/aiomisc-1.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3908ba2de5c5a3c8a4776ee2e04a60c", "sha256": "c2df1074392ac281c88faa49b446ff74d77c9657863b88dde256b9acb4579ba8"}, "downloads": -1, "filename": "aiomisc-1.6.0.tar.gz", "has_sig": false, "md5_digest": "a3908ba2de5c5a3c8a4776ee2e04a60c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17483, "upload_time": "2019-01-09T23:05:42", "upload_time_iso_8601": "2019-01-09T23:05:42.272360Z", "url": "https://files.pythonhosted.org/packages/3c/c8/b7573ae73ac77ee140a217183bc7767cf39c868f6f72ee3470026e814654/aiomisc-1.6.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "2d41623212fd44399c875424aa4c7a2b", "sha256": "6c3fd42f8bfeaef6c497fa9e4a784b678f4eae2208bb7c94ce02f02e002e6924"}, "downloads": -1, "filename": "aiomisc-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d41623212fd44399c875424aa4c7a2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27722, "upload_time": "2019-01-10T11:16:27", "upload_time_iso_8601": "2019-01-10T11:16:27.219285Z", "url": "https://files.pythonhosted.org/packages/e2/c6/84ff7a5546e9e2a42675ae696337f7b34990b9391b0addd4afe949ea3dd9/aiomisc-1.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7947afea64739f061eb0f0924e14456", "sha256": "db39bd26cceafb6fe98e87d206df4f232e99264f6901fb077691a4d0732c78d6"}, "downloads": -1, "filename": "aiomisc-1.7.0.tar.gz", "has_sig": false, "md5_digest": "d7947afea64739f061eb0f0924e14456", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21724, "upload_time": "2019-01-10T11:16:29", "upload_time_iso_8601": "2019-01-10T11:16:29.027888Z", "url": "https://files.pythonhosted.org/packages/ef/5c/692f98ed6b99f0e1d572a4da856c69aacadffefba7c50e02c6f031cad89f/aiomisc-1.7.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "2b2e651f70600f1f008dff21292c5a21", "sha256": "633d799199610c36f67b5cbb5dca4b0bb29e3efa82467126ad4f7da3c31200ac"}, "downloads": -1, "filename": "aiomisc-1.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2b2e651f70600f1f008dff21292c5a21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28374, "upload_time": "2019-01-10T15:05:50", "upload_time_iso_8601": "2019-01-10T15:05:50.654739Z", "url": "https://files.pythonhosted.org/packages/76/96/a2ef8c540fe21df996df766ece7ad4a7cd7f66adc4be72f03baf816a45cf/aiomisc-1.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dba21c54cf02fbae28a9f339902a4e4", "sha256": "b03286e32cc3fc281ee271bb7b21004044e838b346daed72135c53b2cfaf7aba"}, "downloads": -1, "filename": "aiomisc-1.9.1.tar.gz", "has_sig": false, "md5_digest": "9dba21c54cf02fbae28a9f339902a4e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22464, "upload_time": "2019-01-10T15:05:52", "upload_time_iso_8601": "2019-01-10T15:05:52.599371Z", "url": "https://files.pythonhosted.org/packages/e9/cd/3676cdf5be553c4ec305e7783c0729980b70bec203c22ea706db2daf978b/aiomisc-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "8de926f1b760d788e0430cff43188d6c", "sha256": "150cab3d263ab0e6d0a74737ddf15e526fe8ff66534a8f83fb5a9ffe825e260a"}, "downloads": -1, "filename": "aiomisc-1.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8de926f1b760d788e0430cff43188d6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28386, "upload_time": "2019-01-10T15:42:26", "upload_time_iso_8601": "2019-01-10T15:42:26.433326Z", "url": "https://files.pythonhosted.org/packages/6c/c6/17677c810a38fb67d22b5cc0df2ed347680e70784ce931c5613329fcad00/aiomisc-1.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afd5395af2ca0dd8a4976dddf9eda419", "sha256": "7ac900d0ed0c8d5afa427cdc40d78a0d9cf1b9d85b7247cac872eaf4c1264e8f"}, "downloads": -1, "filename": "aiomisc-1.9.2.tar.gz", "has_sig": false, "md5_digest": "afd5395af2ca0dd8a4976dddf9eda419", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22486, "upload_time": "2019-01-10T15:42:29", "upload_time_iso_8601": "2019-01-10T15:42:29.834201Z", "url": "https://files.pythonhosted.org/packages/a3/23/e7ab4764bcadec7cf4b6cfe3fd02421a85fbd6ab2af2a9bf7dd39a72b456/aiomisc-1.9.2.tar.gz", "yanked": false}], "1.9.3": [{"comment_text": "", "digests": {"md5": "2265a48ff09ad049a392cd9dac51d900", "sha256": "c428e1ea75ea0a9430faaaefc254af8cd9c9c5b78cda956457495968aa47c897"}, "downloads": -1, "filename": "aiomisc-1.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2265a48ff09ad049a392cd9dac51d900", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28383, "upload_time": "2019-01-10T16:10:56", "upload_time_iso_8601": "2019-01-10T16:10:56.105921Z", "url": "https://files.pythonhosted.org/packages/3d/93/09c9bd01910589c240683c69d36fd4075dfd60f9699208503ca8a5056e14/aiomisc-1.9.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c962ef4be7e8a933c8f5a9fbc2a6820", "sha256": "17c3196a37409508ece71eb6f3916cda2354667d6e9d43e079e3fdf81a767bb5"}, "downloads": -1, "filename": "aiomisc-1.9.3.tar.gz", "has_sig": false, "md5_digest": "6c962ef4be7e8a933c8f5a9fbc2a6820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22478, "upload_time": "2019-01-10T16:10:57", "upload_time_iso_8601": "2019-01-10T16:10:57.691359Z", "url": "https://files.pythonhosted.org/packages/2c/e8/34f858650f0bb49757f30d2f9ab232ee7599937837c8460b48bf27bb2dac/aiomisc-1.9.3.tar.gz", "yanked": false}], "1.9.6": [{"comment_text": "", "digests": {"md5": "1c8573654e7dc1c4415525db18a9d9cb", "sha256": "bb670c279c3e69e6c34e075fb0db9231f484db3921b17fcb1d6929173b6f30cf"}, "downloads": -1, "filename": "aiomisc-1.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1c8573654e7dc1c4415525db18a9d9cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28381, "upload_time": "2019-01-10T16:35:39", "upload_time_iso_8601": "2019-01-10T16:35:39.661223Z", "url": "https://files.pythonhosted.org/packages/7f/7e/a3c3029ca8348ad7b124567b33481b065bd4cfed31fdec872165299aa766/aiomisc-1.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79b7c690af5648e3b3c5ae3edd119f37", "sha256": "32ab2cacaaa11013d9cc6fa665494389731923711d8e72de1c6f280505f9b1a0"}, "downloads": -1, "filename": "aiomisc-1.9.6.tar.gz", "has_sig": false, "md5_digest": "79b7c690af5648e3b3c5ae3edd119f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22474, "upload_time": "2019-01-10T16:35:41", "upload_time_iso_8601": "2019-01-10T16:35:41.109666Z", "url": "https://files.pythonhosted.org/packages/30/c1/a96c400904bff1a1f5385f22f9b59bcc5c972f1546bf3a3f3b81bc8e1826/aiomisc-1.9.6.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "377452436a8d29a8f593d47e452e0f05", "sha256": "0a53b18e9f720b4cc2ee140e2bde6b86233c6c0bf23f5440b6b83741cbec64c2"}, "downloads": -1, "filename": "aiomisc-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "377452436a8d29a8f593d47e452e0f05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29127, "upload_time": "2019-01-10T18:41:17", "upload_time_iso_8601": "2019-01-10T18:41:17.620036Z", "url": "https://files.pythonhosted.org/packages/19/a6/a6458106435e93afabc6d32a55c8c3bfe01285f08703298e137a4f55ad37/aiomisc-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c915ee3265d9208ec991e97c2b2dc78", "sha256": "328fd0696a70792e6d58385a636abfc6c8fc042228281634b88dad9cb5e86459"}, "downloads": -1, "filename": "aiomisc-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8c915ee3265d9208ec991e97c2b2dc78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18540, "upload_time": "2019-01-10T18:41:19", "upload_time_iso_8601": "2019-01-10T18:41:19.210353Z", "url": "https://files.pythonhosted.org/packages/8b/d5/de7af9f0e4a9d6da2c67a4908b9aa847d9f7272be34fb2febb66a16b2901/aiomisc-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "751b559416451d46a6af3b947e2cabe7", "sha256": "6333a1ea08e50c52524d234034960c4a36e4f329d4e4779e891f0880ab609c6e"}, "downloads": -1, "filename": "aiomisc-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "751b559416451d46a6af3b947e2cabe7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29177, "upload_time": "2019-01-10T21:41:50", "upload_time_iso_8601": "2019-01-10T21:41:50.695594Z", "url": "https://files.pythonhosted.org/packages/58/89/3425f95a5efbaf45b9544495cd535733cde1c6c43a5daaef9e127094c2c5/aiomisc-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "522466503a95a725b271908eac65a2c1", "sha256": "4a99f89268fb208f605ebdedb155550c327d95dddb96ee1fac136e6a61322526"}, "downloads": -1, "filename": "aiomisc-2.1.0.tar.gz", "has_sig": false, "md5_digest": "522466503a95a725b271908eac65a2c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18566, "upload_time": "2019-01-10T21:41:52", "upload_time_iso_8601": "2019-01-10T21:41:52.208270Z", "url": "https://files.pythonhosted.org/packages/23/71/daf251cd5de141bdcf253660ae0fcee65e9338851ff9cb650a8704b2865f/aiomisc-2.1.0.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "734f240bf6c28687d81c0e8d7666dc3c", "sha256": "76de62c1ac9a6d2a9beaa65d8682e49867bde5bdf3024ebe81d7cac538231650"}, "downloads": -1, "filename": "aiomisc-2.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "734f240bf6c28687d81c0e8d7666dc3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29284, "upload_time": "2019-01-13T20:47:34", "upload_time_iso_8601": "2019-01-13T20:47:34.103378Z", "url": "https://files.pythonhosted.org/packages/66/a4/b1fc22cb8514adf146dd9515c590aafc4688347deac87d7425366ed96435/aiomisc-2.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88ab235eaeb4e3ac5391ca34c553daaa", "sha256": "5cbcfa09c2fd08a85d9fcf4f7a3cf5fa21601e52ed55100e11b1e4e1f5cacfd1"}, "downloads": -1, "filename": "aiomisc-2.1.5.tar.gz", "has_sig": false, "md5_digest": "88ab235eaeb4e3ac5391ca34c553daaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18611, "upload_time": "2019-01-13T20:47:35", "upload_time_iso_8601": "2019-01-13T20:47:35.784005Z", "url": "https://files.pythonhosted.org/packages/0b/a3/83e0fa6d357adf0bf9cd1182d70f2dadf860c21325254b934bd524c5bd9b/aiomisc-2.1.5.tar.gz", "yanked": false}], "2.1.6": [{"comment_text": "", "digests": {"md5": "e5c05bb119652781d2eaacab2b116f04", "sha256": "aee72a2ef413e6c528e00e34afb3baae40480d79078bc06cf8adecc149c360ab"}, "downloads": -1, "filename": "aiomisc-2.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e5c05bb119652781d2eaacab2b116f04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29287, "upload_time": "2019-01-13T21:21:13", "upload_time_iso_8601": "2019-01-13T21:21:13.866450Z", "url": "https://files.pythonhosted.org/packages/7e/ed/054df10abe7476e134fcfa9bcb7c00df379bdd53d8b2801e7b728e2c9ca6/aiomisc-2.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff5c5edd625acc24b902f0480825c665", "sha256": "1375e7ce7d3f13fc6fa278c72098c48cf64cda02910ca331a342383db3ccad10"}, "downloads": -1, "filename": "aiomisc-2.1.6.tar.gz", "has_sig": false, "md5_digest": "ff5c5edd625acc24b902f0480825c665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18618, "upload_time": "2019-01-13T21:21:15", "upload_time_iso_8601": "2019-01-13T21:21:15.705847Z", "url": "https://files.pythonhosted.org/packages/9c/cf/6bb84c67fd449c4a042c9f6de606bd7a1ad2d69ac7e4dee3f318507fe67d/aiomisc-2.1.6.tar.gz", "yanked": false}], "2.1.7": [{"comment_text": "", "digests": {"md5": "fcd4491e9f841e36c098a22c09c1159d", "sha256": "c9d1712ecf148d3a00b1da1358bcbcbae370707ddb50d128d2a76f5c91efefef"}, "downloads": -1, "filename": "aiomisc-2.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "fcd4491e9f841e36c098a22c09c1159d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29287, "upload_time": "2019-01-13T21:28:31", "upload_time_iso_8601": "2019-01-13T21:28:31.423091Z", "url": "https://files.pythonhosted.org/packages/55/e4/f2d940f9fdc0203a241594789c6ba9d37179db4baa9560ca1307a08c0cc8/aiomisc-2.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d8c8bb55641535884058fff3996380d", "sha256": "e1acbd92184ff7dc0ccb08ad165845c62bbb6a8a9e2114b5e17ecd80a354530c"}, "downloads": -1, "filename": "aiomisc-2.1.7.tar.gz", "has_sig": false, "md5_digest": "4d8c8bb55641535884058fff3996380d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18617, "upload_time": "2019-01-13T21:28:32", "upload_time_iso_8601": "2019-01-13T21:28:32.912242Z", "url": "https://files.pythonhosted.org/packages/95/42/4f73075b0cd0ba77bab75178eb0502152c12a389614d7536c00b950838ce/aiomisc-2.1.7.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "0b144c098d5cb296927ab59684548a1f", "sha256": "28ccaf93e9819bf7bd7ce4fe4a0c36a84efd3836d978a334f11a7f872d2762dd"}, "downloads": -1, "filename": "aiomisc-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0b144c098d5cb296927ab59684548a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29567, "upload_time": "2019-01-16T14:01:26", "upload_time_iso_8601": "2019-01-16T14:01:26.502768Z", "url": "https://files.pythonhosted.org/packages/34/f4/078937d24dab7d509069483698e045853ac4bfc9291323b0d181f0ada21b/aiomisc-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a34bc80d546e9bcdf92706ddce72efe", "sha256": "eb516178243e6db9f5e8b9047ff16c5c5397f0576b69fb8409f13b4eb5baf2b5"}, "downloads": -1, "filename": "aiomisc-3.0.0.tar.gz", "has_sig": false, "md5_digest": "9a34bc80d546e9bcdf92706ddce72efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23655, "upload_time": "2019-01-16T14:01:28", "upload_time_iso_8601": "2019-01-16T14:01:28.272608Z", "url": "https://files.pythonhosted.org/packages/13/4a/a18dbff796ac97ae9c27eb19d5b05a64653eb27c1fbaf4c68b73cf8d34dc/aiomisc-3.0.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "c3ca0f17a870bbb1f420c3051bd4c8cd", "sha256": "48a2e1693c9a873cb5c66f47ef0359d9786118621109e5ef7f59db725304a886"}, "downloads": -1, "filename": "aiomisc-4.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3ca0f17a870bbb1f420c3051bd4c8cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31233, "upload_time": "2019-01-17T23:08:07", "upload_time_iso_8601": "2019-01-17T23:08:07.981905Z", "url": "https://files.pythonhosted.org/packages/08/53/d60e34db86f13a3360ac8d66f3650746ec181318ffd7ca16469a8b17d466/aiomisc-4.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "689f707f59f4d7d58d5203c410c06054", "sha256": "cc8c18d092af47d90dc239297287b7279dfac8f2631aa70b12f3e444d461ba1f"}, "downloads": -1, "filename": "aiomisc-4.0.0.tar.gz", "has_sig": false, "md5_digest": "689f707f59f4d7d58d5203c410c06054", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25254, "upload_time": "2019-01-17T23:08:09", "upload_time_iso_8601": "2019-01-17T23:08:09.705636Z", "url": "https://files.pythonhosted.org/packages/94/5c/aadd8cd0e8c3bd494fd5bede5644135ebccf052a5739271c9740b3cb8798/aiomisc-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "2e71bca1ec870d69a4245020c1c89b99", "sha256": "bf9fff9fd2687894c14296c0773871ac80a6beb58f8ea80fdd3a5002f06cb3af"}, "downloads": -1, "filename": "aiomisc-4.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e71bca1ec870d69a4245020c1c89b99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31354, "upload_time": "2019-01-18T10:14:40", "upload_time_iso_8601": "2019-01-18T10:14:40.485953Z", "url": "https://files.pythonhosted.org/packages/95/79/5de36790127e040a285cf9de7e8cd2dadd8a336289149429486820e8e6aa/aiomisc-4.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92f484e0344096ec47a347651c2a58ed", "sha256": "dda267b0f01898a3eeb02eae60e8836e7d6743bb7f1a3e843671140c6c83df62"}, "downloads": -1, "filename": "aiomisc-4.1.0.tar.gz", "has_sig": false, "md5_digest": "92f484e0344096ec47a347651c2a58ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20236, "upload_time": "2019-01-18T10:14:41", "upload_time_iso_8601": "2019-01-18T10:14:41.887794Z", "url": "https://files.pythonhosted.org/packages/cb/fb/3860f16046b15d548f6e63296a16205e9a5e739bb641d88377e8f554d766/aiomisc-4.1.0.tar.gz", "yanked": false}], "4.2.16": [{"comment_text": "", "digests": {"md5": "d76d6fed22138f6b9a8acd76020c5977", "sha256": "a4a1da5ba9766279f1e46c4b29b5c8874d6923c8bdf0f3b3f188d297a47c5f86"}, "downloads": -1, "filename": "aiomisc-4.2.16-py3-none-any.whl", "has_sig": false, "md5_digest": "d76d6fed22138f6b9a8acd76020c5977", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34248, "upload_time": "2019-01-19T20:12:23", "upload_time_iso_8601": "2019-01-19T20:12:23.900359Z", "url": "https://files.pythonhosted.org/packages/66/1f/e10b2fe79113ecbd2de85db446728937e9e1d24a488e64f0b28340f13419/aiomisc-4.2.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43291046e5addc5e96ff0fd3faeeaf94", "sha256": "dc9588d4ec815f3d619e0a7328e2462bbac367c54102a23e2776a2b0ef4e1c33"}, "downloads": -1, "filename": "aiomisc-4.2.16.tar.gz", "has_sig": false, "md5_digest": "43291046e5addc5e96ff0fd3faeeaf94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29651, "upload_time": "2019-01-19T20:12:25", "upload_time_iso_8601": "2019-01-19T20:12:25.286260Z", "url": "https://files.pythonhosted.org/packages/b2/72/422a16b625b56bd47091ac68ad5abd14e050bd88622864e9e46481eb4a03/aiomisc-4.2.16.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "79daaa124ad8c83dfb42b4ea5f1b1cfe", "sha256": "ee66ddca2404b5a2adf2ed1c6a3b0b08358f9eeee0bb1dba1dede609ea4e38da"}, "downloads": -1, "filename": "aiomisc-5.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "79daaa124ad8c83dfb42b4ea5f1b1cfe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32510, "upload_time": "2019-01-19T19:43:47", "upload_time_iso_8601": "2019-01-19T19:43:47.304102Z", "url": "https://files.pythonhosted.org/packages/81/93/4b8c5c32daac70966b7bc8cf56a655330b4f369cca0f96c896f54879cf76/aiomisc-5.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd2758bee011159aa23b4e9a6ac144de", "sha256": "412f111741d4da40d72d090705d07b5235f9b32cd2a1b1ff8f3ea50b3b1910ef"}, "downloads": -1, "filename": "aiomisc-5.0.0.tar.gz", "has_sig": false, "md5_digest": "cd2758bee011159aa23b4e9a6ac144de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27488, "upload_time": "2019-01-19T19:43:48", "upload_time_iso_8601": "2019-01-19T19:43:48.897762Z", "url": "https://files.pythonhosted.org/packages/3f/65/8de0bdb6839cd729df79d930515567c0a4dbed10eed302e15c61e7f9bc41/aiomisc-5.0.0.tar.gz", "yanked": false}], "5.1.3": [{"comment_text": "", "digests": {"md5": "db095ba0f77e682d58e74dd0dcaab3f0", "sha256": "41ba1f83796ce40f07c3f7ad0cc906a87701393d78329801869c0a23f564a5a7"}, "downloads": -1, "filename": "aiomisc-5.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "db095ba0f77e682d58e74dd0dcaab3f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34300, "upload_time": "2019-01-19T22:18:36", "upload_time_iso_8601": "2019-01-19T22:18:36.462237Z", "url": "https://files.pythonhosted.org/packages/40/bd/aa1fdf9d3c304401d4854b9ffedd7db3edb08a1657878d322d65beb02038/aiomisc-5.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6177cc5e6f816673f4aa008c1046d295", "sha256": "c9aeca786fa5804c18f1ee4334bfe5a710878e36c4b411c0e256ab160685644d"}, "downloads": -1, "filename": "aiomisc-5.1.3.tar.gz", "has_sig": false, "md5_digest": "6177cc5e6f816673f4aa008c1046d295", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29696, "upload_time": "2019-01-19T22:18:37", "upload_time_iso_8601": "2019-01-19T22:18:37.901035Z", "url": "https://files.pythonhosted.org/packages/fd/f3/de4be58b8b11926bcc54aeb5dfc8869585c04b71a044e7bee0ea95eeb2ea/aiomisc-5.1.3.tar.gz", "yanked": false}], "5.1.4": [{"comment_text": "", "digests": {"md5": "fdf83517acc3287761ffac8391b93006", "sha256": "1ccece20cfab35fa642bb5f75dee41a2b7760485bc50fb0eba266a52a495ef81"}, "downloads": -1, "filename": "aiomisc-5.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fdf83517acc3287761ffac8391b93006", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34302, "upload_time": "2019-01-22T10:26:32", "upload_time_iso_8601": "2019-01-22T10:26:32.173339Z", "url": "https://files.pythonhosted.org/packages/6b/ac/41e77352889ac74e719ed318c000870dbd0fc6dfb73fa601348d4bf3fb48/aiomisc-5.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "744d2f99b068450c71c9fdbf77e65115", "sha256": "59df442413b525f0f2c7651393a230efc06e0600735e368b07810f041f579f76"}, "downloads": -1, "filename": "aiomisc-5.1.4.tar.gz", "has_sig": false, "md5_digest": "744d2f99b068450c71c9fdbf77e65115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30922, "upload_time": "2019-01-22T10:26:33", "upload_time_iso_8601": "2019-01-22T10:26:33.804562Z", "url": "https://files.pythonhosted.org/packages/08/74/8c839fcf102afb719d0677f47c5187e061a2295efe0e1c27dd30c06a1316/aiomisc-5.1.4.tar.gz", "yanked": false}], "5.1.5": [{"comment_text": "", "digests": {"md5": "b96432b0f290145fc6672c413d8adcab", "sha256": "7a9b1dcdf37f4a86a975532ef27bd82af39f64f5dda40391f524491646844714"}, "downloads": -1, "filename": "aiomisc-5.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b96432b0f290145fc6672c413d8adcab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34312, "upload_time": "2019-01-22T10:34:43", "upload_time_iso_8601": "2019-01-22T10:34:43.835028Z", "url": "https://files.pythonhosted.org/packages/7b/54/84a9f63abc108749f7eff635aabbcd27e722339d37e3cdeb72b1a8964281/aiomisc-5.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1bfda645ee96938d0e1439bf17dac5a", "sha256": "f4b0c58d410a9c207c7e7bf65358c0d4bdcd123bc5ffa56df16222339ae22c3d"}, "downloads": -1, "filename": "aiomisc-5.1.5.tar.gz", "has_sig": false, "md5_digest": "a1bfda645ee96938d0e1439bf17dac5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29707, "upload_time": "2019-01-22T10:34:46", "upload_time_iso_8601": "2019-01-22T10:34:46.095561Z", "url": "https://files.pythonhosted.org/packages/7c/c1/9c2a7b37cf3780d57de383f75a6dd135bad3d8568011d3898ddad9d191f7/aiomisc-5.1.5.tar.gz", "yanked": false}], "5.1.6": [{"comment_text": "", "digests": {"md5": "8369c45c608218159acca008ddbdc16e", "sha256": "c237ad4f4b097c52d4dd47de9fdb70a33d42adcb464007f31cf964ee6add2445"}, "downloads": -1, "filename": "aiomisc-5.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8369c45c608218159acca008ddbdc16e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34312, "upload_time": "2019-01-22T10:38:30", "upload_time_iso_8601": "2019-01-22T10:38:30.174964Z", "url": "https://files.pythonhosted.org/packages/db/a2/b6843ab94314fa8de99d63ce186dffb7ad7d085435c0dc1fe5029b09b09f/aiomisc-5.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb2ecdd834ad6b1ab3ad683c6962a25c", "sha256": "3a27544ea2bb94ff92aab16eaedf826fb46f58aa9a9d6050ca78c07b854c220d"}, "downloads": -1, "filename": "aiomisc-5.1.6.tar.gz", "has_sig": false, "md5_digest": "bb2ecdd834ad6b1ab3ad683c6962a25c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30923, "upload_time": "2019-01-22T10:38:31", "upload_time_iso_8601": "2019-01-22T10:38:31.831299Z", "url": "https://files.pythonhosted.org/packages/6c/9f/3cf52a53cf498d9b33ed232d84d5b889b0ede9494ccd31bc08b55031fe2f/aiomisc-5.1.6.tar.gz", "yanked": false}], "5.2.0": [{"comment_text": "", "digests": {"md5": "b21ba32b6a3a72a3459ea1cded531b5e", "sha256": "9bb63928c5f996044681a00ce960d898b5073ea49eacb436979eba1b11b64bbb"}, "downloads": -1, "filename": "aiomisc-5.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b21ba32b6a3a72a3459ea1cded531b5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34348, "upload_time": "2019-01-22T11:39:40", "upload_time_iso_8601": "2019-01-22T11:39:40.828161Z", "url": "https://files.pythonhosted.org/packages/7c/5d/ab1072ff8122ba6f85de3716b3a63c3b5333250ef5f038027010085b8133/aiomisc-5.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c48e7d22850b5e09270b01f84cad536", "sha256": "4b4e3dbb7d76b38d0bb776d864ed4a3a2a3d169be92fc92d33da108439cb19d0"}, "downloads": -1, "filename": "aiomisc-5.2.0.tar.gz", "has_sig": false, "md5_digest": "7c48e7d22850b5e09270b01f84cad536", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29209, "upload_time": "2019-01-22T11:39:42", "upload_time_iso_8601": "2019-01-22T11:39:42.451216Z", "url": "https://files.pythonhosted.org/packages/30/c4/ba8e6238dd359b95777cac8437cfbaede05b621d5c66e883e6259fa7bce2/aiomisc-5.2.0.tar.gz", "yanked": false}], "5.2.1": [{"comment_text": "", "digests": {"md5": "a46d212ad51428dcb022edbb19c89b8e", "sha256": "ec8f78eaa683417f12e06426652482e9fcf59594f0f94b92208d7cf000cdc6e7"}, "downloads": -1, "filename": "aiomisc-5.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a46d212ad51428dcb022edbb19c89b8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34352, "upload_time": "2019-01-22T11:42:54", "upload_time_iso_8601": "2019-01-22T11:42:54.381966Z", "url": "https://files.pythonhosted.org/packages/59/90/466ab58d84bef18c287a098a3700689cf08a1ba71151019591f2c04b1c96/aiomisc-5.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03bf4bda077c6f330b2ff42e2f40f651", "sha256": "8f3181a620b8e2cac917874298596a0dee2c8b7332a90e71569497c878c22d80"}, "downloads": -1, "filename": "aiomisc-5.2.1.tar.gz", "has_sig": false, "md5_digest": "03bf4bda077c6f330b2ff42e2f40f651", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29782, "upload_time": "2019-01-22T11:42:56", "upload_time_iso_8601": "2019-01-22T11:42:56.337831Z", "url": "https://files.pythonhosted.org/packages/ed/b5/8b43877a308a358ced1045d57de52566b6f3eb2fa765b1aec97373b7f5af/aiomisc-5.2.1.tar.gz", "yanked": false}], "5.2.2": [{"comment_text": "", "digests": {"md5": "b28039994c6214962c04ed98616ef59e", "sha256": "9e7b6be80ca8b07f0c722a41c223f6a4f7c5685551efae9fd7ca1fd6cf88da03"}, "downloads": -1, "filename": "aiomisc-5.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b28039994c6214962c04ed98616ef59e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34342, "upload_time": "2019-01-22T14:55:19", "upload_time_iso_8601": "2019-01-22T14:55:19.282344Z", "url": "https://files.pythonhosted.org/packages/b3/5b/8e3210e39b23552f5418e655276255373acf84e6565a38754606d683643a/aiomisc-5.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7942d7b2c0787c9a63be0689cfcc0b5f", "sha256": "443b404ab20f0afa08f45302d233e04cc7eafea8b51fd9b8925315a8f7d00691"}, "downloads": -1, "filename": "aiomisc-5.2.2.tar.gz", "has_sig": false, "md5_digest": "7942d7b2c0787c9a63be0689cfcc0b5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30952, "upload_time": "2019-01-22T14:55:21", "upload_time_iso_8601": "2019-01-22T14:55:21.109636Z", "url": "https://files.pythonhosted.org/packages/5e/f0/c4089c6d2a4117ae09dad7cc1a48cdb5ecf51b16454d730707aab7636a38/aiomisc-5.2.2.tar.gz", "yanked": false}], "5.2.3": [{"comment_text": "", "digests": {"md5": "9f51152f9cd82f664655e0d5b288c82b", "sha256": "8bfdf647b4d55e9cd46f9350e47a348e23aa43089e1f636d9f4cfae101e960b9"}, "downloads": -1, "filename": "aiomisc-5.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9f51152f9cd82f664655e0d5b288c82b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34589, "upload_time": "2019-01-23T09:58:21", "upload_time_iso_8601": "2019-01-23T09:58:21.996591Z", "url": "https://files.pythonhosted.org/packages/92/87/9e016aeb2716785f0b9cf21e3d793f5592734b17722f5abb7d289721a7b0/aiomisc-5.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a2a433ca290f1365938449cb990558d", "sha256": "5e770e269c607d37786b4989f45496e5f5920450228d13fd6954b536bca57b80"}, "downloads": -1, "filename": "aiomisc-5.2.3.tar.gz", "has_sig": false, "md5_digest": "0a2a433ca290f1365938449cb990558d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29378, "upload_time": "2019-01-23T09:58:23", "upload_time_iso_8601": "2019-01-23T09:58:23.430642Z", "url": "https://files.pythonhosted.org/packages/7a/d1/b0f5e60ed75acfb7239344a59164ad856d46fa6d13ac44dd2e0e055ab085/aiomisc-5.2.3.tar.gz", "yanked": false}], "5.2.5": [{"comment_text": "", "digests": {"md5": "ccf0028d04f03732d2a92c46f09db561", "sha256": "6f26a92b0b7da6d9fcf433e5b9621e7fefcbc8a2b26f27056ec3661fc7404c10"}, "downloads": -1, "filename": "aiomisc-5.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ccf0028d04f03732d2a92c46f09db561", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34634, "upload_time": "2019-01-23T14:35:45", "upload_time_iso_8601": "2019-01-23T14:35:45.789167Z", "url": "https://files.pythonhosted.org/packages/00/d4/0b103e3117afbcc42e7c6e9099fb1263f483fc50f7593d390f4eb13fb857/aiomisc-5.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c6e72cdd916a079457cbeff7937331f", "sha256": "9016dbe5d0a0ae557195f5dcb47839498a33dd80fcf78af15f9b0505f8618dbf"}, "downloads": -1, "filename": "aiomisc-5.2.5.tar.gz", "has_sig": false, "md5_digest": "6c6e72cdd916a079457cbeff7937331f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29426, "upload_time": "2019-01-23T14:35:47", "upload_time_iso_8601": "2019-01-23T14:35:47.301524Z", "url": "https://files.pythonhosted.org/packages/80/8d/f1637cc5c9a3d5b086df25fb14fd9f6b79a392a15ea2502888d4dd0d7a07/aiomisc-5.2.5.tar.gz", "yanked": false}], "5.3.0": [{"comment_text": "", "digests": {"md5": "bfd3ec1bd479d2bd65bd3b7ea164e2c2", "sha256": "a3bc5567e28341cb29d9ac7c819379be2fbf46f39f539297a43585b1de0ff274"}, "downloads": -1, "filename": "aiomisc-5.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bfd3ec1bd479d2bd65bd3b7ea164e2c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34749, "upload_time": "2019-01-30T15:47:57", "upload_time_iso_8601": "2019-01-30T15:47:57.045644Z", "url": "https://files.pythonhosted.org/packages/4d/bc/9dba9a60a780478c893f8e9894ee481dfcf99be5ebd82ce6ff80d4e7bdba/aiomisc-5.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a5eea1ce5341c6bccb59a76a3011876", "sha256": "1ad90c1189ceefc290366915ca0de58a6e7987fb2caf837c7f60669ba3a621c6"}, "downloads": -1, "filename": "aiomisc-5.3.0.tar.gz", "has_sig": false, "md5_digest": "6a5eea1ce5341c6bccb59a76a3011876", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29961, "upload_time": "2019-01-30T15:47:58", "upload_time_iso_8601": "2019-01-30T15:47:58.901702Z", "url": "https://files.pythonhosted.org/packages/6d/70/3c7216de72ff4d033191b9ec83658727651e529bca907e6faab197d6ce60/aiomisc-5.3.0.tar.gz", "yanked": false}], "5.3.2": [{"comment_text": "", "digests": {"md5": "5dfb42666772fa6e6bbf4e47c18f0b78", "sha256": "5fa6fc2ccf7b5d552edbc59d6c765b975d870112277c9785d929a2e25118a960"}, "downloads": -1, "filename": "aiomisc-5.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5dfb42666772fa6e6bbf4e47c18f0b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34763, "upload_time": "2019-02-06T11:21:44", "upload_time_iso_8601": "2019-02-06T11:21:44.798194Z", "url": "https://files.pythonhosted.org/packages/83/0f/7d58f09aae1c5cedc1bbe49ef961787a6d9c47274b9bc6fa7ef1b48ffa84/aiomisc-5.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "544698fc585d4f06e8f5299032cc6c43", "sha256": "128a960e8da32add3daaeb30ad089e9b0cdb9443cdb3703e141b142391835f62"}, "downloads": -1, "filename": "aiomisc-5.3.2.tar.gz", "has_sig": false, "md5_digest": "544698fc585d4f06e8f5299032cc6c43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31357, "upload_time": "2019-02-06T11:21:46", "upload_time_iso_8601": "2019-02-06T11:21:46.941085Z", "url": "https://files.pythonhosted.org/packages/d4/4c/c425c83102ac7c33329cc1168dd91d2acf7892956cd211edd1974b38267d/aiomisc-5.3.2.tar.gz", "yanked": false}], "5.3.4": [{"comment_text": "", "digests": {"md5": "b36675f69da7baf32ecf5e686c02a275", "sha256": "de686a46830148fb847e9ca09bcfe8d6c8a9f2e74d2f8cb00b5b3f194f364fc3"}, "downloads": -1, "filename": "aiomisc-5.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b36675f69da7baf32ecf5e686c02a275", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34763, "upload_time": "2019-02-06T11:22:42", "upload_time_iso_8601": "2019-02-06T11:22:42.734770Z", "url": "https://files.pythonhosted.org/packages/09/da/fa382cd2d90f414940a47fac2c9ae32f8eace9bcf583bba2a9a84cae2b65/aiomisc-5.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a498d8eda4b9d339e70d2ba307c85f5", "sha256": "12966fe60831e44d6e1b07d79ce896112ec1d0ede211fed03fee4836e921da2b"}, "downloads": -1, "filename": "aiomisc-5.3.4.tar.gz", "has_sig": false, "md5_digest": "6a498d8eda4b9d339e70d2ba307c85f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30291, "upload_time": "2019-02-06T11:22:44", "upload_time_iso_8601": "2019-02-06T11:22:44.336169Z", "url": "https://files.pythonhosted.org/packages/05/f8/a56f96bbcab3ed9f716e141fb6460c1929ebe09582deebb0867f38044ee8/aiomisc-5.3.4.tar.gz", "yanked": false}], "5.4.0": [{"comment_text": "", "digests": {"md5": "73af70b02ee1b3775903b9ce24d957fd", "sha256": "ebb875765037975ee1e1780a489224fa3edc788cd3d5f49a36672f2c6730aa2a"}, "downloads": -1, "filename": "aiomisc-5.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "73af70b02ee1b3775903b9ce24d957fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35032, "upload_time": "2019-02-07T19:10:16", "upload_time_iso_8601": "2019-02-07T19:10:16.679751Z", "url": "https://files.pythonhosted.org/packages/12/8b/c281c8fb52dacfa6c8658b2dbf34d7aa9a3902c920ca8edc85d8ed4f9519/aiomisc-5.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4818e310bbdfb6aebb4ac56e253ed48", "sha256": "07ceb10449a2a2b4dc349a344b41604bf4d481fd811c6fcd16ec848f9eef928b"}, "downloads": -1, "filename": "aiomisc-5.4.0.tar.gz", "has_sig": false, "md5_digest": "c4818e310bbdfb6aebb4ac56e253ed48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30886, "upload_time": "2019-02-07T19:10:18", "upload_time_iso_8601": "2019-02-07T19:10:18.250849Z", "url": "https://files.pythonhosted.org/packages/9d/5e/65bdd2fe0ea309188b54b3d5d8c26da7853273015e1b4ef475e93719fb1a/aiomisc-5.4.0.tar.gz", "yanked": false}], "5.4.10": [{"comment_text": "", "digests": {"md5": "bacbc8232ad0c4d94771c4b6f81a6a4c", "sha256": "f9f84cece08aea590fbb7abce93ba8b1a03942c8e3e1b23f14dee96c5b84c1e6"}, "downloads": -1, "filename": "aiomisc-5.4.10-py3-none-any.whl", "has_sig": false, "md5_digest": "bacbc8232ad0c4d94771c4b6f81a6a4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27885, "upload_time": "2019-02-15T14:21:48", "upload_time_iso_8601": "2019-02-15T14:21:48.729883Z", "url": "https://files.pythonhosted.org/packages/47/6b/38e9dad026f7298395e93e1d1d484db85e7b1f9e0cdb6e87bff127411d07/aiomisc-5.4.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd9acc252213d0f888418b8c400795bd", "sha256": "66256219d82bbdc9264c5250faebc822c441e2c285e7facff995b0e54c12cbb0"}, "downloads": -1, "filename": "aiomisc-5.4.10.tar.gz", "has_sig": false, "md5_digest": "fd9acc252213d0f888418b8c400795bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29539, "upload_time": "2019-02-15T14:21:50", "upload_time_iso_8601": "2019-02-15T14:21:50.449054Z", "url": "https://files.pythonhosted.org/packages/56/fe/d6da27e02102aa3d30c5b83da3ca01621b32c421ba232a873b1821e0a352/aiomisc-5.4.10.tar.gz", "yanked": false}], "5.4.14": [{"comment_text": "", "digests": {"md5": "6fb527cc63088067741198070c2b8aa8", "sha256": "ede0b7298d94db86ea0e8110438da22d2a56de4a330992a1e73b92630259b5ce"}, "downloads": -1, "filename": "aiomisc-5.4.14-py3-none-any.whl", "has_sig": false, "md5_digest": "6fb527cc63088067741198070c2b8aa8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28056, "upload_time": "2019-02-19T10:27:29", "upload_time_iso_8601": "2019-02-19T10:27:29.663861Z", "url": "https://files.pythonhosted.org/packages/51/51/9c2d9628a77491f4b211c1ee1e4c63fc223b65f79182e297ebf4828f4abd/aiomisc-5.4.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e3fbdb844512d3e6e6abf31e9cdc6cd", "sha256": "ce1f4af2ca9dadcb5e508c869f5f268cdfacf1221964d7ec49dba5591387f259"}, "downloads": -1, "filename": "aiomisc-5.4.14.tar.gz", "has_sig": false, "md5_digest": "8e3fbdb844512d3e6e6abf31e9cdc6cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29709, "upload_time": "2019-02-19T10:27:31", "upload_time_iso_8601": "2019-02-19T10:27:31.398782Z", "url": "https://files.pythonhosted.org/packages/4b/81/fc7a291df42a565be9a9e87105326b4efa588a775a639a4d591b7f4d4af7/aiomisc-5.4.14.tar.gz", "yanked": false}], "5.4.16": [{"comment_text": "", "digests": {"md5": "62a7a1f156ae3dc3792577b5c7fbfcc6", "sha256": "d802b2758385c8759a4c7fbb8b7d21a7e438cbad1a47460ac3f403a7b6429805"}, "downloads": -1, "filename": "aiomisc-5.4.16-py3-none-any.whl", "has_sig": false, "md5_digest": "62a7a1f156ae3dc3792577b5c7fbfcc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28079, "upload_time": "2019-02-27T17:30:41", "upload_time_iso_8601": "2019-02-27T17:30:41.388470Z", "url": "https://files.pythonhosted.org/packages/8d/32/0022f5415280eb989c298319a4bba7804184c7adb3ff1acd48d0de94e7f8/aiomisc-5.4.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73a96dd77aeddfe673709baea26b8eba", "sha256": "ba1aecf8206559875901750f585b5ead01c297be458ee8886356fb90f8c71cee"}, "downloads": -1, "filename": "aiomisc-5.4.16.tar.gz", "has_sig": false, "md5_digest": "73a96dd77aeddfe673709baea26b8eba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29739, "upload_time": "2019-02-27T17:30:43", "upload_time_iso_8601": "2019-02-27T17:30:43.447793Z", "url": "https://files.pythonhosted.org/packages/c3/0e/273a0165bbadc239dcc5115f5a94b676943a729d8e07a001b272c160251d/aiomisc-5.4.16.tar.gz", "yanked": false}], "5.4.20": [{"comment_text": "", "digests": {"md5": "c741ba9cc7c3b133311e6b72de8865d4", "sha256": "7a061718a0132646454cd841049fe5bdc0d9ec99666674267176b8f67d1af181"}, "downloads": -1, "filename": "aiomisc-5.4.20-py3-none-any.whl", "has_sig": false, "md5_digest": "c741ba9cc7c3b133311e6b72de8865d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28695, "upload_time": "2019-02-28T22:20:15", "upload_time_iso_8601": "2019-02-28T22:20:15.393509Z", "url": "https://files.pythonhosted.org/packages/f6/b2/c08fac9c724a466aff9181e9dfa985d062ab0b0df7ae2f3babd04f3a0881/aiomisc-5.4.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2947953f895c305122ffb3f678278765", "sha256": "34ad6c5f29078383b98db61e1e0855c59ed536e82abe4bf35311136ed68226bc"}, "downloads": -1, "filename": "aiomisc-5.4.20.tar.gz", "has_sig": false, "md5_digest": "2947953f895c305122ffb3f678278765", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32819, "upload_time": "2019-02-28T22:20:17", "upload_time_iso_8601": "2019-02-28T22:20:17.484131Z", "url": "https://files.pythonhosted.org/packages/c9/41/20aad573e14c79227166b0071dd267435cd3711ad41d08a9fbd9e38c1ebf/aiomisc-5.4.20.tar.gz", "yanked": false}], "5.4.26": [{"comment_text": "", "digests": {"md5": "f93f2bae90eef424de9bef955d6435c0", "sha256": "169e09b2b990207c81c94fc677e422c637a2165e455d07568561db1164162529"}, "downloads": -1, "filename": "aiomisc-5.4.26-py3-none-any.whl", "has_sig": false, "md5_digest": "f93f2bae90eef424de9bef955d6435c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28770, "upload_time": "2019-03-18T14:42:14", "upload_time_iso_8601": "2019-03-18T14:42:14.444305Z", "url": "https://files.pythonhosted.org/packages/04/dc/32bf2092f95e3f2268bc33a24a6096202538c5e329da395d13990d218183/aiomisc-5.4.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca027d546a7a6d1ccd882120530ee065", "sha256": "8eac630eced48dde256f0659a17b67d8cf95da65ee6bfdcb1049ad57d470fb15"}, "downloads": -1, "filename": "aiomisc-5.4.26.tar.gz", "has_sig": false, "md5_digest": "ca027d546a7a6d1ccd882120530ee065", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32866, "upload_time": "2019-03-18T14:42:16", "upload_time_iso_8601": "2019-03-18T14:42:16.830702Z", "url": "https://files.pythonhosted.org/packages/ee/75/27c6a7f789a6e7eaf451c0fa74e73bacaacbf637a65d44fbffbe4ae06c1a/aiomisc-5.4.26.tar.gz", "yanked": false}], "5.4.29": [{"comment_text": "", "digests": {"md5": "694715655176dbdce20b1d349ce27d6c", "sha256": "2d620a3a76bd2e5d971ac18960b44d8d948170622773d0c198940ab6a7dbaba1"}, "downloads": -1, "filename": "aiomisc-5.4.29-py3-none-any.whl", "has_sig": false, "md5_digest": "694715655176dbdce20b1d349ce27d6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30463, "upload_time": "2019-03-28T18:48:30", "upload_time_iso_8601": "2019-03-28T18:48:30.627822Z", "url": "https://files.pythonhosted.org/packages/9e/ba/6ab9ddf401595add93ad9d035c5529e0edfd6e52c71fe8b6bcea06cd8fb9/aiomisc-5.4.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5af90c34e6b0d594a1325c3f1f0c434", "sha256": "3c9d3dfa61bd7b10ed5a371ce4707f8aac8e847ab8c4c1ffbcdf62b001f74eae"}, "downloads": -1, "filename": "aiomisc-5.4.29.tar.gz", "has_sig": false, "md5_digest": "f5af90c34e6b0d594a1325c3f1f0c434", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32651, "upload_time": "2019-03-28T18:48:32", "upload_time_iso_8601": "2019-03-28T18:48:32.647179Z", "url": "https://files.pythonhosted.org/packages/82/c0/49b76ce6883cc827c7d5af243d0e0ad2133dc665a09a68fe0ecbd93e45f4/aiomisc-5.4.29.tar.gz", "yanked": false}], "5.4.8": [{"comment_text": "", "digests": {"md5": "f9c7b2f7bb1dd2098d6f9594bb163bda", "sha256": "b70ae8a2040c73ec249c262409ca029cad9052fc651279ad02b09f05ef12064f"}, "downloads": -1, "filename": "aiomisc-5.4.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f9c7b2f7bb1dd2098d6f9594bb163bda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27870, "upload_time": "2019-02-15T07:04:15", "upload_time_iso_8601": "2019-02-15T07:04:15.597036Z", "url": "https://files.pythonhosted.org/packages/a2/6f/e85e1783719b1852353328235293c60cfa6abdb4c6b2dd29757e5905fa2f/aiomisc-5.4.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3aa90c8129b77ff69d70d7fde2424dd2", "sha256": "11cf1330553555800f1a76fc6f80b83ba36814baee1eafe1794ffec9095fd463"}, "downloads": -1, "filename": "aiomisc-5.4.8.tar.gz", "has_sig": false, "md5_digest": "3aa90c8129b77ff69d70d7fde2424dd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29535, "upload_time": "2019-02-15T07:04:17", "upload_time_iso_8601": "2019-02-15T07:04:17.840969Z", "url": "https://files.pythonhosted.org/packages/f0/d0/441a648fb4466191080410cd2a9e59549a63a26816315ab745f4eae607f5/aiomisc-5.4.8.tar.gz", "yanked": false}], "5.4.9": [{"comment_text": "", "digests": {"md5": "489596246f1cff984a2a983afff9d62e", "sha256": "b9adbd7a54e8c19762b748f4e7a419d1e79da02358f78097273dc825ac091b4d"}, "downloads": -1, "filename": "aiomisc-5.4.9-py3-none-any.whl", "has_sig": false, "md5_digest": "489596246f1cff984a2a983afff9d62e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27873, "upload_time": "2019-02-15T07:07:58", "upload_time_iso_8601": "2019-02-15T07:07:58.466118Z", "url": "https://files.pythonhosted.org/packages/77/80/9431a38f7907b5daa85db2f6e762e559566d651218836f407eadffee114f/aiomisc-5.4.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f48fe46bf231ee1f18360b86ee5e37ba", "sha256": "11b9a966824257c87fa004deb077713cb81153e7f152b237ab7077e6699a651e"}, "downloads": -1, "filename": "aiomisc-5.4.9.tar.gz", "has_sig": false, "md5_digest": "f48fe46bf231ee1f18360b86ee5e37ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29534, "upload_time": "2019-02-15T07:08:00", "upload_time_iso_8601": "2019-02-15T07:08:00.539720Z", "url": "https://files.pythonhosted.org/packages/6d/9d/bba67ba8d948ba990d22ca99de2830f95ec85035a3ae395c025af1b86506/aiomisc-5.4.9.tar.gz", "yanked": false}], "5.5.1": [{"comment_text": "", "digests": {"md5": "35b27d159ee52592dfa7f1e3d383d2fa", "sha256": "106c265753c931396f6d688d1b3ff5423b8b30cb1a9b53e1ba71b2fac8857d0e"}, "downloads": -1, "filename": "aiomisc-5.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "35b27d159ee52592dfa7f1e3d383d2fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28922, "upload_time": "2019-04-03T07:55:10", "upload_time_iso_8601": "2019-04-03T07:55:10.706404Z", "url": "https://files.pythonhosted.org/packages/4a/82/6ca1cac91f0e987d187bbad15243e69b6df1f2e7be9652a553d0cbe86a8e/aiomisc-5.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c263760d77b0830080926f0295b3c6bb", "sha256": "9becb452eef72c80eede27fb8d72cffb429a4aec1f8911c1c739e6438daf5c10"}, "downloads": -1, "filename": "aiomisc-5.5.1.tar.gz", "has_sig": false, "md5_digest": "c263760d77b0830080926f0295b3c6bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30727, "upload_time": "2019-04-03T07:55:12", "upload_time_iso_8601": "2019-04-03T07:55:12.701694Z", "url": "https://files.pythonhosted.org/packages/de/88/b92d8f0fd27d6adc1458f43a66e31452e20757b0f41fffb06783ca3a78d6/aiomisc-5.5.1.tar.gz", "yanked": false}], "6.0.4": [{"comment_text": "", "digests": {"md5": "0d1856a95b21e4839941500927f2ed26", "sha256": "fa220ef9f39715010b5a27a5e1a86887230ad7681d1c73fe8ac48c0870757395"}, "downloads": -1, "filename": "aiomisc-6.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1856a95b21e4839941500927f2ed26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32199, "upload_time": "2019-04-10T08:14:42", "upload_time_iso_8601": "2019-04-10T08:14:42.110858Z", "url": "https://files.pythonhosted.org/packages/a3/69/86e31c3340ccfa0f8fa2a3ab6c47c1ec25f7382f673a092b4f5efbe1a33d/aiomisc-6.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "391568819ac78e03a575412167ef7ecf", "sha256": "c38d25010082f6015b81e05976b564d0b4b200db1c5e2e39fd582237c9ad1f15"}, "downloads": -1, "filename": "aiomisc-6.0.4.tar.gz", "has_sig": false, "md5_digest": "391568819ac78e03a575412167ef7ecf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35381, "upload_time": "2019-04-10T08:14:44", "upload_time_iso_8601": "2019-04-10T08:14:44.358785Z", "url": "https://files.pythonhosted.org/packages/a0/ec/3b9b0e63a1f786131214ccba3af226099f6f4b6fae03a31dc1b74c3e46ef/aiomisc-6.0.4.tar.gz", "yanked": false}], "6.0.6": [{"comment_text": "", "digests": {"md5": "19165043e7d521423d015bd785469fd5", "sha256": "7167b6bdbe9c6bd7ecbf3a4a07f0065ee37c6ae5d1562c68d5a83bc571ee3fc4"}, "downloads": -1, "filename": "aiomisc-6.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "19165043e7d521423d015bd785469fd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30508, "upload_time": "2019-04-29T15:28:06", "upload_time_iso_8601": "2019-04-29T15:28:06.055082Z", "url": "https://files.pythonhosted.org/packages/53/f7/3e422e8fc82a41995d2222d03ba79e7f3680872f2a27179d3fe25d5adfd4/aiomisc-6.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "545a415ab2ca24bf7d69326d1c3f1ece", "sha256": "0a4ea4c503a0ec0dd32ec439d5f43bb1024352d0e98dd6c1404a31db5717fb1b"}, "downloads": -1, "filename": "aiomisc-6.0.6.tar.gz", "has_sig": false, "md5_digest": "545a415ab2ca24bf7d69326d1c3f1ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32855, "upload_time": "2019-04-29T15:28:13", "upload_time_iso_8601": "2019-04-29T15:28:13.417945Z", "url": "https://files.pythonhosted.org/packages/0d/bb/b75e14caedfe418e302c80451f0083db71a969ae2faacd6503e502194c8c/aiomisc-6.0.6.tar.gz", "yanked": false}], "7.0.1": [{"comment_text": "", "digests": {"md5": "4d53bee94898af78c1f61b00be8456da", "sha256": "39697b7f0fe2ac2e922fbccfe1350e606576a02c87250739eff51fa88cdc8d5b"}, "downloads": -1, "filename": "aiomisc-7.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d53bee94898af78c1f61b00be8456da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30826, "upload_time": "2019-05-07T18:39:38", "upload_time_iso_8601": "2019-05-07T18:39:38.833536Z", "url": "https://files.pythonhosted.org/packages/09/82/cdffdb6d75832bb37636723f10985c712b2a1c0a7a08c446b3b18a3b3bf4/aiomisc-7.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc44322b49c152b698a4439625d69373", "sha256": "9038b87bccadb01a0307b0f593b0670d60afc0c5ff72ee6dd6ae947cadf9caae"}, "downloads": -1, "filename": "aiomisc-7.0.1.tar.gz", "has_sig": false, "md5_digest": "dc44322b49c152b698a4439625d69373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33151, "upload_time": "2019-05-07T18:39:40", "upload_time_iso_8601": "2019-05-07T18:39:40.938806Z", "url": "https://files.pythonhosted.org/packages/fc/54/97cffcb9ad77ccf0b55d71eea955ade46117257d7ebb294a22277298e872/aiomisc-7.0.1.tar.gz", "yanked": false}], "7.0.3": [{"comment_text": "", "digests": {"md5": "caed69af6f14bd3324df6b1806e37a0a", "sha256": "a18eda8bf7769cd8d78e16f7a4d182378242f2f646e9b83c6f41c01efd578712"}, "downloads": -1, "filename": "aiomisc-7.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "caed69af6f14bd3324df6b1806e37a0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31824, "upload_time": "2019-05-08T05:56:52", "upload_time_iso_8601": "2019-05-08T05:56:52.297399Z", "url": "https://files.pythonhosted.org/packages/87/29/037714a59408d8e3b39f0f4428be3101ad39e40e202eb80584ea151532ed/aiomisc-7.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a99d7943d443d5f6a10cb6fdea73a35f", "sha256": "3548cb356a80fde48620336810da047df0b54469bb852f21ee0abc8c73222c62"}, "downloads": -1, "filename": "aiomisc-7.0.3.tar.gz", "has_sig": false, "md5_digest": "a99d7943d443d5f6a10cb6fdea73a35f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33456, "upload_time": "2019-05-08T05:56:54", "upload_time_iso_8601": "2019-05-08T05:56:54.838709Z", "url": "https://files.pythonhosted.org/packages/9b/ef/fa7446f8ea4925829b0cafcba96db7eca28aa6281f004cdbabd5ef2333be/aiomisc-7.0.3.tar.gz", "yanked": false}], "7.1.0": [{"comment_text": "", "digests": {"md5": "d228bd410c5f2c4f0cb9d0b75a42dfaf", "sha256": "96a41d94c0cc308f5e5c3ac43c7dccc1012753c246a6c464bb94b5e597ac9fbd"}, "downloads": -1, "filename": "aiomisc-7.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d228bd410c5f2c4f0cb9d0b75a42dfaf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34719, "upload_time": "2019-05-13T08:07:57", "upload_time_iso_8601": "2019-05-13T08:07:57.615665Z", "url": "https://files.pythonhosted.org/packages/b9/b3/279e75d332cf29b71553cb0f4689192391cf86b67f8dec35747a06579ffa/aiomisc-7.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f1743a94f7b53b3e950b32cf6636521", "sha256": "d0e6a5a2fbaade35a5e9196752aa346af0f63829884a1d7ac694d6d087385790"}, "downloads": -1, "filename": "aiomisc-7.1.0.tar.gz", "has_sig": false, "md5_digest": "7f1743a94f7b53b3e950b32cf6636521", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42399, "upload_time": "2019-05-13T08:08:00", "upload_time_iso_8601": "2019-05-13T08:08:00.717803Z", "url": "https://files.pythonhosted.org/packages/6a/26/5b1489c289cf2b529389efeb259f182061cf013be1986b058a0d7a1f6a41/aiomisc-7.1.0.tar.gz", "yanked": false}], "7.2.0": [{"comment_text": "", "digests": {"md5": "2dd18e9c2d63cf2dd2b047945224e0ca", "sha256": "a1bb18128ff5b4a5611a1f1a5deca9cd09451bf7825e805b2acee2eb293c708f"}, "downloads": -1, "filename": "aiomisc-7.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2dd18e9c2d63cf2dd2b047945224e0ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37473, "upload_time": "2019-05-16T14:54:44", "upload_time_iso_8601": "2019-05-16T14:54:44.901516Z", "url": "https://files.pythonhosted.org/packages/59/60/b08d6c613881cb08d7573998b6ee7d3c5824611efd1c9a356bb387665923/aiomisc-7.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caeef56d7638c114b0e52a59c18e0bd7", "sha256": "beb02d09a2b59266a4a09dd651a7f2fe32ae15775be9311952d455b5ecd55ca4"}, "downloads": -1, "filename": "aiomisc-7.2.0.tar.gz", "has_sig": false, "md5_digest": "caeef56d7638c114b0e52a59c18e0bd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43852, "upload_time": "2019-05-16T14:54:47", "upload_time_iso_8601": "2019-05-16T14:54:47.886859Z", "url": "https://files.pythonhosted.org/packages/4e/0d/179837113aa45493a7514d78c32ec6c735a4eb3b611ab69f9d02d26076f9/aiomisc-7.2.0.tar.gz", "yanked": false}], "7.2.5": [{"comment_text": "", "digests": {"md5": "fedce5eec4bf9731c5070039b3d4e10d", "sha256": "2a9b26f7f528c9332a03c7de96441780266af211dc1534dd881835417d4732cd"}, "downloads": -1, "filename": "aiomisc-7.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fedce5eec4bf9731c5070039b3d4e10d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38194, "upload_time": "2019-05-22T22:18:12", "upload_time_iso_8601": "2019-05-22T22:18:12.211940Z", "url": "https://files.pythonhosted.org/packages/81/38/eb9053aacf7302d0dcff74be29f87476543ed00f74b868645c9759a10efa/aiomisc-7.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46c71ddbf2efc9c2f889afe45aa57e9f", "sha256": "ec2eab47614762e8fcce4270bbdce9a2881b3fc7fb72ba62a6bc6faacb3e7255"}, "downloads": -1, "filename": "aiomisc-7.2.5.tar.gz", "has_sig": false, "md5_digest": "46c71ddbf2efc9c2f889afe45aa57e9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44605, "upload_time": "2019-05-22T22:18:15", "upload_time_iso_8601": "2019-05-22T22:18:15.686317Z", "url": "https://files.pythonhosted.org/packages/89/fe/4955ce44602f373c0c9596005575d43deb2e5bb15629a5c2a6f48582f0e8/aiomisc-7.2.5.tar.gz", "yanked": false}], "8.0.0": [{"comment_text": "", "digests": {"md5": "954d6c651542016103b4df3c50b8892b", "sha256": "37cbaf1c296418a1fa5172c7fcb54512ad9495a95be8577aa97458e447960e50"}, "downloads": -1, "filename": "aiomisc-8.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "954d6c651542016103b4df3c50b8892b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36572, "upload_time": "2019-07-11T12:47:13", "upload_time_iso_8601": "2019-07-11T12:47:13.731013Z", "url": "https://files.pythonhosted.org/packages/5a/8a/2de68c9512858705bc4db03fbfe80ebb9d0f58f87531ee5cb55e313ff2d5/aiomisc-8.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eff6d2bb2122c11de543574ba5f7ae5d", "sha256": "79b86642b869edf9784c303f9cec1fa816785b137f891427487d8bb36f0a4fa5"}, "downloads": -1, "filename": "aiomisc-8.0.0.tar.gz", "has_sig": false, "md5_digest": "eff6d2bb2122c11de543574ba5f7ae5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44670, "upload_time": "2019-07-11T12:47:17", "upload_time_iso_8601": "2019-07-11T12:47:17.790169Z", "url": "https://files.pythonhosted.org/packages/86/f7/d4afa28349f1488cf397a9c7504f4b5f1dfa06c841e87a0100385b7de351/aiomisc-8.0.0.tar.gz", "yanked": false}], "8.0.1": [{"comment_text": "", "digests": {"md5": "7a005c1b09e550cb0db9eaf8621ab831", "sha256": "281f4329b78b7feea057b4e400819db1bab036ec83334b082ac080f4c000891f"}, "downloads": -1, "filename": "aiomisc-8.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7a005c1b09e550cb0db9eaf8621ab831", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38260, "upload_time": "2019-09-02T07:54:07", "upload_time_iso_8601": "2019-09-02T07:54:07.637103Z", "url": "https://files.pythonhosted.org/packages/27/f7/6eb7e5063ddd24fac0dd996bb0a8a27db36e49eebbdd3181c736926b1067/aiomisc-8.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caf0f71afad14e8d0e3dac6a994449e3", "sha256": "eee84de27645cbed40f3f6274623a9f97699943b45fc8763eb9f27907a384783"}, "downloads": -1, "filename": "aiomisc-8.0.1.tar.gz", "has_sig": false, "md5_digest": "caf0f71afad14e8d0e3dac6a994449e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44677, "upload_time": "2019-09-02T07:54:11", "upload_time_iso_8601": "2019-09-02T07:54:11.938784Z", "url": "https://files.pythonhosted.org/packages/52/40/c2a9fa24dee25abc7a2a1749fc0ef29100fe256fc742582114f60ffc9c2d/aiomisc-8.0.1.tar.gz", "yanked": false}], "8.0.3": [{"comment_text": "", "digests": {"md5": "7711aa0da1315bcb0550ef1749ea246c", "sha256": "6574707fbc2648ff307b2ce771c86cb801e1cb923e594118482efcb2b69e7373"}, "downloads": -1, "filename": "aiomisc-8.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7711aa0da1315bcb0550ef1749ea246c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38259, "upload_time": "2019-09-04T15:41:28", "upload_time_iso_8601": "2019-09-04T15:41:28.347881Z", "url": "https://files.pythonhosted.org/packages/d3/16/2df036a7b9f7cd55be3390fca80b727302c42c346bfe3973cdc89902310f/aiomisc-8.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "924b0f3050cee28026a59a927148f0a2", "sha256": "fda2a1ee1bfa018dfcdfa8332e94393d5c2601958059ffa625aea2f15130a478"}, "downloads": -1, "filename": "aiomisc-8.0.3.tar.gz", "has_sig": false, "md5_digest": "924b0f3050cee28026a59a927148f0a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44666, "upload_time": "2019-09-04T15:41:31", "upload_time_iso_8601": "2019-09-04T15:41:31.864506Z", "url": "https://files.pythonhosted.org/packages/90/d0/a1c4f11040d8032159cc3e9e451e70ef6d418609f74dda52e9361c4c6bc2/aiomisc-8.0.3.tar.gz", "yanked": false}], "9.2.0": [{"comment_text": "", "digests": {"md5": "72749b765c65f0f04600fbca324d6984", "sha256": "382bc946c37b58a2d42dca2b0fd311eb532968d43a5f86fefe238eac8a55b2ad"}, "downloads": -1, "filename": "aiomisc-9.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72749b765c65f0f04600fbca324d6984", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38028, "upload_time": "2019-10-01T12:40:59", "upload_time_iso_8601": "2019-10-01T12:40:59.189473Z", "url": "https://files.pythonhosted.org/packages/89/11/438d9df891574d3d2d9bf7a549f05ead73fce40479a385b1a1268d90106a/aiomisc-9.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a707a631a77e3319d0467ac4ef3bd7f", "sha256": "cfd1cb00178a6184f9269966333c8ced17b59c61da9c665b0a9f9ad66d9b33f2"}, "downloads": -1, "filename": "aiomisc-9.2.0.tar.gz", "has_sig": false, "md5_digest": "0a707a631a77e3319d0467ac4ef3bd7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47668, "upload_time": "2019-10-01T12:41:03", "upload_time_iso_8601": "2019-10-01T12:41:03.120857Z", "url": "https://files.pythonhosted.org/packages/ef/f4/057b02b612a5ff5a4f207fa66f74e214d823bcc78d51d2bf6321df36e188/aiomisc-9.2.0.tar.gz", "yanked": false}], "9.2.15": [{"comment_text": "", "digests": {"md5": "6e77d4b6456db40ea1c7198844b2e58e", "sha256": "01664cc419ee5c5d4fa9096a9c223719fa89d41e8c45e5da08157d2f0fa523c6"}, "downloads": -1, "filename": "aiomisc-9.2.15-py3-none-any.whl", "has_sig": false, "md5_digest": "6e77d4b6456db40ea1c7198844b2e58e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40341, "upload_time": "2019-10-25T12:49:25", "upload_time_iso_8601": "2019-10-25T12:49:25.014459Z", "url": "https://files.pythonhosted.org/packages/db/f5/b57f869ef5499c9ae74aeeb1cbb67ef5323bf86be5a189d177bdcbaa5abf/aiomisc-9.2.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "212d5826abc0a38863d3514bb13b513d", "sha256": "d48863ac952c810464b29079f851a92f1f3fba62c781e4630052bc051ca5e1b0"}, "downloads": -1, "filename": "aiomisc-9.2.15.tar.gz", "has_sig": false, "md5_digest": "212d5826abc0a38863d3514bb13b513d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49209, "upload_time": "2019-10-25T12:49:28", "upload_time_iso_8601": "2019-10-25T12:49:28.156752Z", "url": "https://files.pythonhosted.org/packages/62/24/7bf081cf12128abe8b4f730c382032af0e17e4b0ade5bfa6b937565cad5b/aiomisc-9.2.15.tar.gz", "yanked": false}], "9.2.4": [{"comment_text": "", "digests": {"md5": "f3cbf360b2510ff8af7c68107fe7db83", "sha256": "1b0e3b226f99e1bdadca1f326d318a6ef3e754f0a1ca8a1c97172240eb337322"}, "downloads": -1, "filename": "aiomisc-9.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f3cbf360b2510ff8af7c68107fe7db83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40029, "upload_time": "2019-10-16T20:38:23", "upload_time_iso_8601": "2019-10-16T20:38:23.328649Z", "url": "https://files.pythonhosted.org/packages/12/5d/4b5d270985deaf6bf2fc75214fd50e10c7b3c4a535a1d82ef2f9366f92c7/aiomisc-9.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb012b84265345acc12ec8c313835d52", "sha256": "fc46eb060dec421bd4ce5e32d1726c8588183ffdcdb3d212a4a208907e752177"}, "downloads": -1, "filename": "aiomisc-9.2.4.tar.gz", "has_sig": false, "md5_digest": "eb012b84265345acc12ec8c313835d52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48447, "upload_time": "2019-10-16T20:38:27", "upload_time_iso_8601": "2019-10-16T20:38:27.021267Z", "url": "https://files.pythonhosted.org/packages/8d/d5/e0c385dc90171667bee98778105df2468f1f95848b4e88b55ff7918875e6/aiomisc-9.2.4.tar.gz", "yanked": false}], "9.2.6": [{"comment_text": "", "digests": {"md5": "54d82842d04ce9056f62f7b7db1430f1", "sha256": "f236e449c88d5e7d1b468826658f1764e72d96ffd6469d957d4c6eb5f2fc48bd"}, "downloads": -1, "filename": "aiomisc-9.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "54d82842d04ce9056f62f7b7db1430f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40027, "upload_time": "2019-10-17T06:40:07", "upload_time_iso_8601": "2019-10-17T06:40:07.642781Z", "url": "https://files.pythonhosted.org/packages/1a/16/d3004ee001811f3a7e57e43607262655b6364d57d51396f0fc516cc2ea82/aiomisc-9.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6a510d10dc1c4fb6d23edbbf38b1eaf", "sha256": "d0be5eb1fc80838367aec31d696e4cae2c4f1e67eb0bf35e52adff566e2b457d"}, "downloads": -1, "filename": "aiomisc-9.2.6.tar.gz", "has_sig": false, "md5_digest": "c6a510d10dc1c4fb6d23edbbf38b1eaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48455, "upload_time": "2019-10-17T06:40:11", "upload_time_iso_8601": "2019-10-17T06:40:11.146775Z", "url": "https://files.pythonhosted.org/packages/7d/9a/a38e1278b4090d5eb57a4df8f1458c50e2cab5bdc6c9c6007b3b9e26cfc7/aiomisc-9.2.6.tar.gz", "yanked": false}], "9.2.7": [{"comment_text": "", "digests": {"md5": "b48530e01a5353d27646c4acfd4dbb7d", "sha256": "a4a8afde3e47dbf739c7389842c79492212b6db297cde520fe0b679a1fae6b6c"}, "downloads": -1, "filename": "aiomisc-9.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b48530e01a5353d27646c4acfd4dbb7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40181, "upload_time": "2019-10-24T18:03:35", "upload_time_iso_8601": "2019-10-24T18:03:35.127900Z", "url": "https://files.pythonhosted.org/packages/04/cb/a0e7543dcc36ef03ed88f7f2a5efb70cbd3037f66cdd4caafd5ad3c7376d/aiomisc-9.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50e75d51a6a07164642b932ebab499b0", "sha256": "7f5e65ec7c25a8bc66714c7bc0717926ce550040dc425316a9c6e685b93c165b"}, "downloads": -1, "filename": "aiomisc-9.2.7.tar.gz", "has_sig": false, "md5_digest": "50e75d51a6a07164642b932ebab499b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48868, "upload_time": "2019-10-24T18:03:38", "upload_time_iso_8601": "2019-10-24T18:03:38.805124Z", "url": "https://files.pythonhosted.org/packages/40/62/1a3d888b176ccca0543b45d9474617466a9c4bb88a85bb396f899d13cee0/aiomisc-9.2.7.tar.gz", "yanked": false}], "9.3.0": [{"comment_text": "", "digests": {"md5": "3f08640819dfc7316cc87862e6deca79", "sha256": "684366c1b3437718d63db58f8dd850552c4ce04176c36182d1d37028447d8456"}, "downloads": -1, "filename": "aiomisc-9.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f08640819dfc7316cc87862e6deca79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40322, "upload_time": "2019-10-25T12:52:09", "upload_time_iso_8601": "2019-10-25T12:52:09.395087Z", "url": "https://files.pythonhosted.org/packages/94/2a/dfdd7f40950b07b50f5ceb189438f83028aa8e114b8e9457e769c1e1c1e6/aiomisc-9.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "440af99e5600bf74a9036c105c211824", "sha256": "4a64004561869dd1f2ef7e533b413cf31f602fd29dc8466fe5de608810826839"}, "downloads": -1, "filename": "aiomisc-9.3.0.tar.gz", "has_sig": false, "md5_digest": "440af99e5600bf74a9036c105c211824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49204, "upload_time": "2019-10-25T12:52:13", "upload_time_iso_8601": "2019-10-25T12:52:13.886976Z", "url": "https://files.pythonhosted.org/packages/88/d5/da8dc52aed0eb8d241f74d1a2d63607626fab6512204b2bc667333ce4732/aiomisc-9.3.0.tar.gz", "yanked": false}], "9.4.1": [{"comment_text": "", "digests": {"md5": "f4af5a6a03c7780fff2fdc996dcb249e", "sha256": "790a5c2ead768f1dcc4c0d13dbefc1823af5e687edb59ac92ff97ef3fdbc0565"}, "downloads": -1, "filename": "aiomisc-9.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f4af5a6a03c7780fff2fdc996dcb249e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40742, "upload_time": "2019-10-30T15:55:34", "upload_time_iso_8601": "2019-10-30T15:55:34.413974Z", "url": "https://files.pythonhosted.org/packages/52/3b/3ba08d0701030b6a7ae4c62861dc6916906a5571e9c5b62df6a3628cdb6e/aiomisc-9.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cc6f8d71787a24f3cde9659c4d23924", "sha256": "45672309d58510e55591da0f2b83b1d2e7470c62b415f63225e0b5ec42041063"}, "downloads": -1, "filename": "aiomisc-9.4.1.tar.gz", "has_sig": false, "md5_digest": "5cc6f8d71787a24f3cde9659c4d23924", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49512, "upload_time": "2019-10-30T15:55:37", "upload_time_iso_8601": "2019-10-30T15:55:37.691387Z", "url": "https://files.pythonhosted.org/packages/84/76/6a5bffce475873bab77170f829c9f6312c1fe599a99968874bfe808234ad/aiomisc-9.4.1.tar.gz", "yanked": false}], "9.4.2": [{"comment_text": "", "digests": {"md5": "5ed68e08fcf549cb735217d0399d7d2e", "sha256": "6fe9c09264fe23d98612a1969ada99d05423b9188f0eb931b97a22c86e658679"}, "downloads": -1, "filename": "aiomisc-9.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5ed68e08fcf549cb735217d0399d7d2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40727, "upload_time": "2019-10-31T10:08:16", "upload_time_iso_8601": "2019-10-31T10:08:16.129808Z", "url": "https://files.pythonhosted.org/packages/44/5c/7651bdd0ee80a6f88870c8253bf88cfe252a2574c02fd453c4fd67c722bd/aiomisc-9.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8465f6a0b6f622c1f2b5700fa990f4a", "sha256": "c85c7ef111bdc1d0e22351b43819b68980a6513f7e1f231b9ea2fe5dace96bf8"}, "downloads": -1, "filename": "aiomisc-9.4.2.tar.gz", "has_sig": false, "md5_digest": "a8465f6a0b6f622c1f2b5700fa990f4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49497, "upload_time": "2019-10-31T10:08:20", "upload_time_iso_8601": "2019-10-31T10:08:20.054779Z", "url": "https://files.pythonhosted.org/packages/2a/8c/93284929f0a0860e14822d10e738dd0d029f700fae75a5cde1c4faedc640/aiomisc-9.4.2.tar.gz", "yanked": false}], "9.6.0": [{"comment_text": "", "digests": {"md5": "cf1ec40d5a9b8a5930fe35f7707cde67", "sha256": "dd644800e2da880add6b764f764db56a919dbd3f472f6ee2442a61941c57d485"}, "downloads": -1, "filename": "aiomisc-9.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cf1ec40d5a9b8a5930fe35f7707cde67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40882, "upload_time": "2019-11-12T19:49:41", "upload_time_iso_8601": "2019-11-12T19:49:41.051874Z", "url": "https://files.pythonhosted.org/packages/98/dd/31841dd5ac1ca167b201f39de0f840ebcdc55be1279716e5d2521d7ab2cb/aiomisc-9.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1572f46bc6b6f157fdd2a5cbffee0862", "sha256": "afe0a0c669a18dccdd4d1fc1d92201c4266aea7cc1f25b651a10c22476ac7a52"}, "downloads": -1, "filename": "aiomisc-9.6.0.tar.gz", "has_sig": false, "md5_digest": "1572f46bc6b6f157fdd2a5cbffee0862", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49578, "upload_time": "2019-11-12T19:49:44", "upload_time_iso_8601": "2019-11-12T19:49:44.636660Z", "url": "https://files.pythonhosted.org/packages/fe/56/4945fc06b3b23754899a5c17f622f6594e5df0cdbb9f800f34060f757dc6/aiomisc-9.6.0.tar.gz", "yanked": false}], "9.6.11": [{"comment_text": "", "digests": {"md5": "b233658c8785384c27ee08de5b8e6ed5", "sha256": "91cb14ff5f5d6c841a9432e6c72846cdd146c670fdcf185858570c0bf5364136"}, "downloads": -1, "filename": "aiomisc-9.6.11-py3-none-any.whl", "has_sig": false, "md5_digest": "b233658c8785384c27ee08de5b8e6ed5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42217, "upload_time": "2020-01-28T12:58:15", "upload_time_iso_8601": "2020-01-28T12:58:15.531028Z", "url": "https://files.pythonhosted.org/packages/50/3b/bbf5f1ec9a16c91c128786859442e24a851b7d69ec68ec3341cdc63527a0/aiomisc-9.6.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7cfaca0db9ee8793191ab35c3bea5a5", "sha256": "ca54145273d348fbb182e2b50921232a6f40db4d2815fb6d877b9963108e56a1"}, "downloads": -1, "filename": "aiomisc-9.6.11.tar.gz", "has_sig": false, "md5_digest": "c7cfaca0db9ee8793191ab35c3bea5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50859, "upload_time": "2020-01-28T12:58:19", "upload_time_iso_8601": "2020-01-28T12:58:19.154787Z", "url": "https://files.pythonhosted.org/packages/b6/47/18c0bac44d2a42fef41c919543aba4f3ccbd4224c74bd25f9c77276fd6cc/aiomisc-9.6.11.tar.gz", "yanked": false}], "9.6.29": [{"comment_text": "", "digests": {"md5": "8301a4394dacfc1ae69e829533bbe4a5", "sha256": "c95bd060cb09bd0f84df75451ca2831376f23fcad74fa72f296f6377ed1df4af"}, "downloads": -1, "filename": "aiomisc-9.6.29-py3-none-any.whl", "has_sig": false, "md5_digest": "8301a4394dacfc1ae69e829533bbe4a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42370, "upload_time": "2020-02-06T08:03:09", "upload_time_iso_8601": "2020-02-06T08:03:09.277034Z", "url": "https://files.pythonhosted.org/packages/6b/a9/c4d2212867ed6f83a66beee9cca2c22784a977619f4ee45fe85d6615fd63/aiomisc-9.6.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85f612a9305333de7d00da864f098523", "sha256": "ee7b967a48ac75f3a8549eda4e8c014bb6b58fc53302f7a0843d5ec89befb5da"}, "downloads": -1, "filename": "aiomisc-9.6.29.tar.gz", "has_sig": false, "md5_digest": "85f612a9305333de7d00da864f098523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51175, "upload_time": "2020-02-06T08:03:12", "upload_time_iso_8601": "2020-02-06T08:03:12.814857Z", "url": "https://files.pythonhosted.org/packages/e7/d1/2dc1f47a57da013446a0c33ac355c7480661e99eb9df6079aca9bbd97c5c/aiomisc-9.6.29.tar.gz", "yanked": false}], "9.6.3": [{"comment_text": "", "digests": {"md5": "fe6de986b0382fc74dc140e5cb2e7765", "sha256": "d34e8ee403986d9f226a8fcff5ece1b0501960019cce2aaddd6d6fd15bb53dc2"}, "downloads": -1, "filename": "aiomisc-9.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe6de986b0382fc74dc140e5cb2e7765", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41088, "upload_time": "2019-11-29T15:11:07", "upload_time_iso_8601": "2019-11-29T15:11:07.417380Z", "url": "https://files.pythonhosted.org/packages/f1/dd/c05f76a5b4bfb0621a537e67e51827ad25198b98aec112a0ef173f3d1721/aiomisc-9.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "289fa5b59f99f3a45152731a0ead490f", "sha256": "ea3cbffdde0e01e051d327297877a7067894ac33932b1617360271e48b01eeed"}, "downloads": -1, "filename": "aiomisc-9.6.3.tar.gz", "has_sig": false, "md5_digest": "289fa5b59f99f3a45152731a0ead490f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49781, "upload_time": "2019-11-29T15:11:10", "upload_time_iso_8601": "2019-11-29T15:11:10.935743Z", "url": "https://files.pythonhosted.org/packages/da/e5/95f03f338b176931e4d0610b8cdd69dd15bf24372597f2b1e43a896a7df7/aiomisc-9.6.3.tar.gz", "yanked": false}], "9.6.34": [{"comment_text": "", "digests": {"md5": "1ffe97defe35cee1ef0798dfd7cd3d26", "sha256": "c235291f71bf1b122a11fc0d12b8fc7af3c3c92fc16099251840bd187be4ab0a"}, "downloads": -1, "filename": "aiomisc-9.6.34-py3-none-any.whl", "has_sig": false, "md5_digest": "1ffe97defe35cee1ef0798dfd7cd3d26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42367, "upload_time": "2020-02-07T14:59:09", "upload_time_iso_8601": "2020-02-07T14:59:09.028425Z", "url": "https://files.pythonhosted.org/packages/e1/ac/b672a079b48abcd598793f7a493ee80a0cd44cabb1167cb4f52168b6ad07/aiomisc-9.6.34-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be7e5d29e16f73709f74bd1fffcc92c", "sha256": "ca249781280baa98ddba8f12dcd1451a35c01a851f42ec5725c0ba621280db6d"}, "downloads": -1, "filename": "aiomisc-9.6.34.tar.gz", "has_sig": false, "md5_digest": "2be7e5d29e16f73709f74bd1fffcc92c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51182, "upload_time": "2020-02-07T14:59:12", "upload_time_iso_8601": "2020-02-07T14:59:12.623957Z", "url": "https://files.pythonhosted.org/packages/eb/73/e7d552c5627a0b5f771aa28fdf7baec0f1690cc01b476f9755f4fc608189/aiomisc-9.6.34.tar.gz", "yanked": false}], "9.6.36": [{"comment_text": "", "digests": {"md5": "d8adc1633907d9a984cbdfeead4ca30b", "sha256": "9538c954985eaecf9dfef65ed0dd5b3a19ff09b6d1045b341749fc213d38a453"}, "downloads": -1, "filename": "aiomisc-9.6.36-py3-none-any.whl", "has_sig": false, "md5_digest": "d8adc1633907d9a984cbdfeead4ca30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42822, "upload_time": "2020-02-10T10:26:03", "upload_time_iso_8601": "2020-02-10T10:26:03.801559Z", "url": "https://files.pythonhosted.org/packages/f0/d3/7158d2f8975e04e2aec049be7ed3427c00b1571a6649dfaffec82b6b2aa7/aiomisc-9.6.36-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "797de991f7c670beca67faef5e13bb68", "sha256": "c777b4f17f6c67f51825195b8fed38a853ad85413bb369935efbfa335c67e5a9"}, "downloads": -1, "filename": "aiomisc-9.6.36.tar.gz", "has_sig": false, "md5_digest": "797de991f7c670beca67faef5e13bb68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52292, "upload_time": "2020-02-10T10:26:07", "upload_time_iso_8601": "2020-02-10T10:26:07.052019Z", "url": "https://files.pythonhosted.org/packages/37/0e/a8e71509412be73d452eef8b212dbc51b544d83f33ae2c2978cbf27b106a/aiomisc-9.6.36.tar.gz", "yanked": false}], "9.6.8": [{"comment_text": "", "digests": {"md5": "acca478ffdf76f395b6c412a82da7d1e", "sha256": "ebb533a19eeb1eba77cf584ff3f9af3ae00782a14a583367028f4973184cb072"}, "downloads": -1, "filename": "aiomisc-9.6.8-py3-none-any.whl", "has_sig": false, "md5_digest": "acca478ffdf76f395b6c412a82da7d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42191, "upload_time": "2019-12-17T15:15:13", "upload_time_iso_8601": "2019-12-17T15:15:13.035678Z", "url": "https://files.pythonhosted.org/packages/2a/66/6ffc07c43312d5a5879370e7961bc779e470bde52f21b1df02ab0c2da5bc/aiomisc-9.6.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b93dc170610398c6541327c23099cff7", "sha256": "2a98d43a197427da18ae88abcac2691c72279e1b8b38728330b9f02eb3926b6d"}, "downloads": -1, "filename": "aiomisc-9.6.8.tar.gz", "has_sig": false, "md5_digest": "b93dc170610398c6541327c23099cff7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50835, "upload_time": "2019-12-17T15:15:16", "upload_time_iso_8601": "2019-12-17T15:15:16.844786Z", "url": "https://files.pythonhosted.org/packages/ac/86/dd635d9d9eba9c89ee27732494e9d96f4f32f8508cd18450907aaea0b134/aiomisc-9.6.8.tar.gz", "yanked": false}], "9.7.0": [{"comment_text": "", "digests": {"md5": "50abfe14be831aa7437cadf97364a02e", "sha256": "211a5b75e0d0487bab0de4a510424a10265971bff799a244a13e62cd8d5abc0d"}, "downloads": -1, "filename": "aiomisc-9.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "50abfe14be831aa7437cadf97364a02e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44128, "upload_time": "2020-02-13T13:19:42", "upload_time_iso_8601": "2020-02-13T13:19:42.891560Z", "url": "https://files.pythonhosted.org/packages/fe/bb/edb8e74b3f5822b7f629592827111600d7c32a920a5a313ae61c62ac7391/aiomisc-9.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f004445296ba5c6d86044a612e51dcd1", "sha256": "72de352b72c3c4b9c74314d92c22e62658d776213f4cdd2447fb6675575e4766"}, "downloads": -1, "filename": "aiomisc-9.7.0.tar.gz", "has_sig": false, "md5_digest": "f004445296ba5c6d86044a612e51dcd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54754, "upload_time": "2020-02-13T13:19:46", "upload_time_iso_8601": "2020-02-13T13:19:46.942505Z", "url": "https://files.pythonhosted.org/packages/ba/9c/61d25f8ceaba4d95ae744738e3cfdf4cc8b0c95ed1b2e47298341b5cc2a0/aiomisc-9.7.0.tar.gz", "yanked": false}], "9.7.1": [{"comment_text": "", "digests": {"md5": "9bb79919cb3401da2577a7d1a8ad75b4", "sha256": "98f0cd2a7430a0ed962208277049033d64b0adc493a2c130c88333c8dd826399"}, "downloads": -1, "filename": "aiomisc-9.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9bb79919cb3401da2577a7d1a8ad75b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44451, "upload_time": "2020-02-13T14:11:57", "upload_time_iso_8601": "2020-02-13T14:11:57.279270Z", "url": "https://files.pythonhosted.org/packages/b6/39/d5f5fbcccf9352fa0fa26ba2e8cccc42b5f33e6e3c7c6d500f8e228d3ae0/aiomisc-9.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5605ce5b64b800e1ea40aedbb3766f2", "sha256": "e5ecc35878929d32b9d5af6a1de311445bc06505c1f9f0b8b1209d40110f7cc5"}, "downloads": -1, "filename": "aiomisc-9.7.1.tar.gz", "has_sig": false, "md5_digest": "f5605ce5b64b800e1ea40aedbb3766f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55699, "upload_time": "2020-02-13T14:12:01", "upload_time_iso_8601": "2020-02-13T14:12:01.263749Z", "url": "https://files.pythonhosted.org/packages/2c/69/8cc85a0eb2a5c50695abacc197261f4fa45deb496ea6142a26fcadbdbdb0/aiomisc-9.7.1.tar.gz", "yanked": false}], "9.7.2": [{"comment_text": "", "digests": {"md5": "4441d17b4270c0a425dda975d5875457", "sha256": "5184aa5e723513d31afdc4e3677891c1b4519c95bbb800fe234ac8b28636243f"}, "downloads": -1, "filename": "aiomisc-9.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4441d17b4270c0a425dda975d5875457", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44456, "upload_time": "2020-02-13T14:13:39", "upload_time_iso_8601": "2020-02-13T14:13:39.462850Z", "url": "https://files.pythonhosted.org/packages/66/01/d6c836be332f9843e94828c580ab3e2780c3da192a7fa69c9ce3265f56ea/aiomisc-9.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9935b99aa085cdb6065bca2f8b0ef514", "sha256": "823e19067e03e279a102f8b8238608e31f951616b5e81e21439fdc5b15dd4e46"}, "downloads": -1, "filename": "aiomisc-9.7.2.tar.gz", "has_sig": false, "md5_digest": "9935b99aa085cdb6065bca2f8b0ef514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55696, "upload_time": "2020-02-13T14:13:43", "upload_time_iso_8601": "2020-02-13T14:13:43.947786Z", "url": "https://files.pythonhosted.org/packages/f5/0f/27a70afbe0c0788da096e8a830605bc9738289e341dfcc58489c40678341/aiomisc-9.7.2.tar.gz", "yanked": false}], "9.7.5": [{"comment_text": "", "digests": {"md5": "360cfbdbbba2a765aa47913eb7973c26", "sha256": "0f967006df77884483501f1cd754390a26479bb86525685233c38f61f3efc597"}, "downloads": -1, "filename": "aiomisc-9.7.5-py3-none-any.whl", "has_sig": false, "md5_digest": "360cfbdbbba2a765aa47913eb7973c26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44623, "upload_time": "2020-02-13T17:15:49", "upload_time_iso_8601": "2020-02-13T17:15:49.236683Z", "url": "https://files.pythonhosted.org/packages/06/b2/303fe71d5945c4be662ad05710e1d0eee9fb1331e8b5f8995fed5fba40c9/aiomisc-9.7.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb3d09713162349ed5238be0cbef3d73", "sha256": "6282cd8ba5d1d25630064f9ad500d1fb5e8cf67be71ea382115519cc32f29766"}, "downloads": -1, "filename": "aiomisc-9.7.5.tar.gz", "has_sig": false, "md5_digest": "bb3d09713162349ed5238be0cbef3d73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54281, "upload_time": "2020-02-13T17:15:52", "upload_time_iso_8601": "2020-02-13T17:15:52.585091Z", "url": "https://files.pythonhosted.org/packages/37/ca/8f98eab3e1b332abc053930f10c13c74e5a21dedea2c341e75ca77e3bfcc/aiomisc-9.7.5.tar.gz", "yanked": false}], "9.7.7": [{"comment_text": "", "digests": {"md5": "d735a4854cc34bb004f626933018f6a8", "sha256": "39d8af7038193bd7559881cc84e6c2a830df0eb10812b70ae9f1a18887f37c64"}, "downloads": -1, "filename": "aiomisc-9.7.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d735a4854cc34bb004f626933018f6a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44613, "upload_time": "2020-03-17T12:37:18", "upload_time_iso_8601": "2020-03-17T12:37:18.382779Z", "url": "https://files.pythonhosted.org/packages/2d/60/b0bceec7b4ec2cd91c240da2a721c547cfc22d5ac7cb9645fbd797889a72/aiomisc-9.7.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b20ffc24d2b907f8d7d18c9e491c23c5", "sha256": "63b0b5695d54e521ef844a68c1cfe508daedd3509f91f09feb7bf3a06c35d8df"}, "downloads": -1, "filename": "aiomisc-9.7.7.tar.gz", "has_sig": false, "md5_digest": "b20ffc24d2b907f8d7d18c9e491c23c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54263, "upload_time": "2020-03-17T12:37:21", "upload_time_iso_8601": "2020-03-17T12:37:21.886799Z", "url": "https://files.pythonhosted.org/packages/8a/ab/a227b205b526bc889bec445115a2fd6d107d3d02f4ed16e5433bbd21316a/aiomisc-9.7.7.tar.gz", "yanked": false}], "9.7.8": [{"comment_text": "", "digests": {"md5": "b4fc7f157e0643b30286adbadceb3b6e", "sha256": "a664c9f34afde9d5353bd4e9544cf457b6213880d8003e930fbcd1e58a4d2dc3"}, "downloads": -1, "filename": "aiomisc-9.7.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b4fc7f157e0643b30286adbadceb3b6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44604, "upload_time": "2020-04-01T14:17:21", "upload_time_iso_8601": "2020-04-01T14:17:21.720400Z", "url": "https://files.pythonhosted.org/packages/f2/39/6cb5724607a88528a76ae3572ca9da8d41899f3cbbe422456724f09f71ce/aiomisc-9.7.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "091119a152167afbe6c230362d00871e", "sha256": "d09cb54243c4a6d593297e1d81a2f189deab5f19fa38e7c99d3c2b320b167b7e"}, "downloads": -1, "filename": "aiomisc-9.7.8.tar.gz", "has_sig": false, "md5_digest": "091119a152167afbe6c230362d00871e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55818, "upload_time": "2020-04-01T14:17:25", "upload_time_iso_8601": "2020-04-01T14:17:25.362467Z", "url": "https://files.pythonhosted.org/packages/fb/f5/239a7766c12b248375849876cfc0d7b34e20a4b0d05d9e3d916e3ae40c0e/aiomisc-9.7.8.tar.gz", "yanked": false}], "9.8.0": [{"comment_text": "", "digests": {"md5": "b76952b3365a2abdf82f7785343e354b", "sha256": "c814246a689f64ac84fab5e20b6f4673f9febd3e7c3114e256d0109ed015c539"}, "downloads": -1, "filename": "aiomisc-9.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b76952b3365a2abdf82f7785343e354b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48612, "upload_time": "2020-05-07T19:40:11", "upload_time_iso_8601": "2020-05-07T19:40:11.172399Z", "url": "https://files.pythonhosted.org/packages/1a/ff/c41795c273279c064719c4f5a16ca96c5abb1f9d8838d05ac2cde67d66cf/aiomisc-9.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72e7e762fb727b39e2bf2c9c79c3d0a4", "sha256": "d69d8f7d1dd275fe3d8d63214d7d6f9963350456042015a07d1ff23e34dcddfe"}, "downloads": -1, "filename": "aiomisc-9.8.0.tar.gz", "has_sig": false, "md5_digest": "72e7e762fb727b39e2bf2c9c79c3d0a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58145, "upload_time": "2020-05-07T19:40:14", "upload_time_iso_8601": "2020-05-07T19:40:14.214128Z", "url": "https://files.pythonhosted.org/packages/68/6d/d338eef88fc21377f6ed6fce319512559dc5db8e053af759c2e8256416ba/aiomisc-9.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b76952b3365a2abdf82f7785343e354b", "sha256": "c814246a689f64ac84fab5e20b6f4673f9febd3e7c3114e256d0109ed015c539"}, "downloads": -1, "filename": "aiomisc-9.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b76952b3365a2abdf82f7785343e354b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48612, "upload_time": "2020-05-07T19:40:11", "upload_time_iso_8601": "2020-05-07T19:40:11.172399Z", "url": "https://files.pythonhosted.org/packages/1a/ff/c41795c273279c064719c4f5a16ca96c5abb1f9d8838d05ac2cde67d66cf/aiomisc-9.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72e7e762fb727b39e2bf2c9c79c3d0a4", "sha256": "d69d8f7d1dd275fe3d8d63214d7d6f9963350456042015a07d1ff23e34dcddfe"}, "downloads": -1, "filename": "aiomisc-9.8.0.tar.gz", "has_sig": false, "md5_digest": "72e7e762fb727b39e2bf2c9c79c3d0a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58145, "upload_time": "2020-05-07T19:40:14", "upload_time_iso_8601": "2020-05-07T19:40:14.214128Z", "url": "https://files.pythonhosted.org/packages/68/6d/d338eef88fc21377f6ed6fce319512559dc5db8e053af759c2e8256416ba/aiomisc-9.8.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:04 2020"}