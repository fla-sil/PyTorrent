{"info": {"author": "Thorsten Weimann", "author_email": "weimann.th@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Multimedia :: Graphics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "![example_ean13.png](https://bitbucket.org/repo/rXdyBE/images/1631728592-example_ean13.png)\n\npyBarcode\n=========\n\nThis library provides a simple way to create barcodes using only the\nPython standardlib. The barcodes where created as SVG objects.\n\nReport bugs at https://bitbucket.org/whitie/python-barcode/issues/\n\n\nRequirements\n------------\n\n    - Setuptools/distribute for installation (new in version 0.7beta4)\n    - Python 2.6 or above (including Python 3.x)\n    - On Python 2.6, 3.0, 3.1: argparse (for the commandline script)\n    - Program to open SVG objects (your browser should do it)\n    - Optional: PIL to render barcodes as images (PNG, JPG, ...)\n\n\nInstallation\n------------\n\nMake sure you have setuptools/distribute installed.\n\nUnpack the downloaded file, cd into the pyBarcode directory and run\n`python setup.py install`. Or just copy the barcode dir somewhere in\nyour PYTHONPATH.\n\nThe best way is to use pip: `pip install pyBarcode`.\n\n\nProvided Barcodes\n-----------------\n\nEAN-8, EAN-13, EAN-14, UPC-A, JAN, ISBN-10, ISBN-13, ISSN, Code 39, Code 128, PZN\n\n\nTodo\n----\n\n    - Add documentation\n    - Add more codes\n    - Improve Python 3 support\n    - Add simple GUI\n\nUsage\n-----\n\nInteractive::\n\n    >>> import barcode\n    >>> barcode.PROVIDED_BARCODES\n    [u'code39', u'code128', u'ean', u'ean13', u'ean8', u'gs1', u'gtin',\n     u'isbn', u'isbn10', u'isbn13', u'issn', u'jan', u'pzn', u'upc', u'upca']\n    >>> EAN = barcode.get_barcode_class('ean13')\n    >>> EAN\n    <class 'barcode.ean.EuropeanArticleNumber13'>\n    >>> ean = EAN(u'5901234123457')\n    >>> ean\n    <barcode.ean.EuropeanArticleNumber13 object at 0x00BE98F0>\n    >>> fullname = ean.save('ean13_barcode')\n    >>> fullname\n    u'ean13_barcode.svg'\n    # Example with PNG\n    >>> from barcode.writer import ImageWriter\n    >>> ean = EAN(u'5901234123457', writer=ImageWriter())\n    >>> fullname = ean.save('ean13_barcode')\n    u'ean13_barcode.png'\n    # New in v0.4.2\n    >>> from StringIO import StringIO\n    >>> fp = StringIO()\n    >>> ean.write(fp)\n    # or\n    >>> f = open('/my/new/file', 'wb')\n    >>> ean.write(f) # PIL (ImageWriter) produces RAW format here\n    # New in v0.5.0\n    >>> from barcode import generate\n    >>> name = generate('EAN13', u'5901234123457', output='barcode_svg')\n    >>> name\n    u'barcode_svg.svg'\n    # with file like object\n    >>> fp = StringIO()\n    >>> generate('EAN13', u'5901234123457', writer=ImageWriter(), output=fp)\n    >>>\n\nNow open ean13_barcode.[svg|png] in a graphic app or simply in your browser\nand see the created barcode. That's it.\n\nCommandline::\n\n    $ pybarcode{2,3} create \"My Text\" outfile\n    New barcode saved as outfile.svg.\n    $ pybarcode{2,3} create -t png \"My Text\" outfile\n    New barcode saved as outfile.png.\n\n    Try `pybarcode -h` for help.\n\nChangelog\n---------\n\n:v0.8: Code 128 added. Data for charsets and bars moved to subpackage\n       barcode.charsets. Merged in some improvements.\n\n:v0.7: Fixed some issues with fontsize and fontalignment.\n       Added Python 3 support. It's not well tested yet, but the tests\n       run without errors with Python 3.3. Commandline script added.\n\n:v0.6: Changed save and write methods to take the options as a dict\n         not as keyword arguments (fix this in your code). Added option\n         to left align the text under the barcode. Fixed bug with EAN13\n         generation.\n\n:v0.5.0: Added new generate function to do all generation in one step.\n         Moved writer from a subpackage to a module (this breaks some\n         existing code). UPC is now rendered as real UPC, not as EAN13\n         with the leading \"0\".\n\n:v0.4.3: Fixed bug in new write method (related to PIL) and updated docs.\n\n:v0.4.2: Added write method to support file like objects as target.\n\n:v0.4.1: Bugfix release. Removed redundancy in input validation.\n         EAN8 was broken. It now works as expected.\n\n:v0.4: Removed \\*\\*options from writers __init__ method. These options never\n       had effect. They were always overwritten by default_options.\n       New config option available: text_distance (the distance between\n       barcode and text).\n\n:v0.4b2: Basic documentation included. The barcode object now has a new\n         attribute called `raw` to have the rendered output without saving\n         to disk.\n\n:v0.4b1: Support for rendering barcodes as images is implemented.\n         PIL is required to use it.\n\n:v0.3: Compression for SVG output now works.\n\n:v0.3b1: Writer API has changed for simple adding new (own) writers.\n         SVG output is now generated with xml.dom module instead of\n         stringformatting (makes it more robust).\n\n:v0.2.1: API of render changed. Now render takes keyword arguments\n         instead of a dict.\n\n:v0.2: More tests added.\n\n:v0.1: First release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/whitie/python-barcode/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyBarcode", "package_url": "https://pypi.org/project/pyBarcode/", "platform": "", "project_url": "https://pypi.org/project/pyBarcode/", "project_urls": {"Homepage": "https://bitbucket.org/whitie/python-barcode/"}, "release_url": "https://pypi.org/project/pyBarcode/0.8b1/", "requires_dist": null, "requires_python": "", "summary": "Create standard barcodes with Python. No external modules needed (optional PIL support included).", "version": "0.8b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>![example_ean13.png](<a href=\"https://bitbucket.org/repo/rXdyBE/images/1631728592-example_ean13.png\" rel=\"nofollow\">https://bitbucket.org/repo/rXdyBE/images/1631728592-example_ean13.png</a>)</p>\n<div id=\"pybarcode\">\n<h2>pyBarcode</h2>\n<p>This library provides a simple way to create barcodes using only the\nPython standardlib. The barcodes where created as SVG objects.</p>\n<p>Report bugs at <a href=\"https://bitbucket.org/whitie/python-barcode/issues/\" rel=\"nofollow\">https://bitbucket.org/whitie/python-barcode/issues/</a></p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<blockquote>\n<ul>\n<li>Setuptools/distribute for installation (new in version 0.7beta4)</li>\n<li>Python 2.6 or above (including Python 3.x)</li>\n<li>On Python 2.6, 3.0, 3.1: argparse (for the commandline script)</li>\n<li>Program to open SVG objects (your browser should do it)</li>\n<li>Optional: PIL to render barcodes as images (PNG, JPG, \u2026)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Make sure you have setuptools/distribute installed.</p>\n<p>Unpack the downloaded file, cd into the pyBarcode directory and run\n<cite>python setup.py install</cite>. Or just copy the barcode dir somewhere in\nyour PYTHONPATH.</p>\n<p>The best way is to use pip: <cite>pip install pyBarcode</cite>.</p>\n</div>\n<div id=\"provided-barcodes\">\n<h3>Provided Barcodes</h3>\n<p>EAN-8, EAN-13, EAN-14, UPC-A, JAN, ISBN-10, ISBN-13, ISSN, Code 39, Code 128, PZN</p>\n</div>\n<div id=\"todo\">\n<h3>Todo</h3>\n<blockquote>\n<ul>\n<li>Add documentation</li>\n<li>Add more codes</li>\n<li>Improve Python 3 support</li>\n<li>Add simple GUI</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Interactive:</p>\n<pre>&gt;&gt;&gt; import barcode\n&gt;&gt;&gt; barcode.PROVIDED_BARCODES\n[u'code39', u'code128', u'ean', u'ean13', u'ean8', u'gs1', u'gtin',\n u'isbn', u'isbn10', u'isbn13', u'issn', u'jan', u'pzn', u'upc', u'upca']\n&gt;&gt;&gt; EAN = barcode.get_barcode_class('ean13')\n&gt;&gt;&gt; EAN\n&lt;class 'barcode.ean.EuropeanArticleNumber13'&gt;\n&gt;&gt;&gt; ean = EAN(u'5901234123457')\n&gt;&gt;&gt; ean\n&lt;barcode.ean.EuropeanArticleNumber13 object at 0x00BE98F0&gt;\n&gt;&gt;&gt; fullname = ean.save('ean13_barcode')\n&gt;&gt;&gt; fullname\nu'ean13_barcode.svg'\n# Example with PNG\n&gt;&gt;&gt; from barcode.writer import ImageWriter\n&gt;&gt;&gt; ean = EAN(u'5901234123457', writer=ImageWriter())\n&gt;&gt;&gt; fullname = ean.save('ean13_barcode')\nu'ean13_barcode.png'\n# New in v0.4.2\n&gt;&gt;&gt; from StringIO import StringIO\n&gt;&gt;&gt; fp = StringIO()\n&gt;&gt;&gt; ean.write(fp)\n# or\n&gt;&gt;&gt; f = open('/my/new/file', 'wb')\n&gt;&gt;&gt; ean.write(f) # PIL (ImageWriter) produces RAW format here\n# New in v0.5.0\n&gt;&gt;&gt; from barcode import generate\n&gt;&gt;&gt; name = generate('EAN13', u'5901234123457', output='barcode_svg')\n&gt;&gt;&gt; name\nu'barcode_svg.svg'\n# with file like object\n&gt;&gt;&gt; fp = StringIO()\n&gt;&gt;&gt; generate('EAN13', u'5901234123457', writer=ImageWriter(), output=fp)\n&gt;&gt;&gt;\n</pre>\n<p>Now open ean13_barcode.[svg|png] in a graphic app or simply in your browser\nand see the created barcode. That\u2019s it.</p>\n<p>Commandline:</p>\n<pre>$ pybarcode{2,3} create \"My Text\" outfile\nNew barcode saved as outfile.svg.\n$ pybarcode{2,3} create -t png \"My Text\" outfile\nNew barcode saved as outfile.png.\n\nTry `pybarcode -h` for help.\n</pre>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>v0.8:</th><td>Code 128 added. Data for charsets and bars moved to subpackage\nbarcode.charsets. Merged in some improvements.</td>\n</tr>\n<tr><th>v0.7:</th><td>Fixed some issues with fontsize and fontalignment.\nAdded Python 3 support. It\u2019s not well tested yet, but the tests\nrun without errors with Python 3.3. Commandline script added.</td>\n</tr>\n<tr><th>v0.6:</th><td>Changed save and write methods to take the options as a dict\nnot as keyword arguments (fix this in your code). Added option\nto left align the text under the barcode. Fixed bug with EAN13\ngeneration.</td>\n</tr>\n<tr><th>v0.5.0:</th><td>Added new generate function to do all generation in one step.\nMoved writer from a subpackage to a module (this breaks some\nexisting code). UPC is now rendered as real UPC, not as EAN13\nwith the leading \u201c0\u201d.</td>\n</tr>\n<tr><th>v0.4.3:</th><td>Fixed bug in new write method (related to PIL) and updated docs.</td>\n</tr>\n<tr><th>v0.4.2:</th><td>Added write method to support file like objects as target.</td>\n</tr>\n<tr><th>v0.4.1:</th><td>Bugfix release. Removed redundancy in input validation.\nEAN8 was broken. It now works as expected.</td>\n</tr>\n<tr><th>v0.4:</th><td>Removed **options from writers __init__ method. These options never\nhad effect. They were always overwritten by default_options.\nNew config option available: text_distance (the distance between\nbarcode and text).</td>\n</tr>\n<tr><th>v0.4b2:</th><td>Basic documentation included. The barcode object now has a new\nattribute called <cite>raw</cite> to have the rendered output without saving\nto disk.</td>\n</tr>\n<tr><th>v0.4b1:</th><td>Support for rendering barcodes as images is implemented.\nPIL is required to use it.</td>\n</tr>\n<tr><th>v0.3:</th><td>Compression for SVG output now works.</td>\n</tr>\n<tr><th>v0.3b1:</th><td>Writer API has changed for simple adding new (own) writers.\nSVG output is now generated with xml.dom module instead of\nstringformatting (makes it more robust).</td>\n</tr>\n<tr><th>v0.2.1:</th><td>API of render changed. Now render takes keyword arguments\ninstead of a dict.</td>\n</tr>\n<tr><th>v0.2:</th><td>More tests added.</td>\n</tr>\n<tr><th>v0.1:</th><td>First release.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4953968, "releases": {"0.8b1": [{"comment_text": "", "digests": {"md5": "144492c16f9208a97cadce552326fdd3", "sha256": "070aaac5c50356d246d3d5c839646e63564b4017bd4fe52326d13495361bb85e"}, "downloads": -1, "filename": "pyBarcode-0.8b1-cp27-none-any.whl", "has_sig": false, "md5_digest": "144492c16f9208a97cadce552326fdd3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 210857, "upload_time": "2019-03-18T13:43:54", "upload_time_iso_8601": "2019-03-18T13:43:54.469835Z", "url": "https://files.pythonhosted.org/packages/2d/6f/7ea47bf6ff8e9138772096df2b4737d83fd2ed5785d8fac1c09c712e4ed3/pyBarcode-0.8b1-cp27-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "144492c16f9208a97cadce552326fdd3", "sha256": "070aaac5c50356d246d3d5c839646e63564b4017bd4fe52326d13495361bb85e"}, "downloads": -1, "filename": "pyBarcode-0.8b1-cp27-none-any.whl", "has_sig": false, "md5_digest": "144492c16f9208a97cadce552326fdd3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 210857, "upload_time": "2019-03-18T13:43:54", "upload_time_iso_8601": "2019-03-18T13:43:54.469835Z", "url": "https://files.pythonhosted.org/packages/2d/6f/7ea47bf6ff8e9138772096df2b4737d83fd2ed5785d8fac1c09c712e4ed3/pyBarcode-0.8b1-cp27-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:09:25 2020"}