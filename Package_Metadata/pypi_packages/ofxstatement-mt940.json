{"info": {"author": "Gert-Jan Paulissen", "author_email": "gert.jan.paulissen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Office/Business :: Financial :: Accounting", "Topic :: Utilities"], "description": "# ofxstatement-mt940\n\nThis project provides a custom\n[ofxstatement](https://github.com/kedder/ofxstatement) plugin for\nfinancial institutions providing MT940 statements.\n\n`ofxstatement` is a tool to convert a proprietary bank statement to OFX\nformat, suitable for importing into programs like GnuCash or Beancount. The\nplugin for ofxstatement parses the bank statement and produces a common data\nstructure, that is then formatted into an OFX file.\n\nSee also the [MT940](https://github.com/WoLpH/mt940) project. Without that\nproject this plugin would not have been possible.\n\n## Installation\n\n### Using pip\n\n```\n$ pip install ofxstatement-mt940\n```\n\n### Development version from source\n\n```\n$ git clone https://github.com/gpaulissen/ofxstatement-mt940.git\n$ pip install -e .\n```\n\n### Troubleshooting\n\nThis package depends on ofxstatement with a version at least 0.6.5. This\nversion may not yet be available in PyPI so install that from source like\nthis:\n```\n$ git clone https://github.com/gpaulissen/ofxstatement.git\n$ pip install -e .\n```\n\n## Test\n\nTo run the tests from the development version you can use the py.test command:\n\n```\n$ py.test\n```\n\nYou may need to install the required test packages first:\n\n```\n$ pip install -r test_requirements.txt\n```\n\n## Usage\n\n### Show installed plugins\n\nThis shows the all installed plugins, not only those from this package:\n\n```\n$ ofxstatement list-plugins\n```\n\nYou should see at least:\n\n```\nThe following plugins are available:\n\n  ...\n  mt940            MT940, text\n  ...\n\n```\n\n### Convert\n\nThis will convert a mt940 file to an OFX file.\n\n```\n$ ofxstatement convert -t mt940 mt940.txt mt940.ofx\n```\n\n### Configuration\n\nThe ASN bank from the Netherlands is the default. If you want a\ndifferent bank code and/or bank id you need to define it in the ofxstatement\nconfiguration:\n\n```\n$ ofxstatement edit-config\n```\n\nThis is a sample configuration (do not forget to specify plugin for each section):\n\n```\n[ing:nl]\nplugin = mt940\nbank_id = myingbankid\n\n[mBank]\nplugin = mt940\nbank_code = mBank\n\n[asnb]\nplugin = mt940\nbank_code = ASNB\nbank_id = myasnbbankid\n\n```\n\n### Bank codes and their bank id\n\nThese are the predefined bank codes (case insensitive) and their corresponding\nbank id's (tag BANKID) in the OFX file:\n\n| Bank code | Bank id  | Comment |\n| :-------- | :------  | :------ |\n| ASN \t\t\t| ASNBNL21 | Dutch bank with special processing instructions for MT940 tag 61, see [test_tags.py](https://github.com/WoLpH/mt940/blob/develop/mt940_tests/test_tags.py) |\n| ABNAMRO\t\t| ABNANL2A | Dutch bank\n| ING\t\t\t\t| INGBNL2A | Dutch bank\n| KNAB\t\t\t| KNABNL2H | Dutch bank\n| RABO\t\t\t| RABONL2U | Dutch bank\n| SNS\t\t\t\t| SNSBNL2A | Dutch bank\n| TRIODOS\t\t| TRIONL2U | Dutch bank\n| MBANK\t\t\t| BREXPLPW | Polish bank with special post processing instructions, see [test_processors.py](https://github.com/WoLpH/mt940/blob/develop/mt940_tests/test_processors.py). |\n\n\\\nPlease note that this list is not exhaustive and you can process a MT940 from\nany bank.  Just define a bank code from this list above or else your own bank\nid in the ofxstatement configuration.\n\nFrom the [MT940](https://github.com/WoLpH/mt940) project I have copied the\nspecial processing instructions for the banks tested there, thus ASN and\nMBANK. Other banks do not seem to need special instructions to parse their\nMT940 file.\n\n### Advanced conversions (using the configuration)\n\nThis will generate an OFX to standard output with \"myingbankid\" for OFX tag BANKID:\n\n```\n$ ofxstatement convert -t ing:nl src/ofxstatement/plugins/tests/samples/ing.sta -\n```\n\nAnd this will generate an OFX to standard output with \"BREXPLPW\" for OFX tag BANKID:\n\n```\n$ ofxstatement convert -t mBank src/ofxstatement/plugins/tests/samples/mt940_mBank.txt -\n```\n\nFinally this will use the special instructions for ASNB but use \"myasnbbankid\" for\nOFX tag BANKID:\n\n```\n$ ofxstatement convert -t asnb src/ofxstatement/plugins/tests/samples/mt940_ASNB.txt -\n```\n\n## Change history\n\nSee the Changelog (CHANGELOG.md).\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [1.1.0] - 2020-03-26\n\n### Added\n\n\t- Added reference to the Changelog in the Readme.\n\t- The Readme mentions test_requirements.txt for installing test modules.\n\t- More checks concerning the content (dates with start and end\n\tdate exclusive) that may result in a ValidationError exception.\n\t- Added GNU Makefile for keeping the important operations together.\n\t- MANIFEST.in now includes the Makefile and CHANGELOG.md.\n\n### Changed\n\n\t- The generation af a unique OFX id did only return a counter in\n\tcase of duplicates.\n\t- The Readme mentions now my fork of the ofxstatement instead of\n\thttps://github.com/kedder/ofxstatement.git.\n\t- The __about__.py file outputs the version number and that is\n\tused in the Makefile.\n\t- Code refactoring.\n\t- Readme enhanced.\n\n## [1.0.0] - 2020-03-15\n\n### Added\n\n\t- First version to convert a Swift MT940 file to an OFX file.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gpaulissen/ofxstatement-mt940", "keywords": "ofx,banking,statement,mt940", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "ofxstatement-mt940", "package_url": "https://pypi.org/project/ofxstatement-mt940/", "platform": "", "project_url": "https://pypi.org/project/ofxstatement-mt940/", "project_urls": {"Homepage": "https://github.com/gpaulissen/ofxstatement-mt940"}, "release_url": "https://pypi.org/project/ofxstatement-mt940/1.1.0/", "requires_dist": ["ofxstatement (>0.6.4)", "mt-940 (>=4.19.0)", "pyyaml ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cache ; extra == 'test'", "pytest-cover ; extra == 'test'", "pytest-flakes ; extra == 'test'", "pytest-pep8 ; extra == 'test'", "flake8 ; extra == 'test'"], "requires_python": "", "summary": "OFXStatement plugin for financial institutions providing MT940 statements.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ofxstatement-mt940</h1>\n<p>This project provides a custom\n<a href=\"https://github.com/kedder/ofxstatement\" rel=\"nofollow\">ofxstatement</a> plugin for\nfinancial institutions providing MT940 statements.</p>\n<p><code>ofxstatement</code> is a tool to convert a proprietary bank statement to OFX\nformat, suitable for importing into programs like GnuCash or Beancount. The\nplugin for ofxstatement parses the bank statement and produces a common data\nstructure, that is then formatted into an OFX file.</p>\n<p>See also the <a href=\"https://github.com/WoLpH/mt940\" rel=\"nofollow\">MT940</a> project. Without that\nproject this plugin would not have been possible.</p>\n<h2>Installation</h2>\n<h3>Using pip</h3>\n<pre><code>$ pip install ofxstatement-mt940\n</code></pre>\n<h3>Development version from source</h3>\n<pre><code>$ git clone https://github.com/gpaulissen/ofxstatement-mt940.git\n$ pip install -e .\n</code></pre>\n<h3>Troubleshooting</h3>\n<p>This package depends on ofxstatement with a version at least 0.6.5. This\nversion may not yet be available in PyPI so install that from source like\nthis:</p>\n<pre><code>$ git clone https://github.com/gpaulissen/ofxstatement.git\n$ pip install -e .\n</code></pre>\n<h2>Test</h2>\n<p>To run the tests from the development version you can use the py.test command:</p>\n<pre><code>$ py.test\n</code></pre>\n<p>You may need to install the required test packages first:</p>\n<pre><code>$ pip install -r test_requirements.txt\n</code></pre>\n<h2>Usage</h2>\n<h3>Show installed plugins</h3>\n<p>This shows the all installed plugins, not only those from this package:</p>\n<pre><code>$ ofxstatement list-plugins\n</code></pre>\n<p>You should see at least:</p>\n<pre><code>The following plugins are available:\n\n  ...\n  mt940            MT940, text\n  ...\n\n</code></pre>\n<h3>Convert</h3>\n<p>This will convert a mt940 file to an OFX file.</p>\n<pre><code>$ ofxstatement convert -t mt940 mt940.txt mt940.ofx\n</code></pre>\n<h3>Configuration</h3>\n<p>The ASN bank from the Netherlands is the default. If you want a\ndifferent bank code and/or bank id you need to define it in the ofxstatement\nconfiguration:</p>\n<pre><code>$ ofxstatement edit-config\n</code></pre>\n<p>This is a sample configuration (do not forget to specify plugin for each section):</p>\n<pre><code>[ing:nl]\nplugin = mt940\nbank_id = myingbankid\n\n[mBank]\nplugin = mt940\nbank_code = mBank\n\n[asnb]\nplugin = mt940\nbank_code = ASNB\nbank_id = myasnbbankid\n\n</code></pre>\n<h3>Bank codes and their bank id</h3>\n<p>These are the predefined bank codes (case insensitive) and their corresponding\nbank id's (tag BANKID) in the OFX file:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Bank code</th>\n<th align=\"left\">Bank id</th>\n<th align=\"left\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">ASN</td>\n<td align=\"left\">ASNBNL21</td>\n<td align=\"left\">Dutch bank with special processing instructions for MT940 tag 61, see <a href=\"https://github.com/WoLpH/mt940/blob/develop/mt940_tests/test_tags.py\" rel=\"nofollow\">test_tags.py</a></td>\n</tr>\n<tr>\n<td align=\"left\">ABNAMRO</td>\n<td align=\"left\">ABNANL2A</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">ING</td>\n<td align=\"left\">INGBNL2A</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">KNAB</td>\n<td align=\"left\">KNABNL2H</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">RABO</td>\n<td align=\"left\">RABONL2U</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">SNS</td>\n<td align=\"left\">SNSBNL2A</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">TRIODOS</td>\n<td align=\"left\">TRIONL2U</td>\n<td align=\"left\">Dutch bank</td>\n</tr>\n<tr>\n<td align=\"left\">MBANK</td>\n<td align=\"left\">BREXPLPW</td>\n<td align=\"left\">Polish bank with special post processing instructions, see <a href=\"https://github.com/WoLpH/mt940/blob/develop/mt940_tests/test_processors.py\" rel=\"nofollow\">test_processors.py</a>.</td>\n</tr></tbody></table>\n<p><br>\nPlease note that this list is not exhaustive and you can process a MT940 from\nany bank.  Just define a bank code from this list above or else your own bank\nid in the ofxstatement configuration.</p>\n<p>From the <a href=\"https://github.com/WoLpH/mt940\" rel=\"nofollow\">MT940</a> project I have copied the\nspecial processing instructions for the banks tested there, thus ASN and\nMBANK. Other banks do not seem to need special instructions to parse their\nMT940 file.</p>\n<h3>Advanced conversions (using the configuration)</h3>\n<p>This will generate an OFX to standard output with \"myingbankid\" for OFX tag BANKID:</p>\n<pre><code>$ ofxstatement convert -t ing:nl src/ofxstatement/plugins/tests/samples/ing.sta -\n</code></pre>\n<p>And this will generate an OFX to standard output with \"BREXPLPW\" for OFX tag BANKID:</p>\n<pre><code>$ ofxstatement convert -t mBank src/ofxstatement/plugins/tests/samples/mt940_mBank.txt -\n</code></pre>\n<p>Finally this will use the special instructions for ASNB but use \"myasnbbankid\" for\nOFX tag BANKID:</p>\n<pre><code>$ ofxstatement convert -t asnb src/ofxstatement/plugins/tests/samples/mt940_ASNB.txt -\n</code></pre>\n<h2>Change history</h2>\n<p>See the Changelog (CHANGELOG.md).</p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>,\nand this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2>[Unreleased]</h2>\n<h2>[1.1.0] - 2020-03-26</h2>\n<h3>Added</h3>\n<pre><code>- Added reference to the Changelog in the Readme.\n- The Readme mentions test_requirements.txt for installing test modules.\n- More checks concerning the content (dates with start and end\ndate exclusive) that may result in a ValidationError exception.\n- Added GNU Makefile for keeping the important operations together.\n- MANIFEST.in now includes the Makefile and CHANGELOG.md.\n</code></pre>\n<h3>Changed</h3>\n<pre><code>- The generation af a unique OFX id did only return a counter in\ncase of duplicates.\n- The Readme mentions now my fork of the ofxstatement instead of\nhttps://github.com/kedder/ofxstatement.git.\n- The __about__.py file outputs the version number and that is\nused in the Makefile.\n- Code refactoring.\n- Readme enhanced.\n</code></pre>\n<h2>[1.0.0] - 2020-03-15</h2>\n<h3>Added</h3>\n<pre><code>- First version to convert a Swift MT940 file to an OFX file.\n</code></pre>\n\n          </div>"}, "last_serial": 6888673, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "112de9e42685c91777be5f9bf3fd19eb", "sha256": "02164a4b3240fbad174ec9ed52a7d2be4a3ad68a720c3fa98fb744c77b83d1fe"}, "downloads": -1, "filename": "ofxstatement_mt940-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "112de9e42685c91777be5f9bf3fd19eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6206, "upload_time": "2020-03-15T12:42:38", "upload_time_iso_8601": "2020-03-15T12:42:38.965149Z", "url": "https://files.pythonhosted.org/packages/24/92/b26525cb8b1944e2c32401ade3a9f258f29cb39eaef1b819e542d234e0b7/ofxstatement_mt940-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "436c8bf619e9811adf6a681f3697dd7d", "sha256": "3144790df99068ddd779936e22cede3761256dc129f813b4a2dd800cc1941c7e"}, "downloads": -1, "filename": "ofxstatement-mt940-1.0.0.tar.gz", "has_sig": false, "md5_digest": "436c8bf619e9811adf6a681f3697dd7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6979, "upload_time": "2020-03-15T12:42:41", "upload_time_iso_8601": "2020-03-15T12:42:41.288885Z", "url": "https://files.pythonhosted.org/packages/83/15/da264a1d0a981784a805c1f4fa26c739323b3a99e8beec6f9d46e9a2a879/ofxstatement-mt940-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "93a2c9ce3a478f81a0161066857497c6", "sha256": "0c5801483a8312e723407b8baf835e4ebc2489bc5d6e331808a8127f7c2a93e3"}, "downloads": -1, "filename": "ofxstatement_mt940-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93a2c9ce3a478f81a0161066857497c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7436, "upload_time": "2020-03-26T14:54:28", "upload_time_iso_8601": "2020-03-26T14:54:28.154589Z", "url": "https://files.pythonhosted.org/packages/83/eb/3e85d535187086adb7b94dd521d6dcb4b0f480e4555b9918b671fbb7837a/ofxstatement_mt940-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b37fa20a798dae6442126c11809346b7", "sha256": "c1a183df131413f6fdf8590d10237b5a5181b97e1b2ed3f4da3ffc55c6005750"}, "downloads": -1, "filename": "ofxstatement-mt940-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b37fa20a798dae6442126c11809346b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9817, "upload_time": "2020-03-26T14:54:29", "upload_time_iso_8601": "2020-03-26T14:54:29.742325Z", "url": "https://files.pythonhosted.org/packages/dc/ce/d435a39fdcd6e6d1101023a8d144f289ce66b072a9ece9b6328255dd68d2/ofxstatement-mt940-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93a2c9ce3a478f81a0161066857497c6", "sha256": "0c5801483a8312e723407b8baf835e4ebc2489bc5d6e331808a8127f7c2a93e3"}, "downloads": -1, "filename": "ofxstatement_mt940-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93a2c9ce3a478f81a0161066857497c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7436, "upload_time": "2020-03-26T14:54:28", "upload_time_iso_8601": "2020-03-26T14:54:28.154589Z", "url": "https://files.pythonhosted.org/packages/83/eb/3e85d535187086adb7b94dd521d6dcb4b0f480e4555b9918b671fbb7837a/ofxstatement_mt940-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b37fa20a798dae6442126c11809346b7", "sha256": "c1a183df131413f6fdf8590d10237b5a5181b97e1b2ed3f4da3ffc55c6005750"}, "downloads": -1, "filename": "ofxstatement-mt940-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b37fa20a798dae6442126c11809346b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9817, "upload_time": "2020-03-26T14:54:29", "upload_time_iso_8601": "2020-03-26T14:54:29.742325Z", "url": "https://files.pythonhosted.org/packages/dc/ce/d435a39fdcd6e6d1101023a8d144f289ce66b072a9ece9b6328255dd68d2/ofxstatement-mt940-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:55 2020"}