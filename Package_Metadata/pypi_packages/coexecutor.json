{"info": {"author": "Keunhong Lee", "author_email": "dlrmsghd@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "Though CoExecutor uses 1 CPU core at any time,\n\nlimitations such as 'max_workers' are needed for\nlimiting concurrent asyncio connections.\n\nThis is useful when you are building a asyncio-based web crawler.\n\nIt is designed to have exactly same result with respect to\npython's ThreadPoolExecutor and ProcessPoolExecutor.\n\nAlso, CoExecutor supports additional features like\n'limit' or 'out_of_order'.\n\ncoexecutor.map(..., limit=X) limits the number of pending futures\n(done, but not collected yet).\n\ncoexecutor.map(..., out_of_order=True) ignores the input iterator's ordering.\n\nThe results are collected by the termination order of the jobs.\n\nCoExecutor constructor requires a loop to rely on.\n\nWith debug=True, it will print the number of active coroutines per second.\n\nWorks with Python3.5+.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/leeopop/coexecutor", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leeopop/coexecutor", "keywords": "coroutine pool executor", "license": "LGPLv3+", "maintainer": null, "maintainer_email": null, "name": "coexecutor", "package_url": "https://pypi.org/project/coexecutor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/coexecutor/", "project_urls": {"Download": "https://github.com/leeopop/coexecutor", "Homepage": "https://github.com/leeopop/coexecutor"}, "release_url": "https://pypi.org/project/coexecutor/0.0.1a1/", "requires_dist": null, "requires_python": null, "summary": "CoroutinePoolExecutor compatible to ThreadPoolExecutor and ProcessPoolExecutor", "version": "0.0.1a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Though CoExecutor uses 1 CPU core at any time,</p>\n<p>limitations such as \u2018max_workers\u2019 are needed for\nlimiting concurrent asyncio connections.</p>\n<p>This is useful when you are building a asyncio-based web crawler.</p>\n<p>It is designed to have exactly same result with respect to\npython\u2019s ThreadPoolExecutor and ProcessPoolExecutor.</p>\n<p>Also, CoExecutor supports additional features like\n\u2018limit\u2019 or \u2018out_of_order\u2019.</p>\n<p>coexecutor.map(\u2026, limit=X) limits the number of pending futures\n(done, but not collected yet).</p>\n<p>coexecutor.map(\u2026, out_of_order=True) ignores the input iterator\u2019s ordering.</p>\n<p>The results are collected by the termination order of the jobs.</p>\n<p>CoExecutor constructor requires a loop to rely on.</p>\n<p>With debug=True, it will print the number of active coroutines per second.</p>\n<p>Works with Python3.5+.</p>\n\n          </div>"}, "last_serial": 2160203, "releases": {"0.0.1a1": []}, "urls": [], "timestamp": "Thu May  7 22:18:11 2020"}