{"info": {"author": "Tony Blank, Jesse Dhillon", "author_email": "tony@context.io, jesse@deva0.net", "bugtrack_url": null, "classifiers": [], "description": "Context.IO API v2.0 Python Library\n==================================\n\nThis is the python client library for v2.0 of the Context.IO API!\n\n##Dependencies\nRAUTH - If you do not have that, snag it with\n```$ pip install rauth```\nor \n```$ easy_install rauth```\n, or \u201cUse the [Source](https://github.com/litl/rauth), Luke\u201d\n\nREQUESTS - rauth is built on top of the requests module\n```$ pip install requests```\nor\n```$ easy_install requests```\nor [Source](https://github.com/kennethreitz/requests)\n\n##Installation\nCheck out / download the module from git, change directory to the folder with setup.py and run:\n\n    python setup.py install\n\nYou'll probably want to toss a sudo before that, depending on your OS. That's it though!\n\n##Usage\nYou first need to instantiate the main ContextIO object with your API credentials:\n\n\timport contextio as c\n    \n\tCONSUMER_KEY = 'YOUR_API_KEY'\n\tCONSUMER_SECRET = 'YOUR_API_SECRET'\n    \n\tcontext_io = c.ContextIO(\n\t\tconsumer_key=CONSUMER_KEY, \n\t\tconsumer_secret=CONSUMER_SECRET\n\t)\n\nThe ContextIO class can optionally accept a debug keyword parameter that prints or logs more info about the request and response.\n\nThe module is fully docstringed out, so feel free to jump into the python interpreter and help(foo) on stuff. Explore the resource classes and methods!\n\nHere's how you can query the API for an account:\n\n    accounts = context_io.get_accounts(email='johndoe@gmail.com')\n    # since we return a list, let's be sure we have a result\n    if accounts:\n        account = accounts[0]\n\nThe Account class has methods to represent all the kinds of requests you can make under that resource.\n\nIf you store account ids, message ids, file ids, or anything else like that on your server, you can instantiate these objects without touching the API, for increased speed. Here's an example of how you do that.\n\n\tparams = {\n\t\t'id': 'ACCOUNT_ID_HERE'\n\t}\n\taccount = c.Account(context_io, params)\n\nThat'll just be an empty object, but you need to pass in the \"id\" since that's used to form the URL for API endpoints for the account resource. If you want to query the API and populate that account object, you can simply do a:\n\n\taccount.get()\n\nYou can use this same technique to populate sub-resource objects too.\n\n\tparams = {\n\t\t'message_id': 'MESSAGE_ID_HERE'\n\t}\n\tmessage = c.Message(account, params)\n\t# populate the message object with data from the API\n\tmessage.get()\n\nNotice how the Message class needs an Account object as a parent? That's because the library uses an object's ancestors to build the URL.\n\nIf you have any questions, don't hesitate to contact tony@context.io (that's me!). I'd love to assist you with any issues you encounter and learn how you'll use Context.IO!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://context.io", "keywords": "contextIO,dokdok,imap,oauth", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "context-io-2", "package_url": "https://pypi.org/project/context-io-2/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/context-io-2/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://context.io"}, "release_url": "https://pypi.org/project/context-io-2/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "I did not create this package; I'm just adding it to pypi.  It's already freely available on GitHub.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Context.IO API v2.0 Python Library<br>==================================<br><br>This is the python client library for v2.0 of the Context.IO API!<br><br>##Dependencies<br>RAUTH - If you do not have that, snag it with<br>```$ pip install rauth```<br>or <br>```$ easy_install rauth```<br>, or \u201cUse the [Source](https://github.com/litl/rauth), Luke\u201d<br><br>REQUESTS - rauth is built on top of the requests module<br>```$ pip install requests```<br>or<br>```$ easy_install requests```<br>or [Source](https://github.com/kennethreitz/requests)<br><br>##Installation<br>Check out / download the module from git, change directory to the folder with setup.py and run:<br><br>    python setup.py install<br><br>You'll probably want to toss a sudo before that, depending on your OS. That's it though!<br><br>##Usage<br>You first need to instantiate the main ContextIO object with your API credentials:<br><br>\timport contextio as c<br>    <br>\tCONSUMER_KEY = 'YOUR_API_KEY'<br>\tCONSUMER_SECRET = 'YOUR_API_SECRET'<br>    <br>\tcontext_io = c.ContextIO(<br>\t\tconsumer_key=CONSUMER_KEY, <br>\t\tconsumer_secret=CONSUMER_SECRET<br>\t)<br><br>The ContextIO class can optionally accept a debug keyword parameter that prints or logs more info about the request and response.<br><br>The module is fully docstringed out, so feel free to jump into the python interpreter and help(foo) on stuff. Explore the resource classes and methods!<br><br>Here's how you can query the API for an account:<br><br>    accounts = context_io.get_accounts(email='johndoe@gmail.com')<br>    # since we return a list, let's be sure we have a result<br>    if accounts:<br>        account = accounts[0]<br><br>The Account class has methods to represent all the kinds of requests you can make under that resource.<br><br>If you store account ids, message ids, file ids, or anything else like that on your server, you can instantiate these objects without touching the API, for increased speed. Here's an example of how you do that.<br><br>\tparams = {<br>\t\t'id': 'ACCOUNT_ID_HERE'<br>\t}<br>\taccount = c.Account(context_io, params)<br><br>That'll just be an empty object, but you need to pass in the \"id\" since that's used to form the URL for API endpoints for the account resource. If you want to query the API and populate that account object, you can simply do a:<br><br>\taccount.get()<br><br>You can use this same technique to populate sub-resource objects too.<br><br>\tparams = {<br>\t\t'message_id': 'MESSAGE_ID_HERE'<br>\t}<br>\tmessage = c.Message(account, params)<br>\t# populate the message object with data from the API<br>\tmessage.get()<br><br>Notice how the Message class needs an Account object as a parent? That's because the library uses an object's ancestors to build the URL.<br><br>If you have any questions, don't hesitate to contact tony@context.io (that's me!). I'd love to assist you with any issues you encounter and learn how you'll use Context.IO!\n          </div>"}, "last_serial": 1254455, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "e62c761767cc104f5ff360bd8323c9f2", "sha256": "d552a3fa46c79933c4fcd5ca8415deedf5681d52767376aad28c6ce3fe6b0e76"}, "downloads": -1, "filename": "context-io-2-2.0.tar.gz", "has_sig": false, "md5_digest": "e62c761767cc104f5ff360bd8323c9f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23401, "upload_time": "2014-10-10T15:27:11", "upload_time_iso_8601": "2014-10-10T15:27:11.401911Z", "url": "https://files.pythonhosted.org/packages/17/0d/3e5e7eee22b77f63207fb7dc23c3bc52f9819b28c570d5da8d0f8007f443/context-io-2-2.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "395cfb9ce68b7146736cbf0d290da183", "sha256": "96c645e8f509f049b120926ce5920f1f65485fffeb5c5dad968e9c6e6f7dc0f1"}, "downloads": -1, "filename": "context-io-2-2.0.1.tar.gz", "has_sig": false, "md5_digest": "395cfb9ce68b7146736cbf0d290da183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23797, "upload_time": "2014-10-10T15:30:15", "upload_time_iso_8601": "2014-10-10T15:30:15.398634Z", "url": "https://files.pythonhosted.org/packages/5f/11/5e6b5e66dae06a65297b0a725fc38bb8c726da81fe3f38ab7d414357c96d/context-io-2-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "395cfb9ce68b7146736cbf0d290da183", "sha256": "96c645e8f509f049b120926ce5920f1f65485fffeb5c5dad968e9c6e6f7dc0f1"}, "downloads": -1, "filename": "context-io-2-2.0.1.tar.gz", "has_sig": false, "md5_digest": "395cfb9ce68b7146736cbf0d290da183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23797, "upload_time": "2014-10-10T15:30:15", "upload_time_iso_8601": "2014-10-10T15:30:15.398634Z", "url": "https://files.pythonhosted.org/packages/5f/11/5e6b5e66dae06a65297b0a725fc38bb8c726da81fe3f38ab7d414357c96d/context-io-2-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}