{"info": {"author": "Cherish Chen", "author_email": "sinchb128@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "python-onvif-zeep\n============\n\nONVIF Client Implementation in Python\n\nDependencies\n------------\n`zeep <http://docs.python-zeep.org>`_ >= 3.0.0\n\nInstall python-onvif-zeep\n-------------------------\n**From Source**\n\nYou should clone this repository and run setup.py::\n\n    cd python-onvif-zeep && python setup.py install\n\nAlternatively, you can run::\n\n    pip install --upgrade onvif_zeep\n\n\nGetting Started\n---------------\n\nInitialize an ONVIFCamera instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    from onvif import ONVIFCamera\n    mycam = ONVIFCamera('192.168.0.2', 80, 'user', 'passwd', '/etc/onvif/wsdl/')\n\nNow, an ONVIFCamera instance is available. By default, a devicemgmt service is also available if everything is OK.\n\nSo, all operations defined in the WSDL document::\n\n/etc/onvif/wsdl/devicemgmt.wsdl\n\nare available.\n\nGet information from your camera\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n::\n\n    # Get Hostname\n    resp = mycam.devicemgmt.GetHostname()\n    print 'My camera`s hostname: ' + str(resp.Name)\n\n    # Get system date and time\n    dt = mycam.devicemgmt.GetSystemDateAndTime()\n    tz = dt.TimeZone\n    year = dt.UTCDateTime.Date.Year\n    hour = dt.UTCDateTime.Time.Hour\n\nConfigure (Control) your camera\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo configure your camera, there are two ways to pass parameters to service methods.\n\n**Dict**\n\nThis is the simpler way::\n\n    params = {'Name': 'NewHostName'}\n    device_service.SetHostname(params)\n\n**Type Instance**\n\nThis is the recommended way. Type instance will raise an\nexception if you set an invalid (or non-existent) parameter.\n\n::\n\n    params = mycam.devicemgmt.create_type('SetHostname')\n    params.Hostname = 'NewHostName'\n    mycam.devicemgmt.SetHostname(params)\n\n    time_params = mycam.devicemgmt.create_type('SetSystemDateAndTime')\n    time_params.DateTimeType = 'Manual'\n    time_params.DaylightSavings = True\n    time_params.TimeZone.TZ = 'CST-8:00:00'\n    time_params.UTCDateTime.Date.Year = 2014\n    time_params.UTCDateTime.Date.Month = 12\n    time_params.UTCDateTime.Date.Day = 3\n    time_params.UTCDateTime.Time.Hour = 9\n    time_params.UTCDateTime.Time.Minute = 36\n    time_params.UTCDateTime.Time.Second = 11\n    mycam.devicemgmt.SetSystemDateAndTime(time_params)\n\nUse other services\n~~~~~~~~~~~~~~~~~~\nONVIF protocol has defined many services.\nYou can find all the services and operations `here <http://www.onvif.org/onvif/ver20/util/operationIndex.html>`_.\nONVIFCamera has support methods to create new services::\n\n    # Create ptz service\n    ptz_service = mycam.create_ptz_service()\n    # Get ptz configuration\n    mycam.ptz.GetConfiguration()\n    # Another way\n    # ptz_service.GetConfiguration()\n\nOr create an unofficial service::\n\n    xaddr = 'http://192.168.0.3:8888/onvif/yourservice'\n    yourservice = mycam.create_onvif_service('service.wsdl', xaddr, 'yourservice')\n    yourservice.SomeOperation()\n    # Another way\n    # mycam.yourservice.SomeOperation()\n\nONVIF CLI\n---------\npython-onvif also provides a command line interactive interface: onvif-cli.\nonvif-cli is installed automatically.\n\nSingle command example\n~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ onvif-cli devicemgmt GetHostname --user 'admin' --password '12345' --host '192.168.0.112' --port 80\n    True: {'FromDHCP': True, 'Name': hision}\n    $ onvif-cli devicemgmt SetHostname \"{'Name': 'NewerHostname'}\" --user 'admin' --password '12345' --host '192.168.0.112' --port 80\n    True: {}\n\nInteractive mode\n~~~~~~~~~~~~~~~~\n\n::\n\n    $ onvif-cli -u 'admin' -a '12345' --host '192.168.0.112' --port 80 --wsdl /etc/onvif/wsdl/\n    ONVIF >>> cmd\n    analytics   devicemgmt  events      imaging     media       ptz\n    ONVIF >>> cmd devicemgmt GetWsdlUrl\n    True: http://www.onvif.org/\n    ONVIF >>> cmd devicemgmt SetHostname {'Name': 'NewHostname'}\n    ONVIF >>> cmd devicemgmt GetHostname\n    True: {'Name': 'NewHostName'}\n    ONVIF >>> cmd devicemgmt SomeOperation\n    False: No Operation: SomeOperation\n\nNOTE: Tab completion is supported for interactive mode.\n\nBatch mode\n~~~~~~~~~~\n\n::\n\n    $ vim batchcmds\n    $ cat batchcmds\n    cmd devicemgmt GetWsdlUrl\n    cmd devicemgmt SetHostname {'Name': 'NewHostname', 'FromDHCP': True}\n    cmd devicemgmt GetHostname\n    $ onvif-cli --host 192.168.0.112 -u admin -a 12345 -w /etc/onvif/wsdl/ < batchcmds\n    ONVIF >>> True: http://www.onvif.org/\n    ONVIF >>> True: {}\n    ONVIF >>> True: {'FromDHCP': False, 'Name': NewHostname}\n\nReferences\n----------\n\n* `ONVIF Offical Website <http://www.onvif.com>`_\n\n* `Operations Index <http://www.onvif.org/onvif/ver20/util/operationIndex.html>`_\n\n* `ONVIF Develop Documents <http://www.onvif.org/specs/DocMap-2.4.2.html>`_\n\n* `Foscam Python Lib <http://github.com/quatanium/foscam-python-lib>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/quatanium/python-onvif", "keywords": "ONVIF,Camera,IPC", "license": "MIT", "maintainer": "sinchb", "maintainer_email": "sinchb128@gmail.com", "name": "onvif-zeep", "package_url": "https://pypi.org/project/onvif-zeep/", "platform": "", "project_url": "https://pypi.org/project/onvif-zeep/", "project_urls": {"Homepage": "http://github.com/quatanium/python-onvif"}, "release_url": "https://pypi.org/project/onvif-zeep/0.2.12/", "requires_dist": null, "requires_python": "", "summary": "Python Client for ONVIF Camera", "version": "0.2.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            python-onvif-zeep<br>============<br><br>ONVIF Client Implementation in Python<br><br>Dependencies<br>------------<br>`zeep &lt;http://docs.python-zeep.org&gt;`_ &gt;= 3.0.0<br><br>Install python-onvif-zeep<br>-------------------------<br>**From Source**<br><br>You should clone this repository and run setup.py::<br><br>    cd python-onvif-zeep &amp;&amp; python setup.py install<br><br>Alternatively, you can run::<br><br>    pip install --upgrade onvif_zeep<br><br><br>Getting Started<br>---------------<br><br>Initialize an ONVIFCamera instance<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>::<br><br>    from onvif import ONVIFCamera<br>    mycam = ONVIFCamera('192.168.0.2', 80, 'user', 'passwd', '/etc/onvif/wsdl/')<br><br>Now, an ONVIFCamera instance is available. By default, a devicemgmt service is also available if everything is OK.<br><br>So, all operations defined in the WSDL document::<br><br>/etc/onvif/wsdl/devicemgmt.wsdl<br><br>are available.<br><br>Get information from your camera<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>::<br><br>    # Get Hostname<br>    resp = mycam.devicemgmt.GetHostname()<br>    print 'My camera`s hostname: ' + str(resp.Name)<br><br>    # Get system date and time<br>    dt = mycam.devicemgmt.GetSystemDateAndTime()<br>    tz = dt.TimeZone<br>    year = dt.UTCDateTime.Date.Year<br>    hour = dt.UTCDateTime.Time.Hour<br><br>Configure (Control) your camera<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>To configure your camera, there are two ways to pass parameters to service methods.<br><br>**Dict**<br><br>This is the simpler way::<br><br>    params = {'Name': 'NewHostName'}<br>    device_service.SetHostname(params)<br><br>**Type Instance**<br><br>This is the recommended way. Type instance will raise an<br>exception if you set an invalid (or non-existent) parameter.<br><br>::<br><br>    params = mycam.devicemgmt.create_type('SetHostname')<br>    params.Hostname = 'NewHostName'<br>    mycam.devicemgmt.SetHostname(params)<br><br>    time_params = mycam.devicemgmt.create_type('SetSystemDateAndTime')<br>    time_params.DateTimeType = 'Manual'<br>    time_params.DaylightSavings = True<br>    time_params.TimeZone.TZ = 'CST-8:00:00'<br>    time_params.UTCDateTime.Date.Year = 2014<br>    time_params.UTCDateTime.Date.Month = 12<br>    time_params.UTCDateTime.Date.Day = 3<br>    time_params.UTCDateTime.Time.Hour = 9<br>    time_params.UTCDateTime.Time.Minute = 36<br>    time_params.UTCDateTime.Time.Second = 11<br>    mycam.devicemgmt.SetSystemDateAndTime(time_params)<br><br>Use other services<br>~~~~~~~~~~~~~~~~~~<br>ONVIF protocol has defined many services.<br>You can find all the services and operations `here &lt;http://www.onvif.org/onvif/ver20/util/operationIndex.html&gt;`_.<br>ONVIFCamera has support methods to create new services::<br><br>    # Create ptz service<br>    ptz_service = mycam.create_ptz_service()<br>    # Get ptz configuration<br>    mycam.ptz.GetConfiguration()<br>    # Another way<br>    # ptz_service.GetConfiguration()<br><br>Or create an unofficial service::<br><br>    xaddr = 'http://192.168.0.3:8888/onvif/yourservice'<br>    yourservice = mycam.create_onvif_service('service.wsdl', xaddr, 'yourservice')<br>    yourservice.SomeOperation()<br>    # Another way<br>    # mycam.yourservice.SomeOperation()<br><br>ONVIF CLI<br>---------<br>python-onvif also provides a command line interactive interface: onvif-cli.<br>onvif-cli is installed automatically.<br><br>Single command example<br>~~~~~~~~~~~~~~~~~~~~~~<br><br>::<br><br>    $ onvif-cli devicemgmt GetHostname --user 'admin' --password '12345' --host '192.168.0.112' --port 80<br>    True: {'FromDHCP': True, 'Name': hision}<br>    $ onvif-cli devicemgmt SetHostname \"{'Name': 'NewerHostname'}\" --user 'admin' --password '12345' --host '192.168.0.112' --port 80<br>    True: {}<br><br>Interactive mode<br>~~~~~~~~~~~~~~~~<br><br>::<br><br>    $ onvif-cli -u 'admin' -a '12345' --host '192.168.0.112' --port 80 --wsdl /etc/onvif/wsdl/<br>    ONVIF &gt;&gt;&gt; cmd<br>    analytics   devicemgmt  events      imaging     media       ptz<br>    ONVIF &gt;&gt;&gt; cmd devicemgmt GetWsdlUrl<br>    True: http://www.onvif.org/<br>    ONVIF &gt;&gt;&gt; cmd devicemgmt SetHostname {'Name': 'NewHostname'}<br>    ONVIF &gt;&gt;&gt; cmd devicemgmt GetHostname<br>    True: {'Name': 'NewHostName'}<br>    ONVIF &gt;&gt;&gt; cmd devicemgmt SomeOperation<br>    False: No Operation: SomeOperation<br><br>NOTE: Tab completion is supported for interactive mode.<br><br>Batch mode<br>~~~~~~~~~~<br><br>::<br><br>    $ vim batchcmds<br>    $ cat batchcmds<br>    cmd devicemgmt GetWsdlUrl<br>    cmd devicemgmt SetHostname {'Name': 'NewHostname', 'FromDHCP': True}<br>    cmd devicemgmt GetHostname<br>    $ onvif-cli --host 192.168.0.112 -u admin -a 12345 -w /etc/onvif/wsdl/ &lt; batchcmds<br>    ONVIF &gt;&gt;&gt; True: http://www.onvif.org/<br>    ONVIF &gt;&gt;&gt; True: {}<br>    ONVIF &gt;&gt;&gt; True: {'FromDHCP': False, 'Name': NewHostname}<br><br>References<br>----------<br><br>* `ONVIF Offical Website &lt;http://www.onvif.com&gt;`_<br><br>* `Operations Index &lt;http://www.onvif.org/onvif/ver20/util/operationIndex.html&gt;`_<br><br>* `ONVIF Develop Documents &lt;http://www.onvif.org/specs/DocMap-2.4.2.html&gt;`_<br><br>* `Foscam Python Lib &lt;http://github.com/quatanium/foscam-python-lib&gt;`_\n          </div>"}, "last_serial": 4189340, "releases": {"0.2.11": [{"comment_text": "", "digests": {"md5": "66c1031af4bab7c2a6855b29afecde2f", "sha256": "7be74fb1dd98c2308d45216c9c29230861ca233bb509ce4b9da579c692620af8"}, "downloads": -1, "filename": "onvif_zeep-0.2.11.tar.gz", "has_sig": false, "md5_digest": "66c1031af4bab7c2a6855b29afecde2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163897, "upload_time": "2018-06-21T08:54:25", "upload_time_iso_8601": "2018-06-21T08:54:25.036879Z", "url": "https://files.pythonhosted.org/packages/bd/fd/91a0ae1ac6500d0bee825f6890b9124738e71ed59c8087a88fbc401dc6db/onvif_zeep-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "06470cc2bfe8c7b13a555310ddfcd447", "sha256": "aa8bbc02a73eaa50894b0c18e39fa8d318a583a664c65bf35b3c8029d1c40b49"}, "downloads": -1, "filename": "onvif_zeep-0.2.12.tar.gz", "has_sig": false, "md5_digest": "06470cc2bfe8c7b13a555310ddfcd447", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163061, "upload_time": "2018-08-20T18:12:24", "upload_time_iso_8601": "2018-08-20T18:12:24.209014Z", "url": "https://files.pythonhosted.org/packages/d7/3c/fe79b4f59337b5cf5d40ea747764b4ff38bab322b2de66706a4d8d7b01e8/onvif_zeep-0.2.12.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "2fb9e53819abfe97068f358bf97fb207", "sha256": "d766936082dda0ae5d276179020499de63bc33a7d78e80f45252ff1e0b524332"}, "downloads": -1, "filename": "onvif_zeep-0.2.7.tar.gz", "has_sig": false, "md5_digest": "2fb9e53819abfe97068f358bf97fb207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163759, "upload_time": "2017-09-22T10:01:54", "upload_time_iso_8601": "2017-09-22T10:01:54.562757Z", "url": "https://files.pythonhosted.org/packages/44/01/1a27632cca21e2a84507e801776cd1994e4e4c278eb2c39595e4ff83ace0/onvif_zeep-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "a06e0b77c0ffcca66d5def326d19fffa", "sha256": "b6f9cdfaf8298c89175214a00dbb9fbdcb5bec9728ced2f538db1f8a653a1474"}, "downloads": -1, "filename": "onvif_zeep-0.2.8.tar.gz", "has_sig": false, "md5_digest": "a06e0b77c0ffcca66d5def326d19fffa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163487, "upload_time": "2018-04-09T18:00:31", "upload_time_iso_8601": "2018-04-09T18:00:31.563985Z", "url": "https://files.pythonhosted.org/packages/da/15/a973953663baad5713006ce6ec5d1537c125cd68a2cbdfe4f7929b42a0c6/onvif_zeep-0.2.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06470cc2bfe8c7b13a555310ddfcd447", "sha256": "aa8bbc02a73eaa50894b0c18e39fa8d318a583a664c65bf35b3c8029d1c40b49"}, "downloads": -1, "filename": "onvif_zeep-0.2.12.tar.gz", "has_sig": false, "md5_digest": "06470cc2bfe8c7b13a555310ddfcd447", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163061, "upload_time": "2018-08-20T18:12:24", "upload_time_iso_8601": "2018-08-20T18:12:24.209014Z", "url": "https://files.pythonhosted.org/packages/d7/3c/fe79b4f59337b5cf5d40ea747764b4ff38bab322b2de66706a4d8d7b01e8/onvif_zeep-0.2.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:45 2020"}