{"info": {"author": "Michael Gill", "author_email": "michael.78912.8@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "####\nTBIP\n####\n\n**********************************************\nTBIP- Tool for Building Installers with Python\n**********************************************\na flexible cross-platform package to create installers using Python\n\n.. contents::\n\nAbout\n-----\n\nTBIP is a package designed to let you build installers with python,\neasily and be very flexible at the same time.\n\nExample\n-------\n.. code-block:: python\n\n    import io\n    import os\n\n    import tbip.installer as install\n    from tbip.cli import CLI\n    import tbip.uiutils as utils\n\n    LICENCE = \"\"\"\n    a fake licence.\n    \"\"\"\n\n    README = \"Howdy. Bye now, this thing does stuff.\"\n\n\n    def main():\n        installer = install.Installer(\n            [\n                utils.Readme(io.StringIO(README)),\n                # a readme class\n                utils.Licence(io.StringIO(LICENCE)),\n                # a licence class\n                utils.Choice('proceed with installation?'),\n                # make sure you want to continue\n            ],\n            [\n                utils.Readme(io.StringIO('you installed it. good work.'))\n                # output message after installation\n            ],\n            # install to home directory/thing\n            os.path.join(os.environ.get('HOME')\n                        or os.environ.get('USERPROFILE'), 'thing'),\n            # use the CLI interface\n            CLI,\n        )\n\n        # run the installer\n        installer.run()\n\n    if __name__ == '__main__':\n        main()\n\na very small, but functional example of a script.\n\nUsage\n-----\nokay, say we had that script saved, and ready to use.\nbut what is the point? it's not going to actually install \nanything, because you havent even specified where to install!!\n\nthat's where the command line comes in handy. you should be able to\nrun this with :code:`python -m tbip <script-name> -d <data-directory>`.\nthis will bundle your data in the installer script, as a zip file encoded\nin base64, to be extracted at runtime and installed from there on.\n\nInstallation\n------------\ninstall from :code:`pip install tbip`. or, clone the repository,\n:code:`git clone https://github.com/michael78912/tbip.git`, and run \n:code:`python3 setup.py install`\n\nAdvanced Usage\n--------------\n\nGetting Priveleges\n^^^^^^^^^^^^^^^^^^\n\nWindows\n\"\"\"\"\"\"\"\n\n:code:`tbip.get_admin()` should restart the program as an administrator.\nif not, the user probably has insufficient rights.\n\nUnix/Linux\n\"\"\"\"\"\"\"\"\"\"\n\n:code:`tbip.get_root()` should replace the current program with gksudo, \nnd run it as root.\n\nif it does not work, install gksudo in the package :code:`gksu`, and try again.\n\n\nItems\n^^^^^\n\n*a note on how items interact with their UI*: the UI object\nyou passed to :code:`Installer` was sent to each of the items you also sent.\nwhen an item's :code:`run` method is called, it is expected to return 1 of 2\nvalues, which is passed to the UI's :\n\n- 0: everything went OK, continue\n- 1: something happened, abort\n\nthere is a wider variety of  items in tbip.uiutils that can be used during the installation.\nthey include:\n\n- Readme\n- Licence\n- Caller\n- Choice\n\nReadme\n\"\"\"\"\"\"\ndisplays a readme, and tells the user to press enter to continue.\n\n:code:`Readme(file)` --> tbip.uiutils.Readme object\n\nLicence\n\"\"\"\"\"\"\"\ndisplays a licence, preceded by the header \"LICENCE:\".\naks the user if this is OK and wants to continue.\n\n:code:`Licence(file)` --> tbip.uiutils.Licence object\n\nCaller\n\"\"\"\"\"\"\ncalls an external program, with the arguments specified.\njust a very thin wrapper around :code:`subprocess.call`.\n\n:code:`Caller(args)` --> tbip.uiutils.Caller object\n\nChoice\n\"\"\"\"\"\"\nprompts the user for a string, and acts accordingly.\nif the string enterd is not valid, prompt again.\n\n:code:`Choice(msg=\"continue?\", opts={'y': lambda: 0, 'n': lambda: 1}, ignorecase=True)` --> tbip.uiutils.Choice object\n\nInstallation progress\n^^^^^^^^^^^^^^^^^^^^^\n\nthere are sevreal ways to watch the installation progress\n(all accessed in :code:`tbip.installer.ProgressUtils`)\n\n+--------------------------------+------------------------------------+-----------+\n|          Description           |            name                    |  value    |\n+================================+====================================+===========+\n|          a progress bar        | :code:`ProgressUtils.PROGRESS_BAR` |    0      |\n+--------------------------------+------------------------------------+-----------+\n|           percentage           |   :code:`ProgressUtils.PERCENT`    |    1      |\n+--------------------------------+------------------------------------+-----------+\n| displaying each file processed |   :code:`ProgressUtils.FILES`-     |    2      |\n+--------------------------------+------------------------------------+-----------+\n|     do absolutely nothing      |     :code:`ProgressUtils.NULL`     |    3      |\n+--------------------------------+------------------------------------+-----------+\n|  at first, display a message   |      :code:`ProgressUtils.MSG`     |    4      |\n+--------------------------------+------------------------------------+-----------+\n\nCommand Line options\n^^^^^^^^^^^^^^^^^^^^\n\ntbip uses PyInstaller_ internally to freeze the output scripts.\n\n.. _PyInstaller: https://www.pyinstaller.org/\n\nMiscellaneous:\n\n-h, --help              display help\n-v, --version           display version information\n\n-d, --data <dir>        bundle this data with script in a zip file\n-o <output>             output filename of script\n-f, --freeze            freeze the installer script\n\nPyInstaller specific:\n\n-u, --upx <dir>         directory where UPX_ is installed (if at all)\n-w, --windowed          use no console window (Windows specific)\n-i, --icon <icon>       path to icon file (Windows specific)\n\n.. _UPX: https://upx.github.io/\n\nDeriving classes\n^^^^^^^^^^^^^^^^\n\nonly the classes UI and Item should be derived from. find the base classes for:\n\n- UI: :code:`tbip.ui.UI`\n- Item: :code:`tbip.uiutils.baseitem.Item`\n\nUser Interfaces\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nthe CLI (Command Line Interface) is a UI. you can see here:\n\n.. code-block::python\n\n    class _CLI(UI):\n    \"\"\"class for handling all of the sending of items, and runs them in order.\"\"\"\n\n    ProgressBar = ProgressBar\n\n    class Percent:\n        ...\n\n        def __init__(self, outfile=sys.stdout, infile=sys.stdin):\n            ...\n\n        def echo(self, *args, fcolour=colorama.Fore.WHITE,\n            ...\n\n        def get_input(self, prompt='', length='*', strip=True):\n        ...\n\n        @staticmethod\n        def getch(echo=True):\n            ...\n\n        @staticmethod\n        def clear():\n            ...\n\nall those methods should be overridden in a new class.\n(I actually haven't used :code:`getch` yet, but i might, so it would be good to)\n\nthey all should be self explanitory, but:\n\n:code:`echo` outputs the message to the screen in CLI it is just a wrapper around `print`. \nit should be able to take all of the arguments you see there, and act accordingly.\n\n:code:`get_input` should be able to read one line. the length parameter acts a bit like quantifiers in a regex.\n?: truncate it to one character, or 0\n+: will return if the string is one character or more, if it is null, will prompt again.\n\\*: any length (including 0)\n\n(of course, any integer will work too)\n\n:code:`getch` should read a single character. if echo is true, echo the character too.\n\n:code:`clear` should simply clear the display\n\nItems\n\"\"\"\"\"\n\nItems are easier. here is :code:`Caller`:\n\n.. code-block::python\n\n    class Caller(Item):\n    \"\"\"calls an external program\"\"\"\n\n    def __init__(self, args):\n        self.args = args\n\n    def run(self):\n        subprocess.call(self.args)\n        return 0\n\nsimple, short and sweet. of course, this is a minimal example,\nyou can create any item you want to do anything you want!\n\nit must have :code:`run` overridden, because if you didn't, it would do nothing.\n*remember that :code:`run` must always return 1 or 0!*\n\nContributing\n------------\n\nany help is appreciated. if you want to help, please fork_ this repository,\nand create a pull request when you want to. also, please note any bugs,\nand if you have any suggestions, I would be glad to try them! thank you!\n\n.. _fork: https://github.com/Michael78912/tbip/fork\n\nIn the Future\n-------------\n\nI plan on making a GUI User interface. this is probably top of my list on things to\ndo. once again, if you have any suggestions, either make an issue, or email me at\nmichael.78912.8@gmail.com\n\n\n\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Michael78912/tbip", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tbip", "package_url": "https://pypi.org/project/tbip/", "platform": "", "project_url": "https://pypi.org/project/tbip/", "project_urls": {"Homepage": "https://github.com/Michael78912/tbip"}, "release_url": "https://pypi.org/project/tbip/0.0.0.4/", "requires_dist": ["colorama"], "requires_python": "", "summary": "Build cross-platform installers", "version": "0.0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>a flexible cross-platform package to create installers using Python</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#about\" id=\"id2\" rel=\"nofollow\">About</a></li>\n<li><a href=\"#example\" id=\"id3\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#advanced-usage\" id=\"id6\" rel=\"nofollow\">Advanced Usage</a><ul>\n<li><a href=\"#getting-priveleges\" id=\"id7\" rel=\"nofollow\">Getting Priveleges</a><ul>\n<li><a href=\"#windows\" id=\"id8\" rel=\"nofollow\">Windows</a></li>\n<li><a href=\"#unix-linux\" id=\"id9\" rel=\"nofollow\">Unix/Linux</a></li>\n</ul>\n</li>\n<li><a href=\"#items\" id=\"id10\" rel=\"nofollow\">Items</a><ul>\n<li><a href=\"#readme\" id=\"id11\" rel=\"nofollow\">Readme</a></li>\n<li><a href=\"#licence\" id=\"id12\" rel=\"nofollow\">Licence</a></li>\n<li><a href=\"#caller\" id=\"id13\" rel=\"nofollow\">Caller</a></li>\n<li><a href=\"#choice\" id=\"id14\" rel=\"nofollow\">Choice</a></li>\n</ul>\n</li>\n<li><a href=\"#installation-progress\" id=\"id15\" rel=\"nofollow\">Installation progress</a></li>\n<li><a href=\"#command-line-options\" id=\"id16\" rel=\"nofollow\">Command Line options</a></li>\n<li><a href=\"#deriving-classes\" id=\"id17\" rel=\"nofollow\">Deriving classes</a><ul>\n<li><a href=\"#user-interfaces\" id=\"id18\" rel=\"nofollow\">User Interfaces</a></li>\n<li><a href=\"#id1\" id=\"id19\" rel=\"nofollow\">Items</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id20\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#in-the-future\" id=\"id21\" rel=\"nofollow\">In the Future</a></li>\n</ul>\n</div>\n<div id=\"about\">\n<h2><a href=\"#id2\" rel=\"nofollow\">About</a></h2>\n<p>TBIP is a package designed to let you build installers with python,\neasily and be very flexible at the same time.</p>\n</div>\n<div id=\"example\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Example</a></h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tbip.installer</span> <span class=\"k\">as</span> <span class=\"nn\">install</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tbip.cli</span> <span class=\"kn\">import</span> <span class=\"n\">CLI</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tbip.uiutils</span> <span class=\"k\">as</span> <span class=\"nn\">utils</span>\n\n<span class=\"n\">LICENCE</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\na fake licence.\n\"\"\"</span>\n\n<span class=\"n\">README</span> <span class=\"o\">=</span> <span class=\"s2\">\"Howdy. Bye now, this thing does stuff.\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">installer</span> <span class=\"o\">=</span> <span class=\"n\">install</span><span class=\"o\">.</span><span class=\"n\">Installer</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Readme</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">README</span><span class=\"p\">)),</span>\n            <span class=\"c1\"># a readme class</span>\n            <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Licence</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">LICENCE</span><span class=\"p\">)),</span>\n            <span class=\"c1\"># a licence class</span>\n            <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Choice</span><span class=\"p\">(</span><span class=\"s1\">'proceed with installation?'</span><span class=\"p\">),</span>\n            <span class=\"c1\"># make sure you want to continue</span>\n        <span class=\"p\">],</span>\n        <span class=\"p\">[</span>\n            <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">Readme</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"s1\">'you installed it. good work.'</span><span class=\"p\">))</span>\n            <span class=\"c1\"># output message after installation</span>\n        <span class=\"p\">],</span>\n        <span class=\"c1\"># install to home directory/thing</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'HOME'</span><span class=\"p\">)</span>\n                    <span class=\"ow\">or</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'USERPROFILE'</span><span class=\"p\">),</span> <span class=\"s1\">'thing'</span><span class=\"p\">),</span>\n        <span class=\"c1\"># use the CLI interface</span>\n        <span class=\"n\">CLI</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># run the installer</span>\n    <span class=\"n\">installer</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>a very small, but functional example of a script.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<p>okay, say we had that script saved, and ready to use.\nbut what is the point? it\u2019s not going to actually install\nanything, because you havent even specified where to install!!</p>\n<p>that\u2019s where the command line comes in handy. you should be able to\nrun this with <code>python -m tbip &lt;script-name&gt; -d &lt;data-directory&gt;</code>.\nthis will bundle your data in the installer script, as a zip file encoded\nin base64, to be extracted at runtime and installed from there on.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Installation</a></h2>\n<p>install from <code>pip install tbip</code>. or, clone the repository,\n<code>git clone https://github.com/michael78912/tbip.git</code>, and run\n<code>python3 setup.py install</code></p>\n</div>\n<div id=\"advanced-usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Advanced Usage</a></h2>\n<div id=\"getting-priveleges\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Getting Priveleges</a></h3>\n<div id=\"windows\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Windows</a></h4>\n<p><code>tbip.get_admin()</code> should restart the program as an administrator.\nif not, the user probably has insufficient rights.</p>\n</div>\n<div id=\"unix-linux\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Unix/Linux</a></h4>\n<p><code>tbip.get_root()</code> should replace the current program with gksudo,\nnd run it as root.</p>\n<p>if it does not work, install gksudo in the package <code>gksu</code>, and try again.</p>\n</div>\n</div>\n<div id=\"items\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Items</a></h3>\n<p><em>a note on how items interact with their UI</em>: the UI object\nyou passed to <code>Installer</code> was sent to each of the items you also sent.\nwhen an item\u2019s <code>run</code> method is called, it is expected to return 1 of 2\nvalues, which is passed to the UI\u2019s :</p>\n<ul>\n<li>0: everything went OK, continue</li>\n<li>1: something happened, abort</li>\n</ul>\n<p>there is a wider variety of  items in tbip.uiutils that can be used during the installation.\nthey include:</p>\n<ul>\n<li>Readme</li>\n<li>Licence</li>\n<li>Caller</li>\n<li>Choice</li>\n</ul>\n<div id=\"readme\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Readme</a></h4>\n<p>displays a readme, and tells the user to press enter to continue.</p>\n<p><code>Readme(file)</code> \u2013&gt; tbip.uiutils.Readme object</p>\n</div>\n<div id=\"licence\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Licence</a></h4>\n<p>displays a licence, preceded by the header \u201cLICENCE:\u201d.\naks the user if this is OK and wants to continue.</p>\n<p><code>Licence(file)</code> \u2013&gt; tbip.uiutils.Licence object</p>\n</div>\n<div id=\"caller\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Caller</a></h4>\n<p>calls an external program, with the arguments specified.\njust a very thin wrapper around <code>subprocess.call</code>.</p>\n<p><code>Caller(args)</code> \u2013&gt; tbip.uiutils.Caller object</p>\n</div>\n<div id=\"choice\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Choice</a></h4>\n<p>prompts the user for a string, and acts accordingly.\nif the string enterd is not valid, prompt again.</p>\n<p><code>Choice(msg=\"continue?\", opts={'y': lambda: 0, 'n': lambda: 1}, ignorecase=True)</code> \u2013&gt; tbip.uiutils.Choice object</p>\n</div>\n</div>\n<div id=\"installation-progress\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Installation progress</a></h3>\n<p>there are sevreal ways to watch the installation progress\n(all accessed in <code>tbip.installer.ProgressUtils</code>)</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Description</th>\n<th>name</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>a progress bar</td>\n<td><code>ProgressUtils.PROGRESS_BAR</code></td>\n<td>0</td>\n</tr>\n<tr><td>percentage</td>\n<td><code>ProgressUtils.PERCENT</code></td>\n<td>1</td>\n</tr>\n<tr><td>displaying each file processed</td>\n<td><code>ProgressUtils.FILES</code>-</td>\n<td>2</td>\n</tr>\n<tr><td>do absolutely nothing</td>\n<td><code>ProgressUtils.NULL</code></td>\n<td>3</td>\n</tr>\n<tr><td>at first, display a message</td>\n<td><code>ProgressUtils.MSG</code></td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"command-line-options\">\n<h3><a href=\"#id16\" rel=\"nofollow\">Command Line options</a></h3>\n<p>tbip uses <a href=\"https://www.pyinstaller.org/\" rel=\"nofollow\">PyInstaller</a> internally to freeze the output scripts.</p>\n<p>Miscellaneous:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>display help</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--version</span></kbd></td>\n<td>display version information</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d</span>, <span class=\"option\">--data <var>&lt;dir&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>bundle this data with script in a zip file</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o <var>&lt;output&gt;</var></span></kbd></td>\n<td>output filename of script</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-f</span>, <span class=\"option\">--freeze</span></kbd></td>\n<td>freeze the installer script</td></tr>\n</tbody>\n</table>\n<p>PyInstaller specific:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-u</span>, <span class=\"option\">--upx <var>&lt;dir&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>directory where <a href=\"https://upx.github.io/\" rel=\"nofollow\">UPX</a> is installed (if at all)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-w</span>, <span class=\"option\">--windowed</span></kbd></td>\n<td>use no console window (Windows specific)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--icon <var>&lt;icon&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>path to icon file (Windows specific)</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"deriving-classes\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Deriving classes</a></h3>\n<p>only the classes UI and Item should be derived from. find the base classes for:</p>\n<ul>\n<li>UI: <code>tbip.ui.UI</code></li>\n<li>Item: <code>tbip.uiutils.baseitem.Item</code></li>\n</ul>\n<div id=\"user-interfaces\">\n<h4><a href=\"#id18\" rel=\"nofollow\">User Interfaces</a></h4>\n<p>the CLI (Command Line Interface) is a UI. you can see here:</p>\n<p>all those methods should be overridden in a new class.\n(I actually haven\u2019t used <code>getch</code> yet, but i might, so it would be good to)</p>\n<p>they all should be self explanitory, but:</p>\n<p><code>echo</code> outputs the message to the screen in CLI it is just a wrapper around <cite>print</cite>.\nit should be able to take all of the arguments you see there, and act accordingly.</p>\n<p><code>get_input</code> should be able to read one line. the length parameter acts a bit like quantifiers in a regex.\n?: truncate it to one character, or 0\n+: will return if the string is one character or more, if it is null, will prompt again.\n*: any length (including 0)</p>\n<p>(of course, any integer will work too)</p>\n<p><code>getch</code> should read a single character. if echo is true, echo the character too.</p>\n<p><code>clear</code> should simply clear the display</p>\n</div>\n<div id=\"id1\">\n<h4><a href=\"#id19\" rel=\"nofollow\">Items</a></h4>\n<p>Items are easier. here is <code>Caller</code>:</p>\n<p>simple, short and sweet. of course, this is a minimal example,\nyou can create any item you want to do anything you want!</p>\n<p>it must have <code>run</code> overridden, because if you didn\u2019t, it would do nothing.\n<em>remember that :code:`run` must always return 1 or 0!</em></p>\n</div>\n</div>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Contributing</a></h2>\n<p>any help is appreciated. if you want to help, please <a href=\"https://github.com/Michael78912/tbip/fork\" rel=\"nofollow\">fork</a> this repository,\nand create a pull request when you want to. also, please note any bugs,\nand if you have any suggestions, I would be glad to try them! thank you!</p>\n</div>\n<div id=\"in-the-future\">\n<h2><a href=\"#id21\" rel=\"nofollow\">In the Future</a></h2>\n<p>I plan on making a GUI User interface. this is probably top of my list on things to\ndo. once again, if you have any suggestions, either make an issue, or email me at\n<a href=\"mailto:michael.78912.8%40gmail.com\">michael<span>.</span>78912<span>.</span>8<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 4178729, "releases": {"0.0.0.1": [{"comment_text": "", "digests": {"md5": "146481e3cea2bb3021b4599368687a24", "sha256": "efc9f39e313fdb6e151cc139f88ef6098e6df5f4e23d376a0a21f34d5c2dc6a1"}, "downloads": -1, "filename": "tbip-0.0.0.1-py3.4.egg", "has_sig": false, "md5_digest": "146481e3cea2bb3021b4599368687a24", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 34999, "upload_time": "2018-08-17T00:33:34", "upload_time_iso_8601": "2018-08-17T00:33:34.719016Z", "url": "https://files.pythonhosted.org/packages/26/f0/36e03d7b1b048fc677df182dbf28e9cdab156b8c3b97c8ece15fb47a4ad2/tbip-0.0.0.1-py3.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7410e464ed6fb497fd1cf67e2a2554f0", "sha256": "cf84f1f98fb0784cd2834c4f851c22e9cae2aaabb958751fa8dc3a0464667c8b"}, "downloads": -1, "filename": "tbip-0.0.0.1.tar.gz", "has_sig": false, "md5_digest": "7410e464ed6fb497fd1cf67e2a2554f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16437, "upload_time": "2018-08-17T00:33:36", "upload_time_iso_8601": "2018-08-17T00:33:36.331476Z", "url": "https://files.pythonhosted.org/packages/21/b1/417d24f2601618119b8380182b267f1a3459e36a2ce2e60e7df6edad3362/tbip-0.0.0.1.tar.gz", "yanked": false}], "0.0.0.2": [{"comment_text": "", "digests": {"md5": "895ead3793950bbc0a3d6b0559c64f76", "sha256": "c86e8a63e8093d4f1374ba45f8b1f1bbac80a6f1d86135f1691aafba5db178d9"}, "downloads": -1, "filename": "tbip-0.0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "895ead3793950bbc0a3d6b0559c64f76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18964, "upload_time": "2018-08-16T23:07:09", "upload_time_iso_8601": "2018-08-16T23:07:09.728042Z", "url": "https://files.pythonhosted.org/packages/10/f1/b5d84257eb4631f4d2cd075b50a8b736c5860c43cee97c62040745984ab2/tbip-0.0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa51a38f7203de62822060a574c2138", "sha256": "08a415a99bc14e55b0d3d531b0501dc1f47c93fc98c32c37a7da81847c9e12e4"}, "downloads": -1, "filename": "tbip-0.0.0.2.tar.gz", "has_sig": false, "md5_digest": "bfa51a38f7203de62822060a574c2138", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18158, "upload_time": "2018-08-16T23:07:10", "upload_time_iso_8601": "2018-08-16T23:07:10.968477Z", "url": "https://files.pythonhosted.org/packages/ea/5f/3a8005ce3a41fa051da7cc49faecade28b8ffd9881d5ff7b9e6ac77d5be3/tbip-0.0.0.2.tar.gz", "yanked": false}], "0.0.0.3": [{"comment_text": "", "digests": {"md5": "5937cda9b535142a0442884d7e863e8a", "sha256": "30ed47b5813f14f9388add8991aee0f4db293acbb7c55c091df37d824eb3b912"}, "downloads": -1, "filename": "tbip-0.0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5937cda9b535142a0442884d7e863e8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16775, "upload_time": "2018-08-17T01:01:40", "upload_time_iso_8601": "2018-08-17T01:01:40.766890Z", "url": "https://files.pythonhosted.org/packages/a8/c0/a55973bf807468f8007962fdb6f8965773fbc25f01cd404ed994011e00a0/tbip-0.0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b66acbb557c75c5f16bafa76ec7231fe", "sha256": "9c6f8f6582cd6bc92f72f15156cc5ea3c159c6e1398e5590cb4a04e0551f4767"}, "downloads": -1, "filename": "tbip-0.0.0.3.tar.gz", "has_sig": false, "md5_digest": "b66acbb557c75c5f16bafa76ec7231fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16439, "upload_time": "2018-08-17T01:01:42", "upload_time_iso_8601": "2018-08-17T01:01:42.150135Z", "url": "https://files.pythonhosted.org/packages/16/5e/c3ba22a22168f047419a33ce23e764e53492d1291638dcfb08e12cbb539e/tbip-0.0.0.3.tar.gz", "yanked": false}], "0.0.0.4": [{"comment_text": "", "digests": {"md5": "e191eb71eaeea074a03b70af3670ea7d", "sha256": "c773699990f564f79d4d4b7d6d6f6500727921a3cd7dd4e733a5a7f497fb6d70"}, "downloads": -1, "filename": "tbip-0.0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e191eb71eaeea074a03b70af3670ea7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16761, "upload_time": "2018-08-17T02:41:18", "upload_time_iso_8601": "2018-08-17T02:41:18.737071Z", "url": "https://files.pythonhosted.org/packages/98/32/db1b559d8ade1364a445c9cb37710c1237fd5c056e66702742ad7b92b51a/tbip-0.0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6975e7ddd6495c894eab91ac61e1038f", "sha256": "675ab30b32514b83708adb76ab1771ee071ed2ebd3d687bc6254a438923af0a3"}, "downloads": -1, "filename": "tbip-0.0.0.4.tar.gz", "has_sig": false, "md5_digest": "6975e7ddd6495c894eab91ac61e1038f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16393, "upload_time": "2018-08-17T02:41:20", "upload_time_iso_8601": "2018-08-17T02:41:20.145039Z", "url": "https://files.pythonhosted.org/packages/f6/56/8395358bb27be638a64cb3b19cbb0d8093b335384e252553589d5fd79df9/tbip-0.0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e191eb71eaeea074a03b70af3670ea7d", "sha256": "c773699990f564f79d4d4b7d6d6f6500727921a3cd7dd4e733a5a7f497fb6d70"}, "downloads": -1, "filename": "tbip-0.0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e191eb71eaeea074a03b70af3670ea7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16761, "upload_time": "2018-08-17T02:41:18", "upload_time_iso_8601": "2018-08-17T02:41:18.737071Z", "url": "https://files.pythonhosted.org/packages/98/32/db1b559d8ade1364a445c9cb37710c1237fd5c056e66702742ad7b92b51a/tbip-0.0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6975e7ddd6495c894eab91ac61e1038f", "sha256": "675ab30b32514b83708adb76ab1771ee071ed2ebd3d687bc6254a438923af0a3"}, "downloads": -1, "filename": "tbip-0.0.0.4.tar.gz", "has_sig": false, "md5_digest": "6975e7ddd6495c894eab91ac61e1038f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16393, "upload_time": "2018-08-17T02:41:20", "upload_time_iso_8601": "2018-08-17T02:41:20.145039Z", "url": "https://files.pythonhosted.org/packages/f6/56/8395358bb27be638a64cb3b19cbb0d8093b335384e252553589d5fd79df9/tbip-0.0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:33 2020"}