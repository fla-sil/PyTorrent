{"info": {"author": "Evan Zhang", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.7"], "description": "# Testcase Generator\n\nA testcase generator for easily creating testcases for online judges.\n\n## Installation\n```\n$ pip install testcase-generator\n```\n\nAlternatively, just clone this repository!\n\n## Usage\n```python\nimport random\n\nfrom testcase_generator import BoundedConstraint, Case, Batch, Generator, ConstraintParser\n\ndef set_constraints(self):\n    ## Write main constraints here ##\n    # Sets the constraint of N to be between 1 and 10^3 inclusive.\n    self.N = BoundedConstraint(1, 10**3)\n    # Sets the constraint of M to be a floating-point value between 1 and 10 inclusive.\n    self.M = BoundedConstraint(1, 10, generator=random.uniform)\n\ndef generate_input(self, **kwargs):\n    ## Write generator here ##\n    # Generates a value for N and M on the same line\n    yield self.N.next, self.M.next\n\n\nCase.SET_CONSTRAINTS = set_constraints\nCase.SET_INPUT = generate_input\n\n\n# Using the yaml config to create the batches:\nconfig_yaml = \"\"\"\n- batch: 1 # initializes a batch where cases go inside a directory called \"batch1\".\n  constraints: {N: 1~10**2} # sets the batch constraints.\n  cases: # individual cases for this batch.\n   - {N: MIN} # sets N to be the minimum value in this batch (N = 1).\n   - {N: MAX} # sets N to be the maximum value in this batch (N = 10**2).\n   - {N: 2~2**3} # sets N to be some random value between 2 and 2**3, inclusive.\n   - {N: MAX-1~} # sets N to be some random value between the global maximum minus 1 and the global maximum of 10**2.\n- batch: 2\n  constraints: {} # no batch constraints, so all the constraints are the global constraints.\n  cases:\n   - {}\n   - {N: ~2, M: 1}\n\"\"\"\n\np = ConstraintParser(data=config_yaml)\np.parse()\nbatches = p.batches\n\n\n# alternatively, you can create the batches manually\nbatches = [\n    Batch(num=1, cases=[Case() for i in range(4)]),\n    Batch(num=2, cases=[Case(N=BoundedConstraint(1, 10)) for i in range(2)]),\n]\n\n\nGenerator(batches=batches, exe='COMMAND_TO_GENERATE_OUTPUT').start()\n```\n\n## Custom Generators\n### GraphGenerator\nThis generator can be used to generate a variety of graph types, such as trees.\n\nExample code:\n```python\nfrom testcase_generator import BoundedConstraint, CustomGeneratorConstraint, Case, Batch, Generator, ConstraintParser, GraphGenerator\n\n\"\"\"\n |  __init__(self, N, type, *args, **kwargs)\n |      N: a BoundedConstraint object or an integer for the number of nodes\n |      type:\n |               1: normal graph\n |               2: connected graph\n |               3: complete graph\n |               4: circle\n |               10: line\n |               11: normal tree\n |               12: tree, all nodes connected to one node\n |               13: caterpillar tree\n |               14: binary tree\n |      kwargs:\n |          M: number of edges, leave blank if it is a tree\n |          duplicates: allow for duplicate edges between nodes\n |          self_loops: allow for edges between the same node\n\"\"\"\n\ndef set_constraints(self):\n    ## Write main constraints here ##\n    # Sets the constraint of N to be between 1 and 10^3 inclusive.\n    # In this case, this is a graph with N nodes.\n    self.N = BoundedConstraint(1, 10**3)\n    # Creates the graph constraint.\n    self.E = CustomGeneratorConstraint(generator=GraphGenerator)\n    # Sets the graph type to be some graph type between 10 and 14.\n    # Please read the initialize method doc for details.\n    # In this case, the graph type is some form of a tree.\n    self.graph_type = BoundedConstraint(10, 14)\n\ndef generate_input(self, **kwargs):\n    ## Write generator here ##\n    n = self.N.next\n    yield n\n    self.E.initialize(n, self.graph_type.next)\n    for i in range(n-1):\n        yield self.E.next\n\n\nCase.SET_CONSTRAINTS = set_constraints\nCase.SET_INPUT = generate_input\n\n\n# Using the yaml config to create the batches:\nconfig_yaml = \"\"\"\n- batch: 1\n  constraints: {N: 1~10**3-1}\n  cases:\n   - constraints: {}\n     repeat: 6\n   - constraints: {graph_type: 11}\n\"\"\"\n\np = ConstraintParser(data=config_yaml)\np.parse()\nbatches = p.batches\n\n# If you don't want to generate output, exclude the \"exe\" argument\nGenerator(batches=batches).start()\n```\n\n### StringGenerator\n\n```python\n\"\"\"\n |  __init__(self, N, *args, **kwargs)\n |      N: a BoundedConstraint object or an integer for the string length\n |      kwargs:\n |          type: type of string to generate\n |                  standard: default string\n |                  palindrome: palindromic string\n |                  space_separated: space separated \"words\"\n |                  repeating: string consisting of a substring that is repeated more than 1 time\n |          V: a ChoiceConstraint for the possible letters, the default is all lowercase letters\n\"\"\"\n```\n\n### ArrayGenerator\n\n```python\n\"\"\"\n |  __init__(self, N, *args, **kwargs)\n |      N: a BoundedConstraint object or an integer for the array size\n |      kwargs:\n |          type: type of array to generate\n |                  standard: default array\n |                  sorted: sorted default array\n |                  distinct: distinct elements in the array. set V appropriately for a permutation\n |                  palindrome: palindromic array\n |          V: a ChoiceConstraint or BoundedConstraint object for the array values\n |          additional arguments for the generator:\n |                  distinct: takes a value of \"k\" for number of times each element can occur (default is 1)\n\"\"\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ninjaclasher/testcase-generator", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "testcase-generator", "package_url": "https://pypi.org/project/testcase-generator/", "platform": "", "project_url": "https://pypi.org/project/testcase-generator/", "project_urls": {"Homepage": "https://github.com/Ninjaclasher/testcase-generator"}, "release_url": "https://pypi.org/project/testcase-generator/0.3.1/", "requires_dist": ["pyyaml"], "requires_python": "", "summary": "A testcase generator for creating testcases for online judges.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Testcase Generator</h1>\n<p>A testcase generator for easily creating testcases for online judges.</p>\n<h2>Installation</h2>\n<pre><code>$ pip install testcase-generator\n</code></pre>\n<p>Alternatively, just clone this repository!</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">testcase_generator</span> <span class=\"kn\">import</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">,</span> <span class=\"n\">Case</span><span class=\"p\">,</span> <span class=\"n\">Batch</span><span class=\"p\">,</span> <span class=\"n\">Generator</span><span class=\"p\">,</span> <span class=\"n\">ConstraintParser</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">set_constraints</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\">## Write main constraints here ##</span>\n    <span class=\"c1\"># Sets the constraint of N to be between 1 and 10^3 inclusive.</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Sets the constraint of M to be a floating-point value between 1 and 10 inclusive.</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">generator</span><span class=\"o\">=</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\">## Write generator here ##</span>\n    <span class=\"c1\"># Generates a value for N and M on the same line</span>\n    <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">N</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">next</span>\n\n\n<span class=\"n\">Case</span><span class=\"o\">.</span><span class=\"n\">SET_CONSTRAINTS</span> <span class=\"o\">=</span> <span class=\"n\">set_constraints</span>\n<span class=\"n\">Case</span><span class=\"o\">.</span><span class=\"n\">SET_INPUT</span> <span class=\"o\">=</span> <span class=\"n\">generate_input</span>\n\n\n<span class=\"c1\"># Using the yaml config to create the batches:</span>\n<span class=\"n\">config_yaml</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">- batch: 1 # initializes a batch where cases go inside a directory called \"batch1\".</span>\n<span class=\"s2\">  constraints: {N: 1~10**2} # sets the batch constraints.</span>\n<span class=\"s2\">  cases: # individual cases for this batch.</span>\n<span class=\"s2\">   - {N: MIN} # sets N to be the minimum value in this batch (N = 1).</span>\n<span class=\"s2\">   - {N: MAX} # sets N to be the maximum value in this batch (N = 10**2).</span>\n<span class=\"s2\">   - {N: 2~2**3} # sets N to be some random value between 2 and 2**3, inclusive.</span>\n<span class=\"s2\">   - {N: MAX-1~} # sets N to be some random value between the global maximum minus 1 and the global maximum of 10**2.</span>\n<span class=\"s2\">- batch: 2</span>\n<span class=\"s2\">  constraints: </span><span class=\"si\">{}</span><span class=\"s2\"> # no batch constraints, so all the constraints are the global constraints.</span>\n<span class=\"s2\">  cases:</span>\n<span class=\"s2\">   - </span><span class=\"si\">{}</span><span class=\"s2\"></span>\n<span class=\"s2\">   - {N: ~2, M: 1}</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ConstraintParser</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">config_yaml</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n<span class=\"n\">batches</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">batches</span>\n\n\n<span class=\"c1\"># alternatively, you can create the batches manually</span>\n<span class=\"n\">batches</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Batch</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Case</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]),</span>\n    <span class=\"n\">Batch</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cases</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Case</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">=</span><span class=\"n\">BoundedConstraint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]),</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">batches</span><span class=\"o\">=</span><span class=\"n\">batches</span><span class=\"p\">,</span> <span class=\"n\">exe</span><span class=\"o\">=</span><span class=\"s1\">'COMMAND_TO_GENERATE_OUTPUT'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<h2>Custom Generators</h2>\n<h3>GraphGenerator</h3>\n<p>This generator can be used to generate a variety of graph types, such as trees.</p>\n<p>Example code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">testcase_generator</span> <span class=\"kn\">import</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">,</span> <span class=\"n\">CustomGeneratorConstraint</span><span class=\"p\">,</span> <span class=\"n\">Case</span><span class=\"p\">,</span> <span class=\"n\">Batch</span><span class=\"p\">,</span> <span class=\"n\">Generator</span><span class=\"p\">,</span> <span class=\"n\">ConstraintParser</span><span class=\"p\">,</span> <span class=\"n\">GraphGenerator</span>\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\"> |  __init__(self, N, type, *args, **kwargs)</span>\n<span class=\"sd\"> |      N: a BoundedConstraint object or an integer for the number of nodes</span>\n<span class=\"sd\"> |      type:</span>\n<span class=\"sd\"> |               1: normal graph</span>\n<span class=\"sd\"> |               2: connected graph</span>\n<span class=\"sd\"> |               3: complete graph</span>\n<span class=\"sd\"> |               4: circle</span>\n<span class=\"sd\"> |               10: line</span>\n<span class=\"sd\"> |               11: normal tree</span>\n<span class=\"sd\"> |               12: tree, all nodes connected to one node</span>\n<span class=\"sd\"> |               13: caterpillar tree</span>\n<span class=\"sd\"> |               14: binary tree</span>\n<span class=\"sd\"> |      kwargs:</span>\n<span class=\"sd\"> |          M: number of edges, leave blank if it is a tree</span>\n<span class=\"sd\"> |          duplicates: allow for duplicate edges between nodes</span>\n<span class=\"sd\"> |          self_loops: allow for edges between the same node</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">set_constraints</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\">## Write main constraints here ##</span>\n    <span class=\"c1\"># Sets the constraint of N to be between 1 and 10^3 inclusive.</span>\n    <span class=\"c1\"># In this case, this is a graph with N nodes.</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Creates the graph constraint.</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">CustomGeneratorConstraint</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"o\">=</span><span class=\"n\">GraphGenerator</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Sets the graph type to be some graph type between 10 and 14.</span>\n    <span class=\"c1\"># Please read the initialize method doc for details.</span>\n    <span class=\"c1\"># In this case, the graph type is some form of a tree.</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">graph_type</span> <span class=\"o\">=</span> <span class=\"n\">BoundedConstraint</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">generate_input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\">## Write generator here ##</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">N</span><span class=\"o\">.</span><span class=\"n\">next</span>\n    <span class=\"k\">yield</span> <span class=\"n\">n</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">graph_type</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"o\">.</span><span class=\"n\">next</span>\n\n\n<span class=\"n\">Case</span><span class=\"o\">.</span><span class=\"n\">SET_CONSTRAINTS</span> <span class=\"o\">=</span> <span class=\"n\">set_constraints</span>\n<span class=\"n\">Case</span><span class=\"o\">.</span><span class=\"n\">SET_INPUT</span> <span class=\"o\">=</span> <span class=\"n\">generate_input</span>\n\n\n<span class=\"c1\"># Using the yaml config to create the batches:</span>\n<span class=\"n\">config_yaml</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">- batch: 1</span>\n<span class=\"s2\">  constraints: {N: 1~10**3-1}</span>\n<span class=\"s2\">  cases:</span>\n<span class=\"s2\">   - constraints: </span><span class=\"si\">{}</span><span class=\"s2\"></span>\n<span class=\"s2\">     repeat: 6</span>\n<span class=\"s2\">   - constraints: </span><span class=\"si\">{graph_type: 11}</span><span class=\"s2\"></span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ConstraintParser</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">config_yaml</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n<span class=\"n\">batches</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">batches</span>\n\n<span class=\"c1\"># If you don't want to generate output, exclude the \"exe\" argument</span>\n<span class=\"n\">Generator</span><span class=\"p\">(</span><span class=\"n\">batches</span><span class=\"o\">=</span><span class=\"n\">batches</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<h3>StringGenerator</h3>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\"> |  __init__(self, N, *args, **kwargs)</span>\n<span class=\"sd\"> |      N: a BoundedConstraint object or an integer for the string length</span>\n<span class=\"sd\"> |      kwargs:</span>\n<span class=\"sd\"> |          type: type of string to generate</span>\n<span class=\"sd\"> |                  standard: default string</span>\n<span class=\"sd\"> |                  palindrome: palindromic string</span>\n<span class=\"sd\"> |                  space_separated: space separated \"words\"</span>\n<span class=\"sd\"> |                  repeating: string consisting of a substring that is repeated more than 1 time</span>\n<span class=\"sd\"> |          V: a ChoiceConstraint for the possible letters, the default is all lowercase letters</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>ArrayGenerator</h3>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\"> |  __init__(self, N, *args, **kwargs)</span>\n<span class=\"sd\"> |      N: a BoundedConstraint object or an integer for the array size</span>\n<span class=\"sd\"> |      kwargs:</span>\n<span class=\"sd\"> |          type: type of array to generate</span>\n<span class=\"sd\"> |                  standard: default array</span>\n<span class=\"sd\"> |                  sorted: sorted default array</span>\n<span class=\"sd\"> |                  distinct: distinct elements in the array. set V appropriately for a permutation</span>\n<span class=\"sd\"> |                  palindrome: palindromic array</span>\n<span class=\"sd\"> |          V: a ChoiceConstraint or BoundedConstraint object for the array values</span>\n<span class=\"sd\"> |          additional arguments for the generator:</span>\n<span class=\"sd\"> |                  distinct: takes a value of \"k\" for number of times each element can occur (default is 1)</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6822335, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dbf230e43361efc4923a3029a443be9c", "sha256": "09dd6e759bd8c74616684cb8615ee82af799cf80bce44f15e39a60eab634b44d"}, "downloads": -1, "filename": "testcase_generator-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dbf230e43361efc4923a3029a443be9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18246, "upload_time": "2019-04-14T21:05:10", "upload_time_iso_8601": "2019-04-14T21:05:10.197113Z", "url": "https://files.pythonhosted.org/packages/f9/83/47d0da58f96a20319cc64c6eaa7b5ee96e42c2ecd4422563415e46360c63/testcase_generator-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f13810bcecd972258134619be67c3fd1", "sha256": "c61b8dd58bddcf5fcffeba60c03453a0401a82436c811ee31e51ee98b1cdb342"}, "downloads": -1, "filename": "testcase-generator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f13810bcecd972258134619be67c3fd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4964, "upload_time": "2019-04-14T21:05:12", "upload_time_iso_8601": "2019-04-14T21:05:12.157508Z", "url": "https://files.pythonhosted.org/packages/38/05/2cb6c5fbf9af400a7248590bf388703536cb6d2d14e3785d660517bb7e29/testcase-generator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9728d1c21e4d399be832345f60569c7b", "sha256": "c659b44fab0bdf978af42c4fe0a457bd192f109be84132690cde13165b156b5c"}, "downloads": -1, "filename": "testcase_generator-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9728d1c21e4d399be832345f60569c7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18264, "upload_time": "2019-04-14T21:16:31", "upload_time_iso_8601": "2019-04-14T21:16:31.510752Z", "url": "https://files.pythonhosted.org/packages/3c/71/eb1546677524b3b425cb50086e88113e7c2eb77e7e99e8f0c267ba710eff/testcase_generator-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef08576905bbbc09d89f886df22b47fc", "sha256": "4e12dc131f584ab54dc7eea7713ea2110e8cef8f239e816594bd20fae43f5f50"}, "downloads": -1, "filename": "testcase-generator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ef08576905bbbc09d89f886df22b47fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4999, "upload_time": "2019-04-14T21:16:33", "upload_time_iso_8601": "2019-04-14T21:16:33.032690Z", "url": "https://files.pythonhosted.org/packages/31/67/ed51af8a03be513566ecd6126c567264ac841846525748e624a85f0e0f87/testcase-generator-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3e720ce4b9703c68117a7d9b67f50697", "sha256": "93e8fc4513050b28a4227c5275415c7310a31930cb23ae50353691cfb371be69"}, "downloads": -1, "filename": "testcase_generator-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3e720ce4b9703c68117a7d9b67f50697", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18979, "upload_time": "2019-11-23T20:12:52", "upload_time_iso_8601": "2019-11-23T20:12:52.718819Z", "url": "https://files.pythonhosted.org/packages/e2/1b/497a38d090bbe637b2640360990727de185582e5deb99d1f58345ef81bc9/testcase_generator-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "971510530cba82548922aae625ad063c", "sha256": "6aa1dbb8c8be4c08170b3d12990196579cfab1046c14cadbc2d8548227d10424"}, "downloads": -1, "filename": "testcase-generator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "971510530cba82548922aae625ad063c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7115, "upload_time": "2019-11-23T20:12:54", "upload_time_iso_8601": "2019-11-23T20:12:54.465132Z", "url": "https://files.pythonhosted.org/packages/cf/68/3a065d9408e019dba068aa4a4a4d162034142ba8259aed9f31db55abd8c5/testcase-generator-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4f31548fe2c375f6017d7130195dec67", "sha256": "8eefc2a87294a72fa016dd34cd2ae9ce5ae9ae50b56bef063f71bc18183677d2"}, "downloads": -1, "filename": "testcase_generator-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4f31548fe2c375f6017d7130195dec67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20520, "upload_time": "2020-02-21T22:29:49", "upload_time_iso_8601": "2020-02-21T22:29:49.120982Z", "url": "https://files.pythonhosted.org/packages/2d/5e/c156187a23c58d34c05df1c527c4653a64582f1d2469e385a3b75145c5e3/testcase_generator-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3ca3b1dbe4ad025ca52d4a0a097c39b", "sha256": "68a1d6ad672b611ea74028c1a0933057422ef17d1a28e98a56433fb1e2f0a426"}, "downloads": -1, "filename": "testcase-generator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e3ca3b1dbe4ad025ca52d4a0a097c39b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8149, "upload_time": "2020-02-21T22:29:50", "upload_time_iso_8601": "2020-02-21T22:29:50.726714Z", "url": "https://files.pythonhosted.org/packages/c9/87/b4dc34fde4b62aca98a1d73ba3c5d01b297b3209a17821c4b4d7a904178d/testcase-generator-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a08e13f21756784e7563fcadaee2bcf7", "sha256": "07bf674020064a965bca73f472d1cb283b4736ade18a4c77025b7a8cfa3df34a"}, "downloads": -1, "filename": "testcase_generator-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a08e13f21756784e7563fcadaee2bcf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20533, "upload_time": "2020-02-23T16:50:06", "upload_time_iso_8601": "2020-02-23T16:50:06.818817Z", "url": "https://files.pythonhosted.org/packages/d6/96/f907da721388fcd92a89fd883bbf75e9592671b5570d7068ae3e858bf41f/testcase_generator-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "140c2cae2626b8a783c86d79799c0516", "sha256": "f453a57b1c4f939ccfe0524c6b59183913775f06e93128791474a93b4ca04947"}, "downloads": -1, "filename": "testcase-generator-0.2.1.tar.gz", "has_sig": false, "md5_digest": "140c2cae2626b8a783c86d79799c0516", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8181, "upload_time": "2020-02-23T16:50:08", "upload_time_iso_8601": "2020-02-23T16:50:08.773462Z", "url": "https://files.pythonhosted.org/packages/26/12/e622fb46149e9801c78a4287708ea0be6ccd9b1e8140c2289ac6076e756b/testcase-generator-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bb4f0e83639b7198f3dac2bf0bea54a0", "sha256": "2213937d8aba1144468a43367d544ebba75bddf4a62830b08c24d5e70f66a94d"}, "downloads": -1, "filename": "testcase_generator-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb4f0e83639b7198f3dac2bf0bea54a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23322, "upload_time": "2020-03-16T03:26:41", "upload_time_iso_8601": "2020-03-16T03:26:41.289658Z", "url": "https://files.pythonhosted.org/packages/5a/b7/981ae9db808bd0115fafbe29b227fc8d895bd4f26a61e1bcd5595766407b/testcase_generator-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "455ea4816365584736fec291cd907091", "sha256": "5f072a5ae04f484dbd89136b4bbb6b4941784c1a90257da7308cff5fda04fe4a"}, "downloads": -1, "filename": "testcase-generator-0.3.0.tar.gz", "has_sig": false, "md5_digest": "455ea4816365584736fec291cd907091", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9559, "upload_time": "2020-03-16T03:26:42", "upload_time_iso_8601": "2020-03-16T03:26:42.705189Z", "url": "https://files.pythonhosted.org/packages/e0/f0/f0627ceacbb8772a1abc44aff5c70a7331b5e306d1df17bed13e6a26887d/testcase-generator-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "be535a66c0b0ece954d830c0f1138381", "sha256": "5f5bd80c500d3e885afe4a978c17e2f1ad1e9c198c7912aadd39ba5d10a4d15d"}, "downloads": -1, "filename": "testcase_generator-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be535a66c0b0ece954d830c0f1138381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23448, "upload_time": "2020-03-16T16:34:34", "upload_time_iso_8601": "2020-03-16T16:34:34.349272Z", "url": "https://files.pythonhosted.org/packages/71/c2/1695e196b3753ec69b7f2a1eb8a8774cbe27ecd07ec7f101eec3a688d719/testcase_generator-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55c1d25242392b6c88a6fe13b754d07b", "sha256": "cf863e878bb1d83ebbcf571a57421ef85c99e5978792ed2db6b82d94c112281c"}, "downloads": -1, "filename": "testcase-generator-0.3.1.tar.gz", "has_sig": false, "md5_digest": "55c1d25242392b6c88a6fe13b754d07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9807, "upload_time": "2020-03-16T16:34:35", "upload_time_iso_8601": "2020-03-16T16:34:35.891116Z", "url": "https://files.pythonhosted.org/packages/95/b5/b7441761bfcd630b95e5626a539718a2209c848f59e4bf0ffab390c2a7e3/testcase-generator-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be535a66c0b0ece954d830c0f1138381", "sha256": "5f5bd80c500d3e885afe4a978c17e2f1ad1e9c198c7912aadd39ba5d10a4d15d"}, "downloads": -1, "filename": "testcase_generator-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be535a66c0b0ece954d830c0f1138381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23448, "upload_time": "2020-03-16T16:34:34", "upload_time_iso_8601": "2020-03-16T16:34:34.349272Z", "url": "https://files.pythonhosted.org/packages/71/c2/1695e196b3753ec69b7f2a1eb8a8774cbe27ecd07ec7f101eec3a688d719/testcase_generator-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55c1d25242392b6c88a6fe13b754d07b", "sha256": "cf863e878bb1d83ebbcf571a57421ef85c99e5978792ed2db6b82d94c112281c"}, "downloads": -1, "filename": "testcase-generator-0.3.1.tar.gz", "has_sig": false, "md5_digest": "55c1d25242392b6c88a6fe13b754d07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9807, "upload_time": "2020-03-16T16:34:35", "upload_time_iso_8601": "2020-03-16T16:34:35.891116Z", "url": "https://files.pythonhosted.org/packages/95/b5/b7441761bfcd630b95e5626a539718a2209c848f59e4bf0ffab390c2a7e3/testcase-generator-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:38 2020"}