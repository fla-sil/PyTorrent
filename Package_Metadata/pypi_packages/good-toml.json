{"info": {"author": "William Pearson", "author_email": "uiri@xqz.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "****\nTOML\n****\n\n.. image:: https://badge.fury.io/py/toml.svg\n    :target: https://badge.fury.io/py/toml\n\n.. image:: https://travis-ci.org/uiri/toml.svg?branch=master\n    :target: https://travis-ci.org/uiri/toml\n\n.. image:: https://img.shields.io/pypi/pyversions/toml.svg\n    :target: https://pypi.org/project/toml/\n\n\nA Python library for parsing and creating `TOML <https://en.wikipedia.org/wiki/TOML>`_.\n\nThe module passes `the TOML test suite <https://github.com/BurntSushi/toml-test>`_.\n\nSee also:\n\n* `The TOML Standard <https://github.com/toml-lang/toml>`_\n* `The currently supported TOML specification <https://github.com/toml-lang/toml/blob/v0.5.0/README.md>`_\n\nInstallation\n============\n\nTo install the latest release on `PyPI <https://pypi.org/project/toml/>`_,\nsimply run:\n\n::\n\n  pip install good-toml\n\nOr to install the latest development version, run:\n\n::\n\n  git clone https://github.com/uiri/toml.git\n  cd toml\n  python setup.py install\n\nQuick Tutorial\n==============\n\n*toml.loads* takes in a string containing standard TOML-formatted data and\nreturns a dictionary containing the parsed data.\n\n.. code:: pycon\n\n  >>> import toml\n  >>> toml_string = \"\"\"\n  ... # This is a TOML document.\n  ...\n  ... title = \"TOML Example\"\n  ...\n  ... [owner]\n  ... name = \"Tom Preston-Werner\"\n  ... dob = 1979-05-27T07:32:00-08:00 # First class dates\n  ...\n  ... [database]\n  ... server = \"192.168.1.1\"\n  ... ports = [ 8001, 8001, 8002 ]\n  ... connection_max = 5000\n  ... enabled = true\n  ...\n  ... [servers]\n  ...\n  ...   # Indentation (tabs and/or spaces) is allowed but not required\n  ...   [servers.alpha]\n  ...   ip = \"10.0.0.1\"\n  ...   dc = \"eqdc10\"\n  ...\n  ...   [servers.beta]\n  ...   ip = \"10.0.0.2\"\n  ...   dc = \"eqdc10\"\n  ...\n  ... [clients]\n  ... data = [ [\"gamma\", \"delta\"], [1, 2] ]\n  ...\n  ... # Line breaks are OK when inside arrays\n  ... hosts = [\n  ...   \"alpha\",\n  ...   \"omega\"\n  ... ]\n  ... \"\"\"\n  >>> parsed_toml = toml.loads(toml_string)\n\n\n*toml.dumps* takes a dictionary and returns a string containing the\ncorresponding TOML-formatted data.\n\n.. code:: pycon\n\n  >>> new_toml_string = toml.dumps(parsed_toml)\n  >>> print(new_toml_string)\n  title = \"TOML Example\"\n  [owner]\n  name = \"Tom Preston-Werner\"\n  dob = 1979-05-27T07:32:00Z\n  [database]\n  server = \"192.168.1.1\"\n  ports = [ 8001, 8001, 8002,]\n  connection_max = 5000\n  enabled = true\n  [clients]\n  data = [ [ \"gamma\", \"delta\",], [ 1, 2,],]\n  hosts = [ \"alpha\", \"omega\",]\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"eqdc10\"\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"eqdc10\"\n\nFor more functions, view the API Reference below.\n\nNote\n----\n\nFor Numpy users, by default the data types ``np.floatX`` will not be translated to floats by toml, but will instead be encoded as strings. To get around this, specify the ``TomlNumpyEncoder`` when saving your data.\n\n.. code:: pycon\n\n  >>> import toml\n  >>> import numpy as np\n  >>> a = np.arange(0, 10, dtype=np.double)\n  >>> output = {'a': a}\n  >>> toml.dumps(output)\n  'a = [ \"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\",]\\n'\n  >>> toml.dumps(output, encoder=toml.TomlNumpyEncoder())\n  'a = [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,]\\n'\n\nAPI Reference\n=============\n\n``toml.load(f, _dict=dict)``\n  Parse a file or a list of files as TOML and return a dictionary.\n\n  :Args:\n    * ``f``: A path to a file, list of filepaths (to be read into single\n      object) or a file descriptor\n    * ``_dict``: The class of the dictionary object to be returned\n\n  :Returns:\n    A dictionary (or object ``_dict``) containing parsed TOML data\n\n  :Raises:\n    * ``TypeError``: When ``f`` is an invalid type or is a list containing\n      invalid types\n    * ``TomlDecodeError``: When an error occurs while decoding the file(s)\n\n``toml.loads(s, _dict=dict)``\n  Parse a TOML-formatted string to a dictionary.\n\n  :Args:\n    * ``s``: The TOML-formatted string to be parsed\n    * ``_dict``: Specifies the class of the returned toml dictionary\n\n  :Returns:\n    A dictionary (or object ``_dict``) containing parsed TOML data\n\n  :Raises:\n    * ``TypeError``: When a non-string object is passed\n    * ``TomlDecodeError``: When an error occurs while decoding the\n      TOML-formatted string\n\n``toml.dump(o, f, encoder=None)``\n  Write a dictionary to a file containing TOML-formatted data\n\n  :Args:\n    * ``o``: An object to be converted into TOML\n    * ``f``: A File descriptor where the TOML-formatted output should be stored\n    * ``encoder``: An instance of ``TomlEncoder`` (or subclass) for encoding the object. If ``None``, will default to ``TomlEncoder``\n\n  :Returns:\n    A string containing the TOML-formatted data corresponding to object ``o``\n\n  :Raises:\n    * ``TypeError``: When anything other than file descriptor is passed\n\n``toml.dumps(o, encoder=None)``\n  Create a TOML-formatted string from an input object\n\n  :Args:\n    * ``o``: An object to be converted into TOML\n    * ``encoder``: An instance of ``TomlEncoder`` (or subclass) for encoding the object. If ``None``, will default to ``TomlEncoder``\n\n  :Returns:\n    A string containing the TOML-formatted data corresponding to object ``o``\n\n\n\nLicensing\n=========\n\nThis project is released under the terms of the MIT Open Source License. View\n*LICENSE.txt* for more information.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uiri/toml", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "good-toml", "package_url": "https://pypi.org/project/good-toml/", "platform": "", "project_url": "https://pypi.org/project/good-toml/", "project_urls": {"Homepage": "https://github.com/uiri/toml"}, "release_url": "https://pypi.org/project/good-toml/0.11/", "requires_dist": null, "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "summary": "Python Library for Tom's Obvious, Minimal Language", "version": "0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/toml\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/toml.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff7f3c44c791228736fb888bed52adc84cbcd58e/68747470733a2f2f62616467652e667572792e696f2f70792f746f6d6c2e737667\"></a>\n<a href=\"https://travis-ci.org/uiri/toml\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/uiri/toml.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8831d806cd0e7f03d3e1fd47be57e9037108ac62/68747470733a2f2f7472617669732d63692e6f72672f756972692f746f6d6c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/toml/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/toml.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a52c735aceb574dfb38777faedf4e1da56ba4805/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f746f6d6c2e737667\"></a>\n<p>A Python library for parsing and creating <a href=\"https://en.wikipedia.org/wiki/TOML\" rel=\"nofollow\">TOML</a>.</p>\n<p>The module passes <a href=\"https://github.com/BurntSushi/toml-test\" rel=\"nofollow\">the TOML test suite</a>.</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">The TOML Standard</a></li>\n<li><a href=\"https://github.com/toml-lang/toml/blob/v0.5.0/README.md\" rel=\"nofollow\">The currently supported TOML specification</a></li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the latest release on <a href=\"https://pypi.org/project/toml/\" rel=\"nofollow\">PyPI</a>,\nsimply run:</p>\n<pre>pip install good-toml\n</pre>\n<p>Or to install the latest development version, run:</p>\n<pre>git clone https://github.com/uiri/toml.git\ncd toml\npython setup.py install\n</pre>\n</div>\n<div id=\"quick-tutorial\">\n<h2>Quick Tutorial</h2>\n<p><em>toml.loads</em> takes in a string containing standard TOML-formatted data and\nreturns a dictionary containing the parsed data.</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">toml</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toml_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n</span><span class=\"gp\">... </span><span class=\"s2\"># This is a TOML document.\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">title = \"TOML Example\"\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">[owner]\n</span><span class=\"gp\">... </span><span class=\"s2\">name = \"Tom Preston-Werner\"\n</span><span class=\"gp\">... </span><span class=\"s2\">dob = 1979-05-27T07:32:00-08:00 # First class dates\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">[database]\n</span><span class=\"gp\">... </span><span class=\"s2\">server = \"192.168.1.1\"\n</span><span class=\"gp\">... </span><span class=\"s2\">ports = [ 8001, 8001, 8002 ]\n</span><span class=\"gp\">... </span><span class=\"s2\">connection_max = 5000\n</span><span class=\"gp\">... </span><span class=\"s2\">enabled = true\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">[servers]\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">  # Indentation (tabs and/or spaces) is allowed but not required\n</span><span class=\"gp\">... </span><span class=\"s2\">  [servers.alpha]\n</span><span class=\"gp\">... </span><span class=\"s2\">  ip = \"10.0.0.1\"\n</span><span class=\"gp\">... </span><span class=\"s2\">  dc = \"eqdc10\"\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">  [servers.beta]\n</span><span class=\"gp\">... </span><span class=\"s2\">  ip = \"10.0.0.2\"\n</span><span class=\"gp\">... </span><span class=\"s2\">  dc = \"eqdc10\"\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\">[clients]\n</span><span class=\"gp\">... </span><span class=\"s2\">data = [ [\"gamma\", \"delta\"], [1, 2] ]\n</span><span class=\"gp\">...</span><span class=\"s2\">\n</span><span class=\"gp\">... </span><span class=\"s2\"># Line breaks are OK when inside arrays\n</span><span class=\"gp\">... </span><span class=\"s2\">hosts = [\n</span><span class=\"gp\">... </span><span class=\"s2\">  \"alpha\",\n</span><span class=\"gp\">... </span><span class=\"s2\">  \"omega\"\n</span><span class=\"gp\">... </span><span class=\"s2\">]\n</span><span class=\"gp\">... </span><span class=\"s2\">\"\"\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed_toml</span> <span class=\"o\">=</span> <span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">toml_string</span><span class=\"p\">)</span>\n</pre>\n<p><em>toml.dumps</em> takes a dictionary and returns a string containing the\ncorresponding TOML-formatted data.</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_toml_string</span> <span class=\"o\">=</span> <span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">parsed_toml</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_toml_string</span><span class=\"p\">)</span>\n<span class=\"go\">title = \"TOML Example\"\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00Z\n[database]\nserver = \"192.168.1.1\"\nports = [ 8001, 8001, 8002,]\nconnection_max = 5000\nenabled = true\n[clients]\ndata = [ [ \"gamma\", \"delta\",], [ 1, 2,],]\nhosts = [ \"alpha\", \"omega\",]\n[servers.alpha]\nip = \"10.0.0.1\"\ndc = \"eqdc10\"\n[servers.beta]\nip = \"10.0.0.2\"\ndc = \"eqdc10\"</span>\n</pre>\n<p>For more functions, view the API Reference below.</p>\n<div id=\"note\">\n<h3>Note</h3>\n<p>For Numpy users, by default the data types <tt>np.floatX</tt> will not be translated to floats by toml, but will instead be encoded as strings. To get around this, specify the <tt>TomlNumpyEncoder</tt> when saving your data.</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">toml</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">double</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n<span class=\"go\">'a = [ \"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\",]\\n'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">TomlNumpyEncoder</span><span class=\"p\">())</span>\n<span class=\"go\">'a = [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,]\\n'</span>\n</pre>\n</div>\n</div>\n<div id=\"api-reference\">\n<h2>API Reference</h2>\n<dl>\n<dt><tt>toml.load(f, _dict=dict)</tt></dt>\n<dd><p>Parse a file or a list of files as TOML and return a dictionary.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Args:</th><td><ul>\n<li><tt>f</tt>: A path to a file, list of filepaths (to be read into single\nobject) or a file descriptor</li>\n<li><tt>_dict</tt>: The class of the dictionary object to be returned</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p>A dictionary (or object <tt>_dict</tt>) containing parsed TOML data</p>\n</td>\n</tr>\n<tr><th>Raises:</th><td><ul>\n<li><tt>TypeError</tt>: When <tt>f</tt> is an invalid type or is a list containing\ninvalid types</li>\n<li><tt>TomlDecodeError</tt>: When an error occurs while decoding the file(s)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd>\n<dt><tt>toml.loads(s, _dict=dict)</tt></dt>\n<dd><p>Parse a TOML-formatted string to a dictionary.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Args:</th><td><ul>\n<li><tt>s</tt>: The TOML-formatted string to be parsed</li>\n<li><tt>_dict</tt>: Specifies the class of the returned toml dictionary</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p>A dictionary (or object <tt>_dict</tt>) containing parsed TOML data</p>\n</td>\n</tr>\n<tr><th>Raises:</th><td><ul>\n<li><tt>TypeError</tt>: When a non-string object is passed</li>\n<li><tt>TomlDecodeError</tt>: When an error occurs while decoding the\nTOML-formatted string</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd>\n<dt><tt>toml.dump(o, f, encoder=None)</tt></dt>\n<dd><p>Write a dictionary to a file containing TOML-formatted data</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Args:</th><td><ul>\n<li><tt>o</tt>: An object to be converted into TOML</li>\n<li><tt>f</tt>: A File descriptor where the TOML-formatted output should be stored</li>\n<li><tt>encoder</tt>: An instance of <tt>TomlEncoder</tt> (or subclass) for encoding the object. If <tt>None</tt>, will default to <tt>TomlEncoder</tt></li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p>A string containing the TOML-formatted data corresponding to object <tt>o</tt></p>\n</td>\n</tr>\n<tr><th>Raises:</th><td><ul>\n<li><tt>TypeError</tt>: When anything other than file descriptor is passed</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</dd>\n<dt><tt>toml.dumps(o, encoder=None)</tt></dt>\n<dd><p>Create a TOML-formatted string from an input object</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Args:</th><td><ul>\n<li><tt>o</tt>: An object to be converted into TOML</li>\n<li><tt>encoder</tt>: An instance of <tt>TomlEncoder</tt> (or subclass) for encoding the object. If <tt>None</tt>, will default to <tt>TomlEncoder</tt></li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p>A string containing the TOML-formatted data corresponding to object <tt>o</tt></p>\n</td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>This project is released under the terms of the MIT Open Source License. View\n<em>LICENSE.txt</em> for more information.</p>\n</div>\n\n          </div>"}, "last_serial": 7169225, "releases": {"0.11": [{"comment_text": "", "digests": {"md5": "97f4dbc7d0ec49aa8f611b0fe035ca92", "sha256": "403a0e903d459b3d63bddccdad7336248449e7c579137252c39e72b59c3657af"}, "downloads": -1, "filename": "good-toml-0.11.tar.gz", "has_sig": false, "md5_digest": "97f4dbc7d0ec49aa8f611b0fe035ca92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 19217, "upload_time": "2020-05-05T03:18:03", "upload_time_iso_8601": "2020-05-05T03:18:03.115078Z", "url": "https://files.pythonhosted.org/packages/61/9f/00d5bf88e6724b844abd791a1414102d2aaafca8e252480c7220a9f8ae2d/good-toml-0.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97f4dbc7d0ec49aa8f611b0fe035ca92", "sha256": "403a0e903d459b3d63bddccdad7336248449e7c579137252c39e72b59c3657af"}, "downloads": -1, "filename": "good-toml-0.11.tar.gz", "has_sig": false, "md5_digest": "97f4dbc7d0ec49aa8f611b0fe035ca92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 19217, "upload_time": "2020-05-05T03:18:03", "upload_time_iso_8601": "2020-05-05T03:18:03.115078Z", "url": "https://files.pythonhosted.org/packages/61/9f/00d5bf88e6724b844abd791a1414102d2aaafca8e252480c7220a9f8ae2d/good-toml-0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:50 2020"}