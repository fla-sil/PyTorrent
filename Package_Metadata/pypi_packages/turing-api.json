{"info": {"author": "Turing Analytics", "author_email": "aditya@turingiq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Turing Python Library\n\nTuring visual search and visually similar recommendations API library for python. The REST API documentation can be found here: [https://api.turingiq.com/doc/](https://api.turingiq.com/doc/)\n\nSetup\n-----\nThis package is available through pip and can be install using following command.\n```console\npip3 install turing-api\n```\n\nInitialize\n----------\nimport the `visualAPI` class as bellow.\n\n```python\nfrom turing_api.lib.visualAPI import VisualAPI\n```\n\nYou can initialize the `VisualAPI` class with below parameters.\n\n```python\napi_key = 'your_api_key' # You can get API key when you login at: https://www.turingiq.com/login\nmode = 'live'            # the mode can be either `live` or `sandbox`. Default mode is `live`.\nvisual_api = VisualAPI(api_key, mode)\n```\n\nAutocrop\n--------\n\nDetect objects in image and get bounding boxes around objects detected.\n\n```python\n# image_url is required field.\nimage_url = \"https://example.com/image_url.jpg\"\n\n# now let's call the API.\nresponse = visual_api.autocrop(image_url)\n```\n\nThe bounding boxes returned by this method can be given to visual search to improve visual search quality.\n\n\nInsert\n------\n\nYou need to insert images to our index to query on them. The insert function can be written as below.\n\n```python\n# id is required field.\nid = 'some_product_id'\n\n# image_url is required field.\nimage_url = \"https://example.com/image_url.jpg\"\n\n# filters argument is optional. You can specify upto 3 filters as per example given below.\n# Filters can be useful when querying images from our index. You can apply any filter\n# as per your requirement.\nfilters = {\"filter1\" : \"onefilter\", \"filter2\" : \"twofilter\", \"filter3\" : \"threefilter\"}\n\n# metadata is optional. You can pass additional information about your image which will be\n# returned when you query image from our index.\nmetadata = {\"title\" : \"Image Title\"}\n\n# now let's call the API.\nresponse = visual_api.insert(id, image_url, filters, metadata)\n```\n\nUpdate\n------\n\nIf you need to update information to indexed image, you can use update function. If you call update function for id which is not already indexed, it will insert the image to index.\n\n```python\n# id is required field. Provide id for which you need to update the information.\nid = 'some_product_id'\n\n# image_url is optional field. You can pass `null` if you would like to keep URL unchanged.\nimage_url = \"https://example.com/image_url.jpg\"\n\n# filters argument is optional. You can specify upto 3 filters as per example given below.\n# Filters can be useful when querying images from our index. You can apply any filter\n# as per your requirement. The filters you provide here will be overwritten.\nfilters = {\"filter1\" : \"onefilter\", \"filter2\" : \"twofilter\", \"filter3\" : \"threefilter\"}\n\n# metadata is optional. You can pass additional information about your image which will be\n# returned when you query image from our index. Existing metadata values will be overwritten\n# based on keys supplied to this array.\nmetadata = {\"title\" : \"Image Title\"}\n\n# now let's call the API.\nresponse = visual_api.update(id, image_url, filters, metadata)\n```\n\nDelete\n------\n\nYou can delete image from index with this method.\n\n```python\n# id is required field.\nid = 'some_product_id'\n\n# now let's call the API.\nresponse = visual_api.delete(id)\n```\n\nVisual Search\n-------------\n\nVisual search can be used to search indexed images based on query image.\n\n```python\n# image_url is required field. The API will perform visual search on the image and return\nimage_url = \"https://example.com/image_url.jpg\"\n\n# crop_box is optional field. You can supply empty array if you don't want to specify crop box.\n# The format of crop box is [xmin, ymin, xmax, ymax]\ncrop_box = [188, 256, 656, 928]\n\n# filters argument is optional. You can specify upto 3 filters.\n# For example, if you specify filter1 = \"nike\", it will only return images which are indexed with\n# \"nike\" as filter1.\nfilters = {\"filter1\" : \"nike\"}\n\n# now let's call the API.\nresponse = visual_api.search(image_url, crop_box, filters)\n```\n\nVisual Recommendations\n----------------------\n\nVisual recommendations give visually similar image recommendations which can be used to display recommendation widget on e-commerce sites which greatly improved CTR and conversion rates.\n\n```python\n# image_url is required field. The API will perform visual search on the image and return\nid = \"some_product_id\"\n\n# filters argument is optional. You can specify upto 3 filters.\n# For example, if you specify filter1 = \"nike\", it will only return images which are indexed with\n# \"nike\" as filter1.\nfilters = {\"filter1\" : \"nike\"}\n\n# now let's call the API.\nresponse = visual_api.recommendations(id, filters)\n```\n\n\n### Run Tests\n\n```sh\nAPI_KEY=api_key python3 test/visualAPITest.py\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/turingiq/turing-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "turing-api", "package_url": "https://pypi.org/project/turing-api/", "platform": "", "project_url": "https://pypi.org/project/turing-api/", "project_urls": {"Homepage": "https://github.com/turingiq/turing-python"}, "release_url": "https://pypi.org/project/turing-api/1.0.1/", "requires_dist": ["requests (==2.*)"], "requires_python": "", "summary": "Turing visual search and visually similar recommendations API library for Python", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Turing Python Library</h1>\n<p>Turing visual search and visually similar recommendations API library for python. The REST API documentation can be found here: <a href=\"https://api.turingiq.com/doc/\" rel=\"nofollow\">https://api.turingiq.com/doc/</a></p>\n<h2>Setup</h2>\n<p>This package is available through pip and can be install using following command.</p>\n<pre><span class=\"go\">pip3 install turing-api</span>\n</pre>\n<h2>Initialize</h2>\n<p>import the <code>visualAPI</code> class as bellow.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">turing_api.lib.visualAPI</span> <span class=\"kn\">import</span> <span class=\"n\">VisualAPI</span>\n</pre>\n<p>You can initialize the <code>VisualAPI</code> class with below parameters.</p>\n<pre><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'your_api_key'</span> <span class=\"c1\"># You can get API key when you login at: https://www.turingiq.com/login</span>\n<span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s1\">'live'</span>            <span class=\"c1\"># the mode can be either `live` or `sandbox`. Default mode is `live`.</span>\n<span class=\"n\">visual_api</span> <span class=\"o\">=</span> <span class=\"n\">VisualAPI</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span>\n</pre>\n<h2>Autocrop</h2>\n<p>Detect objects in image and get bounding boxes around objects detected.</p>\n<pre><span class=\"c1\"># image_url is required field.</span>\n<span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com/image_url.jpg\"</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">autocrop</span><span class=\"p\">(</span><span class=\"n\">image_url</span><span class=\"p\">)</span>\n</pre>\n<p>The bounding boxes returned by this method can be given to visual search to improve visual search quality.</p>\n<h2>Insert</h2>\n<p>You need to insert images to our index to query on them. The insert function can be written as below.</p>\n<pre><span class=\"c1\"># id is required field.</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'some_product_id'</span>\n\n<span class=\"c1\"># image_url is required field.</span>\n<span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com/image_url.jpg\"</span>\n\n<span class=\"c1\"># filters argument is optional. You can specify upto 3 filters as per example given below.</span>\n<span class=\"c1\"># Filters can be useful when querying images from our index. You can apply any filter</span>\n<span class=\"c1\"># as per your requirement.</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"filter1\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"onefilter\"</span><span class=\"p\">,</span> <span class=\"s2\">\"filter2\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"twofilter\"</span><span class=\"p\">,</span> <span class=\"s2\">\"filter3\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"threefilter\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># metadata is optional. You can pass additional information about your image which will be</span>\n<span class=\"c1\"># returned when you query image from our index.</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"title\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Image Title\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">image_url</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">)</span>\n</pre>\n<h2>Update</h2>\n<p>If you need to update information to indexed image, you can use update function. If you call update function for id which is not already indexed, it will insert the image to index.</p>\n<pre><span class=\"c1\"># id is required field. Provide id for which you need to update the information.</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'some_product_id'</span>\n\n<span class=\"c1\"># image_url is optional field. You can pass `null` if you would like to keep URL unchanged.</span>\n<span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com/image_url.jpg\"</span>\n\n<span class=\"c1\"># filters argument is optional. You can specify upto 3 filters as per example given below.</span>\n<span class=\"c1\"># Filters can be useful when querying images from our index. You can apply any filter</span>\n<span class=\"c1\"># as per your requirement. The filters you provide here will be overwritten.</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"filter1\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"onefilter\"</span><span class=\"p\">,</span> <span class=\"s2\">\"filter2\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"twofilter\"</span><span class=\"p\">,</span> <span class=\"s2\">\"filter3\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"threefilter\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># metadata is optional. You can pass additional information about your image which will be</span>\n<span class=\"c1\"># returned when you query image from our index. Existing metadata values will be overwritten</span>\n<span class=\"c1\"># based on keys supplied to this array.</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"title\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"Image Title\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">image_url</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">)</span>\n</pre>\n<h2>Delete</h2>\n<p>You can delete image from index with this method.</p>\n<pre><span class=\"c1\"># id is required field.</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s1\">'some_product_id'</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span>\n</pre>\n<h2>Visual Search</h2>\n<p>Visual search can be used to search indexed images based on query image.</p>\n<pre><span class=\"c1\"># image_url is required field. The API will perform visual search on the image and return</span>\n<span class=\"n\">image_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://example.com/image_url.jpg\"</span>\n\n<span class=\"c1\"># crop_box is optional field. You can supply empty array if you don't want to specify crop box.</span>\n<span class=\"c1\"># The format of crop box is [xmin, ymin, xmax, ymax]</span>\n<span class=\"n\">crop_box</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">188</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">656</span><span class=\"p\">,</span> <span class=\"mi\">928</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># filters argument is optional. You can specify upto 3 filters.</span>\n<span class=\"c1\"># For example, if you specify filter1 = \"nike\", it will only return images which are indexed with</span>\n<span class=\"c1\"># \"nike\" as filter1.</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"filter1\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"nike\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">image_url</span><span class=\"p\">,</span> <span class=\"n\">crop_box</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"p\">)</span>\n</pre>\n<h2>Visual Recommendations</h2>\n<p>Visual recommendations give visually similar image recommendations which can be used to display recommendation widget on e-commerce sites which greatly improved CTR and conversion rates.</p>\n<pre><span class=\"c1\"># image_url is required field. The API will perform visual search on the image and return</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"s2\">\"some_product_id\"</span>\n\n<span class=\"c1\"># filters argument is optional. You can specify upto 3 filters.</span>\n<span class=\"c1\"># For example, if you specify filter1 = \"nike\", it will only return images which are indexed with</span>\n<span class=\"c1\"># \"nike\" as filter1.</span>\n<span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"filter1\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"nike\"</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># now let's call the API.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">visual_api</span><span class=\"o\">.</span><span class=\"n\">recommendations</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">filters</span><span class=\"p\">)</span>\n</pre>\n<h3>Run Tests</h3>\n<pre><span class=\"nv\">API_KEY</span><span class=\"o\">=</span>api_key python3 test/visualAPITest.py\n</pre>\n\n          </div>"}, "last_serial": 4315884, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3448b433ddaf8bed020c0444dcfcba33", "sha256": "89e5eec4d5d6ab58d8f8ebc91e91cae8bb96c10baa710a2a5c8454b9149eaebe"}, "downloads": -1, "filename": "turing_api-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3448b433ddaf8bed020c0444dcfcba33", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4993, "upload_time": "2018-08-14T09:35:16", "upload_time_iso_8601": "2018-08-14T09:35:16.864814Z", "url": "https://files.pythonhosted.org/packages/31/c8/94b3f992055945efd76bd0eafabaeb14f32f03b67aca05a8f4da200fbaa3/turing_api-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c9c3b38fc303c1d4d41830c9a77fe6c", "sha256": "076517341cd63aca6867999c76012efaf9bd3b31fef38e611a3183a1a6787b41"}, "downloads": -1, "filename": "turing_api-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2c9c3b38fc303c1d4d41830c9a77fe6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4053, "upload_time": "2018-08-14T09:35:18", "upload_time_iso_8601": "2018-08-14T09:35:18.217658Z", "url": "https://files.pythonhosted.org/packages/e5/dd/efae51552d57a3da8115274792d43344b1ed2228665f949003e703020726/turing_api-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3548e1f0f9f32de9616f63cae1173612", "sha256": "cec4096422bb4774d5170fc357459ff025eabef30145ebc26a3ae6da4c9fb7a9"}, "downloads": -1, "filename": "turing_api-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3548e1f0f9f32de9616f63cae1173612", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5083, "upload_time": "2018-09-27T11:24:01", "upload_time_iso_8601": "2018-09-27T11:24:01.624998Z", "url": "https://files.pythonhosted.org/packages/0c/6a/a7986045025f4b4030814657d749ba2441804f67f22dcbbb4f640a24330a/turing_api-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f4f845b1964fab7b850b7daabf1632a", "sha256": "7c9471c5768693f4dd5a5862aeb3f2816e3a33b1591c77142a10099e8e740379"}, "downloads": -1, "filename": "turing_api-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3f4f845b1964fab7b850b7daabf1632a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4158, "upload_time": "2018-09-27T11:24:03", "upload_time_iso_8601": "2018-09-27T11:24:03.389997Z", "url": "https://files.pythonhosted.org/packages/73/fa/ffde1a8023680c4a08f149604d54591536d69ac56c235f797d0255104108/turing_api-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3548e1f0f9f32de9616f63cae1173612", "sha256": "cec4096422bb4774d5170fc357459ff025eabef30145ebc26a3ae6da4c9fb7a9"}, "downloads": -1, "filename": "turing_api-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3548e1f0f9f32de9616f63cae1173612", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5083, "upload_time": "2018-09-27T11:24:01", "upload_time_iso_8601": "2018-09-27T11:24:01.624998Z", "url": "https://files.pythonhosted.org/packages/0c/6a/a7986045025f4b4030814657d749ba2441804f67f22dcbbb4f640a24330a/turing_api-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f4f845b1964fab7b850b7daabf1632a", "sha256": "7c9471c5768693f4dd5a5862aeb3f2816e3a33b1591c77142a10099e8e740379"}, "downloads": -1, "filename": "turing_api-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3f4f845b1964fab7b850b7daabf1632a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4158, "upload_time": "2018-09-27T11:24:03", "upload_time_iso_8601": "2018-09-27T11:24:03.389997Z", "url": "https://files.pythonhosted.org/packages/73/fa/ffde1a8023680c4a08f149604d54591536d69ac56c235f797d0255104108/turing_api-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:36 2020"}