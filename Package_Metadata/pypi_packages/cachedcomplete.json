{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Shells", "Topic :: Terminals"], "description": "# cachedcomplete\n\nCached wrapper for python argcomplete.\n\n## Installation\n\nUse the package manager pip to install cachedcomplete.\n\n```bash\npip install cachedcomplete\nactivate-global-python-argcomplete\n```\n\n## Explanation\n\ncachedcomplete wraps argcomplete, and allows caching of its parsers\nin order to save up time.\n\ncachedcomplete re-caches every time a change was made in itself,\nor in the files specified by the user.\n\ncachedcomplete caches the parsers using pickle, which implies the parser\nmust be able to be serialized and de-serialized using pickle.\n\nWithout any interference argparse's parsers cannot be serialized using pickle,\nbecause the default type is defined within the parser's `__init__` function.\ncachedcomplete replaces the default type with an identical type that can be pickled\n(this is only done when cachedcomplete detects that the default type is still the default\nidentity function).\n\n## Usage\n\n### Normal Usage\n\nThe normal usage is the same as in argcomplete, only changing the import from argcomplete to cachedcomplete.\n\n_**Note:** The usage of `PYTHON_ARGCOMPLETE_OK` stays the same as in argcomplete_\n\n#### For Example\n\n**Using argcomplete:**\n\n```python\n# PYTHON_ARGCOMPLETE_OK\nimport argcomplete\n\n# ...\n\nargcomplete.autocomplete()\n```\n\n**Using cachedcomplete:**\n\n```python\n# PYTHON_ARGCOMPLETE_OK\nimport cachedcomplete\n\n# ...\n\ncachedcomplete.autocomplete()\n```\n\n### Usage of custom subclasses of CompletionFinder\n\nIn order to use custom CompletionFinders with cachedcomplete,\na usage of the decorator cached_completion_finder is required.\n\n#### For example\n\n**Using argcomplete:**\n\n```python\nimport argcomplete\n\nclass CustomCompletionFinder(argcomplete.CompletionFinder):\n    # ...\n\ncompletion_finder = CustomCompletionFinder()\n# Instead of argcomplete.autocomplete()\ncompletion_finder()\n```\n\n**Using cachedcomplete:**\n\n```python\nimport argcomplete\nimport cachedcomplete\n\n@cachedcomplete.cached_completion_finder\nclass CustomCompletionFinder(argcomplete.CompletionFinder):\n    # ...\n\ncompletion_finder = CustomCompletionFinder()\n# Instead of argcomplete.autocomplete()\ncompletion_finder()\n```\n\n**or:**\n\n```python\nimport argcomplete\nimport cachedcomplete\n\nclass CustomCompletionFinder(argcomplete.CompletionFinder):\n    # ...\n\ncompletion_finder = cachedcomplete.cached_completion_finder(CustomCompletionFinder)()\n# Instead of argcomplete.autocomplete()\ncompletion_finder()\n```\n\n### Specifying what files to track\n\nIn order to specify which files to track changes in,\nadd a comment with the wanted files and the prefix CACHEDCOMPLETE_HASH:\n\n```python\n# CACHEDCOMPLETE_HASH: file1.py\n```\n\nIt also allows multiple files split to multiple comments, or within one comment.\n\n```python\n# CACHEDCOMPLETE_HASH: file1.py file2.json\n# CACHEDCOMPLETE_HASH: file3.py\n# CACHEDCOMPLETE_HASH: \"file with spaces.txt\"\n```\n\nAnd also allows passing up a directory to track all the files within\n\n```python\n# CACHEDCOMPLETE_HASH: dir\n```\n\nUsing environment variables and user directories is also allowed:\n\n```python\n# CACHEDCOMPLETE_HASH: $HOME/.cache/my-cache /tmp/${USERNAME}.ini\n# CACHEDCOMPLETE_HASH: ~/.cache/my-cache ~gdm/greeter-dconf-defaults\n```\n\nPaths are relative to the calling script, not the current working directory.\n\ncachedcomplete adds an environment variable name `pwd` to allow accessing the current\nworking directory in the comments. If this variable was already set, it is **not** overwritten.\n\n```python\n# CACHEDCOMPLETE_HASH: $pwd/local-file\n```\n\n### Using custom types, completers, actions, etc...\n\nIn order to cache a parser that uses your own custom types and functions,\nthey must be defined in a separate module than the main script (that defines the parser).\n\n_**Note:** It is recommended to add these separate modules to the tracked files (As specified with `CACHEDCOMPLETE_HASH`)._\n\n**Example:**\n\n_Won't work:_\n\nIn `my_awesome_script.py`\n\n```python\n# PYTHON_ARGCOMPLETE_OK\n\nimport argparse\nimport cachedcomplete\nimport json\n\ndef json_file(arg):\n    with argparse.FileType()(arg) as f:\n        return json.load(f)\n\np = argparse.ArgumentParser()\np.add_argument('settings', type=json_file)\ncachedcomplete.autocomplete(p)\n```\n\n_Will work:_\n\nIn `my_awesome_type.py`\n\n```python\nimport json\n\ndef json_file(arg):\n    with argparse.FileType()(arg) as f:\n        return json.load(f)\n```\n\nIn `my_awesome_script.py`\n\n```python\n# PYTHON_ARGCOMPLETE_OK\n# CACHEDCOMPLETE_HASH: my_awesome_type.py\n\nimport argparse\nimport cachedcomplete\n\np = argparse.ArgumentParser()\np.add_argument('settings', type=json_file)\ncachedcomplete.autocomplete(p)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Roynecro97/cachedcomplete", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "cachedcomplete", "package_url": "https://pypi.org/project/cachedcomplete/", "platform": "MacOS X", "project_url": "https://pypi.org/project/cachedcomplete/", "project_urls": {"Homepage": "https://github.com/Roynecro97/cachedcomplete", "Source Code": "https://github.com/Roynecro97/cachedcomplete"}, "release_url": "https://pypi.org/project/cachedcomplete/1.0.3/", "requires_dist": ["argcomplete (==1.11.1)"], "requires_python": "", "summary": "Cached wrapper for python argcomplete", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cachedcomplete</h1>\n<p>Cached wrapper for python argcomplete.</p>\n<h2>Installation</h2>\n<p>Use the package manager pip to install cachedcomplete.</p>\n<pre>pip install cachedcomplete\nactivate-global-python-argcomplete\n</pre>\n<h2>Explanation</h2>\n<p>cachedcomplete wraps argcomplete, and allows caching of its parsers\nin order to save up time.</p>\n<p>cachedcomplete re-caches every time a change was made in itself,\nor in the files specified by the user.</p>\n<p>cachedcomplete caches the parsers using pickle, which implies the parser\nmust be able to be serialized and de-serialized using pickle.</p>\n<p>Without any interference argparse's parsers cannot be serialized using pickle,\nbecause the default type is defined within the parser's <code>__init__</code> function.\ncachedcomplete replaces the default type with an identical type that can be pickled\n(this is only done when cachedcomplete detects that the default type is still the default\nidentity function).</p>\n<h2>Usage</h2>\n<h3>Normal Usage</h3>\n<p>The normal usage is the same as in argcomplete, only changing the import from argcomplete to cachedcomplete.</p>\n<p><em><strong>Note:</strong> The usage of <code>PYTHON_ARGCOMPLETE_OK</code> stays the same as in argcomplete</em></p>\n<h4>For Example</h4>\n<p><strong>Using argcomplete:</strong></p>\n<pre><span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argcomplete</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">argcomplete</span><span class=\"o\">.</span><span class=\"n\">autocomplete</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Using cachedcomplete:</strong></p>\n<pre><span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cachedcomplete</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">cachedcomplete</span><span class=\"o\">.</span><span class=\"n\">autocomplete</span><span class=\"p\">()</span>\n</pre>\n<h3>Usage of custom subclasses of CompletionFinder</h3>\n<p>In order to use custom CompletionFinders with cachedcomplete,\na usage of the decorator cached_completion_finder is required.</p>\n<h4>For example</h4>\n<p><strong>Using argcomplete:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argcomplete</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomCompletionFinder</span><span class=\"p\">(</span><span class=\"n\">argcomplete</span><span class=\"o\">.</span><span class=\"n\">CompletionFinder</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"n\">completion_finder</span> <span class=\"o\">=</span> <span class=\"n\">CustomCompletionFinder</span><span class=\"p\">()</span>\n<span class=\"c1\"># Instead of argcomplete.autocomplete()</span>\n<span class=\"n\">completion_finder</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Using cachedcomplete:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argcomplete</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cachedcomplete</span>\n\n<span class=\"nd\">@cachedcomplete</span><span class=\"o\">.</span><span class=\"n\">cached_completion_finder</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomCompletionFinder</span><span class=\"p\">(</span><span class=\"n\">argcomplete</span><span class=\"o\">.</span><span class=\"n\">CompletionFinder</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"n\">completion_finder</span> <span class=\"o\">=</span> <span class=\"n\">CustomCompletionFinder</span><span class=\"p\">()</span>\n<span class=\"c1\"># Instead of argcomplete.autocomplete()</span>\n<span class=\"n\">completion_finder</span><span class=\"p\">()</span>\n</pre>\n<p><strong>or:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argcomplete</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cachedcomplete</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomCompletionFinder</span><span class=\"p\">(</span><span class=\"n\">argcomplete</span><span class=\"o\">.</span><span class=\"n\">CompletionFinder</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"n\">completion_finder</span> <span class=\"o\">=</span> <span class=\"n\">cachedcomplete</span><span class=\"o\">.</span><span class=\"n\">cached_completion_finder</span><span class=\"p\">(</span><span class=\"n\">CustomCompletionFinder</span><span class=\"p\">)()</span>\n<span class=\"c1\"># Instead of argcomplete.autocomplete()</span>\n<span class=\"n\">completion_finder</span><span class=\"p\">()</span>\n</pre>\n<h3>Specifying what files to track</h3>\n<p>In order to specify which files to track changes in,\nadd a comment with the wanted files and the prefix CACHEDCOMPLETE_HASH:</p>\n<pre><span class=\"c1\"># CACHEDCOMPLETE_HASH: file1.py</span>\n</pre>\n<p>It also allows multiple files split to multiple comments, or within one comment.</p>\n<pre><span class=\"c1\"># CACHEDCOMPLETE_HASH: file1.py file2.json</span>\n<span class=\"c1\"># CACHEDCOMPLETE_HASH: file3.py</span>\n<span class=\"c1\"># CACHEDCOMPLETE_HASH: \"file with spaces.txt\"</span>\n</pre>\n<p>And also allows passing up a directory to track all the files within</p>\n<pre><span class=\"c1\"># CACHEDCOMPLETE_HASH: dir</span>\n</pre>\n<p>Using environment variables and user directories is also allowed:</p>\n<pre><span class=\"c1\"># CACHEDCOMPLETE_HASH: $HOME/.cache/my-cache /tmp/${USERNAME}.ini</span>\n<span class=\"c1\"># CACHEDCOMPLETE_HASH: ~/.cache/my-cache ~gdm/greeter-dconf-defaults</span>\n</pre>\n<p>Paths are relative to the calling script, not the current working directory.</p>\n<p>cachedcomplete adds an environment variable name <code>pwd</code> to allow accessing the current\nworking directory in the comments. If this variable was already set, it is <strong>not</strong> overwritten.</p>\n<pre><span class=\"c1\"># CACHEDCOMPLETE_HASH: $pwd/local-file</span>\n</pre>\n<h3>Using custom types, completers, actions, etc...</h3>\n<p>In order to cache a parser that uses your own custom types and functions,\nthey must be defined in a separate module than the main script (that defines the parser).</p>\n<p><em><strong>Note:</strong> It is recommended to add these separate modules to the tracked files (As specified with <code>CACHEDCOMPLETE_HASH</code>).</em></p>\n<p><strong>Example:</strong></p>\n<p><em>Won't work:</em></p>\n<p>In <code>my_awesome_script.py</code></p>\n<pre><span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cachedcomplete</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">json_file</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">FileType</span><span class=\"p\">()(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'settings'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n<span class=\"n\">cachedcomplete</span><span class=\"o\">.</span><span class=\"n\">autocomplete</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<p><em>Will work:</em></p>\n<p>In <code>my_awesome_type.py</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">json_file</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">FileType</span><span class=\"p\">()(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<p>In <code>my_awesome_script.py</code></p>\n<pre><span class=\"c1\"># PYTHON_ARGCOMPLETE_OK</span>\n<span class=\"c1\"># CACHEDCOMPLETE_HASH: my_awesome_type.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cachedcomplete</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'settings'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">json_file</span><span class=\"p\">)</span>\n<span class=\"n\">cachedcomplete</span><span class=\"o\">.</span><span class=\"n\">autocomplete</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6931841, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "0ae414d13cce5ec79c5e586bb2a11cd7", "sha256": "c1559d107c61ca8447014bb9850840534b314a9dcc4e498c80788f29ed1b0d80"}, "downloads": -1, "filename": "cachedcomplete-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ae414d13cce5ec79c5e586bb2a11cd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6969, "upload_time": "2020-04-01T22:58:58", "upload_time_iso_8601": "2020-04-01T22:58:58.921116Z", "url": "https://files.pythonhosted.org/packages/7e/2d/2b764f79cf6ab9b2d4778b8e3dfaca515ba98a813f277e56f5782b68c674/cachedcomplete-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7f1d0b7606e5130ea1e15687f887c6f", "sha256": "cc36e7420043a8c9ed8178dbcf2939865e17297ec41bc9a7d0bbf3ef0aabe8b9"}, "downloads": -1, "filename": "cachedcomplete-1.0.3.tar.gz", "has_sig": false, "md5_digest": "f7f1d0b7606e5130ea1e15687f887c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6001, "upload_time": "2020-04-01T22:59:00", "upload_time_iso_8601": "2020-04-01T22:59:00.594671Z", "url": "https://files.pythonhosted.org/packages/be/82/b33b9a4dce69cb1f4b6cc6d7608a89d3c64bca46f25f0c42a293e0dd7f4b/cachedcomplete-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ae414d13cce5ec79c5e586bb2a11cd7", "sha256": "c1559d107c61ca8447014bb9850840534b314a9dcc4e498c80788f29ed1b0d80"}, "downloads": -1, "filename": "cachedcomplete-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0ae414d13cce5ec79c5e586bb2a11cd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6969, "upload_time": "2020-04-01T22:58:58", "upload_time_iso_8601": "2020-04-01T22:58:58.921116Z", "url": "https://files.pythonhosted.org/packages/7e/2d/2b764f79cf6ab9b2d4778b8e3dfaca515ba98a813f277e56f5782b68c674/cachedcomplete-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7f1d0b7606e5130ea1e15687f887c6f", "sha256": "cc36e7420043a8c9ed8178dbcf2939865e17297ec41bc9a7d0bbf3ef0aabe8b9"}, "downloads": -1, "filename": "cachedcomplete-1.0.3.tar.gz", "has_sig": false, "md5_digest": "f7f1d0b7606e5130ea1e15687f887c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6001, "upload_time": "2020-04-01T22:59:00", "upload_time_iso_8601": "2020-04-01T22:59:00.594671Z", "url": "https://files.pythonhosted.org/packages/be/82/b33b9a4dce69cb1f4b6cc6d7608a89d3c64bca46f25f0c42a293e0dd7f4b/cachedcomplete-1.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:44 2020"}