{"info": {"author": "GreenelyAB", "author_email": "info@greenely.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Communications", "Topic :: Software Development :: Internationalization", "Topic :: Software Development :: Localization", "Topic :: Text Processing"], "description": "TranslationsServer\n==================\n\n.. image:: https://api.travis-ci.org/GreenelyAB/TranslationsServer.svg?branch=master\n    :target: https://travis-ci.org/GreenelyAB/TranslationsServer?branch=master\n\nManage, store and deliver translations.\n\n\nDefinition\n----------\n\nA *translation* starts out with a key, usually the English version of the text.\nFor each key there can be a translation for another language. That is the\nsecond parameter for a translation.\n\nA translation can also be country depended, the third parameter.\n\nThe last parameter specifies the plural version of the translation. This is\nneeded for when the translation refers to some amount and needs to be different\ndepending on what that amount is.\n\n\nRules for finding a translation\n-------------------------------\n\nThe parameters for getting a translation are:\n\n- **key**: the text to translate\n- **lang**: the language for the translation, following\n  `ISO 639-1 <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`_\n- **country** [optional] the country for the translation, following\n  `ISO 3166-1 alpha-2 <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_\n- **plural** [optional] the related value that defines the plural form of\n  the translation\n\nThe steps taken to find a translation are:\n\n- find all translations for the given key\n- only keep the ones with the specified language\n- from that list keep the ones with a matching country, if there are no entries\n  with a matching country keep the ones without a specified country\n- if a plural parameter was specified try to find entries with that plural\n  value otherwise select the translation where no plural value was specified\n- if more than one translations are left take the first one, if no translation\n  is left take the key as the translation instead\n\n\nInstallation\n============\n\n- Prepare a `Postgres <https://www.postgresql.org/>`_ database and user.\n- Install `npm <https://www.npmjs.com/>`_.\n- Create and activate a\n  `Python 3 virtual environment <https://docs.python.org/3/library/venv.html>`_.\n- Clone/download the\n  `project <https://github.com/GreenelyAB/TranslationsServer/releases>`_.\n- Then go to that project folder and run:\n  ::\n\n      $ npm install\n      $ export TRANSLATIONS_SERVER_DB_URL=\"<YOUR DATABASE URL>\"\n      $ grunt migrate\n      $ cd src\n      $ cp config_local.py.example config_local.py\n- Review and edit this new file `config_local.py`.\n\n\nDatabase URL example\n--------------------\n\nConnecting to a database named `test`on a local postgres server with user\n`postgres` and no password: \"`postgres://postgres:@127.0.0.1/test`\"\n\n\nRun\n===\n\nAfter completing the installation and activating the Python environment go to\nthe project folder and start a development server like this:\n::\n\n    $ cd src\n    $ ./main.py\n\n\nHow you run your server in production depends on your production environment.\n\nRun `./main.py --help` for port options.\n\n\nRun tests\n---------\n\nPrepare an empty test database and configure it in through\n`TRANSLATIONS_SERVER_TEST_DB_URL` in `config_local.py`. Then go to the project\nfolder and run:\n::\n\n    $ cd test\n    $ ./run_tests.py\n\n\nAdd and edit translations\n=========================\n\nTheres are each a table for languages and countries. If a new alnguage or\ncountry is needed those tables need to be updated first:\n::\n\n    translations_server=# INSERT INTO languages (language_code, name)\n    VALUES ('en', 'English');\n    translations_server=# INSERT INTO countries (country_code, name)\n    VALUES ('US', 'United States of America');\n\n\nThere is no support for states, yet. Optionally one could modify the countrie\ncodes to include the states information.\n\nAll translations then reside in the `translations` table, which contains:\n\n- **translation_id**\n- **translation_key**: The key (original text) for the translation.\n- **language_id**: References `languages`.\n- **country_id**: References `countries`.\n- **plural**: The plural count (variation) for which this translation is for.\n- **translation_text**: The translated text.\n\nThe table can be manipulated by either working on it directly or by using a\nadmin interface such as\n`Django admin <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_ (use\n`Multiple databases\n<https://docs.djangoproject.com/en/dev/topics/db/multi-db/>`_).\n\n\nZMQ protocol\n============\n\nThe server takes on request at the configured port number and responds with a\nreplay to each request.\n\nEach request shall send at least 4 frames containing:\n\n- language\n- country or ```\"\"```\n- key\n- plural or ```\"\"```\n\nEach request may further contain more frames in pairs, each containing:\n\n- key\n- plural or ```\"\"```\n\nFor example:\n::\n\n    \"sv\"\n    \"\"\n    \"User not active\"\n    \"\"\n\nAn example requesting two translations:\n::\n\n    \"sv\"\n    \"\"\n    \"User not active\"\n    \"\"\n    \"User not found\"\n    \"\"\n\nThe server shall then respond with either exactly one frame containing an\nempty string or as many frames as keys where send, each containing the\ntranslation for the corresponding key.\n\nThe response with only one frame containing an empty strings signals a server\nerror.\n\nResponse example for requesting two keys:\n::\n\n     \"Anv\u00e4ndare ej aktiv\"\n     \"User not found\"", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GreenelyAB/TranslationsServer", "keywords": "store manage translation translations server internationalization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "TranslationsServer", "package_url": "https://pypi.org/project/TranslationsServer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/TranslationsServer/", "project_urls": {"Homepage": "https://github.com/GreenelyAB/TranslationsServer"}, "release_url": "https://pypi.org/project/TranslationsServer/0.1.1/", "requires_dist": ["DBQuery (>=0.3.1)", "psycopg2 (>=2.6.1)", "pyzmq (>=15.2.0)"], "requires_python": "", "summary": "The translations service server", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"translationsserver\">\n<h2>TranslationsServer</h2>\n<a href=\"https://travis-ci.org/GreenelyAB/TranslationsServer?branch=master\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/GreenelyAB/TranslationsServer.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67c5b59f38ddae130f931db7fcda561d7c3f4e05/68747470733a2f2f6170692e7472617669732d63692e6f72672f477265656e656c7941422f5472616e736c6174696f6e735365727665722e7376673f6272616e63683d6d6173746572\"></a>\n<p>Manage, store and deliver translations.</p>\n<div id=\"definition\">\n<h3>Definition</h3>\n<p>A <em>translation</em> starts out with a key, usually the English version of the text.\nFor each key there can be a translation for another language. That is the\nsecond parameter for a translation.</p>\n<p>A translation can also be country depended, the third parameter.</p>\n<p>The last parameter specifies the plural version of the translation. This is\nneeded for when the translation refers to some amount and needs to be different\ndepending on what that amount is.</p>\n</div>\n<div id=\"rules-for-finding-a-translation\">\n<h3>Rules for finding a translation</h3>\n<p>The parameters for getting a translation are:</p>\n<ul>\n<li><strong>key</strong>: the text to translate</li>\n<li><strong>lang</strong>: the language for the translation, following\n<a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\" rel=\"nofollow\">ISO 639-1</a></li>\n<li><strong>country</strong> [optional] the country for the translation, following\n<a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" rel=\"nofollow\">ISO 3166-1 alpha-2</a></li>\n<li><strong>plural</strong> [optional] the related value that defines the plural form of\nthe translation</li>\n</ul>\n<p>The steps taken to find a translation are:</p>\n<ul>\n<li>find all translations for the given key</li>\n<li>only keep the ones with the specified language</li>\n<li>from that list keep the ones with a matching country, if there are no entries\nwith a matching country keep the ones without a specified country</li>\n<li>if a plural parameter was specified try to find entries with that plural\nvalue otherwise select the translation where no plural value was specified</li>\n<li>if more than one translations are left take the first one, if no translation\nis left take the key as the translation instead</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li><p>Prepare a <a href=\"https://www.postgresql.org/\" rel=\"nofollow\">Postgres</a> database and user.</p>\n</li>\n<li><p>Install <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npm</a>.</p>\n</li>\n<li><p>Create and activate a\n<a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">Python 3 virtual environment</a>.</p>\n</li>\n<li><p>Clone/download the\n<a href=\"https://github.com/GreenelyAB/TranslationsServer/releases\" rel=\"nofollow\">project</a>.</p>\n</li>\n<li><p>Then go to that project folder and run:</p>\n<pre>$ npm install\n$ export TRANSLATIONS_SERVER_DB_URL=\"&lt;YOUR DATABASE URL&gt;\"\n$ grunt migrate\n$ cd src\n$ cp config_local.py.example config_local.py\n</pre>\n</li>\n<li><p>Review and edit this new file <cite>config_local.py</cite>.</p>\n</li>\n</ul>\n<div id=\"database-url-example\">\n<h3>Database URL example</h3>\n<p>Connecting to a database named <cite>test`on a local postgres server with user\n`postgres</cite> and no password: \u201c<cite>postgres://postgres:@127.0.0.1/test</cite>\u201d</p>\n</div>\n</div>\n<div id=\"run\">\n<h2>Run</h2>\n<p>After completing the installation and activating the Python environment go to\nthe project folder and start a development server like this:</p>\n<pre>$ cd src\n$ ./main.py\n</pre>\n<p>How you run your server in production depends on your production environment.</p>\n<p>Run <cite>./main.py \u2013help</cite> for port options.</p>\n<div id=\"run-tests\">\n<h3>Run tests</h3>\n<p>Prepare an empty test database and configure it in through\n<cite>TRANSLATIONS_SERVER_TEST_DB_URL</cite> in <cite>config_local.py</cite>. Then go to the project\nfolder and run:</p>\n<pre>$ cd test\n$ ./run_tests.py\n</pre>\n</div>\n</div>\n<div id=\"add-and-edit-translations\">\n<h2>Add and edit translations</h2>\n<p>Theres are each a table for languages and countries. If a new alnguage or\ncountry is needed those tables need to be updated first:</p>\n<pre>translations_server=# INSERT INTO languages (language_code, name)\nVALUES ('en', 'English');\ntranslations_server=# INSERT INTO countries (country_code, name)\nVALUES ('US', 'United States of America');\n</pre>\n<p>There is no support for states, yet. Optionally one could modify the countrie\ncodes to include the states information.</p>\n<p>All translations then reside in the <cite>translations</cite> table, which contains:</p>\n<ul>\n<li><strong>translation_id</strong></li>\n<li><strong>translation_key</strong>: The key (original text) for the translation.</li>\n<li><strong>language_id</strong>: References <cite>languages</cite>.</li>\n<li><strong>country_id</strong>: References <cite>countries</cite>.</li>\n<li><strong>plural</strong>: The plural count (variation) for which this translation is for.</li>\n<li><strong>translation_text</strong>: The translated text.</li>\n</ul>\n<p>The table can be manipulated by either working on it directly or by using a\nadmin interface such as\n<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\" rel=\"nofollow\">Django admin</a> (use\n<a href=\"https://docs.djangoproject.com/en/dev/topics/db/multi-db/\" rel=\"nofollow\">Multiple databases</a>).</p>\n</div>\n<div id=\"zmq-protocol\">\n<h2>ZMQ protocol</h2>\n<p>The server takes on request at the configured port number and responds with a\nreplay to each request.</p>\n<p>Each request shall send at least 4 frames containing:</p>\n<ul>\n<li>language</li>\n<li>country or <tt><span class=\"pre\">`\"\"`</span></tt></li>\n<li>key</li>\n<li>plural or <tt><span class=\"pre\">`\"\"`</span></tt></li>\n</ul>\n<p>Each request may further contain more frames in pairs, each containing:</p>\n<ul>\n<li>key</li>\n<li>plural or <tt><span class=\"pre\">`\"\"`</span></tt></li>\n</ul>\n<p>For example:</p>\n<pre>\"sv\"\n\"\"\n\"User not active\"\n\"\"\n</pre>\n<p>An example requesting two translations:</p>\n<pre>\"sv\"\n\"\"\n\"User not active\"\n\"\"\n\"User not found\"\n\"\"\n</pre>\n<p>The server shall then respond with either exactly one frame containing an\nempty string or as many frames as keys where send, each containing the\ntranslation for the corresponding key.</p>\n<p>The response with only one frame containing an empty strings signals a server\nerror.</p>\n<p>Response example for requesting two keys:</p>\n<pre>\"Anv\u00e4ndare ej aktiv\"\n\"User not found\"\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2255243, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5d8981c32cdc3304f9d7ae3052ddfa8c", "sha256": "421a6f703c1d0ae1f00250c206feaf24aa93430af680613fc497a7028f3f8f9d"}, "downloads": -1, "filename": "TranslationsServer-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5d8981c32cdc3304f9d7ae3052ddfa8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10816, "upload_time": "2016-07-25T13:47:03", "upload_time_iso_8601": "2016-07-25T13:47:03.030211Z", "url": "https://files.pythonhosted.org/packages/c8/8b/50fad9adf59b84bd971af761967238e1f3a3b2a687f4621739e82302e34e/TranslationsServer-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "895498776bfff0db62c5c9876c635e42", "sha256": "7c08888f945b29e47e6150bd6dd65604364b7d24af0d69335ae5524d3d3edb23"}, "downloads": -1, "filename": "TranslationsServer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "895498776bfff0db62c5c9876c635e42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7855, "upload_time": "2016-07-25T13:47:06", "upload_time_iso_8601": "2016-07-25T13:47:06.043772Z", "url": "https://files.pythonhosted.org/packages/83/50/42dc14b6d837c07f3ab05a78f5de285a30f13d2c7fb820cef23d4d34ea78/TranslationsServer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "855e4634649c5cc10046f74e7ac0c390", "sha256": "1065405929b01b7b7711ea2bd5220f12a76c5049f866480098d53fb78a43f9f0"}, "downloads": -1, "filename": "TranslationsServer-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "855e4634649c5cc10046f74e7ac0c390", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10878, "upload_time": "2016-08-01T13:38:40", "upload_time_iso_8601": "2016-08-01T13:38:40.640972Z", "url": "https://files.pythonhosted.org/packages/50/32/b05bc1cfdea7bd355057b96acb5f6571ae3814c072eeeb58e1915663f3cd/TranslationsServer-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5769aca28c6b1cd58993d7eff356a49", "sha256": "4e0be2438fa363de16660930bda9e54a940c188872ec778f8213a16e9c2033a0"}, "downloads": -1, "filename": "TranslationsServer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d5769aca28c6b1cd58993d7eff356a49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7916, "upload_time": "2016-08-01T13:38:43", "upload_time_iso_8601": "2016-08-01T13:38:43.399460Z", "url": "https://files.pythonhosted.org/packages/b1/23/0a3965deab2f24b9f831fc85f75466ecb092b5185dbab37152d93aa59e46/TranslationsServer-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "855e4634649c5cc10046f74e7ac0c390", "sha256": "1065405929b01b7b7711ea2bd5220f12a76c5049f866480098d53fb78a43f9f0"}, "downloads": -1, "filename": "TranslationsServer-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "855e4634649c5cc10046f74e7ac0c390", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10878, "upload_time": "2016-08-01T13:38:40", "upload_time_iso_8601": "2016-08-01T13:38:40.640972Z", "url": "https://files.pythonhosted.org/packages/50/32/b05bc1cfdea7bd355057b96acb5f6571ae3814c072eeeb58e1915663f3cd/TranslationsServer-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5769aca28c6b1cd58993d7eff356a49", "sha256": "4e0be2438fa363de16660930bda9e54a940c188872ec778f8213a16e9c2033a0"}, "downloads": -1, "filename": "TranslationsServer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d5769aca28c6b1cd58993d7eff356a49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7916, "upload_time": "2016-08-01T13:38:43", "upload_time_iso_8601": "2016-08-01T13:38:43.399460Z", "url": "https://files.pythonhosted.org/packages/b1/23/0a3965deab2f24b9f831fc85f75466ecb092b5185dbab37152d93aa59e46/TranslationsServer-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:48:07 2020"}