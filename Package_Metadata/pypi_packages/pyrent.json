{"info": {"author": "Anthony Lombard", "author_email": "anthony.isalive@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "Yify for Python\r\n===============\r\n\r\n\r\nThis is Python Library which is used to get the Top seeded torrents at\r\nany given time and get the entire movie details and ratings .\r\n\r\nIts also useful to search for any movie using different parameters and\r\nobtain their magnet link or torrent file of any preferred quality.\r\n\r\nFeatures :\r\n----------\r\n\r\n* Search for movie torrents\r\n\r\n* Get the details of any movie which includes :\r\n\r\n   * Torrent details of 720p,1080p,3D quality\r\n   * Torrent Magnet links and hashes along with their size and seeds\r\n   * imdb_code\r\n   * Imdb Rating and MPA rating\r\n   * Year\r\n   * Runtime\r\n   * Summary\r\n   * Movie Description\r\n\r\nAll the above Details are obtained in the form of attributes of\r\nYify.movie object each object representing a movie.\r\n\r\n* Get the Top Most Seeded Torrents listed in the Yify Website\r\n\r\n* Download the torrent file of a corresponding torrent.\r\n\r\n* Start the torrent download directly without having to download it from the user's default torrent client.\r\n\r\n\r\nInstallation :\r\n--------------\r\n\r\nPython3\r\n-------\r\n\r\n::\r\n\r\n    pip install pyYify\r\n\r\nor\r\n\r\n::\r\n\r\n    pip3 install pyYify\r\n\r\n\r\n**Usage :**\r\n~~~~~~~~~~~\r\n\r\n**First import yify to use its functions.**\r\n-------------------------------------------\r\n::\r\n\r\n    from pyYify import yify\r\n\r\nThere are two classes in yify namely 'movie' and 'torrent'.\r\n\r\n\r\n**Search for movies.**\r\n----------------------\r\n\r\nOn searching , it returns a list of movies (movie objects) .\r\n\r\n::\r\n\r\n    movies_list = yify.search_movies(search_string , quality , minimum_rating , genre)\r\n\r\nThe search_string for the movie can be 'Movie Title,IMDb Code, Actor\r\nName, Director Name'. quality = 'All' , '720p' , '1080p' , '3D'.\r\nminimum_rating is an imdb_rating. genre = See\r\nhttps://www.imdb.com/genre/ for a list of genres.\r\n\r\n\r\n**Get the top seeded movies from Yify**\r\n---------------------------------------\r\n\r\n::\r\n\r\n    movies_list  = yify.get_top_seeded_torrents() ;\r\n\r\nReturns a list of movies, each movie object only contains its Name and\r\nWebpage unlike the searching method which has all the details in the\r\nreturned movies. To get the rest of the movie details use getinfo()\r\nmethod. ::\r\n\r\n    for movie in movies_list:\r\n        movie.getinfo() ;\r\n\r\n\r\n\r\n* Each movie Object has the following data :\r\n\r\n    * id\r\n    * url\r\n    * imdb\\_code\r\n    * title\r\n    * title\\_long\r\n    * slug\r\n    * year\r\n    * rating\r\n    * runtime\r\n    * genres\r\n    * summary\r\n    * description\r\n    * language\r\n    * mpa\\_rating\r\n    * image\\_links\r\n    * torrents\r\n\r\n\r\nThe movie.torrents is a list of torrents each of which corresponds to\r\nthe torrent of same movie but of different quality. ('720p' , '1080p' or\r\n'3D' )\r\n\r\n* Each torrent has the following data :\r\n\r\n   * name\r\n   * url\r\n   * magnet\r\n   * hash\r\n   * quality\r\n   * seeds\r\n   * peers\r\n   * size\r\n   * date_uploaded\r\n\r\n\r\n::\r\n\r\n    movie1 = movies_list[0] \r\n    torrent1 = movie1.torrents[0]\r\n\r\n    print(\"Magnet link = \" , torrent1.magnet)\r\n\r\n\r\n**Downloading the Torrent file of a movie**\r\n-------------------------------------------\r\n\r\n::\r\n\r\n    torrent1.download_torrent_file( path , filename )\r\n\r\n\r\n**Starting the download directly using magnet link without downloading the torrent file .**\r\n-------------------------------------------------------------------------------------------\r\n\r\nThis starts the default torrent client prompting the download dialog :\r\n\r\n::\r\n\r\n    torrent1.start_download()\r\n\r\n\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Anthonipples/pyYify", "keywords": "pyrent,torrent-python,movie-torrent,torrent,pyrent,yify torrent,yify download,download yify,yifyer,yifypy,torrent download,movie torrent,movie downloader,movie finder", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyrent", "package_url": "https://pypi.org/project/pyrent/", "platform": "", "project_url": "https://pypi.org/project/pyrent/", "project_urls": {"Homepage": "https://github.com/Anthonipples/pyYify"}, "release_url": "https://pypi.org/project/pyrent/1.9.2/", "requires_dist": ["bs4", "urllib3", "requests"], "requires_python": "", "summary": "This Module is used to get the Top seeded torrents at any given time and get the entire movie details and ratings . Its also useful to search for any movie using different parameters and obtain their magnet link or torrent file of any prefered quality.", "version": "1.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is Python Library which is used to get the Top seeded torrents at\nany given time and get the entire movie details and ratings .</p>\n<p>Its also useful to search for any movie using different parameters and\nobtain their magnet link or torrent file of any preferred quality.</p>\n<div id=\"features\">\n<h2>Features :</h2>\n<ul>\n<li><p>Search for movie torrents</p>\n</li>\n<li><p>Get the details of any movie which includes :</p>\n<blockquote>\n<ul>\n<li>Torrent details of 720p,1080p,3D quality</li>\n<li>Torrent Magnet links and hashes along with their size and seeds</li>\n<li>imdb_code</li>\n<li>Imdb Rating and MPA rating</li>\n<li>Year</li>\n<li>Runtime</li>\n<li>Summary</li>\n<li>Movie Description</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>All the above Details are obtained in the form of attributes of\nYify.movie object each object representing a movie.</p>\n<ul>\n<li>Get the Top Most Seeded Torrents listed in the Yify Website</li>\n<li>Download the torrent file of a corresponding torrent.</li>\n<li>Start the torrent download directly without having to download it from the user\u2019s default torrent client.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation :</h2>\n</div>\n<div id=\"python3\">\n<h2>Python3</h2>\n<pre>pip install pyYify\n</pre>\n<p>or</p>\n<pre>pip3 install pyYify\n</pre>\n<div id=\"usage\">\n<h3><strong>Usage :</strong></h3>\n</div>\n</div>\n<div id=\"first-import-yify-to-use-its-functions\">\n<h2><strong>First import yify to use its functions.</strong></h2>\n<pre>from pyYify import yify\n</pre>\n<p>There are two classes in yify namely \u2018movie\u2019 and \u2018torrent\u2019.</p>\n</div>\n<div id=\"search-for-movies\">\n<h2><strong>Search for movies.</strong></h2>\n<p>On searching , it returns a list of movies (movie objects) .</p>\n<pre>movies_list = yify.search_movies(search_string , quality , minimum_rating , genre)\n</pre>\n<p>The search_string for the movie can be \u2018Movie Title,IMDb Code, Actor\nName, Director Name\u2019. quality = \u2018All\u2019 , \u2018720p\u2019 , \u20181080p\u2019 , \u20183D\u2019.\nminimum_rating is an imdb_rating. genre = See\n<a href=\"https://www.imdb.com/genre/\" rel=\"nofollow\">https://www.imdb.com/genre/</a> for a list of genres.</p>\n</div>\n<div id=\"get-the-top-seeded-movies-from-yify\">\n<h2><strong>Get the top seeded movies from Yify</strong></h2>\n<pre>movies_list  = yify.get_top_seeded_torrents() ;\n</pre>\n<p>Returns a list of movies, each movie object only contains its Name and\nWebpage unlike the searching method which has all the details in the\nreturned movies. To get the rest of the movie details use getinfo()\nmethod.</p>\n<pre>for movie in movies_list:\n    movie.getinfo() ;\n</pre>\n<ul>\n<li><p>Each movie Object has the following data :</p>\n<blockquote>\n<ul>\n<li>id</li>\n<li>url</li>\n<li>imdb_code</li>\n<li>title</li>\n<li>title_long</li>\n<li>slug</li>\n<li>year</li>\n<li>rating</li>\n<li>runtime</li>\n<li>genres</li>\n<li>summary</li>\n<li>description</li>\n<li>language</li>\n<li>mpa_rating</li>\n<li>image_links</li>\n<li>torrents</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>The movie.torrents is a list of torrents each of which corresponds to\nthe torrent of same movie but of different quality. (\u2018720p\u2019 , \u20181080p\u2019 or\n\u20183D\u2019 )</p>\n<ul>\n<li><p>Each torrent has the following data :</p>\n<blockquote>\n<ul>\n<li>name</li>\n<li>url</li>\n<li>magnet</li>\n<li>hash</li>\n<li>quality</li>\n<li>seeds</li>\n<li>peers</li>\n<li>size</li>\n<li>date_uploaded</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<pre>movie1 = movies_list[0]\ntorrent1 = movie1.torrents[0]\n\nprint(\"Magnet link = \" , torrent1.magnet)\n</pre>\n</div>\n<div id=\"downloading-the-torrent-file-of-a-movie\">\n<h2><strong>Downloading the Torrent file of a movie</strong></h2>\n<pre>torrent1.download_torrent_file( path , filename )\n</pre>\n</div>\n<div id=\"starting-the-download-directly-using-magnet-link-without-downloading-the-torrent-file\">\n<h2><strong>Starting the download directly using magnet link without downloading the torrent file .</strong></h2>\n<p>This starts the default torrent client prompting the download dialog :</p>\n<pre>torrent1.start_download()\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5550962, "releases": {"1.9.1": [{"comment_text": "", "digests": {"md5": "edb00e4ab1db34515d2408a94acb708b", "sha256": "9c0fe79eb27675d077996f7e6abde573de051e6c0a5f24df79357f1c1105caf3"}, "downloads": -1, "filename": "pyrent-1.9.1-py2-none-any.whl", "has_sig": false, "md5_digest": "edb00e4ab1db34515d2408a94acb708b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9009, "upload_time": "2019-07-18T12:34:58", "upload_time_iso_8601": "2019-07-18T12:34:58.338371Z", "url": "https://files.pythonhosted.org/packages/47/c6/07ea6bd973ba8d16356d45e83435ef7d1bff61520bcf3033925df3f9266e/pyrent-1.9.1-py2-none-any.whl", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "c97ef2f114ff159507a19851773a70aa", "sha256": "0ddaca18650fe9b589039a427505bd53e05a92dd7407ee9d05528e9518136368"}, "downloads": -1, "filename": "pyrent-1.9.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c97ef2f114ff159507a19851773a70aa", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9004, "upload_time": "2019-07-18T12:49:21", "upload_time_iso_8601": "2019-07-18T12:49:21.080195Z", "url": "https://files.pythonhosted.org/packages/c1/42/27dae6583d24e2967d3190fa1a8f7cb1c7f35fca617ea312dde3f34f6243/pyrent-1.9.2-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c97ef2f114ff159507a19851773a70aa", "sha256": "0ddaca18650fe9b589039a427505bd53e05a92dd7407ee9d05528e9518136368"}, "downloads": -1, "filename": "pyrent-1.9.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c97ef2f114ff159507a19851773a70aa", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9004, "upload_time": "2019-07-18T12:49:21", "upload_time_iso_8601": "2019-07-18T12:49:21.080195Z", "url": "https://files.pythonhosted.org/packages/c1/42/27dae6583d24e2967d3190fa1a8f7cb1c7f35fca617ea312dde3f34f6243/pyrent-1.9.2-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:57:52 2020"}