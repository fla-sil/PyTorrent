{"info": {"author": "Tim Cuthbertson", "author_email": "tim3d.junk+dataflow@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: http://gfxmonk.net/dist/status/project/py-dataflow.png\r\n\r\n\r\ndataflow.py\r\n===========\r\n\r\ndataflow.py is an experimental port of larrytheliquid's ruby dataflow gem, mostly to see if a python version (without blocks) would be useable. Turns out it is, which is not what I'd initially expected. I'm not really doing anything with it (or working on it), but hopefully it can be of use or interest to others.\r\n\r\ndataflow functions:\r\n\r\n - **dataflow_vars**: decorator for generating dataflow variables for a function\r\n - **spawn**\\(callable, \\*args): start a thread using the given callable, plus any additional arguments\r\n - **var**\\(name=None): create a new dataflow variable (with optional name)\r\n - **unify**\\(var, value): set the value of a dataflow variable.\r\n\r\ndataflow can provide arguments automatically::\r\n\r\n\t@dataflow_vars\r\n\tdef sum_items(x, y, z):\r\n\t\t# notice how the order automatically gets resolved\r\n\t\tspawn(lambda: unify(y, x() + 2))\r\n\t\tspawn(lambda: unify(z, y() + 3))\r\n\t\tspawn(lambda: unify(x, 1))\r\n\t\treturn z() # => 6\r\n\r\n\r\nor you can create them whenever you like::\r\n\r\n\tf = var()\r\n\tspawn(lambda: unify(f, 'f'))\r\n\tf() # => 6\r\n\r\n\r\nAccessing any attribute or item (dictionary key) of a dataflow variable automatically waits for it to be assigned, and passes that access onto its value::\r\n\r\n\tf = var()\r\n\tspawn(lambda: unify(f, {'key': 'val'})\r\n\tf['key'] # => 'val'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/gfxmonk/py-dataflow/tree", "keywords": "dataflow concurrent concurrency", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "dataflow", "package_url": "https://pypi.org/project/dataflow/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dataflow/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/gfxmonk/py-dataflow/tree"}, "release_url": "https://pypi.org/project/dataflow/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "a dataflow library for python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"http://gfxmonk.net/dist/status/project/py-dataflow.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f286b564571fc948652e6d46236f3022f97cc668/687474703a2f2f6766786d6f6e6b2e6e65742f646973742f7374617475732f70726f6a6563742f70792d64617461666c6f772e706e67\">\n<div id=\"dataflow-py\">\n<h2>dataflow.py</h2>\n<p>dataflow.py is an experimental port of larrytheliquid\u2019s ruby dataflow gem, mostly to see if a python version (without blocks) would be useable. Turns out it is, which is not what I\u2019d initially expected. I\u2019m not really doing anything with it (or working on it), but hopefully it can be of use or interest to others.</p>\n<p>dataflow functions:</p>\n<blockquote>\n<ul>\n<li><strong>dataflow_vars</strong>: decorator for generating dataflow variables for a function</li>\n<li><strong>spawn</strong>(callable, *args): start a thread using the given callable, plus any additional arguments</li>\n<li><strong>var</strong>(name=None): create a new dataflow variable (with optional name)</li>\n<li><strong>unify</strong>(var, value): set the value of a dataflow variable.</li>\n</ul>\n</blockquote>\n<p>dataflow can provide arguments automatically:</p>\n<pre>@dataflow_vars\ndef sum_items(x, y, z):\n        # notice how the order automatically gets resolved\n        spawn(lambda: unify(y, x() + 2))\n        spawn(lambda: unify(z, y() + 3))\n        spawn(lambda: unify(x, 1))\n        return z() # =&gt; 6\n</pre>\n<p>or you can create them whenever you like:</p>\n<pre>f = var()\nspawn(lambda: unify(f, 'f'))\nf() # =&gt; 6\n</pre>\n<p>Accessing any attribute or item (dictionary key) of a dataflow variable automatically waits for it to be assigned, and passes that access onto its value:</p>\n<pre>f = var()\nspawn(lambda: unify(f, {'key': 'val'})\nf['key'] # =&gt; 'val'\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2067061, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "890842708c568bae2c697f727faa2502", "sha256": "6b3aa4694257e62e3f18648eb2b8840f7dc04ef7a2ce53f21e477d7ebed1b2f1"}, "downloads": -1, "filename": "dataflow-0.1.0-py2.5.egg", "has_sig": false, "md5_digest": "890842708c568bae2c697f727faa2502", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 6474, "upload_time": "2009-05-03T10:11:49", "upload_time_iso_8601": "2009-05-03T10:11:49.424804Z", "url": "https://files.pythonhosted.org/packages/1f/88/0be2808c2d0fb0d4cdb12bced66908a93b492ffd5db36b69b5f254113312/dataflow-0.1.0-py2.5.egg", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5233ef3a985bebe0eeaa104bedbe00d0", "sha256": "3b10ada3fed7716fff696dc60b2611cb886375f77e1e42a48e185429756327b4"}, "downloads": -1, "filename": "dataflow-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5233ef3a985bebe0eeaa104bedbe00d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2831, "upload_time": "2010-08-01T13:55:49", "upload_time_iso_8601": "2010-08-01T13:55:49.961229Z", "url": "https://files.pythonhosted.org/packages/5a/47/b47a633bf4f4c3ef36c263b9a98546fd3fae54b5adf56a650d2ec3229d94/dataflow-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5233ef3a985bebe0eeaa104bedbe00d0", "sha256": "3b10ada3fed7716fff696dc60b2611cb886375f77e1e42a48e185429756327b4"}, "downloads": -1, "filename": "dataflow-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5233ef3a985bebe0eeaa104bedbe00d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2831, "upload_time": "2010-08-01T13:55:49", "upload_time_iso_8601": "2010-08-01T13:55:49.961229Z", "url": "https://files.pythonhosted.org/packages/5a/47/b47a633bf4f4c3ef36c263b9a98546fd3fae54b5adf56a650d2ec3229d94/dataflow-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:24 2020"}