{"info": {"author": "Joseph Paul", "author_email": "joseph@sehrgute.software", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python CLI App\n> Framework for creating CLI apps using Python\n\nThe purpose of this library is to speed up bulding CLI applications by providing abstract classes representing an app and its commands. It uses `argparse` to define and parse command line arguments.\n\n## Concepts\n### App\nAn \"App\" is the main entry point of an application. It groups together one or more commands\n\n### Command\nA \"Command\" is a single operation that the application can perform. It is identified by a positional argument on the command line. Let's take `git` as an example. `git` would be the **app** that provides different **commands**, such as `add`, `commit`, `merge`, `checkout`, etc.\n\n## Example\n**git.py**\n```python\n#!/usr/bin/env python3\n\nfrom cli_app import App\nfrom commands.checkout import Checkout\nfrom commands.merge import Merge\n\n\nclass Git(App):\n    \"\"\"Git - fast, scalable, distributed revision control system\"\"\"\n\n    def register_commands(self):\n        self.add_command('checkout', Checkout)  # make the Checkout command available through `git.py checkout \u2026`\n        self.add_command('merge', Merge)  # make the Merge command available through `git.py merge \u2026`\n\n\nif __name__ == '__main__':\n    app = Git()\n    app.run()\n\n```\n\n**commands/checkout.py**\n```python\nfrom cli_app import Command\n\n\nclass Checkout(Command):\n    \"\"\"Switch branches or restore working tree files\"\"\"\n\n    @staticmethod\n    def register_arguments(parser):\n        parser.add_argument('ref', type=str, help='The ref (branch name, tag, commit sha) to checkout')\n\n    def run(self):\n        # Do whatever needs to be done to checkout given ref\n        print('Checking out %s' % self.app.args.ref)\n```\n\n**commands/merge.py**\n```python\nfrom cli_app import Command\n\n\nclass Merge(Command):\n    \"\"\"Join two or more development histories together\"\"\"\n\n    @staticmethod\n    def register_arguments(parser):\n        parser.add_argument('branch', type=str, help='The branch to merge into the currently checked-out branch')\n\n    def run(self):\n        # Do whatever needs to be done to merge given branch\n        print('Merging %s into current branch' % self.app.args.branch)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jsphpl/python-cli-app", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cli-app", "package_url": "https://pypi.org/project/cli-app/", "platform": "", "project_url": "https://pypi.org/project/cli-app/", "project_urls": {"Homepage": "https://github.com/jsphpl/python-cli-app"}, "release_url": "https://pypi.org/project/cli-app/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Framework for creating CLI apps using Python", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python CLI App</h1>\n<blockquote>\n<p>Framework for creating CLI apps using Python</p>\n</blockquote>\n<p>The purpose of this library is to speed up bulding CLI applications by providing abstract classes representing an app and its commands. It uses <code>argparse</code> to define and parse command line arguments.</p>\n<h2>Concepts</h2>\n<h3>App</h3>\n<p>An \"App\" is the main entry point of an application. It groups together one or more commands</p>\n<h3>Command</h3>\n<p>A \"Command\" is a single operation that the application can perform. It is identified by a positional argument on the command line. Let's take <code>git</code> as an example. <code>git</code> would be the <strong>app</strong> that provides different <strong>commands</strong>, such as <code>add</code>, <code>commit</code>, <code>merge</code>, <code>checkout</code>, etc.</p>\n<h2>Example</h2>\n<p><strong>git.py</strong></p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">cli_app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commands.checkout</span> <span class=\"kn\">import</span> <span class=\"n\">Checkout</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commands.merge</span> <span class=\"kn\">import</span> <span class=\"n\">Merge</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Git</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Git - fast, scalable, distributed revision control system\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register_commands</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_command</span><span class=\"p\">(</span><span class=\"s1\">'checkout'</span><span class=\"p\">,</span> <span class=\"n\">Checkout</span><span class=\"p\">)</span>  <span class=\"c1\"># make the Checkout command available through `git.py checkout \u2026`</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_command</span><span class=\"p\">(</span><span class=\"s1\">'merge'</span><span class=\"p\">,</span> <span class=\"n\">Merge</span><span class=\"p\">)</span>  <span class=\"c1\"># make the Merge command available through `git.py merge \u2026`</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Git</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p><strong>commands/checkout.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cli_app</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Checkout</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Switch branches or restore working tree files\"\"\"</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">register_arguments</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'ref'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'The ref (branch name, tag, commit sha) to checkout'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Do whatever needs to be done to checkout given ref</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Checking out </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">)</span>\n</pre>\n<p><strong>commands/merge.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cli_app</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Merge</span><span class=\"p\">(</span><span class=\"n\">Command</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Join two or more development histories together\"\"\"</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">register_arguments</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'branch'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'The branch to merge into the currently checked-out branch'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Do whatever needs to be done to merge given branch</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Merging </span><span class=\"si\">%s</span><span class=\"s1\"> into current branch'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">branch</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5288404, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "301944fb0904255738b5ab06700b7ea4", "sha256": "652d829e6cfa44a776d9442f142178406741f3cec7e9fa597b1fe954873ed495"}, "downloads": -1, "filename": "cli_app-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "301944fb0904255738b5ab06700b7ea4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5787, "upload_time": "2019-05-19T14:08:25", "upload_time_iso_8601": "2019-05-19T14:08:25.426110Z", "url": "https://files.pythonhosted.org/packages/02/f9/7cc1737a26d9133e5dd3f94945a5e685cca9735aa93c56c216d0c3865851/cli_app-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fd6d298c21cfc542aa4452da265a71d", "sha256": "826e541f3aa3243ba2d134d20435ace714912166b34f74bfe64852e55a49d90d"}, "downloads": -1, "filename": "cli-app-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6fd6d298c21cfc542aa4452da265a71d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3507, "upload_time": "2019-05-19T14:08:27", "upload_time_iso_8601": "2019-05-19T14:08:27.534779Z", "url": "https://files.pythonhosted.org/packages/74/ae/e7a944793bd87ff96e0f488419fe780848f83fea4134329b0893a2ac50e7/cli-app-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "301944fb0904255738b5ab06700b7ea4", "sha256": "652d829e6cfa44a776d9442f142178406741f3cec7e9fa597b1fe954873ed495"}, "downloads": -1, "filename": "cli_app-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "301944fb0904255738b5ab06700b7ea4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5787, "upload_time": "2019-05-19T14:08:25", "upload_time_iso_8601": "2019-05-19T14:08:25.426110Z", "url": "https://files.pythonhosted.org/packages/02/f9/7cc1737a26d9133e5dd3f94945a5e685cca9735aa93c56c216d0c3865851/cli_app-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fd6d298c21cfc542aa4452da265a71d", "sha256": "826e541f3aa3243ba2d134d20435ace714912166b34f74bfe64852e55a49d90d"}, "downloads": -1, "filename": "cli-app-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6fd6d298c21cfc542aa4452da265a71d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3507, "upload_time": "2019-05-19T14:08:27", "upload_time_iso_8601": "2019-05-19T14:08:27.534779Z", "url": "https://files.pythonhosted.org/packages/74/ae/e7a944793bd87ff96e0f488419fe780848f83fea4134329b0893a2ac50e7/cli-app-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:03 2020"}