{"info": {"author": "Fabio Pachelli Pacheco", "author_email": "nanook@nanook.com.br", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "FWF - Fixed-Width-Field File Format parser and tools\n=======================================================\n\nLib to help you handle those files that joins all data relying only on\nthe lenght of each field. I made this for myself because I was having\nsome bad times to filter and debug data from some huge stock market\nfiles with hundreds of thousands of lines.\n\nTable of Contents\n-----------------\n\n1. `When Should I NOT Use This? <#when-should-i-not-use-this>`__\n2. `Why Should I Use This? <#why-should-i-use-this?>`__\n3. `Features <features>`__\n4. `Usage <#usage>`__\n\n   1. `Setting up your parser <#setting-up-your-parser>`__\n   2. `Queryset <#queryset>`__\n\n      -  `.filter() <#filterkwargs>`__\n      -  `.exclude() <#excludekwargs>`__\n      -  `.order\\_by() <#order_byfield_name-reversefalse>`__\n      -  `.unique() <#uniquefield_name>`__\n      -  `.count() <#count>`__\n      -  `.values() <#valuesfields>`__\n\n   3. `Models <#models>`__\n\n      1. `BaseLineParser <#fwfbaselineparser>`__\n\n         -  `\\_before\\_parse() <#_before_parse>`__\n         -  `\\_after\\_parse() <#_after_parse>`__\n\n      2. `BaseFileParser <#fwfbasefileparser>`__\n\n         -  `.open() <#openfilename-line_parsernone>`__\n         -  `.objects <#objects-attribute>`__\n\n5. `TODOs <#todos>`__\n\nWhen should I use this?\n-----------------------\n\nWhen you have files like this:\n\n::\n\n    USAR19570526Fbe56008be36eDianne Mcintosh WhateverMedic        \\n\n    USMI19940213M706a6e0afc3dRosalyn Clark   WhateverComedian     \\n\n    USWI19510403M451ed630accbShirley Gray    WhateverComedian     \\n\n    USMD20110508F7e5cd7324f38Georgia Frank   WhateverComedian     \\n\n    USPA19930404Mecc7f17c16a6Virginia LambertWhateverShark tammer \\n\n    USVT19770319Fd2bd88100facRichard Botto   WhateverTime traveler\\n\n    USOK19910917F9c704139a6e3Alberto Giel    WhateverStudent      \\n\n    USNV20120604F5f02187599d7Mildred Henke   WhateverSuper hero   \\n\n    USRI19820125Fcf54b2eb5219Marc Kidd       WhateverMedic        \\n\n    USME20080503F0f51da89a299Kelly Crose     WhateverComedian     \\n\n    ...\n\nwhere each line represents one dataset and the data is concatenated on\nthat line.\n\nWhy should I use this?\n----------------------\n\nEven though parsing this kind of file is pretty easy you may want to\nfilter some of its data. Also this lib helps you to visualize you data\nand play with it directly on python shell. So that file will easily\nbecome this:\n\n::\n\n    +------------------+--------+------------+----------+-------+----------+---------------+-----+\n    | name             | gender | birthday   | location | state | universe | profession    | age |\n    +------------------+--------+------------+----------+-------+----------+---------------+-----+\n    | Dianne Mcintosh  | F      | 1957-05-26 | US       | AR    | Whatever | Medic         | 60  |\n    | Rosalyn Clark    | M      | 1994-02-13 | US       | MI    | Whatever | Comedian      | 23  |\n    | Shirley Gray     | M      | 1951-04-03 | US       | WI    | Whatever | Comedian      | 66  |\n    | Georgia Frank    | F      | 2011-05-08 | US       | MD    | Whatever | Comedian      | 6   |\n    | Virginia Lambert | M      | 1993-04-04 | US       | PA    | Whatever | Shark tammer  | 24  |\n    | Richard Botto    | F      | 1977-03-19 | US       | VT    | Whatever | Time traveler | 40  |\n    | Alberto Giel     | F      | 1991-09-17 | US       | OK    | Whatever | Student       | 26  |\n    | Mildred Henke    | F      | 2012-06-04 | US       | NV    | Whatever | Super hero    | 5   |\n    | Marc Kidd        | F      | 1982-01-25 | US       | RI    | Whatever | Medic         | 35  |\n    | Kelly Crose      | F      | 2008-05-03 | US       | ME    | Whatever | Comedian      | 9   |\n    +------------------+--------+------------+----------+-------+----------+---------------+-----+\n\nFeatures\n--------\n\n-  Parse and objectify your file\n-  Filter objects using a django-like syntax\n-  Reorganize your data\n-  Vizualization as table (thanks to\n   `terminaltables <https://robpol86.github.io/terminaltables/>`__)\n-  Order by column\n-  Add or remove columns\n-  Count a subset\n-  Uniqueness of data on a column\n\nUsage\n=====\n\nSetting up your parser\n----------------------\n\nFirst thing you need to know is the width of each column on your file.\nThere's no magic here. You will need to find out.\n\nLets take `this\nfile <https://raw.githubusercontent.com/nano-labs/pyfwf3/master/examples/humans.txt>`__\nas example. Here its first line:\n\n::\n\n    'US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic        \\n'\n\nBy testing, splitting, trying or whatever I know that: - First 9\ncharacters are reserved for that person location - Next 2 characters are\nfor her state - Next 8 are her birthday - Next 1 is her gender - Next 12\nI dont have a clue and I dont care - Next 24 are her name\n\nand so on. But I only want name, birthday and gender so let's write it's\nmodel\n\n.. code:: python\n\n    from fwf import BaseLineParser\n\n\n    class Human(BaseLineParser):\n        \"\"\"Parser for each line of that humans.txt file.\"\"\"\n\n        _map = {\"name\": slice(32, 56),\n                \"gender\": slice(19, 20),\n                \"birthday\": slice(11, 19)}\n\nThe slices represents the first and last positions of each information\nin the line and that's the most basic line parser you need. Now we are\ngoing to use it with the file parser.\n\n.. code:: python\n\n    from pytwt3 import BaseFileParser\n\n    parsed = BaseFileParser.open(\"examples/humans.txt\", line_parser=Human)\n\nThat's it. Your file is parsed and now usable but let's put it together:\n\n.. code:: python\n\n    from fwf import BaseLineParser, BaseFileParser\n\n\n    class Human(BaseLineParser):\n        \"\"\"Parser for each line of that humans.txt file.\"\"\"\n\n        _map = {\"name\": slice(32, 56),\n                \"gender\": slice(19, 20),\n                \"birthday\": slice(11, 19)}\n\n\n    parsed = BaseFileParser.open(\"examples/humans.txt\", line_parser=Human)\n\nor even\n\n.. code:: python\n\n    from fwf import BaseLineParser, BaseFileParser\n\n\n    class Human(BaseLineParser):\n        \"\"\"Parser for each line of that humans.txt file.\"\"\"\n\n        _map = {\"name\": slice(32, 56),\n                \"gender\": slice(19, 20),\n                \"birthday\": slice(11, 19)}\n\n\n    class HumanFileParser(BaseFileParser):\n        \"\"\"Parser for that humans.txt file.\"\"\"\n\n        _line_parser = Human\n\n    parsed = HumanFileParser.open(\"examples/humans.txt\")\n\nWe will discuss those classes in the `future <#fwfbaselineparser>`__\n\nQueryset\n--------\n\nWith your parsed file as a BaseFileParser instance you have all objects\nstored as a Queryset instance in \".objects\" attribute. So:\n\n.. code:: pycon\n\n    >>> parsed = HumanFileParser.open(\"examples/humans.txt\")\n    >>> # slices returns a smaller queryset instance\n    >>> parsed.objects[0:5]\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Dianne Mcintosh  | 19570526 | F      |\n    | Rosalyn Clark    | 19940213 | M      |\n    | Shirley Gray     | 19510403 | M      |\n    | Georgia Frank    | 20110508 | F      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n    >>> # while getting a specific item returns a parsed line instance\n    >>> parsed.objects[327]\n    +------------+----------+--------+\n    | name       | birthday | gender |\n    +------------+----------+--------+\n    | Jack Brown | 19490106 | M      |\n    +------------+----------+--------+\n    >>> # Note that the table is only a shell representation of the objects\n    >>> parsed.objects[327].name\n    'Jack Brown'\n    >>> parsed.objects[327].birthday\n    '19490106'\n    >>> parsed.objects[327].gender\n    'M'\n    >>> tuple(parsed.objects[327])\n    ('M', 'Jack Brown', '19490106')\n    >>> list(parsed.objects[327])\n    ['M', 'Jack Brown', '19490106']\n    >>> # To prevent the fields from changing order use OrderedDict instead of dict on _map. More about that later\n\n.filter(\\*\\*kwargs)\n-------------------\n\nHere is where the magic happens. A filtered queryset will always return\na new queryset that can be filtered too and so and so\n\n.. code:: pycon\n\n    >>> parsed = HumanFileParser.open(\"examples/humans.txt\")\n    >>> first5 = parsed.objects[:5]\n    >>> # 'first5' is a Queryset instance just as 'parsed.objects' but with only a few objects\n    >>> firts5\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Dianne Mcintosh  | 19570526 | F      |\n    | Rosalyn Clark    | 19940213 | M      |\n    | Shirley Gray     | 19510403 | M      |\n    | Georgia Frank    | 20110508 | F      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n    >>> # And it still can be filtered\n    >>> first5.filter(gender=\"F\")\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Dianne Mcintosh  | 19570526 | F      |\n    | Georgia Frank    | 20110508 | F      |\n    +------------------+----------+--------+\n    >>> # with multiple keywords arguments\n    >>> firts5.filter(gender=\"M\", birthday__gte=\"19900101\")\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Rosalyn Clark    | 19940213 | M      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n    >>> # or chained filters\n    >>> firts5.filter(name__endswith=\"k\").filter(gender=F)\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Georgia Frank    | 20110508 | F      |\n    +------------------+----------+--------+\n\nSome special filters may be used with \\_\\_ notation. Here are some but\nnot limited to:\n\n- \\_\\_in: value is in a list\n- \\_\\_lt: less than\n- \\_\\_lte: less than or equals\n- \\_\\_gt: greater than\n- \\_\\_gte: greater than or equals\n- \\_\\_ne: not equals\n- \\_\\_len: field lenght (without trailing spaces)\n- \\_\\_startswith: value starts with that string\n- \\_\\_endswith: value ends with that string\n\nIt will actually look for any attribute or method of the field object\nthat matches with **'object.somefilter'** or\n**'object.\\_\\_somefilter\\_\\_'** and call it or compare with it. So let's\nsay that you use the `\\_after\\_parse() <#_after_parse>`__ method to\nconvert the **'birthday'** field into **datetime.date** instances you\ncan now filter using, for example, **.filter(birthday\\_\\_year=1957)**\n\n.exclude(\\*\\*kwargs)\n--------------------\n\nPretty much the opposite of `.filter() <#filterkwargs>`__\n\n.. code:: pycon\n\n    >>> parsed = HumanFileParser.open(\"examples/humans.txt\")\n    >>> first5 = parsed.objects[:5]\n    >>> firts5\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Dianne Mcintosh  | 19570526 | F      |\n    | Rosalyn Clark    | 19940213 | M      |\n    | Shirley Gray     | 19510403 | M      |\n    | Georgia Frank    | 20110508 | F      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n    >>> first5.exclude(gender=\"F\")\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Rosalyn Clark    | 19940213 | M      |\n    | Shirley Gray     | 19510403 | M      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n\n.order\\_by(field\\_name, reverse=False)\n--------------------------------------\n\nReorder the whole queryset sorting by that given field\n\n.. code:: pycon\n\n    >>> parsed = HumanFileParser.open(\"examples/humans.txt\")\n    >>> parsed.objects[:5]\n    +------------------+----------+--------+\n    | name             | birthday | gender |\n    +------------------+----------+--------+\n    | Dianne Mcintosh  | 19570526 | F      |\n    | Rosalyn Clark    | 19940213 | M      |\n    | Shirley Gray     | 19510403 | M      |\n    | Georgia Frank    | 20110508 | F      |\n    | Virginia Lambert | 19930404 | M      |\n    +------------------+----------+--------+\n    >>> parsed.objects[:5].order_by(\"name\")\n    +------------------+--------+----------+\n    | name             | gender | birthday |\n    +------------------+--------+----------+\n    | Dianne Mcintosh  | F      | 19570526 |\n    | Georgia Frank    | F      | 20110508 |\n    | Rosalyn Clark    | M      | 19940213 |\n    | Shirley Gray     | M      | 19510403 |\n    | Virginia Lambert | M      | 19930404 |\n    +------------------+--------+----------+\n    >>> parsed.objects[:5].order_by(\"name\", reverse=True)\n    +------------------+--------+----------+\n    | name             | gender | birthday |\n    +------------------+--------+----------+\n    | Virginia Lambert | M      | 19930404 |\n    | Shirley Gray     | M      | 19510403 |\n    | Rosalyn Clark    | M      | 19940213 |\n    | Georgia Frank    | F      | 20110508 |\n    | Dianne Mcintosh  | F      | 19570526 |\n    +------------------+--------+----------+\n\nTODO: Order by more than one field and order by special field\n\n.unique(field\\_name)\n--------------------\n\nReturn a list o unique values for that field. For this example I will\nuse complete line parser for that humans.txt file\n\n.. code:: python\n\n    from collections import OrderedDict\n    from fwf import BaseLineParser, BaseFileParser\n\n\n    class CompleteHuman(BaseLineParser):\n        \"\"\"Complete line parser for humans.txt example file.\"\"\"\n\n        _map = OrderedDict(\n            [\n                (\"name\", slice(32, 56)),\n                (\"gender\", slice(19, 20)),\n                (\"birthday\", slice(11, 19)),\n                (\"location\", slice(0, 9)),\n                (\"state\", slice(9, 11)),\n                (\"universe\", slice(56, 68)),\n                (\"profession\", slice(68, 81)),\n            ]\n        )\n\n\n    class CompleteHumanFileParser(BaseFileParser):\n        \"\"\"Complete file parser for humans.txt example file.\"\"\"\n\n        _line_parser = CompleteHuman\n\n.. code:: pycon\n\n    >>> parsed = CompleteHumanFileParser.open(\"examples/humans.txt\")\n    >>> parsed.objects[:5]\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n    | Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n    | Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n    | Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n    | Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    >>> # Looking into all objects\n    >>> parsed.objects.unique(\"gender\")\n    ['F', 'M']\n    >>> parsed.objects.unique(\"profession\")\n    ['', 'Time traveler', 'Student', 'Berserk', 'Hero', 'Soldier', 'Super hero', 'Shark tammer', 'Artist', 'Hunter', 'Cookie maker', 'Comedian', 'Mecromancer', 'Programmer', 'Medic', 'Siren']\n    >>> parsed.objects.unique(\"state\")\n    ['', 'MT', 'WA', 'NY', 'AZ', 'MD', 'LA', 'IN', 'IL', 'WY', 'OK', 'NJ', 'VT', 'OH', 'AR', 'FL', 'DE', 'KS', 'NC', 'NM', 'MA', 'NH', 'ME', 'CT', 'MS', 'RI', 'ID', 'HI', 'NE', 'TN', 'AL', 'MN', 'TX', 'WV', 'KY', 'CA', 'NV', 'AK', 'IA', 'PA', 'UT', 'SD', 'CO', 'MI', 'VA', 'GA', 'ND', 'OR', 'SC', 'WI', 'MO']\n\nTODO: Unique by special field\n\n.count()\n--------\n\nReturn how many objects are there on that queryset\n\n.. code:: pycon\n\n    >>> parsed = CompleteHumanFileParser.open(\"examples/humans.txt\")\n    >>> # Total\n    >>> parsed.objects.count()\n    10012\n    >>> # How many are women\n    >>> parsed.objects.filter(gender=\"F\").count()\n    4979\n    >>> # How many womans from New York or California\n    >>> parsed.objects.filter(gender=\"F\", state__in=[\"NY\", \"CA\"]).count()\n    197\n    >>> # How many mens born on 1960 or later\n    >>> parsed.objects.filter(gender=\"M\").exclude(birthday__lt=\"19600101\").count()\n    4321\n\n.values(\\*fields)\n-----------------\n\nThis method should be used to actually return data from a queryset. Will\nreturn the specified fields only or all of them if none is specified.\n\nReturns a **ValuesList** instance which is in fact a extended **list**\nobject with overwriten **\\_\\_repr\\_\\_** method just to look like a table\non shell, so on every other aspect it is a list. May be a list o tuples,\nif more the one column is returned, or a simple list if only one field\nwas specified\n\n.. code:: pycon\n\n    >>> parsed = CompleteHumanFileParser.open(\"examples/humans.txt\")\n    >>> parsed.objects[:5].values(\"name\")\n    +------------------+\n    | name             |\n    +------------------+\n    | Dianne Mcintosh  |\n    | Rosalyn Clark    |\n    | Shirley Gray     |\n    | Georgia Frank    |\n    | Virginia Lambert |\n    +------------------+\n    >>> # even though it looks like a table it is actually a list\n    >>> parsed.objects[:5].values(\"name\")[:]\n    ['Dianne Mcintosh',\n     'Rosalyn Clark',\n     'Shirley Gray',\n     'Georgia Frank',\n     'Virginia Lambert']\n    >>> parsed.objects[:5].values(\"name\", \"state\")\n    +------------------+-------+\n    | name             | state |\n    +------------------+-------+\n    | Dianne Mcintosh  | AR    |\n    | Rosalyn Clark    | MI    |\n    | Shirley Gray     | WI    |\n    | Georgia Frank    | MD    |\n    | Virginia Lambert | PA    |\n    +------------------+-------+\n    >>> # or a list o tuples\n    >>> parsed.objects[:5].values(\"name\", \"state\")[:]\n    [('Dianne Mcintosh', 'AR'),\n     ('Rosalyn Clark', 'MI'),\n     ('Shirley Gray', 'WI'),\n     ('Georgia Frank', 'MD'),\n     ('Virginia Lambert', 'PA')]\n    >>> # If no field is specified it will return all\n    >>> parsed.objects[:5].values()\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n    | Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n    | Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n    | Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n    | Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    >>> parsed.objects[:5].values()[:]\n    [('Dianne Mcintosh', 'F', '19570526', 'US', 'AR', 'Whatever', 'Medic'),\n     ('Rosalyn Clark', 'M', '19940213', 'US', 'MI', 'Whatever', 'Comedian'),\n     ('Shirley Gray', 'M', '19510403', 'US', 'WI', 'Whatever', 'Comedian'),\n     ('Georgia Frank', 'F', '20110508', 'US', 'MD', 'Whatever', 'Comedian'),\n     ('Virginia Lambert', 'M', '19930404', 'US', 'PA', 'Whatever', 'Shark tammer')]\n    >>> # Note that you dont need to slice the result with '[:]'. I am only doing it to show the response structure behind the table representation\n\nThere is also 2 hidden fields that may be used, if needed:\n\n- \\_line\\_number: The line number on the original file, counting even if some line is skipped during parsing\n- \\_unparsed\\_line: The unchanged and unparsed original line, with original line breakers at the end\n\n.. code:: pycon\n\n    >>> parsed = CompleteHumanFileParser.open(\"examples/humans.txt\")\n    >>> parsed.objects.order_by(\"birthday\")[:5].values(\"_line_number\", \"name\")\n    +--------------+------------------+\n    | _line_number | name             |\n    +--------------+------------------+\n    | 4328         | John Cleese      |\n    | 9282         | Johnny Andres    |\n    | 8466         | Oscar Callaghan  |\n    | 3446         | Gilbert Garcia   |\n    | 6378         | Helen Villarreal |\n    +--------------+------------------+\n    >>> # or a little hacking to add it\n    >>> parsed.objects.order_by(\"birthday\")[:5].values(\"_line_number\", *parsed._line_parser._map.keys())\n    +--------------+------------------+--------+----------+----------+-------+--------------+------------+\n    | _line_number | name             | gender | birthday | location | state | universe     | profession |\n    +--------------+------------------+--------+----------+----------+-------+--------------+------------+\n    | 4328         | John Cleese      | M      | 19391027 | UK       |       | Monty Python | Comedian   |\n    | 9282         | Johnny Andres    | F      | 19400107 | US       | TX    | Whatever     | Student    |\n    | 8466         | Oscar Callaghan  | M      | 19400121 | US       | ID    | Whatever     | Comedian   |\n    | 3446         | Gilbert Garcia   | M      | 19400125 | US       | NC    | Whatever     | Student    |\n    | 6378         | Helen Villarreal | F      | 19400125 | US       | MD    | Whatever     |            |\n    +--------------+------------------+--------+----------+----------+-------+--------------+------------+\n    >>> # Note the trailing whitespaces and breakline on _unparsed_line\n    >>> parsed.objects[:5].values(\"_line_number\", \"_unparsed_line\")\n    +--------------+-----------------------------------------------------------------------------------+\n    | _line_number | _unparsed_line                                                                    |\n    +--------------+-----------------------------------------------------------------------------------+\n    | 1            | US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic         |\n    |              |                                                                                   |\n    | 2            | US       MI19940213M706a6e0afc3dRosalyn Clark           Whatever    Comedian      |\n    |              |                                                                                   |\n    | 3            | US       WI19510403M451ed630accbShirley Gray            Whatever    Comedian      |\n    |              |                                                                                   |\n    | 4            | US       MD20110508F7e5cd7324f38Georgia Frank           Whatever    Comedian      |\n    |              |                                                                                   |\n    | 5            | US       PA19930404Mecc7f17c16a6Virginia Lambert        Whatever    Shark tammer  |\n    |              |                                                                                   |\n    +--------------+-----------------------------------------------------------------------------------+\n    >>> parsed.objects[:5].values(\"_line_number\", \"_unparsed_line\")[:]\n    [(1, 'US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic        \\n'),\n     (2, 'US       MI19940213M706a6e0afc3dRosalyn Clark           Whatever    Comedian     \\n'),\n     (3, 'US       WI19510403M451ed630accbShirley Gray            Whatever    Comedian     \\n'),\n     (4, 'US       MD20110508F7e5cd7324f38Georgia Frank           Whatever    Comedian     \\n'),\n     (5, 'US       PA19930404Mecc7f17c16a6Virginia Lambert        Whatever    Shark tammer \\n')]\n\nTODO: Allow special fields to be used\n\nModels\n======\n\nfwf.BaseLineParser\n---------------------\n\nThis is the class responsible for the actual parsing and have to be\nextended to set its parsing map, as explained on `Setting up your\nparser <#setting-up-your-parser>`__. It also responsible for all the\nmagic before and after parsing by the use of\n`\\_before\\_parse() <#_before_parse>`__ and\n`\\_after\\_parse() <#_after_parse>`__ methods\n\n\\_before\\_parse()\n-----------------\n\nThis method is called before the line is parsed. At this point **self** have:\n\n- self.\\_unparsed\\_line: Original unchanged line\n- self.\\_parsable\\_line: Line to be parsed. If None given self.\\_unparsed\\_line wil be used\n- self.\\_line\\_number: File line number\n- self.\\_headers: Name of all soon-to-be-available fields\n- self.\\_map: The field mapping for the parsing\n\nUse it to pre-filter, pre-validade or process the line before parsing.\n\nEx:\n\n.. code:: python\n\n    from collections import OrderedDict\n    from fwf import BaseLineParser, InvalidLineError\n\n\n    class CustomLineParser(BaseLineParser):\n        \"\"\"Validated, uppercased U.S.A-only humans.\"\"\"\n\n        _map = OrderedDict(\n            [\n                (\"name\", slice(32, 56)),\n                (\"gender\", slice(19, 20)),\n                (\"birthday\", slice(11, 19)),\n                (\"location\", slice(0, 9)),\n                (\"state\", slice(9, 11)),\n                (\"universe\", slice(56, 68)),\n                (\"profession\", slice(68, 81)),\n            ]\n        )\n\n        def _before_parse(self):\n            \"\"\"Do some pre-process before the parsing.\"\"\"\n            # Validate line size to avoid malformed lines\n            # an InvalidLineError will make this line to be skipped\n            # any other error will break the parsing\n            if not len(self._unparsed_line) == 82:\n                raise InvalidLineError()\n\n            # As I know that the first characters are reserved for location I will\n            # pre-filter any person that are not from U.S.A (Trumping) even before\n            # parsing it\n            if not self._unparsed_line.startswith(\"US\"):\n                raise InvalidLineError()\n\n            # Then put everything uppercased\n            self._parsable_line = self._unparsed_line.upper()\n            # Note that instead of changing self._unparsed_line I've set the new\n            # string to self._parsable_line. I don't want to loose the unparsed\n            # value because it is useful for further debug\n\nThen use it as you like\n\n.. code:: pycon\n\n    >>> parsed = BaseFileParser.open(\"examples/humans.txt\", CustomLineParser)\n    >>> parsed.objects[:5]\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | DIANNE MCINTOSH  | F      | 19570526 | US       | AR    | WHATEVER | MEDIC        |\n    | ROSALYN CLARK    | M      | 19940213 | US       | MI    | WHATEVER | COMEDIAN     |\n    | SHIRLEY GRAY     | M      | 19510403 | US       | WI    | WHATEVER | COMEDIAN     |\n    | GEORGIA FRANK    | F      | 20110508 | US       | MD    | WHATEVER | COMEDIAN     |\n    | VIRGINIA LAMBERT | M      | 19930404 | US       | PA    | WHATEVER | SHARK TAMMER |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    >>> # Note that everything is uppercased\n    >>> # And there is nobody who is not from US\n    >>> parsed.objects.exclude(location=\"US\").count()\n    0\n    >>> parsed.objects.unique(\"location\")\n    ['US']\n\n\\_after\\_parse()\n----------------\n\nThis method is called after the line is parsed. At this point you have a already parsed line and now you may create new fields, alter some existing or combine those. You still may filter some objects.\n\nEx:\n\n.. code:: python\n\n    from datetime import datetime\n    from collections import OrderedDict\n    from fwf import BaseLineParser, InvalidLineError\n\n\n    class CustomLineParser(BaseLineParser):\n        \"\"\"Age-available, address-set employed human.\"\"\"\n\n        _map = OrderedDict(\n            [\n                (\"name\", slice(32, 56)),\n                (\"gender\", slice(19, 20)),\n                (\"birthday\", slice(11, 19)),\n                (\"location\", slice(0, 9)),\n                (\"state\", slice(9, 11)),\n                (\"universe\", slice(56, 68)),\n                (\"profession\", slice(68, 81)),\n            ]\n        )\n\n        def _after_parse(self):\n            \"\"\"Customization on parsed line object.\"\"\"\n            try:\n                # Parse birthday as datetime.date object\n                self.birthday = datetime.strptime(self.birthday, \"%Y%m%d\").date()\n            except ValueError:\n                # There is some \"unknown\" values on my example file so I decided to\n                # set birthday as 1900-01-01 as failover. I also could just skip\n                # those lines by raising InvalidLineError\n                self.birthday = datetime(1900, 1, 1).date()\n\n            # Set a new attribute 'age'\n            # Yeah, I know, it's not the proper way to calc someone's age but stil...\n            self.age = datetime.today().year - self.birthday.year\n\n            # Combine 'location' and 'state' to create 'address' field\n            self.address = \"{}, {}\".format(self.location, self.state)\n            # and remove location and state\n            del self.location\n            del self.state\n\n            # then update table headers so 'age' and 'address' become available and\n            # remove 'location' and 'state'\n            self._update_headers()\n            # You will note that the new columns will be added at the end of the\n            # table. If you want some specific column order just set self._headers\n            # manually\n\n            # And also skip those who does not have a profession\n            if not self.profession:\n                raise InvalidLineError()\n\nThen just use as you like\n\n.. code:: pycon\n\n    >>> parsed = BaseFileParser.open(\"examples/humans.txt\", CustomLineParser)\n    >>> parsed.objects[:5]\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    | name             | gender | birthday   | universe | profession   | address | age |\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    | Dianne Mcintosh  | F      | 1957-05-26 | Whatever | Medic        | US, AR  | 60  |\n    | Rosalyn Clark    | M      | 1994-02-13 | Whatever | Comedian     | US, MI  | 23  |\n    | Shirley Gray     | M      | 1951-04-03 | Whatever | Comedian     | US, WI  | 66  |\n    | Georgia Frank    | F      | 2011-05-08 | Whatever | Comedian     | US, MD  | 6   |\n    | Virginia Lambert | M      | 1993-04-04 | Whatever | Shark tammer | US, PA  | 24  |\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    >>> # Note that birthday is now a datetime.date instance\n    >>> parsed.objects[0].birthday\n    datetime.date(1957, 5, 26)\n    >>> # and you can use datetime attributes as special filters\n    >>> parsed.objects.filter(birthday__day=4, birthday__month=7)[:5]\n    +--------------------+--------+------------+----------+------------+---------+-----+\n    | name               | gender | birthday   | universe | profession | address | age |\n    +--------------------+--------+------------+----------+------------+---------+-----+\n    | Christopher Symons | M      | 2006-07-04 | Whatever | Comedian   | US, LA  | 11  |\n    | Thomas Hughes      | F      | 2012-07-04 | Whatever | Medic      | US, PA  | 5   |\n    | Anthony French     | F      | 2012-07-04 | Whatever | Student    | US, ND  | 5   |\n    | Harry Carson       | M      | 1989-07-04 | Whatever | Student    | US, AK  | 28  |\n    | Margaret Walks     | M      | 2012-07-04 | Whatever | Comedian   | US, AZ  | 5   |\n    +--------------------+--------+------------+----------+------------+---------+-----+\n    >>> parsed.objects.filter(birthday__gte=datetime(2000, 1, 1).date()).order_by(\"birthday\")[:5]\n    +---------------+--------+------------+----------+--------------+---------+-----+\n    | name          | gender | birthday   | universe | profession   | address | age |\n    +---------------+--------+------------+----------+--------------+---------+-----+\n    | Peggy Brinlee | M      | 2000-01-01 | Whatever | Programmer   | US, CO  | 17  |\n    | Tamara Kidd   | M      | 2000-01-03 | Whatever | Artist       | US, MN  | 17  |\n    | Victor Fraley | M      | 2000-01-04 | Whatever | Shark tammer | US, IL  | 17  |\n    | Joyce Lee     | F      | 2000-01-05 | Whatever | Programmer   | US, KY  | 17  |\n    | Leigh Harley  | M      | 2000-01-06 | Whatever | Programmer   | US, NM  | 17  |\n    +---------------+--------+------------+----------+--------------+---------+-----+\n    >>> # And age is also usable\n    >>> parsed.objects.filter(age=18)[:5]\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    | name             | gender | birthday   | universe | profession   | address | age |\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    | Gladys Martin    | F      | 1999-01-23 | Whatever | Medic        | US, WY  | 18  |\n    | Justin Salinas   | M      | 1999-07-03 | Whatever | Shark tammer | US, ND  | 18  |\n    | Sandra Carrousal | F      | 1999-10-09 | Whatever | Super hero   | US, NH  | 18  |\n    | Edith Briggs     | F      | 1999-04-05 | Whatever | Medic        | US, AL  | 18  |\n    | Patrick Mckinley | F      | 1999-03-18 | Whatever | Comedian     | US, ME  | 18  |\n    +------------------+--------+------------+----------+--------------+---------+-----+\n    >>> parsed.objects.filter(age__lt=18).order_by(\"age\", reverse=True)[:5]\n    +--------------------+--------+------------+----------+--------------+---------+-----+\n    | name               | gender | birthday   | universe | profession   | address | age |\n    +--------------------+--------+------------+----------+--------------+---------+-----+\n    | Angela Armentrout  | F      | 2000-12-21 | Whatever | Artist       | US, MO  | 17  |\n    | Christine Strassel | F      | 2000-10-22 | Whatever | Medic        | US, NE  | 17  |\n    | Christopher Pack   | M      | 2000-03-22 | Whatever | Student      | US, IN  | 17  |\n    | Manuela Lytle      | M      | 2000-12-18 | Whatever | Shark tammer | US, NV  | 17  |\n    | Tamara Kidd        | M      | 2000-01-03 | Whatever | Artist       | US, MN  | 17  |\n    +--------------------+--------+------------+----------+--------------+---------+-----+\n\nfwf.BaseFileParser\n---------------------\n\nThis class will center all file data and needs a line parser to do the\nactual parsing. So you will need a class extended from\n`BaseLineParser <#fwfbaselineparser>`__. I'll consider that you\nalready have your CustomLineParser class so:\n\n.. code:: pycon\n\n    >>> from fwf import BaseFileParser\n    >>> # Let's say that you already created your CustomLineParser class\n    >>> parsed = BaseFileParser.open(\"examples/humans.txt\", CustomLineParser)\n    >>> parsed.objects[:5]\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n    | Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n    | Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n    | Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n    | Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n\nOr you may extend BaseFileParser for semantics sake\n\n.. code:: python\n\n    from fwf import BaseFileParser\n\n\n    class HumanParser(BaseFileParser):\n        \"\"\"File parser for humans.txt example file.\"\"\"\n\n        # Let's say that you already created your CustomLineParser class\n        _line_parser = CustomLineParser\n\nNow you just\n\n.. code:: pycon\n\n    >>> parsed = HumanParser.open(\"examples/humans.txt\")\n    >>> parsed.objects[:5]\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n    | Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n    | Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n    | Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n    | Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n\n.open(filename, line\\_parser=None)\n----------------------------------\n\nThis class method actually open the given file, parse it, close it and\nreturn a parsed file instance. Pretty much every example here is using\n**.open()**\n\nYou may define your line parser class here, if you what, but for\nsemantics sake I recommend that you extend BaseFileParser to set you\nline parser there.\n\nParse an already opened file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou also may parse a already opened file, StringIO, downloaded file or\nany IO instance that you have. For that just create an instance directly\n\n.. code:: pycon\n\n    >>> from fwf import BaseFileParser\n    >>> # Let's say that you already created your CustomLineParser class\n    >>> f = open(\"examples/humans.txt\", \"r\")\n    >>> parsed = BaseFileParser(f, CustomLineParser)\n    >>> # Always remember to close your files or use \"with\" statement to do so\n    >>> f.close()\n    >>> parsed.objects[:5]\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | name             | gender | birthday | location | state | universe | profession   |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n    | Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n    | Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n    | Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n    | Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n    | Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n    +------------------+--------+----------+----------+-------+----------+--------------+\n\n**.objects** attribute\n----------------------\n\nYour parsed file have a **.objects** attribute. Thats your complete parsed\n`queryset <#queryset>`__\n\nTODOs:\n------\n\n-  Handle files with no break lines\n-  Recursive special filters like: birthday\\_\\_year\\_\\_lt\n-  Filter with same line like: .filter(start\\_day=L(\"end\\_day\"))\n-  Multi-column order like: .order\\_by(\"-age\", \"name\")\n-  Values using special fields like: .values(\"name\\_\\_len\")\n-  Order using special fields like: .order\\_by(\"birthday\\_\\_year\")\n-  Export methods like: .sqlite file or .sql file\n-  Write a fixed-width field file (?)(why would someone write those\n   files?)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/nano-labs/pyfwf3/archive/0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nano-labs/pyfwf3", "keywords": "file parse parsing EDI X12 fixed-width", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fwf", "package_url": "https://pypi.org/project/fwf/", "platform": "", "project_url": "https://pypi.org/project/fwf/", "project_urls": {"Download": "https://github.com/nano-labs/pyfwf3/archive/0.1.0.tar.gz", "Homepage": "https://github.com/nano-labs/pyfwf3"}, "release_url": "https://pypi.org/project/fwf/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Fixed-Width-Field File Format parser and tools", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"fwf-fixed-width-field-file-format-parser-and-tools\">\n<h2>FWF - Fixed-Width-Field File Format parser and tools</h2>\n<p>Lib to help you handle those files that joins all data relying only on\nthe lenght of each field. I made this for myself because I was having\nsome bad times to filter and debug data from some huge stock market\nfiles with hundreds of thousands of lines.</p>\n<div id=\"table-of-contents\">\n<h3>Table of Contents</h3>\n<ol>\n<li><a href=\"#when-should-i-not-use-this\" rel=\"nofollow\">When Should I NOT Use This?</a></li>\n<li><a href=\"#why-should-i-use-this?\" rel=\"nofollow\">Why Should I Use This?</a></li>\n<li><a href=\"features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a><ol>\n<li><a href=\"#setting-up-your-parser\" rel=\"nofollow\">Setting up your parser</a></li>\n<li><a href=\"#queryset\" rel=\"nofollow\">Queryset</a><ul>\n<li><a href=\"#filterkwargs\" rel=\"nofollow\">.filter()</a></li>\n<li><a href=\"#excludekwargs\" rel=\"nofollow\">.exclude()</a></li>\n<li><a href=\"#order_byfield_name-reversefalse\" rel=\"nofollow\">.order_by()</a></li>\n<li><a href=\"#uniquefield_name\" rel=\"nofollow\">.unique()</a></li>\n<li><a href=\"#count\" rel=\"nofollow\">.count()</a></li>\n<li><a href=\"#valuesfields\" rel=\"nofollow\">.values()</a></li>\n</ul>\n</li>\n<li><a href=\"#models\" rel=\"nofollow\">Models</a><ol>\n<li><a href=\"#fwfbaselineparser\" rel=\"nofollow\">BaseLineParser</a><ul>\n<li><a href=\"#_before_parse\" rel=\"nofollow\">_before_parse()</a></li>\n<li><a href=\"#_after_parse\" rel=\"nofollow\">_after_parse()</a></li>\n</ul>\n</li>\n<li><a href=\"#fwfbasefileparser\" rel=\"nofollow\">BaseFileParser</a><ul>\n<li><a href=\"#openfilename-line_parsernone\" rel=\"nofollow\">.open()</a></li>\n<li><a href=\"#objects-attribute\" rel=\"nofollow\">.objects</a></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><a href=\"#todos\" rel=\"nofollow\">TODOs</a></li>\n</ol>\n</div>\n<div id=\"when-should-i-use-this\">\n<h3>When should I use this?</h3>\n<p>When you have files like this:</p>\n<pre>USAR19570526Fbe56008be36eDianne Mcintosh WhateverMedic        \\n\nUSMI19940213M706a6e0afc3dRosalyn Clark   WhateverComedian     \\n\nUSWI19510403M451ed630accbShirley Gray    WhateverComedian     \\n\nUSMD20110508F7e5cd7324f38Georgia Frank   WhateverComedian     \\n\nUSPA19930404Mecc7f17c16a6Virginia LambertWhateverShark tammer \\n\nUSVT19770319Fd2bd88100facRichard Botto   WhateverTime traveler\\n\nUSOK19910917F9c704139a6e3Alberto Giel    WhateverStudent      \\n\nUSNV20120604F5f02187599d7Mildred Henke   WhateverSuper hero   \\n\nUSRI19820125Fcf54b2eb5219Marc Kidd       WhateverMedic        \\n\nUSME20080503F0f51da89a299Kelly Crose     WhateverComedian     \\n\n...\n</pre>\n<p>where each line represents one dataset and the data is concatenated on\nthat line.</p>\n</div>\n<div id=\"why-should-i-use-this\">\n<h3>Why should I use this?</h3>\n<p>Even though parsing this kind of file is pretty easy you may want to\nfilter some of its data. Also this lib helps you to visualize you data\nand play with it directly on python shell. So that file will easily\nbecome this:</p>\n<pre>+------------------+--------+------------+----------+-------+----------+---------------+-----+\n| name             | gender | birthday   | location | state | universe | profession    | age |\n+------------------+--------+------------+----------+-------+----------+---------------+-----+\n| Dianne Mcintosh  | F      | 1957-05-26 | US       | AR    | Whatever | Medic         | 60  |\n| Rosalyn Clark    | M      | 1994-02-13 | US       | MI    | Whatever | Comedian      | 23  |\n| Shirley Gray     | M      | 1951-04-03 | US       | WI    | Whatever | Comedian      | 66  |\n| Georgia Frank    | F      | 2011-05-08 | US       | MD    | Whatever | Comedian      | 6   |\n| Virginia Lambert | M      | 1993-04-04 | US       | PA    | Whatever | Shark tammer  | 24  |\n| Richard Botto    | F      | 1977-03-19 | US       | VT    | Whatever | Time traveler | 40  |\n| Alberto Giel     | F      | 1991-09-17 | US       | OK    | Whatever | Student       | 26  |\n| Mildred Henke    | F      | 2012-06-04 | US       | NV    | Whatever | Super hero    | 5   |\n| Marc Kidd        | F      | 1982-01-25 | US       | RI    | Whatever | Medic         | 35  |\n| Kelly Crose      | F      | 2008-05-03 | US       | ME    | Whatever | Comedian      | 9   |\n+------------------+--------+------------+----------+-------+----------+---------------+-----+\n</pre>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Parse and objectify your file</li>\n<li>Filter objects using a django-like syntax</li>\n<li>Reorganize your data</li>\n<li>Vizualization as table (thanks to\n<a href=\"https://robpol86.github.io/terminaltables/\" rel=\"nofollow\">terminaltables</a>)</li>\n<li>Order by column</li>\n<li>Add or remove columns</li>\n<li>Count a subset</li>\n<li>Uniqueness of data on a column</li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"setting-up-your-parser\">\n<h3>Setting up your parser</h3>\n<p>First thing you need to know is the width of each column on your file.\nThere\u2019s no magic here. You will need to find out.</p>\n<p>Lets take <a href=\"https://raw.githubusercontent.com/nano-labs/pyfwf3/master/examples/humans.txt\" rel=\"nofollow\">this\nfile</a>\nas example. Here its first line:</p>\n<pre>'US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic        \\n'\n</pre>\n<p>By testing, splitting, trying or whatever I know that: - First 9\ncharacters are reserved for that person location - Next 2 characters are\nfor her state - Next 8 are her birthday - Next 1 is her gender - Next 12\nI dont have a clue and I dont care - Next 24 are her name</p>\n<p>and so on. But I only want name, birthday and gender so let\u2019s write it\u2019s\nmodel</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Parser for each line of that humans.txt file.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)}</span>\n</pre>\n<p>The slices represents the first and last positions of each information\nin the line and that\u2019s the most basic line parser you need. Now we are\ngoing to use it with the file parser.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytwt3</span> <span class=\"kn\">import</span> <span class=\"n\">BaseFileParser</span>\n\n<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"n\">line_parser</span><span class=\"o\">=</span><span class=\"n\">Human</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it. Your file is parsed and now usable but let\u2019s put it together:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span><span class=\"p\">,</span> <span class=\"n\">BaseFileParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Parser for each line of that humans.txt file.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)}</span>\n\n\n<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"n\">line_parser</span><span class=\"o\">=</span><span class=\"n\">Human</span><span class=\"p\">)</span>\n</pre>\n<p>or even</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span><span class=\"p\">,</span> <span class=\"n\">BaseFileParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Parser for each line of that humans.txt file.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"birthday\"</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HumanFileParser</span><span class=\"p\">(</span><span class=\"n\">BaseFileParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Parser for that humans.txt file.\"\"\"</span>\n\n    <span class=\"n\">_line_parser</span> <span class=\"o\">=</span> <span class=\"n\">Human</span>\n\n<span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n</pre>\n<p>We will discuss those classes in the <a href=\"#fwfbaselineparser\" rel=\"nofollow\">future</a></p>\n</div>\n<div id=\"queryset\">\n<h3>Queryset</h3>\n<p>With your parsed file as a BaseFileParser instance you have all objects\nstored as a Queryset instance in \u201c.objects\u201d attribute. So:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># slices returns a smaller queryset instance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Dianne Mcintosh  | 19570526 | F      |\n| Rosalyn Clark    | 19940213 | M      |\n| Shirley Gray     | 19510403 | M      |\n| Georgia Frank    | 20110508 | F      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># while getting a specific item returns a parsed line instance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">]</span>\n<span class=\"go\">+------------+----------+--------+\n| name       | birthday | gender |\n+------------+----------+--------+\n| Jack Brown | 19490106 | M      |\n+------------+----------+--------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that the table is only a shell representation of the objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">'Jack Brown'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">birthday</span>\n<span class=\"go\">'19490106'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">gender</span>\n<span class=\"go\">'M'\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">])</span>\n<span class=\"go\">('M', 'Jack Brown', '19490106')\n</span><span class=\"nb\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">327</span><span class=\"p\">])</span>\n<span class=\"go\">['M', 'Jack Brown', '19490106']\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># To prevent the fields from changing order use OrderedDict instead of dict on _map. More about that later</span>\n</pre>\n</div>\n<div id=\"filter-kwargs\">\n<h3>.filter(**kwargs)</h3>\n<p>Here is where the magic happens. A filtered queryset will always return\na new queryset that can be filtered too and so and so</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first5</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 'first5' is a Queryset instance just as 'parsed.objects' but with only a few objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">firts5</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Dianne Mcintosh  | 19570526 | F      |\n| Rosalyn Clark    | 19940213 | M      |\n| Shirley Gray     | 19510403 | M      |\n| Georgia Frank    | 20110508 | F      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># And it still can be filtered</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first5</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"F\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Dianne Mcintosh  | 19570526 | F      |\n| Georgia Frank    | 20110508 | F      |\n+------------------+----------+--------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># with multiple keywords arguments</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">firts5</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"M\"</span><span class=\"p\">,</span> <span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"s2\">\"19900101\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Rosalyn Clark    | 19940213 | M      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or chained filters</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">firts5</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__endswith</span><span class=\"o\">=</span><span class=\"s2\">\"k\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Georgia Frank    | 20110508 | F      |\n+------------------+----------+--------+</span>\n</pre>\n<p>Some special filters may be used with __ notation. Here are some but\nnot limited to:</p>\n<ul>\n<li>__in: value is in a list</li>\n<li>__lt: less than</li>\n<li>__lte: less than or equals</li>\n<li>__gt: greater than</li>\n<li>__gte: greater than or equals</li>\n<li>__ne: not equals</li>\n<li>__len: field lenght (without trailing spaces)</li>\n<li>__startswith: value starts with that string</li>\n<li>__endswith: value ends with that string</li>\n</ul>\n<p>It will actually look for any attribute or method of the field object\nthat matches with <strong>\u2018object.somefilter\u2019</strong> or\n<strong>\u2018object.__somefilter__\u2019</strong> and call it or compare with it. So let\u2019s\nsay that you use the <a href=\"#_after_parse\" rel=\"nofollow\">_after_parse()</a> method to\nconvert the <strong>\u2018birthday\u2019</strong> field into <strong>datetime.date</strong> instances you\ncan now filter using, for example, <strong>.filter(birthday__year=1957)</strong></p>\n</div>\n<div id=\"exclude-kwargs\">\n<h3>.exclude(**kwargs)</h3>\n<p>Pretty much the opposite of <a href=\"#filterkwargs\" rel=\"nofollow\">.filter()</a></p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first5</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">firts5</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Dianne Mcintosh  | 19570526 | F      |\n| Rosalyn Clark    | 19940213 | M      |\n| Shirley Gray     | 19510403 | M      |\n| Georgia Frank    | 20110508 | F      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first5</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"F\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Rosalyn Clark    | 19940213 | M      |\n| Shirley Gray     | 19510403 | M      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+</span>\n</pre>\n</div>\n<div id=\"order-by-field-name-reverse-false\">\n<h3>.order_by(field_name, reverse=False)</h3>\n<p>Reorder the whole queryset sorting by that given field</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+----------+--------+\n| name             | birthday | gender |\n+------------------+----------+--------+\n| Dianne Mcintosh  | 19570526 | F      |\n| Rosalyn Clark    | 19940213 | M      |\n| Shirley Gray     | 19510403 | M      |\n| Georgia Frank    | 20110508 | F      |\n| Virginia Lambert | 19930404 | M      |\n+------------------+----------+--------+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+--------+----------+\n| name             | gender | birthday |\n+------------------+--------+----------+\n| Dianne Mcintosh  | F      | 19570526 |\n| Georgia Frank    | F      | 20110508 |\n| Rosalyn Clark    | M      | 19940213 |\n| Shirley Gray     | M      | 19510403 |\n| Virginia Lambert | M      | 19930404 |\n+------------------+--------+----------+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+--------+----------+\n| name             | gender | birthday |\n+------------------+--------+----------+\n| Virginia Lambert | M      | 19930404 |\n| Shirley Gray     | M      | 19510403 |\n| Rosalyn Clark    | M      | 19940213 |\n| Georgia Frank    | F      | 20110508 |\n| Dianne Mcintosh  | F      | 19570526 |\n+------------------+--------+----------+</span>\n</pre>\n<p>TODO: Order by more than one field and order by special field</p>\n</div>\n<div id=\"unique-field-name\">\n<h3>.unique(field_name)</h3>\n<p>Return a list o unique values for that field. For this example I will\nuse complete line parser for that humans.txt file</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span><span class=\"p\">,</span> <span class=\"n\">BaseFileParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CompleteHuman</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Complete line parser for humans.txt example file.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"gender\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"location\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"state\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"universe\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"profession\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CompleteHumanFileParser</span><span class=\"p\">(</span><span class=\"n\">BaseFileParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Complete file parser for humans.txt example file.\"\"\"</span>\n\n    <span class=\"n\">_line_parser</span> <span class=\"o\">=</span> <span class=\"n\">CompleteHuman</span>\n</pre>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">CompleteHumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n| Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n| Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n| Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n| Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n+------------------+--------+----------+----------+-------+----------+--------------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Looking into all objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"s2\">\"gender\"</span><span class=\"p\">)</span>\n<span class=\"go\">['F', 'M']\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"s2\">\"profession\"</span><span class=\"p\">)</span>\n<span class=\"go\">['', 'Time traveler', 'Student', 'Berserk', 'Hero', 'Soldier', 'Super hero', 'Shark tammer', 'Artist', 'Hunter', 'Cookie maker', 'Comedian', 'Mecromancer', 'Programmer', 'Medic', 'Siren']\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"s2\">\"state\"</span><span class=\"p\">)</span>\n<span class=\"go\">['', 'MT', 'WA', 'NY', 'AZ', 'MD', 'LA', 'IN', 'IL', 'WY', 'OK', 'NJ', 'VT', 'OH', 'AR', 'FL', 'DE', 'KS', 'NC', 'NM', 'MA', 'NH', 'ME', 'CT', 'MS', 'RI', 'ID', 'HI', 'NE', 'TN', 'AL', 'MN', 'TX', 'WV', 'KY', 'CA', 'NV', 'AK', 'IA', 'PA', 'UT', 'SD', 'CO', 'MI', 'VA', 'GA', 'ND', 'OR', 'SC', 'WI', 'MO']</span>\n</pre>\n<p>TODO: Unique by special field</p>\n</div>\n<div id=\"count\">\n<h3>.count()</h3>\n<p>Return how many objects are there on that queryset</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">CompleteHumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Total</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">10012\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># How many are women</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"F\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">4979\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># How many womans from New York or California</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"F\"</span><span class=\"p\">,</span> <span class=\"n\">state__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"NY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"CA\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">197\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># How many mens born on 1960 or later</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">gender</span><span class=\"o\">=</span><span class=\"s2\">\"M\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">birthday__lt</span><span class=\"o\">=</span><span class=\"s2\">\"19600101\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">4321</span>\n</pre>\n</div>\n<div id=\"values-fields\">\n<h3>.values(*fields)</h3>\n<p>This method should be used to actually return data from a queryset. Will\nreturn the specified fields only or all of them if none is specified.</p>\n<p>Returns a <strong>ValuesList</strong> instance which is in fact a extended <strong>list</strong>\nobject with overwriten <strong>__repr__</strong> method just to look like a table\non shell, so on every other aspect it is a list. May be a list o tuples,\nif more the one column is returned, or a simple list if only one field\nwas specified</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">CompleteHumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+\n| name             |\n+------------------+\n| Dianne Mcintosh  |\n| Rosalyn Clark    |\n| Shirley Gray     |\n| Georgia Frank    |\n| Virginia Lambert |\n+------------------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># even though it looks like a table it is actually a list</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)[:]</span>\n<span class=\"go\">['Dianne Mcintosh',\n 'Rosalyn Clark',\n 'Shirley Gray',\n 'Georgia Frank',\n 'Virginia Lambert']\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"state\"</span><span class=\"p\">)</span>\n<span class=\"go\">+------------------+-------+\n| name             | state |\n+------------------+-------+\n| Dianne Mcintosh  | AR    |\n| Rosalyn Clark    | MI    |\n| Shirley Gray     | WI    |\n| Georgia Frank    | MD    |\n| Virginia Lambert | PA    |\n+------------------+-------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or a list o tuples</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"state\"</span><span class=\"p\">)[:]</span>\n<span class=\"go\">[('Dianne Mcintosh', 'AR'),\n ('Rosalyn Clark', 'MI'),\n ('Shirley Gray', 'WI'),\n ('Georgia Frank', 'MD'),\n ('Virginia Lambert', 'PA')]\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># If no field is specified it will return all</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n| Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n| Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n| Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n| Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n+------------------+--------+----------+----------+-------+----------+--------------+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()[:]</span>\n<span class=\"go\">[('Dianne Mcintosh', 'F', '19570526', 'US', 'AR', 'Whatever', 'Medic'),\n ('Rosalyn Clark', 'M', '19940213', 'US', 'MI', 'Whatever', 'Comedian'),\n ('Shirley Gray', 'M', '19510403', 'US', 'WI', 'Whatever', 'Comedian'),\n ('Georgia Frank', 'F', '20110508', 'US', 'MD', 'Whatever', 'Comedian'),\n ('Virginia Lambert', 'M', '19930404', 'US', 'PA', 'Whatever', 'Shark tammer')]\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that you dont need to slice the result with '[:]'. I am only doing it to show the response structure behind the table representation</span>\n</pre>\n<p>There is also 2 hidden fields that may be used, if needed:</p>\n<ul>\n<li>_line_number: The line number on the original file, counting even if some line is skipped during parsing</li>\n<li>_unparsed_line: The unchanged and unparsed original line, with original line breakers at the end</li>\n</ul>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">CompleteHumanFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"_line_number\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n<span class=\"go\">+--------------+------------------+\n| _line_number | name             |\n+--------------+------------------+\n| 4328         | John Cleese      |\n| 9282         | Johnny Andres    |\n| 8466         | Oscar Callaghan  |\n| 3446         | Gilbert Garcia   |\n| 6378         | Helen Villarreal |\n+--------------+------------------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># or a little hacking to add it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"_line_number\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">_line_parser</span><span class=\"o\">.</span><span class=\"n\">_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"go\">+--------------+------------------+--------+----------+----------+-------+--------------+------------+\n| _line_number | name             | gender | birthday | location | state | universe     | profession |\n+--------------+------------------+--------+----------+----------+-------+--------------+------------+\n| 4328         | John Cleese      | M      | 19391027 | UK       |       | Monty Python | Comedian   |\n| 9282         | Johnny Andres    | F      | 19400107 | US       | TX    | Whatever     | Student    |\n| 8466         | Oscar Callaghan  | M      | 19400121 | US       | ID    | Whatever     | Comedian   |\n| 3446         | Gilbert Garcia   | M      | 19400125 | US       | NC    | Whatever     | Student    |\n| 6378         | Helen Villarreal | F      | 19400125 | US       | MD    | Whatever     |            |\n+--------------+------------------+--------+----------+----------+-------+--------------+------------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note the trailing whitespaces and breakline on _unparsed_line</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"_line_number\"</span><span class=\"p\">,</span> <span class=\"s2\">\"_unparsed_line\"</span><span class=\"p\">)</span>\n<span class=\"go\">+--------------+-----------------------------------------------------------------------------------+\n| _line_number | _unparsed_line                                                                    |\n+--------------+-----------------------------------------------------------------------------------+\n| 1            | US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic         |\n|              |                                                                                   |\n| 2            | US       MI19940213M706a6e0afc3dRosalyn Clark           Whatever    Comedian      |\n|              |                                                                                   |\n| 3            | US       WI19510403M451ed630accbShirley Gray            Whatever    Comedian      |\n|              |                                                                                   |\n| 4            | US       MD20110508F7e5cd7324f38Georgia Frank           Whatever    Comedian      |\n|              |                                                                                   |\n| 5            | US       PA19930404Mecc7f17c16a6Virginia Lambert        Whatever    Shark tammer  |\n|              |                                                                                   |\n+--------------+-----------------------------------------------------------------------------------+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">\"_line_number\"</span><span class=\"p\">,</span> <span class=\"s2\">\"_unparsed_line\"</span><span class=\"p\">)[:]</span>\n<span class=\"go\">[(1, 'US       AR19570526Fbe56008be36eDianne Mcintosh         Whatever    Medic        \\n'),\n (2, 'US       MI19940213M706a6e0afc3dRosalyn Clark           Whatever    Comedian     \\n'),\n (3, 'US       WI19510403M451ed630accbShirley Gray            Whatever    Comedian     \\n'),\n (4, 'US       MD20110508F7e5cd7324f38Georgia Frank           Whatever    Comedian     \\n'),\n (5, 'US       PA19930404Mecc7f17c16a6Virginia Lambert        Whatever    Shark tammer \\n')]</span>\n</pre>\n<p>TODO: Allow special fields to be used</p>\n</div>\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<div id=\"fwf-baselineparser\">\n<h3>fwf.BaseLineParser</h3>\n<p>This is the class responsible for the actual parsing and have to be\nextended to set its parsing map, as explained on <a href=\"#setting-up-your-parser\" rel=\"nofollow\">Setting up your\nparser</a>. It also responsible for all the\nmagic before and after parsing by the use of\n<a href=\"#_before_parse\" rel=\"nofollow\">_before_parse()</a> and\n<a href=\"#_after_parse\" rel=\"nofollow\">_after_parse()</a> methods</p>\n</div>\n<div id=\"before-parse\">\n<h3>_before_parse()</h3>\n<p>This method is called before the line is parsed. At this point <strong>self</strong> have:</p>\n<ul>\n<li>self._unparsed_line: Original unchanged line</li>\n<li>self._parsable_line: Line to be parsed. If None given self._unparsed_line wil be used</li>\n<li>self._line_number: File line number</li>\n<li>self._headers: Name of all soon-to-be-available fields</li>\n<li>self._map: The field mapping for the parsing</li>\n</ul>\n<p>Use it to pre-filter, pre-validade or process the line before parsing.</p>\n<p>Ex:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span><span class=\"p\">,</span> <span class=\"n\">InvalidLineError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomLineParser</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Validated, uppercased U.S.A-only humans.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"gender\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"location\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"state\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"universe\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"profession\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_before_parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Do some pre-process before the parsing.\"\"\"</span>\n        <span class=\"c1\"># Validate line size to avoid malformed lines</span>\n        <span class=\"c1\"># an InvalidLineError will make this line to be skipped</span>\n        <span class=\"c1\"># any other error will break the parsing</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unparsed_line</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">82</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">InvalidLineError</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># As I know that the first characters are reserved for location I will</span>\n        <span class=\"c1\"># pre-filter any person that are not from U.S.A (Trumping) even before</span>\n        <span class=\"c1\"># parsing it</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unparsed_line</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"US\"</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">InvalidLineError</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Then put everything uppercased</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parsable_line</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unparsed_line</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Note that instead of changing self._unparsed_line I've set the new</span>\n        <span class=\"c1\"># string to self._parsable_line. I don't want to loose the unparsed</span>\n        <span class=\"c1\"># value because it is useful for further debug</span>\n</pre>\n<p>Then use it as you like</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"n\">CustomLineParser</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| DIANNE MCINTOSH  | F      | 19570526 | US       | AR    | WHATEVER | MEDIC        |\n| ROSALYN CLARK    | M      | 19940213 | US       | MI    | WHATEVER | COMEDIAN     |\n| SHIRLEY GRAY     | M      | 19510403 | US       | WI    | WHATEVER | COMEDIAN     |\n| GEORGIA FRANK    | F      | 20110508 | US       | MD    | WHATEVER | COMEDIAN     |\n| VIRGINIA LAMBERT | M      | 19930404 | US       | PA    | WHATEVER | SHARK TAMMER |\n+------------------+--------+----------+----------+-------+----------+--------------+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that everything is uppercased</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># And there is nobody who is not from US</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"US\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">0\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"s2\">\"location\"</span><span class=\"p\">)</span>\n<span class=\"go\">['US']</span>\n</pre>\n</div>\n<div id=\"after-parse\">\n<h3>_after_parse()</h3>\n<p>This method is called after the line is parsed. At this point you have a already parsed line and now you may create new fields, alter some existing or combine those. You still may filter some objects.</p>\n<p>Ex:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseLineParser</span><span class=\"p\">,</span> <span class=\"n\">InvalidLineError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomLineParser</span><span class=\"p\">(</span><span class=\"n\">BaseLineParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Age-available, address-set employed human.\"\"\"</span>\n\n    <span class=\"n\">_map</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">56</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"gender\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"location\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"state\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"universe\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"mi\">68</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">\"profession\"</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"mi\">68</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_after_parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Customization on parsed line object.\"\"\"</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Parse birthday as datetime.date object</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birthday</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birthday</span><span class=\"p\">,</span> <span class=\"s2\">\"%Y%m</span><span class=\"si\">%d</span><span class=\"s2\">\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># There is some \"unknown\" values on my example file so I decided to</span>\n            <span class=\"c1\"># set birthday as 1900-01-01 as failover. I also could just skip</span>\n            <span class=\"c1\"># those lines by raising InvalidLineError</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birthday</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1900</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Set a new attribute 'age'</span>\n        <span class=\"c1\"># Yeah, I know, it's not the proper way to calc someone's age but stil...</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birthday</span><span class=\"o\">.</span><span class=\"n\">year</span>\n\n        <span class=\"c1\"># Combine 'location' and 'state' to create 'address' field</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">, </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"c1\"># and remove location and state</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">state</span>\n\n        <span class=\"c1\"># then update table headers so 'age' and 'address' become available and</span>\n        <span class=\"c1\"># remove 'location' and 'state'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_headers</span><span class=\"p\">()</span>\n        <span class=\"c1\"># You will note that the new columns will be added at the end of the</span>\n        <span class=\"c1\"># table. If you want some specific column order just set self._headers</span>\n        <span class=\"c1\"># manually</span>\n\n        <span class=\"c1\"># And also skip those who does not have a profession</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">profession</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">InvalidLineError</span><span class=\"p\">()</span>\n</pre>\n<p>Then just use as you like</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"n\">CustomLineParser</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+------------+----------+--------------+---------+-----+\n| name             | gender | birthday   | universe | profession   | address | age |\n+------------------+--------+------------+----------+--------------+---------+-----+\n| Dianne Mcintosh  | F      | 1957-05-26 | Whatever | Medic        | US, AR  | 60  |\n| Rosalyn Clark    | M      | 1994-02-13 | Whatever | Comedian     | US, MI  | 23  |\n| Shirley Gray     | M      | 1951-04-03 | Whatever | Comedian     | US, WI  | 66  |\n| Georgia Frank    | F      | 2011-05-08 | Whatever | Comedian     | US, MD  | 6   |\n| Virginia Lambert | M      | 1993-04-04 | Whatever | Shark tammer | US, PA  | 24  |\n+------------------+--------+------------+----------+--------------+---------+-----+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that birthday is now a datetime.date instance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">birthday</span>\n<span class=\"go\">datetime.date(1957, 5, 26)\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># and you can use datetime attributes as special filters</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">birthday__day</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">birthday__month</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+--------------------+--------+------------+----------+------------+---------+-----+\n| name               | gender | birthday   | universe | profession | address | age |\n+--------------------+--------+------------+----------+------------+---------+-----+\n| Christopher Symons | M      | 2006-07-04 | Whatever | Comedian   | US, LA  | 11  |\n| Thomas Hughes      | F      | 2012-07-04 | Whatever | Medic      | US, PA  | 5   |\n| Anthony French     | F      | 2012-07-04 | Whatever | Student    | US, ND  | 5   |\n| Harry Carson       | M      | 1989-07-04 | Whatever | Student    | US, AK  | 28  |\n| Margaret Walks     | M      | 2012-07-04 | Whatever | Comedian   | US, AZ  | 5   |\n+--------------------+--------+------------+----------+------------+---------+-----+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"birthday\"</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+---------------+--------+------------+----------+--------------+---------+-----+\n| name          | gender | birthday   | universe | profession   | address | age |\n+---------------+--------+------------+----------+--------------+---------+-----+\n| Peggy Brinlee | M      | 2000-01-01 | Whatever | Programmer   | US, CO  | 17  |\n| Tamara Kidd   | M      | 2000-01-03 | Whatever | Artist       | US, MN  | 17  |\n| Victor Fraley | M      | 2000-01-04 | Whatever | Shark tammer | US, IL  | 17  |\n| Joyce Lee     | F      | 2000-01-05 | Whatever | Programmer   | US, KY  | 17  |\n| Leigh Harley  | M      | 2000-01-06 | Whatever | Programmer   | US, NM  | 17  |\n+---------------+--------+------------+----------+--------------+---------+-----+\n</span><span class=\"c1\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># And age is also usable</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+------------+----------+--------------+---------+-----+\n| name             | gender | birthday   | universe | profession   | address | age |\n+------------------+--------+------------+----------+--------------+---------+-----+\n| Gladys Martin    | F      | 1999-01-23 | Whatever | Medic        | US, WY  | 18  |\n| Justin Salinas   | M      | 1999-07-03 | Whatever | Shark tammer | US, ND  | 18  |\n| Sandra Carrousal | F      | 1999-10-09 | Whatever | Super hero   | US, NH  | 18  |\n| Edith Briggs     | F      | 1999-04-05 | Whatever | Medic        | US, AL  | 18  |\n| Patrick Mckinley | F      | 1999-03-18 | Whatever | Comedian     | US, ME  | 18  |\n+------------------+--------+------------+----------+--------------+---------+-----+\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__lt</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+--------------------+--------+------------+----------+--------------+---------+-----+\n| name               | gender | birthday   | universe | profession   | address | age |\n+--------------------+--------+------------+----------+--------------+---------+-----+\n| Angela Armentrout  | F      | 2000-12-21 | Whatever | Artist       | US, MO  | 17  |\n| Christine Strassel | F      | 2000-10-22 | Whatever | Medic        | US, NE  | 17  |\n| Christopher Pack   | M      | 2000-03-22 | Whatever | Student      | US, IN  | 17  |\n| Manuela Lytle      | M      | 2000-12-18 | Whatever | Shark tammer | US, NV  | 17  |\n| Tamara Kidd        | M      | 2000-01-03 | Whatever | Artist       | US, MN  | 17  |\n+--------------------+--------+------------+----------+--------------+---------+-----+</span>\n</pre>\n</div>\n<div id=\"fwf-basefileparser\">\n<h3>fwf.BaseFileParser</h3>\n<p>This class will center all file data and needs a line parser to do the\nactual parsing. So you will need a class extended from\n<a href=\"#fwfbaselineparser\" rel=\"nofollow\">BaseLineParser</a>. I\u2019ll consider that you\nalready have your CustomLineParser class so:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseFileParser</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Let's say that you already created your CustomLineParser class</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"n\">CustomLineParser</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n| Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n| Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n| Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n| Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n+------------------+--------+----------+----------+-------+----------+--------------+</span>\n</pre>\n<p>Or you may extend BaseFileParser for semantics sake</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseFileParser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HumanParser</span><span class=\"p\">(</span><span class=\"n\">BaseFileParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"File parser for humans.txt example file.\"\"\"</span>\n\n    <span class=\"c1\"># Let's say that you already created your CustomLineParser class</span>\n    <span class=\"n\">_line_parser</span> <span class=\"o\">=</span> <span class=\"n\">CustomLineParser</span>\n</pre>\n<p>Now you just</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">HumanParser</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n| Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n| Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n| Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n| Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n+------------------+--------+----------+----------+-------+----------+--------------+</span>\n</pre>\n</div>\n<div id=\"open-filename-line-parser-none\">\n<h3>.open(filename, line_parser=None)</h3>\n<p>This class method actually open the given file, parse it, close it and\nreturn a parsed file instance. Pretty much every example here is using\n<strong>.open()</strong></p>\n<p>You may define your line parser class here, if you what, but for\nsemantics sake I recommend that you extend BaseFileParser to set you\nline parser there.</p>\n<div id=\"parse-an-already-opened-file\">\n<h4>Parse an already opened file</h4>\n<p>You also may parse a already opened file, StringIO, downloaded file or\nany IO instance that you have. For that just create an instance directly</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">fwf</span> <span class=\"kn\">import</span> <span class=\"n\">BaseFileParser</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Let's say that you already created your CustomLineParser class</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"examples/humans.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">BaseFileParser</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">CustomLineParser</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Always remember to close your files or use \"with\" statement to do so</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"go\">+------------------+--------+----------+----------+-------+----------+--------------+\n| name             | gender | birthday | location | state | universe | profession   |\n+------------------+--------+----------+----------+-------+----------+--------------+\n| Dianne Mcintosh  | F      | 19570526 | US       | AR    | Whatever | Medic        |\n| Rosalyn Clark    | M      | 19940213 | US       | MI    | Whatever | Comedian     |\n| Shirley Gray     | M      | 19510403 | US       | WI    | Whatever | Comedian     |\n| Georgia Frank    | F      | 20110508 | US       | MD    | Whatever | Comedian     |\n| Virginia Lambert | M      | 19930404 | US       | PA    | Whatever | Shark tammer |\n+------------------+--------+----------+----------+-------+----------+--------------+</span>\n</pre>\n</div>\n</div>\n<div id=\"objects-attribute\">\n<h3><strong>.objects</strong> attribute</h3>\n<p>Your parsed file have a <strong>.objects</strong> attribute. Thats your complete parsed\n<a href=\"#queryset\" rel=\"nofollow\">queryset</a></p>\n</div>\n<div id=\"todos\">\n<h3>TODOs:</h3>\n<ul>\n<li>Handle files with no break lines</li>\n<li>Recursive special filters like: birthday__year__lt</li>\n<li>Filter with same line like: .filter(start_day=L(\u201cend_day\u201d))</li>\n<li>Multi-column order like: .order_by(\u201c-age\u201d, \u201cname\u201d)</li>\n<li>Values using special fields like: .values(\u201cname__len\u201d)</li>\n<li>Order using special fields like: .order_by(\u201cbirthday__year\u201d)</li>\n<li>Export methods like: .sqlite file or .sql file</li>\n<li>Write a fixed-width field file (?)(why would someone write those\nfiles?)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2705670, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6f08de9a3d8162afc3d5862b6ee47314", "sha256": "fc28054c5e4a48e2503297e54a54c378d68d6977c476da89f1e4129fc8369736"}, "downloads": -1, "filename": "fwf-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f08de9a3d8162afc3d5862b6ee47314", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29297, "upload_time": "2017-03-14T19:24:51", "upload_time_iso_8601": "2017-03-14T19:24:51.343731Z", "url": "https://files.pythonhosted.org/packages/92/ac/9d8e32492c7e67da57e199a4388577a4a2cb347743d63b55e4db71b6e6d9/fwf-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f08de9a3d8162afc3d5862b6ee47314", "sha256": "fc28054c5e4a48e2503297e54a54c378d68d6977c476da89f1e4129fc8369736"}, "downloads": -1, "filename": "fwf-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f08de9a3d8162afc3d5862b6ee47314", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29297, "upload_time": "2017-03-14T19:24:51", "upload_time_iso_8601": "2017-03-14T19:24:51.343731Z", "url": "https://files.pythonhosted.org/packages/92/ac/9d8e32492c7e67da57e199a4388577a4a2cb347743d63b55e4db71b6e6d9/fwf-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:30 2020"}