{"info": {"author": "Istv\u00e1n P\u00e1sztor", "author_email": "pasztorpisti@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============\ndecorator-args\n==============\n\nOptional/required/keyword-only decorator arguments made easy.\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n.. image:: https://img.shields.io/travis/pasztorpisti/decorator-args.svg?style=flat\n    :target: https://travis-ci.org/pasztorpisti/decorator-args\n    :alt: build\n\n.. image:: https://img.shields.io/codacy/0e4f7e6a2823485ba20496c7c96a42e7/master.svg?style=flat\n    :target: https://www.codacy.com/app/pasztorpisti/decorator-args\n    :alt: code quality\n\n.. image:: https://landscape.io/github/pasztorpisti/decorator-args/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/pasztorpisti/decorator-args/master\n    :alt: code health\n\n.. image:: https://img.shields.io/coveralls/pasztorpisti/decorator-args/master.svg?style=flat\n    :target: https://coveralls.io/r/pasztorpisti/decorator-args?branch=master\n    :alt: coverage\n\n.. image:: https://img.shields.io/pypi/v/decorator-args.svg?style=flat\n    :target: https://pypi.python.org/pypi/decorator-args\n    :alt: pypi\n\n.. image:: https://img.shields.io/github/tag/pasztorpisti/decorator-args.svg?style=flat\n    :target: https://github.com/pasztorpisti/decorator-args\n    :alt: github\n\n.. image:: https://img.shields.io/github/license/pasztorpisti/decorator-args.svg?style=flat\n    :target: https://github.com/pasztorpisti/decorator-args/blob/master/LICENSE.txt\n    :alt: license: MIT\n\n\nThis mini-library is far from being revolutionary or essential but its features may come in handy for some.\nIt is a chaotic set of ideas and features that I don't really feel to be rock solid but I think it isn't an\nunforgivable guilt to release it to the wild. In worst case you can open a \"Please destruct this code/library\"\nissue on its github page.\n\n\n.. contents::\n\n\nInstallation\n============\n\n.. code-block:: sh\n\n    pip install decorator-args\n\nAlternatively you can download the distribution from the following places:\n\n- https://pypi.python.org/pypi/decorator-args#downloads\n- https://github.com/pasztorpisti/decorator-args/releases\n\n\nUsage\n=====\n\n\nProblem to solve\n----------------\n\nThe following code snippet shows two examples:\n\n1. Applying a decorator called ``argless``  without any arguments.\n2. Applying a decorator called ``argful`` that receives arguments before applying it.\n\n.. code-block:: python\n\n    #1\n    @argless\n    def decorated_function():\n        ...\n\n    #2\n    @argful('arg1_value', arg2='arg2_value')\n    def decorated_function():\n        ...\n\n\nThis library tries to make it easier to implement decorators that receive arguments (like ``argful_decorator`` above).\nBesides this it has some related extra features to offer (optional and keyword-only decorator args).\n\n\nHow this library helps\n----------------------\n\nThe previously used ``argful`` decorator can be implemented in countless ways but the two most standard ways to do it\nwithout this library looks like this:\n\n1. \"Inception-style\" implementation as a function:\n\n.. code-block:: python\n\n    def argful(arg1, arg2='arg2_default'):\n        # TODO: Validate and pre-process decorator args as early as possible for easier debugging\n        def decorate(decoratable):\n            @functools.wraps(decoratable)\n            def wrapper(*args, **kwargs):\n                # TODO: Manipulate the input and output of the wrapped\n                # decoratable object and use arg1 and arg2 if you want...\n                return decoratable(*args, **kwargs)\n            return wrapper\n        return decorate\n\n\n2. Implementation as a class:\n\n.. code-block:: python\n\n    class argful(object):\n        def __init__(self, arg1, arg2='arg2_default'):\n            # TODO: Validate and pre-process decorator args as early as possible for easier debugging\n            self.arg1 = arg1\n            self.arg2 = arg2\n\n        def __call__(self, decoratable):\n            @functools.wraps(decoratable)\n            def wrapper(*args, **kwargs)\n                # TODO: Manipulate the input and output of the wrapped\n                # decoratable object and use self.arg1 and self.arg2 if you want...\n                return decoratable(*args, **kwargs)\n            return wrapper\n\n\nThe ``decorator_args.decorator_args`` decorator provided by this library can remove a level of indirection from the\n\"Inception-style\" implementation seen in example #1 making the code simpler and more readable:\n\n.. code-block:: python\n\n    from decorator_args import decorator_args\n\n\n    @decorator_args\n    def argful(decoratable, arg1, arg2='arg2_default'):\n        @functools.wraps(decoratable)\n        def wrapper(*args, **kwargs):\n            # TODO: Manipulate the input and output of the wrapped\n            # decoratable object and use arg1 and arg2 if you want...\n            return decoratable(*args, **kwargs)\n        return wrapper\n\n\nAt the same time this library offers the following extra features:\n\n- It can force keyword-only argument passing for your decorator. In some cases this is desirable because it can make\n  code easier to read and understand:\n\n.. code-block:: python\n\n    # Decorator implementation with keyword-only decorator arguments:\n    @decorator_args(keyword_only=True)\n    def argful(decoratable, arg1, arg2='arg2_default'):\n        ...\n\n\n    # This would fail with a ``TypeError('This decorator receives only keyword arguments')``\n    @argful('arg1_value', arg2='arg2_value')\n    def decorated_function():\n        ...\n\n\n    # This is OK because all args are passed as keyword args\n    @argful(arg1='arg1_value', arg2='arg2_value')\n    def decorated_function():\n        ...\n\n- If your decorator doesn't have required arguments and you use the ``optional`` feature of this library than you can\n  apply your decorator without an argument list when you don't want to pass any args to it:\n\n.. code-block:: python\n\n    # Decorator implementation with optional argument list:\n    # Note that our decorator doesn't have required args other than the decoratable object:\n    @decorator_args(optional=True)\n    def argful(decoratable, arg1='arg1_default', arg2='arg2_default'):\n        ...\n\n\n    # This works because of using `optional=True` above:\n    @argful\n    def decorated_function():\n        ...\n\n\n    # This would work even without `optional=True` in our decorator implementation:\n    @argful()\n    def decorated_function():\n        ...\n\n\n    # Of course passing actual args also works as expected:\n    @argful('arg1_value', 'arg2_value')\n    def decorated_function():\n        ...\n\n\nLibrary interface\n=================\n\nThe library offers a ``decorator_args.decorator_args`` decorator that is the main \"workhorse\" of the library and a\nset of other decorators that are just convenience helpers around the previously mentioned main decorator.\nSyntax-wise the arguments of these decorators are optional and keyword-only.\n\n\nMain \"entrypoint\"\n-----------------\n\ndecorator_args.\\ **decorator_args**\\ *(\\*, keyword_only=False, optional=False, is_decoratable_object=None)*\n\n    The main decorator of the library. All other decorators are just convenience helpers based on this one.\n\n    - ``keyword_only``: Makes the arguments of your decorator keyword-only. Passing any positional arguments to your\n      decorator will result in a ``TypeError`` with an appropriate error message.\n    - ``optional``: ``optional=True`` allows you to write ``@your_decorator`` instead of ``@your_decorator()``.\n      When you apply your decorator without passing any args to it you can omit the empty brackets\n      that specify the empty decorator argument list.\n    - ``is_decoratable_object``: This argument can be used only when ``keyword_only=False`` and ``optional=True``.\n      When the argument list of your decorator is optional and you apply your decorator by passing only a single\n      positional argument to the decorator this library has hard time to decide whether that single positional argument\n      is an optional decorator argument or a decoratable object. This decision is made by the library function\n      ``decorator_args.default_is_decoratable_object(obj)`` function which returns ``True`` if the given single\n      positional argument is a function, method, or class. This default behavior is good in most of the cases when\n      your decorator receives only simple arguments like integers, strings, bools, etc... However if your decorator\n      can receive a single positional argument that can be a function, method, or class, then the default behavior\n      isn't suitable. There are several workarounds to this problem, one of them is providing your own\n      ``is_decoratable_object(obj)`` implementation through the currently documented decorator argument. You probably\n      have additional info to make an accurate distinction between decorator arguments and decoratable objects to\n      provide a working ``is_decoratable_object(obj)`` implementation.\n\n      In such pathological edge-cases you can also use the following workarounds besides the previously documented\n      custom ``is_decoratable_object(obj)`` implementation:\n\n        - When you apply your decorator with only a single argument that is a function/method/class you can\n          pass the argument as a keyword-argument. This way it will be detected as a decorator argument for sure.\n          This is however just a dirty hack that still leaves chance for the users of your decorator to make an\n          error. This can result in long debugging sessions.\n        - You can make your optional arguments keyword-only with ``keyword_only=True``.\n          This completely eliminates the problem.\n        - Don't make the argument list of this decorator optional. With a required decorator argument list this\n          problem isn't present.\n\n\nHelpers: convenience API\n------------------------\n\nThe convenience API provides a set of decorators that are just \"wrappers\" around the main\n``decorator_args.decorator_args`` decorator. These convenience decorators just bind some of the main decorator\narguments to some constants.\n\n\ndecorator_args.\\ **optional_decorator_args**\\ *(\\*, keyword_only=False, is_decoratable_object=None)*\n\n    Works just like the main ``decorator_args.decorator_args`` decorator with ``optional=True``.\n\ndecorator_args.\\ **keyword_only_decorator_args**\\ *(\\*, optional=False)*\n\n    Works just like the main ``decorator_args.decorator_args`` decorator with ``keyword_only=True``.\n\ndecorator_args.\\ **optional_keyword_only_decorator_args**\\ *()*\n\n    Works just like the main ``decorator_args.decorator_args`` decorator with ``optional=True`` and\n    ``keyword_only=True``.\n\n\nImplementing your decorators in a \"twisted\" way\n===============================================\n\nThe tricky implementation of the library ensures that the decorators provided by this library can be applied to your\ndecorators even in some exotic cases:\n\n    - `When your decorator is a bound instance/class/static method`_\n    - `When your decorator is a bound __call__ magic (instance)method`_\n\n\nWhen your decorator is a bound instance/class/static method\n-----------------------------------------------------------\n\n.. code-block:: python\n\n    class AnyClass(object):\n        @decorator_args\n        def decorator_when_bound(self, decoratable, arg1, arg2):\n            ...\n\n        # It is important to apply @decorator_args after @classmethod!\n        @decorator_args\n        @classmethod\n        def decorator_when_bound_2(cls, decoratable, arg1, arg2):\n            ...\n\n        # It is important to apply @decorator_args after @statimethod!\n        @decorator_args\n        @staticmethod\n        def decorator_when_bound_3(decoratable, arg1, arg2):\n            ...\n\n\n    any_class_instance = AnyClass()\n\n    decorator_with_args = any_class_instance.decorator_when_bound\n    decorator_with_args_2 = AnyClass.decorator_when_bound_2\n    decorator_with_args_3a = any_class_instance.decorator_when_bound_3\n    decorator_with_args_3b = AnyClass.decorator_when_bound_3\n\n\nWhen your decorator is a bound __call__ magic (instance)method\n--------------------------------------------------------------\n\n.. code-block:: python\n\n    class AnyClass(object):\n        @decorator_args\n        def __call__(self, decoratable, arg1, arg2):\n            ...\n\n\n    # Because of the syntactic sugar provided by python it is as simple as:\n    decorator_with_args = AnyClass()\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pasztorpisti/decorator-args", "keywords": "optional required keyword only decorator arguments args", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "decorator-args", "package_url": "https://pypi.org/project/decorator-args/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/decorator-args/", "project_urls": {"Homepage": "https://github.com/pasztorpisti/decorator-args"}, "release_url": "https://pypi.org/project/decorator-args/1.1/", "requires_dist": null, "requires_python": "", "summary": "Optional/required/keyword-only decorator arguments made easy.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/pasztorpisti/decorator-args\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c75821a4ff9dba86ceac00cc0bc09c34619d9ecc/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7061737a746f7270697374692f6465636f7261746f722d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://www.codacy.com/app/pasztorpisti/decorator-args\" rel=\"nofollow\"><img alt=\"code quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bea63b884232cffa31a81210512c1d0958e76f1/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f30653466376536613238323334383562613230343936633763393661343265372f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://landscape.io/github/pasztorpisti/decorator-args/master\" rel=\"nofollow\"><img alt=\"code health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab84787dc874ade2e1449b3f6810bbfabfcb8fb1/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f7061737a746f7270697374692f6465636f7261746f722d617267732f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/r/pasztorpisti/decorator-args?branch=master\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0a3763d64ef81060d603154fc7f03432d787d9e/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f7061737a746f7270697374692f6465636f7261746f722d617267732f6d61737465722e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/decorator-args\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92cf3e5e305e15eb568b67de0678949078384c4a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6465636f7261746f722d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/pasztorpisti/decorator-args\" rel=\"nofollow\"><img alt=\"github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97128ca5c9c057d4b3d8a306db2abc26bd918b55/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f7061737a746f7270697374692f6465636f7261746f722d617267732e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://github.com/pasztorpisti/decorator-args/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"license: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efe52948076d2af4c23ca362e194e3b935e5ba17/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7061737a746f7270697374692f6465636f7261746f722d617267732e7376673f7374796c653d666c6174\"></a>\n<p>This mini-library is far from being revolutionary or essential but its features may come in handy for some.\nIt is a chaotic set of ideas and features that I don\u2019t really feel to be rock solid but I think it isn\u2019t an\nunforgivable guilt to release it to the wild. In worst case you can open a \u201cPlease destruct this code/library\u201d\nissue on its github page.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#problem-to-solve\" id=\"id3\" rel=\"nofollow\">Problem to solve</a></li>\n<li><a href=\"#how-this-library-helps\" id=\"id4\" rel=\"nofollow\">How this library helps</a></li>\n</ul>\n</li>\n<li><a href=\"#library-interface\" id=\"id5\" rel=\"nofollow\">Library interface</a><ul>\n<li><a href=\"#main-entrypoint\" id=\"id6\" rel=\"nofollow\">Main \u201centrypoint\u201d</a></li>\n<li><a href=\"#helpers-convenience-api\" id=\"id7\" rel=\"nofollow\">Helpers: convenience API</a></li>\n</ul>\n</li>\n<li><a href=\"#implementing-your-decorators-in-a-twisted-way\" id=\"id8\" rel=\"nofollow\">Implementing your decorators in a \u201ctwisted\u201d way</a><ul>\n<li><a href=\"#when-your-decorator-is-a-bound-instance-class-static-method\" id=\"id9\" rel=\"nofollow\">When your decorator is a bound instance/class/static method</a></li>\n<li><a href=\"#when-your-decorator-is-a-bound-call-magic-instance-method\" id=\"id10\" rel=\"nofollow\">When your decorator is a bound __call__ magic (instance)method</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<pre>pip install decorator-args\n</pre>\n<p>Alternatively you can download the distribution from the following places:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/decorator-args#downloads\" rel=\"nofollow\">https://pypi.python.org/pypi/decorator-args#downloads</a></li>\n<li><a href=\"https://github.com/pasztorpisti/decorator-args/releases\" rel=\"nofollow\">https://github.com/pasztorpisti/decorator-args/releases</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"problem-to-solve\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Problem to solve</a></h3>\n<p>The following code snippet shows two examples:</p>\n<ol>\n<li>Applying a decorator called <tt>argless</tt>  without any arguments.</li>\n<li>Applying a decorator called <tt>argful</tt> that receives arguments before applying it.</li>\n</ol>\n<pre><span class=\"c1\">#1</span>\n<span class=\"nd\">@argless</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\">#2</span>\n<span class=\"nd\">@argful</span><span class=\"p\">(</span><span class=\"s1\">'arg1_value'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_value'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>This library tries to make it easier to implement decorators that receive arguments (like <tt>argful_decorator</tt> above).\nBesides this it has some related extra features to offer (optional and keyword-only decorator args).</p>\n</div>\n<div id=\"how-this-library-helps\">\n<h3><a href=\"#id4\" rel=\"nofollow\">How this library helps</a></h3>\n<p>The previously used <tt>argful</tt> decorator can be implemented in countless ways but the two most standard ways to do it\nwithout this library looks like this:</p>\n<ol>\n<li>\u201cInception-style\u201d implementation as a function:</li>\n</ol>\n<pre><span class=\"k\">def</span> <span class=\"nf\">argful</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_default'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># TODO: Validate and pre-process decorator args as early as possible for easier debugging</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decorate</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">):</span>\n        <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"c1\"># TODO: Manipulate the input and output of the wrapped</span>\n            <span class=\"c1\"># decoratable object and use arg1 and arg2 if you want...</span>\n            <span class=\"k\">return</span> <span class=\"n\">decoratable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n    <span class=\"k\">return</span> <span class=\"n\">decorate</span>\n</pre>\n<ol>\n<li>Implementation as a class:</li>\n</ol>\n<pre><span class=\"k\">class</span> <span class=\"nc\">argful</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_default'</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO: Validate and pre-process decorator args as early as possible for easier debugging</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"n\">arg1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">arg2</span> <span class=\"o\">=</span> <span class=\"n\">arg2</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">decoratable</span><span class=\"p\">):</span>\n        <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"c1\"># TODO: Manipulate the input and output of the wrapped</span>\n            <span class=\"c1\"># decoratable object and use self.arg1 and self.arg2 if you want...</span>\n            <span class=\"k\">return</span> <span class=\"n\">decoratable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n</pre>\n<p>The <tt>decorator_args.decorator_args</tt> decorator provided by this library can remove a level of indirection from the\n\u201cInception-style\u201d implementation seen in example #1 making the code simpler and more readable:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decorator_args</span> <span class=\"kn\">import</span> <span class=\"n\">decorator_args</span>\n\n\n<span class=\"nd\">@decorator_args</span>\n<span class=\"k\">def</span> <span class=\"nf\">argful</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_default'</span><span class=\"p\">):</span>\n    <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># TODO: Manipulate the input and output of the wrapped</span>\n        <span class=\"c1\"># decoratable object and use arg1 and arg2 if you want...</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoratable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n</pre>\n<p>At the same time this library offers the following extra features:</p>\n<ul>\n<li>It can force keyword-only argument passing for your decorator. In some cases this is desirable because it can make\ncode easier to read and understand:</li>\n</ul>\n<pre><span class=\"c1\"># Decorator implementation with keyword-only decorator arguments:</span>\n<span class=\"nd\">@decorator_args</span><span class=\"p\">(</span><span class=\"n\">keyword_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">argful</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_default'</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># This would fail with a ``TypeError('This decorator receives only keyword arguments')``</span>\n<span class=\"nd\">@argful</span><span class=\"p\">(</span><span class=\"s1\">'arg1_value'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_value'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># This is OK because all args are passed as keyword args</span>\n<span class=\"nd\">@argful</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"o\">=</span><span class=\"s1\">'arg1_value'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_value'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<ul>\n<li>If your decorator doesn\u2019t have required arguments and you use the <tt>optional</tt> feature of this library than you can\napply your decorator without an argument list when you don\u2019t want to pass any args to it:</li>\n</ul>\n<pre><span class=\"c1\"># Decorator implementation with optional argument list:</span>\n<span class=\"c1\"># Note that our decorator doesn't have required args other than the decoratable object:</span>\n<span class=\"nd\">@decorator_args</span><span class=\"p\">(</span><span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">argful</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"o\">=</span><span class=\"s1\">'arg1_default'</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"o\">=</span><span class=\"s1\">'arg2_default'</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># This works because of using `optional=True` above:</span>\n<span class=\"nd\">@argful</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># This would work even without `optional=True` in our decorator implementation:</span>\n<span class=\"nd\">@argful</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Of course passing actual args also works as expected:</span>\n<span class=\"nd\">@argful</span><span class=\"p\">(</span><span class=\"s1\">'arg1_value'</span><span class=\"p\">,</span> <span class=\"s1\">'arg2_value'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">decorated_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n</div>\n<div id=\"library-interface\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Library interface</a></h2>\n<p>The library offers a <tt>decorator_args.decorator_args</tt> decorator that is the main \u201cworkhorse\u201d of the library and a\nset of other decorators that are just convenience helpers around the previously mentioned main decorator.\nSyntax-wise the arguments of these decorators are optional and keyword-only.</p>\n<div id=\"main-entrypoint\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Main \u201centrypoint\u201d</a></h3>\n<p>decorator_args.<strong>decorator_args</strong><em>(*, keyword_only=False, optional=False, is_decoratable_object=None)</em></p>\n<blockquote>\n<p>The main decorator of the library. All other decorators are just convenience helpers based on this one.</p>\n<ul>\n<li><p><tt>keyword_only</tt>: Makes the arguments of your decorator keyword-only. Passing any positional arguments to your\ndecorator will result in a <tt>TypeError</tt> with an appropriate error message.</p>\n</li>\n<li><p><tt>optional</tt>: <tt>optional=True</tt> allows you to write <tt>@your_decorator</tt> instead of <tt>@your_decorator()</tt>.\nWhen you apply your decorator without passing any args to it you can omit the empty brackets\nthat specify the empty decorator argument list.</p>\n</li>\n<li><p><tt>is_decoratable_object</tt>: This argument can be used only when <tt>keyword_only=False</tt> and <tt>optional=True</tt>.\nWhen the argument list of your decorator is optional and you apply your decorator by passing only a single\npositional argument to the decorator this library has hard time to decide whether that single positional argument\nis an optional decorator argument or a decoratable object. This decision is made by the library function\n<tt>decorator_args.default_is_decoratable_object(obj)</tt> function which returns <tt>True</tt> if the given single\npositional argument is a function, method, or class. This default behavior is good in most of the cases when\nyour decorator receives only simple arguments like integers, strings, bools, etc\u2026 However if your decorator\ncan receive a single positional argument that can be a function, method, or class, then the default behavior\nisn\u2019t suitable. There are several workarounds to this problem, one of them is providing your own\n<tt>is_decoratable_object(obj)</tt> implementation through the currently documented decorator argument. You probably\nhave additional info to make an accurate distinction between decorator arguments and decoratable objects to\nprovide a working <tt>is_decoratable_object(obj)</tt> implementation.</p>\n<p>In such pathological edge-cases you can also use the following workarounds besides the previously documented\ncustom <tt>is_decoratable_object(obj)</tt> implementation:</p>\n<blockquote>\n<ul>\n<li>When you apply your decorator with only a single argument that is a function/method/class you can\npass the argument as a keyword-argument. This way it will be detected as a decorator argument for sure.\nThis is however just a dirty hack that still leaves chance for the users of your decorator to make an\nerror. This can result in long debugging sessions.</li>\n<li>You can make your optional arguments keyword-only with <tt>keyword_only=True</tt>.\nThis completely eliminates the problem.</li>\n<li>Don\u2019t make the argument list of this decorator optional. With a required decorator argument list this\nproblem isn\u2019t present.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"helpers-convenience-api\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Helpers: convenience API</a></h3>\n<p>The convenience API provides a set of decorators that are just \u201cwrappers\u201d around the main\n<tt>decorator_args.decorator_args</tt> decorator. These convenience decorators just bind some of the main decorator\narguments to some constants.</p>\n<p>decorator_args.<strong>optional_decorator_args</strong><em>(*, keyword_only=False, is_decoratable_object=None)</em></p>\n<blockquote>\nWorks just like the main <tt>decorator_args.decorator_args</tt> decorator with <tt>optional=True</tt>.</blockquote>\n<p>decorator_args.<strong>keyword_only_decorator_args</strong><em>(*, optional=False)</em></p>\n<blockquote>\nWorks just like the main <tt>decorator_args.decorator_args</tt> decorator with <tt>keyword_only=True</tt>.</blockquote>\n<p>decorator_args.<strong>optional_keyword_only_decorator_args</strong><em>()</em></p>\n<blockquote>\nWorks just like the main <tt>decorator_args.decorator_args</tt> decorator with <tt>optional=True</tt> and\n<tt>keyword_only=True</tt>.</blockquote>\n</div>\n</div>\n<div id=\"implementing-your-decorators-in-a-twisted-way\">\n<h2><a href=\"#id8\" rel=\"nofollow\">Implementing your decorators in a \u201ctwisted\u201d way</a></h2>\n<p>The tricky implementation of the library ensures that the decorators provided by this library can be applied to your\ndecorators even in some exotic cases:</p>\n<blockquote>\n<ul>\n<li><a href=\"#when-your-decorator-is-a-bound-instance-class-static-method\" rel=\"nofollow\">When your decorator is a bound instance/class/static method</a></li>\n<li><a href=\"#when-your-decorator-is-a-bound-call-magic-instance-method\" rel=\"nofollow\">When your decorator is a bound __call__ magic (instance)method</a></li>\n</ul>\n</blockquote>\n<div id=\"when-your-decorator-is-a-bound-instance-class-static-method\">\n<h3><a href=\"#id9\" rel=\"nofollow\">When your decorator is a bound instance/class/static method</a></h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AnyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@decorator_args</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decorator_when_bound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"c1\"># It is important to apply @decorator_args after @classmethod!</span>\n    <span class=\"nd\">@decorator_args</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decorator_when_bound_2</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"c1\"># It is important to apply @decorator_args after @statimethod!</span>\n    <span class=\"nd\">@decorator_args</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decorator_when_bound_3</span><span class=\"p\">(</span><span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n\n<span class=\"n\">any_class_instance</span> <span class=\"o\">=</span> <span class=\"n\">AnyClass</span><span class=\"p\">()</span>\n\n<span class=\"n\">decorator_with_args</span> <span class=\"o\">=</span> <span class=\"n\">any_class_instance</span><span class=\"o\">.</span><span class=\"n\">decorator_when_bound</span>\n<span class=\"n\">decorator_with_args_2</span> <span class=\"o\">=</span> <span class=\"n\">AnyClass</span><span class=\"o\">.</span><span class=\"n\">decorator_when_bound_2</span>\n<span class=\"n\">decorator_with_args_3a</span> <span class=\"o\">=</span> <span class=\"n\">any_class_instance</span><span class=\"o\">.</span><span class=\"n\">decorator_when_bound_3</span>\n<span class=\"n\">decorator_with_args_3b</span> <span class=\"o\">=</span> <span class=\"n\">AnyClass</span><span class=\"o\">.</span><span class=\"n\">decorator_when_bound_3</span>\n</pre>\n</div>\n<div id=\"when-your-decorator-is-a-bound-call-magic-instance-method\">\n<h3><a href=\"#id10\" rel=\"nofollow\">When your decorator is a bound __call__ magic (instance)method</a></h3>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AnyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@decorator_args</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">decoratable</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># Because of the syntactic sugar provided by python it is as simple as:</span>\n<span class=\"n\">decorator_with_args</span> <span class=\"o\">=</span> <span class=\"n\">AnyClass</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2063662, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b78a895e6455187433f9c49b36946efb", "sha256": "976180904fc5e5f707abfcea652f72c68b506774427da699f8165a3e154e5a45"}, "downloads": -1, "filename": "decorator_args-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b78a895e6455187433f9c49b36946efb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3685, "upload_time": "2016-04-14T00:18:33", "upload_time_iso_8601": "2016-04-14T00:18:33.866908Z", "url": "https://files.pythonhosted.org/packages/fd/13/0667e2e4d58c03062144dc127b47611b470fd5cbf897417e628aa479c1b0/decorator_args-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a05ed2ae299b875d98a3af520e69c886", "sha256": "6c43fdf9134f99447a2006384b462181f3b17c522521a73c13638f9a9ac6ec4e"}, "downloads": -1, "filename": "decorator-args-1.0.tar.gz", "has_sig": false, "md5_digest": "a05ed2ae299b875d98a3af520e69c886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5580, "upload_time": "2016-04-14T00:18:43", "upload_time_iso_8601": "2016-04-14T00:18:43.565011Z", "url": "https://files.pythonhosted.org/packages/83/02/450f9719389aa1285c89c69398bf538f92c78eae58758fee0fdec1d56777/decorator-args-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "42d9027818378caacaef02e26b853a37", "sha256": "5bc1cce935619b7dea4f9c21fd29b9bf047c56e3290d514e2983e3b4a729afdd"}, "downloads": -1, "filename": "decorator_args-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42d9027818378caacaef02e26b853a37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3680, "upload_time": "2016-04-14T12:38:14", "upload_time_iso_8601": "2016-04-14T12:38:14.809093Z", "url": "https://files.pythonhosted.org/packages/c1/c3/268341bbc5621d20ff76b90b31d55da82054841784b2f61a9325ad8294ab/decorator_args-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16337954f9e973614a0bcbcf4916824e", "sha256": "8579eb4e051df06892903a4e8c21e7a6ade053a7ec448674ac827bd59195bf66"}, "downloads": -1, "filename": "decorator-args-1.1.tar.gz", "has_sig": false, "md5_digest": "16337954f9e973614a0bcbcf4916824e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8262, "upload_time": "2016-04-14T12:38:38", "upload_time_iso_8601": "2016-04-14T12:38:38.007574Z", "url": "https://files.pythonhosted.org/packages/ba/c7/29d10ee1553fdab1c07de9e93d2b9da68a3be33f78036b1bc04ab92db744/decorator-args-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42d9027818378caacaef02e26b853a37", "sha256": "5bc1cce935619b7dea4f9c21fd29b9bf047c56e3290d514e2983e3b4a729afdd"}, "downloads": -1, "filename": "decorator_args-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42d9027818378caacaef02e26b853a37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3680, "upload_time": "2016-04-14T12:38:14", "upload_time_iso_8601": "2016-04-14T12:38:14.809093Z", "url": "https://files.pythonhosted.org/packages/c1/c3/268341bbc5621d20ff76b90b31d55da82054841784b2f61a9325ad8294ab/decorator_args-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16337954f9e973614a0bcbcf4916824e", "sha256": "8579eb4e051df06892903a4e8c21e7a6ade053a7ec448674ac827bd59195bf66"}, "downloads": -1, "filename": "decorator-args-1.1.tar.gz", "has_sig": false, "md5_digest": "16337954f9e973614a0bcbcf4916824e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8262, "upload_time": "2016-04-14T12:38:38", "upload_time_iso_8601": "2016-04-14T12:38:38.007574Z", "url": "https://files.pythonhosted.org/packages/ba/c7/29d10ee1553fdab1c07de9e93d2b9da68a3be33f78036b1bc04ab92db744/decorator-args-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:34 2020"}