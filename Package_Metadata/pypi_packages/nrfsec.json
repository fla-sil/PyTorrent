{"info": {"author": "BuildXYZ", "author_email": "buildxyz@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Embedded Systems"], "description": "# nrfsec \n\nnrfsec is security research tool used for unlocking and reading memory on nrf51 series SoCs from Nordic Semiconductor. \n\n  - Read all target memory, bypassing the Memory Protection Unit (MPU) settings with integrated read gadget searching.\n  - Automated unlock feature: read all program and UICR memory, erase all memory, patch UICR image, reflash target into unlocked state.\n  - Boot delay command flag for interacting with target prior to performing memory read, allowing for RAM dumps.\n  - All firmware images are saved for importing into your favorite disassembler.\n\n### Installation\nnrfsec is built on the [pyswd library](https://github.com/cortexm/pyswd/) and currently only works with the [ST-Link](https://www.adafruit.com/product/2548) debugging interface.\n\nnrfsec requires python 3.7+ to run and can be installed with pip:\n\n```sh\npip3 install nrfsec\n```\n\n### Info\nA quick info check will ensure that nrfsec is able to communicate with both the debugger and the target. The output for the info will also specify if the target is currently locked with some additional interesting target information. \n```sh\nnrfsec info\n```\n![Get chip information](https://raw.githubusercontent.com/buildxyz-git/nrfsec/master/images/nrfsec_info.gif)\nSpecifying the verbose flag here with dump the previously mentioned information plus the full contents of both the UICR and FICR. All the information displayed here can be found by interpreting registers contained within the UICR and FICR.\n\n\n### Read\nnrfsec will automatically find a useable read gadget and dump all memory on a locked target. nrfsec will store all the extracted images in /fw of the current working directory. The below example can be used to automatically read all memory regions by parsing memory specifications located in the FICR.\n```sh\nnrfsec read -a\n```\n![Read all memory](https://raw.githubusercontent.com/buildxyz-git/nrfsec/master/images/nrfsec_readall.gif)\n\nRead specified memory regions with an optional delay before beginning memory extraction. Great for interacting with the target though any associated mobile applications in order to populate RAM and intialize peripherals.\n```sh\nnrfsec read -s 0x1000 -e 0x2000 -d 8 -o outfile.bin \n```\n![Read Delay](https://raw.githubusercontent.com/buildxyz-git/nrfsec/master/images/nrfsec_read_delay.gif)\n\n\n### Lock\nIssuing the lock sub-command will the target again. This was useful in developing nrfsec but can also be used if you simply want to lock your target if it is not already locked.\n```sh\nnrfsec lock\n```\n![Lock target](https://raw.githubusercontent.com/buildxyz-git/nrfsec/master/images/nrfsec_locktarget.gif)\n\n\n### Unlock\nThe unlock sub command will perform the following steps:\n1.\tRead all memory regions (most importantly, ROM and UICR) and save the images.\n2.\tPerform a full target erase, this will enable writing to the UICR again\n3.\tPatch the UICR image extracted during step 1 to disable read back protection\n4.\tRe-flash the ROM and patched UICR back to the target\n\n```sh\nnrfsec unlock\n```\n![Unlock target](https://raw.githubusercontent.com/buildxyz-git/nrfsec/master/images/nrfsec_unlock.gif)\n\nDebug sessions are now possible.\n\n\n### Usage\n```sh\n\u2717 nrfsec -h\nusage: nrfsec <command> [<args>]\n\nperform security related tasks on nRF51 targets through SWD interface\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FREQUENCY, --frequency FREQUENCY\n                        frequency to run the SWD interface (default 4 MHz)\n  -v, --verbose         increase output verobsity\n\nsupported subcommands:\n  {info,erase,restore,read,unlock,lock}\n    info                display chip information\n    erase               perform a complete erase\n    restore             restore specific images to an unlocked chip\n    read                read memory contents to outfile\n    unlock              unlock the device if locked\n    lock                lock the device if unlocked\n```\n\n### Todos\n\n - Test on moar targets\n\nLicense\n----\n\nGNU GPLv3", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/buildxyz-git/nrfsec", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nrfsec", "package_url": "https://pypi.org/project/nrfsec/", "platform": "", "project_url": "https://pypi.org/project/nrfsec/", "project_urls": {"Homepage": "https://github.com/buildxyz-git/nrfsec"}, "release_url": "https://pypi.org/project/nrfsec/0.1.8/", "requires_dist": null, "requires_python": ">=3.5", "summary": "An embedded security research tool for unlocking and reading memory from Nordic nRF51 SoCs", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nrfsec</h1>\n<p>nrfsec is security research tool used for unlocking and reading memory on nrf51 series SoCs from Nordic Semiconductor.</p>\n<ul>\n<li>Read all target memory, bypassing the Memory Protection Unit (MPU) settings with integrated read gadget searching.</li>\n<li>Automated unlock feature: read all program and UICR memory, erase all memory, patch UICR image, reflash target into unlocked state.</li>\n<li>Boot delay command flag for interacting with target prior to performing memory read, allowing for RAM dumps.</li>\n<li>All firmware images are saved for importing into your favorite disassembler.</li>\n</ul>\n<h3>Installation</h3>\n<p>nrfsec is built on the <a href=\"https://github.com/cortexm/pyswd/\" rel=\"nofollow\">pyswd library</a> and currently only works with the <a href=\"https://www.adafruit.com/product/2548\" rel=\"nofollow\">ST-Link</a> debugging interface.</p>\n<p>nrfsec requires python 3.7+ to run and can be installed with pip:</p>\n<pre>pip3 install nrfsec\n</pre>\n<h3>Info</h3>\n<p>A quick info check will ensure that nrfsec is able to communicate with both the debugger and the target. The output for the info will also specify if the target is currently locked with some additional interesting target information.</p>\n<pre>nrfsec info\n</pre>\n<p><img alt=\"Get chip information\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3889c25c0592acf1db628af65ed73d59b6a94205/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6275696c6478797a2d6769742f6e72667365632f6d61737465722f696d616765732f6e72667365635f696e666f2e676966\">\nSpecifying the verbose flag here with dump the previously mentioned information plus the full contents of both the UICR and FICR. All the information displayed here can be found by interpreting registers contained within the UICR and FICR.</p>\n<h3>Read</h3>\n<p>nrfsec will automatically find a useable read gadget and dump all memory on a locked target. nrfsec will store all the extracted images in /fw of the current working directory. The below example can be used to automatically read all memory regions by parsing memory specifications located in the FICR.</p>\n<pre>nrfsec <span class=\"nb\">read</span> -a\n</pre>\n<p><img alt=\"Read all memory\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d68cc70bc0467cde6849623cf26b0c7b989b634f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6275696c6478797a2d6769742f6e72667365632f6d61737465722f696d616765732f6e72667365635f72656164616c6c2e676966\"></p>\n<p>Read specified memory regions with an optional delay before beginning memory extraction. Great for interacting with the target though any associated mobile applications in order to populate RAM and intialize peripherals.</p>\n<pre>nrfsec <span class=\"nb\">read</span> -s 0x1000 -e 0x2000 -d <span class=\"m\">8</span> -o outfile.bin \n</pre>\n<p><img alt=\"Read Delay\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b09a2fc59e9cb23cc25ea5af80a4121565a198d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6275696c6478797a2d6769742f6e72667365632f6d61737465722f696d616765732f6e72667365635f726561645f64656c61792e676966\"></p>\n<h3>Lock</h3>\n<p>Issuing the lock sub-command will the target again. This was useful in developing nrfsec but can also be used if you simply want to lock your target if it is not already locked.</p>\n<pre>nrfsec lock\n</pre>\n<p><img alt=\"Lock target\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35546a9cedc2da7099c501d6d2b0bb8b4b251533/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6275696c6478797a2d6769742f6e72667365632f6d61737465722f696d616765732f6e72667365635f6c6f636b7461726765742e676966\"></p>\n<h3>Unlock</h3>\n<p>The unlock sub command will perform the following steps:</p>\n<ol>\n<li>Read all memory regions (most importantly, ROM and UICR) and save the images.</li>\n<li>Perform a full target erase, this will enable writing to the UICR again</li>\n<li>Patch the UICR image extracted during step 1 to disable read back protection</li>\n<li>Re-flash the ROM and patched UICR back to the target</li>\n</ol>\n<pre>nrfsec unlock\n</pre>\n<p><img alt=\"Unlock target\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f54d0365e5c9669351fd55d88f0abf70bd27469e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6275696c6478797a2d6769742f6e72667365632f6d61737465722f696d616765732f6e72667365635f756e6c6f636b2e676966\"></p>\n<p>Debug sessions are now possible.</p>\n<h3>Usage</h3>\n<pre>\u2717 nrfsec -h\nusage: nrfsec &lt;command&gt; <span class=\"o\">[</span>&lt;args&gt;<span class=\"o\">]</span>\n\nperform security related tasks on nRF51 targets through SWD interface\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -f FREQUENCY, --frequency FREQUENCY\n                        frequency to run the SWD interface <span class=\"o\">(</span>default <span class=\"m\">4</span> MHz<span class=\"o\">)</span>\n  -v, --verbose         increase output verobsity\n\nsupported subcommands:\n  <span class=\"o\">{</span>info,erase,restore,read,unlock,lock<span class=\"o\">}</span>\n    info                display chip information\n    erase               perform a <span class=\"nb\">complete</span> erase\n    restore             restore specific images to an unlocked chip\n    <span class=\"nb\">read</span>                <span class=\"nb\">read</span> memory contents to outfile\n    unlock              unlock the device <span class=\"k\">if</span> locked\n    lock                lock the device <span class=\"k\">if</span> unlocked\n</pre>\n<h3>Todos</h3>\n<ul>\n<li>Test on moar targets</li>\n</ul>\n<h2>License</h2>\n<p>GNU GPLv3</p>\n\n          </div>"}, "last_serial": 6750847, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "34b9769008a2f425ac50b4f718747b51", "sha256": "f72a1eabb732bdf083ca9e6bfab775cf01432f4c7b1425b83b1d9971f5ef1839"}, "downloads": -1, "filename": "nrfsec-0.1.tar.gz", "has_sig": false, "md5_digest": "34b9769008a2f425ac50b4f718747b51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7337, "upload_time": "2020-02-27T06:12:30", "upload_time_iso_8601": "2020-02-27T06:12:30.146131Z", "url": "https://files.pythonhosted.org/packages/37/f6/1e6fec3184d77d04bb731bd20fcf20f79c52c32313f42b92cdb801a78b8b/nrfsec-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c6b44dc7e07d99668781259d82216212", "sha256": "d22879fb42f2c808dccc29ab6c34479fdfd2828443670c857c7aa81074f5d763"}, "downloads": -1, "filename": "nrfsec-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c6b44dc7e07d99668781259d82216212", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7352, "upload_time": "2020-02-27T06:25:57", "upload_time_iso_8601": "2020-02-27T06:25:57.123417Z", "url": "https://files.pythonhosted.org/packages/9c/57/d8042c528d045f89d09c17a40fc3556ddfb4a5d1d1fcda35c3f1caf838cf/nrfsec-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c4dbf950dca1080af2a14a522194b49f", "sha256": "497eafaaf928467185eacf4bbd97a703abc19d2441bce2cda7524b1f9d8f2be8"}, "downloads": -1, "filename": "nrfsec-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c4dbf950dca1080af2a14a522194b49f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7342, "upload_time": "2020-02-27T06:29:22", "upload_time_iso_8601": "2020-02-27T06:29:22.004315Z", "url": "https://files.pythonhosted.org/packages/96/75/9407091753895fbddcd92fb74e2ec391be813f6e64302a09d3fd52acb76f/nrfsec-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5c0b1f335caa08177809c0e4539f1d68", "sha256": "bcceb5c7586d89b023bc55fbcc90bc9a5f09d9b94f94df88c6f9b5f806ea2821"}, "downloads": -1, "filename": "nrfsec-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "5c0b1f335caa08177809c0e4539f1d68", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.5", "size": 23916, "upload_time": "2020-02-28T19:57:08", "upload_time_iso_8601": "2020-02-28T19:57:08.010658Z", "url": "https://files.pythonhosted.org/packages/ea/82/e6bbc9ede5c9044f41e08e87f4e61854f658885d1ef9c3a3bb62c169779c/nrfsec-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66e56813ec1ad9edac46cecfd222e8ee", "sha256": "5dd495e7ba84cd809b2252f0368e263d40b3ba95c46793c64601f16c2c483e0b"}, "downloads": -1, "filename": "nrfsec-0.1.3.tar.gz", "has_sig": false, "md5_digest": "66e56813ec1ad9edac46cecfd222e8ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9691, "upload_time": "2020-02-28T19:57:09", "upload_time_iso_8601": "2020-02-28T19:57:09.247496Z", "url": "https://files.pythonhosted.org/packages/50/8c/fbf35fd05c4689528fc148159457751ff0762cb739e6013d2e7eda17aa00/nrfsec-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "68470a939e642251f9d75d1296dd31d0", "sha256": "d4351919b8ae6988bcd9aa9bd952b88fb50903dce9620070bb5ffcb74f5ae27f"}, "downloads": -1, "filename": "nrfsec-0.1.4.tar.gz", "has_sig": false, "md5_digest": "68470a939e642251f9d75d1296dd31d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9738, "upload_time": "2020-02-28T20:56:05", "upload_time_iso_8601": "2020-02-28T20:56:05.796578Z", "url": "https://files.pythonhosted.org/packages/c0/72/2573bcc84206a23731baf665f575c67601b34635d21a5ec812b25941c527/nrfsec-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f37c8e5bddc9e940d0904f7cbb2bbe31", "sha256": "431655c7ee70474d06120f5a30be8bc1e343889b194fcf7b3d0510ec159c575d"}, "downloads": -1, "filename": "nrfsec-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f37c8e5bddc9e940d0904f7cbb2bbe31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10606, "upload_time": "2020-02-28T22:04:03", "upload_time_iso_8601": "2020-02-28T22:04:03.562452Z", "url": "https://files.pythonhosted.org/packages/22/83/a9fd2ca16e0bd63bf877d8788a76cb899d1e09adfb322726117c998abe31/nrfsec-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "543d1e23d2e42ce88800ba95f21aa889", "sha256": "3283c013629553b9021a9b7a4335e023ec69019062036969d8761cf4000cb90a"}, "downloads": -1, "filename": "nrfsec-0.1.6.tar.gz", "has_sig": false, "md5_digest": "543d1e23d2e42ce88800ba95f21aa889", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10460, "upload_time": "2020-02-28T22:50:31", "upload_time_iso_8601": "2020-02-28T22:50:31.902209Z", "url": "https://files.pythonhosted.org/packages/6d/ea/ecf73972b11dd45d45423047556415095657c1c739c8e6bfb099cd5091a3/nrfsec-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "49400f29474d5375e283793181d94652", "sha256": "0a47ee19c1aceba79899024a9412e16901c104413642ab8b76440baf3c311727"}, "downloads": -1, "filename": "nrfsec-0.1.7.tar.gz", "has_sig": false, "md5_digest": "49400f29474d5375e283793181d94652", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11137, "upload_time": "2020-02-29T04:03:59", "upload_time_iso_8601": "2020-02-29T04:03:59.711127Z", "url": "https://files.pythonhosted.org/packages/c9/70/b2082e3f23bc05a15361f1292d7fc8927c80db6a4cc86223122243cd0bf1/nrfsec-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "1ed76fa4e7bb49a79e0476d8b3dbf1cc", "sha256": "8c42ff7e418890a728bc2ac486077f906654a9a2c46eec2c1dd54fb49b97b2e0"}, "downloads": -1, "filename": "nrfsec-0.1.8.tar.gz", "has_sig": false, "md5_digest": "1ed76fa4e7bb49a79e0476d8b3dbf1cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11449, "upload_time": "2020-03-04T22:01:20", "upload_time_iso_8601": "2020-03-04T22:01:20.459001Z", "url": "https://files.pythonhosted.org/packages/06/1e/d2c16f610e13b06f10edb8b4f7516e74504665e352c308db1c223d3cf365/nrfsec-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ed76fa4e7bb49a79e0476d8b3dbf1cc", "sha256": "8c42ff7e418890a728bc2ac486077f906654a9a2c46eec2c1dd54fb49b97b2e0"}, "downloads": -1, "filename": "nrfsec-0.1.8.tar.gz", "has_sig": false, "md5_digest": "1ed76fa4e7bb49a79e0476d8b3dbf1cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11449, "upload_time": "2020-03-04T22:01:20", "upload_time_iso_8601": "2020-03-04T22:01:20.459001Z", "url": "https://files.pythonhosted.org/packages/06/1e/d2c16f610e13b06f10edb8b4f7516e74504665e352c308db1c223d3cf365/nrfsec-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:27 2020"}