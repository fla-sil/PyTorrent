{"info": {"author": "Carl Montanari", "author_email": "carl.r.montanari@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "![](https://github.com/scrapli/scrapli_netconf/workflows/Weekly%20Build/badge.svg)\n[![PyPI version](https://badge.fury.io/py/scrapli_netconf.svg)](https://badge.fury.io/py/scrapli_netconf)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n[![Python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)](https://www.python.org/downloads/release/python-380/)\n[![Code Style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n\nscrapli_netconf\n===============\n\nscrapli_netconf is a netconf driver built on top of [scrapli](https://github.com/carlmontanari/scrapli). The purpose\n of scrapli_netconf is to provide a fast, flexible, thoroughly tested (*coming soon TM), well typed, well documented\n , simple API. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and\n  feel when automating devices over telnet, SSH, or netconf (over SSH). \n\n*NOTE* This is still very much in beta, use with caution!\n\n\n# Table of Contents\n\n- [Quick Start Guide](#quick-start-guide)\n  - [Installation](#installation)\n  - [A Simple Example](#a-simple-example)\n  - [More Examples](#more-examples)\n\n\n# Quick Start Guide\n\n## Installation\n\nIn most cases installation via pip is the simplest and best way to install scrapli_netconf.\nSee below or [here](#advanced-installation) for advanced installation details.\n\n```\npip install scrapli-netconf\n```\n\n## A Simple Example\n\n```python\nfrom scrapli_netconf.driver import NetconfScrape\n\nmy_device = {\n    \"host\": \"172.18.0.13\",\n    \"auth_username\": \"vrnetlab\",\n    \"auth_password\": \"VR-netlab9\",\n    \"auth_strict_key\": False,\n    \"port\": 830\n}\n\nconn = NetconfScrape(**my_device)\nconn.open()\nresponse = conn.get_config(source=\"running\")\nprint(response.result)\n```\n\n```\n$ python my_scrapli_script.py\n<rpc-reply message-id=\"101\">\n <data>\n  <ssh>\n   <server>\n    <v2/>\n    <netconf>830</netconf>\n    <netconf-vrf-table>\n     <vrf>\n      <vrf-name>default</vrf-name>\n      <enable/>\n     </vrf>\n    </netconf-vrf-table>\n   </server>\n  </ssh>\n  <interface-configurations>\n   <interface-configuration>\n    <active>act</active>\n    <interface-name>MgmtEth0/RP0/CPU0/0</interface-name>\n<SNIP>\n </data>\n</rpc-reply>\n```\n\n## More Examples\n\n- [Basic Operations IOS-XR](/examples/basic_usage/basic_usage_iosxr.py)\n- [Basic Operations Junos](/examples/basic_usage/basic_usage_junos.py)\n\n\n# scrapli_netconf: What is it\n\nscrapli_netconf is a library to help send or receive netconf messages to devices, specifically routers (though could\n be anything speaking netconf in theory). \n\nNetconf is an IETF network management protocol that uses XML for message encoding, and SSH (or TLS, which is not\n supported by scrapli_netconf) for transport of messages. scrapli_netconf is simply an extension of the scrapli\n  \"screen scraping\" library that adds proper message creation, framing, and validation to allow for scrapli to be\n   used as a netconf client.\n\nscrapli_netconf adds a new driver (`NetconfScrape`), a new transport (`NetconfTransport`), and a new channel\n (`NetconfChannel`) all of which inherit from, and build on, the core scrapli components. scrapli_netconf also\n  includes an extension of the `Response` object -- aptly named `NetconfResponse` that adds netconf-specific data to\n   the existing object.\n\nA great question to ask right now is: \"why\"! The primary driver is to get `ncclient` like functionality without\n needing `paramiko` for the transport so that we can take full advantage of \"normal\" OpenSSH options, as well as have\n  fewer dependencies. Additionally, as scrapli_netconf is just an extension of scrapli, this means that automation of\n   devices over telnet, SSH, and netconf (over SSH) can be done all with an extremely consistent look and feel\n   . Realistically this should cover most modes of present day network automation other than HTTP based APIs (which\n    would likely have a pretty different look and feel anyway).\n\n\n# Documentation\n\nDocumentation is auto-generated [using pdoc3](https://github.com/pdoc3/pdoc). Documentation is linted (see Linting and\n Testing section) via [pydocstyle](https://github.com/PyCQA/pydocstyle/) and\n [darglint](https://github.com/terrencepreilly/darglint).\n\nDocumentation is hosted via GitHub Pages and can be found\n[here](https://scrapli.github.io/scrapli/docs/scrapli/index.html). You can also view this readme as a web page\n [here](https://scrapli.github.io/scrapli/).\n\nTo regenerate documentation locally, use the following make command:\n\n```\nmake docs\n```\n\n\n# Supported Platforms\n\nAt this time scrapli_netconf is a base implementation of very basic netconf 1.0 and netconf 1.1. It *should* work on\n anything that runs those versions of netconf, but has only been tested against the following platforms/versions:\n\n- Cisco IOS-XR (tested on: 6.5.3)\n- Juniper JunOS (tested on: 17.3R2.10)\n\n\n# Advanced Installation\n\nAs outlined in the quick start, you should be able to pip install scrapli_netconf \"normally\":\n\n```\npip install scrapli\n```\n\nTo install from this repositories master branch:\n\n```\npip install git+https://github.com/scrapli/scrapli_netconf\n```\n\nTo install from this repositories develop branch:\n\n```\npip install -e git+https://github.com/scrapli/scrapli_netconf.git@develop#egg=scrapli_netconf\n```\n\nTo install from source:\n\n```\ngit clone https://github.com/scrapli/scrapli_netconf\ncd scrapli_netconf\npython setup.py install\n```\n\nscrapli_netconf has made an effort to have as few dependencies as possible -- at this time only requiring scrapli (of\n course) and lxml.\n\nAs for platforms to *run* scrapli_netconf on -- it has and will be tested on MacOS and Ubuntu regularly and should\n work on any POSIX system. At this time scrapli_netconf will not run on Windows as it requires the `system` transport\n  flavor of scrapli which is not supported on Windows. If you are on Windows and wish to try out scrapli_netconf you can\n   fire up WSL, or this likely works in Cygwin as well.\n\n\n# Basic Usage\n\n## Basic Driver Arguments\n\nThe drivers of course need some information about the device you are trying to connect to. The most common arguments\n to provide to the driver are outlined below:\n\n| Argument         | Purpose/Value                                               |\n|------------------|-------------------------------------------------------------|\n| host             | name/ip of host to connect to                               |\n| port             | port of host to connect to (defaults to port 830)           |\n| auth_username    | username for authentication                                 |\n| auth_password    | password for authentication                                 |\n| auth_secondary   | password for secondary authentication (enable password)     |\n| auth_private_key | private key for authentication                              |\n| auth_strict_key  | strict key checking -- TRUE by default!                     |\n| ssh_config_file  | True/False or path to ssh config file to use                |\n| strip_namespaces | True/False strip namespaces from returned XML (default True)|\n\nThese arguments may be passed as keyword arguments to the driver of your choice, or, commonly are passed via\n dictionary unpacking as show below:\n\n```python\nfrom scrapli_netconf.driver import NetconfScrape\n\nmy_device = {\n    \"host\": \"172.18.0.11\",\n    \"auth_username\": \"vrnetlab\",\n    \"auth_password\": \"VR-netlab9\",\n    \"auth_strict_key\": False,\n}\n\nconn = NetconfScrape(**my_device)\nconn.open()\n```\n\n*NOTE* that scrapli enables strict host key checking by default!\n\n\n## Opening and Closing a Connection\n\nscrapli_netconf does *not* open the connection for you when creating your scrapli connection object in normal operations\n, you must manually call the `open` method prior to sending any commands to the device as shown below.\n\n ```python\nfrom scrapli_netconf.driver import NetconfScrape\n\nmy_device = {\n    \"host\": \"172.18.0.11\",\n    \"auth_username\": \"vrnetlab\",\n    \"auth_password\": \"VR-netlab9\",\n    \"auth_strict_key\": False,\n}\n\nconn = NetconfScrape(**my_device)\nconn.open()\nresponse = conn.get_config(source=\"running\")\n```\n\nConnections can be closed by calling the `close` method:\n\n```python\nconn.close()\n```\n\nTODO - add context manager!\n\n\n# FAQ\n\nTODO\n\n\n# Linting and Testing\n\nPlease see [scrapli Linting and Testing](https://github.com/carlmontanari/scrapli/blob/master/README.md#linting-and-testing)\n for details.\n\n\n# Todo and Roadmap\n\n## Todo\n\n- TESTS!!!\n- Context manager\n- Drivers? Junos/XR need their own driver maybe?\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scrapli/scrapli_netconf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scrapli-netconf", "package_url": "https://pypi.org/project/scrapli-netconf/", "platform": "", "project_url": "https://pypi.org/project/scrapli-netconf/", "project_urls": {"Homepage": "https://github.com/scrapli/scrapli_netconf"}, "release_url": "https://pypi.org/project/scrapli-netconf/2020.4.19/", "requires_dist": ["scrapli (>=2020.03.21)", "lxml (>=4.5.0)"], "requires_python": ">=3.6", "summary": "Netconf driver built on scrapli", "version": "2020.4.19", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/880f5e0c6de3e7a270e0a080d37f18a75a23a53d/68747470733a2f2f6769746875622e636f6d2f73637261706c692f73637261706c695f6e6574636f6e662f776f726b666c6f77732f5765656b6c792532304275696c642f62616467652e737667\">\n<a href=\"https://badge.fury.io/py/scrapli_netconf\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c31e853eb8687b04b9cad275ab05a6618d9d2dd6/68747470733a2f2f62616467652e667572792e696f2f70792f73637261706c695f6e6574636f6e662e737667\"></a>\n<a href=\"https://www.python.org/downloads/release/python-360/\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a>\n<a href=\"https://www.python.org/downloads/release/python-370/\" rel=\"nofollow\"><img alt=\"Python 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99a5180f32db379110e9948c7de1aaf8f77bf2e8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372d626c75652e737667\"></a>\n<a href=\"https://www.python.org/downloads/release/python-380/\" rel=\"nofollow\"><img alt=\"Python 3.8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f8a5f68d8d76185564998e2d4814ac79bc72a7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e382d626c75652e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>scrapli_netconf</h1>\n<p>scrapli_netconf is a netconf driver built on top of <a href=\"https://github.com/carlmontanari/scrapli\" rel=\"nofollow\">scrapli</a>. The purpose\nof scrapli_netconf is to provide a fast, flexible, thoroughly tested (*coming soon TM), well typed, well documented\n, simple API. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and\nfeel when automating devices over telnet, SSH, or netconf (over SSH).</p>\n<p><em>NOTE</em> This is still very much in beta, use with caution!</p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#quick-start-guide\" rel=\"nofollow\">Quick Start Guide</a>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#a-simple-example\" rel=\"nofollow\">A Simple Example</a></li>\n<li><a href=\"#more-examples\" rel=\"nofollow\">More Examples</a></li>\n</ul>\n</li>\n</ul>\n<h1>Quick Start Guide</h1>\n<h2>Installation</h2>\n<p>In most cases installation via pip is the simplest and best way to install scrapli_netconf.\nSee below or <a href=\"#advanced-installation\" rel=\"nofollow\">here</a> for advanced installation details.</p>\n<pre><code>pip install scrapli-netconf\n</code></pre>\n<h2>A Simple Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scrapli_netconf.driver</span> <span class=\"kn\">import</span> <span class=\"n\">NetconfScrape</span>\n\n<span class=\"n\">my_device</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"172.18.0.13\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vrnetlab\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VR-netlab9\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_strict_key\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">830</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">NetconfScrape</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">my_device</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"running\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre><code>$ python my_scrapli_script.py\n&lt;rpc-reply message-id=\"101\"&gt;\n &lt;data&gt;\n  &lt;ssh&gt;\n   &lt;server&gt;\n    &lt;v2/&gt;\n    &lt;netconf&gt;830&lt;/netconf&gt;\n    &lt;netconf-vrf-table&gt;\n     &lt;vrf&gt;\n      &lt;vrf-name&gt;default&lt;/vrf-name&gt;\n      &lt;enable/&gt;\n     &lt;/vrf&gt;\n    &lt;/netconf-vrf-table&gt;\n   &lt;/server&gt;\n  &lt;/ssh&gt;\n  &lt;interface-configurations&gt;\n   &lt;interface-configuration&gt;\n    &lt;active&gt;act&lt;/active&gt;\n    &lt;interface-name&gt;MgmtEth0/RP0/CPU0/0&lt;/interface-name&gt;\n&lt;SNIP&gt;\n &lt;/data&gt;\n&lt;/rpc-reply&gt;\n</code></pre>\n<h2>More Examples</h2>\n<ul>\n<li><a href=\"/examples/basic_usage/basic_usage_iosxr.py\" rel=\"nofollow\">Basic Operations IOS-XR</a></li>\n<li><a href=\"/examples/basic_usage/basic_usage_junos.py\" rel=\"nofollow\">Basic Operations Junos</a></li>\n</ul>\n<h1>scrapli_netconf: What is it</h1>\n<p>scrapli_netconf is a library to help send or receive netconf messages to devices, specifically routers (though could\nbe anything speaking netconf in theory).</p>\n<p>Netconf is an IETF network management protocol that uses XML for message encoding, and SSH (or TLS, which is not\nsupported by scrapli_netconf) for transport of messages. scrapli_netconf is simply an extension of the scrapli\n\"screen scraping\" library that adds proper message creation, framing, and validation to allow for scrapli to be\nused as a netconf client.</p>\n<p>scrapli_netconf adds a new driver (<code>NetconfScrape</code>), a new transport (<code>NetconfTransport</code>), and a new channel\n(<code>NetconfChannel</code>) all of which inherit from, and build on, the core scrapli components. scrapli_netconf also\nincludes an extension of the <code>Response</code> object -- aptly named <code>NetconfResponse</code> that adds netconf-specific data to\nthe existing object.</p>\n<p>A great question to ask right now is: \"why\"! The primary driver is to get <code>ncclient</code> like functionality without\nneeding <code>paramiko</code> for the transport so that we can take full advantage of \"normal\" OpenSSH options, as well as have\nfewer dependencies. Additionally, as scrapli_netconf is just an extension of scrapli, this means that automation of\ndevices over telnet, SSH, and netconf (over SSH) can be done all with an extremely consistent look and feel\n. Realistically this should cover most modes of present day network automation other than HTTP based APIs (which\nwould likely have a pretty different look and feel anyway).</p>\n<h1>Documentation</h1>\n<p>Documentation is auto-generated <a href=\"https://github.com/pdoc3/pdoc\" rel=\"nofollow\">using pdoc3</a>. Documentation is linted (see Linting and\nTesting section) via <a href=\"https://github.com/PyCQA/pydocstyle/\" rel=\"nofollow\">pydocstyle</a> and\n<a href=\"https://github.com/terrencepreilly/darglint\" rel=\"nofollow\">darglint</a>.</p>\n<p>Documentation is hosted via GitHub Pages and can be found\n<a href=\"https://scrapli.github.io/scrapli/docs/scrapli/index.html\" rel=\"nofollow\">here</a>. You can also view this readme as a web page\n<a href=\"https://scrapli.github.io/scrapli/\" rel=\"nofollow\">here</a>.</p>\n<p>To regenerate documentation locally, use the following make command:</p>\n<pre><code>make docs\n</code></pre>\n<h1>Supported Platforms</h1>\n<p>At this time scrapli_netconf is a base implementation of very basic netconf 1.0 and netconf 1.1. It <em>should</em> work on\nanything that runs those versions of netconf, but has only been tested against the following platforms/versions:</p>\n<ul>\n<li>Cisco IOS-XR (tested on: 6.5.3)</li>\n<li>Juniper JunOS (tested on: 17.3R2.10)</li>\n</ul>\n<h1>Advanced Installation</h1>\n<p>As outlined in the quick start, you should be able to pip install scrapli_netconf \"normally\":</p>\n<pre><code>pip install scrapli\n</code></pre>\n<p>To install from this repositories master branch:</p>\n<pre><code>pip install git+https://github.com/scrapli/scrapli_netconf\n</code></pre>\n<p>To install from this repositories develop branch:</p>\n<pre><code>pip install -e git+https://github.com/scrapli/scrapli_netconf.git@develop#egg=scrapli_netconf\n</code></pre>\n<p>To install from source:</p>\n<pre><code>git clone https://github.com/scrapli/scrapli_netconf\ncd scrapli_netconf\npython setup.py install\n</code></pre>\n<p>scrapli_netconf has made an effort to have as few dependencies as possible -- at this time only requiring scrapli (of\ncourse) and lxml.</p>\n<p>As for platforms to <em>run</em> scrapli_netconf on -- it has and will be tested on MacOS and Ubuntu regularly and should\nwork on any POSIX system. At this time scrapli_netconf will not run on Windows as it requires the <code>system</code> transport\nflavor of scrapli which is not supported on Windows. If you are on Windows and wish to try out scrapli_netconf you can\nfire up WSL, or this likely works in Cygwin as well.</p>\n<h1>Basic Usage</h1>\n<h2>Basic Driver Arguments</h2>\n<p>The drivers of course need some information about the device you are trying to connect to. The most common arguments\nto provide to the driver are outlined below:</p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Purpose/Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>host</td>\n<td>name/ip of host to connect to</td>\n</tr>\n<tr>\n<td>port</td>\n<td>port of host to connect to (defaults to port 830)</td>\n</tr>\n<tr>\n<td>auth_username</td>\n<td>username for authentication</td>\n</tr>\n<tr>\n<td>auth_password</td>\n<td>password for authentication</td>\n</tr>\n<tr>\n<td>auth_secondary</td>\n<td>password for secondary authentication (enable password)</td>\n</tr>\n<tr>\n<td>auth_private_key</td>\n<td>private key for authentication</td>\n</tr>\n<tr>\n<td>auth_strict_key</td>\n<td>strict key checking -- TRUE by default!</td>\n</tr>\n<tr>\n<td>ssh_config_file</td>\n<td>True/False or path to ssh config file to use</td>\n</tr>\n<tr>\n<td>strip_namespaces</td>\n<td>True/False strip namespaces from returned XML (default True)</td>\n</tr></tbody></table>\n<p>These arguments may be passed as keyword arguments to the driver of your choice, or, commonly are passed via\ndictionary unpacking as show below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scrapli_netconf.driver</span> <span class=\"kn\">import</span> <span class=\"n\">NetconfScrape</span>\n\n<span class=\"n\">my_device</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"172.18.0.11\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vrnetlab\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VR-netlab9\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"auth_strict_key\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">NetconfScrape</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">my_device</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n</pre>\n<p><em>NOTE</em> that scrapli enables strict host key checking by default!</p>\n<h2>Opening and Closing a Connection</h2>\n<p>scrapli_netconf does <em>not</em> open the connection for you when creating your scrapli connection object in normal operations\n, you must manually call the <code>open</code> method prior to sending any commands to the device as shown below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scrapli_netconf.driver</span> <span class=\"kn\">import</span> <span class=\"n\">NetconfScrape</span>\n\n<span class=\"n\">my_device</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"172.18.0.11\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"auth_username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vrnetlab\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"auth_password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VR-netlab9\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"auth_strict_key\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">NetconfScrape</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">my_device</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">\"running\"</span><span class=\"p\">)</span>\n</pre>\n<p>Connections can be closed by calling the <code>close</code> method:</p>\n<pre><span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>TODO - add context manager!</p>\n<h1>FAQ</h1>\n<p>TODO</p>\n<h1>Linting and Testing</h1>\n<p>Please see <a href=\"https://github.com/carlmontanari/scrapli/blob/master/README.md#linting-and-testing\" rel=\"nofollow\">scrapli Linting and Testing</a>\nfor details.</p>\n<h1>Todo and Roadmap</h1>\n<h2>Todo</h2>\n<ul>\n<li>TESTS!!!</li>\n<li>Context manager</li>\n<li>Drivers? Junos/XR need their own driver maybe?</li>\n</ul>\n\n          </div>"}, "last_serial": 7056406, "releases": {"2020.4.19": [{"comment_text": "", "digests": {"md5": "e0e3dbf1f4dbdbb6c8952e0f6f0bef80", "sha256": "64a1ca9e4c8a840adadbfa04fa001da20ca42959fe8af70d4709720a6a6a9699"}, "downloads": -1, "filename": "scrapli_netconf-2020.4.19-py3-none-any.whl", "has_sig": false, "md5_digest": "e0e3dbf1f4dbdbb6c8952e0f6f0bef80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18322, "upload_time": "2020-04-19T23:13:50", "upload_time_iso_8601": "2020-04-19T23:13:50.070933Z", "url": "https://files.pythonhosted.org/packages/4f/e3/a9f904eade18be44f04543aa031701834ffe73adeb80e874adfd5fea6fda/scrapli_netconf-2020.4.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad24556eca40663700d8e27cc1e6745", "sha256": "1386ad6bfbcecd45fd4fc7737500a9a9f4776f87d663c21907980708fc787672"}, "downloads": -1, "filename": "scrapli_netconf-2020.4.19.tar.gz", "has_sig": false, "md5_digest": "bad24556eca40663700d8e27cc1e6745", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17726, "upload_time": "2020-04-19T23:13:52", "upload_time_iso_8601": "2020-04-19T23:13:52.170346Z", "url": "https://files.pythonhosted.org/packages/a3/f8/394e2e8fea9af5a8b436e76ebcefdc6b700bfce16ee48b1bd52ea0a3ee79/scrapli_netconf-2020.4.19.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0e3dbf1f4dbdbb6c8952e0f6f0bef80", "sha256": "64a1ca9e4c8a840adadbfa04fa001da20ca42959fe8af70d4709720a6a6a9699"}, "downloads": -1, "filename": "scrapli_netconf-2020.4.19-py3-none-any.whl", "has_sig": false, "md5_digest": "e0e3dbf1f4dbdbb6c8952e0f6f0bef80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18322, "upload_time": "2020-04-19T23:13:50", "upload_time_iso_8601": "2020-04-19T23:13:50.070933Z", "url": "https://files.pythonhosted.org/packages/4f/e3/a9f904eade18be44f04543aa031701834ffe73adeb80e874adfd5fea6fda/scrapli_netconf-2020.4.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad24556eca40663700d8e27cc1e6745", "sha256": "1386ad6bfbcecd45fd4fc7737500a9a9f4776f87d663c21907980708fc787672"}, "downloads": -1, "filename": "scrapli_netconf-2020.4.19.tar.gz", "has_sig": false, "md5_digest": "bad24556eca40663700d8e27cc1e6745", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17726, "upload_time": "2020-04-19T23:13:52", "upload_time_iso_8601": "2020-04-19T23:13:52.170346Z", "url": "https://files.pythonhosted.org/packages/a3/f8/394e2e8fea9af5a8b436e76ebcefdc6b700bfce16ee48b1bd52ea0a3ee79/scrapli_netconf-2020.4.19.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:51 2020"}