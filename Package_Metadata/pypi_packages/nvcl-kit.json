{"info": {"author": "Vincent Fazio", "author_email": "vincent.fazio@csiro.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# nvcl_kit: A simple module used to read Australian NVCL borehole data\n\n[![pipeline status](https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/badges/master/pipeline.svg)](https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/commits/master)\n[![coverage report](https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/badges/master/coverage.svg)](https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/commits/master)\n\n\n#### Brief Introduction: How to extract NVCL borehole data\n\n*NB: There is also a rough demonstration script: 'demo.py'*\n\n**1. Instantiate class**\n\n```python\nfrom nvcl_kit.reader import NVCLReader \nfrom types import SimpleNamespace\nparam = SimpleNamespace()\n\n# URL of the GeoSciML v4.1 BoreHoleView Web Feature Service\nparam.WFS_URL = \"http://blah.blah.blah/nvcl/geoserver/wfs\"\n\n# URL of NVCL service\nparam.NVCL_URL = \"https://blah.blah.blah/nvcl/NVCLDataServices\"\n\n# Optional bounding box to search for boreholes using WFS, default units are EPSG:4326 degrees\nparam.BBOX = {\"west\": 132.76, \"south\": -28.44, \"east\": 134.39, \"north\": -26.87 }\n\n# Optional maximum number of boreholes to fetch, default is no limit\nparam.MAX_BOREHOLES = 20\n\n# Instantiate class and search for boreholes\nreader = NVCLReader(param)\n```\n\n**2. Check if 'wfs' is not 'None' to see if this instance initialised properly**\n\n```python\nif not reader.wfs:\n    print(\"ERROR!\")\n```\n\n**3. Call get_boreholes_list() to get list of WFS borehole data for NVCL boreholes**\n\n```python\n# Returns a list of python dictionaries\n# Each dict has fields from GeoSciML v4.1 BoreholeView\nbh_list = reader.get_boreholes_list()\n```\n\n**4. Call get_nvcl_id_list() to get a list of NVCL borehole ids**\n\n```python\nnvcl_id_list = reader.get_nvcl_id_list()\n```\n\n**5. Using an NVCL borehole id from previous step, call get_imagelog_data()\n     to get the NVCL log ids**\n\n```python\n# Get list of NVCL log ids\nnvcl_id_list = reader.get_nvcl_id_list()\n\n# Get NVCL log id for first borehole in list\nnvcl_id = nvcl_id_list[0]\n\n# Get image log data for first borehole\nimagelog_data_list = reader.get_imagelog_data(nvcl_id)\nfor ild in imagelog_data_list:\n    print(ild.log_id,\n          ild.log_name,\n          ild.log_type,\n          ild.algorithmout_id)\n```\n\n**6. Using image log data, call get_borehole_data() to get borehole data**\n\n```python\n# Analysis class has 2 parts:\n# 1. Min1,2,3 = 1st, 2nd, 3rd most common mineral\n#    OR Grp1,2,3 = 1st, 2nd, 3rd most common group of minerals\n# 2. uTSAV = visible light, uTSAS = shortwave IR, uTSAT = thermal IR\n#\n# These combine to give us a class name such as 'Grp1 uTSAS'\n#\n# Here we extract data for log type '1' and 'Grp1 uTSAS'\nHEIGHT_RESOLUTION = 20.0\nANALYSIS_CLASS = 'Grp1 uTSAS'\nLOG_TYPE = '1'\nfor ild in imagelog_data_list:\n    if ild.log_type == LOG_TYPE and ild.log_name == ANALYSIS_CLASS:\n        bh_data = reader.get_borehole_data(ild.log_id, HEIGHT_RESOLUTION, ANALYSIS_CLASS)\n        # Print out the colour, mineral and class name at each depth\n        for depth in bh_data:\n            print(\"At \", depth, \"my class, mineral, colour is\", bh_data[depth].className,\n                  bh_data[depth].classText, bh_data[depth].colour)\n```\n\n**7. Using the NVCL ids from Step 5, you can also call get_spectrallog_data() and get_profilometer_data()**\n\n```python\nspectrallog_data_list = reader.get_spectrallog_data(nvcl_id)\nfor sld in spectrallog_data_list:\n    print(sld.log_id,\n          sld.log_name,\n          sld.wavelength_units,\n          sld.sample_count,\n          sld.script,\n          sld.script_raw,\n          sld.wavelengths)\n\nprofilometer_data_list = reader.get_profilometer_data(nvcl_id)\nfor pdl in profilometer_data_list:\n    print(pdl.log_id,\n          pdl.log_name,\n          pdl.max_val,\n          pdl.min_val,\n          pdl.floats_per_sample,\n          pdl.sample_count)\n```\n\n**8. Option: get a list of dataset ids**\n\n```python\ndatasetid_list = reader.get_datasetid_list(nvcl_id)\n```\n\n**9. Option: Get a list of datasets**\n\n```python\ndataset_list = reader.get_dataset_list(nvcl_id)\nfor ds in dataset_list:\n    print(ds.dataset_id,\n          ds.dataset_name,\n          ds.borehole_uri,\n          ds.tray_id,\n          ds.section_id,\n          ds.domain_id)\n```\n\n\n**10. Using an element from 'datasetid_list' in Step 8 or 'ds.dataset_id' from Step 9, can retrieve log data**\n\n``` python\n# Scalar log data\nlog_list = reader.get_scalar_logs(ds.dataset_id)\nfor log in log_list:\n    print(log.log_id,\n          log.log_name,\n          log.is_public,\n          log.log_type,\n          log.algorithm_id)\n```\n\n\n``` python\n# Different types of image log data\nilog_list = reader.get_all_imglogs(ds.dataset_id)\nilog_list = reader.get_mosaic_imglogs(ds.dataset_id)\nilog_list = reader.get_tray_thumb_imglogs(ds.dataset_id)\nilog_list = reader.get_tray_imglogs(ds.dataset_id)\nilog_list = reader.get_imagery_imglogs(ds.dataset_id)\n\nfor ilog in ilog_list:\n    print(ilog.log_id,\n          ilog.log_name,\n          ilog.sample_count)\n```\n\n\n**11. Using the scalar log ids, can get scalar data and plots of scalar data**\n\n```python\n# Scalar data in CSV format\nlog_id_list = [l.log_id for l in log_list]\ndata = reader.get_scalar_data(log_id_list)\n\n# Sampled scalar data in JSON (or CSV) format\nsamples = reader.get_sampled_scalar_data(log.log_id,\n                                         outputformat='json',\n                                         startdepth=0,\n                                         enddepth=2000,\n                                         interval=100)\n\n# A data plot in PNG\nplot_data = reader.plot_scalar_png(log_id)\n\n# Data plots in HTML, only plots the first 6 log ids\nplot_data = reader.plot_scalars_html(log_id_list)\n\n```\n\n\n**12. Using the image log ids can produce images of NVCL cores**\n\n```python\nilog_list = reader.get_mosaic_imglogs(ds.dataset_id)\nfor ilog in ilog_list:\n    img = reader.get_mosaic_image(ilog.log_id)\n\nilog_list = reader.get_tray_thumb_imglogs(ds.dataset_id)\nfor ilog in ilog_list:\n    # Either HTML or JPG\n    img = reader.get_tray_thumb_html(ds.dataset_id, ilog.log_id)\n    img = reader.get_tray_thumb_jpg(ilog.log_id)\n\n# Use either 'get_tray_thumb_imglogs()' or 'get_tray_imglogs()'\nilog_list = reader.get_tray_thumb_imglogs(ds.dataset_id)\nilog_list = reader.get_tray_imglogs(ds.dataset_id)\nfor ilog in ilog_list:\n    depth_list = reader.get_tray_depths(ilog.log_id)\n    for depth in depth_list:\n        print(depth.sample_no,\n              depth.start_value,\n              depth.end_value)\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit", "keywords": "", "license": "CSIRO BSD/MIT", "maintainer": "", "maintainer_email": "", "name": "nvcl-kit", "package_url": "https://pypi.org/project/nvcl-kit/", "platform": "", "project_url": "https://pypi.org/project/nvcl-kit/", "project_urls": {"Homepage": "https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit"}, "release_url": "https://pypi.org/project/nvcl-kit/0.1.22/", "requires_dist": ["OWSLib"], "requires_python": ">=3.5", "summary": "Downloads Australian NVCL datasets", "version": "0.1.22", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nvcl_kit: A simple module used to read Australian NVCL borehole data</h1>\n<p><a href=\"https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b45ba19cd2bf9fc29be8e9121b56aa3c91c6f230/68747470733a2f2f6769746c61622e636f6d2f637369726f2d67656f616e616c79746963732f707974686f6e2d7368617265642f6e76636c5f6b69742f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/csiro-geoanalytics/python-shared/nvcl_kit/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac84de68b11a9c172cad9580e8aa77b9bd78d04e/68747470733a2f2f6769746c61622e636f6d2f637369726f2d67656f616e616c79746963732f707974686f6e2d7368617265642f6e76636c5f6b69742f6261646765732f6d61737465722f636f7665726167652e737667\"></a></p>\n<h4>Brief Introduction: How to extract NVCL borehole data</h4>\n<p><em>NB: There is also a rough demonstration script: 'demo.py'</em></p>\n<p><strong>1. Instantiate class</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nvcl_kit.reader</span> <span class=\"kn\">import</span> <span class=\"n\">NVCLReader</span> \n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleNamespace</span>\n<span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">SimpleNamespace</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># URL of the GeoSciML v4.1 BoreHoleView Web Feature Service</span>\n<span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">WFS_URL</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://blah.blah.blah/nvcl/geoserver/wfs\"</span>\n\n<span class=\"c1\"># URL of NVCL service</span>\n<span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">NVCL_URL</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://blah.blah.blah/nvcl/NVCLDataServices\"</span>\n\n<span class=\"c1\"># Optional bounding box to search for boreholes using WFS, default units are EPSG:4326 degrees</span>\n<span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">BBOX</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"west\"</span><span class=\"p\">:</span> <span class=\"mf\">132.76</span><span class=\"p\">,</span> <span class=\"s2\">\"south\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">28.44</span><span class=\"p\">,</span> <span class=\"s2\">\"east\"</span><span class=\"p\">:</span> <span class=\"mf\">134.39</span><span class=\"p\">,</span> <span class=\"s2\">\"north\"</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">26.87</span> <span class=\"p\">}</span>\n\n<span class=\"c1\"># Optional maximum number of boreholes to fetch, default is no limit</span>\n<span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">MAX_BOREHOLES</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n\n<span class=\"c1\"># Instantiate class and search for boreholes</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">NVCLReader</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">)</span>\n</pre>\n<p><strong>2. Check if 'wfs' is not 'None' to see if this instance initialised properly</strong></p>\n<pre><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">wfs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ERROR!\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>3. Call get_boreholes_list() to get list of WFS borehole data for NVCL boreholes</strong></p>\n<pre><span class=\"c1\"># Returns a list of python dictionaries</span>\n<span class=\"c1\"># Each dict has fields from GeoSciML v4.1 BoreholeView</span>\n<span class=\"n\">bh_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_boreholes_list</span><span class=\"p\">()</span>\n</pre>\n<p><strong>4. Call get_nvcl_id_list() to get a list of NVCL borehole ids</strong></p>\n<pre><span class=\"n\">nvcl_id_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_nvcl_id_list</span><span class=\"p\">()</span>\n</pre>\n<p><strong>5. Using an NVCL borehole id from previous step, call get_imagelog_data()\nto get the NVCL log ids</strong></p>\n<pre><span class=\"c1\"># Get list of NVCL log ids</span>\n<span class=\"n\">nvcl_id_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_nvcl_id_list</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get NVCL log id for first borehole in list</span>\n<span class=\"n\">nvcl_id</span> <span class=\"o\">=</span> <span class=\"n\">nvcl_id_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get image log data for first borehole</span>\n<span class=\"n\">imagelog_data_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_imagelog_data</span><span class=\"p\">(</span><span class=\"n\">nvcl_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ild</span> <span class=\"ow\">in</span> <span class=\"n\">imagelog_data_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n          <span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n          <span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_type</span><span class=\"p\">,</span>\n          <span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">algorithmout_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>6. Using image log data, call get_borehole_data() to get borehole data</strong></p>\n<pre><span class=\"c1\"># Analysis class has 2 parts:</span>\n<span class=\"c1\"># 1. Min1,2,3 = 1st, 2nd, 3rd most common mineral</span>\n<span class=\"c1\">#    OR Grp1,2,3 = 1st, 2nd, 3rd most common group of minerals</span>\n<span class=\"c1\"># 2. uTSAV = visible light, uTSAS = shortwave IR, uTSAT = thermal IR</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># These combine to give us a class name such as 'Grp1 uTSAS'</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Here we extract data for log type '1' and 'Grp1 uTSAS'</span>\n<span class=\"n\">HEIGHT_RESOLUTION</span> <span class=\"o\">=</span> <span class=\"mf\">20.0</span>\n<span class=\"n\">ANALYSIS_CLASS</span> <span class=\"o\">=</span> <span class=\"s1\">'Grp1 uTSAS'</span>\n<span class=\"n\">LOG_TYPE</span> <span class=\"o\">=</span> <span class=\"s1\">'1'</span>\n<span class=\"k\">for</span> <span class=\"n\">ild</span> <span class=\"ow\">in</span> <span class=\"n\">imagelog_data_list</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_type</span> <span class=\"o\">==</span> <span class=\"n\">LOG_TYPE</span> <span class=\"ow\">and</span> <span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_name</span> <span class=\"o\">==</span> <span class=\"n\">ANALYSIS_CLASS</span><span class=\"p\">:</span>\n        <span class=\"n\">bh_data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_borehole_data</span><span class=\"p\">(</span><span class=\"n\">ild</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span> <span class=\"n\">HEIGHT_RESOLUTION</span><span class=\"p\">,</span> <span class=\"n\">ANALYSIS_CLASS</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Print out the colour, mineral and class name at each depth</span>\n        <span class=\"k\">for</span> <span class=\"n\">depth</span> <span class=\"ow\">in</span> <span class=\"n\">bh_data</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"At \"</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"p\">,</span> <span class=\"s2\">\"my class, mineral, colour is\"</span><span class=\"p\">,</span> <span class=\"n\">bh_data</span><span class=\"p\">[</span><span class=\"n\">depth</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">className</span><span class=\"p\">,</span>\n                  <span class=\"n\">bh_data</span><span class=\"p\">[</span><span class=\"n\">depth</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">classText</span><span class=\"p\">,</span> <span class=\"n\">bh_data</span><span class=\"p\">[</span><span class=\"n\">depth</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">colour</span><span class=\"p\">)</span>\n</pre>\n<p><strong>7. Using the NVCL ids from Step 5, you can also call get_spectrallog_data() and get_profilometer_data()</strong></p>\n<pre><span class=\"n\">spectrallog_data_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_spectrallog_data</span><span class=\"p\">(</span><span class=\"n\">nvcl_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">sld</span> <span class=\"ow\">in</span> <span class=\"n\">spectrallog_data_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">wavelength_units</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">sample_count</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">script</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">script_raw</span><span class=\"p\">,</span>\n          <span class=\"n\">sld</span><span class=\"o\">.</span><span class=\"n\">wavelengths</span><span class=\"p\">)</span>\n\n<span class=\"n\">profilometer_data_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_profilometer_data</span><span class=\"p\">(</span><span class=\"n\">nvcl_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">pdl</span> <span class=\"ow\">in</span> <span class=\"n\">profilometer_data_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n          <span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n          <span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">max_val</span><span class=\"p\">,</span>\n          <span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">min_val</span><span class=\"p\">,</span>\n          <span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">floats_per_sample</span><span class=\"p\">,</span>\n          <span class=\"n\">pdl</span><span class=\"o\">.</span><span class=\"n\">sample_count</span><span class=\"p\">)</span>\n</pre>\n<p><strong>8. Option: get a list of dataset ids</strong></p>\n<pre><span class=\"n\">datasetid_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_datasetid_list</span><span class=\"p\">(</span><span class=\"n\">nvcl_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>9. Option: Get a list of datasets</strong></p>\n<pre><span class=\"n\">dataset_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_dataset_list</span><span class=\"p\">(</span><span class=\"n\">nvcl_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ds</span> <span class=\"ow\">in</span> <span class=\"n\">dataset_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">,</span>\n          <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_name</span><span class=\"p\">,</span>\n          <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">borehole_uri</span><span class=\"p\">,</span>\n          <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">tray_id</span><span class=\"p\">,</span>\n          <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">section_id</span><span class=\"p\">,</span>\n          <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">domain_id</span><span class=\"p\">)</span>\n</pre>\n<p><strong>10. Using an element from 'datasetid_list' in Step 8 or 'ds.dataset_id' from Step 9, can retrieve log data</strong></p>\n<pre><span class=\"c1\"># Scalar log data</span>\n<span class=\"n\">log_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_scalar_logs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">log_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n          <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n          <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">is_public</span><span class=\"p\">,</span>\n          <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log_type</span><span class=\"p\">,</span>\n          <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">algorithm_id</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Different types of image log data</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_all_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_mosaic_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_thumb_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_imagery_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">ilog</span> <span class=\"ow\">in</span> <span class=\"n\">ilog_list</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n          <span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_name</span><span class=\"p\">,</span>\n          <span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">sample_count</span><span class=\"p\">)</span>\n</pre>\n<p><strong>11. Using the scalar log ids, can get scalar data and plots of scalar data</strong></p>\n<pre><span class=\"c1\"># Scalar data in CSV format</span>\n<span class=\"n\">log_id_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">log_id</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"n\">log_list</span><span class=\"p\">]</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_scalar_data</span><span class=\"p\">(</span><span class=\"n\">log_id_list</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sampled scalar data in JSON (or CSV) format</span>\n<span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_sampled_scalar_data</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">,</span>\n                                         <span class=\"n\">outputformat</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">startdepth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                         <span class=\"n\">enddepth</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">,</span>\n                                         <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A data plot in PNG</span>\n<span class=\"n\">plot_data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">plot_scalar_png</span><span class=\"p\">(</span><span class=\"n\">log_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Data plots in HTML, only plots the first 6 log ids</span>\n<span class=\"n\">plot_data</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">plot_scalars_html</span><span class=\"p\">(</span><span class=\"n\">log_id_list</span><span class=\"p\">)</span>\n</pre>\n<p><strong>12. Using the image log ids can produce images of NVCL cores</strong></p>\n<pre><span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_mosaic_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ilog</span> <span class=\"ow\">in</span> <span class=\"n\">ilog_list</span><span class=\"p\">:</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_mosaic_image</span><span class=\"p\">(</span><span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">)</span>\n\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_thumb_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ilog</span> <span class=\"ow\">in</span> <span class=\"n\">ilog_list</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Either HTML or JPG</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_thumb_html</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">,</span> <span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">)</span>\n    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_thumb_jpg</span><span class=\"p\">(</span><span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use either 'get_tray_thumb_imglogs()' or 'get_tray_imglogs()'</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_thumb_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"n\">ilog_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_imglogs</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">dataset_id</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">ilog</span> <span class=\"ow\">in</span> <span class=\"n\">ilog_list</span><span class=\"p\">:</span>\n    <span class=\"n\">depth_list</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">get_tray_depths</span><span class=\"p\">(</span><span class=\"n\">ilog</span><span class=\"o\">.</span><span class=\"n\">log_id</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">depth</span> <span class=\"ow\">in</span> <span class=\"n\">depth_list</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">.</span><span class=\"n\">sample_no</span><span class=\"p\">,</span>\n              <span class=\"n\">depth</span><span class=\"o\">.</span><span class=\"n\">start_value</span><span class=\"p\">,</span>\n              <span class=\"n\">depth</span><span class=\"o\">.</span><span class=\"n\">end_value</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6878113, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "84fb74728ab0a23f60118ea03b9c870f", "sha256": "776a47228b05f66cdf0351897abc91baac5179dbd0f1878e787ec127ada84ab2"}, "downloads": -1, "filename": "nvcl_kit-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "84fb74728ab0a23f60118ea03b9c870f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10611, "upload_time": "2019-12-02T02:28:22", "upload_time_iso_8601": "2019-12-02T02:28:22.722850Z", "url": "https://files.pythonhosted.org/packages/99/b6/30b705b990b89042af71e654f91201215ad64e9bc81b4a01cb48f4ea8ad3/nvcl_kit-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de6c01718750fcc5c8949e45d490d7c0", "sha256": "013435eb5125d298089e20a38f4daf14b3e5205a942afb6b6d02f34008ac05b5"}, "downloads": -1, "filename": "nvcl_kit-0.1.10.tar.gz", "has_sig": false, "md5_digest": "de6c01718750fcc5c8949e45d490d7c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12100, "upload_time": "2019-12-02T02:28:47", "upload_time_iso_8601": "2019-12-02T02:28:47.707126Z", "url": "https://files.pythonhosted.org/packages/5f/42/be12e2e9a643789268acba5f5e2c93f8836db035660ad7f7d2fde112944c/nvcl_kit-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "bab7341aca5938566538c469761a3c67", "sha256": "3bfc4ad21c6eb9b3cab54dfb42b8e8c7963b46da2f158faced40d87568dd7932"}, "downloads": -1, "filename": "nvcl_kit-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "bab7341aca5938566538c469761a3c67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10608, "upload_time": "2019-12-02T03:27:12", "upload_time_iso_8601": "2019-12-02T03:27:12.374215Z", "url": "https://files.pythonhosted.org/packages/fe/9d/42cf2e7c5f43a8e9c11df41830098ab17d5ff9c433a057945d6b4ad389a8/nvcl_kit-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55f44cb8102a903c8cae4697da23be15", "sha256": "60f8fce6e6719f08cc542352b502e40678c2f5bec101d7674b80e62475c927b9"}, "downloads": -1, "filename": "nvcl_kit-0.1.11.tar.gz", "has_sig": false, "md5_digest": "55f44cb8102a903c8cae4697da23be15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12369, "upload_time": "2019-12-02T03:27:14", "upload_time_iso_8601": "2019-12-02T03:27:14.403576Z", "url": "https://files.pythonhosted.org/packages/38/d4/80b3b1cf8a635f1aa6ea07c1dc2310890cd45cf65d3aa52f04d81fbfa148/nvcl_kit-0.1.11.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "f22273c12004fb872d23f90f766a4a74", "sha256": "12be352eb33beffb7735059af16550d0a73c8342bc54dc7ee7fcbf7af808868e"}, "downloads": -1, "filename": "nvcl_kit-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "f22273c12004fb872d23f90f766a4a74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11684, "upload_time": "2019-12-23T22:47:26", "upload_time_iso_8601": "2019-12-23T22:47:26.612879Z", "url": "https://files.pythonhosted.org/packages/60/af/d088d2b179421ea4acb172444abdd0e05ee5cfa977f72818b7efda429982/nvcl_kit-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01c91e3abad949a9c0ac51abd8dd91f7", "sha256": "f14fc8e4bd6e363eea538a10ecc11214366317476d566af8bd7b6afbf3808c26"}, "downloads": -1, "filename": "nvcl_kit-0.1.13.tar.gz", "has_sig": false, "md5_digest": "01c91e3abad949a9c0ac51abd8dd91f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15022, "upload_time": "2019-12-23T22:47:28", "upload_time_iso_8601": "2019-12-23T22:47:28.865470Z", "url": "https://files.pythonhosted.org/packages/f9/92/92cca41d9df63b85165f50217c53785421c67645d2d576271ff269c4ae98/nvcl_kit-0.1.13.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "86c78352963c8b16721c4d7526411c12", "sha256": "31d9fa8fdacc4f10436264074da4e8e0e65c5c11a32783de83899603c378ab36"}, "downloads": -1, "filename": "nvcl_kit-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "86c78352963c8b16721c4d7526411c12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16123, "upload_time": "2020-01-06T23:23:08", "upload_time_iso_8601": "2020-01-06T23:23:08.401235Z", "url": "https://files.pythonhosted.org/packages/a6/7c/ab6ece1fbb56cb3844fa9a05496b0e0b5deb7520f50f8b0ef9dad831dbe0/nvcl_kit-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca54371f7bbc44df4fbddaa4a0b32b55", "sha256": "1f2ebe9b4a377fc42c084937972bffb9505fecce51ed503dd4d9824897ca8d04"}, "downloads": -1, "filename": "nvcl_kit-0.1.16.tar.gz", "has_sig": false, "md5_digest": "ca54371f7bbc44df4fbddaa4a0b32b55", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19731, "upload_time": "2020-01-06T23:23:10", "upload_time_iso_8601": "2020-01-06T23:23:10.754763Z", "url": "https://files.pythonhosted.org/packages/dd/fb/cf989c91a8c90b48aabd8773afc3d03276c587814e8b13da744c378f6744/nvcl_kit-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "3bd248387015812cdbc9619c0c65ced7", "sha256": "bf4562af50c0b377ca1ef26420d45a71307a5a52a0ac479bd09f5df06622c572"}, "downloads": -1, "filename": "nvcl_kit-0.1.17-py3-none-any.whl", "has_sig": false, "md5_digest": "3bd248387015812cdbc9619c0c65ced7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16142, "upload_time": "2020-01-06T23:44:02", "upload_time_iso_8601": "2020-01-06T23:44:02.806977Z", "url": "https://files.pythonhosted.org/packages/60/43/863ae089ae59ce148580aae346ed34c67d48f17a96cfdcbc26b14b856525/nvcl_kit-0.1.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35c8f421436ece652c21639076a181e0", "sha256": "c092080871253552c4974a39397c81d65ca0f429abe1bdd35381ff60f44ac62f"}, "downloads": -1, "filename": "nvcl_kit-0.1.17.tar.gz", "has_sig": false, "md5_digest": "35c8f421436ece652c21639076a181e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19761, "upload_time": "2020-01-06T23:44:04", "upload_time_iso_8601": "2020-01-06T23:44:04.954176Z", "url": "https://files.pythonhosted.org/packages/cb/72/5d4b5c71558fbed60ab00aa6695c6964693136517581840a6d9abb7385ed/nvcl_kit-0.1.17.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "8cf6d3ce2776de410cb103c8d576cb32", "sha256": "59ce763f7e112e4e4b991915f7f351e2a88de993c8e46a8b3942a60c841df994"}, "downloads": -1, "filename": "nvcl_kit-0.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "8cf6d3ce2776de410cb103c8d576cb32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17141, "upload_time": "2020-02-28T00:32:03", "upload_time_iso_8601": "2020-02-28T00:32:03.517581Z", "url": "https://files.pythonhosted.org/packages/13/7b/94d077cd75892180cec0c0f83cf0f21667c420f1f521a6a4956e994432ba/nvcl_kit-0.1.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e5992722f490365a0cbfe4658eccdd6", "sha256": "fa04a69bee28b7c82b09c5a2b3eb832146ce538ef0366fb637cce50b198b631e"}, "downloads": -1, "filename": "nvcl_kit-0.1.18.tar.gz", "has_sig": false, "md5_digest": "7e5992722f490365a0cbfe4658eccdd6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20830, "upload_time": "2020-02-28T00:32:05", "upload_time_iso_8601": "2020-02-28T00:32:05.200914Z", "url": "https://files.pythonhosted.org/packages/17/ab/ea4bd31cfa86c4d8cb37367a5db89e7ae0de166e6e0e7f3ecd44280bcb03/nvcl_kit-0.1.18.tar.gz", "yanked": false}], "0.1.20": [{"comment_text": "", "digests": {"md5": "c11af14b247afcbb013cb8b28f5986a5", "sha256": "55713bef8a41bea8e0b666bbb90268f97a938ba1a391a2eb93f0ba8c0b88e8ab"}, "downloads": -1, "filename": "nvcl_kit-0.1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "c11af14b247afcbb013cb8b28f5986a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17247, "upload_time": "2020-03-04T23:20:27", "upload_time_iso_8601": "2020-03-04T23:20:27.016586Z", "url": "https://files.pythonhosted.org/packages/71/f3/61bfa975e51a8de1849298318d140fb03847b5fa46107df091d9570cd5e5/nvcl_kit-0.1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0b08383afcb4f57cb3ae249ac20d97e", "sha256": "e93959c7d065db02530a6e61cfdcae928e553480beffabf63e15eeed4f553c43"}, "downloads": -1, "filename": "nvcl_kit-0.1.20.tar.gz", "has_sig": false, "md5_digest": "d0b08383afcb4f57cb3ae249ac20d97e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20939, "upload_time": "2020-03-04T23:20:28", "upload_time_iso_8601": "2020-03-04T23:20:28.987499Z", "url": "https://files.pythonhosted.org/packages/ec/b0/e7cda20e057d5ecf5398838224bd4fbdb8d169da3b0257ca688b4a3a8252/nvcl_kit-0.1.20.tar.gz", "yanked": false}], "0.1.21": [{"comment_text": "", "digests": {"md5": "8f5f0bad662daaaa87d156d9a84986fd", "sha256": "512759a072480ce3bd8ef6f7690ee81647fcf1d43e1610936e212e1ee2beeb2c"}, "downloads": -1, "filename": "nvcl_kit-0.1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "8f5f0bad662daaaa87d156d9a84986fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17487, "upload_time": "2020-03-17T00:59:31", "upload_time_iso_8601": "2020-03-17T00:59:31.154376Z", "url": "https://files.pythonhosted.org/packages/79/26/2b08d5b645b10348eb6eee6bb16f59003e009e27738ff97728b4c6fb71ac/nvcl_kit-0.1.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaf8bcf16dee2f9290ff5cf5c7846c04", "sha256": "bd400fd2f33f8666a1fc323e146b7d397645dd09a4eb7bbb69391dd73aa41443"}, "downloads": -1, "filename": "nvcl_kit-0.1.21.tar.gz", "has_sig": false, "md5_digest": "eaf8bcf16dee2f9290ff5cf5c7846c04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21330, "upload_time": "2020-03-17T00:59:32", "upload_time_iso_8601": "2020-03-17T00:59:32.148476Z", "url": "https://files.pythonhosted.org/packages/11/89/b52fdac3af570e8280e10f7e9aa3d18655d19fbf1b6543a94ba08b5c8310/nvcl_kit-0.1.21.tar.gz", "yanked": false}], "0.1.22": [{"comment_text": "", "digests": {"md5": "0e1939cdbcec77acc61e2c072d94db7a", "sha256": "d47ddc0d2ab70a680d2256aea36404f3ed3f912423bffc4581cd310c35d94deb"}, "downloads": -1, "filename": "nvcl_kit-0.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1939cdbcec77acc61e2c072d94db7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17489, "upload_time": "2020-03-25T03:35:00", "upload_time_iso_8601": "2020-03-25T03:35:00.180032Z", "url": "https://files.pythonhosted.org/packages/a5/7d/9b97aa93ef7b7120b838517d2db73516656bb35f40c5536d8ba89201f743/nvcl_kit-0.1.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3da525da081bed0963e073ae8572f51e", "sha256": "93d594eb48402778fcd45f0fde8b1675959be8a6619ed305578054351b4d130f"}, "downloads": -1, "filename": "nvcl_kit-0.1.22.tar.gz", "has_sig": false, "md5_digest": "3da525da081bed0963e073ae8572f51e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21431, "upload_time": "2020-03-25T03:35:01", "upload_time_iso_8601": "2020-03-25T03:35:01.324625Z", "url": "https://files.pythonhosted.org/packages/3d/2d/a33e145fbb11fb16ea849513d3bf2eff86fb57b986a92ffdbd8fb35849f8/nvcl_kit-0.1.22.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e1939cdbcec77acc61e2c072d94db7a", "sha256": "d47ddc0d2ab70a680d2256aea36404f3ed3f912423bffc4581cd310c35d94deb"}, "downloads": -1, "filename": "nvcl_kit-0.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1939cdbcec77acc61e2c072d94db7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17489, "upload_time": "2020-03-25T03:35:00", "upload_time_iso_8601": "2020-03-25T03:35:00.180032Z", "url": "https://files.pythonhosted.org/packages/a5/7d/9b97aa93ef7b7120b838517d2db73516656bb35f40c5536d8ba89201f743/nvcl_kit-0.1.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3da525da081bed0963e073ae8572f51e", "sha256": "93d594eb48402778fcd45f0fde8b1675959be8a6619ed305578054351b4d130f"}, "downloads": -1, "filename": "nvcl_kit-0.1.22.tar.gz", "has_sig": false, "md5_digest": "3da525da081bed0963e073ae8572f51e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21431, "upload_time": "2020-03-25T03:35:01", "upload_time_iso_8601": "2020-03-25T03:35:01.324625Z", "url": "https://files.pythonhosted.org/packages/3d/2d/a33e145fbb11fb16ea849513d3bf2eff86fb57b986a92ffdbd8fb35849f8/nvcl_kit-0.1.22.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:05 2020"}