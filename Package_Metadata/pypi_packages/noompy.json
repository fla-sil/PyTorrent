{"info": {"author": "Ravi Salunkhe", "author_email": "salunkhe.ravi@ymail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "[![Downloads](https://pepy.tech/badge/noompy)](https://pepy.tech/project/noompy)  [![Downloads](https://pepy.tech/badge/noompy/month)](https://pepy.tech/project/noompy/month)  [![PyPI license](https://img.shields.io/pypi/l/ansicolortags.svg)](https://pypi.org/project/noompy/)\n\n# noompy\nnoompy is a simple minimalistic Excel API which helps you to \"query\" your .xls & .xlsx files. It supports SELECT and UPDATE statements as well as WHERE, AND and OR conditions.\n\n## Getting Started\n\n### Pre-requisites\n\n```\npython version >= 3.6\n```\n\n### Installing\n\n```\npip install noompy\n```\n\n## Usage\n\n### Note: \n\n* Use SELECT, UPDATE, WHERE, OR and AND clauses in CAPITAL while defining your query.\n\n### SELECT Query Examples\n\n#### Example # 1\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name=some_col_value\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n```\n\n#### Example # 2\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT col_name1 FROM sheet_name WHERE col_name=some_col_value\")\nprint(res)\n\n```\n\n#### Example # 3\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT col_name1, col_name2, col_name3 FROM sheet_name WHERE col_name=some_col_value\")\nprint(res)\n\n```\n\n#### Example # 4\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n```\n\n#### Example # 5\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2 OR col_name3=some_col_value3\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n```\n\n\n#### Example # 6\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2 AND col_name3=some_col_value3 AND col_name4=some_col_value4\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n```\n\n\n#### Example # 7\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 OR col_name2=some_col_value2 AND col_name3=some_col_value3 AND col_name4=some_col_value4 AND col_name5=some_col_value5\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n```\n\n### UPDATE Query Examples\n\n#### Example # 1\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name=col_value WHERE col_name=some_col_value\")\nprint(res)\n\n```\n\n#### Example # 2\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name=col_value WHERE col_name1=some_col_value1 OR col_name2=some_col_value2\")\nprint(res)\n\n```\n\n#### Example # 3\n\n```\nfrom api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name1=col_value1, col_name2=col_value2 WHERE col_name1=some_col_value1 AND col_name2=some_col_value2\")\nprint(res)\n\n```\n\n## Built With\n\n* [pandas](https://pandas.pydata.org/pandas-docs/stable/) - The core package used for excel dataframe manipulation\n* [openpyxl/xlrd/xlwt](http://www.python-excel.org/) - For working with Excel read/write etc.\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\n\n## [Unreleased]\n- Support for LIKE clause in query\n- Feature to support Excel cell formatting\n\n## [1.10] - 2019-11-13\n\n### Added\n- Support for single/multiple 'OR' clause in the SELECT/UPDATE queries and a combination of AND/OR will also work.\n- We can now use multiple column names in SELECT/UPDATE statements separated by comma(,) for data retrieval\n- index_of_record argument in SELECT/UPDATE functions which indicates the index of record user wants in case of multiple records. Default is 0\n\n### Changed\n- query_builder function and its implementation to work with multiple combinations of AND/OR clause statements \n- The logic to parse the SELECT/UPDATE query statements to handle n-number of AND conditions.\n- get_data() method to static\n\n### Removed\n- A maximum limit of 4 \"AND\" conditions to be added to the query statement\n- Support for single column in SELECT/UPDATE statements for data retrieval  \n\n\n## [1.0.1] - 2019-11-04\n- Initial Release\n\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests.\n\n## Versioning\n\nUsed [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/salunkhe-ravi/noompy/tags). \n\n## Authors\n\n* **Ravi Salunkhe** - *Initial work* - [salunkhe-ravi](https://github.com/salunkhe-ravi)\n\nSee also the list of [contributors](https://github.com/salunkhe-ravi/noompy/graphs/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE) file for details\n\n## Acknowledgments\n\n* Inspired by [fillo](https://codoid.com/fillo/) - Java based Excel API", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/salunkhe-ravi/noompy/archive/v1.10.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/salunkhe-ravi/noompy", "keywords": "noompy,excel,excel api,query excel", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "noompy", "package_url": "https://pypi.org/project/noompy/", "platform": "", "project_url": "https://pypi.org/project/noompy/", "project_urls": {"Download": "https://github.com/salunkhe-ravi/noompy/archive/v1.10.tar.gz", "Homepage": "https://github.com/salunkhe-ravi/noompy"}, "release_url": "https://pypi.org/project/noompy/1.10/", "requires_dist": null, "requires_python": "", "summary": "noompy is a simple minimalistic Excel API which helps you to \"query\" your .xls & .xlsx files. It supports SELECT and UPDATE statements as well as WHERE, AND and OR conditions.", "version": "1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pepy.tech/project/noompy\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a664561c213e3180538cf1399ea6f601154d2e8/68747470733a2f2f706570792e746563682f62616467652f6e6f6f6d7079\"></a>  <a href=\"https://pepy.tech/project/noompy/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7f74190458a7bcbf807651244d3c3be00260d9a/68747470733a2f2f706570792e746563682f62616467652f6e6f6f6d70792f6d6f6e7468\"></a>  <a href=\"https://pypi.org/project/noompy/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb7554d3f165ac5e7bc396a6fbc22d51a890512a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616e7369636f6c6f72746167732e737667\"></a></p>\n<h1>noompy</h1>\n<p>noompy is a simple minimalistic Excel API which helps you to \"query\" your .xls &amp; .xlsx files. It supports SELECT and UPDATE statements as well as WHERE, AND and OR conditions.</p>\n<h2>Getting Started</h2>\n<h3>Pre-requisites</h3>\n<pre><code>python version &gt;= 3.6\n</code></pre>\n<h3>Installing</h3>\n<pre><code>pip install noompy\n</code></pre>\n<h2>Usage</h2>\n<h3>Note:</h3>\n<ul>\n<li>Use SELECT, UPDATE, WHERE, OR and AND clauses in CAPITAL while defining your query.</li>\n</ul>\n<h3>SELECT Query Examples</h3>\n<h4>Example # 1</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name=some_col_value\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n</code></pre>\n<h4>Example # 2</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT col_name1 FROM sheet_name WHERE col_name=some_col_value\")\nprint(res)\n\n</code></pre>\n<h4>Example # 3</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT col_name1, col_name2, col_name3 FROM sheet_name WHERE col_name=some_col_value\")\nprint(res)\n\n</code></pre>\n<h4>Example # 4</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n</code></pre>\n<h4>Example # 5</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2 OR col_name3=some_col_value3\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n</code></pre>\n<h4>Example # 6</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 AND col_name2=some_col_value2 AND col_name3=some_col_value3 AND col_name4=some_col_value4\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n</code></pre>\n<h4>Example # 7</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.select_data(select_query=\"SELECT * FROM sheet_name WHERE col_name1=some_col_value1 OR col_name2=some_col_value2 AND col_name3=some_col_value3 AND col_name4=some_col_value4 AND col_name5=some_col_value5\")\nget_col_value = noom.get_data(data=res, key='some_key_col_name')\nprint(get_col_value)\nprint(res)\n\n</code></pre>\n<h3>UPDATE Query Examples</h3>\n<h4>Example # 1</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name=col_value WHERE col_name=some_col_value\")\nprint(res)\n\n</code></pre>\n<h4>Example # 2</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name=col_value WHERE col_name1=some_col_value1 OR col_name2=some_col_value2\")\nprint(res)\n\n</code></pre>\n<h4>Example # 3</h4>\n<pre><code>from api.noompy import NoomPy\nnoom = NoomPy(excel_path='path_to_.xlsx')\nres = noom.update_data(update_query=\"UPDATE sheet_name SET col_name1=col_value1, col_name2=col_value2 WHERE col_name1=some_col_value1 AND col_name2=some_col_value2\")\nprint(res)\n\n</code></pre>\n<h2>Built With</h2>\n<ul>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/\" rel=\"nofollow\">pandas</a> - The core package used for excel dataframe manipulation</li>\n<li><a href=\"http://www.python-excel.org/\" rel=\"nofollow\">openpyxl/xlrd/xlwt</a> - For working with Excel read/write etc.</li>\n</ul>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a></p>\n<h2>[Unreleased]</h2>\n<ul>\n<li>Support for LIKE clause in query</li>\n<li>Feature to support Excel cell formatting</li>\n</ul>\n<h2>[1.10] - 2019-11-13</h2>\n<h3>Added</h3>\n<ul>\n<li>Support for single/multiple 'OR' clause in the SELECT/UPDATE queries and a combination of AND/OR will also work.</li>\n<li>We can now use multiple column names in SELECT/UPDATE statements separated by comma(,) for data retrieval</li>\n<li>index_of_record argument in SELECT/UPDATE functions which indicates the index of record user wants in case of multiple records. Default is 0</li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>query_builder function and its implementation to work with multiple combinations of AND/OR clause statements</li>\n<li>The logic to parse the SELECT/UPDATE query statements to handle n-number of AND conditions.</li>\n<li>get_data() method to static</li>\n</ul>\n<h3>Removed</h3>\n<ul>\n<li>A maximum limit of 4 \"AND\" conditions to be added to the query statement</li>\n<li>Support for single column in SELECT/UPDATE statements for data retrieval</li>\n</ul>\n<h2>[1.0.1] - 2019-11-04</h2>\n<ul>\n<li>Initial Release</li>\n</ul>\n<h2>Contributing</h2>\n<p>Please read <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> for details on our code of conduct, and the process for submitting pull requests.</p>\n<h2>Versioning</h2>\n<p>Used <a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> for versioning. For the versions available, see the <a href=\"https://github.com/salunkhe-ravi/noompy/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Ravi Salunkhe</strong> - <em>Initial work</em> - <a href=\"https://github.com/salunkhe-ravi\" rel=\"nofollow\">salunkhe-ravi</a></li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/salunkhe-ravi/noompy/graphs/contributors\" rel=\"nofollow\">contributors</a> who participated in this project.</p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Inspired by <a href=\"https://codoid.com/fillo/\" rel=\"nofollow\">fillo</a> - Java based Excel API</li>\n</ul>\n\n          </div>"}, "last_serial": 6128423, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "b3dde30d3ed69bdd18a2f10c8450cfc5", "sha256": "db011e59eac4e4fb29448890864cd994bf9d68b106e445d8b606ee7bc9b44aee"}, "downloads": -1, "filename": "noompy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b3dde30d3ed69bdd18a2f10c8450cfc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4702, "upload_time": "2019-11-04T12:26:31", "upload_time_iso_8601": "2019-11-04T12:26:31.208866Z", "url": "https://files.pythonhosted.org/packages/f3/a8/fd0f71411127d09c8e4828ab7f59521c51dbb585b163485c17e0c4b07bc9/noompy-1.0.1.tar.gz", "yanked": false}], "1.10": [{"comment_text": "", "digests": {"md5": "e2641d4bf32af63839f88efb8c69109f", "sha256": "05f9671fc029ef53ca8371198488f3d5f4001b62dd71b809ab841201f2c5a662"}, "downloads": -1, "filename": "noompy-1.10.tar.gz", "has_sig": false, "md5_digest": "e2641d4bf32af63839f88efb8c69109f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5099, "upload_time": "2019-11-13T07:12:30", "upload_time_iso_8601": "2019-11-13T07:12:30.494431Z", "url": "https://files.pythonhosted.org/packages/11/97/6297dc98e2f8e3243c9de85a47b4626759ba6c32f1e28276023173a8be2e/noompy-1.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e2641d4bf32af63839f88efb8c69109f", "sha256": "05f9671fc029ef53ca8371198488f3d5f4001b62dd71b809ab841201f2c5a662"}, "downloads": -1, "filename": "noompy-1.10.tar.gz", "has_sig": false, "md5_digest": "e2641d4bf32af63839f88efb8c69109f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5099, "upload_time": "2019-11-13T07:12:30", "upload_time_iso_8601": "2019-11-13T07:12:30.494431Z", "url": "https://files.pythonhosted.org/packages/11/97/6297dc98e2f8e3243c9de85a47b4626759ba6c32f1e28276023173a8be2e/noompy-1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:51 2020"}