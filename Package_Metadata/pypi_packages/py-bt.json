{"info": {"author": "David Lavelle", "author_email": "davidlavelle1@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# Behaviour Tree [![Build Status](https://travis-ci.com/dlavelle7/py-bt.svg?branch=master)](https://travis-ci.com/dlavelle7/py-bt)\n\nPyPi: https://pypi.org/project/py-bt/\n\nTree structure made up of Composite, Decorator and Leaf nodes.\n\nLeaf nodes are where the behaviour happens, for example an \"action\" or \"test\".\n\nDecorator nodes can only have one child and are used to wrap the result of this child node (e.g. \"retry\" or \"not\").\n\nComposite nodes can have multiple children. Composite nodes can be of 2 types:\n* Sequence\n* Selector\n\nSequence nodes return the first failed child node. Similar to the ALL operator.\n\nSelector nodes return the first successful child node. Similar to the OR operator.\n\n## Release History\n\n* 1.2.1: Added tree model validation\n\n* 1.2.0: Added the \"retry\" decorator node\n\n* 1.1.0: Added the \"not\" decorator node (inverter)\n\n## Dependencies\n\nTested on:\n* Python 3.8.1\n* Python 3.7.5\n\n## Usage\n\nInstall:\n\n```bash\npip install py-bt\n```\n\nDefine a python module for you behaviour tasks (actions & tests). Tasks must return True or False\ndepending on whether they succeed or fail. Tasks functions receive `data` and `blackboard` args.\n`data` is the input data to the tree execution and `blackboard` is a key value store where\ninformation can be shared between nodes. For example:\n\n```python\ndef choose_food(data, blackboard):\n    if data[\"lunchbox\"]:\n        blackboard[\"choice\"] = random.choice(data[\"lunchbox\"])\n        return True\n    return False\n\ndef eat(data, blackboard):\n    print(f\"Eating {blackboard['choice']}\")\n    return True\n```\n\nThen, define your desired tree model in JSON or YAML format. For example:\n\n```json\n{\n  \"tasks_path\": \"path.to.tasks.module\",\n  \"tree\": {\n    \"sequence\": [\n      {\n        \"task\": \"choose_food\"\n      },\n      {\n        \"task\": \"eat\"\n      }\n    ]\n  }\n}\n```\n\nThen initialise and execute a behaviour tree object with some input data:\n\n```python\nfrom bt.behaviour_tree import BehaviourTree\n\ndata = {\n    \"lunchbox\": [\"apple\", \"orange\", \"pear\"]\n}\n\ntree = BehaviourTree(\"/path/to/tree/model.json\")\ntree.load()\n\ntree.execute(data)\n```\n\n## Example Models\n\nSome example models can be found under the `/models` directory.\n\nFor example `/models/football/attacker.json` contains a behaviour tree for how a attacking player in a\nfootball simulator might behave.\n\n\n## Tests\n\nRun tests in local Python environment (use a virtualenv):\n```\npip install -r requirements.txt -r requirements-test.txt\npytest\nflake8\n```\n\nRun tests with tox:\n```\npip install tox==3.14.5\ntox\n```\n\n## Upload to PyPi\n\n```\nrm -rf dist/\npython3 setup.py sdist bdist_wheel\ntwine upload dist/*\n```\n\n## References\n\n* https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php\n* https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)\n* https://py-trees.readthedocs.io/en/devel/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dlavelle7/py-bt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-bt", "package_url": "https://pypi.org/project/py-bt/", "platform": "", "project_url": "https://pypi.org/project/py-bt/", "project_urls": {"Homepage": "https://github.com/dlavelle7/py-bt"}, "release_url": "https://pypi.org/project/py-bt/1.2.1/", "requires_dist": ["PyYAML (==5.3)", "jsonschema (==3.2.0)"], "requires_python": "", "summary": "Python package for modelling and executing Behaviour Trees.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Behaviour Tree <a href=\"https://travis-ci.com/dlavelle7/py-bt\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ee5d8842b2cc97442dd991e4a6766d9a0137816/68747470733a2f2f7472617669732d63692e636f6d2f646c6176656c6c65372f70792d62742e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>PyPi: <a href=\"https://pypi.org/project/py-bt/\" rel=\"nofollow\">https://pypi.org/project/py-bt/</a></p>\n<p>Tree structure made up of Composite, Decorator and Leaf nodes.</p>\n<p>Leaf nodes are where the behaviour happens, for example an \"action\" or \"test\".</p>\n<p>Decorator nodes can only have one child and are used to wrap the result of this child node (e.g. \"retry\" or \"not\").</p>\n<p>Composite nodes can have multiple children. Composite nodes can be of 2 types:</p>\n<ul>\n<li>Sequence</li>\n<li>Selector</li>\n</ul>\n<p>Sequence nodes return the first failed child node. Similar to the ALL operator.</p>\n<p>Selector nodes return the first successful child node. Similar to the OR operator.</p>\n<h2>Release History</h2>\n<ul>\n<li>\n<p>1.2.1: Added tree model validation</p>\n</li>\n<li>\n<p>1.2.0: Added the \"retry\" decorator node</p>\n</li>\n<li>\n<p>1.1.0: Added the \"not\" decorator node (inverter)</p>\n</li>\n</ul>\n<h2>Dependencies</h2>\n<p>Tested on:</p>\n<ul>\n<li>Python 3.8.1</li>\n<li>Python 3.7.5</li>\n</ul>\n<h2>Usage</h2>\n<p>Install:</p>\n<pre>pip install py-bt\n</pre>\n<p>Define a python module for you behaviour tasks (actions &amp; tests). Tasks must return True or False\ndepending on whether they succeed or fail. Tasks functions receive <code>data</code> and <code>blackboard</code> args.\n<code>data</code> is the input data to the tree execution and <code>blackboard</code> is a key value store where\ninformation can be shared between nodes. For example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">choose_food</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">blackboard</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"lunchbox\"</span><span class=\"p\">]:</span>\n        <span class=\"n\">blackboard</span><span class=\"p\">[</span><span class=\"s2\">\"choice\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"lunchbox\"</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">blackboard</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Eating </span><span class=\"si\">{</span><span class=\"n\">blackboard</span><span class=\"p\">[</span><span class=\"s1\">'choice'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p>Then, define your desired tree model in JSON or YAML format. For example:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"tasks_path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"path.to.tasks.module\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"tree\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"sequence\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"choose_food\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"task\"</span><span class=\"p\">:</span> <span class=\"s2\">\"eat\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Then initialise and execute a behaviour tree object with some input data:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bt.behaviour_tree</span> <span class=\"kn\">import</span> <span class=\"n\">BehaviourTree</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"lunchbox\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"orange\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pear\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">BehaviourTree</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/tree/model.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n\n<span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h2>Example Models</h2>\n<p>Some example models can be found under the <code>/models</code> directory.</p>\n<p>For example <code>/models/football/attacker.json</code> contains a behaviour tree for how a attacking player in a\nfootball simulator might behave.</p>\n<h2>Tests</h2>\n<p>Run tests in local Python environment (use a virtualenv):</p>\n<pre><code>pip install -r requirements.txt -r requirements-test.txt\npytest\nflake8\n</code></pre>\n<p>Run tests with tox:</p>\n<pre><code>pip install tox==3.14.5\ntox\n</code></pre>\n<h2>Upload to PyPi</h2>\n<pre><code>rm -rf dist/\npython3 setup.py sdist bdist_wheel\ntwine upload dist/*\n</code></pre>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php\" rel=\"nofollow\">https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)</a></li>\n<li><a href=\"https://py-trees.readthedocs.io/en/devel/\" rel=\"nofollow\">https://py-trees.readthedocs.io/en/devel/</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6773036, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1a00ac3bf44a9a6ba7841f3c9ccccaa9", "sha256": "9647c6a20fbac49281c192666ce6b259af7096eb53b4203f334daaf175736a29"}, "downloads": -1, "filename": "py_bt-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1a00ac3bf44a9a6ba7841f3c9ccccaa9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3169, "upload_time": "2020-02-17T17:32:16", "upload_time_iso_8601": "2020-02-17T17:32:16.375372Z", "url": "https://files.pythonhosted.org/packages/75/69/6b32a3e7945ee41588f55d39d99bb140bcfd2ea37dc1f422ac549cb27cf7/py_bt-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39867d455885af17daa9e2e053918e2e", "sha256": "ff4cfb92876e8689f6239e4feb6333bff7f0f04e303c7ae3a8511ca99722d9d2"}, "downloads": -1, "filename": "py-bt-0.0.1.tar.gz", "has_sig": false, "md5_digest": "39867d455885af17daa9e2e053918e2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2697, "upload_time": "2020-02-17T17:32:18", "upload_time_iso_8601": "2020-02-17T17:32:18.638007Z", "url": "https://files.pythonhosted.org/packages/4d/19/d5ea2de0ebc02ff833e1c0661a0c07f802d8f97f2af8d4e89359d2e954fc/py-bt-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ca79cb4cebb626b5bb6c0fafd987e0c8", "sha256": "158887fa6a23243e7e0a1f78fb5a5f495f5af3f29387d4c7b7b896f6bb9e7a89"}, "downloads": -1, "filename": "py_bt-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ca79cb4cebb626b5bb6c0fafd987e0c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4210, "upload_time": "2020-02-17T17:47:29", "upload_time_iso_8601": "2020-02-17T17:47:29.550806Z", "url": "https://files.pythonhosted.org/packages/c4/10/c0a617bb55a33c504352f4f99260819e56898b416bff6aef07aa9fdf620b/py_bt-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "612121aad1167826c8036ae2aeb34909", "sha256": "eeffbf6b7be5a0e2a8dca44873d2032c0db0330392b3c3cc4063e223aefec0e5"}, "downloads": -1, "filename": "py-bt-0.0.2.tar.gz", "has_sig": false, "md5_digest": "612121aad1167826c8036ae2aeb34909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3201, "upload_time": "2020-02-17T17:47:30", "upload_time_iso_8601": "2020-02-17T17:47:30.706282Z", "url": "https://files.pythonhosted.org/packages/16/60/078a70d331f60b32f5e4b58597bbc5df3b540adb4fbbc4ce2078506d6851/py-bt-0.0.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f3692f20984d9813170cb1c83895d3d1", "sha256": "ddaa884822ef5f13448d306860328842a5e6f95fdadb7015029c2e3ad8667dad"}, "downloads": -1, "filename": "py_bt-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3692f20984d9813170cb1c83895d3d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4844, "upload_time": "2020-02-19T16:09:43", "upload_time_iso_8601": "2020-02-19T16:09:43.092610Z", "url": "https://files.pythonhosted.org/packages/e9/b4/520f2e377aa50e0449061769f97ee9a53cfeb5c1f4e1ed84f9a7a32b0bd8/py_bt-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fe80ea747c8adbe279e6217f93b9021", "sha256": "ff8aa1dc11aaa93c45fa6d4c9b411b08d195865695fd1289b9a08c4a1931387f"}, "downloads": -1, "filename": "py-bt-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7fe80ea747c8adbe279e6217f93b9021", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3781, "upload_time": "2020-02-19T16:09:44", "upload_time_iso_8601": "2020-02-19T16:09:44.530425Z", "url": "https://files.pythonhosted.org/packages/93/f5/64bdb0842561f0dc7411ccb4bb9326c17a40c799c84a4e7b4e174c6211d5/py-bt-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "95514a05bb1f01c83353035ee239b637", "sha256": "1c0d8127de1ee6275a2891eb8409a0eaf8d0eefc07c2aa42dd26db5b3f3e0b82"}, "downloads": -1, "filename": "py_bt-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "95514a05bb1f01c83353035ee239b637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5002, "upload_time": "2020-02-27T16:07:44", "upload_time_iso_8601": "2020-02-27T16:07:44.738781Z", "url": "https://files.pythonhosted.org/packages/af/b8/b7bf1086748c377d6364c0a967a4d5545b391ea254605f31b8592c7a638d/py_bt-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74f090309514acc0e1f045033b20be57", "sha256": "494154ec448f5bd40089e5e12c736013cf9252be054785b458568e368bf35479"}, "downloads": -1, "filename": "py-bt-1.1.0.tar.gz", "has_sig": false, "md5_digest": "74f090309514acc0e1f045033b20be57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3944, "upload_time": "2020-02-27T16:07:47", "upload_time_iso_8601": "2020-02-27T16:07:47.358781Z", "url": "https://files.pythonhosted.org/packages/1e/09/897a481838de21bcff439bbd167500b06ca825efac8155479801464edd79/py-bt-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ed020c44ad734c6e48a57a557b2c6069", "sha256": "9f14bbca60580ac9385cdbbbca8d8dddc6e6679725f92336d40547f2bedceedf"}, "downloads": -1, "filename": "py_bt-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ed020c44ad734c6e48a57a557b2c6069", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5165, "upload_time": "2020-02-28T17:03:04", "upload_time_iso_8601": "2020-02-28T17:03:04.108899Z", "url": "https://files.pythonhosted.org/packages/1f/b4/67f15dac16f1c7ed49bfd04b91ef11194a43ca6bbc71f0449a30cfd666bf/py_bt-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb63885cd13c3d525586ccb1f31385e8", "sha256": "aaeb31d6fbffa6528140347993d779e333dea584f4cdf101a53e67441ad00fd5"}, "downloads": -1, "filename": "py-bt-1.2.0.tar.gz", "has_sig": false, "md5_digest": "eb63885cd13c3d525586ccb1f31385e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4114, "upload_time": "2020-02-28T17:03:05", "upload_time_iso_8601": "2020-02-28T17:03:05.945520Z", "url": "https://files.pythonhosted.org/packages/3c/ae/f23b7a3efc707e72f578c6fb19d37cbbde3ead5c0dec9895c400d3f6097a/py-bt-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "b3b672bf283e90928aca7320fc6dafd0", "sha256": "197d3f965fc6811ff9f51b0c1971edab66cb31025697b31ddfd0191b43a33d46"}, "downloads": -1, "filename": "py_bt-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3b672bf283e90928aca7320fc6dafd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5327, "upload_time": "2020-03-08T18:23:34", "upload_time_iso_8601": "2020-03-08T18:23:34.436071Z", "url": "https://files.pythonhosted.org/packages/47/9a/60742dcf51cfe32935a27fefc72ef2c160617f2aea2233f26c30d0372abb/py_bt-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d063bea3cb3973835200f8bb3885ad3", "sha256": "58bf9b7915ea6d9f6719ea07127257fb429f3669a1d3b1fad92f6755bb8b6bfe"}, "downloads": -1, "filename": "py-bt-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4d063bea3cb3973835200f8bb3885ad3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4291, "upload_time": "2020-03-08T18:23:36", "upload_time_iso_8601": "2020-03-08T18:23:36.219331Z", "url": "https://files.pythonhosted.org/packages/76/fc/7304238a39f7c7d222928554dc6f95ea98b715bc5565727c8cd22995d586/py-bt-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3b672bf283e90928aca7320fc6dafd0", "sha256": "197d3f965fc6811ff9f51b0c1971edab66cb31025697b31ddfd0191b43a33d46"}, "downloads": -1, "filename": "py_bt-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3b672bf283e90928aca7320fc6dafd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5327, "upload_time": "2020-03-08T18:23:34", "upload_time_iso_8601": "2020-03-08T18:23:34.436071Z", "url": "https://files.pythonhosted.org/packages/47/9a/60742dcf51cfe32935a27fefc72ef2c160617f2aea2233f26c30d0372abb/py_bt-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d063bea3cb3973835200f8bb3885ad3", "sha256": "58bf9b7915ea6d9f6719ea07127257fb429f3669a1d3b1fad92f6755bb8b6bfe"}, "downloads": -1, "filename": "py-bt-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4d063bea3cb3973835200f8bb3885ad3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4291, "upload_time": "2020-03-08T18:23:36", "upload_time_iso_8601": "2020-03-08T18:23:36.219331Z", "url": "https://files.pythonhosted.org/packages/76/fc/7304238a39f7c7d222928554dc6f95ea98b715bc5565727c8cd22995d586/py-bt-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:59 2020"}