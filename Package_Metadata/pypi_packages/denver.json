{"info": {"author": "Yoann Lamouroux", "author_email": "ylamouroux@vente-privee.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python :: 3"], "description": "# dENVer\n\nTreat your secrets like password\n\n## purpose\n\nWe live in a devops world, the devops world is awesome, so many neat tools and\ndeployment management, API, ...\n\nMany vendors will treat the security as \"next vendor's problem\".\n\nAs a user, we end-up with many dotfiles containing critical API keys in\nplain-text, or we just `export BASH_VARS=SeCrEt`, and the secret end-up in\n`.bash_history`.\n\nOn another side, we start to implement saner password management policies,\nthanks to tools such as `password-store`, `keepass`, `1password`, `lastpass`, and so many\nmore.\n\nLet's try to fix it.\n\nDenver is super simple and tool-agnostic script which let you export the\nenvironment variables AWS and Vault love so much, from your password manager\n(granted it offers you a way to write it to `stdout`). And set an alias\n(`fdenver`) to forget about it when you're done (or just close the terminal,\nI'm not your boss)\n\n## installation\n\nIt's currently a WIP (work in progress), but due to being a pretty dumb wrapper\naround more mature tools, you can start to use it safely with actual secrets.\n\nIt could work, with some effort, in windows, but it's out of scope for now.\n\nThe `demo.cfg` file can be copied to `$HOME/.denver.cfg`.\n\n```bash\npip install denver\n```\n\nPlease do use a virtual environment.\n\n## usage\n\n### on the password manager side\n\nStore a secret in the form of:\n\n```\nVAR_NAME_FOO=a_secret\nVAR_BAR=another_secret\n```\n\nIf you use keepass, use the `Notes` field.\n\n### on denver side\n\nAdapt the command to your use-case, examples are provided for `keepassxc` and\n`gopass`\n\nIt should work without any problem in any shell providing subshell support (ie.\nbash and zsh)\n\nIf your environment already has a variable with the same name in its scope,\n`denver` won't overwrite it, nor set it to be unset.\n\n```bash\n# source it from a subshell\nsource <(denver.py -n NAME)\n\n# display the commands\ndenver.py -n NAME\n[ keep the space as 1st char if you copy/paste those commands so they're not\nappended to your .history file ]\n\n# look at the variables being correctly set up:\nenv\n\n# forget about these\nfdenver\n```\n\n### XXXX marks the spot\n\nYou can see 'XXXX' in command parameters, they're magic-value, and will be\nreplaced with the `name` (`-n key`, or `--name key`) parameter at runtime.\n\n### more help\n\nHaven't you tried this already ?\n\n```bash\ndenver.py --help\n```\n\n### a note about stdin password prompts\n\nYou can't (easily) reach the subshell's stdin, it means you should use an\nexternal prompt program if the password tool give an interactive prompt, use a\ngraphical tool in order to pipe your password there (cf. `keepassxc` command)\n\n### bugs\n\n- there's no context awareness, if you run it twice with different variables\n  bundles, the `fdenver` alias won't be properly created, and will fail to\n  unset every variables (should you be in that situation : just exit the damn\n  shell)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.vptech.eu/ylamouroux/denver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "denver", "package_url": "https://pypi.org/project/denver/", "platform": "", "project_url": "https://pypi.org/project/denver/", "project_urls": {"Homepage": "https://git.vptech.eu/ylamouroux/denver"}, "release_url": "https://pypi.org/project/denver/0.0.2/", "requires_dist": ["click"], "requires_python": ">=3.6", "summary": "A secret environment management", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dENVer</h1>\n<p>Treat your secrets like password</p>\n<h2>purpose</h2>\n<p>We live in a devops world, the devops world is awesome, so many neat tools and\ndeployment management, API, ...</p>\n<p>Many vendors will treat the security as \"next vendor's problem\".</p>\n<p>As a user, we end-up with many dotfiles containing critical API keys in\nplain-text, or we just <code>export BASH_VARS=SeCrEt</code>, and the secret end-up in\n<code>.bash_history</code>.</p>\n<p>On another side, we start to implement saner password management policies,\nthanks to tools such as <code>password-store</code>, <code>keepass</code>, <code>1password</code>, <code>lastpass</code>, and so many\nmore.</p>\n<p>Let's try to fix it.</p>\n<p>Denver is super simple and tool-agnostic script which let you export the\nenvironment variables AWS and Vault love so much, from your password manager\n(granted it offers you a way to write it to <code>stdout</code>). And set an alias\n(<code>fdenver</code>) to forget about it when you're done (or just close the terminal,\nI'm not your boss)</p>\n<h2>installation</h2>\n<p>It's currently a WIP (work in progress), but due to being a pretty dumb wrapper\naround more mature tools, you can start to use it safely with actual secrets.</p>\n<p>It could work, with some effort, in windows, but it's out of scope for now.</p>\n<p>The <code>demo.cfg</code> file can be copied to <code>$HOME/.denver.cfg</code>.</p>\n<pre>pip install denver\n</pre>\n<p>Please do use a virtual environment.</p>\n<h2>usage</h2>\n<h3>on the password manager side</h3>\n<p>Store a secret in the form of:</p>\n<pre><code>VAR_NAME_FOO=a_secret\nVAR_BAR=another_secret\n</code></pre>\n<p>If you use keepass, use the <code>Notes</code> field.</p>\n<h3>on denver side</h3>\n<p>Adapt the command to your use-case, examples are provided for <code>keepassxc</code> and\n<code>gopass</code></p>\n<p>It should work without any problem in any shell providing subshell support (ie.\nbash and zsh)</p>\n<p>If your environment already has a variable with the same name in its scope,\n<code>denver</code> won't overwrite it, nor set it to be unset.</p>\n<pre><span class=\"c1\"># source it from a subshell</span>\n<span class=\"nb\">source</span> &lt;<span class=\"o\">(</span>denver.py -n NAME<span class=\"o\">)</span>\n\n<span class=\"c1\"># display the commands</span>\ndenver.py -n NAME\n<span class=\"o\">[</span> keep the space as 1st char <span class=\"k\">if</span> you copy/paste those commands so they<span class=\"err\">'</span>re not\nappended to your .history file <span class=\"o\">]</span>\n\n<span class=\"c1\"># look at the variables being correctly set up:</span>\nenv\n\n<span class=\"c1\"># forget about these</span>\nfdenver\n</pre>\n<h3>XXXX marks the spot</h3>\n<p>You can see 'XXXX' in command parameters, they're magic-value, and will be\nreplaced with the <code>name</code> (<code>-n key</code>, or <code>--name key</code>) parameter at runtime.</p>\n<h3>more help</h3>\n<p>Haven't you tried this already ?</p>\n<pre>denver.py --help\n</pre>\n<h3>a note about stdin password prompts</h3>\n<p>You can't (easily) reach the subshell's stdin, it means you should use an\nexternal prompt program if the password tool give an interactive prompt, use a\ngraphical tool in order to pipe your password there (cf. <code>keepassxc</code> command)</p>\n<h3>bugs</h3>\n<ul>\n<li>there's no context awareness, if you run it twice with different variables\nbundles, the <code>fdenver</code> alias won't be properly created, and will fail to\nunset every variables (should you be in that situation : just exit the damn\nshell)</li>\n</ul>\n\n          </div>"}, "last_serial": 6734852, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "843f1397d673160c1dcc09abec1b1425", "sha256": "357909c1ca9176b4dfcba2cde826740c70582214c82371f6f038bd1f735cea2a"}, "downloads": -1, "filename": "denver-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "843f1397d673160c1dcc09abec1b1425", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4872, "upload_time": "2020-03-02T17:00:15", "upload_time_iso_8601": "2020-03-02T17:00:15.379090Z", "url": "https://files.pythonhosted.org/packages/dc/d9/d234f9f03ecc519191f45ff46ca73019c7440027c01c1de0da323c8772a0/denver-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3685407875b17b6dddc212c1e49220f", "sha256": "a66fb25129a0025e3c65b825b522cce5234bf8af62901426246d1ddc09cc72df"}, "downloads": -1, "filename": "denver-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d3685407875b17b6dddc212c1e49220f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3631, "upload_time": "2020-03-02T17:00:16", "upload_time_iso_8601": "2020-03-02T17:00:16.793990Z", "url": "https://files.pythonhosted.org/packages/4a/86/f9073eb5d2bdc8f6484423c984aa082217d32184aac8bc338338f8a496d2/denver-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "843f1397d673160c1dcc09abec1b1425", "sha256": "357909c1ca9176b4dfcba2cde826740c70582214c82371f6f038bd1f735cea2a"}, "downloads": -1, "filename": "denver-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "843f1397d673160c1dcc09abec1b1425", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4872, "upload_time": "2020-03-02T17:00:15", "upload_time_iso_8601": "2020-03-02T17:00:15.379090Z", "url": "https://files.pythonhosted.org/packages/dc/d9/d234f9f03ecc519191f45ff46ca73019c7440027c01c1de0da323c8772a0/denver-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3685407875b17b6dddc212c1e49220f", "sha256": "a66fb25129a0025e3c65b825b522cce5234bf8af62901426246d1ddc09cc72df"}, "downloads": -1, "filename": "denver-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d3685407875b17b6dddc212c1e49220f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3631, "upload_time": "2020-03-02T17:00:16", "upload_time_iso_8601": "2020-03-02T17:00:16.793990Z", "url": "https://files.pythonhosted.org/packages/4a/86/f9073eb5d2bdc8f6484423c984aa082217d32184aac8bc338338f8a496d2/denver-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:06 2020"}