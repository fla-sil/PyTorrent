{"info": {"author": "Gianluca Gippetto", "author_email": "gianluca.gippetto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "========\nOverview\n========\n\n\n\nA package for working with files containing word embeddings (aka word vectors).\nWritten for:\n\n#. providing a common interface for different file formats;\n#. providing a flexible function for building \"embedding matrices\" that you can use\n   for initializing the `Embedding` layer of your deep learning model;\n#. taking as less RAM as possible: no need to load 3M vectors like with\n   `gensim.load_word2vec_format` when you only need 20K;\n#. satisfying my (inexplicable) urge of writing a Python package.\n\n\nFeatures\n========\n- Supports textual and Google's binary format plus a custom convenient format (.vvm)\n  supporting constant-time access of word vectors (by word).\n\n- Allows to easily implement, test and integrate new file formats.\n\n- Supports virtually any text encoding and vector data type (though you should\n  probably use only UTF-8 as encoding).\n\n- Well-documented and type-annotated (meaning great IDE support).\n\n- Extensively tested.\n\n- Progress bars (by default) for every time-consuming operation.\n\n\nInstallation\n============\n::\n\n    pip install embfile\n\n\nQuick start\n===========\n\n.. code-block:: python\n\n    import embfile\n\n    with embfile.open(\"path/to/file.bin\") as f:     # infer file format from file extension\n\n        print(f.vocab_size, f.vector_size)\n\n        # Load some word vectors in a dictionary (raise KeyError if any word is missing)\n        word2vec = f.load(['ciao', 'hello'])\n\n        # Like f.load() but allows missing words (and returns them in a Set)\n        word2vec, missing_words = f.find(['ciao', 'hello', 'someMissingWord'])\n\n        # Build a matrix for initializing the Embedding layer either from\n        # an iterable of words or a dictionary {word: index}. Handle the\n        # initialization of eventual missing word vectors (see argument \"oov_initializer\")\n        matrix, word2index, missing_words = embfile.build_matrix(f, words)\n\n\n.. if-doc-stop-here\n\nDocumentation\n=============\nRead the full documentation at https://embfile.readthedocs.io/.\n\n\nChangelog\n=========\nv0.1.0 (2020-01-24)\n-------------------\n* First release on PyPI.\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janLuke/embfile", "keywords": "embeddings,word vectors,word2vec,nlp,neural networks,deep learning,machine learning", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "embfile", "package_url": "https://pypi.org/project/embfile/", "platform": "", "project_url": "https://pypi.org/project/embfile/", "project_urls": {"Homepage": "https://github.com/janLuke/embfile"}, "release_url": "https://pypi.org/project/embfile/0.1.0/", "requires_dist": ["numpy", "tqdm", "overrides", "tabulate"], "requires_python": "", "summary": "A package for working with files containing pre-trained word embeddings (aka word vectors).", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A package for working with files containing word embeddings (aka word vectors).\nWritten for:</p>\n<ol>\n<li>providing a common interface for different file formats;</li>\n<li>providing a flexible function for building \u201cembedding matrices\u201d that you can use\nfor initializing the <cite>Embedding</cite> layer of your deep learning model;</li>\n<li>taking as less RAM as possible: no need to load 3M vectors like with\n<cite>gensim.load_word2vec_format</cite> when you only need 20K;</li>\n<li>satisfying my (inexplicable) urge of writing a Python package.</li>\n</ol>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Supports textual and Google\u2019s binary format plus a custom convenient format (.vvm)\nsupporting constant-time access of word vectors (by word).</li>\n<li>Allows to easily implement, test and integrate new file formats.</li>\n<li>Supports virtually any text encoding and vector data type (though you should\nprobably use only UTF-8 as encoding).</li>\n<li>Well-documented and type-annotated (meaning great IDE support).</li>\n<li>Extensively tested.</li>\n<li>Progress bars (by default) for every time-consuming operation.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install embfile\n</pre>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">embfile</span>\n\n<span class=\"k\">with</span> <span class=\"n\">embfile</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/file.bin\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>     <span class=\"c1\"># infer file format from file extension</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vocab_size</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vector_size</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Load some word vectors in a dictionary (raise KeyError if any word is missing)</span>\n    <span class=\"n\">word2vec</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">([</span><span class=\"s1\">'ciao'</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Like f.load() but allows missing words (and returns them in a Set)</span>\n    <span class=\"n\">word2vec</span><span class=\"p\">,</span> <span class=\"n\">missing_words</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">([</span><span class=\"s1\">'ciao'</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'someMissingWord'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Build a matrix for initializing the Embedding layer either from</span>\n    <span class=\"c1\"># an iterable of words or a dictionary {word: index}. Handle the</span>\n    <span class=\"c1\"># initialization of eventual missing word vectors (see argument \"oov_initializer\")</span>\n    <span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">word2index</span><span class=\"p\">,</span> <span class=\"n\">missing_words</span> <span class=\"o\">=</span> <span class=\"n\">embfile</span><span class=\"o\">.</span><span class=\"n\">build_matrix</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">words</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Read the full documentation at <a href=\"https://embfile.readthedocs.io/\" rel=\"nofollow\">https://embfile.readthedocs.io/</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"v0-1-0-2020-01-24\"><span class=\"section-subtitle\">v0.1.0 (2020-01-24)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6511317, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "57c55cd24e7b7b65fdcf7295d21ed6ba", "sha256": "62fd8a1d6792ae876808982f631235c6e808e5affe61aa2d3f793a1c6e1f70a4"}, "downloads": -1, "filename": "embfile-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "57c55cd24e7b7b65fdcf7295d21ed6ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37542, "upload_time": "2020-01-24T00:56:09", "upload_time_iso_8601": "2020-01-24T00:56:09.519628Z", "url": "https://files.pythonhosted.org/packages/09/74/b11382c661564e0170c0890848430e34a9650f73c5979d2a320028a45e27/embfile-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a395f9851f961a5ef409bdbf4ecf6408", "sha256": "ca25cdc03b39c319282bddbda7e9621fea394207272d151136e828660794f26d"}, "downloads": -1, "filename": "embfile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a395f9851f961a5ef409bdbf4ecf6408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98846, "upload_time": "2020-01-24T00:56:14", "upload_time_iso_8601": "2020-01-24T00:56:14.330843Z", "url": "https://files.pythonhosted.org/packages/da/da/7eb49ce8aa4f7d909eb6a74fe61a3c88b0ef4a3668fac53f11f98d78a8f0/embfile-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57c55cd24e7b7b65fdcf7295d21ed6ba", "sha256": "62fd8a1d6792ae876808982f631235c6e808e5affe61aa2d3f793a1c6e1f70a4"}, "downloads": -1, "filename": "embfile-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "57c55cd24e7b7b65fdcf7295d21ed6ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37542, "upload_time": "2020-01-24T00:56:09", "upload_time_iso_8601": "2020-01-24T00:56:09.519628Z", "url": "https://files.pythonhosted.org/packages/09/74/b11382c661564e0170c0890848430e34a9650f73c5979d2a320028a45e27/embfile-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a395f9851f961a5ef409bdbf4ecf6408", "sha256": "ca25cdc03b39c319282bddbda7e9621fea394207272d151136e828660794f26d"}, "downloads": -1, "filename": "embfile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a395f9851f961a5ef409bdbf4ecf6408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98846, "upload_time": "2020-01-24T00:56:14", "upload_time_iso_8601": "2020-01-24T00:56:14.330843Z", "url": "https://files.pythonhosted.org/packages/da/da/7eb49ce8aa4f7d909eb6a74fe61a3c88b0ef4a3668fac53f11f98d78a8f0/embfile-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:40 2020"}