{"info": {"author": "Robert Collins", "author_email": "robertc@robertcollins.net", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "*************************************************************\nfixtures: Fixtures with cleanups for testing and convenience.\n*************************************************************\n\n  Copyright (c) 2010, Robert Collins <robertc@robertcollins.net>\n  \n  Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\n  license at the users choice. A copy of both licenses are available in the\n  project source as Apache-2.0 and BSD. You may not use this file except in\n  compliance with one of these two licences.\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under these licenses is distributed on an \"AS IS\" BASIS, WITHOUT\n  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n  license you chose for the specific language governing permissions and\n  limitations under that license.\n\n\nFixtures defines a Python contract for reusable state / support logic,\nprimarily for unit testing. Helper and adaption logic is included to make it\neasy to write your own fixtures using the fixtures contract. Glue code is\nprovided that makes using fixtures that meet the Fixtures contract in unittest\ncompatible test cases easy and straight forward.\n\nDependencies\n============\n\n* Python 2.6+, or 3.3+\n  This is the base language fixtures is written in and for.\n\n* pbr\n  Used for version and release management of fixtures.\n\n* testtools <https://launchpad.net/testtools> 0.9.22 or newer.\n  testtools provides helpful glue functions for the details API used to report\n  information about a fixture (whether its used in a testing or production\n  environment).\n\nFor use in a unit test suite using the included glue, one of:\n\n* Python 2.7+\n\n* unittest2\n\n* bzrlib.tests\n\n* Or any other test environment that supports TestCase.addCleanup.\n\nWriting your own glue code is easy, or you can simply use Fixtures directly\nwithout any support code.\n\nTo run the test suite for fixtures, testtools is needed.\n\nWhy Fixtures\n============\n\nStandard Python unittest.py provides no obvious method for making and reusing\nstate needed in a test case other than by adding a method on the test class.\nThis scales poorly - complex helper functions propagating up a test class\nhierarchy is a regular pattern when this is done. Mocking while a great tool\ndoesn't itself prevent this (and helpers to mock complex things can accumulate\nin the same way if placed on the test class).\n\nBy defining a uniform contract where helpers have no dependency on the test\nclass we permit all the regular code hygiene activities to take place without\nthe distorting influence of being in a class hierarchy that is modelling an\nentirely different thing - which is what helpers on a TestCase suffer from.\n\nAbout Fixtures\n==============\n\nA Fixture represents some state. Each fixture has attributes on it that are\nspecific to the fixture. For instance, a fixture representing a directory that\ncan be used for temporary files might have a attribute 'path'.\n\nMost fixtures have complete ``pydoc`` documentation, so be sure to check\n``pydoc fixtures`` for usage information.\n\nCreating Fixtures\n=================\n\nMinimally, subclass Fixture, define _setUp to initialize your state and schedule\na cleanup for when cleanUp is called and you're done::\n\n  >>> import unittest\n  >>> import fixtures\n  >>> class NoddyFixture(fixtures.Fixture):\n  ...     def _setUp(self):\n  ...         self.frobnozzle = 42\n  ...         self.addCleanup(delattr, self, 'frobnozzle')\n\nThis will initialize frobnozzle when ``setUp`` is called, and when ``cleanUp``\nis called get rid of the frobnozzle attribute. Prior to version 1.3.0 fixtures\nrecommended overriding ``setUp``. This is still supported, but since it is\nharder to write leak-free fixtures in this fashion, it is not recommended.\n\nIf your fixture has diagnostic data - for instance the log file of an\napplication server, or log messages, it can expose that by creating a content\nobject (``testtools.content.Content``) and calling ``addDetail``.\n\n  >>> from testtools.content import text_content\n  >>> class WithLog(fixtures.Fixture):\n  ...     def _setUp(self):\n  ...         self.addDetail('message', text_content('foo bar baz'))\n\nThe method ``useFixture`` will use another fixture, call ``setUp`` on it, call\n``self.addCleanup(thefixture.cleanUp)``, attach any details from it and return\nthe fixture. This allows simple composition of different fixtures.\n\n  >>> class ReusingFixture(fixtures.Fixture):\n  ...     def _setUp(self):\n  ...         self.noddy = self.useFixture(NoddyFixture())\n\nThere is a helper for adapting a function or function pair into Fixtures. it\nputs the result of the function in fn_result::\n\n  >>> import os.path\n  >>> import shutil\n  >>> import tempfile\n  >>> def setup_function():\n  ...     return tempfile.mkdtemp()\n  >>> def teardown_function(fixture):\n  ...     shutil.rmtree(fixture)\n  >>> fixture = fixtures.FunctionFixture(setup_function, teardown_function)\n  >>> fixture.setUp()\n  >>> print (os.path.isdir(fixture.fn_result))\n  True\n  >>> fixture.cleanUp()\n\nThis can be expressed even more pithily:\n\n  >>> fixture = fixtures.FunctionFixture(tempfile.mkdtemp, shutil.rmtree)\n  >>> fixture.setUp()\n  >>> print (os.path.isdir(fixture.fn_result))\n  True\n  >>> fixture.cleanUp()\n\nAnother variation is MethodFixture which is useful for adapting alternate\nfixture implementations to Fixture::\n\n  >>> class MyServer:\n  ...    def start(self):\n  ...        pass\n  ...    def stop(self):\n  ...        pass\n  >>> server = MyServer()\n  >>> fixture = fixtures.MethodFixture(server, server.start, server.stop)\n\nYou can also combine existing fixtures using ``CompoundFixture``::\n\n  >>> noddy_with_log = fixtures.CompoundFixture([NoddyFixture(),\n  ...                                            WithLog()])\n  >>> with noddy_with_log as x:\n  ...     print (x.fixtures[0].frobnozzle)\n  42\n\nThe Fixture API\n===============\n\nThe example above introduces some of the Fixture API. In order to be able to\nclean up after a fixture has been used, all fixtures define a ``cleanUp``\nmethod which should be called when a fixture is finished with.\n\nBecause it's nice to be able to build a particular set of related fixtures in\nadvance of using them, fixtures also have a ``setUp`` method which should be\ncalled before trying to use them.\n\nOne common desire with fixtures that are expensive to create is to reuse them\nin many test cases; to support this the base Fixture also defines a ``reset``\nwhich calls ``self.cleanUp(); self.setUp()``. Fixtures that can more\nefficiently make themselves reusable should override this method. This can then\nbe used with multiple test state via things like ``testresources``,\n``setUpClass``, or ``setUpModule``.\n\nWhen using a fixture with a test you can manually call the setUp and cleanUp\nmethods. More convenient though is to use the included glue from\n``fixtures.TestWithFixtures`` which provides a mixin defining\n``useFixture`` (camel case because unittest is camel case throughout) method.\nIt will call setUp on the fixture, call self.addCleanup(fixture) to schedule a\ncleanup, and return the fixture. This lets one write::\n\n  >>> import testtools\n  >>> import unittest\n\nNote that we use testtools TestCase here as we need to guarantee a\nTestCase.addCleanup method in this doctest. Unittest2 - Python2.7 and above -\nalso have ``addCleanup``. testtools has it's own implementation of\n``useFixture`` so there is no need to use ``fixtures.TestWithFixtures`` with\n``testtools.TestCase``.\n\n  >>> class NoddyTest(testtools.TestCase, fixtures.TestWithFixtures):\n  ...     def test_example(self):\n  ...         fixture = self.useFixture(NoddyFixture())\n  ...         self.assertEqual(42, fixture.frobnozzle)\n  >>> result = unittest.TestResult()\n  >>> _ = NoddyTest('test_example').run(result)\n  >>> print (result.wasSuccessful())\n  True\n\nFixtures implement the context protocol, so you can also use a fixture as a\ncontext manager::\n\n  >>> with fixtures.FunctionFixture(setup_function, teardown_function) as fixture:\n  ...    print (os.path.isdir(fixture.fn_result))\n  True\n\nWhen multiple cleanups error, fixture.cleanUp() will raise a wrapper exception\nrather than choosing an arbitrary single exception to raise::\n\n  >>> import sys\n  >>> from fixtures.fixture import MultipleExceptions\n  >>> class BrokenFixture(fixtures.Fixture):\n  ...     def _setUp(self):\n  ...         self.addCleanup(lambda:1/0)\n  ...         self.addCleanup(lambda:1/0)\n  >>> fixture = BrokenFixture()\n  >>> fixture.setUp()\n  >>> try:\n  ...    fixture.cleanUp()\n  ... except MultipleExceptions:\n  ...    exc_info = sys.exc_info()\n  >>> print (exc_info[1].args[0][0].__name__)\n  ZeroDivisionError\n\nFixtures often expose diagnostic details that can be useful for tracking down\nissues. The ``getDetails`` method will return a dict of all the attached\ndetails, but can only be called before ``cleanUp`` is called. Each detail\nobject is an instance of ``testtools.content.Content``.\n\n  >>> with WithLog() as l:\n  ...     print(l.getDetails()['message'].as_text())\n  foo bar baz\n\nErrors in setUp\n+++++++++++++++\n\nThe examples above used ``_setUp`` rather than ``setUp`` because the base\nclass implementation of ``setUp`` acts to reduce the chance of leaking\nexternal resources if an error is raised from ``_setUp``. Specifically,\n``setUp`` contains a try:/except: block which catches all exceptions, captures\nany registered detail objects, and calls ``self.cleanUp`` before propagating\nthe error. As long as you take care to register any cleanups before calling\nthe code that may fail, this will cause them to be cleaned up. The captured\ndetail objects are provided to the args of the raised exception.\n\nIf the error that occured was a subclass of ``Exception`` then ``setUp`` will\nraise ``MultipleExceptions`` with the last element being a ``SetupError`` that\ncontains the detail objects. Otherwise, to prevent causing normally\nuncatchable errors like KeyboardInterrupt being caught inappropriately in the\ncalling layer, the original exception will be raised as-is and no diagnostic\ndata other than that from the original exception will be available.\n\nShared Dependencies\n+++++++++++++++++++\n\nA common use case within complex environments is having some fixtures shared by\nother ones.\n\nConsider the case of testing using a ``TempDir`` with two fixtures built on top\nof it; say a small database and a web server. Writing either one is nearly\ntrivial. However handling ``reset()`` correctly is hard: both the database and\nweb server would reasonably expect to be able to discard operating system\nresources they may have open within the temporary directory before its removed.\nA recursive ``reset()`` implementation would work for one, but not both.\nCalling ``reset()`` on the ``TempDir`` instance between each test is probably\ndesirable but we don't want to have to do a complete ``cleanUp`` of the higher\nlayer fixtures (which would make the ``TempDir`` be unused and trivially\nresettable. We have a few options available to us.\n\nImagine that the webserver does not depend on the DB fixture in any way - we\njust want the webserver and DB fixture to coexist in the same tempdir.\n\nA simple option is to just provide an explicit dependency fixture for the\nhigher layer fixtures to use.  This pushes complexity out of the core and onto\nusers of fixtures::\n\n  >>> class WithDep(fixtures.Fixture):\n  ...     def __init__(self, tempdir, dependency_fixture):\n  ...         super(WithDep, self).__init__()\n  ...         self.tempdir = tempdir\n  ...         self.dependency_fixture = dependency_fixture\n  ...     def setUp(self):\n  ...         super(WithDep, self).setUp()\n  ...         self.addCleanup(self.dependency_fixture.cleanUp)\n  ...         self.dependency_fixture.setUp()\n  ...         # we assume that at this point self.tempdir is usable.\n  >>> DB = WithDep\n  >>> WebServer = WithDep\n  >>> tempdir = fixtures.TempDir()\n  >>> db = DB(tempdir, tempdir)\n  >>> server = WebServer(tempdir, db)\n  >>> server.setUp()\n  >>> server.cleanUp()\n\nAnother option is to write the fixtures to gracefully handle a dependency\nbeing reset underneath them. This is insufficient if the fixtures would\nblock the dependency resetting (for instance by holding file locks open\nin a tempdir - on Windows this will prevent the directory being deleted).\n\nAnother approach which ``fixtures`` neither helps nor hinders is to raise\na signal of some sort for each user of a fixture before it is reset. In the\nexample here, ``TempDir`` might offer a subscribers attribute that both the\nDB and web server would be registered in. Calling ``reset`` or ``cleanUp``\non the tempdir would trigger a callback to all the subscribers; the DB and\nweb server reset methods would look something like:\n\n  >>> def reset(self):\n  ...     if not self._cleaned:\n  ...         self._clean()\n\n(Their action on the callback from the tempdir would be to do whatever work\nwas needed and set ``self._cleaned``.) This approach has the (perhaps)\nsuprising effect that resetting the webserver may reset the DB - if the\nwebserver were to be depending on ``tempdir.reset`` as a way to reset the\nwebservers state.\n\nAnother approach which is not currently implemented is to provide an object\ngraph of dependencies and a reset mechanism that can traverse that, along with\na separation between 'reset starting' and 'reset finishing' - the DB and\nwebserver would both have their ``reset_starting`` methods called, then the\ntempdir would be reset, and finally the DB and webserver would have\n``reset_finishing`` called.\n\nStock Fixtures\n==============\n\nIn addition to the Fixture, FunctionFixture and MethodFixture classes fixtures\nincludes a number of precanned fixtures. The API docs for fixtures will list\nthe complete set of these, should the dcs be out of date or not to hand. For\nthe complete feature set of each fixture please see the API docs.\n\nByteStream\n++++++++++\n\nTrivial adapter to make a BytesIO (though it may in future auto-spill to disk\nfor large content) and expose that as a detail object, for automatic inclusion\nin test failure descriptions. Very useful in combination with MonkeyPatch.\n\n  >>> fixture = fixtures.StringStream('my-content')\n  >>> fixture.setUp()\n  >>> with fixtures.MonkeyPatch('sys.something', fixture.stream):\n  ...     pass\n  >>> fixture.cleanUp()\n\nEnvironmentVariable\n+++++++++++++++++++\n\nIsolate your code from environmental variables, delete them or set them to a\nnew value.\n\n  >>> fixture = fixtures.EnvironmentVariable('HOME')\n\nFakeLogger\n++++++++++\n\nIsolate your code from an external logging configuration - so that your test\ngets the output from logged messages, but they don't go to e.g. the console.\n\n  >>> fixture = fixtures.FakeLogger()\n\nFakePopen\n+++++++++\n\nPretend to run an external command rather than needing it to be present to run\ntests.\n\n  >>> from testtools.compat import BytesIO\n  >>> fixture = fixtures.FakePopen(lambda _:{'stdout': BytesIO('foobar')})\n\nMockPatchObject\n+++++++++++++++\n\nAdapts ``mock.patch.object`` to be used as a Fixture.\n\n  >>> class Fred:\n  ...     value = 1\n  >>> fixture = fixtures.MockPatchObject(Fred, 'value', 2)\n  >>> with fixture:\n  ...     Fred().value\n  2\n  >>> Fred().value\n  1\n\nMockPatch\n+++++++++\n\nAdapts ``mock.patch`` to be used as a Fixture.\n\n  >>> fixture = fixtures.MockPatch('subprocess.Popen.returncode', 3)\n\nMockPatchMultiple\n+++++++++++++++++\n\nAdapts ``mock.patch.multiple`` to be used as a Fixture.\n\n  >>> fixture = fixtures.MockPatchMultiple('subprocess.Popen', returncode=3)\n\nMonkeyPatch\n+++++++++++\n\nControl the value of a named python attribute.\n\n  >>> def fake_open(path, mode):\n  ...     pass\n  >>> fixture = fixtures.MonkeyPatch('__builtin__.open', fake_open)\n\nNote that there are some complexities when patching methods - please see the\nAPI documentation for details.\n\nNestedTempfile\n++++++++++++++\n\nChange the default directory that the tempfile module places temporary files\nand directories in. This can be useful for containing the noise created by\ncode which doesn't clean up its temporary files. This does not affect\ntemporary file creation where an explicit containing directory was provided.\n\n  >>> fixture = fixtures.NestedTempfile()\n\nPackagePathEntry\n++++++++++++++++\n\nAdds a single directory to the path for an existing python package. This adds\nto the package.__path__ list. If the directory is already in the path, nothing\nhappens, if it isn't then it is added on setUp and removed on cleanUp.\n\n  >>> fixture = fixtures.PackagePathEntry('package/name', '/foo/bar')\n\nPythonPackage\n+++++++++++++\n\nCreates a python package directory. Particularly useful for testing code that\ndynamically loads packages/modules, or for mocking out the command line entry\npoints to Python programs.\n\n  >>> fixture = fixtures.PythonPackage('foo.bar', [('quux.py', '')])\n\nPythonPathEntry\n+++++++++++++++\n\nAdds a single directory to sys.path. If the directory is already in the path,\nnothing happens, if it isn't then it is added on setUp and removed on cleanUp.\n\n  >>> fixture = fixtures.PythonPathEntry('/foo/bar')\n\nStringStream\n++++++++++++\n\nTrivial adapter to make a StringIO (though it may in future auto-spill to disk\nfor large content) and expose that as a detail object, for automatic inclusion\nin test failure descriptions. Very useful in combination with MonkeyPatch.\n\n  >>> fixture = fixtures.StringStream('stdout')\n  >>> fixture.setUp()\n  >>> with fixtures.MonkeyPatch('sys.stdout', fixture.stream):\n  ...     pass\n  >>> fixture.cleanUp()\n\nTempDir\n+++++++\n\nCreate a temporary directory and clean it up later.\n\n  >>> fixture = fixtures.TempDir()\n\nThe created directory is stored in the ``path`` attribute of the fixture after\nsetUp.\n\nTempHomeDir\n+++++++++++\n\nCreate a temporary directory and set it as $HOME in the environment.\n\n  >>> fixture = fixtures.TempHomeDir()\n\nThe created directory is stored in the ``path`` attribute of the fixture after\nsetUp.\n\nThe environment will now have $HOME set to the same path, and the value\nwill be returned to its previous value after tearDown.\n\nTimeout\n+++++++\n\nAborts if the covered code takes more than a specified number of whole wall-clock\nseconds.\n\nThere are two possibilities, controlled by the 'gentle' argument: when gentle,\nan exception will be raised and the test (or other covered code) will fail.\nWhen not gentle, the entire process will be terminated, which is less clean,\nbut more likely to break hangs where no Python code is running.  \n\n*Caution:* Only one timeout can be active at any time across all threads in a\nsingle process.  Using more than one has undefined results.  (This could be\nimproved by chaining alarms.)\n\n*Note:* Currently supported only on Unix because it relies on the ``alarm``\nsystem call.\n\nContributing\n============\n\nFixtures has its project homepage on Launchpad\n<https://launchpad.net/python-fixtures>. Source code is hosted on GitHub\n<https://github.com/testing-cabal/fixtures>.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://launchpad.net/python-fixtures", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "fixtures", "package_url": "https://pypi.org/project/fixtures/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fixtures/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://launchpad.net/python-fixtures"}, "release_url": "https://pypi.org/project/fixtures/3.0.0/", "requires_dist": null, "requires_python": null, "summary": "Fixtures, reusable state for writing clean tests and more.", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p>Copyright (c) 2010, Robert Collins &lt;<a href=\"mailto:robertc%40robertcollins.net\">robertc<span>@</span>robertcollins<span>.</span>net</a>&gt;</p>\n<p>Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\nlicense at the users choice. A copy of both licenses are available in the\nproject source as Apache-2.0 and BSD. You may not use this file except in\ncompliance with one of these two licences.</p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under these licenses is distributed on an \u201cAS IS\u201d BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\nlicense you chose for the specific language governing permissions and\nlimitations under that license.</p>\n</blockquote>\n<p>Fixtures defines a Python contract for reusable state / support logic,\nprimarily for unit testing. Helper and adaption logic is included to make it\neasy to write your own fixtures using the fixtures contract. Glue code is\nprovided that makes using fixtures that meet the Fixtures contract in unittest\ncompatible test cases easy and straight forward.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 2.6+, or 3.3+\nThis is the base language fixtures is written in and for.</li>\n<li>pbr\nUsed for version and release management of fixtures.</li>\n<li>testtools &lt;<a href=\"https://launchpad.net/testtools\" rel=\"nofollow\">https://launchpad.net/testtools</a>&gt; 0.9.22 or newer.\ntesttools provides helpful glue functions for the details API used to report\ninformation about a fixture (whether its used in a testing or production\nenvironment).</li>\n</ul>\n<p>For use in a unit test suite using the included glue, one of:</p>\n<ul>\n<li>Python 2.7+</li>\n<li>unittest2</li>\n<li>bzrlib.tests</li>\n<li>Or any other test environment that supports TestCase.addCleanup.</li>\n</ul>\n<p>Writing your own glue code is easy, or you can simply use Fixtures directly\nwithout any support code.</p>\n<p>To run the test suite for fixtures, testtools is needed.</p>\n</div>\n<div id=\"why-fixtures\">\n<h2>Why Fixtures</h2>\n<p>Standard Python unittest.py provides no obvious method for making and reusing\nstate needed in a test case other than by adding a method on the test class.\nThis scales poorly - complex helper functions propagating up a test class\nhierarchy is a regular pattern when this is done. Mocking while a great tool\ndoesn\u2019t itself prevent this (and helpers to mock complex things can accumulate\nin the same way if placed on the test class).</p>\n<p>By defining a uniform contract where helpers have no dependency on the test\nclass we permit all the regular code hygiene activities to take place without\nthe distorting influence of being in a class hierarchy that is modelling an\nentirely different thing - which is what helpers on a TestCase suffer from.</p>\n</div>\n<div id=\"about-fixtures\">\n<h2>About Fixtures</h2>\n<p>A Fixture represents some state. Each fixture has attributes on it that are\nspecific to the fixture. For instance, a fixture representing a directory that\ncan be used for temporary files might have a attribute \u2018path\u2019.</p>\n<p>Most fixtures have complete <tt>pydoc</tt> documentation, so be sure to check\n<tt>pydoc fixtures</tt> for usage information.</p>\n</div>\n<div id=\"creating-fixtures\">\n<h2>Creating Fixtures</h2>\n<p>Minimally, subclass Fixture, define _setUp to initialize your state and schedule\na cleanup for when cleanUp is called and you\u2019re done:</p>\n<pre>&gt;&gt;&gt; import unittest\n&gt;&gt;&gt; import fixtures\n&gt;&gt;&gt; class NoddyFixture(fixtures.Fixture):\n...     def _setUp(self):\n...         self.frobnozzle = 42\n...         self.addCleanup(delattr, self, 'frobnozzle')\n</pre>\n<p>This will initialize frobnozzle when <tt>setUp</tt> is called, and when <tt>cleanUp</tt>\nis called get rid of the frobnozzle attribute. Prior to version 1.3.0 fixtures\nrecommended overriding <tt>setUp</tt>. This is still supported, but since it is\nharder to write leak-free fixtures in this fashion, it is not recommended.</p>\n<p>If your fixture has diagnostic data - for instance the log file of an\napplication server, or log messages, it can expose that by creating a content\nobject (<tt>testtools.content.Content</tt>) and calling <tt>addDetail</tt>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from testtools.content import text_content\n&gt;&gt;&gt; class WithLog(fixtures.Fixture):\n...     def _setUp(self):\n...         self.addDetail('message', text_content('foo bar baz'))\n</pre>\n</blockquote>\n<p>The method <tt>useFixture</tt> will use another fixture, call <tt>setUp</tt> on it, call\n<tt>self.addCleanup(thefixture.cleanUp)</tt>, attach any details from it and return\nthe fixture. This allows simple composition of different fixtures.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class ReusingFixture(fixtures.Fixture):\n...     def _setUp(self):\n...         self.noddy = self.useFixture(NoddyFixture())\n</pre>\n</blockquote>\n<p>There is a helper for adapting a function or function pair into Fixtures. it\nputs the result of the function in fn_result:</p>\n<pre>&gt;&gt;&gt; import os.path\n&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; def setup_function():\n...     return tempfile.mkdtemp()\n&gt;&gt;&gt; def teardown_function(fixture):\n...     shutil.rmtree(fixture)\n&gt;&gt;&gt; fixture = fixtures.FunctionFixture(setup_function, teardown_function)\n&gt;&gt;&gt; fixture.setUp()\n&gt;&gt;&gt; print (os.path.isdir(fixture.fn_result))\nTrue\n&gt;&gt;&gt; fixture.cleanUp()\n</pre>\n<p>This can be expressed even more pithily:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.FunctionFixture(tempfile.mkdtemp, shutil.rmtree)\n&gt;&gt;&gt; fixture.setUp()\n&gt;&gt;&gt; print (os.path.isdir(fixture.fn_result))\nTrue\n&gt;&gt;&gt; fixture.cleanUp()\n</pre>\n</blockquote>\n<p>Another variation is MethodFixture which is useful for adapting alternate\nfixture implementations to Fixture:</p>\n<pre>&gt;&gt;&gt; class MyServer:\n...    def start(self):\n...        pass\n...    def stop(self):\n...        pass\n&gt;&gt;&gt; server = MyServer()\n&gt;&gt;&gt; fixture = fixtures.MethodFixture(server, server.start, server.stop)\n</pre>\n<p>You can also combine existing fixtures using <tt>CompoundFixture</tt>:</p>\n<pre>&gt;&gt;&gt; noddy_with_log = fixtures.CompoundFixture([NoddyFixture(),\n...                                            WithLog()])\n&gt;&gt;&gt; with noddy_with_log as x:\n...     print (x.fixtures[0].frobnozzle)\n42\n</pre>\n</div>\n<div id=\"the-fixture-api\">\n<h2>The Fixture API</h2>\n<p>The example above introduces some of the Fixture API. In order to be able to\nclean up after a fixture has been used, all fixtures define a <tt>cleanUp</tt>\nmethod which should be called when a fixture is finished with.</p>\n<p>Because it\u2019s nice to be able to build a particular set of related fixtures in\nadvance of using them, fixtures also have a <tt>setUp</tt> method which should be\ncalled before trying to use them.</p>\n<p>One common desire with fixtures that are expensive to create is to reuse them\nin many test cases; to support this the base Fixture also defines a <tt>reset</tt>\nwhich calls <tt><span class=\"pre\">self.cleanUp();</span> self.setUp()</tt>. Fixtures that can more\nefficiently make themselves reusable should override this method. This can then\nbe used with multiple test state via things like <tt>testresources</tt>,\n<tt>setUpClass</tt>, or <tt>setUpModule</tt>.</p>\n<p>When using a fixture with a test you can manually call the setUp and cleanUp\nmethods. More convenient though is to use the included glue from\n<tt>fixtures.TestWithFixtures</tt> which provides a mixin defining\n<tt>useFixture</tt> (camel case because unittest is camel case throughout) method.\nIt will call setUp on the fixture, call self.addCleanup(fixture) to schedule a\ncleanup, and return the fixture. This lets one write:</p>\n<pre>&gt;&gt;&gt; import testtools\n&gt;&gt;&gt; import unittest\n</pre>\n<p>Note that we use testtools TestCase here as we need to guarantee a\nTestCase.addCleanup method in this doctest. Unittest2 - Python2.7 and above -\nalso have <tt>addCleanup</tt>. testtools has it\u2019s own implementation of\n<tt>useFixture</tt> so there is no need to use <tt>fixtures.TestWithFixtures</tt> with\n<tt>testtools.TestCase</tt>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class NoddyTest(testtools.TestCase, fixtures.TestWithFixtures):\n...     def test_example(self):\n...         fixture = self.useFixture(NoddyFixture())\n...         self.assertEqual(42, fixture.frobnozzle)\n&gt;&gt;&gt; result = unittest.TestResult()\n&gt;&gt;&gt; _ = NoddyTest('test_example').run(result)\n&gt;&gt;&gt; print (result.wasSuccessful())\nTrue\n</pre>\n</blockquote>\n<p>Fixtures implement the context protocol, so you can also use a fixture as a\ncontext manager:</p>\n<pre>&gt;&gt;&gt; with fixtures.FunctionFixture(setup_function, teardown_function) as fixture:\n...    print (os.path.isdir(fixture.fn_result))\nTrue\n</pre>\n<p>When multiple cleanups error, fixture.cleanUp() will raise a wrapper exception\nrather than choosing an arbitrary single exception to raise:</p>\n<pre>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; from fixtures.fixture import MultipleExceptions\n&gt;&gt;&gt; class BrokenFixture(fixtures.Fixture):\n...     def _setUp(self):\n...         self.addCleanup(lambda:1/0)\n...         self.addCleanup(lambda:1/0)\n&gt;&gt;&gt; fixture = BrokenFixture()\n&gt;&gt;&gt; fixture.setUp()\n&gt;&gt;&gt; try:\n...    fixture.cleanUp()\n... except MultipleExceptions:\n...    exc_info = sys.exc_info()\n&gt;&gt;&gt; print (exc_info[1].args[0][0].__name__)\nZeroDivisionError\n</pre>\n<p>Fixtures often expose diagnostic details that can be useful for tracking down\nissues. The <tt>getDetails</tt> method will return a dict of all the attached\ndetails, but can only be called before <tt>cleanUp</tt> is called. Each detail\nobject is an instance of <tt>testtools.content.Content</tt>.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; with WithLog() as l:\n...     print(l.getDetails()['message'].as_text())\nfoo bar baz\n</pre>\n</blockquote>\n<div id=\"errors-in-setup\">\n<h3>Errors in setUp</h3>\n<p>The examples above used <tt>_setUp</tt> rather than <tt>setUp</tt> because the base\nclass implementation of <tt>setUp</tt> acts to reduce the chance of leaking\nexternal resources if an error is raised from <tt>_setUp</tt>. Specifically,\n<tt>setUp</tt> contains a try:/except: block which catches all exceptions, captures\nany registered detail objects, and calls <tt>self.cleanUp</tt> before propagating\nthe error. As long as you take care to register any cleanups before calling\nthe code that may fail, this will cause them to be cleaned up. The captured\ndetail objects are provided to the args of the raised exception.</p>\n<p>If the error that occured was a subclass of <tt>Exception</tt> then <tt>setUp</tt> will\nraise <tt>MultipleExceptions</tt> with the last element being a <tt>SetupError</tt> that\ncontains the detail objects. Otherwise, to prevent causing normally\nuncatchable errors like KeyboardInterrupt being caught inappropriately in the\ncalling layer, the original exception will be raised as-is and no diagnostic\ndata other than that from the original exception will be available.</p>\n</div>\n<div id=\"shared-dependencies\">\n<h3>Shared Dependencies</h3>\n<p>A common use case within complex environments is having some fixtures shared by\nother ones.</p>\n<p>Consider the case of testing using a <tt>TempDir</tt> with two fixtures built on top\nof it; say a small database and a web server. Writing either one is nearly\ntrivial. However handling <tt>reset()</tt> correctly is hard: both the database and\nweb server would reasonably expect to be able to discard operating system\nresources they may have open within the temporary directory before its removed.\nA recursive <tt>reset()</tt> implementation would work for one, but not both.\nCalling <tt>reset()</tt> on the <tt>TempDir</tt> instance between each test is probably\ndesirable but we don\u2019t want to have to do a complete <tt>cleanUp</tt> of the higher\nlayer fixtures (which would make the <tt>TempDir</tt> be unused and trivially\nresettable. We have a few options available to us.</p>\n<p>Imagine that the webserver does not depend on the DB fixture in any way - we\njust want the webserver and DB fixture to coexist in the same tempdir.</p>\n<p>A simple option is to just provide an explicit dependency fixture for the\nhigher layer fixtures to use.  This pushes complexity out of the core and onto\nusers of fixtures:</p>\n<pre>&gt;&gt;&gt; class WithDep(fixtures.Fixture):\n...     def __init__(self, tempdir, dependency_fixture):\n...         super(WithDep, self).__init__()\n...         self.tempdir = tempdir\n...         self.dependency_fixture = dependency_fixture\n...     def setUp(self):\n...         super(WithDep, self).setUp()\n...         self.addCleanup(self.dependency_fixture.cleanUp)\n...         self.dependency_fixture.setUp()\n...         # we assume that at this point self.tempdir is usable.\n&gt;&gt;&gt; DB = WithDep\n&gt;&gt;&gt; WebServer = WithDep\n&gt;&gt;&gt; tempdir = fixtures.TempDir()\n&gt;&gt;&gt; db = DB(tempdir, tempdir)\n&gt;&gt;&gt; server = WebServer(tempdir, db)\n&gt;&gt;&gt; server.setUp()\n&gt;&gt;&gt; server.cleanUp()\n</pre>\n<p>Another option is to write the fixtures to gracefully handle a dependency\nbeing reset underneath them. This is insufficient if the fixtures would\nblock the dependency resetting (for instance by holding file locks open\nin a tempdir - on Windows this will prevent the directory being deleted).</p>\n<p>Another approach which <tt>fixtures</tt> neither helps nor hinders is to raise\na signal of some sort for each user of a fixture before it is reset. In the\nexample here, <tt>TempDir</tt> might offer a subscribers attribute that both the\nDB and web server would be registered in. Calling <tt>reset</tt> or <tt>cleanUp</tt>\non the tempdir would trigger a callback to all the subscribers; the DB and\nweb server reset methods would look something like:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def reset(self):\n...     if not self._cleaned:\n...         self._clean()\n</pre>\n</blockquote>\n<p>(Their action on the callback from the tempdir would be to do whatever work\nwas needed and set <tt>self._cleaned</tt>.) This approach has the (perhaps)\nsuprising effect that resetting the webserver may reset the DB - if the\nwebserver were to be depending on <tt>tempdir.reset</tt> as a way to reset the\nwebservers state.</p>\n<p>Another approach which is not currently implemented is to provide an object\ngraph of dependencies and a reset mechanism that can traverse that, along with\na separation between \u2018reset starting\u2019 and \u2018reset finishing\u2019 - the DB and\nwebserver would both have their <tt>reset_starting</tt> methods called, then the\ntempdir would be reset, and finally the DB and webserver would have\n<tt>reset_finishing</tt> called.</p>\n</div>\n</div>\n<div id=\"stock-fixtures\">\n<h2>Stock Fixtures</h2>\n<p>In addition to the Fixture, FunctionFixture and MethodFixture classes fixtures\nincludes a number of precanned fixtures. The API docs for fixtures will list\nthe complete set of these, should the dcs be out of date or not to hand. For\nthe complete feature set of each fixture please see the API docs.</p>\n<div id=\"bytestream\">\n<h3>ByteStream</h3>\n<p>Trivial adapter to make a BytesIO (though it may in future auto-spill to disk\nfor large content) and expose that as a detail object, for automatic inclusion\nin test failure descriptions. Very useful in combination with MonkeyPatch.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.StringStream('my-content')\n&gt;&gt;&gt; fixture.setUp()\n&gt;&gt;&gt; with fixtures.MonkeyPatch('sys.something', fixture.stream):\n...     pass\n&gt;&gt;&gt; fixture.cleanUp()\n</pre>\n</blockquote>\n</div>\n<div id=\"environmentvariable\">\n<h3>EnvironmentVariable</h3>\n<p>Isolate your code from environmental variables, delete them or set them to a\nnew value.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.EnvironmentVariable('HOME')\n</pre>\n</blockquote>\n</div>\n<div id=\"fakelogger\">\n<h3>FakeLogger</h3>\n<p>Isolate your code from an external logging configuration - so that your test\ngets the output from logged messages, but they don\u2019t go to e.g. the console.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.FakeLogger()\n</pre>\n</blockquote>\n</div>\n<div id=\"fakepopen\">\n<h3>FakePopen</h3>\n<p>Pretend to run an external command rather than needing it to be present to run\ntests.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from testtools.compat import BytesIO\n&gt;&gt;&gt; fixture = fixtures.FakePopen(lambda _:{'stdout': BytesIO('foobar')})\n</pre>\n</blockquote>\n</div>\n<div id=\"mockpatchobject\">\n<h3>MockPatchObject</h3>\n<p>Adapts <tt>mock.patch.object</tt> to be used as a Fixture.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Fred:\n...     value = 1\n&gt;&gt;&gt; fixture = fixtures.MockPatchObject(Fred, 'value', 2)\n&gt;&gt;&gt; with fixture:\n...     Fred().value\n2\n&gt;&gt;&gt; Fred().value\n1\n</pre>\n</blockquote>\n</div>\n<div id=\"mockpatch\">\n<h3>MockPatch</h3>\n<p>Adapts <tt>mock.patch</tt> to be used as a Fixture.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.MockPatch('subprocess.Popen.returncode', 3)\n</pre>\n</blockquote>\n</div>\n<div id=\"mockpatchmultiple\">\n<h3>MockPatchMultiple</h3>\n<p>Adapts <tt>mock.patch.multiple</tt> to be used as a Fixture.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.MockPatchMultiple('subprocess.Popen', returncode=3)\n</pre>\n</blockquote>\n</div>\n<div id=\"monkeypatch\">\n<h3>MonkeyPatch</h3>\n<p>Control the value of a named python attribute.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def fake_open(path, mode):\n...     pass\n&gt;&gt;&gt; fixture = fixtures.MonkeyPatch('__builtin__.open', fake_open)\n</pre>\n</blockquote>\n<p>Note that there are some complexities when patching methods - please see the\nAPI documentation for details.</p>\n</div>\n<div id=\"nestedtempfile\">\n<h3>NestedTempfile</h3>\n<p>Change the default directory that the tempfile module places temporary files\nand directories in. This can be useful for containing the noise created by\ncode which doesn\u2019t clean up its temporary files. This does not affect\ntemporary file creation where an explicit containing directory was provided.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.NestedTempfile()\n</pre>\n</blockquote>\n</div>\n<div id=\"packagepathentry\">\n<h3>PackagePathEntry</h3>\n<p>Adds a single directory to the path for an existing python package. This adds\nto the package.__path__ list. If the directory is already in the path, nothing\nhappens, if it isn\u2019t then it is added on setUp and removed on cleanUp.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.PackagePathEntry('package/name', '/foo/bar')\n</pre>\n</blockquote>\n</div>\n<div id=\"pythonpackage\">\n<h3>PythonPackage</h3>\n<p>Creates a python package directory. Particularly useful for testing code that\ndynamically loads packages/modules, or for mocking out the command line entry\npoints to Python programs.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.PythonPackage('foo.bar', [('quux.py', '')])\n</pre>\n</blockquote>\n</div>\n<div id=\"pythonpathentry\">\n<h3>PythonPathEntry</h3>\n<p>Adds a single directory to sys.path. If the directory is already in the path,\nnothing happens, if it isn\u2019t then it is added on setUp and removed on cleanUp.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.PythonPathEntry('/foo/bar')\n</pre>\n</blockquote>\n</div>\n<div id=\"stringstream\">\n<h3>StringStream</h3>\n<p>Trivial adapter to make a StringIO (though it may in future auto-spill to disk\nfor large content) and expose that as a detail object, for automatic inclusion\nin test failure descriptions. Very useful in combination with MonkeyPatch.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.StringStream('stdout')\n&gt;&gt;&gt; fixture.setUp()\n&gt;&gt;&gt; with fixtures.MonkeyPatch('sys.stdout', fixture.stream):\n...     pass\n&gt;&gt;&gt; fixture.cleanUp()\n</pre>\n</blockquote>\n</div>\n<div id=\"tempdir\">\n<h3>TempDir</h3>\n<p>Create a temporary directory and clean it up later.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.TempDir()\n</pre>\n</blockquote>\n<p>The created directory is stored in the <tt>path</tt> attribute of the fixture after\nsetUp.</p>\n</div>\n<div id=\"temphomedir\">\n<h3>TempHomeDir</h3>\n<p>Create a temporary directory and set it as $HOME in the environment.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fixture = fixtures.TempHomeDir()\n</pre>\n</blockquote>\n<p>The created directory is stored in the <tt>path</tt> attribute of the fixture after\nsetUp.</p>\n<p>The environment will now have $HOME set to the same path, and the value\nwill be returned to its previous value after tearDown.</p>\n</div>\n<div id=\"timeout\">\n<h3>Timeout</h3>\n<p>Aborts if the covered code takes more than a specified number of whole wall-clock\nseconds.</p>\n<p>There are two possibilities, controlled by the \u2018gentle\u2019 argument: when gentle,\nan exception will be raised and the test (or other covered code) will fail.\nWhen not gentle, the entire process will be terminated, which is less clean,\nbut more likely to break hangs where no Python code is running.</p>\n<p><em>Caution:</em> Only one timeout can be active at any time across all threads in a\nsingle process.  Using more than one has undefined results.  (This could be\nimproved by chaining alarms.)</p>\n<p><em>Note:</em> Currently supported only on Unix because it relies on the <tt>alarm</tt>\nsystem call.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Fixtures has its project homepage on Launchpad\n&lt;<a href=\"https://launchpad.net/python-fixtures\" rel=\"nofollow\">https://launchpad.net/python-fixtures</a>&gt;. Source code is hosted on GitHub\n&lt;<a href=\"https://github.com/testing-cabal/fixtures\" rel=\"nofollow\">https://github.com/testing-cabal/fixtures</a>&gt;.</p>\n</div>\n\n          </div>"}, "last_serial": 6657088, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f924c484d7eea3b00f31bf51192ce36a", "sha256": "df4dde48ef28a2fdfb1e850564fb245cc43b576db329906862fb0326a6e5e658"}, "downloads": -1, "filename": "fixtures-0.1.tar.gz", "has_sig": true, "md5_digest": "f924c484d7eea3b00f31bf51192ce36a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13696, "upload_time": "2010-08-15T11:04:09", "upload_time_iso_8601": "2010-08-15T11:04:09.595686Z", "url": "https://files.pythonhosted.org/packages/66/cc/7f7903b886239445bf18768e2c18649d24986f19628635973919624274ad/fixtures-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c210391563de9b2c1b38a072e8d40450", "sha256": "db7a9bc37345700b0f726cbb49dd7858435cae35def70c9158339366bc6ea8f5"}, "downloads": -1, "filename": "fixtures-0.2.tar.gz", "has_sig": true, "md5_digest": "c210391563de9b2c1b38a072e8d40450", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15056, "upload_time": "2010-09-11T11:09:51", "upload_time_iso_8601": "2010-09-11T11:09:51.406557Z", "url": "https://files.pythonhosted.org/packages/5b/94/46b0fff96f6737132157bdac69b28c5df9c7876f285580e568fa9185f9c5/fixtures-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "97fbafa27c62151b9b05419c399d455e", "sha256": "6c715adb31ba5a67595af6ee08654b34528097a0c7c243cf37c5043150473b3a"}, "downloads": -1, "filename": "fixtures-0.3.tar.gz", "has_sig": true, "md5_digest": "97fbafa27c62151b9b05419c399d455e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14830, "upload_time": "2010-09-18T04:59:24", "upload_time_iso_8601": "2010-09-18T04:59:24.187075Z", "url": "https://files.pythonhosted.org/packages/37/4e/3c9414487f2a5a3417c466fad1f32cec7b24fe0efa76cf7b0fd8953aeacd/fixtures-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "23b7dbb5fcdaca3121850048f978d11c", "sha256": "94ea953efd1a7c3e11ff7903e16eeb5b5e1eec0f2fbfa17646a19ff20dbf334d"}, "downloads": -1, "filename": "fixtures-0.3.1.tar.gz", "has_sig": true, "md5_digest": "23b7dbb5fcdaca3121850048f978d11c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16220, "upload_time": "2010-10-15T08:06:38", "upload_time_iso_8601": "2010-10-15T08:06:38.545059Z", "url": "https://files.pythonhosted.org/packages/e3/92/bcb2a3f8a1cd520cf73ce6b38acdad22f3a1bca5ca6e781fd30d833fb9d7/fixtures-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "449d1c6391a375749cc49b0288c6a7e3", "sha256": "977dece9756d68aa4d54257678be3d76842f5e4dd63bfcb72537d9a47c6d8bef"}, "downloads": -1, "filename": "fixtures-0.3.10.tar.gz", "has_sig": true, "md5_digest": "449d1c6391a375749cc49b0288c6a7e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32406, "upload_time": "2012-12-11T01:20:38", "upload_time_iso_8601": "2012-12-11T01:20:38.916246Z", "url": "https://files.pythonhosted.org/packages/87/0a/2ffb91fa933ad3c158c594368ef5d5b933b02f350fb9dc6da5e93252452e/fixtures-0.3.10.tar.gz", "yanked": false}], "0.3.11": [{"comment_text": "", "digests": {"md5": "27c7fc5759a527865ba595fefce7d997", "sha256": "81b4dcd109cd483d3c82a471c38cb38b7a37502d13621a3f16ccc8771162a5a1"}, "downloads": -1, "filename": "fixtures-0.3.11.tar.gz", "has_sig": true, "md5_digest": "27c7fc5759a527865ba595fefce7d997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34289, "upload_time": "2012-12-17T00:10:18", "upload_time_iso_8601": "2012-12-17T00:10:18.206057Z", "url": "https://files.pythonhosted.org/packages/d1/37/96566628660d69871c7971cc591d5d897dea3c11133e7f2bf8cb8c45bb6f/fixtures-0.3.11.tar.gz", "yanked": false}], "0.3.12": [{"comment_text": "", "digests": {"md5": "53111c85d15b42a144c690c6ecd29260", "sha256": "6e70e85f822303f046ad93a15072ba9b98e31a61732642b658f0b7ea68588aa0"}, "downloads": -1, "filename": "fixtures-0.3.12.tar.gz", "has_sig": true, "md5_digest": "53111c85d15b42a144c690c6ecd29260", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34405, "upload_time": "2012-12-17T00:38:43", "upload_time_iso_8601": "2012-12-17T00:38:43.484527Z", "url": "https://files.pythonhosted.org/packages/18/eb/63b2642d18116b295941505362b4b5928c1335c88cea38a87525f83942ef/fixtures-0.3.12.tar.gz", "yanked": false}], "0.3.13": [{"comment_text": "", "digests": {"md5": "d5302f84be9aa2afdf8421524f3afed2", "sha256": "3d3a8c737494062c55860a7c9775c2ea16ed2f9f311de9b7784115c410d0c873"}, "downloads": -1, "filename": "fixtures-0.3.13.tar.gz", "has_sig": true, "md5_digest": "d5302f84be9aa2afdf8421524f3afed2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34474, "upload_time": "2013-08-16T00:53:46", "upload_time_iso_8601": "2013-08-16T00:53:46.323628Z", "url": "https://files.pythonhosted.org/packages/aa/8f/e83a911f19432c2b39f6924c03289fb20ba1bf2747514f1af3157888eba1/fixtures-0.3.13.tar.gz", "yanked": false}], "0.3.14": [{"comment_text": "", "digests": {"md5": "c63c79c87405dbdc8e0f877c3ff583fd", "sha256": "4cc3313e52519d2671bd22aacd4b3fde9d96b31eb49db04a7cd5ccc61fec5139"}, "downloads": -1, "filename": "fixtures-0.3.14.tar.gz", "has_sig": true, "md5_digest": "c63c79c87405dbdc8e0f877c3ff583fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34586, "upload_time": "2013-08-16T03:04:54", "upload_time_iso_8601": "2013-08-16T03:04:54.046231Z", "url": "https://files.pythonhosted.org/packages/a6/2b/1c53893921d1389aeeed5ae6250968ae9f00bb84c5eb06fb09814834c37f/fixtures-0.3.14.tar.gz", "yanked": false}], "0.3.15": [{"comment_text": "", "digests": {"md5": "fd8328bba8fab80c58be3e3d578c8b49", "sha256": "22ca5830f58587fa1bcb61ba01e2bc051fb554240f44816a93501a558c3d88df"}, "downloads": -1, "filename": "fixtures-0.3.15.tar.gz", "has_sig": true, "md5_digest": "fd8328bba8fab80c58be3e3d578c8b49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39126, "upload_time": "2014-08-22T03:07:29", "upload_time_iso_8601": "2014-08-22T03:07:29.605627Z", "url": "https://files.pythonhosted.org/packages/78/a0/89b7d93c8d651475ee0dce41c2ecd35bd98dbe7ee4dc05293e82c4afb94f/fixtures-0.3.15.tar.gz", "yanked": false}], "0.3.16": [{"comment_text": "", "digests": {"md5": "1c636aaa3fd316f2b780464f8a1f63d9", "sha256": "4cab74a99aec9345f3cdb41414f08f4b7d93deef0b9849ca2b2f321af9133975"}, "downloads": -1, "filename": "fixtures-0.3.16.tar.gz", "has_sig": true, "md5_digest": "1c636aaa3fd316f2b780464f8a1f63d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39153, "upload_time": "2014-08-22T04:31:09", "upload_time_iso_8601": "2014-08-22T04:31:09.782987Z", "url": "https://files.pythonhosted.org/packages/4d/f0/f9263f32224446af80e06d033210e0af34ced1cd6256d604b2fa1b3a9e21/fixtures-0.3.16.tar.gz", "yanked": false}], "0.3.17": [{"comment_text": "", "digests": {"md5": "ff3f26777155447bebea3adb358829a4", "sha256": "37924a85b6a2e31c346f8ee15d0c67c9dde704a69802e3d422ca4ef2eb58f38c"}, "downloads": -1, "filename": "fixtures-0.3.17.tar.gz", "has_sig": true, "md5_digest": "ff3f26777155447bebea3adb358829a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43947, "upload_time": "2014-09-25T21:10:32", "upload_time_iso_8601": "2014-09-25T21:10:32.874812Z", "url": "https://files.pythonhosted.org/packages/f1/4a/0fa67e8966f11b940eaed472fc59f02696f0a5df8e3ae6aa8f0b1aa54bdc/fixtures-0.3.17.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8c9d07f46f7fd1bc34719523b2cef9b4", "sha256": "9229daf19f2f9aa1531c3890e02fe865277ef33eb965a48fc2e5248927e6c084"}, "downloads": -1, "filename": "fixtures-0.3.2.tar.gz", "has_sig": true, "md5_digest": "8c9d07f46f7fd1bc34719523b2cef9b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16848, "upload_time": "2010-10-17T11:45:54", "upload_time_iso_8601": "2010-10-17T11:45:54.062015Z", "url": "https://files.pythonhosted.org/packages/b9/d7/7aebeb4134b93693601df9d8df958d1df12145a4ac0d3a7a51189aacc1ff/fixtures-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "9df0c0aecc6678141bb4b8c6eebae699", "sha256": "a06b65c8b1a8fa35953d4a31330fe3b6bb4e1b0d33cc642ed5b9738980fd6424"}, "downloads": -1, "filename": "fixtures-0.3.3.tar.gz", "has_sig": true, "md5_digest": "9df0c0aecc6678141bb4b8c6eebae699", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17054, "upload_time": "2010-10-20T00:02:27", "upload_time_iso_8601": "2010-10-20T00:02:27.274143Z", "url": "https://files.pythonhosted.org/packages/06/59/ad255dcd334e47fcf700df1c17ff3200a161b7edcce310f7f7fa7364574a/fixtures-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "83cb35b7b6a925d10eedda3019c30fdb", "sha256": "02a765eaf500cf80ea28a6355d8052b09e790938460b3cdc4a556a65490e442f"}, "downloads": -1, "filename": "fixtures-0.3.4.tar.gz", "has_sig": true, "md5_digest": "83cb35b7b6a925d10eedda3019c30fdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18335, "upload_time": "2010-10-25T20:51:45", "upload_time_iso_8601": "2010-10-25T20:51:45.323983Z", "url": "https://files.pythonhosted.org/packages/be/ca/7aee1ab4a86145b569371183234ad528ede5241c4790d0884ab83461e86f/fixtures-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "2ecb4aca31da7dc6ebd64d169e604797", "sha256": "e6e1c55c46fdf84e411d0d75acc724f9f225b83492175c519987d4e3e2302ab0"}, "downloads": -1, "filename": "fixtures-0.3.5.tar.gz", "has_sig": true, "md5_digest": "2ecb4aca31da7dc6ebd64d169e604797", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20925, "upload_time": "2010-11-07T06:38:29", "upload_time_iso_8601": "2010-11-07T06:38:29.744026Z", "url": "https://files.pythonhosted.org/packages/9c/be/42ba8cb14b9c65507d010c30759f999d30535b2a6aec390b8d4bd769f034/fixtures-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "e4d51fa6770efb75bb8c74c0e52486da", "sha256": "13e4e9daf35a876954e7b910da52fddf896973162a8180763edf585e619ea98e"}, "downloads": -1, "filename": "fixtures-0.3.6.tar.gz", "has_sig": true, "md5_digest": "e4d51fa6770efb75bb8c74c0e52486da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25488, "upload_time": "2011-06-23T10:23:38", "upload_time_iso_8601": "2011-06-23T10:23:38.423489Z", "url": "https://files.pythonhosted.org/packages/0f/3d/b2aebf3963bf4b91dcdfaf8826b0ea90edcdfddd5f31a0e4992c85bfdc48/fixtures-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "c62dfd6e862f699e24a74d994f625777", "sha256": "a4eb2b926fb59db3a8e6e3fe4e6f9c67930d7936a7ba884b801c8094da84e368"}, "downloads": -1, "filename": "fixtures-0.3.7.tar.gz", "has_sig": true, "md5_digest": "c62dfd6e862f699e24a74d994f625777", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27342, "upload_time": "2011-11-22T09:14:27", "upload_time_iso_8601": "2011-11-22T09:14:27.344151Z", "url": "https://files.pythonhosted.org/packages/74/3a/da056cb5feb4214e6ae334f4d5428baf34373317996e376a7ba494b6c78e/fixtures-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "a96225df28f57c96bb4747c847361726", "sha256": "f5482a30b88b09333471c1aad3964853b795fe7e590b6035d918a4c6379212ee"}, "downloads": -1, "filename": "fixtures-0.3.8.tar.gz", "has_sig": true, "md5_digest": "a96225df28f57c96bb4747c847361726", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29742, "upload_time": "2011-12-05T06:18:17", "upload_time_iso_8601": "2011-12-05T06:18:17.048554Z", "url": "https://files.pythonhosted.org/packages/54/2a/0c84f8b6fdabac661275db806039ce08cff21f5a0055227000f5a00b5bf5/fixtures-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "51e99e696aa6d08e214353e5c99303e4", "sha256": "00d8893791f1cff4b29aa76e6c844374b8a171582ddeb96b8bce0468c36d8af8"}, "downloads": -1, "filename": "fixtures-0.3.9.tar.gz", "has_sig": true, "md5_digest": "51e99e696aa6d08e214353e5c99303e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29868, "upload_time": "2012-06-12T17:54:58", "upload_time_iso_8601": "2012-06-12T17:54:58.207138Z", "url": "https://files.pythonhosted.org/packages/58/13/38b4d99fa0b451dbc336516b900c5c22e9efff6aeb6d24aea05fe05970e0/fixtures-0.3.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4f3225a80397796be85729b659241610", "sha256": "4494c4862ad99ffb8354f7456f1c9a4ba68b607d9dabb912999d4ad60c7d9f54"}, "downloads": -1, "filename": "fixtures-1.0.0.tar.gz", "has_sig": true, "md5_digest": "4f3225a80397796be85729b659241610", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43925, "upload_time": "2014-10-27T20:28:09", "upload_time_iso_8601": "2014-10-27T20:28:09.792168Z", "url": "https://files.pythonhosted.org/packages/9a/75/a36bef06764ebfcca7209f3348e16b844e8a45ff05d87a85075886a7b8ed/fixtures-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0a28543f982de0c56a84e5117e3356ec", "sha256": "40c5027833c7c19ecc3407a91b8b7e1b361773e265adb06e104827a5c6768441"}, "downloads": -1, "filename": "fixtures-1.1.0-py2-none-any.whl", "has_sig": true, "md5_digest": "0a28543f982de0c56a84e5117e3356ec", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 57965, "upload_time": "2015-05-04T04:07:56", "upload_time_iso_8601": "2015-05-04T04:07:56.218427Z", "url": "https://files.pythonhosted.org/packages/13/d0/0f55ea655874f7a9503315437ba27398b409d8b1edd24de4f295019a2e25/fixtures-1.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73d51fa4603dc0875fc0c4b6d08b588e", "sha256": "24c951b891e0816d7db30564481bc4206e38b92c16baca02aecb711f23b2d5ca"}, "downloads": -1, "filename": "fixtures-1.1.0.tar.gz", "has_sig": true, "md5_digest": "73d51fa4603dc0875fc0c4b6d08b588e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44623, "upload_time": "2015-05-04T04:07:48", "upload_time_iso_8601": "2015-05-04T04:07:48.056737Z", "url": "https://files.pythonhosted.org/packages/87/e2/73a15e2b111e35a818e19d445959756abae75178166a9384b8b5b78565ce/fixtures-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a9a96947fb238a2b33cd87cb45dde91a", "sha256": "6809e978967054cd5cbf5d2868d38e2536cfcf2d9f97309532f094defca3ea86"}, "downloads": -1, "filename": "fixtures-1.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a9a96947fb238a2b33cd87cb45dde91a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 59817, "upload_time": "2015-05-04T22:14:49", "upload_time_iso_8601": "2015-05-04T22:14:49.361140Z", "url": "https://files.pythonhosted.org/packages/c0/be/1f20ce904b21be58a93da8cbf058b449b77494ed00d49df7b2f17cd774cb/fixtures-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ab03b218bd1f05906b22ed5e78259cd", "sha256": "bb3b677a069d9fc3eb0fbc452965ac8a6c95edc778f3bd05b789ed46d1527b01"}, "downloads": -1, "filename": "fixtures-1.2.0.tar.gz", "has_sig": true, "md5_digest": "9ab03b218bd1f05906b22ed5e78259cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45318, "upload_time": "2015-05-04T22:14:25", "upload_time_iso_8601": "2015-05-04T22:14:25.787126Z", "url": "https://files.pythonhosted.org/packages/2b/e0/0947f9b39fa6170a23c5733e7e404b37c62e7fd8455c935006136e046b1f/fixtures-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "8d34e9963ddb4089c3d3e8de135029b9", "sha256": "f7619056da1f061062bddcb6c5d87685fae7ca7079833c83ea6087d0e89ae63b"}, "downloads": -1, "filename": "fixtures-1.2.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8d34e9963ddb4089c3d3e8de135029b9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 61907, "upload_time": "2016-03-02T02:07:13", "upload_time_iso_8601": "2016-03-02T02:07:13.493388Z", "url": "https://files.pythonhosted.org/packages/0b/d4/3876d06f4db23692457c18757bc03f23b6b4a04eca69383ef6251755b7a8/fixtures-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73be248699239213e0b1f7b402822935", "sha256": "18d47fa6e28a32b26f91f81a19e4753d842f82aaecab1a461e54da46efef8d5c"}, "downloads": -1, "filename": "fixtures-1.2.1.tar.gz", "has_sig": true, "md5_digest": "73be248699239213e0b1f7b402822935", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46173, "upload_time": "2016-03-02T02:06:51", "upload_time_iso_8601": "2016-03-02T02:06:51.382415Z", "url": "https://files.pythonhosted.org/packages/1f/cc/8e2c48f407dcc72d3b8512f41784f07e946492b2940607ef435cdb8eb3a0/fixtures-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "92fd0562850d2416cade9ccf3376bb34", "sha256": "34c2d10e7482e55f7ff754510232f96a8be0b25002b77b33a32a2c01e1b1ac31"}, "downloads": -1, "filename": "fixtures-1.3.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "92fd0562850d2416cade9ccf3376bb34", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 64025, "upload_time": "2015-06-29T02:55:59", "upload_time_iso_8601": "2015-06-29T02:55:59.709067Z", "url": "https://files.pythonhosted.org/packages/9f/54/ef98dcf2a3c511ed99b86cbf10c973a11c6615a8a4c937179bcf1b82509b/fixtures-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b5ad0e7fa6134098cd13d7773bccc47", "sha256": "81c43b99ee63b2849a7a07c2ddcf147dea0c36260cd71352b649397d427d8f30"}, "downloads": -1, "filename": "fixtures-1.3.0.tar.gz", "has_sig": true, "md5_digest": "4b5ad0e7fa6134098cd13d7773bccc47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48941, "upload_time": "2015-06-29T02:55:51", "upload_time_iso_8601": "2015-06-29T02:55:51.070364Z", "url": "https://files.pythonhosted.org/packages/db/e5/b498aeb2c5f54916e5f0addde2b4c55e2fbe2b94e8e9bd0f4d2df2edbc92/fixtures-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "d1ea1994c2416af2d705f7a0261cba75", "sha256": "4603391f62aec34f06a64c50bee558ae723506a1a7224d13f692e05ec53859bb"}, "downloads": -1, "filename": "fixtures-1.3.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d1ea1994c2416af2d705f7a0261cba75", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 64639, "upload_time": "2015-06-30T02:22:19", "upload_time_iso_8601": "2015-06-30T02:22:19.383447Z", "url": "https://files.pythonhosted.org/packages/e5/10/ab3ef83597e367e233dd688421ba5b8428683db08233d87f2db9636ccf26/fixtures-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72959be66e26b09641a1e3902f631e62", "sha256": "b63cf3bb37f83ff815456e2d0e118535ae9a4bf43e76d9a1cf3286041bf717ce"}, "downloads": -1, "filename": "fixtures-1.3.1.tar.gz", "has_sig": true, "md5_digest": "72959be66e26b09641a1e3902f631e62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49741, "upload_time": "2015-06-30T02:22:11", "upload_time_iso_8601": "2015-06-30T02:22:11.158785Z", "url": "https://files.pythonhosted.org/packages/ac/08/4e44a959c62ce9b007158ba29a6c0e80a8b7ddd485ab4e94277285f5097b/fixtures-1.3.1.tar.gz", "yanked": false}], "1.3.2.dev6": [{"comment_text": "", "digests": {"md5": "22588f6f77346a0a98f1dda9bc450540", "sha256": "64918b2497904b515ca45e0a4a791b96bdbc53c504aee98ae22f2d0e2072d8f6"}, "downloads": -1, "filename": "fixtures-1.3.2.dev6.tar.gz", "has_sig": true, "md5_digest": "22588f6f77346a0a98f1dda9bc450540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50388, "upload_time": "2015-10-08T01:09:01", "upload_time_iso_8601": "2015-10-08T01:09:01.820945Z", "url": "https://files.pythonhosted.org/packages/e2/6f/21952dfb7fe7aadd6630f2be951ef564c18f4deb82f15795ea929e2ab2c4/fixtures-1.3.2.dev6.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "49e427a152eb36a37b6d5b81cec43eac", "sha256": "c7944a31a4b81758e41c163e7b2ab87b505df66bc2cabbacede15bfab619ca16"}, "downloads": -1, "filename": "fixtures-1.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "49e427a152eb36a37b6d5b81cec43eac", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 64827, "upload_time": "2015-10-08T01:09:51", "upload_time_iso_8601": "2015-10-08T01:09:51.428383Z", "url": "https://files.pythonhosted.org/packages/b4/b6/4409d6bef30805cfe2bacc38040e34165244d3babcf3e3d289a68096ddb6/fixtures-1.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b706476cb754c9587e7308f9eb18e201", "sha256": "3e1c61753d0fafc1429591d33ad6b828a0673a200eae63dd6ac0685479db5d36"}, "downloads": -1, "filename": "fixtures-1.4.0.tar.gz", "has_sig": true, "md5_digest": "b706476cb754c9587e7308f9eb18e201", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50411, "upload_time": "2015-10-08T01:09:41", "upload_time_iso_8601": "2015-10-08T01:09:41.052320Z", "url": "https://files.pythonhosted.org/packages/1c/82/d0d469110cdc92e0a79699250639afdff9f8da8a66fdfb846f48fb5e5e4f/fixtures-1.4.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "bc8ded19e794edac27d5a899e2c4fe4a", "sha256": "de4582925a49aaa46c6bc810eaac74a96014c719630ff0e47c4cd361dfd9d7d9"}, "downloads": -1, "filename": "fixtures-2.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "bc8ded19e794edac27d5a899e2c4fe4a", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 65268, "upload_time": "2016-04-07T01:19:56", "upload_time_iso_8601": "2016-04-07T01:19:56.440658Z", "url": "https://files.pythonhosted.org/packages/df/a5/31505ab93b7433022eab2a6305d8f320012176eda465528771be49765123/fixtures-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "146d706c1f211a5ca3be6de2d0850889", "sha256": "287ddbab51c45cff457cb9d68b7aa8f7864b7c588273a0ab5e9a16589e50182a"}, "downloads": -1, "filename": "fixtures-2.0.0.tar.gz", "has_sig": true, "md5_digest": "146d706c1f211a5ca3be6de2d0850889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54005, "upload_time": "2016-04-07T01:20:32", "upload_time_iso_8601": "2016-04-07T01:20:32.156345Z", "url": "https://files.pythonhosted.org/packages/aa/af/adf71e0790f6452b0e9ade95bfa2b8ae0c6d62137028c10a144ee3ea5210/fixtures-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "f6e3afc70aba24d85d7f04e28771f760", "sha256": "2a551b0421101de112d9497fb5f6fd25e5019391c0fbec9bad591ecae981420d"}, "downloads": -1, "filename": "fixtures-3.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f6e3afc70aba24d85d7f04e28771f760", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 67478, "upload_time": "2016-05-19T23:03:17", "upload_time_iso_8601": "2016-05-19T23:03:17.072505Z", "url": "https://files.pythonhosted.org/packages/a8/28/7eed6bf76792f418029a18d5b2ace87ce7562927cdd00f1cefe481cd148f/fixtures-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd6345b497a62fad739efee66346c2e0", "sha256": "fcf0d60234f1544da717a9738325812de1f42c2fa085e2d9252d8fff5712b2ef"}, "downloads": -1, "filename": "fixtures-3.0.0.tar.gz", "has_sig": true, "md5_digest": "cd6345b497a62fad739efee66346c2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56629, "upload_time": "2016-05-19T23:03:34", "upload_time_iso_8601": "2016-05-19T23:03:34.618133Z", "url": "https://files.pythonhosted.org/packages/84/be/94ecbc3f2487bd14aa8b44852f498086219b7cc0c8250ee65a03e2c63119/fixtures-3.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6e3afc70aba24d85d7f04e28771f760", "sha256": "2a551b0421101de112d9497fb5f6fd25e5019391c0fbec9bad591ecae981420d"}, "downloads": -1, "filename": "fixtures-3.0.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f6e3afc70aba24d85d7f04e28771f760", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 67478, "upload_time": "2016-05-19T23:03:17", "upload_time_iso_8601": "2016-05-19T23:03:17.072505Z", "url": "https://files.pythonhosted.org/packages/a8/28/7eed6bf76792f418029a18d5b2ace87ce7562927cdd00f1cefe481cd148f/fixtures-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd6345b497a62fad739efee66346c2e0", "sha256": "fcf0d60234f1544da717a9738325812de1f42c2fa085e2d9252d8fff5712b2ef"}, "downloads": -1, "filename": "fixtures-3.0.0.tar.gz", "has_sig": true, "md5_digest": "cd6345b497a62fad739efee66346c2e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56629, "upload_time": "2016-05-19T23:03:34", "upload_time_iso_8601": "2016-05-19T23:03:34.618133Z", "url": "https://files.pythonhosted.org/packages/84/be/94ecbc3f2487bd14aa8b44852f498086219b7cc0c8250ee65a03e2c63119/fixtures-3.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:01 2020"}