{"info": {"author": "gfalcone", "author_email": "gfalcone@github.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# serveml\n\n[![Build Status](https://travis-ci.org/gfalcone/serveml.svg?branch=master)](https://travis-ci.org/gfalcone/serveml)\n\n`serveml` is a Python library that helps you package your Machine Learning model easily into a REST API.\n\nThe idea behind `serveml` is to define a set of generic endpoints to make predictions easily !\n\n## Requirements\n\n- Python 3.6+\n- [FastAPI](https://fastapi.tiangolo.com/) (for the API part)\n- [MLflow](https://mlflow.org/) (for model loading)\n- [Uvicorn](https://www.uvicorn.org/) (to run api)\n\n\n## Installation\n\n```bash\npip install serveml\n```\n\n## Documentation\n\nYou can find the full documentation here : https://gfalcone.github.io/serveml/\n\n## How to use ? \n\n### Prerequisites \n\nIn order to run the examples we put, you'll need an MLflow server running. \n\nAs we do not expect you to have already this in place, we set up a docker container in order to speed things up.\n\nYou'll need to do the following things to set up MLflow on your local machine : \n\n```bash\ngit clone https://github.com/gfalcone/serveml\ncd serveml\nmkdir -p /tmp/mlflow\ndocker-compose build\ndocker-compose up\n```\n\n### Training\n\nFirst of all, you need to have a model already trained and registered in MlFlow\n\nLuckily for you, we already have a set of examples that you can already use.\n\nLet's say you have a scikit-learn model, like this one (taken from examples/serving/sklearn.py): \n\n\n```python\n\"\"\"\nExample taken from https://github.com/mlflow/mlflow/blob/master/examples/sklearn_elasticnet_wine/train.py\n\"\"\"\nimport warnings\nimport sys\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import ElasticNet\n\nimport mlflow\nimport mlflow.sklearn\n\nimport logging\n\nlogging.basicConfig(level=logging.WARN)\nlogger = logging.getLogger(__name__)\n\n\ndef eval_metrics(actual, pred):\n    rmse = np.sqrt(mean_squared_error(actual, pred))\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    return rmse, mae, r2\n\n\nif __name__ == \"__main__\":\n    mlflow.set_tracking_uri(\"http://localhost:5000\")\n    warnings.filterwarnings(\"ignore\")\n    np.random.seed(40)\n\n    # Read the wine-quality csv file from the URL\n    csv_url = \"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"\n    try:\n        data = pd.read_csv(csv_url, sep=\";\")\n    except Exception as e:\n        logger.exception(\n            \"Unable to download training & test CSV, check your internet connection. Error: %s\",\n            e,\n        )\n\n    # Split the data into training and test sets. (0.75, 0.25) split.\n    train, test = train_test_split(data)\n\n    # The predicted column is \"quality\" which is a scalar from [3, 9]\n    train_x = train.drop([\"quality\"], axis=1)\n    test_x = test.drop([\"quality\"], axis=1)\n    train_y = train[[\"quality\"]]\n    test_y = test[[\"quality\"]]\n\n    alpha = float(sys.argv[1]) if len(sys.argv) > 1 else 0.5\n    l1_ratio = float(sys.argv[2]) if len(sys.argv) > 2 else 0.5\n\n    experiment_name = 'test_sklearn'\n    if mlflow.get_experiment_by_name(experiment_name) is None:\n        mlflow.create_experiment(experiment_name)\n\n    with mlflow.start_run(experiment_id=1):\n        lr = ElasticNet(alpha=alpha, l1_ratio=l1_ratio, random_state=42)\n        lr.fit(train_x, train_y)\n\n        predicted_qualities = lr.predict(test_x)\n\n        (rmse, mae, r2) = eval_metrics(test_y, predicted_qualities)\n\n        print(\"Elasticnet model (alpha=%f, l1_ratio=%f):\" % (alpha, l1_ratio))\n        print(\"  RMSE: %s\" % rmse)\n        print(\"  MAE: %s\" % mae)\n        print(\"  R2: %s\" % r2)\n\n        mlflow.log_param(\"alpha\", alpha)\n        mlflow.log_param(\"l1_ratio\", l1_ratio)\n        mlflow.log_metric(\"rmse\", rmse)\n        mlflow.log_metric(\"r2\", r2)\n        mlflow.log_metric(\"mae\", mae)\n\n        mlflow.sklearn.log_model(\n            lr, \"model\", registered_model_name=\"sklearn_model\"\n        )\n```\n\nYou can run it with : \n\n```bash\npython -m examples.training.sklearn\n```\n\n### Serving\n\nWe can then define the API this way (taken from examples/serving/sklearn.py): \n\n```python\nfrom serveml.api import ApiBuilder\nfrom serveml.inputs import BasicInput\nfrom serveml.loader import load_mlflow_model\nfrom serveml.predictions import GenericPrediction\n\n# load model\nmodel = load_mlflow_model(\n    # MlFlow model path\n    'models:/sklearn_model/1',\n    # MlFlow Tracking URI (optional)\n    'http://localhost:5000',\n)\n\n\n# Implement deserializer for input data\nclass WineComposition(BasicInput):\n    alcohol: float\n    chlorides: float\n    citric_acid: float\n    density: float\n    fixed_acidity: float\n    free_sulfur_dioxide: int\n    pH: float\n    residual_sugar: float\n    sulphates: float\n    total_sulfur_dioxide: int\n    volatile_acidity: int\n\n\n# implement application\napp = ApiBuilder(GenericPrediction(model), WineComposition).build_api()\n```\n\nAnd then run it with : \n\n```bash\nuvicorn examples.serving.sklearn:app --host 0.0.0.0\n```\n\nYou can now access your API's documentation, generated by [redoc](https://github.com/Redocly/redoc) on [localhost:8000/redoc]() or  access your API with Swagger on [localhost:8000/docs]() :\n\n![API](https://github.com/gfalcone/serveml/blob/master/docs/images/mlserve-example.gif)\n\nDon't forget to exit the Docker container to shut down MLflow when you're done :\n\n```bash\ndocker-compose down\n```\n\n## Testing\n\n### Unit tests\n\nTo run unit tests, do the following : \n\n```bash\ndocker build --tag=serveml -f Dockerfile .\n```\n\n### Documentation\n\nIf you want to look how the documentation will be rendered after making changes to it : \n\n```bash\npip install -r requirements-doc.txt\nmkdocs serve\n```\n\n## Contributing\n\nIf you wish to make some changes, we are obviously open to Pull Requests. \n\nPlease not that in order for your PR to be merged the following points are mandatory : \n\n- The code must be formatted with [Black](https://github.com/psf/black), here is the command to use to reformat your code : \n```bash\nblack . -l 79\n```\n- CI must be green on Travis\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/gfalcone/mlserve", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "serveml", "package_url": "https://pypi.org/project/serveml/", "platform": "", "project_url": "https://pypi.org/project/serveml/", "project_urls": {"Homepage": "http://github.com/gfalcone/mlserve"}, "release_url": "https://pypi.org/project/serveml/0.3.0/", "requires_dist": ["mlflow[extras] (>=1.6.0)", "fastapi (==0.52.0)", "uvicorn (==0.11.3)"], "requires_python": ">=3.6", "summary": "serveml is a machine learning serving tool", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>serveml</h1>\n<p><a href=\"https://travis-ci.org/gfalcone/serveml\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46a05aa7aa716b6aca8e946de230e02c79aeaaee/68747470733a2f2f7472617669732d63692e6f72672f6766616c636f6e652f73657276656d6c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><code>serveml</code> is a Python library that helps you package your Machine Learning model easily into a REST API.</p>\n<p>The idea behind <code>serveml</code> is to define a set of generic endpoints to make predictions easily !</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li><a href=\"https://fastapi.tiangolo.com/\" rel=\"nofollow\">FastAPI</a> (for the API part)</li>\n<li><a href=\"https://mlflow.org/\" rel=\"nofollow\">MLflow</a> (for model loading)</li>\n<li><a href=\"https://www.uvicorn.org/\" rel=\"nofollow\">Uvicorn</a> (to run api)</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install serveml\n</pre>\n<h2>Documentation</h2>\n<p>You can find the full documentation here : <a href=\"https://gfalcone.github.io/serveml/\" rel=\"nofollow\">https://gfalcone.github.io/serveml/</a></p>\n<h2>How to use ?</h2>\n<h3>Prerequisites</h3>\n<p>In order to run the examples we put, you'll need an MLflow server running.</p>\n<p>As we do not expect you to have already this in place, we set up a docker container in order to speed things up.</p>\n<p>You'll need to do the following things to set up MLflow on your local machine :</p>\n<pre>git clone https://github.com/gfalcone/serveml\n<span class=\"nb\">cd</span> serveml\nmkdir -p /tmp/mlflow\ndocker-compose build\ndocker-compose up\n</pre>\n<h3>Training</h3>\n<p>First of all, you need to have a model already trained and registered in MlFlow</p>\n<p>Luckily for you, we already have a set of examples that you can already use.</p>\n<p>Let's say you have a scikit-learn model, like this one (taken from examples/serving/sklearn.py):</p>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Example taken from https://github.com/mlflow/mlflow/blob/master/examples/sklearn_elasticnet_wine/train.py</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">mean_squared_error</span><span class=\"p\">,</span> <span class=\"n\">mean_absolute_error</span><span class=\"p\">,</span> <span class=\"n\">r2_score</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">ElasticNet</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">mlflow</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mlflow.sklearn</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARN</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">eval_metrics</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">):</span>\n    <span class=\"n\">rmse</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">mean_squared_error</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">))</span>\n    <span class=\"n\">mae</span> <span class=\"o\">=</span> <span class=\"n\">mean_absolute_error</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">)</span>\n    <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">r2_score</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"n\">pred</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">rmse</span><span class=\"p\">,</span> <span class=\"n\">mae</span><span class=\"p\">,</span> <span class=\"n\">r2</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">set_tracking_uri</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:5000\"</span><span class=\"p\">)</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filterwarnings</span><span class=\"p\">(</span><span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Read the wine-quality csv file from the URL</span>\n    <span class=\"n\">csv_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">csv_url</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">\";\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Unable to download training &amp; test CSV, check your internet connection. Error: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n            <span class=\"n\">e</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Split the data into training and test sets. (0.75, 0.25) split.</span>\n    <span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The predicted column is \"quality\" which is a scalar from [3, 9]</span>\n    <span class=\"n\">train_x</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s2\">\"quality\"</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">test_x</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s2\">\"quality\"</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">train_y</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"p\">[[</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]]</span>\n    <span class=\"n\">test_y</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">[[</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]]</span>\n\n    <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mf\">0.5</span>\n    <span class=\"n\">l1_ratio</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mf\">0.5</span>\n\n    <span class=\"n\">experiment_name</span> <span class=\"o\">=</span> <span class=\"s1\">'test_sklearn'</span>\n    <span class=\"k\">if</span> <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">get_experiment_by_name</span><span class=\"p\">(</span><span class=\"n\">experiment_name</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">create_experiment</span><span class=\"p\">(</span><span class=\"n\">experiment_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">start_run</span><span class=\"p\">(</span><span class=\"n\">experiment_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">ElasticNet</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">l1_ratio</span><span class=\"o\">=</span><span class=\"n\">l1_ratio</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n        <span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train_x</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">)</span>\n\n        <span class=\"n\">predicted_qualities</span> <span class=\"o\">=</span> <span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">test_x</span><span class=\"p\">)</span>\n\n        <span class=\"p\">(</span><span class=\"n\">rmse</span><span class=\"p\">,</span> <span class=\"n\">mae</span><span class=\"p\">,</span> <span class=\"n\">r2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">eval_metrics</span><span class=\"p\">(</span><span class=\"n\">test_y</span><span class=\"p\">,</span> <span class=\"n\">predicted_qualities</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Elasticnet model (alpha=</span><span class=\"si\">%f</span><span class=\"s2\">, l1_ratio=</span><span class=\"si\">%f</span><span class=\"s2\">):\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">l1_ratio</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"  RMSE: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">rmse</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"  MAE: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">mae</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"  R2: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\n\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">log_param</span><span class=\"p\">(</span><span class=\"s2\">\"alpha\"</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">)</span>\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">log_param</span><span class=\"p\">(</span><span class=\"s2\">\"l1_ratio\"</span><span class=\"p\">,</span> <span class=\"n\">l1_ratio</span><span class=\"p\">)</span>\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">log_metric</span><span class=\"p\">(</span><span class=\"s2\">\"rmse\"</span><span class=\"p\">,</span> <span class=\"n\">rmse</span><span class=\"p\">)</span>\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">log_metric</span><span class=\"p\">(</span><span class=\"s2\">\"r2\"</span><span class=\"p\">,</span> <span class=\"n\">r2</span><span class=\"p\">)</span>\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">log_metric</span><span class=\"p\">(</span><span class=\"s2\">\"mae\"</span><span class=\"p\">,</span> <span class=\"n\">mae</span><span class=\"p\">)</span>\n\n        <span class=\"n\">mlflow</span><span class=\"o\">.</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">log_model</span><span class=\"p\">(</span>\n            <span class=\"n\">lr</span><span class=\"p\">,</span> <span class=\"s2\">\"model\"</span><span class=\"p\">,</span> <span class=\"n\">registered_model_name</span><span class=\"o\">=</span><span class=\"s2\">\"sklearn_model\"</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>You can run it with :</p>\n<pre>python -m examples.training.sklearn\n</pre>\n<h3>Serving</h3>\n<p>We can then define the API this way (taken from examples/serving/sklearn.py):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serveml.api</span> <span class=\"kn\">import</span> <span class=\"n\">ApiBuilder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serveml.inputs</span> <span class=\"kn\">import</span> <span class=\"n\">BasicInput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serveml.loader</span> <span class=\"kn\">import</span> <span class=\"n\">load_mlflow_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serveml.predictions</span> <span class=\"kn\">import</span> <span class=\"n\">GenericPrediction</span>\n\n<span class=\"c1\"># load model</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">load_mlflow_model</span><span class=\"p\">(</span>\n    <span class=\"c1\"># MlFlow model path</span>\n    <span class=\"s1\">'models:/sklearn_model/1'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># MlFlow Tracking URI (optional)</span>\n    <span class=\"s1\">'http://localhost:5000'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Implement deserializer for input data</span>\n<span class=\"k\">class</span> <span class=\"nc\">WineComposition</span><span class=\"p\">(</span><span class=\"n\">BasicInput</span><span class=\"p\">):</span>\n    <span class=\"n\">alcohol</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">chlorides</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">citric_acid</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">density</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">fixed_acidity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">free_sulfur_dioxide</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">pH</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">residual_sugar</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">sulphates</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"n\">total_sulfur_dioxide</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">volatile_acidity</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"c1\"># implement application</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ApiBuilder</span><span class=\"p\">(</span><span class=\"n\">GenericPrediction</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">),</span> <span class=\"n\">WineComposition</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">build_api</span><span class=\"p\">()</span>\n</pre>\n<p>And then run it with :</p>\n<pre>uvicorn examples.serving.sklearn:app --host <span class=\"m\">0</span>.0.0.0\n</pre>\n<p>You can now access your API's documentation, generated by <a href=\"https://github.com/Redocly/redoc\" rel=\"nofollow\">redoc</a> on <a href=\"\" rel=\"nofollow\">localhost:8000/redoc</a> or  access your API with Swagger on <a href=\"\" rel=\"nofollow\">localhost:8000/docs</a> :</p>\n<p><img alt=\"API\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d700f643c93b5ce630bb3ad71d2d331667ac55f/68747470733a2f2f6769746875622e636f6d2f6766616c636f6e652f73657276656d6c2f626c6f622f6d61737465722f646f63732f696d616765732f6d6c73657276652d6578616d706c652e676966\"></p>\n<p>Don't forget to exit the Docker container to shut down MLflow when you're done :</p>\n<pre>docker-compose down\n</pre>\n<h2>Testing</h2>\n<h3>Unit tests</h3>\n<p>To run unit tests, do the following :</p>\n<pre>docker build --tag<span class=\"o\">=</span>serveml -f Dockerfile .\n</pre>\n<h3>Documentation</h3>\n<p>If you want to look how the documentation will be rendered after making changes to it :</p>\n<pre>pip install -r requirements-doc.txt\nmkdocs serve\n</pre>\n<h2>Contributing</h2>\n<p>If you wish to make some changes, we are obviously open to Pull Requests.</p>\n<p>Please not that in order for your PR to be merged the following points are mandatory :</p>\n<ul>\n<li>The code must be formatted with <a href=\"https://github.com/psf/black\" rel=\"nofollow\">Black</a>, here is the command to use to reformat your code :</li>\n</ul>\n<pre>black . -l <span class=\"m\">79</span>\n</pre>\n<ul>\n<li>CI must be green on Travis</li>\n</ul>\n\n          </div>"}, "last_serial": 6934664, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "9d16441736b7b1e58ef2319b490adc6c", "sha256": "eb1d7eb52051e680582eccf41e5f7cf284d7521cc3c89c18e470733c45d6b6a6"}, "downloads": -1, "filename": "serveml-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9d16441736b7b1e58ef2319b490adc6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35349, "upload_time": "2020-03-25T17:37:52", "upload_time_iso_8601": "2020-03-25T17:37:52.356637Z", "url": "https://files.pythonhosted.org/packages/e9/3d/11e9e586894ad8acc7d650f9a048cb324ee45b11cefd8b9cd578c0f6b3b7/serveml-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81b9b32dc3f11220c245ca042369c9fa", "sha256": "76792e0f9604441f6a9fd669aab4a96bf8cec6f2ed15466c54a9a8ca479400cf"}, "downloads": -1, "filename": "serveml-0.2.tar.gz", "has_sig": false, "md5_digest": "81b9b32dc3f11220c245ca042369c9fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6869, "upload_time": "2020-03-25T17:37:55", "upload_time_iso_8601": "2020-03-25T17:37:55.157985Z", "url": "https://files.pythonhosted.org/packages/5f/05/b7f13695b280e786e49fc3c4162cbb43da57ad1d589a20662ade683c0659/serveml-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1746346f424f857c57dfbe159e6dc7c4", "sha256": "87fb4bb0d6df892c74dbccc9c9511aac9d6545961d3630e9cb25ca0ff1da16db"}, "downloads": -1, "filename": "serveml-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1746346f424f857c57dfbe159e6dc7c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35371, "upload_time": "2020-03-25T19:55:56", "upload_time_iso_8601": "2020-03-25T19:55:56.294377Z", "url": "https://files.pythonhosted.org/packages/0d/6e/cca08a1b9fec1819c29fa015be4a6018d3bdb49a648fb6346934e4ac33b7/serveml-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea9964c4228672bd5f6c7853f14ea97c", "sha256": "aff6cf8763d9eb6fef2260b630da21764a80ec7fa9bdcd37401e01f270e05547"}, "downloads": -1, "filename": "serveml-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ea9964c4228672bd5f6c7853f14ea97c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6875, "upload_time": "2020-03-25T19:55:57", "upload_time_iso_8601": "2020-03-25T19:55:57.493056Z", "url": "https://files.pythonhosted.org/packages/5b/f7/032d704d873a1db13726c2ba922ef9dce7094bdef620ddce8a4cb5c2a03f/serveml-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a65d88b5d0a1c7d9a387711eb5562750", "sha256": "472a6b597d2151e6111f62879cd750b24c85b388d16cec4f4976bdd074a2d342"}, "downloads": -1, "filename": "serveml-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a65d88b5d0a1c7d9a387711eb5562750", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12235, "upload_time": "2020-04-02T10:34:28", "upload_time_iso_8601": "2020-04-02T10:34:28.304591Z", "url": "https://files.pythonhosted.org/packages/75/31/ea08f95de75ebd9d95f465c41037ee220a5262aa3e305b7fc1adff874be3/serveml-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a03dc6fdc4a295c92d27ab81b05de81", "sha256": "2e8028a9c9127c3db1e7287f6c3f344eb2ea327bcfdb16cffe4552de459ed25e"}, "downloads": -1, "filename": "serveml-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2a03dc6fdc4a295c92d27ab81b05de81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7080, "upload_time": "2020-04-02T10:34:29", "upload_time_iso_8601": "2020-04-02T10:34:29.583696Z", "url": "https://files.pythonhosted.org/packages/f8/26/61738982e7859ca7c54b1315164d0aa9b729b69b7fb95d10d7f79c0d2a93/serveml-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a65d88b5d0a1c7d9a387711eb5562750", "sha256": "472a6b597d2151e6111f62879cd750b24c85b388d16cec4f4976bdd074a2d342"}, "downloads": -1, "filename": "serveml-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a65d88b5d0a1c7d9a387711eb5562750", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12235, "upload_time": "2020-04-02T10:34:28", "upload_time_iso_8601": "2020-04-02T10:34:28.304591Z", "url": "https://files.pythonhosted.org/packages/75/31/ea08f95de75ebd9d95f465c41037ee220a5262aa3e305b7fc1adff874be3/serveml-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a03dc6fdc4a295c92d27ab81b05de81", "sha256": "2e8028a9c9127c3db1e7287f6c3f344eb2ea327bcfdb16cffe4552de459ed25e"}, "downloads": -1, "filename": "serveml-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2a03dc6fdc4a295c92d27ab81b05de81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7080, "upload_time": "2020-04-02T10:34:29", "upload_time_iso_8601": "2020-04-02T10:34:29.583696Z", "url": "https://files.pythonhosted.org/packages/f8/26/61738982e7859ca7c54b1315164d0aa9b729b69b7fb95d10d7f79c0d2a93/serveml-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:03 2020"}