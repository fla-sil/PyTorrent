{"info": {"author": "Kaitlin Lee", "author_email": "klee@sunlightfoundation.com", "bugtrack_url": null, "classifiers": [], "description": "======\nCharty\n======\n\nCharty is a python library that generates SVG charts that use cascading stylesheets to alter their style and appearance. The file example.py included in the project includes some example usage for creating bar, line and pie charts. In general, you want to pass in height, width, data, css file name and other option parameters to the constructor and then call the output method to write the svg to a file. Every SVG node is classed explicitly and these can be styled as necessary. There are example css files in the css folder of the project, but below is an explicit description of the classes.\n\nCSS Class Names\n===============\n\nAxes\n----\n\n| .x-axis-path - the path node for the x-axis\n| .y-axis-path - the path node for the left y-axis\n| .y-axis-path2 - the path node for the right y-axis\n| .x-notch - notches that show up along the x-axis in between data points\n| .x-notch-left - the left most notch that appears at the beginning of the x-axis\n| .x-notch-right - the right most notch that appears at the end of the x-axis\n| .x-axis-label - the text label node for x-axis labels\n| .y-axis-label - the text label node for y-axis labels\n| .y-gridline - path node class for each y-axis gridline\n\nGrid Charts Only (Line, Bar)\n----------------------------\n| .value-as-label - for values that are strings instead of numerical values, this is the class of the text label node that will appear in the chart body\n| .data-point-label - the text label node for labels appearing above each data point\n\nLine Chart Only\n---------------\n| .series-#-line - For line charts, these represent the path node for that numbered data series. Data series' are automatically numbered (1-indexed), ex./ .series-2-line\n\nPie Chart Only\n--------------\n| .slice-# - the path node for a slice of a pie. These are automatically numbered (1-indexed)\n| .pie-label-left - a pie slice label is given this class if it appears on the left side of the chart (allows for text-anchor styling)\n| .pie-label-right - a pie slice label is given this class if it appears on the right side of the chart (allows for text-anchor styling)\n\n\nKeyword Argument Options\n========================\n\n| padding - the padding to add on all 4 sides of the chart\n| x_padding - padding to add in x direction only (will be added to padding)\n| y_padding - padding to add in y direction only (will be added to padding)\n| currency - If True, will display $ in labels\n| units - If True, will display numerical unit abbreviation (B: billions, M: millions, etc) in labels\n\nGrid Charts Only\n----------------\n| gridline_percent - percentage of chart area to be in between each gridline\n| x_label_height - height (in pixels) of x labels\n| x_label_padding - padding (in pixels) on x-axis labels\n| y_label_height - height (in pixels) of y labels\n| y_label_padding - padding (in pixels) on y-axis labels\n| label_intervals - interval at which to display x axis label. Every other label would be 2, every third would be 3, etc.\n\n\n\nBar Chart Only\n--------------\n| label_rotate - the degree to rotate x-axis labels", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/Charty/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "Charty", "package_url": "https://pypi.org/project/Charty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Charty/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/Charty/"}, "release_url": "https://pypi.org/project/Charty/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Another Python SVG Chart Generator that uses CSS smartly", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Charty is a python library that generates SVG charts that use cascading stylesheets to alter their style and appearance. The file example.py included in the project includes some example usage for creating bar, line and pie charts. In general, you want to pass in height, width, data, css file name and other option parameters to the constructor and then call the output method to write the svg to a file. Every SVG node is classed explicitly and these can be styled as necessary. There are example css files in the css folder of the project, but below is an explicit description of the classes.</p>\n<div id=\"css-class-names\">\n<h2>CSS Class Names</h2>\n<div id=\"axes\">\n<h3>Axes</h3>\n<div>\n<div>.x-axis-path - the path node for the x-axis</div>\n<div>.y-axis-path - the path node for the left y-axis</div>\n<div>.y-axis-path2 - the path node for the right y-axis</div>\n<div>.x-notch - notches that show up along the x-axis in between data points</div>\n<div>.x-notch-left - the left most notch that appears at the beginning of the x-axis</div>\n<div>.x-notch-right - the right most notch that appears at the end of the x-axis</div>\n<div>.x-axis-label - the text label node for x-axis labels</div>\n<div>.y-axis-label - the text label node for y-axis labels</div>\n<div>.y-gridline - path node class for each y-axis gridline</div>\n</div>\n</div>\n<div id=\"grid-charts-only-line-bar\">\n<h3>Grid Charts Only (Line, Bar)</h3>\n<div>\n<div>.value-as-label - for values that are strings instead of numerical values, this is the class of the text label node that will appear in the chart body</div>\n<div>.data-point-label - the text label node for labels appearing above each data point</div>\n</div>\n</div>\n<div id=\"line-chart-only\">\n<h3>Line Chart Only</h3>\n<div>\n<div>.series-#-line - For line charts, these represent the path node for that numbered data series. Data series\u2019 are automatically numbered (1-indexed), ex./ .series-2-line</div>\n</div>\n</div>\n<div id=\"pie-chart-only\">\n<h3>Pie Chart Only</h3>\n<div>\n<div>.slice-# - the path node for a slice of a pie. These are automatically numbered (1-indexed)</div>\n<div>.pie-label-left - a pie slice label is given this class if it appears on the left side of the chart (allows for text-anchor styling)</div>\n<div>.pie-label-right - a pie slice label is given this class if it appears on the right side of the chart (allows for text-anchor styling)</div>\n</div>\n</div>\n</div>\n<div id=\"keyword-argument-options\">\n<h2>Keyword Argument Options</h2>\n<div>\n<div>padding - the padding to add on all 4 sides of the chart</div>\n<div>x_padding - padding to add in x direction only (will be added to padding)</div>\n<div>y_padding - padding to add in y direction only (will be added to padding)</div>\n<div>currency - If True, will display $ in labels</div>\n<div>units - If True, will display numerical unit abbreviation (B: billions, M: millions, etc) in labels</div>\n</div>\n<div id=\"grid-charts-only\">\n<h3>Grid Charts Only</h3>\n<div>\n<div>gridline_percent - percentage of chart area to be in between each gridline</div>\n<div>x_label_height - height (in pixels) of x labels</div>\n<div>x_label_padding - padding (in pixels) on x-axis labels</div>\n<div>y_label_height - height (in pixels) of y labels</div>\n<div>y_label_padding - padding (in pixels) on y-axis labels</div>\n<div>label_intervals - interval at which to display x axis label. Every other label would be 2, every third would be 3, etc.</div>\n</div>\n</div>\n<div id=\"bar-chart-only\">\n<h3>Bar Chart Only</h3>\n<div>\n<div>label_rotate - the degree to rotate x-axis labels</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 783932, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "19abdf3273dc16cd2d71dc2b1c3f4a3e", "sha256": "1a8b3f43009e2f0e106d60b206a4837c1e01f55d52755ba0911ac13b93542ab9"}, "downloads": -1, "filename": "Charty-0.1.0.tar.gz", "has_sig": false, "md5_digest": "19abdf3273dc16cd2d71dc2b1c3f4a3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16372, "upload_time": "2010-11-29T21:04:35", "upload_time_iso_8601": "2010-11-29T21:04:35.125565Z", "url": "https://files.pythonhosted.org/packages/c4/7f/21700737e8f38d9ae5d3c27dddc770b81e2a596f6a4c21e5a7adb362f756/Charty-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19abdf3273dc16cd2d71dc2b1c3f4a3e", "sha256": "1a8b3f43009e2f0e106d60b206a4837c1e01f55d52755ba0911ac13b93542ab9"}, "downloads": -1, "filename": "Charty-0.1.0.tar.gz", "has_sig": false, "md5_digest": "19abdf3273dc16cd2d71dc2b1c3f4a3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16372, "upload_time": "2010-11-29T21:04:35", "upload_time_iso_8601": "2010-11-29T21:04:35.125565Z", "url": "https://files.pythonhosted.org/packages/c4/7f/21700737e8f38d9ae5d3c27dddc770b81e2a596f6a4c21e5a7adb362f756/Charty-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:24 2020"}