{"info": {"author": "Daniel Rodriguez", "author_email": "danjrod@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "pybrainfuck\r\n===========\r\n\r\n.. image:: https://img.shields.io/pypi/v/pybrainfuck.svg\r\n   :alt: PyPi Version\r\n   :scale: 100%\r\n   :target: https://pypi.python.org/pypi/pybrainfuck/\r\n\r\n.. image:: https://img.shields.io/pypi/dm/pybrainfuck.svg\r\n   :alt: PyPi Monthly Donwloads\r\n   :scale: 100%\r\n   :target: https://pypi.python.org/pypi/pybrainfuck/\r\n\r\n.. image:: https://img.shields.io/pypi/l/pybrainfuck.svg\r\n   :alt: License\r\n   :scale: 100%\r\n   :target: https://github.com/mementum/pybrainfuck/blob/master/LICENSE\r\n\r\n.. image:: https://travis-ci.org/mementum/pybrainfuck.png?branch=master\r\n   :alt: Travis-ci Build Status\r\n   :scale: 100%\r\n   :target: https://travis-ci.org/mementum/pybrainfuck\r\n\r\n.. image:: https://readthedocs.org/projects/pybrainfuck/badge/?version=latest\r\n   :alt: Documentation Status\r\n   :scale: 100%\r\n   :target: https://readthedocs.org/projects/pybrainfuck/\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/pybrainfuck.svg\r\n   :alt: Pytghon versions\r\n   :scale: 100%\r\n   :target: https://pypi.python.org/pypi/pybrainfuck/\r\n\r\n``pybrainfuck`` is yet another Python BrainFuck implementation. The goal is not\r\nbe the fastest or most efficient but rather to be extensive in the\r\nimplementation, configurable and extendable.\r\n\r\nIt contains a ``BrainFck`` class which can be directly used or subclassed to\r\nuse in scripts. The code is fully documented and commented.\r\n\r\nOr else the pip installed script ``pybrainfuck`` can be directly used.\r\n\r\nDocumentation\r\n=============\r\n\r\nRead the full documentation at readthedocs.org:\r\n\r\n  - `pybrainfuck documentation <http://pybrainfuck.readthedocs.org/en/latest/introduction.html>`_\r\n\r\n\r\nPython 2/3 Support\r\n==================\r\n\r\n  - Python 2.7\r\n  - Python 3.2/3.3/3.4/3.5\r\n\r\n  - It also works with pypy and pypy3\r\n\r\n\r\nInstallation\r\n============\r\n\r\nFrom pypi::\r\n\r\n  pip install pybrainfuck\r\n\r\nFrom source:\r\n\r\n  - Place the *pybrainfuck* directory found in the sources inside your project\r\n    and import it\r\n\r\nScriptwise:\r\n\r\n  - The entire implementation has been kept inside a single file. You can copy\r\n    it inside other sources too\r\n\r\n\r\nQuick Usage\r\n===========\r\n\r\nLet's quickly put together a script::\r\n\r\n    from __future__ import (absolute_import, division, print_function,\r\n                            unicode_literals)\r\n\r\n    import sys\r\n\r\n    from pybrainfuck import BrainFck\r\n\r\n    if name == '__main__':\r\n\r\n        bfck = BrainFck()\r\n\r\n\tfor arg in sys.argv[1:]:\r\n\t    print('-' * 50)\r\n\t    print('Running:', arg)\r\n\t    print('-' * 50)\r\n\t    bfck.runfile(arg)\r\n\t    print()\r\n\r\nAnd prepare a **Hello World** (including a newline) ``brainfuck`` program::\r\n\r\n    ++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.\r\n\r\nAnd both paired for a execution::\r\n\r\n    $ ./readme-example.py readme-example.b\r\n    --------------------------------------------------\r\n    Running: readme-example.b\r\n    --------------------------------------------------\r\n    Hello World!\r\n\r\n\r\nAlthough the newlines after ``Hello World!`` are difficult to perceive.\r\n\r\nUsing the built-in script ``pybrainfuck``::\r\n\r\n    $ pybrainfuck readme-example.b\r\n    Hello World!\r\n\r\nWhich luckily produces the same result.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/mementum/pybrainfuck/tarball/1.0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mementum/pybrainfuck", "keywords": "metaclass,development", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "pybrainfuck", "package_url": "https://pypi.org/project/pybrainfuck/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pybrainfuck/", "project_urls": {"Download": "https://github.com/mementum/pybrainfuck/tarball/1.0.1", "Homepage": "https://github.com/mementum/pybrainfuck"}, "release_url": "https://pypi.org/project/pybrainfuck/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Yet another Python brainfuck interpreter", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pybrainfuck\">\n<h2>pybrainfuck</h2>\n<a href=\"https://pypi.python.org/pypi/pybrainfuck/\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77065fd38fd6361d1d21fa643fa823ccc6955344/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079627261696e6675636b2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pybrainfuck/\" rel=\"nofollow\"><img alt=\"PyPi Monthly Donwloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79b02c86ea8d2156078ade069c66f5bb4cbcbf9f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7079627261696e6675636b2e737667\"></a>\n<a href=\"https://github.com/mementum/pybrainfuck/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c036af65eee7db468a849f68ceb56eb0a1c89049/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079627261696e6675636b2e737667\"></a>\n<a href=\"https://travis-ci.org/mementum/pybrainfuck\" rel=\"nofollow\"><img alt=\"Travis-ci Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/891644657bfe4ccab258a05b0d98e10e26b306d2/68747470733a2f2f7472617669732d63692e6f72672f6d656d656e74756d2f7079627261696e6675636b2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://readthedocs.org/projects/pybrainfuck/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbc04f761d12fa83b4fac026aea5e7f1b8e90bbc/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079627261696e6675636b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.python.org/pypi/pybrainfuck/\" rel=\"nofollow\"><img alt=\"Pytghon versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1615ee144941d26bc386727894da96af89ab38f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079627261696e6675636b2e737667\"></a>\n<p><tt>pybrainfuck</tt> is yet another Python BrainFuck implementation. The goal is not\nbe the fastest or most efficient but rather to be extensive in the\nimplementation, configurable and extendable.</p>\n<p>It contains a <tt>BrainFck</tt> class which can be directly used or subclassed to\nuse in scripts. The code is fully documented and commented.</p>\n<p>Or else the pip installed script <tt>pybrainfuck</tt> can be directly used.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Read the full documentation at readthedocs.org:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://pybrainfuck.readthedocs.org/en/latest/introduction.html\" rel=\"nofollow\">pybrainfuck documentation</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"python-2-3-support\">\n<h2>Python 2/3 Support</h2>\n<blockquote>\n<ul>\n<li>Python 2.7</li>\n<li>Python 3.2/3.3/3.4/3.5</li>\n<li>It also works with pypy and pypy3</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From pypi:</p>\n<pre>pip install pybrainfuck\n</pre>\n<p>From source:</p>\n<blockquote>\n<ul>\n<li>Place the <em>pybrainfuck</em> directory found in the sources inside your project\nand import it</li>\n</ul>\n</blockquote>\n<p>Scriptwise:</p>\n<blockquote>\n<ul>\n<li>The entire implementation has been kept inside a single file. You can copy\nit inside other sources too</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"quick-usage\">\n<h2>Quick Usage</h2>\n<p>Let\u2019s quickly put together a script:</p>\n<pre>from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport sys\n\nfrom pybrainfuck import BrainFck\n\nif name == '__main__':\n\n    bfck = BrainFck()\n\n    for arg in sys.argv[1:]:\n        print('-' * 50)\n        print('Running:', arg)\n        print('-' * 50)\n        bfck.runfile(arg)\n        print()\n</pre>\n<p>And prepare a <strong>Hello World</strong> (including a newline) <tt>brainfuck</tt> program:</p>\n<pre>++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\n</pre>\n<p>And both paired for a execution:</p>\n<pre>$ ./readme-example.py readme-example.b\n--------------------------------------------------\nRunning: readme-example.b\n--------------------------------------------------\nHello World!\n</pre>\n<p>Although the newlines after <tt>Hello World!</tt> are difficult to perceive.</p>\n<p>Using the built-in script <tt>pybrainfuck</tt>:</p>\n<pre>$ pybrainfuck readme-example.b\nHello World!\n</pre>\n<p>Which luckily produces the same result.</p>\n</div>\n\n          </div>"}, "last_serial": 1819514, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "87ac0b1ea3c1c8313a9dcdbada04b19b", "sha256": "504792d02626ad99d6a9188af0d092cc0f3181a9c97da143a172d84b11ac43ae"}, "downloads": -1, "filename": "pybrainfuck-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "87ac0b1ea3c1c8313a9dcdbada04b19b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13504, "upload_time": "2015-11-16T22:33:57", "upload_time_iso_8601": "2015-11-16T22:33:57.075052Z", "url": "https://files.pythonhosted.org/packages/2e/4f/8dd197d673b186a9e0fc75921f93cde531ffe15f87f38f781a5dc3d9e868/pybrainfuck-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b4883abd073ca986d84ba60bad22e56b", "sha256": "698bc4de98b29b753a7f09841c3a8e3e972c24cb1f5f823915df0d1501bd9f5f"}, "downloads": -1, "filename": "pybrainfuck-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4883abd073ca986d84ba60bad22e56b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13468, "upload_time": "2015-11-16T22:53:57", "upload_time_iso_8601": "2015-11-16T22:53:57.984585Z", "url": "https://files.pythonhosted.org/packages/5e/b2/dc24e40ebeb83b49f05c885d581d4efa5853db5f0b6dd789f9137f169302/pybrainfuck-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4883abd073ca986d84ba60bad22e56b", "sha256": "698bc4de98b29b753a7f09841c3a8e3e972c24cb1f5f823915df0d1501bd9f5f"}, "downloads": -1, "filename": "pybrainfuck-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4883abd073ca986d84ba60bad22e56b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13468, "upload_time": "2015-11-16T22:53:57", "upload_time_iso_8601": "2015-11-16T22:53:57.984585Z", "url": "https://files.pythonhosted.org/packages/5e/b2/dc24e40ebeb83b49f05c885d581d4efa5853db5f0b6dd789f9137f169302/pybrainfuck-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:09:02 2020"}