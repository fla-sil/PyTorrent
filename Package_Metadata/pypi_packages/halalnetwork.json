{"info": {"author": "FOMK", "author_email": "kriskuliv@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# 2019-net-b\n\n## What is our peer-to-peer file downloading system\n\nThe main idea of the system - secure and reliable file exchange between people in a network. \nPeer-to-peer means that files are transfering between guys that are connected to a system following several specific rules: \n* to get into the system the guys first must download the specific .libr files\n* afterwards those guys must connect to a tracker (using the ip from .libr file) to get the list of other peer guys \n* the fun begins! Peer goes inside the network, starts taking the \"books\" (chunks) of needed files from other guys and giving the chunks he has to other guys.\n* In the end everybody is happy having the fully downloaded files.\n\n\n## How to build, run, test\n\n**Build step:**\n0) run **pip install haramnetworks** \n1) Use **chunky_boy.py** to create .libr file (library file as described in protocol) and .bi file (connects names of the stuff with the theirs file-names). The best practise is to run chunky_boy on a tracker computer (because doing so the IP adress of tracker will be writen to .lib file)\n2) Users must download this .libr file as a first step (same as if downloading a torrent file)\n\n**Run steps:**\n2) Run **tracker.py**. It will activate the tracker of the whole system. Tracker will start to listen, waiting for peers to get connected to it.\n3) Run **main_func.py**. It will activate peer-to-peer system. \n\n**Testing step:**\n4) Run pytest -v to run all existing test\n\n**Resourses:**\n5) Check the resourses used via [link](https://docs.google.com/spreadsheets/d/15dO61qel5iGa-W1Udee3QN0Z6it9-twFl_7Tn3PuyP8/edit?usp=sharing)\n\n## Architectures\n\n1) One player (let's call Player A) execute the 'tracker.py'. Player A will be our hub. Player A has the text file that consist of staffs (The lord of the rings, Gone with the wind etc.).\n\n2) Another one player (Let's call Player B), he will download the libr file (like a bittorrent file) on github. This file contains the information of: Hub, name of the staff (e.g The Lord of the rings), size of the staff, size used for books, SHA1 of each books. \n\n3) After Player B has the .libr file, Player B execute the 'main_func.py'. Player B will be one of the peers.\n\n4) When Player B executed the 'main_func.py', Player A's text file will be updated according to Player B's IPP and Port. \nFor example; \n\nBefore Player B's execute, text file looks like:\n\nThe Lord of the Rings II IPP\n\nAfter Player B's execute, text file looks like:\n\nThe Lord of the Rings II IPP 192.168.43.29:1234 (Player B's IPP and Port)\n\n5) End of the execution of 'main_func.py', \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UJM-INFO/2019-net-b", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "halalnetwork", "package_url": "https://pypi.org/project/halalnetwork/", "platform": "", "project_url": "https://pypi.org/project/halalnetwork/", "project_urls": {"Homepage": "https://github.com/UJM-INFO/2019-net-b"}, "release_url": "https://pypi.org/project/halalnetwork/0.9/", "requires_dist": ["numpy", "dill"], "requires_python": "", "summary": "download the halal staff for free with no registration", "version": "0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>2019-net-b</h1>\n<h2>What is our peer-to-peer file downloading system</h2>\n<p>The main idea of the system - secure and reliable file exchange between people in a network.\nPeer-to-peer means that files are transfering between guys that are connected to a system following several specific rules:</p>\n<ul>\n<li>to get into the system the guys first must download the specific .libr files</li>\n<li>afterwards those guys must connect to a tracker (using the ip from .libr file) to get the list of other peer guys</li>\n<li>the fun begins! Peer goes inside the network, starts taking the \"books\" (chunks) of needed files from other guys and giving the chunks he has to other guys.</li>\n<li>In the end everybody is happy having the fully downloaded files.</li>\n</ul>\n<h2>How to build, run, test</h2>\n<p><strong>Build step:</strong>\n0) run <strong>pip install haramnetworks</strong></p>\n<ol>\n<li>Use <strong>chunky_boy.py</strong> to create .libr file (library file as described in protocol) and .bi file (connects names of the stuff with the theirs file-names). The best practise is to run chunky_boy on a tracker computer (because doing so the IP adress of tracker will be writen to .lib file)</li>\n<li>Users must download this .libr file as a first step (same as if downloading a torrent file)</li>\n</ol>\n<p><strong>Run steps:</strong>\n2) Run <strong>tracker.py</strong>. It will activate the tracker of the whole system. Tracker will start to listen, waiting for peers to get connected to it.\n3) Run <strong>main_func.py</strong>. It will activate peer-to-peer system.</p>\n<p><strong>Testing step:</strong>\n4) Run pytest -v to run all existing test</p>\n<p><strong>Resourses:</strong>\n5) Check the resourses used via <a href=\"https://docs.google.com/spreadsheets/d/15dO61qel5iGa-W1Udee3QN0Z6it9-twFl_7Tn3PuyP8/edit?usp=sharing\" rel=\"nofollow\">link</a></p>\n<h2>Architectures</h2>\n<ol>\n<li>\n<p>One player (let's call Player A) execute the 'tracker.py'. Player A will be our hub. Player A has the text file that consist of staffs (The lord of the rings, Gone with the wind etc.).</p>\n</li>\n<li>\n<p>Another one player (Let's call Player B), he will download the libr file (like a bittorrent file) on github. This file contains the information of: Hub, name of the staff (e.g The Lord of the rings), size of the staff, size used for books, SHA1 of each books.</p>\n</li>\n<li>\n<p>After Player B has the .libr file, Player B execute the 'main_func.py'. Player B will be one of the peers.</p>\n</li>\n<li>\n<p>When Player B executed the 'main_func.py', Player A's text file will be updated according to Player B's IPP and Port.\nFor example;</p>\n</li>\n</ol>\n<p>Before Player B's execute, text file looks like:</p>\n<p>The Lord of the Rings II IPP</p>\n<p>After Player B's execute, text file looks like:</p>\n<p>The Lord of the Rings II IPP 192.168.43.29:1234 (Player B's IPP and Port)</p>\n<ol>\n<li>End of the execution of 'main_func.py',</li>\n</ol>\n\n          </div>"}, "last_serial": 4912858, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "34fbdd3d73b9320cadaaa82b918da291", "sha256": "ebcae9f49a2437d9e1f1e6b04a3142018395b0e4d584131d1b94bb800605b543"}, "downloads": -1, "filename": "halalnetwork-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "34fbdd3d73b9320cadaaa82b918da291", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23611, "upload_time": "2019-03-07T22:52:35", "upload_time_iso_8601": "2019-03-07T22:52:35.359140Z", "url": "https://files.pythonhosted.org/packages/91/ed/536591d4084e5169858b09fc747877cd3a4782c4fce2881194a14840e7d7/halalnetwork-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea2f783d41069cd88d4880fde0dd61bb", "sha256": "d2467db4362a780aba6bfbaf4902ce6b47707a0aef2128140c9094c41018a9ff"}, "downloads": -1, "filename": "halalnetwork-0.9.tar.gz", "has_sig": false, "md5_digest": "ea2f783d41069cd88d4880fde0dd61bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18389, "upload_time": "2019-03-07T22:52:37", "upload_time_iso_8601": "2019-03-07T22:52:37.047467Z", "url": "https://files.pythonhosted.org/packages/d5/7c/5781b96657b15b099c91e841f04c6a1631325ef7f9631a3f21a26f142125/halalnetwork-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34fbdd3d73b9320cadaaa82b918da291", "sha256": "ebcae9f49a2437d9e1f1e6b04a3142018395b0e4d584131d1b94bb800605b543"}, "downloads": -1, "filename": "halalnetwork-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "34fbdd3d73b9320cadaaa82b918da291", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23611, "upload_time": "2019-03-07T22:52:35", "upload_time_iso_8601": "2019-03-07T22:52:35.359140Z", "url": "https://files.pythonhosted.org/packages/91/ed/536591d4084e5169858b09fc747877cd3a4782c4fce2881194a14840e7d7/halalnetwork-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea2f783d41069cd88d4880fde0dd61bb", "sha256": "d2467db4362a780aba6bfbaf4902ce6b47707a0aef2128140c9094c41018a9ff"}, "downloads": -1, "filename": "halalnetwork-0.9.tar.gz", "has_sig": false, "md5_digest": "ea2f783d41069cd88d4880fde0dd61bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18389, "upload_time": "2019-03-07T22:52:37", "upload_time_iso_8601": "2019-03-07T22:52:37.047467Z", "url": "https://files.pythonhosted.org/packages/d5/7c/5781b96657b15b099c91e841f04c6a1631325ef7f9631a3f21a26f142125/halalnetwork-0.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:43 2020"}