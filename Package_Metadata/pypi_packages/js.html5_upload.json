{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "js.html5_upload\n*************\n\nIntroduction\n============\n\nThis library packages `jquery-html5-upload`_ for `fanstatic`_.\n\n.. _`fanstatic`: http://fanstatic.org\n.. _`jquery-html5-upload`: https://github.com/mihaild/jquery-html5-upload\n\nThis requires integration between your web framework and ``fanstatic``,\nand making sure that the original resources (shipped in the ``resources``\ndirectory in ``js.html5_upload``) are published to some URL.\n\n\njquery-html5-upload Documentation\n=================================\n\nHTML5 allows attribute multiple in input tag. It is possible to select multiple files in one dialog without flash.\nWith this plugin, you can easy upload multiple files and display progress of uploading.\nWorks in modern versions of Firefox and WebKit browsers.\nWasn't tested in IE.\n\nThis plugin is very simple. I think, everything is clean from it's source. But if you want to have a list of it's options - they are presented below.\n\n## Options\n\n### Events\n\nAll events except \"change\" used by plugin have prefix \"html5_upload.\".\n\n#### Events used by plugin\n\nIt is not recommended to set handlers for this events manual.\n\n**start**\nStart upload selected files\n\n**cancelOne**\nCancel upload of currently uploading file\n\n**cancelAll**\nCancel current uploading\n\n**destroy**\nRemoves traces of plugin work\n\n#### On* events\n\nThis events can be set by passing it to plugin constructor.\nWhen presented, \n**name** if the current file **name**,\n**number** is the number of current file,\n**total** is count of currenly selected files.\n\n`onStart(event, total)`\nCalled when starting upload files.\n\n`onStartOne(event, name, number, total)`\nCalled when a file begins uploading.\n\n`onProgress(event, progress, name, number, total)`\nCalled when a `progress` part of file (0 <= `progress` <= 1) was uploaded.\n\n`onFinishOne(event, response, name, number, total)`\nCalled when one file was uploaded. `response` is the server response.\n\n`onFinish(event, total)`\nCalled when all files was uploaded.\n\n`onError(event, name, error)`\n(not fully implemented yet)\nCalled when XMLHttpRequest has an error.\n\n### gen* and set* options\n\nSometimes you need no full control on all plugin events. If so, you can pass the gen* and set* functions to automatically set messages.\n\n#### gen* functions\n\nBy default, they use STATUSES option to generate the text.\n\n`genName(file, number, total)`\n\n`genStatus(progress, finished)`\n**progress** is a fraction. **finished** is true if file uploaded and response otained.\n\n`genProgress(loaded, total)`\n**loaded** is count of bytes of current file which currently loaded, **total** is current file size.\n\n#### set* function\n\nThis functions get plain text from **set*** functions\n\n`setName(text)`\n\n`setStatus(text)`\n\n`setProgress(text)`\n\n### Other options\n\n**autostart** (bool) start when the input value is changed\n\n**autoclear** (bool) clear the input value when all files are uploaded\n\n**stopOnFirstError** (bool) cancel uploading remaining files if an error occurred\n\n**url** (string|function) url where send files, or function which will return it\n\n**sendBoundary** (bool) format headers to emulate usual form file sending.\n\n**fieldName** (string|function) if setBoundary is true, value for file field name\n\n\nCHANGES\n*******\n\n0.0.1\n=====\n\n-   Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "js.html5_upload", "package_url": "https://pypi.org/project/js.html5_upload/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/js.html5_upload/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/js.html5_upload/0.1/", "requires_dist": null, "requires_python": null, "summary": "Fanstatic packaging of jquery-html5-upload", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            js.html5_upload<br>*************<br><br>Introduction<br>============<br><br>This library packages `jquery-html5-upload`_ for `fanstatic`_.<br><br>.. _`fanstatic`: http://fanstatic.org<br>.. _`jquery-html5-upload`: https://github.com/mihaild/jquery-html5-upload<br><br>This requires integration between your web framework and ``fanstatic``,<br>and making sure that the original resources (shipped in the ``resources``<br>directory in ``js.html5_upload``) are published to some URL.<br><br><br>jquery-html5-upload Documentation<br>=================================<br><br>HTML5 allows attribute multiple in input tag. It is possible to select multiple files in one dialog without flash.<br>With this plugin, you can easy upload multiple files and display progress of uploading.<br>Works in modern versions of Firefox and WebKit browsers.<br>Wasn't tested in IE.<br><br>This plugin is very simple. I think, everything is clean from it's source. But if you want to have a list of it's options - they are presented below.<br><br>## Options<br><br>### Events<br><br>All events except \"change\" used by plugin have prefix \"html5_upload.\".<br><br>#### Events used by plugin<br><br>It is not recommended to set handlers for this events manual.<br><br>**start**<br>Start upload selected files<br><br>**cancelOne**<br>Cancel upload of currently uploading file<br><br>**cancelAll**<br>Cancel current uploading<br><br>**destroy**<br>Removes traces of plugin work<br><br>#### On* events<br><br>This events can be set by passing it to plugin constructor.<br>When presented, <br>**name** if the current file **name**,<br>**number** is the number of current file,<br>**total** is count of currenly selected files.<br><br>`onStart(event, total)`<br>Called when starting upload files.<br><br>`onStartOne(event, name, number, total)`<br>Called when a file begins uploading.<br><br>`onProgress(event, progress, name, number, total)`<br>Called when a `progress` part of file (0 &lt;= `progress` &lt;= 1) was uploaded.<br><br>`onFinishOne(event, response, name, number, total)`<br>Called when one file was uploaded. `response` is the server response.<br><br>`onFinish(event, total)`<br>Called when all files was uploaded.<br><br>`onError(event, name, error)`<br>(not fully implemented yet)<br>Called when XMLHttpRequest has an error.<br><br>### gen* and set* options<br><br>Sometimes you need no full control on all plugin events. If so, you can pass the gen* and set* functions to automatically set messages.<br><br>#### gen* functions<br><br>By default, they use STATUSES option to generate the text.<br><br>`genName(file, number, total)`<br><br>`genStatus(progress, finished)`<br>**progress** is a fraction. **finished** is true if file uploaded and response otained.<br><br>`genProgress(loaded, total)`<br>**loaded** is count of bytes of current file which currently loaded, **total** is current file size.<br><br>#### set* function<br><br>This functions get plain text from **set*** functions<br><br>`setName(text)`<br><br>`setStatus(text)`<br><br>`setProgress(text)`<br><br>### Other options<br><br>**autostart** (bool) start when the input value is changed<br><br>**autoclear** (bool) clear the input value when all files are uploaded<br><br>**stopOnFirstError** (bool) cancel uploading remaining files if an error occurred<br><br>**url** (string|function) url where send files, or function which will return it<br><br>**sendBoundary** (bool) format headers to emulate usual form file sending.<br><br>**fieldName** (string|function) if setBoundary is true, value for file field name<br><br><br>CHANGES<br>*******<br><br>0.0.1<br>=====<br><br>-   Initial release.\n          </div>"}, "last_serial": 793715, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f50eefe1dc7f9ac19d2571c8176084f8", "sha256": "11586cd5e40e1359cbdc1460624c5fcd4d19bc6df55ebedc77683fdabc7cb8e1"}, "downloads": -1, "filename": "js.html5_upload-0.1.tar.gz", "has_sig": false, "md5_digest": "f50eefe1dc7f9ac19d2571c8176084f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6538, "upload_time": "2012-05-14T00:24:19", "upload_time_iso_8601": "2012-05-14T00:24:19.686269Z", "url": "https://files.pythonhosted.org/packages/56/d4/9844dca69beffb985d60eebf62a957fbc4a60b3a002101a3c956112d4b94/js.html5_upload-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f50eefe1dc7f9ac19d2571c8176084f8", "sha256": "11586cd5e40e1359cbdc1460624c5fcd4d19bc6df55ebedc77683fdabc7cb8e1"}, "downloads": -1, "filename": "js.html5_upload-0.1.tar.gz", "has_sig": false, "md5_digest": "f50eefe1dc7f9ac19d2571c8176084f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6538, "upload_time": "2012-05-14T00:24:19", "upload_time_iso_8601": "2012-05-14T00:24:19.686269Z", "url": "https://files.pythonhosted.org/packages/56/d4/9844dca69beffb985d60eebf62a957fbc4a60b3a002101a3c956112d4b94/js.html5_upload-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:00 2020"}