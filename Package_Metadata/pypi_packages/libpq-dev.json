{"info": {"author": "NCBI", "author_email": "python-core@ncbi.nlm.nih.gov", "bugtrack_url": null, "classifiers": [], "description": "libpq-dev\n=========\n\nOverview\n--------\n\nThe ``libpq-dev`` library is built following `Debian's libpq-dev package`_ \nidea: it contains a minimal set of `PostgreSQL`_ binaries and headers requried \nfor building 3rd-party applications for `PostgreSQL`_.\n\nMoreover this package provides even smaller subset of binaries than \n`Debian's libpq-dev package`_ and was desgined this way on purpose. The main \ngoal is to provide all requirements for building `Psycopg2`_.\n\nThis package is meant to be built as `platform-specific`_ binary \n`Python wheels`_, contains only PostgreSQL binaries and 0 Python code.\n\nRationale\n---------\nThe `Psycopg2`_ library is built as a wrapper around ``libpq`` and mostly \nwritten in C. It is distributed as an ``sdist`` and being built during \ninstallation. For this reason it requries some `PostgreSQL`_ binaries and \nheaders to be present during isntallation.\n\nFor simple environments where database server and application server combine \nthe same host it is not an issue but it might be a different case for \ndistributed systems. This leads to the need to install some of `PostgreSQL`_ \nbinaries on the application server as well.\n\nOn top of that there might be a situation when single application server needs \nto host several applications that use different versions of `PostgreSQL`_ and \nthus `Psycopg2`_ needs to be `built against different versions`_ of ``libpq``.\n\nContents\n--------\n\nThe package contains:\n\n    - **pg_config**\n    - **libpq.a** (static build of ``libpq``)\n    - a number of additional headers\n\nFor full list of files please take a look into ``setup.cfg/[files]/data_files``.\n\nOnce more, 0 Python sources or any other stuff.\n\nUsage\n-----\n\nThe usage is pretty simple and straight forward: install ``libpq-dev`` of \nrequried version (the same version as your PostgreSQL version) before \ninstalling `Psycopg2`_.\n\n::\n\n    $ pip install libpq-dev==9.4.3\n\n    $ pip install psycopg2\n\nPlease note that `Psycopg2`_ prefers static linking against ``libpq`` so if you \ndistributing your application and all its dependencies with wheels or something \nlike `Platter`_ then you don't need need to ship ``libpq-dev`` as long as you \nhave `Psycopg2`_ wheel built with it.\n\nLimitation and Known Issues\n---------------------------\n\nCurrently ``libpq-dev`` is being built only for ``Linux`` with \n``Python 2.7, 3.3, 3.4`` from `PostgreSQL 9.*` sources.\n\nIf there will be demand for other platforms, Python versions or older \nPostgreSQL versions new builds will be added.\n\nAlso please note that there is `known issue with PIP`_ and some Python packages \n(including `Psycopg2`_) that doesn't allow you to do:\n\n::\n\n    $ pip install libpq-dev==9.4.3 psycopg2\n\nor put these names into `requirements.txt` and then run ``pip install -r \nrequirements.txt``. This is because `Psycopg2`_ requries ``pg_config`` and \nother PostgreSQL binaries to be present in order to run ``egg_info`` command \n(which is executed by `PIP` during normal installation process).\n\nUnfortunately there is nothing we can do about it right now but we hope that \neither this will be handled somehow in future `PIP` releases or fixed in \n`Psycopg2`_.\n\n\nFurther Development\n-------------------\n\nWe assume that there might be demand in builds for additional platforms or \nPython versions.\n\nAlso there may be other Python libraries that may be used with this package. \nIn case this package is missing some binaries requried by libraries other that \n`Pscyopg2`_ they will be added.\n\n\n.. _Debian's libpq-dev package: https://packages.debian.org/sid/libpq-dev\n.. _PostgreSQL: http://www.postgresql.org/\n.. _Psycopg2: https://pypi.python.org/pypi/psycopg2\n.. _paltform-specific: https://packaging.python.org/en/latest/distributing.html#platform-wheels\n.. _Python wheels: http://pythonwheels.com/\n.. _built against different versions: http://www.leeladharan.com/importerror-psycopg-so:-undefined-symbol:-lo-truncate64\n.. _Platter: http://platter.pocoo.org/\n.. _known issue with PIP: https://github.com/pypa/pip/issues/25", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ncbi/python-libpq-dev", "keywords": "", "license": "NCBI license", "maintainer": "", "maintainer_email": "", "name": "libpq-dev", "package_url": "https://pypi.org/project/libpq-dev/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/libpq-dev/", "project_urls": {"Homepage": "https://github.com/ncbi/python-libpq-dev"}, "release_url": "https://pypi.org/project/libpq-dev/9.0.0/", "requires_dist": null, "requires_python": "", "summary": "Psycopg2 binary dependencies", "version": "9.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            libpq-dev<br>=========<br><br>Overview<br>--------<br><br>The ``libpq-dev`` library is built following `Debian's libpq-dev package`_ <br>idea: it contains a minimal set of `PostgreSQL`_ binaries and headers requried <br>for building 3rd-party applications for `PostgreSQL`_.<br><br>Moreover this package provides even smaller subset of binaries than <br>`Debian's libpq-dev package`_ and was desgined this way on purpose. The main <br>goal is to provide all requirements for building `Psycopg2`_.<br><br>This package is meant to be built as `platform-specific`_ binary <br>`Python wheels`_, contains only PostgreSQL binaries and 0 Python code.<br><br>Rationale<br>---------<br>The `Psycopg2`_ library is built as a wrapper around ``libpq`` and mostly <br>written in C. It is distributed as an ``sdist`` and being built during <br>installation. For this reason it requries some `PostgreSQL`_ binaries and <br>headers to be present during isntallation.<br><br>For simple environments where database server and application server combine <br>the same host it is not an issue but it might be a different case for <br>distributed systems. This leads to the need to install some of `PostgreSQL`_ <br>binaries on the application server as well.<br><br>On top of that there might be a situation when single application server needs <br>to host several applications that use different versions of `PostgreSQL`_ and <br>thus `Psycopg2`_ needs to be `built against different versions`_ of ``libpq``.<br><br>Contents<br>--------<br><br>The package contains:<br><br>    - **pg_config**<br>    - **libpq.a** (static build of ``libpq``)<br>    - a number of additional headers<br><br>For full list of files please take a look into ``setup.cfg/[files]/data_files``.<br><br>Once more, 0 Python sources or any other stuff.<br><br>Usage<br>-----<br><br>The usage is pretty simple and straight forward: install ``libpq-dev`` of <br>requried version (the same version as your PostgreSQL version) before <br>installing `Psycopg2`_.<br><br>::<br><br>    $ pip install libpq-dev==9.4.3<br><br>    $ pip install psycopg2<br><br>Please note that `Psycopg2`_ prefers static linking against ``libpq`` so if you <br>distributing your application and all its dependencies with wheels or something <br>like `Platter`_ then you don't need need to ship ``libpq-dev`` as long as you <br>have `Psycopg2`_ wheel built with it.<br><br>Limitation and Known Issues<br>---------------------------<br><br>Currently ``libpq-dev`` is being built only for ``Linux`` with <br>``Python 2.7, 3.3, 3.4`` from `PostgreSQL 9.*` sources.<br><br>If there will be demand for other platforms, Python versions or older <br>PostgreSQL versions new builds will be added.<br><br>Also please note that there is `known issue with PIP`_ and some Python packages <br>(including `Psycopg2`_) that doesn't allow you to do:<br><br>::<br><br>    $ pip install libpq-dev==9.4.3 psycopg2<br><br>or put these names into `requirements.txt` and then run ``pip install -r <br>requirements.txt``. This is because `Psycopg2`_ requries ``pg_config`` and <br>other PostgreSQL binaries to be present in order to run ``egg_info`` command <br>(which is executed by `PIP` during normal installation process).<br><br>Unfortunately there is nothing we can do about it right now but we hope that <br>either this will be handled somehow in future `PIP` releases or fixed in <br>`Psycopg2`_.<br><br><br>Further Development<br>-------------------<br><br>We assume that there might be demand in builds for additional platforms or <br>Python versions.<br><br>Also there may be other Python libraries that may be used with this package. <br>In case this package is missing some binaries requried by libraries other that <br>`Pscyopg2`_ they will be added.<br><br><br>.. _Debian's libpq-dev package: https://packages.debian.org/sid/libpq-dev<br>.. _PostgreSQL: http://www.postgresql.org/<br>.. _Psycopg2: https://pypi.python.org/pypi/psycopg2<br>.. _paltform-specific: https://packaging.python.org/en/latest/distributing.html#platform-wheels<br>.. _Python wheels: http://pythonwheels.com/<br>.. _built against different versions: http://www.leeladharan.com/importerror-psycopg-so:-undefined-symbol:-lo-truncate64<br>.. _Platter: http://platter.pocoo.org/<br>.. _known issue with PIP: https://github.com/pypa/pip/issues/25\n          </div>"}, "last_serial": 1605451, "releases": {"9.0.0": []}, "urls": [], "timestamp": "Fri May  8 00:46:28 2020"}