{"info": {"author": "Javier Garcia", "author_email": "javier.garcia.d@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# Piapy\n\nPython wrapper around the command line interface for The Private Internet Access Desktop Client. Intended to facilitate the operation of the PIA client from within Python.\n\nPython 3.7, no additional dependencies.\n\n![Upload to Pypi](https://github.com/bskapital/piapy/workflows/Upload%20to%20Pypi/badge.svg)\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install *piapy*.\n\n```bash\npip install piapy\n```\n\n## Usage\n- PIA Desktop client must be installed.\n\n- Command ```piactl```  must be available from your terminal. Try running ```piactl --version```. Iif you get something like ```2.0.1+04518``` you are good to go.\n\n  If it does not run, please check [PIA Desktop: Command Line Interface](https://www.privateinternetaccess.com/helpdesk/kb/articles/pia-desktop-command-line-interface) documentation.\n\n- PIA client must be running to use the connect method.\n\n\n### Available Methods\n\n-  ```regions()``` Returns list of strings with available servers.\n\n   i.e.:     ```['us-florida', 'us-atlanta', 'us-houston', 'us-washington-dc', 'us-east', 'us-chicago', 'us-new-york-city', 'us-texas', 'us-west', ...]```\n\n- ```region()``` Returns string of current selected server name.\n\n    i.e. ```'us-houston'```\n\n- ```set_region(server='auto')``` Cause the client to connect to selected server next time it connects. If client is already connected will disconnect and connect to new selected server.\n  * server (type: str)\n      +  'auto': use client auto select feature to set server with least latency.\n      + 'random': set a random server from the available list.\n      + '[server name]': set the server to a specific name, must be in the available list.\n\n - ```connect(verbose=False, timeout=20)``` Cause the client to connect\n   * verbose (type: bool) cause to display connecting status in stdout\n   * timeout (type: int) will disconnect if connection not possible before timeout\n - ```disconnect()``` Cause client to disconnect\n - ```ip()``` Returns the current VPN IP address, if connected and the address is known\n - ```status()``` Returns client conection status.\n\n   ```Disconnected, Connecting, StillConnecting, Connected, Interrupted, Reconnecting, StillReconnecting, DisconnectingToReconnect, Disconnecting```\n\n- ```reset_settings()``` Resets settings to the defaults. As per the documentation this only resets daemon settings, no GUI settings.\n\n- ```set_debug_logging(value=False)``` Enable client debug logging.\n\n\n### Example\n```python\nfrom piapy import PiaVpn\n\n# Instantiate\nvpn = PiaVpn()\n\n# Get connection status\nvpn.status() # equivalent to `piactl get connectionstate`\n\n# Will connect to server, displaying status in stdout\nvpn.connect(verbose=True, timeout=20)\n\n# Disconnect\nvpn.disconnect()\n```\n## Contributing\nPull requests are welcome. Please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n\n## About this software\nThe *piapy* software is a personal project. I have no prior or existing relationship with [Private Internet Access](https://www.privateinternetaccess.com/)\n\nIf you have any information regarding its software, you can visit them:\n*  [PIA VPN](https://www.privateinternetaccess.com/)\n* [PIA Desktop: Command Line Interface](https://www.privateinternetaccess.com/helpdesk/kb/articles/pia-desktop-command-line-interface)\n\n\n\n## License\nwith [MIT](https://choosealicense.com/licenses/mit/) open source license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bskapital/piapy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "piapy", "package_url": "https://pypi.org/project/piapy/", "platform": "", "project_url": "https://pypi.org/project/piapy/", "project_urls": {"Homepage": "https://github.com/bskapital/piapy"}, "release_url": "https://pypi.org/project/piapy/0.1.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Python wrapper for PIA VPN desktop client command line interface", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Piapy</h1>\n<p>Python wrapper around the command line interface for The Private Internet Access Desktop Client. Intended to facilitate the operation of the PIA client from within Python.</p>\n<p>Python 3.7, no additional dependencies.</p>\n<p><img alt=\"Upload to Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07f3b37d4de300eafceb6dece1940ba1ab8be775/68747470733a2f2f6769746875622e636f6d2f62736b61706974616c2f70696170792f776f726b666c6f77732f55706c6f6164253230746f253230507970692f62616467652e737667\"></p>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install <em>piapy</em>.</p>\n<pre>pip install piapy\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>\n<p>PIA Desktop client must be installed.</p>\n</li>\n<li>\n<p>Command <code>piactl</code>  must be available from your terminal. Try running <code>piactl --version</code>. Iif you get something like <code>2.0.1+04518</code> you are good to go.</p>\n<p>If it does not run, please check <a href=\"https://www.privateinternetaccess.com/helpdesk/kb/articles/pia-desktop-command-line-interface\" rel=\"nofollow\">PIA Desktop: Command Line Interface</a> documentation.</p>\n</li>\n<li>\n<p>PIA client must be running to use the connect method.</p>\n</li>\n</ul>\n<h3>Available Methods</h3>\n<ul>\n<li>\n<p><code>regions()</code> Returns list of strings with available servers.</p>\n<p>i.e.:     <code>['us-florida', 'us-atlanta', 'us-houston', 'us-washington-dc', 'us-east', 'us-chicago', 'us-new-york-city', 'us-texas', 'us-west', ...]</code></p>\n</li>\n<li>\n<p><code>region()</code> Returns string of current selected server name.</p>\n<p>i.e. <code>'us-houston'</code></p>\n</li>\n<li>\n<p><code>set_region(server='auto')</code> Cause the client to connect to selected server next time it connects. If client is already connected will disconnect and connect to new selected server.</p>\n<ul>\n<li>server (type: str)\n<ul>\n<li>'auto': use client auto select feature to set server with least latency.</li>\n<li>'random': set a random server from the available list.</li>\n<li>'[server name]': set the server to a specific name, must be in the available list.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>connect(verbose=False, timeout=20)</code> Cause the client to connect</p>\n<ul>\n<li>verbose (type: bool) cause to display connecting status in stdout</li>\n<li>timeout (type: int) will disconnect if connection not possible before timeout</li>\n</ul>\n</li>\n<li>\n<p><code>disconnect()</code> Cause client to disconnect</p>\n</li>\n<li>\n<p><code>ip()</code> Returns the current VPN IP address, if connected and the address is known</p>\n</li>\n<li>\n<p><code>status()</code> Returns client conection status.</p>\n<p><code>Disconnected, Connecting, StillConnecting, Connected, Interrupted, Reconnecting, StillReconnecting, DisconnectingToReconnect, Disconnecting</code></p>\n</li>\n<li>\n<p><code>reset_settings()</code> Resets settings to the defaults. As per the documentation this only resets daemon settings, no GUI settings.</p>\n</li>\n<li>\n<p><code>set_debug_logging(value=False)</code> Enable client debug logging.</p>\n</li>\n</ul>\n<h3>Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">piapy</span> <span class=\"kn\">import</span> <span class=\"n\">PiaVpn</span>\n\n<span class=\"c1\"># Instantiate</span>\n<span class=\"n\">vpn</span> <span class=\"o\">=</span> <span class=\"n\">PiaVpn</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get connection status</span>\n<span class=\"n\">vpn</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()</span> <span class=\"c1\"># equivalent to `piactl get connectionstate`</span>\n\n<span class=\"c1\"># Will connect to server, displaying status in stdout</span>\n<span class=\"n\">vpn</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Disconnect</span>\n<span class=\"n\">vpn</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. Please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>About this software</h2>\n<p>The <em>piapy</em> software is a personal project. I have no prior or existing relationship with <a href=\"https://www.privateinternetaccess.com/\" rel=\"nofollow\">Private Internet Access</a></p>\n<p>If you have any information regarding its software, you can visit them:</p>\n<ul>\n<li><a href=\"https://www.privateinternetaccess.com/\" rel=\"nofollow\">PIA VPN</a></li>\n<li><a href=\"https://www.privateinternetaccess.com/helpdesk/kb/articles/pia-desktop-command-line-interface\" rel=\"nofollow\">PIA Desktop: Command Line Interface</a></li>\n</ul>\n<h2>License</h2>\n<p>with <a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a> open source license.</p>\n\n          </div>"}, "last_serial": 7054591, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e8005c28e9847b7eb853edb254e74201", "sha256": "2c7822faf23e62f688922f2e4d83c25535ade9cadca7c3b84d874782d3e74c6a"}, "downloads": -1, "filename": "piapy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e8005c28e9847b7eb853edb254e74201", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5240, "upload_time": "2020-04-19T15:46:28", "upload_time_iso_8601": "2020-04-19T15:46:28.541223Z", "url": "https://files.pythonhosted.org/packages/e0/98/a522e4e94717712fe60713513e118e43214f7d263df9d256b462844f6636/piapy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8b2c9e5224821c467fd105c844a3329", "sha256": "443619700ac39b65d1ad5e1e24f4b70c6a134ac76d68ad356a9a665c1075ce63"}, "downloads": -1, "filename": "piapy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e8b2c9e5224821c467fd105c844a3329", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4127, "upload_time": "2020-04-19T15:46:29", "upload_time_iso_8601": "2020-04-19T15:46:29.471001Z", "url": "https://files.pythonhosted.org/packages/5a/ab/2b295b94b902e8f980a235e5a499d0585b6ca87f619cf97efee39c470289/piapy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6c9ebd3467cfc90aecaa3c3142c2aee7", "sha256": "30c9a9f778e3c96a857be31975851cef38f4b36a78e78b9d88c871d40359517e"}, "downloads": -1, "filename": "piapy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6c9ebd3467cfc90aecaa3c3142c2aee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5251, "upload_time": "2020-04-19T15:48:56", "upload_time_iso_8601": "2020-04-19T15:48:56.908319Z", "url": "https://files.pythonhosted.org/packages/ff/56/f69a79a332064c3772431ab38106f97864afeba7073939bbedd5549062a4/piapy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1c015d7b32397b262c87fc4e92c10a0", "sha256": "0a7f558339e75d206436135d343aeda19fa8a877c1bd695d4532b8460aeff99d"}, "downloads": -1, "filename": "piapy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a1c015d7b32397b262c87fc4e92c10a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4143, "upload_time": "2020-04-19T15:48:57", "upload_time_iso_8601": "2020-04-19T15:48:57.923416Z", "url": "https://files.pythonhosted.org/packages/96/10/38fd03507700a210ce9af50e64d7ab3bf20d20740dfa3291d4d51d9e6156/piapy-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c9ebd3467cfc90aecaa3c3142c2aee7", "sha256": "30c9a9f778e3c96a857be31975851cef38f4b36a78e78b9d88c871d40359517e"}, "downloads": -1, "filename": "piapy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6c9ebd3467cfc90aecaa3c3142c2aee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5251, "upload_time": "2020-04-19T15:48:56", "upload_time_iso_8601": "2020-04-19T15:48:56.908319Z", "url": "https://files.pythonhosted.org/packages/ff/56/f69a79a332064c3772431ab38106f97864afeba7073939bbedd5549062a4/piapy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1c015d7b32397b262c87fc4e92c10a0", "sha256": "0a7f558339e75d206436135d343aeda19fa8a877c1bd695d4532b8460aeff99d"}, "downloads": -1, "filename": "piapy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a1c015d7b32397b262c87fc4e92c10a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4143, "upload_time": "2020-04-19T15:48:57", "upload_time_iso_8601": "2020-04-19T15:48:57.923416Z", "url": "https://files.pythonhosted.org/packages/96/10/38fd03507700a210ce9af50e64d7ab3bf20d20740dfa3291d4d51d9e6156/piapy-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:10 2020"}