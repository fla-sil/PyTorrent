{"info": {"author": "Mauro de Carvalho", "author_email": "mauro.dec@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: System :: Software Distribution", "Topic :: System :: Systems Administration"], "description": "# Amet\n\nAmet is a Python 2/3 library to read and write complex configuration from and to environment variables.\n\n## Motivation\n\nSome time ago I had to deploy an application to Heroku. This meant that I had to read the application's configuration from environment variables instead of the JSON files I was previously using for configuration. I wrote this library so that I could dump those configuration files into environment variables that I could easily read and assemble back into the original structure.\n\nThis means that you do not need to give up the benefits of using a structured JSON file while using environment variables for configuration.\n\n## How to use\n\nFirst of all, install the library with a simple `pip install amet`.\n\n### Loading - The `load_from_environment` function\n\nWhen loading a configuration object from the environment, the first thing that is needed is, of course, to define what needs to be read. The first thing we need to create is a dictionary to hold our configuration values as well as specify what type each value is. We will call this dictionary our prototype:\n\n```python\nCONFIGURATION_PROTOTYPE = {\n    'database': {\n        'hostname': str,\n        'port': int,\n        'username': str,\n        'password': str,\n        'use_ssl': bool\n    }\n}\n```\n\nIn order to load configuration values from environment variables, the `load_from_environment` function is provided. This function will iterate over our prototype and read environment variables that can be used to fill it. The format of the environment variables that are read can be customized by setting the `prefix` and `separator` string values and the `force_uppercase` boolean value\n\n`load_from_environment(proto, prefix='', force_uppercase=True, separator='_')`\n\nThe environment variables that will be read are expected to have a particular format:\n\n`<prefix><separator><key-1><separator>...<key-n>`\n\nwhere `key-1` through `key-n` correspond to the keys of nested dictionaries. If `force_uppercase` is set, the environment variables will be converted to uppercase.\n\nFor example, out previously defined configuration prototype would be filled with the value from the following environment variables (assuming `prefix` is left empty, `separator` is `_` and `force_uppercase` is `True`):\n\n* `DATABASE_HOSTNAME`\n* `DATABASE_PORT`\n* `DATABASE_USERNAE`\n* `DATABASE_PASSWORD`\n* `DATABASE_USE_SSL`\n\n`load_from_environment` will always return a new dictionary, the prototype will remain unchanged.\n\n### Conversion of values\n\nAmet will attempt to convert values to Python primitive types. If the value for a given key is of type `int`, `float`, or `bool` (or the types themselves), upon reading the corresponding environment variables, Amet will attempt to parse those values. If the type of the value is `str` or `NoneType` the read value if left as is (which is `str`).\n\nIn the previous example, `database.hostname` is assumed to be a string, however, `database.password` will be converted to `int` as that is the value given to that key. If a number such as `0` or `1` had been set then the value of `integer` would have also been converted.\n\n```python\nCONFIGURATION_PROTOTYPE = {\n    'database': {\n        'hostname': str,    # Read as str\n        'port': int,        # Read as int\n        'username': None,   # Read as str\n        'password': None,   # Read as str\n        'use_ssl': bool     # Read as bool\n    }\n}\n```\n\nPossible values for `True` are `T`, `True`, `TRUE`, `true`, `Y`, `Yes`, `YES`, `yes` and `1`. The same goes for `False`.\n\n### Writing - The `dump` function\n\nThe `dump` function is also provided.\n\n`dump(config, prefix='', force_uppercase=True, separator='_')`\n\nThis function will return a dictionary of the key-value pairs that should be set as environment variables. If we called `dump` with the dictionary in the previous example, the output would be:\n\n```python\n{\n\t`DATABASE_HOSTNAME`: ...\n\t`DATABASE_PORT`: ...\n\t`DATABASE_USERNAE`: ...\n\t`DATABASE_PASSWORD`: ...\n\t`DATABASE_USE_SSL`: ...\n}\n```\n\n### Exceptions\n\nWhen a problem occurs loading or dumping a dictionary, errors may be raised.\n\n* `IncompatibleTypeError`, a subclass of `TypeError` will be raised if a key in the dictionary is not a `str` object or if a value is not a `dict`, `str`, `int`, `float` or `bool` value.\n* `KerError` is raised if an environment variable cannot be read.\n* `ValueError` is raised if a value cannot be parsed, for example if an integer is expected but the value is a string not corresponding to a number.\n\n## TODO\n\n- [x] Improve this README.\n- [ ] Add some useful examples for `dump` such as setting those variables in Heroku.\n- [ ] Add support for default values.spell\n- [ ] Check for possible name clashes when loading or dumping variables.\n- [ ] Improve unit tests.\n\n## Contributing\n\nIf you find any issues feel free to report them [here](https://github.com/maurodec/amet/issues/new). If you want you can also fork the project and submit a pull request.\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/maurodec/amet/archive/0.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maurodec/amet", "keywords": "confiuration configuration-management environment environment-variables heroku", "license": "", "maintainer": "", "maintainer_email": "", "name": "amet", "package_url": "https://pypi.org/project/amet/", "platform": "", "project_url": "https://pypi.org/project/amet/", "project_urls": {"Download": "https://github.com/maurodec/amet/archive/0.4.tar.gz", "Homepage": "https://github.com/maurodec/amet"}, "release_url": "https://pypi.org/project/amet/0.4/", "requires_dist": null, "requires_python": "", "summary": "A library to read complex configuration from environment variables.", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Amet<br><br>Amet is a Python 2/3 library to read and write complex configuration from and to environment variables.<br><br>## Motivation<br><br>Some time ago I had to deploy an application to Heroku. This meant that I had to read the application's configuration from environment variables instead of the JSON files I was previously using for configuration. I wrote this library so that I could dump those configuration files into environment variables that I could easily read and assemble back into the original structure.<br><br>This means that you do not need to give up the benefits of using a structured JSON file while using environment variables for configuration.<br><br>## How to use<br><br>First of all, install the library with a simple `pip install amet`.<br><br>### Loading - The `load_from_environment` function<br><br>When loading a configuration object from the environment, the first thing that is needed is, of course, to define what needs to be read. The first thing we need to create is a dictionary to hold our configuration values as well as specify what type each value is. We will call this dictionary our prototype:<br><br>```python<br>CONFIGURATION_PROTOTYPE = {<br>    'database': {<br>        'hostname': str,<br>        'port': int,<br>        'username': str,<br>        'password': str,<br>        'use_ssl': bool<br>    }<br>}<br>```<br><br>In order to load configuration values from environment variables, the `load_from_environment` function is provided. This function will iterate over our prototype and read environment variables that can be used to fill it. The format of the environment variables that are read can be customized by setting the `prefix` and `separator` string values and the `force_uppercase` boolean value<br><br>`load_from_environment(proto, prefix='', force_uppercase=True, separator='_')`<br><br>The environment variables that will be read are expected to have a particular format:<br><br>`&lt;prefix&gt;&lt;separator&gt;&lt;key-1&gt;&lt;separator&gt;...&lt;key-n&gt;`<br><br>where `key-1` through `key-n` correspond to the keys of nested dictionaries. If `force_uppercase` is set, the environment variables will be converted to uppercase.<br><br>For example, out previously defined configuration prototype would be filled with the value from the following environment variables (assuming `prefix` is left empty, `separator` is `_` and `force_uppercase` is `True`):<br><br>* `DATABASE_HOSTNAME`<br>* `DATABASE_PORT`<br>* `DATABASE_USERNAE`<br>* `DATABASE_PASSWORD`<br>* `DATABASE_USE_SSL`<br><br>`load_from_environment` will always return a new dictionary, the prototype will remain unchanged.<br><br>### Conversion of values<br><br>Amet will attempt to convert values to Python primitive types. If the value for a given key is of type `int`, `float`, or `bool` (or the types themselves), upon reading the corresponding environment variables, Amet will attempt to parse those values. If the type of the value is `str` or `NoneType` the read value if left as is (which is `str`).<br><br>In the previous example, `database.hostname` is assumed to be a string, however, `database.password` will be converted to `int` as that is the value given to that key. If a number such as `0` or `1` had been set then the value of `integer` would have also been converted.<br><br>```python<br>CONFIGURATION_PROTOTYPE = {<br>    'database': {<br>        'hostname': str,    # Read as str<br>        'port': int,        # Read as int<br>        'username': None,   # Read as str<br>        'password': None,   # Read as str<br>        'use_ssl': bool     # Read as bool<br>    }<br>}<br>```<br><br>Possible values for `True` are `T`, `True`, `TRUE`, `true`, `Y`, `Yes`, `YES`, `yes` and `1`. The same goes for `False`.<br><br>### Writing - The `dump` function<br><br>The `dump` function is also provided.<br><br>`dump(config, prefix='', force_uppercase=True, separator='_')`<br><br>This function will return a dictionary of the key-value pairs that should be set as environment variables. If we called `dump` with the dictionary in the previous example, the output would be:<br><br>```python<br>{<br>\t`DATABASE_HOSTNAME`: ...<br>\t`DATABASE_PORT`: ...<br>\t`DATABASE_USERNAE`: ...<br>\t`DATABASE_PASSWORD`: ...<br>\t`DATABASE_USE_SSL`: ...<br>}<br>```<br><br>### Exceptions<br><br>When a problem occurs loading or dumping a dictionary, errors may be raised.<br><br>* `IncompatibleTypeError`, a subclass of `TypeError` will be raised if a key in the dictionary is not a `str` object or if a value is not a `dict`, `str`, `int`, `float` or `bool` value.<br>* `KerError` is raised if an environment variable cannot be read.<br>* `ValueError` is raised if a value cannot be parsed, for example if an integer is expected but the value is a string not corresponding to a number.<br><br>## TODO<br><br>- [x] Improve this README.<br>- [ ] Add some useful examples for `dump` such as setting those variables in Heroku.<br>- [ ] Add support for default values.spell<br>- [ ] Check for possible name clashes when loading or dumping variables.<br>- [ ] Improve unit tests.<br><br>## Contributing<br><br>If you find any issues feel free to report them [here](https://github.com/maurodec/amet/issues/new). If you want you can also fork the project and submit a pull request.<br>\n          </div>"}, "last_serial": 3858366, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "e0aa2c4fd69005a085cc8aec310146c8", "sha256": "a6e301974985c78fc9f04e4cb217143c18a195f8f10e8e4a0bd08115adb7493a"}, "downloads": -1, "filename": "amet-0.2.tar.gz", "has_sig": false, "md5_digest": "e0aa2c4fd69005a085cc8aec310146c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2049, "upload_time": "2017-04-18T06:00:23", "upload_time_iso_8601": "2017-04-18T06:00:23.960730Z", "url": "https://files.pythonhosted.org/packages/43/11/1cf36000c17107a977b65092a78263bc83d8567950e689b0d96996bb913d/amet-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "486ddb31fab7dca16eab1b71f0788750", "sha256": "bd31e62466437ff30963c84a625d3afa2d64fe658d5cd28f14c501e684079d11"}, "downloads": -1, "filename": "amet-0.3.tar.gz", "has_sig": false, "md5_digest": "486ddb31fab7dca16eab1b71f0788750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2291, "upload_time": "2017-04-20T22:52:27", "upload_time_iso_8601": "2017-04-20T22:52:27.755968Z", "url": "https://files.pythonhosted.org/packages/f8/fe/69736756d90967ca40e59448c93a4a72a24d581e9f413f9ebd574130089d/amet-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "36560ba6a330d04e92a8577c09d18453", "sha256": "7fc52fbb5007028ea3fdc3e6ff88f48aaa11ae6a4280db4e46095e4436f34e80"}, "downloads": -1, "filename": "amet-0.4.tar.gz", "has_sig": false, "md5_digest": "36560ba6a330d04e92a8577c09d18453", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5174, "upload_time": "2018-05-13T12:13:27", "upload_time_iso_8601": "2018-05-13T12:13:27.591755Z", "url": "https://files.pythonhosted.org/packages/0e/cc/380636c6b1e2ea65a8e2c99fbd392d5f152419e33ccd0e3a205456d6aaf7/amet-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36560ba6a330d04e92a8577c09d18453", "sha256": "7fc52fbb5007028ea3fdc3e6ff88f48aaa11ae6a4280db4e46095e4436f34e80"}, "downloads": -1, "filename": "amet-0.4.tar.gz", "has_sig": false, "md5_digest": "36560ba6a330d04e92a8577c09d18453", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5174, "upload_time": "2018-05-13T12:13:27", "upload_time_iso_8601": "2018-05-13T12:13:27.591755Z", "url": "https://files.pythonhosted.org/packages/0e/cc/380636c6b1e2ea65a8e2c99fbd392d5f152419e33ccd0e3a205456d6aaf7/amet-0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:22 2020"}