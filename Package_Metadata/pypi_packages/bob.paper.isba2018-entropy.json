{"info": {"author": "Vedrana Krivokuca", "author_email": "vedrana.krivokuca@idiap.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Bob", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "==========================================================================================\nTowards Quantifying the Entropy of Fingervein Patterns across Different Feature Extractors\n==========================================================================================\n\nThis package is part of the signal-processing and machine learning toolbox\nBob_. It contains the source code to reproduce the following paper::\n\n\n    @inproceedings{Krivokuca_ISBA2018_2018,\n              title = {Towards Quantifying the Entropy of Fingervein Patterns across Different Feature Extractors},\n             author = {Krivoku{\\'{c}}a, Vedrana and Marcel, S{\\'{e}}bastien},\n          booktitle = \"{2018 IEEE 4th International Conference on Identity, Security, and Behavior Analysis (ISBA)}\",\n              month = \"Jan\",\n               year = {2018}\n    }\n\nIf you use this package and/or its results, please cite both the package and the corresponding paper_.  Also, please ensure that you include the two original Bob references (Bob_) in your citations.\n\n\nSoftware Installation\n---------------------\n\nThe first thing you must do is to install all the required software to reproduce the experiments in this paper.  Note that the installation instructions are based on conda_ and that, for this paper, we currently only support Python 2.7 on Linux 64-bit architectures.  Keeping this in mind, proceed with the installation as follows:\n\n1. `Install Miniconda`_.\n2. Download the paper source code and extract the files into your working directory.\n3. Navigate to your working directory as follows:\n\n   .. code-block:: sh\n\n      $ cd [path_to_your_working_directory]\n\n4. Create a conda environment containing all the necessary package dependencies, using the following command:\n\n   .. code-block:: sh\n\n      $ conda env create -f environment.yml\n\n5. Activate the environment as follows:\n\n   .. code-block:: sh\n\n      $ source activate bob.paper.isba2018_entropy.env\n\n6. Install the paper package to generate the necessary scripts in your working directory as follows:\n\n   .. code-block:: sh\n\n      $ buildout\n\n\nDownloading the Databases\n-------------------------\n\nThe next thing you must do is to download the two fingervein databases used in our experiments: VERA and UTFVP.  Please refer to the following websites to do this:\n\n* VERA_\n* UTFVP_\n\nTake note of the directories in which you have stored the downloaded databases.  Then, create a textfile named ``.bob_bio_databases.txt`` and **store it in your home directory.**  Inside this textfile, insert the following two lines:\n\n.. code-block:: sh\n\n   [YOUR_VERAFINGER_DIRECTORY] = path_to_vera_database\n   [YOUR_UTFVP_DIRECTORY] = path_to_utfvp_database\n\nMake sure you replace ``path_to_vera_database`` with the path to your downloaded VERA database and ``path_to_utfvp_database`` with the path to your downloaded UTFVP database.\n\n\nRunning the Experiments\n-----------------------\n\nYou are now ready to run the experiments to reproduce the results in Table 2 and Figure 2 from our paper!  The experiments are run in two parts:\n\n1. Extract the fingervein features and compute the Hamming distance (HD) between every pair of feature vectors from different fingers, by executing the following commands (one at a time) in your terminal:\n\n   .. code-block:: sh\n\n      $ ./bin/verify.py vera-wld   # WLD feature extractor on the VERA fingervein database \n      $ ./bin/verify.py vera-rlt   # RLT feature extractor on the VERA fingervein database  \n      $ ./bin/verify.py vera-mc    # MC feature extractor on the VERA fingervein database  \n      $ ./bin/verify.py utfvp-wld  # WLD feature extractor on the UTFVP fingervein database \n      $ ./bin/verify.py utfvp-rlt  # RLT feature extractor on the UTFVP fingervein database  \n      $ ./bin/verify.py utfvp-mc   # MC feature extractor on the UTFVP fingervein database \n\n   Please be aware that it might take a while for each of the above experiments to complete.  This is particularly true for the RLT extractor and for the UTFVP database in general.\n\n   By default, all experimental results will be stored in the ``bob.paper.isba2018_entropy/results/`` directory, under the database-specific and extractor-specific sub-directories.  For example, the results for the MC extractor on the VERA database will be stored in the ``bob.paper.isba2018_entropy/results/vera/mc/`` directory.  \n\n   Inside each extractor's results directory, you will find the following sub-directories: ``preprocessed``, ``extracted``, ``models``, ``Full`` for VERA and ``full`` for UTFVP, and ``gridtk_logs``.  These directories store the results of the full fingervein recognition pipeline, starting from preprocessing the images in the database to calculating the HDs between different fingervein feature vectors.  In particular:\n\n   * ``preprocessed``: contains the preprocessed finger images;\n   * ``extracted``: contains the extracted fingervein features;\n   * ``models``: contains the enrolled fingervein features;\n   * ``Full/nonorm/scores-dev`` (VERA) or ``full/nonorm/scores-dev`` (UTFVP): textfile that contains the HD between every possible pair of extracted fingervein feature vectors (``Full`` or ``full`` is the name of the matching protocol used, which in this case just means that the HD is calculated between all possible pairs of finger samples);\n   * ``gridtk_logs``: contains messages logging the full experimental procedure.\n\n   While the above directories are useful for you to inspect the output of each stage of the experimental process, the only results you need to worry about for now will be produced in part 2 of the experimental procedure. \n\n2. Calculate the entropy of the fingervein features from each extractor on each database, based on the previously-computed HDs (those calculated between the fingervein patterns from **different** fingers **only**), by executing the following commands (one at a time) in your terminal:\n\n   .. code-block:: sh\n\n      $ ./bin/calculate_entropy.py -d 'vera' -e 'wld'   # WLD feature extractor on the VERA fingervein database \n      $ ./bin/calculate_entropy.py -d 'vera' -e 'rlt'   # RLT feature extractor on the VERA fingervein database \n      $ ./bin/calculate_entropy.py -d 'vera' -e 'mc'    # MC feature extractor on the VERA fingervein database\n      $ ./bin/calculate_entropy.py -d 'utfvp' -e 'wld'  # WLD feature extractor on the UTFVP fingervein database\n      $ ./bin/calculate_entropy.py -d 'utfvp' -e 'rlt'  # RLT feature extractor on the UTFVP fingervein database \n      $ ./bin/calculate_entropy.py -d 'utfvp' -e 'mc'   # MC feature extractor on the UTFVP fingervein database\n\n\n   There are two outputs for each command in this step of the experiment.  The first output is the set of statistics, including the mean, standard deviation, degrees of freedom, and entropy for the corresponding HD distribution, as per the results in Table 2 of the paper.  These statistics are printed in the ``statistics.txt`` textfile of the results directory corresponding to each feature extractor and database.  For example, for the MC extractor on the VERA database, these results are stored in ``bob.paper.isba2018_entropy/results/vera/mc/statistics.txt``.  \n\n   The second output is the HD distribution plot with the corresponding binomial distribution overlaid, as per the results in Figure 2 of the paper.  This plot is stored in the ``HD_distribution.pdf`` file, which is located in the same place as the corresponding ``statistics.txt`` textfile.  \n\n   Note that, if you wish to work with just one extractor and one database at a time, you do not have to run all the commands from steps 1 and 2.  For example, if you are only interested in the results for the RLT extractor on the UTFVP database, you would execute the following commands in your terminal (in the specified order):\n\n   .. code-block:: sh\n\n      $ ./bin/verify.py utfvp-rlt                       # Extract the RLT features and calculate the HDs on the UTFVP fingervein database \n      $ ./bin/calculate_entropy.py -d 'utfvp' -e 'rlt'  # Calculate the entropy of the RLT features on the UTFVP fingervein database \n\n\nContact\n-------\n\nIf you have any questions or issues relating to this software package, please contact our development `mailing list`_.\n\n\n.. Links:\n.. _Bob: https://www.idiap.ch/software/bob\n.. _conda: https://conda.io\n.. _Install Miniconda: https://conda.io/docs/user-guide/install/index.html\n.. _paper: https://publidiap.idiap.ch/index.php/publications/show/3721\n.. _VERA: https://www.idiap.ch/dataset/vera-fingervein\n.. _UTFVP: http://scs.ewi.utwente.nl/downloads/show,Finger%20Vein/\n.. _mailing list: https://www.idiap.ch/software/bob/discuss", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.idiap.ch/bob/bob.paper.isba2018_entropy", "keywords": "bob", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "bob.paper.isba2018-entropy", "package_url": "https://pypi.org/project/bob.paper.isba2018-entropy/", "platform": "", "project_url": "https://pypi.org/project/bob.paper.isba2018-entropy/", "project_urls": {"Homepage": "https://gitlab.idiap.ch/bob/bob.paper.isba2018_entropy"}, "release_url": "https://pypi.org/project/bob.paper.isba2018-entropy/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Calculating the entropy of fingervein patterns", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is part of the signal-processing and machine learning toolbox\n<a href=\"https://www.idiap.ch/software/bob\" rel=\"nofollow\">Bob</a>. It contains the source code to reproduce the following paper:</p>\n<pre>@inproceedings{Krivokuca_ISBA2018_2018,\n          title = {Towards Quantifying the Entropy of Fingervein Patterns across Different Feature Extractors},\n         author = {Krivoku{\\'{c}}a, Vedrana and Marcel, S{\\'{e}}bastien},\n      booktitle = \"{2018 IEEE 4th International Conference on Identity, Security, and Behavior Analysis (ISBA)}\",\n          month = \"Jan\",\n           year = {2018}\n}\n</pre>\n<p>If you use this package and/or its results, please cite both the package and the corresponding <a href=\"https://publidiap.idiap.ch/index.php/publications/show/3721\" rel=\"nofollow\">paper</a>.  Also, please ensure that you include the two original Bob references (<a href=\"https://www.idiap.ch/software/bob\" rel=\"nofollow\">Bob</a>) in your citations.</p>\n<div id=\"software-installation\">\n<h2>Software Installation</h2>\n<p>The first thing you must do is to install all the required software to reproduce the experiments in this paper.  Note that the installation instructions are based on <a href=\"https://conda.io\" rel=\"nofollow\">conda</a> and that, for this paper, we currently only support Python 2.7 on Linux 64-bit architectures.  Keeping this in mind, proceed with the installation as follows:</p>\n<ol>\n<li><p><a href=\"https://conda.io/docs/user-guide/install/index.html\" rel=\"nofollow\">Install Miniconda</a>.</p>\n</li>\n<li><p>Download the paper source code and extract the files into your working directory.</p>\n</li>\n<li><p>Navigate to your working directory as follows:</p>\n<pre>$ <span class=\"nb\">cd</span> <span class=\"o\">[</span>path_to_your_working_directory<span class=\"o\">]</span>\n</pre>\n</li>\n<li><p>Create a conda environment containing all the necessary package dependencies, using the following command:</p>\n<pre>$ conda env create -f environment.yml\n</pre>\n</li>\n<li><p>Activate the environment as follows:</p>\n<pre>$ <span class=\"nb\">source</span> activate bob.paper.isba2018_entropy.env\n</pre>\n</li>\n<li><p>Install the paper package to generate the necessary scripts in your working directory as follows:</p>\n<pre>$ buildout\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"downloading-the-databases\">\n<h2>Downloading the Databases</h2>\n<p>The next thing you must do is to download the two fingervein databases used in our experiments: VERA and UTFVP.  Please refer to the following websites to do this:</p>\n<ul>\n<li><a href=\"https://www.idiap.ch/dataset/vera-fingervein\" rel=\"nofollow\">VERA</a></li>\n<li><a href=\"http://scs.ewi.utwente.nl/downloads/show,Finger%20Vein/\" rel=\"nofollow\">UTFVP</a></li>\n</ul>\n<p>Take note of the directories in which you have stored the downloaded databases.  Then, create a textfile named <tt>.bob_bio_databases.txt</tt> and <strong>store it in your home directory.</strong>  Inside this textfile, insert the following two lines:</p>\n<pre><span class=\"o\">[</span>YOUR_VERAFINGER_DIRECTORY<span class=\"o\">]</span> <span class=\"o\">=</span> path_to_vera_database\n<span class=\"o\">[</span>YOUR_UTFVP_DIRECTORY<span class=\"o\">]</span> <span class=\"o\">=</span> path_to_utfvp_database\n</pre>\n<p>Make sure you replace <tt>path_to_vera_database</tt> with the path to your downloaded VERA database and <tt>path_to_utfvp_database</tt> with the path to your downloaded UTFVP database.</p>\n</div>\n<div id=\"running-the-experiments\">\n<h2>Running the Experiments</h2>\n<p>You are now ready to run the experiments to reproduce the results in Table 2 and Figure 2 from our paper!  The experiments are run in two parts:</p>\n<ol>\n<li><p>Extract the fingervein features and compute the Hamming distance (HD) between every pair of feature vectors from different fingers, by executing the following commands (one at a time) in your terminal:</p>\n<pre>$ ./bin/verify.py vera-wld   <span class=\"c1\"># WLD feature extractor on the VERA fingervein database\n</span>$ ./bin/verify.py vera-rlt   <span class=\"c1\"># RLT feature extractor on the VERA fingervein database\n</span>$ ./bin/verify.py vera-mc    <span class=\"c1\"># MC feature extractor on the VERA fingervein database\n</span>$ ./bin/verify.py utfvp-wld  <span class=\"c1\"># WLD feature extractor on the UTFVP fingervein database\n</span>$ ./bin/verify.py utfvp-rlt  <span class=\"c1\"># RLT feature extractor on the UTFVP fingervein database\n</span>$ ./bin/verify.py utfvp-mc   <span class=\"c1\"># MC feature extractor on the UTFVP fingervein database</span>\n</pre>\n<p>Please be aware that it might take a while for each of the above experiments to complete.  This is particularly true for the RLT extractor and for the UTFVP database in general.</p>\n<p>By default, all experimental results will be stored in the <tt>bob.paper.isba2018_entropy/results/</tt> directory, under the database-specific and extractor-specific sub-directories.  For example, the results for the MC extractor on the VERA database will be stored in the <tt>bob.paper.isba2018_entropy/results/vera/mc/</tt> directory.</p>\n<p>Inside each extractor\u2019s results directory, you will find the following sub-directories: <tt>preprocessed</tt>, <tt>extracted</tt>, <tt>models</tt>, <tt>Full</tt> for VERA and <tt>full</tt> for UTFVP, and <tt>gridtk_logs</tt>.  These directories store the results of the full fingervein recognition pipeline, starting from preprocessing the images in the database to calculating the HDs between different fingervein feature vectors.  In particular:</p>\n<ul>\n<li><tt>preprocessed</tt>: contains the preprocessed finger images;</li>\n<li><tt>extracted</tt>: contains the extracted fingervein features;</li>\n<li><tt>models</tt>: contains the enrolled fingervein features;</li>\n<li><tt><span class=\"pre\">Full/nonorm/scores-dev</span></tt> (VERA) or <tt><span class=\"pre\">full/nonorm/scores-dev</span></tt> (UTFVP): textfile that contains the HD between every possible pair of extracted fingervein feature vectors (<tt>Full</tt> or <tt>full</tt> is the name of the matching protocol used, which in this case just means that the HD is calculated between all possible pairs of finger samples);</li>\n<li><tt>gridtk_logs</tt>: contains messages logging the full experimental procedure.</li>\n</ul>\n<p>While the above directories are useful for you to inspect the output of each stage of the experimental process, the only results you need to worry about for now will be produced in part 2 of the experimental procedure.</p>\n</li>\n<li><p>Calculate the entropy of the fingervein features from each extractor on each database, based on the previously-computed HDs (those calculated between the fingervein patterns from <strong>different</strong> fingers <strong>only</strong>), by executing the following commands (one at a time) in your terminal:</p>\n<pre>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'vera'</span> -e <span class=\"s1\">'wld'</span>   <span class=\"c1\"># WLD feature extractor on the VERA fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'vera'</span> -e <span class=\"s1\">'rlt'</span>   <span class=\"c1\"># RLT feature extractor on the VERA fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'vera'</span> -e <span class=\"s1\">'mc'</span>    <span class=\"c1\"># MC feature extractor on the VERA fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'utfvp'</span> -e <span class=\"s1\">'wld'</span>  <span class=\"c1\"># WLD feature extractor on the UTFVP fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'utfvp'</span> -e <span class=\"s1\">'rlt'</span>  <span class=\"c1\"># RLT feature extractor on the UTFVP fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'utfvp'</span> -e <span class=\"s1\">'mc'</span>   <span class=\"c1\"># MC feature extractor on the UTFVP fingervein database</span>\n</pre>\n<p>There are two outputs for each command in this step of the experiment.  The first output is the set of statistics, including the mean, standard deviation, degrees of freedom, and entropy for the corresponding HD distribution, as per the results in Table 2 of the paper.  These statistics are printed in the <tt>statistics.txt</tt> textfile of the results directory corresponding to each feature extractor and database.  For example, for the MC extractor on the VERA database, these results are stored in <tt>bob.paper.isba2018_entropy/results/vera/mc/statistics.txt</tt>.</p>\n<p>The second output is the HD distribution plot with the corresponding binomial distribution overlaid, as per the results in Figure 2 of the paper.  This plot is stored in the <tt>HD_distribution.pdf</tt> file, which is located in the same place as the corresponding <tt>statistics.txt</tt> textfile.</p>\n<p>Note that, if you wish to work with just one extractor and one database at a time, you do not have to run all the commands from steps 1 and 2.  For example, if you are only interested in the results for the RLT extractor on the UTFVP database, you would execute the following commands in your terminal (in the specified order):</p>\n<pre>$ ./bin/verify.py utfvp-rlt                       <span class=\"c1\"># Extract the RLT features and calculate the HDs on the UTFVP fingervein database\n</span>$ ./bin/calculate_entropy.py -d <span class=\"s1\">'utfvp'</span> -e <span class=\"s1\">'rlt'</span>  <span class=\"c1\"># Calculate the entropy of the RLT features on the UTFVP fingervein database</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>If you have any questions or issues relating to this software package, please contact our development <a href=\"https://www.idiap.ch/software/bob/discuss\" rel=\"nofollow\">mailing list</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3312304, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ba0290b9561a6ff0aad943cdc44f9d2f", "sha256": "68f4489749c1dd8e7db1bd2e19c1b807e84b6bad4b4c5742bb50f2cde35164cb"}, "downloads": -1, "filename": "bob.paper.isba2018_entropy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba0290b9561a6ff0aad943cdc44f9d2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25394, "upload_time": "2017-10-24T13:54:46", "upload_time_iso_8601": "2017-10-24T13:54:46.476528Z", "url": "https://files.pythonhosted.org/packages/e4/3e/ce8a3fadbfc61c7d822372a39b79b1eab4c62916adaedf121e11160a86ba/bob.paper.isba2018_entropy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "61c4f3bc52d04ef02887010205bd2130", "sha256": "7ccab2818fdfce5e16194d0516923f761e3d851ad504cdbb95b5ab836e83456e"}, "downloads": -1, "filename": "bob.paper.isba2018_entropy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "61c4f3bc52d04ef02887010205bd2130", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25527, "upload_time": "2017-10-26T14:40:19", "upload_time_iso_8601": "2017-10-26T14:40:19.745216Z", "url": "https://files.pythonhosted.org/packages/17/3a/3ba3e42482996fcfa50e098630e4ab515fd0cdca14a4ecbd65394b9a20d0/bob.paper.isba2018_entropy-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "b415c3bf43ff87f96a2895a17ca2e0a7", "sha256": "f2862de47a825a56740908413b1cdeceb3893409e75deab61a9fe1f7885c1313"}, "downloads": -1, "filename": "bob.paper.isba2018_entropy-1.0.2.tar.gz", "has_sig": false, "md5_digest": "b415c3bf43ff87f96a2895a17ca2e0a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25521, "upload_time": "2017-10-27T10:26:25", "upload_time_iso_8601": "2017-10-27T10:26:25.917706Z", "url": "https://files.pythonhosted.org/packages/c9/3f/18608c725e38f33c7a8f06f8e0c6e8b4cc8c2d72071542b1015dcffd6d2e/bob.paper.isba2018_entropy-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "45ed306d8c7c3488d7af417e77032bcc", "sha256": "e6de9c874f7fb8749d0f844c2cbeac97416ba482fce31534e2a110049077bbab"}, "downloads": -1, "filename": "bob.paper.isba2018_entropy-1.0.3.tar.gz", "has_sig": false, "md5_digest": "45ed306d8c7c3488d7af417e77032bcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25806, "upload_time": "2017-10-31T08:10:12", "upload_time_iso_8601": "2017-10-31T08:10:12.758693Z", "url": "https://files.pythonhosted.org/packages/a5/b6/329862ed6e502e0ddc044a4ff411e1a5f63d3d8a09d242b4d95467692cb1/bob.paper.isba2018_entropy-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45ed306d8c7c3488d7af417e77032bcc", "sha256": "e6de9c874f7fb8749d0f844c2cbeac97416ba482fce31534e2a110049077bbab"}, "downloads": -1, "filename": "bob.paper.isba2018_entropy-1.0.3.tar.gz", "has_sig": false, "md5_digest": "45ed306d8c7c3488d7af417e77032bcc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25806, "upload_time": "2017-10-31T08:10:12", "upload_time_iso_8601": "2017-10-31T08:10:12.758693Z", "url": "https://files.pythonhosted.org/packages/a5/b6/329862ed6e502e0ddc044a4ff411e1a5f63d3d8a09d242b4d95467692cb1/bob.paper.isba2018_entropy-1.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:51 2020"}