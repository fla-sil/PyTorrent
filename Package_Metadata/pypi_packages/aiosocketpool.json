{"info": {"author": "Roo Sczesnak", "author_email": "andrewscz@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Circle CI](https://circleci.com/gh/polyatail/aiosocketpool.svg?style=shield&circle-token=f7f570b230ecf72d3df817cca445c5a28809068a)](https://circleci.com/gh/onecodex/mainline)\n![Black Code Style](https://camo.githubusercontent.com/28a51fe3a2c05048d8ca8ecd039d6b1619037326/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667)\n\n# aiosocketpool\nAn asyncio-compatible socket pool. Simple, compact, easily extended.\n\nIf your application needs to connect to many remote hosts simultaneously (and often), it probably\nmakes sense to keep connections open and re-use them rather than establishing a new connection for\nevery request. Combining an `asyncio` event loop and a socket pool might be the way to go!\n\nBased on [socketpool](https://github.com/benoitc/socketpool).\n\n**Requires Python 3.7 or above.**\n\n## Examples\n\nRun a simple TCP echo server in a background thread, using the `asyncio` library.\n\n```python\nimport asyncio\nimport threading\n\n\n# start a new event loop running in a background thread\ndef run_loop_forever(loop):\n    loop.run_forever()\n\n\nloop = asyncio.new_event_loop()\n\nt = threading.Thread(name=\"BackgroundEventLoop\", target=run_loop_forever, args=[loop], daemon=True)\nt.start()\n\n\n# run a tcp echo server using asyncio in the background event loop\nasync def echo_handler(reader, writer):\n    writer.write(await reader.read(32))\n    await writer.drain()\n    writer.close()\n\n\nasync def echo_server(tcp_port):\n    server = await asyncio.start_server(echo_handler, \"127.0.0.1\", tcp_port)\n    await server.serve_forever()\n\n\nasyncio.run_coroutine_threadsafe(echo_server(12345), loop)\n```\n\nCreate a new TCP connection pool in the main thread, get a connection, and send and receive data.\n\n```python\nfrom aiosocketpool import AsyncConnectionPool, AsyncTcpConnector\n\n\npool = AsyncConnectionPool(\n    factory=AsyncTcpConnector,\n    reap_connections=True,  # a background task will destroy old and idle connections\n    max_lifetime=10,  # connections will remain idle at most 10 seconds\n    max_size=10,  # we will maintain at most 10 idle connections in the pool\n)\n\n\nasync def hello_world():\n    async with pool.connection(host=\"127.0.0.1\", port=12345) as conn:\n        await conn.sendall(b\"hello world\")\n        print(await conn.recv(32))\n\n\nawait hello_world()\n```\n\nCreate a bunch of connections and run them all concurrently.\n\n```python\nloop = asyncio.get_event_loop()\n\ntasks = []\n\nfor _ in range(25):\n    tasks.append(loop.create_task(hello_world()))\n\nloop.run_until_complete(asyncio.gather(*tasks))\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/polyatail/aiosocketpool", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "aiosocketpool", "package_url": "https://pypi.org/project/aiosocketpool/", "platform": "", "project_url": "https://pypi.org/project/aiosocketpool/", "project_urls": {"Homepage": "https://github.com/polyatail/aiosocketpool"}, "release_url": "https://pypi.org/project/aiosocketpool/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "An asyncio-compatible socket pool", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/onecodex/mainline\" rel=\"nofollow\"><img alt=\"Circle CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d72ad512fba956c4c3d420e5edff03cf6ef6baa/68747470733a2f2f636972636c6563692e636f6d2f67682f706f6c79617461696c2f61696f736f636b6574706f6f6c2e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d66376635373062323330656366373264336466383137636361343435633561323838303930363861\"></a>\n<img alt=\"Black Code Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b4f2f8c0e27fed32053ebb92c9143b75b8a187a/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f323861353166653361326330353034386438636138656364303339643662313631393033373332362f3638373437343730373333613266326636393664363732653733363836393635366336343733326536393666326636323631363436373635326636333666363436353235333233303733373437393663363532643632366336313633366232643330333033303330333033303265373337363637\"></p>\n<h1>aiosocketpool</h1>\n<p>An asyncio-compatible socket pool. Simple, compact, easily extended.</p>\n<p>If your application needs to connect to many remote hosts simultaneously (and often), it probably\nmakes sense to keep connections open and re-use them rather than establishing a new connection for\nevery request. Combining an <code>asyncio</code> event loop and a socket pool might be the way to go!</p>\n<p>Based on <a href=\"https://github.com/benoitc/socketpool\" rel=\"nofollow\">socketpool</a>.</p>\n<p><strong>Requires Python 3.7 or above.</strong></p>\n<h2>Examples</h2>\n<p>Run a simple TCP echo server in a background thread, using the <code>asyncio</code> library.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n\n<span class=\"c1\"># start a new event loop running in a background thread</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_loop_forever</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"BackgroundEventLoop\"</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run_loop_forever</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">loop</span><span class=\"p\">],</span> <span class=\"n\">daemon</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># run a tcp echo server using asyncio in the background event loop</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">echo_handler</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">):</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n    <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">echo_server</span><span class=\"p\">(</span><span class=\"n\">tcp_port</span><span class=\"p\">):</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">echo_handler</span><span class=\"p\">,</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">tcp_port</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run_coroutine_threadsafe</span><span class=\"p\">(</span><span class=\"n\">echo_server</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">),</span> <span class=\"n\">loop</span><span class=\"p\">)</span>\n</pre>\n<p>Create a new TCP connection pool in the main thread, get a connection, and send and receive data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiosocketpool</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncConnectionPool</span><span class=\"p\">,</span> <span class=\"n\">AsyncTcpConnector</span>\n\n\n<span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">AsyncConnectionPool</span><span class=\"p\">(</span>\n    <span class=\"n\">factory</span><span class=\"o\">=</span><span class=\"n\">AsyncTcpConnector</span><span class=\"p\">,</span>\n    <span class=\"n\">reap_connections</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># a background task will destroy old and idle connections</span>\n    <span class=\"n\">max_lifetime</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"c1\"># connections will remain idle at most 10 seconds</span>\n    <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"c1\"># we will maintain at most 10 idle connections in the pool</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">12345</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">await</span> <span class=\"n\">hello_world</span><span class=\"p\">()</span>\n</pre>\n<p>Create a bunch of connections and run them all concurrently.</p>\n<pre><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">):</span>\n    <span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">hello_world</span><span class=\"p\">()))</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6295176, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e203ab87641d15f09858a5cae15c9eca", "sha256": "151010a2118fefe2ad0c7d6bcca61fd27243b00f8317781c05660a6cdda8c849"}, "downloads": -1, "filename": "aiosocketpool-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e203ab87641d15f09858a5cae15c9eca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6263, "upload_time": "2019-12-13T19:59:14", "upload_time_iso_8601": "2019-12-13T19:59:14.002363Z", "url": "https://files.pythonhosted.org/packages/45/a8/748a18bc751ebf27cb303c88af5de96d69361c28dfdb701fe1c0c2a30f1d/aiosocketpool-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "72d497bb7b472858f783ddf8702bd915", "sha256": "530117a25ff8f2fb15492521ab2331b8a5ab0c46d857f25a98ec4845eddb56e1"}, "downloads": -1, "filename": "aiosocketpool-0.0.2.tar.gz", "has_sig": false, "md5_digest": "72d497bb7b472858f783ddf8702bd915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6686, "upload_time": "2019-12-13T20:06:07", "upload_time_iso_8601": "2019-12-13T20:06:07.315585Z", "url": "https://files.pythonhosted.org/packages/a3/fd/37656e834221f71c6ed5816f86609be22da5977667056455c37ced4c144d/aiosocketpool-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "72d497bb7b472858f783ddf8702bd915", "sha256": "530117a25ff8f2fb15492521ab2331b8a5ab0c46d857f25a98ec4845eddb56e1"}, "downloads": -1, "filename": "aiosocketpool-0.0.2.tar.gz", "has_sig": false, "md5_digest": "72d497bb7b472858f783ddf8702bd915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6686, "upload_time": "2019-12-13T20:06:07", "upload_time_iso_8601": "2019-12-13T20:06:07.315585Z", "url": "https://files.pythonhosted.org/packages/a3/fd/37656e834221f71c6ed5816f86609be22da5977667056455c37ced4c144d/aiosocketpool-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:46 2020"}