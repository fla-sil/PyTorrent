{"info": {"author": "Thomas Khyn", "author_email": "thomas@ksytek.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Multimedia :: Graphics :: Editors :: Vector-Based", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Software Development :: Build Tools"], "description": "pyconizr\n========\n\n|copyright| 2014 Thomas Khyn\n\nPython package to generate sprites from SVG icons\n\nThis package takes its inspiration from Iconizr_ and grunt-iconizr_ by\nJoschi Kuphal.\n\nFrom Joschi's words, Iconizr ...::\n\n   ... takes a folder of SVG images and creates a CSS icon kit out of them.\n   Depending on the client's capabilities, icons are served as SVG / PNG\n   sprite or embedded data URIs. iconizr creates suitable CSS / Sass / LESS\n   etc. resources and a JavaScript loader for easy integration into your\n   HTML documents.\n\nNot all the functionnalities from the original Iconizr are implemented yet,\nbut most of them are here.\n\nWorks on Python 2.6 and 2.7.\n\n\nInstallation\n------------\n\nAs straighforward as it can be, using ``pip``::\n\n   pip install pyconizr\n\n\nRequirements\n------------\n\nPyconizr will install all the required dependencies, except Cairo and librsvg\nand their python bindings, which are needed to generate PNG images. Please make\nsure they are installed in your environment if you want to use the pyconizr's\nPNG functionalities.\n\nIf you are on Windows, the quickest way to install them is to use either PyGTK_\n(for python 2.6 and 2.7) or PyGI_ (for python 2.7).\n\n\n\nUsage\n-----\n\nFrom the command line::\n\n   pyconizr [options]\n\nFrom python::\n\n   from pyconizr import iconize\n   iconize(option1=val1, option2=val2, ...)\n\n\nDefault behavior\n----------------\n\nBy default, pyconizr will:\n   - optimize every SVG file in the current working directory using scour_\n     (without overwriting them)\n   - concatenate them to create an optimized SVG sprite in\n     current_working_dir/sprites/sourcedir_name.svg\n   - create a PNG sprite from the SVG sprite as\n     current_working_dir/sprites/sourcedir_name.png\n   - create a CSS/SCSS/whatever file at current_working_dir/sourcedir_name\n\nThis can be configured using the following options.\n\nOptions\n-------\n\nAll options should be prefixed by ``--`` in the command line (if not using the\nshortcut), or should be provided as keyword arguments to the ``iconize``\nfunction.\n\nin, -i\n   The input directory or files (as a wildcard) that should be used to generate\n   the sprite.\n   Only valid SVG files will be taken into account, so there is no need to add\n   a \\*.svg wildcard (\"dir/\\*\" will only include the \\*.svg files in dir).\n   Defaults to the current working directory.\n\nout, -o\n   The output path for the generated output file (CSS, SASS...). The directory\n   will be created if it does not already exist.\n   Defaults to the 'out' directory in the current working directory.\n\nout-sprite, -s\n   The output path for the SVG and PNG sprites. The directory will be created\n   if it does not already exist.\n   Defaults to the 'sprites' directory in the output directory.\n\nout-icons\n   The output path for the optimized SVG and rasterized PNG individual icons.\n   If left blank, no icons will be generated. If defined, a supplementary\n   output file will be generated with a '-icons' suffix.\n   Defaults to blank (no icons generated).\n\nrender, -r\n   How the output should be rendered. Can be:\n     - css: for CSS output [default]\n     - scss: for SASS output\n     - no or ``Falsy`` from python: no output (to simply generate the sprite)\n     - a path to a custom Jinja2_ template file for a 100% custom output (see\n       existing templates for available variables)\n\nstatic-url\n   The absolute URL to the static directory. Used for links towards sprites and\n   icons files from within the generated outputs.\n   Defaults to ``/static``\n\nsprites-url\n   The absolute or relative (to static-url) URL to the sprites directory. Used\n   for links towards sprite files.\n   Defaults to ``sprites``\n\nicons-url\n   The absolute or relative (to static-url) URL to the icons directory. Used\n   for links towards individual icons. Not used if out-icons is not defined.\n   Defaults to ``icons``\n\npadding\n   Padding around the icons, in pixels.\n   Defaults to ``0``.\n\nlayout\n   The sprite layout. Can be vertical, horizontal or diagonal.\n   Defaults to ``vertical``.\n\npng/nopng\n   By default, png fallbacks will be generated. When using the ``iconize``,\n   function, use ``png=False`` to disable the behavior. With the command line,\n   use ``--nopng``.\n   Defaults to ``True``\n\ndata\n   Should SVG and PNG images be linked as dataURIs? Remember that a page loads\n   faster (thanks to caching vs dataURI decoding) if the CSS does not use\n   dataURIs.\n   Defaults to ``False``\n\nclass\n   A common CSS class for all the icons in the sprite.\n   Default to ``None``.\n\nselectors\n   Comma-separated list of selectors that can be embedded in icons filenames,\n   using the ``_`` separator. For example, there a file name_hover.svg will be\n   taken as the hovered version of the icon name.\n   Defaults to ``hover,target,active``\n\nunit\n   The unit to be used for the ``background-position`` property. Only supposed\n   to work with ``px`` and ``%``.\n   Defaults to ``px``\n\nscour-*\n   All the options from scour_, using the 'scour-' prefix. For example,\n   'strip-xml-prolog' becomes 'scour-strip-xml-prolog'.\n   Defaults to best possible optimisation parameters for sprite generation.\n\n   There are 2 command-line options added for scour parameters:\n\n      scour-disable-comment-stripping\n\n         Pyconizr enables comment stripping by default. When using the\n         ``iconize`` function, use ``enable_comment_stripping=False`` to\n         disable this feature. From the command line you need to use\n         ``--scour-disable-comment-stripping``\n\n      scour-verbose\n\n         Pyconizr runs scour in quiet mode by default. If you need to see\n         scour's non-error output, use ``quiet=False`` with the ``iconize``\n         function, or ``--scour-verbose`` from the command line.\n\n\n.. |copyright| unicode:: 0xA9\n\n.. _Iconizr: https://github.com/jkphl/iconizr\n.. _grunt-iconizr: https://github.com/jkphl/grunt-iconizr\n.. _PyGTK: http://www.pygtk.org/downloads.html\n.. _PyGI: http://sourceforge.net/projects/pygobjectwin32/\n.. _scour: https://github.com/oberstet/scour\n.. _Jinja2: http://jinja.pocoo.org", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/tkhyn/pyconizr/", "keywords": "iconizr,SVG,PNG,sprite", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyconizr", "package_url": "https://pypi.org/project/pyconizr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyconizr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/tkhyn/pyconizr/"}, "release_url": "https://pypi.org/project/pyconizr/0.1b2/", "requires_dist": null, "requires_python": null, "summary": "Generate sprites from SVG icons", "version": "0.1b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>\u00a9 2014 Thomas Khyn</p>\n<p>Python package to generate sprites from SVG icons</p>\n<p>This package takes its inspiration from <a href=\"https://github.com/jkphl/iconizr\" rel=\"nofollow\">Iconizr</a> and <a href=\"https://github.com/jkphl/grunt-iconizr\" rel=\"nofollow\">grunt-iconizr</a> by\nJoschi Kuphal.</p>\n<p>From Joschi\u2019s words, Iconizr \u2026:</p>\n<pre>... takes a folder of SVG images and creates a CSS icon kit out of them.\nDepending on the client's capabilities, icons are served as SVG / PNG\nsprite or embedded data URIs. iconizr creates suitable CSS / Sass / LESS\netc. resources and a JavaScript loader for easy integration into your\nHTML documents.\n</pre>\n<p>Not all the functionnalities from the original Iconizr are implemented yet,\nbut most of them are here.</p>\n<p>Works on Python 2.6 and 2.7.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>As straighforward as it can be, using <tt>pip</tt>:</p>\n<pre>pip install pyconizr\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Pyconizr will install all the required dependencies, except Cairo and librsvg\nand their python bindings, which are needed to generate PNG images. Please make\nsure they are installed in your environment if you want to use the pyconizr\u2019s\nPNG functionalities.</p>\n<p>If you are on Windows, the quickest way to install them is to use either <a href=\"http://www.pygtk.org/downloads.html\" rel=\"nofollow\">PyGTK</a>\n(for python 2.6 and 2.7) or <a href=\"http://sourceforge.net/projects/pygobjectwin32/\" rel=\"nofollow\">PyGI</a> (for python 2.7).</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>From the command line:</p>\n<pre>pyconizr [options]\n</pre>\n<p>From python:</p>\n<pre>from pyconizr import iconize\niconize(option1=val1, option2=val2, ...)\n</pre>\n</div>\n<div id=\"default-behavior\">\n<h2>Default behavior</h2>\n<dl>\n<dt>By default, pyconizr will:</dt>\n<dd><ul>\n<li>optimize every SVG file in the current working directory using <a href=\"https://github.com/oberstet/scour\" rel=\"nofollow\">scour</a>\n(without overwriting them)</li>\n<li>concatenate them to create an optimized SVG sprite in\ncurrent_working_dir/sprites/sourcedir_name.svg</li>\n<li>create a PNG sprite from the SVG sprite as\ncurrent_working_dir/sprites/sourcedir_name.png</li>\n<li>create a CSS/SCSS/whatever file at current_working_dir/sourcedir_name</li>\n</ul>\n</dd>\n</dl>\n<p>This can be configured using the following options.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<p>All options should be prefixed by <tt><span class=\"pre\">--</span></tt> in the command line (if not using the\nshortcut), or should be provided as keyword arguments to the <tt>iconize</tt>\nfunction.</p>\n<dl>\n<dt>in, -i</dt>\n<dd>The input directory or files (as a wildcard) that should be used to generate\nthe sprite.\nOnly valid SVG files will be taken into account, so there is no need to add\na *.svg wildcard (\u201cdir/*\u201d will only include the *.svg files in dir).\nDefaults to the current working directory.</dd>\n<dt>out, -o</dt>\n<dd>The output path for the generated output file (CSS, SASS\u2026). The directory\nwill be created if it does not already exist.\nDefaults to the \u2018out\u2019 directory in the current working directory.</dd>\n<dt>out-sprite, -s</dt>\n<dd>The output path for the SVG and PNG sprites. The directory will be created\nif it does not already exist.\nDefaults to the \u2018sprites\u2019 directory in the output directory.</dd>\n<dt>out-icons</dt>\n<dd>The output path for the optimized SVG and rasterized PNG individual icons.\nIf left blank, no icons will be generated. If defined, a supplementary\noutput file will be generated with a \u2018-icons\u2019 suffix.\nDefaults to blank (no icons generated).</dd>\n<dt>render, -r</dt>\n<dd><dl>\n<dt>How the output should be rendered. Can be:</dt>\n<dd><ul>\n<li>css: for CSS output [default]</li>\n<li>scss: for SASS output</li>\n<li>no or <tt>Falsy</tt> from python: no output (to simply generate the sprite)</li>\n<li>a path to a custom <a href=\"http://jinja.pocoo.org\" rel=\"nofollow\">Jinja2</a> template file for a 100% custom output (see\nexisting templates for available variables)</li>\n</ul>\n</dd>\n</dl>\n</dd>\n<dt>static-url</dt>\n<dd>The absolute URL to the static directory. Used for links towards sprites and\nicons files from within the generated outputs.\nDefaults to <tt>/static</tt></dd>\n<dt>sprites-url</dt>\n<dd>The absolute or relative (to static-url) URL to the sprites directory. Used\nfor links towards sprite files.\nDefaults to <tt>sprites</tt></dd>\n<dt>icons-url</dt>\n<dd>The absolute or relative (to static-url) URL to the icons directory. Used\nfor links towards individual icons. Not used if out-icons is not defined.\nDefaults to <tt>icons</tt></dd>\n<dt>padding</dt>\n<dd>Padding around the icons, in pixels.\nDefaults to <tt>0</tt>.</dd>\n<dt>layout</dt>\n<dd>The sprite layout. Can be vertical, horizontal or diagonal.\nDefaults to <tt>vertical</tt>.</dd>\n<dt>png/nopng</dt>\n<dd>By default, png fallbacks will be generated. When using the <tt>iconize</tt>,\nfunction, use <tt>png=False</tt> to disable the behavior. With the command line,\nuse <tt><span class=\"pre\">--nopng</span></tt>.\nDefaults to <tt>True</tt></dd>\n<dt>data</dt>\n<dd>Should SVG and PNG images be linked as dataURIs? Remember that a page loads\nfaster (thanks to caching vs dataURI decoding) if the CSS does not use\ndataURIs.\nDefaults to <tt>False</tt></dd>\n<dt>class</dt>\n<dd>A common CSS class for all the icons in the sprite.\nDefault to <tt>None</tt>.</dd>\n<dt>selectors</dt>\n<dd>Comma-separated list of selectors that can be embedded in icons filenames,\nusing the <tt>_</tt> separator. For example, there a file name_hover.svg will be\ntaken as the hovered version of the icon name.\nDefaults to <tt>hover,target,active</tt></dd>\n<dt>unit</dt>\n<dd>The unit to be used for the <tt><span class=\"pre\">background-position</span></tt> property. Only supposed\nto work with <tt>px</tt> and <tt>%</tt>.\nDefaults to <tt>px</tt></dd>\n<dt>scour-*</dt>\n<dd><p>All the options from <a href=\"https://github.com/oberstet/scour\" rel=\"nofollow\">scour</a>, using the \u2018scour-\u2018 prefix. For example,\n\u2018strip-xml-prolog\u2019 becomes \u2018scour-strip-xml-prolog\u2019.\nDefaults to best possible optimisation parameters for sprite generation.</p>\n<p>There are 2 command-line options added for scour parameters:</p>\n<blockquote>\n<p>scour-disable-comment-stripping</p>\n<blockquote>\nPyconizr enables comment stripping by default. When using the\n<tt>iconize</tt> function, use <tt>enable_comment_stripping=False</tt> to\ndisable this feature. From the command line you need to use\n<tt><span class=\"pre\">--scour-disable-comment-stripping</span></tt></blockquote>\n<p>scour-verbose</p>\n<blockquote>\nPyconizr runs scour in quiet mode by default. If you need to see\nscour\u2019s non-error output, use <tt>quiet=False</tt> with the <tt>iconize</tt>\nfunction, or <tt><span class=\"pre\">--scour-verbose</span></tt> from the command line.</blockquote>\n</blockquote>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 1399578, "releases": {"0.1a4": [{"comment_text": "", "digests": {"md5": "42afe7de500ac963df97df9ec086a54c", "sha256": "b4329d1ca0fb79a8bd3f0a2cc301c642d7d11dfb7b8ae6e2203225e81bc08804"}, "downloads": -1, "filename": "pyconizr-0.1a4-py2.7.egg", "has_sig": false, "md5_digest": "42afe7de500ac963df97df9ec086a54c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 27723, "upload_time": "2014-07-19T00:01:38", "upload_time_iso_8601": "2014-07-19T00:01:38.749506Z", "url": "https://files.pythonhosted.org/packages/d0/25/9a82148bdebd49332f2aa20276eee6bfdcd75ad83f97571d3fb6a7ace815/pyconizr-0.1a4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "886a87306576898b5671a85a985610e7", "sha256": "508e65ccd27e067e66b7935bb0c7f8a2681eaad67d8862bbbebcd34867ee2ca2"}, "downloads": -1, "filename": "pyconizr-0.1a4.win32.exe", "has_sig": false, "md5_digest": "886a87306576898b5671a85a985610e7", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 219345, "upload_time": "2014-07-19T00:04:00", "upload_time_iso_8601": "2014-07-19T00:04:00.885584Z", "url": "https://files.pythonhosted.org/packages/f0/5c/8e2a063df7821ed58175f2b4452dabe0510d8f8d661c6ff9678e91097506/pyconizr-0.1a4.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cf706949dd4a523e6dd97012387a839", "sha256": "e99958f42ed3dccceb9929458c9b12135e90bcb39636475147564ac4399ee5c0"}, "downloads": -1, "filename": "pyconizr-0.1a4.zip", "has_sig": false, "md5_digest": "6cf706949dd4a523e6dd97012387a839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20712, "upload_time": "2014-07-19T00:00:15", "upload_time_iso_8601": "2014-07-19T00:00:15.802189Z", "url": "https://files.pythonhosted.org/packages/c1/08/277a0f86d35f8a9a94ecec75d960609bab8ee510e2d959d6357cd06ee6cb/pyconizr-0.1a4.zip", "yanked": false}], "0.1a5": [{"comment_text": "", "digests": {"md5": "da96ca38d9aa36d0b6d34ca227f74f6f", "sha256": "9d07e8c20eeefb738eff34ceb6bbb5498a900c7327c9fe225e9bab02f022850d"}, "downloads": -1, "filename": "pyconizr-0.1a5-py2.7.egg", "has_sig": false, "md5_digest": "da96ca38d9aa36d0b6d34ca227f74f6f", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 28079, "upload_time": "2014-08-06T07:58:11", "upload_time_iso_8601": "2014-08-06T07:58:11.667258Z", "url": "https://files.pythonhosted.org/packages/05/c7/5db5ee76cd4335737e334b5903b835d2a7453d35cce72796e69f48a72ad0/pyconizr-0.1a5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ea9deb9ad5c5be5ab7b6ed14dbb8d91", "sha256": "6df8861329aa769e1bc5100c58c339aec679e5b2479f48297d2f753c125081cb"}, "downloads": -1, "filename": "pyconizr-0.1a5.zip", "has_sig": false, "md5_digest": "2ea9deb9ad5c5be5ab7b6ed14dbb8d91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20909, "upload_time": "2014-08-06T07:57:58", "upload_time_iso_8601": "2014-08-06T07:57:58.431137Z", "url": "https://files.pythonhosted.org/packages/79/32/824c917d64bf004423b51fa49dd50c97da9df3d6dd7f39e47a3704c162ad/pyconizr-0.1a5.zip", "yanked": false}], "0.1b1": [{"comment_text": "", "digests": {"md5": "8cb9495ec4b5188a84f90d1c73571c87", "sha256": "394e9c7763ac024f1eb64625b188dbc4073ef0f676439c62d76f643f5960f7a0"}, "downloads": -1, "filename": "pyconizr-0.1b1.zip", "has_sig": false, "md5_digest": "8cb9495ec4b5188a84f90d1c73571c87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22103, "upload_time": "2014-08-17T11:39:17", "upload_time_iso_8601": "2014-08-17T11:39:17.472111Z", "url": "https://files.pythonhosted.org/packages/5b/87/b61459d6a5b227cfd1bfd3698a278067a5f94a328fe0217db8c9d8aa775b/pyconizr-0.1b1.zip", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "1990f7c63ade36a29cd3c3324006d17b", "sha256": "8365674b87e3b33ad9898f22ff61f6dc357ca0d4d18a477adff1e3359d7950c5"}, "downloads": -1, "filename": "pyconizr-0.1b2.zip", "has_sig": false, "md5_digest": "1990f7c63ade36a29cd3c3324006d17b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23485, "upload_time": "2015-01-28T04:24:33", "upload_time_iso_8601": "2015-01-28T04:24:33.382816Z", "url": "https://files.pythonhosted.org/packages/33/c0/d73086b72b734ed2ad9eebf47645733263b2262d70a474f331c60470dbee/pyconizr-0.1b2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1990f7c63ade36a29cd3c3324006d17b", "sha256": "8365674b87e3b33ad9898f22ff61f6dc357ca0d4d18a477adff1e3359d7950c5"}, "downloads": -1, "filename": "pyconizr-0.1b2.zip", "has_sig": false, "md5_digest": "1990f7c63ade36a29cd3c3324006d17b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23485, "upload_time": "2015-01-28T04:24:33", "upload_time_iso_8601": "2015-01-28T04:24:33.382816Z", "url": "https://files.pythonhosted.org/packages/33/c0/d73086b72b734ed2ad9eebf47645733263b2262d70a474f331c60470dbee/pyconizr-0.1b2.zip", "yanked": false}], "timestamp": "Fri May  8 03:08:08 2020"}